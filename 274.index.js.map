{"version":3,"sources":["webpack://rock-raiders-web/./site/clearcache/clearCacheButton.css","webpack://rock-raiders-web/./site/github/github.css","webpack://rock-raiders-web/./site/clearcache/clearCacheButton.css?9693","webpack://rock-raiders-web/./site/clearcache/ClearCacheButton.ts","webpack://rock-raiders-web/./site/github/github.css?bbb3","webpack://rock-raiders-web/./site/github/github-box.ts","webpack://rock-raiders-web/./site/modal/WadFileSelectionModal.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimationEntityType.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimationEntityUpgrade.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimClip.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimSubObj.ts","webpack://rock-raiders-web/./src/screen/DebugHelper.ts","webpack://rock-raiders-web/./src/game/model/EntityType.ts","webpack://rock-raiders-web/./src/event/EventBus.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTool.ts","webpack://rock-raiders-web/./src/game/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTraining.ts","webpack://rock-raiders-web/./src/gui/radar/MapSurfaceRect.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityIdentifier.ts","webpack://rock-raiders-web/./src/game/model/job/JobState.ts","webpack://rock-raiders-web/./src/event/GuiCommand.ts","webpack://rock-raiders-web/./src/game/model/material/BarrierLocation.ts","webpack://rock-raiders-web/./src/event/WorldEvents.ts","webpack://rock-raiders-web/./src/game/model/activities/BaseActivity.ts","webpack://rock-raiders-web/./src/game/model/activities/AnimEntityActivity.ts","webpack://rock-raiders-web/./src/game/model/activities/BarrierActivity.ts","webpack://rock-raiders-web/./src/game/model/activities/RaiderActivity.ts","webpack://rock-raiders-web/./src/game/model/PathTarget.ts","webpack://rock-raiders-web/./src/game/model/job/Job.ts","webpack://rock-raiders-web/./src/game/model/job/ShareableJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/CompletePowerPathJob.ts","webpack://rock-raiders-web/./src/game/model/building/BuildingSite.ts","webpack://rock-raiders-web/./src/game/model/map/WallType.ts","webpack://rock-raiders-web/./src/game/model/map/SurfaceGeometry.ts","webpack://rock-raiders-web/./src/game/model/building/BuildPlacementMarkerMesh.ts","webpack://rock-raiders-web/./src/game/model/building/BuildPlacementMarker.ts","webpack://rock-raiders-web/./src/game/model/building/BuildingPathTarget.ts","webpack://rock-raiders-web/./src/game/model/job/raider/RaiderJob.ts","webpack://rock-raiders-web/./src/game/model/job/raider/GetToolJob.ts","webpack://rock-raiders-web/./src/game/model/job/raider/MoveJob.ts","webpack://rock-raiders-web/./src/game/model/GameSelection.ts","webpack://rock-raiders-web/./src/game/model/map/astar.ts","webpack://rock-raiders-web/./src/event/WorldLocationEvent.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimationGroup.ts","webpack://rock-raiders-web/./src/game/model/job/carry/CarryJob.ts","webpack://rock-raiders-web/./src/game/model/job/carry/CarryDynamiteJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ClearRubbleJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/DrillJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ReinforceJob.ts","webpack://rock-raiders-web/./src/scene/SceneEntity.ts","webpack://rock-raiders-web/./src/game/model/BaseEntity.ts","webpack://rock-raiders-web/./src/game/model/activities/BuildingActivity.ts","webpack://rock-raiders-web/./src/game/model/material/CarryPathTarget.ts","webpack://rock-raiders-web/./src/game/model/material/MaterialEntity.ts","webpack://rock-raiders-web/./src/game/model/material/Crystal.ts","webpack://rock-raiders-web/./src/game/model/activities/DynamiteActivity.ts","webpack://rock-raiders-web/./src/game/model/material/Dynamite.ts","webpack://rock-raiders-web/./src/game/model/material/Ore.ts","webpack://rock-raiders-web/./src/game/model/map/Surface.ts","webpack://rock-raiders-web/./src/game/TerrainLoader.ts","webpack://rock-raiders-web/./src/game/model/map/TerrainPath.ts","webpack://rock-raiders-web/./src/game/model/map/Terrain.ts","webpack://rock-raiders-web/./src/game/SceneManager.ts","webpack://rock-raiders-web/./src/scene/SceneMesh.ts","webpack://rock-raiders-web/./src/resource/LWSCLoader.ts","webpack://rock-raiders-web/./src/scene/SequenceTextureMaterial.ts","webpack://rock-raiders-web/./src/resource/LWOLoader.ts","webpack://rock-raiders-web/./src/resource/wadworker/InitLoadingMessage.ts","webpack://rock-raiders-web/./src/game/model/MoveState.ts","webpack://rock-raiders-web/./src/game/model/GameResult.ts","webpack://rock-raiders-web/./src/resource/ResourceManager.ts","webpack://rock-raiders-web/./src/resource/AnimEntityLoader.ts","webpack://rock-raiders-web/./src/game/EntityManager.ts","webpack://rock-raiders-web/./src/game/BeamUpAnimator.ts","webpack://rock-raiders-web/./src/game/model/material/Barrier.ts","webpack://rock-raiders-web/./src/game/model/job/carry/CarryFenceJob.ts","webpack://rock-raiders-web/./src/game/model/material/ElectricFence.ts","webpack://rock-raiders-web/./src/game/model/building/BuildingEntity.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Barracks.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Docks.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Geodome.ts","webpack://rock-raiders-web/./src/game/model/building/entities/GunStation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/OreRefinery.ts","webpack://rock-raiders-web/./src/game/model/building/entities/PowerStation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/TeleportBig.ts","webpack://rock-raiders-web/./src/game/model/building/entities/TeleportPad.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Toolstation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Upgrade.ts","webpack://rock-raiders-web/./src/game/model/building/PowerPathBuildingSite.ts","webpack://rock-raiders-web/./src/game/model/job/raider/EatJob.ts","webpack://rock-raiders-web/./src/game/model/job/raider/TrainRaiderJob.ts","webpack://rock-raiders-web/./src/game/model/job/raider/UpgradeRaiderJob.ts","webpack://rock-raiders-web/./src/game/model/job/VehicleCallManJob.ts","webpack://rock-raiders-web/./src/game/model/EntityStep.ts","webpack://rock-raiders-web/./src/game/model/MovableEntity.ts","webpack://rock-raiders-web/./src/game/model/FulfillerEntity.ts","webpack://rock-raiders-web/./src/game/model/vehicle/VehicleEntity.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/BullDozer.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/Hoverboard.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/LargeCat.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/LargeDigger.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/LargeMlp.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/SmallCat.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/SmallDigger.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/SmallHeli.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/SmallMlp.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/SmallTruck.ts","webpack://rock-raiders-web/./src/game/model/vehicle/VehicleActivity.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/WalkerDigger.ts","webpack://rock-raiders-web/./src/game/GuiManager.ts","webpack://rock-raiders-web/./src/game/model/activities/MonsterActivity.ts","webpack://rock-raiders-web/./src/game/model/activities/RockMonsterActivity.ts","webpack://rock-raiders-web/./src/game/model/monster/Monster.ts","webpack://rock-raiders-web/./src/game/model/monster/Bat.ts","webpack://rock-raiders-web/./src/game/model/monster/IceMonster.ts","webpack://rock-raiders-web/./src/game/model/monster/LavaMonster.ts","webpack://rock-raiders-web/./src/game/model/monster/RockMonster.ts","webpack://rock-raiders-web/./src/game/model/monster/SmallSpider.ts","webpack://rock-raiders-web/./src/game/model/raider/Raider.ts","webpack://rock-raiders-web/./src/game/ObjectListLoader.ts","webpack://rock-raiders-web/./src/event/EventTypeEnum.ts","webpack://rock-raiders-web/./src/game/Supervisor.ts","webpack://rock-raiders-web/./src/core/NerpRunner.ts","webpack://rock-raiders-web/./src/core/NerpParser.ts","webpack://rock-raiders-web/./src/game/WorldManager.ts","webpack://rock-raiders-web/./src/screen/layer/ScreenLayer.ts","webpack://rock-raiders-web/./src/event/GameKeyboardEvent.ts","webpack://rock-raiders-web/./src/event/GamePointerEvent.ts","webpack://rock-raiders-web/./src/event/GameWheelEvent.ts","webpack://rock-raiders-web/./src/event/EventManager.ts","webpack://rock-raiders-web/./src/screen/layer/CursorLayer.ts","webpack://rock-raiders-web/./src/screen/BaseScreen.ts","webpack://rock-raiders-web/./src/screen/layer/GameLayer.ts","webpack://rock-raiders-web/./src/screen/layer/OffscreenLayer.ts","webpack://rock-raiders-web/./src/screen/layer/GuiMainLayer.ts","webpack://rock-raiders-web/./src/screen/layer/OverlayLayer.ts","webpack://rock-raiders-web/./src/screen/layer/SelectionLayer.ts","webpack://rock-raiders-web/./src/screen/GameScreen.ts","webpack://rock-raiders-web/./src/cfg/CfgHelper.ts","webpack://rock-raiders-web/./src/menu/MainMenuBaseItem.ts","webpack://rock-raiders-web/./src/menu/MainMenuIconButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLabelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLayer.ts","webpack://rock-raiders-web/./src/menu/MainMenuLevelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuPanel.ts","webpack://rock-raiders-web/./src/menu/MainMenuWindow.ts","webpack://rock-raiders-web/./src/menu/LevelSelectLayer.ts","webpack://rock-raiders-web/./src/screen/MainMenuScreen.ts","webpack://rock-raiders-web/./src/menu/RewardScreenButton.ts","webpack://rock-raiders-web/./src/screen/RewardScreen.ts","webpack://rock-raiders-web/./src/main.ts","webpack://rock-raiders-web/./src/screen/LoadingScreen.ts","webpack://rock-raiders-web/./src/params.ts"],"names":["___CSS_LOADER_EXPORT___","push","module","id","ClearCacheButton","parentId","this","rootElement","document","getElementById","appendChild","createElement","classList","add","button","innerText","onclick","indexedDB","deleteDatabase","location","reload","style","visibility","GithubBox","link","href","img","src","alt","textContent","WadFileSelectionModal","onStart","tabIndex","setAttribute","modalDialog","modalContent","modalHeader","modalTitle","modalBody","navTabList","navFileBtn","appendNavButton","navUrlBtn","navTabContent","appendNavFileTab","appendNavUrlTab","modal","backdrop","keyboard","parent","active","controlTarget","navBtn","type","String","labelledBy","navFileTab","appendNavTab","wad0File","appendWadFileGroup","wad1File","btnStartFile","addEventListener","disabled","wad0FileUrl","URL","createObjectURL","files","wad1FileUrl","filename","wadFileGroup","wadFileLabel","innerHTML","wadFileInput","required","navUrlTab","urlHint","wad0Url","appendWadUrlGroup","wad1Url","btnStartUrl","value","navTab","example","wadUrlGroup","wadUrlLabel","wadUrlInput","show","hide","getPath","url","strUrl","toString","replace","startsWith","substring","lastInd","lastIndexOf","getFilename","iGet","obj","keys","forEach","keyname","Object","filter","key","toLowerCase","map","decodeString","data","TextDecoder","decode","decodeFilepath","getRandomInclusive","min","max","Math","ceil","floor","random","getRandom","getRandomSign","clearTimeoutSafe","timeout","clearTimeout","clearIntervalSafe","interval","clearInterval","Array","prototype","element","indexOf","remove","index","splice","last","length","undefined","count","callback","counter","e","partition","left","right","a","Map","getOrUpdate","updateCallback","get","set","equalsIgnoreCase","other","GameState","numCrystal","numOre","numBrick","usedCrystals","neededCrystals","airLevel","requestedRaiders","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","discoveredCaverns","levelStartTime","levelStopTime","round","AnimationEntityType","scale","carryNullName","carryNullFrames","depositNullName","toolNullName","wheelMesh","wheelRadius","wheelNullName","drillNullName","driverNullName","cameraNullName","cameraNullFrames","mediumPolyBodies","highPolyBodies","fPPolyBodies","animations","upgradesByLevel","AnimationEntityUpgrade","upgradeFilepath","upgradeNullName","upgradeNullIndex","AnimClip","looping","transcoef","firstFrame","lastFrame","framesPerSecond","bodies","polyList","carryJoint","depositJoint","getToolJoint","wheelJoints","drillJoint","driverJoint","nullJoints","polyModel","animationTimeout","sfxAudioByFrame","frameIndex","onAnimationDone","durationTimeMs","body","p","position","copy","relPos","sub","pivot","rotation","relRot","relScale","hasOwnProperty","material","opacity","isArray","mat","setOpacity","playAudio","nextFrame","standardDurationTimeMs","that","timeoutTimeMs","setTimeout","animate","stopAudio","isPlaying","stop","play","f","degToRad","AnimSubObj","lowerName","parentObjInd","model","isNull","sfxName","sfxFrames","degX","degY","degZ","animationFrameIndex","infos","radVec","c","Stats","DebugHelper","stats","setMode","domElement","top","begin","end","EntityType","EventBus","event","blockedEvents","includes","eventKey","isLocal","console","log","workerListener","getListener","eventListener","RaiderTool","SurfaceType","options","shaping","matIndex","selectable","digable","reinforcable","cursor","Cursor","C","cursorFulfiller","statsDrillName","canCarryFence","connectsPath","mapSurfaceColor","assign","typeNum","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","error","GROUND","name","POWER_PATH","POWER_PATH_BUILDING_SITE","POWER_PATH_CONSTRUCTION","AllRaiderTools","DRILL","HAMMER","SHOVEL","SPANNER","FREEZERGUN","LASER","PUSHERGUN","BIRDSCARER","RaiderTraining","AllRaiderTrainings","DRIVER","ENGINEER","GEOLOGIST","PILOT","SAILOR","DEMOLITION","RaiderTrainingSites","BARRACKS","UPGRADE","GEODOME","TELEPORT_PAD","DOCKS","TOOLSTATION","RaiderTrainingStatsProperty","MapSurfaceRect","surface","x","y","surfaceColor","surfaceType","borderColor","reinforced","SelectPanelType","PriorityIdentifier","JobState","LocalEvent","GameEvent","super","SelectionChanged","entityMgr","selectPanelType","NONE","canDoTraining","everyHasTool","selection","getSelectPanelType","isGround","isPowerPath","isFloor","isSite","hasRubble","isDrillable","isDigable","isReinforcable","canPlaceFence","buildings","some","b","entityType","POWER_STATION","isUsable","someCarries","raiders","r","carries","everyHasMaxLevel","every","level","Levels","training","getTrainingSites","hasTraining","tool","hasTool","buildingCanUpgrade","building","canUpgrade","buildingCanSwitchPower","SelfPowered","PowerBuilding","vehicleHasCallManJob","vehicles","v","callManJob","allVehicleEmpty","driver","DeselectAll","AirLevelChanged","SetupPriorityList","priorityList","BuildingsChangedEvent","usableBuildingsByTypeAndLevel","perLevel","minLevel","result","RaidersChangedEvent","numRaiders","VehiclesChangedEvent","UpdateRadarTerrain","terrain","mapFocus","surfaces","forEachSurface","s","discovered","tileX","tileY","z","UpdateRadarSurface","surfaceRect","GuiCommand","CancelBuildMode","BarrierLocation","surfaceCenter","heading","clone","angle","PI","WorldEvent","entityKey","JobEvent","job","guiForward","JobCreateEvent","JobDeleteEvent","RequestedRaidersChanged","numRequestedRaiders","MaterialAmountChanged","usedCrystal","neededCrystal","totalOre","CavernDiscovered","OreFoundEvent","BaseActivity","activityKey","AnimEntityActivity","Stand","BarrierActivity","Short","Expand","Long","Teleport","RaiderActivity","Route","RunPanic","Drill","Walk","Reinforce","Reverse","TurnLeft","TurnRight","CantDo","Collect","Clear","Carry","CarryTurnLeft","CarryTurnRight","CarryStand","Dynamite","Place","Deposit","TeleportIn","Repair","rest","routeRubble","CarryRubble","Eat","FireLaser","GetUp","ThrownByRockMonster","Slip","Train","Recharge","Waiting1","Waiting2","Waiting3","Waiting4","Hoverboard","Standhoverboard","HitLefthoverboard","HitRighthoverboard","HitFronthoverboard","HitBackhoverboard","SMALLTRUCK","StandSMALLTRUCK","HitLeftSMALLTRUCK","HitRightSMALLTRUCK","HitFrontSMALLTRUCK","HitBackSMALLTRUCK","SMALLheli","StandSMALLheli","HitLeftSMALLheli","HitRightSMALLheli","HitFrontSMALLheli","HitBackSMALLheli","SMALLCAT","StandSMALLCAT","HitLeftSMALLCAT","HitRightSMALLCAT","HitFrontSMALLCAT","HitBackSMALLCAT","SMALLMLP","StandSMALLMLP","HitLeftSMALLMLP","HitRightSMALLMLP","HitFrontSMALLMLP","HitBackSMALLMLP","LARGECAT","StandLARGECAT","HitLeftLARGECAT","HitRightLARGECAT","HitFrontLARGECAT","HitBackLARGECAT","SMALLDIGGER","StandSMALLDIGGER","PathTarget","targetLocation","item","addToScene","Job","jobState","INCOMPLETE","COMPLETE","target","fulfiller","ShareableJob","CANCELED","stopJob","CompletePowerPathJob","placedItems","workplaces","getRandomPosition","onJobComplete","placed","removeFromScene","setSurfaceType","aiPriorityConstruction","BuildingSite","primarySurface","secondarySurface","primaryPathSurface","secondaryPathSurface","neededByType","assignedByType","onSiteByType","complete","canceled","setSite","needed","onAddToSite","checkComplete","resetTarget","neededType","buildingSites","BARRIER","changeActivity","CRYSTAL","ORE","world","getCenterWorld2D","placeDown","items","itemsOnSite","publishEvent","materials","placeMaterial","getPosition2D","clear","neighbors","find","n","site","isWalkable","WALL_TYPE","SurfaceGeometry","wallType","topLeftVertex","topRightVertex","bottomRightVertex","bottomLeftVertex","topLeftHeight","topRightHeight","bottomRightHeight","bottomLeftHeight","uvOffset","INVERTED_CORNER","WALL","WEIRD_CREVICE","Boolean","uv","bufferVertices","bufferNormals","addFaceAndNormals","normal","subVectors","cross","normalize","uvIndexes","bufferVertexUvs","i","bufferGeometry","BufferAttribute","Float32Array","copyVector3sArray","copyVector2sArray","BuildPlacementMarkerMesh","sceneMgr","standardColor","geometry","shininess","transparent","color","visible","primaryPosition","multiplyScalar","applyAxisAngle","isValid","setHex","getSurfaceFromWorld","create","BuildPlacementMarker","worldMgr","group","markers","buildingMarkerPrimary","buildingMarkerSecondary","powerPathMarkerPrimary","powerPathMarkerSecondary","waterPathMarker","sdx","sdz","lastCheck","buildModeSelection","buildingMarkerColor","pathMarkerColor","waterMarkerColor","addMarker","marker","worldPosition","updateAllMarker","markAsValid","hideAllMarker","getFloorPosition","sdxv","sdzv","abs","sign","atan2","updateState","secondaryBuildingPart","primaryPowerPath","secondaryPowerPath","waterPathSurface","allSurfacesAreGround","m","barrierLocations","getBarrierLocations","CostCrystal","neededOre","CostOre","closestToolstation","getClosestBuildingByType","getCenterWorld","spawnBarriers","spawnMaterials","centerPrimary","barrierOffset","centerSecondary","dx","dy","BuildingPathTarget","RaiderJob","raider","GetToolJob","toolstation","getPathTarget","getBuildingsByType","addTool","MoveJob","GameSelection","added","syncSelection","deselect","isInSelection","select","SoundManager","Sample","before","after","RAIDER","VEHICLE","BUILDING","SURFACE","isPrepared","setJob","getRequiredTool","getPosition","pathTo","node","curr","path","unshift","astar","graph","start","cleanDirty","heuristic","heuristics","manhattan","closest","openHeap","BinaryHeap","closestNode","h","markDirty","size","currentNode","pop","closed","il","neighbor","isWall","gScore","g","getCost","beenVisited","visited","rescoreElement","pos0","pos1","D2","sqrt","d1","d2","Graph","gridIn","nodes","grid","dirtyNodes","diagonal","row","GridNode","init","cleanNode","ret","weight","graphString","rowDebug","join","fromNeighbor","scoreFunction","content","sinkDown","bubbleUp","parentN","elemScore","child2N","child1N","child1Score","swap","child1","child2","WorldLocationEvent","CrystalFoundEvent","LandslideEvent","RaiderDiscoveredEvent","AnimationGroup","lwsFilepath","audioListener","ResourceManager","getResource","animation","LWSCLoader","parse","audio","setRefDistance","loop","then","audioBuffer","setBuffer","frame","polyPart","parentInd","CarryJob","actualTarget","getCarryTargets","getPriorityIdentifier","setTargetSite","getDropAction","canGatherItem","sceneEntity","lookAt","dropItem","gatherItem","CarryDynamiteJob","dynamite","ignite","ClearRubbleJob","lastRubblePositions","rubblePositions","surfaceRubblePositions","d","equals","reduceRubble","clearRubbleJob","aiPriorityClearing","DrillJob","digPositions","getDigPositions","surfaceDigPositions","onDrillComplete","aiPriorityDestruction","drillTimeInMsPerType","drillTime","drillTimeEntry","drillTimeMs","warn","ReinforceJob","reinforce","aiPriorityReinforce","SceneEntity","pickSphere","selectionFrame","boundingSphere","state","setFromObject","getBoundingSphere","radius","applyMatrix4","makeScale","pickSphereDiameter","pickSphereHeightOffset","getBoundingSphereCenter","pickSphereRadius","userData","createSelectionFrame","center","getCenter","pickSphereCenter","selectionFrameTextureSize","ctx","fillStyle","strength","fillRect","selectionFrameTexture","canvas","selectionMaterial","depthTest","selectionFrameSize","BaseEntity","aeFilename","floorOffset","animationEntityType","activity","getAnimationEntityType","listener","getHeading","radHeading","setHeading","scene","getDefaultActivity","lActivityKey","carriedChildren","children","onEnded","catch","BuildingActivity","Explode","Unpowered","CarryPathTarget","SiteCarryPathTarget","addItem","BuildingCarryPathTarget","getDropPosition2D","ORE_REFINERY","addItemToStorage","MaterialEntity","targetBuildingTypes","priorityIdentifier","targets","targetSite","positionPathTarget","updateTargets","sites","needs","getRandomDropPosition","getTargetBuildingTypes","t","isInvalid","onDiscover","materialsUndiscovered","createCarryJob","unAssign","Crystal","mesh2","getLwoModel","getMaterials","blending","depthWrite","mesh","emissive","aiPriorityCrystal","PowerCrystal","DynamiteActivity","Normal","TickDown","DYNAMITE","targetSurface","collapse","Ore","aiPriorityOre","PathMap","PredugMap","Surface","heightOffset","containedOres","containedCrystals","selected","drillJob","reinforceJob","dynamiteJob","surfaceRotation","seamLevel","fallinTimeout","fallinGrp","needsMeshUpdate","topLeftHeightOffset","topRightHeightOffset","bottomRightHeightOffset","bottomLeftHeightOffset","fence","hasPower","setDiscovered","floors","others","getSurface","caveFound","shift","o","isSupported","discoverSurface","drillPosition","vec","rotateAround","crystal","cancelJobs","discover","dropContainedOre","surf","updateSurfaceMeshes","floorGroup","updateWorldMatrix","playPositionalSample","dropAmount","safeRemoveJob","updateJobColor","updateTexture","surfLeft","surfTopLeft","surfTop","surfTopRight","surfRight","surfBottomRight","surfBottom","surfBottomLeft","isHighGround","surf1","surf2","surf3","force","surf0","avgHeight","args","reduce","l","updateGeometry","cancelReinforceJobs","updatePathfinding","getPathfindingWalkWeight","graphWalk","graphDrive","getPathfindingDriveWeight","graphFly","getPathFindingFlyWeight","graphSwim","getPathFindingSwimWeight","textureName","textureSet","texturebasename","updatePowerPathTexture","CORNER","forEachMaterial","dispose","texture","getTexture","isPath","bottom","pathSum","isSelectable","blocksPathSurface","digPosition","addScalar","intersect","intersectObject","terrainHeight","point","fallinLevel","originPos","targetPos","findFallInOrigin","findFallInTarget","scheduleFallin","targetX","targetY","createFallin","fallinPosition","rotateOnAxis","startAnimation","makeRubble","worldX","worldZ","sx","sy","dy0","interpolate","dy1","y0","y1","containedOre","oldSurfaceType","recursive","setHasPower","targetBuilding","sample","TerrainPath","locations","lengthSq","distanceToSquared","Terrain","width","height","roofGroup","cachedWalkPaths","cachedDrivePaths","cachedFlyPaths","cachedSwimPaths","setScalar","getSurfaceFromWorldXZ","getSurfaceOrNull","updateMesh","resetGraphWalk","findPath","cachedPaths","gridScale","maxRandomOffset","gridStart","gridEnd","cacheIdentifier","resultPath","startNode","endNode","freshPath","search","divideScalar","leftSurface","topSurface","rightSurface","bottomSurface","leftSurface2","topSurface2","rightSurface2","bottomSurface2","each","SceneManager","maxFps","debugHelper","renderer","antialias","setClearColor","camera","controls","mouseButtons","LEFT","MIDDLE","RIGHT","listenToKeyEvents","keyPanSpeed","rx","ry","raycaster","setFromCamera","getSelection","intersectObjects","isEmpty","intersects","object","vehicle","getEntity","r1x","r1y","r2x","r2y","startPoint","endPoint","Number","EPSILON","updateProjectionMatrix","updateMatrixWorld","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","setFromMatrixPosition","matrixWorld","unproject","vectemp1","vectemp2","vectemp3","deep","MAX_VALUE","frustum","planes","setFromCoplanarPoints","isInFrustum","selectionCenter","getWorldPosition","containsPoint","levelConf","ambientRgb","cfg","maxAmbRgb","normalizedRgb","ambientColor","ambientLight","cursorTorchlight","distance","buildMarker","setBuildModeSelection","tileSize","blockSize","themeName","terrainMap","pathMap","surfaceMap","predugMap","cryOreMap","fallinMap","erodeMap","blockPointersMap","surfaceTypeNum","getByNum","predugLevel","CAVERN_EXPOSED","SLUG_HOLE_EXPOSED","SLUG_HOLE_HIDDEN","CAVERN_HIDDEN","pathMapLevel","RUBBLE","currentCryOre","weightsWalk","weightsDrive","weightsFly","weightsSwim","colWalk","colDrive","colFly","colSwim","w","setFallinLevel","loadTerrain","countDiggables","countCrystals","countOres","renderInterval","setInterval","animRequest","requestAnimationFrame","renderStart","render","renderDone","cancelAnimationFrame","meshRegistry","setSize","floorY","getFloorHeight","SceneMesh","registerMesh","verbose","animationClip","lines","lineIndex","split","trim","sceneFileVersion","parseInt","line","parseFrameBlock","subObj","parseObjectBlock","lineParts","parseLine","frameStep","slice","nameParts","lenInfos","lenFrames","setFrameAndFollowing","numOfInformationChannels","numOfKeyframes","frameNum","setOpacityAndFollowing","fromArray","SequenceTextureMaterial","side","alphaToCoverage","textures","sequenceInterval","setTextures","seqNum","SURF_VTRN","getVector3AtOffset","view","offset","vector","getFloat32","LWOLoader","meshPath","entityPath","vertices","indices","uvs","chunkOffset","chunkSize","numVertices","vertexIndex","vertexOffset","buffer","textChunk","Uint8Array","totalNumIndices","numIndices","getInt16","materialIndex","addGroup","currentIndex","Uint16Array","faceIndices","Int16Array","COUNTER_CLOCKWISE","getUint8","materialName","textureFlags","textureSize","textureCenter","subChunkOffset","subChunkType","getInt32","subChunkSize","colorArray","flags","getUint16","edgeTransparencyThreshold","luminosity","emissiveIntensity","diffuse","specular","reflection","reflectivity","transparency","vLuminosity","vDiffuse","vSpecular","toArray","textureTypeName","textureValue","textureColorArray","textureFilepath","lTextureFilename","match","hasSequence","endsWith","sequenceBaseFilepath","getTexturesBySequenceName","getMeshTexture","XAXIS_BIT","groups","uvIndex","u","planarMapUVS","DataView","getUint32","fileSize","byteLength","ID4_SIZE","magic","chunkType","parsePoints","parseSurfaceNames","parsePolygons","parseSurface","setIndex","computeVertexNormals","InitLoadingMessage","MoveState","GameResultState","ResourceCache","startLoading","msg","worker","onmessage","WorkerMessageType","assetNames","assetName","resourceByName","assetObj","sfxKeys","sfxKey","sfxByKey","onAssetLoaded","onMessage","text","configuration","loadDefaultCursor","onInitialLoad","totalResources","onCacheMissed","loadAllCursor","loadingTimeSeconds","onLoadDone","postMessage","basename","lBasename","res","textureFilename","lMeshFilepath","imgData","lEntityFilepath","getImgDataFromSharedPaths","needsUpdate","ugSharedFilename","worldSharedFilename","cfgRoot","rootKey","lwoFilename","polyKey","parseAnimations","parseUpgrades","joint","upgrades0000","upgrade","lwoModel","root","act","file","isLws","upgrades","levelKey","upgradeValue","upgradeName","loadModels","lwoFilepath","lwoCache","lwoBuffer","Worker","EntityManager","buildingsUndiscovered","raidersUndiscovered","spiders","bats","rockMonsters","vehiclesUndiscovered","registerEventListener","deselectAll","buildingTypes","bt","getClosestBuilding","isTrainingSite","minDist","bPos","dist","minX","minZ","maxX","maxZ","discoverEntities","undiscovered","pos","OxygenCoef","getMaxRaiders","BeamUpAnimator","entity","animGroup","update","elapsedMs","Barrier","CarryFenceJob","ElectricFence","ELECTRIC_FENCE","BuildingEntity","powerSwitch","spawning","upgradeCostOre","upgradeCostBrick","crystalsInUse","inBeam","beamUpAnimator","pathTarget","flipXAxis","updatePowerState","worldPos","isPowered","setBuilding","hasMaxLevel","quantity","turnPowerOn","turnPowerOff","EngineSound","engineSound","playPositionalAudio","disableTeleportIn","getSurfaceFromWorld2D","secondaryOffset","pathOffset","createPickSphere","PickSphere","onPlaceDown","Barracks","Docks","Geodome","GunStation","GUNSTATION","OreRefinery","PowerStation","Powerstation","TeleportBig","TELEPORT_BIG","TeleportBIG","TeleportPad","Toolstation","Upgrade","PowerPathBuildingSite","EatJob","hungerLevel","TrainRaiderJob","getWorkplaces","getTrainingTargets","addTraining","UpgradeRaiderJob","VehicleCallManJob","addDriver","getRequiredTraining","aiPriorityGetIn","EntityStep","targetReached","MovableEntity","currentPath","paths","findPathToTarget","sort","TARGET_UNREACHABLE","nextLocation","firstLocation","step","determineStep","TARGET_REACHED","getRouteActivity","MOVED","targetWorld","stepLengthSq","entitySpeed","getSpeed","entitySpeedSq","clampLength","FulfillerEntity","workInterval","followUpJob","work","bind","workAudio","moveToClosestTarget","setActualWorkplace","carryItem","getCarryItem","getPositionPathTarget","pickupItem","isReadyToComplete","workActivity","getWorkActivity","completeJob","getWorkDuration","VehicleEntity","findDrivePath","dropDriver","beamUp","getDriverActivity","BullDozer","BULLDOZER","Bulldozer","HOVERBOARD","LargeCat","LARGE_CAT","findSwimPath","LargeDigger","LARGE_DIGGER","LargeMlp","LARGE_MLP","LargeMLP","SmallCat","SMALL_CAT","SmallDigger","SMALL_DIGGER","SmallHeli","SMALL_HELI","findFlyPath","SmallMlp","SMALL_MLP","Smallmlp","SmallTruck","SMALL_TRUCK","VehicleActivity","WalkerDigger","WALKER_DIGGER","walkerLegs","GuiManager","jobSupervisor","gameLayerCanvas","buildingCycleIndex","spawnFence","increase","createDrillJob","createReinforceJob","createDynamiteJob","createClearRubbleJob","setPowerSwitch","isDriving","createBuildingFromType","cancelSite","pads","teleportPad","createVehicleFromType","updatePriorities","zoom","zoomInEvent","WheelEvent","deltaY","dispatchEvent","ownerDocument","cycleBuilding","offsetTargetToCamera","rotationIndex","GameResult","numBuildings","numMaxRaiders","MonsterActivity","RockMonsterActivity","Emerge","Enter","Gather","Throw","Crumble","Stamp","Rest","ThrowMan","HitHard","WakeUp","Monster","moveTimeout","Bat","BAT","onMove","bat","findTarget","currentCenter","targetZ","IceMonster","ICE_MONSTER","LavaMonster","LAVA_MONSTER","RockMonster","ROCK_MONSTER","SmallSpider","SMALL_SPIDER","radiusSq","spider","onDeath","getRadiusSquare","Raider","tools","trainings","slipped","Pilot","findWalkPath","RouteSpeed","isOnPath","PathCoef","isOnRubble","slip","has","canDrill","MOUSE_BUTTON","POINTER_EVENT","KEY_EVENT","Supervisor","jobs","assignInterval","checkRubbleInterval","priorityIndexList","cancel","assignJobs","checkUnclearedRubble","availableJobs","j","isEnabled","getPriority","unemployedRaider","closestRaider","closestRaiderIndex","minDistance","closestToolRaider","closestToolRaiderIndex","minToolDistance","requiredTool","closestTrainingRaider","closestTrainingRaiderIndex","minTrainingDistance","closestTrainingArea","requiredTraining","hasRequiredTool","pathToJob","pathToTrainingSite","pathToToolstation","getWalkOutSurface","startSurface","rad","enabled","NerpRunner","debug","onLevelEnd","nerpInterval","registers","fill","timers","scriptLines","statements","macrosByName","labelsByName","halted","programCounter","messages","messagePermit","execute","register","num","isNaN","Error","checkRegister","checkRegisterValue","timer","Date","getTime","FAILED","messagesAllowed","typeName","setLevel","setBuildingsUpgradeLevel","arg1","arg2","arg3","messageNumber","arrowDisabled","txt","blockNum","methodName","methodArgs","setRegisterMatch","setR","addRegisterMatch","addR","getRegisterMatch","getR","setTimerMatch","setTimer","getTimerMatch","getTimer","lMethodName","memberName","getOwnPropertyNames","apply","conditionResult","executeStatement","expression","invoke","argValues","callMethod","comparator","jump","statement","label","NerpParser","nerpScript","nerpRunner","includeName","includedRunner","concat","firstLine","macroLines","mLine","append","macroLine","macroCall","replaceMacros","labelMatch","preProcess","labelName","macro","RegExp","number","opSplit","brackets","spaceSplit","jumpMatch","WorldManager","oxygenUpdateInterval","spawnRaiderInterval","oxygenRate","checkSpawnRaiders","reward","quota","caverns","nerpFile","nerpMessageFile","startExecution","updateOxygen","now","pauseExecution","diff","getOxygenSum","hasMaxRaiders","spawnBuildings","station","walkOutPos","ScreenLayer","alpha","withContext","background","context","getContext","zIndex","layerA","layerB","aIndex","bIndex","onRedraw","isActive","reset","redraw","windowX","windowY","clientRect","getBoundingClientRect","Promise","resolve","ScaledLayer","fixedWidth","fixedHeight","updateScale","scaleX","scaleY","cx","cy","toCanvasCoords","resize","GameKeyboardEvent","eventEnum","bubbles","code","GamePointerEvent","clientX","clientY","pointerType","ctrlKey","metaKey","shiftKey","GameWheelEvent","deltaX","deltaZ","EventManager","screen","gameCanvasContainer","isInRect","preventDefault","MOVE","DOWN","UP","eventType","nonBubblingClone","activeLayers","layers","compareZ","publishPointerEvent","publishKeyEvent","publishWheelEvent","handlePointerEvent","consumed","handleKeyEvent","handleWheelEvent","CursorLayer","currentCursor","timedCursor","cursorTimeout","activeCursor","changeCursor","disableAnimation","determineCursor","hasBuildModeSelection","setCursor","getCursor","enableAnimation","BaseScreen","ratio","focus","eventMgr","window","onWindowResize","cursorLayer","addLayer","layer","setZIndex","maxWidth","offsetWidth","maxHeight","offsetHeight","idealHeight","oldCanvas","removeChild","firstLayer","rect","GameLayer","rightDown","terrainIntersectionPoint","getTerrainIntersectionPoint","setTorchPosition","MAIN","createBuildingSite","SECONDARY","handleSecondaryClickForSelection","PointerEvent","getFirstByRay","selectedRaiders","manVehicleJob","closestTrainingSite","getClosestTrainingSite","assignSurfaceJob","clearJob","assignMoveJob","KeyboardEvent","generateUUID","OffscreenLayer","resolveCallbackByEventId","sendMessage","response","eventResponse","eventId","eventConsumed","delete","gameEvent","registerWorkerListener","message","transfer","transferControlToOffscreen","canvasX","canvasY","sendEventMessage","inputEvent","GuiMainLayer","onOptionsShow","messageState","OverlayLayer","onSetSpaceToContinue","onAbortGame","onRestartGame","objectiveText","objectiveBackImgCfg","SelectionLayer","selectStart","startSelection","changeSelection","selectEntities","screenX","screenY","clearRect","strokeStyle","lineWidth","strokeRect","entities","getSelectionByRay","getEntitiesInFrustum","GameScreen","gameLayer","selectionLayer","guiLayer","overlayLayer","guiMgr","showOptions","setSpaceToContinue","QUIT","restartLevel","levelName","setupAndStartLevel","fullName","setup","setupScene","objective","objectiveImage640x480","priorities","objectListConf","oListFile","values","olObject","BRICK","TV_CAMERA","xPos","yPos","buildingType","cameraOffset","cameraPos","createBuildingByName","disableStartTeleport","startMoving","startRandomMove","smallDigger","rockMonster","typename","loadObjectList","startScene","disposeScene","parseLabel","MainMenuBaseItem","scrollAffected","needsRedraw","hover","pressed","actionName","targetIndex","onHoverChange","MainMenuIconButton","imgNormal","imgHover","imgPressed","tooltip","getImage","autoCenter","draw","drawImage","MainMenuLabelButton","labelImgLo","labelImgHi","loFont","createTextImage","hiFont","MainMenuLayer","menuCfg","scrollY","scrollSpeedY","scrollInterval","getBitmapFont","menuImage","titleImage","itemsLabel","displayTitle","setScrollY","toScaledCoords","hovered","setReleased","absY","checkHover","canScroll","scrollAreaHeight","setScrollSpeedY","checkSetPressed","showMainMenu","selectLevel","pow","scrollYBefore","MainMenuLevelButton","levelCfg","imgActive","imgInactive","imgCross","unlocked","frontEndX","frontEndY","menuBMP","frontEndOpen","MainMenuPanel","area","putImageData","getImageData","MainMenuWindow","font","imgFirstLine","imgSecondLine","LevelSelectLayer","modeLevel","levelsCfg","levelTextCfg","LevelTextCfg","panelImgData","panelPos","levelTextWindow","getDefaultFont","setFirstLine","tutorial","levelsByName","levelButton","setSecondLine","winCfg","panelCfg","MainMenuScreen","onLevelSelected","menus","title","menu","RewardScreenButton","conf","imgNormalFilepath","imgHoverFilepath","imgPressedFilepath","imgDisabledFilepath","imgDisabled","RewardScreen","resultIndex","resultLastIndex","images","boxes","fonts","texts","uncoverTimeout","resultValues","titleFont","backgroundImg","wallpaper","filePath","boxImages","fontKey","labelFont","backFont","resultsLayer","btnSave","btnAdvance","descriptionTextLayer","btnLayer","saveButton","advanceButton","onAdvance","resultText","quitText","completeText","failedText","percentString","timeString","gameTimeSeconds","calcScore","rewardConfig","importance","scoreCrystals","crystals","Infinity","scoreTimer","scoreCaverns","scoreConstructions","constructions","scoreOxygen","oxygen","scoreFigures","figures","uncoverResult","gameResultTextImg","box","levelFullNameImg","vertSpacing","descriptionTextImg","textPos","tx","ty","actual","lessIsMore","padding","seconds","ss","padLeft","minutes","mm","levelFullName","loadingScreen","assetIndex","setLoadingMessage","fillText","imgBackground","imgProgress","imgLoading","loadingBarWidth","wadFileSelectModal","githubBox","clearCacheButton","startLoadingFromUrl","enableGraphicMode","increaseLoadingState","mainMenuScreen","gameScreen","rewardScreen","startLevel","showLevelSelection","setGameResult","params","URLSearchParams","entry","substr","startLoadingFromCache","DEV_MODE","WAD_CACHE_DB_NAME","JOB_SCHEDULE_INTERVAL","CHECK_CLEAR_RUBBLE_INTERVAL","CHECK_SPAWN_RAIDER_TIMER","MAX_RAIDER_BASE","ADDITIONAL_RAIDER_PER_SUPPORT","UPDATE_OXYGEN_TIMER","HEIGHT_MULTIPLIER","SEQUENCE_TEXTURE_FRAMERATE","KEY_PAN_SPEED","SPRITE_RESOLUTION_WIDTH","SPRITE_RESOLUTION_HEIGHT","TILESIZE","NATIVE_FRAMERATE","NATIVE_UPDATE_INTERVAL"],"mappings":"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","file":"274.index.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".clear-cache-box {\\n    z-index: 2000;\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./site/clearcache/clearCacheButton.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;IACb,kBAAkB;IAClB,OAAO;IACP,MAAM;AACV\",\"sourcesContent\":[\".clear-cache-box {\\n    z-index: 2000;\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".github-box {\\n    z-index: 2000;\\n    padding: 16px;\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    background-color: rgba(0, 0, 0, 0.6);\\n    color: #fff;\\n}\\n\\n.github-box a {\\n    color: #fff;\\n    text-decoration: none;\\n    padding: 8px;\\n}\\n\\n.github-box a:hover {\\n    color: #fff;\\n    text-decoration: underline;\\n}\\n\\n.github-logo {\\n    width: 16px;\\n    height: 16px;\\n    margin-right: 8px;\\n    vertical-align: middle;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./site/github/github.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;IACb,aAAa;IACb,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,oCAAoC;IACpC,WAAW;AACf;;AAEA;IACI,WAAW;IACX,qBAAqB;IACrB,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,0BAA0B;AAC9B;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,sBAAsB;AAC1B\",\"sourcesContent\":[\".github-box {\\n    z-index: 2000;\\n    padding: 16px;\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    background-color: rgba(0, 0, 0, 0.6);\\n    color: #fff;\\n}\\n\\n.github-box a {\\n    color: #fff;\\n    text-decoration: none;\\n    padding: 8px;\\n}\\n\\n.github-box a:hover {\\n    color: #fff;\\n    text-decoration: underline;\\n}\\n\\n.github-logo {\\n    width: 16px;\\n    height: 16px;\\n    margin-right: 8px;\\n    vertical-align: middle;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!./clearCacheButton.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { WAD_CACHE_DB_NAME } from '../../src/params'\nimport './clearCacheButton.css'\n\nexport class ClearCacheButton {\n\n    rootElement: HTMLDivElement\n\n    constructor(parentId: string) {\n        this.rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        this.rootElement.classList.add('clear-cache-box')\n\n        const button = this.rootElement.appendChild(document.createElement('button'))\n        button.classList.add('btn', 'btn-info')\n        button.innerText = 'Clear cached wad files and restart'\n        button.onclick = () => {\n            indexedDB.deleteDatabase(WAD_CACHE_DB_NAME)\n            location.reload()\n        }\n    }\n\n    hide() {\n        this.rootElement.style.visibility = 'hidden'\n    }\n\n}\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!./github.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import './github.css'\nimport GithubIcon from './github.png'\n\nexport class GithubBox {\n\n    rootElement: HTMLDivElement\n\n    constructor(parentId: string) {\n        this.rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        this.rootElement.classList.add('github-box')\n\n        const link = this.rootElement.appendChild(document.createElement('a'))\n        link.href = 'https://github.com/scarabol/rock-raiders-web'\n\n        const img = link.appendChild(document.createElement('img'))\n        img.src = GithubIcon\n        img.classList.add('github-logo')\n        img.alt = 'Fork on GitHub'\n\n        const txt = link.appendChild(document.createElement('span'))\n        txt.textContent = img.alt\n    }\n\n    hide() {\n        this.rootElement.style.visibility = 'hidden'\n    }\n\n}\n","import { Modal } from 'bootstrap'\n\nexport class WadFileSelectionModal {\n\n    public onStart: (wad0Url, wad1Url) => any = null\n\n    private readonly modal: Modal\n\n    constructor(parentId: string) {\n        const rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        rootElement.classList.add('modal')\n        rootElement.tabIndex = -1\n        rootElement.setAttribute('role', 'dialog')\n        rootElement.setAttribute('aria-hidden', 'true')\n\n        const modalDialog = rootElement.appendChild(document.createElement('div'))\n        modalDialog.classList.add('modal-dialog')\n        rootElement.setAttribute('role', 'document')\n\n        const modalContent = modalDialog.appendChild(document.createElement('div'))\n        modalContent.classList.add('modal-content')\n\n        const modalHeader = modalContent.appendChild(document.createElement('div'))\n        modalHeader.classList.add('modal-header')\n        const modalTitle = modalHeader.appendChild(document.createElement('h5'))\n        modalTitle.classList.add('modal-title')\n        modalTitle.innerText = 'Load .wad files'\n        modalTitle.id = 'wadfileSelectModalLabel'\n        rootElement.setAttribute('aria-labelledby', modalTitle.id)\n\n        const modalBody = modalContent.appendChild(document.createElement('div'))\n        modalBody.classList.add('modal-body')\n\n        const hint = modalBody.appendChild(document.createElement('p'))\n        hint.innerText = 'Assets not included! In order to play the game, please select the game files.'\n\n        const navTabs = modalBody.appendChild(document.createElement('nav'))\n        const navTabList = navTabs.appendChild(document.createElement('div'))\n        navTabList.id = 'nav-tab'\n        navTabList.classList.add('nav', 'nav-tabs')\n        navTabList.setAttribute('role', 'tablist')\n\n        const navFileBtn = WadFileSelectionModal.appendNavButton(navTabList, true, 'nav-file-tab', 'nav-file', 'Local files (recommended)')\n        const navUrlBtn = WadFileSelectionModal.appendNavButton(navTabList, false, 'nav-url-tab', 'nav-url', 'Online from URL')\n\n        const navTabContent = modalBody.appendChild(document.createElement('div'))\n        navTabContent.classList.add('tab-content')\n        this.appendNavFileTab(navTabContent, navFileBtn.id)\n        this.appendNavUrlTab(navTabContent, navUrlBtn.id)\n\n        // rootElement has to be a valid bootstrap HTML modal before we can instantiate it\n        this.modal = new Modal(rootElement, {backdrop: 'static', keyboard: false})\n    }\n\n    private static appendNavButton(parent: HTMLDivElement, active: boolean, id: string, controlTarget: string, innerText: string) {\n        const navBtn = parent.appendChild(document.createElement('button'))\n        navBtn.classList.add('nav-link')\n        if (active) navBtn.classList.add('active')\n        navBtn.id = id\n        navBtn.setAttribute('data-bs-toggle', 'tab')\n        navBtn.setAttribute('data-bs-target', '#' + controlTarget)\n        navBtn.type = 'button'\n        navBtn.setAttribute('role', 'tab')\n        navBtn.setAttribute('aria-controls', controlTarget)\n        navBtn.setAttribute('aria-selected', String(active))\n        navBtn.innerText = innerText\n        return navBtn\n    }\n\n    private appendNavFileTab(parent: HTMLDivElement, labelledBy: string) {\n        const navFileTab = WadFileSelectionModal.appendNavTab(parent, true, 'nav-file', labelledBy)\n\n        const wad0File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad0-file', 'LegoRR0.wad')\n        const wad1File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad1-file', 'LegoRR1.wad')\n\n        const btnStartFile = navFileTab.appendChild(document.createElement('button'))\n        btnStartFile.type = 'submit'\n        btnStartFile.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartFile.id = 'button-start-file'\n        btnStartFile.innerText = 'Start Game'\n        btnStartFile.addEventListener('click', () => {\n            btnStartFile.disabled = true\n            const wad0FileUrl = URL.createObjectURL(wad0File.files[0])\n            const wad1FileUrl = URL.createObjectURL(wad1File.files[0])\n            this.onStart(wad0FileUrl, wad1FileUrl)\n        })\n    }\n\n    private static appendWadFileGroup(parent: HTMLDivElement, id: string, filename: string) {\n        const wadFileGroup = parent.appendChild(document.createElement('div'))\n        wadFileGroup.classList.add('my-3')\n        const wadFileLabel = wadFileGroup.appendChild(document.createElement('label'))\n        wadFileLabel.setAttribute('for', id)\n        wadFileLabel.classList.add('form-label')\n        wadFileLabel.innerHTML = 'Select <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadFileInput = wadFileGroup.appendChild(document.createElement('input'))\n        wadFileInput.type = 'file'\n        wadFileInput.classList.add('form-control')\n        wadFileInput.id = id\n        wadFileInput.required = true\n        return wadFileInput\n    }\n\n    private appendNavUrlTab(parent: HTMLDivElement, labelledBy: string) {\n        const navUrlTab = WadFileSelectionModal.appendNavTab(parent, false, 'nav-url', labelledBy)\n\n        const urlHint = navUrlTab.appendChild(document.createElement('div'))\n        urlHint.classList.add('my-3')\n        urlHint.innerText = 'Direct links with correct Allow-Origin-CORS-Headers required here.'\n\n        const wad0Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad0-url', 'LegoRR0.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n        const wad1Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad1-url', 'LegoRR1.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n\n        const btnStartUrl = navUrlTab.appendChild(document.createElement('button'))\n        btnStartUrl.type = 'submit'\n        btnStartUrl.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartUrl.id = 'button-start-url'\n        btnStartUrl.innerText = 'Start Game'\n        btnStartUrl.addEventListener('click', () => {\n            btnStartUrl.disabled = true\n            // XXX show loading progress for WAD files\n            this.onStart(wad0Url.value, wad1Url.value)\n        })\n    }\n\n    private static appendNavTab(parent: HTMLDivElement, active: boolean, id: string, labelledBy: string) {\n        const navTab = parent.appendChild(document.createElement('div'))\n        navTab.classList.add('tab-pane', 'fade')\n        if (active) navTab.classList.add('show', 'active')\n        navTab.id = id\n        navTab.setAttribute('role', 'tabpanel')\n        navTab.setAttribute('aria-labelledby', labelledBy)\n        return navTab\n    }\n\n    private static appendWadUrlGroup(parent: HTMLDivElement, id: string, filename: string, example: string) {\n        const wadUrlGroup = parent.appendChild(document.createElement('div'))\n        wadUrlGroup.classList.add('my-3')\n        const wadUrlLabel = wadUrlGroup.appendChild(document.createElement('label'))\n        wadUrlLabel.setAttribute('for', id)\n        wadUrlLabel.classList.add('form-label')\n        wadUrlLabel.innerHTML = 'Enter url for <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadUrlInput = wadUrlGroup.appendChild(document.createElement('input'))\n        wadUrlInput.type = 'url'\n        wadUrlInput.classList.add('form-control')\n        wadUrlInput.id = id\n        wadUrlInput.required = true\n        wadUrlInput.value = example\n        return wadUrlInput\n    }\n\n    public show() {\n        this.modal.show()\n    }\n\n    public hide() {\n        this.modal.hide()\n    }\n\n}\n","export function getPath(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '')\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/')\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max)\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2\n}\n\nexport function clearTimeoutSafe(timeout: NodeJS.Timeout) {\n    if (timeout) clearTimeout(timeout)\n    return null\n}\n\nexport function clearIntervalSafe(interval: NodeJS.Timeout) {\n    if (interval) clearInterval(interval)\n    return null\n}\n\ndeclare global {\n\n    interface Array<T> {\n        add(element: T): void\n\n        remove(element: T): void\n\n        last(): T\n\n        count(callback: (element: T) => boolean): number\n\n        partition(filter: (element: T) => boolean): [T[], T[]]\n\n        random(): T\n    }\n\n    interface Map<K, V> {\n        getOrUpdate(key: K, updateCallback: () => V): V\n    }\n\n    interface String {\n        equalsIgnoreCase(other: string): boolean\n    }\n\n}\n\nArray.prototype.add = function <T>(element: T): void {\n    const index = this.indexOf(element)\n    if (index === -1) this.push(element)\n}\n\nArray.prototype.remove = function <T>(element: T): void {\n    const index = this.indexOf(element)\n    if (index !== -1) this.splice(index, 1)\n}\n\nArray.prototype.last = function <T>(): T {\n    return this.length > 0 ? this[this.length - 1] : undefined\n}\n\nArray.prototype.count = function <T>(callback: (element: T) => boolean): number {\n    let counter = 0\n    this.forEach((e) => callback(e) && counter++)\n    return counter\n}\n\nArray.prototype.partition = function <T>(filter: (element: T) => boolean): [T[], T[]] {\n    const left: T[] = [], right: T[] = []\n    this.forEach((a) => filter(a) ? left.push(a) : right.push(a))\n    return [left, right]\n}\n\nArray.prototype.random = function <T>(): T {\n    if (!this.length) return undefined\n    return this[getRandom(this.length - 1)]\n}\n\n// noinspection JSUnusedGlobalSymbols\nMap.prototype.getOrUpdate = function <K, V>(key: K, updateCallback: () => V): V {\n    let value = this.get(key)\n    if (value === undefined) {\n        value = updateCallback()\n        this.set(key, value)\n    }\n    return value\n}\n\nString.prototype.equalsIgnoreCase = function (other: string): boolean {\n    return this.toLowerCase() === other?.toLowerCase()\n}\n","export class GameState {\n\n    static numCrystal: number = 0\n    static numOre: number = 0\n    static numBrick: number = 0\n    static usedCrystals: number = 0\n    static neededCrystals: number = 0\n    static airLevel: number = 1 // air level in percent from 0 to 1.0\n    static requestedRaiders: number = 0\n    static totalCrystals: number = 0\n    static totalOres: number = 0\n    static totalDiggables: number = 0\n    static remainingDiggables: number = 0\n    static totalCaverns: number = 0\n    static discoveredCaverns: number = 0\n    static levelStartTime: number = 0\n    static levelStopTime: number = 0\n\n    static reset() {\n        this.numCrystal = 0\n        this.numOre = 0\n        this.numBrick = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.airLevel = 1\n        this.requestedRaiders = 0\n        this.totalCrystals = 0\n        this.totalOres = 0\n        this.totalDiggables = 0\n        this.remainingDiggables = 0\n        this.totalCaverns = 0\n        this.discoveredCaverns = 0\n        this.levelStartTime = 0\n        this.levelStopTime = 0\n    }\n\n    static get gameTimeSeconds() {\n        return Math.round((GameState.levelStopTime - GameState.levelStartTime) / 1000)\n    }\n\n}\n","import { Mesh } from 'three'\nimport { SceneMesh } from '../../../scene/SceneMesh'\nimport { AnimationEntityUpgrade } from './AnimationEntityUpgrade'\nimport { AnimClip } from './AnimClip'\n\nexport class AnimationEntityType {\n\n    scale: number = 1\n    carryNullName: string = ''\n    carryNullFrames: number = 0\n    depositNullName: string = ''\n    toolNullName: string = ''\n    wheelMesh: Mesh = null\n    wheelRadius: number = 1\n    wheelNullName: string = null\n    drillNullName: string = null\n    driverNullName: string = null\n    cameraNullName: string = null\n    cameraNullFrames: number = null\n    mediumPolyBodies: Map<string, SceneMesh> = new Map()\n    highPolyBodies: Map<string, SceneMesh> = new Map()\n    fPPolyBodies: Map<string, SceneMesh> = new Map()\n    animations: Map<string, AnimClip> = new Map()\n    upgradesByLevel: Map<string, AnimationEntityUpgrade[]> = new Map()\n\n}\n","export class AnimationEntityUpgrade {\n\n    upgradeFilepath: string\n    upgradeNullName: string\n    upgradeNullIndex: number\n\n    constructor(upgradeFilepath: string, upgradeNullName: string, upgradeNullIndex: number) {\n        this.upgradeFilepath = upgradeFilepath\n        this.upgradeNullName = upgradeNullName\n        this.upgradeNullIndex = upgradeNullIndex\n    }\n}\n","import { Group, PositionalAudio } from 'three'\nimport { clearTimeoutSafe } from '../../../core/Util'\nimport { SceneMesh } from '../../../scene/SceneMesh'\nimport { SequenceTextureMaterial } from '../../../scene/SequenceTextureMaterial'\nimport { AnimSubObj } from './AnimSubObj'\n\nexport class AnimClip {\n\n    looping: boolean = false\n    transcoef: number = 1\n    firstFrame: number = null\n    lastFrame: number = null\n    framesPerSecond: number = null\n    bodies: AnimSubObj[] = []\n    polyList: SceneMesh[] = []\n    carryJoint: SceneMesh = null\n    depositJoint: SceneMesh = null\n    getToolJoint: SceneMesh = null\n    wheelJoints: SceneMesh[] = []\n    drillJoint: SceneMesh = null\n    driverJoint: SceneMesh = null\n    nullJoints: Map<string, SceneMesh[]> = new Map()\n    polyModel: Group = new Group()\n    animationTimeout = null\n    sfxAudioByFrame: Map<number, PositionalAudio[]> = new Map()\n\n    animate(frameIndex: number, onAnimationDone: () => any, durationTimeMs: number) {\n        if (this.polyList.length !== this.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        this.bodies.forEach((body: AnimSubObj, index) => {\n            const p = this.polyList[index]\n            p.position.copy(body.relPos[frameIndex]).sub(body.pivot)\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: SequenceTextureMaterial) => mat.setOpacity(opacity))\n                }\n            }\n        })\n        this.playAudio(frameIndex)\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        let nextFrame = frameIndex + 1\n        if (nextFrame <= this.lastFrame || !onAnimationDone || (durationTimeMs !== null && durationTimeMs > 0)) {\n            if (nextFrame > this.lastFrame) {\n                nextFrame = this.firstFrame\n            }\n            const standardDurationTimeMs = 1000 / this.framesPerSecond * this.transcoef\n            if (durationTimeMs !== null) durationTimeMs -= standardDurationTimeMs\n            const that = this\n            const timeoutTimeMs = durationTimeMs !== null ? Math.max(0, Math.min(durationTimeMs, standardDurationTimeMs)) : standardDurationTimeMs\n            this.animationTimeout = setTimeout(() => that.animate(nextFrame, onAnimationDone, durationTimeMs), timeoutTimeMs)\n        } else if (onAnimationDone) {\n            this.stopAudio()\n            onAnimationDone()\n        }\n    }\n\n    stop() {\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.stopAudio()\n    }\n\n    private playAudio(frameIndex: number) {\n        this.sfxAudioByFrame.getOrUpdate(frameIndex, () => []).forEach((a) => {\n            if (a.isPlaying) a.stop()\n            a.play()\n        })\n    }\n\n    private stopAudio() {\n        this.sfxAudioByFrame.forEach((f) => f.forEach((a) => a.isPlaying && a.stop()))\n    }\n\n}\n","import { Euler, MathUtils, Vector3 } from 'three'\nimport { SceneMesh } from '../../../scene/SceneMesh'\nimport degToRad = MathUtils.degToRad\n\nexport class AnimSubObj {\n\n    lowerName: string = ''\n    filename: string = ''\n    pivot: Vector3 = new Vector3(0, 0, 0)\n    relPos: Vector3[] = []\n    relRot: Euler[] = []\n    relScale: Vector3[] = []\n    opacity: number[] = []\n    parentObjInd: number = null\n    model: SceneMesh = null\n    isNull: boolean = false\n    sfxName: string = null\n    sfxFrames: number[] = []\n\n    radVec(degX: number, degY: number, degZ: number) {\n        return new Euler(degToRad(degY), degToRad(degX), degToRad(degZ), 'YXZ')\n    }\n\n    setFrameAndFollowing(animationFrameIndex: number, lastFrame: number, infos: number[]) {\n        this.relPos[animationFrameIndex] = new Vector3(infos[0], infos[1], infos[2])\n        this.relRot[animationFrameIndex] = this.radVec(infos[3], infos[4], infos[5])\n        this.relScale[animationFrameIndex] = new Vector3(infos[6], infos[7], infos[8])\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.relPos[c] = this.relPos[animationFrameIndex]\n            this.relRot[c] = this.relRot[animationFrameIndex]\n            this.relScale[c] = this.relScale[animationFrameIndex]\n        }\n    }\n\n    setOpacityAndFollowing(animationFrameIndex: number, lastFrame: number, value: number) {\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.opacity[c] = value\n        }\n    }\n\n}\n","const Stats = require('stats.js')\n\nexport class DebugHelper {\n\n    stats\n\n    constructor() {\n        this.stats = new Stats()\n        this.stats.setMode(0) // 0: fps, 1: ms\n\n        this.stats.domElement.style.position = 'absolute'\n        this.stats.domElement.style.left = '0px'\n        this.stats.domElement.style.top = '0px'\n\n        document.body.appendChild(this.stats.domElement)\n        this.hide()\n    }\n\n    show() {\n        this.stats.domElement.style.visibility = 'visible'\n    }\n\n    hide() {\n        this.stats.domElement.style.visibility = 'hidden'\n    }\n\n    renderStart() {\n        this.stats.begin()\n    }\n\n    renderDone() {\n        this.stats.end()\n    }\n\n}\n","export enum EntityType {\n\n    // RAIDER\n    PILOT,\n\n    // BUILDING\n    TOOLSTATION,\n    TELEPORT_PAD,\n    DOCKS,\n    POWER_STATION,\n    BARRACKS,\n    UPGRADE,\n    GEODOME,\n    ORE_REFINERY,\n    GUNSTATION,\n    TELEPORT_BIG,\n\n    // MONSTER\n    BAT,\n    SMALL_SPIDER,\n    ROCK_MONSTER,\n    ICE_MONSTER,\n    LAVA_MONSTER,\n\n    // MATERIAL\n    DYNAMITE,\n    ELECTRIC_FENCE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n\n    // VEHICLE\n    HOVERBOARD,\n    SMALL_DIGGER,\n    SMALL_TRUCK,\n    SMALL_CAT,\n    SMALL_MLP,\n    SMALL_HELI,\n    BULLDOZER,\n    WALKER_DIGGER,\n    LARGE_MLP,\n    LARGE_DIGGER,\n    LARGE_CAT,\n\n    // OTHERS\n    TV_CAMERA,\n\n}\n\nexport function getEntityTypeByName(type: string): EntityType {\n    if ('Pilot'.equalsIgnoreCase(type)) {\n        return EntityType.PILOT\n    } else if ('Toolstation'.equalsIgnoreCase(type)) {\n        return EntityType.TOOLSTATION\n    } else if ('TeleportPad'.equalsIgnoreCase(type)) {\n        return EntityType.TELEPORT_PAD\n    } else if ('Docks'.equalsIgnoreCase(type)) {\n        return EntityType.DOCKS\n    } else if ('PowerStation'.equalsIgnoreCase(type)) {\n        return EntityType.POWER_STATION\n    } else if ('Barracks'.equalsIgnoreCase(type)) {\n        return EntityType.BARRACKS\n    } else if ('Upgrade'.equalsIgnoreCase(type)) {\n        return EntityType.UPGRADE\n    } else if ('GEO-Dome'.equalsIgnoreCase(type)) {\n        return EntityType.GEODOME\n    } else if ('OreRefinery'.equalsIgnoreCase(type)) {\n        return EntityType.ORE_REFINERY\n    } else if ('GunStation'.equalsIgnoreCase(type)) {\n        return EntityType.GUNSTATION\n    } else if ('TeleportBIG'.equalsIgnoreCase(type)) {\n        return EntityType.TELEPORT_BIG\n    } else if ('Bat'.equalsIgnoreCase(type)) {\n        return EntityType.BAT\n    } else if ('SmallSpider'.equalsIgnoreCase(type)) {\n        return EntityType.SMALL_SPIDER\n    } else if ('RockMonster'.equalsIgnoreCase(type)) {\n        return EntityType.ROCK_MONSTER\n    } else if ('IceMonster'.equalsIgnoreCase(type)) {\n        return EntityType.ICE_MONSTER\n    } else if ('LavaMonster'.equalsIgnoreCase(type)) {\n        return EntityType.LAVA_MONSTER\n    } else if ('Dynamite'.equalsIgnoreCase(type)) {\n        return EntityType.DYNAMITE\n    } else if ('EletricFence'.equalsIgnoreCase(type)) {\n        return EntityType.ELECTRIC_FENCE\n    } else if ('PowerCrystal'.equalsIgnoreCase(type)) {\n        return EntityType.CRYSTAL\n    } else if ('Ore'.equalsIgnoreCase(type)) {\n        return EntityType.ORE\n    } else if ('Brick'.equalsIgnoreCase(type)) {\n        return EntityType.BRICK\n    } else if ('Barrier'.equalsIgnoreCase(type)) {\n        return EntityType.BARRIER\n    } else if ('Hoverboard'.equalsIgnoreCase(type)) {\n        return EntityType.HOVERBOARD\n    } else if ('SmallDigger'.equalsIgnoreCase(type)) {\n        return EntityType.SMALL_DIGGER\n    } else if ('SamllTruck'.equalsIgnoreCase(type)) {\n        return EntityType.SMALL_TRUCK\n    } else if ('SmallCat'.equalsIgnoreCase(type)) {\n        return EntityType.SMALL_CAT\n    } else if ('SmallMLP'.equalsIgnoreCase(type)) {\n        return EntityType.SMALL_MLP\n    } else if ('SmallHeli'.equalsIgnoreCase(type)) {\n        return EntityType.SMALL_HELI\n    } else if ('Bulldozer'.equalsIgnoreCase(type)) {\n        return EntityType.BULLDOZER\n    } else if ('WalkerDigger'.equalsIgnoreCase(type)) {\n        return EntityType.WALKER_DIGGER\n    } else if ('LargeMLP'.equalsIgnoreCase(type)) {\n        return EntityType.LARGE_MLP\n    } else if ('LargeDigger'.equalsIgnoreCase(type)) {\n        return EntityType.LARGE_DIGGER\n    } else if ('LargeCat'.equalsIgnoreCase(type)) {\n        return EntityType.LARGE_CAT\n    } else if ('TVCamera'.equalsIgnoreCase(type)) {\n        return EntityType.TV_CAMERA\n    } else {\n        console.error('Could not identify entity type from string: ' + type)\n        return null\n    }\n}\n","import { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class EventBus {\n\n    static eventListener = new Map<EventKey, ((event: GameEvent) => any)[]>()\n    static workerListener: ((event: GameEvent) => any)[] = []\n    static blockedEvents = []\n\n    static publishEvent(event: GameEvent) {\n        if (this.blockedEvents.includes(event.eventKey)) return // event is currently blocked from publishing\n        if (!event.isLocal) console.log('Event published: ' + EventKey[event.eventKey])\n        this.blockedEvents.push(event.eventKey)\n        this.workerListener.forEach((callback) => callback(event))\n        this.getListener(event.eventKey).forEach((callback) => callback(event))\n        this.blockedEvents.remove(event.eventKey)\n    }\n\n    static registerEventListener(eventKey: EventKey, callback: (GameEvent) => any) {\n        this.getListener(eventKey).push(callback)\n    }\n\n    private static getListener(eventKey: EventKey) {\n        return this.eventListener.getOrUpdate(eventKey, () => [])\n    }\n\n    static registerWorkerListener(callback: (GameEvent) => any) {\n        this.workerListener.push(callback)\n    }\n\n    // TODO cleanup/unregister all event listener at level end?!\n\n}\n","export enum RaiderTool {\n    NONE,\n    DRILL,\n    HAMMER,\n    SHOVEL,\n    SPANNER,\n    FREEZERGUN,\n    LASER,\n    PUSHERGUN,\n    BIRDSCARER,\n}\n\nexport const AllRaiderTools: RaiderTool[] = [\n    RaiderTool.DRILL,\n    RaiderTool.HAMMER,\n    RaiderTool.SHOVEL,\n    RaiderTool.SPANNER,\n    RaiderTool.FREEZERGUN,\n    RaiderTool.LASER,\n    RaiderTool.PUSHERGUN,\n    RaiderTool.BIRDSCARER,\n]\n","import { Cursor } from '../../../screen/Cursor'\n\nexport class SurfaceType {\n\n    name: string // human readable, maybe used as label later on\n    shaping: boolean = false\n    matIndex: string = '00'\n    floor: boolean = false\n    selectable: boolean = false\n    digable: boolean = false\n    reinforcable: boolean = false\n    cursor: Cursor = Cursor.Pointer_Standard\n    cursorFulfiller: Cursor = Cursor.Pointer_Standard\n    statsDrillName: string = null\n    canCarryFence: boolean = false\n    connectsPath: boolean = false\n    mapSurfaceColor: string = '#00FFFF'\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options)\n    }\n\n    static readonly GROUND = new SurfaceType({\n        name: 'ground',\n        floor: true,\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_LegoManGo,\n        mapSurfaceColor: '#280048',\n    })\n    static readonly SOLID_ROCK = new SurfaceType({\n        name: 'solid rock',\n        shaping: true,\n        matIndex: '5',\n        cursor: Cursor.Pointer_SurfaceType_Immovable,\n        mapSurfaceColor: '#500090',\n    })\n    static readonly HARD_ROCK = new SurfaceType({\n        name: 'hard rock',\n        shaping: true,\n        matIndex: '4',\n        selectable: true,\n        digable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_Hard,\n        statsDrillName: 'HardDrillTime',\n        mapSurfaceColor: '#7000B0',\n    })\n    static readonly LOOSE_ROCK = new SurfaceType({\n        name: 'loose rock',\n        shaping: true,\n        matIndex: '3',\n        selectable: true,\n        digable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_Medium,\n        statsDrillName: 'LooseDrillTime',\n        mapSurfaceColor: '#9000D0',\n    })\n    static readonly DIRT = new SurfaceType({\n        name: 'dirt',\n        shaping: true,\n        matIndex: '2',\n        selectable: true,\n        digable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_Loose,\n        statsDrillName: 'SoilDrillTime',\n        mapSurfaceColor: '#B000F0',\n    })\n    static readonly SLUG_HOLE = new SurfaceType({\n        name: 'slug hole',\n        floor: true,\n        matIndex: '30',\n        mapSurfaceColor: '#280048',\n    })\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'})\n    static readonly ORE_SEAM = new SurfaceType({\n        name: 'ore seam',\n        matIndex: '40',\n        selectable: true,\n        digable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_OreSeam,\n        statsDrillName: 'SeamDrillTime',\n    })\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45', mapSurfaceColor: '#000080'})\n    static readonly CRYSTAL_SEAM = new SurfaceType({\n        name: 'energy crystal seam',\n        matIndex: '20',\n        selectable: true,\n        digable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_CrystalSeam,\n        statsDrillName: 'SeamDrillTime',\n    })\n    static readonly RECHARGE_SEAM = new SurfaceType({\n        name: 'recharge seam',\n        matIndex: '67',\n        cursor: Cursor.Pointer_SurfaceType_RechargeSeam,\n    })\n    static readonly POWER_PATH = new SurfaceType({\n        name: 'power path all',\n        floor: true,\n        matIndex: '60',\n        selectable: true,\n        canCarryFence: true,\n        connectsPath: true,\n        mapSurfaceColor: '#FFFF00',\n    })\n    static readonly POWER_PATH_BUILDING_SITE = new SurfaceType({\n        name: 'power path building site',\n        floor: true,\n        matIndex: '61',\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly POWER_PATH_BUILDING = new SurfaceType({\n        name: 'power path building',\n        floor: true,\n        matIndex: '76',\n        connectsPath: true,\n        mapSurfaceColor: '#B8BBB8',\n    })\n    static readonly POWER_PATH_CONSTRUCTION = new SurfaceType({\n        name: 'power path construction',\n        floor: true,\n        matIndex: '76',\n        selectable: true,\n        connectsPath: true,\n        mapSurfaceColor: '#B8BBB8',\n    })\n    static readonly RUBBLE1 = new SurfaceType({\n        name: 'rubble 1',\n        floor: true,\n        matIndex: '13',\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_Clear,\n        mapSurfaceColor: '#280048',\n    })\n    static readonly RUBBLE2 = new SurfaceType({\n        name: 'rubble 2',\n        floor: true,\n        matIndex: '12',\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_Clear,\n        mapSurfaceColor: '#280048',\n    })\n    static readonly RUBBLE3 = new SurfaceType({\n        name: 'rubble 3',\n        floor: true,\n        matIndex: '11',\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_Clear,\n        mapSurfaceColor: '#280048',\n    })\n    static readonly RUBBLE4 = new SurfaceType({\n        name: 'rubble 4',\n        floor: true,\n        matIndex: '10',\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_Clear,\n        mapSurfaceColor: '#280048',\n    })\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING\n            case 1:\n                return SurfaceType.SOLID_ROCK\n            case 2:\n                return SurfaceType.HARD_ROCK\n            case 3:\n                return SurfaceType.LOOSE_ROCK\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT\n            case 6:\n                return SurfaceType.LAVA\n            case 8:\n                return SurfaceType.ORE_SEAM\n            case 9:\n                return SurfaceType.WATER\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM\n            case 11:\n                return SurfaceType.RECHARGE_SEAM\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE\n            case 100:\n                return SurfaceType.RUBBLE4\n            case 101:\n                return SurfaceType.RUBBLE3\n            case 102:\n                return SurfaceType.RUBBLE2\n            case 103:\n                return SurfaceType.RUBBLE1\n            default:\n                console.error('Unexpected surface type num: ' + typeNum)\n                return SurfaceType.SOLID_ROCK\n        }\n    }\n}\n","import { EntityType } from '../EntityType'\n\nexport enum RaiderTraining {\n    NONE,\n    DRIVER,\n    ENGINEER,\n    GEOLOGIST,\n    PILOT,\n    SAILOR,\n    DEMOLITION,\n}\n\nexport const AllRaiderTrainings: RaiderTraining[] = [\n    RaiderTraining.DRIVER,\n    RaiderTraining.ENGINEER,\n    RaiderTraining.GEOLOGIST,\n    RaiderTraining.PILOT,\n    RaiderTraining.SAILOR,\n    RaiderTraining.DEMOLITION,\n]\n\nexport const RaiderTrainingSites: EntityType[] = []\nRaiderTrainingSites[RaiderTraining.DRIVER] = EntityType.BARRACKS\nRaiderTrainingSites[RaiderTraining.DRIVER] = EntityType.BARRACKS\nRaiderTrainingSites[RaiderTraining.ENGINEER] = EntityType.UPGRADE\nRaiderTrainingSites[RaiderTraining.GEOLOGIST] = EntityType.GEODOME\nRaiderTrainingSites[RaiderTraining.PILOT] = EntityType.TELEPORT_PAD\nRaiderTrainingSites[RaiderTraining.SAILOR] = EntityType.DOCKS\nRaiderTrainingSites[RaiderTraining.DEMOLITION] = EntityType.TOOLSTATION\n\nexport const RaiderTrainingStatsProperty: string[] = []\nRaiderTrainingStatsProperty[RaiderTraining.DRIVER] = 'TrainDriver'\nRaiderTrainingStatsProperty[RaiderTraining.ENGINEER] = 'TrainRepair'\nRaiderTrainingStatsProperty[RaiderTraining.GEOLOGIST] = 'TrainScanner'\nRaiderTrainingStatsProperty[RaiderTraining.PILOT] = 'TrainPilot'\nRaiderTrainingStatsProperty[RaiderTraining.SAILOR] = 'TrainSailor'\nRaiderTrainingStatsProperty[RaiderTraining.DEMOLITION] = 'TrainDynamite'\n","import { Surface } from '../../game/model/map/Surface'\n\nexport class MapSurfaceRect {\n\n    x: number\n    y: number\n    surfaceColor: string\n    borderColor: string\n\n    constructor(surface: Surface) {\n        this.x = surface.x\n        this.y = surface.y\n        this.surfaceColor = surface.surfaceType.mapSurfaceColor\n        this.borderColor = surface.reinforced ? '#FFFF00' : null\n    }\n}\n","import { Vector3 } from 'three'\nimport { Sample } from '../audio/Sample'\nimport { EntityManager } from '../game/EntityManager'\nimport { EntityType } from '../game/model/EntityType'\nimport { PriorityEntry } from '../game/model/job/PriorityEntry'\nimport { Surface } from '../game/model/map/Surface'\nimport { SurfaceType } from '../game/model/map/SurfaceType'\nimport { Terrain } from '../game/model/map/Terrain'\nimport { AllRaiderTools, RaiderTool } from '../game/model/raider/RaiderTool'\nimport { AllRaiderTrainings, RaiderTraining } from '../game/model/raider/RaiderTraining'\nimport { MapSurfaceRect } from '../gui/radar/MapSurfaceRect'\nimport { TILESIZE } from '../params'\nimport { Cursor } from '../screen/Cursor'\nimport { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n        this.isLocal = true\n    }\n\n}\n\nexport enum SelectPanelType {\n\n    NONE,\n    RAIDER,\n    VEHICLE,\n    BUILDING,\n    SURFACE,\n\n}\n\nexport class SelectionChanged extends LocalEvent {\n\n    selectPanelType: SelectPanelType = SelectPanelType.NONE\n    isGround: boolean\n    isPowerPath: boolean\n    canPlaceFence: boolean\n    isFloor: boolean\n    isSite: boolean\n    hasRubble: boolean\n    isDrillable: boolean\n    isReinforcable: boolean\n    someCarries: boolean\n    everyHasMaxLevel: boolean\n    canDoTraining: Map<RaiderTraining, boolean> = new Map()\n    everyHasTool: Map<RaiderTool, boolean> = new Map()\n    buildingCanUpgrade: boolean\n    buildingCanSwitchPower: boolean\n    vehicleHasCallManJob: boolean\n    allVehicleEmpty: boolean\n\n    constructor(entityMgr: EntityManager) {\n        super(EventKey.SELECTION_CHANGED)\n        if (!entityMgr) return\n        this.selectPanelType = entityMgr.selection.getSelectPanelType()\n        this.isGround = entityMgr.selection.surface?.surfaceType === SurfaceType.GROUND\n        this.isPowerPath = entityMgr.selection.surface?.surfaceType === SurfaceType.POWER_PATH\n        this.isFloor = entityMgr.selection.surface?.surfaceType.floor\n        this.isSite = entityMgr.selection.surface?.surfaceType === SurfaceType.POWER_PATH_CONSTRUCTION || entityMgr.selection.surface?.surfaceType === SurfaceType.POWER_PATH_BUILDING_SITE\n        this.hasRubble = entityMgr.selection.surface?.hasRubble()\n        this.isDrillable = entityMgr.selection.surface?.isDigable()\n        this.isReinforcable = entityMgr.selection.surface?.isReinforcable()\n        this.canPlaceFence = entityMgr.selection.surface?.canPlaceFence() && entityMgr && entityMgr.buildings.some((b) => b.entityType === EntityType.POWER_STATION && b.isUsable())\n        this.someCarries = !!entityMgr.selection.raiders.some((r) => !!r.carries)\n        this.everyHasMaxLevel = !!entityMgr.selection.raiders.every((r) => r.level >= r.stats.Levels)\n        AllRaiderTrainings.forEach((training) => this.canDoTraining.set(training, entityMgr && entityMgr.getTrainingSites(training).length > 0 && entityMgr.selection.raiders.some((r) => !r.hasTraining(training))))\n        AllRaiderTools.forEach((tool) => this.everyHasTool.set(tool, !!entityMgr.selection.raiders.every((r) => r.hasTool(tool))))\n        this.buildingCanUpgrade = entityMgr.selection.building?.canUpgrade()\n        this.buildingCanSwitchPower = !entityMgr.selection.building?.stats.SelfPowered && !entityMgr.selection.building?.stats.PowerBuilding\n        this.vehicleHasCallManJob = entityMgr.selection.vehicles.every((v) => !!v.callManJob)\n        this.allVehicleEmpty = entityMgr.selection.vehicles.every((v) => !v.driver)\n    }\n\n}\n\nexport class DeselectAll extends SelectionChanged {\n\n    constructor() {\n        super(null)\n    }\n\n}\n\nexport class AirLevelChanged extends LocalEvent {\n\n    airLevel: number\n\n    constructor(airLevel: number) {\n        super(EventKey.AIR_LEVEL_CHANGED)\n        this.airLevel = airLevel\n    }\n\n}\n\nexport class ChangeCursor extends LocalEvent {\n\n    cursor: Cursor\n    timeout: number\n\n    constructor(cursor: Cursor, timeout: number = null) {\n        super(EventKey.CHANGE_CURSOR)\n        this.cursor = cursor\n        this.timeout = timeout\n    }\n\n}\n\nexport class SetupPriorityList extends LocalEvent {\n\n    priorityList: PriorityEntry[]\n\n    constructor(priorityList: PriorityEntry[]) {\n        super(EventKey.SETUP_PRIORITY_LIST)\n        this.priorityList = priorityList\n    }\n\n}\n\nexport class BuildingsChangedEvent extends LocalEvent {\n\n    usableBuildingsByTypeAndLevel: Map<EntityType, Map<number, number>> = new Map()\n\n    constructor(entityMgr: EntityManager) {\n        super(EventKey.BUILDINGS_CHANGED)\n        entityMgr.buildings.forEach((b) => {\n            if (b.isUsable()) {\n                const perLevel = this.usableBuildingsByTypeAndLevel.getOrUpdate(b.entityType, () => new Map())\n                perLevel.set(b.level, perLevel.getOrUpdate(b.level, () => 0) + 1)\n            }\n        })\n    }\n\n    static countUsable(event: BuildingsChangedEvent, building: EntityType, minLevel: number = 0) {\n        let result = 0\n        event.usableBuildingsByTypeAndLevel.getOrUpdate(building, () => new Map()).forEach((count, level) => {\n            if (level >= minLevel) result += count\n        })\n        return result\n    }\n\n}\n\nexport class RaidersChangedEvent extends LocalEvent {\n\n    numRaiders: number\n    training: RaiderTraining\n\n    constructor(entityMgr: EntityManager, training: RaiderTraining = null) {\n        super(EventKey.RAIDERS_CHANGED)\n        this.numRaiders = entityMgr.raiders.length\n        this.training = training\n    }\n\n}\n\nexport class VehiclesChangedEvent extends LocalEvent {\n\n    constructor() {\n        super(EventKey.VEHICLES_CHANGED)\n    }\n\n}\n\nexport class PlaySoundEvent extends LocalEvent {\n\n    sample: Sample\n\n    constructor(sample: Sample) {\n        super(EventKey.PLAY_SOUND)\n        this.sample = sample\n    }\n\n}\n\nexport class UpdateRadarTerrain extends LocalEvent {\n\n    surfaces: MapSurfaceRect[] = []\n    tileX: number\n    tileY: number\n\n    constructor(terrain: Terrain, mapFocus: Vector3) {\n        super(EventKey.UPDATE_RADAR_TERRAIN)\n        terrain.forEachSurface((s) => {\n            if (s.discovered) {\n                this.surfaces.push(new MapSurfaceRect(s))\n            }\n        })\n        this.tileX = Math.floor(mapFocus.x / TILESIZE)\n        this.tileY = Math.floor(mapFocus.z / TILESIZE)\n    }\n\n}\n\nexport class UpdateRadarSurface extends LocalEvent {\n\n    surfaceRect: MapSurfaceRect\n\n    constructor(surface: Surface) {\n        super(EventKey.UPDATE_RADAR_SURFACE)\n        this.surfaceRect = new MapSurfaceRect(surface)\n    }\n\n}\n","export enum PriorityIdentifier {\n\n    aiPriorityTrain,\n    aiPriorityGetIn,\n    aiPriorityCrystal,\n    aiPriorityOre,\n    aiPriorityRepair,\n    aiPriorityClearing,\n    aiPriorityDestruction,\n    aiPriorityConstruction,\n    aiPriorityReinforce,\n    aiPriorityRecharge,\n\n}\n","export enum JobState {\n\n    INCOMPLETE,\n    COMPLETE,\n    CANCELED,\n\n}\n","import { EntityType } from '../game/model/EntityType'\nimport { PriorityEntry } from '../game/model/job/PriorityEntry'\nimport { RaiderTool } from '../game/model/raider/RaiderTool'\nimport { RaiderTraining } from '../game/model/raider/RaiderTraining'\nimport { EventKey } from './EventKeyEnum'\nimport { LocalEvent } from './LocalEvents'\n\nexport class GuiCommand extends LocalEvent {\n}\n\nexport class CancelBuildMode extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CANCEL_BUILD_MODE)\n    }\n\n}\n\nexport class SelectBuildMode extends GuiCommand {\n\n    entityType: EntityType\n\n    constructor(entityType: EntityType) {\n        super(EventKey.COMMAND_SELECT_BUILD_MODE)\n        this.entityType = entityType\n    }\n\n}\n\nexport class SelectedRaiderPickTool extends GuiCommand {\n\n    tool: RaiderTool\n\n    constructor(tool: RaiderTool) {\n        super(EventKey.COMMAND_PICK_TOOL)\n        this.tool = tool\n    }\n\n}\n\nexport class CreatePowerPath extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_POWER_PATH)\n    }\n\n}\n\nexport class PlaceFence extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_PLACE_FENCE)\n    }\n\n}\n\nexport class MakeRubble extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_MAKE_RUBBLE)\n    }\n\n}\n\nexport class ChangeRaiderSpawnRequest extends GuiCommand {\n\n    increase: boolean\n\n    constructor(increase: boolean) {\n        super(EventKey.COMMAND_CHANGE_RAIDER_SPAWN_REQUEST)\n        this.increase = increase\n    }\n\n}\n\nexport class CreateClearRubbleJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_CLEAR_RUBBLE_JOB)\n    }\n\n}\n\nexport class UpgradeBuilding extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_UPGRADE_BUILDING)\n    }\n\n}\n\nexport class BeamUpBuilding extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_BUILDING_BEAMUP)\n    }\n\n}\n\nexport class ChangePriorityList extends GuiCommand {\n\n    priorityList: PriorityEntry[]\n\n    constructor(priorityList: PriorityEntry[]) {\n        super(EventKey.COMMAND_CHANGE_PRIORITY_LIST)\n        this.priorityList = priorityList\n    }\n\n}\n\nexport class ChangeBuildingPowerState extends GuiCommand {\n\n    state: boolean\n\n    constructor(state: boolean) {\n        super(EventKey.COMMAND_CHANGE_BUILDING_POWER_STATE)\n        this.state = state\n    }\n\n}\n\nexport class CreateDrillJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_DRILL_JOB)\n    }\n\n}\n\nexport class CreateReinforceJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_REINFORCE_JOB)\n    }\n\n}\n\nexport class CreateDynamiteJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_DYNAMITE_JOB)\n    }\n\n}\n\nexport class CancelSurfaceJobs extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CANCEL_SURFACE_JOBS)\n    }\n\n}\n\nexport class RaiderEat extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_EAT)\n    }\n\n}\n\nexport class RaiderDrop extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_DROP)\n    }\n\n}\n\nexport class RaiderUpgrade extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_UPGRADE)\n    }\n\n}\n\nexport class RaiderBeamUp extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_BEAMUP)\n    }\n\n}\n\nexport class TrainRaider extends GuiCommand {\n\n    training: RaiderTraining\n\n    constructor(training: RaiderTraining) {\n        super(EventKey.COMMAND_TRAIN_RAIDER)\n        this.training = training\n    }\n\n}\n\nexport class CancelBuilding extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CANCEL_CONSTRUCTION)\n    }\n\n}\n\nexport class RequestVehicleSpawn extends GuiCommand {\n\n    vehicle: EntityType\n\n    constructor(vehicle: EntityType) {\n        super(EventKey.COMMAND_REQUEST_VEHICLE_SPAWN)\n        this.vehicle = vehicle\n    }\n\n}\n\nexport class VehicleCallMan extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_VEHICLE_GET_MAN)\n    }\n\n}\n\nexport class VehicleBeamUp extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_VEHICLE_BEAMUP)\n    }\n\n}\n\nexport class VehicleDriverGetOut extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_VEHICLE_DRIVER_GET_OUT)\n    }\n\n}\n\nexport class CameraControl extends GuiCommand {\n\n    zoom: number\n    cycleBuilding: boolean\n    rotationIndex: number\n\n    constructor(zoom: number, cycleBuilding: boolean, rotationIndex: number) {\n        super(EventKey.COMMAND_CAMERA_CONTROL)\n        this.zoom = zoom\n        this.cycleBuilding = cycleBuilding\n        this.rotationIndex = rotationIndex\n    }\n\n}\n","import { Vector2 } from 'three'\n\nexport class BarrierLocation {\n\n    location: Vector2\n    heading: number\n\n    constructor(location: Vector2, surfaceCenter: Vector2) {\n        this.location = location\n        this.heading = location.clone().sub(surfaceCenter).angle()\n        if (location.y === surfaceCenter.y) {\n            this.heading -= Math.PI / 2\n        } else {\n            this.heading += Math.PI / 2\n        }\n    }\n\n}\n","import { GameState } from '../game/model/GameState'\nimport { ShareableJob } from '../game/model/job/ShareableJob'\nimport { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class WorldEvent extends GameEvent {\n\n    constructor(entityKey: EventKey) {\n        super(entityKey)\n        this.isLocal = false\n    }\n\n}\n\nexport abstract class JobEvent extends WorldEvent {\n\n    job: ShareableJob\n\n    protected constructor(eventKey: EventKey, job: ShareableJob) {\n        super(eventKey)\n        this.guiForward = false\n        this.job = job\n    }\n\n}\n\nexport class JobCreateEvent extends JobEvent {\n\n    constructor(job: ShareableJob) {\n        super(EventKey.JOB_CREATE, job)\n    }\n\n}\n\nexport class JobDeleteEvent extends JobEvent {\n\n    constructor(job: ShareableJob) {\n        super(EventKey.JOB_DELETE, job)\n    }\n\n}\n\nexport class RequestedRaidersChanged extends WorldEvent {\n\n    numRequestedRaiders: number\n\n    constructor(requestedRaiders: number) {\n        super(EventKey.REQUESTED_RAIDERS_CHANGED)\n        this.numRequestedRaiders = requestedRaiders\n    }\n\n}\n\nexport class MaterialAmountChanged extends WorldEvent {\n\n    numCrystal: number\n    usedCrystal: number\n    neededCrystal: number\n    totalOre: number\n\n    constructor() {\n        super(EventKey.MATERIAL_AMOUNT_CHANGED)\n        this.numCrystal = GameState.numCrystal\n        this.usedCrystal = GameState.usedCrystals\n        this.neededCrystal = GameState.neededCrystals\n        this.totalOre = GameState.numOre + GameState.numBrick * 5\n    }\n\n}\n\nexport class CavernDiscovered extends WorldEvent {\n\n    constructor() {\n        super(EventKey.CAVERN_DISCOVERED)\n    }\n\n}\n\nexport class OreFoundEvent extends WorldEvent {\n\n    constructor() {\n        super(EventKey.ORE_FOUND)\n    }\n\n}\n","export class BaseActivity {\n\n    activityKey: string\n\n    constructor(activityKey: string) {\n        this.activityKey = activityKey\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class AnimEntityActivity extends BaseActivity {\n\n    static Stand = new AnimEntityActivity('Activity_Stand')\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class BarrierActivity extends AnimEntityActivity {\n\n    static Short = new AnimEntityActivity('Short')\n    static Expand = new AnimEntityActivity('Expand')\n    static Long = new AnimEntityActivity('Long')\n    static Teleport = new AnimEntityActivity('Teleport')\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\n// noinspection JSUnusedGlobalSymbols\nexport class RaiderActivity extends AnimEntityActivity {\n\n    static Route = new RaiderActivity('Activity_Route')\n    static RunPanic = new RaiderActivity('Activity_RunPanic')\n    static Drill = new RaiderActivity('Activity_Drill')\n    static Walk = new RaiderActivity('!Activity_Walk')\n    static Reinforce = new RaiderActivity('Activity_Reinforce')\n    static Reverse = new RaiderActivity('!Activity_Reverse')\n    static TurnLeft = new RaiderActivity('!Activity_TurnLeft')\n    static TurnRight = new RaiderActivity('!Activity_TurnRight')\n    static CantDo = new RaiderActivity('!Activity_CantDo')\n    static Collect = new RaiderActivity('Activity_Collect')\n    static Clear = new RaiderActivity('Activity_Clear')\n    static Carry = new RaiderActivity('Activity_Carry')\n    static CarryTurnLeft = new RaiderActivity('!Activity_CarryTurnLeft')\n    static CarryTurnRight = new RaiderActivity('!Activity_CarryTurnRight')\n    static CarryStand = new RaiderActivity('Activity_CarryStand')\n    static Dynamite = new RaiderActivity('Activity_Dynamite')\n    static Place = new RaiderActivity('Activity_Place')\n    static Deposit = new RaiderActivity('!Activity_Deposit')\n    static TeleportIn = new RaiderActivity('Activity_TeleportIn')\n    static Repair = new RaiderActivity('Activity_Repair')\n    static rest = new RaiderActivity('Activity_rest')\n    static routeRubble = new RaiderActivity('!Activity_routeRubble')\n    static CarryRubble = new RaiderActivity('!Activity_CarryRubble')\n    static Eat = new RaiderActivity('Activity_Eat')\n    static FireLaser = new RaiderActivity('Activity_FireLaser')\n    static GetUp = new RaiderActivity('!Activity_GetUp')\n    static ThrownByRockMonster = new RaiderActivity('Activity_ThrownByRockMonster')\n    static Slip = new RaiderActivity('Activity_Slip')\n    static Train = new RaiderActivity('Activity_Train')\n    static Recharge = new RaiderActivity('!Activity_Recharge')\n\n    static Waiting1 = new RaiderActivity('Activity_Waiting1')\n    static Waiting2 = new RaiderActivity('Activity_Waiting2')\n    static Waiting3 = new RaiderActivity('Activity_Waiting3')\n    static Waiting4 = new RaiderActivity('Activity_Waiting4')\n\n    static Hoverboard = new RaiderActivity('Activity_Hoverboard')\n    static Standhoverboard = new RaiderActivity('Activity_Standhoverboard')\n    static HitLefthoverboard = new RaiderActivity('!Activity_HitLefthoverboard')\n    static HitRighthoverboard = new RaiderActivity('!Activity_HitRighthoverboard')\n    static HitFronthoverboard = new RaiderActivity('!Activity_HitFronthoverboard')\n    static HitBackhoverboard = new RaiderActivity('!Activity_HitBackhoverboard')\n\n    static SMALLTRUCK = new RaiderActivity('Activity_SMALLTRUCK')\n    static StandSMALLTRUCK = new RaiderActivity('Activity_StandSMALLTRUCK')\n    static HitLeftSMALLTRUCK = new RaiderActivity('!Activity_HitLeftSMALLTRUCK')\n    static HitRightSMALLTRUCK = new RaiderActivity('!Activity_HitRightSMALLTRUCK')\n    static HitFrontSMALLTRUCK = new RaiderActivity('!Activity_HitFrontSMALLTRUCK')\n    static HitBackSMALLTRUCK = new RaiderActivity('!Activity_HitBackSMALLTRUCK')\n\n    static SMALLheli = new RaiderActivity('Activity_SMALLheli')\n    static StandSMALLheli = new RaiderActivity('Activity_StandSMALLheli')\n    static HitLeftSMALLheli = new RaiderActivity('!Activity_HitLeftSMALLheli')\n    static HitRightSMALLheli = new RaiderActivity('!Activity_HitRightSMALLheli')\n    static HitFrontSMALLheli = new RaiderActivity('!Activity_HitFrontSMALLheli')\n    static HitBackSMALLheli = new RaiderActivity('!Activity_HitBackSMALLheli')\n\n    static SMALLCAT = new RaiderActivity('Activity_SMALLCAT')\n    static StandSMALLCAT = new RaiderActivity('Activity_StandSMALLCAT')\n    static HitLeftSMALLCAT = new RaiderActivity('!Activity_HitLeftSMALLCAT')\n    static HitRightSMALLCAT = new RaiderActivity('!Activity_HitRightSMALLCAT')\n    static HitFrontSMALLCAT = new RaiderActivity('!Activity_HitFrontSMALLCAT')\n    static HitBackSMALLCAT = new RaiderActivity('!Activity_HitBackSMALLCAT')\n\n    static SMALLMLP = new RaiderActivity('Activity_SMALLMLP')\n    static StandSMALLMLP = new RaiderActivity('Activity_StandSMALLMLP')\n    static HitLeftSMALLMLP = new RaiderActivity('!Activity_HitLeftSMALLMLP')\n    static HitRightSMALLMLP = new RaiderActivity('!Activity_HitRightSMALLMLP')\n    static HitFrontSMALLMLP = new RaiderActivity('!Activity_HitFrontSMALLMLP')\n    static HitBackSMALLMLP = new RaiderActivity('!Activity_HitBackSMALLMLP')\n\n    static LARGECAT = new RaiderActivity('Activity_LARGECAT')\n    static StandLARGECAT = new RaiderActivity('Activity_StandLARGECAT')\n    static HitLeftLARGECAT = new RaiderActivity('!Activity_HitLeftLARGECAT')\n    static HitRightLARGECAT = new RaiderActivity('!Activity_HitRightLARGECAT')\n    static HitFrontLARGECAT = new RaiderActivity('!Activity_HitFrontLARGECAT')\n    static HitBackLARGECAT = new RaiderActivity('!Activity_HitBackLARGECAT')\n\n    static SMALLDIGGER = new RaiderActivity('Activity_SMALLDIGGER')\n    static StandSMALLDIGGER = new RaiderActivity('Activity_StandSMALLDIGGER')\n\n}\n","import { Vector2 } from 'three'\nimport { RaiderActivity } from './activities/RaiderActivity'\nimport { MaterialEntity } from './material/MaterialEntity'\n\nexport class PathTarget {\n\n    targetLocation: Vector2\n\n    constructor(location: Vector2) {\n        this.targetLocation = location\n    }\n\n    canGatherItem(): boolean {\n        return false\n    }\n\n    gatherItem(item: MaterialEntity) {\n        item.addToScene(null, null)\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n}\n","import { RaiderActivity } from '../activities/RaiderActivity'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { MaterialEntity } from '../material/MaterialEntity'\nimport { PathTarget } from '../PathTarget'\nimport { RaiderTool } from '../raider/RaiderTool'\nimport { RaiderTraining } from '../raider/RaiderTraining'\nimport { JobState } from './JobState'\n\nexport abstract class Job {\n\n    jobState: JobState\n\n    constructor() {\n        this.jobState = JobState.INCOMPLETE\n    }\n\n    abstract assign(fulfiller: FulfillerEntity)\n\n    abstract unAssign(fulfiller: FulfillerEntity)\n\n    abstract cancel()\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.NONE\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return RaiderTraining.NONE\n    }\n\n    isReadyToComplete(): boolean {\n        return true\n    }\n\n    onJobComplete() {\n        this.jobState = JobState.COMPLETE\n    }\n\n    abstract getWorkplaces(): PathTarget[];\n\n    setActualWorkplace(target: PathTarget) {\n    }\n\n    getCarryItem(): MaterialEntity {\n        return null\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return null\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        return null\n    }\n\n}\n\n","import { FulfillerEntity } from '../FulfillerEntity'\nimport { Job } from './Job'\nimport { JobState } from './JobState'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport abstract class ShareableJob extends Job {\n\n    fulfiller: FulfillerEntity[] = []\n\n    abstract getPriorityIdentifier(): PriorityIdentifier\n\n    assign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller)\n        if (fulfiller && index === -1) {\n            this.fulfiller.push(fulfiller)\n        }\n    }\n\n    unAssign(fulfiller: FulfillerEntity) {\n        this.fulfiller.remove(fulfiller)\n    }\n\n    cancel() {\n        this.jobState = JobState.CANCELED\n        const fulfiller = this.fulfiller // ensure consistency while processing\n        this.fulfiller = []\n        fulfiller.forEach((fulfiller) => fulfiller.stopJob())\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { Surface } from '../../map/Surface'\nimport { SurfaceType } from '../../map/SurfaceType'\nimport { MaterialEntity } from '../../material/MaterialEntity'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { ShareableJob } from '../ShareableJob'\n\nexport class CompletePowerPathJob extends ShareableJob {\n\n    surface: Surface\n    placedItems: MaterialEntity[]\n    workplaces: PathTarget[]\n\n    constructor(surface: Surface, placedItems: MaterialEntity[]) {\n        super()\n        this.surface = surface\n        this.placedItems = placedItems\n        this.workplaces = [new PathTarget(surface.getRandomPosition())]\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.placedItems.forEach((placed) => placed.removeFromScene())\n        this.surface.setSurfaceType(SurfaceType.POWER_PATH)\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.SHOVEL\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityConstruction\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.workplaces\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Clear\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { DeselectAll } from '../../../event/LocalEvents'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { EntityManager } from '../../EntityManager'\nimport { BarrierActivity } from '../activities/BarrierActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { EntityType } from '../EntityType'\nimport { CompletePowerPathJob } from '../job/surface/CompletePowerPathJob'\nimport { Surface } from '../map/Surface'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { Barrier } from '../material/Barrier'\nimport { Crystal } from '../material/Crystal'\nimport { MaterialEntity } from '../material/MaterialEntity'\nimport { Ore } from '../material/Ore'\nimport { BuildingEntity } from './BuildingEntity'\n\nexport class BuildingSite {\n\n    entityMgr: EntityManager\n    primarySurface: Surface = null\n    secondarySurface: Surface = null\n    primaryPathSurface: Surface = null\n    surfaces: Surface[] = []\n    building: BuildingEntity\n    heading: number = 0\n    neededByType: Map<EntityType, number> = new Map()\n    assignedByType: Map<EntityType, MaterialEntity[]> = new Map()\n    onSiteByType: Map<EntityType, MaterialEntity[]> = new Map()\n    complete: boolean = false\n    canceled: boolean = false\n\n    constructor(entityMgr: EntityManager, primarySurface: Surface, secondarySurface: Surface, primaryPathSurface: Surface, secondaryPathSurface: Surface, building: BuildingEntity) {\n        this.entityMgr = entityMgr\n        this.primarySurface = primarySurface\n        this.primarySurface.setSite(this)\n        this.surfaces.push(this.primarySurface)\n        this.secondarySurface = secondarySurface\n        if (this.secondarySurface) {\n            this.secondarySurface.setSite(this)\n            this.surfaces.push(this.secondarySurface)\n        }\n        this.primaryPathSurface = primaryPathSurface\n        this.primaryPathSurface.setSurfaceType(SurfaceType.POWER_PATH_BUILDING)\n        this.surfaces.push(this.primaryPathSurface)\n        if (secondaryPathSurface) {\n            secondaryPathSurface.setSurfaceType(SurfaceType.POWER_PATH_BUILDING)\n            this.surfaces.push(secondaryPathSurface)\n        }\n        this.building = building\n    }\n\n    getRandomDropPosition(): Vector2 {\n        return this.primarySurface.getRandomPosition()\n    }\n\n    needs(EntityType: EntityType): boolean {\n        const needed = this.neededByType.getOrUpdate(EntityType, () => 0)\n        const assigned = this.assignedByType.getOrUpdate(EntityType, () => []).length\n        return needed > assigned\n    }\n\n    assign(item: MaterialEntity) {\n        this.assignedByType.getOrUpdate(item.entityType, () => []).push(item)\n    }\n\n    unAssign(item: MaterialEntity) {\n        this.assignedByType.getOrUpdate(item.entityType, () => []).remove(item)\n    }\n\n    addItem(item: MaterialEntity) {\n        const needed = this.neededByType.getOrUpdate(item.entityType, () => 0)\n        if (this.onSiteByType.getOrUpdate(item.entityType, () => []).length < needed) {\n            item.onAddToSite()\n            this.onSiteByType.getOrUpdate(item.entityType, () => []).push(item)\n            this.checkComplete()\n        } else {\n            item.resetTarget()\n        }\n    }\n\n    checkComplete() {\n        if (this.complete || this.canceled) return\n        this.complete = true\n        this.neededByType.forEach((needed, neededType) => {\n            this.complete = this.complete && this.onSiteByType.getOrUpdate(neededType, () => []).length >= needed\n        })\n        if (!this.complete) return\n        this.entityMgr.buildingSites.remove(this)\n        if (!this.building) {\n            const items = []\n            this.onSiteByType.forEach((itemsOnSite) => items.push(...itemsOnSite))\n            EventBus.publishEvent(new JobCreateEvent(new CompletePowerPathJob(this.primarySurface, items)))\n        } else {\n            this.onSiteByType.getOrUpdate(EntityType.BARRIER, () => []).forEach((item: Barrier) => {\n                item.changeActivity(BarrierActivity.Teleport, () => item.removeFromScene())\n            })\n            this.onSiteByType.getOrUpdate(EntityType.CRYSTAL, () => []).forEach((item: Crystal) => {\n                item.removeFromScene()\n            })\n            this.onSiteByType.getOrUpdate(EntityType.ORE, () => []).forEach((item: Ore) => {\n                item.removeFromScene()\n            })\n            const world = this.primarySurface.getCenterWorld2D()\n            this.building.placeDown(world, -this.heading + Math.PI / 2, false)\n        }\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n    cancelSite() {\n        this.entityMgr.buildingSites.remove(this)\n        this.canceled = true\n        this.surfaces.forEach((s) => s?.setSite(null))\n        this.onSiteByType.forEach((materials) => materials.forEach((item) => {\n            this.entityMgr.placeMaterial(item, item.getPosition2D())\n        }))\n        this.onSiteByType.clear()\n        this.assignedByType.forEach((materials) => materials.forEach((item) => {\n            item.resetTarget()\n        }))\n        this.assignedByType.clear()\n        EventBus.publishEvent(new DeselectAll())\n    }\n\n    getWalkOutSurface(): Surface {\n        return this.primaryPathSurface || this.primarySurface.neighbors.find((n) => !n.site && n.isWalkable()) ||\n            this.secondarySurface?.neighbors.find((n) => !n.site && n.isWalkable())\n    }\n\n}\n","export enum WALL_TYPE {\n\n    CORNER = 1,\n    WALL = 2,\n    INVERTED_CORNER = 3,\n    WEIRD_CREVICE = 20,\n\n}\n","import { BufferGeometry, Vector2, Vector3 } from 'three'\nimport { BufferAttribute } from 'three/src/core/BufferAttribute'\nimport { WALL_TYPE } from './WallType'\n\nexport class SurfaceGeometry {\n\n    public static create(wallType: WALL_TYPE,\n                         topLeftVertex: Vector3, topRightVertex: Vector3, bottomRightVertex: Vector3, bottomLeftVertex: Vector3,\n                         topLeftHeight: number, topRightHeight: number, bottomRightHeight: number, bottomLeftHeight: number,\n    ) {\n        let uvOffset = 0\n\n        // not-rotated\n        // 1 ?\n        // ? 0\n        if (topLeftVertex.y && !bottomRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topRightVertex.y)))) {\n            uvOffset = 0\n        }\n\n        // 90 clock-wise\n        // ? 1\n        // 0 ?\n        if (topRightVertex.y && !bottomLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomRightVertex.y)))) {\n            uvOffset = 3\n        }\n\n        // 180 clock-wise\n        // 0 ?\n        // ? 1\n        if (bottomRightVertex.y && !topLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomLeftVertex.y)))) {\n            uvOffset = 2\n        }\n\n        // 270 clock-wise\n        // ? 0\n        // 1 ?\n        if (bottomLeftVertex.y && !topRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topLeftVertex.y)))) {\n            uvOffset = 1\n        }\n\n        if (wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) {\n            if (topLeftVertex.y && bottomRightVertex.y) {\n                uvOffset = 0\n            }\n            if (topRightVertex.y && bottomLeftVertex.y) {\n                uvOffset = 3\n            }\n        }\n\n        /*\n        //\t\t0---1                1         0---1\n        //\t\t|   |  becomes      /|   and   |  /\n        //\t\t|   |             /  |         |/\n        //\t\t3---2            3---2         3\n        //\n        //\t\tOR\n        //\n        //\t\t0---1            0             0---1\n        //\t\t|   |  becomes   |\\    \t and    \\  |\n        //\t\t|   |            |  \\             \\|\n        //\t\t3---2            3---2             2\n        //\n        //\t\tTriangles 0-1-3 and 0-3-2\n        //\t\tQuad 0-1-3-2\n        */\n\n        const uv = [\n            new Vector2(0, 1),\n            new Vector2(1, 1),\n            new Vector2(1, 0),\n            new Vector2(0, 0),\n        ]\n\n        const bufferVertices = []\n        const bufferNormals = []\n\n        function addFaceAndNormals(a, b, c) {\n            bufferVertices.push(a, b, c)\n            const normal = new Vector3().subVectors(c, b)\n            normal.cross(new Vector3().subVectors(a, b))\n            normal.normalize()\n            bufferNormals.push(normal, normal, normal)\n        }\n\n        const uvIndexes = []\n        if (topRightVertex.y !== bottomLeftVertex.y ||\n            ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) && !(topRightVertex.y && bottomLeftVertex.y))) {\n            uvIndexes.push(1, 3, 2)\n            uvIndexes.push(1, 0, 3)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topRightVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topRightVertex, topLeftVertex, bottomLeftVertex)\n        } else {\n            uvIndexes.push(0, 3, 2)\n            uvIndexes.push(0, 2, 1)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topLeftVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topLeftVertex, bottomRightVertex, topRightVertex)\n        }\n\n        const bufferVertexUvs = uvIndexes.map(i => uv[(i + uvOffset) % 4])\n\n        const bufferGeometry = new BufferGeometry()\n        bufferGeometry.setAttribute('position', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferVertices))\n        bufferGeometry.setAttribute('normal', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferNormals))\n        bufferGeometry.setAttribute('uv', new BufferAttribute(new Float32Array(12), 2).copyVector2sArray(bufferVertexUvs))\n        return bufferGeometry\n    }\n}\n","import { Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { TILESIZE } from '../../../params'\nimport { SequenceTextureMaterial } from '../../../scene/SequenceTextureMaterial'\nimport { SceneManager } from '../../SceneManager'\nimport { Surface } from '../map/Surface'\nimport { SurfaceGeometry } from '../map/SurfaceGeometry'\nimport { WALL_TYPE } from '../map/WallType'\n\nexport class BuildPlacementMarkerMesh extends Mesh {\n\n    static readonly geometry = SurfaceGeometry.create(WALL_TYPE.WALL,\n        new Vector3(0, 0, 0), new Vector3(TILESIZE, 0, 0),\n        new Vector3(TILESIZE, 0, TILESIZE), new Vector3(0, 0, TILESIZE),\n        1, 1, 1, 1,\n    )\n\n    sceneMgr: SceneManager\n    standardColor: number\n\n    constructor(sceneMgr: SceneManager, standardColor: number) {\n        super(BuildPlacementMarkerMesh.geometry, new MeshPhongMaterial({\n            shininess: 0,\n            transparent: true,\n            opacity: 0.4,\n            color: standardColor,\n        }))\n        this.sceneMgr = sceneMgr\n        this.standardColor = standardColor\n        this.visible = false\n    }\n\n    updateState(position: { x: number, y: number }, heading: number, primaryPosition: Vector3) {\n        this.visible = !!position\n        if (position) {\n            this.position.set(position.x, 0, position.y).multiplyScalar(TILESIZE)\n                .applyAxisAngle(new Vector3(0, 1, 0), -heading + Math.PI / 2)\n                .add(primaryPosition)\n        }\n    }\n\n    markAsValid(isValid: boolean) {\n        const color = isValid ? this.standardColor : 0x500000;\n        (this.material as SequenceTextureMaterial).color.setHex(color)\n    }\n\n    get surface(): Surface {\n        return this.visible ? this.sceneMgr.terrain.getSurfaceFromWorld(this.position) : null\n    }\n\n}\n","import { Group, Vector2 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { CancelBuildMode } from '../../../event/GuiCommand'\nimport { DeselectAll } from '../../../event/LocalEvents'\nimport { TILESIZE } from '../../../params'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { BarrierLocation } from '../material/BarrierLocation'\nimport { BuildingEntity } from './BuildingEntity'\nimport { BuildingSite } from './BuildingSite'\nimport { BuildPlacementMarkerMesh } from './BuildPlacementMarkerMesh'\n\nexport class BuildPlacementMarker {\n\n    static readonly buildingMarkerColor: number = 0x005000\n    static readonly pathMarkerColor: number = 0x505000\n    static readonly waterMarkerColor: number = 0x000050\n\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    group: Group = new Group()\n    markers: BuildPlacementMarkerMesh[] = []\n    buildingMarkerPrimary: BuildPlacementMarkerMesh = null\n    buildingMarkerSecondary: BuildPlacementMarkerMesh = null\n    powerPathMarkerPrimary: BuildPlacementMarkerMesh = null\n    powerPathMarkerSecondary: BuildPlacementMarkerMesh = null\n    waterPathMarker: BuildPlacementMarkerMesh = null\n    heading: number = 0\n    sdx: number = 0\n    sdz: number = 0\n    lastCheck: boolean = false\n    buildModeSelection: BuildingEntity = null\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager, entityMgr: EntityManager) {\n        this.worldMgr = worldMgr\n        this.sceneMgr = sceneMgr\n        this.entityMgr = entityMgr\n        this.buildingMarkerPrimary = new BuildPlacementMarkerMesh(this.sceneMgr, BuildPlacementMarker.buildingMarkerColor)\n        this.buildingMarkerSecondary = new BuildPlacementMarkerMesh(this.sceneMgr, BuildPlacementMarker.buildingMarkerColor)\n        this.powerPathMarkerPrimary = new BuildPlacementMarkerMesh(this.sceneMgr, BuildPlacementMarker.pathMarkerColor)\n        this.powerPathMarkerSecondary = new BuildPlacementMarkerMesh(this.sceneMgr, BuildPlacementMarker.pathMarkerColor)\n        this.waterPathMarker = new BuildPlacementMarkerMesh(this.sceneMgr, BuildPlacementMarker.waterMarkerColor)\n        this.addMarker(this.buildingMarkerPrimary)\n        this.addMarker(this.buildingMarkerSecondary)\n        this.addMarker(this.powerPathMarkerPrimary)\n        this.addMarker(this.powerPathMarkerSecondary)\n        this.addMarker(this.waterPathMarker)\n    }\n\n    private addMarker(marker: BuildPlacementMarkerMesh) {\n        this.group.add(marker)\n        this.markers.push(marker)\n    }\n\n    update(worldPosition: Vector2) {\n        if (!worldPosition || !this.buildModeSelection) {\n            this.hideAllMarker()\n        } else {\n            const isValid = this.updateAllMarker(worldPosition)\n            this.markers.forEach((c) => c.markAsValid(isValid))\n        }\n    }\n\n    private updateAllMarker(worldPosition: Vector2 = null): boolean {\n        // TODO use surface height offsets, refactor terrain map/data handling before\n        this.buildingMarkerPrimary.visible = true\n        this.buildingMarkerPrimary.position.copy(this.sceneMgr.getFloorPosition(new Vector2(Math.floor(worldPosition.x / TILESIZE) * TILESIZE, Math.floor(worldPosition.y / TILESIZE) * TILESIZE)))\n        const sdxv = worldPosition.x - this.buildingMarkerPrimary.position.x - TILESIZE / 2\n        const sdzv = worldPosition.y - this.buildingMarkerPrimary.position.z - TILESIZE / 2\n        const sdx = Math.abs(sdxv) > Math.abs(sdzv) ? Math.sign(sdxv) : 0\n        const sdz = Math.abs(sdzv) > Math.abs(sdxv) ? Math.sign(sdzv) : 0\n        if (this.sdx === sdx && this.sdz === sdz) return this.lastCheck\n        this.sdx = sdx\n        this.sdz = sdz\n        this.heading = Math.atan2(sdz, sdx)\n        this.buildingMarkerSecondary.updateState(this.buildModeSelection.secondaryBuildingPart, this.heading, this.buildingMarkerPrimary.position)\n        this.powerPathMarkerPrimary.updateState(this.buildModeSelection.primaryPowerPath, this.heading, this.buildingMarkerPrimary.position)\n        this.powerPathMarkerSecondary.updateState(this.buildModeSelection.secondaryPowerPath, this.heading, this.buildingMarkerPrimary.position)\n        this.waterPathMarker.updateState(this.buildModeSelection.waterPathSurface, this.heading, this.buildingMarkerPrimary.position)\n        const allSurfacesAreGround = [this.buildingMarkerPrimary, this.buildingMarkerSecondary, this.powerPathMarkerPrimary, this.powerPathMarkerSecondary]\n            .filter((c) => c.visible).map((c) => this.sceneMgr.terrain.getSurfaceFromWorld(c.position)).every((s) => s.surfaceType === SurfaceType.GROUND)\n        this.lastCheck = allSurfacesAreGround && (\n            [this.powerPathMarkerPrimary, this.powerPathMarkerSecondary].some((c) => c.visible && c.surface.neighbors.some((n) => n.surfaceType === SurfaceType.POWER_PATH)) ||\n            (!this.buildModeSelection.primaryPowerPath && (this.buildingMarkerPrimary.surface.neighbors.some((n) => n.surfaceType === SurfaceType.POWER_PATH ||\n                (this.buildingMarkerSecondary.visible && this.buildingMarkerSecondary.surface.neighbors.some((n) => n.surfaceType === SurfaceType.POWER_PATH)))))\n        ) && (!this.waterPathMarker.visible || this.waterPathMarker.surface.surfaceType === SurfaceType.WATER)\n        return this.lastCheck\n    }\n\n    hideAllMarker() {\n        this.markers.forEach((m) => m.visible = false)\n        this.lastCheck = false\n    }\n\n    createBuildingSite() {\n        if (!this.buildModeSelection || !this.lastCheck) return\n        const barrierLocations = this.getBarrierLocations()\n        const stats = this.buildModeSelection.stats\n        const neededCrystals = stats?.CostCrystal || 0\n        const neededOre = stats?.CostOre || 0\n        const primarySurface = this.buildingMarkerPrimary.surface\n        const site = new BuildingSite(this.entityMgr, primarySurface, this.buildingMarkerSecondary.surface, this.powerPathMarkerPrimary.surface, this.powerPathMarkerSecondary.surface, this.buildModeSelection)\n        site.heading = this.heading\n        site.neededByType.set(EntityType.BARRIER, barrierLocations.length)\n        site.neededByType.set(EntityType.CRYSTAL, neededCrystals)\n        site.neededByType.set(EntityType.ORE, neededOre)\n        this.entityMgr.buildingSites.push(site)\n        const closestToolstation = this.entityMgr.getClosestBuildingByType(primarySurface.getCenterWorld(), EntityType.TOOLSTATION)\n        if (closestToolstation) {\n            closestToolstation.spawnBarriers(barrierLocations, site)\n            closestToolstation.spawnMaterials(EntityType.CRYSTAL, neededCrystals)\n            closestToolstation.spawnMaterials(EntityType.ORE, neededOre)\n        }\n        EventBus.publishEvent(new DeselectAll())\n        EventBus.publishEvent(new CancelBuildMode())\n    }\n\n    getBarrierLocations(): BarrierLocation[] {\n        const barrierLocations: BarrierLocation[] = []\n        const centerPrimary = this.buildingMarkerPrimary.surface.getCenterWorld2D()\n        const barrierOffset = TILESIZE * 9 / 20\n        if (this.buildingMarkerSecondary.visible) {\n            const centerSecondary = this.buildingMarkerSecondary.surface.getCenterWorld2D()\n            const dx = Math.sign(centerSecondary.x - centerPrimary.x)\n            const dy = Math.sign(centerSecondary.y - centerPrimary.y)\n            if (dx !== 0) {\n                barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x - dx * barrierOffset, centerPrimary.y), centerPrimary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x, centerPrimary.y - barrierOffset), centerPrimary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x, centerPrimary.y + barrierOffset), centerPrimary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerSecondary.x + dx * barrierOffset, centerSecondary.y), centerSecondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerSecondary.x, centerSecondary.y - barrierOffset), centerSecondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerSecondary.x, centerSecondary.y + barrierOffset), centerSecondary))\n            } else {\n                barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x, centerPrimary.y - dy * barrierOffset), centerPrimary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x - barrierOffset, centerPrimary.y), centerPrimary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x + barrierOffset, centerPrimary.y), centerPrimary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerSecondary.x, centerSecondary.y + dy * barrierOffset), centerSecondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerSecondary.x - barrierOffset, centerSecondary.y), centerSecondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerSecondary.x + barrierOffset, centerSecondary.y), centerSecondary))\n            }\n        } else {\n            barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x - barrierOffset, centerPrimary.y), centerPrimary))\n            barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x, centerPrimary.y - barrierOffset), centerPrimary))\n            barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x + barrierOffset, centerPrimary.y), centerPrimary))\n            barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x, centerPrimary.y + barrierOffset), centerPrimary))\n        }\n        return barrierLocations\n    }\n\n}\n","import { PathTarget } from '../PathTarget'\nimport { BuildingEntity } from './BuildingEntity'\n\nexport class BuildingPathTarget extends PathTarget {\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(building.getPosition2D())\n        this.building = building\n    }\n\n}\n","import { PathTarget } from '../../PathTarget'\nimport { Raider } from '../../raider/Raider'\nimport { Job } from '../Job'\nimport { JobState } from '../JobState'\n\nexport abstract class RaiderJob extends Job {\n\n    raider: Raider\n\n    abstract getWorkplaces(): PathTarget[]\n\n    assign(raider: Raider) {\n        if (this.raider === raider) return\n        if (this.raider) throw 'Job already assigned'\n        this.raider = raider\n    }\n\n    unAssign(raider: Raider) {\n        if (this.raider !== raider) return\n        this.raider = null\n    }\n\n    cancel() {\n        this.jobState = JobState.CANCELED\n        this.raider?.stopJob()\n    }\n\n}\n","import { EntityManager } from '../../../EntityManager'\nimport { BuildingEntity } from '../../building/BuildingEntity'\nimport { BuildingPathTarget } from '../../building/BuildingPathTarget'\nimport { EntityType } from '../../EntityType'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { RaiderJob } from './RaiderJob'\n\nexport class GetToolJob extends RaiderJob {\n\n    entityMgr: EntityManager\n    tool: RaiderTool\n    workplaces: BuildingPathTarget[]\n\n    constructor(entityMgr: EntityManager, tool: RaiderTool, toolstation: BuildingEntity) {\n        super()\n        this.entityMgr = entityMgr\n        this.tool = tool\n        this.workplaces = toolstation ? [toolstation.getPathTarget()] : this.entityMgr.getBuildingsByType(EntityType.TOOLSTATION).map((b) => new BuildingPathTarget(b))\n    }\n\n    getWorkplaces(): BuildingPathTarget[] {\n        if (this.workplaces.some((b) => !b.building.isUsable())) {\n            this.workplaces = this.entityMgr.getBuildingsByType(EntityType.TOOLSTATION).map((b) => new BuildingPathTarget(b))\n        }\n        return this.workplaces\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.raider.addTool(this.tool)\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderJob } from './RaiderJob'\n\nexport class MoveJob extends RaiderJob {\n\n    target: PathTarget[]\n\n    constructor(target: Vector2) {\n        super()\n        this.target = [new PathTarget(target)]\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.target\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { Sample } from '../../audio/Sample'\nimport { SoundManager } from '../../audio/SoundManager'\nimport { SelectPanelType } from '../../event/LocalEvents'\nimport { BuildingEntity } from './building/BuildingEntity'\nimport { EntityType } from './EntityType'\nimport { Job } from './job/Job'\nimport { GetToolJob } from './job/raider/GetToolJob'\nimport { MoveJob } from './job/raider/MoveJob'\nimport { Surface } from './map/Surface'\nimport { Raider } from './raider/Raider'\nimport { Selectable } from './Selectable'\nimport { VehicleEntity } from './vehicle/VehicleEntity'\n\nexport class GameSelection {\n\n    surface: Surface = null\n    building: BuildingEntity = null\n    raiders: Raider[] = []\n    vehicles: VehicleEntity[] = []\n\n    isEmpty(): boolean {\n        return !this.surface && !this.building && this.raiders.length < 1 && this.vehicles.length < 1\n    }\n\n    set(selection: GameSelection) {\n        let added = false\n        added = GameSelection.syncSelection(this.raiders, selection.raiders) || added\n        added = GameSelection.syncSelection(this.vehicles, selection.vehicles) || added\n        if (this.building !== selection.building) {\n            this.building?.deselect()\n            if (selection.building?.isInSelection()) {\n                this.building = selection.building\n                if (this.building.select()) added = true\n            } else {\n                this.building = null\n            }\n        }\n        if (this.surface !== selection.surface) {\n            this.surface?.deselect()\n            if (selection.surface?.isInSelection()) {\n                this.surface = selection.surface\n                if (this.surface.select()) added = true\n            } else {\n                this.surface = null\n            }\n        }\n        if (added) SoundManager.playSample(Sample.SFX_Okay)\n    }\n\n    private static syncSelection(before: Selectable[], after: Selectable[]): boolean {\n        let added = false\n        before.forEach((r) => {\n            if (after.indexOf(r) === -1) {\n                before.remove(r)\n                r.deselect()\n            }\n        })\n        after.forEach((r) => {\n            if (before.indexOf(r) === -1) {\n                if (r.select()) {\n                    before.push(r)\n                    added = true\n                }\n            }\n        })\n        return added\n    }\n\n    getSelectPanelType(): SelectPanelType {\n        if (this.raiders.length > 0) {\n            return SelectPanelType.RAIDER\n        } else if (this.vehicles.length > 0) {\n            return SelectPanelType.VEHICLE\n        } else if (this.building) {\n            return SelectPanelType.BUILDING\n        } else if (this.surface) {\n            return SelectPanelType.SURFACE\n        }\n    }\n\n    assignSurfaceJob(job: Job) {\n        if (!job) return\n        this.raiders.forEach((r) => {\n            if (r.isPrepared(job)) {\n                r.setJob(job)\n            } else {\n                r.setJob(new GetToolJob(r.entityMgr, job.getRequiredTool(), r.entityMgr.getClosestBuildingByType(r.getPosition(), EntityType.TOOLSTATION)), job)\n            }\n        })\n        this.vehicles.forEach((v) => {\n            if (v.isPrepared(job)) {\n                v.setJob(job)\n            } // do not auto upgrade vehicles\n        })\n    }\n\n    assignMoveJob(target: Vector2) {\n        if (!target) return\n        this.raiders.forEach((r) => r.setJob(new MoveJob(target)))\n        this.vehicles.forEach((v) => v.setJob(new MoveJob(target)))\n    }\n\n    deselectAll() {\n        this.raiders.forEach((r) => r.deselect())\n        this.raiders = []\n        this.vehicles.forEach((v) => v.deselect())\n        this.vehicles = []\n        this.building?.deselect()\n        this.building = null\n        this.surface?.deselect()\n        this.surface = null\n    }\n\n}\n","// javascript-astar 0.4.1 (converted to typescript by Scarabol)\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n\nfunction pathTo(node) {\n    let curr = node\n    const path = []\n    while (curr.parent) {\n        path.unshift(curr)\n        curr = curr.parent\n    }\n    return path\n}\n\nfunction getHeap() {\n    return new BinaryHeap(function (node) {\n        return node.f\n    })\n}\n\nexport const astar = {\n\n    /**\n     * Perform an A* Search on a graph given a start and end node.\n     * @param {Graph} graph\n     * @param {GridNode} start\n     * @param {GridNode} end\n     * @param {Object} [options]\n     * @param {boolean} [options.closest] Specifies whether to return the\n     path to the closest node if the target is unreachable.\n     * @param {Function} [options.heuristic] Heuristic function (see\n     *          astar.heuristics).\n     */\n    search(graph: Graph, start: GridNode, end: GridNode, options = null): GridNode[] {\n        graph.cleanDirty()\n        options = options || {}\n        const heuristic = options.heuristic || astar.heuristics.manhattan\n        const closest = options.closest || false\n\n        const openHeap = getHeap()\n        let closestNode = start  // set the start node to be the closest if required\n\n        start.h = heuristic(start, end)\n        graph.markDirty(start)\n\n        openHeap.push(start)\n\n        while (openHeap.size() > 0) {\n\n            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n            const currentNode = openHeap.pop()\n\n            // End case -- result has been found, return the traced path.\n            if (currentNode === end) {\n                return pathTo(currentNode)\n            }\n\n            // Normal case -- move currentNode from open to closed, process each of its neighbors.\n            currentNode.closed = true\n\n            // Find all neighbors for the current node.\n            const neighbors = graph.neighbors(currentNode)\n\n            let i = 0\n            const il = neighbors.length\n            for (; i < il; ++i) {\n                const neighbor = neighbors[i]\n\n                if (neighbor.closed || neighbor.isWall()) {\n                    // Not a valid node to process, skip to next neighbor.\n                    continue\n                }\n\n                // The g score is the shortest distance from start to current node.\n                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n                const gScore = currentNode.g + neighbor.getCost(currentNode)\n                const beenVisited = neighbor.visited\n\n                if (!beenVisited || gScore < neighbor.g) {\n\n                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n                    neighbor.visited = true\n                    neighbor.parent = currentNode\n                    neighbor.h = neighbor.h || heuristic(neighbor, end)\n                    neighbor.g = gScore\n                    neighbor.f = neighbor.g + neighbor.h\n                    graph.markDirty(neighbor)\n                    if (closest) {\n                        // If the neighbour is closer than the current closestNode or if it's equally close but has\n                        // a cheaper path than the current closest node then it becomes the closest node\n                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n                            closestNode = neighbor\n                        }\n                    }\n\n                    if (!beenVisited) {\n                        // Pushing to heap will put it in proper place based on the 'f' value.\n                        openHeap.push(neighbor)\n                    } else {\n                        // Already seen the node, but since it has been rescored we need to reorder it in the heap\n                        openHeap.rescoreElement(neighbor)\n                    }\n                }\n            }\n        }\n\n        if (closest) {\n            return pathTo(closestNode)\n        }\n\n        // No result was found - empty array signifies failure to find path.\n        return []\n    },\n\n    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n    heuristics: {\n        manhattan(pos0, pos1) {\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return d1 + d2\n        },\n\n        diagonal(pos0, pos1) {\n            const D = 1\n            const D2 = Math.sqrt(2)\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2))\n        },\n    },\n\n    cleanNode(node) {\n        node.f = 0\n        node.g = 0\n        node.h = 0\n        node.visited = false\n        node.closed = false\n        node.parent = null\n    },\n}\n\nexport class Graph {\n\n    readonly nodes: GridNode[] = []\n    readonly diagonal: boolean\n    readonly grid: GridNode[][] = []\n    dirtyNodes: GridNode[] = []\n\n    /**\n     * A graph memory structure\n     * @param {Array} gridIn 2D array of input weights\n     * @param {Object} [options]\n     * @param {boolean} [options.diagonal] Specifies whether diagonal moves are allowed\n     */\n    constructor(gridIn: number[][], options = null) {\n        options = options || {}\n        this.diagonal = !!options.diagonal\n        for (let x = 0; x < gridIn.length; x++) {\n            this.grid[x] = []\n\n            let y = 0\n            const row = gridIn[x]\n            for (; y < row.length; y++) {\n                const node = new GridNode(x, y, row[y])\n                this.grid[x][y] = node\n                this.nodes.push(node)\n            }\n        }\n        this.init()\n    }\n\n    init() {\n        this.dirtyNodes = []\n        for (let i = 0; i < this.nodes.length; i++) {\n            astar.cleanNode(this.nodes[i])\n        }\n    }\n\n    cleanDirty() {\n        for (let i = 0; i < this.dirtyNodes.length; i++) {\n            astar.cleanNode(this.dirtyNodes[i])\n        }\n        this.dirtyNodes = []\n    }\n\n    markDirty(node) {\n        this.dirtyNodes.push(node)\n    }\n\n    neighbors(node: GridNode) {\n        const ret: GridNode[] = []\n        const x = node.x\n        const y = node.y\n        const grid = this.grid\n\n        // West\n        if (grid[x - 1] && grid[x - 1][y]) {\n            ret.push(grid[x - 1][y])\n        }\n\n        // East\n        if (grid[x + 1] && grid[x + 1][y]) {\n            ret.push(grid[x + 1][y])\n        }\n\n        // South\n        if (grid[x] && grid[x][y - 1]) {\n            ret.push(grid[x][y - 1])\n        }\n\n        // North\n        if (grid[x] && grid[x][y + 1]) {\n            ret.push(grid[x][y + 1])\n        }\n\n        if (this.diagonal) {\n            // Southwest\n            if (grid[x - 1] && grid[x - 1][y - 1]\n                && grid[x] && grid[x][y - 1]?.weight // South\n                && grid[x - 1] && grid[x - 1][y]?.weight // West\n            ) {\n                ret.push(grid[x - 1][y - 1])\n            }\n\n            // Southeast\n            if (grid[x + 1] && grid[x + 1][y - 1]\n                && grid[x] && grid[x][y - 1]?.weight // South\n                && grid[x + 1] && grid[x + 1][y]?.weight // East\n            ) {\n                ret.push(grid[x + 1][y - 1])\n            }\n\n            // Northwest\n            if (grid[x - 1] && grid[x - 1][y + 1]\n                && grid[x] && grid[x][y + 1]?.weight // North\n                && grid[x - 1] && grid[x - 1][y]?.weight // West\n            ) {\n                ret.push(grid[x - 1][y + 1])\n            }\n\n            // Northeast\n            if (grid[x + 1] && grid[x + 1][y + 1]\n                && grid[x] && grid[x][y + 1]?.weight // North\n                && grid[x + 1] && grid[x + 1][y]?.weight // East\n            ) {\n                ret.push(grid[x + 1][y + 1])\n            }\n        }\n\n        return ret\n    }\n\n    toString() {\n        const graphString = []\n        const nodes = this.grid\n        for (let x = 0; x < nodes.length; x++) {\n            const rowDebug = []\n            const row = nodes[x]\n            for (let y = 0; y < row.length; y++) {\n                rowDebug.push(row[y].weight)\n            }\n            graphString.push(rowDebug.join(' '))\n        }\n        return graphString.join('\\n')\n    }\n}\n\nclass GridNode {\n\n    x: number\n    y: number\n    weight: number\n    h: number\n    closed: boolean\n    visited: boolean\n    g: number\n    parent: GridNode\n    f: number\n\n    constructor(x, y, weight) {\n        this.x = x\n        this.y = y\n        this.weight = weight\n    }\n\n    toString() {\n        return '[' + this.x + ' ' + this.y + ']'\n    }\n\n    getCost(fromNeighbor: GridNode) {\n        // Take diagonal weight into consideration.\n        if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n            return this.weight * 1.41421\n        }\n        return this.weight\n    }\n\n    isWall() {\n        return this.weight === 0\n    }\n}\n\nclass BinaryHeap {\n\n    content = []\n    scoreFunction\n\n    constructor(scoreFunction) {\n        this.content = []\n        this.scoreFunction = scoreFunction\n    }\n\n    push(element) {\n        // Add the new element to the end of the array.\n        this.content.push(element)\n\n        // Allow it to sink down.\n        this.sinkDown(this.content.length - 1)\n    }\n\n    pop() {\n        // Store the first element so we can return it later.\n        const result = this.content[0]\n        // Get the element at the end of the array.\n        const end = this.content.pop()\n        // If there are any elements left, put the end element at the\n        // start, and let it bubble up.\n        if (this.content.length > 0) {\n            this.content[0] = end\n            this.bubbleUp(0)\n        }\n        return result\n    }\n\n    remove(node) {\n        const i = this.content.indexOf(node)\n\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        const end = this.content.pop()\n\n        if (i !== this.content.length - 1) {\n            this.content[i] = end\n\n            if (this.scoreFunction(end) < this.scoreFunction(node)) {\n                this.sinkDown(i)\n            } else {\n                this.bubbleUp(i)\n            }\n        }\n    }\n\n    size() {\n        return this.content.length\n    }\n\n    rescoreElement(node) {\n        this.sinkDown(this.content.indexOf(node))\n    }\n\n    sinkDown(n) {\n        // Fetch the element that has to be sunk.\n        const element = this.content[n]\n\n        // When at 0, an element can not sink any further.\n        while (n > 0) {\n\n            // Compute the parent element's index, and fetch it.\n            const parentN = ((n + 1) >> 1) - 1\n            const parent = this.content[parentN]\n            // Swap the elements if the parent is greater.\n            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n                this.content[parentN] = element\n                this.content[n] = parent\n                // Update 'n' to continue at the new position.\n                n = parentN\n            }\n            // Found a parent that is less, no need to sink any further.\n            else {\n                break\n            }\n        }\n    }\n\n    bubbleUp(n) {\n        // Look up the target element and its score.\n        const length = this.content.length\n        const element = this.content[n]\n        const elemScore = this.scoreFunction(element)\n\n        while (true) {\n            // Compute the indices of the child elements.\n            const child2N = (n + 1) << 1\n            const child1N = child2N - 1\n            // This is used to store the new position of the element, if any.\n            let swap = null\n            let child1Score\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                const child1 = this.content[child1N]\n                child1Score = this.scoreFunction(child1)\n\n                // If the score is less than our element's, we need to swap.\n                if (child1Score < elemScore) {\n                    swap = child1N\n                }\n            }\n\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                const child2 = this.content[child2N]\n                const child2Score = this.scoreFunction(child2)\n                if (child2Score < (swap === null ? elemScore : child1Score)) {\n                    swap = child2N\n                }\n            }\n\n            // If the element needs to be moved, swap it, and continue.\n            if (swap !== null) {\n                this.content[n] = this.content[swap]\n                this.content[swap] = element\n                n = swap\n            }\n            // Otherwise, we are done.\n            else {\n                break\n            }\n        }\n    }\n}\n","import { Vector3 } from 'three'\nimport { EventKey } from './EventKeyEnum'\nimport { WorldEvent } from './WorldEvents'\n\nexport class WorldLocationEvent extends WorldEvent {\n\n    location: Vector3\n\n    constructor(entityKey: EventKey, location: Vector3) {\n        super(entityKey)\n        this.location = location\n    }\n\n}\n\nexport class GenericDeathEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_DEATH, location)\n    }\n\n}\n\nexport class GenericMonsterEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_MONSTER, location)\n    }\n\n}\n\nexport class CrystalFoundEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_CRYSTAL_FOUND, location)\n    }\n\n}\n\nexport class UnderAttackEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_UNDER_ATTACK, location)\n    }\n\n}\n\nexport class LandslideEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_LANDSLIDE, location)\n    }\n\n}\n\nexport class PowerDrainEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_POWER_DRAIN, location)\n    }\n\n}\n\nexport class SlugEmergeEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_SLUG_EMERGE, location)\n    }\n\n}\n\nexport class RaiderDiscoveredEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_RAIDER_DISCOVERED, location)\n    }\n\n}\n","import { AudioListener, Group, PositionalAudio } from 'three'\nimport { SoundManager } from '../../../audio/SoundManager'\nimport { getPath } from '../../../core/Util'\nimport { TILESIZE } from '../../../params'\nimport { LWSCLoader } from '../../../resource/LWSCLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { AnimClip } from './AnimClip'\n\nexport class AnimationGroup extends Group {\n\n    animation: AnimClip\n\n    constructor(lwsFilepath: string, audioListener: AudioListener) {\n        super()\n        const content = ResourceManager.getResource(lwsFilepath)\n        this.animation = new LWSCLoader(getPath(lwsFilepath), false).parse(content)\n        this.animation.bodies.forEach((body) => {\n            const polyModel = body.model.clone()\n            this.animation.polyList.push(polyModel)\n            if (body.lowerName && body.isNull) {\n                this.animation.nullJoints.getOrUpdate(body.lowerName.toLowerCase(), () => []).push(polyModel)\n            }\n            if (body.sfxName) {\n                const audio = new PositionalAudio(audioListener)\n                audio.setRefDistance(TILESIZE * 6) // TODO optimize ref distance for SFX sounds\n                audio.loop = false\n                polyModel.add(audio)\n                SoundManager.getSoundBuffer(body.sfxName).then((audioBuffer) => {\n                    audio.setBuffer(audioBuffer)\n                })\n                body.sfxFrames.forEach((frame) => this.animation.sfxAudioByFrame.getOrUpdate(frame, () => []).push(audio))\n            }\n        })\n\n        this.animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = this.animation.polyList[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                this.animation.polyList[parentInd].add(polyPart)\n            } else {\n                this.animation.polyModel.add(polyPart)\n            }\n        })\n\n        this.add(this.animation.polyModel)\n    }\n\n    startAnimation(onAnimationDone) {\n        this.animation.animate(0, onAnimationDone, null)\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { CarryPathTarget, SiteCarryPathTarget } from '../../material/CarryPathTarget'\nimport { MaterialEntity } from '../../material/MaterialEntity'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { ShareableJob } from '../ShareableJob'\n\nexport class CarryJob<I extends MaterialEntity> extends ShareableJob {\n\n    item: I\n    actualTarget: CarryPathTarget = null\n\n    constructor(item: I) {\n        super()\n        this.item = item\n    }\n\n    getWorkplaces(): CarryPathTarget[] {\n        return this.item.getCarryTargets()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return this.item.getPriorityIdentifier()\n    }\n\n    setActualWorkplace(target: CarryPathTarget) {\n        this.item.setTargetSite((target as SiteCarryPathTarget)?.site)\n        this.actualTarget = target\n    }\n\n    getCarryItem(): I {\n        return this.item\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return this.actualTarget.getDropAction()\n    }\n\n    isReadyToComplete(): boolean {\n        return this.actualTarget.canGatherItem()\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        const targetLocation = this.actualTarget.targetLocation\n        this.fulfiller.forEach((f) => {\n            f.sceneEntity.lookAt(new Vector3(targetLocation.x, f.sceneEntity.position.y, targetLocation.y))\n            f.dropItem()\n            this.item.sceneEntity.position.copy(this.item.sceneMgr.getFloorPosition(targetLocation))\n        })\n        this.actualTarget.gatherItem(this.item)\n    }\n\n}\n","import { Dynamite } from '../../material/Dynamite'\nimport { RaiderTraining } from '../../raider/RaiderTraining'\nimport { CarryJob } from './CarryJob'\n\nexport class CarryDynamiteJob extends CarryJob<Dynamite> {\n\n    color: number = 0xa06060\n\n    constructor(dynamite: Dynamite) {\n        super(dynamite)\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return RaiderTraining.DEMOLITION\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.item.ignite()\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { ShareableJob } from '../ShareableJob'\n\nexport class ClearRubbleJob extends ShareableJob {\n\n    surface: Surface\n    lastRubblePositions: PathTarget[]\n\n    constructor(surface: Surface) {\n        super()\n        this.surface = surface\n        this.lastRubblePositions = this.surface.rubblePositions.map((p) => new PathTarget(p))\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.SHOVEL\n    }\n\n    getWorkplaces(): PathTarget[] { // TODO optimize performance and code duplication\n        const surfaceRubblePositions = this.surface.rubblePositions\n        if (!this.lastRubblePositions.every((d) => surfaceRubblePositions.some((p) => p.equals(d.targetLocation))) ||\n            !surfaceRubblePositions.every((p) => this.lastRubblePositions.some((d) => p.equals(d.targetLocation)))) {\n            this.lastRubblePositions = surfaceRubblePositions.map((p) => new PathTarget(p))\n        }\n        return this.lastRubblePositions\n    }\n\n    onJobComplete() {\n        this.surface.reduceRubble()\n        if (!this.surface.hasRubble()) {\n            this.surface.clearRubbleJob = null\n            super.onJobComplete()\n        }\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityClearing\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Clear\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { FulfillerEntity } from '../../FulfillerEntity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { ShareableJob } from '../ShareableJob'\n\nexport class DrillJob extends ShareableJob {\n\n    color: number = 0xa0a0a0\n    surface: Surface\n    digPositions: PathTarget[]\n\n    constructor(surface: Surface) {\n        super()\n        this.surface = surface\n        this.digPositions = this.surface.getDigPositions().map((p) => new PathTarget(p))\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.DRILL\n    }\n\n    getWorkplaces(): PathTarget[] { // TODO optimize performance and code duplication\n        const surfaceDigPositions = this.surface.getDigPositions()\n        if (!this.digPositions.every((d) => surfaceDigPositions.some((p) => p.equals(d.targetLocation))) ||\n            !surfaceDigPositions.every((p) => this.digPositions.some((d) => p.equals(d.targetLocation)))) {\n            this.digPositions = surfaceDigPositions.map((p) => new PathTarget(p))\n        }\n        return this.digPositions\n    }\n\n    onJobComplete() {\n        if (this.surface.onDrillComplete(this.fulfiller.last().getPosition2D())) super.onJobComplete()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityDestruction\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Drill\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        const drillTimeInMsPerType: Map<EntityType, { drillTime: number, count: number }> = new Map()\n        this.fulfiller.forEach((f) => {\n            drillTimeInMsPerType.getOrUpdate(f.entityType, () => {\n                return {drillTime: f.stats[this.surface.surfaceType.statsDrillName][f.level] * 1000, count: 0}\n            }).count++\n        })\n        const drillTimeEntry = drillTimeInMsPerType.get(fulfiller.entityType)\n        const drillTimeMs = drillTimeEntry?.drillTime / (drillTimeEntry?.count || 1) || null\n        if (!drillTimeMs) console.warn('According to cfg this entity cannot drill this material')\n        return drillTimeMs\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { FulfillerEntity } from '../../FulfillerEntity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { ShareableJob } from '../ShareableJob'\n\nexport class ReinforceJob extends ShareableJob {\n\n    color: number = 0x60a060\n    surface: Surface\n    digPositions: PathTarget[]\n\n    constructor(surface: Surface) {\n        super()\n        this.surface = surface\n        this.digPositions = this.surface.getDigPositions().map((p) => new PathTarget(p))\n    }\n\n    getWorkplaces(): PathTarget[] { // TODO optimize performance and code duplication\n        const surfaceDigPositions = this.surface.getDigPositions()\n        if (!this.digPositions.every((d) => surfaceDigPositions.some((p) => p.equals(d.targetLocation))) ||\n            !surfaceDigPositions.every((p) => this.digPositions.some((d) => p.equals(d.targetLocation)))) {\n            this.digPositions = surfaceDigPositions.map((p) => new PathTarget(p))\n        }\n        return this.digPositions\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.reinforce()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityReinforce\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Reinforce\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        return 2700\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.HAMMER\n    }\n\n}\n","import { Box3, CanvasTexture, Group, Matrix4, Mesh, MeshBasicMaterial, Object3D, Sphere, SphereGeometry, Sprite, SpriteMaterial, Vector3 } from 'three'\nimport { createContext } from '../core/ImageHelper'\nimport { Selectable } from '../game/model/Selectable'\n\nexport class SceneEntity {\n\n    group: Group = new Group()\n\n    pickSphere: Mesh = null\n    selectionFrame: Sprite = null\n    boundingSphere: Sphere = new Sphere()\n\n    set visible(state: boolean) {\n        this.group.visible = state\n    }\n\n    get visible(): boolean {\n        return this.group.visible\n    }\n\n    get position(): Vector3 {\n        return this.group.position\n    }\n\n    set position(position: Vector3) {\n        this.group.position.copy(position)\n    }\n\n    add(other: Object3D) {\n        this.group.add(other)\n    }\n\n    remove(other: Object3D) {\n        this.group.remove(other)\n    }\n\n    getRadiusSquare(): number {\n        new Box3().setFromObject(this.group).getBoundingSphere(this.boundingSphere)\n        return this.boundingSphere.radius * this.boundingSphere.radius\n    }\n\n    getHeading(): number {\n        return this.group.rotation.y\n    }\n\n    setHeading(heading: number) {\n        this.group.rotation.y = heading\n    }\n\n    lookAt(target: Vector3) {\n        this.group.lookAt(target)\n    }\n\n    flipXAxis() {\n        this.group.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n    }\n\n    createPickSphere(pickSphereDiameter: number, selectable: Selectable, pickSphereHeightOffset: number = this.getBoundingSphereCenter().y - this.position.y) {\n        if (this.pickSphere) return\n        const pickSphereRadius = pickSphereDiameter / 2\n        const geometry = new SphereGeometry(pickSphereRadius, pickSphereRadius, pickSphereRadius)\n        const material = new MeshBasicMaterial({color: 0xffff00, visible: false}) // change visible to true for debugging\n        this.pickSphere = new Mesh(geometry, material)\n        this.pickSphere.userData = {selectable: selectable}\n        this.pickSphere.position.y = pickSphereHeightOffset\n        this.add(this.pickSphere)\n        this.createSelectionFrame(pickSphereDiameter, this.pickSphere.position)\n    }\n\n    getBoundingSphereCenter(): Vector3 {\n        const center = new Vector3()\n        new Box3().setFromObject(this.group).getCenter(center)\n        return center\n    }\n\n    private createSelectionFrame(pickSphereDiameter: number, pickSphereCenter: Vector3) {\n        const selectionFrameTextureSize = 128\n        const ctx = createContext(selectionFrameTextureSize, selectionFrameTextureSize)\n        ctx.fillStyle = '#0f0'\n        const strength = Math.round(50 / pickSphereDiameter)\n        const length = selectionFrameTextureSize / 6\n        ctx.fillRect(0, 0, length, strength)\n        ctx.fillRect(0, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, 0, length, strength)\n        ctx.fillRect(selectionFrameTextureSize - strength, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - strength, selectionFrameTextureSize - length, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - length, strength, length)\n        const selectionFrameTexture = new CanvasTexture(ctx.canvas as HTMLCanvasElement)\n        const selectionMaterial = new SpriteMaterial({map: selectionFrameTexture, depthTest: false})\n        this.selectionFrame = new Sprite(selectionMaterial)\n        this.selectionFrame.position.copy(pickSphereCenter)\n        const selectionFrameSize = pickSphereDiameter * 3 / 4\n        this.selectionFrame.scale.set(selectionFrameSize, selectionFrameSize, selectionFrameSize)\n        this.selectionFrame.visible = false\n        this.add(this.selectionFrame)\n    }\n\n}\n","import { PositionalAudio, Vector2 } from 'three'\nimport { SoundManager } from '../../audio/SoundManager'\nimport { TILESIZE } from '../../params'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { SceneEntity } from '../../scene/SceneEntity'\nimport { EntityManager } from '../EntityManager'\nimport { SceneManager } from '../SceneManager'\nimport { AnimEntityActivity } from './activities/AnimEntityActivity'\nimport { BaseActivity } from './activities/BaseActivity'\nimport { AnimationEntityType } from './anim/AnimationEntityType'\nimport { AnimClip } from './anim/AnimClip'\nimport { EntityType } from './EntityType'\nimport { Surface } from './map/Surface'\n\nexport abstract class BaseEntity {\n\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n\n    sceneEntity: SceneEntity = new SceneEntity()\n\n    entityType: EntityType = null\n    floorOffset: number = 0.1\n\n    animationEntityType: AnimationEntityType = null\n    animation: AnimClip = null\n    activity: BaseActivity = null\n\n    protected constructor(sceneMgr: SceneManager, entityMgr: EntityManager, entityType: EntityType, aeFilename: string) {\n        this.sceneMgr = sceneMgr\n        this.entityMgr = entityMgr\n        this.entityType = entityType\n        if (aeFilename) this.animationEntityType = ResourceManager.getAnimationEntityType(aeFilename, this.sceneMgr.listener)\n    }\n\n    getPosition() {\n        return this.sceneEntity.position.clone()\n    }\n\n    getPosition2D() {\n        return new Vector2(this.sceneEntity.position.x, this.sceneEntity.position.z)\n    }\n\n    getHeading(): number {\n        return this.sceneEntity.getHeading()\n    }\n\n    onDiscover() {\n        this.sceneEntity.visible = true\n    }\n\n    addToScene(worldPosition: Vector2, radHeading: number) {\n        if (worldPosition) {\n            this.sceneEntity.position.copy(this.sceneMgr.getFloorPosition(worldPosition))\n            this.sceneEntity.position.y += this.floorOffset\n        }\n        if (radHeading !== undefined && radHeading !== null) {\n            this.sceneEntity.setHeading(radHeading)\n        }\n        this.sceneEntity.visible = this.surfaces.some((s) => s.discovered)\n        this.sceneMgr.scene.add(this.sceneEntity.group)\n    }\n\n    removeFromScene() {\n        this.sceneMgr.scene.remove(this.sceneEntity.group)\n        this.animation?.stop()\n    }\n\n    get surfaces(): Surface[] {\n        return [this.sceneMgr.terrain.getSurfaceFromWorld(this.sceneEntity.position)]\n    }\n\n    changeActivity(activity: AnimEntityActivity = this.getDefaultActivity(), onAnimationDone: () => any = null, durationTimeMs: number = null) {\n        if (this.activity === activity || this.animationEntityType === null) return\n        this.activity = activity\n        const lActivityKey = activity.activityKey.toLowerCase()\n        let animation = this.animationEntityType.animations.get(lActivityKey)\n        if (!animation) { // find by prefix\n            this.animationEntityType.animations.forEach((a, key) => {\n                if (!animation && lActivityKey.startsWith(key)) animation = a\n            })\n        }\n        if (!animation) {\n            console.warn('Activity ' + activity.activityKey + ' unknown or has no animation defined')\n            console.log(this.animationEntityType.animations)\n            return\n        }\n        if (this.animation) {\n            this.sceneEntity.remove(this.animation.polyModel)\n            this.animation.stop()\n        }\n        const carriedChildren = this.animation?.carryJoint?.children\n        if (carriedChildren && carriedChildren.length > 0 && animation.carryJoint) {\n            animation.carryJoint.add(...carriedChildren) // keep carried children\n        }\n        this.animation = animation\n        this.sceneEntity.add(this.animation.polyModel)\n        this.animation.animate(0, onAnimationDone, durationTimeMs)\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return AnimEntityActivity.Stand\n    }\n\n    playPositionalAudio(sfxName: string, loop: boolean): PositionalAudio {\n        const audio = new PositionalAudio(this.sceneMgr.listener)\n        audio.setRefDistance(TILESIZE * 2)\n        audio.loop = loop\n        this.sceneEntity.add(audio)\n        SoundManager.getSoundBuffer(sfxName).then((audioBuffer) => {\n            audio.setBuffer(audioBuffer).play() // TODO retry playing sound for looped ones, when audio context fails\n            if (!audio.loop) audio.onEnded = () => this.sceneEntity.remove(audio)\n        }).catch(() => {\n            this.sceneEntity.remove(audio)\n        })\n        return audio\n    }\n\n    getSpeed(): number {\n        return this.animation?.transcoef || 1\n    }\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class BuildingActivity extends AnimEntityActivity {\n\n    static Teleport = new BuildingActivity('Activity_Teleport')\n    static Deposit = new BuildingActivity('Activity_Deposit')\n    static Explode = new BuildingActivity('Activity_Explode')\n    static Unpowered = new BuildingActivity('Activity_Unpowered')\n\n}\n","import { Vector2 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { MaterialAmountChanged } from '../../../event/WorldEvents'\nimport { BuildingActivity } from '../activities/BuildingActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { BuildingEntity } from '../building/BuildingEntity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { PathTarget } from '../PathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class CarryPathTarget extends PathTarget {\n\n    constructor(location: Vector2) {\n        super(location)\n    }\n\n    canGatherItem(): boolean {\n        return true\n    }\n\n    gatherItem(item: MaterialEntity) {\n        item.addToScene(null, null)\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n    isInvalid(): boolean {\n        return false\n    }\n\n}\n\nexport class SiteCarryPathTarget extends CarryPathTarget {\n\n    site: BuildingSite\n\n    constructor(location: Vector2, site: BuildingSite) {\n        super(location)\n        this.site = site\n    }\n\n    gatherItem(item: MaterialEntity) {\n        this.site.addItem(item)\n    }\n\n    getDropAction(): RaiderActivity {\n        return this.site.getDropAction()\n    }\n\n    isInvalid(): boolean {\n        return this.site.complete || this.site.canceled\n    }\n\n}\n\nexport class BuildingCarryPathTarget extends CarryPathTarget {\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(building.getDropPosition2D())\n        this.building = building\n    }\n\n    canGatherItem(): boolean {\n        return this.building.activity.activityKey === this.building.getDefaultActivity().activityKey\n    }\n\n    gatherItem(item: MaterialEntity) {\n        if (this.building.entityType === EntityType.POWER_STATION || this.building.entityType === EntityType.ORE_REFINERY) {\n            if (this.building.animation?.carryJoint) {\n                this.building.animation.carryJoint.add(item.sceneEntity.group)\n                item.sceneEntity.position.set(0, 0, 0)\n            }\n            this.building.changeActivity(BuildingActivity.Deposit, () => {\n                this.building.changeActivity()\n                if (this.building.animation?.carryJoint) this.building.animation.carryJoint.remove(item.sceneEntity.group)\n                BuildingCarryPathTarget.addItemToStorage(item)\n                // TODO dispose item\n            })\n        } else {\n            item.removeFromScene()\n            BuildingCarryPathTarget.addItemToStorage(item)\n        }\n    }\n\n    private static addItemToStorage(item: MaterialEntity) {\n        switch (item.entityType) {\n            case EntityType.CRYSTAL:\n                GameState.numCrystal++\n                break\n            case EntityType.ORE:\n                GameState.numOre++\n                break\n        }\n        EventBus.publishEvent(new MaterialAmountChanged())\n    }\n\n    getDropAction(): RaiderActivity {\n        return this.building.getDropAction()\n    }\n\n    isInvalid(): boolean {\n        return !this.building.isUsable()\n    }\n\n}\n","import { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { BaseEntity } from '../BaseEntity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntityType } from '../EntityType'\nimport { CarryJob } from '../job/carry/CarryJob'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { PathTarget } from '../PathTarget'\nimport { BuildingCarryPathTarget, CarryPathTarget, SiteCarryPathTarget } from './CarryPathTarget'\n\nexport abstract class MaterialEntity extends BaseEntity {\n\n    targetBuildingTypes: EntityType[] = []\n    priorityIdentifier: PriorityIdentifier = null\n    targets: CarryPathTarget[] = []\n    targetSite: BuildingSite = null\n    positionPathTarget: PathTarget[] = null\n\n    protected constructor(sceneMgr: SceneManager, entityMgr: EntityManager, entityType: EntityType, aeFilename: string = null) {\n        super(sceneMgr, entityMgr, entityType, aeFilename)\n        this.targetBuildingTypes = [EntityType.TOOLSTATION]\n    }\n\n    getCarryTargets(): CarryPathTarget[] {\n        return this.updateTargets()\n    }\n\n    resetTarget() {\n        this.targets = []\n        this.targetSite = null\n        this.updateTargets()\n    }\n\n    protected updateTargets(): CarryPathTarget[] {\n        if (this.targets.length < 1) {\n            const sites = this.entityMgr.buildingSites.filter((b) => b.needs(this.entityType))\n            if (sites.length > 0) {\n                this.targets = sites.map((s) => new SiteCarryPathTarget(s.getRandomDropPosition(), s))\n            } else {\n                const buildings = this.entityMgr.getBuildingsByType(...this.getTargetBuildingTypes())\n                if (buildings.length > 0) {\n                    this.targets = buildings.map((b) => new BuildingCarryPathTarget(b))\n                }\n            }\n        } else if (this.targets.some((t) => t.isInvalid())) {\n            this.resetTarget()\n        }\n        return this.targets\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        this.entityMgr.materialsUndiscovered.remove(this)\n        this.entityMgr.materials.push(this)\n        EventBus.publishEvent(new JobCreateEvent(this.createCarryJob()))\n    }\n\n    setTargetSite(site: BuildingSite) {\n        if (this.targetSite === site) return\n        this.targetSite?.unAssign(this)\n        this.targetSite = site\n        this.targetSite?.assign(this)\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return this.priorityIdentifier\n    }\n\n    getTargetBuildingTypes(): EntityType[] {\n        return this.targetBuildingTypes\n    }\n\n    createCarryJob(): CarryJob<MaterialEntity> {\n        return new CarryJob(this)\n    }\n\n    onAddToSite() {\n        this.addToScene(null, null)\n    }\n\n    getPositionPathTarget(): PathTarget[] {\n        const position = this.getPosition2D()\n        if (!this.positionPathTarget || !this.positionPathTarget[0].targetLocation.equals(position)) {\n            this.positionPathTarget = [new PathTarget(position)]\n        }\n        return this.positionPathTarget\n    }\n\n}\n","import { AdditiveBlending, Color } from 'three'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SequenceTextureMaterial } from '../../../scene/SequenceTextureMaterial'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Crystal extends MaterialEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.CRYSTAL)\n        const mesh2 = ResourceManager.getLwoModel('MiscAnims/Crystal/vlp_greencrystal.lwo')\n        mesh2.getMaterials().forEach((mat: SequenceTextureMaterial) => {\n            mat.blending = AdditiveBlending\n            mat.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n            mat.setOpacity(0.5) // XXX read from LWO file?\n        })\n        mesh2.scale.set(1.75, 1.75, 1.75) // XXX derive from texture scale?\n        this.sceneEntity.add(mesh2)\n        const mesh = ResourceManager.getLwoModel('World/Shared/Crystal.lwo') // high poly version\n        mesh.getMaterials().forEach((mat: SequenceTextureMaterial) => {\n            mat.emissive = new Color(0, 8, 0) // XXX read from LWO file?\n            mat.color = new Color(0, 0, 0) // XXX read from LWO file?\n            mat.setOpacity(0.9) // XXX read from LWO file?\n        })\n        this.sceneEntity.add(mesh)\n        this.targetBuildingTypes = [EntityType.POWER_STATION, EntityType.TOOLSTATION]\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityCrystal\n    }\n\n    get stats() {\n        return ResourceManager.stats.PowerCrystal\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class DynamiteActivity extends BaseActivity {\n\n    static Normal = new DynamiteActivity('Normal')\n    static TickDown = new DynamiteActivity('TickDown')\n\n}\n","import { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { DynamiteActivity } from '../activities/DynamiteActivity'\nimport { EntityType } from '../EntityType'\nimport { CarryDynamiteJob } from '../job/carry/CarryDynamiteJob'\nimport { CarryJob } from '../job/carry/CarryJob'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { Surface } from '../map/Surface'\nimport { CarryPathTarget } from './CarryPathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Dynamite extends MaterialEntity {\n\n    targetSurface: Surface\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager, surface: Surface) {\n        super(sceneMgr, entityMgr, EntityType.DYNAMITE, 'MiscAnims/Dynamite/Dynamite.ae')\n        this.targetSurface = surface\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityDestruction\n        this.changeActivity()\n    }\n\n    getCarryTargets(): CarryPathTarget[] {\n        if (this.targetSurface && this.targetSurface.isDigable()) {\n            return this.targetSurface.getDigPositions().map((p) => new CarryPathTarget(p))\n        } else {\n            return this.entityMgr.getBuildingsByType(EntityType.TOOLSTATION).map((b) => b.getDropPosition2D())\n                .map((p) => new CarryPathTarget(p))\n        }\n    }\n\n    ignite() {\n        // TODO add as explosive and scare em all!\n        const center = this.targetSurface.getCenterWorld()\n        center.y = this.sceneEntity.position.y\n        this.sceneEntity.lookAt(center)\n        this.changeActivity(DynamiteActivity.TickDown, () => {\n            this.removeFromScene()\n            this.targetSurface.collapse()\n            // TODO add explosion animation\n            // TODO damage raider, vehicle, buildings\n        })\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return DynamiteActivity.Normal\n    }\n\n    createCarryJob(): CarryJob<Dynamite> {\n        return new CarryDynamiteJob(this)\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Ore extends MaterialEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.ORE)\n        this.sceneEntity.add(ResourceManager.getLwoModel('MiscAnims/Ore/Ore1st.lwo'))\n        this.targetBuildingTypes = [EntityType.ORE_REFINERY, EntityType.TOOLSTATION]\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityOre\n    }\n\n    get stats() {\n        return ResourceManager.stats.Ore\n    }\n\n}\n","import { MathUtils, Mesh, MeshPhongMaterial, PositionalAudio, Raycaster, Vector2, Vector3 } from 'three'\nimport { Sample } from '../../../audio/Sample'\nimport { SoundManager } from '../../../audio/SoundManager'\nimport { clearTimeoutSafe, getRandom, getRandomSign } from '../../../core/Util'\nimport { EventBus } from '../../../event/EventBus'\nimport { SelectionChanged, UpdateRadarSurface } from '../../../event/LocalEvents'\nimport { CavernDiscovered, JobCreateEvent, JobDeleteEvent, OreFoundEvent } from '../../../event/WorldEvents'\nimport { CrystalFoundEvent, LandslideEvent } from '../../../event/WorldLocationEvent'\nimport { HEIGHT_MULTIPLIER, TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { AnimationGroup } from '../anim/AnimationGroup'\nimport { BuildingEntity } from '../building/BuildingEntity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntityType } from '../EntityType'\nimport { CarryDynamiteJob } from '../job/carry/CarryDynamiteJob'\nimport { ClearRubbleJob } from '../job/surface/ClearRubbleJob'\nimport { DrillJob } from '../job/surface/DrillJob'\nimport { ReinforceJob } from '../job/surface/ReinforceJob'\nimport { Crystal } from '../material/Crystal'\nimport { Dynamite } from '../material/Dynamite'\nimport { ElectricFence } from '../material/ElectricFence'\nimport { Ore } from '../material/Ore'\nimport { Selectable } from '../Selectable'\nimport { SurfaceGeometry } from './SurfaceGeometry'\nimport { SurfaceType } from './SurfaceType'\nimport { Terrain } from './Terrain'\nimport { WALL_TYPE } from './WallType'\nimport degToRad = MathUtils.degToRad\n\nexport class Surface implements Selectable {\n\n    terrain: Terrain\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    surfaceType: SurfaceType\n    x: number\n    y: number\n    containedOres: number = 0\n    containedCrystals: number = 0\n    heightOffset: number = null\n    discovered: boolean = false\n    selected: boolean = false\n    reinforced: boolean = false\n    drillJob: DrillJob = null\n    reinforceJob: ReinforceJob = null\n    dynamiteJob: CarryDynamiteJob = null\n    clearRubbleJob: ClearRubbleJob = null\n    surfaceRotation: number = 0\n    seamLevel: number = 0\n    fallinTimeout = null\n\n    fallinGrp: AnimationGroup = null\n\n    wallType: WALL_TYPE = null\n    mesh: Mesh = null\n    needsMeshUpdate: boolean = false\n\n    topLeftVertex: Vector3 = null\n    topRightVertex: Vector3 = null\n    bottomRightVertex: Vector3 = null\n    bottomLeftVertex: Vector3 = null\n    topLeftHeightOffset: number = null\n    topRightHeightOffset: number = null\n    bottomRightHeightOffset: number = null\n    bottomLeftHeightOffset: number = null\n\n    rubblePositions: Vector2[] = []\n\n    building: BuildingEntity = null\n    site: BuildingSite = null\n    fence: ElectricFence = null\n    hasPower: boolean = false\n\n    constructor(terrain: Terrain, surfaceType: SurfaceType, x: number, y: number, heightOffset: number) {\n        this.terrain = terrain\n        this.sceneMgr = this.terrain.sceneMgr\n        this.entityMgr = this.terrain.entityMgr\n        this.surfaceType = surfaceType\n        if (surfaceType === SurfaceType.CRYSTAL_SEAM || surfaceType === SurfaceType.ORE_SEAM) this.seamLevel = 4\n        this.x = x\n        this.y = y\n        this.heightOffset = heightOffset\n        if (surfaceType === SurfaceType.RUBBLE4 || surfaceType === SurfaceType.RUBBLE3 || surfaceType === SurfaceType.RUBBLE2 || surfaceType === SurfaceType.RUBBLE1) {\n            this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        }\n    }\n\n    /**\n     * @return {boolean} Returns true, if a new cave has been discovered\n     */\n    discover(): boolean { // TODO improve performance then test with level 20\n        this.setDiscovered()\n        this.needsMeshUpdate = true\n        if (!this.surfaceType.floor) return false\n        const floors: Surface[] = []\n        const others: Surface[] = []\n        for (let x = -1; x <= 1; x++) {\n            for (let y = -1; y <= 1; y++) {\n                if (x === 0 && y === 0) continue\n                const n = this.terrain.getSurface(this.x + x, this.y + y)\n                if ((x === 0 || y === 0) && n.surfaceType.floor) {\n                    floors.push(n)\n                } else {\n                    others.push(n)\n                }\n            }\n        }\n        let caveFound = false\n        let counter = 0\n        while (floors.length > 0) {\n            counter++\n            const neighbor = floors.shift()\n            neighbor.setDiscovered()\n            for (let x = -1; x <= 1; x++) {\n                for (let y = -1; y <= 1; y++) {\n                    if (x === 0 && y === 0) continue\n                    const n = neighbor.terrain.getSurface(neighbor.x + x, neighbor.y + y)\n                    if ((x === 0 || y === 0) && n.surfaceType.floor && !n.discovered) {\n                        floors.push(n)\n                        caveFound = true\n                    } else {\n                        others.push(n)\n                    }\n                }\n            }\n        }\n        others.forEach((o) => {\n            o.setDiscovered()\n            if (!o.isSupported()) {\n                o.collapse()\n            }\n        })\n        console.log('surface discover handled ' + counter + ' floors and ' + others.length + ' others')\n        return caveFound\n    }\n\n    private setDiscovered() {\n        if (!this.discovered) this.entityMgr.discoverSurface(this)\n        this.discovered = true\n        this.needsMeshUpdate = true\n        EventBus.publishEvent(new UpdateRadarSurface(this))\n    }\n\n    onDrillComplete(drillPosition: Vector2): boolean {\n        if (this.seamLevel > 0) {\n            this.seamLevel--\n            const vec = new Vector2().copy(drillPosition).sub(this.getCenterWorld2D())\n                .multiplyScalar(0.3 + getRandom(3) / 10)\n                .rotateAround(new Vector2(0, 0), degToRad(-10 + getRandom(20)))\n                .add(drillPosition)\n            if (this.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                const crystal = this.entityMgr.placeMaterial(new Crystal(this.sceneMgr, this.entityMgr), vec)\n                EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n            } else if (this.surfaceType === SurfaceType.ORE_SEAM) {\n                this.entityMgr.placeMaterial(new Ore(this.sceneMgr, this.entityMgr), vec)\n                EventBus.publishEvent(new OreFoundEvent())\n            }\n        }\n        if (this.seamLevel > 0) {\n            return false\n        } else {\n            this.collapse()\n            return true\n        }\n    }\n\n    collapse() {\n        this.cancelJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.surfaceType = SurfaceType.RUBBLE4\n        EventBus.publishEvent(new UpdateRadarSurface(this))\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += 4\n        this.needsMeshUpdate = true\n        const foundCave = this.discover()\n        if (foundCave) EventBus.publishEvent(new CavernDiscovered())\n        // drop contained ores and crystals\n        this.dropContainedOre(this.containedOres - 4)\n        for (let c = 0; c < this.containedCrystals; c++) {\n            const crystal = this.entityMgr.placeMaterial(new Crystal(this.sceneMgr, this.entityMgr), this.getRandomPosition())\n            EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n        }\n        // check for unsupported neighbors\n        for (let x = this.x - 1; x <= this.x + 1; x++) {\n            for (let y = this.y - 1; y <= this.y + 1; y++) {\n                if (x !== this.x || y !== this.y) {\n                    const surf = this.terrain.getSurface(x, y)\n                    surf.needsMeshUpdate = true\n                    if (!surf.isSupported()) surf.collapse()\n                }\n            }\n        }\n        // update meshes\n        this.terrain.updateSurfaceMeshes()\n        this.terrain.floorGroup.updateWorldMatrix(true, true)\n        this.playPositionalSample(Sample.SFX_RockBreak)\n    }\n\n    private dropContainedOre(dropAmount: number) {\n        for (let c = 0; c < dropAmount && this.containedOres > 0; c++) {\n            this.containedOres--\n            this.entityMgr.placeMaterial(new Ore(this.sceneMgr, this.entityMgr), this.getRandomPosition())\n            EventBus.publishEvent(new OreFoundEvent())\n        }\n    }\n\n    getRandomPosition(): Vector2 {\n        return new Vector2(this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4),\n            this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4))\n    }\n\n    cancelJobs() {\n        this.drillJob = Surface.safeRemoveJob(this.drillJob)\n        this.reinforceJob = Surface.safeRemoveJob(this.reinforceJob)\n        this.dynamiteJob = Surface.safeRemoveJob(this.dynamiteJob)\n        this.clearRubbleJob = Surface.safeRemoveJob(this.clearRubbleJob)\n        this.updateJobColor()\n    }\n\n    private static safeRemoveJob(job: DrillJob | ReinforceJob | CarryDynamiteJob | ClearRubbleJob) {\n        if (job) EventBus.publishEvent(new JobDeleteEvent(job))\n        return null\n    }\n\n    reduceRubble() {\n        this.rubblePositions.shift()\n        if (this.surfaceType === SurfaceType.RUBBLE4) this.surfaceType = SurfaceType.RUBBLE3\n        else if (this.surfaceType === SurfaceType.RUBBLE3) this.surfaceType = SurfaceType.RUBBLE2\n        else if (this.surfaceType === SurfaceType.RUBBLE2) this.surfaceType = SurfaceType.RUBBLE1\n        else if (this.surfaceType === SurfaceType.RUBBLE1) this.surfaceType = SurfaceType.GROUND\n        EventBus.publishEvent(new UpdateRadarSurface(this))\n        this.dropContainedOre(this.containedOres - this.rubblePositions.length)\n        this.updateTexture()\n        if (this.selected) EventBus.publishEvent(new SelectionChanged(this.entityMgr))\n    }\n\n    isSupported(): boolean {\n        if (this.surfaceType.floor) return true\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        return isHighGround(surfLeft, surfTopLeft, surfTop)\n            || isHighGround(surfTop, surfTopRight, surfRight)\n            || isHighGround(surfRight, surfBottomRight, surfBottom)\n            || isHighGround(surfBottom, surfBottomLeft, surfLeft)\n    }\n\n    updateMesh(force: boolean = true) {\n        if (!force && !this.needsMeshUpdate) return\n        this.needsMeshUpdate = false\n\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf0: Surface, surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf0.discovered || (\n                (!surf0.surfaceType.floor || !surf0.neighbors.some((n) => n.surfaceType.floor && n.discovered)) &&\n                (!surf1.discovered || !surf2.discovered || !surf3.discovered || (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor))\n            )\n        }\n\n        const topLeftVertex = new Vector3(this.x, 0, this.y)\n        const topRightVertex = new Vector3(this.x + 1, 0, this.y)\n        const bottomLeftVertex = new Vector3(this.x, 0, this.y + 1)\n        const bottomRightVertex = new Vector3(this.x + 1, 0, this.y + 1)\n\n        if (isHighGround(this, surfLeft, surfTopLeft, surfTop)) topLeftVertex.y = 1\n        if (isHighGround(this, surfTop, surfTopRight, surfRight)) topRightVertex.y = 1\n        if (isHighGround(this, surfRight, surfBottomRight, surfBottom)) bottomRightVertex.y = 1\n        if (isHighGround(this, surfBottom, surfBottomLeft, surfLeft)) bottomLeftVertex.y = 1\n\n        // update mesh (geometry), if wall type changed\n        let wallType = topLeftVertex.y + topRightVertex.y + bottomRightVertex.y + bottomLeftVertex.y\n        if (wallType === WALL_TYPE.WALL && topLeftVertex.y === bottomRightVertex.y) wallType = WALL_TYPE.WEIRD_CREVICE\n\n        if (this.wallType !== wallType) {\n            this.wallType = wallType\n\n            function avgHeight(...args: Surface[]) {\n                return args.map((s) => s.heightOffset)\n                    .reduce((l, r) => (l || 0) + (r || 0), 0) / (args.length || 1)\n            }\n\n            this.topLeftVertex = topLeftVertex.clone()\n            this.topRightVertex = topRightVertex.clone()\n            this.bottomRightVertex = bottomRightVertex.clone()\n            this.bottomLeftVertex = bottomLeftVertex.clone()\n            this.topLeftHeightOffset = avgHeight(surfTopLeft, surfTop, this, surfLeft) * HEIGHT_MULTIPLIER\n            this.topRightHeightOffset = avgHeight(surfTop, surfTopRight, surfRight, this) * HEIGHT_MULTIPLIER\n            this.bottomRightHeightOffset = avgHeight(this, surfRight, surfBottomRight, surfBottom) * HEIGHT_MULTIPLIER\n            this.bottomLeftHeightOffset = avgHeight(surfLeft, this, surfBottom, surfBottomLeft) * HEIGHT_MULTIPLIER\n            this.topLeftVertex.y += this.topLeftHeightOffset\n            this.topRightVertex.y += this.topRightHeightOffset\n            this.bottomRightVertex.y += this.bottomRightHeightOffset\n            this.bottomLeftVertex.y += this.bottomLeftHeightOffset\n\n            this.updateGeometry(topLeftVertex, topRightVertex, bottomRightVertex, bottomLeftVertex)\n            if (this.wallType !== WALL_TYPE.WALL) this.cancelReinforceJobs()\n        }\n\n        this.updateTexture()\n        this.updateJobColor()\n        this.updatePathfinding()\n    }\n\n    private updatePathfinding() {\n        const weight = this.getPathfindingWalkWeight()\n        for (let x = 0; x < 3; x++) {\n            for (let y = 0; y < 3; y++) {\n                this.terrain.graphWalk.grid[this.x * 3 + x][this.y * 3 + y].weight = weight\n            }\n        }\n        this.terrain.graphDrive.grid[this.x][this.y].weight = this.getPathfindingDriveWeight()\n        this.terrain.graphFly.grid[this.x][this.y].weight = this.getPathFindingFlyWeight()\n        this.terrain.graphSwim.grid[this.x][this.y].weight = this.getPathFindingSwimWeight()\n    }\n\n    cancelReinforceJobs() {\n        this.reinforceJob = Surface.safeRemoveJob(this.reinforceJob)\n        this.updateJobColor()\n    }\n\n    updateTexture() {\n        let textureName = this.terrain.textureSet.texturebasename\n        if (!this.discovered) {\n            textureName += '70'\n        } else if (this.surfaceType === SurfaceType.POWER_PATH) {\n            textureName += this.updatePowerPathTexture()\n        } else if (!this.surfaceType.shaping && this.neighbors.some((n) => n.discovered && n.surfaceType.floor)) {\n            if (this.surfaceType === SurfaceType.POWER_PATH_BUILDING && this.hasPower) {\n                textureName += '66'\n            } else {\n                textureName += this.surfaceType.matIndex.toString()\n            }\n        } else if (this.wallType === WALL_TYPE.WEIRD_CREVICE) {\n            textureName += '77'\n        } else {\n            if (this.wallType === WALL_TYPE.CORNER) {\n                textureName += '5'\n            } else if (this.wallType === WALL_TYPE.INVERTED_CORNER) {\n                textureName += '3'\n            } else if (this.reinforced) {\n                textureName += '2'\n            } else {\n                textureName += '0'\n            }\n            textureName += this.surfaceType.shaping ? this.surfaceType.matIndex : SurfaceType.SOLID_ROCK.matIndex\n        }\n        textureName += '.bmp'\n\n        this.forEachMaterial((mat) => mat.map?.dispose())\n        const texture = ResourceManager.getTexture(textureName)\n        texture.center.set(0.5, 0.5)\n        texture.rotation = this.surfaceRotation\n\n        this.forEachMaterial((mat) => mat.map = texture)\n    }\n\n    private updatePowerPathTexture(): string {\n        this.surfaceRotation = 0\n        const left = this.terrain.getSurface(this.x - 1, this.y).isPath()\n        const top = this.terrain.getSurface(this.x, this.y - 1).isPath()\n        const right = this.terrain.getSurface(this.x + 1, this.y).isPath()\n        const bottom = this.terrain.getSurface(this.x, this.y + 1).isPath()\n        const pathSum = (left ? 1 : 0) + (top ? 1 : 0) + (right ? 1 : 0) + (bottom ? 1 : 0)\n        if (pathSum === 0 || pathSum === 1) {\n            if (left) this.surfaceRotation = -Math.PI / 2\n            if (top) this.surfaceRotation = Math.PI\n            if (right) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '75' : '65'\n        } else if (pathSum === 2) {\n            if (left === right) {\n                this.surfaceRotation = left ? Math.PI / 2 : 0\n                return this.hasPower ? '72' : '62'\n            } else {\n                if (left && bottom) this.surfaceRotation = -Math.PI / 2\n                if (left && top) this.surfaceRotation = Math.PI\n                if (top && right) this.surfaceRotation = Math.PI / 2\n                return this.hasPower ? '73' : '63'\n            }\n        } else if (pathSum === 3) {\n            if (!top) this.surfaceRotation = -Math.PI / 2\n            if (!right) this.surfaceRotation = Math.PI\n            if (!bottom) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '74' : '64'\n        } else {\n            return this.hasPower ? '71' : '60'\n        }\n    }\n\n    forEachMaterial(callback: (mat: MeshPhongMaterial) => void): void {\n        if (!this.mesh?.material) return;\n        (Array.isArray(this.mesh.material) ? this.mesh.material : [this.mesh.material]).forEach((m) => callback(m as MeshPhongMaterial))\n    }\n\n    updateGeometry(topLeftVertex: Vector3, topRightVertex: Vector3, bottomRightVertex: Vector3, bottomLeftVertex: Vector3) {\n        if (this.mesh) this.terrain.floorGroup.remove(this.mesh)\n        this.mesh?.geometry?.dispose()\n        this.forEachMaterial((m) => m.dispose())\n\n        const geometry = SurfaceGeometry.create(this.wallType, topLeftVertex, topRightVertex, bottomRightVertex, bottomLeftVertex,\n            this.topLeftVertex.y, this.topRightVertex.y, this.bottomRightVertex.y, this.bottomLeftVertex.y)\n\n        this.mesh = new Mesh(geometry, new MeshPhongMaterial({shininess: 0}))\n        this.mesh.userData = {selectable: this, surface: this}\n\n        this.terrain.floorGroup.add(this.mesh)\n        this.terrain.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n    }\n\n    isSelectable(): boolean {\n        return this.surfaceType.selectable && (this.wallType !== WALL_TYPE.INVERTED_CORNER && this.wallType !== WALL_TYPE.WEIRD_CREVICE) && !this.selected && this.discovered\n    }\n\n    isInSelection(): boolean {\n        return this.isSelectable() || this.selected\n    }\n\n    select(): boolean {\n        if (!this.isSelectable()) return false\n        this.selected = true\n        this.forEachMaterial((mat) => mat.color.setHex(0x6060a0))\n        if (this.surfaceType.floor) SoundManager.playSample(Sample.SFX_Floor)\n        if (this.surfaceType.shaping) SoundManager.playSample(Sample.SFX_Wall)\n        console.log('Surface selected at ' + this.x + '/' + this.y)\n        return true\n    }\n\n    deselect(): any {\n        if (this.selected) {\n            this.selected = false\n            this.updateJobColor()\n        }\n    }\n\n    updateJobColor() {\n        const color = this.dynamiteJob?.color || this.reinforceJob?.color || this.drillJob?.color || 0xffffff\n        this.forEachMaterial((mat) => mat.color.setHex(color))\n    }\n\n    hasRubble(): boolean {\n        return this.rubblePositions.length > 0\n    }\n\n    isPath(): boolean {\n        return this.surfaceType === SurfaceType.POWER_PATH || this.surfaceType === SurfaceType.POWER_PATH_BUILDING\n    }\n\n    isWalkable(): boolean {\n        return this.surfaceType.floor && this.discovered && this.surfaceType !== SurfaceType.LAVA && this.surfaceType !== SurfaceType.WATER && !this.building?.blocksPathSurface\n    }\n\n    isDigable(): boolean {\n        return this.surfaceType.digable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isReinforcable(): boolean {\n        return this.surfaceType.reinforcable && this.discovered && this.wallType === WALL_TYPE.WALL && !this.reinforced\n    }\n\n    getDigPositions(): Vector2[] {\n        const digPosition = []\n        if (this.terrain.getSurface(this.x - 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE - 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y - 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE - 1))\n        if (this.terrain.getSurface(this.x + 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE + 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y + 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE + TILESIZE + 1))\n        return digPosition\n    }\n\n    reinforce() {\n        this.reinforced = true\n        this.cancelReinforceJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.updateTexture()\n        EventBus.publishEvent(new UpdateRadarSurface(this))\n    }\n\n    getCenterWorld2D(): Vector2 {\n        return new Vector2(this.x, this.y).addScalar(0.5).multiplyScalar(TILESIZE)\n    }\n\n    getCenterWorld(): Vector3 {\n        const center = this.getCenterWorld2D()\n        const raycaster = new Raycaster(new Vector3(center.x, 3 * TILESIZE, center.y), new Vector3(0, -1, 0))\n        const intersect = raycaster.intersectObject(this.mesh, true)\n        if (intersect.length < 1) console.warn('could not determine terrain height for ' + center.x + '/' + center.y)\n        const terrainHeight = intersect[0]?.point?.y || 0\n        return new Vector3(center.x, terrainHeight, center.y)\n    }\n\n    setFallinLevel(fallinLevel: number) {\n        if (fallinLevel < 1) return\n        let originPos\n        let targetPos\n        if (this.surfaceType.floor) {\n            originPos = this.terrain.findFallInOrigin(this.x, this.y)\n            targetPos = [this.x, this.y]\n        } else {\n            originPos = [this.x, this.y]\n            targetPos = this.terrain.findFallInTarget(this.x, this.y)\n        }\n        if (originPos && targetPos) {\n            this.terrain.getSurface(originPos[0], originPos[1]).scheduleFallin(targetPos[0], targetPos[1])\n        }\n    }\n\n    scheduleFallin(targetX: number, targetY: number) {\n        this.fallinTimeout = setTimeout(() => {\n            this.createFallin(targetX, targetY)\n            this.scheduleFallin(targetX, targetY)\n        }, (30 + getRandom(60)) * 1000) // TODO adapt timer to level multiplier and fallin value\n    }\n\n    createFallin(targetX: number, targetY: number) {\n        const fallinPosition = this.terrain.getSurface(targetX, targetY).getCenterWorld()\n        EventBus.publishEvent(new LandslideEvent(fallinPosition))\n        this.fallinGrp = new AnimationGroup('MiscAnims/RockFall/Rock3Sides.lws', this.sceneMgr.listener)\n        this.fallinGrp.position.copy(fallinPosition)\n        const dx = this.x - targetX, dy = targetY - this.y\n        this.fallinGrp.rotateOnAxis(new Vector3(0, 1, 0), Math.atan2(dy, dx) + Math.PI / 2)\n        this.sceneMgr.scene.add(this.fallinGrp)\n        this.fallinGrp.startAnimation(() => {\n            this.sceneMgr.scene.remove(this.fallinGrp)\n            this.fallinGrp = null\n        })\n        this.terrain.getSurface(targetX, targetY).makeRubble()\n    }\n\n    dispose() {\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.forEachMaterial(m => m.dispose())\n        this.mesh?.geometry?.dispose()\n    }\n\n    getFloorHeight(worldX: number, worldZ: number) {\n        const sx = worldX / TILESIZE - this.x\n        const sy = worldZ / TILESIZE - this.y\n        const dy0 = Surface.interpolate(this.topLeftHeightOffset, this.topRightHeightOffset, sx)\n        const dy1 = Surface.interpolate(this.bottomLeftHeightOffset, this.bottomRightHeightOffset, sx)\n        return Surface.interpolate(dy0, dy1, sy) * TILESIZE\n    }\n\n    private static interpolate(y0: number, y1: number, x: number): number {\n        return y0 + x * (y1 - y0)\n    }\n\n    get neighbors(): Surface[] {\n        return [this.terrain.getSurface(this.x - 1, this.y), this.terrain.getSurface(this.x, this.y - 1),\n            this.terrain.getSurface(this.x + 1, this.y), this.terrain.getSurface(this.x, this.y + 1)]\n    }\n\n    makeRubble(containedOre: number = 0) {\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += containedOre\n        this.setSurfaceType(SurfaceType.RUBBLE4)\n    }\n\n    setBuilding(building: BuildingEntity) {\n        this.building = building\n        this.updatePathfinding()\n        this.setSurfaceType(this.building ? SurfaceType.POWER_PATH_BUILDING : SurfaceType.GROUND)\n    }\n\n    setSurfaceType(surfaceType: SurfaceType) {\n        if (surfaceType === this.surfaceType) return\n        const oldSurfaceType = this.surfaceType\n        this.surfaceType = surfaceType\n        this.updateTexture()\n        if (oldSurfaceType.connectsPath || this.surfaceType.connectsPath) this.neighbors.forEach((n) => n.updateTexture())\n        EventBus.publishEvent(new UpdateRadarSurface(this))\n    }\n\n    getPathfindingWalkWeight(): number {\n        return this.isWalkable() ? this.hasRubble() ? 4 : 1 : 0\n    }\n\n    getPathfindingDriveWeight(): number {\n        return this.isWalkable() ? 1 : 0\n    }\n\n    getPathFindingFlyWeight(): number {\n        return this.surfaceType.floor && !this.building?.blocksPathSurface ? 1 : 0\n    }\n\n    getPathFindingSwimWeight(): number {\n        return this.surfaceType === SurfaceType.WATER ? 1 : 0\n    }\n\n    setHasPower(state: boolean, recursive: boolean) {\n        if (this.hasPower === state) return\n        this.hasPower = state\n        this.updateTexture()\n        if (recursive) this.neighbors.forEach((n) => n.isPath() && n.setHasPower(state, recursive))\n    }\n\n    canPlaceFence(): boolean { // TODO performance this can be cached\n        return this.surfaceType.canCarryFence && !this.building && !this.fence &&\n            [1, 2].some((n) => {\n                return !!this.terrain.getSurface(this.x - n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y - n).building ||\n                    !!this.terrain.getSurface(this.x + n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y + n).building ||\n                    !!this.terrain.getSurface(this.x - n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y - n).fence ||\n                    !!this.terrain.getSurface(this.x + n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y + n).fence\n            })\n    }\n\n    createDrillJob(): DrillJob {\n        if (!this.isDigable()) return null\n        if (!this.drillJob) {\n            this.drillJob = new DrillJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.drillJob))\n        }\n        return this.drillJob\n    }\n\n    createReinforceJob(): ReinforceJob {\n        if (!this.isReinforcable()) return null\n        if (!this.reinforceJob) {\n            this.reinforceJob = new ReinforceJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.reinforceJob))\n        }\n        return this.reinforceJob\n    }\n\n    createDynamiteJob(): CarryDynamiteJob {\n        if (!this.isDigable()) return null\n        if (!this.dynamiteJob) {\n            const targetBuilding = this.entityMgr.getClosestBuildingByType(this.getCenterWorld(), EntityType.TOOLSTATION) // XXX performance cache this\n            if (!targetBuilding) throw 'Could not find toolstation to spawn dynamite'\n            const dynamite = new Dynamite(this.sceneMgr, this.entityMgr, this)\n            dynamite.addToScene(targetBuilding.getDropPosition2D(), targetBuilding.getHeading())\n            this.dynamiteJob = new CarryDynamiteJob(dynamite)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.dynamiteJob))\n        }\n        return this.dynamiteJob\n    }\n\n    createClearRubbleJob(): ClearRubbleJob {\n        if (!this.hasRubble()) return null\n        if (!this.clearRubbleJob) {\n            this.clearRubbleJob = new ClearRubbleJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.clearRubbleJob))\n        }\n        return this.clearRubbleJob\n    }\n\n    setSite(site: BuildingSite) {\n        this.site = site\n        this.setSurfaceType(this.site ? SurfaceType.POWER_PATH_CONSTRUCTION : SurfaceType.GROUND)\n    }\n\n    playPositionalSample(sample: Sample): PositionalAudio { // TODO merge with AnimEntity code (at least in SceneEntity maybe)\n        const audio = new PositionalAudio(this.sceneMgr.listener)\n        audio.setRefDistance(TILESIZE * 6)\n        this.mesh.add(audio)\n        SoundManager.getSoundBuffer(Sample[sample]).then((audioBuffer) => {\n            audio.setBuffer(audioBuffer)\n            audio.play()\n        })\n        return audio\n    }\n\n}\n","import { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { EntityManager } from './EntityManager'\nimport { Graph } from './model/map/astar'\nimport { Surface } from './model/map/Surface'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { Terrain } from './model/map/Terrain'\nimport { SceneManager } from './SceneManager'\n\nexport class TerrainLoader {\n\n    static loadTerrain(levelConf: LevelEntryCfg, sceneMgr: SceneManager, entityMgr: EntityManager): Terrain {\n        const tileSize = levelConf.blockSize\n        if (tileSize !== TILESIZE) console.error('Unexpected tile size in level configuration: ' + tileSize)\n        const terrain = new Terrain(sceneMgr, entityMgr)\n\n        const themeName = levelConf.textureSet[1]\n        terrain.textureSet = ResourceManager.cfg('Textures', themeName)\n        // console.log(terrain.textureSet);\n\n        const terrainMap = ResourceManager.getResource(levelConf.terrainMap)\n        terrain.width = terrainMap.width\n        terrain.height = terrainMap.height\n        const pathMap = ResourceManager.getResource(levelConf.pathMap)?.level\n        const surfaceMap = ResourceManager.getResource(levelConf.surfaceMap)?.level\n        const predugMap = ResourceManager.getResource(levelConf.predugMap)?.level\n        const cryOreMap = ResourceManager.getResource(levelConf.cryOreMap)?.level\n        const fallinMap = ResourceManager.getResource(levelConf.fallinMap)?.level\n        const erodeMap = ResourceManager.getResource(levelConf.erodeMap)?.level\n        const blockMap = ResourceManager.getResource(levelConf.blockPointersMap)?.level\n\n        // maps parsed from WAD are row-wise saved, which means y (row) comes first and x (column) second\n        for (let r = 0; r < terrainMap.level.length; r++) {\n            for (let c = 0; c < (terrainMap.level)[r].length; c++) {\n                (terrain.surfaces)[c] = (terrain.surfaces)[c] || []\n                const surfaceTypeNum = (terrainMap.level)[r][c]\n                let surfaceType = SurfaceType.getByNum(surfaceTypeNum)\n                const predugLevel = predugMap[r][c]\n                if (predugLevel === PredugMap.CAVERN_EXPOSED) {\n                    if (surfaceType === SurfaceType.GROUND || surfaceType === SurfaceType.DIRT\n                        || surfaceType === SurfaceType.POWER_PATH_BUILDING) { // used by mods\n                        surfaceType = SurfaceType.GROUND\n                    } else if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) {\n                        console.warn('Unexpected cavern surface type: ' + surfaceType.name)\n                    }\n                } else if (predugLevel === PredugMap.SLUG_HOLE_EXPOSED || predugLevel === PredugMap.SLUG_HOLE_HIDDEN) {\n                    surfaceType = SurfaceType.SLUG_HOLE\n                } else if (predugLevel !== PredugMap.WALL && predugLevel !== PredugMap.CAVERN_HIDDEN) {\n                    console.warn('Unexpected predug level: ' + predugLevel)\n                }\n                // give the path map the highest priority, if it exists\n                const pathMapLevel = pathMap && surfaceType.floor ? pathMap[r][c] : PathMap.NONE\n                if (pathMapLevel === PathMap.RUBBLE) {\n                    surfaceType = SurfaceType.RUBBLE4\n                } else if (pathMapLevel === PathMap.POWER_PATH) {\n                    surfaceType = SurfaceType.POWER_PATH\n                } else if (pathMapLevel !== PathMap.NONE) {\n                    console.warn('Unexpected path map level: ' + pathMapLevel)\n                }\n\n                const surface = new Surface(terrain, surfaceType, c, r, surfaceMap[r][c])\n                if (cryOreMap) {\n                    const currentCryOre = cryOreMap[r][c]\n                    if (currentCryOre % 2 === 1) {\n                        surface.containedCrystals = (currentCryOre + 1) / 2\n                    } else {\n                        surface.containedOres = currentCryOre / 2\n                    }\n                }\n\n                (terrain.surfaces)[c].push(surface)\n            }\n        }\n\n        // exlpore predug surfaces\n        terrain.forEachSurface((s) => {\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_EXPOSED || predugMap[s.y][s.x] === PredugMap.SLUG_HOLE_EXPOSED) { // map are rows (y) first, columns (x) second\n                for (let x = s.x - 1; x <= s.x + 1; x++) {\n                    for (let y = s.y - 1; y <= s.y + 1; y++) {\n                        terrain.getSurfaceOrNull(x, y).discovered = true\n                    }\n                }\n            }\n        })\n\n        // create hidden caverns\n        terrain.forEachSurface((s) => {\n            const surface = terrain.getSurfaceOrNull(s.x, s.y)\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_HIDDEN && !surface.discovered) {\n                surface.surfaceType = SurfaceType.GROUND\n            }\n        })\n\n        // generate path finding weights\n        const weightsWalk: number[][] = []\n        const weightsDrive: number[][] = []\n        const weightsFly: number[][] = []\n        const weightsSwim: number[][] = []\n        for (let x = 0; x < terrain.width; x++) {\n            const colWalk: number[] = []\n            const colDrive: number[] = []\n            const colFly: number[] = []\n            const colSwim: number[] = []\n            for (let y = 0; y < terrain.height; y++) {\n                const surface = terrain.getSurfaceOrNull(x, y)\n                const w = surface.getPathfindingWalkWeight()\n                colWalk.push(w, w, w)\n                colDrive.push(surface.getPathfindingDriveWeight())\n                colFly.push(surface.getPathFindingFlyWeight())\n                colSwim.push(surface.getPathFindingSwimWeight())\n            }\n            weightsWalk.push(colWalk, colWalk, colWalk)\n            weightsDrive.push(colDrive)\n            weightsFly.push(colFly)\n            weightsSwim.push(colSwim)\n        }\n        terrain.graphWalk = new Graph(weightsWalk, {diagonal: true})\n        terrain.graphDrive = new Graph(weightsDrive, {diagonal: true})\n        terrain.graphFly = new Graph(weightsFly, {diagonal: true})\n        terrain.graphSwim = new Graph(weightsSwim, {diagonal: true})\n\n        // crumble unsupported walls\n        terrain.forEachSurface((s) => {\n            if (!s.isSupported()) s.collapse()\n        })\n\n        terrain.updateSurfaceMeshes(true)\n\n        if (fallinMap) {\n            for (let x = 0; x < terrain.width; x++) {\n                for (let y = 0; y < terrain.height; y++) {\n                    terrain.getSurface(x, y).setFallinLevel(fallinMap[y][x]) // rows (y) before columns (x) used in maps\n                }\n            }\n        }\n\n        if (erodeMap) { // TODO implement lava erosion\n            console.warn('Lucky you! Lava erosion not yet implemented')\n        }\n\n        if (blockMap) { // TODO implement tutorial blocks map\n            // console.log(blockMap)\n        }\n\n        return terrain\n    }\n\n}\n\nenum PathMap {\n\n    NONE = 0,\n    RUBBLE = 1,\n    POWER_PATH = 2,\n\n}\n\nenum PredugMap {\n\n    WALL = 0,\n    CAVERN_EXPOSED = 1,\n    CAVERN_HIDDEN = 2,\n    SLUG_HOLE_EXPOSED = 3,\n    SLUG_HOLE_HIDDEN = 4,\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\n\nexport class TerrainPath {\n\n    target: PathTarget = null\n    locations: Vector2[] = []\n    lengthSq: number = 0\n\n    constructor(target: PathTarget, locations: Vector2[] | Vector2) {\n        this.target = target\n        this.locations = Array.isArray(locations) ? locations : [locations]\n        for (let c = 0; c < this.locations.length - 1; c++) {\n            const start = this.locations[c]\n            const end = this.locations[c + 1]\n            this.lengthSq += start.distanceToSquared(end)\n        }\n    }\n\n    get firstLocation(): Vector2 {\n        return this.locations[0] || null\n    }\n\n}\n","import { AxesHelper, Group, Vector2, Vector3 } from 'three'\nimport { DEV_MODE, TILESIZE } from '../../../params'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { PathTarget } from '../PathTarget'\nimport { astar, Graph } from './astar'\nimport { Surface } from './Surface'\nimport { SurfaceType } from './SurfaceType'\nimport { TerrainPath } from './TerrainPath'\n\nexport class Terrain {\n\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    textureSet: any = {}\n    width: number = 0\n    height: number = 0\n    surfaces: Surface[][] = []\n    floorGroup: Group = new Group()\n    roofGroup: Group = new Group()\n    graphWalk: Graph = null\n    graphDrive: Graph = null\n    graphFly: Graph = null\n    graphSwim: Graph = null\n    cachedWalkPaths = new Map<string, Vector2[]>()\n    cachedDrivePaths = new Map<string, Vector2[]>()\n    cachedFlyPaths = new Map<string, Vector2[]>()\n    cachedSwimPaths = new Map<string, Vector2[]>()\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        this.sceneMgr = sceneMgr\n        this.entityMgr = entityMgr\n        this.floorGroup.scale.setScalar(TILESIZE)\n        this.roofGroup.scale.setScalar(TILESIZE)\n        this.roofGroup.visible = false // keep roof hidden unless switched to other camera\n        if (DEV_MODE) this.floorGroup.add(new AxesHelper())\n    }\n\n    getSurfaceFromWorld(worldPosition: Vector3): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.z)\n    }\n\n    getSurfaceFromWorld2D(worldPosition: Vector2): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.y)\n    }\n\n    getSurfaceFromWorldXZ(worldX: number, worldZ: number): Surface | null {\n        return this.getSurface(worldX / TILESIZE, worldZ / TILESIZE)\n    }\n\n    getSurface(x, y): Surface {\n        x = Math.floor(x)\n        y = Math.floor(y)\n        return this.getSurfaceOrNull(x, y) || new Surface(this, SurfaceType.SOLID_ROCK, x, y, 0)\n    }\n\n    getSurfaceOrNull(x, y): Surface | null {\n        if (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n            return this.surfaces[x][y]\n        } else {\n            return null\n        }\n    }\n\n    updateSurfaceMeshes(force: boolean = false) {\n        this.forEachSurface((s) => s.updateMesh(force))\n        this.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n        this.resetGraphWalk()\n    }\n\n    resetGraphWalk() {\n        this.graphWalk.init()\n        this.graphDrive.init()\n        this.graphFly.init()\n        this.graphSwim.init()\n        this.cachedWalkPaths.clear()\n        this.cachedDrivePaths.clear()\n        this.cachedFlyPaths.clear()\n        this.cachedSwimPaths.clear()\n        console.log('Cached paths cleared')\n    }\n\n    findWalkPath(start: Vector2, target: PathTarget): TerrainPath {\n        return Terrain.findPath(start, target, this.cachedWalkPaths, this.graphWalk, 3 / TILESIZE, 0.25)\n    }\n\n    findDrivePath(start: Vector2, target: PathTarget): TerrainPath {\n        return Terrain.findPath(start, target, this.cachedDrivePaths, this.graphDrive, 1 / TILESIZE, 0)\n    }\n\n    findFlyPath(start: Vector2, target: PathTarget): TerrainPath {\n        return Terrain.findPath(start, target, this.cachedFlyPaths, this.graphFly, 1 / TILESIZE, 0)\n    }\n\n    findSwimPath(start: Vector2, target: PathTarget): TerrainPath {\n        return Terrain.findPath(start, target, this.cachedSwimPaths, this.graphSwim, 1 / TILESIZE, 0)\n    }\n\n    private static findPath(start: Vector2, target: PathTarget, cachedPaths: Map<string, Vector2[]>, graph: Graph, gridScale: number, maxRandomOffset: number): TerrainPath {\n        const gridStart = start.clone().multiplyScalar(gridScale).floor()\n        const gridEnd = target.targetLocation.clone().multiplyScalar(gridScale).floor()\n        if (gridStart.x === gridEnd.x && gridStart.y === gridEnd.y) return new TerrainPath(target, target.targetLocation)\n        const cacheIdentifier = gridStart.x + '/' + gridStart.y + ' -> ' + gridEnd.x + '/' + gridEnd.y\n        const resultPath = cachedPaths.getOrUpdate(cacheIdentifier, () => {\n            const startNode = graph.grid[gridStart.x][gridStart.y]\n            const endNode = graph.grid[gridEnd.x][gridEnd.y]\n            const freshPath = astar.search(graph, startNode, endNode).map((n) =>\n                new Vector2(n.x + 0.5, n.y + 0.5).add(new Vector2().random().multiplyScalar(maxRandomOffset)).divideScalar(gridScale))\n            if (freshPath.length < 1) return null // no path found\n            freshPath.pop() // last node is replaced with actual target position\n            return freshPath\n        })\n        if (!resultPath) return null\n        return new TerrainPath(target, [...resultPath, target.targetLocation]) // return shallow copy to avoid interference\n    }\n\n    findFallInOrigin(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isReinforcable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isReinforcable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isReinforcable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isReinforcable()) return [bottomSurface.x, bottomSurface.y]\n        const leftSurface2 = this.getSurface(x - 1, y)\n        if (leftSurface2.isDigable()) return [leftSurface2.x, leftSurface2.y]\n        const topSurface2 = this.getSurface(x, y - 1)\n        if (topSurface2.isDigable()) return [topSurface2.x, topSurface2.y]\n        const rightSurface2 = this.getSurface(x + 1, y)\n        if (rightSurface2.isDigable()) return [rightSurface2.x, rightSurface2.y]\n        const bottomSurface2 = this.getSurface(x, y + 1)\n        if (bottomSurface2.isDigable()) return [bottomSurface2.x, bottomSurface2.y]\n        return null\n    }\n\n    findFallInTarget(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isWalkable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isWalkable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isWalkable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isWalkable()) return [bottomSurface.x, bottomSurface.y]\n        return null\n    }\n\n    dispose() {\n        this.forEachSurface(s => s.dispose())\n    }\n\n    forEachSurface(each: (surface: Surface) => any) {\n        this.surfaces?.forEach((r) => r.forEach((s) => each(s)))\n    }\n\n    countDiggables(): number {\n        let totalDiggables = 0\n        this.forEachSurface((s) => totalDiggables += s.isDigable() ? 1 : 0)\n        return totalDiggables\n    }\n\n    countCrystals(): number {\n        let totalCrystals = 0\n        this.forEachSurface((s) => totalCrystals += s.containedCrystals)\n        return totalCrystals\n    }\n\n    countOres(): number {\n        let totalOres = 0\n        this.forEachSurface((s) => totalOres += s.containedOres)\n        return totalOres\n    }\n\n}\n","import { AmbientLight, AudioListener, Color, Frustum, Intersection, Mesh, MOUSE, PerspectiveCamera, PointLight, Raycaster, Scene, Vector2, Vector3, WebGLRenderer } from 'three'\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { clearIntervalSafe } from '../core/Util'\nimport { KEY_PAN_SPEED, TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { SceneMesh } from '../scene/SceneMesh'\nimport { DebugHelper } from '../screen/DebugHelper'\nimport { EntityManager } from './EntityManager'\nimport { BuildingEntity } from './model/building/BuildingEntity'\nimport { BuildPlacementMarker } from './model/building/BuildPlacementMarker'\nimport { GameSelection } from './model/GameSelection'\nimport { GameState } from './model/GameState'\nimport { Surface } from './model/map/Surface'\nimport { Terrain } from './model/map/Terrain'\nimport { MaterialEntity } from './model/material/MaterialEntity'\nimport { Selectable } from './model/Selectable'\nimport { VehicleEntity } from './model/vehicle/VehicleEntity'\nimport { TerrainLoader } from './TerrainLoader'\nimport { WorldManager } from './WorldManager'\n\nexport class SceneManager {\n\n    static meshRegistry: SceneMesh[] = []\n\n    worldMgr: WorldManager\n    entityMgr: EntityManager\n    maxFps: number = 30 // most animations use 25 fps so this should be enough\n    renderer: WebGLRenderer\n    debugHelper: DebugHelper = new DebugHelper()\n    renderInterval\n    animRequest\n    scene: Scene\n    listener: AudioListener\n    camera: PerspectiveCamera\n    ambientLight: AmbientLight\n    light: PointLight\n    terrain: Terrain\n    controls: MapControls\n    cursorTorchlight: PointLight\n    buildMarker: BuildPlacementMarker\n\n    constructor(canvas: SpriteImage) {\n        this.renderer = new WebGLRenderer({antialias: true, canvas: canvas})\n        this.renderer.setClearColor(0x000000)\n\n        this.listener = new AudioListener()\n\n        this.camera = new PerspectiveCamera(30, canvas.width / canvas.height, 0.1, 5000) // TODO make these params configurable\n        this.camera.add(this.listener)\n\n        this.controls = new MapControls(this.camera, this.renderer.domElement)\n        this.controls.mouseButtons = {LEFT: null, MIDDLE: MOUSE.ROTATE, RIGHT: MOUSE.PAN}\n        // this.controls.maxPolarAngle = Math.PI * 0.45; // TODO dynamically adapt to terrain height at camera position\n        this.controls.listenToKeyEvents(this.renderer.domElement)\n        this.controls.keyPanSpeed = this.controls.keyPanSpeed * KEY_PAN_SPEED\n    }\n\n    getSelectionByRay(rx: number, ry: number): GameSelection {\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        const selection = new GameSelection()\n        selection.raiders.push(...SceneManager.getSelection(raycaster.intersectObjects(this.entityMgr.raiders.map((r) => r.sceneEntity.pickSphere))))\n        if (selection.isEmpty()) selection.vehicles.push(...SceneManager.getSelection(raycaster.intersectObjects(this.entityMgr.vehicles.map((v) => v.sceneEntity.pickSphere))))\n        if (selection.isEmpty()) selection.building = SceneManager.getSelection(raycaster.intersectObjects(this.entityMgr.buildings.map((b) => b.sceneEntity.pickSphere)))[0]\n        if (selection.isEmpty() && this.terrain) selection.surface = SceneManager.getSelection(raycaster.intersectObjects(this.terrain.floorGroup.children))[0]\n        return selection\n    }\n\n    private static getSelection(intersects: Intersection[]): any[] {\n        if (intersects.length < 1) return []\n        const selection = []\n        const userData = intersects[0].object.userData\n        if (userData && userData.hasOwnProperty('selectable')) {\n            const selectable = userData['selectable'] as Selectable\n            if (selectable?.isInSelection()) selection.push(selectable)\n        }\n        return selection\n    }\n\n    getFirstByRay(rx: number, ry: number): { vehicle?: VehicleEntity, material?: MaterialEntity, surface?: Surface } {\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        const vehicle = SceneManager.getEntity(raycaster.intersectObjects(this.entityMgr.vehicles.map((v) => v.sceneEntity.pickSphere)))\n        if (vehicle) return {vehicle: vehicle}\n        // FIXME materials don't have pick spheres yet\n        // const material = SceneManager.getEntity(raycaster.intersectObjects(this.entityMgr.materials.map((m) => m.sceneEntity.pickSphere)))\n        // if (material) return {material: material}\n        if (this.terrain) {\n            const surface = SceneManager.getEntity(raycaster.intersectObjects(this.terrain.floorGroup.children))\n            if (surface) return {surface: surface}\n        }\n        return null\n    }\n\n    private static getEntity(intersects: Intersection[]) {\n        return (intersects[0]?.object?.userData?.['selectable']) || null\n    }\n\n    getEntitiesInFrustum(r1x: number, r1y: number, r2x: number, r2y: number): GameSelection {\n        const startPoint = new Vector3(r1x, r1y, 0.5)\n        const endPoint = new Vector3(r2x, r2y, 0.5)\n        // Avoid invalid frustum\n        if (startPoint.x === endPoint.x) {\n            endPoint.x += Number.EPSILON\n        }\n        if (startPoint.y === endPoint.y) {\n            endPoint.y += Number.EPSILON\n        }\n        // update camera\n        this.camera.updateProjectionMatrix()\n        this.camera.updateMatrixWorld()\n        // update frustum\n        const tmpPoint = new Vector3()\n        tmpPoint.copy(startPoint)\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x)\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y)\n        endPoint.x = Math.max(startPoint.x, endPoint.x)\n        endPoint.y = Math.min(startPoint.y, endPoint.y)\n\n        const vecNear = new Vector3()\n        const vecTopLeft = new Vector3()\n        const vecTopRight = new Vector3()\n        const vecDownRight = new Vector3()\n        const vecDownLeft = new Vector3()\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld)\n        vecTopLeft.copy(tmpPoint)\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0)\n        vecDownRight.copy(endPoint)\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0)\n\n        vecTopLeft.unproject(this.camera)\n        vecTopRight.unproject(this.camera)\n        vecDownRight.unproject(this.camera)\n        vecDownLeft.unproject(this.camera)\n\n        const vectemp1 = new Vector3()\n        const vectemp2 = new Vector3()\n        const vectemp3 = new Vector3()\n        vectemp1.copy(vecTopLeft).sub(vecNear)\n        vectemp2.copy(vecTopRight).sub(vecNear)\n        vectemp3.copy(vecDownRight).sub(vecNear)\n        vectemp1.normalize()\n        vectemp2.normalize()\n        vectemp3.normalize()\n\n        const deep = Number.MAX_VALUE\n        vectemp1.multiplyScalar(deep)\n        vectemp2.multiplyScalar(deep)\n        vectemp3.multiplyScalar(deep)\n        vectemp1.add(vecNear)\n        vectemp2.add(vecNear)\n        vectemp3.add(vecNear)\n\n        const frustum = new Frustum()\n        const planes = frustum.planes\n\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight)\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight)\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear)\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear)\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft)\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1)\n        planes[5].normal.multiplyScalar(-1)\n\n        const selection = new GameSelection()\n        selection.raiders.push(...this.entityMgr.raiders.filter((r) => r.isInSelection() && SceneManager.isInFrustum(r.sceneEntity.pickSphere, frustum)))\n        selection.vehicles.push(...this.entityMgr.vehicles.filter((v) => v.isInSelection() && SceneManager.isInFrustum(v.sceneEntity.pickSphere, frustum)))\n        if (selection.isEmpty()) selection.building = this.entityMgr.buildings.find((b) => SceneManager.isInFrustum(b.sceneEntity.pickSphere, frustum))\n        return selection\n    }\n\n    private static isInFrustum(pickSphere: Mesh, frustum: Frustum) {\n        if (!pickSphere) return false\n        const selectionCenter = new Vector3()\n        pickSphere.getWorldPosition(selectionCenter)\n        return frustum.containsPoint(selectionCenter)\n    }\n\n    setupScene(levelConf: LevelEntryCfg) {\n        this.scene = new Scene()\n\n        const ambientRgb = ResourceManager.cfg('Main', 'AmbientRGB') || [10, 10, 10]\n        const maxAmbRgb = Math.min(255, Math.max(0, ...ambientRgb))\n        const normalizedRgb = ambientRgb.map(v => v / (maxAmbRgb ? maxAmbRgb : 1))\n        const ambientColor = new Color(normalizedRgb[0], normalizedRgb[1], normalizedRgb[2])\n        this.ambientLight = new AmbientLight(ambientColor, 0.4)\n        this.scene.add(this.ambientLight)\n\n        this.cursorTorchlight = new PointLight(0xffffff, 1.5, 4, 1)\n        this.cursorTorchlight.distance *= TILESIZE\n        this.scene.add(this.cursorTorchlight)\n\n        this.buildMarker = new BuildPlacementMarker(this.worldMgr, this, this.entityMgr)\n        this.scene.add(this.buildMarker.group)\n        this.setBuildModeSelection(null)\n\n        // create terrain mesh and add it to the scene\n        this.terrain = TerrainLoader.loadTerrain(levelConf, this, this.entityMgr)\n        this.scene.add(this.terrain.floorGroup)\n\n        // gather level start details for game result score calculation\n        GameState.totalDiggables = this.terrain.countDiggables()\n        GameState.totalCrystals = this.terrain.countCrystals()\n        GameState.totalOres = this.terrain.countOres()\n    }\n\n    startScene() {\n        this.debugHelper.show()\n        this.renderInterval = setInterval(() => {\n            this.animRequest = requestAnimationFrame(() => {\n                this.debugHelper.renderStart()\n                this.renderer.render(this.scene, this.camera)\n                this.debugHelper.renderDone()\n            })\n        }, 1000 / this.maxFps)\n    }\n\n    disposeScene() {\n        this.debugHelper.hide()\n        this.renderInterval = clearIntervalSafe(this.renderInterval)\n        if (this.animRequest) {\n            cancelAnimationFrame(this.animRequest)\n            this.animRequest = null\n        }\n        GameState.remainingDiggables = this.terrain?.countDiggables() || 0\n        this.terrain?.dispose()\n        this.terrain = null\n        SceneManager.meshRegistry.forEach(mesh => mesh.dispose())\n        SceneManager.meshRegistry = []\n    }\n\n    static registerMesh(mesh: SceneMesh): SceneMesh {\n        this.meshRegistry.push(mesh)\n        return mesh\n    }\n\n    resize(width: number, height: number) {\n        this.renderer.setSize(width, height)\n    }\n\n    getTerrainIntersectionPoint(rx: number, ry: number): Vector2 {\n        if (!this.terrain) return null\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        const intersects = raycaster.intersectObjects(this.terrain.floorGroup.children)\n        return intersects.length > 0 ? new Vector2(intersects[0].point.x, intersects[0].point.z) : null\n    }\n\n    setTorchPosition(position: Vector2) {\n        this.cursorTorchlight.position.copy(this.getFloorPosition(position))\n        this.cursorTorchlight.position.y += 2 * TILESIZE\n    }\n\n    getFloorPosition(world: Vector2) {\n        const floorY = this.terrain.getSurfaceFromWorldXZ(world.x, world.y).getFloorHeight(world.x, world.y)\n        return new Vector3(world.x, floorY, world.y)\n    }\n\n    hasBuildModeSelection(): boolean {\n        return !!this.buildMarker?.buildModeSelection\n    }\n\n    setBuildModeSelection(building: BuildingEntity) {\n        this.buildMarker.buildModeSelection?.removeFromScene()\n        this.buildMarker.buildModeSelection = building\n        if (!building) this.buildMarker.hideAllMarker()\n    }\n\n}\n","import { BufferGeometry, Mesh } from 'three'\nimport { SceneManager } from '../game/SceneManager'\nimport { SequenceTextureMaterial } from './SequenceTextureMaterial'\n\nexport class SceneMesh extends Mesh {\n\n    constructor(geometry?: BufferGeometry, materials?: SequenceTextureMaterial[]) {\n        super(geometry, materials)\n        SceneManager.registerMesh(this)\n    }\n\n    clone(): this {\n        const clone = super.clone(true)\n        clone.material = this.getMaterials().map((m) => m.clone())\n        return clone\n    }\n\n    dispose() {\n        this.geometry?.dispose()\n        this.getMaterials().forEach((m) => m.dispose())\n        this.material = null\n    }\n\n    getMaterials(): SequenceTextureMaterial[] {\n        const mat = this.material\n        if (!mat) return []\n        return (Array.isArray(mat) ? mat : [mat]) as SequenceTextureMaterial[]\n    }\n\n}\n","/**\n * @author Scarabol https://github.com/scarabol\n *\n * This loader loads LWSC files exported from LW\n *\n * File format description: http://www.martinreddy.net/gfx/3d/LWSC.txt\n */\n\nimport { Vector3 } from 'three'\nimport { Sample } from '../audio/Sample'\nimport { getFilename } from '../core/Util'\nimport { AnimClip } from '../game/model/anim/AnimClip'\nimport { AnimSubObj } from '../game/model/anim/AnimSubObj'\nimport { SceneMesh } from '../scene/SceneMesh'\nimport { ResourceManager } from './ResourceManager'\n\nexport class LWSCLoader {\n\n    path: string = ''\n    verbose: boolean = false\n    animationClip: AnimClip = new AnimClip()\n    lines: string[] = []\n    lineIndex: number = 0\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('Using verbose mode')\n    }\n\n    parse(content): AnimClip {\n        if (!content) throw 'Cannot parse LWS, no content given'\n        this.lines = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map(l => l.trim())\n\n        if (this.lines[0] !== 'LWSC') {\n            throw 'Invalid start of file! Expected \\'LWSC\\' in first line'\n        }\n\n        const sceneFileVersion = parseInt(this.lines[1], 10)\n        if (sceneFileVersion !== 1) {\n            console.warn('Unexpected scene file version: ' + sceneFileVersion)\n        }\n\n        for (this.lineIndex = 2; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) continue // empty line: object separator\n            const key = line.split(' ')[0]\n            if (key === 'FirstFrame') {\n                this.parseFrameBlock()\n            } else if (key === 'AddNullObject' || key === 'LoadObject') {\n                const subObj = this.parseObjectBlock()\n                if (this.verbose) console.log(subObj)\n            } else if (line.startsWith('PreviewFirstFrame ') || line.startsWith('PreviewLastFrame ') || line.startsWith('PreviewFrameStep ')) {\n                // only used in editor\n            } else {\n                // console.warn('Unexpected line: ' + line); // TODO analyze remaining entries\n            }\n        }\n\n        if (this.verbose) console.log(this.animationClip)\n        return this.animationClip\n    }\n\n    parseLine(line: string): string[] {\n        const lineParts = line.split(' ').filter((l: string) => l !== '')\n        const key = lineParts.shift()\n        const value = lineParts.join(' ')\n        return [key, value]\n    }\n\n    parseFrameBlock() {\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            const line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'FirstFrame') {\n                this.animationClip.firstFrame = parseInt(value)\n            } else if (key === 'LastFrame') {\n                this.animationClip.lastFrame = parseInt(value)\n            } else if (key === 'FrameStep') {\n                const frameStep = parseInt(value)\n                if (frameStep !== 1) console.error('Animation frameStep has unexpected value: ' + frameStep)\n            } else if (key === 'FramesPerSecond') {\n                this.animationClip.framesPerSecond = parseInt(value)\n            } else if (key === 'PreviewFirstFrame' || key === 'PreviewLastFrame' || key === 'PreviewFrameStep') {\n                // only used in editor\n            } else {\n                console.warn('Unexpected key in frame block')\n            }\n        }\n        console.error('Parsing block reached content end')\n    }\n\n    parseObjectBlock(): AnimSubObj {\n        const subObj = new AnimSubObj()\n        this.animationClip.bodies.push(subObj)\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) return subObj\n            const [key, value] = this.parseLine(line)\n            if (key === 'AddNullObject' || key === 'LoadObject') {\n                if (key === 'LoadObject') {\n                    const filename = getFilename(value)\n                    subObj.lowerName = filename.slice(0, filename.length - '.lwo'.length).toLowerCase()\n                    subObj.filename = this.path + filename\n                    subObj.model = ResourceManager.getLwoModel(subObj.filename)\n                } else if (key === 'AddNullObject') {\n                    const nameParts = value.split(',')\n                    subObj.lowerName = nameParts[0].toLowerCase()\n                    if (subObj.lowerName === 'sfx') {\n                        subObj.sfxName = nameParts[1] || null\n                        subObj.sfxFrames = nameParts.slice(2).map((n) => Number(n))\n                    } else if (subObj.lowerName === 'snd' && nameParts[1].equalsIgnoreCase('SFX_LANDSLIDE')) {\n                        subObj.sfxName = Sample[Sample.SFX_FallIn]\n                        subObj.sfxFrames = nameParts.slice(2).map((n) => Number(n))\n                    }\n                    subObj.model = new SceneMesh()\n                    subObj.isNull = true\n                } else {\n                    throw 'Unexpected line: ' + line\n                }\n            } else if (key === 'ObjectMotion') {\n                let line = this.lines[++this.lineIndex]\n                const lenInfos = parseInt(line)\n                line = this.lines[++this.lineIndex]\n                const lenFrames = parseInt(line)\n                this.lineIndex++\n                for (let c = 0; c < lenFrames; c++) {\n                    let line = this.lines[this.lineIndex + c * 2]\n                    if (line.startsWith('EndBehavior')) break\n                    const infos = line.split(' ').map(Number)\n                    if (infos.length !== lenInfos) console.warn('Number of infos (' + infos.length + ') does not match if specified count (' + lenInfos + ')')\n                    line = this.lines[this.lineIndex + c * 2 + 1]\n                    const animationFrameIndex = parseInt(line.split(' ')[0]) // other entries in line should be zeros\n                    subObj.setFrameAndFollowing(animationFrameIndex, this.animationClip.lastFrame, infos)\n                }\n                this.lineIndex += lenFrames * 2\n            } else if (key === 'ParentObject') {\n                subObj.parentObjInd = Number(value) - 1 // index is 1 based\n                if (this.verbose) console.log('parent obj ind is: ' + subObj.parentObjInd)\n            } else if (key === 'ShowObject' || key === 'LockedChannels') {\n                // only used in editor\n            } else if (key === 'ShadowOptions') { // TODO implement shadow options (bitwise)\n                // 0 - Self Shadow\n                // 1 - Cast Shadow\n                // 2 - Receive Shadow\n            } else if (key === 'ObjDissolve') {\n                if (value == '(envelope)') {\n                    let line = this.lines[++this.lineIndex]\n                    const numOfInformationChannels = parseInt(line)\n                    if (numOfInformationChannels !== 1) console.error('Number of information channels for opacity is not 1, but: ' + numOfInformationChannels)\n                    line = this.lines[++this.lineIndex]\n                    const numOfKeyframes = parseInt(line)\n                    this.lineIndex++\n                    for (let c = 0; c < numOfKeyframes; c++) {\n                        let line = this.lines[this.lineIndex + c * 2]\n                        if (line.startsWith('EndBehavior')) break\n                        const opacity = 1 - Number(line)\n                        line = this.lines[this.lineIndex + c * 2 + 1]\n                        const frameNum = Number(line.split(' ')[0])\n                        subObj.setOpacityAndFollowing(frameNum, this.animationClip.lastFrame, opacity)\n                    }\n                    this.lineIndex += numOfKeyframes * 2\n                } else {\n                    const opacity = 1 - Number(value)\n                    subObj.setOpacityAndFollowing(0, this.animationClip.lastFrame, opacity)\n                }\n            } else if (key === 'PivotPoint') {\n                subObj.pivot = new Vector3().fromArray(value.split(' ').map((n) => Number(n)))\n            } else if (this.verbose) {\n                console.warn('Unhandled line in object block: ' + line + '; key: ' + key + '; value: ' + value) // TODO analyze unhandled lines\n            }\n        }\n        console.error('Parsing block reached content end')\n        return subObj\n    }\n\n}\n","import { DoubleSide, MeshPhongMaterial, Texture } from 'three'\nimport { clearIntervalSafe } from '../core/Util'\nimport { SEQUENCE_TEXTURE_FRAMERATE } from '../params'\n\nexport class SequenceTextureMaterial extends MeshPhongMaterial {\n\n    textures: Texture[] = []\n    sequenceInterval = null\n\n    constructor(name: string) {\n        super({\n            side: DoubleSide,\n            alphaToCoverage: true,\n            shininess: 0,\n        })\n        this.name = name\n    }\n\n    clone(): this {\n        const clone = super.clone() as this\n        clone.setTextures(this.textures)\n        return clone\n    }\n\n    dispose() {\n        super.dispose()\n        this.sequenceInterval = clearIntervalSafe(this.sequenceInterval)\n    }\n\n    setTextures(textures: Texture[]) {\n        this.textures = textures\n        this.sequenceInterval = clearIntervalSafe(this.sequenceInterval)\n        if (textures.length < 1) return\n        if (textures.length > 1) {\n            let seqNum = 0\n            this.sequenceInterval = setInterval(() => {\n                this.map = textures[seqNum++]\n                if (seqNum >= textures.length) seqNum = 0\n            }, 1000 / SEQUENCE_TEXTURE_FRAMERATE)\n        }\n        this.map = textures[0]\n        this.color.set(0xFFFFFF) // overwrite color, when color map (texture) in use\n    }\n\n    setOpacity(opacity: number) {\n        this.opacity = opacity\n        this.transparent = this.transparent || this.opacity < 1\n    }\n\n}\n","// noinspection JSUnusedLocalSymbols,JSBitwiseOperatorUsage\n\n/**\n * @author Marcus-Bizal https://github.com/marcbizal\n * patched by Scarabol\n *\n * This loader loads LWOB files exported from LW6.\n *\n * Support\n *  -\n */\n\nimport { AdditiveBlending, BufferAttribute, BufferGeometry, Color, DoubleSide, Texture, Vector3 } from 'three'\nimport { decodeFilepath, decodeString, getFilename } from '../core/Util'\nimport { SceneMesh } from '../scene/SceneMesh'\nimport { SequenceTextureMaterial } from '../scene/SequenceTextureMaterial'\nimport { ResourceManager } from './ResourceManager'\n\n// HEADER SPEC //\nconst LWO_MAGIC = 0x4C574F42 // \"LWOB\"\nconst OFF_MAGIC = 8\n\n/********************/\n/* TYPE SIZES START */\n/********************/\n\nconst ID4_SIZE = 4\nconst I1_SIZE = 1\nconst I2_SIZE = 2\nconst I4_SIZE = 4\nconst F4_SIZE = 4\n\nconst COL4_SIZE = 4\nconst VEC12_SIZE = 12\nconst IP2_SIZE = 2\nconst FP4_SIZE = 4\nconst DEG4_SIZE = 4\n\n/********************/\n/*  TYPE SIZES END  */\n/********************/\n\n/*********************/\n/* CHUNK TYPES START */\n/*********************/\n\nconst LWO_FORM = 0x464F524D\nconst LWO_PNTS = 0x504E5453\nconst LWO_SFRS = 0x53524653\nconst LWO_POLS = 0x504F4C53\nconst LWO_CRVS = 0x43525653\nconst LWO_PCHS = 0x50434853\nconst LWO_SURF = 0x53555246\n\nconst CHUNK_HEADER_SIZE = 8\nconst SUBCHUNK_HEADER_SIZE = 6\n\n/*********************/\n/*  CHUNK TYPES END  */\n/*********************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\nconst SURF_COLR = 0x434F4C52\nconst SURF_FLAG = 0x464C4147\n\n// Base Shading Values (Fixed Point)\nconst SURF_LUMI = 0x4C554D49\nconst SURF_DIFF = 0x44494646\nconst SURF_SPEC = 0x53504543\nconst SURF_REFL = 0x5245464C\nconst SURF_TRAN = 0x5452414E\n\n// Base Shading Values (Floating Point)\nconst SURF_VLUM = 0x564C554D\nconst SURF_VDIF = 0x56444946\nconst SURF_VSPC = 0x56535043\nconst SURF_VRFL = 0x5646524C\nconst SURF_VTRN = 0x5654524E\n\nconst SURF_GLOS = 0x474C4F53\nconst SURF_RFLT = 0x52464C54\nconst SURF_RIMG = 0x52494D47\nconst SURF_RIND = 0x52494E44\nconst SURF_EDGE = 0x45444745\nconst SURF_SMAN = 0x534D414E\n\n/**************************/\n/*  SURF DEFINITIONS END  */\n/**************************/\n\n/*****************************/\n/* TEXTURE DEFINITIONS START */\n/*****************************/\n\n// Start of Definition\nconst SURF_CTEX = 0x43544558\nconst SURF_DTEX = 0x44544558\nconst SURF_STEX = 0x53544558\nconst SURF_RTEX = 0x52544558\nconst SURF_TTEX = 0x54544558\nconst SURF_LTEX = 0x4C544558\nconst SURF_BTEX = 0x42544558\n\n// Flags\nconst SURF_TFLG = 0x54464C47\n\n// Location and Size\nconst SURF_TSIZ = 0x5453495A\nconst SURF_TCTR = 0x54435452\nconst SURF_TFAL = 0x5446414C\nconst SURF_TVEL = 0x5456454C\n\n// Color\nconst SURF_TCLR = 0x54434C52\n\n// Value\nconst SURF_TVAL = 0x54434C52\n\n// Bump Amplitude\nconst SURF_TAMP = 0x54414D50\n\n// Image Map\nconst SURF_TIMG = 0x54494D47\n\n// Image Alpha\nconst SURF_TALP = 0x54414C50\n\n// Image Wrap Options\nconst SURF_TWRP = 0x54575250\n\n// Antialiasing Strength\nconst SURF_TAAS = 0x54414153\n\n// Texture Opacity\nconst SURF_TOPC = 0x544F5043\n\n/*****************************/\n/*  TEXTURE DEFINITIONS END  */\n/*****************************/\n\n/*************************/\n/* FLAG DEFINITION START */\n/*************************/\n\nconst LUMINOUS_BIT = 1\nconst OUTLINE_BIT = 2\nconst SMOOTHING_BIT = 4\nconst COLORHIGHLIGHTS_BIT = 8\nconst COLORFILTER_BIT = 16\nconst OPAQUEEDGE_BIT = 32\nconst TRANSPARENTEDGE_BIT = 64\nconst SHARPTERMINATOR_BIT = 128\nconst DOUBLESIDED_BIT = 256\nconst ADDITIVE_BIT = 512\nconst SHADOWALPHA_BIT = 1024\n\n/*************************/\n/*  FLAG DEFINITION END  */\n/*************************/\n\n/*************************/\n/* TFLG DEFINITION START */\n/*************************/\n\nconst XAXIS_BIT = 1\nconst YAXIS_BIT = 2\nconst ZAXIS_BIT = 4\nconst WORLDCOORDS_BIT = 8\nconst NEGATIVEIMAGE_BIT = 16\nconst PIXELBLENDING_BIT = 32\nconst ANTIALIASING_BIT = 64\n\n/*************************/\n/*  TFLG DEFINITION END  */\n\n/*************************/\n\nfunction getVector3AtOffset(view, offset) {\n    let vector = new Vector3()\n    vector.x = view.getFloat32(offset)\n    vector.y = view.getFloat32(offset + F4_SIZE)\n    vector.z = view.getFloat32(offset + (F4_SIZE * 2))\n    return vector\n}\n\nfunction planarMapUVS(geometry, vertices, uvs, indices, materialIndex, size, center, flags) {\n    // Check to ensure that one of the flags is set, if not throw an error.\n    const mask = XAXIS_BIT | YAXIS_BIT | ZAXIS_BIT\n    if (flags & mask) {\n        for (let group of geometry.groups) {\n            if (group.materialIndex !== materialIndex) continue\n\n            for (let i = group.start; i < group.start + group.count; i++) {\n\n                let vertexIndex = indices[i] * 3\n                let x = vertices[vertexIndex] - center.x\n                let y = vertices[vertexIndex + 1] - center.y\n                let z = vertices[vertexIndex + 2] - center.z\n\n                let uvIndex = indices[i] * 2\n                let u = 0\n                let v = 0\n\n                if (flags & XAXIS_BIT) {\n                    u = z / size.z + 0.5\n                    v = y / size.y + 0.5\n                } else if (flags & YAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = z / size.z + 0.5\n                } else if (flags & ZAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = y / size.y + 0.5\n                }\n\n                uvs[uvIndex] = u\n                uvs[uvIndex + 1] = v\n            }\n        }\n    } else {\n        // console.warn(\"LWOLoader.planarMapUVS: No axis bit is set!\"); // XXX what is this about\n    }\n}\n\nexport class LWOLoader {\n\n    COUNTER_CLOCKWISE: false\n\n    meshPath: string\n    entityPath: string\n    verbose: boolean = false\n    materials: SequenceTextureMaterial[] = []\n    geometry: BufferGeometry = new BufferGeometry()\n    vertices: Float32Array = null\n    indices: Uint16Array = null\n    uvs: Float32Array = null\n\n    constructor(meshPath: string, entityPath: string = null, verbose: boolean = false) {\n        this.verbose = verbose\n        this.meshPath = meshPath\n        this.entityPath = entityPath\n    }\n\n    parsePoints(view, chunkOffset, chunkSize) {\n        if (chunkSize % VEC12_SIZE !== 0) {\n            console.error('LWOLoader.parse: F12 does not evenly divide into chunk size (' + chunkSize + '). Possible corruption.')\n            return\n        }\n\n        let numVertices = (chunkSize / F4_SIZE) / 3\n        this.vertices = new Float32Array(numVertices * 3)\n        this.uvs = new Float32Array(numVertices * 2)\n\n        for (let i = 0; i < numVertices; i++) {\n            let vertexIndex = i * 3\n            let vertexOffset = vertexIndex * F4_SIZE\n            this.vertices[vertexIndex] = view.getFloat32(chunkOffset + vertexOffset) \t\t\t\t// x\n            this.vertices[vertexIndex + 1] = view.getFloat32(chunkOffset + vertexOffset + F4_SIZE) \t// y\n            this.vertices[vertexIndex + 2] = view.getFloat32(chunkOffset + vertexOffset + (F4_SIZE * 2)) \t// z\n        }\n    }\n\n    parseSurfaceNames(buffer, chunkOffset, chunkSize) {\n        let textChunk = new TextDecoder().decode(new Uint8Array(buffer, chunkOffset, chunkSize))\n        this.materials = textChunk.split('\\0').filter((s) => !!s).map((name) => new SequenceTextureMaterial(name))\n        if (this.verbose) console.log('LWO contains ' + this.materials.length + ' materials with following names: ' + this.materials.map((m) => m.name))\n    }\n\n    parsePolygons(view, chunkOffset, chunkSize) {\n        // Gather some initial data so that we can get the proper size\n        let totalNumIndices = 0\n        let offset = 0\n        while (offset < chunkSize) {\n            const numIndices = view.getInt16(chunkOffset + offset)\n            const materialIndex = view.getInt16(chunkOffset + offset + 2 + (numIndices * 2))\n\n            this.geometry.addGroup(totalNumIndices, (numIndices - 2) * 3, materialIndex - 1)\n\n            totalNumIndices += (numIndices - 2) * 3\n            offset += 4 + (numIndices * 2)\n        }\n\n        offset = 0\n        let currentIndex = 0\n        this.indices = new Uint16Array(totalNumIndices)\n        while (offset < chunkSize) {\n            let numIndices = view.getInt16(chunkOffset + offset)\n\n            offset += 2\n\n            let faceIndices = new Int16Array(numIndices)\n            for (let i = 0; i <= numIndices; i++) {\n                faceIndices[i] = view.getInt16(chunkOffset + offset + (i * 2))\n            }\n\n            for (let i = 0; i < numIndices - 2; i++) {\n                if (this.COUNTER_CLOCKWISE) {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                } else {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                }\n            }\n\n            offset += 2 + (numIndices * 2)\n        }\n    }\n\n    parseSurface(view, buffer, chunkOffset, chunkSize) {\n        let offset = 0\n        while (view.getUint8(chunkOffset + offset) !== 0) offset++\n\n        let materialName = decodeString(new Uint8Array(buffer, chunkOffset, offset))\n        if (this.verbose) console.log('Parsing surface: ' + materialName)\n        let materialIndex = -1\n        let material: SequenceTextureMaterial = null\n        for (let i = 0; i < this.materials.length; i++) {\n            if (this.materials[i].name === materialName) {\n                materialIndex = i\n                material = this.materials[i]\n            }\n        }\n        if (!material) {\n            console.error('LWOLoader.parse: Surface in SURF chunk does not exist in SRFS')\n            return\n        }\n\n        let textureFlags = 0\n        let textureSize = new Vector3(0, 0, 0)\n        let textureCenter = new Vector3(0, 0, 0)\n        // let textureFalloff = new Vector3(0, 0, 0);\n        // let textureVelocity = new Vector3(0, 0, 0);\n\n        while (offset < chunkSize) {\n            const subChunkOffset = chunkOffset + offset\n            if (view.getUint8(subChunkOffset) === 0) {\n                offset++\n            } else {\n                const subChunkType = view.getInt32(subChunkOffset)\n                const subChunkSize = view.getInt16(subChunkOffset + ID4_SIZE)\n\n                if (this.verbose) console.log('Parsing sub-chunk ' + new TextDecoder().decode(new Uint8Array(buffer, subChunkOffset, ID4_SIZE)) + ' at ' + subChunkOffset + '; length ' + subChunkSize)\n\n                switch (subChunkType) {\n                    case SURF_COLR:\n                        const colorArray = [\n                            view.getUint8(subChunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subChunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subChunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                        ]\n                        material.color = new Color().fromArray(colorArray)\n                        if (this.verbose) console.log('Material color (COLR): ' + colorArray.join(' '))\n                        break\n                    case SURF_FLAG:\n                        const flags = view.getUint16(subChunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (FLAG): ' + flags.toString(2))\n                        // if (this.verbose && flags & LUMINOUS_BIT) console.warn('Flag is set but unhandled: luminous') // flag replaced with LUMI below\n                        if (this.verbose && flags & OUTLINE_BIT) console.warn('Flag is set but unhandled: outline')\n                        if (this.verbose && flags & SMOOTHING_BIT) console.warn('Flag is set but unhandled: smoothing')\n                        if (this.verbose && flags & COLORHIGHLIGHTS_BIT) console.warn('Flag is set but unhandled: colorHighlights')\n                        if (this.verbose && flags & COLORFILTER_BIT) console.warn('Flag is set but unhandled: colorFilter')\n                        if (this.verbose && flags & OPAQUEEDGE_BIT) console.warn('Flag is set but unhandled: opaqueEdge')\n                        if (this.verbose && flags & TRANSPARENTEDGE_BIT) console.warn('Flag is set but unhandled: transparentEdge')\n                        if (this.verbose && flags & SHARPTERMINATOR_BIT) console.warn('Flag is set but unhandled: sharpTerminator')\n                        if (flags & DOUBLESIDED_BIT) material.side = DoubleSide\n                        if (flags & ADDITIVE_BIT) {\n                            material.blending = AdditiveBlending\n                            material.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n                        }\n                        if (this.verbose && flags & SHADOWALPHA_BIT) console.warn('Flag is set but unhandled: shadowAlpha')\n                        break\n                    case SURF_EDGE:\n                        const edgeTransparencyThreshold = view.getFloat32(subChunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Edge transparency threshold (0.0 to 1.0): ' + edgeTransparencyThreshold)\n                        break\n                    case SURF_LUMI:\n                        const luminosity = view.getInt16(subChunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.log('Luminosity (LUMI): ' + luminosity)\n                        material.emissiveIntensity = luminosity\n                        break\n                    case SURF_DIFF:\n                        const diffuse = view.getInt16(subChunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.log('Diffuse (DIFF): ' + diffuse)\n                        if (!diffuse) material.color = null\n                        break\n                    case SURF_SPEC:\n                        const specular = view.getInt16(subChunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        // material.specular = material.color.multiplyScalar(specular);\n                        if (this.verbose) console.warn('Specular (SPEC): ' + specular)\n                        break\n                    case SURF_REFL:\n                        let reflection = 0\n                        if (reflection === SURF_VRFL) {\n                            reflection = view.getFloat32(subChunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            reflection = view.getInt16(subChunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        }\n                        material.reflectivity = reflection\n                        if (this.verbose) console.log('Reflectivity (REFL): ' + material.reflectivity)\n                        break\n                    case SURF_TRAN:\n                    case SURF_VTRN:\n                        let transparency = 0\n                        if (subChunkType === SURF_VTRN) {\n                            transparency = view.getFloat32(subChunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            transparency = view.getInt16(subChunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        }\n                        material.setOpacity(1 - transparency)\n                        if (this.verbose) console.log('Opacity (TRAN/VTRN): ' + material.opacity)\n                        break\n                    case SURF_VLUM:\n                        const vLuminosity = view.getFloat32(subChunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Luminosity (VLUM): ' + vLuminosity)\n                        material.emissiveIntensity = vLuminosity\n                        break\n                    case SURF_VDIF:\n                        let vDiffuse = view.getFloat32(subChunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Diffuse (VDIF): ' + vDiffuse)\n                        // material.vertexColors = !!vDiffuse // XXX push vertex colors first\n                        break\n                    case SURF_VSPC:\n                        let vSpecular = view.getFloat32(subChunkOffset + SUBCHUNK_HEADER_SIZE)\n                        // material.specular = material.color.multiplyScalar(vSpecular);\n                        if (this.verbose) console.warn('Specular (VSPC): ' + vSpecular)\n                        break\n                    case SURF_TFLG:\n                        textureFlags = view.getUint16(subChunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (TFLG): ' + textureFlags.toString(2))\n                        if (this.verbose && textureFlags & XAXIS_BIT) console.warn('Flag is set but unhandled: X Axis')\n                        if (this.verbose && textureFlags & YAXIS_BIT) console.warn('Flag is set but unhandled: Y Axis')\n                        if (this.verbose && textureFlags & ZAXIS_BIT) console.warn('Flag is set but unhandled: Z Axis')\n                        if (this.verbose && textureFlags & WORLDCOORDS_BIT) console.warn('Flag is set but unhandled: World Coords')\n                        if (this.verbose && textureFlags & NEGATIVEIMAGE_BIT) console.warn('Flag is set but unhandled: Negative Image')\n                        if (this.verbose && textureFlags & PIXELBLENDING_BIT) console.warn('Flag is set but unhandled: Pixel Blending')\n                        if (this.verbose && textureFlags & ANTIALIASING_BIT) console.log('Flag is set: Antialiasing') // turned on by default\n                        break\n                    case SURF_TSIZ:\n                        textureSize = getVector3AtOffset(view, subChunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Texture size (TSIZ): ' + textureSize.toArray().join(' '))\n                        break\n                    case SURF_TCTR:\n                        textureCenter = getVector3AtOffset(view, subChunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Texture center (TCTR): ' + textureCenter.toArray().join(' '))\n                        break\n                    case SURF_CTEX:\n                    case SURF_DTEX:\n                    case SURF_STEX:\n                    case SURF_RTEX:\n                    case SURF_TTEX:\n                    case SURF_BTEX:\n                        const textureTypeName = decodeFilepath(new Uint8Array(buffer, subChunkOffset + SUBCHUNK_HEADER_SIZE, subChunkSize))\n                        if (this.verbose) console.log('Texture typename: ' + textureTypeName)\n                        // XXX handle different texture types\n                        break\n                    case SURF_TVAL: // always 0 in the game\n                        const textureValue = view.getUint16(subChunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.warn('Texture value (TVAL): ' + textureValue)\n                        break\n                    case SURF_TCLR:\n                        const textureColorArray = [\n                            view.getUint8(subChunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subChunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subChunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subChunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        // const textureColor = new Color().fromArray(textureColorArray);\n                        // seems to be 0 0 0 anyway...\n                        if (this.verbose) console.log('Texture color (TCLR): ' + textureColorArray.join(' '))\n                        break\n                    case SURF_TIMG:\n                        const textureFilepath = decodeFilepath(new Uint8Array(buffer, subChunkOffset + SUBCHUNK_HEADER_SIZE, subChunkSize))\n                        if (this.verbose) console.log('Texture filepath (TIMG): ' + textureFilepath)\n                        const lTextureFilename = getFilename(textureFilepath)?.toLowerCase()\n                        if (!lTextureFilename || lTextureFilename === '(none)') break\n                        material.transparent = material.transparent || !!lTextureFilename.match(/a\\d\\d\\d\\D.*bmp/i)\n                        const hasSequence = lTextureFilename.endsWith('(sequence)')\n                        const sequenceBaseFilepath = lTextureFilename.substring(0, lTextureFilename.length - '(sequence)'.length).trim()\n                        let textures: Texture[] = []\n                        if (hasSequence) {\n                            const match = sequenceBaseFilepath.match(/(.+\\D)0+(\\d+)\\..+/i)\n                            textures = ResourceManager.getTexturesBySequenceName(this.meshPath + match[1])\n                        } else {\n                            const texture = ResourceManager.getMeshTexture(lTextureFilename, this.meshPath, this.entityPath)\n                            textures = texture ? [texture] : []\n                        }\n                        material.setTextures(textures)\n                        break\n                    default: // TODO implement all LWO features\n                        if (this.verbose) console.warn('Found unrecognised SURF sub-chunk type ' + new TextDecoder().decode(new Uint8Array(buffer, subChunkOffset, ID4_SIZE)) + ' at ' + subChunkOffset + '; length ' + subChunkSize)\n                        break\n                }\n\n                offset += SUBCHUNK_HEADER_SIZE + subChunkSize\n            }\n        }\n\n        planarMapUVS(this.geometry, this.vertices, this.uvs, this.indices, materialIndex, textureSize, textureCenter, textureFlags)\n    }\n\n    parse(buffer: ArrayBuffer): SceneMesh {\n        const view = new DataView(buffer)\n\n        if (view.getUint32(0) !== LWO_FORM) {\n            console.error('LWOLoader.parse: Cannot find header.')\n            return\n        }\n\n        const fileSize = view.getUint32(ID4_SIZE)\n        if (fileSize + CHUNK_HEADER_SIZE !== view.byteLength) {\n            console.warn('LWOLoader.parse: Discrepancy between size in header (' + (fileSize + CHUNK_HEADER_SIZE) + ' bytes) and actual size (' + view.byteLength + ' bytes).')\n        }\n\n        let magicOffset = ID4_SIZE + I4_SIZE\n        if (view.getUint32(magicOffset) !== LWO_MAGIC) {\n            const magic = decodeString(new Uint8Array(buffer, magicOffset, ID4_SIZE))\n            console.error('LWOLoader.parse: Invalid magic ID (' + magic + ') in LWO header.')\n            return\n        }\n\n        let cursor = 12\n        while (cursor < view.byteLength) {\n            // Skip null byte padding\n            if (view.getUint8(cursor) === 0) {\n                cursor++\n            } else {\n                const chunkType = view.getInt32(cursor)\n                const chunkSize = view.getInt32(cursor + ID4_SIZE)\n\n                cursor += CHUNK_HEADER_SIZE\n\n                switch (chunkType) {\n                    case LWO_PNTS:\n                        this.parsePoints(view, cursor, chunkSize)\n                        break\n                    case LWO_SFRS:\n                        this.parseSurfaceNames(buffer, cursor, chunkSize)\n                        break\n                    case LWO_POLS:\n                        this.parsePolygons(view, cursor, chunkSize)\n                        break\n                    case LWO_SURF:\n                        this.parseSurface(view, buffer, cursor, chunkSize)\n                        break\n                    default:\n                        console.warn('Found unrecognised chunk type ' + decodeString(new Uint8Array(buffer, cursor - CHUNK_HEADER_SIZE, ID4_SIZE)) + ' at ' + cursor)\n                }\n\n                cursor += chunkSize\n            }\n\n        }\n\n        this.geometry.setAttribute('position', new BufferAttribute(this.vertices, 3))\n        this.geometry.setAttribute('uv', new BufferAttribute(this.uvs, 2))\n        this.geometry.setIndex(new BufferAttribute(this.indices, 1))\n        this.geometry.computeVertexNormals()\n\n        return new SceneMesh(this.geometry, this.materials)\n    }\n}\n","export class InitLoadingMessage {\n\n    wad0FileUrl: string\n    wad1FileUrl: string\n\n    constructor(wad0FileUrl: string, wad1FileUrl: string) {\n        this.wad0FileUrl = wad0FileUrl\n        this.wad1FileUrl = wad1FileUrl\n    }\n\n}\n","export enum MoveState {\n\n    MOVED,\n    TARGET_REACHED,\n    TARGET_UNREACHABLE,\n\n}\n","import { EntityManager } from '../EntityManager'\n\nexport enum GameResultState {\n\n    QUIT,\n    COMPLETE,\n    FAILED,\n\n}\n\nexport class GameResult {\n\n    state: GameResultState\n    numBuildings: number\n    numRaiders: number\n    numMaxRaiders: number\n\n    constructor(state: GameResultState, entityMgr: EntityManager) {\n        this.state = state\n        this.numBuildings = entityMgr.buildings.length\n        this.numRaiders = entityMgr.raiders.length\n        this.numMaxRaiders = entityMgr.getMaxRaiders()\n    }\n\n}\n","import { AudioListener, RepeatWrapping, Texture } from 'three'\nimport { createDummyImgData } from '../core/ImageHelper'\nimport { getFilename, getPath } from '../core/Util'\nimport { AnimationEntityType } from '../game/model/anim/AnimationEntityType'\nimport { SceneMesh } from '../scene/SceneMesh'\nimport { AnimEntityLoader } from './AnimEntityLoader'\nimport { LWOLoader } from './LWOLoader'\nimport { ResourceCache } from './ResourceCache'\nimport { InitLoadingMessage } from './wadworker/InitLoadingMessage'\nimport { WadWorkerMessage } from './wadworker/WadWorkerMessage'\nimport { WorkerMessageType } from './wadworker/WorkerMessageType'\n\nexport class ResourceManager extends ResourceCache {\n\n    static worker: Worker = new Worker(new URL('./wadworker/WadWorker', import.meta.url))\n\n    static lwoCache: Map<string, SceneMesh> = new Map()\n\n    static startLoadingFromCache() {\n        return this.startLoading(null)\n    }\n\n    static startLoadingFromUrl(wad0Url: string, wad1Url: string) {\n        return this.startLoading(new InitLoadingMessage(wad0Url, wad1Url))\n    }\n\n    private static startLoading(msg: InitLoadingMessage) {\n        this.worker.onmessage = (event) => {\n            const msg: WadWorkerMessage = event.data\n            if (msg.type === WorkerMessageType.ASSET) {\n                msg.assetNames.forEach((assetName) => this.resourceByName.set(assetName.toLowerCase(), msg.assetObj))\n                msg.sfxKeys?.forEach((sfxKey) => this.sfxByKey.set(sfxKey, msg.assetObj))\n                this.onAssetLoaded()\n            } else if (msg.type === WorkerMessageType.MSG) {\n                this.onMessage(msg.text)\n            } else if (msg.type === WorkerMessageType.CFG) {\n                this.configuration = msg.cfg\n                this.stats = msg.stats\n                this.loadDefaultCursor()\n                this.onInitialLoad(msg.totalResources)\n            } else if (msg.type === WorkerMessageType.CACHE_MISS) {\n                this.onCacheMissed()\n            } else if (msg.type === WorkerMessageType.DONE) {\n                this.loadAllCursor()\n                console.log('Loading of about ' + msg.totalResources + ' assets complete! Total load time: ' + msg.loadingTimeSeconds + ' seconds.')\n                this.onLoadDone()\n            }\n        }\n        this.worker.postMessage(msg)\n    }\n\n    static onMessage: (msg: string) => any = (msg: string) => {\n        console.log(msg)\n    }\n\n    static onCacheMissed: () => any = () => {\n        console.log('Worker missed cache')\n    }\n\n    static onInitialLoad: (totalResources: number) => any = () => {\n        console.log('Initial loading done.')\n    }\n\n    static onAssetLoaded: () => any = () => {\n    }\n\n    static onLoadDone: () => any = () => {\n    }\n\n    static getTexturesBySequenceName(basename: string): Texture[] {\n        const lBasename = basename?.toLowerCase()\n        const result = []\n        this.resourceByName.forEach((res, name) => {\n            if (name.startsWith(lBasename)) result.push(name)\n        })\n        if (result.length > 0) {\n            return result.map((textureFilepath) => this.getTexture(textureFilepath))\n        } else if (!lBasename.startsWith('world/shared/')) {\n            return this.getTexturesBySequenceName('world/shared/' + getFilename(lBasename))\n        } else {\n            console.warn('Texture sequence not found: ' + lBasename)\n            return []\n        }\n    }\n\n    static getMeshTexture(textureFilename: string, meshPath: string, entityPath: string): Texture {\n        const lTextureFilename = textureFilename?.toLowerCase()\n        const lMeshFilepath = meshPath?.toLowerCase() + lTextureFilename\n        const imgData = this.resourceByName.getOrUpdate(lMeshFilepath, () => {\n            const lEntityFilepath = entityPath ? entityPath.toLowerCase() + lTextureFilename : null\n            if (entityPath) {\n                return this.resourceByName.getOrUpdate(lEntityFilepath, () => {\n                    return this.getImgDataFromSharedPaths(lTextureFilename, textureFilename, lMeshFilepath, lEntityFilepath)\n                })\n            } else {\n                return this.getImgDataFromSharedPaths(lTextureFilename, textureFilename, lMeshFilepath, lEntityFilepath)\n            }\n        })\n        if (!imgData) return null\n        // without repeat wrapping some entities are not fully textured\n        const texture = new Texture(imgData, Texture.DEFAULT_MAPPING, RepeatWrapping, RepeatWrapping)\n        texture.needsUpdate = true // without everything is just dark\n        return texture\n    }\n\n    private static getImgDataFromSharedPaths(lTextureFilename: string, textureFilename: string, lMeshFilepath: string, lEntityFilepath: string): ImageData {\n        const ugSharedFilename = 'vehicles/sharedug/' + lTextureFilename\n        return this.resourceByName.getOrUpdate(ugSharedFilename, () => {\n            const worldSharedFilename = 'world/shared/' + lTextureFilename\n            return this.resourceByName.getOrUpdate(worldSharedFilename, () => {\n                if (lTextureFilename !== 'teofoilreflections.jpg' && lTextureFilename !== 'wingbase3.bmp' &&\n                    lTextureFilename !== 'a_side.bmp' && lTextureFilename !== 'a_top.bmp') {\n                    console.warn('Texture \\'' + textureFilename + '\\' (' + lMeshFilepath + ', ' + lEntityFilepath + ', ' + worldSharedFilename + ') unknown! Using placeholder texture instead')\n                    return createDummyImgData(64, 64)\n                }\n                return null\n            })\n        })\n    }\n\n    static getTexture(textureFilepath): Texture | null {\n        if (!textureFilepath) {\n            throw 'textureFilepath must not be undefined, null or empty - was ' + textureFilepath\n        }\n        const imgData = this.resourceByName.get(textureFilepath.toLowerCase())\n        if (!imgData) return null\n        // without repeat wrapping some entities are not fully textured\n        const texture = new Texture(imgData, Texture.DEFAULT_MAPPING, RepeatWrapping, RepeatWrapping)\n        texture.needsUpdate = true // without everything is just dark\n        return texture\n    }\n\n    static getAnimationEntityType(aeFilename: string, audioListener: AudioListener): AnimationEntityType {\n        let cfgRoot = this.getResource(aeFilename)\n        if (!cfgRoot) throw 'Could not get animation entity type for: ' + aeFilename\n        return AnimEntityLoader.loadModels(aeFilename, cfgRoot, audioListener)\n    }\n\n    static getLwoModel(lwoFilepath: string, entityPath: string = null): SceneMesh {\n        return this.lwoCache.getOrUpdate(lwoFilepath.toLowerCase(), () => {\n            const lwoBuffer = ResourceManager.getResource(lwoFilepath)\n            if (!lwoBuffer) return null\n            return new LWOLoader(getPath(lwoFilepath), entityPath).parse(lwoBuffer)\n        })?.clone()\n    }\n\n}\n","import { AudioListener, PositionalAudio } from 'three'\nimport { SoundManager } from '../audio/SoundManager'\nimport { getPath, iGet } from '../core/Util'\nimport { AnimationEntityType } from '../game/model/anim/AnimationEntityType'\nimport { AnimationEntityUpgrade } from '../game/model/anim/AnimationEntityUpgrade'\nimport { AnimClip } from '../game/model/anim/AnimClip'\nimport { TILESIZE } from '../params'\nimport { LWSCLoader } from './LWSCLoader'\nimport { ResourceManager } from './ResourceManager'\n\nexport class AnimEntityLoader {\n\n    static loadModels(aeFilename: string, cfgRoot: any, audioListener: AudioListener, verbose: boolean = false): AnimationEntityType {\n        const path = getPath(aeFilename)\n        const entityType = new AnimationEntityType()\n        Object.keys(cfgRoot).forEach((rootKey: string) => {\n            const value = cfgRoot[rootKey]\n            if (rootKey.equalsIgnoreCase('Scale')) {\n                entityType.scale = Number(value)\n            } else if (rootKey.equalsIgnoreCase('CarryNullName')) {\n                entityType.carryNullName = value\n            } else if (rootKey.equalsIgnoreCase('CarryNullFrames')) {\n                entityType.carryNullFrames = Number(value)\n            } else if (rootKey.equalsIgnoreCase('Shape')) {\n                if (verbose) console.warn('TODO Derive buildings shape from this value') // XXX derive buildings surfaces shape from this value\n            } else if (rootKey.equalsIgnoreCase('DepositNullName')) {\n                entityType.depositNullName = value\n            } else if (rootKey.equalsIgnoreCase('ToolNullName')) {\n                entityType.toolNullName = value\n            } else if (rootKey.equalsIgnoreCase('WheelMesh')) {\n                if (!'NULL_OBJECT'.equalsIgnoreCase(value)) {\n                    const lwoFilename = path + value + '.lwo'\n                    entityType.wheelMesh = ResourceManager.getLwoModel(lwoFilename)\n                    if (!entityType.wheelMesh) console.error('Could not load wheel mesh from: ' + lwoFilename)\n                }\n            } else if (rootKey.equalsIgnoreCase('WheelRadius')) {\n                entityType.wheelRadius = Number(value)\n            } else if (rootKey.equalsIgnoreCase('WheelNullName')) {\n                entityType.wheelNullName = value\n            } else if (rootKey.equalsIgnoreCase('DrillNullName')) {\n                entityType.drillNullName = value\n            } else if (rootKey.equalsIgnoreCase('DriverNullName')) {\n                entityType.driverNullName = value\n            } else if (rootKey.equalsIgnoreCase('CameraNullName')) {\n                entityType.cameraNullName = value\n            } else if (rootKey.equalsIgnoreCase('CameraNullFrames')) {\n                entityType.cameraNullFrames = Number(value)\n            } else if (rootKey.equalsIgnoreCase('CameraFlipDir')) {\n                // XXX what is this? flip upside down when hanging from rm?\n            } else if (rootKey.equalsIgnoreCase('HighPoly')) {\n                Object.keys(value).forEach((key) => {\n                    const polyKey = key.startsWith('!') ? key.slice(1) : key\n                    const mesh = ResourceManager.getLwoModel(path + value[key] + '.lwo')\n                    entityType.highPolyBodies.set(polyKey.toLowerCase(), mesh)\n                })\n            } else if (rootKey.equalsIgnoreCase('MediumPoly')) {\n                // TODO implement medium poly parsing\n            } else if (rootKey.equalsIgnoreCase('LowPoly')) {\n                // TODO implement low poly parsing\n            } else if (rootKey.equalsIgnoreCase('FPPoly')) {\n                // TODO implement first person poly parsing\n            } else if (rootKey.equalsIgnoreCase('Activities')) {\n                entityType.animations = this.parseAnimations(value, cfgRoot, path, verbose)\n            } else if (rootKey.equalsIgnoreCase('Upgrades')) {\n                entityType.upgradesByLevel = this.parseUpgrades(value)\n            } else if (rootKey.match(/level\\d\\d\\d\\d/i)) {\n                // TODO geo dome has upgrade defined at root level without Upgrades group\n            } else if (verbose && !value['lwsfile']) {\n                console.warn('Unhandled animated entity key found: ' + rootKey, value)\n            }\n        })\n\n        entityType.animations.forEach((animation) => {\n            animation.bodies.forEach((body) => {\n                let model = entityType.highPolyBodies.get(body.lowerName)\n                if (!model) model = entityType.mediumPolyBodies.get(body.lowerName)\n                if (!model) model = body.model\n                const polyModel = model.clone()\n                animation.polyList.push(polyModel)\n                if (body.lowerName) {\n                    if (body.lowerName.equalsIgnoreCase(entityType.carryNullName)) {\n                        animation.carryJoint = polyModel\n                    } else if (body.lowerName.equalsIgnoreCase(entityType.depositNullName)) {\n                        animation.depositJoint = polyModel\n                    } else if (body.lowerName.equalsIgnoreCase(entityType.toolNullName)) {\n                        animation.getToolJoint = polyModel\n                    } else if (body.lowerName.equalsIgnoreCase(entityType.wheelNullName)) {\n                        animation.wheelJoints.push(polyModel)\n                    } else if (body.lowerName.equalsIgnoreCase(entityType.drillNullName)) {\n                        animation.drillJoint = polyModel\n                    } else if (body.lowerName.equalsIgnoreCase(entityType.driverNullName)) {\n                        animation.driverJoint = polyModel\n                    } else if (body.isNull) {\n                        animation.nullJoints.getOrUpdate(body.lowerName.toLowerCase(), () => []).push(polyModel)\n                    }\n                }\n                if (body.sfxName) {\n                    const audio = new PositionalAudio(audioListener)\n                    audio.setRefDistance(TILESIZE * 6) // TODO optimize ref distance for SFX sounds\n                    audio.loop = false\n                    polyModel.add(audio)\n                    SoundManager.getSoundBuffer(body.sfxName).then((audioBuffer) => {\n                        audio.setBuffer(audioBuffer)\n                    })\n                    body.sfxFrames.forEach((frame) => animation.sfxAudioByFrame.getOrUpdate(frame, () => []).push(audio))\n                }\n            })\n\n            if (entityType.wheelMesh) {\n                animation.wheelJoints.forEach((joint) => {\n                    joint.add(entityType.wheelMesh.clone(true))\n                })\n            }\n\n            const upgrades0000 = entityType.upgradesByLevel.get('0000')\n            if (upgrades0000) { // TODO check for other upgrade levels\n                upgrades0000.forEach((upgrade) => {\n                    const joint = animation.nullJoints.get(upgrade.upgradeNullName.toLowerCase())?.[upgrade.upgradeNullIndex]\n                    if (joint) {\n                        const lwoModel = ResourceManager.getLwoModel(upgrade.upgradeFilepath + '.lwo')\n                        if (lwoModel) {\n                            joint.add(lwoModel)\n                        } else {\n                            const upgradeModels = ResourceManager.getAnimationEntityType(upgrade.upgradeFilepath + '/' + upgrade.upgradeFilepath.split('/').last() + '.ae', audioListener)\n                            upgradeModels.animations.get('activity_stand')?.bodies.forEach((b) => joint.add(b.model.clone()))\n                        }\n                    }\n                })\n            }\n\n            animation.polyModel.scale.setScalar(entityType.scale)\n            animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n                const polyPart = animation.polyList[index]\n                const parentInd = body.parentObjInd\n                if (parentInd !== undefined && parentInd !== null) { // can be 0\n                    animation.polyList[parentInd].add(polyPart)\n                } else {\n                    animation.polyModel.add(polyPart)\n                }\n            })\n        })\n\n        return entityType\n    }\n\n    private static parseAnimations(value, root, path: string, verbose: boolean): Map<string, AnimClip> {\n        const animations = new Map<string, AnimClip>()\n        Object.keys(value).forEach((activity) => {\n            try {\n                let keyname = iGet(value, activity)\n                const act: { file: string, transcoef: number, lwsfile: boolean, animation: AnimClip, keyname: string } = iGet(root, keyname)\n                const file = iGet(act, 'FILE')\n                const isLws = iGet(act, 'LWSFILE') === true\n                const transcoef = iGet(act, 'TRANSCOEF')\n                const looping = iGet(act, 'LOOPING') === true\n                if (isLws) {\n                    const content = ResourceManager.getResource(path + file + '.lws')\n                    const animation = new LWSCLoader(path, verbose).parse(content)\n                    animation.looping = looping\n                    animation.transcoef = transcoef ? Number(transcoef) : 1\n                    animations.set(activity.toLowerCase(), animation)\n                } else {\n                    console.error('Found activity which is not an LWS file')\n                }\n            } catch (e) {\n                console.error(e)\n                console.log(root)\n                console.log(value)\n                console.log(activity)\n            }\n        })\n        return animations\n    }\n\n    private static parseUpgrades(value) {\n        const upgrades = new Map<string, AnimationEntityUpgrade[]>()\n        Object.keys(value).forEach((levelKey: string) => {\n            const match = levelKey.match(/level(\\d\\d\\d\\d)/i) // [carry] [scan] [speed] [drill]\n            if (match) {\n                const upgradeValue = value[levelKey]\n                upgrades.set(match[1], Object.keys(upgradeValue).map((upgradeName: string) => {\n                    const upgradeFilepath = ResourceManager.cfg('UpgradeTypes', upgradeName)\n                    const upgradeNullName = upgradeValue[upgradeName][0][0]\n                    const upgradeNullIndex = Number(upgradeValue[upgradeName][1][0]) - 1\n                    return new AnimationEntityUpgrade(upgradeFilepath, upgradeNullName, upgradeNullIndex)\n                }))\n            } else {\n                console.warn('Unexpected upgrade level key: ' + levelKey)\n            }\n        })\n        return upgrades\n    }\n\n}\n","import { Vector2, Vector3 } from 'three'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { SelectionChanged, SelectPanelType } from '../event/LocalEvents'\nimport { JobCreateEvent } from '../event/WorldEvents'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../params'\nimport { BaseEntity } from './model/BaseEntity'\nimport { BuildingEntity } from './model/building/BuildingEntity'\nimport { BuildingSite } from './model/building/BuildingSite'\nimport { EntityType } from './model/EntityType'\nimport { GameSelection } from './model/GameSelection'\nimport { Surface } from './model/map/Surface'\nimport { MaterialEntity } from './model/material/MaterialEntity'\nimport { Bat } from './model/monster/Bat'\nimport { RockMonster } from './model/monster/RockMonster'\nimport { SmallSpider } from './model/monster/SmallSpider'\nimport { Raider } from './model/raider/Raider'\nimport { RaiderTraining } from './model/raider/RaiderTraining'\nimport { VehicleEntity } from './model/vehicle/VehicleEntity'\n\nexport class EntityManager {\n\n    selection: GameSelection = new GameSelection()\n    buildings: BuildingEntity[] = []\n    buildingsUndiscovered: BuildingEntity[] = []\n    raiders: Raider[] = []\n    raidersUndiscovered: Raider[] = []\n    materials: MaterialEntity[] = []\n    materialsUndiscovered: MaterialEntity[] = []\n    buildingSites: BuildingSite[] = []\n    spiders: SmallSpider[] = []\n    bats: Bat[] = []\n    rockMonsters: RockMonster[] = []\n    vehicles: VehicleEntity[] = []\n    vehiclesUndiscovered: VehicleEntity[] = []\n\n    constructor() {\n        // event handler must be placed here, because only this class knows the \"actual\" selection instance\n        EventBus.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            if (event.selectPanelType === SelectPanelType.NONE) this.selection.deselectAll()\n        })\n    }\n\n    reset() {\n        this.selection = new GameSelection()\n        this.buildings = []\n        this.buildingsUndiscovered = []\n        this.raiders = []\n        this.raidersUndiscovered = []\n        this.materials = []\n        this.materialsUndiscovered = []\n        this.buildingSites = []\n        this.spiders = []\n        this.bats = []\n        this.rockMonsters = []\n        this.vehicles = []\n        this.vehiclesUndiscovered = []\n    }\n\n    start() {\n    }\n\n    stop() {\n        this.buildings.forEach((b) => b.removeFromScene())\n        this.buildingsUndiscovered.forEach((b) => b.removeFromScene())\n        this.raiders.forEach((r) => r.removeFromScene())\n        this.raidersUndiscovered.forEach((r) => r.removeFromScene())\n        this.materials.forEach((m) => m.removeFromScene())\n        this.materialsUndiscovered.forEach((m) => m.removeFromScene())\n        this.spiders.forEach((m) => m.removeFromScene())\n        this.bats.forEach((b) => b.removeFromScene())\n    }\n\n    getBuildingsByType(...buildingTypes: EntityType[]): BuildingEntity[] {\n        return this.buildings.filter(b => b.isUsable() && buildingTypes.some(bt => b.entityType === bt))\n    }\n\n    getClosestBuildingByType(position: Vector3, ...buildingTypes: EntityType[]): BuildingEntity {\n        return EntityManager.getClosestBuilding(this.getBuildingsByType(...buildingTypes), position)\n    }\n\n    getTrainingSites(training: RaiderTraining): BuildingEntity[] {\n        return this.buildings.filter((b) => b.isTrainingSite(training))\n    }\n\n    getClosestTrainingSite(position: Vector3, training: RaiderTraining) {\n        return EntityManager.getClosestBuilding(this.getTrainingSites(training), position)\n    }\n\n    private static getClosestBuilding(buildings: BuildingEntity[], position: Vector3) {\n        let closest = null, minDist = null\n        buildings.forEach((b) => {\n            const bPos = b.getPosition()\n            const dist = position.distanceToSquared(bPos) // TODO better use pathfinding\n            if (closest === null || dist < minDist) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest // TODO when using path finding, return path instead\n    }\n\n    getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + this.buildings.count((b) => b.isUsable() && b.entityType === EntityType.BARRACKS) * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE\n        this.discoverEntities(this.raidersUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.buildingsUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.materialsUndiscovered, minX, maxX, minZ, maxZ)\n    }\n\n    discoverEntities(undiscovered: BaseEntity[], minX, maxX, minZ, maxZ) {\n        const discovered = []\n        undiscovered.forEach((e) => {\n            const pos = e.getPosition()\n            if (pos.x >= minX && pos.x < maxX && pos.z >= minZ && pos.z < maxZ) {\n                e.onDiscover()\n                discovered.push(e)\n            }\n        })\n        discovered.forEach((r) => undiscovered.remove(r))\n    }\n\n    placeMaterial(item: MaterialEntity, worldPosition: Vector2) {\n        item.addToScene(worldPosition, 0)\n        if (item.sceneEntity.visible) {\n            this.materials.push(item)\n            EventBus.publishEvent(new JobCreateEvent(item.createCarryJob()))\n        } else {\n            this.materialsUndiscovered.push(item)\n        }\n        return item\n    }\n\n    getOxygenSum(): number {\n        return this.raiders.map((r) => r.stats.OxygenCoef).reduce((l, r) => l + r, 0) +\n            this.buildings.map((b) => b.isUsable() ? b.stats.OxygenCoef : 0).reduce((l, r) => l + r, 0)\n    }\n\n    hasMaxRaiders(): boolean {\n        return this.raiders.length >= this.getMaxRaiders()\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { EventBus } from '../event/EventBus'\nimport { DeselectAll } from '../event/LocalEvents'\nimport { NATIVE_FRAMERATE, NATIVE_UPDATE_INTERVAL, TILESIZE } from '../params'\nimport { AnimationGroup } from './model/anim/AnimationGroup'\nimport { BaseEntity } from './model/BaseEntity'\n\nexport class BeamUpAnimator {\n\n    entity: BaseEntity\n    counter: number\n\n    constructor(entity: BaseEntity) {\n        this.entity = entity\n        this.counter = 6 * TILESIZE\n        EventBus.publishEvent(new DeselectAll())\n        const animGroup = new AnimationGroup('Mini-Figures/Pilot/VLP_TelepUp.lws', this.entity.sceneMgr.listener)\n        animGroup.position.copy(this.entity.getPosition())\n        animGroup.rotateOnAxis(new Vector3(0, 1, 0), this.entity.getHeading())\n        this.entity.sceneMgr.scene.add(animGroup)\n        animGroup.startAnimation(() => {\n            this.entity.removeFromScene()\n            this.entity.sceneMgr.scene.remove(animGroup)\n        })\n        setInterval(() => this.update(NATIVE_UPDATE_INTERVAL), NATIVE_UPDATE_INTERVAL)\n    }\n\n    update(elapsedMs: number) {\n        if (this.counter > 0) {\n            this.counter--\n            this.entity.sceneEntity.position.y += (TILESIZE / NATIVE_FRAMERATE) / 2 * (elapsedMs / NATIVE_UPDATE_INTERVAL)\n        }\n    }\n\n}\n","import { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { BarrierActivity } from '../activities/BarrierActivity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntityType } from '../EntityType'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { BarrierLocation } from './BarrierLocation'\nimport { BuildingCarryPathTarget, CarryPathTarget, SiteCarryPathTarget } from './CarryPathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Barrier extends MaterialEntity {\n\n    site: BuildingSite\n    heading: number\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager, location: BarrierLocation, site: BuildingSite) {\n        super(sceneMgr, entityMgr, EntityType.BARRIER, 'MiscAnims/Barrier/Barrier.ae')\n        this.site = site\n        this.heading = location.heading\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityConstruction\n        this.changeActivity()\n        this.targets = [new SiteCarryPathTarget(location.location, this.site)]\n    }\n\n    protected updateTargets(): CarryPathTarget[] {\n        if (this.site?.canceled) {\n            this.site = null\n            const closestToolstation = this.entityMgr.getClosestBuildingByType(this.getPosition(), EntityType.TOOLSTATION)\n            this.targets = [new BuildingCarryPathTarget(closestToolstation)]\n        }\n        return this.targets\n    }\n\n    getDefaultActivity(): BarrierActivity {\n        return BarrierActivity.Short\n    }\n\n    onAddToSite() {\n        super.onAddToSite()\n        this.sceneEntity.setHeading(this.heading)\n        this.changeActivity(BarrierActivity.Expand, () => this.changeActivity(BarrierActivity.Long))\n    }\n\n}\n","import { ElectricFence } from '../../material/ElectricFence'\nimport { CarryJob } from './CarryJob'\n\nexport class CarryFenceJob extends CarryJob<ElectricFence> {\n\n    onJobComplete() {\n        super.onJobComplete()\n        if (this.item.targetSurface.canPlaceFence()) {\n            this.item.addToScene(null, null)\n            this.item.targetSurface.fence = this.item\n        } // TODO else dispose item entity with mesh\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { CarryFenceJob } from '../job/carry/CarryFenceJob'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { Surface } from '../map/Surface'\nimport { BuildingCarryPathTarget, CarryPathTarget } from './CarryPathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class ElectricFence extends MaterialEntity {\n\n    targetSurface: Surface\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager, surface: Surface) {\n        super(sceneMgr, entityMgr, EntityType.ELECTRIC_FENCE)\n        const mesh = ResourceManager.getLwoModel('Buildings/E-Fence/E-Fence4.lwo')\n        this.sceneEntity.add(mesh)\n        this.targetSurface = surface\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityConstruction\n    }\n\n    protected updateTargets(): CarryPathTarget[] {\n        if (this.targets.length < 1) {\n            if (this.targetSurface.canPlaceFence()) {\n                this.targets = [new CarryPathTarget(this.targetSurface.getCenterWorld2D())]\n            } else {\n                this.targets = this.entityMgr.getBuildingsByType(...this.getTargetBuildingTypes())\n                    .map((b) => new BuildingCarryPathTarget(b))\n            }\n        } else if (!this.targetSurface.canPlaceFence() && !(this.targets[0] as BuildingCarryPathTarget).building) {\n            this.targets = this.entityMgr.getBuildingsByType(...this.getTargetBuildingTypes())\n                .map((b) => new BuildingCarryPathTarget(b))\n        }\n        return this.targets\n    }\n\n    createCarryJob(): CarryFenceJob {\n        return new CarryFenceJob(this)\n    }\n\n}\n","import { PositionalAudio, Vector2, Vector3 } from 'three'\nimport { BuildingEntityStats } from '../../../cfg/BuildingEntityStats'\nimport { EventBus } from '../../../event/EventBus'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { BuildingsChangedEvent, DeselectAll } from '../../../event/LocalEvents'\nimport { MaterialAmountChanged } from '../../../event/WorldEvents'\nimport { TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BeamUpAnimator } from '../../BeamUpAnimator'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { BuildingActivity } from '../activities/BuildingActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { BaseEntity } from '../BaseEntity'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { Surface } from '../map/Surface'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { Barrier } from '../material/Barrier'\nimport { BarrierLocation } from '../material/BarrierLocation'\nimport { Crystal } from '../material/Crystal'\nimport { ElectricFence } from '../material/ElectricFence'\nimport { Ore } from '../material/Ore'\nimport { PathTarget } from '../PathTarget'\nimport { RaiderTraining, RaiderTrainingSites, RaiderTrainingStatsProperty } from '../raider/RaiderTraining'\nimport { Selectable } from '../Selectable'\nimport { BuildingPathTarget } from './BuildingPathTarget'\nimport { BuildingSite } from './BuildingSite'\n\nexport abstract class BuildingEntity extends BaseEntity implements Selectable {\n\n    blocksPathSurface: boolean = true\n    secondaryBuildingPart: Vector2 = null\n    primaryPowerPath: Vector2 = new Vector2(0, 1)\n    secondaryPowerPath: Vector2 = null\n    waterPathSurface: Vector2 = null\n\n    level: number = 0\n    selected: boolean\n    powerSwitch: boolean = true\n    spawning: boolean = false\n    primarySurface: Surface = null\n    secondarySurface: Surface = null\n    primaryPathSurface: Surface = null\n    secondaryPathSurface: Surface = null\n    upgradeCostOre: number = 0\n    upgradeCostBrick: number = 0\n    crystalsInUse: number = 0\n    inBeam: boolean = false\n    beamUpAnimator: BeamUpAnimator = null\n    pathTarget: BuildingPathTarget = null\n    engineSound: PositionalAudio\n\n    protected constructor(sceneMgr: SceneManager, entityMgr: EntityManager, entityType: EntityType, aeFilename: string) {\n        super(sceneMgr, entityMgr, entityType, aeFilename)\n        this.sceneEntity.flipXAxis()\n        this.upgradeCostOre = ResourceManager.cfg('Main', 'BuildingUpgradeCostOre')\n        this.upgradeCostBrick = ResourceManager.cfg('Main', 'BuildingUpgradeCostStuds')\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, () => {\n            this.updatePowerState()\n        })\n    }\n\n    abstract get stats(): BuildingEntityStats\n\n    isSelectable(): boolean {\n        return !this.selected && !this.inBeam\n    }\n\n    isInSelection(): boolean {\n        return this.isSelectable() || this.selected\n    }\n\n    select(): boolean {\n        if (!this.isSelectable()) return false\n        this.sceneEntity.selectionFrame.visible = true\n        this.selected = true\n        return true\n    }\n\n    deselect() {\n        this.sceneEntity.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    getDropPosition2D(): Vector2 {\n        if (this.animation?.getToolJoint) {\n            const worldPos = new Vector3()\n            this.animation.getToolJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else if (this.animation?.depositJoint) {\n            const worldPos = new Vector3()\n            this.animation.depositJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else {\n            return this.getPosition2D()\n        }\n    }\n\n    isUsable(): boolean {\n        return !this.inBeam && this.powerSwitch && (this.isPowered() || this.stats.PowerBuilding) && this.sceneEntity.visible\n    }\n\n    isPowered(): boolean {\n        return this.stats.SelfPowered || this.crystalsInUse > 0\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        this.entityMgr.buildingsUndiscovered.remove(this)\n        this.entityMgr.buildings.push(this)\n        EventBus.publishEvent(new BuildingsChangedEvent(this.entityMgr))\n    }\n\n    hasMaxLevel(): boolean {\n        return this.level >= this.stats.Levels - 1\n    }\n\n    upgrade() {\n        if (!this.canUpgrade()) return\n        if (GameState.numBrick >= this.upgradeCostBrick) {\n            GameState.numBrick -= this.upgradeCostBrick\n        } else {\n            GameState.numOre -= this.upgradeCostOre\n        }\n        EventBus.publishEvent(new MaterialAmountChanged())\n        this.level++\n        EventBus.publishEvent(new DeselectAll())\n        EventBus.publishEvent(new BuildingsChangedEvent(this.entityMgr))\n        // TODO add sparkly upgrade animation\n    }\n\n    setLevel(level: number) {\n        this.level = level\n        EventBus.publishEvent(new BuildingsChangedEvent(this.entityMgr))\n    }\n\n    getDefaultActivity(): BuildingActivity {\n        return !this.isPowered() ? BuildingActivity.Unpowered : AnimEntityActivity.Stand\n    }\n\n    beamUp() {\n        GameState.usedCrystals -= this.crystalsInUse\n        this.crystalsInUse = 0\n        this.inBeam = true\n        for (let c = 0; c < this.stats.CostOre; c++) {\n            this.entityMgr.placeMaterial(new Ore(this.sceneMgr, this.entityMgr), this.primarySurface.getRandomPosition())\n        }\n        for (let c = 0; c < this.stats.CostCrystal; c++) {\n            this.entityMgr.placeMaterial(new Crystal(this.sceneMgr, this.entityMgr), this.primarySurface.getRandomPosition())\n        }\n        this.surfaces.forEach((s) => s.setBuilding(null))\n        this.pathTarget = null\n        this.beamUpAnimator = new BeamUpAnimator(this)\n        EventBus.publishEvent(new BuildingsChangedEvent(this.entityMgr))\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        this.entityMgr.buildings.remove(this)\n    }\n\n    canUpgrade() {\n        return !this.hasMaxLevel() && (GameState.numOre >= this.upgradeCostOre || GameState.numBrick >= this.upgradeCostBrick)\n    }\n\n    spawnMaterials(type: EntityType, quantity: number) {\n        const material = []\n        if (type === EntityType.CRYSTAL) {\n            while (GameState.numCrystal > 0 && material.length < quantity) {\n                GameState.numCrystal--\n                material.push(new Crystal(this.sceneMgr, this.entityMgr))\n            }\n        } else if (type === EntityType.ORE) {\n            while (GameState.numOre > 0 && material.length < quantity) {\n                GameState.numOre--\n                material.push(new Ore(this.sceneMgr, this.entityMgr))\n            }\n        } else {\n            console.error('Material drop not implemented for: ' + type)\n        }\n        if (material.length > 0) EventBus.publishEvent(new MaterialAmountChanged())\n        material.forEach((m) => this.entityMgr.placeMaterial(m, this.getDropPosition2D()))\n    }\n\n    spawnBarriers(barrierLocations: BarrierLocation[], site: BuildingSite) {\n        barrierLocations.map((l) => new Barrier(this.sceneMgr, this.entityMgr, l, site)).forEach((b) => this.entityMgr.placeMaterial(b, this.getDropPosition2D()))\n    }\n\n    spawnFence(targetSurface: Surface) {\n        this.entityMgr.placeMaterial(new ElectricFence(this.sceneMgr, this.entityMgr, targetSurface), this.getDropPosition2D())\n    }\n\n    setPowerSwitch(state: boolean) {\n        this.powerSwitch = state\n        this.updatePowerState()\n    }\n\n    updatePowerState() {\n        if (this.powerSwitch) {\n            this.turnPowerOn()\n        } else {\n            this.turnPowerOff()\n        }\n    }\n\n    turnPowerOn() {\n        if (this.crystalsInUse > 0 || this.stats.SelfPowered || GameState.usedCrystals >= GameState.numCrystal || (this.entityType !== EntityType.POWER_STATION && !this.surfaces.some((s) => s.neighbors.some((n) => n.hasPower)))) return\n        this.crystalsInUse = 1\n        GameState.usedCrystals += this.crystalsInUse\n        this.surfaces.forEach((s) => s.setHasPower(true, true))\n        this.changeActivity()\n        EventBus.publishEvent(new BuildingsChangedEvent(this.entityMgr))\n        if (this.stats.EngineSound) this.engineSound = this.playPositionalAudio(this.stats.EngineSound, true)\n    }\n\n    turnPowerOff() {\n        if (this.crystalsInUse < 1) return\n        GameState.usedCrystals -= this.crystalsInUse\n        this.crystalsInUse = 0\n        this.surfaces.forEach((s) => s.setHasPower(false, false))\n        this.changeActivity()\n        EventBus.publishEvent(new BuildingsChangedEvent(this.entityMgr))\n        this.engineSound?.stop()\n        this.engineSound = null\n    }\n\n    get surfaces(): Surface[] { // TODO performance cache this in member variable\n        const result = []\n        if (this.primarySurface) result.push(this.primarySurface)\n        if (this.secondarySurface) result.push(this.secondarySurface)\n        if (this.primaryPathSurface) result.push(this.primaryPathSurface)\n        if (this.secondaryPathSurface) result.push(this.secondaryPathSurface)\n        return result\n    }\n\n    placeDown(worldPosition: Vector2, radHeading: number, disableTeleportIn: boolean) {\n        this.primarySurface = this.sceneMgr.terrain.getSurfaceFromWorld2D(worldPosition)\n        this.primarySurface.setBuilding(this)\n        if (this.secondaryBuildingPart) {\n            const secondaryOffset = new Vector2(TILESIZE * this.secondaryBuildingPart.x, TILESIZE * this.secondaryBuildingPart.y)\n                .rotateAround(new Vector2(0, 0), -radHeading).add(worldPosition)\n            this.secondarySurface = this.sceneMgr.terrain.getSurfaceFromWorld2D(secondaryOffset)\n            this.secondarySurface.setBuilding(this)\n        }\n        if (this.primaryPowerPath) {\n            const pathOffset = new Vector2(this.primaryPowerPath.x, this.primaryPowerPath.y).multiplyScalar(TILESIZE)\n                .rotateAround(new Vector2(0, 0), -radHeading).add(worldPosition)\n            this.primaryPathSurface = this.sceneMgr.terrain.getSurfaceFromWorld2D(pathOffset)\n            this.primaryPathSurface.setSurfaceType(SurfaceType.POWER_PATH_BUILDING)\n        }\n        this.addToScene(worldPosition, radHeading)\n        this.sceneEntity.createPickSphere(this.stats.PickSphere, this, this.stats.PickSphere / 4)\n        if (this.sceneEntity.visible) {\n            this.entityMgr.buildings.push(this)\n        } else {\n            this.entityMgr.buildingsUndiscovered.push(this)\n        }\n        if (this.sceneEntity.visible && !disableTeleportIn) {\n            this.inBeam = true\n            this.changeActivity(BuildingActivity.Teleport, () => {\n                this.inBeam = false\n                this.onPlaceDown()\n            })\n        } else {\n            this.onPlaceDown()\n        }\n        this.sceneMgr.terrain.resetGraphWalk()\n    }\n\n    private onPlaceDown() {\n        this.changeActivity()\n        this.updatePowerState()\n        EventBus.publishEvent(new BuildingsChangedEvent(this.entityMgr))\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n    getTrainingTargets() {\n        return [new Vector2(-1, 0), new Vector2(0, 1), new Vector2(1, 0), new Vector2(0, -1)]\n            .map((v) => new PathTarget(v.multiplyScalar(TILESIZE / 2).add(this.primarySurface.getCenterWorld2D())))\n    }\n\n    addToScene(worldPosition: Vector2, radHeading: number) {\n        super.addToScene(worldPosition, radHeading)\n        this.pathTarget = new BuildingPathTarget(this)\n    }\n\n    getPathTarget(): BuildingPathTarget {\n        return this.pathTarget\n    }\n\n    isTrainingSite(training: RaiderTraining): boolean {\n        return this.entityType === RaiderTrainingSites[training] && this.isUsable() && this.stats[RaiderTrainingStatsProperty[training]][this.level]\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Barracks extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.BARRACKS, 'Buildings/Barracks/Barracks.ae')\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Barracks\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Docks extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.DOCKS, 'Buildings/Docks/Docks.ae')\n        this.primaryPowerPath = new Vector2(0, -1)\n        this.waterPathSurface = new Vector2(0, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Docks\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Geodome extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.GEODOME, 'Buildings/Geo-dome/Geo-dome.ae')\n        this.primaryPowerPath = null\n        this.secondaryBuildingPart = new Vector2(0, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Geodome\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { BuildingActivity } from '../../activities/BuildingActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class GunStation extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.GUNSTATION, 'Buildings/gunstation/gunstation.ae')\n        this.primaryPowerPath = null\n    }\n\n    getDefaultActivity(): BuildingActivity {\n        return BuildingActivity.Stand\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.GunStation\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class OreRefinery extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.ORE_REFINERY, 'Buildings/OreRefinery/OreRefinery.ae')\n        this.primaryPowerPath = new Vector2(0, 2)\n        this.secondaryBuildingPart = new Vector2(0, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.OreRefinery\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Deposit\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class PowerStation extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.POWER_STATION, 'Buildings/Powerstation/Powerstation.ae')\n        this.secondaryBuildingPart = new Vector2(-1, 0)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Powerstation\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Deposit\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class TeleportBig extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.TELEPORT_BIG, 'Buildings/BIGTeleport/BIGTeleport.ae')\n        this.secondaryBuildingPart = new Vector2(1, 0)\n        this.secondaryPowerPath = new Vector2(1, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.TeleportBIG\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class TeleportPad extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.TELEPORT_PAD, 'Buildings/Teleports/Teleports.ae')\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.TeleportPad\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Toolstation extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.TOOLSTATION, 'Buildings/Toolstation/Toolstation.ae')\n        this.blocksPathSurface = false\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Toolstation\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Upgrade extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.UPGRADE, null)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Upgrade\n    }\n\n}\n","import { EventBus } from '../../../event/EventBus'\nimport { DeselectAll } from '../../../event/LocalEvents'\nimport { EntityManager } from '../../EntityManager'\nimport { EntityType } from '../EntityType'\nimport { Surface } from '../map/Surface'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { BuildingSite } from './BuildingSite'\n\nexport class PowerPathBuildingSite extends BuildingSite {\n\n    constructor(entityMgr: EntityManager, surface: Surface) {\n        super(entityMgr, surface, null, surface, null, null)\n        surface.setSurfaceType(SurfaceType.POWER_PATH_BUILDING_SITE)\n        entityMgr.getClosestBuildingByType(surface.getCenterWorld(), EntityType.TOOLSTATION)?.spawnMaterials(EntityType.ORE, 2)\n        this.neededByType.set(EntityType.ORE, 2)\n        entityMgr.buildingSites.push(this)\n        EventBus.publishEvent(new DeselectAll())\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderJob } from './RaiderJob'\n\nexport class EatJob extends RaiderJob {\n\n    target: PathTarget[] = []\n\n    getWorkplaces(): PathTarget[] {\n        if (this.target.length < 1) this.target = [new PathTarget(this.raider.getPosition2D())]\n        return this.target\n    }\n\n    onJobComplete() {\n        this.raider.hungerLevel = 1\n        super.onJobComplete()\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Eat\n    }\n\n}\n","import { EventBus } from '../../../../event/EventBus'\nimport { RaidersChangedEvent } from '../../../../event/LocalEvents'\nimport { EntityManager } from '../../../EntityManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { BuildingEntity } from '../../building/BuildingEntity'\nimport { FulfillerEntity } from '../../FulfillerEntity'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTraining } from '../../raider/RaiderTraining'\nimport { RaiderJob } from './RaiderJob'\n\nexport class TrainRaiderJob extends RaiderJob {\n\n    entityMgr: EntityManager\n    training: RaiderTraining\n    building: BuildingEntity\n    workplaces: PathTarget[]\n\n    constructor(entityMgr: EntityManager, training: RaiderTraining, building: BuildingEntity) {\n        super()\n        this.entityMgr = entityMgr\n        this.training = training\n        this.building = building\n        this.workplaces = this.getWorkplaces()\n    }\n\n    getWorkplaces(): PathTarget[] {\n        if (!this.building?.isUsable()) {\n            this.workplaces = []\n            this.entityMgr.getTrainingSites(this.training).map((s) => s.getTrainingTargets().forEach((t) => this.workplaces.push(t)))\n        }\n        return this.workplaces\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.raider.addTraining(this.training)\n        EventBus.publishEvent(new RaidersChangedEvent(this.entityMgr, this.training))\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Train\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        return 10000 // XXX adjust training time\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { BuildingEntity } from '../../building/BuildingEntity'\nimport { FulfillerEntity } from '../../FulfillerEntity'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderJob } from './RaiderJob'\n\nexport class UpgradeRaiderJob extends RaiderJob {\n\n    building: BuildingEntity\n    workplaces: PathTarget[]\n\n    constructor(building: BuildingEntity) {\n        super()\n        this.building = building\n        this.workplaces = building.getTrainingTargets()\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.building.isUsable() ? this.workplaces : []\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        if (this.raider.level < this.raider.stats.Levels) this.raider.level++\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Train\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        return 30000 // XXX adjust upgrade time\n    }\n\n}\n","import { PathTarget } from '../PathTarget'\nimport { Raider } from '../raider/Raider'\nimport { RaiderTraining } from '../raider/RaiderTraining'\nimport { VehicleEntity } from '../vehicle/VehicleEntity'\nimport { JobState } from './JobState'\nimport { PriorityIdentifier } from './PriorityIdentifier'\nimport { ShareableJob } from './ShareableJob'\n\nexport class VehicleCallManJob extends ShareableJob {\n\n    // FIXME add range check, which places raider in vehicle when nearby\n\n    vehicle: VehicleEntity\n    workplaces: PathTarget[]\n\n    constructor(vehicle: VehicleEntity) {\n        super()\n        this.vehicle = vehicle\n        this.vehicle.callManJob = this\n        this.workplaces = [new PathTarget(this.vehicle.getPosition2D())]\n    }\n\n    getWorkplaces(): PathTarget[] {\n        if (this.vehicle.inBeam) {\n            this.jobState = JobState.INCOMPLETE\n            return []\n        } else if (this.vehicle.driver) {\n            this.jobState = JobState.COMPLETE\n            return []\n        }\n        return this.workplaces\n    }\n\n    onJobComplete() {\n        this.vehicle.addDriver(this.fulfiller[0] as Raider) // FIXME this should only consider the one near the vehicle\n        this.vehicle.callManJob = null\n        super.onJobComplete()\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return this.vehicle.getRequiredTraining()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityGetIn\n    }\n\n}\n","import { Vector3 } from 'three'\n\nexport class EntityStep {\n\n    vec: Vector3 = null\n    targetReached: boolean = false\n\n    constructor(vec: Vector3) {\n        this.vec = vec\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { EntityManager } from '../EntityManager'\nimport { SceneManager } from '../SceneManager'\nimport { AnimEntityActivity } from './activities/AnimEntityActivity'\nimport { BaseEntity } from './BaseEntity'\nimport { EntityStep } from './EntityStep'\nimport { EntityType } from './EntityType'\nimport { TerrainPath } from './map/TerrainPath'\nimport { MoveState } from './MoveState'\nimport { PathTarget } from './PathTarget'\n\nexport abstract class MovableEntity extends BaseEntity {\n\n    currentPath: TerrainPath = null\n\n    protected constructor(sceneMgr: SceneManager, entityMgr: EntityManager, entityType: EntityType, aeFilename: string) {\n        super(sceneMgr, entityMgr, entityType, aeFilename)\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        if (!target?.length) {\n            console.warn('No targets given')\n            debugger\n        }\n        if (!this.currentPath || !target.some((t) => t.targetLocation.equals(this.currentPath.target.targetLocation))) {\n            const paths = target.map((t) => this.findPathToTarget(t)).filter((p) => !!p)\n                .sort((l, r) => l.lengthSq - r.lengthSq)\n            this.currentPath = paths.length > 0 ? paths[0] : null\n            if (!this.currentPath) return MoveState.TARGET_UNREACHABLE\n        }\n        const nextLocation = this.currentPath.firstLocation\n        this.sceneEntity.lookAt(new Vector3(nextLocation.x, this.sceneEntity.position.y, nextLocation.y))\n        const step = this.determineStep()\n        if (step.targetReached) {\n            return MoveState.TARGET_REACHED\n        } else {\n            this.sceneEntity.position.add(step.vec)\n            this.changeActivity(this.getRouteActivity()) // only change when actually moving\n            return MoveState.MOVED\n        }\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return new TerrainPath(target, target.targetLocation)\n    }\n\n    determineStep(): EntityStep {\n        const targetWorld = this.sceneMgr.getFloorPosition(this.currentPath.firstLocation)\n        targetWorld.y += this.floorOffset\n        const step = new EntityStep(targetWorld.sub(this.sceneEntity.position))\n        const stepLengthSq = step.vec.lengthSq()\n        const entitySpeed = this.getSpeed() // TODO use average speed between current and target position\n        const entitySpeedSq = entitySpeed * entitySpeed\n        if (this.currentPath.locations.length > 1) {\n            if (stepLengthSq <= entitySpeedSq) {\n                this.currentPath.locations.shift()\n                return this.determineStep()\n            }\n        } else if (stepLengthSq <= entitySpeedSq) {\n            step.targetReached = true\n        }\n        step.vec.clampLength(0, entitySpeed)\n        return step\n    }\n\n    abstract getRouteActivity(): AnimEntityActivity\n\n}\n","import { PositionalAudio, Vector2 } from 'three'\nimport { Sample } from '../../audio/Sample'\nimport { clearIntervalSafe } from '../../core/Util'\nimport { NATIVE_FRAMERATE } from '../../params'\nimport { BeamUpAnimator } from '../BeamUpAnimator'\nimport { EntityManager } from '../EntityManager'\nimport { SceneManager } from '../SceneManager'\nimport { RaiderActivity } from './activities/RaiderActivity'\nimport { EntityType } from './EntityType'\nimport { Job } from './job/Job'\nimport { JobState } from './job/JobState'\nimport { Surface } from './map/Surface'\nimport { MaterialEntity } from './material/MaterialEntity'\nimport { MovableEntity } from './MovableEntity'\nimport { MoveState } from './MoveState'\nimport { PathTarget } from './PathTarget'\nimport { Selectable } from './Selectable'\n\nexport abstract class FulfillerEntity extends MovableEntity implements Selectable {\n\n    level: number = 0\n    selected: boolean\n    workInterval = null\n    job: Job = null\n    followUpJob: Job = null\n    carries: MaterialEntity = null\n    inBeam: boolean = false\n    beamUpAnimator: BeamUpAnimator = null\n    workAudio: PositionalAudio\n\n    protected constructor(sceneMgr: SceneManager, entityMgr: EntityManager, entityType: EntityType, aeFilename: string) {\n        super(sceneMgr, entityMgr, entityType, aeFilename)\n        this.workInterval = setInterval(this.work.bind(this), 1000 / NATIVE_FRAMERATE) // TODO do not use interval, make work trigger itself (with timeout/interval) until work is done\n    }\n\n    abstract get stats()\n\n    abstract isPrepared(job: Job): boolean\n\n    dropItem() {\n        if (!this.carries) return\n        const position = this.getPosition()\n        if (this.animation?.carryJoint) {\n            this.animation.carryJoint.remove(this.carries.sceneEntity.group)\n            this.animation.carryJoint.getWorldPosition(position)\n        }\n        this.carries.addToScene(new Vector2(position.x, position.z), null)\n        this.carries = null\n    }\n\n    pickupItem(item: MaterialEntity) {\n        this.carries = item\n        if (this.animation?.carryJoint) this.animation.carryJoint.add(this.carries.sceneEntity.group)\n        this.carries.sceneEntity.position.set(0, 0, 0)\n    }\n\n    setJob(job: Job, followUpJob: Job = null) {\n        if (this.job !== job) this.stopJob()\n        this.job = job\n        if (this.job) this.job.assign(this)\n        this.followUpJob = followUpJob\n        if (this.followUpJob) this.followUpJob.assign(this)\n    }\n\n    stopJob() {\n        this.workAudio?.stop()\n        this.workAudio = null\n        this.dropItem()\n        if (!this.job) return\n        this.job.unAssign(this)\n        if (this.followUpJob) this.followUpJob.unAssign(this)\n        this.job = null\n        this.followUpJob = null\n        this.changeActivity()\n    }\n\n    deselect() {\n        this.sceneEntity.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    isSelectable(): boolean {\n        return !this.selected && !this.inBeam\n    }\n\n    isInSelection(): boolean {\n        return this.isSelectable() || this.selected\n    }\n\n    select(): boolean {\n        if (!this.isSelectable()) return false\n        this.sceneEntity.selectionFrame.visible = true\n        this.selected = true\n        this.changeActivity()\n        return true\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        this.workInterval = clearIntervalSafe(this.workInterval)\n    }\n\n    beamUp() {\n        this.stopJob()\n        this.inBeam = true\n        this.beamUpAnimator = new BeamUpAnimator(this)\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        const result = super.moveToClosestTarget(target)\n        this.job.setActualWorkplace(this.currentPath?.target)\n        if (result === MoveState.TARGET_UNREACHABLE) {\n            console.log('Entity could not move to job target, stopping job')\n            this.stopJob()\n        }\n        return result\n    }\n\n    work() {\n        if (!this.job || this.selected || this.inBeam) return\n        if (this.job.jobState !== JobState.INCOMPLETE) {\n            this.stopJob()\n        } else {\n            const carryItem = this.job.getCarryItem()\n            if (carryItem && this.carries !== carryItem) {\n                this.dropItem()\n                if (this.moveToClosestTarget(carryItem.getPositionPathTarget())) {\n                    this.changeActivity(RaiderActivity.Collect, () => {\n                        this.pickupItem(carryItem)\n                    })\n                }\n            } else if (this.moveToClosestTarget(this.job.getWorkplaces()) === MoveState.TARGET_REACHED) {\n                if (this.job.isReadyToComplete()) {\n                    const workActivity = this.job.getWorkActivity() || this.getDefaultActivity()\n                    if (!this.workAudio && workActivity === RaiderActivity.Drill) { // TODO implement work audio\n                        this.workAudio = this.playPositionalAudio(Sample[Sample.SFX_Drill], true)\n                    }\n                    this.changeActivity(workActivity, () => {\n                        this.completeJob()\n                    }, this.job.getWorkDuration(this))\n                } else {\n                    this.changeActivity()\n                }\n            }\n        }\n    }\n\n    private completeJob() {\n        this.workAudio?.stop()\n        this.workAudio = null\n        this.changeActivity()\n        this.job?.onJobComplete()\n        if (this.job?.jobState === JobState.INCOMPLETE) return\n        if (this.job) this.job.unAssign(this)\n        this.job = this.followUpJob\n        this.followUpJob = null\n    }\n\n    canDrill(surface: Surface): boolean {\n        return (this.stats[surface.surfaceType.statsDrillName]?.[this.level] || 0) > 0\n    }\n\n}\n","import { PositionalAudio, Vector2 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { SelectionChanged, VehiclesChangedEvent } from '../../../event/LocalEvents'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { EntityType } from '../EntityType'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { Job } from '../job/Job'\nimport { VehicleCallManJob } from '../job/VehicleCallManJob'\nimport { TerrainPath } from '../map/TerrainPath'\nimport { Crystal } from '../material/Crystal'\nimport { Ore } from '../material/Ore'\nimport { PathTarget } from '../PathTarget'\nimport { Raider } from '../raider/Raider'\nimport { RaiderTraining } from '../raider/RaiderTraining'\nimport { VehicleActivity } from './VehicleActivity'\n\nexport abstract class VehicleEntity extends FulfillerEntity {\n\n    driver: Raider = null\n    callManJob: VehicleCallManJob = null\n    engineSound: PositionalAudio\n\n    protected constructor(sceneMgr: SceneManager, entityMgr: EntityManager, entityType: EntityType, aeFilename: string) {\n        super(sceneMgr, entityMgr, entityType, aeFilename)\n        this.sceneEntity.flipXAxis()\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.sceneMgr.terrain.findDrivePath(this.getPosition2D(), target)\n    }\n\n    beamUp() {\n        this.dropDriver()\n        super.beamUp()\n        const surface = this.surfaces[0]\n        for (let c = 0; c < this.stats.CostOre; c++) {\n            this.entityMgr.placeMaterial(new Ore(this.sceneMgr, this.entityMgr), surface.getRandomPosition())\n        }\n        for (let c = 0; c < this.stats.CostCrystal; c++) {\n            this.entityMgr.placeMaterial(new Crystal(this.sceneMgr, this.entityMgr), surface.getRandomPosition())\n        }\n        EventBus.publishEvent(new VehiclesChangedEvent())\n    }\n\n    setJob(job: Job, followUpJob: Job = null) {\n        if (!this.driver) return\n        super.setJob(job, followUpJob)\n    }\n\n    addDriver(driver: Raider) {\n        this.driver = driver\n        this.driver.vehicle = this\n        this.driver.sceneEntity.position.set(0, 0, 0)\n        this.driver.sceneEntity.setHeading(0)\n        this.driver.changeActivity(this.getDriverActivity());\n        (this.animation.driverJoint || this.sceneEntity.group).add(this.driver.sceneEntity.group)\n        if (this.stats.EngineSound && !this.engineSound) this.engineSound = this.playPositionalAudio(this.stats.EngineSound, true)\n        if (this.selected) EventBus.publishEvent(new SelectionChanged(this.entityMgr))\n    }\n\n    dropDriver() {\n        this.stopJob()\n        if (!this.driver) return\n        (this.animation.driverJoint || this.sceneEntity.group).remove(this.driver.sceneEntity.group)\n        this.driver.vehicle = null\n        this.driver.sceneEntity.position.copy(this.sceneEntity.position)\n        this.driver.sceneEntity.setHeading(this.sceneEntity.getHeading())\n        this.driver.sceneMgr.scene.add(this.driver.sceneEntity.group)\n        this.driver.changeActivity()\n        this.driver = null\n        this.engineSound?.stop()\n        this.engineSound = null\n        if (this.selected) EventBus.publishEvent(new SelectionChanged(this.entityMgr))\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return RaiderTraining.DRIVER\n    }\n\n    getDriverActivity(): RaiderActivity {\n        return RaiderActivity.Stand\n    }\n\n    addToScene(worldPosition: Vector2, radHeading: number) {\n        super.addToScene(worldPosition, radHeading)\n    }\n\n    getRouteActivity(): VehicleActivity {\n        return AnimEntityActivity.Stand\n    }\n\n    isPrepared(job: Job): boolean {\n        return false // FIXME get vehicles to work\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class BullDozer extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.BULLDOZER, 'Vehicles/Bulldozer/Bulldozer.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.Bulldozer\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class Hoverboard extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.HOVERBOARD, 'Vehicles/Hoverboard/Hoverboard.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.Hoverboard\n    }\n\n    getDriverActivity(): RaiderActivity {\n        return RaiderActivity.Hoverboard\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { TerrainPath } from '../../map/TerrainPath'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTraining } from '../../raider/RaiderTraining'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class LargeCat extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.LARGE_CAT, 'Vehicles/LargeCat/LargeCat.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.LargeCat\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return RaiderTraining.SAILOR\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.sceneMgr.terrain.findSwimPath(this.getPosition2D(), target)\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class LargeDigger extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.LARGE_DIGGER, 'Vehicles/LargeDigger/LargeDigger.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.LargeDigger\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class LargeMlp extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.LARGE_MLP, 'Vehicles/LMLP/LMLP.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.LargeMLP\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { TerrainPath } from '../../map/TerrainPath'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTraining } from '../../raider/RaiderTraining'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class SmallCat extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.SMALL_CAT, 'Vehicles/SmallCat/SmallCat.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallCat\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return RaiderTraining.SAILOR\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.sceneMgr.terrain.findSwimPath(this.getPosition2D(), target)\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class SmallDigger extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.SMALL_DIGGER, 'Vehicles/SmallDigger/SmallDigger.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallDigger\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { TerrainPath } from '../../map/TerrainPath'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTraining } from '../../raider/RaiderTraining'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class SmallHeli extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.SMALL_HELI, 'Vehicles/SmallHeli/SmallHeli.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallHeli\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return RaiderTraining.PILOT\n    }\n\n    getDriverActivity(): RaiderActivity {\n        return RaiderActivity.SMALLheli\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.sceneMgr.terrain.findFlyPath(this.getPosition2D(), target)\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class SmallMlp extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.SMALL_MLP, 'Vehicles/SMLP/SMLP.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.Smallmlp\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class SmallTruck extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.SMALL_TRUCK, 'Vehicles/SmallTruck/SmallTruck.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallTruck\n    }\n\n    getDriverActivity(): RaiderActivity {\n        return RaiderActivity.SMALLTRUCK\n    }\n\n}\n","import { AnimEntityActivity } from '../activities/AnimEntityActivity'\n\nexport class VehicleActivity extends AnimEntityActivity {\n\n    static Route = new AnimEntityActivity('Activity_Route')\n    static TeleportIn = new AnimEntityActivity('Activity_TeleportIN')\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { AnimEntityActivity } from '../../activities/AnimEntityActivity'\nimport { AnimationEntityType } from '../../anim/AnimationEntityType'\nimport { EntityType } from '../../EntityType'\nimport { VehicleActivity } from '../VehicleActivity'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class WalkerDigger extends VehicleEntity {\n\n    walkerLegs: AnimationEntityType\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.WALKER_DIGGER, 'Vehicles/WalkerBody/WalkerBody.ae')\n        this.walkerLegs = ResourceManager.getAnimationEntityType('Vehicles/WalkerLegs/WalkerLegs.ae', sceneMgr.listener)\n    }\n\n    get stats() {\n        return ResourceManager.stats.WalkerDigger\n    }\n\n    changeActivity(activity: AnimEntityActivity = this.getDefaultActivity(), onAnimationDone: () => any = null, durationTimeMs: number = null) {\n        super.changeActivity(activity, onAnimationDone, durationTimeMs)\n        // TODO set animation for legs too\n        // TODO legs have activity stand which is not listed in the activities list\n    }\n\n    getDefaultActivity(): VehicleActivity {\n        return VehicleActivity.Route\n    }\n\n}\n","import { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { CameraControl, ChangeBuildingPowerState, ChangePriorityList, ChangeRaiderSpawnRequest, RequestVehicleSpawn, SelectBuildMode, SelectedRaiderPickTool, TrainRaider } from '../event/GuiCommand'\nimport { DeselectAll } from '../event/LocalEvents'\nimport { JobCreateEvent, RequestedRaidersChanged } from '../event/WorldEvents'\nimport { EntityManager } from './EntityManager'\nimport { BuildingEntity } from './model/building/BuildingEntity'\nimport { Barracks } from './model/building/entities/Barracks'\nimport { Docks } from './model/building/entities/Docks'\nimport { Geodome } from './model/building/entities/Geodome'\nimport { GunStation } from './model/building/entities/GunStation'\nimport { OreRefinery } from './model/building/entities/OreRefinery'\nimport { PowerStation } from './model/building/entities/PowerStation'\nimport { TeleportBig } from './model/building/entities/TeleportBig'\nimport { TeleportPad } from './model/building/entities/TeleportPad'\nimport { Toolstation } from './model/building/entities/Toolstation'\nimport { Upgrade } from './model/building/entities/Upgrade'\nimport { PowerPathBuildingSite } from './model/building/PowerPathBuildingSite'\nimport { EntityType } from './model/EntityType'\nimport { GameState } from './model/GameState'\nimport { EatJob } from './model/job/raider/EatJob'\nimport { GetToolJob } from './model/job/raider/GetToolJob'\nimport { TrainRaiderJob } from './model/job/raider/TrainRaiderJob'\nimport { UpgradeRaiderJob } from './model/job/raider/UpgradeRaiderJob'\nimport { VehicleCallManJob } from './model/job/VehicleCallManJob'\nimport { BullDozer } from './model/vehicle/entities/BullDozer'\nimport { Hoverboard } from './model/vehicle/entities/Hoverboard'\nimport { LargeCat } from './model/vehicle/entities/LargeCat'\nimport { LargeDigger } from './model/vehicle/entities/LargeDigger'\nimport { LargeMlp } from './model/vehicle/entities/LargeMlp'\nimport { SmallCat } from './model/vehicle/entities/SmallCat'\nimport { SmallDigger } from './model/vehicle/entities/SmallDigger'\nimport { SmallHeli } from './model/vehicle/entities/SmallHeli'\nimport { SmallMlp } from './model/vehicle/entities/SmallMlp'\nimport { SmallTruck } from './model/vehicle/entities/SmallTruck'\nimport { WalkerDigger } from './model/vehicle/entities/WalkerDigger'\nimport { VehicleActivity } from './model/vehicle/VehicleActivity'\nimport { VehicleEntity } from './model/vehicle/VehicleEntity'\nimport { SceneManager } from './SceneManager'\nimport { Supervisor } from './Supervisor'\nimport { WorldManager } from './WorldManager'\n\nexport class GuiManager {\n\n    buildingCycleIndex: number = 0\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager, entityMgr: EntityManager, jobSupervisor: Supervisor, gameLayerCanvas: HTMLCanvasElement) {\n        EventBus.registerEventListener(EventKey.COMMAND_PICK_TOOL, (event: SelectedRaiderPickTool) => {\n            entityMgr.selection.raiders.forEach((r) => {\n                if (!r.hasTool(event.tool)) {\n                    r.setJob(new GetToolJob(entityMgr, event.tool, null))\n                }\n            })\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CREATE_POWER_PATH, () => {\n            new PowerPathBuildingSite(entityMgr, entityMgr.selection.surface)\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_MAKE_RUBBLE, () => {\n            entityMgr.selection.surface?.makeRubble(2)\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_PLACE_FENCE, () => {\n            const s = entityMgr.selection.surface\n            if (s) entityMgr.getClosestBuildingByType(s.getCenterWorld(), EntityType.TOOLSTATION)?.spawnFence(s)\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CHANGE_RAIDER_SPAWN_REQUEST, (event: ChangeRaiderSpawnRequest) => {\n            if (event.increase) {\n                GameState.requestedRaiders++\n            } else {\n                GameState.requestedRaiders--\n            }\n            EventBus.publishEvent(new RequestedRaidersChanged(GameState.requestedRaiders))\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CREATE_DRILL_JOB, () => {\n            entityMgr.selection.surface?.createDrillJob()\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CREATE_REINFORCE_JOB, () => {\n            entityMgr.selection.surface?.createReinforceJob()\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CREATE_DYNAMITE_JOB, () => {\n            entityMgr.selection.surface?.createDynamiteJob()\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CANCEL_SURFACE_JOBS, () => {\n            entityMgr.selection.surface?.cancelJobs()\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CREATE_CLEAR_RUBBLE_JOB, () => {\n            entityMgr.selection.surface?.createClearRubbleJob()\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_UPGRADE_BUILDING, () => {\n            entityMgr.selection.building?.upgrade()\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_BUILDING_BEAMUP, () => {\n            entityMgr.selection.building?.beamUp()\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CHANGE_BUILDING_POWER_STATE, (event: ChangeBuildingPowerState) => {\n            entityMgr.selection.building?.setPowerSwitch(event.state)\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_RAIDER_EAT, () => {\n            entityMgr.selection.raiders.forEach((r) => !r.isDriving() && r.setJob(new EatJob()))\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_RAIDER_UPGRADE, () => {\n            entityMgr.selection.raiders.forEach((r) => {\n                const closestToolstation = entityMgr.getClosestBuildingByType(r.getPosition(), EntityType.TOOLSTATION)\n                if (closestToolstation && r.level < r.stats.Levels) {\n                    r.setJob(new UpgradeRaiderJob(closestToolstation))\n                }\n            })\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_RAIDER_BEAMUP, () => {\n            entityMgr.selection.raiders.forEach((r) => r.beamUp())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_TRAIN_RAIDER, (event: TrainRaider) => {\n            entityMgr.selection.raiders.forEach((r) => !r.hasTraining(event.training) && r.setJob(new TrainRaiderJob(entityMgr, event.training, null)))\n            EventBus.publishEvent(new DeselectAll())\n            return true\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_RAIDER_DROP, () => {\n            entityMgr.selection.raiders.forEach((r) => r.dropItem())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_SELECT_BUILD_MODE, (event: SelectBuildMode) => {\n            sceneMgr.setBuildModeSelection(GuiManager.createBuildingFromType(event.entityType, sceneMgr, entityMgr))\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CANCEL_BUILD_MODE, () => {\n            sceneMgr.setBuildModeSelection(null)\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CANCEL_CONSTRUCTION, () => {\n            entityMgr.selection.surface.site?.cancelSite()\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_REQUEST_VEHICLE_SPAWN, (event: RequestVehicleSpawn) => {\n            console.log('Vehicle spawn requested for: ' + EntityType[event.vehicle])\n            // FIXME manage amount of requested vehicles per type in entity manager\n            const pads = entityMgr.getBuildingsByType(EntityType.TELEPORT_PAD).filter((b) => !b.spawning) // TODO check for \"correct\" teleport station\n            if (pads.length > 0) {\n                const teleportPad = pads.random()\n                const vehicle = GuiManager.createVehicleFromType(event.vehicle, sceneMgr, entityMgr)\n                vehicle.addToScene(teleportPad.primaryPathSurface.getCenterWorld2D(), teleportPad.getHeading())\n                vehicle.changeActivity(VehicleActivity.TeleportIn, () => {\n                    vehicle.changeActivity()\n                    vehicle.sceneEntity.createPickSphere(vehicle.stats.PickSphere, vehicle)\n                    entityMgr.vehicles.push(vehicle)\n                })\n            }\n            // TODO check for crystals amount and reduce it\n            // TODO otherwise start a check interval?\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_VEHICLE_GET_MAN, () => {\n            entityMgr.selection.vehicles.forEach((v) => {\n                if (!v.callManJob && !v.driver) EventBus.publishEvent(new JobCreateEvent(new VehicleCallManJob(v)))\n            })\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_VEHICLE_BEAMUP, () => {\n            entityMgr.selection.vehicles.forEach((v) => v.beamUp())\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_VEHICLE_DRIVER_GET_OUT, () => {\n            entityMgr.selection.vehicles.forEach((v) => v.dropDriver())\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CHANGE_PRIORITY_LIST, (event: ChangePriorityList) => {\n            jobSupervisor.updatePriorities(event.priorityList)\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CAMERA_CONTROL, (event: CameraControl) => {\n            if (event.zoom) { // TODO implement custom camera controls, that is better remotely controllable\n                const zoomInEvent = new WheelEvent('wheel', {deltaY: 5 * event.zoom})\n                gameLayerCanvas.dispatchEvent(zoomInEvent)\n                gameLayerCanvas.ownerDocument.dispatchEvent(zoomInEvent)\n            }\n            if (event.cycleBuilding) {\n                this.buildingCycleIndex = (this.buildingCycleIndex + 1) % entityMgr.buildings.length\n                const target = entityMgr.buildings[this.buildingCycleIndex].primarySurface.getCenterWorld()\n                const offsetTargetToCamera = sceneMgr.camera.position.clone().sub(sceneMgr.controls.target)\n                sceneMgr.camera.position.copy(target.clone().add(offsetTargetToCamera))\n                sceneMgr.controls.target.copy(target)\n                sceneMgr.controls.update()\n            }\n            if (event.rotationIndex >= 0) { // TODO implement custom camera controls, that is better remotely controllable\n                console.log('TODO implement rotate camera: ' + (['left', 'up', 'right', 'down'][event.rotationIndex]))\n            }\n        })\n    }\n\n    static createBuildingFromType(entityType: EntityType, sceneMgr: SceneManager, entityMgr: EntityManager): BuildingEntity {\n        switch (entityType) {\n            case EntityType.TOOLSTATION:\n                return new Toolstation(sceneMgr, entityMgr)\n            case EntityType.TELEPORT_PAD:\n                return new TeleportPad(sceneMgr, entityMgr)\n            case EntityType.DOCKS:\n                return new Docks(sceneMgr, entityMgr)\n            case EntityType.POWER_STATION:\n                return new PowerStation(sceneMgr, entityMgr)\n            case EntityType.BARRACKS:\n                return new Barracks(sceneMgr, entityMgr)\n            case EntityType.UPGRADE:\n                return new Upgrade(sceneMgr, entityMgr)\n            case EntityType.GEODOME:\n                return new Geodome(sceneMgr, entityMgr)\n            case EntityType.ORE_REFINERY:\n                return new OreRefinery(sceneMgr, entityMgr)\n            case EntityType.GUNSTATION:\n                return new GunStation(sceneMgr, entityMgr)\n            case EntityType.TELEPORT_BIG:\n                return new TeleportBig(sceneMgr, entityMgr)\n            default:\n                throw 'Unexpected building type: ' + EntityType[entityType]\n        }\n    }\n\n    static createVehicleFromType(entityType: EntityType, sceneMgr: SceneManager, entityMgr: EntityManager): VehicleEntity {\n        switch (entityType) {\n            case EntityType.HOVERBOARD:\n                return new Hoverboard(sceneMgr, entityMgr)\n            case EntityType.SMALL_DIGGER:\n                return new SmallDigger(sceneMgr, entityMgr)\n            case EntityType.SMALL_TRUCK:\n                return new SmallTruck(sceneMgr, entityMgr)\n            case EntityType.SMALL_CAT:\n                return new SmallCat(sceneMgr, entityMgr)\n            case EntityType.SMALL_MLP:\n                return new SmallMlp(sceneMgr, entityMgr)\n            case EntityType.SMALL_HELI:\n                return new SmallHeli(sceneMgr, entityMgr)\n            case EntityType.BULLDOZER:\n                return new BullDozer(sceneMgr, entityMgr)\n            case EntityType.WALKER_DIGGER:\n                return new WalkerDigger(sceneMgr, entityMgr)\n            case EntityType.LARGE_MLP:\n                return new LargeMlp(sceneMgr, entityMgr)\n            case EntityType.LARGE_DIGGER:\n                return new LargeDigger(sceneMgr, entityMgr)\n            case EntityType.LARGE_CAT:\n                return new LargeCat(sceneMgr, entityMgr)\n            default:\n                throw 'Unexpected vehicle type: ' + EntityType[entityType]\n        }\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class MonsterActivity extends AnimEntityActivity {\n\n    static Route = new MonsterActivity('Activity_Route')\n\n}\n","import { MonsterActivity } from './MonsterActivity'\n\nexport class RockMonsterActivity extends MonsterActivity {\n\n    static TurnLeft = new RockMonsterActivity('Activity_TurnLeft')\n    static TurnRight = new RockMonsterActivity('Activity_TurnRight')\n    static Emerge = new RockMonsterActivity('Activity_Emerge')\n    static Enter = new RockMonsterActivity('Activity_Enter')\n    static Gather = new RockMonsterActivity('Activity_Gather')\n    static Carry = new RockMonsterActivity('Activity_Carry')\n    static Throw = new RockMonsterActivity('Activity_Throw')\n    static CarryTurnLeft = new RockMonsterActivity('Activity_CarryTurnLeft')\n    static CarryTurnRight = new RockMonsterActivity('Activity_CarryTurnRight')\n    static CarryStand = new RockMonsterActivity('Activity_CarryStand')\n    static Repair = new RockMonsterActivity('Activity_Repair')\n    static Crumble = new RockMonsterActivity('Activity_Crumble')\n    static Stamp = new RockMonsterActivity('Activity_Stamp')\n    static Rest = new RockMonsterActivity('Activity_Rest')\n    static ThrowMan = new RockMonsterActivity('Activity_ThrowMan')\n    static Eat = new RockMonsterActivity('Activity_Eat')\n    static HitHard = new RockMonsterActivity('Activity_HitHard')\n    static Unpowered = new RockMonsterActivity('Activity_Unpowered')\n    static WakeUp = new RockMonsterActivity('Activity_WakeUp')\n\n}\n","import { clearTimeoutSafe } from '../../../core/Util'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { MonsterActivity } from '../activities/MonsterActivity'\nimport { EntityType } from '../EntityType'\nimport { MovableEntity } from '../MovableEntity'\nimport { PathTarget } from '../PathTarget'\n\nexport abstract class Monster extends MovableEntity {\n\n    moveTimeout: NodeJS.Timeout\n    target: PathTarget[] = []\n\n    protected constructor(sceneMgr: SceneManager, entityMgr: EntityManager, entityType: EntityType, aeFilename: string) {\n        super(sceneMgr, entityMgr, entityType, aeFilename)\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        this.moveTimeout = clearTimeoutSafe(this.moveTimeout)\n    }\n\n    getRouteActivity(): MonsterActivity {\n        return MonsterActivity.Route\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { getRandomInclusive } from '../../../core/Util'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { Monster } from './Monster'\n\nexport class Bat extends Monster {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.BAT, 'Creatures/bat/bat.ae')\n        this.floorOffset = TILESIZE / 2\n    }\n\n    get stats() {\n        return ResourceManager.stats.Bat\n    }\n\n    startRandomMove() {\n        Bat.onMove(this)\n    }\n\n    private static onMove(bat: Bat) {\n        if (bat.target.length < 1 || bat.moveToClosestTarget(bat.target) === MoveState.TARGET_REACHED) {\n            bat.target = [bat.findTarget()]\n        }\n        bat.moveTimeout = setTimeout(() => Bat.onMove(bat), 1000 / NATIVE_FRAMERATE)\n    }\n\n    private findTarget(): PathTarget { // TODO move to nearby drilling noise, explosions or sonic blasters\n        const terrain = this.sceneMgr.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            if (terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType.floor) {\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a target')\n        return null\n    }\n\n    onDeath() {\n        this.removeFromScene()\n        this.entityMgr.bats.remove(this)\n    }\n\n}\n","import { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { Monster } from './Monster'\n\nexport class IceMonster extends Monster {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.ICE_MONSTER, 'Creatures/IceMonster/IceMonster.ae')\n    }\n\n}\n","import { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { Monster } from './Monster'\n\nexport class LavaMonster extends Monster {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.LAVA_MONSTER, 'Creatures/LavaMonster/LavaMonster.ae')\n    }\n\n}\n","import { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { Monster } from './Monster'\n\nexport class RockMonster extends Monster {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.ROCK_MONSTER, 'Creatures/RMonster/RMonster.ae')\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { getRandom, getRandomInclusive } from '../../../core/Util'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { EntityType } from '../EntityType'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { Monster } from './Monster'\n\nexport class SmallSpider extends Monster {\n\n    radiusSq: number = 0\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.SMALL_SPIDER, 'Creatures/SpiderSB/SpiderSB.ae')\n        this.floorOffset = 1 // TODO rotate spider according to surface normal vector\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallSpider\n    }\n\n    startMoving() {\n        SmallSpider.onMove(this)\n    }\n\n    private static onMove(spider: SmallSpider) {\n        if (spider.target.length > 0 && spider.moveToClosestTarget(spider.target) === MoveState.MOVED) {\n            if (!spider.sceneMgr.terrain.getSurfaceFromWorld(spider.getPosition()).surfaceType.floor) {\n                spider.onDeath()\n            } else {\n                spider.moveTimeout = setTimeout(() => SmallSpider.onMove(spider), 1000 / NATIVE_FRAMERATE)\n            }\n        } else {\n            spider.changeActivity()\n            spider.moveTimeout = setTimeout(() => {\n                spider.target = [spider.findTarget()]\n                SmallSpider.onMove(spider)\n            }, 1000 + getRandom(9000))\n        }\n    }\n\n    private findTarget(): PathTarget {\n        const terrain = this.sceneMgr.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            const surfaceType = terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType\n            if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a target')\n        return null\n    }\n\n    onDeath() {\n        this.removeFromScene()\n        this.entityMgr.spiders.remove(this)\n    }\n\n    changeActivity(activity: AnimEntityActivity = this.getDefaultActivity(), onAnimationDone: () => any = null, durationTimeMs: number = null) {\n        super.changeActivity(activity, onAnimationDone, durationTimeMs)\n        this.radiusSq = this.sceneEntity.getRadiusSquare()\n    }\n\n}\n","import { getRandomInclusive } from '../../../core/Util'\nimport { EventBus } from '../../../event/EventBus'\nimport { RaidersChangedEvent } from '../../../event/LocalEvents'\nimport { RaiderDiscoveredEvent } from '../../../event/WorldLocationEvent'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { BaseActivity } from '../activities/BaseActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { EntityType } from '../EntityType'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { Job } from '../job/Job'\nimport { Surface } from '../map/Surface'\nimport { TerrainPath } from '../map/TerrainPath'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { VehicleEntity } from '../vehicle/VehicleEntity'\nimport { RaiderTool } from './RaiderTool'\nimport { RaiderTraining } from './RaiderTraining'\n\nexport class Raider extends FulfillerEntity {\n\n    tools: Map<RaiderTool, boolean> = new Map()\n    trainings: Map<RaiderTraining, boolean> = new Map()\n    slipped: boolean = false\n    radiusSq: number = 0\n    hungerLevel: number = 1\n    vehicle: VehicleEntity = null\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.PILOT, 'mini-figures/pilot/pilot.ae')\n        this.tools.set(RaiderTool.DRILL, true)\n    }\n\n    get stats() {\n        return ResourceManager.stats.Pilot\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.sceneMgr.terrain.findWalkPath(this.getPosition2D(), target)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        this.entityMgr.raidersUndiscovered.remove(this)\n        this.entityMgr.raiders.push(this)\n        EventBus.publishEvent(new RaidersChangedEvent(this.entityMgr))\n        EventBus.publishEvent(new RaiderDiscoveredEvent(this.getPosition()))\n    }\n\n    isSelectable(): boolean {\n        return super.isSelectable() && !this.slipped && !this.vehicle\n    }\n\n    isDriving(): boolean {\n        return !!this.vehicle\n    }\n\n    getSpeed(): number {\n        return super.getSpeed() * this.stats.RouteSpeed[this.level] * (this.isOnPath() ? this.stats.PathCoef : 1)\n    }\n\n    isOnPath(): boolean {\n        return this.sceneMgr.terrain.getSurfaceFromWorld(this.sceneEntity.position).isPath()\n    }\n\n    isOnRubble() {\n        return this.sceneMgr.terrain.getSurfaceFromWorld(this.sceneEntity.position).hasRubble()\n    }\n\n    getRouteActivity(): BaseActivity {\n        if (this.isOnRubble()) {\n            return !!this.carries ? RaiderActivity.CarryRubble : RaiderActivity.routeRubble\n        } else {\n            return !!this.carries ? RaiderActivity.Carry : RaiderActivity.Route\n        }\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        const result = super.moveToClosestTarget(target)\n        if (result === MoveState.MOVED) {\n            this.entityMgr.spiders.some((spider) => { // TODO optimize this with a quad tree or similar\n                if (this.sceneEntity.position.distanceToSquared(spider.sceneEntity.position) < this.radiusSq + spider.radiusSq) {\n                    this.slip()\n                    spider.onDeath()\n                    return true\n                }\n            })\n        }\n        return result\n    }\n\n    slip() {\n        if (getRandomInclusive(0, 100) < 10) this.stopJob()\n        this.dropItem()\n        this.slipped = true\n        this.changeActivity(RaiderActivity.Slip, () => {\n            this.slipped = false\n        })\n    }\n\n    work() {\n        if (this.slipped) return\n        super.work()\n    }\n\n    getDefaultActivity(): BaseActivity {\n        return this.carries ? RaiderActivity.CarryStand : super.getDefaultActivity()\n    }\n\n    beamUp() {\n        super.beamUp()\n        EventBus.publishEvent(new RaidersChangedEvent(this.entityMgr))\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        this.entityMgr.raiders.remove(this)\n    }\n\n    hasTool(tool: RaiderTool) {\n        return !tool || this.tools.has(tool)\n    }\n\n    hasTraining(training: RaiderTraining) {\n        return !training || this.trainings.has(training)\n    }\n\n    addTool(tool: RaiderTool) {\n        this.tools.set(tool, true)\n    }\n\n    addTraining(training: RaiderTraining) {\n        this.trainings.set(training, true)\n    }\n\n    isPrepared(job: Job): boolean {\n        return this.hasTool(job.getRequiredTool()) && this.hasTraining(job.getRequiredTraining())\n    }\n\n    changeActivity(activity: AnimEntityActivity = this.getDefaultActivity(), onAnimationDone: () => any = null, durationTimeMs: number = null) {\n        super.changeActivity(activity, onAnimationDone, durationTimeMs)\n        this.radiusSq = this.sceneEntity.getRadiusSquare()\n    }\n\n    canDrill(surface: Surface): boolean {\n        return super.canDrill(surface) && this.hasTool(RaiderTool.DRILL)\n    }\n\n}\n","import { MathUtils, Vector2 } from 'three'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { EventBus } from '../event/EventBus'\nimport { RaidersChangedEvent } from '../event/LocalEvents'\nimport { TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { EntityManager } from './EntityManager'\nimport { RockMonsterActivity } from './model/activities/RockMonsterActivity'\nimport { Barracks } from './model/building/entities/Barracks'\nimport { Docks } from './model/building/entities/Docks'\nimport { Geodome } from './model/building/entities/Geodome'\nimport { GunStation } from './model/building/entities/GunStation'\nimport { OreRefinery } from './model/building/entities/OreRefinery'\nimport { PowerStation } from './model/building/entities/PowerStation'\nimport { TeleportBig } from './model/building/entities/TeleportBig'\nimport { TeleportPad } from './model/building/entities/TeleportPad'\nimport { Toolstation } from './model/building/entities/Toolstation'\nimport { Upgrade } from './model/building/entities/Upgrade'\nimport { EntityType, getEntityTypeByName } from './model/EntityType'\nimport { Crystal } from './model/material/Crystal'\nimport { Bat } from './model/monster/Bat'\nimport { IceMonster } from './model/monster/IceMonster'\nimport { LavaMonster } from './model/monster/LavaMonster'\nimport { RockMonster } from './model/monster/RockMonster'\nimport { SmallSpider } from './model/monster/SmallSpider'\nimport { Raider } from './model/raider/Raider'\nimport { SmallDigger } from './model/vehicle/entities/SmallDigger'\nimport { SceneManager } from './SceneManager'\nimport { WorldManager } from './WorldManager'\nimport degToRad = MathUtils.degToRad\n\nexport class ObjectListLoader {\n\n    static loadObjectList(levelConf: LevelEntryCfg, worldMgr: WorldManager, sceneMgr: SceneManager, entityMgr: EntityManager) {\n        const objectListConf = ResourceManager.getResource(levelConf.oListFile)\n        Object.values(objectListConf).forEach((olObject: any) => {\n            const entityType = getEntityTypeByName(olObject.type ? olObject.type.toLowerCase() : olObject.type)\n            // all object positions are off by one tile, because they start at 1 not 0\n            const worldPos = new Vector2(olObject.xPos, olObject.yPos).addScalar(-1).multiplyScalar(TILESIZE) // TODO assert that world pos is over terrain otherwise drop item\n            const buildingType: string = ResourceManager.cfg('BuildingTypes', olObject.type)\n            const radHeading = degToRad(olObject.heading)\n            if (entityType === EntityType.TV_CAMERA) {\n                const cameraOffset = new Vector2(6, 0).rotateAround(new Vector2(0, 0), radHeading + Math.PI / 2)\n                const cameraPos = sceneMgr.getFloorPosition(cameraOffset.multiplyScalar(TILESIZE).add(worldPos))\n                cameraPos.y += 4 * TILESIZE\n                sceneMgr.camera.position.copy(cameraPos)\n                sceneMgr.controls.target.copy(sceneMgr.getFloorPosition(worldPos))\n                sceneMgr.controls.update()\n                sceneMgr.setTorchPosition(new Vector2(worldPos.x, worldPos.y - TILESIZE / 2))\n            } else if (entityType === EntityType.PILOT) {\n                const raider = new Raider(sceneMgr, entityMgr)\n                raider.changeActivity()\n                raider.sceneEntity.createPickSphere(raider.stats.PickSphere, raider)\n                raider.addToScene(worldPos, radHeading - Math.PI / 2)\n                if (raider.sceneEntity.visible) {\n                    entityMgr.raiders.push(raider)\n                    EventBus.publishEvent(new RaidersChangedEvent(entityMgr))\n                } else {\n                    entityMgr.raidersUndiscovered.push(raider)\n                }\n            } else if (buildingType) {\n                console.log(olObject.type + ' heading: ' + Math.round(olObject.heading % 360))\n                const entity = this.createBuildingByName(buildingType, sceneMgr, entityMgr)\n                entity.placeDown(worldPos, -radHeading - Math.PI, levelConf.disableStartTeleport)\n            } else if (entityType === EntityType.CRYSTAL) {\n                entityMgr.placeMaterial(new Crystal(sceneMgr, entityMgr), worldPos)\n            } else if (entityType === EntityType.SMALL_SPIDER) {\n                const spider = new SmallSpider(sceneMgr, entityMgr)\n                spider.changeActivity()\n                spider.addToScene(worldPos, radHeading)\n                entityMgr.spiders.push(spider)\n                spider.startMoving()\n            } else if (entityType === EntityType.BAT) {\n                const bat = new Bat(sceneMgr, entityMgr)\n                bat.changeActivity()\n                bat.addToScene(worldPos, radHeading)\n                entityMgr.bats.push(bat)\n                bat.startRandomMove()\n            } else if (entityType === EntityType.SMALL_DIGGER) {\n                const smallDigger = new SmallDigger(sceneMgr, entityMgr)\n                smallDigger.changeActivity()\n                smallDigger.sceneEntity.createPickSphere(smallDigger.stats.PickSphere, smallDigger)\n                smallDigger.addToScene(worldPos, radHeading + Math.PI)\n                if (smallDigger.sceneEntity.visible) {\n                    entityMgr.vehicles.push(smallDigger)\n                } else {\n                    entityMgr.vehiclesUndiscovered.push(smallDigger)\n                }\n            } else if (entityType === EntityType.ICE_MONSTER) {\n                const rockMonster = new IceMonster(sceneMgr, entityMgr)\n                rockMonster.changeActivity(RockMonsterActivity.Unpowered)\n                rockMonster.addToScene(worldPos, radHeading - Math.PI / 2)\n                entityMgr.rockMonsters.push(rockMonster)\n            } else if (entityType === EntityType.LAVA_MONSTER) {\n                const rockMonster = new LavaMonster(sceneMgr, entityMgr)\n                rockMonster.changeActivity(RockMonsterActivity.Unpowered)\n                rockMonster.addToScene(worldPos, radHeading - Math.PI / 2)\n                entityMgr.rockMonsters.push(rockMonster)\n            } else if (entityType === EntityType.ROCK_MONSTER) {\n                const rockMonster = new RockMonster(sceneMgr, entityMgr)\n                rockMonster.changeActivity(RockMonsterActivity.Unpowered)\n                rockMonster.addToScene(worldPos, radHeading - Math.PI / 2)\n                entityMgr.rockMonsters.push(rockMonster)\n            } else {\n                // TODO implement remaining object types\n                console.warn('Object type ' + olObject.type + ' not yet implemented')\n            }\n        })\n    }\n\n    private static createBuildingByName(buildingType: string, sceneMgr: SceneManager, entityMgr: EntityManager) {\n        const typename = buildingType.slice(buildingType.lastIndexOf('/') + 1).toLowerCase()\n        if (typename === 'toolstation') {\n            return new Toolstation(sceneMgr, entityMgr)\n        } else if (typename === 'teleports') {\n            return new TeleportPad(sceneMgr, entityMgr)\n        } else if (typename === 'docks') {\n            return new Docks(sceneMgr, entityMgr)\n        } else if (typename === 'powerstation') {\n            return new PowerStation(sceneMgr, entityMgr)\n        } else if (typename === 'barracks') {\n            return new Barracks(sceneMgr, entityMgr)\n        } else if (typename === 'upgrade') {\n            return new Upgrade(sceneMgr, entityMgr)\n        } else if (typename === 'geo-dome') {\n            return new Geodome(sceneMgr, entityMgr)\n        } else if (typename === 'orerefinery') {\n            return new OreRefinery(sceneMgr, entityMgr)\n        } else if (typename === 'gunstation') {\n            return new GunStation(sceneMgr, entityMgr)\n        } else if (typename === 'teleportbig') {\n            return new TeleportBig(sceneMgr, entityMgr)\n        } else {\n            throw 'Unknown building type: ' + typename\n        }\n    }\n\n}\n","// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n}\n\nexport enum POINTER_EVENT {\n    MOVE,\n    DOWN,\n    UP,\n}\n\nexport enum KEY_EVENT {\n    DOWN,\n    UP,\n}\n","import { clearIntervalSafe } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { JobCreateEvent, JobDeleteEvent } from '../event/WorldEvents'\nimport { CHECK_CLEAR_RUBBLE_INTERVAL, JOB_SCHEDULE_INTERVAL } from '../params'\nimport { EntityManager } from './EntityManager'\nimport { BuildingEntity } from './model/building/BuildingEntity'\nimport { BuildingPathTarget } from './model/building/BuildingPathTarget'\nimport { EntityType } from './model/EntityType'\nimport { JobState } from './model/job/JobState'\nimport { PriorityEntry } from './model/job/PriorityEntry'\nimport { PriorityIdentifier } from './model/job/PriorityIdentifier'\nimport { GetToolJob } from './model/job/raider/GetToolJob'\nimport { MoveJob } from './model/job/raider/MoveJob'\nimport { TrainRaiderJob } from './model/job/raider/TrainRaiderJob'\nimport { ShareableJob } from './model/job/ShareableJob'\nimport { Raider } from './model/raider/Raider'\nimport { SceneManager } from './SceneManager'\n\nexport class Supervisor {\n\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    jobs: ShareableJob[] = []\n    assignInterval = null\n    checkRubbleInterval = null\n    priorityIndexList: PriorityIdentifier[] = []\n    priorityList: PriorityEntry[] = []\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        this.sceneMgr = sceneMgr\n        this.entityMgr = entityMgr\n        EventBus.registerEventListener(EventKey.JOB_CREATE, (event: JobCreateEvent) => {\n            this.jobs.push(event.job)\n        })\n        EventBus.registerEventListener(EventKey.JOB_DELETE, (event: JobDeleteEvent) => {\n            event.job.cancel()\n        })\n    }\n\n    start() {\n        stop()\n        this.assignInterval = setInterval(this.assignJobs.bind(this), JOB_SCHEDULE_INTERVAL)\n        this.checkRubbleInterval = setInterval(this.checkUnclearedRubble.bind(this), CHECK_CLEAR_RUBBLE_INTERVAL)\n    }\n\n    stop() {\n        this.assignInterval = clearIntervalSafe(this.assignInterval)\n        this.checkRubbleInterval = clearIntervalSafe(this.checkRubbleInterval)\n    }\n\n    assignJobs() {\n        const availableJobs: ShareableJob[] = []\n        this.jobs = this.jobs.filter((j) => {\n            const result = j.jobState === JobState.INCOMPLETE\n            if (result && j.fulfiller.length < 1 && this.isEnabled(j.getPriorityIdentifier())) { // TODO don't assign jobs on hidden surfaces\n                availableJobs.push(j)\n            }\n            return result\n        })\n        availableJobs.sort((left, right) => {\n            return Math.sign(this.getPriority(left) - this.getPriority(right))\n        })\n        const unemployedRaider = this.entityMgr.raiders.filter((r) => !r.job && !r.inBeam)\n        availableJobs.forEach((job) => { // XXX better use estimated time to complete job as metric\n            let closestRaider: Raider = null\n            let closestRaiderIndex: number = null\n            let minDistance: number = null\n            let closestToolRaider: Raider = null\n            let closestToolRaiderIndex: number = null\n            let minToolDistance: number = null\n            let closestToolstation: BuildingEntity = null\n            const requiredTool = job.getRequiredTool()\n            let closestTrainingRaider: Raider = null\n            let closestTrainingRaiderIndex: number = null\n            let minTrainingDistance: number = null\n            let closestTrainingArea: BuildingEntity = null\n            const requiredTraining = job.getRequiredTraining()\n            unemployedRaider.forEach((raider, index) => {\n                const hasRequiredTool = raider.hasTool(requiredTool)\n                const hasTraining = raider.hasTraining(requiredTraining)\n                if (hasRequiredTool && hasTraining) {\n                    const pathToJob = job.getWorkplaces().map((b) => raider.findPathToTarget(b))\n                        .filter((t) => !!t)\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToJob) {\n                        const dist = pathToJob.lengthSq // TODO use precalculated path to job\n                        if (minDistance === null || dist < minDistance) {\n                            closestRaider = raider\n                            closestRaiderIndex = index\n                            minDistance = dist\n                        }\n                    }\n                } else if (!hasRequiredTool) {\n                    const pathToToolstation = this.entityMgr.getBuildingsByType(EntityType.TOOLSTATION)\n                        .map((b) => raider.findPathToTarget(b.getPathTarget()))\n                        .filter((p) => !!p)\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToToolstation) {\n                        const dist = pathToToolstation.lengthSq\n                        if (minToolDistance === null || dist < minToolDistance) {\n                            closestToolRaider = raider\n                            closestToolRaiderIndex = index\n                            minToolDistance = dist\n                            closestToolstation = (pathToToolstation.target as BuildingPathTarget).building\n                        }\n                    }\n                } else {\n                    const pathToTrainingSite = this.entityMgr.getTrainingSites(requiredTraining)\n                        .map((b) => raider.findPathToTarget(b.getPathTarget()))\n                        .filter((p) => !!p)\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToTrainingSite) {\n                        const dist = pathToTrainingSite.lengthSq\n                        if (minTrainingDistance === null || dist < minTrainingDistance) {\n                            closestTrainingRaider = raider\n                            closestTrainingRaiderIndex = index\n                            minTrainingDistance = dist\n                            closestTrainingArea = (pathToTrainingSite.target as BuildingPathTarget).building\n                        }\n                    }\n                }\n            })\n            if (closestRaider) {\n                closestRaider.setJob(job)\n                unemployedRaider.splice(closestRaiderIndex, 1)\n            } else if (closestToolRaider) {\n                closestToolRaider.setJob(new GetToolJob(this.entityMgr, requiredTool, closestToolstation), job)\n                unemployedRaider.splice(closestToolRaiderIndex, 1)\n            } else if (closestTrainingRaider) {\n                closestTrainingRaider.setJob(new TrainRaiderJob(this.entityMgr, requiredTraining, closestTrainingArea), job)\n                unemployedRaider.splice(closestTrainingRaiderIndex, 1)\n            }\n        })\n        unemployedRaider.forEach((raider) => {\n            const sites = raider.surfaces.map((s) => s.site).filter(s => !!s)\n            if (sites.length > 0) raider.setJob(new MoveJob(sites[0].getWalkOutSurface().getRandomPosition()))\n        })\n    }\n\n    checkUnclearedRubble() {\n        if (!this.isEnabled(PriorityIdentifier.aiPriorityClearing)) return\n        this.entityMgr.raiders.forEach((raider) => {\n            if (raider.job) return\n            const startSurface = raider.surfaces[0]\n            for (let rad = 0; rad < 10; rad++) {\n                for (let x = startSurface.x - rad; x <= startSurface.x + rad; x++) {\n                    for (let y = startSurface.y - rad; y <= startSurface.y + rad; y++) {\n                        const surface = this.sceneMgr.terrain.getSurfaceOrNull(x, y)\n                        if (!(surface?.hasRubble()) || !surface?.discovered) continue\n                        const clearRubbleJob = surface.createClearRubbleJob()\n                        if (!clearRubbleJob || clearRubbleJob.fulfiller.length > 0) continue\n                        const requiredTool = clearRubbleJob.getRequiredTool()\n                        if (raider.hasTool(requiredTool)) {\n                            raider.setJob(clearRubbleJob)\n                            return\n                        } else {\n                            const pathToToolstation = this.entityMgr.getBuildingsByType(EntityType.TOOLSTATION)\n                                .map((b) => raider.findPathToTarget(b.getPathTarget()))\n                                .filter((p) => !!p)\n                                .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                            if (pathToToolstation) {\n                                raider.setJob(new GetToolJob(this.entityMgr, requiredTool, (pathToToolstation.target as BuildingPathTarget).building), clearRubbleJob)\n                                return\n                            }\n                        }\n                    }\n                }\n            }\n        })\n    }\n\n    getPriority(job: ShareableJob) {\n        return this.priorityIndexList.indexOf(job.getPriorityIdentifier())\n    }\n\n    isEnabled(priorityIdentifier: PriorityIdentifier): boolean {\n        return !!this.priorityList.find((p) => p.key === priorityIdentifier)?.enabled\n    }\n\n    updatePriorities(priorityList: PriorityEntry[]) {\n        this.priorityList = [...priorityList]\n        this.priorityIndexList = this.priorityList.map((p) => p.key)\n    }\n\n}\n","/** Function documentation mostly copied from the following URLs\n *\n * https://kb.rockraidersunited.com/User:Jessietail/NERPs_reference\n * https://web.archive.org/web/20131206122442/http://rru-stuff.org/nerpfuncs.html\n * https://kb.rockraidersunited.com/NERPs_documentation#Labels\n *\n */\nimport { EntityManager } from '../game/EntityManager'\nimport { EntityType } from '../game/model/EntityType'\nimport { GameResultState } from '../game/model/GameResult'\nimport { GameState } from '../game/model/GameState'\nimport { clearIntervalSafe, getRandom } from './Util'\n\n// noinspection JSUnusedGlobalSymbols,JSUnusedLocalSymbols\nexport class NerpRunner {\n\n    entityMgr: EntityManager\n    debug = false\n    onLevelEnd: (state: GameResultState) => any = null\n    nerpInterval: NodeJS.Timeout = null\n\n    registers = new Array(8).fill(0)\n    timers = new Array(4).fill(0)\n    scriptLines = [] // contains humand readable script strings\n    statements = [] // contains parsed statements for execution\n    macrosByName = {}\n    labelsByName = {}\n    halted = false\n    programCounter = 0\n    messages = []\n    // more state variables and switches\n    messagePermit = null\n\n    constructor(entityMgr: EntityManager, debug = false) {\n        this.entityMgr = entityMgr\n        this.debug = debug\n    }\n\n    startExecution() {\n        const that = this\n        this.nerpInterval = setInterval(() => {\n            that.execute()\n        }, 2000)\n    }\n\n    pauseExecution() {\n        this.nerpInterval = clearIntervalSafe(this.nerpInterval)\n    }\n\n    /**\n     * Internally used to validate and parse a register number.\n     * @param register\n     * @return {number}\n     */\n    checkRegister(register) {\n        const num = parseInt(register)\n        if (isNaN(num) || num < 0 || num > this.registers.length) throw new Error('Invalid register (' + register + ') provided')\n        return num\n    }\n\n    /**\n     * Internally used to validate and parse a value before setting or adding it with a register.\n     * @param value\n     * @return {number}\n     */\n    checkRegisterValue(value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Invalid register value (' + value + ') provided')\n        return num\n    }\n\n    /**\n     * Gets the value currently stored in the given register, internally used to handle all registers with one method.\n     * @param register the register to read\n     * @return {number} returns the value currently stored in the register\n     */\n    getR(register) {\n        register = this.checkRegister(register)\n        return this.registers[register]\n    }\n\n    /**\n     * Sets the given value for the given register, internally used to handle all registers with one method.\n     * @param register the register to set\n     * @param value the value to set for the given register\n     */\n    setR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] = value\n    }\n\n    /**\n     * Adds the given value to the given register, internally used to handle all registers with one method.\n     * @param register the register to add to\n     * @param value the value to add to the given register\n     */\n    addR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] += value\n    }\n\n    /**\n     * Set the respective timer to the given numerical value. Units are in milliseconds.\n     * @param timer\n     * @param value\n     */\n    setTimer(timer, value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Can\\'t set timer to NaN value: ' + value)\n        this.timers[timer] = new Date().getTime() + num\n    }\n\n    /**\n     * Gets the value of the respective timer. Units are in milliseconds.\n     * @param timer\n     * @return {number}\n     */\n    getTimer(timer) {\n        return new Date().getTime() - this.timers[timer]\n    }\n\n    /**\n     * End the level successfully and show the score screen.\n     */\n    setLevelCompleted() {\n        console.log('Nerp runner marks level as complete')\n        this.halted = true\n        this.onLevelEnd(GameResultState.COMPLETE)\n    }\n\n    /**\n     * End the level as failure and show the score screen.\n     */\n    setLevelFail() {\n        console.log('NerpRunner marks level as failed; at line: ' + this.scriptLines[this.programCounter])\n        this.halted = true\n        this.onLevelEnd(GameResultState.FAILED)\n    }\n\n    /**\n     * Sets tutorial flags\n     * @param value a bitmask to set flags with\n     */\n    setTutorialFlags(value) {\n        // seems like value must be interpreted bitwise and sets a certain flag on each bit\n        // seen so far:\n        // 0 = 0x00 allow any click anywhere anytime\n        // 3 = 0x11 disallow invalid clicks\n        // 4095 = 0x111111111111 set all flags? (seen in Tutorial01 level)\n        if (value !== 0) { // holds for all known levels\n            console.warn('NERP: setTutorialFlags not yet implemented', value)\n        }\n    }\n\n    /**\n     * This is used to make messages come up/not come up.\n     * @param messagesAllowed\n     */\n    setMessagePermit(messagesAllowed) {\n        this.messagePermit = !messagesAllowed\n    }\n\n    setBuildingsUpgradeLevel(typeName: EntityType, level: number) {\n        this.entityMgr.buildings.forEach(b => {\n            if (b.entityType === typeName) b.setLevel(level)\n        })\n    }\n\n    setToolStoreLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.TOOLSTATION, level)\n    }\n\n    setTeleportPadLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.TELEPORT_PAD, level)\n    }\n\n    setPowerStationLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.POWER_STATION, level)\n    }\n\n    setBarracksLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.BARRACKS, level)\n    }\n\n    /**\n     * Gets the number of tool stores currently built. NOT the total ever built.\n     * @return {number}\n     */\n    getToolStoresBuilt() {\n        return this.entityMgr.buildings.count((b) => b.entityType === EntityType.TOOLSTATION)\n    }\n\n    /**\n     * Gets the number of minifigures on the level. XXX it is NOT tested if this ignores minifigures in hidden caverns\n     * @return {number}\n     */\n    getMinifiguresOnLevel() {\n        return this.entityMgr.raiders.length\n    }\n\n    /**\n     * Gets the number of crystals currently stored.\n     * @return {number}\n     */\n    getCrystalsCurrentlyStored() {\n        return GameState.numCrystal\n    }\n\n    getObjectiveSwitch() {\n        // TODO implement this\n        return false\n    }\n\n    setMessageTimerValues(arg1, arg2, arg3) {\n        // TODO implement this\n    }\n\n    getMessageTimer() {\n        return 0 // TODO return remaining amount of time needed to fully play WAV message\n    }\n\n    cameraUnlock() {\n        // TODO implement this\n    }\n\n    setMessage(messageNumber, arrowDisabled) {\n        if (!this.messagePermit) return\n        if (messageNumber === 0) return // TODO messages start at 1\n        const msg = this.messages[messageNumber]\n        console.log(msg.txt) // TODO show message to user\n        // msg.snd resides in sounds/streamed/ which is currently not loaded :(\n    }\n\n    setCameraGotoTutorial(arg1) {\n        // TODO implement this\n    }\n\n    getTutorialBlockIsGround(blockNum) {\n        return 0 // TODO return true if given block is ground\n    }\n\n    getTutorialBlockIsPath(blockNum) {\n        return 0 // TODO return true if given block is a path\n    }\n\n    getUnitAtBlock(blockNum) {\n        return 0 // TODO return number of units on given block\n    }\n\n    getOxygenLevel() {\n        return GameState.airLevel * 100\n    }\n\n    getObjectiveShowing() {\n        // TODO implement this\n        return false\n    }\n\n    addPoweredCrystals() {\n        // TODO implement this\n    }\n\n    disallowAll() {\n        // TODO implement this\n    }\n\n    getPoweredPowerStationsBuilt() {\n        return this.entityMgr.buildings.count((b) => b.isUsable() && b.entityType === EntityType.POWER_STATION)\n    }\n\n    getPoweredBarracksBuilt() {\n        return this.entityMgr.buildings.count((b) => b.isUsable() && b.entityType === EntityType.BARRACKS)\n    }\n\n    getRecordObjectAtTutorial() {\n        // TODO implement this\n    }\n\n    getHiddenObjectsFound() {\n        // TODO implement this\n        return 0\n    }\n\n    getLevel1PowerStationsBuilt() {\n        return this.entityMgr.buildings.count((b) => b.entityType === EntityType.POWER_STATION && b.level >= 1)\n    }\n\n    getRandom100(): number {\n        return getRandom(100)\n    }\n\n    getSlugsOnLevel(): number {\n        return 0 // TODO implement slugs\n    }\n\n    generateSlug() {\n        console.warn('Slugs not yet implemented') // TODO implement slugs\n    }\n\n    callMethod(methodName, methodArgs) {\n        if (methodName === 'Stop') {\n            throw 'Stop'\n        } else if (methodName === 'TRUE') {\n            return true\n        } else if (methodName === 'FALSE') {\n            return false\n        }\n        const setRegisterMatch = methodName.match(/^SetR([0-7])$/)\n        if (setRegisterMatch) {\n            return this.setR(setRegisterMatch[1], methodArgs[0])\n        }\n        const addRegisterMatch = methodName.match(/^AddR([0-7])$/)\n        if (addRegisterMatch) {\n            return this.addR(addRegisterMatch[1], methodArgs[0])\n        }\n        const getRegisterMatch = methodName.match(/^GetR([0-7])$/)\n        if (getRegisterMatch) {\n            return this.getR(getRegisterMatch[1])\n        }\n        const setTimerMatch = methodName.match(/^SetTimer([0-3])$/)\n        if (setTimerMatch) {\n            return this.setTimer(setTimerMatch[1], methodArgs[0])\n        }\n        const getTimerMatch = methodName.match(/^GetTimer([0-3])$/)\n        if (getTimerMatch) {\n            return this.getTimer(getTimerMatch[1])\n        }\n        const lMethodName = methodName.toLowerCase()\n        const memberName = Object.getOwnPropertyNames(NerpRunner.prototype).find((name) => name.toLowerCase() === lMethodName)\n        if (memberName) return this[memberName].apply(this, methodArgs)\n        throw new Error('Undefined method: ' + methodName)\n    }\n\n    conditional(left, right) {\n        const conditionResult = this.executeStatement(left)\n        if (this.debug) {\n            console.log('Condition evaluated to ' + conditionResult)\n        }\n        if (conditionResult) {\n            this.executeStatement(right)\n        }\n    }\n\n    executeStatement(expression) {\n        if (expression.invoke) {\n            const argValues = expression.invoke !== 'conditional' ? expression.args.map(e => this.executeStatement(e)) : expression.args\n            const result = this.callMethod(expression.invoke, argValues)\n            if (result !== undefined && this.debug) {\n                console.log('Method returned: ' + result)\n            }\n            return result\n        } else if (expression.comparator) {\n            const left = this.executeStatement(expression.left)\n            const right = this.executeStatement(expression.right)\n            if (expression.comparator === '=') {\n                return left === right\n            } else if (expression.comparator === '!=') {\n                return left !== right\n            } else if (expression.comparator === '<') {\n                return left < right\n            } else if (expression.comparator === '>') {\n                return left > right\n            } else {\n                console.log(expression)\n                throw new Error('Unknown comparator: ' + expression.comparator)\n            }\n        } else if (!isNaN(expression)) { // just a number\n            return expression\n        } else if (expression.jump) {\n            this.programCounter = this.labelsByName[expression.jump]\n            if (this.programCounter === undefined) {\n                throw new Error('Label \\'' + expression.jump + '\\' is unknown!')\n            }\n            if (this.debug) {\n                console.log('Jumping to label \\'' + expression.jump + '\\' in line ' + this.programCounter)\n            }\n        } else {\n            console.log(expression)\n            throw new Error('Unknown expression in line ' + this.programCounter + ': ' + expression)\n        }\n    }\n\n    execute(debug = false) {\n        this.debug = debug\n        if (this.halted) return\n        try {\n            if (this.debug) {\n                console.log('Executing following script\\n' + this.scriptLines.join('\\n'))\n                console.log('Registers: ' + this.registers)\n            }\n            for (this.programCounter = 0; this.programCounter < this.statements.length; this.programCounter++) {\n                const statement = this.statements[this.programCounter]\n                if (this.debug) {\n                    console.log(this.programCounter + ': ' + this.scriptLines[this.programCounter])\n                    console.log(statement)\n                }\n                if (!statement.label) { // do nothing for label markers\n                    this.executeStatement(statement)\n                }\n            }\n        } catch (e) {\n            if (e === 'Stop') {\n                return\n            }\n            console.error(e)\n            console.error('FATAL ERROR! Script execution failed! You can NOT win anymore!')\n            this.halted = true\n        }\n    }\n\n}\n","import { EntityManager } from '../game/EntityManager'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { NerpRunner } from './NerpRunner'\n\nexport class NerpParser {\n\n    static parse(entityMgr: EntityManager, nerpScript: string): NerpRunner {\n        const nerpRunner = new NerpRunner(entityMgr)\n        const lines = nerpScript.split('\\n').map(l => l\n            .split('//')[0].trim() // before comment starts\n            .split(';')[0].trim() // before preprocessor comment starts\n            .replace(/_/g, '') // some preprocessor macros use this prefix\n            .replace(/\\bTRUE \\? /, '') // some weird requirement of the original language\n            .replace(/[{}]/g, ''), // duplicate limit for macros using labels too\n        )\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c]\n            if (line.length < 1) {\n                continue // ignore empty lines, but important for macro closure\n            }\n            if (line.startsWith('#include ')) { // include other nerp scripts/headers\n                const includeName = line.replace(/^#include /, '').trim().slice(1, -1)\n                if (includeName === 'nerpdef.h') {\n                    // trivial default header file, is applied by search and replace above\n                    // see https://github.com/jgrip/legorr/blob/master/nerpdef.h\n                    continue\n                }\n                const includedRunner = NerpParser.parse(entityMgr, ResourceManager.getResource('Levels/' + includeName))\n                if (!includedRunner || !includedRunner.scriptLines || includedRunner.scriptLines.length < 1) {\n                    throw 'Can\\'t include unknown nerp script: ' + line\n                }\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(includedRunner.scriptLines)\n                // copy macros from included file to current file\n                nerpRunner.macrosByName = Object.assign({}, nerpRunner.macrosByName, includedRunner.macrosByName)\n            } else if (line.startsWith('#define ')) { // parse C++ preprocessor macro\n                const firstLine = line.replace(/^#define /, '').split(' ')\n                const macroLines = [firstLine.splice(1).join(' ').replace(/\\\\$/, '').trim()]\n                let mLine = line\n                let append = false\n                while (mLine.endsWith('\\\\') && c < lines.length - 1) {\n                    c++\n                    mLine = lines[c].trim()\n                    const macroLine = mLine.replace(/\\\\$/, '').trim()\n                    if (macroLine.length > 0) {\n                        if (append) {\n                            append = false\n                            macroLines[macroLines.length - 1] += macroLine\n                        } else {\n                            macroLines.push(macroLine)\n                        }\n                    }\n                    if (mLine.match(/:\\\\$/)) {\n                        append = true\n                    }\n                }\n                const macroCall = firstLine[0].split('(')\n                nerpRunner.macrosByName[macroCall[0]] = {\n                    args: macroCall[1].replace(/\\)$/, '').split(','),\n                    lines: macroLines,\n                }\n            } else {\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(this.replaceMacros(nerpRunner.macrosByName, line))\n            }\n        }\n        // somewhat precompile the script and create syntax tree\n        // must be done in separate block to make sure the script is complete and we can refer/rely on line numbers for label jumps\n        for (let c = 0; c < nerpRunner.scriptLines.length; c++) {\n            const line = nerpRunner.scriptLines[c]\n            nerpRunner.statements[c] = line.replace(/\\(\\)/g, '') // now the macros are applied and obsolete empty \"()\" can be removed\n                .split(' ? ')\n            const labelMatch = line.match(/(\\S+):/)\n            if (nerpRunner.statements[c].length === 2) { // line contains condition (primary operator)\n                nerpRunner.statements[c] = {\n                    invoke: 'conditional',\n                    args: [this.preProcess(nerpRunner.statements[c][0]), this.preProcess(nerpRunner.statements[c][1])],\n                }\n            } else if (labelMatch) { // keep label line number for later usage\n                const labelName = labelMatch[1].toLowerCase()\n                nerpRunner.labelsByName[labelName] = c\n                nerpRunner.statements[c] = {label: labelName}\n            } else if (nerpRunner.statements[c].length === 1) { // just a call\n                nerpRunner.statements[c] = this.preProcess(nerpRunner.statements[c][0])\n            } else { // lines contains more than 1 condition statement\n                throw 'Can\\'t deal with line: ' + line\n            }\n        }\n        return nerpRunner\n    }\n\n    static replaceMacros(macrosByName, line): string[] {\n        // check if this line contains a macro\n        const split = line.split('(') // not a very stable check though...\n        const macro = macrosByName[split[0]]\n        if (macro) {\n            const argValues = split.splice(1).join('(').slice(0, -1).split(',')\n            if (argValues.length !== macro.args.length) {\n                throw 'Invalid number of args provided for macro in line ' + line\n            }\n            const macroLines = []\n            macro.lines.forEach((line) => {\n                for (let c = 0; c < argValues.length; c++) {\n                    line = line.replace(new RegExp('\\\\b' + macro.args[c] + '\\\\b'), argValues[c])\n                }\n                macroLines.push(...(this.replaceMacros(macrosByName, line)))\n            })\n            return macroLines\n        } else {\n            return [line]\n        }\n    }\n\n    static preProcess(expression) {\n        expression = expression.trim().replace(/^_/, '') // remove whitespace and leading underscore\n        const number = parseInt(expression)\n        if (!isNaN(number)) {\n            return number\n        }\n        const opSplit = expression.split(/ (=) | (!=) | (>) | (<) /).filter(e => e !== undefined)\n        const brackets = expression.match(/^(.+)\\((.+)\\)$/)\n        const spaceSplit = expression.split(' ')\n        const labelMatch = expression.match(/([^:]+):$/)\n        const jumpMatch = expression.match(/^:([^:]+)$/)\n        if (opSplit.length === 3) { // expression contains secondary operator\n            return {left: this.preProcess(opSplit[0]), comparator: opSplit[1], right: this.preProcess(opSplit[2])}\n        } else if (brackets) {\n            const args = brackets[2].split(',').map(a => this.preProcess(a))\n            return {invoke: brackets[1], args: args}\n        } else if (spaceSplit.length > 1) { // space split must be the very last since most expressions contain space\n            const args = spaceSplit.length === 2 ? [this.preProcess(spaceSplit[1])] : spaceSplit.splice(1).map(a => this.preProcess(a))\n            return {invoke: spaceSplit[0], args: args}\n        } else if (labelMatch) { // label definition\n            return {label: labelMatch[1]}\n        } else if (jumpMatch) { // jump to label\n            return {jump: jumpMatch[1].toLowerCase()}\n        } else { // function call without args\n            if (expression.match(/[ =?><!]/)) {\n                throw 'Invalid expression given, parsing must have failed before somewhere'\n            }\n            return {invoke: expression, args: []}\n        }\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { Sample } from '../audio/Sample'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { NerpParser } from '../core/NerpParser'\nimport { NerpRunner } from '../core/NerpRunner'\nimport { clearIntervalSafe } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { AirLevelChanged, RaidersChangedEvent } from '../event/LocalEvents'\nimport { RequestedRaidersChanged } from '../event/WorldEvents'\nimport { CHECK_SPAWN_RAIDER_TIMER, TILESIZE, UPDATE_OXYGEN_TIMER } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { EntityManager } from './EntityManager'\nimport { RaiderActivity } from './model/activities/RaiderActivity'\nimport { EntityType } from './model/EntityType'\nimport { GameResultState } from './model/GameResult'\nimport { GameState } from './model/GameState'\nimport { MoveJob } from './model/job/raider/MoveJob'\nimport { Raider } from './model/raider/Raider'\nimport { SceneManager } from './SceneManager'\n\nexport class WorldManager {\n\n    sceneMgr: SceneManager // TODO can be removed, when entities are decoupled from their scene mesh/entity\n    entityMgr: EntityManager\n    nerpRunner: NerpRunner = null\n    oxygenUpdateInterval = null\n    spawnRaiderInterval = null\n    oxygenRate: number = 0\n\n    constructor() {\n        EventBus.registerEventListener(EventKey.CAVERN_DISCOVERED, () => {\n            GameState.discoveredCaverns++\n        })\n        EventBus.registerEventListener(EventKey.REQUESTED_RAIDERS_CHANGED, () => {\n            if (GameState.requestedRaiders > 0 && !this.spawnRaiderInterval) {\n                this.spawnRaiderInterval = setInterval(this.checkSpawnRaiders.bind(this), CHECK_SPAWN_RAIDER_TIMER)\n            }\n        })\n    }\n\n    setup(levelConf: LevelEntryCfg, onLevelEnd: (state: GameResultState) => any) {\n        GameState.totalCaverns = levelConf.reward?.quota?.caverns || 0\n        this.oxygenRate = levelConf.oxygenRate\n        // load nerp script\n        this.nerpRunner = NerpParser.parse(this.entityMgr, ResourceManager.getResource(levelConf.nerpFile))\n        this.nerpRunner.messages.push(...(ResourceManager.getResource(levelConf.nerpMessageFile)))\n        this.nerpRunner.onLevelEnd = onLevelEnd\n    }\n\n    start() {\n        this.nerpRunner?.startExecution()\n        this.oxygenUpdateInterval = setInterval(this.updateOxygen.bind(this), UPDATE_OXYGEN_TIMER)\n        GameState.levelStartTime = Date.now()\n    }\n\n    stop() {\n        GameState.levelStopTime = Date.now()\n        this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n        this.oxygenUpdateInterval = clearIntervalSafe(this.oxygenUpdateInterval)\n        this.nerpRunner?.pauseExecution()\n    }\n\n    updateOxygen() {\n        const sum = this.entityMgr.getOxygenSum()\n        const rateMultiplier = 0.001\n        const valuePerSecond = 1 / 25\n        const msToSeconds = 0.001\n        const diff = sum * this.oxygenRate * rateMultiplier * valuePerSecond * UPDATE_OXYGEN_TIMER * msToSeconds / 10\n        const airLevel = Math.min(1, Math.max(0, GameState.airLevel + diff))\n        if (GameState.airLevel !== airLevel) {\n            GameState.airLevel = airLevel\n            EventBus.publishEvent(new AirLevelChanged(GameState.airLevel))\n        }\n    }\n\n    checkSpawnRaiders() {\n        if (GameState.requestedRaiders < 1) {\n            this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n            return\n        }\n        if (this.entityMgr.hasMaxRaiders()) return\n        const spawnBuildings = this.entityMgr.getBuildingsByType(EntityType.TOOLSTATION, EntityType.TELEPORT_PAD)\n        for (let c = 0; c < spawnBuildings.length && GameState.requestedRaiders > 0; c++) {\n            const station = spawnBuildings[c]\n            if (station.spawning) continue\n            GameState.requestedRaiders--\n            EventBus.publishEvent(new RequestedRaidersChanged(GameState.requestedRaiders))\n            station.spawning = true\n            const raider = new Raider(this.sceneMgr, this.entityMgr)\n            const heading = station.getHeading()\n            raider.addToScene(new Vector2(0, TILESIZE / 2).rotateAround(new Vector2(0, 0), -heading).add(station.getPosition2D()), heading)\n            raider.playPositionalAudio(Sample[Sample.SND_teleport], false)\n            raider.changeActivity(RaiderActivity.TeleportIn, () => {\n                station.spawning = false\n                raider.changeActivity()\n                raider.sceneEntity.createPickSphere(raider.stats.PickSphere, raider)\n                const walkOutPos = station.primaryPathSurface.getRandomPosition()\n                raider.setJob(new MoveJob(walkOutPos))\n                this.entityMgr.raiders.push(raider)\n                EventBus.publishEvent(new RaidersChangedEvent(this.entityMgr))\n            })\n        }\n    }\n\n}\n","import { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../../params'\n\nexport class ScreenLayer {\n\n    canvas: HTMLCanvasElement\n    context: CanvasRenderingContext2D\n    onRedraw: (context: SpriteContext) => any\n    active: boolean = true\n\n    constructor(alpha: boolean, withContext: boolean) {\n        this.canvas = document.createElement('canvas')\n        if (!alpha) this.canvas.style.background = '#f0f'\n        if (withContext) this.context = this.canvas.getContext('2d', {alpha: alpha})\n        this.hide()\n    }\n\n    reset() {\n    }\n\n    setZIndex(zIndex: number) {\n        this.canvas.style.zIndex = String(zIndex)\n    }\n\n    static compareZ(layerA: ScreenLayer, layerB: ScreenLayer) {\n        let aIndex = layerA?.canvas?.style?.zIndex || 0\n        const bIndex = layerB?.canvas?.style?.zIndex || 0\n        return aIndex === bIndex ? 0 : aIndex > bIndex ? -1 : 1\n    }\n\n    resize(width, height) {\n        this.canvas.width = width\n        this.canvas.height = height\n    }\n\n    redraw() {\n        if (this.onRedraw && this.isActive()) requestAnimationFrame(this.onRedraw.bind(this, this.context))\n    }\n\n    show() {\n        this.reset()\n        this.active = true\n        this.canvas.style.visibility = 'visible'\n        this.redraw()\n    }\n\n    hide() {\n        this.active = false\n        this.canvas.style.visibility = 'hidden'\n    }\n\n    isActive() {\n        return this.active\n    }\n\n    toCanvasCoords(windowX: number, windowY: number) {\n        const clientRect = this.canvas.getBoundingClientRect()\n        return [windowX - clientRect.left, windowY - clientRect.top]\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        return new Promise((resolve) => resolve(false))\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): Promise<boolean> {\n        return new Promise((resolve) => resolve(false))\n    }\n\n    handleWheelEvent(event: GameWheelEvent): Promise<boolean> {\n        return new Promise((resolve) => resolve(false))\n    }\n\n}\n\nexport class ScaledLayer extends ScreenLayer {\n\n    fixedWidth: number = SPRITE_RESOLUTION_WIDTH\n    fixedHeight: number = SPRITE_RESOLUTION_HEIGHT\n    scaleX: number\n    scaleY: number\n\n    constructor(alpha: boolean = true, withContext: boolean = true) {\n        super(alpha, withContext)\n        this.updateScale()\n    }\n\n    private updateScale() {\n        this.scaleX = this.canvas.width / this.fixedWidth\n        this.scaleY = this.canvas.height / this.fixedHeight\n    }\n\n    toScaledCoords(windowX: number, windowY: number) {\n        const [cx, cy] = this.toCanvasCoords(windowX, windowY)\n        return [cx / this.scaleX, cy / this.scaleY].map((c) => Math.round(c))\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        this.updateScale()\n        this.context.scale(this.scaleX, this.scaleY)\n    }\n\n}\n","import { KEY_EVENT } from './EventTypeEnum'\n\nexport class GameKeyboardEvent {\n\n    eventEnum: KEY_EVENT\n    type: string\n    bubbles: boolean\n    key: string\n    code: string\n\n    constructor(eventEnum: KEY_EVENT, event: KeyboardEvent) {\n        this.eventEnum = eventEnum\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        this.key = event.key\n        this.code = event.code\n    }\n\n}\n","import { POINTER_EVENT } from './EventTypeEnum'\n\nexport class GamePointerEvent implements PointerEventInit {\n\n    type: string\n    eventEnum: POINTER_EVENT\n    bubbles: boolean\n    clientX: number\n    clientY: number\n    pointerType: string\n    button: number\n    ctrlKey: boolean\n    metaKey: boolean\n    shiftKey: boolean\n    canvasX: number\n    canvasY: number\n\n    constructor(eventEnum: POINTER_EVENT, event: PointerEvent) {\n        this.eventEnum = eventEnum\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        // all event attributes used by three.js controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n        this.clientX = event.clientX\n        this.clientY = event.clientY\n        this.pointerType = event.pointerType\n        this.button = event.button\n        this.ctrlKey = event.ctrlKey\n        this.metaKey = event.metaKey\n        this.shiftKey = event.shiftKey\n    }\n\n}\n","export class GameWheelEvent {\n\n    type: string\n    bubbles: boolean\n    clientX: number\n    clientY: number\n    deltaX: number\n    deltaY: number\n    deltaZ: number\n    button: number\n    ctrlKey: boolean\n    metaKey: boolean\n    shiftKey: boolean\n    canvasX: number\n    canvasY: number\n\n    constructor(event: WheelEvent) {\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        // all event attributes used by three.js controls: clientX, clientY, deltaY, keyCode, touches, button, ctrlKey, metaKey, shiftKey\n        this.clientX = event.clientX\n        this.clientY = event.clientY\n        this.deltaX = event.deltaX\n        this.deltaY = event.deltaY\n        this.deltaZ = event.deltaZ\n        this.button = event.button\n        this.ctrlKey = event.ctrlKey\n        this.metaKey = event.metaKey\n        this.shiftKey = event.shiftKey\n    }\n\n}\n","import { DEV_MODE } from '../params'\nimport { BaseScreen } from '../screen/BaseScreen'\nimport { ScreenLayer } from '../screen/layer/ScreenLayer'\nimport { KEY_EVENT, POINTER_EVENT } from './EventTypeEnum'\nimport { GameKeyboardEvent } from './GameKeyboardEvent'\nimport { GamePointerEvent } from './GamePointerEvent'\nimport { GameWheelEvent } from './GameWheelEvent'\n\nexport class EventManager {\n\n    constructor(screen: BaseScreen) {\n        screen.gameCanvasContainer.addEventListener('contextmenu', (event: MouseEvent) => {\n            if (screen.isInRect(event)) event.preventDefault()\n        })\n        new Map<string, POINTER_EVENT>([\n            ['pointermove', POINTER_EVENT.MOVE],\n            ['pointerdown', POINTER_EVENT.DOWN],\n            ['pointerup', POINTER_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: PointerEvent) => {\n                if (!screen.isInRect(event)) return\n                event.preventDefault()\n                const nonBubblingClone = new GamePointerEvent(eventEnum, event)\n                const activeLayers = screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                EventManager.publishPointerEvent(activeLayers, nonBubblingClone)\n            })\n        })\n        new Map<string, KEY_EVENT>([\n            ['keydown', KEY_EVENT.DOWN],\n            ['keyup', KEY_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: KeyboardEvent) => {\n                if (!DEV_MODE) event.preventDefault()\n                const nonBubblingClone = new GameKeyboardEvent(eventEnum, event)\n                const activeLayers = screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                EventManager.publishKeyEvent(activeLayers, nonBubblingClone)\n            })\n        })\n        screen.gameCanvasContainer.addEventListener('wheel', (event: WheelEvent) => {\n            if (!screen.isInRect(event)) return\n            const nonBubblingClone = new GameWheelEvent(event)\n            const activeLayers = screen.layers.filter(l => l.isActive())\n                .sort((a, b) => ScreenLayer.compareZ(a, b))\n            EventManager.publishWheelEvent(activeLayers, nonBubblingClone)\n        })\n    }\n\n    private static publishPointerEvent(activeLayers: ScreenLayer[], event: GamePointerEvent) {\n        activeLayers.shift()?.handlePointerEvent(event).then((consumed) => {\n            if (!consumed) this.publishPointerEvent(activeLayers, event)\n        })\n    }\n\n    private static publishKeyEvent(activeLayers: ScreenLayer[], event: GameKeyboardEvent) {\n        activeLayers.shift()?.handleKeyEvent(event).then((consumed) => {\n            if (!consumed) this.publishKeyEvent(activeLayers, event)\n        })\n    }\n\n    private static publishWheelEvent(activeLayers: ScreenLayer[], event: GameWheelEvent) {\n        activeLayers.shift()?.handleWheelEvent(event).then((consumed) => {\n            if (!consumed) this.publishWheelEvent(activeLayers, event)\n        })\n    }\n\n}\n","import { Raycaster } from 'three'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { IEventHandler } from '../../event/IEventHandler'\nimport { ChangeCursor } from '../../event/LocalEvents'\nimport { EntityManager } from '../../game/EntityManager'\nimport { Surface } from '../../game/model/map/Surface'\nimport { VehicleEntity } from '../../game/model/vehicle/VehicleEntity'\nimport { SceneManager } from '../../game/SceneManager'\nimport { WorldManager } from '../../game/WorldManager'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { AnimatedCursor } from '../AnimatedCursor'\nimport { Cursor } from '../Cursor'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class CursorLayer extends ScreenLayer {\n\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    currentCursor: Cursor = null\n    timedCursor: Cursor = null\n    cursorTimeout = null\n    activeCursor: AnimatedCursor = null\n\n    constructor(parent: IEventHandler) {\n        super(true, false)\n        parent.registerEventListener(EventKey.CHANGE_CURSOR, (event: ChangeCursor) => {\n            if (this.active) this.changeCursor(event.cursor, event.timeout)\n        })\n    }\n\n    reset() {\n        this.changeCursor(Cursor.Pointer_Standard)\n    }\n\n    hide() {\n        super.hide()\n        this.canvas.style.cursor = null\n        this.currentCursor = null\n        this.timedCursor = null\n        this.cursorTimeout = clearTimeoutSafe(this.cursorTimeout)\n        this.activeCursor?.disableAnimation()\n        this.activeCursor = null\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        if (event.eventEnum === POINTER_EVENT.MOVE && this.sceneMgr) {\n            const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n            const rx = (cx / this.canvas.width) * 2 - 1\n            const ry = -(cy / this.canvas.height) * 2 + 1\n            const raycaster = new Raycaster()\n            raycaster.setFromCamera({x: rx, y: ry}, this.sceneMgr.camera)\n            this.changeCursor(this.determineCursor(raycaster))\n        }\n        return super.handlePointerEvent(event)\n    }\n\n    determineCursor(raycaster: Raycaster): Cursor {\n        if (this.sceneMgr.hasBuildModeSelection()) {\n            return this.sceneMgr.buildMarker.lastCheck ? Cursor.Pointer_CanBuild : Cursor.Pointer_CannotBuild\n        }\n        let intersects = raycaster.intersectObjects(this.entityMgr.raiders.map((r) => r.sceneEntity.pickSphere))\n        if (intersects.length > 0) return Cursor.Pointer_Selected\n        intersects = raycaster.intersectObjects(this.entityMgr.vehicles.map((v) => v.sceneEntity.pickSphere))\n        if (intersects.length > 0) {\n            const userData = intersects[0].object.userData\n            if (userData && userData.hasOwnProperty('selectable')) {\n                const vehicle = userData['selectable'] as VehicleEntity\n                if (!vehicle?.driver && this.entityMgr.selection.raiders.length > 0) {\n                    return Cursor.Pointer_GetIn\n                }\n            }\n            return Cursor.Pointer_Selected\n        }\n        intersects = raycaster.intersectObjects(this.entityMgr.buildings.map((b) => b.sceneEntity.pickSphere))\n        if (intersects.length > 0) return Cursor.Pointer_Selected\n        intersects = raycaster.intersectObjects(this.sceneMgr.terrain.floorGroup.children)\n        if (intersects.length > 0) {\n            const userData = intersects[0].object.userData\n            if (userData && userData.hasOwnProperty('surface')) {\n                const surface = userData['surface'] as Surface\n                if (surface) {\n                    if (this.entityMgr.selection.raiders.some((r) => r.canDrill(surface)) || this.entityMgr.selection.vehicles.some((v) => v.canDrill(surface))) {\n                        return surface.surfaceType.cursorFulfiller\n                    } else {\n                        return surface.surfaceType.cursor\n                    }\n                }\n            }\n        }\n        return Cursor.Pointer_Standard\n    }\n\n    private changeCursor(cursor: Cursor, timeout: number = null) {\n        if (timeout) {\n            this.cursorTimeout = clearTimeoutSafe(this.cursorTimeout)\n            if (this.timedCursor !== cursor) this.setCursor(cursor)\n            const that = this\n            this.cursorTimeout = setTimeout(() => {\n                that.cursorTimeout = null\n                that.setCursor(that.currentCursor)\n            }, timeout)\n        } else if (this.currentCursor !== cursor) {\n            this.currentCursor = cursor\n            if (this.cursorTimeout) return\n            this.setCursor(cursor)\n        }\n    }\n\n    private setCursor(cursor: Cursor) {\n        this.activeCursor?.disableAnimation()\n        this.activeCursor = ResourceManager.getCursor(cursor)\n        this.activeCursor.enableAnimation(this.canvas.style)\n    }\n\n}\n","import { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { EventManager } from '../event/EventManager'\nimport { GameEvent } from '../event/GameEvent'\nimport { IEventHandler } from '../event/IEventHandler'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../params'\nimport { CursorLayer } from './layer/CursorLayer'\nimport { ScreenLayer } from './layer/ScreenLayer'\n\nexport class BaseScreen implements IEventHandler {\n\n    gameCanvasContainer: HTMLElement\n    eventMgr: EventManager\n    layers: ScreenLayer[] = []\n    width: number = SPRITE_RESOLUTION_WIDTH\n    height: number = SPRITE_RESOLUTION_HEIGHT\n    ratio: number = SPRITE_RESOLUTION_WIDTH / SPRITE_RESOLUTION_HEIGHT\n    cursorLayer: CursorLayer\n\n    constructor() {\n        this.gameCanvasContainer = document.getElementById('game-canvas-container')\n        this.gameCanvasContainer.focus()\n        this.eventMgr = new EventManager(this)\n        if (!this.gameCanvasContainer) throw 'Fatal error: game canvas container not found!'\n        window.addEventListener('resize', () => this.onWindowResize())\n        this.onWindowResize()\n        this.cursorLayer = this.addLayer(new CursorLayer(this), 1000) // TODO turn cursor layer into singleton?\n    }\n\n    addLayer<T extends ScreenLayer>(layer: T, zIndex: number = 0): T {\n        layer.resize(this.width, this.height)\n        layer.setZIndex(zIndex)\n        this.layers.push(layer)\n        this.gameCanvasContainer.appendChild(layer.canvas)\n        return layer\n    }\n\n    redraw() {\n        this.layers.forEach((layer) => layer.redraw())\n    }\n\n    show() {\n        this.layers.forEach((layer) => layer.show())\n        this.redraw()\n    }\n\n    hide() {\n        this.layers.forEach((layer) => layer.hide())\n    }\n\n    onWindowResize() {\n        const maxWidth = this.gameCanvasContainer.offsetWidth, maxHeight = this.gameCanvasContainer.offsetHeight\n        const idealHeight = Math.round(maxWidth / this.ratio)\n        if (idealHeight > maxHeight) {\n            this.resize(Math.round(maxHeight * this.ratio), maxHeight)\n        } else {\n            this.resize(maxWidth, idealHeight)\n        }\n    }\n\n    resize(width: number, height: number) {\n        this.width = width\n        this.height = height\n        this.layers.forEach((layer) => {\n            const oldCanvas = layer.canvas\n            layer.resize(width, height)\n            if (oldCanvas !== layer.canvas) { // TODO refactor this\n                this.gameCanvasContainer.removeChild(oldCanvas)\n                this.gameCanvasContainer.appendChild(layer.canvas)\n            }\n        })\n        this.redraw()\n    }\n\n    isInRect(event: MouseEvent | WheelEvent) {\n        if (this.layers.length < 1) return false\n        const firstLayer = this.layers[0] // all layers have same state and size\n        if (!firstLayer.isActive() || !firstLayer.canvas) return false\n        const rect = firstLayer.canvas.getBoundingClientRect()\n        const clientX = event.clientX, clientY = event.clientY\n        return clientX >= rect.left && clientX < rect.right && clientY >= rect.top && clientY < rect.bottom\n    }\n\n    publishEvent(event: GameEvent): void {\n        EventBus.publishEvent(event)\n    }\n\n    registerEventListener(eventKey: EventKey, callback: (GameEvent) => any): void {\n        EventBus.registerEventListener(eventKey, callback)\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { KEY_EVENT, MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GameEvent } from '../../event/GameEvent'\nimport { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { IEventHandler } from '../../event/IEventHandler'\nimport { DeselectAll } from '../../event/LocalEvents'\nimport { JobCreateEvent } from '../../event/WorldEvents'\nimport { EntityManager } from '../../game/EntityManager'\nimport { TrainRaiderJob } from '../../game/model/job/raider/TrainRaiderJob'\nimport { VehicleCallManJob } from '../../game/model/job/VehicleCallManJob'\nimport { SceneManager } from '../../game/SceneManager'\nimport { WorldManager } from '../../game/WorldManager'\nimport { DEV_MODE } from '../../params'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class GameLayer extends ScreenLayer implements IEventHandler {\n\n    parent: IEventHandler\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    private rightDown: { x: number, y: number } = {x: 0, y: 0}\n\n    constructor(parent: IEventHandler) {\n        super(false, false)\n        this.parent = parent\n    }\n\n    reset() {\n        super.reset()\n        this.rightDown = {x: 0, y: 0}\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        const terrainIntersectionPoint = this.sceneMgr.getTerrainIntersectionPoint(rx, ry)\n        const buildMarker = this.sceneMgr.buildMarker\n        if (event.eventEnum === POINTER_EVENT.MOVE) {\n            if (terrainIntersectionPoint) this.sceneMgr.setTorchPosition(terrainIntersectionPoint)\n            buildMarker.update(terrainIntersectionPoint)\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                buildMarker.createBuildingSite()\n            } else if (event.button === MOUSE_BUTTON.SECONDARY) {\n                const downUpDistance = Math.abs(event.clientX - this.rightDown.x) + Math.abs(event.clientY - this.rightDown.y)\n                if (downUpDistance < 3) {\n                    if (this.sceneMgr.hasBuildModeSelection()) {\n                        this.sceneMgr.setBuildModeSelection(null)\n                    } else if (this.entityMgr.selection.raiders.length > 0 || this.entityMgr.selection.vehicles.length > 0) {\n                        this.handleSecondaryClickForSelection(rx, ry, terrainIntersectionPoint)\n                    }\n                }\n            }\n        } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.SECONDARY) {\n                this.rightDown.x = event.clientX\n                this.rightDown.y = event.clientY\n            }\n        }\n        this.canvas.dispatchEvent(new PointerEvent(event.type, event))\n        this.canvas.ownerDocument.dispatchEvent(new PointerEvent(event.type, event))\n        return new Promise((resolve) => resolve(true))\n    }\n\n    handleSecondaryClickForSelection(rx: number, ry: number, terrainIntersectionPoint: Vector2) {\n        const selection = this.sceneMgr.getFirstByRay(rx, ry)\n        if (selection.vehicle) {\n            const selectedRaiders = this.entityMgr.selection.raiders\n            if (selectedRaiders.length > 0) {\n                const manVehicleJob = new VehicleCallManJob(selection.vehicle)\n                selectedRaiders.some((r) => {\n                    if (r.isPrepared(manVehicleJob)) {\n                        r.setJob(manVehicleJob)\n                    } else {\n                        const requiredTraining = manVehicleJob.getRequiredTraining()\n                        const closestTrainingSite = r.entityMgr.getClosestTrainingSite(r.getPosition(), requiredTraining)\n                        if (!closestTrainingSite) return false\n                        r.setJob(new TrainRaiderJob(r.entityMgr, requiredTraining, closestTrainingSite), manVehicleJob)\n                    }\n                    EventBus.publishEvent(new DeselectAll())\n                    return true\n                })\n                EventBus.publishEvent(new JobCreateEvent(manVehicleJob))\n            }\n        } else if (selection.material) {\n            // this.entityMgr.selection.assignCarryJob() // FIXME assign carry job to the closest fulfiller with capacity // FIXME before add capacity to raider and vehicles\n        } else if (selection.surface) {\n            const drillJob = selection.surface.createDrillJob()\n            this.entityMgr.selection.assignSurfaceJob(drillJob)\n            const clearJob = selection.surface.createClearRubbleJob()\n            this.entityMgr.selection.assignSurfaceJob(clearJob)\n            if (!drillJob && !clearJob && selection.surface.isWalkable()) {\n                this.entityMgr.selection.assignMoveJob(terrainIntersectionPoint)\n            }\n            if (!this.entityMgr.selection.isEmpty()) this.publishEvent(new DeselectAll())\n        }\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): Promise<boolean> {\n        if (DEV_MODE && event.eventEnum === KEY_EVENT.UP) {\n            if (this.entityMgr.selection.surface) {\n                if (event.code === 'KeyC') {\n                    this.entityMgr.selection.surface.collapse()\n                    this.publishEvent(new DeselectAll())\n                } else if (event.code === 'KeyF') {\n                    const s = this.entityMgr.selection.surface\n                    const t = s.terrain.findFallInTarget(s.x, s.y)\n                    if (!s.surfaceType.floor) s.createFallin(t[0], t[1])\n                    this.publishEvent(new DeselectAll())\n                }\n            }\n        }\n        this.canvas.dispatchEvent(new KeyboardEvent(event.type, event))\n        return new Promise((resolve) => resolve(true))\n    }\n\n    handleWheelEvent(event: GameWheelEvent): Promise<boolean> {\n        this.canvas.dispatchEvent(new WheelEvent(event.type, event))\n        return new Promise((resolve) => resolve(true))\n    }\n\n    publishEvent(event: GameEvent): void {\n        this.parent?.publishEvent(event)\n    }\n\n    registerEventListener(eventKey: EventKey, callback: (GameEvent) => any): void {\n        this.parent.registerEventListener(eventKey, callback)\n    }\n\n}\n","import { MathUtils } from 'three'\nimport { SoundManager } from '../../audio/SoundManager'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { GameEvent } from '../../event/GameEvent'\nimport { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { BuildingsChangedEvent, PlaySoundEvent, RaidersChangedEvent } from '../../event/LocalEvents'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\nimport { EntityManager } from '../../game/EntityManager'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { WorkerMessageType } from '../../resource/wadworker/WorkerMessageType'\nimport { OffscreenWorkerMessage } from '../../worker/OffscreenWorkerMessage'\nimport { WorkerEventResponse } from '../../worker/WorkerEventResponse'\nimport { WorkerPublishEvent } from '../../worker/WorkerPublishEvent'\nimport { WorkerResponse } from '../../worker/WorkerResponse'\nimport { ScreenLayer } from './ScreenLayer'\nimport generateUUID = MathUtils.generateUUID\n\nexport abstract class OffscreenLayer extends ScreenLayer {\n\n    private worker: Worker\n    entityMgr: EntityManager\n    resolveCallbackByEventId: Map<string, ((consumed: boolean) => any)> = new Map()\n\n    protected constructor(worker: Worker) {\n        super(true, false)\n        this.worker = worker\n        this.sendMessage({\n            type: WorkerMessageType.INIT,\n            resourceByName: ResourceManager.resourceByName,\n            cfg: ResourceManager.configuration,\n            stats: ResourceManager.stats,\n        })\n        this.worker.onmessage = (event) => {\n            const response = event.data as WorkerResponse\n            if (response.type === WorkerMessageType.RESPONSE_EVENT) {\n                const eventResponse = response as WorkerEventResponse\n                const resolve = this.resolveCallbackByEventId.get(eventResponse.eventId)\n                resolve(eventResponse.eventConsumed)\n                this.resolveCallbackByEventId.delete(eventResponse.eventId)\n            } else if (response.type === WorkerMessageType.GAME_EVENT) {\n                const event = (response as WorkerPublishEvent).gameEvent\n                if (event.eventKey === EventKey.PLAY_SOUND) {\n                    SoundManager.playSample((event as PlaySoundEvent).sample)\n                }\n                EventBus.publishEvent(event)\n            } else if (!this.onMessage(response)) {\n                console.warn('Offscreen layer ignored message: ' + WorkerMessageType[response.type])\n            }\n        }\n        EventBus.registerWorkerListener((event: GameEvent) => {\n            if (!event.guiForward) return\n            try {\n                this.sendMessage({type: WorkerMessageType.GAME_EVENT, gameEvent: event})\n            } catch (e) {\n                console.warn('Could not send event to GUI worker: ', e, event)\n            }\n        })\n    }\n\n    abstract onMessage(msg): boolean\n\n    protected sendMessage(message: OffscreenWorkerMessage, transfer?: Transferable[]) {\n        this.worker.postMessage(message, transfer)\n    }\n\n    reset() {\n        this.sendMessage({type: WorkerMessageType.RESET})\n        this.sendMessage({type: WorkerMessageType.GAME_EVENT, gameEvent: new BuildingsChangedEvent(this.entityMgr)})\n        this.sendMessage({type: WorkerMessageType.GAME_EVENT, gameEvent: new RaidersChangedEvent(this.entityMgr)})\n        this.sendMessage({type: WorkerMessageType.GAME_EVENT, gameEvent: new MaterialAmountChanged()})\n    }\n\n    resize(width, height) {\n        const zIndex = Number(this.canvas.style.zIndex) || 0\n        this.canvas = document.createElement('canvas')\n        if (!this.active) this.canvas.style.visibility = 'hidden'\n        super.resize(width, height)\n        this.setZIndex(zIndex)\n        const canvas = this.canvas.transferControlToOffscreen()\n        this.sendMessage({\n            type: WorkerMessageType.CANVAS,\n            canvas: canvas,\n        }, [canvas])\n    }\n\n    redraw() {\n        if (this.isActive()) this.sendMessage({type: WorkerMessageType.REDRAW})\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        [event.canvasX, event.canvasY] = this.toCanvasCoords(event.clientX, event.clientY)\n        return this.sendEventMessage(WorkerMessageType.EVENT_POINTER, event)\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): Promise<boolean> {\n        return this.sendEventMessage(WorkerMessageType.EVENT_KEY, event)\n    }\n\n    handleWheelEvent(event: GameWheelEvent): Promise<boolean> {\n        [event.canvasX, event.canvasY] = this.toCanvasCoords(event.clientX, event.clientY)\n        return this.sendEventMessage(WorkerMessageType.EVENT_POINTER, event)\n    }\n\n    private sendEventMessage(type: WorkerMessageType, event: GamePointerEvent | GameKeyboardEvent | GameWheelEvent): Promise<boolean> {\n        const eventId = generateUUID()\n        this.sendMessage({\n            type: type,\n            eventId: eventId,\n            inputEvent: event,\n        })\n        return new Promise((resolve) => this.resolveCallbackByEventId.set(eventId, resolve))\n    }\n\n}\n","import { WorkerMessageType } from '../../resource/wadworker/WorkerMessageType'\nimport { OffscreenLayer } from './OffscreenLayer'\n\nexport class GuiMainLayer extends OffscreenLayer {\n\n    onOptionsShow: () => any = () => console.log('Show options triggered')\n\n    constructor() {\n        super(new Worker(new URL('../../gui/GuiMainWorker', import.meta.url))) // webpack does not allow to extract the URL\n    }\n\n    onMessage(msg): boolean {\n        if (msg.type === WorkerMessageType.SHOW_OPTIONS) {\n            this.onOptionsShow()\n        } else {\n            return false\n        }\n        return true\n    }\n\n    setSpaceToContinue(state: boolean) {\n        this.sendMessage({type: WorkerMessageType.SPACE_TO_CONINUE, messageState: state})\n    }\n\n}\n","import { ObjectiveImageCfg } from '../../cfg/ObjectiveImageCfg'\nimport { GuiWorkerMessage } from '../../gui/GuiWorkerMessage'\nimport { WorkerMessageType } from '../../resource/wadworker/WorkerMessageType'\nimport { WorkerResponse } from '../../worker/WorkerResponse'\nimport { OffscreenLayer } from './OffscreenLayer'\n\nexport class OverlayLayer extends OffscreenLayer {\n\n    onSetSpaceToContinue: (state: boolean) => any = (state: boolean) => console.log('set space to continue: ' + state)\n    onAbortGame: () => any = () => console.log('abort the game')\n    onRestartGame: () => any = () => console.log('restart the game')\n\n    constructor() {\n        super(new Worker(new URL('../../gui/OverlayWorker', import.meta.url))) // webpack does not allow to extract the URL\n    }\n\n    onMessage(msg: WorkerResponse): boolean {\n        if (msg.type === WorkerMessageType.SPACE_TO_CONINUE) {\n            this.onSetSpaceToContinue(msg.messageState)\n        } else if (msg.type === WorkerMessageType.GAME_ABORT) {\n            this.onAbortGame()\n        } else if (msg.type === WorkerMessageType.GAME_RESTART) {\n            this.onRestartGame()\n        } else {\n            return false\n        }\n        return true\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.sendMessage({\n            type: WorkerMessageType.OVERLAY_SETUP,\n            objectiveText: objectiveText,\n            objectiveBackImgCfg: objectiveBackImgCfg,\n        })\n    }\n\n    protected sendMessage(message: GuiWorkerMessage, transfer?: Transferable[]) {\n        super.sendMessage(message, transfer)\n    }\n\n    showOptions() {\n        this.sendMessage({type: WorkerMessageType.SHOW_OPTIONS})\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { DeselectAll, SelectionChanged } from '../../event/LocalEvents'\nimport { EntityManager } from '../../game/EntityManager'\nimport { GameSelection } from '../../game/model/GameSelection'\nimport { SceneManager } from '../../game/SceneManager'\nimport { WorldManager } from '../../game/WorldManager'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class SelectionLayer extends ScreenLayer {\n\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    selectStart: { x: number, y: number } = null\n\n    constructor() {\n        super(true, true)\n    }\n\n    reset() {\n        super.reset()\n        this.selectStart = null\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        if (this.sceneMgr.hasBuildModeSelection()) return new Promise((resolve) => resolve(false))\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) return new Promise((resolve) => resolve(this.startSelection(cx, cy)))\n        } else if (event.eventEnum === POINTER_EVENT.MOVE) {\n            return new Promise((resolve) => resolve(this.changeSelection(cx, cy)))\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) return new Promise((resolve) => resolve(this.selectEntities(cx, cy)))\n        }\n        return new Promise((resolve) => resolve(false))\n    }\n\n    private startSelection(screenX: number, screenY: number) {\n        this.selectStart = {x: screenX, y: screenY}\n        return true\n    }\n\n    private changeSelection(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        this.context.strokeStyle = 'rgba(128, 192, 192, 0.5)'\n        this.context.lineWidth = 2\n        this.context.strokeRect(this.selectStart.x, this.selectStart.y, screenX - this.selectStart.x, screenY - this.selectStart.y)\n        return true\n    }\n\n    private selectEntities(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        let entities: GameSelection\n        if (Math.abs(screenX - this.selectStart.x) < 5 && Math.abs(screenY - this.selectStart.y) < 5) {\n            const x = (this.selectStart.x + screenX) / this.canvas.width - 1\n            const y = -(this.selectStart.y + screenY) / this.canvas.height + 1\n            entities = this.sceneMgr.getSelectionByRay(x, y)\n        } else {\n            const r1x = (this.selectStart.x / this.canvas.width) * 2 - 1\n            const r1y = -(this.selectStart.y / this.canvas.height) * 2 + 1\n            const r2x = (screenX / this.canvas.width) * 2 - 1\n            const r2y = -(screenY / this.canvas.height) * 2 + 1\n            entities = this.sceneMgr.getEntitiesInFrustum(r1x, r1y, r2x, r2y)\n        }\n        this.entityMgr.selection.set(entities)\n        EventBus.publishEvent(this.entityMgr.selection.isEmpty() ? new DeselectAll() : new SelectionChanged(this.entityMgr))\n        this.selectStart = null\n        return true\n    }\n\n}\n","import { LevelObjectiveTextEntry } from '../cfg/LevelObjectiveTextEntry'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { iGet } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { SetupPriorityList, UpdateRadarTerrain } from '../event/LocalEvents'\nimport { EntityManager } from '../game/EntityManager'\nimport { GuiManager } from '../game/GuiManager'\nimport { GameResult, GameResultState } from '../game/model/GameResult'\nimport { GameState } from '../game/model/GameState'\nimport { ObjectListLoader } from '../game/ObjectListLoader'\nimport { SceneManager } from '../game/SceneManager'\nimport { Supervisor } from '../game/Supervisor'\nimport { WorldManager } from '../game/WorldManager'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\nimport { GameLayer } from './layer/GameLayer'\nimport { GuiMainLayer } from './layer/GuiMainLayer'\nimport { OverlayLayer } from './layer/OverlayLayer'\nimport { SelectionLayer } from './layer/SelectionLayer'\n\nexport class GameScreen extends BaseScreen {\n\n    onLevelEnd: (result: GameResult) => any = () => console.log('Level aborted')\n    gameLayer: GameLayer\n    selectionLayer: SelectionLayer\n    guiLayer: GuiMainLayer\n    overlayLayer: OverlayLayer\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    guiMgr: GuiManager\n    jobSupervisor: Supervisor\n    levelName: string\n    levelConf: LevelEntryCfg\n\n    constructor() {\n        super()\n        this.gameLayer = this.addLayer(new GameLayer(this), 0)\n        this.selectionLayer = this.addLayer(new SelectionLayer(), 10)\n        this.guiLayer = this.addLayer(new GuiMainLayer(), 20)\n        this.overlayLayer = this.addLayer(new OverlayLayer(), 30)\n        this.entityMgr = new EntityManager()\n        this.worldMgr = new WorldManager()\n        this.sceneMgr = new SceneManager(this.gameLayer.canvas)\n        this.sceneMgr.worldMgr = this.worldMgr\n        this.sceneMgr.entityMgr = this.entityMgr\n        this.worldMgr.sceneMgr = this.sceneMgr\n        this.worldMgr.entityMgr = this.entityMgr\n        this.cursorLayer.worldMgr = this.worldMgr\n        this.cursorLayer.sceneMgr = this.sceneMgr\n        this.cursorLayer.entityMgr = this.entityMgr\n        this.gameLayer.worldMgr = this.worldMgr\n        this.gameLayer.sceneMgr = this.sceneMgr\n        this.gameLayer.entityMgr = this.entityMgr\n        this.selectionLayer.worldMgr = this.worldMgr\n        this.selectionLayer.sceneMgr = this.sceneMgr\n        this.selectionLayer.entityMgr = this.entityMgr\n        this.guiLayer.entityMgr = this.entityMgr\n        this.overlayLayer.entityMgr = this.entityMgr\n        this.jobSupervisor = new Supervisor(this.sceneMgr, this.entityMgr)\n        this.guiMgr = new GuiManager(this.worldMgr, this.sceneMgr, this.entityMgr, this.jobSupervisor, this.gameLayer.canvas)\n        // link layer\n        this.guiLayer.onOptionsShow = () => this.overlayLayer.showOptions()\n        this.overlayLayer.onSetSpaceToContinue = (state: boolean) => this.guiLayer.setSpaceToContinue(state)\n        this.overlayLayer.onAbortGame = () => this.onLevelEnd(new GameResult(GameResultState.QUIT, this.entityMgr))\n        this.overlayLayer.onRestartGame = () => this.restartLevel()\n    }\n\n    startLevel(levelName: string, levelConf: LevelEntryCfg) {\n        this.levelName = levelName\n        this.levelConf = levelConf\n        this.setupAndStartLevel()\n    }\n\n    restartLevel() {\n        this.hide()\n        GameState.reset()\n        this.setupAndStartLevel()\n    }\n\n    private setupAndStartLevel() {\n        console.log('Starting level ' + this.levelName + ' - ' + this.levelConf.fullName)\n        this.worldMgr.setup(this.levelConf, (state) => this.onLevelEnd(new GameResult(state, this.entityMgr)))\n        this.sceneMgr.setupScene(this.levelConf)\n        // setup GUI\n        this.guiMgr.buildingCycleIndex = 0\n        const objectiveText: LevelObjectiveTextEntry = iGet(ResourceManager.getResource(this.levelConf.objectiveText), this.levelName)\n        this.guiLayer.reset()\n        this.overlayLayer.setup(objectiveText.objective, this.levelConf.objectiveImage640x480)\n        EventBus.publishEvent(new SetupPriorityList(this.levelConf.priorities))\n        // load in non-space objects next\n        ObjectListLoader.loadObjectList(this.levelConf, this.worldMgr, this.sceneMgr, this.entityMgr)\n        // finally generate initial radar panel map\n        EventBus.publishEvent(new UpdateRadarTerrain(this.sceneMgr.terrain, this.sceneMgr.controls.target.clone()))\n        this.show()\n    }\n\n    show() {\n        super.show()\n        this.sceneMgr.startScene()\n        this.worldMgr.start()\n        this.entityMgr.start()\n        this.jobSupervisor.start()\n    }\n\n    hide() {\n        this.jobSupervisor.stop()\n        this.entityMgr.stop()\n        this.worldMgr.stop()\n        this.sceneMgr.disposeScene()\n        super.hide()\n    }\n\n    resize(width: number, height: number) {\n        super.resize(width, height)\n        this.sceneMgr?.resize(width, height)\n    }\n\n}\n","export function parseLabel(label: string[] | string): string {\n    const result = Array.isArray(label) ? label.join(',') : label // cfg parser does split(',')\n    return result?.replace(/_/g, ' ')\n}\n","export class MainMenuBaseItem {\n\n    x: number = 0\n    y: number = 0\n    width: number = 0\n    height: number = 0\n    zIndex: number = 100\n    scrollAffected = false\n    needsRedraw: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n    actionName: string = ''\n    targetIndex: number = 0\n\n    static compareZ(left: MainMenuBaseItem, right: MainMenuBaseItem) {\n        return left.zIndex === right.zIndex ? 0 : left.zIndex > right.zIndex ? -1 : 1\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const hover = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        if (this.hover !== hover) {\n            this.hover = hover\n            this.needsRedraw = true\n            this.onHoverChange()\n        }\n        if (!this.hover) this.pressed = false\n        return this.hover\n    }\n\n    onHoverChange() {\n    }\n\n    checkSetPressed() {\n        if (!this.hover) return\n        if (!this.pressed) this.needsRedraw = true\n        this.pressed = true\n    }\n\n    setReleased() {\n        if (this.pressed) this.needsRedraw = true\n        this.pressed = false\n    }\n\n    draw(context: SpriteContext) {\n        this.needsRedraw = false\n    }\n\n}\n","import { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuIconButton extends MainMenuBaseItem {\n\n    imgNormal = null\n    imgHover = null\n    imgPressed = null\n    tooltip = ''\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.imgNormal = ResourceManager.getImage(cfg.imgNormal)\n        this.imgHover = ResourceManager.getImage(cfg.imgHover)\n        this.imgPressed = ResourceManager.getImage(cfg.imgPressed)\n        this.tooltip = (cfg.tooltip || '').replace(/_/g, ' ')\n        this.width = Math.max(this.imgNormal.width, this.imgHover.width, this.imgPressed.width)\n        this.height = Math.max(this.imgNormal.height, this.imgHover.height, this.imgPressed.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: SpriteContext) {\n        super.draw(context)\n        let img = this.imgNormal\n        if (this.hover) img = this.imgHover\n        if (this.pressed) img = this.imgPressed\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuLabelButton extends MainMenuBaseItem {\n\n    labelImgLo = null\n    labelImgHi = null\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.labelImgLo = layer.loFont.createTextImage(cfg.label)\n        this.labelImgHi = layer.hiFont.createTextImage(cfg.label)\n        this.width = Math.max(this.labelImgLo.width, this.labelImgHi.width)\n        this.height = Math.max(this.labelImgLo.height, this.labelImgHi.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: SpriteContext) {\n        super.draw(context)\n        const img = this.hover && !this.pressed ? this.labelImgHi : this.labelImgLo\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { clearIntervalSafe } from '../core/Util'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { GamePointerEvent } from '../event/GamePointerEvent'\nimport { GameWheelEvent } from '../event/GameWheelEvent'\nimport { NATIVE_FRAMERATE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from '../screen/layer/ScreenLayer'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuIconButton } from './MainMenuIconButton'\nimport { MainMenuLabelButton } from './MainMenuLabelButton'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\n\nexport class MainMenuLayer extends ScaledLayer {\n\n    screen: MainMenuScreen\n    cfg: MenuEntryCfg\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    menuImage: SpriteImage\n    titleImage: SpriteImage\n    items: MainMenuBaseItem[] = []\n    scrollY: number = 0\n    scrollSpeedY: number = 0\n    scrollInterval = null\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg) {\n        super()\n        this.screen = screen\n        this.cfg = menuCfg\n        this.loFont = menuCfg.loFont ? ResourceManager.getBitmapFont(menuCfg.loFont) : null\n        this.hiFont = menuCfg.hiFont ? ResourceManager.getBitmapFont(menuCfg.hiFont) : null\n        this.menuImage = menuCfg.menuImage ? ResourceManager.getImage(menuCfg.menuImage) : null\n        this.titleImage = this.loFont.createTextImage(menuCfg.fullName)\n\n        menuCfg.itemsLabel.forEach((item) => {\n            if (item.label) {\n                this.items.push(new MainMenuLabelButton(this, item))\n            } else {\n                this.items.push(new MainMenuIconButton(this, item))\n            }\n        })\n\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n\n        this.onRedraw = (context) => {\n            context.drawImage(this.menuImage, 0, -this.scrollY)\n            if (menuCfg.displayTitle) context.drawImage(this.titleImage, (this.fixedWidth - this.titleImage.width) / 2, this.cfg.position[1])\n            this.items.forEach((item, index) => (this.items[this.items.length - 1 - index]).draw(context))\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.scrollY = 0\n        this.scrollSpeedY = 0\n    }\n\n    show() {\n        super.show()\n        const that = this\n        this.scrollInterval = setInterval(() => {\n            if (that.scrollSpeedY === 0) return\n            that.setScrollY(that.scrollSpeedY)\n        }, 1000 / NATIVE_FRAMERATE)\n    }\n\n    hide() {\n        this.scrollInterval = clearIntervalSafe(this.scrollInterval)\n        super.hide()\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        if (event.eventEnum === POINTER_EVENT.MOVE) {\n            const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n            let hovered = false\n            this.items.forEach((item) => {\n                if (!hovered) {\n                    const absY = sy + (item.scrollAffected ? this.scrollY : 0)\n                    hovered = item.checkHover(sx, absY)\n                } else {\n                    if (item.hover) item.needsRedraw = true\n                    item.hover = false\n                    item.setReleased()\n                }\n            })\n            if (this.cfg.canScroll) {\n                const scrollAreaHeight = 100\n                if (sy < scrollAreaHeight) {\n                    this.setScrollSpeedY(-(scrollAreaHeight - sy))\n                } else if (sy > this.fixedHeight - scrollAreaHeight) {\n                    this.setScrollSpeedY(sy - (this.fixedHeight - scrollAreaHeight))\n                } else {\n                    this.setScrollSpeedY(0)\n                }\n            }\n        } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => item.checkSetPressed())\n            }\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => {\n                    if (item.pressed) {\n                        item.setReleased()\n                        if (item.actionName.toLowerCase() === 'next') {\n                            this.screen.showMainMenu(item.targetIndex)\n                        } else if (item.actionName.toLowerCase() === 'selectlevel') {\n                            this.screen.selectLevel((item as MainMenuLevelButton).levelKey)\n                        } else if (item.actionName) {\n                            console.warn('not implemented: ' + item.actionName + ' - ' + item.targetIndex)\n                        }\n                    }\n                })\n            }\n        }\n        if (this.needsRedraw()) this.redraw()\n        return new Promise((resolve) => resolve(false))\n    }\n\n    private setScrollSpeedY(deltaY: number) {\n        this.scrollSpeedY = Math.sign(deltaY) * Math.pow(Math.round(deltaY / 20), 2)\n    }\n\n    handleWheelEvent(event: GameWheelEvent): Promise<boolean> {\n        if (!this.cfg.canScroll) return new Promise((resolve) => resolve(false))\n        this.setScrollY(event.deltaY)\n        return new Promise((resolve) => resolve(true))\n    }\n\n    private setScrollY(deltaY: number) {\n        const scrollYBefore = this.scrollY\n        this.scrollY = Math.min(Math.max(this.scrollY + deltaY, 0), this.menuImage.height - this.fixedHeight)\n        if (scrollYBefore !== this.scrollY) this.redraw()\n    }\n\n    needsRedraw(): boolean {\n        return this.items.some((item) => item.needsRedraw)\n    }\n\n}\n","import { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuLevelButton extends MainMenuBaseItem {\n\n    layer: MainMenuLayer\n    imgActive = null\n    imgInactive = null\n    imgCross = null\n    unlocked: boolean = false\n    levelKey: string = ''\n\n    constructor(layer: MainMenuLayer, levelKey: string, levelCfg: LevelEntryCfg) {\n        super()\n        this.layer = layer\n        this.actionName = 'selectlevel'\n        this.levelKey = levelKey\n        this.x = levelCfg.frontEndX\n        this.y = levelCfg.frontEndY\n        this.zIndex = 10\n        this.scrollAffected = true\n        const [imgActive, imgInactive, imgCross] = levelCfg.menuBMP\n        this.imgActive = ResourceManager.getImage(imgActive)\n        this.imgInactive = ResourceManager.getImage(imgInactive)\n        this.imgCross = ResourceManager.getImage(imgCross)\n        this.width = Math.max(this.imgActive.width, this.imgInactive.width, this.imgCross.width)\n        this.height = Math.max(this.imgActive.height, this.imgInactive.height, this.imgCross.height)\n        this.unlocked = levelCfg.frontEndOpen\n        this.unlocked = true // XXX don't unlock all levels by default\n    }\n\n    draw(context: SpriteContext) {\n        super.draw(context)\n        let img = this.imgCross\n        if (this.unlocked) img = this.hover ? this.imgActive : this.imgInactive\n        context.drawImage(img, this.x, this.y - this.layer.scrollY)\n    }\n\n}\n","import { createContext } from '../core/ImageHelper'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class MainMenuPanel extends MainMenuBaseItem {\n\n    context: SpriteContext\n\n    constructor(imgData: ImageData, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.zIndex = 50\n        this.context = createContext(imgData.width, imgData.height)\n        this.context.putImageData(imgData, 0, 0)\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const inRect = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        const hover = inRect && this.context.getImageData(sx, sy, 1, 1).data[3] > 0\n        if (this.hover !== hover) this.needsRedraw = true\n        this.hover = hover\n        return this.hover\n    }\n\n    draw(context: SpriteContext) {\n        super.draw(context)\n        context.drawImage(this.context.canvas, this.x, this.y, this.width, this.height)\n    }\n\n}\n","import { BitmapFont } from '../core/BitmapFont'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class MainMenuWindow extends MainMenuBaseItem {\n\n    font: BitmapFont\n    imgFirstLine = null\n    imgSecondLine = null\n\n    constructor(font: BitmapFont, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.font = font\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    setFirstLine(text: string) {\n        this.imgFirstLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    setSecondLine(text: string) {\n        this.imgSecondLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    draw(context: SpriteContext) {\n        super.draw(context)\n        const cx = this.x + this.width / 2, cy = this.y + this.height / 2\n        if (this.imgFirstLine) context.drawImage(this.imgFirstLine, cx - this.imgFirstLine.width / 2, cy - this.imgFirstLine.height)\n        if (this.imgSecondLine) context.drawImage(this.imgSecondLine, cx - this.imgSecondLine.width / 2, cy)\n    }\n\n}\n","import { parseLabel } from '../cfg/CfgHelper'\nimport { LevelEntryCfg, LevelsCfg } from '../cfg/LevelsCfg'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { iGet } from '../core/Util'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { MainMenuPanel } from './MainMenuPanel'\nimport { MainMenuWindow } from './MainMenuWindow'\n\nexport class LevelSelectLayer extends MainMenuLayer {\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg, modeLevel: boolean) {\n        super(screen, menuCfg)\n        const levelsCfg: LevelsCfg = ResourceManager.getResource('Levels')\n        const levelTextCfg = new LevelTextCfg()\n        this.items.push(new MainMenuPanel(levelTextCfg.panelImgData, levelTextCfg.panelPos))\n        const levelTextWindow = new MainMenuWindow(ResourceManager.getDefaultFont(), levelTextCfg.window)\n        levelTextWindow.setFirstLine(modeLevel ? levelTextCfg.level : levelTextCfg.tutorial)\n        this.items.push(levelTextWindow)\n        Object.keys(levelsCfg.levelsByName).forEach((levelKey) => {\n            const level: LevelEntryCfg = levelsCfg.levelsByName[levelKey]\n            const levelButton = new MainMenuLevelButton(this, levelKey, level)\n            levelButton.onHoverChange = () => levelTextWindow.setSecondLine(levelButton.hover ? level.fullName : '')\n            this.items.push(levelButton)\n        })\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n    }\n\n}\n\nclass LevelTextCfg {\n\n    window = {x: 0, y: 0, w: 0, h: 0}\n    panelImgData: ImageData\n    panelPos = {x: 0, y: 0, w: 0, h: 0}\n    level: string = ''\n    tutorial: string = ''\n\n    constructor() {\n        const cfg = ResourceManager.cfg('Menu', 'LevelText')\n        const winCfg = iGet(cfg, 'Window')\n        this.window = {x: winCfg[0], y: winCfg[1], w: winCfg[2], h: winCfg[3]}\n        const panelCfg = iGet(cfg, 'Panel')\n        this.panelImgData = ResourceManager.getImageData(panelCfg[0])\n        this.panelPos = {x: panelCfg[1], y: panelCfg[2], w: panelCfg[3], h: panelCfg[4]}\n        this.level = parseLabel(iGet(cfg, 'Level'))\n        this.tutorial = parseLabel(iGet(cfg, 'Tutorial'))\n    }\n\n}\n","import { MenuCfg } from '../cfg/MenuCfg'\nimport { LevelSelectLayer } from '../menu/LevelSelectLayer'\nimport { MainMenuLayer } from '../menu/MainMenuLayer'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\n\nexport class MainMenuScreen extends BaseScreen {\n\n    onLevelSelected: (levelName: string) => void = null\n    menus: MainMenuLayer[] = []\n\n    constructor() {\n        super()\n        const mainMenuFullCfg = ResourceManager.getResource('MainMenuFull') as MenuCfg\n        mainMenuFullCfg.menus.forEach((menuCfg) => {\n            let layer\n            if (menuCfg.title === 'Levels') {\n                layer = new LevelSelectLayer(this, menuCfg, true)\n            } else if (menuCfg.title === 'Tutorials') {\n                layer = new LevelSelectLayer(this, menuCfg, false)\n            } else {\n                layer = new MainMenuLayer(this, menuCfg)\n            }\n            this.menus.push(layer)\n            this.addLayer(layer)\n        })\n    }\n\n    showMainMenu(index: number = 0) {\n        this.menus.forEach((menu, i) => i === index ? menu.show() : menu.hide())\n        this.cursorLayer.show()\n    }\n\n    showLevelSelection() {\n        this.showMainMenu(1)\n    }\n\n    selectLevel(levelName) {\n        this.hide()\n        this.onLevelSelected(levelName)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class RewardScreenButton extends MainMenuBaseItem {\n\n    imgNormal: SpriteImage\n    imgHover: SpriteImage\n    imgPressed: SpriteImage\n    imgDisabled: SpriteImage\n    disabled: boolean = false\n    visible: boolean = true\n\n    constructor(conf: any) {\n        super()\n        let imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath;\n        [imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath, this.x, this.y] = conf\n        this.imgNormal = ResourceManager.getImage(imgNormalFilepath)\n        this.imgHover = ResourceManager.getImage(imgHoverFilepath)\n        this.imgPressed = ResourceManager.getImage(imgPressedFilepath)\n        this.imgDisabled = ResourceManager.getImage(imgDisabledFilepath)\n        this.width = this.imgNormal.width\n        this.height = this.imgNormal.height\n    }\n\n    draw(context: SpriteContext) {\n        super.draw(context)\n        if (!this.visible) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled\n        } else if (this.pressed) {\n            img = this.imgPressed\n        } else if (this.hover) {\n            img = this.imgHover\n        }\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { LevelRewardConfig } from '../cfg/LevelsCfg'\nimport { RewardCfg } from '../cfg/RewardCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { clearTimeoutSafe } from '../core/Util'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { GameResult, GameResultState } from '../game/model/GameResult'\nimport { GameState } from '../game/model/GameState'\nimport { RewardScreenButton } from '../menu/RewardScreenButton'\nimport { MAX_RAIDER_BASE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\nimport { ScaledLayer } from './layer/ScreenLayer'\n\nexport class RewardScreen extends BaseScreen {\n\n    onAdvance: () => void\n    cfg: RewardCfg = null\n    titleFont: BitmapFont\n    resultsLayer: ScaledLayer\n    descriptionTextLayer: ScaledLayer\n    btnLayer: ScaledLayer\n    resultIndex: number = 0\n    resultLastIndex: number = 0\n    images: { img: SpriteImage, x: number, y: number }[] = []\n    boxes: { img: SpriteImage, x: number, y: number }[] = []\n    fonts = {}\n    texts: SpriteImage[] = []\n    uncoverTimeout = null\n    btnSave: RewardScreenButton\n    btnAdvance: RewardScreenButton\n    levelFullNameImg: SpriteImage\n    rewardConfig: LevelRewardConfig\n    resultText: string\n    resultValues: SpriteImage[] = []\n\n    constructor() {\n        super()\n        this.cfg = ResourceManager.getResource('Reward')\n        this.titleFont = ResourceManager.getBitmapFont(this.cfg.titleFont)\n        const backgroundImg = ResourceManager.getImage(this.cfg.wallpaper)\n        const backgroundLayer = this.addLayer(new ScaledLayer())\n        backgroundLayer.onRedraw = (context) => context.drawImage(backgroundImg, 0, 0)\n        this.cfg.images.forEach((img) => {\n            this.images.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        this.cfg.boxImages.forEach((img) => {\n            this.boxes.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        Object.keys(this.cfg.fonts).forEach((fontKey, index) => {\n            const font = ResourceManager.getBitmapFont(this.cfg.fonts[fontKey])\n            this.fonts[fontKey.toLowerCase()] = font\n            const txt = this.cfg.texts[index]\n            const labelFont = index < 9 ? font : ResourceManager.getBitmapFont(this.cfg.backFont)\n            this.texts.push(labelFont.createTextImage(txt.text))\n        })\n        this.resultsLayer = this.addLayer(new ScaledLayer())\n        this.resultsLayer.handlePointerEvent = ((event) => {\n            if (event.eventEnum === POINTER_EVENT.UP) {\n                this.uncoverTimeout = clearTimeoutSafe(this.uncoverTimeout)\n                this.uncoverTimeout = null\n                this.resultIndex = this.resultLastIndex\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n                this.redraw()\n                return new Promise((resolve) => resolve(true))\n            }\n            return new Promise((resolve) => resolve(false))\n        })\n        this.descriptionTextLayer = this.addLayer(new ScaledLayer(), 20)\n        this.btnLayer = this.addLayer(new ScaledLayer(), 50)\n        this.btnSave = new RewardScreenButton(this.cfg.saveButton)\n        this.btnSave.disabled = true\n        this.btnAdvance = new RewardScreenButton(this.cfg.advanceButton)\n        this.btnLayer.handlePointerEvent = ((event) => {\n            if (event.eventEnum === POINTER_EVENT.MOVE) {\n                const [sx, sy] = this.btnLayer.toScaledCoords(event.clientX, event.clientY)\n                this.btnSave.checkHover(sx, sy)\n                this.btnAdvance.checkHover(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    this.btnSave.checkSetPressed()\n                    this.btnAdvance.checkSetPressed()\n                }\n            } else if (event.eventEnum === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    if (this.btnSave.pressed) {\n                        this.btnSave.setReleased()\n                        // TODO switch to save screen\n                    } else if (this.btnAdvance.pressed) {\n                        this.btnAdvance.setReleased()\n                        this.hide()\n                        this.onAdvance()\n                    }\n                }\n            }\n            if (this.btnSave.needsRedraw || this.btnAdvance.needsRedraw) this.redraw()\n            return new Promise((resolve) => resolve(false))\n        })\n        this.btnLayer.onRedraw = (context) => {\n            this.btnSave.draw(context)\n            this.btnAdvance.draw(context)\n        }\n    }\n\n    setGameResult(result: GameResult) {\n        this.resultText = this.cfg.quitText\n        this.resultLastIndex = this.images.length - 2\n        if (result.state === GameResultState.COMPLETE) {\n            this.resultText = this.cfg.completeText\n            this.resultLastIndex = this.images.length - 1\n        } else if (result.state === GameResultState.FAILED) {\n            this.resultText = this.cfg.failedText\n        }\n        this.resultValues = []\n        this.resultValues.push(this.fonts['crystals'].createTextImage(this.percentString(GameState.numCrystal, GameState.neededCrystals)))\n        this.resultValues.push(this.fonts['ore'].createTextImage(this.percentString(GameState.numOre, GameState.totalOres)))\n        this.resultValues.push(this.fonts['diggable'].createTextImage(this.percentString(GameState.remainingDiggables, GameState.totalDiggables, true)))\n        this.resultValues.push(this.fonts['constructions'].createTextImage(result.numBuildings.toString()))\n        this.resultValues.push(this.fonts['caverns'].createTextImage(this.percentString(GameState.discoveredCaverns, GameState.totalCaverns)))\n        this.resultValues.push(this.fonts['figures'].createTextImage(this.percentString(result.numRaiders, result.numMaxRaiders)))\n        this.resultValues.push(this.fonts['rockmonsters'].createTextImage(this.percentString(0))) // TODO show defence report, is either 0% or 100%\n        this.resultValues.push(this.fonts['oxygen'].createTextImage(this.percentString(GameState.airLevel)))\n        this.resultValues.push(this.fonts['timer'].createTextImage(this.timeString(GameState.gameTimeSeconds)))\n        this.resultValues.push(this.fonts['score'].createTextImage(this.percentString(this.calcScore(result))))\n    }\n\n    calcScore(result: GameResult): number {\n        if (!this.rewardConfig) return 0\n        let quota = this.rewardConfig.quota\n        let importance = this.rewardConfig.importance\n        const scoreCrystals = GameState.numCrystal >= (quota.crystals || Infinity) ? importance.crystals : 0\n        const scoreTimer = GameState.gameTimeSeconds <= (quota.timer || 0) ? importance.timer : 0\n        const scoreCaverns = quota.caverns ? Math.min(1, GameState.discoveredCaverns / quota.caverns) * importance.caverns : 0\n        const scoreConstructions = quota.constructions ? Math.min(1, result.numBuildings / quota.constructions * importance.constructions) : 0\n        const scoreOxygen = GameState.airLevel * importance.oxygen\n        const scoreFigures = result.numRaiders >= MAX_RAIDER_BASE ? importance.figures : 0\n        return Math.max(0, Math.min(100, Math.round(scoreCrystals + scoreTimer + scoreCaverns + scoreConstructions + scoreOxygen + scoreFigures) / 100))\n    }\n\n    show() {\n        this.resultIndex = 0\n        this.btnSave.visible = false\n        this.btnAdvance.visible = false\n        this.uncoverResult()\n        const gameResultTextImg = this.titleFont.createTextImage(this.resultText)\n        this.resultsLayer.onRedraw = (context) => {\n            context.clearRect(0, 0, this.resultsLayer.fixedWidth, this.resultsLayer.fixedHeight)\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const img = this.images[c]\n                if (img) context.drawImage(img.img, img.x, img.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const box = this.boxes[c]\n                if (box) context.drawImage(box.img, box.x, box.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const txt = this.cfg.texts[c]\n                const text = this.resultValues[c]\n                if (text) context.drawImage(text, txt.x - text.width / 2, txt.y)\n            }\n            context.drawImage(this.levelFullNameImg, this.resultsLayer.fixedWidth / 2 - this.levelFullNameImg.width / 2, this.cfg.vertSpacing - this.levelFullNameImg.height / 2)\n            context.drawImage(gameResultTextImg, this.resultsLayer.fixedWidth / 2 - gameResultTextImg.width / 2, this.cfg.vertSpacing + this.levelFullNameImg.height / 2)\n        }\n        this.descriptionTextLayer.onRedraw = (context) => {\n            const descriptionTextImg = this.texts[this.resultIndex]\n            context.clearRect(0, this.cfg.textPos[1], this.descriptionTextLayer.fixedWidth, this.descriptionTextLayer.fixedHeight - this.cfg.textPos[1])\n            const tx = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[0] : 305\n            const ty = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[1] : 195\n            context.drawImage(descriptionTextImg, tx - descriptionTextImg.width / 2, ty)\n        }\n        super.show()\n    }\n\n    percentString(actual, max = 1, lessIsMore: boolean = false) {\n        if (max === 0) max = 1\n        let value = Math.round(Math.max(Math.min(actual / max, 1), 0) * 100)\n        if (lessIsMore) value = 100 - value\n        return value.toString() + '%'\n    }\n\n    padLeft(value: string, padding = '0', length = 2) {\n        while (value.length < length) value = padding + value\n        return value\n    }\n\n    timeString(seconds: number) {\n        const ss = this.padLeft((seconds % 60).toString())\n        const minutes = Math.floor(seconds / 60)\n        const mm = this.padLeft(((minutes % 60).toString()))\n        const hh = this.padLeft((Math.floor(minutes / 60).toString()))\n        return hh + ':' + mm + ':' + ss\n    }\n\n    uncoverResult() {\n        this.uncoverTimeout = setTimeout(() => {\n            this.uncoverTimeout = null\n            this.resultIndex++\n            if (this.resultIndex < this.resultLastIndex) {\n                this.uncoverResult()\n            } else {\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n            }\n            this.redraw()\n        }, this.cfg.timer * 1000)\n    }\n\n    setup(levelFullName: string, rewardConfig: LevelRewardConfig) {\n        this.levelFullNameImg = this.titleFont.createTextImage(levelFullName)\n        this.rewardConfig = rewardConfig\n    }\n\n}\n","import { ClearCacheButton } from '../site/clearcache/ClearCacheButton'\nimport { GithubBox } from '../site/github/github-box'\nimport { WadFileSelectionModal } from '../site/modal/WadFileSelectionModal'\nimport { LevelEntryCfg } from './cfg/LevelsCfg'\nimport { getRandomInclusive } from './core/Util'\nimport { GameState } from './game/model/GameState'\nimport { DEV_MODE } from './params'\nimport { ResourceManager } from './resource/ResourceManager'\nimport { GameScreen } from './screen/GameScreen'\nimport { LoadingScreen } from './screen/LoadingScreen'\nimport { MainMenuScreen } from './screen/MainMenuScreen'\nimport { RewardScreen } from './screen/RewardScreen'\n\nif (DEV_MODE) console.warn('DEV MODE ACTIVE')\n\n// setup and link all components\n\nconst loadingScreen = new LoadingScreen()\nconst wadFileSelectModal = new WadFileSelectionModal('game-container')\nconst githubBox = new GithubBox('game-container')\nconst clearCacheButton = new ClearCacheButton('game-container')\n\nwadFileSelectModal.onStart = (wad0Url, wad1Url) => {\n    ResourceManager.startLoadingFromUrl(wad0Url, wad1Url)\n}\nResourceManager.onMessage = (msg: string) => {\n    loadingScreen.setLoadingMessage(msg)\n}\nResourceManager.onCacheMissed = () => {\n    wadFileSelectModal.show()\n}\nResourceManager.onInitialLoad = (totalResources: number) => {\n    wadFileSelectModal.hide()\n    loadingScreen.enableGraphicMode(totalResources)\n}\nResourceManager.onAssetLoaded = () => {\n    loadingScreen.increaseLoadingState()\n}\nResourceManager.onLoadDone = () => {\n    // complete setup\n    const mainMenuScreen = new MainMenuScreen()\n    const gameScreen = new GameScreen()\n    const rewardScreen = new RewardScreen()\n\n    mainMenuScreen.onLevelSelected = (levelName) => {\n        let levelConf: LevelEntryCfg = null\n        try {\n            levelConf = ResourceManager.getResource('Levels').levelsByName[levelName]\n            if (levelConf) {\n                rewardScreen.setup(levelConf.fullName, levelConf.reward)\n                gameScreen.startLevel(levelName, levelConf)\n            }\n        } catch (e) {\n            console.error('Could not load level: ' + levelName, e)\n        } finally {\n            if (!levelConf) {\n                console.error('Could not find level configuration for \"' + levelName + '\"')\n                gameScreen.hide()\n                mainMenuScreen.showLevelSelection()\n            }\n        }\n    }\n    gameScreen.onLevelEnd = (result) => {\n        gameScreen.hide()\n        rewardScreen.setGameResult(result)\n        rewardScreen.show()\n    }\n    rewardScreen.onAdvance = () => {\n        GameState.reset()\n        mainMenuScreen.showLevelSelection()\n    }\n\n    // setup complete\n    loadingScreen.hide()\n    githubBox.hide()\n    clearCacheButton.hide()\n    const params = new URLSearchParams(window.location.search)\n    const entry = params.get('entry')\n    if (DEV_MODE && entry) {\n        GameState.numOre = Number(params.get('numOre')) || 0\n        GameState.numCrystal = Number(params.get('numCrystal')) || 0\n        if (entry === 'level') mainMenuScreen.showLevelSelection()\n        else if (entry === 'reward') rewardScreen.show()\n        else if (entry === 'random') mainMenuScreen.selectLevel('Level' + (('00' + getRandomInclusive(1, 25)).substr(-2)))\n        else if (entry) mainMenuScreen.selectLevel(entry)\n    } else {\n        mainMenuScreen.showMainMenu()\n    }\n}\n\n// start the game engine with loading resources\n\nloadingScreen.show()\nResourceManager.startLoadingFromCache()\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\nimport { ScaledLayer } from './layer/ScreenLayer'\n\nexport class LoadingScreen extends BaseScreen {\n\n    layer: ScaledLayer\n    assetIndex: number = 0\n\n    constructor() {\n        super()\n        this.layer = this.addLayer(new ScaledLayer())\n    }\n\n    show() {\n        this.layers.forEach((layer) => {\n            if (layer !== this.cursorLayer) layer.show()\n        })\n        this.setLoadingMessage('Loading...')\n    }\n\n    setLoadingMessage(text) {\n        this.layer.onRedraw = (context) => {\n            // clear the screen to black\n            context.fillStyle = 'black'\n            context.fillRect(0, 0, this.layer.fixedWidth, this.layer.fixedHeight)\n            // draw the loading title\n            context.font = '24px Arial'\n            context.fillStyle = 'white'\n            context.fillText('Loading Rock Raiders', 20, this.layer.fixedHeight - 50)\n            // hard-code the first loading message\n            context.font = '18px Arial'\n            context.fillStyle = 'white'\n            context.fillText(text, 20, this.layer.fixedHeight - 20)\n        }\n        this.redraw()\n    }\n\n    enableGraphicMode(totalResources: number) {\n        const imgBackground = ResourceManager.getImage(ResourceManager.cfg('Main', 'LoadScreen'))\n        const imgProgress = ResourceManager.getImage(ResourceManager.cfg('Main', 'ProgressBar'))\n        const imgLoading = ResourceManager.getDefaultFont().createTextImage(ResourceManager.cfg('Main', 'LoadingText'))\n        this.layer.onRedraw = (context => {\n            context.drawImage(imgBackground, 0, 0)\n            const loadingBarWidth = 353 * (this.assetIndex < totalResources ? Math.round(this.assetIndex / totalResources) : 1)\n            context.drawImage(imgProgress, 142, 450, loadingBarWidth, 9)\n            context.drawImage(imgLoading, Math.round(320 - imgLoading.width / 2), Math.round(456 - imgLoading.height / 2))\n        })\n        this.cursorLayer.show()\n        this.redraw()\n    }\n\n    increaseLoadingState() {\n        this.assetIndex++\n        this.redraw()\n    }\n\n}\n","export const DEV_MODE = process.env.WEBPACK_MODE === 'development'\nexport const WAD_CACHE_DB_NAME = 'RockRaidersWeb'\nexport const JOB_SCHEDULE_INTERVAL = 1000 // milliseconds\nexport const CHECK_CLEAR_RUBBLE_INTERVAL = 5000 // milliseconds\nexport const CHECK_SPAWN_RAIDER_TIMER = 1000 // milliseconds\nexport const MAX_RAIDER_BASE = 12\nexport const MAX_RAIDER_REQUEST = 9\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10\nexport const UPDATE_OXYGEN_TIMER = 5000 // milliseconds\nexport const PANEL_ANIMATION_MULTIPLIER = 3\nexport const HEIGHT_MULTIPLIER = 0.1\nexport const SEQUENCE_TEXTURE_FRAMERATE = 5\nexport const KEY_PAN_SPEED = 20\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640\nexport const SPRITE_RESOLUTION_HEIGHT = 480\nexport const TILESIZE = 40\nexport const NATIVE_FRAMERATE = 30\nexport const NATIVE_UPDATE_INTERVAL = 1000 / NATIVE_FRAMERATE\n"],"sourceRoot":""}