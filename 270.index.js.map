{"version":3,"sources":["webpack://rock-raiders-web/./src/resource/wadworker/Resources.ts","webpack://rock-raiders-web/./src/resource/wadworker/InitLoadingMessage.ts","webpack://rock-raiders-web/./src/core/ImageHelper.js","webpack://rock-raiders-web/./src/resource/wadworker/WadUtil.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimationEntityType.ts","webpack://rock-raiders-web/./src/resource/LWOLoader.ts","webpack://rock-raiders-web/./src/event/EventManager.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimClip.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimSubObj.ts","webpack://rock-raiders-web/./src/resource/LWSCLoader.ts","webpack://rock-raiders-web/./src/resource/AnimEntityLoader.ts","webpack://rock-raiders-web/./src/core/BitmapFont.ts","webpack://rock-raiders-web/./src/resource/ResourceManager.ts","webpack://rock-raiders-web/./src/screen/ScreenLayer.ts","webpack://rock-raiders-web/./src/game/model/Selectable.ts","webpack://rock-raiders-web/./src/screen/BaseScreen.ts","webpack://rock-raiders-web/./src/screen/LoadingScreen.ts","webpack://rock-raiders-web/./src/menu/MainMenuBaseItem.ts","webpack://rock-raiders-web/./src/menu/MainMenuLabelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuIconButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLayer.ts","webpack://rock-raiders-web/./src/menu/MainMenuLevelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuPanel.ts","webpack://rock-raiders-web/./src/menu/MainMenuWindow.ts","webpack://rock-raiders-web/./src/menu/LevelSelectLayer.ts","webpack://rock-raiders-web/./src/screen/MainMenuScreen.ts","webpack://rock-raiders-web/./src/scene/DebugHelper.ts","webpack://rock-raiders-web/./src/game/model/entity/building/Building.ts","webpack://rock-raiders-web/./src/scene/model/BaseEntity.ts","webpack://rock-raiders-web/./src/event/WorldEvents.ts","webpack://rock-raiders-web/./src/event/EventBus.ts","webpack://rock-raiders-web/./src/game/model/job/Job.ts","webpack://rock-raiders-web/./src/scene/model/collect/CollectableEntity.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimEntity.ts","webpack://rock-raiders-web/./src/scene/model/collect/Dynamite.ts","webpack://rock-raiders-web/./src/scene/model/collect/Crystal.ts","webpack://rock-raiders-web/./src/scene/model/collect/Ore.ts","webpack://rock-raiders-web/./src/scene/model/map/Surface.ts","webpack://rock-raiders-web/./src/scene/SceneManager.ts","webpack://rock-raiders-web/./src/scene/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/game/model/job/SurfaceJob.ts","webpack://rock-raiders-web/./src/scene/model/map/Terrain.ts","webpack://rock-raiders-web/./src/scene/TerrainLoader.ts","webpack://rock-raiders-web/./src/scene/model/FulfillerEntity.ts","webpack://rock-raiders-web/./src/scene/model/MovableEntity.ts","webpack://rock-raiders-web/./src/scene/model/Raider.ts","webpack://rock-raiders-web/./src/scene/model/BuildingEntity.ts","webpack://rock-raiders-web/./src/scene/ObjectListLoader.ts","webpack://rock-raiders-web/./src/core/NerpRunner.ts","webpack://rock-raiders-web/./src/core/NerpParser.ts","webpack://rock-raiders-web/./src/scene/WorldManager.ts","webpack://rock-raiders-web/./src/game/layer/SelectionLayer.ts","webpack://rock-raiders-web/./src/game/layer/GameLayer.ts","webpack://rock-raiders-web/./src/game/gui/base/BaseElement.ts","webpack://rock-raiders-web/./src/game/gui/base/Button.ts","webpack://rock-raiders-web/./src/game/gui/ingame/panel/Panel.ts","webpack://rock-raiders-web/./src/game/gui/ingame/panel/RadarPanel.ts","webpack://rock-raiders-web/./src/game/gui/ingame/panel/MessagePanel.ts","webpack://rock-raiders-web/./src/game/gui/ingame/panel/PanelCrystalSideBar.ts","webpack://rock-raiders-web/./src/game/gui/base/MenuItem.ts","webpack://rock-raiders-web/./src/game/gui/ingame/panel/IconPanel.ts","webpack://rock-raiders-web/./src/scene/model/BuildingSite.ts","webpack://rock-raiders-web/./src/game/gui/ingame/panel/MainPanel.ts","webpack://rock-raiders-web/./src/game/layer/GuiLayer.ts","webpack://rock-raiders-web/./src/game/Supervisor.ts","webpack://rock-raiders-web/./src/screen/GameScreen.ts","webpack://rock-raiders-web/./src/menu/RewardScreenButton.ts","webpack://rock-raiders-web/./src/screen/RewardScreen.ts","webpack://rock-raiders-web/./src/main.ts"],"names":["Worker_fn","Worker","wad0FileUrl","wad1FileUrl","this","createContext","width","height","console","error","result","y","x","fillStyle","fillRect","createDummyContext","canvas","document","createElement","setAttribute","context","getContext","createDummyImgData","ImageData","e","px","py","setPixel","imgData","r","g","b","a","n","data","getPixel","iGet","obj","keys","forEach","keyname","Object","filter","key","toLowerCase","map","url","strUrl","toString","replace","startsWith","substring","lastInd","lastIndexOf","decodeString","TextDecoder","decode","decodeFilepath","getRandomInclusive","min","max","Math","ceil","floor","random","getRandom","getRandomSign","carryNullName","mediumPoly","highPoly","fPPoly","activities","SURF_VTRN","getVector3AtOffset","view","offset","vector","getFloat32","z","MOUSE_BUTTON","path","verbose","materials","geometry","vertices","indices","uvs","log","parsePoints","chunkOffset","chunkSize","numVertices","Float32Array","i","vertexIndex","vertexOffset","parseSurfaceNames","buffer","surfaceNames","Uint8Array","split","s","length","new_material","name","push","parsePolygons","totalNumIndices","numIndices","getInt16","materialIndex","addGroup","currentIndex","Uint16Array","faceIndices","Int16Array","COUNTER_CLOCKWISE","parseSurface","getUint8","materialName","material","textureFlags","textureSize","textureCenter","subchunkOffset","subchunkType","getInt32","subchunkSize","colorArray","color","fromArray","join","flags","getUint16","luminosity","diffuse","specular","reflection","reflectivity","transparency","opacity","transparent","luminosity2","diffuse2","specular2","toArray","textureTypeName","textureColorArray","textureFilepath","sequenceTexture","endsWith","filename","textureFilename","match","basename","Number","ResourceManager","filterEntryNames","setInterval","getTexture","alphaTest","warn","size","center","XAXIS_BIT","groups","group","start","count","uvIndex","u","v","planarMapUVS","parse","DataView","getUint32","fileSize","byteLength","ID4_SIZE","cursor","chunkType","setIndex","computeVertexNormals","magic","looping","transcoef","firstFrame","lastFrame","framesPerSecond","bodies","degToRad","relPos","relRot","relScale","parentObjInd","model","radVec","degX","degY","degZ","setFrameAndFollowing","animationFrameIndex","infos","c","setOpacityAndFollowing","value","animationClip","AnimClip","lines","lineIndex","content","l","trim","numOfModels","parseInt","line","parseFrameBlock","parseObjectBlock","parseLine","frameStep","subObj","AnimSubObj","slice","lwoBuffer","getResource","LWOLoader","lenInfos","lenFrames","numOfInformationChannels","numOfKeyframes","frameNum","loadModels","root","getPath","entityType","AnimationEntityType","polyname","polykey","activity","act","file","isLws","animation","LWSCLoader","fontImageData","cols","rows","letters","chars","maxCharWidth","getActualCharacterWidth","rowPixelIndex","colPixelIndex","charHeight","extractData","actualWidth","startX","startY","alpha","p","createTextImage","text","letter","charAt","letterImg","letterX","letterImgData","img","putImageData","startLoadingFromCache","startLoading","startLoadingFromUrl","wad0Url","wad1Url","InitLoadingMessage","msg","worker","onmessage","event","hasOwnProperty","onMessage","configuration","cfg","onInitialLoad","totalResources","onCacheMissed","resourceByName","assetName","assetObj","onAssetLoaded","assetIndex","loadingTimeSeconds","onLoadDone","postMessage","lBasename","resourceName","lName","getImageData","imageName","lImageName","getImage","textureName","lTextureName","lSharedTextureName","texture","needsUpdate","getMap","getAnimationEntityType","aeFilename","cfgRoot","AnimEntityLoader","getBitmapFont","BitmapFont","withContext","style","background","hide","setZIndex","zIndex","String","compareZ","layerA","layerB","aIndex","bIndex","resize","redraw","isActive","onRedraw","show","visibility","toCanvasCoords","windowX","windowY","clientRect","getBoundingClientRect","left","top","handlePointerEvent","eventType","handleKeyEvent","handleWheelEvent","fixedWidth","SPRITE_RESOLUTION_WIDTH","fixedHeight","SPRITE_RESOLUTION_HEIGHT","toScaledCoords","cx","cy","scaleX","scaleY","scale","ScreenLayer","cursorName","createCursor","curUrl","URL","revokeObjectURL","curImg","toDataURL","ScaledLayer","SelectionType","screen","gameCanvasContainer","addEventListener","isInRect","preventDefault","nonBubblingClone","PointerEvent","type","bubbles","clientX","clientY","pointerType","button","ctrlKey","metaKey","shiftKey","layers","sort","some","WheelEvent","deltaX","deltaY","deltaZ","ratio","getElementById","eventMgr","EventManager","window","onWindowResize","cursorLayer","addLayer","CursorLayer","layer","appendChild","maxWidth","offsetWidth","maxHeight","offsetHeight","idealHeight","round","firstLayer","rect","right","bottom","font","fillText","setLoadingMessage","enableGraphicMode","imgBackground","imgProgress","screenZoom","loadingBarWidth","drawImage","setLoadingState","BaseScreen","scrollAffected","needsRedraw","hover","pressed","actionName","targetIndex","checkHover","sx","sy","onHoverChange","checkSetPressed","setReleased","draw","labelImgLo","labelImgHi","loFont","label","hiFont","autoCenter","position","target","MainMenuBaseItem","imgNormal","imgHover","imgPressed","tooltip","menuCfg","items","scrollY","fullName","title","menuFont","menuImage","titleImage","item","MainMenuLabelButton","MainMenuIconButton","displayTitle","index","absY","MAIN","showMainMenu","selectLevel","levelKey","canScroll","levelCfg","imgActive","imgInactive","imgCross","unlocked","frontEndX","frontEndY","menuBMP","frontEndOpen","area","w","h","imgFirstLine","imgSecondLine","setFirstLine","setSecondLine","modeLevel","levelsCfg","levelTextCfg","LevelTextCfg","MainMenuPanel","panelImgData","panelPos","levelTextWindow","MainMenuWindow","level","tutorial","levelsByName","levelButton","MainMenuLevelButton","MainMenuLayer","winCfg","panelCfg","onLevelSelected","menus","LevelSelectLayer","showLevelSelection","levelName","Stats","stats","setMode","domElement","body","renderStart","begin","renderDone","end","dropPosAngleDeg","dropPosDist","selfPowered","aeFile","getByName","buildingType","TOOLSTATION","TELEPORT_PAD","UPGRADE","POWER_STATION","SUPPORT","REFINERY","GEODOME","Building","EntityType","sequenceIntervals","getPosition","copy","getRotation","rotation","onDiscover","visible","publishEvent","blockedEvents","includes","eventKey","isLocal","eventListener","callback","indexOf","splice","registerEventListener","entityKey","GameEvent","job","WorldEvent","JobCreateEvent","JobEvent","JobDeleteEvent","numRequested","RaiderRequested","collectType","CollectEvent","surface","SpawnDynamiteEvent","collectable","spawnPosition","SpawnMaterialEvent","entity","EntityAddedEvent","EntityRemovedEvent","JobType","JobState","CollectableType","CollectTargetType","fulfiller","jobstate","OPEN","assign","unassign","cancel","CANCELED","stopJob","isQualified","onJobComplete","COMPLETE","CARRY","isInArea","pos","sub","JOB_ACTION_RANGE","carries","getTargetPos","getTargetType","getCollectableType","CRYSTAL","GameState","numCrystal","EventBus","ORE","numOre","BUILDING_SITE","targetSite","addItem","Job","MOVE","lengthSq","RAIDER_SPEED","collectableType","targetPos","complete","resetTarget","targetBuilding","site","getClosestSiteThatRequires","targetType","getClosestBuildingByType","getTargetBuildingTypes","getDropPosition","unAssign","collectablesUndiscovered","collectables","CollectJob","BaseEntity","GameResultState","SurfaceSelectedEvent","LocalEvent","building","BuildingSelected","raider","RaiderSelected","vehicle","VehicleSelected","EntityDeselected","poly","animationTimeout","selectionFrame","pickSphere","pickSphereRadius","selectionFrameSize","carryJoint","setActivity","onAnimationDone","iterations","clearTimeout","remove","children","polyModel","clone","add","polyPart","parentInd","animate","frameIndex","undefined","Array","isArray","mat","setTimeout","createPickSphere","setFromObject","getCenter","userData","selectable","ctx","strength","selectionMaterial","depthTest","set","targetSurface","isExplodable","getDigPositions","DYNAMITE","ignite","worldMgr","sceneManager","scene","getCenterWorld","lookAt","collapse","AnimEntity","resource2","mesh2","emissive","depthWrite","resource","mesh","interval","clearInterval","CollectableEntity","WALL_TYPE","reset","resultState","RUNNING","levelFullName","numBrick","usedCrystals","neededCrystals","airlevel","selectedEntities","selectionType","buildings","buildingsUndiscovered","raiders","raidersUndiscovered","requestedRaiders","vehicles","vehiclesUndiscovered","buildingSites","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","remainingCaverns","levelStartTime","levelStopTime","getBuildingsByType","matches","buildingTypes","targetBuildings","closest","minDist","bPos","dist","needs","selectEntities","entities","deselect","select","len","GROUP","getSelectionType","getMaxRaiders","MAX_RAIDER_BASE","ADDITIONAL_RAIDER_PER_SUPPORT","discoverSurface","minX","TILESIZE","minZ","maxX","maxZ","discoverEntities","undiscovered","discovered","dropMaterial","quantity","Dynamite","Crystal","Ore","maxFps","debugHelper","DebugHelper","renderer","antialias","setClearColor","amb","cursorTorchlight","camera","controls","mouseButtons","LEFT","MIDDLE","RIGHT","selectEntitiesByRay","rx","ry","raycaster","setFromCamera","intersects","intersectObjects","terrain","floorGroup","selected","object","selectEntitiesInFrustum","r1x","r1y","r2x","r2y","startPoint","endPoint","EPSILON","updateProjectionMatrix","updateMatrixWorld","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","setFromMatrixPosition","matrixWorld","unproject","vectemp1","vectemp2","vectemp3","normalize","deep","MAX_VALUE","multiplyScalar","frustum","planes","setFromCoplanarPoints","normal","containsPoint","getSelectionCenter","startRendering","renderInterval","animRequest","requestAnimationFrame","render","stopRendering","cancelAnimationFrame","options","shaping","matIndex","drillable","explodable","reinforcable","getByNum","typeNum","SurfaceType","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","GROUND","POWER_PATH","POWER_PATH_SITE","requiredTools","requiredSkills","DRILL","SurfaceJobType","REINFORCE","BLOW","CLEAR_RUBBLE","workType","SURFACE","hasTools","hasSkills","digPos","getTerrainHeight","reinforce","reduceRubble","dynamite","SurfaceJob","placedItems","placed","surfaceType","updateTexture","heightOffset","containedOres","containedCrystals","reinforced","jobs","surfaceRotation","seamLevel","fallinTimeout","fallinGrp","wallType","needsMeshUpdate","surfaceJob","hasJobType","discoverNeighbors","foundCave","surf","getSurfaceOrNull","cancelJobs","getSurface","isSupported","updateSurfaceMeshes","updateWorldMatrix","addCollectable","dropContainedOre","dropAmount","updateJobColor","surfLeft","surfTopLeft","surfTop","surfTopRight","surfRight","surfBottomRight","surfBottom","surfBottomLeft","isHighGround","surf1","surf2","surf3","updateMesh","force","topLeftVertex","topRightVertex","bottomLeftVertex","bottomRightVertex","WALL","WEIRD_CREVICE","updateGeometry","cancelReinforceJobs","j","textureSet","texturebasename","updatePowerPathTexture","CORNER","INVERTED_CORNER","flipY","accessMaterials","isPath","pathSum","PI","uvOffset","Boolean","dispose","uv","avgHeight","sum","cnt","args","faceVertexUvs","faces","HEIGHT_MULTIPLER","computeFaceNormals","shininess","setHex","hasRubble","isWalkable","isDrillable","isReinforcable","isDigable","digPosition","setFallinLevel","fallinLevel","originPos","findFallInOrigin","findFallInTarget","scheduleFallin","targetX","targetY","createFallin","dx","dy","rotateOnAxis","atan2","PathMap","PredugMap","surfaces","roofGroup","BUILDING","bSurf","getSurfaceFromWorld","worldPosition","Surface","leftSurface","topSurface","rightSurface","bottomSurface","leftSurface2","topSurface2","rightSurface2","bottomSurface2","loadTerrain","levelConf","tileSize","Terrain","themeName","terrainMap","pathMap","surfaceMap","predugMap","cryOreMap","fallinMap","erodeMap","surfaceTypeNum","predugLevel","CAVERN_EXPOSED","SLUG_HOLE_EXPOSED","SLUG_HOLE_HIDDEN","CAVERN_HIDDEN","pathMapLevel","NONE","RUBBLE","currentCryOre","FulfillerActivity","speed","getSpeed","moveToTarget","isOnRubble","changeActivity","MOVING_RUBBLE","MOVING","step","setLength","onChangeDone","workInterval","jobSubPos","tools","skills","carryTarget","work","bind","NATIVE_FRAMERATE","surfaceJobType","DRILLING","vec","applyAxisAngle","STANDING","jobPos","SHOVELING","dropItem","PICKING","pickupItem","DROPPING","setJob","toolnames","skillKeys","onSelect","MovableEntity","PILOT","isNaN","isOnPath","RAIDER","applyMatrix4","FulfillerEntity","powerSwitch","powerLink","spawning","dropPos","applyEuler","isPowered","loadObjectList","objectListConf","values","olObject","lTypeName","worldX","xPos","worldZ","yPos","worldY","radHeading","heading","update","setTorchPosition","Raider","BuildingEntity","path1Surface","pathOffset","path2Surface","debug","onLevelComplete","registers","fill","timers","scriptLines","statements","macrosByName","labelsByName","halted","programCounter","messages","messagePermit","checkRegister","register","num","Error","checkRegisterValue","getR","setR","addR","setTimer","timer","Date","getTime","getTimer","setLevelCompleted","setLevelFail","FAILED","setTutorialFlags","setMessagePermit","messagesAllowed","setBuildingsUpgradeLevel","typeName","setToolStoreLevel","setTeleportPadLevel","setPowerStationLevel","setBarracksLevel","getToolStoresBuilt","getMinifiguresOnLevel","getCrystalsCurrentlyStored","getObjectiveSwitch","setMessageTimerValues","arg1","arg2","arg3","getMessageTimer","cameraUnlock","setMessage","messageNumber","arrowDisabled","txt","setCameraGotoTutorial","getTutorialBlockIsGround","getTutorialBlockIsPath","getOxygenLevel","getObjectiveShowing","addPoweredCrystals","disallowAll","getPoweredPowerStationsBuilt","getPoweredBarracksBuilt","getRecordObjectAtTutorial","getHiddenObjectsFound","callMethod","methodName","methodArgs","setRegisterMatch","addRegisterMatch","getRegisterMatch","setTimerMatch","getTimerMatch","lMethodName","memberName","apply","conditional","conditionResult","executeStatement","expression","invoke","argValues","comparator","jump","execute","statement","nerpScript","nerpRunner","NerpRunner","includeName","includedRunner","NerpParser","concat","firstLine","macroLines","mLine","append","macroLine","macroCall","replaceMacros","labelMatch","preProcess","labelName","macro","RegExp","number","opSplit","brackets","spaceSplit","jumpMatch","spawnRaiderInterval","nerpInterval","SceneManager","distance","checkSpawnRaiders","CHECK_SPANW_RAIDER_TIMER","DynamiteJob","setup","gameScreen","TerrainLoader","ObjectListLoader","nerpFile","nerpScriptContent","nerpMsgFile","nerpMessages","onLevelEnd","now","stop","setSize","getTerrainIntersectionPoint","point","intersect","intersectObject","spawnBuildings","station","walkOutPos","MoveJob","selectStart","setWorldManager","worldManager","startSelection","changeSelection","screenX","screenY","clearRect","strokeStyle","lineWidth","strokeRect","abs","intersectionPoint","getTerrainPositionFromEvent","SECONDARY","createSurfaceJob","dispatchEvent","t","surfJob","parent","relX","relY","hidden","disabled","addChild","child","updatePosition","onClick","isInactive","inRect","updated","checkClick","checkRelease","release","notifyRedraw","btnCfg","normalFile","highlightFile","pressedFile","buttonType","textAlign","BaseElement","imgHoverName","imgPressedName","Button","panelName","panelsCfg","buttonsCfg","imgName","xIn","yIn","xOut","yOut","buttons","movedIn","panelButtonsCfg","addButton","updateAnimation","onDone","diffX","diffY","sign","sqrt","setMovedIn","toggleState","PANEL_ANIMATION_MULTIPLIER","btnPriorities","Panel","btnGoto","btnClose","overlay","btnToggle","btnMap","btnTagged","imgAir","btnOre","btnCrystal","imgNoCrystal","imgSmallCrystal","imgUsedCrystal","imgOre","updateQuantities","BRICK","curX","curY","imgCrystal","panel","menuItemGroup","itemKey","disabledFile","menuItemCfg","tooltipDisabled","hotkey","imgDisabled","subPanels","addSubPanel","numOfItems","childPanel","IconSubPanel","mainPanel","selectSubPanel","targetPanel","subPanel","onBackPanel","countMenuItems","backBtn","InterfaceBackButton","frameImgCfg","imgNameWoBackName","addMenuItem","menuItem","MenuItem","isPowerPath","neededByType","assignedByType","onSiteByType","assigned","needed","checkComplete","neededType","CompletePowerPathJob","buildingPanel","smallVehiclePanel","largeVehiclePanel","selectWallPanel","selectFloorPanel","selectRubblePanel","selectBuildingPanel","selectRaiderPanel","selectVehiclePanel","teleportRaider","buildingItem","smallVehicleItem","largeVehicleItem","itemDrill","selectedSurface","itemReinforce","itemDynamite","itemDeselect","pathItem","ore","BuildingSite","clearRubbleItem","IconPanel","rootElement","panelEncyclopedia","addPanel","panelInfoDock","InfoDockPanel","panelCameraControl","panelPriorityList","panelInformation","panelTopPanel","TopPanel","panelIcons","MainPanel","panelCrystalSideBar","PanelCrystalSideBar","panelMessagesSide","panelMessages","MessagePanel","panelRadar","RadarPanel","hit","scheduleJobs","JOB_SCHEDULE_INTERVAL","closestRaider","minDistance","gameLayer","GameLayer","selectionLayer","SelectionLayer","guiLayer","GuiLayer","WorldManager","jobSupervisor","Supervisor","startLevel","conf","imgNormalFilepath","imgHoverFilepath","imgPressedFilepath","imgDisabledFilepath","resultIndex","resultLastIndex","images","boxes","fonts","texts","uncoverTimeout","titleFont","backgroundImg","wallpaper","filePath","boxImages","fontKey","labelFont","backFont","resultsLayer","btnSave","btnAdvance","descriptionTextLayer","btnLayer","RewardScreenButton","saveButton","advanceButton","onAdvance","uncoverResult","levelFullNameImg","resultText","quitText","completeText","failedText","resultValues","percentString","timeString","gameResultTextImg","box","vertSpacing","descriptionTextImg","textPos","tx","ty","actual","lessIsMore","padLeft","padding","timediffMs","seconds","ss","minutes","mm","loadingScreen","LoadingScreen","wadfileSelectModal","backdrop","keyboard","btnStartFile","wad0File","createObjectURL","files","wad1File","btnStartUrl","wda1Url","mainMenuScreen","MainMenuScreen","GameScreen","rewardScreen","RewardScreen"],"mappings":"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","file":"270.index.js","sourcesContent":["export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"index.worker.js\");\n}\n","export class InitLoadingMessage {\n\n    wad0FileUrl: string;\n    wad1FileUrl: string;\n\n    constructor(wad0FileUrl: string, wad1FileUrl: string) {\n        this.wad0FileUrl = wad0FileUrl;\n        this.wad1FileUrl = wad1FileUrl;\n    }\n\n}\n","/**\n * creates a new context with the specified dimensions.\n * @param width: the desired width of the new context\n * @param height: the desired height of the new context\n * @returns RenderingContext the newly created canvas\n */\nexport function createContext(width, height) {\n    if (width < 1 || height < 1) {\n        console.error('Can\\'t create context with size ' + width + ' x ' + height);\n        return createDummyContext(64, 64);\n    }\n    const canvas = document.createElement('canvas');\n    canvas.setAttribute('width', width);\n    canvas.setAttribute('height', height);\n    const context = canvas.getContext('2d');\n    context.width = width;\n    context.height = height;\n    return context;\n}\n\n/**\n * This method is intended to increase stability by providing an (ugly) placeholder image in case the right one is missing\n * @param width: expected width of the original image\n * @param height: expected height of the original image\n */\nexport function createDummyContext(width, height) {\n    const result = createContext(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            if (x / 16 % 2 === y / 16 % 2) {\n                result.fillStyle = 'rgb(0,255,255)';\n            } else {\n                result.fillStyle = 'rgb(255,0,255)';\n            }\n            result.fillRect(x, y, 16, 16);\n        }\n    }\n    return result;\n}\n\nexport function createDummyImgData(width, height) {\n    const result = new ImageData(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            const e = x / 16 % 2 === y / 16 % 2;\n            for (let px = x; px < x + 16; px++) {\n                for (let py = y; py < y + 16; py++) {\n                    setPixel(result, px, py, e ? 0 : 255, e ? 255 : 0, 255);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport function setPixel(imgData, x, y, r, g, b, a = 255) {\n    const n = (y * imgData.width + x) * 4;\n    imgData.data[n] = r;\n    imgData.data[n + 1] = g;\n    imgData.data[n + 2] = b;\n    imgData.data[n + 3] = a;\n}\n\nexport function getPixel(imgData, x, y) {\n    const n = (y * imgData.width + x) * 4;\n    return { r: imgData.data[n], g: imgData.data[n + 1], b: imgData.data[n + 2], a: imgData.data[n + 3] };\n}\n\nexport function copyPixel(originData, targetData, x, y) {\n    const p = getPixel(originData);\n    setPixel(targetData, p.r, p.g, p.b, p.a);\n}\n","export function getPath(url: string) {\n    if (!url) return url;\n    let strUrl = url.toString().replace(/\\\\/g, '/');\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1);\n    const lastInd = strUrl.lastIndexOf('/');\n    strUrl = strUrl.substring(0, lastInd + 1);\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1);\n    return strUrl;\n}\n\nexport function getFilename(url: string) {\n    if (!url) return url;\n    let strUrl = url.toString().replace(/\\\\/g, '/');\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1);\n    const lastInd = strUrl.lastIndexOf('/');\n    return strUrl.substring(lastInd + 1);\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key]);\n        obj = obj ? obj[0] : obj;\n    });\n    return obj;\n}\n","export function getFilename(url: string) {\n    if (!url) return url;\n    let strUrl = url.toString().replace(/\\\\/g, '/');\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1);\n    const lastInd = strUrl.lastIndexOf('/');\n    return strUrl.substring(lastInd + 1);\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key]);\n        obj = obj ? obj[0] : obj;\n    });\n    return obj;\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '');\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/');\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max);\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2;\n}\n","export class AnimationEntityType {\n\n    carryNullName: string = '';\n    mediumPoly: {} = {};\n    highPoly: {} = {};\n    fPPoly: {} = {};\n    activities = {};\n\n}\n","/**\n * @author Marcus-Bizal https://github.com/marcbizal\n * patched by Scarabol\n *\n * This loader loads LWOB files exported from LW6.\n *\n * Support\n *  -\n */\n\nimport { BufferAttribute, BufferGeometry, Color, Mesh, MeshPhongMaterial, Vector3 } from 'three';\nimport { decodeFilepath, decodeString, getFilename } from '../core/Util';\nimport { ResourceManager } from './ResourceManager';\n\n// HEADER SPEC //\nconst LWO_MAGIC = 0x4C574F42; // \"LWOB\"\nconst OFF_MAGIC = 8;\n\n/********************/\n/* TYPE SIZES START */\n/********************/\n\nconst ID4_SIZE = 4;\nconst I1_SIZE = 1;\nconst I2_SIZE = 2;\nconst I4_SIZE = 4;\nconst F4_SIZE = 4;\n\nconst COL4_SIZE = 4;\nconst VEC12_SIZE = 12;\nconst IP2_SIZE = 2;\nconst FP4_SIZE = 4;\nconst DEG4_SIZE = 4;\n\n/********************/\n/*  TYPE SIZES END  */\n/********************/\n\n/*********************/\n/* CHUNK TYPES START */\n/*********************/\n\nconst LWO_FORM = 0x464F524D;\nconst LWO_PNTS = 0x504E5453;\nconst LWO_SFRS = 0x53524653;\nconst LWO_POLS = 0x504F4C53;\nconst LWO_CRVS = 0x43525653;\nconst LWO_PCHS = 0x50434853;\nconst LWO_SURF = 0x53555246;\n\nconst CHUNK_HEADER_SIZE = 8;\nconst SUBCHUNK_HEADER_SIZE = 6;\n\n/*********************/\n/*  CHUNK TYPES END  */\n/*********************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\nconst SURF_COLR = 0x434F4C52;\nconst SURF_FLAG = 0x464C4147;\n\n// Base Shading Values (Fixed Point)\nconst SURF_LUMI = 0x4C554D49;\nconst SURF_DIFF = 0x44494646;\nconst SURF_SPEC = 0x53504543;\nconst SURF_REFL = 0x5245464C;\nconst SURF_TRAN = 0x5452414E;\n\n// Base Shading Values (Floating Point)\nconst SURF_VLUM = 0x564C554D;\nconst SURF_VDIF = 0x56444946;\nconst SURF_VSPC = 0x56535043;\nconst SURF_VRFL = 0x5646524C;\nconst SURF_VTRN = 0x5654524E;\n\nconst SURF_GLOS = 0x474C4F53;\nconst SURF_RFLT = 0x52464C54;\nconst SURF_RIMG = 0x52494D47;\nconst SURF_RIND = 0x52494E44;\nconst SURF_EDGE = 0x45444745;\nconst SURF_SMAN = 0x534D414E;\n\n/**************************/\n/*  SURF DEFINITIONS END  */\n/**************************/\n\n/*****************************/\n/* TEXTURE DEFINITIONS START */\n/*****************************/\n\n// Start of Definition\nconst SURF_CTEX = 0x43544558;\nconst SURF_DTEX = 0x44544558;\nconst SURF_STEX = 0x53544558;\nconst SURF_RTEX = 0x52544558;\nconst SURF_TTEX = 0x54544558;\nconst SURF_LTEX = 0x4C544558;\nconst SURF_BTEX = 0x42544558;\n\n// Flags\nconst SURF_TFLG = 0x54464C47;\n\n// Location and Size\nconst SURF_TSIZ = 0x5453495A;\nconst SURF_TCTR = 0x54435452;\nconst SURF_TFAL = 0x5446414C;\nconst SURF_TVEL = 0x5456454C;\n\n// Color\nconst SURF_TCLR = 0x54434C52;\n\n// Value\nconst SURF_TVAL = 0x54434C52;\n\n// Bump Amplitude\nconst SURF_TAMP = 0x54414D50;\n\n// Image Map\nconst SURF_TIMG = 0x54494D47;\n\n// Image Alpha\nconst SURF_TALP = 0x54414C50;\n\n// Image Wrap Options\nconst SURF_TWRP = 0x54575250;\n\n// Antialiasing Strength\nconst SURF_TAAS = 0x54414153;\n\n// Texture Opacity\nconst SURF_TOPC = 0x544F5043;\n\n/*****************************/\n/*  TEXTURE DEFINITIONS END  */\n/*****************************/\n\n/*************************/\n/* FLAG DEFINITION START */\n/*************************/\n\nconst LUMINOUS_BIT = 1;\nconst OUTLINE_BIT = 2;\nconst SMOOTHING_BIT = 4;\nconst COLORHIGHLIGHTS_BIT = 8;\nconst COLORFILTER_BIT = 16;\nconst OPAQUEEDGE_BIT = 32;\nconst TRANSPARENTEDGE_BIT = 64;\nconst SHARPTERMINATOR_BIT = 128;\nconst DOUBLESIDED_BIT = 256;\nconst ADDITIVE_BIT = 512;\nconst SHADOWALPHA_BIT = 1024;\n\n/*************************/\n/*  FLAG DEFINITION END  */\n/*************************/\n\n/*************************/\n/* TFLG DEFINITION START */\n/*************************/\n\nconst XAXIS_BIT = 1;\nconst YAXIS_BIT = 2;\nconst ZAXIS_BIT = 4;\nconst WORLDCOORDS_BIT = 8;\nconst NEGATIVEIMAGE_BIT = 16;\nconst PIXELBLENDING_BIT = 32;\nconst ANTIALIASING_BIT = 64;\n\n/*************************/\n/*  TFLG DEFINITION END  */\n\n/*************************/\n\nfunction getVector3AtOffset(view, offset) {\n    let vector = new Vector3();\n    vector.x = view.getFloat32(offset);\n    vector.y = view.getFloat32(offset + F4_SIZE);\n    vector.z = view.getFloat32(offset + (F4_SIZE * 2));\n    return vector;\n}\n\nfunction planarMapUVS(geometry, vertices, uvs, indices, materialIndex, size, center, flags) {\n    // Check to ensure that one of the flags is set, if not throw an error.\n    const mask = XAXIS_BIT | YAXIS_BIT | ZAXIS_BIT;\n    if (flags & mask) {\n        for (let group of geometry.groups) {\n            if (group.materialIndex !== materialIndex) continue;\n\n            for (let i = group.start; i < group.start + group.count; i++) {\n\n                let vertexIndex = indices[i] * 3;\n                let x = vertices[vertexIndex] - center.x;\n                let y = vertices[vertexIndex + 1] - center.y;\n                let z = vertices[vertexIndex + 2] - center.z;\n\n                let uvIndex = indices[i] * 2;\n                let u = 0;\n                let v = 0;\n\n                if (flags & XAXIS_BIT) {\n                    u = z / size.z + 0.5;\n                    v = y / size.y + 0.5;\n                } else if (flags & YAXIS_BIT) {\n                    u = x / size.x + 0.5;\n                    v = z / size.z + 0.5;\n                } else if (flags & ZAXIS_BIT) {\n                    u = x / size.x + 0.5;\n                    v = y / size.y + 0.5;\n                }\n\n                uvs[uvIndex] = u;\n                uvs[uvIndex + 1] = v;\n            }\n        }\n    } else {\n        // console.warn(\"LWOLoader.planarMapUVS: No axis bit is set!\"); // TODO what is this about\n    }\n}\n\nexport class LWOLoader {\n\n    COUNTER_CLOCKWISE: false;\n\n    path: string = '';\n    verbose: boolean = false;\n    materials: MeshPhongMaterial[] = [];\n    geometry: BufferGeometry = new BufferGeometry();\n    vertices: Float32Array = null;\n    indices: Uint16Array = null;\n    uvs: Float32Array = null;\n\n    constructor(path: string, verbose: boolean = false) {\n        this.verbose = verbose;\n        this.path = path;\n        if (this.verbose) console.log('LWO path: ' + this.path);\n    }\n\n    parsePoints(view, chunkOffset, chunkSize) {\n        if (chunkSize % VEC12_SIZE !== 0) {\n            console.error('LWOLoader.parse: F12 does not evenly divide into chunk size (' + chunkSize + '). Possible corruption.');\n            return;\n        }\n\n        let numVertices = (chunkSize / F4_SIZE) / 3;\n        this.vertices = new Float32Array(numVertices * 3);\n        this.uvs = new Float32Array(numVertices * 2);\n\n        for (let i = 0; i < numVertices; i++) {\n            let vertexIndex = i * 3;\n            let vertexOffset = vertexIndex * F4_SIZE;\n            this.vertices[vertexIndex] = view.getFloat32(chunkOffset + vertexOffset); \t\t\t\t// x\n            this.vertices[vertexIndex + 1] = view.getFloat32(chunkOffset + vertexOffset + F4_SIZE); \t// y\n            this.vertices[vertexIndex + 2] = view.getFloat32(chunkOffset + vertexOffset + (F4_SIZE * 2)); \t// z\n        }\n    }\n\n    parseSurfaceNames(buffer, chunkOffset, chunkSize) {\n        let textChunk = new TextDecoder().decode(new Uint8Array(buffer, chunkOffset, chunkSize));\n        let surfaceNames = textChunk.split('\\0').filter(function (s) {\n            return s !== '';\n        });\n\n        for (let i = 0; i < surfaceNames.length; i++) {\n            const new_material = new MeshPhongMaterial();\n            new_material.name = surfaceNames[i];\n\n            this.materials.push(new_material);\n        }\n        if (this.verbose) console.log('LWO contains ' + this.materials.length + ' materials with following names: ' + surfaceNames);\n    }\n\n    parsePolygons(view, chunkOffset, chunkSize) {\n        // Gather some initial data so that we can get the proper size\n        let totalNumIndices = 0;\n        let offset = 0;\n        while (offset < chunkSize) {\n            const numIndices = view.getInt16(chunkOffset + offset);\n            const materialIndex = view.getInt16(chunkOffset + offset + 2 + (numIndices * 2));\n\n            this.geometry.addGroup(totalNumIndices, (numIndices - 2) * 3, materialIndex - 1);\n\n            totalNumIndices += (numIndices - 2) * 3;\n            offset += 4 + (numIndices * 2);\n        }\n\n        offset = 0;\n        let currentIndex = 0;\n        this.indices = new Uint16Array(totalNumIndices);\n        while (offset < chunkSize) {\n            let numIndices = view.getInt16(chunkOffset + offset);\n\n            offset += 2;\n\n            let faceIndices = new Int16Array(numIndices);\n            for (let i = 0; i <= numIndices; i++) {\n                faceIndices[i] = view.getInt16(chunkOffset + offset + (i * 2));\n            }\n\n            for (let i = 0; i < numIndices - 2; i++) {\n                if (this.COUNTER_CLOCKWISE) {\n                    this.indices[currentIndex++] = faceIndices[0];\n                    this.indices[currentIndex++] = faceIndices[i + 2];\n                    this.indices[currentIndex++] = faceIndices[i + 1];\n                } else {\n                    this.indices[currentIndex++] = faceIndices[0];\n                    this.indices[currentIndex++] = faceIndices[i + 1];\n                    this.indices[currentIndex++] = faceIndices[i + 2];\n                }\n            }\n\n            offset += 2 + (numIndices * 2);\n        }\n    }\n\n    parseSurface(view, buffer, chunkOffset, chunkSize) {\n        let offset = 0;\n        while (view.getUint8(chunkOffset + offset) !== 0) offset++;\n\n        let materialName = decodeString(new Uint8Array(buffer, chunkOffset, offset));\n        if (this.verbose) console.log('Parsing surface: ' + materialName);\n        let materialIndex = -1;\n        let material: MeshPhongMaterial = null;\n\n        let textureFlags = 0;\n        let textureSize = new Vector3(0, 0, 0);\n        let textureCenter = new Vector3(0, 0, 0);\n        // let textureFalloff = new Vector3(0, 0, 0);\n        // let textureVelocity = new Vector3(0, 0, 0);\n\n        for (let i = 0; i < this.materials.length; i++) {\n            if (this.materials[i].name === materialName) {\n                materialIndex = i;\n                material = this.materials[i];\n            }\n        }\n\n        if (!material) {\n            console.error('LWOLoader.parse: Surface in SURF chunk does not exist in SRFS');\n            return;\n        }\n\n        while (offset < chunkSize) {\n            const subchunkOffset = chunkOffset + offset;\n            if (view.getUint8(subchunkOffset) === 0) {\n                offset++;\n            } else {\n                const subchunkType = view.getInt32(subchunkOffset);\n                const subchunkSize = view.getInt16(subchunkOffset + ID4_SIZE);\n\n                if (this.verbose) console.log('Parsing subchunk ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize);\n\n                switch (subchunkType) {\n                    case SURF_COLR:\n                        const colorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ];\n                        material.color = new Color().fromArray(colorArray);\n                        if (this.verbose) console.log('Material color (COLR): ' + colorArray.join(' '));\n                        break;\n                    case SURF_FLAG:\n                        const flags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE);\n                        if (this.verbose) console.log('Flags (FLAG): ' + flags.toString(2));\n                        break;\n                    case SURF_LUMI:\n                        const luminosity = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255;\n                        if (this.verbose) console.log('Luminosity (LUMI): ' + luminosity);\n                        break;\n                    case SURF_DIFF:\n                        const diffuse = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255;\n                        if (this.verbose) console.log('Diffuse (DIFF): ' + diffuse);\n                        break;\n                    case SURF_SPEC:\n                        const specular = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255;\n                        // material.specular = material.color.multiplyScalar(specular);\n                        if (this.verbose) console.log('Specular (SPEC): ' + specular);\n                        break;\n                    case SURF_REFL:\n                        let reflection = 0;\n                        if (reflection === SURF_VRFL) {\n                            reflection = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE);\n                        } else {\n                            reflection = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255;\n                        }\n                        material.reflectivity = reflection;\n                        if (this.verbose) console.log('Reflectivity (REFL): ' + material.reflectivity);\n                        break;\n                    case SURF_TRAN:\n                    case SURF_VTRN:\n                        let transparency = 0;\n                        if (subchunkType === SURF_VTRN) {\n                            transparency = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE);\n                        } else {\n                            transparency = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255;\n                        }\n                        material.opacity = 1 - transparency;\n                        if (this.verbose) console.log('Opacity (TRAN/VTRN): ' + material.opacity);\n                        if (transparency > 0) material.transparent = true;\n                        break;\n                    case SURF_VLUM:\n                        const luminosity2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE);\n                        if (this.verbose) console.log('Luminosity (VLUM): ' + luminosity2);\n                        break;\n                    case SURF_VDIF:\n                        let diffuse2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE);\n                        if (this.verbose) console.log('Diffuse (VDIF): ' + diffuse2);\n                        break;\n                    case SURF_VSPC:\n                        let specular2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE);\n                        // material.specular = material.color.multiplyScalar(specular2);\n                        if (this.verbose) console.log('Specular (VSPC): ' + specular2);\n                        break;\n                    case SURF_TFLG:\n                        textureFlags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE);\n                        if (this.verbose) console.log('Flags (TFLG): ' + textureFlags.toString(2));\n                        break;\n                    case SURF_TSIZ:\n                        textureSize = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE);\n                        if (this.verbose) console.log('Texture size (TSIZ): ' + textureSize.toArray().join(' '));\n                        break;\n                    case SURF_TCTR:\n                        textureCenter = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE);\n                        if (this.verbose) console.log('Texture center (TCTR): ' + textureCenter.toArray().join(' '));\n                        break;\n                    case SURF_CTEX:\n                    case SURF_DTEX:\n                    case SURF_STEX:\n                    case SURF_RTEX:\n                    case SURF_TTEX:\n                    case SURF_BTEX:\n                        const textureTypeName = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize));\n                        if (this.verbose) console.log('Texture typename: ' + textureTypeName);\n                        break;\n                    case SURF_TCLR:\n                        const textureColorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ];\n                        // const textureColor = new Color().fromArray(textureColorArray);\n                        // seems to be 0 0 0 anyway...\n                        if (this.verbose) console.log('Texture color (TCLR): ' + textureColorArray.join(' '));\n                        break;\n                    case SURF_TIMG:\n                        let textureFilepath = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize));\n                        if (this.verbose) console.log('Texture filepath (TIMG): ' + textureFilepath);\n                        if (textureFilepath === '(none)') break;\n                        let sequenceTexture = false;\n                        if (textureFilepath.endsWith(' (sequence)')) {\n                            sequenceTexture = true;\n                            textureFilepath = textureFilepath.substring(0, textureFilepath.length - ' (sequence)'.length);\n                        }\n                        let filename = getFilename(textureFilepath);\n                        const textureFilename = this.path + filename;\n                        if (sequenceTexture) {\n                            const match = textureFilename.match(/(\\D+)0+(\\d+)\\..+/);\n                            const basename = match[1];\n                            const seqStart = Number(match[2]);\n                            let sequenceNames = ResourceManager.filterEntryNames(basename);\n                            if (sequenceNames.length < 1) { // no match try shared path\n                                sequenceNames = ResourceManager.filterEntryNames('world/shared/' + getFilename(basename));\n                            }\n                            const lastNum = sequenceNames.length - 1;\n                            let seqNum = seqStart;\n                            setInterval(() => { // TODO need to keep track on these intervals?\n                                material.map = ResourceManager.getTexture(sequenceNames[seqNum - seqStart]);\n                                seqNum++;\n                                if (seqNum > lastNum) seqNum = seqStart;\n                            }, 1000 / 5); // TODO 5? FPS for texture animations?\n                            material.transparent = true;\n                        }\n                        material.map = ResourceManager.getTexture(textureFilename);\n                        material.alphaTest = material.transparent ? 0 : 0.5;\n                        material.color = null; // no need for color, when color map (texture) in use\n                        break;\n                    default: // TODO implement all LWO features\n                        if (this.verbose) console.warn('Found unrecognised SURF subchunk type ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize);\n                        break;\n                }\n\n                offset += SUBCHUNK_HEADER_SIZE + subchunkSize;\n            }\n        }\n\n        planarMapUVS(this.geometry, this.vertices, this.uvs, this.indices, materialIndex, textureSize, textureCenter, textureFlags);\n    }\n\n    parse(buffer: ArrayBuffer): Mesh {\n        const view = new DataView(buffer);\n\n        if (view.getUint32(0) !== LWO_FORM) {\n            console.error('LWOLoader.parse: Cannot find header.');\n            return;\n        }\n\n        const fileSize = view.getUint32(ID4_SIZE);\n        if (fileSize + CHUNK_HEADER_SIZE !== view.byteLength) {\n            console.warn('LWOLoader.parse: Discrepancy between size in header (' + (fileSize + CHUNK_HEADER_SIZE) + ' bytes) and actual size (' + view.byteLength + ' bytes).');\n        }\n\n        let magicOffset = ID4_SIZE + I4_SIZE;\n        if (view.getUint32(magicOffset) !== LWO_MAGIC) {\n            const magic = decodeString(new Uint8Array(buffer, magicOffset, ID4_SIZE));\n            console.error('LWOLoader.parse: Invalid magic ID (' + magic + ') in LWO header.');\n            return;\n        }\n\n        let cursor = 12;\n        while (cursor < view.byteLength) {\n            // Skip null byte padding\n            if (view.getUint8(cursor) === 0) {\n                cursor++;\n            } else {\n                const chunkType = view.getInt32(cursor);\n                const chunkSize = view.getInt32(cursor + ID4_SIZE);\n\n                cursor += CHUNK_HEADER_SIZE;\n\n                switch (chunkType) {\n                    case LWO_PNTS:\n                        this.parsePoints(view, cursor, chunkSize);\n                        break;\n                    case LWO_SFRS:\n                        this.parseSurfaceNames(buffer, cursor, chunkSize);\n                        break;\n                    case LWO_POLS:\n                        this.parsePolygons(view, cursor, chunkSize);\n                        break;\n                    case LWO_SURF:\n                        this.parseSurface(view, buffer, cursor, chunkSize);\n                        break;\n                    default:\n                        console.warn('Found unrecognised chunk type ' + decodeString(new Uint8Array(buffer, cursor - CHUNK_HEADER_SIZE, ID4_SIZE)) + ' at ' + cursor);\n                }\n\n                cursor += chunkSize;\n            }\n\n        }\n\n        this.geometry.setAttribute('position', new BufferAttribute(this.vertices, 3));\n        this.geometry.setAttribute('uv', new BufferAttribute(this.uvs, 2));\n        this.geometry.setIndex(new BufferAttribute(this.indices, 1));\n        this.geometry.computeVertexNormals();\n\n        return new Mesh(this.geometry, this.materials);\n    }\n}\n","import { ScreenLayer } from '../screen/ScreenLayer';\nimport { BaseScreen } from '../screen/BaseScreen';\n\n// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n\n}\n\nexport class EventManager {\n\n    constructor(screen: BaseScreen) {\n        screen.gameCanvasContainer.addEventListener('contextmenu', (event: MouseEvent) => {\n            if (screen.isInRect(event)) event.preventDefault();\n        });\n        ['pointermove', 'pointerdown', 'pointerup']\n            .forEach((eventType) => {\n                screen.gameCanvasContainer.addEventListener(eventType, (event: PointerEvent) => {\n                    if (!screen.isInRect(event)) return;\n                    event.preventDefault();\n                    // all event attibutes used by controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n                    const nonBubblingClone = new PointerEvent(event.type, {\n                        bubbles: false, // disable bubbling otherwise we'll trigger this same event handler again\n                        clientX: event.clientX,\n                        clientY: event.clientY,\n                        pointerType: event.pointerType,\n                        button: event.button,\n                        ctrlKey: event.ctrlKey,\n                        metaKey: event.metaKey,\n                        shiftKey: event.shiftKey,\n                    });\n                    screen.layers.filter(l => l.isActive())\n                        .sort((a, b) => ScreenLayer.compareZ(a, b))\n                        .some(l => l.handlePointerEvent(eventType, nonBubblingClone));\n                });\n            });\n        ['keydown', 'keyup']\n            .forEach((eventType) => {\n                screen.gameCanvasContainer.addEventListener(eventType, (event: KeyboardEvent) => {\n                    // event.preventDefault(); // otherwise page reload with F5 stops working (may be intended in future)\n                    screen.layers.filter(l => l.isActive())\n                        .sort((a, b) => ScreenLayer.compareZ(a, b))\n                        .some(l => l.handleKeyEvent(eventType, event));\n                });\n            });\n        screen.gameCanvasContainer.addEventListener('wheel', (event: WheelEvent) => {\n            if (!screen.isInRect(event)) return;\n            // all event attibutes used by controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n            const nonBubblingClone = new WheelEvent(event.type, {\n                bubbles: false, // disable bubbling otherwise we'll trigger this same event handler again\n                clientX: event.clientX,\n                clientY: event.clientY,\n                deltaX: event.deltaX,\n                deltaY: event.deltaY,\n                deltaZ: event.deltaZ,\n                button: event.button,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey,\n                shiftKey: event.shiftKey,\n            });\n            screen.layers.filter(l => l.isActive())\n                .sort((a, b) => ScreenLayer.compareZ(a, b))\n                .some(l => l.handleWheelEvent('wheel', nonBubblingClone));\n        });\n    }\n\n}\n","import { AnimSubObj } from './AnimSubObj';\n\nexport class AnimClip {\n\n    looping: boolean = false;\n    transcoef: number = 1;\n    firstFrame: number = null;\n    lastFrame: number = null;\n    framesPerSecond: number = null;\n    bodies: AnimSubObj[] = [];\n\n}\n","import { Euler, MathUtils, Object3D, Vector3 } from 'three';\nimport degToRad = MathUtils.degToRad;\n\nexport class AnimSubObj {\n\n    name: string = '';\n    filename: string = '';\n    relPos: Vector3[] = [];\n    relRot: Euler[] = [];\n    relScale: Vector3[] = [];\n    opacity: number[] = [];\n    parentObjInd: number = null;\n    model: Object3D = null;\n\n    radVec(degX: number, degY: number, degZ: number) {\n        return new Euler(degToRad(degY), degToRad(degX), degToRad(degZ), 'YXZ');\n    }\n\n    setFrameAndFollowing(animationFrameIndex: number, lastFrame: number, infos: number[]) {\n        this.relPos[animationFrameIndex] = new Vector3(infos[0], infos[1], infos[2]);\n        this.relRot[animationFrameIndex] = this.radVec(infos[3], infos[4], infos[5]);\n        this.relScale[animationFrameIndex] = new Vector3(infos[6], infos[7], infos[8]);\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.relPos[c] = this.relPos[animationFrameIndex];\n            this.relRot[c] = this.relRot[animationFrameIndex];\n            this.relScale[c] = this.relScale[animationFrameIndex];\n        }\n    }\n\n    setOpacityAndFollowing(animationFrameIndex: number, lastFrame: number, value: number) {\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.opacity[c] = value;\n        }\n    }\n\n}\n","/**\n * @author Scarabol https://github.com/scarabol\n *\n * This loader loads LWSC files exported from LW\n *\n * File format description: http://www.martinreddy.net/gfx/3d/LWSC.txt\n */\n\nimport { AnimClip } from '../scene/model/anim/AnimClip';\nimport { AnimSubObj } from '../scene/model/anim/AnimSubObj';\nimport { Group } from 'three';\nimport { getFilename } from '../core/Util';\nimport { ResourceManager } from './ResourceManager';\nimport { LWOLoader } from './LWOLoader';\n\nexport class LWSCLoader {\n\n    path: string = '';\n    verbose: boolean = false;\n    animationClip: AnimClip = new AnimClip();\n    lines: string[] = [];\n    lineIndex: number = 0;\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path;\n        this.verbose = verbose;\n        if (this.verbose) console.log('Using verbose mode');\n    }\n\n    parse(content): AnimClip {\n        this.lines = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map(l => l.trim());\n\n        if (this.lines[0] !== 'LWSC') {\n            throw 'Invalid start of file! Expected \\'LWSC\\' in first line';\n        }\n\n        const numOfModels = parseInt(this.lines[1], 10); // TODO is this correct? May be something else\n        if (numOfModels !== 1) {\n            console.warn('Number of models has unexpected value: ' + numOfModels);\n        }\n\n        for (this.lineIndex = 2; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex];\n            if (!line) continue; // empty line: object separator\n            const key = line.split(' ')[0];\n            if (key === 'FirstFrame') {\n                this.parseFrameBlock();\n            } else if (key === 'AddNullObject' || key === 'LoadObject') {\n                this.parseObjectBlock();\n                if (this.verbose) console.log(this.animationClip.bodies[this.animationClip.bodies.length - 1]);\n            } else if (line.startsWith('PreviewFirstFrame ') || line.startsWith('PreviewLastFrame ') || line.startsWith('PreviewFrameStep ')) {\n                // only used in editor\n            } else {\n                // console.warn('Unexpected line: ' + line); // TODO debug logging, analyze remaining entries\n            }\n        }\n\n        if (this.verbose) console.log(this.animationClip);\n        return this.animationClip;\n    }\n\n    parseLine(line: string): string[] {\n        return line.split(' ').filter((l: string) => l !== '');\n    }\n\n    parseFrameBlock() {\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            const line = this.lines[this.lineIndex];\n            if (!line) return;\n            const [key, value] = this.parseLine(line);\n            if (key === 'FirstFrame') {\n                this.animationClip.firstFrame = parseInt(value);\n            } else if (key === 'LastFrame') {\n                this.animationClip.lastFrame = parseInt(value);\n            } else if (key === 'FrameStep') {\n                const frameStep = parseInt(value);\n                if (frameStep !== 1) console.error('Animation frameStep has unexpected value: ' + frameStep);\n            } else if (key === 'FramesPerSecond') {\n                this.animationClip.framesPerSecond = parseInt(value);\n            } else if (key === 'PreviewFirstFrame' || key === 'PreviewLastFrame' || key === 'PreviewFrameStep') {\n                // only used in editor\n            } else {\n                console.warn('Unexpected key in frame block');\n            }\n        }\n        console.error('Parsing block reached content end');\n    }\n\n    parseObjectBlock(): AnimSubObj {\n        const subObj = new AnimSubObj();\n        this.animationClip.bodies.push(subObj);\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex];\n            if (!line) return;\n            const [key, value] = this.parseLine(line);\n            if (key === 'AddNullObject' || key === 'LoadObject') {\n                if (key === 'LoadObject') {\n                    const filename = getFilename(value);\n                    subObj.name = filename.slice(0, filename.length - '.lwo'.length);\n                    subObj.filename = this.path + filename;\n                    // TODO do not parse twice, read from cache first\n                    const lwoBuffer = ResourceManager.getResource(subObj.filename);\n                    subObj.model = new LWOLoader(this.path).parse(lwoBuffer);\n                } else if (key === 'AddNullObject') {\n                    subObj.name = value;\n                    subObj.model = new Group();\n                } else {\n                    throw 'Unexpected line: ' + line;\n                }\n            } else if (key === 'ObjectMotion') {\n                let line = this.lines[++this.lineIndex];\n                const lenInfos = parseInt(line);\n                line = this.lines[++this.lineIndex];\n                const lenFrames = parseInt(line);\n                this.lineIndex++;\n                for (let c = 0; c < lenFrames; c++) {\n                    let line = this.lines[this.lineIndex + c * 2];\n                    if (line.startsWith('EndBehavior')) break;\n                    const infos = line.split(' ').map(Number);\n                    if (infos.length !== lenInfos) console.warn('Number of infos (' + infos.length + ') does not match if specified count (' + lenInfos + ')');\n                    line = this.lines[this.lineIndex + c * 2 + 1];\n                    const animationFrameIndex = parseInt(line.split(' ')[0]); // other entries in line should be zeros\n                    subObj.setFrameAndFollowing(animationFrameIndex, this.animationClip.lastFrame, infos);\n                }\n                this.lineIndex += lenFrames * 2;\n            } else if (key === 'ParentObject') {\n                subObj.parentObjInd = Number(value) - 1; // index is 1 based\n                if (this.verbose) console.log('parent obj ind is: ' + subObj.parentObjInd);\n            } else if (key === 'ShowObject ' || key === 'LockedChannels') {\n                // only used in editor\n            } else if (key === 'ShadowOptions') { // TODO implement shadow options (bitwise)\n                // 0 - Self Shadow\n                // 1 - Cast Shadow\n                // 2 - Receive Shadow\n            } else if (key === 'ObjDissolve') {\n                if (value == '(envelope)') {\n                    let line = this.lines[++this.lineIndex];\n                    const numOfInformationChannels = parseInt(line);\n                    if (numOfInformationChannels !== 1) console.error('Number of information channels for opacity is not 1, but: ' + numOfInformationChannels);\n                    line = this.lines[++this.lineIndex];\n                    const numOfKeyframes = parseInt(line);\n                    this.lineIndex++;\n                    for (let c = 0; c < numOfKeyframes; c++) {\n                        let line = this.lines[this.lineIndex + c * 2];\n                        if (line.startsWith('EndBehavior')) break;\n                        const opacity = 1 - Number(line);\n                        line = this.lines[this.lineIndex + c * 2 + 1];\n                        const frameNum = Number(line.split(' ')[0]);\n                        subObj.setOpacityAndFollowing(frameNum, this.animationClip.lastFrame, opacity);\n                    }\n                    this.lineIndex += numOfKeyframes * 2;\n                } else {\n                    const opacity = 1 - Number(value);\n                    subObj.setOpacityAndFollowing(0, this.animationClip.lastFrame, opacity);\n                }\n            } else {\n                // console.log('Unhandled line in object block: ' + line); // TODO debug logging\n            }\n        }\n        console.error('Parsing block reached content end');\n        return subObj;\n    }\n\n}\n","import { AnimationEntityType } from '../scene/model/anim/AnimationEntityType';\nimport { getPath, iGet } from './wadworker/WadUtil';\nimport { ResourceManager } from './ResourceManager';\nimport { LWOLoader } from './LWOLoader';\nimport { LWSCLoader } from './LWSCLoader';\n\nexport class AnimEntityLoader {\n\n    static loadModels(url, root): AnimationEntityType {\n        const path = getPath(url);\n\n        const entityType = new AnimationEntityType();\n\n        entityType.carryNullName = iGet(root, 'CarryNullName');\n\n        // TODO load other poly quality models (if available)\n        // let mediumPoly = iGet(root, 'MediumPoly');\n        // if (mediumPoly) {\n        //     Object.keys(mediumPoly).forEach((key) => {\n        //         const polyname = mediumPoly[key];\n        //         const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //         const polyfile = path + polyname + '.lwo';\n        //         console.log('polyfile');\n        //         console.log(polyfile);\n        //         // new LWOLoader().load(polyfile, (model) => {\n        //         //     mediumPoly[polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //         // }, undefined, () => {\n        //         //     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //         // });\n        //     });\n        //     Object.keys(mediumPoly).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete mediumPoly[polykey]);\n        // }\n\n        const highPoly = iGet(root, 'highpoly');\n        if (highPoly) {\n            entityType.highPoly = {};\n            Object.keys(highPoly).forEach((key) => {\n                const polyname = highPoly[key] + '.lwo';\n                const polykey = key.startsWith('!') ? key.slice(1) : key;\n                // console.log(path + polyname);\n                // TODO do not parse twice, read from cache first\n                const lwoBuffer = ResourceManager.getResource(path + polyname);\n                entityType.highPoly[polykey] = new LWOLoader(path).parse(lwoBuffer);\n            });\n        }\n\n        // let fPoly = (root)['fppoly'];\n        // if (fPoly) {\n        //     Object.keys(fPoly).forEach((camera) => {\n        //         Object.keys(fPoly[camera]).forEach((key) => {\n        //             const polyname = fPoly[camera][key];\n        //             const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //             if (polyname !== 'null') {\n        //                 const polyfile = path + polyname + '.lwo';\n        //                 new LWOLoader().load(polyfile, (model) => {\n        //                     fPoly[camera][polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //                 }, undefined, () => {\n        //                     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //                 });\n        //             } else {\n        //                 fPoly[camera][key] = {polyname: polyname, polyfile: null, model: new Group()};\n        //             }\n        //         });\n        //         Object.keys(fPoly[camera]).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete fPoly[polykey][camera]);\n        //     });\n        // }\n\n        const activities = iGet(root, 'Activities');\n        if (activities) {\n            Object.keys(activities).forEach((activity) => {\n                try {\n                    let keyname = iGet(activities, activity);\n                    const act = iGet(root, keyname);\n                    const file = iGet(act, 'FILE');\n                    const isLws = iGet(act, 'LWSFILE') === true;\n                    const transcoef = iGet(act, 'TRANSCOEF');\n                    const looping = iGet(act, 'LOOPING') === true;\n                    if (isLws) {\n                        const content = ResourceManager.getResource(path + file + '.lws');\n                        act.animation = new LWSCLoader(path).parse(content);\n                        act.animation.looping = looping;\n                        act.animation.transcoef = transcoef ? Number(transcoef) : 1;\n                        (entityType.activities)[keyname] = act;\n                    } else {\n                        console.error('Found activity which is not an LWS file');\n                    }\n                } catch (e) {\n                    console.error(e);\n                    console.log(root);\n                    console.log(activities);\n                    console.log(activity);\n                }\n            });\n        }\n\n        return entityType;\n    }\n\n}\n","import { createContext, createDummyImgData, getPixel, setPixel } from './ImageHelper';\n\nexport class BitmapFont {\n\n    charHeight: number;\n    letters: ImageData[] = [];\n\n    constructor(fontImageData: ImageData, cols = 10, rows = 19) { // font images always consist of 10 columns and 19 rows with last row empty\n        // actually chars are font dependent and have to be externalized in future\n        // maybe CP850 was used... not sure, doesn't fit...\n        const chars = [' ', '!', '\"', '#', '$', '%', '⌵', '`', '(', ')',\n            '*', '+', ',', '-', '.', '/', '0', '1', '2', '3',\n            '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',\n            '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n            'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n            'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[',\n            '\\\\', ']', '^', '_', '\\'', 'a', 'b', 'c', 'd', 'e',\n            'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\n            'z', 'Ä', 'Å', 'Á', 'À', 'Â', 'Ã', 'Ą', 'ä', 'å',\n            'á', 'à', 'â', 'ã', 'ą', 'Ë', 'E̊', 'É', 'È', 'É',\n            'Ę', 'ë', 'e̊', 'é', 'è', 'e̊', 'ę̊', '', '', '',\n            '', '', '', '', '', 'Ö', '', '', '', '',\n            'ö', '', '', '', '', 'Ü', '', '', '', 'ü',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', 'ß', '', '', '', 'Ñ', '', 'ñ',\n            '',\n        ]; // TODO complete this character list\n\n        const maxCharWidth = fontImageData.width / cols;\n        this.charHeight = fontImageData.height / rows;\n\n        function getActualCharacterWidth(imgData) {\n            for (let y = 0; y < imgData.height / rows; y++) { // find non-empty row first\n                let rowPixelIndex = y * 4 * imgData.width;\n                if (imgData.data[rowPixelIndex] !== 255 && imgData.data[rowPixelIndex + 2] !== 255) { // red/blue pixels indicate end of character\n                    for (let x = 0; x < maxCharWidth; x++) {\n                        let colPixelIndex = x * 4;\n                        if (imgData.data[colPixelIndex] === 255 || imgData.data[colPixelIndex + 2] === 255) { // red/blue pixels indicate end of character\n                            return x;\n                        }\n                    }\n                    return maxCharWidth;\n                }\n            }\n            return 0;\n        }\n\n        for (let i = 0; i < chars.length; i++) {\n            let imgData = this.extractData(fontImageData, (i % 10) * maxCharWidth, Math.floor(i / 10) * this.charHeight, maxCharWidth, this.charHeight);\n            let actualWidth = getActualCharacterWidth(imgData);\n            if (actualWidth > 0) {\n                imgData = this.extractData(imgData, 0, 0, actualWidth, this.charHeight);\n            } else {\n                imgData = createDummyImgData(maxCharWidth, this.charHeight);\n            }\n            this.letters[chars[i]] = imgData;\n        }\n    }\n\n    extractData(imgData, startX, startY, width, height): ImageData {\n        const alpha = getPixel(imgData, startX, startY);\n        const result = new ImageData(width, height);\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const p = getPixel(imgData, startX + x, startY + y);\n                if (p.r === alpha.r && p.g === alpha.g && p.b === alpha.b) p.a = 0; // apply alpha channel\n                setPixel(result, x, y, p.r, p.g, p.b, p.a);\n            }\n        }\n        return result;\n    }\n\n    createTextImage(text): HTMLCanvasElement {\n        if (text === undefined || text === null || text.length < 1) {\n            // empty text requested, context with width 0 is not allowed, but 1 with alpha is close enough\n            return createContext(1, 1).canvas;\n        }\n        text = text.replace(/_/g, ' ');\n        let width = 0;\n        for (let c = 0; c < text.length; c++) {\n            const letter = text.charAt(c);\n            const letterImg = this.letters[letter];\n            if (letterImg) {\n                width += letterImg.width;\n            } else {\n                console.error('Letter \\'' + letter + '\\' not found in charset! Ignoring it');\n            }\n        }\n        const result = new ImageData(width, this.charHeight);\n        let letterX = 0;\n        for (let c = 0; c < text.length; c++) {\n            const letterImgData = this.letters[text.charAt(c)];\n            if (letterImgData) {\n                for (let x = letterX; x < letterX + letterImgData.width; x++) {\n                    for (let y = 0; y < letterImgData.height; y++) {\n                        const p = getPixel(letterImgData, x - letterX, y);\n                        setPixel(result, x, y, p.r, p.g, p.b, p.a);\n                    }\n                }\n                letterX += letterImgData.width;\n            } // missing letter issue already reported above\n        }\n        const img: CanvasRenderingContext2D = createContext(result.width, result.height);\n        img.putImageData(result, 0, 0);\n        return img.canvas;\n    }\n}\n","import ResourceWorker from 'worker-loader!./wadworker/Resources';\nimport { RepeatWrapping, Texture } from 'three';\nimport { AnimationEntityType } from '../scene/model/anim/AnimationEntityType';\nimport { InitLoadingMessage } from './wadworker/InitLoadingMessage';\nimport { createContext, createDummyImgData } from '../core/ImageHelper';\nimport { iGet } from './wadworker/WadUtil';\nimport { getFilename } from '../core/Util';\nimport { AnimEntityLoader } from './AnimEntityLoader';\nimport { BitmapFont } from '../core/BitmapFont';\n\nexport class ResourceManager {\n\n    static worker: ResourceWorker = new ResourceWorker();\n    static configuration: any = {};\n    static resourceByName: {} = {};\n\n    static startLoadingFromCache() {\n        return this.startLoading(null);\n    }\n\n    static startLoadingFromUrl(wad0Url: string, wad1Url: string) {\n        return this.startLoading(new InitLoadingMessage(wad0Url, wad1Url));\n    }\n\n    private static startLoading(msg: InitLoadingMessage) {\n        this.worker.onmessage = (event) => {\n            const data = event.data;\n            if (data.hasOwnProperty('msg')) {\n                this.onMessage(data.msg);\n            } else if (data.hasOwnProperty('cfg')) {\n                this.configuration = data.cfg;\n                this.onInitialLoad(data.totalResources);\n            } else if (data.hasOwnProperty('cacheMissed')) {\n                this.onCacheMissed();\n            } else if (data.hasOwnProperty('assetIndex')) {\n                this.resourceByName[data.assetName.toLowerCase()] = data.assetObj;\n                this.onAssetLoaded(data.assetIndex);\n            } else if (data.hasOwnProperty('done')) {\n                console.log('Loading of about ' + data.totalResources + ' assets complete! Total load time: ' + data.loadingTimeSeconds + ' seconds.');\n                this.onLoadDone();\n            }\n        };\n        this.worker.postMessage(msg);\n    }\n\n    static onMessage: (msg: string) => any = (msg: string) => {\n        console.log(msg);\n    };\n\n    static onCacheMissed: () => any = () => {\n        console.log(\"Worker missed cache\");\n    };\n\n    static onInitialLoad: (totalResources: number) => any = () => {\n        console.log('Initial loading done.');\n    };\n\n    static onAssetLoaded: (assetIndex: number) => any = () => {\n    };\n\n    static onLoadDone: () => any = () => {\n    };\n\n    static cfg(...keys: string[]): any {\n        return iGet(ResourceManager.configuration, ...keys);\n    }\n\n    static filterEntryNames(basename: string): string[] {\n        const lBasename = basename.toLowerCase();\n        return Object.keys(this.resourceByName).filter((name) => name.startsWith(lBasename));\n    }\n\n    static getResource(resourceName: string): any {\n        const lName = resourceName ? resourceName.toString().toLowerCase() : null;\n        if (lName && this.resourceByName.hasOwnProperty(lName)) {\n            return this.resourceByName[lName];\n        }\n        return null;\n    }\n\n    static getImageData(imageName): ImageData {\n        if (!imageName || imageName.length === 0) {\n            throw 'imageName must not be undefined, null or empty - was ' + imageName;\n        }\n        const lImageName = imageName.toLowerCase();\n        let imgData = this.getResource(lImageName);\n        if (!imgData) {\n            console.error('Image \\'' + imageName + '\\' unknown! Using placeholder image instead');\n            ResourceManager.resourceByName[lImageName] = createDummyImgData(64, 64);\n        }\n        return ResourceManager.resourceByName[lImageName];\n    }\n\n    static getImage(imageName): HTMLCanvasElement {\n        const imgData = this.getImageData(imageName);\n        const context: CanvasRenderingContext2D = createContext(imgData.width, imgData.height);\n        context.putImageData(imgData, 0, 0);\n        return context.canvas;\n    }\n\n    static getTexture(textureName): Texture {\n        if (!textureName || textureName.length === 0) {\n            throw 'textureName must not be undefined, null or empty - was ' + textureName;\n        }\n        const lTextureName = textureName.toLowerCase();\n        const lSharedTextureName = 'world/shared/' + getFilename(lTextureName);\n        let imgData = this.getResource(lTextureName) || this.getResource(lSharedTextureName);\n        if (!imgData) {\n            console.error('Texture \\'' + textureName + '\\' (' + lTextureName + ', ' + lSharedTextureName + ') unknown! Using placeholder texture instead');\n            ResourceManager.resourceByName[lTextureName] = imgData = createDummyImgData(64, 64);\n        }\n        const texture = new Texture(imgData, Texture.DEFAULT_MAPPING, RepeatWrapping, RepeatWrapping);\n        texture.needsUpdate = true;\n        return texture;\n    }\n\n    static getMap(name: string) {\n        return name ? this.getResource(name) : null;\n    }\n\n    static getAnimationEntityType(aeFilename: string): AnimationEntityType {\n        let cfgRoot = this.getResource(aeFilename);\n        if (!cfgRoot) throw 'Could not get animation entity type for: ' + aeFilename;\n        return AnimEntityLoader.loadModels(aeFilename, cfgRoot);\n    }\n\n    static getBitmapFont(name: string) {\n        return new BitmapFont(this.getResource(name));\n    }\n\n}\n","import { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../main';\nimport { ResourceManager } from '../resource/ResourceManager';\n\nexport class ScreenLayer {\n\n    canvas: HTMLCanvasElement;\n    context: CanvasRenderingContext2D;\n    onRedraw: (context: CanvasRenderingContext2D) => any;\n\n    constructor(alpha: boolean = false, withContext: boolean = true) {\n        this.canvas = document.createElement('canvas');\n        if (!alpha) this.canvas.style.background = '#f0f';\n        if (withContext) this.context = this.canvas.getContext('2d', {alpha: alpha});\n        this.hide();\n    }\n\n    setZIndex(zIndex: number) {\n        this.canvas.style.zIndex = String(zIndex);\n    }\n\n    static compareZ(layerA: ScreenLayer, layerB: ScreenLayer) {\n        let aIndex = layerA?.canvas?.style?.zIndex || 0;\n        const bIndex = layerB?.canvas?.style?.zIndex || 0;\n        return aIndex === bIndex ? 0 : aIndex > bIndex ? -1 : 1;\n    }\n\n    resize(width, height) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.redraw();\n    }\n\n    redraw() {\n        if (this.isActive() && this.onRedraw) this.onRedraw(this.context);\n    }\n\n    show() {\n        this.canvas.style.visibility = 'visible';\n        this.redraw();\n    }\n\n    hide() {\n        this.canvas.style.visibility = 'hidden';\n    }\n\n    isActive() {\n        return this.canvas.style.visibility === 'visible';\n    }\n\n    toCanvasCoords(windowX: number, windowY: number) {\n        const clientRect = this.canvas.getBoundingClientRect();\n        return [windowX - clientRect.left, windowY - clientRect.top];\n    }\n\n    handlePointerEvent(eventType: string, event: PointerEvent) { // TODO refactor: performance: create enum for eventType\n        return false;\n    }\n\n    handleKeyEvent(eventType: string, event: KeyboardEvent) {\n        return false;\n    }\n\n    handleWheelEvent(eventType: string, event: WheelEvent) {\n        return false;\n    }\n\n}\n\nexport class ScaledLayer extends ScreenLayer {\n\n    fixedWidth: number;\n    fixedHeight: number;\n\n    constructor() {\n        super(true);\n        this.fixedWidth = SPRITE_RESOLUTION_WIDTH;\n        this.fixedHeight = SPRITE_RESOLUTION_HEIGHT;\n    }\n\n    toScaledCoords(windowX: number, windowY: number) {\n        const [cx, cy] = this.toCanvasCoords(windowX, windowY);\n        return [cx / this.scaleX(), cy / this.scaleY()];\n    }\n\n    resize(width, height) {\n        super.resize(width, height);\n        this.context.scale(this.scaleX(), this.scaleY());\n    }\n\n    scaleX() {\n        return this.canvas.width / this.fixedWidth;\n    }\n\n    scaleY() {\n        return this.canvas.height / this.fixedHeight;\n    }\n\n}\n\nexport class CursorLayer extends ScaledLayer {\n\n    curUrl;\n    cursorName: string = 'Aclosed';\n\n    show() {\n        super.show();\n        this.createCursor();\n    }\n\n    hide() {\n        super.hide();\n        this.canvas.style.cursor = null;\n    }\n\n    createCursor() {\n        if (this.curUrl) URL.revokeObjectURL(this.curUrl);\n        const curImg = ResourceManager.getImage('Interface/Pointers/' + this.cursorName + '.bmp');\n        this.curUrl = curImg.toDataURL();\n        // Chrome limits cursor size to 32x32 anyway...\n        // const context: CanvasRenderingContext2D = createContext(curImg.width * this.scaleX(), curImg.height * this.scaleY());\n        // context.scale(this.scaleX(), this.scaleY());\n        // context.drawImage(curImg, 0, 0);\n        // this.curUrl = context.canvas.toDataURL();\n        this.canvas.style.cursor = 'url(' + this.curUrl + '), auto';\n    }\n\n    resize(width, height) {\n        super.resize(width, height);\n        if (this.isActive()) this.createCursor();\n    }\n\n}\n","import { Vector3 } from 'three';\n\nexport interface Selectable {\n\n    getSelectionType(): SelectionType;\n\n    select();\n\n    deselect(): any;\n\n    getSelectionCenter(): Vector3;\n\n}\n\nexport enum SelectionType {\n\n    SURFACE,\n    PILOT,\n    BUILDING,\n    VEHICLE,\n    GROUP,\n\n}\n","import { CursorLayer, ScreenLayer } from './ScreenLayer';\nimport { EventManager } from '../event/EventManager';\n\nexport class BaseScreen {\n\n    gameCanvasContainer: HTMLElement;\n    eventMgr: EventManager;\n    layers: ScreenLayer[] = [];\n    width: number = 800;\n    height: number = 600;\n    ratio: number = 800 / 600;\n    cursorLayer: CursorLayer;\n\n    constructor() {\n        this.gameCanvasContainer = document.getElementById('game-canvas-container');\n        this.eventMgr = new EventManager(this);\n        if (!this.gameCanvasContainer) throw 'Fatal error: game canvas container not found!';\n        window.addEventListener('resize', () => this.onWindowResize());\n        this.cursorLayer = this.addLayer(new CursorLayer(), 1000);\n        this.onWindowResize();\n    }\n\n    addLayer<T extends ScreenLayer>(layer: T, zIndex: number = 0): T {\n        layer.resize(this.width, this.height);\n        layer.setZIndex(zIndex);\n        this.layers.push(layer);\n        this.gameCanvasContainer.appendChild(layer.canvas);\n        return layer;\n    }\n\n    redraw() {\n        this.layers.filter(layer => layer.isActive()).forEach((layer) => layer.redraw());\n    }\n\n    show() {\n        this.layers.forEach((layer) => layer.show());\n        this.redraw();\n    }\n\n    hide() {\n        this.layers.forEach((layer) => layer.hide());\n    }\n\n    onWindowResize() {\n        const maxWidth = this.gameCanvasContainer.offsetWidth, maxHeight = this.gameCanvasContainer.offsetHeight;\n        const idealHeight = Math.round(maxWidth / this.ratio);\n        if (idealHeight > maxHeight) {\n            this.resize(Math.round(maxHeight * this.ratio), maxHeight);\n        } else {\n            this.resize(maxWidth, idealHeight);\n        }\n    }\n\n    resize(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n        this.layers.forEach((layer) => layer.resize(width, height));\n        this.redraw();\n    }\n\n    isInRect(event: MouseEvent | WheelEvent) {\n        if (this.layers.length < 1) return false;\n        const firstLayer = this.layers[0]; // all layers have same state and size\n        if (!firstLayer.isActive() && !firstLayer.canvas) return false;\n        const rect = firstLayer.canvas.getBoundingClientRect();\n        const clientX = event.clientX, clientY = event.clientY;\n        return clientX >= rect.left && clientX < rect.right && clientY >= rect.top && clientY < rect.bottom;\n    }\n\n}\n","import { BaseScreen } from './BaseScreen';\nimport { ResourceManager } from '../resource/ResourceManager';\nimport { ScreenLayer } from './ScreenLayer';\n\nexport class LoadingScreen extends BaseScreen {\n\n    layer: ScreenLayer;\n    assetIndex: number = 0;\n    totalResources: number = 0;\n\n    constructor() {\n        super();\n        this.layer = this.addLayer(new ScreenLayer());\n        this.layer.onRedraw = (context) => {\n            // clear the screen to black\n            context.fillStyle = 'black';\n            context.fillRect(0, 0, this.width, this.height);\n            // draw the loading title\n            context.font = '48px Arial';\n            context.fillStyle = 'white';\n            context.fillText('Loading Rock Raiders', 5, this.height - 80);\n            // hard-code the first loading message\n            context.font = '30px Arial';\n            context.fillStyle = 'white';\n            context.fillText('Loading...', 20, this.height - 30);\n        };\n    }\n\n    show() {\n        this.layers.filter((l) => l !== this.cursorLayer).forEach((layer) => layer.show());\n        this.redraw();\n    }\n\n    setLoadingMessage(text) {\n        this.layer.onRedraw = (context) => {\n            // wipe old message text\n            context.fillStyle = 'black';\n            context.fillRect(0, this.height - 60, this.width, 60);\n            // write new message text\n            context.font = '30px Arial';\n            context.fillStyle = 'white';\n            context.fillText(text, 20, this.height - 30);\n        };\n        this.redraw();\n    }\n\n    enableGraphicMode(totalResources: number) {\n        this.totalResources = totalResources;\n        const imgBackground = ResourceManager.getImage(ResourceManager.cfg('Main', 'LoadScreen'));\n        const imgProgress = ResourceManager.getImage(ResourceManager.cfg('Main', 'ProgressBar'));\n        this.layer.onRedraw = (context => {\n            const screenZoom = this.width / imgBackground.width;\n            const loadingBarWidth = 353 * this.assetIndex / this.totalResources * screenZoom;\n            context.drawImage(imgBackground, 0, 0, this.width, this.height);\n            context.drawImage(imgProgress, 142 * screenZoom, 450 * screenZoom, loadingBarWidth, 9 * screenZoom);\n            // TODO show LoadingText from cfg\n        });\n        this.cursorLayer.show();\n        this.redraw();\n    }\n\n    setLoadingState(assetIndex) {\n        if (this.assetIndex === assetIndex) return;\n        this.assetIndex = assetIndex;\n        this.redraw();\n    }\n\n}\n","export class MainMenuBaseItem {\n\n    x: number = 0;\n    y: number = 0;\n    width: number = 0;\n    height: number = 0;\n    zIndex: number = 100;\n    scrollAffected = false;\n    needsRedraw: boolean = false;\n    hover: boolean = false;\n    pressed: boolean = false;\n    actionName: string = '';\n    targetIndex: number = 0;\n\n    static compareZ(left: MainMenuBaseItem, right: MainMenuBaseItem) {\n        return left.zIndex === right.zIndex ? 0 : left.zIndex > right.zIndex ? -1 : 1;\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const hover = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height;\n        if (this.hover !== hover) {\n            this.hover = hover;\n            this.needsRedraw = true;\n            this.onHoverChange();\n        }\n        if (!this.hover) this.pressed = false;\n        return this.hover;\n    }\n\n    onHoverChange() {\n    }\n\n    checkSetPressed() {\n        if (!this.hover) return;\n        if (!this.pressed) this.needsRedraw = true;\n        this.pressed = true;\n    }\n\n    setReleased() {\n        if (this.pressed) this.needsRedraw = true;\n        this.pressed = false;\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        this.needsRedraw = false;\n    }\n\n}","import { MainMenuLayer } from './MainMenuLayer';\nimport { MainMenuItemCfg } from './MainMenuItemCfg';\nimport { MainMenuBaseItem } from './MainMenuBaseItem';\n\nexport class MainMenuLabelButton extends MainMenuBaseItem {\n\n    labelImgLo = null;\n    labelImgHi = null;\n\n    constructor(layer: MainMenuLayer, cfg: MainMenuItemCfg) {\n        super();\n        this.labelImgLo = layer.loFont.createTextImage(cfg.label);\n        this.labelImgHi = layer.hiFont.createTextImage(cfg.label);\n        this.width = Math.max(this.labelImgLo.width, this.labelImgHi.width);\n        this.height = Math.max(this.labelImgLo.height, this.labelImgHi.height);\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x;\n        this.y = layer.cfg.position[1] + cfg.y;\n        this.actionName = cfg.actionName;\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1;\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context);\n        const img = this.hover && !this.pressed ? this.labelImgHi : this.labelImgLo;\n        context.drawImage(img, this.x, this.y);\n    }\n\n}","import { MainMenuLayer } from './MainMenuLayer';\nimport { MainMenuItemCfg } from './MainMenuItemCfg';\nimport { MainMenuBaseItem } from './MainMenuBaseItem';\nimport { ResourceManager } from '../resource/ResourceManager';\n\nexport class MainMenuIconButton extends MainMenuBaseItem {\n\n    imgNormal = null;\n    imgHover = null;\n    imgPressed = null;\n    tooltip = '';\n\n    constructor(layer: MainMenuLayer, cfg: MainMenuItemCfg) {\n        super();\n        this.imgNormal = ResourceManager.getImage(cfg.imgNormal);\n        this.imgHover = ResourceManager.getImage(cfg.imgHover);\n        this.imgPressed = ResourceManager.getImage(cfg.imgPressed);\n        this.tooltip = (cfg.tooltip || '').replace(/_/g, ' ');\n        this.width = Math.max(this.imgNormal.width, this.imgHover.width, this.imgPressed.width);\n        this.height = Math.max(this.imgNormal.height, this.imgHover.height, this.imgPressed.height);\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x;\n        this.y = layer.cfg.position[1] + cfg.y;\n        this.actionName = cfg.actionName;\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1;\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context);\n        let img = this.imgNormal;\n        if (this.hover) img = this.imgHover;\n        if (this.pressed) img = this.imgPressed;\n        context.drawImage(img, this.x, this.y);\n    }\n\n}","import { ResourceManager } from '../resource/ResourceManager';\nimport { MainMenuLabelButton } from './MainMenuLabelButton';\nimport { ScaledLayer } from '../screen/ScreenLayer';\nimport { MenuCfg } from '../resource/wadworker/MenuCfg';\nimport { BitmapFont } from '../core/BitmapFont';\nimport { MOUSE_BUTTON } from '../event/EventManager';\nimport { MainMenuScreen } from '../screen/MainMenuScreen';\nimport { MainMenuIconButton } from './MainMenuIconButton';\nimport { MainMenuBaseItem } from './MainMenuBaseItem';\nimport { MainMenuLevelButton } from './MainMenuLevelButton';\n\nexport class MainMenuLayer extends ScaledLayer {\n\n    screen: MainMenuScreen;\n    cfg: MenuCfg;\n    fullName: string;\n    titleImage: HTMLCanvasElement;\n    title: string;\n    menuFont: BitmapFont;\n    loFont: BitmapFont;\n    hiFont: BitmapFont;\n    menuImage: HTMLCanvasElement;\n    items: MainMenuBaseItem[] = [];\n    scrollY: number = 0;\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuCfg) {\n        super();\n        this.screen = screen;\n        this.cfg = menuCfg;\n        this.fullName = menuCfg.fullName.replace(/_/g, ' ');\n        this.title = menuCfg.title.replace(/_/g, ' ');\n        this.menuFont = menuCfg.menuFont ? ResourceManager.getBitmapFont(menuCfg.menuFont) : null;\n        this.loFont = menuCfg.loFont ? ResourceManager.getBitmapFont(menuCfg.loFont) : null;\n        this.hiFont = menuCfg.hiFont ? ResourceManager.getBitmapFont(menuCfg.hiFont) : null;\n        this.menuImage = menuCfg.menuImage ? ResourceManager.getImage(menuCfg.menuImage) : null;\n        this.titleImage = this.loFont.createTextImage(this.fullName);\n\n        menuCfg.items.forEach((item) => {\n            if (item.label) {\n                this.items.push(new MainMenuLabelButton(this, item));\n            } else {\n                this.items.push(new MainMenuIconButton(this, item));\n            }\n        });\n\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b));\n\n        this.onRedraw = (context) => {\n            context.drawImage(this.menuImage, 0, -this.scrollY);\n            if (menuCfg.displayTitle) context.drawImage(this.titleImage, (this.fixedWidth - this.titleImage.width) / 2, this.cfg.position[1]);\n            this.items.forEach((item, index) => (this.items[this.items.length - 1 - index]).draw(context));\n        };\n    }\n\n    handlePointerEvent(eventType: string, event: PointerEvent): boolean {\n        if (eventType === 'pointermove') { // TODO scroll when close to menu top/bottom border\n            const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY);\n            let hovered = false;\n            this.items.forEach((item) => {\n                if (!hovered) {\n                    const absY = sy + (item.scrollAffected ? this.scrollY : 0);\n                    hovered = item.checkHover(sx, absY);\n                } else {\n                    if (item.hover) item.needsRedraw = true;\n                    item.hover = false;\n                    item.setReleased();\n                }\n            });\n        } else if (eventType === 'pointerdown') {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => item.checkSetPressed());\n            }\n        } else if (eventType === 'pointerup') {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => {\n                    if (item.pressed) {\n                        item.setReleased();\n                        if (item.actionName.toLowerCase() === 'next') {\n                            this.screen.showMainMenu(item.targetIndex);\n                        } else if (item.actionName.toLowerCase() === 'selectlevel') {\n                            this.screen.selectLevel((item as MainMenuLevelButton).levelKey);\n                        } else if (item.actionName) {\n                            console.warn('not implemented: ' + item.actionName + ' - ' + item.targetIndex);\n                        }\n                    }\n                });\n            }\n        }\n        if (this.needsRedraw()) this.redraw();\n        return false;\n    }\n\n    handleWheelEvent(eventType: string, event: WheelEvent): boolean {\n        if (!this.cfg.canScroll) return false;\n        this.scrollY = Math.min(Math.max(this.scrollY + event.deltaY, 0), this.menuImage.height - this.fixedHeight);\n        this.redraw();\n        return true;\n    }\n\n    needsRedraw(): boolean {\n        return this.items.some((item) => item.needsRedraw);\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer';\nimport { MainMenuBaseItem } from './MainMenuBaseItem';\nimport { LevelEntryCfg } from '../resource/wadworker/LevelsCfg';\nimport { ResourceManager } from '../resource/ResourceManager';\n\nexport class MainMenuLevelButton extends MainMenuBaseItem {\n\n    layer: MainMenuLayer;\n    imgActive = null;\n    imgInactive = null;\n    imgCross = null;\n    unlocked: boolean = false;\n    levelKey: string = '';\n\n    constructor(layer: MainMenuLayer, levelKey: string, levelCfg: LevelEntryCfg) {\n        super();\n        this.layer = layer;\n        this.actionName = 'selectlevel';\n        this.levelKey = levelKey;\n        this.x = levelCfg.frontEndX;\n        this.y = levelCfg.frontEndY;\n        this.zIndex = 10;\n        this.scrollAffected = true;\n        const [imgActive, imgInactive, imgCross] = levelCfg.menuBMP;\n        this.imgActive = ResourceManager.getImage(imgActive);\n        this.imgInactive = ResourceManager.getImage(imgInactive);\n        this.imgCross = ResourceManager.getImage(imgCross);\n        this.width = Math.max(this.imgActive.width, this.imgInactive.width, this.imgCross.width);\n        this.height = Math.max(this.imgActive.height, this.imgInactive.height, this.imgCross.height);\n        this.unlocked = levelCfg.frontEndOpen;\n        this.unlocked = true; // TODO don't unlock everything by default\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context);\n        let img = this.imgCross;\n        if (this.unlocked) img = this.hover ? this.imgActive : this.imgInactive;\n        context.drawImage(img, this.x, this.y - this.layer.scrollY);\n    }\n\n}\n","import { MainMenuBaseItem } from './MainMenuBaseItem';\nimport { createContext } from '../core/ImageHelper';\n\nexport class MainMenuPanel extends MainMenuBaseItem {\n\n    context: CanvasRenderingContext2D;\n\n    constructor(imgData: ImageData, area: { x: number, y: number, w: number, h: number }) {\n        super();\n        this.zIndex = 50;\n        this.context = createContext(imgData.width, imgData.height);\n        this.context.putImageData(imgData, 0, 0);\n        this.x = area.x;\n        this.y = area.y;\n        this.width = area.w;\n        this.height = area.h;\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const inRect = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height;\n        const hover = inRect && this.context.getImageData(sx, sy, 1, 1).data[3] > 0;\n        if (this.hover !== hover) this.needsRedraw = true;\n        this.hover = hover;\n        return this.hover;\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context);\n        context.drawImage(this.context.canvas, this.x, this.y, this.width, this.height);\n    }\n\n}","import { MainMenuBaseItem } from './MainMenuBaseItem';\nimport { BitmapFont } from '../core/BitmapFont';\n\nexport class MainMenuWindow extends MainMenuBaseItem {\n\n    font: BitmapFont;\n    imgFirstLine = null;\n    imgSecondLine = null;\n\n    constructor(font: BitmapFont, area: { x: number, y: number, w: number, h: number }) {\n        super();\n        this.font = font;\n        this.x = area.x;\n        this.y = area.y;\n        this.width = area.w;\n        this.height = area.h;\n    }\n\n    setFirstLine(text: string) {\n        this.imgFirstLine = !!text ? this.font.createTextImage(text) : null;\n    }\n\n    setSecondLine(text: string) {\n        this.imgSecondLine = !!text ? this.font.createTextImage(text) : null;\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context);\n        const cx = this.x + this.width / 2, cy = this.y + this.height / 2;\n        if (this.imgFirstLine) context.drawImage(this.imgFirstLine, cx - this.imgFirstLine.width / 2, cy - this.imgFirstLine.height);\n        if (this.imgSecondLine) context.drawImage(this.imgSecondLine, cx - this.imgSecondLine.width / 2, cy);\n    }\n\n}","import { MainMenuLayer } from './MainMenuLayer';\nimport { LevelEntryCfg, LevelsCfg } from '../resource/wadworker/LevelsCfg';\nimport { ResourceManager } from '../resource/ResourceManager';\nimport { MainMenuLevelButton } from './MainMenuLevelButton';\nimport { MainMenuScreen } from '../screen/MainMenuScreen';\nimport { MenuCfg } from '../resource/wadworker/MenuCfg';\nimport { iGet } from '../core/Util';\nimport { MainMenuPanel } from './MainMenuPanel';\nimport { MainMenuBaseItem } from './MainMenuBaseItem';\nimport { MainMenuWindow } from './MainMenuWindow';\n\nexport class LevelSelectLayer extends MainMenuLayer {\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuCfg, modeLevel: boolean) {\n        super(screen, menuCfg);\n        const levelsCfg: LevelsCfg = ResourceManager.getResource('Levels');\n        const levelTextCfg = new LevelTextCfg();\n        this.items.push(new MainMenuPanel(levelTextCfg.panelImgData, levelTextCfg.panelPos));\n        const levelTextWindow = new MainMenuWindow(ResourceManager.getBitmapFont('Interface/Fonts/Font5_Hi.bmp'), levelTextCfg.window);\n        levelTextWindow.setFirstLine(modeLevel ? levelTextCfg.level : levelTextCfg.tutorial);\n        this.items.push(levelTextWindow);\n        Object.keys(levelsCfg.levelsByName).forEach((levelKey) => {\n            const level: LevelEntryCfg = levelsCfg.levelsByName[levelKey];\n            const levelButton = new MainMenuLevelButton(this, levelKey, level);\n            levelButton.onHoverChange = () => levelTextWindow.setSecondLine(levelButton.hover ? level.fullName : '');\n            this.items.push(levelButton);\n        });\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b));\n    }\n\n    show() {\n        this.scrollY = 0;\n        super.show();\n    }\n\n}\n\nclass LevelTextCfg {\n\n    window = {x: 0, y: 0, w: 0, h: 0};\n    panelImgData: ImageData;\n    panelPos = {x: 0, y: 0, w: 0, h: 0};\n    level: string = '';\n    tutorial: string = '';\n\n    constructor() {\n        const cfg = ResourceManager.cfg('Menu', 'LevelText');\n        const winCfg = iGet(cfg, 'Window');\n        this.window = {x: winCfg[0], y: winCfg[1], w: winCfg[2], h: winCfg[3]};\n        const panelCfg = iGet(cfg, 'Panel');\n        this.panelImgData = ResourceManager.getImageData(panelCfg[0]);\n        this.panelPos = {x: panelCfg[1], y: panelCfg[2], w: panelCfg[3], h: panelCfg[4]};\n        this.level = iGet(cfg, 'Level').join(',').replace(/_/g, ' '); // TODO improve cfg handling, remove join\n        this.tutorial = iGet(cfg, 'Tutorial').join(',').replace(/_/g, ' '); // TODO improve cfg handling, remove join\n    }\n\n}\n","import { BaseScreen } from './BaseScreen';\nimport { ResourceManager } from '../resource/ResourceManager';\nimport { MainMenuFullCfg } from '../resource/wadworker/MainMenuFullCfg';\nimport { MainMenuLayer } from '../menu/MainMenuLayer';\nimport { LevelSelectLayer } from '../menu/LevelSelectLayer';\n\nexport class MainMenuScreen extends BaseScreen {\n\n    onLevelSelected: (levelName: string) => void = null;\n    menus: MainMenuLayer[] = [];\n\n    constructor() {\n        super();\n        const mainMenuFullCfg = ResourceManager.getResource('MainMenuFull') as MainMenuFullCfg;\n        mainMenuFullCfg.menus.forEach((menuCfg) => {\n            let layer;\n            if (menuCfg.title === 'Levels') {\n                layer = new LevelSelectLayer(this, menuCfg, true);\n            } else if (menuCfg.title === 'Tutorials') {\n                layer = new LevelSelectLayer(this, menuCfg, false);\n            } else {\n                layer = new MainMenuLayer(this, menuCfg);\n            }\n            this.menus.push(layer);\n            this.addLayer(layer);\n        });\n    }\n\n    showMainMenu(index: number = 0) {\n        this.hide();\n        this.menus[index].show();\n        this.cursorLayer.show();\n    }\n\n    showLevelSelection() {\n        this.showMainMenu(1);\n    }\n\n    selectLevel(levelName) {\n        this.hide();\n        this.onLevelSelected(levelName);\n    }\n\n}\n","const Stats = require('stats.js');\n\nexport class DebugHelper {\n\n    stats;\n\n    constructor() {\n        this.stats = new Stats();\n        this.stats.setMode(0); // 0: fps, 1: ms\n\n        this.stats.domElement.style.position = 'absolute';\n        this.stats.domElement.style.left = '0px';\n        this.stats.domElement.style.top = '0px';\n\n        document.body.appendChild(this.stats.domElement);\n        this.hide();\n    }\n\n    show() {\n        this.stats.domElement.style.visibility = 'visible';\n    }\n\n    hide() {\n        this.stats.domElement.style.visibility = 'hidden';\n    }\n\n    renderStart() {\n        this.stats.begin();\n    }\n\n    renderDone() {\n        this.stats.end();\n    }\n\n}\n","export class Building {\n\n    static readonly TOOLSTATION = new Building('Buildings/Toolstation', 130, 10, true);\n    static readonly TELEPORT_PAD = new Building('Buildings/Teleports'); // TODO test with level 25\n    static readonly POWER_STATION = new Building('Buildings/Powerstation'); // TODO test with level 09\n    static readonly SUPPORT = new Building('Buildings/Support');\n    static readonly UPGRADE = new Building('Buildings/Upgrade'); // TODO test with level 09\n    static readonly REFINERY = new Building('Buildings/Refinery');\n    static readonly GEODOME = new Building('Buildings/Geo-dome'); // TODO test with level 25\n\n    name: string;\n    aeFile: string;\n    dropPosAngleDeg: number = 0;\n    dropPosDist: number = 0;\n    selfPowered: boolean = false;\n\n    constructor(name: string, dropPosAngleDeg: number = 0, dropPosDist: number = 0, selfPowered: boolean = false) {\n        this.name = name;\n        this.aeFile = name + '/' + name.slice(name.lastIndexOf('/') + 1) + '.ae';\n        this.dropPosAngleDeg = dropPosAngleDeg;\n        this.dropPosDist = dropPosDist;\n        this.selfPowered = selfPowered;\n    }\n\n    static getByName(buildingType: string) {\n        const typename = buildingType.slice(buildingType.lastIndexOf('/') + 1).toLowerCase();\n        switch (typename) {\n            case 'toolstation':\n                return this.TOOLSTATION;\n            case 'teleports':\n                return this.TELEPORT_PAD;\n            case 'upgrade':\n                return this.UPGRADE;\n            case 'powerstation':\n                return this.POWER_STATION;\n            case 'support':\n                return this.SUPPORT;\n            case 'refinery':\n                return this.REFINERY;\n            case 'geo-dome':\n                return this.GEODOME;\n            default:\n                throw 'Unknown building type: ' + buildingType;\n        }\n    }\n\n}\n","import { WorldManager } from '../WorldManager';\nimport { Euler, Group, Vector3 } from 'three';\n\nexport class BaseEntity {\n\n    worldMgr: WorldManager;\n    group: Group = new Group();\n    sequenceIntervals = [];\n\n    constructor() {\n        // this.group.add(new AxesHelper(40)); // TODO debug orientations and possible x-axis flip\n    }\n\n    getPosition() {\n        return new Vector3().copy(this.group.position);\n    }\n\n    getRotation() {\n        return new Euler().copy(this.group.rotation);\n    }\n\n    onDiscover() {\n        this.group.visible = true;\n    }\n\n}\n","import { GameEvent } from './EventBus';\nimport { Job } from '../game/model/job/Job';\nimport { CollectableEntity, CollectableType } from '../scene/model/collect/CollectableEntity';\nimport { AnimEntity } from '../scene/model/anim/AnimEntity';\nimport { Vector3 } from 'three';\nimport { Surface } from '../scene/model/map/Surface';\n\nexport class WorldEvent extends GameEvent {\n\n    constructor(entityKey: string) {\n        super(entityKey);\n        this.isLocal = false;\n    }\n\n}\n\nexport class JobEvent extends WorldEvent {\n\n    job: Job;\n\n    constructor(eventKey: string, job: Job) {\n        super(eventKey);\n        this.job = job;\n    }\n\n}\n\nexport class JobCreateEvent extends JobEvent {\n\n    static eventKey = 'job.create';\n\n    constructor(job: Job) {\n        super(JobCreateEvent.eventKey, job);\n    }\n\n}\n\nexport class JobDeleteEvent extends JobEvent {\n\n    static eventKey = 'job.delete';\n\n    constructor(job: Job) {\n        super(JobDeleteEvent.eventKey, job);\n    }\n\n}\n\nexport class RaiderRequested extends WorldEvent {\n\n    static eventKey = 'raider.request';\n\n    numRequested: number = 0;\n\n    constructor(numRequested: number) {\n        super(RaiderRequested.eventKey);\n        this.numRequested = numRequested;\n    }\n\n}\n\nexport class CollectEvent extends WorldEvent {\n\n    static eventKey = 'item.collected';\n\n    collectType: CollectableType;\n\n    constructor(collectType: CollectableType) {\n        super(CollectEvent.eventKey);\n        this.collectType = collectType;\n    }\n\n}\n\nexport class SpawnDynamiteEvent extends WorldEvent {\n\n    static eventKey = 'spawn.dynamite';\n\n    surface: Surface;\n\n    constructor(surface: Surface) {\n        super(SpawnDynamiteEvent.eventKey);\n        this.surface = surface;\n    }\n\n}\n\nexport class SpawnMaterialEvent extends WorldEvent {\n\n    static eventKey = 'spawn.material';\n\n    collectable: CollectableEntity;\n    spawnPosition: Vector3;\n\n    constructor(collectable: CollectableEntity, spawnPosition: Vector3) {\n        super(SpawnMaterialEvent.eventKey);\n        this.collectable = collectable;\n        this.spawnPosition = spawnPosition;\n    }\n\n}\n\nexport class EntityAddedEvent extends WorldEvent {\n\n    static eventKey = 'added.entity';\n\n    type: EntityType;\n    entity: AnimEntity;\n\n    constructor(type: EntityType, entity: AnimEntity) {\n        super(EntityAddedEvent.eventKey);\n        this.type = type;\n        this.entity = entity;\n    }\n\n}\n\nexport class EntityRemovedEvent extends WorldEvent {\n\n    static eventKey = 'remove.entity';\n\n    type: EntityType;\n    entity: AnimEntity;\n\n    constructor(type: EntityType, entity: AnimEntity) {\n        super(EntityRemovedEvent.eventKey);\n        this.type = type;\n        this.entity = entity;\n    }\n\n}\n\nexport enum EntityType {\n\n    RAIDER,\n    VEHICLE,\n    BUILDING,\n\n}\n","export class EventBus {\n\n    static eventListener = {};\n    static blockedEvents = [];\n\n    static publishEvent(event: GameEvent) {\n        if (this.blockedEvents.includes(event.eventKey)) return; // event is currently blocked from publishing\n        if (!event.isLocal) console.log('Event published: ' + event.eventKey);\n        this.blockedEvents.push(event.eventKey);\n        (this.eventListener[event.eventKey] || []).forEach((callback) => callback(event));\n        const index = this.blockedEvents.indexOf(event.eventKey);\n        if (index > -1) this.blockedEvents.splice(index, 1);\n    }\n\n    static registerEventListener(eventKey: string, callback: (GameEvent) => any) {\n        this.eventListener[eventKey] = this.eventListener[eventKey] || [];\n        this.eventListener[eventKey].push(callback);\n    }\n\n}\n\nexport class GameEvent {\n\n    eventKey: string;\n    isLocal: boolean;\n\n    constructor(eventKey: string) {\n        this.eventKey = eventKey;\n    }\n\n}\n","import { Vector3 } from 'three';\nimport { CollectableEntity, CollectableType, CollectTargetType } from '../../../scene/model/collect/CollectableEntity';\nimport { JOB_ACTION_RANGE, RAIDER_SPEED } from '../../../main';\nimport { GameState } from '../GameState';\nimport { EventBus } from '../../../event/EventBus';\nimport { CollectEvent } from '../../../event/WorldEvents';\nimport { FulfillerEntity } from '../../../scene/model/FulfillerEntity';\nimport { Building } from '../entity/building/Building';\n\nexport enum JobType {\n\n    SURFACE,\n    CARRY,\n    MOVE,\n\n}\n\nexport enum JobState {\n\n    OPEN,\n    COMPLETE,\n    CANCELED,\n\n}\n\nexport abstract class Job {\n\n    type: JobType;\n    jobstate: JobState;\n    fulfiller: FulfillerEntity[] = [];\n\n    protected constructor(type: JobType) {\n        this.type = type;\n        this.jobstate = JobState.OPEN;\n    }\n\n    assign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller);\n        if (fulfiller && index === -1) {\n            this.fulfiller.push(fulfiller);\n        }\n    }\n\n    unassign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller);\n        if (index > -1) this.fulfiller.splice(index, 1);\n    }\n\n    cancel() {\n        this.jobstate = JobState.CANCELED;\n        const fulfiller = this.fulfiller; // ensure consistency while processing\n        this.fulfiller = [];\n        fulfiller.forEach((fulfiller) => fulfiller.stopJob());\n    }\n\n    isQualified(fulfiller: FulfillerEntity): boolean {\n        return true;\n    }\n\n    onJobComplete() {\n        this.jobstate = JobState.COMPLETE;\n    }\n\n    abstract getPosition(): Vector3; // TODO job system in 2d should be sufficient and decouple from three for deps and worker reasons\n\n    abstract isInArea(x: number, z: number): boolean;\n\n}\n\nexport class CollectJob extends Job {\n\n    item: CollectableEntity;\n\n    constructor(item: CollectableEntity) {\n        super(JobType.CARRY);\n        this.item = item;\n    }\n\n    getPosition(): Vector3 {\n        return this.item.getPosition();\n    }\n\n    isInArea(x: number, z: number): boolean {\n        const pos = this.getPosition();\n        return pos.sub(new Vector3(x, pos.y, z)).length() < JOB_ACTION_RANGE;\n    }\n\n    isQualified(fulfiller: FulfillerEntity) {\n        return fulfiller.carries === null && !!this.item.getTargetPos();\n    }\n\n    onJobComplete() {\n        super.onJobComplete();\n        if (this.item.getTargetType() === Building.TOOLSTATION) {\n            switch (this.item.getCollectableType()) {\n                case CollectableType.CRYSTAL:\n                    GameState.numCrystal++;\n                    EventBus.publishEvent(new CollectEvent(this.item.getCollectableType()));\n                    break;\n                case CollectableType.ORE:\n                    GameState.numOre++;\n                    EventBus.publishEvent(new CollectEvent(this.item.getCollectableType()));\n                    break;\n            }\n        } else if (this.item.getTargetType() === CollectTargetType.BUILDING_SITE) {\n            this.item.targetSite.addItem(this.item);\n        } else {\n            console.error('target type not yet implemented: ' + this.item.getTargetType());\n        }\n    }\n\n}\n\nexport class MoveJob extends Job {\n\n    target: Vector3;\n\n    constructor(target: Vector3) {\n        super(JobType.MOVE);\n        this.target = target;\n    }\n\n    getPosition(): Vector3 {\n        return new Vector3().copy(this.target);\n    }\n\n    isInArea(x: number, z: number) {\n        return this.getPosition().sub(new Vector3(x, this.target.y, z)).lengthSq() < RAIDER_SPEED * RAIDER_SPEED;\n    }\n\n}\n","import { BaseEntity } from '../BaseEntity';\nimport { GameState } from '../../../game/model/GameState';\nimport { EventBus } from '../../../event/EventBus';\nimport { JobCreateEvent } from '../../../event/WorldEvents';\nimport { CollectJob } from '../../../game/model/job/Job';\nimport { Carryable } from './Carryable';\nimport { Vector3 } from 'three';\nimport { Building } from '../../../game/model/entity/building/Building';\nimport { BuildingEntity } from '../BuildingEntity';\nimport { BuildingSite } from '../BuildingSite';\n\nexport abstract class CollectableEntity extends BaseEntity implements Carryable {\n\n    collectableType: CollectableType;\n    targetSite: BuildingSite;\n    targetBuilding: BuildingEntity;\n    targetPos: Vector3 = null;\n    targetType: CollectTargetType | Building;\n\n    protected constructor(collectableType: CollectableType) {\n        super();\n        this.collectableType = collectableType;\n    }\n\n    abstract getTargetBuildingTypes(): Building[];\n\n    getTargetPos(): Vector3 {\n        if (!this.targetPos) {\n            const site = GameState.getClosestSiteThatRequires(this.getPosition(), this.getCollectableType());\n            if (site) {\n                this.targetSite = site;\n                this.targetPos = site.getPosition();\n                this.targetType = CollectTargetType.BUILDING_SITE;\n                site.assign(this);\n            } else {\n                const targetBuilding = GameState.getClosestBuildingByType(this.getPosition(), ...this.getTargetBuildingTypes());\n                if (targetBuilding) {\n                    this.targetBuilding = targetBuilding;\n                    this.targetPos = targetBuilding.getDropPosition();\n                    this.targetType = targetBuilding.type;\n                }\n            }\n        } else if (this.targetSite) {\n            if (this.targetSite.complete) this.resetTarget();\n        } else if (this.targetBuilding) {\n            // TODO check if building has been teleported away or turned off\n        }\n        return this.targetPos;\n    }\n\n    getTargetType(): CollectTargetType | Building {\n        return this.targetType;\n    }\n\n    resetTarget() {\n        if (this.targetSite) this.targetSite.unAssign(this);\n        this.targetSite = null;\n        this.targetBuilding = null;\n        this.targetPos = null;\n        this.targetType = null;\n    }\n\n    onDiscover() {\n        super.onDiscover();\n        const index = GameState.collectablesUndiscovered.indexOf(this);\n        if (index !== -1) GameState.collectablesUndiscovered.splice(index, 1);\n        GameState.collectables.push(this);\n        EventBus.publishEvent(new JobCreateEvent(new CollectJob(this)));\n    }\n\n    getCollectableType(): CollectableType {\n        return this.collectableType;\n    }\n\n}\n\nexport enum CollectableType {\n\n    DYNAMITE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n\n}\n\nexport enum CollectTargetType {\n\n    SURFACE,\n    BUILDING_SITE,\n\n}\n","import { BuildingEntity } from '../../scene/model/BuildingEntity';\nimport { Building } from './entity/building/Building';\nimport { Selectable, SelectionType } from './Selectable';\nimport { Raider } from '../../scene/model/Raider';\nimport { VehicleEntity } from '../../scene/model/VehicleEntity';\nimport { CollectableEntity, CollectableType } from '../../scene/model/collect/CollectableEntity';\nimport { Vector3 } from 'three';\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../../main';\nimport { Surface } from '../../scene/model/map/Surface';\nimport { BaseEntity } from '../../scene/model/BaseEntity';\nimport { EventBus } from '../../event/EventBus';\nimport { EntityDeselected } from '../../event/LocalEvents';\nimport { BuildingSite } from '../../scene/model/BuildingSite';\nimport { Dynamite } from '../../scene/model/collect/Dynamite';\nimport { Crystal } from '../../scene/model/collect/Crystal';\nimport { Ore } from '../../scene/model/collect/Ore';\n\nexport enum GameResultState {\n\n    RUNNING,\n    COMPLETE,\n    FAILED,\n    CANCELED,\n\n}\n\nexport class GameState {\n\n    static resultState: GameResultState = GameResultState.RUNNING;\n    static levelFullName: string = '';\n    static numCrystal: number = 0;\n    static numOre: number = 0;\n    static numBrick: number = 0;\n    static usedCrystals: number = 0;\n    static neededCrystals: number = 0;\n    static airlevel: number = 1; // airlevel in percent from 0 to 1.0\n    static selectedEntities: Selectable[] = [];\n    static selectionType: SelectionType = null;\n    static buildings: BuildingEntity[] = [];\n    static buildingsUndiscovered: BuildingEntity[] = [];\n    static raiders: Raider[] = [];\n    static raidersUndiscovered: Raider[] = [];\n    static requestedRaiders: number = 0;\n    static vehicles: VehicleEntity[] = [];\n    static vehiclesUndiscovered: VehicleEntity[] = [];\n    static collectables: CollectableEntity[] = [];\n    static collectablesUndiscovered: CollectableEntity[] = [];\n    static buildingSites: BuildingSite[] = [];\n    static totalCrystals: number = 0;\n    static totalOres: number = 0;\n    static totalDiggables: number = 0;\n    static remainingDiggables: number = 0;\n    static totalCaverns: number = 0;\n    static remainingCaverns: number = 0;\n    static levelStartTime: number = 0;\n    static levelStopTime: number = 0;\n\n    static reset() {\n        this.resultState = GameResultState.RUNNING;\n        this.levelFullName = '';\n        this.numCrystal = 0;\n        this.numOre = 0;\n        this.numBrick = 0;\n        this.usedCrystals = 0;\n        this.neededCrystals = 0;\n        this.airlevel = 1;\n        this.selectedEntities = [];\n        this.selectionType = null;\n        this.buildings = [];\n        this.buildingsUndiscovered = [];\n        this.raiders = [];\n        this.raidersUndiscovered = [];\n        this.requestedRaiders = 0;\n        this.vehicles = [];\n        this.vehiclesUndiscovered = [];\n        this.collectables = [];\n        this.collectablesUndiscovered = [];\n        this.buildingSites = [];\n        this.totalCrystals = 0;\n        this.totalOres = 0;\n        this.totalDiggables = 0;\n        this.remainingDiggables = 0;\n        this.totalCaverns = 0;\n        this.remainingCaverns = 0;\n        this.levelStartTime = 0;\n        this.levelStopTime = 0;\n    }\n\n    static getBuildingsByType(...buildingTypes: Building[]): BuildingEntity[] {\n        const matches = [];\n        for (let c = 0; c < buildingTypes.length; c++) {\n            matches.push(...this.buildings.filter((b) => b.type === buildingTypes[c]));\n        }\n        return matches;\n    }\n\n    static getClosestBuildingByType(position: Vector3, ...buildingTypes: Building[]): BuildingEntity {\n        const targetBuildings = GameState.getBuildingsByType(...buildingTypes);\n        let closest = null, minDist = null;\n        targetBuildings.forEach((b) => {\n            const bPos = b.getDropPosition();\n            const dist = new Vector3().copy(position).sub(bPos).lengthSq();\n            if (closest === null || dist < minDist) {\n                closest = b;\n                minDist = dist;\n            }\n        });\n        return closest;\n    }\n\n    static getClosestSiteThatRequires(position: Vector3, collectableType: CollectableType): BuildingSite {\n        let closest = null, minDist = null;\n        this.buildingSites.forEach((b) => {\n            const bPos = b.getPosition();\n            const dist = new Vector3().copy(position).sub(bPos).lengthSq();\n            if ((closest === null || dist < minDist) && b.needs(collectableType)) {\n                closest = b;\n                minDist = dist;\n            }\n        });\n        return closest;\n    }\n\n    static selectEntities(entities: Selectable[]) {\n        // deselect and remove entities that are not selected anymore\n        this.selectedEntities.filter((e) => entities.indexOf(e) === -1).forEach((e) => e.deselect());\n        this.selectedEntities = this.selectedEntities.filter((e) => entities.indexOf(e) !== -1);\n        // add and select new entities (if they are selectable)\n        this.selectedEntities.push(...(entities.filter((e) => e.select())));\n        // determine and set next selection type\n        const len = this.selectedEntities.length;\n        if (len > 1) {\n            this.selectionType = SelectionType.GROUP;\n        } else if (len === 1) {\n            this.selectionType = this.selectedEntities[0].getSelectionType();\n        } else if (this.selectionType !== null) {\n            this.selectionType = null;\n            EventBus.publishEvent(new EntityDeselected());\n        }\n    }\n\n    static getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + this.getBuildingsByType(Building.SUPPORT).length * ADDITIONAL_RAIDER_PER_SUPPORT;\n    }\n\n    static discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE;\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE;\n        this.discoverEntities(this.raidersUndiscovered, minX, maxX, minZ, maxZ);\n        this.discoverEntities(this.buildingsUndiscovered, minX, maxX, minZ, maxZ);\n        this.discoverEntities(this.vehiclesUndiscovered, minX, maxX, minZ, maxZ);\n        this.discoverEntities(this.collectablesUndiscovered, minX, maxX, minZ, maxZ);\n    }\n\n    static discoverEntities(undiscovered: BaseEntity[], minX, maxX, minZ, maxZ) {\n        const discovered = [];\n        undiscovered.forEach((e) => {\n            const pos = e.getPosition();\n            if (pos.x >= minX && pos.x < maxX && pos.z >= minZ && pos.z < maxZ) {\n                e.onDiscover();\n                discovered.push(e);\n            }\n        });\n        discovered.forEach((r) => {\n            const index = undiscovered.indexOf(r);\n            if (index !== -1) undiscovered.splice(index, 1);\n        });\n    }\n\n    static dropMaterial(type: CollectableType, quantity: number): CollectableEntity[] {\n        const result = [];\n        if (type === CollectableType.DYNAMITE) {\n            for (let c = 0; c < quantity; c++) result.push(new Dynamite());\n        } else if (type === CollectableType.CRYSTAL) {\n            while (GameState.numCrystal > 0 && result.length < quantity) {\n                GameState.numCrystal--;\n                result.push(new Crystal());\n            }\n        } else if (type === CollectableType.ORE) {\n            while (GameState.numOre > 0 && result.length < quantity) {\n                GameState.numOre--;\n                result.push(new Ore());\n            }\n        } else {\n            console.error('Material drop not yet implemented: ' + type);\n        }\n        return result;\n    }\n\n}\n","import { GameEvent } from './EventBus';\nimport { BuildingEntity } from '../scene/model/BuildingEntity';\nimport { Surface } from '../scene/model/map/Surface';\nimport { Raider } from '../scene/model/Raider';\nimport { VehicleEntity } from '../scene/model/VehicleEntity';\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: string) {\n        super(eventKey);\n        this.isLocal = true;\n    }\n\n}\n\nexport class SurfaceSelectedEvent extends LocalEvent {\n\n    static eventKey: string = 'surface.selected';\n\n    surface: Surface;\n\n    constructor(surface: Surface) {\n        super(SurfaceSelectedEvent.eventKey);\n        this.surface = surface;\n    }\n\n}\n\nexport class BuildingSelected extends LocalEvent {\n\n    static eventKey: string = 'building.selected';\n\n    building: BuildingEntity;\n\n    constructor(building: BuildingEntity) {\n        super(BuildingSelected.eventKey);\n        this.building = building;\n    }\n\n}\n\nexport class RaiderSelected extends LocalEvent {\n\n    static eventKey: string = 'raider.select';\n\n    raider: Raider;\n\n    constructor(raider: Raider) {\n        super(RaiderSelected.eventKey);\n        this.raider = raider;\n    }\n\n}\n\nexport class VehicleSelected extends LocalEvent {\n\n    static eventKey: string = 'vehicle.select';\n\n    vehicle: VehicleEntity;\n\n    constructor(vehicle: VehicleEntity) {\n        super(VehicleSelected.eventKey);\n        this.vehicle = vehicle;\n    }\n\n}\n\nexport class EntityDeselected extends LocalEvent {\n\n    static eventKey: string = 'entity.deselect';\n\n    constructor() {\n        super(EntityDeselected.eventKey);\n    }\n\n}","import { Box3, CanvasTexture, Mesh, MeshBasicMaterial, MeshPhongMaterial, Object3D, SphereGeometry, Sprite, SpriteMaterial, Vector3 } from 'three';\nimport { AnimClip } from './AnimClip';\nimport { iGet } from '../../../core/Util';\nimport { AnimationEntityType } from './AnimationEntityType';\nimport { BaseEntity } from '../BaseEntity';\nimport { AnimSubObj } from './AnimSubObj';\n\nexport abstract class AnimEntity extends BaseEntity {\n\n    entityType: AnimationEntityType = null;\n    poly: Object3D[] = [];\n    animation: AnimClip = null;\n    animationTimeout: NodeJS.Timeout = null;\n    selectionFrame: Sprite = null;\n    pickSphere: Mesh = null;\n    pickSphereRadius: number = 10;\n    selectionFrameSize: number = 10;\n    carryJoint: Object3D = null;\n\n    protected constructor(entityType: AnimationEntityType) {\n        super();\n        this.entityType = entityType;\n    }\n\n    setActivity(keyname, onAnimationDone = null, iterations = 1) {\n        if (this.animationTimeout) {\n            clearTimeout(this.animationTimeout);\n            this.animationTimeout = null;\n        }\n        const activity = iGet(this.entityType.activities, keyname);\n        if (!activity) {\n            console.error('Activity \\'' + keyname + '\\' unknown');\n            console.log(this.entityType.activities);\n            return;\n        }\n        if (activity.animation) {\n            this.animation = activity.animation;\n            this.group.remove(...this.poly);\n            this.poly = [];\n            const carries = (this.carryJoint && this.carryJoint.children) || [];\n            this.carryJoint = null;\n            // bodies are defined in animation and second in high/medium/low poly groups\n            this.animation.bodies.forEach((body) => {\n                let model: Object3D = iGet(this.entityType.highPoly, body.name);\n                if (!model) model = iGet(this.entityType.mediumPoly, body.name);\n                if (!model) model = body.model;\n                const polyModel = model.clone(true);\n                this.poly.push(polyModel);\n                if (this.entityType.carryNullName && body.name && this.entityType.carryNullName.toLowerCase() === body.name.toLowerCase()) {\n                    this.carryJoint = polyModel;\n                    if (carries.length > 0) this.carryJoint.add(...carries);\n                }\n            });\n            this.animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n                const polyPart = this.poly[index];\n                const parentInd = body.parentObjInd;\n                if (parentInd !== undefined && parentInd !== null) { // can be 0\n                    this.poly[parentInd].add(polyPart);\n                } else {\n                    this.group.add(polyPart);\n                }\n            });\n            this.animate(0, onAnimationDone, iterations);\n        } else {\n            console.warn('Activity ' + keyname + ' has no animation defined yet');\n        }\n    }\n\n    animate(frameIndex, onAnimationDone, iterations) {\n        if (this.poly.length !== this.animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length';\n        this.animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = this.poly[index];\n            p.position.copy(body.relPos[frameIndex]);\n            p.rotation.copy(body.relRot[frameIndex]);\n            p.scale.copy(body.relScale[frameIndex]);\n            if (p.hasOwnProperty('material')) {\n                const material = p['material'];\n                const opacity = body.opacity[frameIndex];\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material];\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity;\n                        mat.transparent = true;\n                        mat.alphaTest = 0;\n                    });\n                }\n            }\n        });\n        this.animationTimeout = null;\n        if (!(frameIndex + 1 > this.animation.lastFrame) || (this.animation.looping && (!onAnimationDone || iterations > 1))) {\n            let nextFrame = frameIndex + 1;\n            if (nextFrame > this.animation.lastFrame) {\n                nextFrame = this.animation.firstFrame;\n                iterations--;\n            }\n            const that = this;\n            this.animationTimeout = setTimeout(() => that.animate(nextFrame, onAnimationDone, iterations), 1000 / this.animation.framesPerSecond * this.animation.transcoef); // TODO get this in sync with threejs\n        } else if (onAnimationDone) {\n            onAnimationDone();\n        }\n    }\n\n    createPickSphere() {\n        if (this.pickSphere) return;\n        const center = new Vector3();\n        new Box3().setFromObject(this.group).getCenter(center);\n        center.sub(this.group.position);\n        const geometry = new SphereGeometry(this.pickSphereRadius, this.pickSphereRadius, this.pickSphereRadius);\n        const material = new MeshBasicMaterial({color: 0xffff00, visible: false}); // change to true for debugging\n        this.pickSphere = new Mesh(geometry, material);\n        this.pickSphere.userData = {selectable: this};\n        this.pickSphere.position.copy(center);\n        this.group.add(this.pickSphere);\n\n        const ctx = document.createElement('canvas').getContext('2d');\n        const size = 128; // TODO read from cfg?\n        ctx.canvas.width = size;\n        ctx.canvas.height = size;\n        ctx.fillStyle = '#0f0';\n        const strength = 50 / this.selectionFrameSize;\n        const length = size / 3;\n        ctx.fillRect(0, 0, length, strength);\n        ctx.fillRect(0, 0, strength, length);\n        ctx.fillRect(size - length, 0, length, strength);\n        ctx.fillRect(size - strength, 0, strength, length);\n        ctx.fillRect(size - strength, size - length, strength, length);\n        ctx.fillRect(size - length, size - strength, length, strength);\n        ctx.fillRect(0, size - strength, length, strength);\n        ctx.fillRect(0, size - length, strength, length);\n        const texture = new CanvasTexture(ctx.canvas);\n        const selectionMaterial = new SpriteMaterial({map: texture, depthTest: false});\n        this.selectionFrame = new Sprite(selectionMaterial);\n        this.selectionFrame.position.copy(center);\n        this.selectionFrame.scale.set(this.selectionFrameSize, this.selectionFrameSize, this.selectionFrameSize);\n        this.selectionFrame.visible = false;\n        this.group.add(this.selectionFrame);\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager';\nimport { CollectableType } from './CollectableEntity';\nimport { Building } from '../../../game/model/entity/building/Building';\nimport { AnimEntity } from '../anim/AnimEntity';\nimport { Carryable } from './Carryable';\nimport { Surface } from '../map/Surface';\nimport { Vector3 } from 'three';\nimport { GameState } from '../../../game/model/GameState';\n\nexport class Dynamite extends AnimEntity implements Carryable {\n\n    targetSurface: Surface;\n\n    constructor() {\n        super(ResourceManager.getAnimationEntityType('MiscAnims/Dynamite/Dynamite.ae'));\n    }\n\n    getTargetPos(): Vector3 {\n        if (this.targetSurface && this.targetSurface.isExplodable()) {\n            return this.targetSurface.getDigPositions()[0]; // TODO find closest dig position\n        } else {\n            return GameState.getClosestBuildingByType(this.getPosition(), Building.TOOLSTATION).getDropPosition();\n        }\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.DYNAMITE;\n    }\n\n    ignite() {\n        this.worldMgr.sceneManager.scene.add(this.group); // TODO add as explosive and scare em all!\n        const center = this.targetSurface.getCenterWorld();\n        center.y = this.group.position.y;\n        this.group.lookAt(center);\n        this.setActivity('TickDown', () => {\n            this.worldMgr.sceneManager.scene.remove(this.group);\n            this.targetSurface.collapse();\n            // TODO add explosion animation\n            // TODO damage raider, vehicle, buildings\n        });\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader';\nimport { ResourceManager } from '../../../resource/ResourceManager';\nimport { Color, Material, MeshPhongMaterial } from 'three';\nimport { CollectableEntity, CollectableType } from './CollectableEntity';\nimport { Building } from '../../../game/model/entity/building/Building';\n\nexport class Crystal extends CollectableEntity {\n\n    constructor() {\n        super(CollectableType.CRYSTAL);\n        const resource2 = ResourceManager.getResource('MiscAnims/Crystal/vlp_greencrystal.lwo');\n        const mesh2 = new LWOLoader('MiscAnims/Crystal/').parse(resource2);\n        (mesh2.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.color = new Color(0, 0, 0); // TODO read from LWO file?\n            mat.emissive = new Color(0, 255, 0); // TODO should be luminosity color from mesh file?\n            mat.depthWrite = false; // otherwise transparent parts \"carve out\" objects behind\n            mat.opacity = 0.5; // TODO read from LWO file?\n            mat.transparent = true;\n        });\n        mesh2.scale.set(1.75, 1.75, 1.75); // TODO derive from texture scale?\n        this.group.add(mesh2);\n        const resource = ResourceManager.getResource('World/Shared/Crystal.lwo'); // highpoly version\n        const mesh = new LWOLoader('World/Shared/').parse(resource);\n        (mesh.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.emissive = new Color(0, 8, 0); // TODO read from LWO file?\n            mat.color = new Color(0, 0, 0); // TODO read from LWO file?\n            mat.transparent = true;\n            mat.opacity = 0.4; // TODO read from LWO file?\n        });\n        this.group.add(mesh);\n        this.sequenceIntervals.forEach((interval) => clearInterval(interval)); // TODO looks better without sequence, maybe just slow it down or merge it?\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.POWER_STATION, Building.TOOLSTATION];\n    }\n\n    onDiscover() {\n        super.onDiscover();\n        console.log('An energy crystal has been discovered');\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader';\nimport { ResourceManager } from '../../../resource/ResourceManager';\nimport { CollectableEntity, CollectableType } from './CollectableEntity';\nimport { Building } from '../../../game/model/entity/building/Building';\n\nexport class Ore extends CollectableEntity {\n\n    constructor() {\n        super(CollectableType.ORE);\n        const resource = ResourceManager.getResource('MiscAnims/Ore/Ore1st.lwo');\n        const mesh = new LWOLoader('MiscAnims/Ore/').parse(resource);\n        this.group.add(mesh);\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.REFINERY, Building.TOOLSTATION];\n    }\n\n    onDiscover() {\n        super.onDiscover();\n        console.log('Ore has been discovered');\n    }\n\n}\n","import { Face3, Geometry, Group, Mesh, MeshPhongMaterial, Vector2, Vector3 } from 'three';\nimport { Terrain } from './Terrain';\nimport { SurfaceType } from './SurfaceType';\nimport { ResourceManager } from '../../../resource/ResourceManager';\nimport { Selectable, SelectionType } from '../../../game/model/Selectable';\nimport { EventBus } from '../../../event/EventBus';\nimport { SurfaceSelectedEvent } from '../../../event/LocalEvents';\nimport { JobType } from '../../../game/model/job/Job';\nimport { JobCreateEvent, JobDeleteEvent } from '../../../event/WorldEvents';\nimport { getRandom, getRandomSign } from '../../../core/Util';\nimport { Crystal } from '../collect/Crystal';\nimport { Ore } from '../collect/Ore';\nimport { HEIGHT_MULTIPLER, TILESIZE } from '../../../main';\nimport { GameState } from '../../../game/model/GameState';\nimport { SurfaceJob, SurfaceJobType } from '../../../game/model/job/SurfaceJob';\nimport { LWSCLoader } from '../../../resource/LWSCLoader';\nimport { AnimSubObj } from '../anim/AnimSubObj';\n\nexport class Surface implements Selectable {\n\n    terrain: Terrain;\n    surfaceType: SurfaceType;\n    x: number;\n    y: number;\n    containedOres: number = 0;\n    containedCrystals: number = 0;\n    heightOffset: number = null;\n    discovered: boolean = false;\n    selected: boolean = false;\n    reinforced: boolean = false;\n    jobs: SurfaceJob[] = [];\n    surfaceRotation: number = 0;\n    seamLevel: number = 0;\n    fallinTimeout = null;\n\n    fallinGrp: Group = null;\n    animationTimeout = null;\n\n    wallType: WALL_TYPE = null;\n    geometry: Geometry = null; // TODO replace with custom SurfaceMesh class to prevent issues with upgrade to threejs 126.0.0\n    mesh: Mesh = null;\n    needsMeshUpdate: boolean = false;\n\n    constructor(terrain: Terrain, surfaceType: SurfaceType, x: number, y: number, heightOffset: number) {\n        this.terrain = terrain;\n        this.surfaceType = surfaceType;\n        if (surfaceType === SurfaceType.CRYSTAL_SEAM || surfaceType === SurfaceType.ORE_SEAM) this.seamLevel = 4;\n        this.x = x;\n        this.y = y;\n        this.heightOffset = heightOffset;\n        EventBus.registerEventListener(JobCreateEvent.eventKey, (event: JobCreateEvent) => {\n            const jobType = event.job.type;\n            if (jobType === JobType.SURFACE) {\n                const surfaceJob = event.job as SurfaceJob;\n                if (surfaceJob.surface === this) this.jobs.push(surfaceJob);\n            }\n        });\n    }\n\n    hasJobType(type: SurfaceJobType) {\n        return this.jobs.filter((job) => job.workType === type).length > 0;\n    }\n\n    /**\n     * @return {boolean} Returns true, if a new cave has been discovered\n     */\n    discoverNeighbors(): boolean {\n        if (!this.discovered) GameState.discoverSurface(this);\n        this.discovered = true;\n        this.needsMeshUpdate = true;\n        let foundCave = false;\n        if (this.surfaceType.floor) {\n            for (let x = this.x - 1; x <= this.x + 1; x++) {\n                for (let y = this.y - 1; y <= this.y + 1; y++) {\n                    if (x !== this.x || y !== this.y) {\n                        const surf = this.terrain.getSurfaceOrNull(x, y);\n                        if (surf && !surf.discovered) {\n                            foundCave = surf.discoverNeighbors() || surf.surfaceType.floor;\n                            surf.needsMeshUpdate = true;\n                        }\n                    }\n                }\n            }\n        }\n        return foundCave;\n    }\n\n    collapse() {\n        this.cancelJobs();\n        if (this.fallinTimeout) clearTimeout(this.fallinTimeout);\n        this.surfaceType = SurfaceType.RUBBLE4;\n        this.containedOres += 4;\n        this.needsMeshUpdate = true;\n        // discover surface and all neighbors\n        const foundCave = this.discoverNeighbors();\n        if (foundCave) console.log('A new cave has been discovered'); // TODO emit new-cave event instead\n        // check for unsupported neighbors\n        for (let x = this.x - 1; x <= this.x + 1; x++) {\n            for (let y = this.y - 1; y <= this.y + 1; y++) {\n                if (x !== this.x || y !== this.y) {\n                    const surf = this.terrain.getSurface(x, y);\n                    surf.needsMeshUpdate = true;\n                    if (!surf.isSupported()) surf.collapse();\n                }\n            }\n        }\n        // update meshes\n        this.terrain.updateSurfaceMeshes();\n        this.terrain.floorGroup.updateWorldMatrix(true, true);\n        // drop contained crystals and ores\n        for (let c = 0; c < this.containedCrystals; c++) {\n            const x = this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4);\n            const z = this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4);\n            this.terrain.worldMgr.addCollectable(new Crystal(), x, z);\n        }\n        this.dropContainedOre(this.containedOres - 4);\n        // TODO workaround until buildings can be placed without terrain ray intersection\n        GameState.buildings.forEach((b) => b.group.position.y = this.terrain.worldMgr.getTerrainHeight(b.group.position.x, b.group.position.z));\n    }\n\n    private dropContainedOre(dropAmount: number) {\n        for (let c = 0; c < dropAmount && this.containedOres > 0; c++) {\n            this.containedOres--;\n            const x = this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4);\n            const z = this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4);\n            this.terrain.worldMgr.addCollectable(new Ore(), x, z);\n        }\n    }\n\n    cancelJobs() {\n        const jobs = this.jobs; // ensure consistency while processing\n        this.jobs = [];\n        jobs.forEach((job) => EventBus.publishEvent(new JobDeleteEvent(job)));\n        this.updateJobColor();\n    }\n\n    reduceRubble() {\n        if (this.surfaceType === SurfaceType.RUBBLE4) this.surfaceType = SurfaceType.RUBBLE3;\n        else if (this.surfaceType === SurfaceType.RUBBLE3) this.surfaceType = SurfaceType.RUBBLE2;\n        else if (this.surfaceType === SurfaceType.RUBBLE2) this.surfaceType = SurfaceType.RUBBLE1;\n        else if (this.surfaceType === SurfaceType.RUBBLE1) this.surfaceType = SurfaceType.GROUND;\n        this.dropContainedOre(1);\n        this.updateTexture();\n    }\n\n    isSupported(): boolean {\n        if (this.surfaceType.floor) return true;\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y);\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1);\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1);\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1);\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y);\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1);\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1);\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1);\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor);\n        }\n\n        return isHighGround(surfLeft, surfTopLeft, surfTop)\n            || isHighGround(surfTop, surfTopRight, surfRight)\n            || isHighGround(surfRight, surfBottomRight, surfBottom)\n            || isHighGround(surfBottom, surfBottomLeft, surfLeft);\n    }\n\n    updateMesh(force: boolean = true) {\n        if (!force && !this.needsMeshUpdate) return;\n        this.needsMeshUpdate = false;\n\n        const topLeftVertex = new Vector3(this.x, 0, this.y);\n        const topRightVertex = new Vector3(this.x + 1, 0, this.y);\n        const bottomLeftVertex = new Vector3(this.x, 0, this.y + 1);\n        const bottomRightVertex = new Vector3(this.x + 1, 0, this.y + 1);\n\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y);\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1);\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1);\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1);\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y);\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1);\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1);\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1);\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor);\n        }\n\n        if (!this.discovered) {\n            topLeftVertex.y = 1;\n            topRightVertex.y = 1;\n            bottomRightVertex.y = 1;\n            bottomLeftVertex.y = 1;\n        } else if (!this.surfaceType.floor) {\n            if (isHighGround(surfLeft, surfTopLeft, surfTop)) topLeftVertex.y = 1;\n            if (isHighGround(surfTop, surfTopRight, surfRight)) topRightVertex.y = 1;\n            if (isHighGround(surfRight, surfBottomRight, surfBottom)) bottomRightVertex.y = 1;\n            if (isHighGround(surfBottom, surfBottomLeft, surfLeft)) bottomLeftVertex.y = 1;\n        }\n\n        // update mesh (geometry), if wall type changed\n        let wallType = topLeftVertex.y + topRightVertex.y + bottomRightVertex.y + bottomLeftVertex.y;\n        if (wallType === WALL_TYPE.WALL && topLeftVertex.y === bottomRightVertex.y) wallType = WALL_TYPE.WEIRD_CREVICE;\n\n        if (this.wallType !== wallType) {\n            this.wallType = wallType;\n            this.updateGeometry(topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex, surfTopLeft, surfTop, surfLeft, surfTopRight, surfRight, surfBottomRight, surfBottom, surfBottomLeft);\n            if (this.wallType !== WALL_TYPE.WALL) this.cancelReinforceJobs();\n            // TODO if wall was reinforced remove it (same for fallin)\n        }\n\n        this.updateTexture();\n        this.updateJobColor();\n    }\n\n    cancelReinforceJobs() {\n        this.jobs.filter((j) => j.workType === SurfaceJobType.REINFORCE).forEach((j) => EventBus.publishEvent(new JobDeleteEvent(j)));\n        this.jobs = this.jobs.filter((j) => j.workType !== SurfaceJobType.REINFORCE);\n        this.updateJobColor();\n    }\n\n    updateTexture() {\n        let textureName = this.terrain.textureSet.texturebasename;\n        if (!this.discovered) {\n            textureName += '70';\n        } else if (this.surfaceType === SurfaceType.POWER_PATH) {\n            textureName += this.updatePowerPathTexture();\n        } else if (!this.surfaceType.shaping) {\n            textureName += this.surfaceType.matIndex.toString();\n        } else if (this.wallType === WALL_TYPE.WEIRD_CREVICE) {\n            textureName += '77';\n        } else {\n            if (this.wallType === WALL_TYPE.CORNER) {\n                textureName += '5';\n            } else if (this.wallType === WALL_TYPE.INVERTED_CORNER) {\n                textureName += '3';\n            } else if (this.reinforced) {\n                textureName += '2';\n            } else {\n                textureName += '0';\n            }\n            textureName += this.surfaceType.matIndex;\n        }\n        textureName += '.bmp';\n\n        const texture = ResourceManager.getTexture(textureName);\n        texture.flipY = false; // TODO is this necessary? Maybe turn around UV or vertices?\n        texture.center.set(0.5, 0.5);\n        texture.rotation = this.surfaceRotation;\n\n        this.accessMaterials().forEach((mat) => mat.map = texture);\n    }\n\n    updatePowerPathTexture(): string {\n        this.surfaceRotation = 0;\n        const left = this.terrain.getSurface(this.x - 1, this.y).isPath();\n        const top = this.terrain.getSurface(this.x, this.y - 1).isPath();\n        const right = this.terrain.getSurface(this.x + 1, this.y).isPath();\n        const bottom = this.terrain.getSurface(this.x, this.y + 1).isPath();\n        const pathSum = (left ? 1 : 0) + (top ? 1 : 0) + (right ? 1 : 0) + (bottom ? 1 : 0);\n        if (pathSum === 0 || pathSum === 1) {\n            if (left) this.surfaceRotation = Math.PI / 2;\n            if (top) this.surfaceRotation = Math.PI;\n            if (right) this.surfaceRotation = -Math.PI / 2;\n            return '65';\n        } else if (pathSum === 2) {\n            if (left === right) {\n                this.surfaceRotation = left ? Math.PI / 2 : 0;\n                return '62';\n            } else {\n                if (left && bottom) this.surfaceRotation = Math.PI / 2;\n                if (left && top) this.surfaceRotation = Math.PI;\n                if (top && right) this.surfaceRotation = -Math.PI / 2;\n                return '63';\n            }\n        } else if (pathSum === 3) {\n            if (!top) this.surfaceRotation = Math.PI / 2;\n            if (!right) this.surfaceRotation = Math.PI;\n            if (!bottom) this.surfaceRotation = -Math.PI / 2;\n            return '64';\n        } else {\n            return '60';\n        }\n    }\n\n    accessMaterials(): MeshPhongMaterial[] {\n        if (!this.mesh || !this.mesh.material) return [];\n        if (Array.isArray(this.mesh.material)) {\n            return this.mesh.material as MeshPhongMaterial[];\n        } else {\n            return [this.mesh.material as MeshPhongMaterial];\n        }\n    }\n\n    updateGeometry(topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3, surfTopLeft: Surface, surfTop: Surface, surfLeft: Surface, surfTopRight: Surface, surfRight: Surface, surfBottomRight: Surface, surfBottom: Surface, surfBottomLeft: Surface) {\n        let uvOffset = 0;\n\n        // not-rotated\n        // 1 ?\n        // ? 0\n        if (topLeftVertex.y && !bottomRightVertex.y &&\n            (this.wallType === WALL_TYPE.INVERTED_CORNER || ((this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topRightVertex.y)))) {\n            uvOffset = 0;\n        }\n\n        // 90 clock-wise\n        // ? 1\n        // 0 ?\n        if (topRightVertex.y && !bottomLeftVertex.y &&\n            (this.wallType === WALL_TYPE.INVERTED_CORNER || ((this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomRightVertex.y)))) {\n            uvOffset = 3;\n        }\n\n        // 180 clock-wise\n        // 0 ?\n        // ? 1\n        if (bottomRightVertex.y && !topLeftVertex.y &&\n            (this.wallType === WALL_TYPE.INVERTED_CORNER || ((this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomLeftVertex.y)))) {\n            uvOffset = 2;\n        }\n\n        // 270 clock-wise\n        // ? 0\n        // 1 ?\n        if (bottomLeftVertex.y && !topRightVertex.y &&\n            (this.wallType === WALL_TYPE.INVERTED_CORNER || ((this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topLeftVertex.y)))) {\n            uvOffset = 1;\n        }\n\n        if (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.WEIRD_CREVICE) {\n            if (topLeftVertex.y && bottomRightVertex.y) {\n                uvOffset = 0;\n            }\n            if (topRightVertex.y && bottomLeftVertex.y) {\n                uvOffset = 3;\n            }\n        }\n\n        /*\n        //\t\t0---1                1         0---1\n        //\t\t|   |  becomes      /|   and   |  /\n        //\t\t|   |             /  |         |/\n        //\t\t3---2            3---2         3\n        //\n        //\t\tOR\n        //\n        //\t\t0---1            0             0---1\n        //\t\t|   |  becomes   |\\    \t and    \\  |\n        //\t\t|   |            |  \\             \\|\n        //\t\t3---2            3---2             2\n        //\n        //\t\tTriangles 0-1-3 and 0-3-2\n        //\t\tQuad 0-1-3-2\n        */\n\n        if (this.mesh) this.terrain.floorGroup.remove(this.mesh);\n        if (this.geometry) this.geometry.dispose();\n        this.geometry = new Geometry();\n\n        this.geometry.vertices.push(\n            topLeftVertex,\n            topRightVertex,\n            bottomRightVertex,\n            bottomLeftVertex,\n        );\n\n        const uv = [\n            new Vector2(0, 0),\n            new Vector2(1, 0),\n            new Vector2(1, 1),\n            new Vector2(0, 1),\n        ];\n\n        if (topRightVertex.y !== bottomLeftVertex.y ||\n            ((this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.WEIRD_CREVICE) && !(topRightVertex.y && bottomLeftVertex.y))) {\n            this.geometry.faceVertexUvs[0].push([\n                uv[(1 + uvOffset) % 4],\n                uv[(3 + uvOffset) % 4],\n                uv[(2 + uvOffset) % 4],\n            ]);\n\n            // noinspection PointlessArithmeticExpressionJS\n            this.geometry.faceVertexUvs[0].push([\n                uv[(1 + uvOffset) % 4],\n                uv[(0 + uvOffset) % 4],\n                uv[(3 + uvOffset) % 4],\n            ]);\n\n            this.geometry.faces.push(\n                new Face3(1, 3, 2),\n                new Face3(1, 0, 3),\n            );\n        } else {\n            // noinspection PointlessArithmeticExpressionJS\n            this.geometry.faceVertexUvs[0].push([\n                uv[(0 + uvOffset) % 4],\n                uv[(3 + uvOffset) % 4],\n                uv[(2 + uvOffset) % 4],\n            ]);\n\n            // noinspection PointlessArithmeticExpressionJS\n            this.geometry.faceVertexUvs[0].push([\n                uv[(0 + uvOffset) % 4],\n                uv[(2 + uvOffset) % 4],\n                uv[(1 + uvOffset) % 4],\n            ]);\n\n            this.geometry.faces.push(\n                new Face3(0, 3, 2),\n                new Face3(0, 2, 1),\n            );\n        }\n\n        function avgHeight(...args: Surface[]) {\n            let sum = 0, cnt = 0;\n            args.map(s => s.heightOffset).filter(Boolean).forEach(h => {\n                sum += h;\n                cnt++;\n            });\n            return sum / cnt;\n        }\n\n        // apply height fine-tuning\n        topLeftVertex.y += avgHeight(surfTopLeft, surfTop, this, surfLeft) * HEIGHT_MULTIPLER;\n        topRightVertex.y += avgHeight(surfTop, surfTopRight, surfRight, this) * HEIGHT_MULTIPLER;\n        bottomRightVertex.y += avgHeight(this, surfRight, surfBottomRight, surfBottom) * HEIGHT_MULTIPLER;\n        bottomLeftVertex.y += avgHeight(surfLeft, this, surfBottom, surfBottomLeft) * HEIGHT_MULTIPLER;\n\n        this.geometry.computeFaceNormals();\n        this.geometry.computeVertexNormals();\n\n        this.mesh = new Mesh(this.geometry, new MeshPhongMaterial({shininess: 0}));\n        this.mesh.userData = {selectable: this};\n\n        this.terrain.floorGroup.add(this.mesh);\n        this.terrain.floorGroup.updateWorldMatrix(true, true); // otherwise ray intersection is not working before rendering\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.SURFACE;\n    }\n\n    select(): Selectable {\n        if (this.surfaceType.selectable && (this.wallType !== WALL_TYPE.INVERTED_CORNER && this.wallType !== WALL_TYPE.WEIRD_CREVICE) && !this.selected) {\n            this.selected = true;\n            this.accessMaterials().forEach((mat) => mat.color.setHex(0x6060a0));\n            EventBus.publishEvent(new SurfaceSelectedEvent(this));\n            return this;\n        }\n        return null;\n    }\n\n    deselect(): any {\n        if (this.selected) {\n            this.selected = false;\n            this.updateJobColor();\n        }\n    }\n\n    getSelectionCenter(): Vector3 {\n        return null; // not used\n    }\n\n    updateJobColor() {\n        let color = 0xffffff;\n        this.jobs.forEach((job) => color = job.workType.color); // TODO prioritize colors?\n        this.accessMaterials().forEach((mat) => mat.color.setHex(color));\n    }\n\n    hasRubble(): boolean { // TODO performance: use boolean on surfacetype\n        return this.surfaceType === SurfaceType.RUBBLE1\n            || this.surfaceType === SurfaceType.RUBBLE2\n            || this.surfaceType === SurfaceType.RUBBLE3\n            || this.surfaceType === SurfaceType.RUBBLE4;\n    }\n\n    isPath(): boolean {\n        return this.surfaceType === SurfaceType.POWER_PATH || this.surfaceType === SurfaceType.POWER_PATH_BUILDING;\n    }\n\n    isWalkable(): boolean {\n        return this.surfaceType.floor && this.surfaceType !== SurfaceType.LAVA && this.surfaceType !== SurfaceType.WATER;\n    }\n\n    isDrillable(): boolean {\n        return this.surfaceType.drillable && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER);\n    }\n\n    isReinforcable(): boolean {\n        return this.surfaceType.reinforcable && this.wallType === WALL_TYPE.WALL && !this.reinforced;\n    }\n\n    isExplodable(): boolean {\n        return this.surfaceType.explodable && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER);\n    }\n\n    isDigable(): boolean {\n        return this.isDrillable() || this.isExplodable();\n    }\n\n    getDigPositions(): Vector3[] {\n        const digPosition = [];\n        if (this.terrain.getSurface(this.x - 1, this.y).surfaceType.floor) digPosition.push(new Vector3(this.x * TILESIZE, 0, this.y * TILESIZE + TILESIZE / 2));\n        if (this.terrain.getSurface(this.x, this.y - 1).surfaceType.floor) digPosition.push(new Vector3(this.x * TILESIZE + TILESIZE / 2, 0, this.y * TILESIZE));\n        if (this.terrain.getSurface(this.x + 1, this.y).surfaceType.floor) digPosition.push(new Vector3(this.x * TILESIZE + TILESIZE, 0, this.y * TILESIZE + TILESIZE / 2));\n        if (this.terrain.getSurface(this.x, this.y + 1).surfaceType.floor) digPosition.push(new Vector3(this.x * TILESIZE + TILESIZE / 2, 0, this.y * TILESIZE + TILESIZE));\n        return digPosition;\n    }\n\n    reinforce() {\n        this.reinforced = true;\n        this.cancelReinforceJobs();\n        if (this.fallinTimeout) clearTimeout(this.fallinTimeout);\n        this.updateTexture();\n    }\n\n    getCenterWorld(): Vector3 {\n        const center = new Vector3(this.x * TILESIZE + TILESIZE / 2, 0, this.y * TILESIZE + TILESIZE / 2);\n        center.y = this.terrain.worldMgr.getTerrainHeight(center.x, center.z);\n        return center;\n    }\n\n    setFallinLevel(fallinLevel: number) {\n        if (fallinLevel < 1) return;\n        let originPos;\n        let targetPos;\n        if (this.surfaceType.floor) {\n            originPos = this.terrain.findFallInOrigin(this.x, this.y);\n            targetPos = [this.x, this.y];\n        } else {\n            originPos = [this.x, this.y];\n            targetPos = this.terrain.findFallInTarget(this.x, this.y);\n        }\n        if (originPos && targetPos) {\n            this.terrain.getSurface(originPos[0], originPos[1]).scheduleFallin(targetPos[0], targetPos[1]);\n        }\n    }\n\n    scheduleFallin(targetX: number, targetY: number) {\n        this.fallinTimeout = setTimeout(() => {\n            this.createFallin(targetX, targetY);\n            this.scheduleFallin(targetX, targetY);\n        }, (60 + getRandom(120)) * 1000); // TODO adapt timer to level multiplier and fallin value\n    }\n\n    createFallin(targetX: number, targetY: number) {\n        console.log('there was a fallin'); // TODO publish event notice\n\n        // FIXME refactor animation handling\n        const content = ResourceManager.getResource('MiscAnims/RockFall/Rock3Sides.lws');\n        const animation = new LWSCLoader('MiscAnims/RockFall/').parse(content);\n        this.fallinGrp = new Group();\n        this.fallinGrp.position.copy(this.terrain.getSurface(targetX, targetY).getCenterWorld());\n        const dx = this.x - targetX, dy = targetY - this.y;\n        this.fallinGrp.rotateOnAxis(new Vector3(0, 1, 0), Math.atan2(dy, dx) + Math.PI / 2);\n        this.terrain.worldMgr.sceneManager.scene.add(this.fallinGrp);\n        const poly = [];\n        animation.bodies.forEach((body) => {\n            const polyModel = body.model.clone(true);\n            poly.push(polyModel);\n        });\n        animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = poly[index];\n            const parentInd = body.parentObjInd;\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                poly[parentInd].add(polyPart);\n            } else {\n                this.fallinGrp.add(polyPart);\n            }\n        });\n        this.animate(poly, animation, 0);\n\n        const targetSurface = this.terrain.getSurface(targetX, targetY);\n        targetSurface.surfaceType = SurfaceType.RUBBLE4;\n        targetSurface.updateTexture();\n    }\n\n    animate(poly, animation, frameIndex) { // FIXME refactor animation handling\n        if (poly.length !== animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length';\n        animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = poly[index];\n            p.position.copy(body.relPos[frameIndex]);\n            p.rotation.copy(body.relRot[frameIndex]);\n            p.scale.copy(body.relScale[frameIndex]);\n            if (p.hasOwnProperty('material')) {\n                const material = p['material'];\n                const opacity = body.opacity[frameIndex];\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material];\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity;\n                        mat.transparent = true;\n                        mat.alphaTest = 0;\n                    });\n                }\n            }\n        });\n        this.animationTimeout = null;\n        if (!(frameIndex + 1 > animation.lastFrame) || animation.looping) {\n            let nextFrame = frameIndex + 1;\n            if (nextFrame > animation.lastFrame) {\n                nextFrame = animation.firstFrame;\n            }\n            const that = this;\n            this.animationTimeout = setTimeout(() => that.animate(poly, animation, nextFrame), 1000 / animation.framesPerSecond * animation.transcoef);\n        } else {\n            this.terrain.worldMgr.sceneManager.scene.remove(this.fallinGrp);\n            this.fallinGrp = null;\n        }\n    }\n\n}\n\nexport enum WALL_TYPE {\n\n    CORNER = 1,\n    WALL = 2,\n    INVERTED_CORNER = 3,\n    WEIRD_CREVICE = 20,\n\n}\n","import { AmbientLight, Frustum, MOUSE, PerspectiveCamera, PointLight, Raycaster, Scene, Vector3, WebGLRenderer } from 'three';\nimport { DebugHelper } from './DebugHelper';\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { GameState } from '../game/model/GameState';\nimport { Selectable } from '../game/model/Selectable';\nimport { Terrain } from './model/map/Terrain';\n\nexport class SceneManager {\n\n    maxFps: number = 30; // most animations use 25 fps so this should be enough\n    renderer: WebGLRenderer;\n    debugHelper: DebugHelper = new DebugHelper();\n    renderInterval;\n    animRequest;\n    scene: Scene;\n    camera: PerspectiveCamera;\n    amb: AmbientLight;\n    light: PointLight;\n    terrain: Terrain;\n    controls: MapControls;\n    cursorTorchlight: PointLight;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.renderer = new WebGLRenderer({antialias: true, canvas: canvas});\n        this.renderer.setClearColor(0x000000);\n\n        this.scene = new Scene();\n        // this.scene.fog = new FogExp2(0x6e6e9b, 0.05); // TODO derive from level config\n\n        this.amb = new AmbientLight(0x808080); // TODO use \"cave\" light setup\n        this.scene.add(this.amb);\n\n        this.cursorTorchlight = new PointLight(0xffffff, 1, 7, 2);\n        this.scene.add(this.cursorTorchlight);\n\n        this.camera = new PerspectiveCamera(30, canvas.width / canvas.height, 0.1, 5000); // TODO make these params configurable\n\n        this.controls = new MapControls(this.camera, this.renderer.domElement);\n        this.controls.mouseButtons = {LEFT: null, MIDDLE: MOUSE.ROTATE, RIGHT: MOUSE.PAN};\n        // this.controls.maxPolarAngle = Math.PI * 0.45; // TODO dynamically adapt to terrain height at camera position\n    }\n\n    selectEntitiesByRay(rx: number, ry: number) {\n        const raycaster = new Raycaster();\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera);\n        let intersects = raycaster.intersectObjects(GameState.raiders.map((r) => r.pickSphere));\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.vehicles.map((v) => v.pickSphere));\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.buildings.map((b) => b.pickSphere));\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(this.terrain.floorGroup.children);\n        const selected = [];\n        if (intersects.length > 0) {\n            const userData = intersects[0].object.userData;\n            if (userData && userData.hasOwnProperty('selectable')) {\n                const selectable = userData['selectable'];\n                if (selectable) selected.push(selectable);\n            }\n        }\n        GameState.selectEntities(selected);\n    }\n\n    selectEntitiesInFrustum(r1x: number, r1y: number, r2x: number, r2y: number) {\n        const startPoint = new Vector3(r1x, r1y, 0.5);\n        const endPoint = new Vector3(r2x, r2y, 0.5);\n        // Avoid invalid frustum\n        if (startPoint.x === endPoint.x) {\n            endPoint.x += Number.EPSILON;\n        }\n        if (startPoint.y === endPoint.y) {\n            endPoint.y += Number.EPSILON;\n        }\n        // update camera\n        this.camera.updateProjectionMatrix();\n        this.camera.updateMatrixWorld();\n        // update frustum\n        const tmpPoint = new Vector3();\n        tmpPoint.copy(startPoint);\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x);\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y);\n        endPoint.x = Math.max(startPoint.x, endPoint.x);\n        endPoint.y = Math.min(startPoint.y, endPoint.y);\n\n        const vecNear = new Vector3();\n        const vecTopLeft = new Vector3();\n        const vecTopRight = new Vector3();\n        const vecDownRight = new Vector3();\n        const vecDownLeft = new Vector3();\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld);\n        vecTopLeft.copy(tmpPoint);\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0);\n        vecDownRight.copy(endPoint);\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0);\n\n        vecTopLeft.unproject(this.camera);\n        vecTopRight.unproject(this.camera);\n        vecDownRight.unproject(this.camera);\n        vecDownLeft.unproject(this.camera);\n\n        const vectemp1 = new Vector3();\n        const vectemp2 = new Vector3();\n        const vectemp3 = new Vector3();\n        vectemp1.copy(vecTopLeft).sub(vecNear);\n        vectemp2.copy(vecTopRight).sub(vecNear);\n        vectemp3.copy(vecDownRight).sub(vecNear);\n        vectemp1.normalize();\n        vectemp2.normalize();\n        vectemp3.normalize();\n\n        const deep = Number.MAX_VALUE;\n        vectemp1.multiplyScalar(deep);\n        vectemp2.multiplyScalar(deep);\n        vectemp3.multiplyScalar(deep);\n        vectemp1.add(vecNear);\n        vectemp2.add(vecNear);\n        vectemp3.add(vecNear);\n\n        const frustum = new Frustum();\n        const planes = frustum.planes;\n\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight);\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight);\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear);\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear);\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft);\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1);\n        planes[5].normal.multiplyScalar(-1);\n\n        let entities: Selectable[] = GameState.raiders.filter((r) => frustum.containsPoint(r.getSelectionCenter()));\n        entities.push(...(GameState.vehicles.filter((v) => frustum.containsPoint(v.getSelectionCenter()))));\n        if (entities.length < 1) entities = GameState.buildings.filter((b) => frustum.containsPoint(b.getSelectionCenter()));\n        GameState.selectEntities(entities);\n    }\n\n    startRendering() {\n        this.debugHelper.show();\n        this.renderInterval = setInterval(() => { // TODO cancel interval when not in game mode\n            this.animRequest = requestAnimationFrame(() => {\n                this.debugHelper.renderStart();\n                this.renderer.render(this.scene, this.camera);\n                this.debugHelper.renderDone();\n            });\n        }, 1000 / this.maxFps);\n    }\n\n    stopRendering() {\n        this.debugHelper.hide();\n        if (this.renderInterval) {\n            clearInterval(this.renderInterval);\n            this.renderInterval = null;\n        }\n        if (this.animRequest) {\n            cancelAnimationFrame(this.animRequest);\n            this.animRequest = null;\n        }\n    }\n\n}\n","export class SurfaceType {\n\n    name: string; // humand readable, maybe used as label lateron\n    shaping: boolean = false;\n    matIndex: string = '00';\n    floor: boolean = false;\n    selectable: boolean = false;\n    drillable: boolean = false;\n    explodable: boolean = false;\n    reinforcable: boolean = false;\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options);\n    }\n\n    static readonly GROUND = new SurfaceType({name: 'ground', floor: true, selectable: true});\n    static readonly SOLID_ROCK = new SurfaceType({name: 'solid rock', shaping: true, matIndex: '5'});\n    static readonly HARD_ROCK = new SurfaceType({name: 'hard rock', shaping: true, matIndex: '4', selectable: true, explodable: true, reinforcable: true});\n    static readonly LOOSE_ROCK = new SurfaceType({name: 'loose rock', shaping: true, matIndex: '3', selectable: true, drillable: true, explodable: true, reinforcable: true});\n    static readonly DIRT = new SurfaceType({name: 'dirt', shaping: true, matIndex: '1', selectable: true, drillable: true, explodable: true, reinforcable: true});\n    static readonly SLUG_HOLE = new SurfaceType({name: 'slug hole', floor: true, matIndex: '30'});\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'});\n    static readonly ORE_SEAM = new SurfaceType({name: 'ore seam', matIndex: '40', selectable: true, drillable: true, explodable: true, reinforcable: true});\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45'});\n    static readonly CRYSTAL_SEAM = new SurfaceType({name: 'energy crystal seam', matIndex: '20', selectable: true, drillable: true, explodable: true, reinforcable: true});\n    static readonly RECHARGE_SEAM = new SurfaceType({name: 'recharge seam', matIndex: '67'});\n    static readonly POWER_PATH = new SurfaceType({name: 'power path all', floor: true, matIndex: '60', selectable: true});\n    static readonly POWER_PATH_SITE = new SurfaceType({name: 'power path site', floor: true, matIndex: '61', selectable: true});\n    static readonly POWER_PATH_BUILDING = new SurfaceType({name: 'power path', floor: true, matIndex: '76'});\n    static readonly RUBBLE1 = new SurfaceType({name: 'rubble 1', floor: true, matIndex: '13', selectable: true});\n    static readonly RUBBLE2 = new SurfaceType({name: 'rubble 2', floor: true, matIndex: '12', selectable: true});\n    static readonly RUBBLE3 = new SurfaceType({name: 'rubble 3', floor: true, matIndex: '11', selectable: true});\n    static readonly RUBBLE4 = new SurfaceType({name: 'rubble 4', floor: true, matIndex: '10', selectable: true});\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING;\n            case 1:\n                return SurfaceType.SOLID_ROCK;\n            case 2:\n                return SurfaceType.HARD_ROCK;\n            case 3:\n                return SurfaceType.LOOSE_ROCK;\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT;\n            case 6:\n                return SurfaceType.LAVA;\n            case 8:\n                return SurfaceType.ORE_SEAM;\n            case 9:\n                return SurfaceType.WATER;\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM;\n            case 11:\n                return SurfaceType.RECHARGE_SEAM;\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE;\n            case 100:\n                return SurfaceType.RUBBLE4;\n            case 101:\n                return SurfaceType.RUBBLE3;\n            case 102:\n                return SurfaceType.RUBBLE2;\n            case 103:\n                return SurfaceType.RUBBLE1;\n            default:\n                console.error('Unexpected surface type num: ' + typeNum);\n                return SurfaceType.SOLID_ROCK;\n        }\n    }\n}\n","import { Surface } from '../../../scene/model/map/Surface';\nimport { FulfillerEntity } from '../../../scene/model/FulfillerEntity';\nimport { Vector3 } from 'three';\nimport { JOB_ACTION_RANGE, TILESIZE } from '../../../main';\nimport { Dynamite } from '../../../scene/model/collect/Dynamite';\nimport { Job, JobType } from './Job';\nimport { SurfaceType } from '../../../scene/model/map/SurfaceType';\nimport { CollectableEntity } from '../../../scene/model/collect/CollectableEntity';\n\nexport class SurfaceJobType {\n\n    color: number;\n    requiredTools: string[];\n    requiredSkills: string[];\n\n    constructor(color: number, requiredTools: string[], requiredSkills: string[]) {\n        this.color = color;\n        this.requiredTools = requiredTools;\n        this.requiredSkills = requiredSkills;\n    }\n\n    static readonly DRILL = new SurfaceJobType(0xa0a0a0, ['drill'], []);\n    static readonly REINFORCE = new SurfaceJobType(0x60a060, ['hammer'], []);\n    static readonly BLOW = new SurfaceJobType(0xa06060, [], ['demolition']);\n    static readonly CLEAR_RUBBLE = new SurfaceJobType(0xffffff, ['shovel'], []);\n\n}\n\nexport class SurfaceJob extends Job {\n\n    surface: Surface;\n    workType: SurfaceJobType;\n\n    constructor(workType: SurfaceJobType, surface: Surface) {\n        super(JobType.SURFACE);\n        this.surface = surface;\n        this.workType = workType;\n    }\n\n    isQualified(fulfiller: FulfillerEntity) {\n        return fulfiller.hasTools(this.workType.requiredTools) && fulfiller.hasSkills(this.workType.requiredSkills);\n    }\n\n    getPosition(): Vector3 {\n        if (this.workType === SurfaceJobType.CLEAR_RUBBLE) {\n            return this.surface.getCenterWorld();\n        } else {\n            const digPos = this.surface.getDigPositions()[0];\n            digPos.y = this.surface.terrain.worldMgr.getTerrainHeight(digPos.x, digPos.z);\n            return digPos;\n        }\n    }\n\n    isInArea(x: number, z: number): boolean {\n        if (this.workType === SurfaceJobType.CLEAR_RUBBLE) {\n            return x >= this.surface.x * TILESIZE + 5 && x < this.surface.x * TILESIZE + TILESIZE + 5\n                && z >= this.surface.y * TILESIZE + 5 && z < this.surface.y * TILESIZE + TILESIZE + 5;\n        } else {\n            const pos = this.getPosition();\n            return pos.sub(new Vector3(x, pos.y, z)).length() < JOB_ACTION_RANGE;\n        }\n    }\n\n    onJobComplete() {\n        super.onJobComplete();\n        switch (this.workType) {\n            case SurfaceJobType.DRILL:\n                this.surface.collapse();\n                break;\n            case SurfaceJobType.REINFORCE:\n                this.surface.reinforce();\n                break;\n            case SurfaceJobType.CLEAR_RUBBLE:\n                this.surface.reduceRubble();\n                break;\n        }\n    }\n\n}\n\nexport class DynamiteJob extends SurfaceJob {\n\n    dynamite: Dynamite;\n\n    constructor(surface: Surface, dynamite: Dynamite) {\n        super(SurfaceJobType.BLOW, surface);\n        this.dynamite = dynamite;\n    }\n\n    getPosition(): Vector3 {\n        return this.dynamite.getPosition();\n    }\n\n    onJobComplete() {\n        super.onJobComplete();\n        this.dynamite.ignite();\n    }\n\n}\n\nexport class CompletePowerPathJob extends SurfaceJob {\n\n    placedItems: CollectableEntity[];\n\n    constructor(surface: Surface, placedItems: CollectableEntity[]) {\n        super(SurfaceJobType.CLEAR_RUBBLE, surface);\n        this.placedItems = placedItems;\n    }\n\n    onJobComplete() {\n        super.onJobComplete();\n        this.placedItems.forEach((placed) => placed.worldMgr.sceneManager.scene.remove(placed.group));\n        this.surface.surfaceType = SurfaceType.POWER_PATH;\n        this.surface.updateTexture();\n    }\n\n}\n","import { Group, Vector3 } from 'three';\nimport { Surface } from './Surface';\nimport { WorldManager } from '../../WorldManager';\nimport { SurfaceType } from './SurfaceType';\nimport { TILESIZE } from '../../../main';\nimport { EventBus } from '../../../event/EventBus';\nimport { EntityAddedEvent, EntityType } from '../../../event/WorldEvents';\nimport { BuildingEntity } from '../BuildingEntity';\n\nexport class Terrain {\n\n    worldMgr: WorldManager;\n    textureSet: any = {};\n    width: number = 0;\n    height: number = 0;\n    surfaces: Surface[][] = [];\n    floorGroup: Group = new Group();\n    roofGroup: Group = new Group();\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr;\n        this.floorGroup.scale.set(TILESIZE, TILESIZE, TILESIZE);\n        this.roofGroup.visible = false; // keep roof hidden unless switched to other camera\n        EventBus.registerEventListener(EntityAddedEvent.eventKey, (event: EntityAddedEvent) => {\n            if (event.type !== EntityType.BUILDING) return;\n            (event.entity as BuildingEntity).surfaces.forEach((bSurf) => {\n                for (let x = -1; x <= 1; x++) {\n                    for (let y = -1; y <= 1; y++) {\n                        this.getSurface(bSurf.x + x, bSurf.y + y).updateTexture();\n                    }\n                }\n            });\n        });\n    }\n\n    getSurfaceFromWorld(worldPosition: Vector3): Surface | null {\n        return this.getSurface(worldPosition.x / TILESIZE, worldPosition.z / TILESIZE);\n    }\n\n    getSurface(x, y): Surface {\n        x = Math.floor(x);\n        y = Math.floor(y);\n        return this.getSurfaceOrNull(x, y) || new Surface(this, SurfaceType.SOLID_ROCK, x, y, 0);\n    }\n\n    getSurfaceOrNull(x, y): Surface | null {\n        if (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n            return this.surfaces[x][y];\n        } else {\n            return null;\n        }\n    }\n\n    updateSurfaceMeshes(force: boolean = false) {\n        this.surfaces.forEach((r) => r.forEach((s) => s.updateMesh(force)));\n        this.floorGroup.updateWorldMatrix(true, true); // otherwise ray intersection is not working before rendering\n    }\n\n    findFallInOrigin(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y);\n        if (leftSurface.isReinforcable()) return [leftSurface.x, leftSurface.y];\n        const topSurface = this.getSurface(x, y - 1);\n        if (topSurface.isReinforcable()) return [topSurface.x, topSurface.y];\n        const rightSurface = this.getSurface(x + 1, y);\n        if (rightSurface.isReinforcable()) return [rightSurface.x, rightSurface.y];\n        const bottomSurface = this.getSurface(x, y + 1);\n        if (bottomSurface.isReinforcable()) return [bottomSurface.x, bottomSurface.y];\n        const leftSurface2 = this.getSurface(x - 1, y);\n        if (leftSurface2.isDigable()) return [leftSurface2.x, leftSurface2.y];\n        const topSurface2 = this.getSurface(x, y - 1);\n        if (topSurface2.isDigable()) return [topSurface2.x, topSurface2.y];\n        const rightSurface2 = this.getSurface(x + 1, y);\n        if (rightSurface2.isDigable()) return [rightSurface2.x, rightSurface2.y];\n        const bottomSurface2 = this.getSurface(x, y + 1);\n        if (bottomSurface2.isDigable()) return [bottomSurface2.x, bottomSurface2.y];\n        return null;\n    }\n\n    findFallInTarget(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y);\n        if (leftSurface.isWalkable()) return [leftSurface.x, leftSurface.y];\n        const topSurface = this.getSurface(x, y - 1);\n        if (topSurface.isWalkable()) return [topSurface.x, topSurface.y];\n        const rightSurface = this.getSurface(x + 1, y);\n        if (rightSurface.isWalkable()) return [rightSurface.x, rightSurface.y];\n        const bottomSurface = this.getSurface(x, y + 1);\n        if (bottomSurface.isWalkable()) return [bottomSurface.x, bottomSurface.y];\n        return null;\n    }\n\n}\n","import { Surface } from './model/map/Surface';\nimport { Terrain } from './model/map/Terrain';\nimport { ResourceManager } from '../resource/ResourceManager';\nimport { iGet } from '../core/Util';\nimport { SurfaceType } from './model/map/SurfaceType';\nimport { WorldManager } from './WorldManager';\nimport { TILESIZE } from '../main';\n\nexport class TerrainLoader {\n\n    static loadTerrain(levelConf, worldMgr: WorldManager): Terrain {\n        const tileSize = Number(iGet(levelConf, 'BlockSize'));\n        if (tileSize !== TILESIZE) console.error('Unexpected tile size in level configuration: ' + tileSize);\n        const terrain = new Terrain(worldMgr);\n\n        const themeName = levelConf['TextureSet'][1];\n        terrain.textureSet = ResourceManager.cfg('Textures', themeName);\n        // console.log(terrain.textureSet);\n\n        const terrainMap = ResourceManager.getMap(iGet(levelConf, 'TerrainMap'));\n        terrain.width = terrainMap.width;\n        terrain.height = terrainMap.height;\n        const pathMap = ResourceManager.getMap(iGet(levelConf, 'PathMap'));\n        const surfaceMap = ResourceManager.getMap(iGet(levelConf, 'SurfaceMap')).level;\n        const predugMap = ResourceManager.getMap(iGet(levelConf, 'PreDugMap')).level;\n        const cryOreMap = ResourceManager.getMap(iGet(levelConf, 'CryOreMap')).level;\n        const fallinMap = ResourceManager.getMap(iGet(levelConf, 'FallinMap'));\n        const erodeMap = ResourceManager.getMap(iGet(levelConf, 'ErodeMap'));\n\n        // maps parsed from WAD are row-wise saved, which means y (row) comes first and x (column) second\n        for (let r = 0; r < terrainMap.level.length; r++) {\n            for (let c = 0; c < (terrainMap.level)[r].length; c++) {\n                (terrain.surfaces)[c] = (terrain.surfaces)[c] || [];\n                const surfaceTypeNum = (terrainMap.level)[r][c];\n                let surfaceType = SurfaceType.getByNum(surfaceTypeNum);\n                const predugLevel = predugMap[r][c];\n                if (predugLevel === PredugMap.CAVERN_EXPOSED) {\n                    if (surfaceType === SurfaceType.GROUND || surfaceType === SurfaceType.DIRT) {\n                        surfaceType = SurfaceType.GROUND;\n                    } else if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) {\n                        console.warn('Unexpected cavern surface type: ' + surfaceType.name);\n                    }\n                } else if (predugLevel === PredugMap.SLUG_HOLE_EXPOSED || predugLevel === PredugMap.SLUG_HOLE_HIDDEN) {\n                    surfaceType = SurfaceType.SLUG_HOLE;\n                } else if (predugLevel !== PredugMap.WALL && predugLevel !== PredugMap.CAVERN_HIDDEN) {\n                    console.warn('Unexpected predug level: ' + predugLevel);\n                }\n                // give the path map the highest priority, if it exists\n                const pathMapLevel = pathMap && surfaceType.floor ? pathMap.level[r][c] : PathMap.NONE;\n                if (pathMapLevel === PathMap.RUBBLE) {\n                    surfaceType = SurfaceType.RUBBLE4;\n                } else if (pathMapLevel === PathMap.POWER_PATH) {\n                    surfaceType = SurfaceType.POWER_PATH;\n                } else if (pathMapLevel !== PathMap.NONE) {\n                    console.warn('Unexpected path map level: ' + pathMapLevel);\n                }\n\n                const surface = new Surface(terrain, surfaceType, c, r, surfaceMap[r][c]);\n                const currentCryOre = cryOreMap[r][c];\n                if (currentCryOre % 2 === 1) {\n                    surface.containedCrystals = (currentCryOre + 1) / 2;\n                } else {\n                    surface.containedOres = currentCryOre / 2;\n                }\n\n                (terrain.surfaces)[c].push(surface);\n            }\n        }\n\n        // exlpore predug surfaces\n        terrain.surfaces.forEach(c => c.forEach(s => {\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_EXPOSED || predugMap[s.y][s.x] === PredugMap.SLUG_HOLE_EXPOSED) { // map are rows (y) first, columns (x) second\n                for (let x = s.x - 1; x <= s.x + 1; x++) {\n                    for (let y = s.y - 1; y <= s.y + 1; y++) {\n                        terrain.getSurfaceOrNull(x, y).discovered = true;\n                    }\n                }\n            }\n        }));\n\n        // create hidden caverns\n        terrain.surfaces.forEach(c => c.forEach(s => {\n            const surface = terrain.getSurfaceOrNull(s.x, s.y);\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_HIDDEN && !surface.discovered) {\n                surface.surfaceType = SurfaceType.GROUND;\n            }\n        }));\n\n        // crumble unsupported walls\n        terrain.surfaces.forEach((c) => c.forEach((s) => {\n            if (!s.isSupported()) s.collapse();\n        }));\n\n        terrain.updateSurfaceMeshes(true);\n\n        if (fallinMap) {\n            for (let x = 0; x < terrain.width; x++) {\n                for (let y = 0; y < terrain.height; y++) {\n                    terrain.getSurface(x, y).setFallinLevel(fallinMap.level[y][x]); // rows (y) before columns (x) used in maps\n                }\n            }\n        }\n\n        if (erodeMap) { // TODO implement lava erosion\n            console.warn('Lucky you! Lava erosion not yet implemented');\n        }\n\n        return terrain;\n    }\n\n}\n\nenum PathMap {\n\n    NONE = 0,\n    RUBBLE = 1,\n    POWER_PATH = 2,\n\n}\n\nenum PredugMap {\n\n    WALL = 0,\n    CAVERN_EXPOSED = 1,\n    CAVERN_HIDDEN = 2,\n    SLUG_HOLE_EXPOSED = 3,\n    SLUG_HOLE_HIDDEN = 4,\n}\n","import { MovableEntity } from './MovableEntity';\nimport { Selectable, SelectionType } from '../../game/model/Selectable';\nimport { ResourceManager } from '../../resource/ResourceManager';\nimport { CollectJob, Job, JobType } from '../../game/model/job/Job';\nimport { MathUtils, Vector3 } from 'three';\nimport { JOB_ACTION_RANGE, NATIVE_FRAMERATE } from '../../main';\nimport { getRandom, getRandomSign } from '../../core/Util';\nimport { Carryable } from './collect/Carryable';\nimport { DynamiteJob, SurfaceJob, SurfaceJobType } from '../../game/model/job/SurfaceJob';\nimport { SurfaceType } from './map/SurfaceType';\nimport { Crystal } from './collect/Crystal';\nimport { Ore } from './collect/Ore';\nimport degToRad = MathUtils.degToRad;\n\nexport abstract class FulfillerEntity extends MovableEntity implements Selectable {\n\n    selectionType: SelectionType;\n    selected: boolean;\n    workInterval = null;\n    job: Job = null;\n    activity: FulfillerActivity = null;\n    jobSubPos: Vector3 = null;\n    tools: string[] = [];\n    skills: string[] = [];\n    carries: Carryable = null; // TODO implement multi carry for vehicles\n    carryTarget: Vector3 = null;\n\n    protected constructor(selectionType: SelectionType, aeFilename: string, speed: number) {\n        super(ResourceManager.getAnimationEntityType(aeFilename), speed);\n        this.selectionType = selectionType;\n        this.group.userData = {'selectable': this};\n        this.workInterval = setInterval(this.work.bind(this), 1000 / NATIVE_FRAMERATE); // TODO do not use interval, make work trigger itself (with timeout/interval) until work is done\n    }\n\n    work() {\n        if (!this.job || this.selected) return;\n        if (this.job.type === JobType.SURFACE) {\n            const surfJob = this.job as SurfaceJob;\n            const surfaceJobType = surfJob.workType;\n            if (surfaceJobType === SurfaceJobType.DRILL) {\n                if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                    this.moveToTarget(this.job.getPosition());\n                } else {\n                    this.changeActivity(FulfillerActivity.DRILLING, () => { // TODO use drilling times from cfg\n                        if (surfJob.surface.seamLevel > 0) {\n                            surfJob.surface.seamLevel--;\n                            const vec = new Vector3().copy(this.getPosition()).sub(surfJob.surface.getCenterWorld())\n                                .multiplyScalar(0.3 + getRandom(3) / 10)\n                                .applyAxisAngle(new Vector3(0, 1, 0), degToRad(-10 + getRandom(20)))\n                                .add(this.getPosition());\n                            if (surfJob.surface.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                                this.worldMgr.addCollectable(new Crystal(), vec.x, vec.z);\n                            } else if (surfJob.surface.surfaceType === SurfaceType.ORE_SEAM) {\n                                this.worldMgr.addCollectable(new Ore(), vec.x, vec.z);\n                            }\n                            this.changeActivity(FulfillerActivity.STANDING);\n                        } else {\n                            this.job.onJobComplete();\n                            this.stopJob();\n                        }\n                    });\n                }\n            } else if (surfaceJobType === SurfaceJobType.CLEAR_RUBBLE) {\n                if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                    this.moveToTarget(this.job.getPosition());\n                } else {\n                    if (!this.jobSubPos) {\n                        const jobPos = this.job.getPosition();\n                        this.jobSubPos = new Vector3(jobPos.x + getRandomSign() * getRandom(10), 0, jobPos.z + getRandomSign() * getRandom(10));\n                        this.jobSubPos.y = this.worldMgr.getTerrainHeight(this.jobSubPos.x, this.jobSubPos.z);\n                    }\n                    if (new Vector3().copy(this.jobSubPos).sub(this.getPosition()).length() > this.getSpeed()) {\n                        this.moveToTarget(this.jobSubPos);\n                    } else {\n                        this.changeActivity(FulfillerActivity.SHOVELING, () => {\n                            this.job.onJobComplete();\n                            if (surfJob.surface.hasRubble()) {\n                                this.jobSubPos = null;\n                            } else {\n                                this.stopJob();\n                            }\n                        });\n                    }\n                }\n            } else if (surfaceJobType === SurfaceJobType.REINFORCE) {\n                if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                    this.moveToTarget(this.job.getPosition());\n                } else {\n                    this.changeActivity(FulfillerActivity.REINFORCE, () => {\n                        this.job.onJobComplete();\n                        this.stopJob();\n                    }, 3);\n                }\n            } else if (surfaceJobType === SurfaceJobType.BLOW) {\n                const bj = this.job as DynamiteJob;\n                if (this.carries !== bj.dynamite) {\n                    this.dropItem();\n                    if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                        this.moveToTarget(this.job.getPosition());\n                    } else {\n                        this.changeActivity(FulfillerActivity.PICKING, () => {\n                            this.pickupItem(bj.dynamite);\n                        });\n                    }\n                } else if (!this.carryTarget) {\n                    this.carryTarget = bj.surface.getDigPositions()[0];\n                } else if (this.getPosition().sub(this.carryTarget).length() > JOB_ACTION_RANGE) {\n                    this.moveToTarget(this.carryTarget);\n                } else {\n                    this.changeActivity(FulfillerActivity.DROPPING, () => {\n                        this.dropItem();\n                        this.job.onJobComplete();\n                        this.stopJob();\n                    });\n                }\n            }\n        } else if (this.job.type === JobType.CARRY) {\n            const carryJob = this.job as CollectJob;\n            if (this.carries !== carryJob.item) {\n                this.dropItem();\n                if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                    this.moveToTarget(this.job.getPosition());\n                } else {\n                    this.changeActivity(FulfillerActivity.PICKING, () => {\n                        this.pickupItem(carryJob.item);\n                    });\n                }\n            } else if (!this.carryTarget) {\n                this.carryTarget = this.carries.getTargetPos(); // TODO sleep 5 seconds, before retry\n            } else if (this.getPosition().sub(this.carryTarget).length() > JOB_ACTION_RANGE) {\n                this.moveToTarget(this.carryTarget);\n            } else {\n                this.changeActivity(FulfillerActivity.DROPPING, () => {\n                    this.dropItem();\n                    this.job.onJobComplete();\n                    this.stopJob();\n                });\n            }\n        } else if (this.job.type === JobType.MOVE) {\n            if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                this.moveToTarget(this.job.getPosition());\n            } else {\n                this.changeActivity(FulfillerActivity.STANDING, () => {\n                    this.job.onJobComplete();\n                    this.stopJob();\n                });\n            }\n        }\n    }\n\n    dropItem() {\n        if (!this.carries) return;\n        if (this.carryJoint) this.carryJoint.remove(this.carries.group);\n        this.carries.group.position.copy(this.group.position);\n        this.carries = null;\n        this.carryTarget = null;\n    }\n\n    pickupItem(item: Carryable) {\n        this.carries = item;\n        if (this.carryJoint) this.carryJoint.add(this.carries.group);\n        this.carries.group.position.set(0, 0, 0);\n    }\n\n    setJob(job: Job) {\n        if (this.job !== job) this.stopJob();\n        if (job.type === JobType.SURFACE) this.dropItem();\n        this.job = job;\n        if (this.job) this.job.assign(this);\n    }\n\n    stopJob() {\n        if (!this.job) return;\n        this.job.unassign(this);\n        this.jobSubPos = null;\n        this.carryTarget = null;\n        this.job = null;\n        this.changeActivity(FulfillerActivity.STANDING);\n    }\n\n    hasTools(toolnames: string[]) {\n        for (let c = 0; c < toolnames.length; c++) {\n            if (this.tools.indexOf(toolnames[c]) === -1) return false;\n        }\n        return true;\n    }\n\n    hasSkills(skillKeys: string[]) {\n        for (let c = 0; c < skillKeys.length; c++) {\n            if (this.skills.indexOf(skillKeys[c]) === -1) return false;\n        }\n        return true;\n    }\n\n    getSelectionType(): SelectionType {\n        return this.selectionType;\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false;\n        this.selected = false;\n    }\n\n    select() {\n        this.selectionFrame.visible = true;\n        if (!this.selected) {\n            this.selected = true;\n            this.onSelect();\n            return this;\n        }\n        return null;\n    }\n\n    onSelect() {\n    }\n\n    abstract getSelectionCenter(): Vector3;\n\n}\n\nexport enum FulfillerActivity {\n\n    STANDING,\n    MOVING,\n    MOVING_RUBBLE,\n    DRILLING,\n    SHOVELING,\n    PICKING,\n    DROPPING,\n    REINFORCE,\n\n}\n","import { AnimEntity } from './anim/AnimEntity';\nimport { Vector3 } from 'three';\nimport { AnimationEntityType } from './anim/AnimationEntityType';\nimport { FulfillerActivity } from './FulfillerEntity';\n\nexport abstract class MovableEntity extends AnimEntity {\n\n    speed: number;\n\n    constructor(entityType: AnimationEntityType, speed: number) {\n        super(entityType);\n        this.speed = speed;\n    }\n\n    getPosition(): Vector3 {\n        return new Vector3().copy(this.group.position);\n    }\n\n    getSpeed() {\n        return this.speed;\n    }\n\n    moveToTarget(target: Vector3) {\n        target.y = this.worldMgr.getTerrainHeight(target.x, target.z);\n        if (this.isOnRubble()) {\n            this.changeActivity(FulfillerActivity.MOVING_RUBBLE);\n        } else {\n            this.changeActivity(FulfillerActivity.MOVING);\n        }\n        const step = new Vector3().copy(target).sub(this.getPosition());\n        if (step.length() > this.getSpeed()) step.setLength(this.getSpeed()); // TODO use average speed between current and target position\n        this.group.position.add(step);\n        this.group.position.y = this.worldMgr.getTerrainHeight(this.group.position.x, this.group.position.z);\n        this.group.lookAt(new Vector3(target.x, this.group.position.y, target.z));\n    }\n\n    isOnRubble(): boolean {\n        return false;\n    }\n\n    changeActivity(activity: FulfillerActivity, onChangeDone = null, iterations = 1) {\n    }\n\n}","import { SelectionType } from '../../game/model/Selectable';\nimport { EventBus } from '../../event/EventBus';\nimport { RAIDER_SPEED } from '../../main';\nimport { RaiderSelected } from '../../event/LocalEvents';\nimport { FulfillerActivity, FulfillerEntity } from './FulfillerEntity';\nimport { GameState } from '../../game/model/GameState';\nimport { Vector3 } from 'three';\nimport { EntityAddedEvent, EntityType } from '../../event/WorldEvents';\n\nexport class Raider extends FulfillerEntity {\n\n    constructor() {\n        super(SelectionType.PILOT, 'mini-figures/pilot/pilot.ae', RAIDER_SPEED);\n        this.tools = ['drill', 'shovel', 'hammer'];\n        this.skills = ['demolition'];\n        this.pickSphereRadius = 10; // TODO read pick sphere size from cfg\n        this.selectionFrameSize = 10;\n    }\n\n    isOnRubble() {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).hasRubble();\n    }\n\n    getSpeed(): number {\n        let speed = super.getSpeed();\n        if (this.animation && !isNaN(this.animation.transcoef)) speed *= this.animation.transcoef;\n        if (this.isOnPath()) speed *= 2; // TODO read from cfg\n        return speed;\n    }\n\n    isOnPath(): boolean {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).isPath();\n    }\n\n    changeActivity(activity: FulfillerActivity, onChangeDone = null, iterations = 1) {\n        if (onChangeDone) onChangeDone.bind(this);\n        if (this.activity !== activity) {\n            this.activity = activity;\n            switch (this.activity) {\n                case FulfillerActivity.STANDING:\n                    if (this.carries) {\n                        this.setActivity('StandCarry', onChangeDone, iterations);\n                    } else {\n                        this.setActivity('Stand', onChangeDone, iterations);\n                    }\n                    break;\n                case FulfillerActivity.MOVING:\n                    if (this.carries) {\n                        this.setActivity('Carry', onChangeDone, iterations);\n                    } else {\n                        this.setActivity('Run', onChangeDone, iterations);\n                    }\n                    break;\n                case FulfillerActivity.MOVING_RUBBLE:\n                    if (this.carries) {\n                        this.setActivity('Carryrubble', onChangeDone, iterations);\n                    } else {\n                        this.setActivity('Routerubble', onChangeDone, iterations);\n                    }\n                    break;\n                case FulfillerActivity.DRILLING:\n                    // TODO adapt drilling time to material hardness\n                    this.setActivity('Drill', onChangeDone, iterations);\n                    break;\n                case FulfillerActivity.SHOVELING:\n                    this.setActivity('ClearRubble', onChangeDone, iterations);\n                    break;\n                case FulfillerActivity.PICKING:\n                    this.setActivity('Pickup', onChangeDone, iterations);\n                    break;\n                case FulfillerActivity.DROPPING:\n                    this.setActivity('Place', onChangeDone, iterations);\n                    break;\n                case FulfillerActivity.REINFORCE:\n                    this.setActivity('Reinforce', onChangeDone, iterations);\n                    break;\n            }\n            this.animation.looping = true; // TODO make all looping?\n        }\n    }\n\n    onDiscover() {\n        super.onDiscover();\n        const index = GameState.raidersUndiscovered.indexOf(this);\n        if (index !== -1) GameState.raidersUndiscovered.splice(index, 1);\n        GameState.raiders.push(this);\n        EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, this));\n    }\n\n    onSelect() {\n        this.changeActivity(FulfillerActivity.STANDING);\n        EventBus.publishEvent(new RaiderSelected(this));\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null;\n    }\n\n}\n","import { EventBus } from '../../event/EventBus';\nimport { BuildingSelected } from '../../event/LocalEvents';\nimport { Building } from '../../game/model/entity/building/Building';\nimport { AnimEntity } from './anim/AnimEntity';\nimport { Selectable, SelectionType } from '../../game/model/Selectable';\nimport { ResourceManager } from '../../resource/ResourceManager';\nimport { MathUtils, Vector3 } from 'three';\nimport { GameState } from '../../game/model/GameState';\nimport { EntityAddedEvent, EntityType } from '../../event/WorldEvents';\nimport { Surface } from './map/Surface';\nimport degToRad = MathUtils.degToRad;\n\nexport class BuildingEntity extends AnimEntity implements Selectable {\n\n    type: Building;\n    selected: boolean;\n    powerSwitch: boolean = true;\n    powerLink: boolean = false;\n    spawning: boolean = false;\n    surfaces: Surface[] = [];\n\n    constructor(buildingType: Building) {\n        super(ResourceManager.getAnimationEntityType(buildingType.aeFile));\n        this.type = buildingType;\n        this.group.userData = {'selectable': this};\n        this.pickSphereRadius = 30; // TODO read pick sphere size from cfg\n        this.selectionFrameSize = 15;\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.BUILDING;\n    }\n\n    select() {\n        this.selectionFrame.visible = true;\n        if (!this.selected) {\n            this.selected = true;\n            EventBus.publishEvent(new BuildingSelected(this));\n            return this;\n        }\n        return null;\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false;\n        this.selected = false;\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null;\n    }\n\n    getDropPosition(): Vector3 {\n        const dropPos = this.getPosition().add(new Vector3(0, 0, this.type.dropPosDist)\n            .applyEuler(this.getRotation()).applyAxisAngle(new Vector3(0, 1, 0), degToRad(this.type.dropPosAngleDeg)));\n        dropPos.y = this.worldMgr.getTerrainHeight(dropPos.x, dropPos.z);\n        return dropPos;\n    }\n\n    isPowered(): boolean {\n        return this.powerSwitch && (this.type.selfPowered || this.powerLink);\n    }\n\n    onDiscover() {\n        super.onDiscover();\n        const index = GameState.buildingsUndiscovered.indexOf(this);\n        if (index !== -1) GameState.buildingsUndiscovered.splice(index, 1);\n        GameState.buildings.push(this);\n        EventBus.publishEvent(new EntityAddedEvent(EntityType.BUILDING, this));\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager';\nimport { TILESIZE } from '../main';\nimport { MathUtils, Vector3 } from 'three';\nimport { Raider } from './model/Raider';\nimport { GameState } from '../game/model/GameState';\nimport { Building } from '../game/model/entity/building/Building';\nimport { BuildingEntity } from './model/BuildingEntity';\nimport { SurfaceType } from './model/map/SurfaceType';\nimport { Crystal } from './model/collect/Crystal';\nimport { WorldManager } from './WorldManager';\nimport { EventBus } from '../event/EventBus';\nimport { EntityAddedEvent, EntityType } from '../event/WorldEvents';\nimport degToRad = MathUtils.degToRad;\n\nexport class ObjectListLoader {\n\n    static loadObjectList(worldMgr: WorldManager, objectListConf) {\n        Object.values(objectListConf).forEach((olObject: any) => {\n            const lTypeName = olObject.type ? olObject.type.toLowerCase() : olObject.type;\n            // all object positions are off by half a tile, because 0/0 is the top left corner of first tile\n            const worldX = (olObject.xPos - 1) * TILESIZE;\n            const worldZ = (olObject.yPos - 1) * TILESIZE;\n            const worldY = worldMgr.getTerrainHeight(worldX, worldZ);\n            const buildingType = ResourceManager.cfg('BuildingTypes', olObject.type);\n            const radHeading = degToRad(olObject.heading);\n            if (lTypeName === 'TVCamera'.toLowerCase()) {\n                const target = new Vector3(worldX, worldY, worldZ - TILESIZE / 2);\n                const offset = new Vector3(5 * TILESIZE, 0, 0).applyAxisAngle(new Vector3(0, 1, 0), radHeading - Math.PI / 16).add(target);\n                worldMgr.sceneManager.camera.position.copy(offset);\n                worldMgr.sceneManager.camera.position.y = 4.5 * TILESIZE;\n                worldMgr.sceneManager.controls.target.copy(target);\n                worldMgr.sceneManager.controls.update();\n                worldMgr.setTorchPosition(target);\n            } else if (lTypeName === 'Pilot'.toLowerCase()) {\n                const raider = new Raider();\n                raider.worldMgr = worldMgr;\n                raider.setActivity('Stand');\n                raider.createPickSphere();\n                raider.group.position.set(worldX, worldY, worldZ);\n                raider.group.rotateOnAxis(new Vector3(0, 1, 0), radHeading - Math.PI / 2);\n                raider.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(raider.group.position).discovered;\n                if (raider.group.visible) {\n                    GameState.raiders.push(raider);\n                    EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, raider));\n                } else {\n                    GameState.raidersUndiscovered.push(raider);\n                }\n                worldMgr.sceneManager.scene.add(raider.group);\n            } else if (buildingType) {\n                const building = Building.getByName(buildingType);\n                const entity = new BuildingEntity(building);\n                entity.worldMgr = worldMgr;\n                entity.setActivity('Stand');\n                entity.createPickSphere();\n                entity.group.position.set(worldX, worldY, worldZ);\n                entity.group.rotateOnAxis(new Vector3(0, 1, 0), -radHeading - Math.PI);\n                entity.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(entity.group.position).discovered;\n                if (entity.group.visible) {\n                    GameState.buildings.push(entity);\n                    EventBus.publishEvent(new EntityAddedEvent(EntityType.BUILDING, entity));\n                } else {\n                    GameState.buildingsUndiscovered.push(entity);\n                }\n                // TODO rotate building with normal vector of surface\n                worldMgr.sceneManager.scene.add(entity.group);\n                const path1Surface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(entity.group.position);\n                path1Surface.surfaceType = SurfaceType.POWER_PATH_BUILDING;\n                path1Surface.updateTexture();\n                entity.surfaces.push(path1Surface);\n                const pathOffset = new Vector3(0, 0, TILESIZE).applyAxisAngle(new Vector3(0, 1, 0), -radHeading - Math.PI);\n                pathOffset.add(entity.group.position);\n                const path2Surface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(pathOffset);\n                path2Surface.surfaceType = SurfaceType.POWER_PATH_BUILDING;\n                path2Surface.updateTexture();\n                entity.surfaces.push(path2Surface);\n            } else if (lTypeName === 'PowerCrystal'.toLowerCase()) {\n                worldMgr.addCollectable(new Crystal(), worldX, worldZ);\n            } else {\n                // TODO implement remaining object types like: spider, drives and hovercraft\n                console.warn('Object type ' + olObject.type + ' not yet implemented');\n            }\n        });\n        // update path textures when all buildings are added\n        GameState.buildings.forEach((b) => b.surfaces.forEach((bSurf) => {\n            for (let x = -1; x <= 1; x++) {\n                for (let y = -1; y <= 1; y++) {\n                    worldMgr.sceneManager.terrain.getSurface(bSurf.x + x, bSurf.y + y).updateTexture();\n                }\n            }\n        }));\n    }\n\n}","/** Function documentation mostly copied from the following URLs\n *\n * https://kb.rockraidersunited.com/User:Jessietail/NERPs_reference\n * https://web.archive.org/web/20131206122442/http://rru-stuff.org/nerpfuncs.html\n * https://kb.rockraidersunited.com/NERPs_documentation#Labels\n *\n */\nimport { GameResultState, GameState } from '../game/model/GameState';\nimport { Building } from '../game/model/entity/building/Building';\n\nexport class NerpRunner {\n\n    debug = false;\n    onLevelComplete: () => any = null;\n\n    registers = new Array(8).fill(0);\n    timers = new Array(4).fill(0);\n    scriptLines = []; // contains humand readable script strings\n    statements = []; // contains parsed statements for execution\n    macrosByName = {};\n    labelsByName = {};\n    halted = false;\n    programCounter = 0;\n    messages = [];\n    // more state variables and switches\n    messagePermit = null;\n\n    constructor(debug = false) {\n        this.debug = debug;\n    }\n\n    /**\n     * Internally used to validate and parse a register number.\n     * @param register\n     * @return {number}\n     */\n    checkRegister(register) {\n        const num = parseInt(register);\n        if (isNaN(num) || num < 0 || num > this.registers.length) throw new Error('Invalid register (' + register + ') provided');\n        return num;\n    }\n\n    /**\n     * Internally used to validate and parse a value before setting or adding it with a register.\n     * @param value\n     * @return {number}\n     */\n    checkRegisterValue(value) {\n        const num = parseInt(value);\n        if (isNaN(num)) throw new Error('Invalid register value (' + value + ') provided');\n        return num;\n    }\n\n    /**\n     * Gets the value currently stored in the given register, internally used to handle all registers with one method.\n     * @param register the register to read\n     * @return {number} returns the value currently stored in the register\n     */\n    getR(register) {\n        register = this.checkRegister(register);\n        return this.registers[register];\n    }\n\n    /**\n     * Sets the given value for the given register, internally used to handle all registers with one method.\n     * @param register the register to set\n     * @param value the value to set for the given register\n     */\n    setR(register, value) {\n        register = this.checkRegister(register);\n        value = this.checkRegisterValue(value);\n        this.registers[register] = value;\n    }\n\n    /**\n     * Adds the given value to the given register, internally used to handle all registers with one method.\n     * @param register the register to add to\n     * @param value the value to add to the given register\n     */\n    addR(register, value) {\n        register = this.checkRegister(register);\n        value = this.checkRegisterValue(value);\n        this.registers[register] += value;\n    }\n\n    /**\n     * Set the respective timer to the given numerical value. Units are in milliseconds.\n     * @param timer\n     * @param value\n     */\n    setTimer(timer, value) {\n        const num = parseInt(value);\n        if (isNaN(num)) throw new Error('Can\\'t set timer to NaN value: ' + value);\n        this.timers[timer] = new Date().getTime() + num;\n    }\n\n    /**\n     * Gets the value of the respective timer. Units are in milliseconds.\n     * @param timer\n     * @return {number}\n     */\n    getTimer(timer) {\n        return new Date().getTime() - this.timers[timer];\n    }\n\n    /**\n     * End the level successfully and show the score screen.\n     */\n    setLevelCompleted() {\n        this.halted = true;\n        GameState.resultState = GameResultState.COMPLETE;\n        this.onLevelComplete();\n    }\n\n    /**\n     * End the level as failure and show the score screen.\n     */\n    setLevelFail() {\n        this.halted = true;\n        GameState.resultState = GameResultState.FAILED;\n        this.onLevelComplete();\n    }\n\n    /**\n     * Sets tutorial flags\n     * @param value a bitmask to set flags with\n     */\n    setTutorialFlags(value) {\n        // TODO implement tutorial flags\n        // seems like value must be interpreted bitwise and sets a certain flag on each bit\n        // seen so far:\n        // 0 = 0x00 allow any click anywhere anytime\n        // 3 = 0x11 disallow invalid clicks\n        // 4095 = 0x111111111111 set all flags? (seen in Tutorial01 level)\n    }\n\n    /**\n     * This is used to make messages come up/not come up.\n     * @param messagesAllowed\n     */\n    setMessagePermit(messagesAllowed) {\n        this.messagePermit = !messagesAllowed;\n    }\n\n    setBuildingsUpgradeLevel(typeName, level) {\n        console.error('Buildings upgrade level not yet implemented'); // TODO implement this\n        // buildings.filter(b => b.type === typeName).forEach(b => b.upgradeLevel = level);\n    }\n\n    setToolStoreLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.TOOLSTATION, level);\n    }\n\n    setTeleportPadLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.TELEPORT_PAD, level);\n    }\n\n    setPowerStationLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.POWER_STATION, level);\n    }\n\n    setBarracksLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.SUPPORT, level);\n    }\n\n    /**\n     * Gets the number of tool stores currently built. NOT the total ever built.\n     * @return {number}\n     */\n    getToolStoresBuilt() {\n        return GameState.getBuildingsByType(Building.TOOLSTATION).length;\n    }\n\n    /**\n     * Gets the number of minifigures on the level. TODO it is NOT tested if this ignores minifigures in hidden caverns\n     * @return {number}\n     */\n    getMinifiguresOnLevel() {\n        return GameState.raiders.length;\n    }\n\n    /**\n     * Gets the number of crystals currently stored.\n     * @return {number}\n     */\n    getCrystalsCurrentlyStored() {\n        return GameState.numCrystal;\n    }\n\n    getObjectiveSwitch() {\n        // TODO implement this\n        return 0;\n    }\n\n    setMessageTimerValues(arg1, arg2, arg3) {\n        // TODO implement this\n    }\n\n    getMessageTimer() {\n        return 0; // TODO return remaining amount of time needed to fully play WAV message\n    }\n\n    cameraUnlock() {\n        // TODO implement this\n    }\n\n    setMessage(messageNumber, arrowDisabled) {\n        if (!this.messagePermit) {\n            return;\n        }\n        const msg = this.messages[messageNumber];\n        // TODO show message to user\n        console.log(msg.txt);\n        // msg.snd resides in sounds/streamed/ which is currently not loaded :(\n    }\n\n    setCameraGotoTutorial(arg1) {\n        // TODO implement this\n    }\n\n    getTutorialBlockIsGround(arg1) {\n        // TODO implement this\n        return 0;\n    }\n\n    getTutorialBlockIsPath(arg1) {\n        // TODO implement this\n        return 0;\n    }\n\n    getOxygenLevel() {\n        // TODO implement this\n        return 100;\n    }\n\n    getObjectiveShowing() {\n        // TODO implement this\n        return false;\n    }\n\n    addPoweredCrystals() {\n        // TODO implement this\n    }\n\n    disallowAll() {\n        // TODO implement this\n    }\n\n    getPoweredPowerStationsBuilt() {\n        return GameState.getBuildingsByType(Building.POWER_STATION).filter((b) => b.isPowered()).length;\n    }\n\n    getPoweredBarracksBuilt() {\n        return GameState.getBuildingsByType(Building.SUPPORT).filter((b) => b.isPowered()).length;\n    }\n\n    getRecordObjectAtTutorial() {\n        // TODO implement this\n    }\n\n    getHiddenObjectsFound() {\n        // TODO implement this\n        return 0;\n    }\n\n    callMethod(methodName, methodArgs) {\n        if (methodName === 'Stop') {\n            throw 'Stop';\n        } else if (methodName === 'TRUE') {\n            return true;\n        } else if (methodName === 'FALSE') {\n            return false;\n        }\n        const setRegisterMatch = methodName.match(/^SetR([0-7])$/);\n        if (setRegisterMatch) {\n            return this.setR(setRegisterMatch[1], methodArgs[0]);\n        }\n        const addRegisterMatch = methodName.match(/^AddR([0-7])$/);\n        if (addRegisterMatch) {\n            return this.addR(addRegisterMatch[1], methodArgs[0]);\n        }\n        const getRegisterMatch = methodName.match(/^GetR([0-7])$/);\n        if (getRegisterMatch) {\n            return this.getR(getRegisterMatch[1]);\n        }\n        const setTimerMatch = methodName.match(/^SetTimer([0-3])$/);\n        if (setTimerMatch) {\n            return this.setTimer(setTimerMatch[1], methodArgs[0]);\n        }\n        const getTimerMatch = methodName.match(/^GetTimer([0-3])$/);\n        if (getTimerMatch) {\n            return this.getTimer(getTimerMatch[1]);\n        }\n        const lMethodName = methodName.toLowerCase();\n        for (const memberName in this) {\n            // noinspection JSUnfilteredForInLoop\n            if (memberName.toLowerCase() === lMethodName) {\n                // @ts-ignore\n                // noinspection JSUnfilteredForInLoop\n                return this[memberName].apply(this, methodArgs);\n            }\n        }\n        throw new Error('Undefined method: ' + methodName);\n    }\n\n    conditional(left, right) {\n        const conditionResult = this.executeStatement(left);\n        if (this.debug) {\n            console.log('Condition evaluated to ' + conditionResult);\n        }\n        if (conditionResult) {\n            this.executeStatement(right);\n        }\n    }\n\n    executeStatement(expression) {\n        if (expression.invoke) {\n            const argValues = expression.invoke !== 'conditional' ? expression.args.map(e => this.executeStatement(e)) : expression.args;\n            const result = this.callMethod(expression.invoke, argValues);\n            if (result !== undefined && this.debug) {\n                console.log('Method returned: ' + result);\n            }\n            return result;\n        } else if (expression.comparator) {\n            const left = this.executeStatement(expression.left);\n            const right = this.executeStatement(expression.right);\n            if (expression.comparator === '=') {\n                return left === right;\n            } else if (expression.comparator === '!=') {\n                return left !== right;\n            } else if (expression.comparator === '<') {\n                return left < right;\n            } else if (expression.comparator === '>') {\n                return left > right;\n            } else {\n                console.log(expression);\n                throw new Error('Unknown comparator: ' + expression.comparator);\n            }\n        } else if (!isNaN(expression)) { // just a number\n            return expression;\n        } else if (expression.jump) {\n            this.programCounter = this.labelsByName[expression.jump];\n            if (this.programCounter === undefined) {\n                throw new Error('Label \\'' + expression.jump + '\\' is unknown!');\n            }\n            if (this.debug) {\n                console.log('Jumping to label \\'' + expression.jump + '\\' in line ' + this.programCounter);\n            }\n        } else {\n            console.log(expression);\n            throw new Error('Unknown expression in line ' + this.programCounter + ': ' + expression);\n        }\n    }\n\n    execute(debug = false) {\n        this.debug = debug;\n        if (this.halted) return;\n        try {\n            if (this.debug) {\n                console.log('Executing following script\\n' + this.scriptLines.join('\\n'));\n                console.log('Registers: ' + this.registers);\n            }\n            for (this.programCounter = 0; this.programCounter < this.statements.length; this.programCounter++) {\n                const statement = this.statements[this.programCounter];\n                if (this.debug) {\n                    console.log(this.programCounter + ': ' + this.scriptLines[this.programCounter]);\n                    console.log(statement);\n                }\n                if (!statement.label) { // do nothing for label markers\n                    this.executeStatement(statement);\n                }\n            }\n        } catch (e) {\n            if (e === 'Stop') {\n                return;\n            }\n            console.error(e);\n            console.error('FATAL ERROR! Script execution failed! You can NOT win anymore!');\n            this.halted = true;\n            debugger;\n        }\n    }\n\n}","import { NerpRunner } from './NerpRunner';\nimport { ResourceManager } from '../resource/ResourceManager';\n\nexport class NerpParser {\n\n    static parse(nerpScript: string): NerpRunner {\n        const nerpRunner = new NerpRunner();\n        const lines = nerpScript.split('\\n').map(l => l\n            .split('//')[0].trim() // before comment starts\n            .split(';')[0].trim() // before preprocessor comment starts\n            .replace(/_/g, '') // some preprocessor macros use this prefix\n            .replace(/\\bTRUE \\? /, '') // some weird requirement of the original language\n            .replace(/[{}]/g, ''), // duplicate limit for macros using labels too\n        );\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c];\n            if (line.length < 1) {\n                continue; // ignore empty lines, but important for macro closure\n            }\n            if (line.startsWith('#include ')) { // include other nerp scripts/headers\n                const includeName = line.replace(/^#include /, '').trim().slice(1, -1);\n                if (includeName === 'nerpdef.h') {\n                    // trivial default header file, is applied by search and replace above\n                    // see https://github.com/jgrip/legorr/blob/master/nerpdef.h\n                    continue;\n                }\n                const includedRunner = NerpParser.parse(ResourceManager.getResource('Levels/' + includeName));\n                if (!includedRunner || !includedRunner.scriptLines || includedRunner.scriptLines.length < 1) {\n                    throw 'Can\\'t include unknown nerp script: ' + line;\n                }\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(includedRunner.scriptLines);\n                // copy macros from included file to current file\n                nerpRunner.macrosByName = Object.assign({}, nerpRunner.macrosByName, includedRunner.macrosByName);\n            } else if (line.startsWith('#define ')) { // parse C++ preprocessor macro\n                const firstLine = line.replace(/^#define /, '').split(' ');\n                const macroLines = [firstLine.splice(1).join(' ').replace(/\\\\$/, '').trim()];\n                let mLine = line;\n                let append = false;\n                while (mLine.endsWith('\\\\') && c < lines.length - 1) {\n                    c++;\n                    mLine = lines[c].trim();\n                    const macroLine = mLine.replace(/\\\\$/, '').trim();\n                    if (macroLine.length > 0) {\n                        if (append) {\n                            append = false;\n                            macroLines[macroLines.length - 1] += macroLine;\n                        } else {\n                            macroLines.push(macroLine);\n                        }\n                    }\n                    if (mLine.match(/:\\\\$/)) {\n                        append = true;\n                    }\n                }\n                const macroCall = firstLine[0].split('(');\n                nerpRunner.macrosByName[macroCall[0]] = {\n                    args: macroCall[1].replace(/\\)$/, '').split(','),\n                    lines: macroLines,\n                };\n            } else {\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(this.replaceMacros(nerpRunner.macrosByName, line));\n            }\n        }\n        // somewhat precompile the script and create syntax tree\n        // must be done in separate block to make sure the script is complete and we can refer/rely on line numbers for label jumps\n        for (let c = 0; c < nerpRunner.scriptLines.length; c++) {\n            const line = nerpRunner.scriptLines[c];\n            nerpRunner.statements[c] = line.replace(/\\(\\)/g, '') // now the macros are applied and obsolete empty \"()\" can be removed\n                .split(' ? ');\n            const labelMatch = line.match(/(\\S+):/);\n            if (nerpRunner.statements[c].length === 2) { // line contains condition (primary operator)\n                nerpRunner.statements[c] = {\n                    invoke: 'conditional',\n                    args: [this.preProcess(nerpRunner.statements[c][0]), this.preProcess(nerpRunner.statements[c][1])],\n                };\n            } else if (labelMatch) { // keep label line number for later usage\n                const labelName = labelMatch[1].toLowerCase();\n                nerpRunner.labelsByName[labelName] = c;\n                nerpRunner.statements[c] = {label: labelName};\n            } else if (nerpRunner.statements[c].length === 1) { // just a call\n                nerpRunner.statements[c] = this.preProcess(nerpRunner.statements[c][0]);\n            } else { // lines contains more than 1 condition statement\n                throw 'Can\\'t deal with line: ' + line;\n            }\n        }\n        return nerpRunner;\n    }\n\n    static replaceMacros(macrosByName, line): string[] {\n        // check if this line contains a macro\n        const split = line.split('('); // not a very stable check though...\n        const macro = macrosByName[split[0]];\n        if (macro) {\n            const argValues = split.splice(1).join('(').slice(0, -1).split(',');\n            if (argValues.length !== macro.args.length) {\n                throw 'Invalid number of args provided for macro in line ' + line;\n            }\n            const macroLines = [];\n            macro.lines.forEach((line) => {\n                for (let c = 0; c < argValues.length; c++) {\n                    line = line.replace(new RegExp('\\\\b' + macro.args[c] + '\\\\b'), argValues[c]);\n                }\n                macroLines.push(...(this.replaceMacros(macrosByName, line)));\n            });\n            return macroLines;\n        } else {\n            return [line];\n        }\n    }\n\n    static preProcess(expression) {\n        expression = expression.trim().replace(/^_/, ''); // remove whitespace and leading underscore\n        const number = parseInt(expression);\n        if (!isNaN(number)) {\n            return number;\n        }\n        const opSplit = expression.split(/ (=) | (!=) | (>) | (<) /).filter(e => e !== undefined);\n        const brackets = expression.match(/^(.+)\\((.+)\\)$/);\n        const spaceSplit = expression.split(' ');\n        const labelMatch = expression.match(/([^:]+):$/);\n        const jumpMatch = expression.match(/^:([^:]+)$/);\n        if (opSplit.length === 3) { // expression contains secondary operator\n            return {left: this.preProcess(opSplit[0]), comparator: opSplit[1], right: this.preProcess(opSplit[2])};\n        } else if (brackets) {\n            const args = brackets[2].split(',').map(a => this.preProcess(a));\n            return {invoke: brackets[1], args: args};\n        } else if (spaceSplit.length > 1) { // space split must be the very last since most expressions contain space\n            const args = spaceSplit.length === 2 ? [this.preProcess(spaceSplit[1])] : spaceSplit.splice(1).map(a => this.preProcess(a));\n            return {invoke: spaceSplit[0], args: args};\n        } else if (labelMatch) { // label definition\n            return {label: labelMatch[1]};\n        } else if (jumpMatch) { // jump to label\n            return {jump: jumpMatch[1].toLowerCase()};\n        } else { // function call without args\n            if (expression.match(/[ =?><!]/)) {\n                throw 'Invalid expression given, parsing must have failed before somewhere';\n            }\n            return {invoke: expression, args: []};\n        }\n    }\n\n}","import { SceneManager } from './SceneManager';\nimport { TerrainLoader } from './TerrainLoader';\nimport { ResourceManager } from '../resource/ResourceManager';\nimport { MathUtils, Raycaster, Vector3 } from 'three';\nimport { getRandom, iGet } from '../core/Util';\nimport { EventBus } from '../event/EventBus';\nimport { EntityAddedEvent, EntityType, JobCreateEvent, RaiderRequested, SpawnDynamiteEvent, SpawnMaterialEvent } from '../event/WorldEvents';\nimport { Raider } from './model/Raider';\nimport { GameState } from '../game/model/GameState';\nimport { Building } from '../game/model/entity/building/Building';\nimport { CollectJob, MoveJob } from '../game/model/job/Job';\nimport { CollectableEntity } from './model/collect/CollectableEntity';\nimport { CHECK_SPANW_RAIDER_TIMER, TILESIZE } from '../main';\nimport { EntityDeselected } from '../event/LocalEvents';\nimport { ObjectListLoader } from './ObjectListLoader';\nimport { Dynamite } from './model/collect/Dynamite';\nimport { DynamiteJob } from '../game/model/job/SurfaceJob';\nimport { NerpParser } from '../core/NerpParser';\nimport { NerpRunner } from '../core/NerpRunner';\nimport { GameScreen } from '../screen/GameScreen';\nimport degToRad = MathUtils.degToRad;\n\nexport class WorldManager {\n\n    sceneManager: SceneManager;\n    spawnRaiderInterval = null;\n    nerpRunner: NerpRunner = null;\n    nerpInterval = null;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.sceneManager = new SceneManager(canvas);\n        this.sceneManager.cursorTorchlight.distance *= TILESIZE;\n        EventBus.registerEventListener(EntityDeselected.eventKey, () => GameState.selectEntities([]));\n        EventBus.registerEventListener(RaiderRequested.eventKey, (event: RaiderRequested) => {\n            GameState.requestedRaiders = event.numRequested;\n            if (GameState.requestedRaiders > 0 && !this.spawnRaiderInterval) {\n                this.spawnRaiderInterval = setInterval(this.checkSpawnRaiders.bind(this), CHECK_SPANW_RAIDER_TIMER);\n            }\n        });\n        EventBus.registerEventListener(SpawnDynamiteEvent.eventKey, (event: SpawnDynamiteEvent) => {\n            const targetBuilding = GameState.getClosestBuildingByType(event.surface.getDigPositions()[0], Building.TOOLSTATION);\n            if (!targetBuilding) {\n                throw 'Could not find toolstation to spawn dynamite';\n            }\n            const pos = targetBuilding.getDropPosition(); // TODO use ToolNullName from cfg\n            const dynamite = new Dynamite();\n            dynamite.targetSurface = event.surface;\n            dynamite.worldMgr = this;\n            dynamite.setActivity('Normal');\n            dynamite.group.position.copy(pos);\n            this.sceneManager.scene.add(dynamite.group);\n            EventBus.publishEvent(new JobCreateEvent(new DynamiteJob(event.surface, dynamite)));\n        });\n        EventBus.registerEventListener(SpawnMaterialEvent.eventKey, (event: SpawnMaterialEvent) => {\n            this.addCollectable(event.collectable, event.spawnPosition.x, event.spawnPosition.z);\n        });\n    }\n\n    setup(levelName: string, gameScreen: GameScreen) {\n        const levelConf = ResourceManager.cfg('Levels', levelName);\n        if (!levelConf) throw 'Could not find level configuration for \"' + levelName + '\"'; // TODO error handling\n        GameState.levelFullName = iGet(levelConf, 'FullName').replace(/_/g, ' ');\n        console.log('Starting level ' + levelName + ' - ' + GameState.levelFullName);\n\n        // create terrain mesh and add it to the scene\n        this.sceneManager.terrain = TerrainLoader.loadTerrain(levelConf, this);\n        this.sceneManager.scene.add(this.sceneManager.terrain.floorGroup);\n\n        // load in non-space objects next\n        const objectListConf = ResourceManager.getResource(iGet(levelConf, 'OListFile'));\n        ObjectListLoader.loadObjectList(this, objectListConf);\n\n        // load nerp script\n        const nerpFile = iGet(levelConf, 'NERPFile');\n        const nerpScriptContent = ResourceManager.getResource(nerpFile);\n        this.nerpRunner = NerpParser.parse(nerpScriptContent);\n        const nerpMsgFile = iGet(levelConf, 'NERPMessageFile');\n        const nerpMessages = ResourceManager.getResource(nerpMsgFile);\n        this.nerpRunner.messages.push(...nerpMessages);\n        this.nerpRunner.onLevelComplete = () => gameScreen.onLevelEnd();\n\n        // gather level start details for game result score calculation\n        GameState.totalDiggables = this.sceneManager.terrain.surfaces.filter((r) => r.forEach((s) => s.isDigable())).length;\n        GameState.totalCrystals = 0;\n        this.sceneManager.terrain.surfaces.forEach((r) => r.forEach((s) => GameState.totalCrystals += s.containedCrystals));\n        GameState.totalOres = 0;\n        this.sceneManager.terrain.surfaces.forEach((r) => r.forEach((s) => GameState.totalOres += s.containedOres));\n    }\n\n    start() {\n        this.nerpInterval = setInterval(() => {\n            this.nerpRunner.execute();\n        }, 2000);\n        this.sceneManager.startRendering();\n        GameState.levelStartTime = Date.now();\n    }\n\n    stop() {\n        GameState.levelStopTime = Date.now();\n        this.sceneManager.stopRendering();\n        if (this.nerpInterval) clearInterval(this.nerpInterval);\n        this.nerpInterval = null;\n        if (this.spawnRaiderInterval) clearInterval(this.spawnRaiderInterval);\n        this.spawnRaiderInterval = null;\n        GameState.remainingDiggables = this.sceneManager.terrain.surfaces.filter((r) => r.forEach((s) => s.isDigable())).length;\n    }\n\n    resize(width: number, height: number) {\n        if (this.sceneManager) this.sceneManager.renderer.setSize(width, height);\n    }\n\n    getTerrainIntersectionPoint(rx: number, ry: number): Vector3 {\n        if (!this.sceneManager.terrain) return null;\n        const raycaster = new Raycaster();\n        raycaster.setFromCamera({x: rx, y: ry}, this.sceneManager.camera);\n        const intersects = raycaster.intersectObjects(this.sceneManager.terrain.floorGroup.children);\n        return intersects.length > 0 ? intersects[0].point : null;\n    }\n\n    setTorchPosition(position: Vector3) {\n        this.sceneManager.cursorTorchlight.position.copy(position);\n        this.sceneManager.cursorTorchlight.position.y = this.getTerrainHeight(position.x, position.z) + 2 * TILESIZE;\n    }\n\n    getTerrainHeight(worldX: number, worldZ: number): number {\n        const raycaster = new Raycaster(new Vector3(Number(worldX), 3 * TILESIZE, Number(worldZ)), new Vector3(0, -1, 0));\n        const intersect = raycaster.intersectObject(this.sceneManager.terrain.floorGroup, true);\n        if (intersect.length > 0) {\n            return intersect[0].point.y;\n        } else {\n            console.warn('could not determine terrain height for ' + worldX + '/' + worldZ);\n            return 0;\n        }\n    }\n\n    addCollectable(collectable: CollectableEntity, worldX: number, worldZ: number) {\n        const worldY = this.getTerrainHeight(worldX, worldZ);\n        collectable.worldMgr = this;\n        collectable.group.position.set(worldX, worldY, worldZ);\n        collectable.group.visible = this.sceneManager.terrain.getSurfaceFromWorld(collectable.group.position).discovered;\n        this.sceneManager.scene.add(collectable.group);\n        if (collectable.group.visible) {\n            GameState.collectables.push(collectable);\n            EventBus.publishEvent(new JobCreateEvent(new CollectJob(collectable)));\n        } else {\n            GameState.collectablesUndiscovered.push(collectable);\n        }\n    }\n\n    checkSpawnRaiders() {\n        if (GameState.requestedRaiders < 1) {\n            if (this.spawnRaiderInterval) clearInterval(this.spawnRaiderInterval);\n            this.spawnRaiderInterval = null;\n            return;\n        }\n        if (GameState.raiders.length >= GameState.getMaxRaiders()) return;\n        const spawnBuildings = GameState.getBuildingsByType(Building.TOOLSTATION, Building.TELEPORT_PAD)\n            .filter((b) => b.isPowered() && !b.spawning);\n        for (let c = 0; c < spawnBuildings.length && GameState.requestedRaiders > 0; c++) {\n            GameState.requestedRaiders--;\n            const station = spawnBuildings[c];\n            station.spawning = true;\n            const raider = new Raider();\n            raider.worldMgr = this;\n            raider.setActivity('TeleportIn', () => {\n                station.spawning = false;\n                raider.setActivity('Stand');\n                raider.createPickSphere();\n                const walkOutPos = station.getPosition().add(new Vector3(0, 0, TILESIZE * 3 / 4 + getRandom(TILESIZE / 2))\n                    .applyEuler(station.getRotation()).applyAxisAngle(new Vector3(0, 1, 0), degToRad(-10 + getRandom(20))));\n                walkOutPos.y = this.getTerrainHeight(walkOutPos.x, walkOutPos.z);\n                raider.setJob(new MoveJob(walkOutPos));\n                GameState.raiders.push(raider);\n                EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, raider));\n            });\n            raider.group.position.copy(station.group.position).add(new Vector3(0, 0, TILESIZE / 2).applyEuler(station.group.rotation));\n            raider.group.rotation.copy(station.group.rotation);\n            this.sceneManager.scene.add(raider.group);\n        }\n    }\n\n}\n","import { ScreenLayer } from '../../screen/ScreenLayer';\nimport { MOUSE_BUTTON } from '../../event/EventManager';\nimport { WorldManager } from '../../scene/WorldManager';\n\nexport class SelectionLayer extends ScreenLayer {\n\n    worldManager: WorldManager;\n    selectStart: { x: number, y: number } = null;\n\n    constructor() {\n        super(true);\n    }\n\n    setWorldManager(worldManager: WorldManager) {\n        this.worldManager = worldManager;\n    }\n\n    handlePointerEvent(eventType: string, event: PointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY);\n        if (eventType === 'pointerdown') {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.startSelection(cx, cy);\n        } else if (eventType === 'pointermove') {\n            return this.changeSelection(cx, cy);\n        } else if (eventType === 'pointerup') {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.selectEntities(cx, cy);\n        }\n        return false;\n    }\n\n    startSelection(screenX: number, screenY: number) {\n        this.selectStart = {x: screenX, y: screenY};\n        return true;\n    }\n\n    changeSelection(screenX: number, screenY: number) {\n        if (!this.selectStart) return false; // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.context.strokeStyle = 'rgba(128, 192, 192, 0.5)';\n        this.context.lineWidth = 2;\n        this.context.strokeRect(this.selectStart.x, this.selectStart.y, screenX - this.selectStart.x, screenY - this.selectStart.y);\n        return true;\n    }\n\n    selectEntities(screenX: number, screenY: number) {\n        if (!this.selectStart) return false; // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        const r1x = (this.selectStart.x / this.canvas.width) * 2 - 1;\n        const r1y = -(this.selectStart.y / this.canvas.height) * 2 + 1;\n        const r2x = (screenX / this.canvas.width) * 2 - 1;\n        const r2y = -(screenY / this.canvas.height) * 2 + 1;\n        if (Math.abs(screenX - this.selectStart.x) < 5 && Math.abs(screenY - this.selectStart.y) < 5) {\n            const x = (this.selectStart.x + screenX) / this.canvas.width - 1;\n            const y = -(this.selectStart.y + screenY) / this.canvas.height + 1;\n            this.worldManager.sceneManager.selectEntitiesByRay(x, y);\n        } else {\n            this.worldManager.sceneManager.selectEntitiesInFrustum(r1x, r1y, r2x, r2y);\n        }\n        this.selectStart = null;\n        return true;\n    }\n\n}\n","import { ScreenLayer } from '../../screen/ScreenLayer';\nimport { WorldManager } from '../../scene/WorldManager';\nimport { SelectionType } from '../model/Selectable';\nimport { GameState } from '../model/GameState';\nimport { Raider } from '../../scene/model/Raider';\nimport { MoveJob } from '../model/job/Job';\nimport { EventBus } from '../../event/EventBus';\nimport { JobCreateEvent } from '../../event/WorldEvents';\nimport { Surface } from '../../scene/model/map/Surface';\nimport { EntityDeselected } from '../../event/LocalEvents';\nimport { FulfillerEntity } from '../../scene/model/FulfillerEntity';\nimport { SurfaceJob, SurfaceJobType } from '../model/job/SurfaceJob';\nimport { MOUSE_BUTTON } from '../../event/EventManager';\n\nexport class GameLayer extends ScreenLayer {\n\n    private worldMgr: WorldManager;\n\n    constructor() {\n        super(false, false);\n    }\n\n    setWorldManager(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr;\n    }\n\n    handlePointerEvent(eventType: string, event: PointerEvent): boolean {\n        if (eventType === 'pointermove') {\n            const intersectionPoint = this.getTerrainPositionFromEvent(event);\n            if (intersectionPoint) this.worldMgr.setTorchPosition(intersectionPoint);\n        } else if (eventType === 'pointerup' && event.button === MOUSE_BUTTON.SECONDARY) {\n            if (GameState.selectionType === SelectionType.PILOT || GameState.selectionType === SelectionType.GROUP) {\n                // TODO check for collectable entity first\n                const intersectionPoint = this.getTerrainPositionFromEvent(event);\n                if (intersectionPoint) {\n                    const surface = this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(intersectionPoint);\n                    if (surface) {\n                        if (surface.isDrillable()) {\n                            this.createSurfaceJob(SurfaceJobType.DRILL, surface);\n                        } else if (surface.hasRubble()) {\n                            this.createSurfaceJob(SurfaceJobType.CLEAR_RUBBLE, surface);\n                        } else if (surface.isWalkable()) {\n                            GameState.selectedEntities.forEach((raider: Raider) => raider.setJob(new MoveJob(intersectionPoint)));\n                            if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected());\n                        }\n                    }\n                }\n            }\n        }\n        this.canvas.dispatchEvent(event);\n        return true;\n    }\n\n    handleKeyEvent(eventType: string, event: KeyboardEvent): boolean {\n        if (eventType === 'keyup') {\n            if (GameState.selectionType === SelectionType.SURFACE) {\n                GameState.selectedEntities.forEach((s: Surface) => {\n                    if (event.key === 'c') {\n                        if (!s.surfaceType.floor) s.collapse();\n                    } else if (event.key === 'f') {\n                        const t = s.terrain.findFallInTarget(s.x, s.y);\n                        if (!s.surfaceType.floor) s.createFallin(t[0], t[1]);\n                    }\n                });\n                EventBus.publishEvent(new EntityDeselected());\n                return true;\n            }\n        }\n        return false;\n    }\n\n    createSurfaceJob(surfaceJobType: SurfaceJobType, surface: Surface) {\n        const surfJob = new SurfaceJob(surfaceJobType, surface);\n        GameState.selectedEntities.forEach((e: FulfillerEntity) => {\n            if (surfJob.isQualified(e)) e.setJob(surfJob);\n        });\n        EventBus.publishEvent(new JobCreateEvent(surfJob));\n        surface.updateJobColor();\n        if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected());\n    }\n\n    getTerrainPositionFromEvent(event) {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY);\n        const rx = (cx / this.canvas.width) * 2 - 1;\n        const ry = -(cy / this.canvas.height) * 2 + 1;\n        return this.worldMgr.getTerrainIntersectionPoint(rx, ry);\n    }\n\n    handleWheelEvent(eventType: string, event: WheelEvent): boolean {\n        this.canvas.dispatchEvent(event);\n        return true;\n    }\n\n}\n","export class BaseElement {\n\n    parent: BaseElement = null;\n    x: number = 0;\n    y: number = 0;\n    relX: number = 0;\n    relY: number = 0;\n    width: number = 0;\n    height: number = 0;\n    children: BaseElement[] = [];\n    hidden: boolean = false;\n    disabled: boolean = false;\n    hover: boolean = false;\n    pressed: boolean = false;\n\n    constructor(parent: BaseElement = null) {\n        this.parent = parent;\n    }\n\n    addChild<T extends BaseElement>(child: T): T {\n        child.parent = this;\n        this.children.push(child);\n        child.updatePosition();\n        return child;\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return;\n        this.children.forEach((child) => child.onRedraw(context));\n    };\n\n    onClick() {\n    }\n\n    isInactive(): boolean {\n        for (let parent = this.parent; !!parent; parent = parent.parent) if (parent.isInactive()) return true;\n        return this.hidden || this.disabled;\n    }\n\n    hide() {\n        this.hidden = true;\n        this.children.forEach((child) => child.hide());\n    }\n\n    show() {\n        this.hidden = false;\n        this.children.forEach((child) => child.show());\n    }\n\n    updatePosition() {\n        this.x = this.parent ? this.parent.x + this.relX : this.relX;\n        this.y = this.parent ? this.parent.y + this.relY : this.relY;\n        this.children.forEach((child) => child.updatePosition());\n    }\n\n    isInRect(cx, cy) {\n        return cx >= this.x && cy >= this.y && cx < this.x + this.width && cy < this.y + this.height;\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false;\n        const inRect = this.isInRect(cx, cy);\n        let updated = this.hover !== inRect;\n        this.hover = inRect;\n        this.pressed = this.pressed && this.hover;\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => updated = child.checkHover(cx, cy) || updated);\n        return updated;\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false;\n        const inRect = this.isInRect(cx, cy);\n        let updated = this.pressed !== inRect;\n        this.pressed = inRect;\n        this.children.forEach((child) => updated = child.checkClick(cx, cy) || updated);\n        return updated;\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false;\n        const inRect = this.isInRect(cx, cy);\n        if (inRect && this.pressed) this.onClick();\n        let updated = false;\n        this.children.forEach((child) => updated = child.checkRelease(cx, cy) || updated);\n        updated = this.release() || updated;\n        return updated;\n    }\n\n    release(): boolean {\n        let updated = this.pressed || this.hover;\n        this.pressed = false;\n        this.hover = false;\n        this.children.forEach((child) => updated = child.release() || updated);\n        return updated;\n    }\n\n    notifyRedraw() {\n        if (this.parent) this.parent.notifyRedraw();\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager';\nimport { BaseElement } from './BaseElement';\n\nexport class Button extends BaseElement {\n\n    buttonType: string;\n    imgNormal;\n    imgHover;\n    imgPressed;\n    label: string;\n    tooltip: string;\n\n    constructor(parent: BaseElement, btnCfg: any = null) {\n        super(parent);\n        let normalFile, highlightFile, pressedFile;\n        if (btnCfg) {\n            [this.buttonType, normalFile, highlightFile, pressedFile, this.relX, this.relY, this.width, this.height, this.tooltip] = btnCfg;\n        }\n        if (normalFile) this.imgNormal = ResourceManager.getImage(normalFile);\n        if (highlightFile) this.imgHover = ResourceManager.getImage(highlightFile);\n        if (pressedFile) this.imgPressed = ResourceManager.getImage(pressedFile);\n        this.updatePosition();\n    }\n\n    onClick() {\n        console.log('button pressed: ' + this.buttonType);\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return;\n        let img = this.imgNormal;\n        if (this.disabled || this.pressed) {\n            img = this.imgPressed;\n        } else if (this.hover) {\n            img = this.imgHover;\n        }\n        if (img) {\n            context.drawImage(img, this.x, this.y);\n        } else if (this.label) {\n            context.textAlign = 'center';\n            context.font = 'bold 10px Arial';\n            context.fillStyle = '#fff';\n            context.fillText(this.label, this.x + this.width / 2, this.y + this.height - 2);\n        }\n        super.onRedraw(context);\n    }\n\n}\n\nexport class InterfaceBackButton extends Button {\n\n    constructor(parent: BaseElement) {\n        super(parent, null);\n        this.buttonType = 'InterfaceBackButton';\n        let imgHoverName, imgPressedName;\n        [this.width, this.height, imgHoverName, imgPressedName, this.tooltip] = ResourceManager.cfg(this.buttonType);\n        this.imgHover = ResourceManager.getImage(imgHoverName);\n        this.imgPressed = ResourceManager.getImage(imgPressedName);\n        this.relX = 4;\n        this.relY = 14;\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager';\nimport { Button } from '../../base/Button';\nimport { BaseElement } from '../../base/BaseElement';\nimport { iGet } from '../../../../core/Util';\nimport { PANEL_ANIMATION_MULTIPLIER, NATIVE_FRAMERATE } from '../../../../main';\n\nexport class Panel extends BaseElement {\n\n    name: string;\n    img;\n    xIn: number = 0;\n    yIn: number = 0;\n    xOut: number = 0;\n    yOut: number = 0;\n    buttons = {};\n    animationTimeout = null;\n    movedIn: boolean = false;\n\n    constructor(panelName: string = null, panelsCfg: {} = {}, buttonsCfg: {} = {}) {\n        super();\n        this.name = panelName;\n        if (panelsCfg && panelName) {\n            let imgName;\n            [imgName, this.xOut, this.yOut, this.xIn, this.yIn] = iGet(panelsCfg, panelName);\n            this.img = ResourceManager.getImage(imgName);\n            this.relX = this.xIn;\n            this.relY = this.yIn;\n        }\n        if (buttonsCfg && panelName) {\n            let panelButtonsCfg = iGet(buttonsCfg, panelName);\n            if (panelButtonsCfg) {\n                if (panelName === 'Panel_Encyclopedia') { // TODO refactor cfg handling\n                    this.addButton(new Button(this, panelButtonsCfg));\n                } else {\n                    panelButtonsCfg.forEach((btnCfg) => this.addButton(new Button(this, btnCfg)));\n                }\n            }\n        }\n    }\n\n    addButton<T extends Button>(button: T): T {\n        this.buttons[button.buttonType] = button;\n        this.addChild(button);\n        return button;\n    }\n\n    isInactive(): boolean {\n        return this.animationTimeout || super.isInactive();\n    }\n\n    updateAnimation(targetX: number, targetY: number, speed: number, onDone: () => any) {\n        const diffX = targetX - this.relX;\n        const diffY = targetY - this.relY;\n        if (Math.abs(diffX) <= speed && Math.abs(diffY) <= speed) {\n            this.relX = targetX;\n            this.relY = targetY;\n            this.animationTimeout = null;\n            if (onDone) onDone();\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * speed);\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * speed);\n            const panel = this;\n            this.animationTimeout = setTimeout(() => panel.updateAnimation(targetX, targetY, speed, onDone), 1000 / NATIVE_FRAMERATE);\n        }\n        this.updatePosition();\n        this.notifyRedraw();\n    }\n\n    setMovedIn(movedIn: boolean, onDone: () => any = null) {\n        if (this.movedIn !== movedIn) {\n            this.toggleState(onDone);\n        } else if (onDone) {\n            onDone();\n        }\n    }\n\n    toggleState(onDone: () => any = null) {\n        if (this.animationTimeout) {\n            clearTimeout(this.animationTimeout);\n            this.animationTimeout = null;\n        }\n        if (this.movedIn) {\n            this.movedIn = false;\n            this.updateAnimation(this.xOut, this.yOut, PANEL_ANIMATION_MULTIPLIER, onDone);\n        } else {\n            this.movedIn = true;\n            this.updateAnimation(this.xIn, this.yIn, PANEL_ANIMATION_MULTIPLIER, onDone);\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return;\n        if (this.img) context.drawImage(this.img, this.x, this.y);\n        super.onRedraw(context);\n    }\n\n}\n\nexport class TopPanel extends Panel {\n\n    btnPriorities: Button;\n\n    constructor(panelName: string, panelsCfg: {}, buttonsCfg: {}) {\n        super(panelName, panelsCfg, buttonsCfg);\n        this.btnPriorities = iGet(this.buttons, 'PanelButton_TopPanel_Priorities');\n    }\n\n}\n\nexport class InfoDockPanel extends Panel {\n\n    btnGoto: Button;\n    btnClose: Button;\n\n    constructor(panelName: string, panelsCfg: {}, buttonsCfg: {}) {\n        super(panelName, panelsCfg, buttonsCfg);\n        this.btnGoto = iGet(this.buttons, 'PanelButton_InfoDock_Goto');\n        this.btnGoto.disabled = true;\n        this.btnClose = iGet(this.buttons, 'PanelButton_InfoDock_Close');\n        this.btnClose.disabled = true;\n    }\n\n}\n","import { Button } from '../../base/Button';\nimport { iGet } from '../../../../core/Util';\nimport { Panel } from './Panel';\n\nexport class RadarPanel extends Panel {\n\n    fill: Panel;\n    overlay: Panel;\n    btnToggle: Button;\n    btnMap: Button;\n    btnTagged: Button;\n\n    constructor(panelName: string, panelsCfg: {}, buttonsCfg: {}) {\n        super(panelName, panelsCfg, buttonsCfg);\n        this.fill = this.addChild(new Panel('Panel_RadarFill', panelsCfg, buttonsCfg));\n        // fill cords given in abs, turn to rel (otherwise animation wont work)\n        this.fill.relX = this.relX - this.fill.relX;\n        this.fill.relY = this.relY - this.fill.relY;\n        this.overlay = this.addChild(new Panel('Panel_RadarOverlay', panelsCfg, buttonsCfg));\n        // this.overlay.hide();\n        this.btnToggle = iGet(this.buttons, 'PanelButton_Radar_Toggle');\n        this.btnToggle.onClick = () => this.toggleState();\n        this.btnMap = iGet(this.buttons, 'PanelButton_Radar_MapView');\n        this.btnMap.onClick = () => {\n            // this.fill.hide();\n            // this.overlay.hide();\n        };\n        this.btnTagged = iGet(this.buttons, 'PanelButton_Radar_TaggedObjectView');\n        this.btnTagged.onClick = () => {\n            // this.fill.show();\n            // this.overlay.show(); // TODO only show overlay, when entity selected\n        };\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager';\nimport { GameState } from '../../../model/GameState';\nimport { Panel } from './Panel';\n\nexport class MessagePanel extends Panel {\n\n    imgAir;\n\n    constructor(panelName: string, panelsCfg: {}, buttonsCfg: {}) {\n        super(panelName, panelsCfg, buttonsCfg);\n        this.relX = this.xOut = this.xIn = 42;\n        this.relY = this.yOut = this.yIn = 409;\n        this.imgAir = ResourceManager.getImage('Interface/Airmeter/msgpanel_air_juice.bmp');\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context);\n        if (GameState.airlevel > 0) {\n            const width = Math.round(236 * GameState.airlevel);\n            context.drawImage(this.imgAir, this.x + 85, this.y + 6, width, 8);\n        }\n    }\n\n}\n","import { Button } from '../../base/Button';\nimport { iGet } from '../../../../core/Util';\nimport { GameState } from '../../../model/GameState';\nimport { ResourceManager } from '../../../../resource/ResourceManager';\nimport { Panel } from './Panel';\nimport { EventBus } from '../../../../event/EventBus';\nimport { CollectEvent, SpawnMaterialEvent } from '../../../../event/WorldEvents';\nimport { CollectableType } from '../../../../scene/model/collect/CollectableEntity';\n\nexport class PanelCrystalSideBar extends Panel {\n\n    btnOre: Button;\n    btnCrystal: Button;\n    imgNoCrystal;\n    imgSmallCrystal;\n    imgUsedCrystal;\n    imgOre;\n\n    constructor(panelName: string, panelsCfg: {}, buttonsCfg: {}) {\n        super(panelName, panelsCfg, buttonsCfg);\n        this.btnOre = iGet(this.buttons, 'PanelButton_CrystalSideBar_Ore');\n        this.btnOre.label = GameState.numOre.toString();\n        this.btnCrystal = iGet(this.buttons, 'PanelButton_CrystalSideBar_Crystals');\n        this.btnCrystal.label = GameState.numCrystal.toString();\n        this.imgNoCrystal = ResourceManager.getImage('Interface/RightPanel/NoSmallCrystal.bmp');\n        this.imgSmallCrystal = ResourceManager.getImage('Interface/RightPanel/SmallCrystal.bmp');\n        this.imgUsedCrystal = ResourceManager.getImage('Interface/RightPanel/UsedCrystal.bmp');\n        this.imgOre = ResourceManager.getImage('Interface/RightPanel/CrystalSideBar_Ore.bmp');\n        EventBus.registerEventListener(CollectEvent.eventKey, (event: CollectEvent) => {\n            this.updateQuantities(event.collectType);\n        });\n        EventBus.registerEventListener(SpawnMaterialEvent.eventKey, (event: SpawnMaterialEvent) => {\n            this.updateQuantities(event.collectable.getCollectableType());\n        });\n    }\n\n    updateQuantities(type: CollectableType) {\n        if (type === CollectableType.CRYSTAL || type === CollectableType.ORE || type === CollectableType.BRICK) {\n            this.btnOre.label = GameState.numOre.toString();\n            this.btnCrystal.label = GameState.numCrystal.toString();\n            // TODO implement bricks\n            this.notifyRedraw();\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context);\n        // draw crystals\n        let curX = this.x + this.img.width - 8;\n        let curY = this.y + this.img.height - 34;\n        for (let c = 0; (GameState.neededCrystals < 1 || c < Math.max(GameState.neededCrystals, GameState.numCrystal)) && curY >= Math.max(this.imgNoCrystal.height, this.imgSmallCrystal.height, this.imgUsedCrystal.height); c++) {\n            let imgCrystal = this.imgNoCrystal;\n            if (GameState.usedCrystals > c) {\n                imgCrystal = this.imgUsedCrystal;\n            } else if (GameState.numCrystal > c) {\n                imgCrystal = this.imgSmallCrystal;\n            }\n            curY -= imgCrystal.height;\n            context.drawImage(imgCrystal, curX - imgCrystal.width / 2, curY);\n        }\n        // draw ores\n        curX = this.x + this.img.width - 21;\n        curY = this.y + this.img.height - 42;\n        for (let i = 0; i < GameState.numOre && curY >= this.imgOre.height; ++i) {\n            curY -= this.imgOre.height;\n            context.drawImage(this.imgOre, curX - this.imgOre.width / 2, curY);\n        }\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager';\nimport { BaseElement } from './BaseElement';\nimport { Panel } from '../ingame/panel/Panel';\n\nexport class MenuItem extends BaseElement {\n\n    panel: Panel;\n    itemKey: string;\n    imgNormal;\n    imgDisabled;\n    imgPressed;\n    tooltip: string;\n    tooltipDisabled: string;\n    hotkey: string;\n\n    constructor(panel: Panel, menuItemGroup, itemKey) {\n        super();\n        this.panel = panel;\n        this.itemKey = itemKey;\n        this.relX = panel.img.width - 59;\n        this.relY = 9;\n        this.width = 40;\n        this.height = 40;\n        const menuItemCfg = ResourceManager.cfg(menuItemGroup, itemKey);\n        let normalFile, disabledFile, pressedFile;\n        if (menuItemCfg) {\n            [normalFile, disabledFile, pressedFile, this.tooltip, this.tooltipDisabled, this.hotkey] = menuItemCfg;\n        }\n        if (normalFile) this.imgNormal = ResourceManager.getImage(normalFile);\n        if (disabledFile) this.imgDisabled = ResourceManager.getImage(disabledFile);\n        if (pressedFile) this.imgPressed = ResourceManager.getImage(pressedFile);\n        this.disabled = true; // TODO only enable, if requirements are met, check each time game state changes\n    }\n\n    onClick() {\n        console.log('menu item pressed: ' + this.itemKey);\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return;\n        let img = this.imgNormal;\n        if (this.disabled) {\n            img = this.imgDisabled;\n        } else if (this.pressed) {\n            img = this.imgPressed;\n        }\n        if (img) context.drawImage(img, this.x, this.y);\n        if (!this.disabled && this.hover) {\n            context.strokeStyle = '#0f0';\n            context.lineWidth = 2;\n            context.strokeRect(this.x - context.lineWidth / 2, this.y - context.lineWidth / 2, this.width + context.lineWidth - 1, this.height + context.lineWidth - 1);\n        }\n        super.onRedraw(context);\n    }\n\n}\n","import { Button, InterfaceBackButton } from '../../base/Button';\nimport { ResourceManager } from '../../../../resource/ResourceManager';\nimport { MenuItem } from '../../base/MenuItem';\nimport { Panel } from './Panel';\n\nexport class IconPanel extends Panel {\n\n    subPanels: IconSubPanel[] = [];\n    mainPanel: IconSubPanel;\n\n    constructor() {\n        super();\n        this.xOut = 640 + 95;\n        this.relX = this.xIn = 640 - 16;\n        this.relY = this.yIn = this.yOut = 9;\n    }\n\n    addSubPanel(numOfItems: number) {\n        const childPanel = this.addChild(new IconSubPanel(numOfItems, this.mainPanel));\n        this.subPanels.push(childPanel);\n        return childPanel;\n    }\n\n    selectSubPanel(targetPanel: IconSubPanel) {\n        this.subPanels.forEach((subPanel) => subPanel.setMovedIn(false));\n        targetPanel.setMovedIn(true);\n    }\n\n}\n\nexport class IconSubPanel extends Panel {\n\n    countMenuItems: number = 0;\n    backBtn: Button = null;\n\n    constructor(numOfItems, onBackPanel: Panel = null) {\n        super();\n        if (onBackPanel) {\n            this.backBtn = this.addButton(new InterfaceBackButton(this));\n            const panel = this;\n            this.backBtn.onClick = () => panel.toggleState(() => onBackPanel.toggleState());\n        }\n        const frameImgCfg = ResourceManager.cfg('InterfaceSurroundImages', numOfItems.toString());\n        const [imgName, val1, val2, val3, val4, imgNameWoBackName, woBack1, woBack2] = frameImgCfg;\n        this.img = onBackPanel ? ResourceManager.getImage(imgName) : ResourceManager.getImage(imgNameWoBackName);\n        this.xIn = -this.img.width;\n    }\n\n    addMenuItem(menuItemGroup, itemKey) {\n        const menuItem = this.addChild(new MenuItem(this, menuItemGroup, itemKey));\n        menuItem.relY += menuItem.height * this.countMenuItems;\n        this.countMenuItems++;\n        return menuItem;\n    }\n\n}\n","import { Vector3 } from 'three';\nimport { Surface } from './map/Surface';\nimport { CollectableEntity, CollectableType } from './collect/CollectableEntity';\nimport { EventBus } from '../../event/EventBus';\nimport { JobCreateEvent } from '../../event/WorldEvents';\nimport { CompletePowerPathJob } from '../../game/model/job/SurfaceJob';\nimport { GameState } from '../../game/model/GameState';\n\nexport class BuildingSite {\n\n    isPowerPath: boolean;\n    surfaces: Surface[] = [];\n    neededByType = {};\n    assignedByType = {};\n    onSiteByType = {};\n    complete: boolean = false;\n\n    constructor(isPowerPath: boolean = false) {\n        this.isPowerPath = isPowerPath;\n    }\n\n    getPosition(): Vector3 {\n        return this.surfaces[0].getCenterWorld();\n    }\n\n    needs(collectableType: CollectableType): boolean {\n        const needed = this.neededByType[collectableType] || 0;\n        const assigned = (this.assignedByType[collectableType] || []).length;\n        return needed > assigned;\n    }\n\n    assign(item: CollectableEntity) {\n        const collectableType = item.getCollectableType();\n        this.assignedByType[collectableType] = this.assignedByType[collectableType] || [];\n        this.assignedByType[collectableType].push(item);\n    }\n\n    unAssign(item: CollectableEntity) {\n        const collectableType = item.getCollectableType();\n        this.assignedByType[collectableType] = (this.assignedByType[collectableType] || []).filter((assigned) => assigned !== item);\n    }\n\n    addItem(item: CollectableEntity) {\n        const collectableType = item.getCollectableType();\n        const needed = this.neededByType[collectableType] || 0;\n        this.onSiteByType[collectableType] = this.onSiteByType[collectableType] || [];\n        if (this.onSiteByType[collectableType].length < needed) {\n            item.group.position.copy(item.getTargetPos());\n            item.worldMgr.sceneManager.scene.add(item.group);\n            this.onSiteByType[collectableType].push(item);\n            this.checkComplete();\n        } else {\n            item.resetTarget();\n            item.worldMgr.addCollectable(item, item.getTargetPos().x, item.getTargetPos().z);\n        }\n    }\n\n    checkComplete() {\n        if (this.complete) return;\n        let complete = true;\n        Object.keys(this.neededByType).some((neededType) => {\n            const needed = this.neededByType[neededType] || 0;\n            const onSite = (this.onSiteByType[neededType] || []).length;\n            if (onSite < needed) {\n                complete = false;\n                return true;\n            }\n        });\n        if (complete) {\n            this.complete = complete;\n            GameState.buildingSites = GameState.buildingSites.filter((site) => site !== this);\n            const items = [];\n            Object.keys(this.onSiteByType).forEach((collectableType) => items.push(...this.onSiteByType[collectableType]));\n            if (this.isPowerPath) {\n                EventBus.publishEvent(new JobCreateEvent(new CompletePowerPathJob(this.surfaces[0], items)));\n            } else {\n                // TODO implement building spawning\n                console.log('Building site is complete');\n            }\n        }\n    }\n\n}","import { IconPanel } from './IconPanel';\nimport { EventBus } from '../../../../event/EventBus';\nimport { BuildingSelected, EntityDeselected, RaiderSelected, SurfaceSelectedEvent, VehicleSelected } from '../../../../event/LocalEvents';\nimport { EntityAddedEvent, EntityRemovedEvent, EntityType, JobCreateEvent, RaiderRequested, SpawnDynamiteEvent, SpawnMaterialEvent } from '../../../../event/WorldEvents';\nimport { GameState } from '../../../model/GameState';\nimport { Surface } from '../../../../scene/model/map/Surface';\nimport { Building } from '../../../model/entity/building/Building';\nimport { SurfaceJob, SurfaceJobType } from '../../../model/job/SurfaceJob';\nimport { SurfaceType } from '../../../../scene/model/map/SurfaceType';\nimport { CollectableType } from '../../../../scene/model/collect/CollectableEntity';\nimport { BuildingSite } from '../../../../scene/model/BuildingSite';\n\nexport class MainPanel extends IconPanel {\n\n    constructor() {\n        super();\n        this.mainPanel = this.addSubPanel(4);\n        EventBus.registerEventListener(EntityDeselected.eventKey, () => this.selectSubPanel(this.mainPanel));\n        const buildingPanel = this.addSubPanel(10);\n        const smallVehiclePanel = this.addSubPanel(6);\n        const largeVehiclePanel = this.addSubPanel(5);\n        const selectWallPanel = this.addSubPanel(4);\n        const selectFloorPanel = this.addSubPanel(3);\n        const selectRubblePanel = this.addSubPanel(2);\n        const selectBuildingPanel = this.addSubPanel(4);\n        const selectRaiderPanel = this.addSubPanel(10);\n        const selectVehiclePanel = this.addSubPanel(7);\n        const teleportRaider = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_TeleportMan');\n        teleportRaider.disabled = GameState.getBuildingsByType(Building.TOOLSTATION, Building.TELEPORT_PAD).length < 1;\n        EventBus.registerEventListener(EntityAddedEvent.eventKey, (event: EntityAddedEvent) => {\n            if (event.type === EntityType.BUILDING || event.type === EntityType.RAIDER) {\n                teleportRaider.disabled = GameState.getBuildingsByType(Building.TOOLSTATION, Building.TELEPORT_PAD).length < 1\n                    || GameState.raiders.length >= GameState.getMaxRaiders();\n                this.notifyRedraw(); // TODO performance: actually just the button needs to be redrawn\n            }\n        });\n        EventBus.registerEventListener(EntityRemovedEvent.eventKey, (event: EntityRemovedEvent) => {\n            if (event.type === EntityType.BUILDING || event.type === EntityType.RAIDER) {\n                teleportRaider.disabled = GameState.getBuildingsByType(Building.TOOLSTATION, Building.TELEPORT_PAD).length < 1\n                    || GameState.raiders.length >= GameState.getMaxRaiders();\n                this.notifyRedraw(); // TODO performance: actually just the button needs to be redrawn\n            }\n        });\n        teleportRaider.onClick = () => EventBus.publishEvent(new RaiderRequested(GameState.requestedRaiders + 1));\n        // TODO add decrease requested raider spawn option\n        const buildingItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildBuilding');\n        buildingItem.disabled = false;\n        buildingItem.onClick = () => this.mainPanel.toggleState(() => buildingPanel.toggleState());\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'Toolstation');\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'TeleportPad');\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'Docks');\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'Powerstation');\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'Barracks');\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'Upgrade');\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'Geo-dome');\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'OreRefinery');\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'Gunstation');\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'TeleportBIG');\n        const smallVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildSmallVehicle');\n        smallVehicleItem.disabled = false;\n        smallVehicleItem.onClick = () => this.mainPanel.toggleState(() => smallVehiclePanel.toggleState());\n        smallVehiclePanel.addMenuItem('InterfaceBuildImages', 'Hoverboard');\n        smallVehiclePanel.addMenuItem('InterfaceBuildImages', 'SmallDigger');\n        smallVehiclePanel.addMenuItem('InterfaceBuildImages', 'SmallTruck');\n        smallVehiclePanel.addMenuItem('InterfaceBuildImages', 'SmallCat');\n        smallVehiclePanel.addMenuItem('InterfaceBuildImages', 'SmallMLP');\n        smallVehiclePanel.addMenuItem('InterfaceBuildImages', 'SmallHeli');\n        const largeVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildLargeVehicle');\n        largeVehicleItem.disabled = false;\n        largeVehicleItem.onClick = () => this.mainPanel.toggleState(() => largeVehiclePanel.toggleState());\n        largeVehiclePanel.addMenuItem('InterfaceBuildImages', 'BullDozer');\n        largeVehiclePanel.addMenuItem('InterfaceBuildImages', 'WalkerDigger');\n        largeVehiclePanel.addMenuItem('InterfaceBuildImages', 'LargeMLP');\n        largeVehiclePanel.addMenuItem('InterfaceBuildImages', 'LargeDigger');\n        largeVehiclePanel.addMenuItem('InterfaceBuildImages', 'LargeCat');\n        this.mainPanel.setMovedIn(true);\n        const itemDrill = selectWallPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_Dig');\n        itemDrill.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface;\n            if (!selectedSurface.hasJobType(SurfaceJobType.DRILL)) {\n                EventBus.publishEvent(new JobCreateEvent(new SurfaceJob(SurfaceJobType.DRILL, selectedSurface)));\n            }\n            EventBus.publishEvent(new EntityDeselected());\n        };\n        const itemReinforce = selectWallPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_Reinforce');\n        itemReinforce.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface;\n            if (!selectedSurface.hasJobType(SurfaceJobType.REINFORCE)) {\n                EventBus.publishEvent(new JobCreateEvent(new SurfaceJob(SurfaceJobType.REINFORCE, selectedSurface)));\n            }\n            EventBus.publishEvent(new EntityDeselected());\n        };\n        const itemDynamite = selectWallPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_Dynamite');\n        itemDynamite.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface;\n            if (!selectedSurface.hasJobType(SurfaceJobType.BLOW)) {\n                EventBus.publishEvent(new SpawnDynamiteEvent(selectedSurface));\n            }\n            EventBus.publishEvent(new EntityDeselected());\n        };\n        const itemDeselect = selectWallPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeselectDig');\n        itemDeselect.disabled = false;\n        itemDeselect.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface;\n            selectedSurface.cancelJobs();\n            EventBus.publishEvent(new EntityDeselected());\n        };\n        selectWallPanel.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected());\n        selectFloorPanel.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected());\n        const pathItem = selectFloorPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_LayPath');\n        pathItem.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface;\n            selectedSurface.surfaceType = SurfaceType.POWER_PATH_SITE;\n            selectedSurface.updateTexture();\n            const targetBuilding = GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), Building.TOOLSTATION);\n            if (targetBuilding) {\n                const ores = GameState.dropMaterial(CollectableType.ORE, 2);\n                ores.forEach((ore) => {\n                    EventBus.publishEvent(new SpawnMaterialEvent(ore, targetBuilding.getDropPosition())); // TODO use ToolNullName from cfg\n                });\n            }\n            const site = new BuildingSite(true);\n            site.surfaces.push(selectedSurface);\n            site.neededByType[CollectableType.ORE] = 2;\n            GameState.buildingSites.push(site);\n            EventBus.publishEvent(new EntityDeselected());\n        };\n        selectFloorPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_RemovePath');\n        selectFloorPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence');\n        selectRubblePanel.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected());\n        const clearRubbleItem = selectRubblePanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_ClearRubble');\n        clearRubbleItem.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface;\n            EventBus.publishEvent(new JobCreateEvent(new SurfaceJob(SurfaceJobType.CLEAR_RUBBLE, selectedSurface)));\n            EventBus.publishEvent(new EntityDeselected());\n        };\n        selectRubblePanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence');\n        EventBus.registerEventListener(SurfaceSelectedEvent.eventKey, (event: SurfaceSelectedEvent) => {\n            const surface = event.surface;\n            if (surface.surfaceType.floor) {\n                if (surface.hasRubble()) {\n                    clearRubbleItem.disabled = !event.surface.hasRubble();\n                    this.selectSubPanel(selectRubblePanel);\n                } else {\n                    pathItem.disabled = event.surface.hasRubble();\n                    this.selectSubPanel(selectFloorPanel);\n                }\n            } else {\n                this.selectSubPanel(selectWallPanel);\n                itemDrill.disabled = !surface.isDrillable();\n                itemReinforce.disabled = !surface.isReinforcable();\n                itemDynamite.disabled = !surface.isExplodable();\n                this.notifyRedraw(); // TODO performance: actually just the buttons need to be redrawn\n            }\n        });\n        EventBus.registerEventListener(BuildingSelected.eventKey, () => this.selectSubPanel(selectBuildingPanel));\n        EventBus.registerEventListener(EntityDeselected.eventKey, () => this.selectSubPanel(this.mainPanel));\n        selectBuildingPanel.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected());\n        selectBuildingPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_Repair');\n        selectBuildingPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_PowerOff'); // TODO other option is Interface_MenuItem_PowerOn\n        selectBuildingPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeBuilding');\n        selectBuildingPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteBuilding');\n        EventBus.registerEventListener(RaiderSelected.eventKey, () => this.selectSubPanel(selectRaiderPanel));\n        selectRaiderPanel.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected());\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_GoFeed');\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_UnLoadMinifigure');\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_MinifigurePickUp');\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_GetTool');\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_DropBirdScarer');\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeMan');\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSkill');\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoFirstPerson');\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoSecondPerson');\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteMan');\n        EventBus.registerEventListener(VehicleSelected.eventKey, () => this.selectSubPanel(selectVehiclePanel));\n        selectVehiclePanel.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected());\n    }\n\n}\n","import { ScaledLayer } from '../../screen/ScreenLayer';\nimport { ResourceManager } from '../../resource/ResourceManager';\nimport { InfoDockPanel, Panel, TopPanel } from '../gui/ingame/panel/Panel';\nimport { BaseElement } from '../gui/base/BaseElement';\nimport { RadarPanel } from '../gui/ingame/panel/RadarPanel';\nimport { MessagePanel } from '../gui/ingame/panel/MessagePanel';\nimport { PanelCrystalSideBar } from '../gui/ingame/panel/PanelCrystalSideBar';\nimport { MainPanel } from '../gui/ingame/panel/MainPanel';\n\nexport class GuiLayer extends ScaledLayer {\n\n    rootElement: BaseElement = new BaseElement();\n    panelRadar: RadarPanel;\n    panelMessages: MessagePanel;\n    panelMessagesSide: Panel;\n    panelCrystalSideBar: PanelCrystalSideBar;\n    panelTopPanel: TopPanel;\n    panelInformation: Panel;\n    panelPriorityList: Panel;\n    panelCameraControl: Panel;\n    panelInfoDock: InfoDockPanel;\n    panelEncyclopedia: Panel;\n    panelIcons: MainPanel;\n\n    constructor() {\n        super();\n        const panelsCfg = ResourceManager.cfg('Panels640x480');\n        const buttonsCfg = ResourceManager.cfg('Buttons640x480');\n        const layer = this;\n        this.rootElement.notifyRedraw = () => layer.redraw(); // TODO performance only redraw updated parts\n        // created in reverse order compared to cfg, earlier in cfg means higher z-value // TODO add some z layering at least to panels\n        this.panelEncyclopedia = this.addPanel(new Panel('Panel_Encyclopedia', panelsCfg, buttonsCfg));\n        this.panelInfoDock = this.addPanel(new InfoDockPanel('Panel_InfoDock', panelsCfg, buttonsCfg));\n        this.panelCameraControl = this.addPanel(new Panel('Panel_CameraControl', panelsCfg, buttonsCfg));\n        this.panelPriorityList = this.addPanel(new Panel('Panel_PriorityList', panelsCfg, buttonsCfg));\n        this.panelInformation = this.addPanel(new Panel('Panel_Information', panelsCfg, buttonsCfg));\n        this.panelTopPanel = this.addPanel(new TopPanel('Panel_TopPanel', panelsCfg, buttonsCfg));\n        this.panelIcons = this.addPanel(new MainPanel());\n        this.panelCrystalSideBar = this.addPanel(new PanelCrystalSideBar('Panel_CrystalSideBar', panelsCfg, buttonsCfg));\n        this.panelMessagesSide = this.addPanel(new Panel('Panel_MessagesSide', panelsCfg, buttonsCfg));\n        this.panelMessages = this.addPanel(new MessagePanel('Panel_Messages', panelsCfg, buttonsCfg));\n        this.panelRadar = this.addPanel(new RadarPanel('Panel_Radar', panelsCfg, buttonsCfg));\n        // link panels\n        this.panelTopPanel.btnPriorities.onClick = () => {\n            const pressed = this.panelTopPanel.btnPriorities.pressed; // TODO this requires toggle buttons\n            // this.panelIcons.setMovedIn(!pressed, () => this.panelPriorityList.setMovedIn(pressed));\n        };\n        this.onRedraw = (context: CanvasRenderingContext2D) => {\n            context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n            this.rootElement.onRedraw(context);\n        };\n    }\n\n    addPanel<T extends Panel>(panel: T): T {\n        this.rootElement.addChild(panel);\n        return panel;\n    }\n\n    handlePointerEvent(eventType: string, event: PointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY);\n        const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY);\n        const hit = this.context && this.context.getImageData(cx, cy, 1, 1).data[3] > 0;\n        let needsRedraw = false;\n        if (hit) {\n            event.preventDefault();\n            if (eventType === 'pointermove') {\n                needsRedraw = this.rootElement.checkHover(sx, sy) || needsRedraw;\n            } else if (eventType === 'pointerdown') {\n                needsRedraw = this.rootElement.checkClick(sx, sy) || needsRedraw;\n            } else if (eventType === 'pointerup') {\n                needsRedraw = this.rootElement.checkRelease(sx, sy) || needsRedraw;\n            }\n        } else if (eventType === 'pointermove') {\n            needsRedraw = this.rootElement.release() || needsRedraw;\n        }\n        if (needsRedraw) this.redraw(); // TODO performance: only redraw certain buttons/panels?\n        return hit;\n    }\n\n    handleWheelEvent(eventType: string, event: WheelEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY);\n        return !this.context || this.context.getImageData(cx, cy, 1, 1).data[3] > 0;\n    }\n\n}\n","import { EventBus } from '../event/EventBus';\nimport { JobCreateEvent, JobDeleteEvent } from '../event/WorldEvents';\nimport { Job, JobState } from './model/job/Job';\nimport { GameState } from './model/GameState';\nimport { Vector3 } from 'three';\nimport { Raider } from '../scene/model/Raider';\nimport { WorldManager } from '../scene/WorldManager';\nimport { JOB_SCHEDULE_INTERVAL } from '../main';\n\nexport class Supervisor {\n\n    worldMgr: WorldManager;\n    jobs: Job[] = [];\n    interval = null;\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr;\n        EventBus.registerEventListener(JobCreateEvent.eventKey, (event: JobCreateEvent) => {\n            this.jobs.push(event.job);\n        });\n        EventBus.registerEventListener(JobDeleteEvent.eventKey, (event: JobDeleteEvent) => {\n            event.job.cancel();\n        });\n    }\n\n    start() {\n        stop();\n        this.interval = setInterval(this.scheduleJobs.bind(this), JOB_SCHEDULE_INTERVAL);\n    }\n\n    stop() {\n        if (this.interval) clearInterval(this.interval);\n        this.interval = null;\n        GameState.raiders.forEach((r) => {\n            if (r.workInterval) clearInterval(r.workInterval);\n            r.workInterval = null;\n        });\n        GameState.raidersUndiscovered.forEach((r) => {\n            if (r.workInterval) clearInterval(r.workInterval);\n            r.workInterval = null;\n        });\n        GameState.vehicles.forEach((v) => {\n            if (v.workInterval) clearInterval(v.workInterval);\n            v.workInterval = null;\n        });\n        GameState.vehiclesUndiscovered.forEach((v) => {\n            if (v.workInterval) clearInterval(v.workInterval);\n            v.workInterval = null;\n        });\n    }\n\n    scheduleJobs() {\n        this.jobs = this.jobs.filter((j) => j.jobstate === JobState.OPEN);\n        this.jobs.filter((j) => j.fulfiller.length < 1).forEach((job) => { // TODO sort jobs by priority\n            // find closest, qualified, unemployed raider\n            let closestRaider: Raider = null;\n            let minDistance = null;\n            GameState.raiders.forEach((raider) => {\n                if (!raider.job && job.isQualified(raider)) {\n                    const dist = new Vector3().copy(job.getPosition()).sub(raider.getPosition()).lengthSq();\n                    if (minDistance === null || dist < minDistance) {\n                        closestRaider = raider;\n                        minDistance = dist;\n                    }\n                }\n            });\n            if (closestRaider) closestRaider.setJob(job);\n        });\n    }\n\n}\n","import { BaseScreen } from './BaseScreen';\nimport { WorldManager } from '../scene/WorldManager';\nimport { SelectionLayer } from '../game/layer/SelectionLayer';\nimport { GameLayer } from '../game/layer/GameLayer';\nimport { GuiLayer } from '../game/layer/GuiLayer';\nimport { Supervisor } from '../game/Supervisor';\n\nexport class GameScreen extends BaseScreen {\n\n    onLevelEnd: () => void;\n    gameLayer: GameLayer;\n    selectionLayer: SelectionLayer;\n    guiLayer: GuiLayer;\n    worldManager: WorldManager;\n    jobSupervisor: Supervisor;\n\n    constructor() {\n        super();\n        this.gameLayer = this.addLayer(new GameLayer(), 0);\n        this.selectionLayer = this.addLayer(new SelectionLayer(), 10);\n        this.guiLayer = this.addLayer(new GuiLayer(), 20);\n        this.worldManager = new WorldManager(this.gameLayer.canvas);\n        this.gameLayer.setWorldManager(this.worldManager);\n        this.selectionLayer.setWorldManager(this.worldManager);\n        this.jobSupervisor = new Supervisor(this.worldManager);\n    }\n\n    startLevel(levelName) {\n        this.worldManager.setup(levelName, this);\n        // finally show all the layers\n        this.gameLayer.show();\n        this.show();\n    }\n\n    show() {\n        super.show();\n        this.worldManager.start();\n        this.jobSupervisor.start();\n    }\n\n    hide() {\n        this.worldManager.stop();\n        this.jobSupervisor.stop();\n        super.hide();\n    }\n\n    resize(width: number, height: number) {\n        super.resize(width, height);\n        if (this.worldManager) this.worldManager.resize(width, height);\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager';\nimport { MainMenuBaseItem } from './MainMenuBaseItem';\n\nexport class RewardScreenButton extends MainMenuBaseItem {\n\n    imgNormal: HTMLCanvasElement;\n    imgHover: HTMLCanvasElement;\n    imgPressed: HTMLCanvasElement;\n    imgDisabled: HTMLCanvasElement;\n    disabled: boolean = false;\n    visible: boolean = true;\n\n    constructor(conf: any) {\n        super();\n        let imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath;\n        [imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath, this.x, this.y] = conf;\n        this.imgNormal = ResourceManager.getImage(imgNormalFilepath);\n        this.imgHover = ResourceManager.getImage(imgHoverFilepath);\n        this.imgPressed = ResourceManager.getImage(imgPressedFilepath);\n        this.imgDisabled = ResourceManager.getImage(imgDisabledFilepath);\n        this.width = this.imgNormal.width;\n        this.height = this.imgNormal.height;\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context);\n        if (!this.visible) return;\n        let img = this.imgNormal;\n        if (this.disabled) {\n            img = this.imgDisabled;\n        } else if (this.pressed) {\n            img = this.imgPressed;\n        } else if (this.hover) {\n            img = this.imgHover;\n        }\n        context.drawImage(img, this.x, this.y);\n    }\n\n}","import { BaseScreen } from './BaseScreen';\nimport { ResourceManager } from '../resource/ResourceManager';\nimport { ScaledLayer } from './ScreenLayer';\nimport { RewardCfg } from '../menu/RewardCfg';\nimport { GameResultState, GameState } from '../game/model/GameState';\nimport { BitmapFont } from '../core/BitmapFont';\nimport { RewardScreenButton } from '../menu/RewardScreenButton';\nimport { MOUSE_BUTTON } from '../event/EventManager';\n\nexport class RewardScreen extends BaseScreen {\n\n    onAdvance: () => void;\n    cfg: RewardCfg = null;\n    titleFont: BitmapFont;\n    resultsLayer: ScaledLayer;\n    descriptionTextLayer: ScaledLayer;\n    btnLayer: ScaledLayer;\n    resultIndex: number = 0;\n    resultLastIndex: number = 0;\n    images: { img: HTMLCanvasElement, x: number, y: number }[] = [];\n    boxes: { img: HTMLCanvasElement, x: number, y: number }[] = [];\n    fonts = {};\n    texts: HTMLCanvasElement[] = [];\n    uncoverTimeout = null;\n    btnSave: RewardScreenButton;\n    btnAdvance: RewardScreenButton;\n\n    constructor() {\n        super();\n        this.cfg = ResourceManager.getResource('Reward');\n        this.titleFont = ResourceManager.getBitmapFont(this.cfg.titleFont);\n        const backgroundImg = ResourceManager.getImage(this.cfg.wallpaper);\n        const backgroundLayer = this.addLayer(new ScaledLayer());\n        backgroundLayer.onRedraw = (context) => context.drawImage(backgroundImg, 0, 0);\n        this.cfg.images.forEach((img) => {\n            this.images.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y});\n        });\n        this.cfg.boxImages.forEach((img) => {\n            this.boxes.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y});\n        });\n        Object.keys(this.cfg.fonts).forEach((fontKey, index) => {\n            const font = ResourceManager.getBitmapFont(this.cfg.fonts[fontKey]);\n            this.fonts[fontKey.toLowerCase()] = font;\n            const txt = this.cfg.texts[index];\n            const labelFont = index < 9 ? font : ResourceManager.getBitmapFont(this.cfg.backFont);\n            this.texts.push(labelFont.createTextImage(txt.text));\n        });\n        this.resultsLayer = this.addLayer(new ScaledLayer());\n        this.resultsLayer.handlePointerEvent = ((eventType) => {\n            if (eventType === 'pointerup') {\n                if (this.uncoverTimeout) clearTimeout(this.uncoverTimeout);\n                this.uncoverTimeout = null;\n                this.resultIndex = this.resultLastIndex;\n                this.btnSave.visible = true;\n                this.btnAdvance.visible = true;\n                this.redraw();\n                return true;\n            }\n            return false;\n        });\n        this.descriptionTextLayer = this.addLayer(new ScaledLayer(), 20);\n        this.btnLayer = this.addLayer(new ScaledLayer(), 50);\n        this.btnSave = new RewardScreenButton(this.cfg.saveButton);\n        this.btnSave.disabled = true;\n        this.btnAdvance = new RewardScreenButton(this.cfg.advanceButton);\n        this.btnLayer.handlePointerEvent = ((eventType, event) => {\n            if (eventType === 'pointermove') { // TODO scroll when close to menu top/bottom border\n                const [sx, sy] = this.btnLayer.toScaledCoords(event.clientX, event.clientY);\n                this.btnSave.checkHover(sx, sy);\n                this.btnAdvance.checkHover(sx, sy);\n            } else if (eventType === 'pointerdown') {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    this.btnSave.checkSetPressed();\n                    this.btnAdvance.checkSetPressed();\n                }\n            } else if (eventType === 'pointerup') {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    if (this.btnSave.pressed) {\n                        this.btnSave.setReleased();\n                        // TODO switch to save screen\n                    } else if (this.btnAdvance.pressed) {\n                        this.btnAdvance.setReleased();\n                        this.hide();\n                        this.onAdvance();\n                    }\n                }\n            }\n            if (this.btnSave.needsRedraw || this.btnAdvance.needsRedraw) this.redraw();\n            return false;\n        });\n        this.btnLayer.onRedraw = (context) => {\n            this.btnSave.draw(context);\n            this.btnAdvance.draw(context);\n        };\n    }\n\n    show() {\n        this.resultIndex = 0;\n        this.btnSave.visible = false;\n        this.btnAdvance.visible = false;\n        this.uncoverResult();\n        const levelFullNameImg = this.titleFont.createTextImage(GameState.levelFullName);\n        let resultText = this.cfg.quitText;\n        this.resultLastIndex = this.images.length - 2;\n        if (GameState.resultState === GameResultState.COMPLETE) {\n            resultText = this.cfg.completeText;\n            this.resultLastIndex = this.images.length - 1;\n        } else if (GameState.resultState === GameResultState.FAILED) {\n            resultText = this.cfg.failedText;\n        }\n        const resultValues = [];\n        resultValues.push(this.fonts['crystals'].createTextImage(this.percentString(GameState.numCrystal, GameState.neededCrystals)));\n        resultValues.push(this.fonts['ore'].createTextImage(this.percentString(GameState.numOre, GameState.totalOres)));\n        resultValues.push(this.fonts['diggable'].createTextImage(this.percentString(GameState.remainingDiggables, GameState.totalDiggables, true)));\n        resultValues.push(this.fonts['constructions'].createTextImage(GameState.buildings.length.toString()));\n        resultValues.push(this.fonts['caverns'].createTextImage(this.percentString(GameState.remainingCaverns, GameState.totalCaverns, true)));\n        resultValues.push(this.fonts['figures'].createTextImage(this.percentString(GameState.raiders.length, GameState.getMaxRaiders())));\n        resultValues.push(this.fonts['rockmonsters'].createTextImage(this.percentString(0))); // TODO show defence report\n        resultValues.push(this.fonts['oxygen'].createTextImage(this.percentString(GameState.airlevel)));\n        resultValues.push(this.fonts['timer'].createTextImage(this.timeString(GameState.levelStopTime - GameState.levelStartTime)));\n        resultValues.push(this.fonts['score'].createTextImage(this.percentString(0.99))); // TODO calculate level score\n        const gameResultTextImg = this.titleFont.createTextImage(resultText);\n        this.resultsLayer.onRedraw = (context) => {\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const img = this.images[c];\n                if (img) context.drawImage(img.img, img.x, img.y);\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const box = this.boxes[c];\n                if (box) context.drawImage(box.img, box.x, box.y);\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const txt = this.cfg.texts[c];\n                const text = resultValues[c];\n                if (text) context.drawImage(text, txt.x - text.width / 2, txt.y);\n            }\n            context.drawImage(levelFullNameImg, this.resultsLayer.fixedWidth / 2 - levelFullNameImg.width / 2, this.cfg.vertSpacing - levelFullNameImg.height / 2);\n            context.drawImage(gameResultTextImg, this.resultsLayer.fixedWidth / 2 - gameResultTextImg.width / 2, this.cfg.vertSpacing + levelFullNameImg.height / 2);\n        };\n        this.descriptionTextLayer.onRedraw = (context) => {\n            const descriptionTextImg = this.texts[this.resultIndex];\n            context.clearRect(0, this.cfg.textPos[1], this.descriptionTextLayer.fixedWidth, this.descriptionTextLayer.fixedHeight - this.cfg.textPos[1]);\n            const tx = this.resultIndex !== this.images.length ? this.cfg.textPos[0] : 305;\n            const ty = this.resultIndex !== this.images.length ? this.cfg.textPos[1] : 195;\n            context.drawImage(descriptionTextImg, tx - descriptionTextImg.width / 2, ty);\n        };\n        super.show();\n    }\n\n    percentString(actual, max = 1, lessIsMore: boolean = false) {\n        if (max === 0) max = 1;\n        let value = Math.round(Math.max(Math.min(actual / max, 1), 0) * 100);\n        if (lessIsMore) value = 100 - value;\n        return value.toString() + '%';\n    }\n\n    padLeft(value: string, padding = '0', length = 2) {\n        while (value.length < length) value = padding + value;\n        return value;\n    }\n\n    timeString(timediffMs: number) {\n        const seconds = Math.round(timediffMs / 1000);\n        const ss = this.padLeft((seconds % 60).toString());\n        const minutes = Math.floor(seconds / 60);\n        const mm = this.padLeft(((minutes % 60).toString()));\n        const hh = this.padLeft((Math.floor(minutes / 60).toString()));\n        return hh + ':' + mm + ':' + ss;\n    }\n\n    uncoverResult() {\n        this.uncoverTimeout = setTimeout(() => {\n            this.uncoverTimeout = null;\n            this.resultIndex++;\n            if (this.resultIndex < this.resultLastIndex) {\n                this.uncoverResult();\n            } else {\n                this.btnSave.visible = true;\n                this.btnAdvance.visible = true;\n            }\n            this.redraw();\n        }, this.cfg.timer * 1000);\n    }\n\n}\n","import { ResourceManager } from './resource/ResourceManager';\nimport { LoadingScreen } from './screen/LoadingScreen';\nimport { MainMenuScreen } from './screen/MainMenuScreen';\nimport { GameScreen } from './screen/GameScreen';\nimport { RewardScreen } from './screen/RewardScreen';\nimport { GameState } from './game/model/GameState';\nimport { Modal } from 'bootstrap';\n\n// define constants\n\nexport const JOB_SCHEDULE_INTERVAL = 1000; // milliseconds\nexport const JOB_ACTION_RANGE = 5;\nexport const CHECK_SPANW_RAIDER_TIMER = 1000; // milliseconds\nexport const RAIDER_SPEED = 2.0;\nexport const MAX_RAIDER_BASE = 12;\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10;\n\nexport const PANEL_ANIMATION_MULTIPLIER = 3;\nexport const HEIGHT_MULTIPLER = 0.05;\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640;\nexport const SPRITE_RESOLUTION_HEIGHT = 480;\nexport const TILESIZE = 40;\nexport const NATIVE_FRAMERATE = 30;\n\n// setup and link all components\n\nconst loadingScreen = new LoadingScreen();\n// TODO strip modal from HTML and make it a dynamically loaded tsx component with sass compiled bootstrap css\nconst wadfileSelectModal = new Modal(document.getElementById('wadfiles_select_modal'), {\n    backdrop: 'static',\n    keyboard: false\n});\nconst btnStartFile = document.getElementById('button-start-file') as HTMLButtonElement;\nbtnStartFile.addEventListener('click', () => {\n    btnStartFile.disabled = true;\n    const wad0File = URL.createObjectURL((document.getElementById('wad0-file') as HTMLInputElement).files[0]);\n    const wad1File = URL.createObjectURL((document.getElementById('wad1-file') as HTMLInputElement).files[0]);\n    ResourceManager.startLoadingFromUrl(wad0File, wad1File);\n});\nconst btnStartUrl = document.getElementById('button-start-url') as HTMLButtonElement;\nbtnStartUrl.addEventListener('click', () => {\n    btnStartUrl.disabled = true;\n    const wad0Url = (document.getElementById('wad0-url') as HTMLInputElement).value;\n    const wda1Url = (document.getElementById('wad1-url') as HTMLInputElement).value;\n    ResourceManager.startLoadingFromUrl(wad0Url, wda1Url);\n});\n\nResourceManager.onMessage = (msg: string) => {\n    loadingScreen.setLoadingMessage(msg);\n};\nResourceManager.onCacheMissed = () => {\n    wadfileSelectModal.show();\n};\nResourceManager.onInitialLoad = (totalResources: number) => {\n    wadfileSelectModal.hide();\n    loadingScreen.enableGraphicMode(totalResources);\n};\nResourceManager.onAssetLoaded = (assetIndex: number) => {\n    loadingScreen.setLoadingState(assetIndex);\n};\nResourceManager.onLoadDone = () => {\n    // complete setup\n    const mainMenuScreen = new MainMenuScreen();\n    const gameScreen = new GameScreen();\n    const rewardScreen = new RewardScreen();\n\n    mainMenuScreen.onLevelSelected = (levelName) => {\n        gameScreen.startLevel(levelName);\n    };\n    gameScreen.onLevelEnd = () => {\n        gameScreen.hide();\n        rewardScreen.show();\n    };\n    rewardScreen.onAdvance = () => {\n        GameState.reset();\n        mainMenuScreen.showLevelSelection();\n    };\n\n    // setup complete\n    loadingScreen.hide();\n    mainMenuScreen.showMainMenu();\n    // mainMenuScreen.selectLevel('Level01');\n    // mainMenuScreen.selectLevel('Level05');\n    // mainMenuScreen.selectLevel('Level09');\n    // rewardScreen.show();\n};\n\n// start the game engine with loading resources\n\nloadingScreen.show();\nResourceManager.startLoadingFromCache();\n"],"sourceRoot":""}