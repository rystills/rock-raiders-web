{"version":3,"sources":["webpack://rock-raiders-web/./site/clearcache/clearCacheButton.css","webpack://rock-raiders-web/./site/github/github.css","webpack://rock-raiders-web/./site/clearcache/clearCacheButton.css?9693","webpack://rock-raiders-web/./site/clearcache/ClearCacheButton.ts","webpack://rock-raiders-web/./site/github/github.css?bbb3","webpack://rock-raiders-web/./site/github/github-box.ts","webpack://rock-raiders-web/./site/modal/WadFileSelectionModal.ts","webpack://rock-raiders-web/./src/event/EventKeyEnum.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/event/EventBus.ts","webpack://rock-raiders-web/./src/event/GameEvent.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/game/model/EntityType.ts","webpack://rock-raiders-web/./src/game/model/Selectable.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityList.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTraining.ts","webpack://rock-raiders-web/./src/core/ImageHelper.js","webpack://rock-raiders-web/./src/game/model/anim/AnimationEntityType.ts","webpack://rock-raiders-web/./src/screen/DebugHelper.ts","webpack://rock-raiders-web/./src/game/model/collect/BarrierLocation.ts","webpack://rock-raiders-web/./src/screen/Cursors.ts","webpack://rock-raiders-web/./src/game/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/game/model/map/WallType.ts","webpack://rock-raiders-web/./src/game/model/map/SurfaceGeometry.ts","webpack://rock-raiders-web/./src/game/model/building/BuildPlacementMarkerMesh.ts","webpack://rock-raiders-web/./src/game/model/building/BuildPlacementMarker.ts","webpack://rock-raiders-web/./src/game/model/map/astar.ts","webpack://rock-raiders-web/./src/event/WorldEvents.ts","webpack://rock-raiders-web/./src/event/WorldLocationEvent.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimClip.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimSubObj.ts","webpack://rock-raiders-web/./src/resource/AnimatedMesh.ts","webpack://rock-raiders-web/./src/resource/LWOLoader.ts","webpack://rock-raiders-web/./src/resource/LWSCLoader.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityIdentifier.ts","webpack://rock-raiders-web/./src/game/model/job/JobState.ts","webpack://rock-raiders-web/./src/game/model/job/JobType.ts","webpack://rock-raiders-web/./src/game/TerrainLoader.ts","webpack://rock-raiders-web/./src/resource/wadworker/WorkerMessageType.ts","webpack://rock-raiders-web/./src/game/model/MoveState.ts","webpack://rock-raiders-web/./src/game/model/activities/BaseActivity.ts","webpack://rock-raiders-web/./src/game/model/activities/AnimEntityActivity.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimEntity.ts","webpack://rock-raiders-web/./src/game/model/BaseEntity.ts","webpack://rock-raiders-web/./src/game/model/job/Job.ts","webpack://rock-raiders-web/./src/game/model/job/CarryJob.ts","webpack://rock-raiders-web/./src/game/model/activities/BuildingActivity.ts","webpack://rock-raiders-web/./src/game/model/activities/RaiderActivity.ts","webpack://rock-raiders-web/./src/game/model/PathTarget.ts","webpack://rock-raiders-web/./src/game/model/collect/CarryPathTarget.ts","webpack://rock-raiders-web/./src/game/model/collect/MaterialEntity.ts","webpack://rock-raiders-web/./src/game/model/collect/Crystal.ts","webpack://rock-raiders-web/./src/game/model/activities/DynamiteActivity.ts","webpack://rock-raiders-web/./src/game/model/job/surface/CarryDynamiteJob.ts","webpack://rock-raiders-web/./src/game/model/collect/Dynamite.ts","webpack://rock-raiders-web/./src/game/model/collect/Ore.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTool.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ClearRubbleJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/DrillJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ReinforceJob.ts","webpack://rock-raiders-web/./src/game/model/map/Surface.ts","webpack://rock-raiders-web/./src/game/model/map/TerrainPath.ts","webpack://rock-raiders-web/./src/game/model/map/Terrain.ts","webpack://rock-raiders-web/./src/game/SceneManager.ts","webpack://rock-raiders-web/./src/resource/wadworker/WadUtil.ts","webpack://rock-raiders-web/./src/core/BitmapFont.ts","webpack://rock-raiders-web/./src/resource/ResourceCache.ts","webpack://rock-raiders-web/./src/resource/wadworker/InitLoadingMessage.ts","webpack://rock-raiders-web/./src/resource/ResourceManager.ts","webpack://rock-raiders-web/./src/resource/AnimEntityLoader.ts","webpack://rock-raiders-web/./src/game/model/job/MoveJob.ts","webpack://rock-raiders-web/./src/game/model/EntityStep.ts","webpack://rock-raiders-web/./src/game/model/MovableEntity.ts","webpack://rock-raiders-web/./src/game/model/FulfillerEntity.ts","webpack://rock-raiders-web/./src/game/model/raider/Raider.ts","webpack://rock-raiders-web/./src/game/model/activities/BarrierActivity.ts","webpack://rock-raiders-web/./src/game/model/collect/Barrier.ts","webpack://rock-raiders-web/./src/game/model/job/CarryFenceJob.ts","webpack://rock-raiders-web/./src/game/model/collect/ElectricFence.ts","webpack://rock-raiders-web/./src/game/model/building/BuildingEntity.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Barracks.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Docks.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Geodome.ts","webpack://rock-raiders-web/./src/game/model/building/entities/GunStation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/OreRefinery.ts","webpack://rock-raiders-web/./src/game/model/building/entities/PowerStation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/TeleportBig.ts","webpack://rock-raiders-web/./src/game/model/building/entities/TeleportPad.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Toolstation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Upgrade.ts","webpack://rock-raiders-web/./src/game/model/activities/MonsterActivity.ts","webpack://rock-raiders-web/./src/game/model/monster/Monster.ts","webpack://rock-raiders-web/./src/game/model/monster/Bat.ts","webpack://rock-raiders-web/./src/game/model/monster/SmallSpider.ts","webpack://rock-raiders-web/./src/game/ObjectListLoader.ts","webpack://rock-raiders-web/./src/event/EventTypeEnum.ts","webpack://rock-raiders-web/./src/game/model/job/GetToolJob.ts","webpack://rock-raiders-web/./src/core/Area.ts","webpack://rock-raiders-web/./src/game/model/job/TrainJob.ts","webpack://rock-raiders-web/./src/game/Supervisor.ts","webpack://rock-raiders-web/./src/core/NerpRunner.ts","webpack://rock-raiders-web/./src/core/NerpParser.ts","webpack://rock-raiders-web/./src/game/WorldManager.ts","webpack://rock-raiders-web/./src/screen/layer/ScreenLayer.ts","webpack://rock-raiders-web/./src/event/GameKeyboardEvent.ts","webpack://rock-raiders-web/./src/event/GamePointerEvent.ts","webpack://rock-raiders-web/./src/event/GameWheelEvent.ts","webpack://rock-raiders-web/./src/event/EventManager.ts","webpack://rock-raiders-web/./src/screen/layer/CursorLayer.ts","webpack://rock-raiders-web/./src/screen/BaseScreen.ts","webpack://rock-raiders-web/./src/game/model/job/surface/CompletePowerPathJob.ts","webpack://rock-raiders-web/./src/game/model/building/BuildingSite.ts","webpack://rock-raiders-web/./src/screen/layer/GameLayer.ts","webpack://rock-raiders-web/./src/cfg/BaseConfig.ts","webpack://rock-raiders-web/./src/cfg/BaseButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonCfg.ts","webpack://rock-raiders-web/./src/gui/infodock/ButtonInfoDockCfg.ts","webpack://rock-raiders-web/./src/gui/base/BaseElement.ts","webpack://rock-raiders-web/./src/gui/base/Button.ts","webpack://rock-raiders-web/./src/gui/base/Panel.ts","webpack://rock-raiders-web/./src/gui/radar/RadarPanel.ts","webpack://rock-raiders-web/./src/gui/sidebar/SideBarLabel.ts","webpack://rock-raiders-web/./src/gui/sidebar/PanelCrystalSideBar.ts","webpack://rock-raiders-web/./src/gui/toppanel/ButtonPriorityListCfg.ts","webpack://rock-raiders-web/./src/gui/toppanel/ButtonTopCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonCameraControlCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonInformationCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonsCfg.ts","webpack://rock-raiders-web/./src/cfg/PanelCfg.ts","webpack://rock-raiders-web/./src/cfg/PanelsCfg.ts","webpack://rock-raiders-web/./src/cfg/InfoButtonCfg.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoDockButton.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoDockPanel.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoMessagesEntryConfig.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoMessagesConfig.ts","webpack://rock-raiders-web/./src/gui/infodock/InformationPanel.ts","webpack://rock-raiders-web/./src/cfg/IconPanelBackButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/MenuItemCfg.ts","webpack://rock-raiders-web/./src/gui/main/IconPanelButton.ts","webpack://rock-raiders-web/./src/gui/main/IconSubPanel.ts","webpack://rock-raiders-web/./src/gui/main/BuildingPanel.ts","webpack://rock-raiders-web/./src/gui/main/GetToolPanel.ts","webpack://rock-raiders-web/./src/gui/main/IconPanelButtonLabel.ts","webpack://rock-raiders-web/./src/gui/main/LargeVehiclePanel.ts","webpack://rock-raiders-web/./src/gui/main/IconPanelToggleButton.ts","webpack://rock-raiders-web/./src/gui/main/SelectBasePanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectBuildingPanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectFloorPanel.ts","webpack://rock-raiders-web/./src/game/model/job/EatJob.ts","webpack://rock-raiders-web/./src/gui/main/SelectRaiderPanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectRubblePanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectVehiclePanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectWallPanel.ts","webpack://rock-raiders-web/./src/gui/main/SmallVehiclePanel.ts","webpack://rock-raiders-web/./src/gui/main/TrainRaiderPanel.ts","webpack://rock-raiders-web/./src/gui/main/MainPanel.ts","webpack://rock-raiders-web/./src/gui/messagepanel/TextInfoMessage.ts","webpack://rock-raiders-web/./src/gui/messagepanel/MessagePanel.ts","webpack://rock-raiders-web/./src/gui/messagepanel/TextInfoMessageEntryConfig.ts","webpack://rock-raiders-web/./src/gui/messagepanel/TextInfoMessageConfig.ts","webpack://rock-raiders-web/./src/gui/toppanel/PriorityButtonsConfig.ts","webpack://rock-raiders-web/./src/gui/toppanel/PriorityListPanel.ts","webpack://rock-raiders-web/./src/gui/toppanel/PriorityPositionsEntry.ts","webpack://rock-raiders-web/./src/gui/base/ToggleButton.ts","webpack://rock-raiders-web/./src/gui/toppanel/TopPanel.ts","webpack://rock-raiders-web/./src/screen/layer/GuiBaseLayer.ts","webpack://rock-raiders-web/./src/screen/layer/GuiMainLayer.ts","webpack://rock-raiders-web/./src/core/Rect.ts","webpack://rock-raiders-web/./src/cfg/DialogCfg.ts","webpack://rock-raiders-web/./src/gui/briefing/BriefingPanelCfg.ts","webpack://rock-raiders-web/./src/gui/briefing/BriefingPanel.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuCycleItem.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuLabelItem.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuSliderItem.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuLayer.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuBasePanel.ts","webpack://rock-raiders-web/./src/gui/overlay/OptionsPanel.ts","webpack://rock-raiders-web/./src/gui/overlay/PausePanel.ts","webpack://rock-raiders-web/./src/screen/layer/OverlayLayer.ts","webpack://rock-raiders-web/./src/screen/layer/SelectionLayer.ts","webpack://rock-raiders-web/./src/screen/GameScreen.ts","webpack://rock-raiders-web/./src/menu/MainMenuBaseItem.ts","webpack://rock-raiders-web/./src/menu/MainMenuIconButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLabelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLayer.ts","webpack://rock-raiders-web/./src/menu/MainMenuLevelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuPanel.ts","webpack://rock-raiders-web/./src/menu/MainMenuWindow.ts","webpack://rock-raiders-web/./src/menu/LevelSelectLayer.ts","webpack://rock-raiders-web/./src/screen/MainMenuScreen.ts","webpack://rock-raiders-web/./src/menu/RewardScreenButton.ts","webpack://rock-raiders-web/./src/screen/RewardScreen.ts","webpack://rock-raiders-web/./src/main.ts","webpack://rock-raiders-web/./src/screen/LoadingScreen.ts","webpack://rock-raiders-web/./src/params.ts"],"names":["___CSS_LOADER_EXPORT___","push","module","id","ClearCacheButton","parentId","this","rootElement","document","getElementById","appendChild","createElement","classList","add","button","innerText","onclick","indexedDB","deleteDatabase","location","reload","style","visibility","GithubBox","link","href","img","src","alt","textContent","WadFileSelectionModal","onStart","tabIndex","setAttribute","modalDialog","modalContent","modalHeader","modalTitle","modalBody","navTabList","navFileBtn","appendNavButton","navUrlBtn","navTabContent","appendNavFileTab","appendNavUrlTab","modal","backdrop","keyboard","parent","active","controlTarget","navBtn","type","String","labelledBy","navFileTab","appendNavTab","wad0File","appendWadFileGroup","wad1File","btnStartFile","addEventListener","disabled","wad0FileUrl","URL","createObjectURL","files","wad1FileUrl","filename","wadFileGroup","wadFileLabel","innerHTML","wadFileInput","required","navUrlTab","urlHint","wad0Url","appendWadUrlGroup","wad1Url","btnStartUrl","value","navTab","example","wadUrlGroup","wadUrlLabel","wadUrlInput","show","hide","EventKey","getFilename","url","strUrl","toString","replace","startsWith","substring","lastInd","lastIndexOf","iGet","obj","keys","forEach","keyname","Object","filter","key","toLowerCase","map","decodeString","data","TextDecoder","decode","decodeFilepath","getRandomInclusive","min","max","Math","ceil","floor","random","getRandom","getRandomSign","clearTimeoutSafe","timeout","clearTimeout","clearIntervalSafe","interval","clearInterval","Array","prototype","remove","element","index","indexOf","splice","count","callback","counter","e","Map","getOrUpdate","updateCallback","get","undefined","set","EventBus","event","blockedEvents","includes","eventKey","isLocal","console","log","getListener","eventListener","GameEvent","LocalEvent","super","SelectionEvent","SurfaceSelectedEvent","surface","BuildingSelected","building","RaiderSelected","raider","EntityDeselected","SurfaceChanged","AirLevelChanged","CancelBuildMode","ChangeCursor","cursor","EntityType","EntitySuperType","SelectionType","GameResultState","PriorityList","levelDefault","current","priorities","reset","enabled","tmp","entry","PriorityEntry","c","job","priority","some","j","getPriorityIdentifier","levelPriorityEntry","RaiderTraining","name","DRIVER","ENGINEER","GEOLOGIST","PILOT","SAILOR","DEMOLITION","GameState","resultState","RUNNING","levelFullName","numCrystal","numOre","numBrick","usedCrystals","neededCrystals","airLevel","selectedEntities","selectionType","buildings","buildingsUndiscovered","raiders","raidersUndiscovered","requestedRaiders","materials","materialsUndiscovered","buildingSites","spiders","spidersBySurface","bats","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","discoveredCaverns","levelStartTime","levelStopTime","rewardConfig","priorityList","oxygenRate","buildModeSelection","buildingTypes","b","inBeam","isPowered","bt","entityType","position","targetBuildings","getBuildingsByType","closest","minDist","bPos","getDropPosition","dist","distanceToSquared","upgrades","level","training","stats","TrainDynamite","entities","previouslySelected","stillSelected","deselect","selectionEvents","freshlySelected","selectionEvent","select","len","length","GROUP","getSelectionType","publishEvent","BARRACKS","minX","x","minZ","y","maxX","maxZ","discoverEntities","undiscovered","discovered","pos","getPosition","z","onDiscover","r","round","quota","importance","scoreCrystals","crystals","Infinity","scoreTimer","gameTimeSeconds","timer","scoreCaverns","caverns","scoreConstructions","constructions","scoreOxygen","oxygen","scoreFigures","figures","SURFACE","BUILDING","RAIDER","entity","terrain","sceneMgr","currentSurface","getSurfaceFromWorld","nearbySpiders","getSurface","createContext","width","height","error","result","fillStyle","fillRect","createDummyContext","canvas","context","getContext","createDummyImgData","ImageData","px","py","setPixel","imgData","g","a","n","getPixel","AnimationEntityType","carryNullName","depositNullName","toolNullName","mediumPoly","highPoly","fPPoly","activities","Stats","DebugHelper","setMode","domElement","left","top","body","begin","end","BarrierLocation","surfaceCenter","heading","clone","sub","angle","PI","Cursors","SurfaceType","options","shaping","matIndex","selectable","drillable","drillableHard","explodable","reinforcable","Pointer_Standard","assign","typeNum","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","GROUND","Pointer_SurfaceType_Immovable","Pointer_SurfaceType_Hard","Pointer_SurfaceType_Medium","Pointer_SurfaceType_Loose","Pointer_SurfaceType_OreSeam","Pointer_SurfaceType_CrystalSeam","Pointer_SurfaceType_RechargeSeam","POWER_PATH","POWER_PATH_SITE","WALL_TYPE","SurfaceGeometry","wallType","topLeftVertex","bottomRightVertex","topRightVertex","bottomLeftVertex","topLeftHeight","topRightHeight","bottomRightHeight","bottomLeftHeight","uvOffset","INVERTED_CORNER","WALL","WEIRD_CREVICE","Boolean","uv","bufferVertices","bufferNormals","addFaceAndNormals","normal","subVectors","cross","normalize","uvIndexes","bufferVertexUvs","i","bufferGeometry","BufferAttribute","Float32Array","copyVector3sArray","copyVector2sArray","BuildPlacementMarkerMesh","standardColor","geometry","shininess","transparent","opacity","color","visible","primaryPosition","multiplyScalar","applyAxisAngle","isValid","material","setHex","create","BuildPlacementMarker","group","markers","buildingMarkerPrimary","buildingMarkerSecondary","powerPathMarkerPrimary","powerPathMarkerSecondary","waterPathMarker","sdx","sdz","lastCheck","visibleSurfaces","primarySurface","secondarySurface","waterSurface","buildingMarkerColor","pathMarkerColor","waterMarkerColor","addMarker","marker","worldPosition","updateAllMarker","markAsValid","hideAllMarker","worldMgr","copy","getFloorPosition","sdxv","sdzv","abs","sign","atan2","updateState","secondaryBuildingPart","primaryPowerPath","secondaryPowerPath","waterPathSurface","every","s","surfaceType","neighbors","m","barrierLocations","center","getCenterWorld2D","barrierOffset","secondary","dx","dy","pathTo","node","curr","path","unshift","astar","graph","start","cleanDirty","heuristic","heuristics","manhattan","openHeap","BinaryHeap","f","closestNode","h","markDirty","size","currentNode","pop","closed","il","neighbor","isWall","gScore","getCost","beenVisited","visited","rescoreElement","pos0","pos1","D2","sqrt","d1","d2","Graph","gridIn","nodes","grid","dirtyNodes","diagonal","row","GridNode","init","cleanNode","ret","graphString","rowDebug","weight","join","fromNeighbor","scoreFunction","content","sinkDown","bubbleUp","parentN","elemScore","child2N","child1N","child1Score","swap","child1","child2","WorldEvent","entityKey","JobEvent","JobCreateEvent","JobDeleteEvent","RaiderRequested","MaterialAmountChanged","EntityAddedEvent","superType","CavernDiscovered","OreFoundEvent","BuildingUpgraded","EntityTrained","WorldLocationEvent","CrystalFoundEvent","LandslideEvent","RaiderDiscoveredEvent","AnimClip","looping","transcoef","firstFrame","lastFrame","framesPerSecond","bodies","degToRad","AnimSubObj","relPos","relRot","relScale","parentObjInd","model","degX","degY","degZ","animationFrameIndex","infos","radVec","AnimatedMesh","mesh","textureSequences","dispose","isArray","mat","SURF_VTRN","getVector3AtOffset","view","offset","vector","getFloat32","LWOLoader","verbose","vertices","indices","uvs","sequenceIntervals","chunkOffset","chunkSize","numVertices","vertexIndex","vertexOffset","buffer","surfaceNames","Uint8Array","split","new_material","side","totalNumIndices","numIndices","getInt16","materialIndex","addGroup","currentIndex","Uint16Array","faceIndices","Int16Array","COUNTER_CLOCKWISE","getUint8","materialName","textureFlags","textureSize","textureCenter","subchunkOffset","subchunkType","getInt32","subchunkSize","colorArray","fromArray","flags","getUint16","warn","blending","depthWrite","edgeTransparencyThreshold","luminosity","emissiveIntensity","diffuse","specular","reflection","reflectivity","transparency","vLuminosity","vDiffuse","vSpecular","toArray","textureTypeName","textureValue","textureColorArray","textureFilepath","sequenceTexture","endsWith","match","textureFilename","textures","ResourceManager","filterTextureSequenceNames","getTexture","seqNum","setInterval","lTextureName","XAXIS_BIT","groups","uvIndex","u","v","planarMapUVS","DataView","getUint32","fileSize","byteLength","ID4_SIZE","magic","chunkType","parsePoints","parseSurfaceNames","parsePolygons","parseSurface","setIndex","computeVertexNormals","LWSCLoader","animationClip","lines","lineIndex","l","trim","sceneFileVersion","parseInt","line","parseFrameBlock","parseObjectBlock","parseLine","frameStep","subObj","slice","lwoBuffer","getResource","SceneManager","registerMesh","parse","lenInfos","lenFrames","Number","setFrameAndFollowing","numOfInformationChannels","numOfKeyframes","frameNum","setOpacityAndFollowing","PriorityIdentifier","JobState","JobType","PathMap","PredugMap","WorkerMessageType","MoveState","BaseActivity","activityKey","AnimEntityActivity","Stand","AnimEntity","floorOffset","rotation","radHeading","rotateOnAxis","surfaces","scene","aeFilename","animationEntityType","poly","animation","animationTimeout","selectionFrame","pickSphere","carryJoint","depositJoint","getToolJoint","activity","radiusSq","getAnimationEntityType","changeActivity","moveUp","setTimeout","removeFromScene","getDefaultActivity","onAnimationDone","durationTimeMs","lActivityKey","anim","bind","carries","children","polyModel","lBodyName","polyPart","parentInd","sphere","setFromObject","getBoundingSphere","radius","animate","frameIndex","p","scale","hasOwnProperty","nextFrame","standardDurationTimeMs","that","timeoutTimeMs","pickSphereDiameter","PickSphere","pickSphereRadius","userData","pickSphereCenter","getPickSphereCenter","createSelectionFrame","getBoundingBoxCenter","getCenter","applyMatrix4","makeScale","selectionFrameTextureSize","ctx","strength","selectionFrameTexture","selectionMaterial","depthTest","selectionFrameSize","Job","fulfiller","jobstate","INCOMPLETE","CANCELED","stopJob","COMPLETE","target","PublicJob","CarryJob","item","CARRY","actualTarget","getCarryTargets","setTargetSite","site","getDropAction","canGatherItem","onJobComplete","targetLocation","lookAt","dropItem","gatherItem","BuildingActivity","Teleport","Deposit","Explode","Unpowered","RaiderActivity","Route","RunPanic","Drill","Walk","Reinforce","Reverse","TurnLeft","TurnRight","CantDo","Collect","Clear","Carry","CarryTurnLeft","CarryTurnRight","CarryStand","Dynamite","Place","TeleportIn","Repair","rest","routeRubble","CarryRubble","Eat","FireLaser","GetUp","ThrownByRockMonster","Slip","Train","Recharge","Waiting1","Waiting2","Waiting3","Waiting4","Hoverboard","Standhoverboard","HitLefthoverboard","HitRighthoverboard","HitFronthoverboard","HitBackhoverboard","SMALLTRUCK","StandSMALLTRUCK","HitLeftSMALLTRUCK","HitRightSMALLTRUCK","HitFrontSMALLTRUCK","HitBackSMALLTRUCK","SMALLheli","StandSMALLheli","HitLeftSMALLheli","HitRightSMALLheli","HitFrontSMALLheli","HitBackSMALLheli","SMALLCAT","StandSMALLCAT","HitLeftSMALLCAT","HitRightSMALLCAT","HitFrontSMALLCAT","HitBackSMALLCAT","SMALLMLP","StandSMALLMLP","HitLeftSMALLMLP","HitRightSMALLMLP","HitFrontSMALLMLP","HitBackSMALLMLP","LARGECAT","StandLARGECAT","HitLeftLARGECAT","HitRightLARGECAT","HitFrontLARGECAT","HitBackLARGECAT","SMALLDIGGER","StandSMALLDIGGER","PathTarget","addToScene","CarryPathTarget","addItem","POWER_STATION","ORE_REFINERY","addItemToStorage","CRYSTAL","ORE","MaterialEntity","MATERIAL","targetBuildingTypes","priorityIdentifier","targets","targetSite","TOOLSTATION","updateTargets","sites","needs","getRandomDropPosition","getTargetBuildingTypes","getDropPosition2D","t","complete","resetTarget","createCarryJob","unAssign","Crystal","resource2","mesh2","resource","emissive","aiPriorityCrystal","PowerCrystal","DynamiteActivity","Normal","TickDown","CarryDynamiteJob","dynamite","ignite","DYNAMITE","targetSurface","aiPriorityDestruction","isExplodable","getDigPositions","getCenterWorld","collapse","Ore","aiPriorityOre","RaiderTool","DRILL","HAMMER","SHOVEL","SPANNER","FREEZERGUN","LASER","PUSHERGUN","BIRDSCARER","ClearRubbleJob","CLEAR_RUBBLE","rubblePositions","reduceRubble","jobWorkplaces","getWorkplaces","hasRubble","aiPriorityClearing","DrillJob","ReinforceJob","REINFORCE","reinforce","aiPriorityReinforce","Surface","heightOffset","containedOres","containedCrystals","selected","reinforced","drillJob","reinforceJob","dynamiteJob","clearRubbleJob","surfaceRotation","seamLevel","fallinTimeout","fallinGrp","needsMeshUpdate","topLeftHeightOffset","topRightHeightOffset","bottomLeftHeightOffset","bottomRightHeightOffset","fence","hasPower","discoverSurface","floors","others","caveFound","shift","o","isSupported","cancelJobs","getRandomPosition","discover","dropContainedOre","crystal","placeMaterial","surf","updateSurfaceMeshes","floorGroup","updateWorldMatrix","dropAmount","safeRemoveJob","updateJobColor","updateTexture","surfLeft","surfTopLeft","surfTop","surfTopRight","surfRight","surfBottomRight","surfBottom","surfBottomLeft","isHighGround","surf1","surf2","surf3","force","updateGeometry","cancelReinforceJobs","updateGraphWalk","getGraphWalkWeight","graphWalk","textureName","textureSet","texturebasename","updatePowerPathTexture","CORNER","texture","accessMaterials","isPath","right","bottom","pathSum","avgHeight","args","sum","cnt","blocksPathSurface","isDrillable","digPosition","isWalkable","addScalar","getTerrainHeight","fallinLevel","originPos","targetPos","findFallInOrigin","findFallInTarget","scheduleFallin","targetX","targetY","createFallin","fallinPosition","makeRubble","worldX","worldZ","sx","sy","dy0","interpolate","dy1","y0","y1","containedOre","state","recursive","setHasPower","targetBuilding","getClosestBuildingByType","getHeading","TerrainPath","locations","lengthSq","Terrain","roofGroup","cachedPaths","setScalar","registerEventListener","getSurfaceFromWorldXZ","getSurfaceOrNull","forEachSurface","updateMesh","resetGraphWalk","clear","gridStartX","gridStartY","gridEndX","gridEndY","cacheIdentifier","cachedPath","addLocation","searchPath","startNode","endNode","worldPath","search","gridNodeToWorldPos","gridNode","divideScalar","leftSurface","isReinforcable","topSurface","rightSurface","bottomSurface","leftSurface2","isDigable","topSurface2","rightSurface2","bottomSurface2","each","maxFps","debugHelper","renderer","antialias","setClearColor","camera","controls","mouseButtons","LEFT","MIDDLE","RIGHT","buildMarker","rx","ry","raycaster","setFromCamera","intersects","intersectObjects","object","selectEntities","r1x","r1y","r2x","r2y","startPoint","endPoint","EPSILON","updateProjectionMatrix","updateMatrixWorld","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","setFromMatrixPosition","matrixWorld","unproject","vectemp1","vectemp2","vectemp3","deep","MAX_VALUE","frustum","planes","setFromCoplanarPoints","containsPoint","getSelectionCenter","levelConf","ambientRgb","cfg","maxAmbRgb","normalizedRgb","ambientColor","ambientLight","cursorTorchlight","distance","tileSize","blockSize","themeName","terrainMap","pathMap","surfaceMap","predugMap","cryOreMap","fallinMap","erodeMap","surfaceTypeNum","getByNum","predugLevel","CAVERN_EXPOSED","SLUG_HOLE_EXPOSED","SLUG_HOLE_HIDDEN","CAVERN_HIDDEN","pathMapLevel","NONE","RUBBLE","currentCryOre","weights","col","w","setFallinLevel","loadTerrain","countDiggables","countCrystals","countOres","renderInterval","animRequest","requestAnimationFrame","renderStart","render","renderDone","cancelAnimationFrame","meshRegistry","animatedMesh","setSize","point","world","floorY","getFloorHeight","intersect","intersectObject","BitmapFont","fontImageData","cols","rows","letters","chars","maxCharWidth","getActualCharacterWidth","rowPixelIndex","colPixelIndex","charHeight","extractData","actualWidth","startX","startY","alpha","text","maxWidth","autoCenter","determineRows","rowX","rowY","letterX","letterImgData","charAt","putImageData","spaceWidth","rowText","rowWidth","word","wordWidth","letter","letterImg","ResourceCache","configuration","resourceName","lName","resourceByName","imageName","getImageData","getImage","fontCache","getBitmapFont","InitLoadingMessage","startLoading","msg","worker","onmessage","ASSET","assetName","assetObj","alphaIndexMatch","onAssetLoaded","MSG","onMessage","CFG","onInitialLoad","totalResources","CACHE_MISS","onCacheMissed","DONE","loadingTimeSeconds","onLoadDone","postMessage","basename","lBasename","res","lSharedTextureName","needsUpdate","cfgRoot","root","getPath","polyname","polykey","act","file","isLws","loadModels","Worker","MoveJob","MOVE","EntityStep","vec","targetReached","MovableEntity","currentPath","RouteSpeed","isOnPath","PathCoef","equals","paths","findPathToTarget","sort","TARGET_UNREACHABLE","nextLocation","firstLocation","step","determineStep","isInArea","getPosition2D","TARGET_REACHED","getRouteActivity","MOVED","getEntityStep","stepLengthSq","entitySpeed","getSpeed","setLength","targetWorld","FulfillerEntity","workInterval","followUpJob","work","getWorldPosition","unassign","Raider","tools","trainings","slipped","Pilot","findPath","isOnRubble","moveToClosestTarget","setActualWorkplace","getNearbySpiders","spider","slip","onDeath","moveToClosestWorkplace","surfJob","drillTimeMs","getDrillTime","focusPoint","rotateAround","completeJob","carryItem","getCarryItem","pickupItem","isReadyToComplete","workActivity","getWorkActivity","getWorkDuration","HardDrillTime","LooseDrillTime","SoilDrillTime","SeamDrillTime","beamUp","tool","has","BarrierActivity","Short","Expand","Long","Barrier","BARRIER","aiPriorityConstruction","onAddToSite","CarryFenceJob","canPlaceFence","ElectricFence","ELECTRIC_FENCE","BuildingEntity","powerSwitch","spawning","primaryPathSurface","secondaryPathSurface","upgradeCostOre","upgradeCostBrick","crystalsInUse","turnOnPower","worldPos","SelfPowered","PowerBuilding","Levels","canUpgrade","BRICK","CostOre","CostCrystal","setBuilding","hasMaxLevel","quantity","disableTeleportIn","createPickSphere","secondaryOffset","pathOffset","pathSurface","GEODOME","onPlaceDown","Barracks","Docks","DOCKS","Geodome","GunStation","GUNSTATION","OreRefinery","PowerStation","Powerstation","TeleportBig","TELEPORT_BIG","TeleportBIG","TeleportPad","TELEPORT_PAD","Toolstation","Upgrade","UPGRADE","MonsterActivity","Monster","MONSTER","moveTimeout","Bat","BAT","onMove","bat","findTarget","currentCenter","targetZ","onLevelEnd","SmallSpider","SMALL_SPIDER","MOUSE_BUTTON","POINTER_EVENT","KEY_EVENT","GetToolJob","GET_TOOL","addTool","Area","x0","x1","TrainJob","TRAIN","workplaces","TrainingPathTarget","addTraining","targetArea","Supervisor","jobs","assignInterval","checkRubbleInterval","cancel","stop","assignJobs","checkUnclearedRubble","resetWorkInterval","availableJobs","getPriority","unemployedRaider","closestRaider","closestRaiderIndex","minDistance","closestToolRaider","closestToolRaiderIndex","minToolDistance","closestToolstationPosition","closestNeededTool","closestTrainingRaider","closestTrainingRaiderIndex","minTrainingDistance","closestTrainingArea","closestNeededTraining","requiredTool","getRequiredTool","hasRequiredTool","hasTool","raiderTraining","getRequiredTraining","hasTraining","raiderPosition","pathToJob","pathToTraining","getTrainingSites","getSurfaceFromWorld2D","targetPosition","pathToToolstation","setJob","startSurface","rad","createClearRubbleJob","NerpRunner","debug","nerpInterval","registers","fill","timers","scriptLines","statements","macrosByName","labelsByName","halted","programCounter","messages","messagePermit","execute","register","num","isNaN","Error","checkRegister","checkRegisterValue","Date","getTime","FAILED","messagesAllowed","typeName","setBuildingsUpgradeLevel","arg1","arg2","arg3","messageNumber","arrowDisabled","txt","methodName","methodArgs","setRegisterMatch","setR","addRegisterMatch","addR","getRegisterMatch","getR","setTimerMatch","setTimer","getTimerMatch","getTimer","lMethodName","memberName","getOwnPropertyNames","find","apply","conditionResult","executeStatement","expression","invoke","argValues","callMethod","comparator","jump","statement","label","NerpParser","nerpScript","nerpRunner","includeName","includedRunner","concat","firstLine","macroLines","mLine","append","macroLine","macroCall","replaceMacros","labelMatch","preProcess","labelName","macro","RegExp","number","opSplit","brackets","spaceSplit","jumpMatch","WorldManager","oxygenUpdateInterval","updateOxygen","fullName","reward","setList","nerpFile","nerpMessageFile","startExecution","now","pauseExecution","diff","OxygenCoef","reduce","ScreenLayer","withContext","background","zIndex","layerA","layerB","aIndex","bIndex","onRedraw","isActive","redraw","windowX","windowY","clientRect","getBoundingClientRect","ScaledLayer","fixedWidth","fixedHeight","updateScale","scaleX","scaleY","cx","cy","toCanvasCoords","resize","GameKeyboardEvent","eventEnum","bubbles","GamePointerEvent","clientX","clientY","pointerType","ctrlKey","metaKey","shiftKey","GameWheelEvent","deltaX","deltaY","deltaZ","EventManager","screen","gameCanvasContainer","isInRect","preventDefault","DOWN","UP","eventType","nonBubblingClone","layers","compareZ","handlePointerEvent","handleKeyEvent","handleWheelEvent","CursorLayer","changeCursor","pointersCfg","curUrl","revokeObjectURL","cursorFilename","curImg","toDataURL","BaseScreen","ratio","focus","eventMgr","window","onWindowResize","cursorLayer","addLayer","layer","setZIndex","offsetWidth","maxHeight","offsetHeight","idealHeight","firstLayer","rect","CompletePowerPathJob","placedItems","COMPLETE_POWER_PATH","placed","BuildingSite","neededByType","assignedByType","onSiteByType","needed","checkComplete","neededType","placeDown","items","itemsOnSite","GameLayer","rightDown","lastCursor","intersectionPoint","getTerrainPositionFromEvent","setTorchPosition","update","updateCursor","MAIN","getBarrierLocations","neededOre","closestToolstation","spawnBarriers","spawnMaterials","SECONDARY","assignSurfaceJob","createDrillJob","dispatchEvent","PointerEvent","determineCursor","Pointer_Selected","getTerrainIntersectionPoint","WheelEvent","BaseConfig","config","cfgObj","cfgKey","lCfgKeyName","objKey","assignValue","cfgValue","currentValue","currentIsArray","parsedValue","parseValue","parsedIsArray","BaseButtonCfg","buttonType","normalFile","highlightFile","pressedFile","disabledFile","relX","relY","tooltip","ButtonCfg","ButtonInfoDockCfg","panelButtonInfoDockGoto","panelButtonInfoDockClose","setFromCfg","BaseElement","hidden","hover","pressed","child","updatePosition","drawHover","drawTooltip","isInactive","inRect","stateChanged","checkHover","checkClick","onClick","checkRelease","release","notifyRedraw","Button","btnCfg","imgNormal","imgHover","imgPressed","imgDisabled","getImageOrNull","drawImage","Panel","panelCfg","xOut","yOut","xIn","yIn","movedIn","onDone","toggleState","updateAnimation","speed","diffX","diffY","panel","RadarPanel","panelFillCfg","panelOverlayCfg","buttonsCfg","addChild","overlay","btnToggle","panelButtonRadarToggle","btnMap","panelButtonRadarMapView","btnTagged","panelButtonRadarTaggedObjectView","ButtonRadarCfg","panelButtonRadarZoomIn","panelButtonRadarZoomOut","SideBarLabel","textAlign","font","fillText","PanelCrystalSideBar","labelOre","panelButtonCrystalSideBarOre","totalOre","labelCrystal","panelButtonCrystalSideBarCrystals","imgNoCrystal","imgSmallCrystal","imgUsedCrystal","imgOre","curX","curY","imgCrystal","ButtonCrystalSideBarCfg","ButtonPriorityListCfg","panelButtonPriorityListDisable","panelButtonPriorityListUpOne","panelButtonPriorityListClose","panelButtonPriorityListReset","ButtonTopCfg","panelButtonTopPanelCallToArms","panelButtonTopPanelOptions","panelButtonTopPanelPriorities","ButtonCameraControlCfg","panelButtonCameraControlZoomIn","panelButtonCameraControlZoomOut","panelButtonCameraControlCycleBuildings","panelButtonCameraControlRotate","ButtonInformationCfg","panelButtonInformationToggle","panelButtonInformationFunction","ButtonsCfg","panelRadar","panelCrystalSideBar","panelTopPanel","panelInformation","panelPriorityList","panelCameraControl","panelInfoDock","panelEncyclopedia","btnCfgValue","arr","PanelCfg","PanelsCfg","panelRadarFill","panelRadarOverlay","panelMessages","panelMessagesSide","InfoButtonCfg","buttonImageFilename","InfoDockButton","infoMessagesEntryConfig","animationSpeedX","animationSpeedY","message","buttonClicked","showButton","Promise","resolve","InfoDockPanel","infoMessagesConfig","informationPanel","stackButtons","gotoLatestMessage","dropLatestMessage","infoGenericDeath","infoGenericMonster","infoCrystalFound","infoUnderAttack","infoLandslide","infoPowerDrain","infoSlugEmerge","infoFoundMinifigure","btn","setMovedIn","slideStackIntoPosition","then","slideInButton","prev","cur","slideToTarget","pushFirst","setText","promises","all","InfoMessagesEntryConfig","sfx","timing","flag","InfoMessagesConfig","InformationPanel","textImage","getDefaultFont","createTextImage","IconPanelBackButtonCfg","MenuItemCfg","tooltipSfx","tooltipDisabled","tooltipDisabledSfx","hotkey","IconPanelButton","menuItemCfg","itemKey","parentWidth","menuIndex","isDisabled","autoRedraw","targetState","strokeStyle","lineWidth","strokeRect","IconSubPanel","numOfItems","onBackPanel","backBtn","iconPanelButtons","backBtnCfg","frameImgCfg","imgName","val1","val2","val3","val4","imgNameWoBackName","woBack1","woBack2","menuItemGroup","menuItem","BuildingPanel","addBuildMenuItem","factory","addMenuItem","GetToolPanel","addGetToolItem","hasOneBuildingOf","selectedRaiders","IconPanelButtonLabel","LargeVehiclePanel","IconPanelToggleButton","menuItemOffCfg","menuItemOnCfg","imgOnNormal","imgOnHover","imgOnPressed","imgOnDisabled","onToggleStateChange","SelectBasePanel","SelectBuildingPanel","powerSwitchItem","turnOffPower","upgradeItem","upgrade","deleteBuildingItem","SelectFloorPanel","pathItem","selectedSurface","removeItem","placeFenceItem","spawnFence","EatJob","EAT","SelectRaiderPanel","feedItem","isDriving","getToolItem","trainItem","deleteRaiderItem","SelectRubblePanel","clearRubbleItem","SelectVehiclePanel","SelectWallPanel","itemDrill","addWallMenuItem","isDrillableHard","itemReinforce","createReinforceJob","itemDynamite","createDynamiteJob","hasBuildingWithUpgrades","itemDeselect","SmallVehiclePanel","TrainRaiderPanel","trainDynamite","MainPanel","subPanels","mainPanel","addSubPanel","buildingPanel","smallVehiclePanel","largeVehiclePanel","selectWallPanel","selectFloorPanel","selectRubblePanel","selectBuildingPanel","selectRaiderPanel","trainRaiderPanel","getToolPanel","selectVehiclePanel","teleportRaider","getMaxRaiders","buildingItem","smallVehicleItem","largeVehicleItem","onSelectedSurfaceChange","selectSubPanel","childPanel","targetPanel","subPanel","TextInfoMessage","infoMessageEntryConfig","infoImage","imageFilename","MessagePanel","textInfoMessageConfig","imgAir","currentMessage","messageTimeout","crystalFound","textCrystalFound","setMessage","msgSpaceToContinue","textSpaceToContinue","cavernDiscovered","textCavernDiscovered","oreFound","textOreFound","msgAirSupplyLow","textAirSupplyLow","msgAirSupplyRunningOut","textAirSupplyRunningOut","msgGameCompleted","textGameCompleted","msgManTrained","textManTrained","msgUnitUpgraded","textUnitUpgraded","textInfoMessage","txtX","infoX","TextInfoMessageEntryConfig","sfxName","TextInfoMessageConfig","PriorityButtonsConfig","aiPriorityTrain","aiPriorityGetIn","aiPriorityRepair","aiPriorityRecharge","PriorityListPanel","prioPositions","prioByName","buttonCfg","toggle","upOne","resetList","updated","prioButton","btnIndex","pushToTop","PriorityPositionsEntry","ToggleButton","isPressed","TopPanel","btnCallToArms","btnOptions","btnPriorities","GuiBaseLayer","panels","clearRect","toScaledCoords","hit","GuiMainLayer","onOptionsShow","panelsCfg","addPanel","priorityButtonsConfig","priorityPositionsConfig","values","panelMain","Rect","DialogCfg","image","titleWindow","textWindow","okWindow","cancelWindow","contrastOverlay","BriefingPanelCfg","titleFont","title","dialogCfg","textFont","nextButtonCfg","backButtonCfg","BriefingPanel","imgTitle","titleRelX","titleRelY","btnNext","btnBack","imgBack","imgParagraph","paragraph","nextParagraph","prevParagraph","setParagraph","objectiveText","objectiveBackImgCfg","messagePanel","unsetMessage","MenuCycleItem","itemCfg","labelX","imgTextNormal","loFont","description","imgTextHover","hiFont","imgLabelOffNormal","labelOff","imgLabelOffHover","imgLabelOnNormal","labelOn","imgLabelOnHover","imgLabel","MenuLabelItem","loImg","hiImg","menuImage","MenuSliderItem","sliderX","onValueChanged","imgLeft","imgOff","imgOn","imgRight","leftBtn","btnLeftNormal","btnLeftHover","rightBtn","btnRightNormal","btnRightHover","posX","dw","MenuLayer","menuCfg","itemsTrigger","itemsNext","titleImage","menuFont","itemsLabel","actionName","itemsCycle","itemsSlider","MenuBasePanel","layersByKey","menus","pausePanel","selectLayer","OptionsPanel","onRepeatBriefing","PausePanel","onAbortGame","onRestartGame","OverlayLayer","panelPause","panelOptions","panelBriefing","setActivePanel","setup","lEventKey","SelectionLayer","selectStart","startSelection","changeSelection","screenX","screenY","selectEntitiesByRay","selectEntitiesInFrustum","GameScreen","spawnRaiderInterval","gameLayer","selectionLayer","guiLayer","overlayLayer","jobSupervisor","restartLevel","checkSpawnRaiders","levelName","levelsByName","setupAndStartLevel","setupScene","objectListConf","oListFile","disableStartTeleport","olObject","lTypeName","xPos","yPos","buildingType","terrainY","loc","createBuildingByName","startMoving","startRandomMove","typename","loadObjectList","objective","objectiveImage640x480","startScene","disposeScene","spawnBuildings","station","walkOutPos","MainMenuBaseItem","scrollAffected","needsRedraw","targetIndex","onHoverChange","MainMenuIconButton","draw","MainMenuLabelButton","labelImgLo","labelImgHi","MainMenuLayer","scrollY","scrollSpeedY","scrollInterval","displayTitle","setScrollY","hovered","setReleased","absY","canScroll","scrollAreaHeight","setScrollSpeedY","checkSetPressed","showMainMenu","selectLevel","levelKey","pow","scrollYBefore","MainMenuLevelButton","levelCfg","imgActive","imgInactive","imgCross","unlocked","frontEndX","frontEndY","menuBMP","frontEndOpen","MainMenuPanel","area","MainMenuWindow","imgFirstLine","imgSecondLine","LevelSelectLayer","modeLevel","levelsCfg","levelTextCfg","LevelTextCfg","panelImgData","panelPos","levelTextWindow","setFirstLine","tutorial","levelButton","setSecondLine","winCfg","MainMenuScreen","onLevelSelected","RewardScreenButton","conf","imgNormalFilepath","imgHoverFilepath","imgPressedFilepath","imgDisabledFilepath","RewardScreen","resultIndex","resultLastIndex","images","boxes","fonts","texts","uncoverTimeout","backgroundImg","wallpaper","filePath","boxImages","fontKey","labelFont","backFont","resultsLayer","btnSave","btnAdvance","descriptionTextLayer","btnLayer","saveButton","advanceButton","onAdvance","uncoverResult","levelFullNameImg","resultText","quitText","completeText","failedText","resultValues","percentString","timeString","score","gameResultTextImg","box","vertSpacing","descriptionTextImg","textPos","tx","ty","actual","lessIsMore","padding","seconds","ss","padLeft","minutes","mm","loadingScreen","assetIndex","setLoadingMessage","imgBackground","imgProgress","imgLoading","loadingBarWidth","wadFileSelectModal","githubBox","clearCacheButton","startLoadingFromUrl","enableGraphicMode","increaseLoadingState","mainMenuScreen","gameScreen","rewardScreen","startLevel","showLevelSelection","params","URLSearchParams","substr","startLoadingFromCache","DEV_MODE","WAD_CACHE_DB_NAME","JOB_SCHEDULE_INTERVAL","CHECK_CLEARRUBBLE_INTERVAL","JOB_ACTION_RANGE","CHECK_SPANW_RAIDER_TIMER","MAX_RAIDER_BASE","MAX_RAIDER_REQUEST","ADDITIONAL_RAIDER_PER_SUPPORT","UPDATE_OXYGEN_TIMER","PANEL_ANIMATION_MULTIPLIER","HEIGHT_MULTIPLER","SEQUENCE_TEXTURE_FRAMERATE","SPRITE_RESOLUTION_WIDTH","SPRITE_RESOLUTION_HEIGHT","TILESIZE","NATIVE_FRAMERATE"],"mappings":"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","file":"617.index.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".clear-cache-box {\\n    z-index: 2000;\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./site/clearcache/clearCacheButton.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;IACb,kBAAkB;IAClB,OAAO;IACP,MAAM;AACV\",\"sourcesContent\":[\".clear-cache-box {\\n    z-index: 2000;\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".github-box {\\n    z-index: 2000;\\n    padding: 16px;\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    background-color: rgba(0, 0, 0, 0.6);\\n    color: #fff;\\n}\\n\\n.github-box a {\\n    color: #fff;\\n    text-decoration: none;\\n    padding: 8px;\\n}\\n\\n.github-box a:hover {\\n    color: #fff;\\n    text-decoration: underline;\\n}\\n\\n.github-logo {\\n    width: 16px;\\n    height: 16px;\\n    margin-right: 8px;\\n    vertical-align: middle;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./site/github/github.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;IACb,aAAa;IACb,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,oCAAoC;IACpC,WAAW;AACf;;AAEA;IACI,WAAW;IACX,qBAAqB;IACrB,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,0BAA0B;AAC9B;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,sBAAsB;AAC1B\",\"sourcesContent\":[\".github-box {\\n    z-index: 2000;\\n    padding: 16px;\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    background-color: rgba(0, 0, 0, 0.6);\\n    color: #fff;\\n}\\n\\n.github-box a {\\n    color: #fff;\\n    text-decoration: none;\\n    padding: 8px;\\n}\\n\\n.github-box a:hover {\\n    color: #fff;\\n    text-decoration: underline;\\n}\\n\\n.github-logo {\\n    width: 16px;\\n    height: 16px;\\n    margin-right: 8px;\\n    vertical-align: middle;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!./clearCacheButton.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { WAD_CACHE_DB_NAME } from '../../src/params'\nimport './clearCacheButton.css'\n\nexport class ClearCacheButton {\n\n    rootElement: HTMLDivElement\n\n    constructor(parentId: string) {\n        this.rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        this.rootElement.classList.add('clear-cache-box')\n\n        const button = this.rootElement.appendChild(document.createElement('button'))\n        button.classList.add('btn', 'btn-info')\n        button.innerText = 'Clear cached wad files and restart'\n        button.onclick = () => {\n            indexedDB.deleteDatabase(WAD_CACHE_DB_NAME)\n            location.reload()\n        }\n    }\n\n    hide() {\n        this.rootElement.style.visibility = 'hidden'\n    }\n\n}\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!./github.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import './github.css'\nimport GithubIcon from './github.png'\n\nexport class GithubBox {\n\n    rootElement: HTMLDivElement\n\n    constructor(parentId: string) {\n        this.rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        this.rootElement.classList.add('github-box')\n\n        const link = this.rootElement.appendChild(document.createElement('a'))\n        link.href = 'https://github.com/scarabol/rock-raiders-web'\n\n        const img = link.appendChild(document.createElement('img'))\n        img.src = GithubIcon\n        img.classList.add('github-logo')\n        img.alt = 'Fork on GitHub'\n\n        const txt = link.appendChild(document.createElement('span'))\n        txt.textContent = img.alt\n    }\n\n    hide() {\n        this.rootElement.style.visibility = 'hidden'\n    }\n\n}\n","import { Modal } from 'bootstrap'\n\nexport class WadFileSelectionModal {\n\n    public onStart: (wad0Url, wad1Url) => any = null\n\n    private readonly modal: Modal\n\n    constructor(parentId: string) {\n        const rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        rootElement.classList.add('modal')\n        rootElement.tabIndex = -1\n        rootElement.setAttribute('role', 'dialog')\n        rootElement.setAttribute('aria-hidden', 'true')\n\n        const modalDialog = rootElement.appendChild(document.createElement('div'))\n        modalDialog.classList.add('modal-dialog')\n        rootElement.setAttribute('role', 'document')\n\n        const modalContent = modalDialog.appendChild(document.createElement('div'))\n        modalContent.classList.add('modal-content')\n\n        const modalHeader = modalContent.appendChild(document.createElement('div'))\n        modalHeader.classList.add('modal-header')\n        const modalTitle = modalHeader.appendChild(document.createElement('h5'))\n        modalTitle.classList.add('modal-title')\n        modalTitle.innerText = 'Load .wad files'\n        modalTitle.id = 'wadfileSelectModalLabel'\n        rootElement.setAttribute('aria-labelledby', modalTitle.id)\n\n        const modalBody = modalContent.appendChild(document.createElement('div'))\n        modalBody.classList.add('modal-body')\n\n        const hint = modalBody.appendChild(document.createElement('p'))\n        hint.innerText = 'Assets not included! In order to play the game, please select the game files.'\n\n        const navTabs = modalBody.appendChild(document.createElement('nav'))\n        const navTabList = navTabs.appendChild(document.createElement('div'))\n        navTabList.id = 'nav-tab'\n        navTabList.classList.add('nav', 'nav-tabs')\n        navTabList.setAttribute('role', 'tablist')\n\n        const navFileBtn = WadFileSelectionModal.appendNavButton(navTabList, true, 'nav-file-tab', 'nav-file', 'Local files (recommended)')\n        const navUrlBtn = WadFileSelectionModal.appendNavButton(navTabList, false, 'nav-url-tab', 'nav-url', 'Online from URL')\n\n        const navTabContent = modalBody.appendChild(document.createElement('div'))\n        navTabContent.classList.add('tab-content')\n        this.appendNavFileTab(navTabContent, navFileBtn.id)\n        this.appendNavUrlTab(navTabContent, navUrlBtn.id)\n\n        // rootElement has to be a valid bootstrap HTML modal before we can instantiate it\n        this.modal = new Modal(rootElement, {backdrop: 'static', keyboard: false})\n    }\n\n    private static appendNavButton(parent: HTMLDivElement, active: boolean, id: string, controlTarget: string, innerText: string) {\n        const navBtn = parent.appendChild(document.createElement('button'))\n        navBtn.classList.add('nav-link')\n        if (active) navBtn.classList.add('active')\n        navBtn.id = id\n        navBtn.setAttribute('data-bs-toggle', 'tab')\n        navBtn.setAttribute('data-bs-target', '#' + controlTarget)\n        navBtn.type = 'button'\n        navBtn.setAttribute('role', 'tab')\n        navBtn.setAttribute('aria-controls', controlTarget)\n        navBtn.setAttribute('aria-selected', String(active))\n        navBtn.innerText = innerText\n        return navBtn\n    }\n\n    private appendNavFileTab(parent: HTMLDivElement, labelledBy: string) {\n        const navFileTab = WadFileSelectionModal.appendNavTab(parent, true, 'nav-file', labelledBy)\n\n        const wad0File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad0-file', 'LegoRR0.wad')\n        const wad1File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad1-file', 'LegoRR1.wad')\n\n        const btnStartFile = navFileTab.appendChild(document.createElement('button'))\n        btnStartFile.type = 'submit'\n        btnStartFile.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartFile.id = 'button-start-file'\n        btnStartFile.innerText = 'Start Game'\n        btnStartFile.addEventListener('click', () => {\n            btnStartFile.disabled = true\n            const wad0FileUrl = URL.createObjectURL(wad0File.files[0])\n            const wad1FileUrl = URL.createObjectURL(wad1File.files[0])\n            this.onStart(wad0FileUrl, wad1FileUrl)\n        })\n    }\n\n    private static appendWadFileGroup(parent: HTMLDivElement, id: string, filename: string) {\n        const wadFileGroup = parent.appendChild(document.createElement('div'))\n        wadFileGroup.classList.add('my-3')\n        const wadFileLabel = wadFileGroup.appendChild(document.createElement('label'))\n        wadFileLabel.setAttribute('for', id)\n        wadFileLabel.classList.add('form-label')\n        wadFileLabel.innerHTML = 'Select <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadFileInput = wadFileGroup.appendChild(document.createElement('input'))\n        wadFileInput.type = 'file'\n        wadFileInput.classList.add('form-control')\n        wadFileInput.id = id\n        wadFileInput.required = true\n        return wadFileInput\n    }\n\n    private appendNavUrlTab(parent: HTMLDivElement, labelledBy: string) {\n        const navUrlTab = WadFileSelectionModal.appendNavTab(parent, false, 'nav-url', labelledBy)\n\n        const urlHint = navUrlTab.appendChild(document.createElement('div'))\n        urlHint.classList.add('my-3')\n        urlHint.innerText = 'Direct links with correct Allow-Origin-CORS-Headers required here.'\n\n        const wad0Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad0-url', 'LegoRR0.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n        const wad1Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad1-url', 'LegoRR1.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n\n        const btnStartUrl = navUrlTab.appendChild(document.createElement('button'))\n        btnStartUrl.type = 'submit'\n        btnStartUrl.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartUrl.id = 'button-start-url'\n        btnStartUrl.innerText = 'Start Game'\n        btnStartUrl.addEventListener('click', () => {\n            btnStartUrl.disabled = true\n            // XXX show loading progress for WAD files\n            this.onStart(wad0Url.value, wad1Url.value)\n        })\n    }\n\n    private static appendNavTab(parent: HTMLDivElement, active: boolean, id: string, labelledBy: string) {\n        const navTab = parent.appendChild(document.createElement('div'))\n        navTab.classList.add('tab-pane', 'fade')\n        if (active) navTab.classList.add('show', 'active')\n        navTab.id = id\n        navTab.setAttribute('role', 'tabpanel')\n        navTab.setAttribute('aria-labelledby', labelledBy)\n        return navTab\n    }\n\n    private static appendWadUrlGroup(parent: HTMLDivElement, id: string, filename: string, example: string) {\n        const wadUrlGroup = parent.appendChild(document.createElement('div'))\n        wadUrlGroup.classList.add('my-3')\n        const wadUrlLabel = wadUrlGroup.appendChild(document.createElement('label'))\n        wadUrlLabel.setAttribute('for', id)\n        wadUrlLabel.classList.add('form-label')\n        wadUrlLabel.innerHTML = 'Enter url for <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadUrlInput = wadUrlGroup.appendChild(document.createElement('input'))\n        wadUrlInput.type = 'url'\n        wadUrlInput.classList.add('form-control')\n        wadUrlInput.id = id\n        wadUrlInput.required = true\n        wadUrlInput.value = example\n        return wadUrlInput\n    }\n\n    public show() {\n        this.modal.show()\n    }\n\n    public hide() {\n        this.modal.hide()\n    }\n\n}\n","export enum EventKey {\n\n    SELECTED_SURFACE,\n    SELECTED_BUILDING,\n    SELECTED_RAIDER,\n    SELECTED_VEHICLE,\n\n    DESELECTED_ENTITY,\n\n    JOB_CREATE,\n    JOB_DELETE,\n\n    RAIDER_REQUESTED,\n\n    MATERIAL_AMOUNT_CHANGED,\n\n    ENTITY_ADDED,\n    ENTITY_REMOVED,\n\n    CAVERN_DISCOVERED,\n\n    ORE_FOUND,\n\n    BUILDING_UPGRADED,\n\n    RAIDER_TRAINED,\n\n    LOCATION_DEATH,\n    LOCATION_MONSTER,\n    LOCATION_CRYSTAL_FOUND,\n    LOCATION_UNDER_ATTACK,\n    LOCATION_LANDSLIDE,\n    LOCATION_POWER_DRAIN,\n    LOCATION_SLUG_EMERGE,\n    LOCATION_RAIDER_DISCOVERED,\n\n    SURFACE_CHANGED,\n    AIR_LEVEL_CHANGED,\n    CANCEL_BUILD_MODE,\n    CHANGE_CURSOR,\n\n}\n","export function getFilename(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '')\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/')\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max)\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2\n}\n\nexport function clearTimeoutSafe(timeout: NodeJS.Timeout) {\n    if (timeout) clearTimeout(timeout)\n    return null\n}\n\nexport function clearIntervalSafe(interval: NodeJS.Timeout) {\n    if (interval) clearInterval(interval)\n    return null\n}\n\ndeclare global {\n\n    interface Array<T> {\n        remove(element: T): void\n\n        count(callback: (element: T) => boolean): number\n    }\n\n    interface Map<K, V> {\n        getOrUpdate(key: K, updateCallback: () => V): V\n    }\n\n}\n\nArray.prototype.remove = function <T>(element: T): void {\n    const index = this.indexOf(element)\n    if (index !== -1) this.splice(index, 1)\n}\n\nArray.prototype.count = function <T>(callback: (element: T) => boolean): number {\n    let counter = 0\n    this.forEach((e) => callback(e) && counter++)\n    return counter\n}\n\n// noinspection JSUnusedGlobalSymbols\nMap.prototype.getOrUpdate = function <K, V>(key: K, updateCallback: () => V): V {\n    let value = this.get(key)\n    if (value === undefined) {\n        value = updateCallback()\n        this.set(key, value)\n    }\n    return value\n}\n","import { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class EventBus {\n\n    static eventListener = new Map<EventKey, ((event: GameEvent) => any)[]>()\n    static blockedEvents = []\n\n    static publishEvent(event: GameEvent) {\n        if (this.blockedEvents.includes(event.eventKey)) return // event is currently blocked from publishing\n        if (!event.isLocal) console.log('Event published: ' + EventKey[event.eventKey])\n        this.blockedEvents.push(event.eventKey)\n        this.getListener(event.eventKey).forEach((callback) => callback(event))\n        this.blockedEvents.remove(event.eventKey)\n    }\n\n    static registerEventListener(eventKey: EventKey, callback: (GameEvent) => any) {\n        this.getListener(eventKey).push(callback)\n    }\n\n    private static getListener(eventKey: EventKey) {\n        return this.eventListener.getOrUpdate(eventKey, () => [])\n    }\n\n    // TODO cleanup/unregister all event listener at level end?!\n\n}\n","import { EventKey } from './EventKeyEnum'\n\nexport class GameEvent {\n\n    eventKey: EventKey\n    isLocal: boolean\n\n    constructor(eventKey: EventKey) {\n        this.eventKey = eventKey\n    }\n\n}\n","import { BuildingEntity } from '../game/model/building/BuildingEntity'\nimport { Surface } from '../game/model/map/Surface'\nimport { Raider } from '../game/model/raider/Raider'\nimport { Cursors } from '../screen/Cursors'\nimport { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n        this.isLocal = true\n    }\n\n}\n\nexport class SelectionEvent extends LocalEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n    }\n\n}\n\nexport class SurfaceSelectedEvent extends SelectionEvent {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(EventKey.SELECTED_SURFACE)\n        this.surface = surface\n    }\n\n}\n\nexport class BuildingSelected extends SelectionEvent {\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(EventKey.SELECTED_BUILDING)\n        this.building = building\n    }\n\n}\n\nexport class RaiderSelected extends SelectionEvent {\n\n    raider: Raider\n\n    constructor(raider: Raider) {\n        super(EventKey.SELECTED_RAIDER)\n        this.raider = raider\n    }\n\n}\n\nexport class EntityDeselected extends LocalEvent {\n\n    constructor() {\n        super(EventKey.DESELECTED_ENTITY)\n    }\n\n}\n\nexport class SurfaceChanged extends LocalEvent {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(EventKey.SURFACE_CHANGED)\n        this.surface = surface\n    }\n\n}\n\nexport class AirLevelChanged extends LocalEvent {\n\n    constructor() {\n        super(EventKey.AIR_LEVEL_CHANGED)\n    }\n\n}\n\nexport class CancelBuildMode extends LocalEvent {\n\n    constructor() {\n        super(EventKey.CANCEL_BUILD_MODE)\n    }\n\n}\n\nexport class ChangeCursor extends LocalEvent {\n\n    cursor: Cursors\n\n    constructor(cursor: Cursors) {\n        super(EventKey.CHANGE_CURSOR)\n        this.cursor = cursor\n    }\n\n}\n","export enum EntityType {\n\n    // RAIDER\n    PILOT,\n\n    // BUILDING\n    TOOLSTATION,\n    TELEPORT_PAD,\n    DOCKS,\n    POWER_STATION,\n    BARRACKS,\n    UPGRADE,\n    GEODOME,\n    ORE_REFINERY,\n    GUNSTATION,\n    TELEPORT_BIG,\n\n    // MONSTER\n    BAT,\n    SMALL_SPIDER,\n\n    // MATERIAL\n    DYNAMITE,\n    ELECTRIC_FENCE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n\n}\n\nexport enum EntitySuperType {\n\n    RAIDER,\n    BUILDING,\n    MONSTER,\n    MATERIAL,\n\n}\n","import { Vector3 } from 'three'\nimport { SelectionEvent } from '../../event/LocalEvents'\n\nexport interface Selectable {\n\n    getSelectionType(): SelectionType;\n\n    select(): SelectionEvent;\n\n    deselect(): any;\n\n    getSelectionCenter(): Vector3;\n\n}\n\nexport enum SelectionType {\n\n    SURFACE,\n    RAIDER,\n    BUILDING,\n    VEHICLE,\n    GROUP,\n\n}\n","import { Vector3 } from 'three'\nimport { LevelRewardConfig } from '../../cfg/LevelsCfg'\nimport { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../../params'\nimport { SceneManager } from '../SceneManager'\nimport { WorldManager } from '../WorldManager'\nimport { BaseEntity } from './BaseEntity'\nimport { BuildingEntity } from './building/BuildingEntity'\nimport { BuildingSite } from './building/BuildingSite'\nimport { MaterialEntity } from './collect/MaterialEntity'\nimport { EntityType } from './EntityType'\nimport { PriorityList } from './job/PriorityList'\nimport { Surface } from './map/Surface'\nimport { Bat } from './monster/Bat'\nimport { SmallSpider } from './monster/SmallSpider'\nimport { Raider } from './raider/Raider'\nimport { RaiderTraining } from './raider/RaiderTraining'\nimport { Selectable, SelectionType } from './Selectable'\n\nexport enum GameResultState {\n\n    RUNNING,\n    COMPLETE,\n    FAILED,\n\n}\n\nexport class GameState {\n\n    static resultState: GameResultState = GameResultState.RUNNING\n    static levelFullName: string = ''\n    static numCrystal: number = 0\n    static numOre: number = 0\n    static numBrick: number = 0\n    static usedCrystals: number = 0\n    static neededCrystals: number = 0\n    static airLevel: number = 1 // air level in percent from 0 to 1.0\n    static selectedEntities: Selectable[] = []\n    static selectionType: SelectionType = null\n    static buildings: BuildingEntity[] = []\n    static buildingsUndiscovered: BuildingEntity[] = []\n    static raiders: Raider[] = []\n    static raidersUndiscovered: Raider[] = []\n    static requestedRaiders: number = 0\n    static materials: MaterialEntity[] = []\n    static materialsUndiscovered: MaterialEntity[] = []\n    static buildingSites: BuildingSite[] = []\n    static spiders: SmallSpider[] = []\n    static spidersBySurface: Map<Surface, SmallSpider[]> = new Map()\n    static bats: Bat[] = []\n    static totalCrystals: number = 0\n    static totalOres: number = 0\n    static totalDiggables: number = 0\n    static remainingDiggables: number = 0\n    static totalCaverns: number = 0\n    static discoveredCaverns: number = 0\n    static levelStartTime: number = 0\n    static levelStopTime: number = 0\n    static rewardConfig: LevelRewardConfig = null\n    static priorityList: PriorityList = new PriorityList()\n    static oxygenRate: number = 0\n    static buildModeSelection: (worldMgr: WorldManager, sceneMgr: SceneManager) => BuildingEntity = null\n\n    static reset() {\n        this.resultState = GameResultState.RUNNING\n        this.levelFullName = ''\n        this.numCrystal = 0\n        this.numOre = 0\n        this.numBrick = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.airLevel = 1\n        this.selectedEntities = []\n        this.selectionType = null\n        this.buildings = []\n        this.buildingsUndiscovered = []\n        this.raiders = []\n        this.raidersUndiscovered = []\n        this.requestedRaiders = 0\n        this.materials = []\n        this.materialsUndiscovered = []\n        this.buildingSites = []\n        this.spiders = []\n        this.spidersBySurface = new Map()\n        this.bats = []\n        this.totalCrystals = 0\n        this.totalOres = 0\n        this.totalDiggables = 0\n        this.remainingDiggables = 0\n        this.totalCaverns = 0\n        this.discoveredCaverns = 0\n        this.levelStartTime = 0\n        this.levelStopTime = 0\n        this.rewardConfig = null\n        this.priorityList = new PriorityList()\n        this.oxygenRate = 0\n        this.buildModeSelection = null\n    }\n\n    static getBuildingsByType(...buildingTypes: EntityType[]): BuildingEntity[] {\n        return this.buildings.filter(b => !b.inBeam && b.isPowered() && buildingTypes.some(bt => b.entityType === bt))\n    }\n\n    static getClosestBuildingByType(position: Vector3, ...buildingTypes: EntityType[]): BuildingEntity {\n        const targetBuildings = GameState.getBuildingsByType(...buildingTypes)\n        let closest = null, minDist = null\n        targetBuildings.forEach((b) => {\n            const bPos = b.getDropPosition()\n            const dist = position.distanceToSquared(bPos) // TODO better use pathfinding\n            if (closest === null || dist < minDist) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static hasOneBuildingOf(...buildings: EntityType[]): boolean {\n        return this.buildings.some((b) => buildings.some((type) => b.entityType === type) && b.isPowered())\n    }\n\n    static hasBuildingWithUpgrades(building: EntityType, upgrades: number = 0): boolean {\n        return this.buildings.some((b) => b.entityType === building && b.level >= upgrades && b.isPowered())\n    }\n\n    static getTrainingSites(position: Vector3, training: RaiderTraining): BuildingEntity[] {\n        if (training === RaiderTraining.DEMOLITION) {\n            return this.buildings.filter((b) => {\n                return b.stats.TrainDynamite && b.stats.TrainDynamite[b.level]\n            })\n        }\n        return []\n    }\n\n    static selectEntities(entities: Selectable[]) {\n        this.selectedEntities = this.selectedEntities.filter((previouslySelected) => {\n            const stillSelected = entities.indexOf(previouslySelected) !== -1\n            if (!stillSelected) previouslySelected.deselect()\n            return stillSelected\n        })\n        // add new entities that are selectable\n        const selectionEvents = []\n        entities.forEach((freshlySelected) => {\n            const selectionEvent = freshlySelected.select()\n            if (selectionEvent) {\n                this.selectedEntities.push(freshlySelected)\n                selectionEvents.push(selectionEvent)\n            }\n        })\n        // determine and set next selection type\n        const len = this.selectedEntities.length\n        if (len > 1) {\n            this.selectionType = SelectionType.GROUP\n        } else if (len === 1) {\n            this.selectionType = this.selectedEntities[0].getSelectionType()\n        } else if (this.selectionType !== null) {\n            this.selectionType = null\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        // AFTER updating selected entities and selection type, publish all events\n        selectionEvents.forEach((event) => EventBus.publishEvent(event))\n    }\n\n    static getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + GameState.buildings.count((b) => b.isPowered() && b.entityType === EntityType.BARRACKS) * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    static discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE\n        this.discoverEntities(this.raidersUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.buildingsUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.materialsUndiscovered, minX, maxX, minZ, maxZ)\n    }\n\n    static discoverEntities(undiscovered: BaseEntity[], minX, maxX, minZ, maxZ) {\n        const discovered = []\n        undiscovered.forEach((e) => {\n            const pos = e.getPosition()\n            if (pos.x >= minX && pos.x < maxX && pos.z >= minZ && pos.z < maxZ) {\n                e.onDiscover()\n                discovered.push(e)\n            }\n        })\n        discovered.forEach((r) => undiscovered.remove(r))\n    }\n\n    static get gameTimeSeconds() {\n        return Math.round((GameState.levelStopTime - GameState.levelStartTime) / 1000)\n    }\n\n    static get score() {\n        if (!GameState.rewardConfig) return 0\n        let quota = GameState.rewardConfig.quota\n        let importance = GameState.rewardConfig.importance\n        const scoreCrystals = GameState.numCrystal >= (quota.crystals || Infinity) ? importance.crystals : 0\n        const scoreTimer = GameState.gameTimeSeconds <= (quota.timer || 0) ? importance.timer : 0\n        const scoreCaverns = quota.caverns ? Math.min(1, GameState.discoveredCaverns / quota.caverns) * importance.caverns : 0\n        const scoreConstructions = quota.constructions ? Math.min(1, GameState.buildings.length / quota.constructions * importance.constructions) : 0\n        const scoreOxygen = GameState.airLevel * importance.oxygen\n        const scoreFigures = GameState.raiders.length >= MAX_RAIDER_BASE ? importance.figures : 0\n        return Math.round(scoreCrystals + scoreTimer + scoreCaverns + scoreConstructions + scoreOxygen + scoreFigures) / 100\n    }\n\n    static get selectedSurface(): Surface {\n        return this.selectionType === SelectionType.SURFACE && this.selectedEntities.length > 0 ? this.selectedEntities[0] as Surface : null\n    }\n\n    static get selectedBuilding(): BuildingEntity {\n        return this.selectionType === SelectionType.BUILDING && this.selectedEntities.length > 0 ? this.selectedEntities[0] as BuildingEntity : null\n    }\n\n    static get selectedRaiders(): Raider[] {\n        return (this.selectionType === SelectionType.RAIDER || this.selectionType === SelectionType.GROUP) && this.selectedEntities.length > 0 ? this.selectedEntities as Raider[] : []\n    }\n\n    static get totalOre(): number {\n        return this.numOre + this.numBrick * 5\n    }\n\n    static getNearbySpiders(entity: BaseEntity): SmallSpider[] {\n        const terrain = entity.sceneMgr.terrain\n        const currentSurface = terrain.getSurfaceFromWorld(entity.getPosition())\n        const nearbySpiders: SmallSpider[] = []\n        for (let x = currentSurface.x; x <= currentSurface.x + 1; x++) {\n            for (let y = currentSurface.y; y <= currentSurface.y + 1; y++) {\n                const surface = terrain.getSurface(x, y)\n                nearbySpiders.push(...(GameState.spidersBySurface.get(surface) || []))\n            }\n        }\n        return nearbySpiders\n    }\n\n}\n","import { LevelPrioritiesEntryConfig } from '../../../cfg/LevelsCfg'\nimport { PublicJob } from './Job'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport class PriorityList {\n\n    levelDefault: PriorityEntry[] = []\n    current: PriorityEntry[] = []\n\n    setList(priorities: LevelPrioritiesEntryConfig[]) {\n        this.levelDefault = priorities\n        this.reset()\n    }\n\n    toggle(index: number) {\n        this.current[index].enabled = !this.current[index].enabled\n    }\n\n    upOne(index: number) {\n        const tmp = this.current[index]\n        this.current[index] = this.current[index + 1]\n        this.current[index + 1] = tmp\n    }\n\n    reset() {\n        this.current = this.levelDefault.map(entry => new PriorityEntry(entry)) // use deep copy to avoid interference\n    }\n\n    pushToTop(index: number) {\n        const element = this.current[index]\n        for (let c = index; c > 0; c--) {\n            this.current[c] = this.current[c - 1]\n        }\n        this.current[0] = element\n    }\n\n    getPriority(job: PublicJob) {\n        let priority = 0\n        this.current.some((j, index) => {\n            if (j.key === job.getPriorityIdentifier()) {\n                priority = index\n                return true\n            }\n        })\n        return priority\n    }\n\n}\n\nexport class PriorityEntry {\n\n    key: PriorityIdentifier\n    enabled: boolean\n\n    constructor(levelPriorityEntry: LevelPrioritiesEntryConfig) {\n        this.key = levelPriorityEntry.key\n        this.enabled = levelPriorityEntry.enabled\n    }\n\n}\n","export class RaiderTraining {\n\n    static DRIVER = new RaiderTraining('driver')\n    static ENGINEER = new RaiderTraining('engineer')\n    static GEOLOGIST = new RaiderTraining('geologist')\n    static PILOT = new RaiderTraining('pilot')\n    static SAILOR = new RaiderTraining('sailor')\n    static DEMOLITION = new RaiderTraining('demolition')\n\n    name: string\n\n    constructor(name: string) {\n        this.name = name\n    }\n\n}\n","/**\n * creates a new context with the specified dimensions.\n * @param width: the desired width of the new context\n * @param height: the desired height of the new context\n * @returns RenderingContext the newly created canvas\n */\nexport function createContext(width, height) {\n    if (width < 1 || height < 1) {\n        console.error('Can\\'t create context with size ' + width + ' x ' + height);\n        return createDummyContext(64, 64);\n    }\n    const canvas = document.createElement('canvas');\n    canvas.setAttribute('width', width);\n    canvas.setAttribute('height', height);\n    const context = canvas.getContext('2d');\n    context.width = width;\n    context.height = height;\n    return context;\n}\n\n/**\n * This method is intended to increase stability by providing an (ugly) placeholder image in case the right one is missing\n * @param width: expected width of the original image\n * @param height: expected height of the original image\n */\nexport function createDummyContext(width, height) {\n    const result = createContext(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            if (x / 16 % 2 === y / 16 % 2) {\n                result.fillStyle = 'rgb(0,255,255)';\n            } else {\n                result.fillStyle = 'rgb(255,0,255)';\n            }\n            result.fillRect(x, y, 16, 16);\n        }\n    }\n    return result;\n}\n\nexport function createDummyImgData(width, height) {\n    const result = new ImageData(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            const e = x / 16 % 2 === y / 16 % 2;\n            for (let px = x; px < x + 16; px++) {\n                for (let py = y; py < y + 16; py++) {\n                    setPixel(result, px, py, e ? 0 : 255, e ? 255 : 0, 255);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport function setPixel(imgData, x, y, r, g, b, a = 255) {\n    const n = (y * imgData.width + x) * 4;\n    imgData.data[n] = r;\n    imgData.data[n + 1] = g;\n    imgData.data[n + 2] = b;\n    imgData.data[n + 3] = a;\n}\n\nexport function getPixel(imgData, x, y) {\n    const n = (y * imgData.width + x) * 4;\n    return {r: imgData.data[n], g: imgData.data[n + 1], b: imgData.data[n + 2], a: imgData.data[n + 3]};\n}\n","import { AnimClip } from './AnimClip'\n\nexport class AnimationEntityType {\n\n    carryNullName: string = ''\n    depositNullName: string = ''\n    toolNullName: string = ''\n    mediumPoly: {} = {}\n    highPoly: {} = {}\n    fPPoly: {} = {}\n    activities: Map<string, { file: string, transcoef: number, lwsfile: boolean, animation: AnimClip }> = new Map()\n\n}\n","const Stats = require('stats.js')\n\nexport class DebugHelper {\n\n    stats\n\n    constructor() {\n        this.stats = new Stats()\n        this.stats.setMode(0) // 0: fps, 1: ms\n\n        this.stats.domElement.style.position = 'absolute'\n        this.stats.domElement.style.left = '0px'\n        this.stats.domElement.style.top = '0px'\n\n        document.body.appendChild(this.stats.domElement)\n        this.hide()\n    }\n\n    show() {\n        this.stats.domElement.style.visibility = 'visible'\n    }\n\n    hide() {\n        this.stats.domElement.style.visibility = 'hidden'\n    }\n\n    renderStart() {\n        this.stats.begin()\n    }\n\n    renderDone() {\n        this.stats.end()\n    }\n\n}\n","import { Vector2 } from 'three'\n\nexport class BarrierLocation {\n\n    location: Vector2\n    heading: number\n\n    constructor(location: Vector2, surfaceCenter: Vector2) {\n        this.location = location\n        this.heading = location.clone().sub(surfaceCenter).angle()\n        if (location.y === surfaceCenter.y) {\n            this.heading -= Math.PI / 2\n        } else {\n            this.heading += Math.PI / 2\n        }\n    }\n\n}\n","export enum Cursors {\n\n    Pointer_Blank,\n    Pointer_Standard,\n    Pointer_Drill,\n    Pointer_CantDrill,\n    Pointer_Clear,\n    Pointer_Go,\n    Pointer_CantGo,\n    Pointer_Teleport,\n    Pointer_CantTeleport,\n    Pointer_Reinforce,\n    Pointer_CantReinforce,\n    Pointer_Selected,\n    Pointer_RadarPan,\n    Pointer_TrackObject,\n    Pointer_Zoom,\n    Pointer_CantZoom,\n    Pointer_Help,\n    Pointer_CantHelp,\n    Pointer_PutDown,\n    Pointer_GetIn,\n    Pointer_GetOut,\n    Pointer_Okay,\n    Pointer_NotOkay,\n    Pointer_CanBuild,\n    Pointer_CannotBuild,\n    Pointer_Dynamite,\n    Pointer_CantDynamite,\n    Pointer_PickUp,\n    Pointer_CantPickUp,\n    Pointer_PickUpOre,\n    Pointer_LegoManCantDig,\n    Pointer_VehicleCantDig,\n    Pointer_LegoManDig,\n    Pointer_VehicleDig,\n    Pointer_LegoManCantPickUp,\n    Pointer_VehicleCantPickUp,\n    Pointer_LegoManPickUp,\n    Pointer_VehiclePickUp,\n    Pointer_LegoManCantGo,\n    Pointer_VehicleCantGo,\n    Pointer_LegoManGo,\n    Pointer_VehicleGo,\n    Pointer_LegoManClear,\n    Pointer_VehicleClear,\n    Pointer_SurfaceType_Immovable,\n    Pointer_SurfaceType_Hard,\n    Pointer_SurfaceType_Medium,\n    Pointer_SurfaceType_Loose,\n    Pointer_SurfaceType_Soil,\n    Pointer_SurfaceType_OreSeam,\n    Pointer_SurfaceType_CrystalSeam,\n    Pointer_SurfaceType_RechargeSeam,\n\n}\n","import { Cursors } from '../../../screen/Cursors'\n\nexport class SurfaceType {\n\n    name: string // humand readable, maybe used as label lateron\n    shaping: boolean = false\n    matIndex: string = '00'\n    floor: boolean = false\n    selectable: boolean = false\n    drillable: boolean = false\n    drillableHard: boolean = false\n    explodable: boolean = false\n    reinforcable: boolean = false\n    cursor: Cursors = Cursors.Pointer_Standard\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options)\n    }\n\n    static readonly GROUND = new SurfaceType({name: 'ground', floor: true, selectable: true})\n    static readonly SOLID_ROCK = new SurfaceType({\n        name: 'solid rock',\n        shaping: true,\n        matIndex: '5',\n        cursor: Cursors.Pointer_SurfaceType_Immovable,\n    })\n    static readonly HARD_ROCK = new SurfaceType({\n        name: 'hard rock',\n        shaping: true,\n        matIndex: '4',\n        selectable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_Hard,\n    })\n    static readonly LOOSE_ROCK = new SurfaceType({\n        name: 'loose rock',\n        shaping: true,\n        matIndex: '3',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_Medium,\n    })\n    static readonly DIRT = new SurfaceType({\n        name: 'dirt',\n        shaping: true,\n        matIndex: '1',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_Loose,\n    })\n    static readonly SLUG_HOLE = new SurfaceType({name: 'slug hole', floor: true, matIndex: '30'})\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'})\n    static readonly ORE_SEAM = new SurfaceType({\n        name: 'ore seam',\n        matIndex: '40',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_OreSeam,\n    })\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45'})\n    static readonly CRYSTAL_SEAM = new SurfaceType({\n        name: 'energy crystal seam',\n        matIndex: '20',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_CrystalSeam,\n    })\n    static readonly RECHARGE_SEAM = new SurfaceType({\n        name: 'recharge seam',\n        matIndex: '67',\n        cursor: Cursors.Pointer_SurfaceType_RechargeSeam,\n    })\n    static readonly POWER_PATH = new SurfaceType({\n        name: 'power path all',\n        floor: true,\n        matIndex: '60',\n        selectable: true,\n    })\n    static readonly POWER_PATH_SITE = new SurfaceType({\n        name: 'power path site',\n        floor: true,\n        matIndex: '61',\n        selectable: true,\n    })\n    static readonly POWER_PATH_BUILDING = new SurfaceType({name: 'power path', floor: true, matIndex: '76'})\n    static readonly RUBBLE1 = new SurfaceType({\n        name: 'rubble 1',\n        floor: true,\n        matIndex: '13',\n        selectable: true,\n    })\n    static readonly RUBBLE2 = new SurfaceType({\n        name: 'rubble 2',\n        floor: true,\n        matIndex: '12',\n        selectable: true,\n    })\n    static readonly RUBBLE3 = new SurfaceType({\n        name: 'rubble 3',\n        floor: true,\n        matIndex: '11',\n        selectable: true,\n    })\n    static readonly RUBBLE4 = new SurfaceType({\n        name: 'rubble 4',\n        floor: true,\n        matIndex: '10',\n        selectable: true,\n    })\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING\n            case 1:\n                return SurfaceType.SOLID_ROCK\n            case 2:\n                return SurfaceType.HARD_ROCK\n            case 3:\n                return SurfaceType.LOOSE_ROCK\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT\n            case 6:\n                return SurfaceType.LAVA\n            case 8:\n                return SurfaceType.ORE_SEAM\n            case 9:\n                return SurfaceType.WATER\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM\n            case 11:\n                return SurfaceType.RECHARGE_SEAM\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE\n            case 100:\n                return SurfaceType.RUBBLE4\n            case 101:\n                return SurfaceType.RUBBLE3\n            case 102:\n                return SurfaceType.RUBBLE2\n            case 103:\n                return SurfaceType.RUBBLE1\n            default:\n                console.error('Unexpected surface type num: ' + typeNum)\n                return SurfaceType.SOLID_ROCK\n        }\n    }\n}\n","export enum WALL_TYPE {\n\n    CORNER = 1,\n    WALL = 2,\n    INVERTED_CORNER = 3,\n    WEIRD_CREVICE = 20,\n\n}\n","import { BufferGeometry, Vector2, Vector3 } from 'three'\nimport { BufferAttribute } from 'three/src/core/BufferAttribute'\nimport { WALL_TYPE } from './WallType'\n\nexport class SurfaceGeometry {\n\n    public static create(wallType: WALL_TYPE,\n                         topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3,\n                         topLeftHeight: number, topRightHeight: number, bottomRightHeight: number, bottomLeftHeight: number,\n    ) {\n        let uvOffset = 0\n\n        // not-rotated\n        // 1 ?\n        // ? 0\n        if (topLeftVertex.y && !bottomRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topRightVertex.y)))) {\n            uvOffset = 0\n        }\n\n        // 90 clock-wise\n        // ? 1\n        // 0 ?\n        if (topRightVertex.y && !bottomLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomRightVertex.y)))) {\n            uvOffset = 3\n        }\n\n        // 180 clock-wise\n        // 0 ?\n        // ? 1\n        if (bottomRightVertex.y && !topLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomLeftVertex.y)))) {\n            uvOffset = 2\n        }\n\n        // 270 clock-wise\n        // ? 0\n        // 1 ?\n        if (bottomLeftVertex.y && !topRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topLeftVertex.y)))) {\n            uvOffset = 1\n        }\n\n        if (wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) {\n            if (topLeftVertex.y && bottomRightVertex.y) {\n                uvOffset = 0\n            }\n            if (topRightVertex.y && bottomLeftVertex.y) {\n                uvOffset = 3\n            }\n        }\n\n        /*\n        //\t\t0---1                1         0---1\n        //\t\t|   |  becomes      /|   and   |  /\n        //\t\t|   |             /  |         |/\n        //\t\t3---2            3---2         3\n        //\n        //\t\tOR\n        //\n        //\t\t0---1            0             0---1\n        //\t\t|   |  becomes   |\\    \t and    \\  |\n        //\t\t|   |            |  \\             \\|\n        //\t\t3---2            3---2             2\n        //\n        //\t\tTriangles 0-1-3 and 0-3-2\n        //\t\tQuad 0-1-3-2\n        */\n\n        const uv = [\n            new Vector2(0, 1),\n            new Vector2(1, 1),\n            new Vector2(1, 0),\n            new Vector2(0, 0),\n        ]\n\n        const bufferVertices = []\n        const bufferNormals = []\n\n        function addFaceAndNormals(a, b, c) {\n            bufferVertices.push(a, b, c)\n            const normal = new Vector3().subVectors(c, b)\n            normal.cross(new Vector3().subVectors(a, b))\n            normal.normalize()\n            bufferNormals.push(normal, normal, normal)\n        }\n\n        const uvIndexes = []\n        if (topRightVertex.y !== bottomLeftVertex.y ||\n            ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) && !(topRightVertex.y && bottomLeftVertex.y))) {\n            uvIndexes.push(1, 3, 2)\n            uvIndexes.push(1, 0, 3)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topRightVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topRightVertex, topLeftVertex, bottomLeftVertex)\n        } else {\n            uvIndexes.push(0, 3, 2)\n            uvIndexes.push(0, 2, 1)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topLeftVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topLeftVertex, bottomRightVertex, topRightVertex)\n        }\n\n        const bufferVertexUvs = uvIndexes.map(i => uv[(i + uvOffset) % 4])\n\n        const bufferGeometry = new BufferGeometry()\n        bufferGeometry.setAttribute('position', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferVertices))\n        bufferGeometry.setAttribute('normal', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferNormals))\n        bufferGeometry.setAttribute('uv', new BufferAttribute(new Float32Array(12), 2).copyVector2sArray(bufferVertexUvs))\n        return bufferGeometry\n    }\n}\n","import { Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { TILESIZE } from '../../../params'\nimport { SurfaceGeometry } from '../map/SurfaceGeometry'\nimport { WALL_TYPE } from '../map/WallType'\n\nexport class BuildPlacementMarkerMesh extends Mesh {\n\n    static readonly geometry = SurfaceGeometry.create(WALL_TYPE.WALL,\n        new Vector3(0, 0, 0), new Vector3(TILESIZE, 0, TILESIZE),\n        new Vector3(TILESIZE, 0, 0), new Vector3(0, 0, TILESIZE),\n        1, 1, 1, 1,\n    )\n\n    standardColor: number\n\n    constructor(standardColor: number) {\n        super(BuildPlacementMarkerMesh.geometry, new MeshPhongMaterial({\n            shininess: 0,\n            transparent: true,\n            opacity: 0.4,\n            color: standardColor,\n        }))\n        this.standardColor = standardColor\n        this.visible = false\n    }\n\n    updateState(position: { x: number, y: number }, heading: number, primaryPosition: Vector3) {\n        this.visible = !!position\n        if (position) {\n            this.position.set(position.x, 0, position.y).multiplyScalar(TILESIZE)\n                .applyAxisAngle(new Vector3(0, 1, 0), -heading + Math.PI / 2)\n                .add(primaryPosition)\n        }\n    }\n\n    markAsValid(isValid: boolean) {\n        const color = isValid ? this.standardColor : 0x500000;\n        (this.material as MeshPhongMaterial).color.setHex(color)\n    }\n\n}\n","import { Group, Vector2 } from 'three'\nimport { TILESIZE } from '../../../params'\nimport { BarrierLocation } from '../collect/BarrierLocation'\nimport { GameState } from '../GameState'\nimport { Surface } from '../map/Surface'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { Terrain } from '../map/Terrain'\nimport { BuildPlacementMarkerMesh } from './BuildPlacementMarkerMesh'\n\nexport class BuildPlacementMarker {\n\n    static readonly buildingMarkerColor: number = 0x005000\n    static readonly pathMarkerColor: number = 0x505000\n    static readonly waterMarkerColor: number = 0x000050\n\n    group: Group = new Group()\n    markers: BuildPlacementMarkerMesh[] = []\n    buildingMarkerPrimary: BuildPlacementMarkerMesh = null\n    buildingMarkerSecondary: BuildPlacementMarkerMesh = null\n    powerPathMarkerPrimary: BuildPlacementMarkerMesh = null\n    powerPathMarkerSecondary: BuildPlacementMarkerMesh = null\n    waterPathMarker: BuildPlacementMarkerMesh = null\n    heading: number = 0\n    sdx: number = 0\n    sdz: number = 0\n    lastCheck: boolean = false\n    visibleSurfaces: Surface[] = []\n    primarySurface: Surface = null\n    secondarySurface: Surface = null\n    waterSurface: Surface = null\n\n    constructor() {\n        this.buildingMarkerPrimary = new BuildPlacementMarkerMesh(BuildPlacementMarker.buildingMarkerColor)\n        this.buildingMarkerSecondary = new BuildPlacementMarkerMesh(BuildPlacementMarker.buildingMarkerColor)\n        this.powerPathMarkerPrimary = new BuildPlacementMarkerMesh(BuildPlacementMarker.pathMarkerColor)\n        this.powerPathMarkerSecondary = new BuildPlacementMarkerMesh(BuildPlacementMarker.pathMarkerColor)\n        this.waterPathMarker = new BuildPlacementMarkerMesh(BuildPlacementMarker.waterMarkerColor)\n        this.addMarker(this.buildingMarkerPrimary)\n        this.addMarker(this.buildingMarkerSecondary)\n        this.addMarker(this.powerPathMarkerPrimary)\n        this.addMarker(this.powerPathMarkerSecondary)\n        this.addMarker(this.waterPathMarker)\n    }\n\n    private addMarker(marker: BuildPlacementMarkerMesh) {\n        this.group.add(marker)\n        this.markers.push(marker)\n    }\n\n    update(terrain: Terrain, worldPosition: Vector2) {\n        if (!worldPosition || !GameState.buildModeSelection) {\n            this.hideAllMarker()\n        } else {\n            const isValid = this.updateAllMarker(terrain, worldPosition)\n            this.markers.forEach((c) => c.markAsValid(isValid))\n        }\n    }\n\n    private updateAllMarker(terrain: Terrain, worldPosition: Vector2 = null): boolean {\n        // TODO use surface height offsets, refactor terrain map/data handling before\n        const building = GameState.buildModeSelection(terrain.worldMgr, terrain.sceneMgr)\n        this.buildingMarkerPrimary.visible = true\n        this.buildingMarkerPrimary.position.copy(terrain.sceneMgr.getFloorPosition(new Vector2(Math.floor(worldPosition.x / TILESIZE) * TILESIZE, Math.floor(worldPosition.y / TILESIZE) * TILESIZE)))\n        const sdxv = worldPosition.x - this.buildingMarkerPrimary.position.x - TILESIZE / 2\n        const sdzv = worldPosition.y - this.buildingMarkerPrimary.position.z - TILESIZE / 2\n        const sdx = Math.abs(sdxv) > Math.abs(sdzv) ? Math.sign(sdxv) : 0\n        const sdz = Math.abs(sdzv) > Math.abs(sdxv) ? Math.sign(sdzv) : 0\n        if (this.sdx === sdx && this.sdz === sdz) return this.lastCheck\n        this.sdx = sdx\n        this.sdz = sdz\n        this.heading = Math.atan2(sdz, sdx)\n        this.buildingMarkerSecondary.updateState(building.secondaryBuildingPart, this.heading, this.buildingMarkerPrimary.position)\n        this.powerPathMarkerPrimary.updateState(building.primaryPowerPath, this.heading, this.buildingMarkerPrimary.position)\n        this.powerPathMarkerSecondary.updateState(building.secondaryPowerPath, this.heading, this.buildingMarkerPrimary.position)\n        this.waterPathMarker.updateState(building.waterPathSurface, this.heading, this.buildingMarkerPrimary.position)\n        this.visibleSurfaces = [this.buildingMarkerPrimary, this.buildingMarkerSecondary, this.powerPathMarkerPrimary, this.powerPathMarkerSecondary]\n            .filter((c) => c.visible).map((c) => terrain.getSurfaceFromWorld(c.position))\n        this.primarySurface = this.visibleSurfaces[0]\n        this.secondarySurface = this.buildingMarkerSecondary.visible ? this.visibleSurfaces[1] : null\n        this.waterSurface = this.waterPathMarker.visible ? terrain.getSurfaceFromWorld(this.waterPathMarker.position) : null\n        this.lastCheck = this.visibleSurfaces.every((s) => s.surfaceType === SurfaceType.GROUND)\n            && ([this.powerPathMarkerPrimary, this.powerPathMarkerSecondary]\n                    .some((c) => c.visible && terrain.getSurfaceFromWorld(c.position).neighbors\n                        .some((n) => n.surfaceType === SurfaceType.POWER_PATH)) ||\n                !building.primaryPowerPath && this.primarySurface.neighbors.some((n) => n.surfaceType === SurfaceType.POWER_PATH))\n            && (!this.waterPathMarker.visible || this.waterSurface.surfaceType === SurfaceType.WATER)\n        return this.lastCheck\n    }\n\n    hideAllMarker() {\n        this.markers.forEach((m) => m.visible = false)\n        this.lastCheck = false\n    }\n\n    getBarrierLocations(): BarrierLocation[] {\n        const barrierLocations: BarrierLocation[] = []\n        const center = this.primarySurface.getCenterWorld2D()\n        const barrierOffset = TILESIZE * 9 / 20\n        if (this.secondarySurface) {\n            const secondary = this.secondarySurface.getCenterWorld2D()\n            const dx = Math.sign(secondary.x - center.x)\n            const dy = Math.sign(secondary.y - center.y)\n            if (dx !== 0) {\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x - dx * barrierOffset, center.y), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y - barrierOffset), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y + barrierOffset), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x + dx * barrierOffset, center.y), secondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x, secondary.y - barrierOffset), secondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x, secondary.y + barrierOffset), secondary))\n            } else {\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y - dy * barrierOffset), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x - barrierOffset, center.y), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x + barrierOffset, center.y), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x, secondary.y + dy * barrierOffset), secondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x - barrierOffset, center.y), secondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x + barrierOffset, center.y), secondary))\n            }\n        } else {\n            barrierLocations.push(new BarrierLocation(new Vector2(center.x - barrierOffset, center.y), center))\n            barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y - barrierOffset), center))\n            barrierLocations.push(new BarrierLocation(new Vector2(center.x + barrierOffset, center.y), center))\n            barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y + barrierOffset), center))\n        }\n        return barrierLocations\n    }\n\n}\n","// javascript-astar 0.4.1 (converted to typescript by Scarabol)\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n\nfunction pathTo(node) {\n    let curr = node\n    const path = []\n    while (curr.parent) {\n        path.unshift(curr)\n        curr = curr.parent\n    }\n    return path\n}\n\nfunction getHeap() {\n    return new BinaryHeap(function (node) {\n        return node.f\n    })\n}\n\nexport const astar = {\n\n    /**\n     * Perform an A* Search on a graph given a start and end node.\n     * @param {Graph} graph\n     * @param {GridNode} start\n     * @param {GridNode} end\n     * @param {Object} [options]\n     * @param {boolean} [options.closest] Specifies whether to return the\n     path to the closest node if the target is unreachable.\n     * @param {Function} [options.heuristic] Heuristic function (see\n     *          astar.heuristics).\n     */\n    search(graph: Graph, start: GridNode, end: GridNode, options = null): GridNode[] {\n        graph.cleanDirty()\n        options = options || {}\n        const heuristic = options.heuristic || astar.heuristics.manhattan\n        const closest = options.closest || false\n\n        const openHeap = getHeap()\n        let closestNode = start  // set the start node to be the closest if required\n\n        start.h = heuristic(start, end)\n        graph.markDirty(start)\n\n        openHeap.push(start)\n\n        while (openHeap.size() > 0) {\n\n            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n            const currentNode = openHeap.pop()\n\n            // End case -- result has been found, return the traced path.\n            if (currentNode === end) {\n                return pathTo(currentNode)\n            }\n\n            // Normal case -- move currentNode from open to closed, process each of its neighbors.\n            currentNode.closed = true\n\n            // Find all neighbors for the current node.\n            const neighbors = graph.neighbors(currentNode)\n\n            let i = 0\n            const il = neighbors.length\n            for (; i < il; ++i) {\n                const neighbor = neighbors[i]\n\n                if (neighbor.closed || neighbor.isWall()) {\n                    // Not a valid node to process, skip to next neighbor.\n                    continue\n                }\n\n                // The g score is the shortest distance from start to current node.\n                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n                const gScore = currentNode.g + neighbor.getCost(currentNode)\n                const beenVisited = neighbor.visited\n\n                if (!beenVisited || gScore < neighbor.g) {\n\n                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n                    neighbor.visited = true\n                    neighbor.parent = currentNode\n                    neighbor.h = neighbor.h || heuristic(neighbor, end)\n                    neighbor.g = gScore\n                    neighbor.f = neighbor.g + neighbor.h\n                    graph.markDirty(neighbor)\n                    if (closest) {\n                        // If the neighbour is closer than the current closestNode or if it's equally close but has\n                        // a cheaper path than the current closest node then it becomes the closest node\n                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n                            closestNode = neighbor\n                        }\n                    }\n\n                    if (!beenVisited) {\n                        // Pushing to heap will put it in proper place based on the 'f' value.\n                        openHeap.push(neighbor)\n                    } else {\n                        // Already seen the node, but since it has been rescored we need to reorder it in the heap\n                        openHeap.rescoreElement(neighbor)\n                    }\n                }\n            }\n        }\n\n        if (closest) {\n            return pathTo(closestNode)\n        }\n\n        // No result was found - empty array signifies failure to find path.\n        return []\n    },\n\n    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n    heuristics: {\n        manhattan(pos0, pos1) {\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return d1 + d2\n        },\n\n        diagonal(pos0, pos1) {\n            const D = 1\n            const D2 = Math.sqrt(2)\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2))\n        },\n    },\n\n    cleanNode(node) {\n        node.f = 0\n        node.g = 0\n        node.h = 0\n        node.visited = false\n        node.closed = false\n        node.parent = null\n    },\n}\n\nexport class Graph {\n\n    readonly nodes: GridNode[] = []\n    readonly diagonal: boolean\n    readonly grid: GridNode[][] = []\n    dirtyNodes: GridNode[] = []\n\n    /**\n     * A graph memory structure\n     * @param {Array} gridIn 2D array of input weights\n     * @param {Object} [options]\n     * @param {boolean} [options.diagonal] Specifies whether diagonal moves are allowed\n     */\n    constructor(gridIn: number[][], options = null) {\n        options = options || {}\n        this.diagonal = !!options.diagonal\n        for (let x = 0; x < gridIn.length; x++) {\n            this.grid[x] = []\n\n            let y = 0\n            const row = gridIn[x]\n            for (; y < row.length; y++) {\n                const node = new GridNode(x, y, row[y])\n                this.grid[x][y] = node\n                this.nodes.push(node)\n            }\n        }\n        this.init()\n    }\n\n    init() {\n        this.dirtyNodes = []\n        for (let i = 0; i < this.nodes.length; i++) {\n            astar.cleanNode(this.nodes[i])\n        }\n    }\n\n    cleanDirty() {\n        for (let i = 0; i < this.dirtyNodes.length; i++) {\n            astar.cleanNode(this.dirtyNodes[i])\n        }\n        this.dirtyNodes = []\n    }\n\n    markDirty(node) {\n        this.dirtyNodes.push(node)\n    }\n\n    neighbors(node: GridNode) {\n        const ret: GridNode[] = []\n        const x = node.x\n        const y = node.y\n        const grid = this.grid\n\n        // West\n        if (grid[x - 1] && grid[x - 1][y]) {\n            ret.push(grid[x - 1][y])\n        }\n\n        // East\n        if (grid[x + 1] && grid[x + 1][y]) {\n            ret.push(grid[x + 1][y])\n        }\n\n        // South\n        if (grid[x] && grid[x][y - 1]) {\n            ret.push(grid[x][y - 1])\n        }\n\n        // North\n        if (grid[x] && grid[x][y + 1]) {\n            ret.push(grid[x][y + 1])\n        }\n\n        if (this.diagonal) {\n            // Southwest\n            if (grid[x - 1] && grid[x - 1][y - 1]) {\n                ret.push(grid[x - 1][y - 1])\n            }\n\n            // Southeast\n            if (grid[x + 1] && grid[x + 1][y - 1]) {\n                ret.push(grid[x + 1][y - 1])\n            }\n\n            // Northwest\n            if (grid[x - 1] && grid[x - 1][y + 1]) {\n                ret.push(grid[x - 1][y + 1])\n            }\n\n            // Northeast\n            if (grid[x + 1] && grid[x + 1][y + 1]) {\n                ret.push(grid[x + 1][y + 1])\n            }\n        }\n\n        return ret\n    }\n\n    toString() {\n        const graphString = []\n        const nodes = this.grid\n        for (let x = 0; x < nodes.length; x++) {\n            const rowDebug = []\n            const row = nodes[x]\n            for (let y = 0; y < row.length; y++) {\n                rowDebug.push(row[y].weight)\n            }\n            graphString.push(rowDebug.join(' '))\n        }\n        return graphString.join('\\n')\n    }\n}\n\nclass GridNode {\n\n    x: number\n    y: number\n    weight: number\n    h: number\n    closed: boolean\n    visited: boolean\n    g: number\n    parent: GridNode\n    f: number\n\n    constructor(x, y, weight) {\n        this.x = x\n        this.y = y\n        this.weight = weight\n    }\n\n    toString() {\n        return '[' + this.x + ' ' + this.y + ']'\n    }\n\n    getCost(fromNeighbor: GridNode) {\n        // Take diagonal weight into consideration.\n        if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n            return this.weight * 1.41421\n        }\n        return this.weight\n    }\n\n    isWall() {\n        return this.weight === 0\n    }\n}\n\nclass BinaryHeap {\n\n    content = []\n    scoreFunction\n\n    constructor(scoreFunction) {\n        this.content = []\n        this.scoreFunction = scoreFunction\n    }\n\n    push(element) {\n        // Add the new element to the end of the array.\n        this.content.push(element)\n\n        // Allow it to sink down.\n        this.sinkDown(this.content.length - 1)\n    }\n\n    pop() {\n        // Store the first element so we can return it later.\n        const result = this.content[0]\n        // Get the element at the end of the array.\n        const end = this.content.pop()\n        // If there are any elements left, put the end element at the\n        // start, and let it bubble up.\n        if (this.content.length > 0) {\n            this.content[0] = end\n            this.bubbleUp(0)\n        }\n        return result\n    }\n\n    remove(node) {\n        const i = this.content.indexOf(node)\n\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        const end = this.content.pop()\n\n        if (i !== this.content.length - 1) {\n            this.content[i] = end\n\n            if (this.scoreFunction(end) < this.scoreFunction(node)) {\n                this.sinkDown(i)\n            } else {\n                this.bubbleUp(i)\n            }\n        }\n    }\n\n    size() {\n        return this.content.length\n    }\n\n    rescoreElement(node) {\n        this.sinkDown(this.content.indexOf(node))\n    }\n\n    sinkDown(n) {\n        // Fetch the element that has to be sunk.\n        const element = this.content[n]\n\n        // When at 0, an element can not sink any further.\n        while (n > 0) {\n\n            // Compute the parent element's index, and fetch it.\n            const parentN = ((n + 1) >> 1) - 1\n            const parent = this.content[parentN]\n            // Swap the elements if the parent is greater.\n            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n                this.content[parentN] = element\n                this.content[n] = parent\n                // Update 'n' to continue at the new position.\n                n = parentN\n            }\n            // Found a parent that is less, no need to sink any further.\n            else {\n                break\n            }\n        }\n    }\n\n    bubbleUp(n) {\n        // Look up the target element and its score.\n        const length = this.content.length\n        const element = this.content[n]\n        const elemScore = this.scoreFunction(element)\n\n        while (true) {\n            // Compute the indices of the child elements.\n            const child2N = (n + 1) << 1\n            const child1N = child2N - 1\n            // This is used to store the new position of the element, if any.\n            let swap = null\n            let child1Score\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                const child1 = this.content[child1N]\n                child1Score = this.scoreFunction(child1)\n\n                // If the score is less than our element's, we need to swap.\n                if (child1Score < elemScore) {\n                    swap = child1N\n                }\n            }\n\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                const child2 = this.content[child2N]\n                const child2Score = this.scoreFunction(child2)\n                if (child2Score < (swap === null ? elemScore : child1Score)) {\n                    swap = child2N\n                }\n            }\n\n            // If the element needs to be moved, swap it, and continue.\n            if (swap !== null) {\n                this.content[n] = this.content[swap]\n                this.content[swap] = element\n                n = swap\n            }\n            // Otherwise, we are done.\n            else {\n                break\n            }\n        }\n    }\n}\n","import { BaseEntity } from '../game/model/BaseEntity'\nimport { BuildingEntity } from '../game/model/building/BuildingEntity'\nimport { EntitySuperType, EntityType } from '../game/model/EntityType'\nimport { FulfillerEntity } from '../game/model/FulfillerEntity'\nimport { PublicJob } from '../game/model/job/Job'\nimport { RaiderTraining } from '../game/model/raider/RaiderTraining'\nimport { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class WorldEvent extends GameEvent {\n\n    constructor(entityKey: EventKey) {\n        super(entityKey)\n        this.isLocal = false\n    }\n\n}\n\nexport class JobEvent extends WorldEvent {\n\n    job: PublicJob\n\n    constructor(eventKey: EventKey, job: PublicJob) {\n        super(eventKey)\n        this.job = job\n    }\n\n}\n\nexport class JobCreateEvent extends JobEvent {\n\n    constructor(job: PublicJob) {\n        super(EventKey.JOB_CREATE, job)\n    }\n\n}\n\nexport class JobDeleteEvent extends JobEvent {\n\n    constructor(job: PublicJob) {\n        super(EventKey.JOB_DELETE, job)\n    }\n\n}\n\nexport class RaiderRequested extends WorldEvent {\n\n    constructor() {\n        super(EventKey.RAIDER_REQUESTED)\n    }\n\n}\n\nexport class MaterialAmountChanged extends WorldEvent {\n\n    entityType: EntityType\n\n    constructor(entityType: EntityType) {\n        super(EventKey.MATERIAL_AMOUNT_CHANGED)\n        this.entityType = entityType\n    }\n\n}\n\nexport class EntityAddedEvent extends WorldEvent {\n\n    superType: EntitySuperType\n    entity: BaseEntity\n\n    constructor(entity: BaseEntity) {\n        super(EventKey.ENTITY_ADDED)\n        this.superType = entity.superType\n        this.entity = entity\n    }\n\n}\n\nexport class EntityRemovedEvent extends WorldEvent {\n\n    superType: EntitySuperType\n    entity: BaseEntity\n\n    constructor(entity: BaseEntity) {\n        super(EventKey.ENTITY_REMOVED)\n        this.superType = entity.superType\n        this.entity = entity\n    }\n\n}\n\nexport class CavernDiscovered extends WorldEvent {\n\n    constructor() {\n        super(EventKey.CAVERN_DISCOVERED)\n    }\n\n}\n\nexport class OreFoundEvent extends WorldEvent {\n\n    constructor() {\n        super(EventKey.ORE_FOUND)\n    }\n\n}\n\nexport class BuildingUpgraded extends WorldEvent {\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(EventKey.BUILDING_UPGRADED)\n        this.building = building\n    }\n\n}\n\nexport class EntityTrained extends WorldEvent {\n\n    entity: FulfillerEntity\n    training: RaiderTraining\n\n    constructor(entity: FulfillerEntity, training: RaiderTraining) {\n        super(EventKey.RAIDER_TRAINED)\n        this.entity = entity\n        this.training = training\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { EventKey } from './EventKeyEnum'\nimport { WorldEvent } from './WorldEvents'\n\nexport class WorldLocationEvent extends WorldEvent {\n\n    location: Vector3\n\n    constructor(entityKey: EventKey, location: Vector3) {\n        super(entityKey)\n        this.location = location\n    }\n\n}\n\nexport class GenericDeathEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_DEATH, location)\n    }\n\n}\n\nexport class GenericMonsterEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_MONSTER, location)\n    }\n\n}\n\nexport class CrystalFoundEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_CRYSTAL_FOUND, location)\n    }\n\n}\n\nexport class UnderAttackEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_UNDER_ATTACK, location)\n    }\n\n}\n\nexport class LandslideEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_LANDSLIDE, location)\n    }\n\n}\n\nexport class PowerDrainEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_POWER_DRAIN, location)\n    }\n\n}\n\nexport class SlugEmergeEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_SLUG_EMERGE, location)\n    }\n\n}\n\nexport class RaiderDiscoveredEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_RAIDER_DISCOVERED, location)\n    }\n\n}\n","import { AnimSubObj } from './AnimSubObj'\n\nexport class AnimClip {\n\n    looping: boolean = false\n    transcoef: number = 1\n    firstFrame: number = null\n    lastFrame: number = null\n    framesPerSecond: number = null\n    bodies: AnimSubObj[] = []\n\n}\n","import { Euler, MathUtils, Object3D, Vector3 } from 'three'\nimport degToRad = MathUtils.degToRad\n\nexport class AnimSubObj {\n\n    name: string = ''\n    filename: string = ''\n    relPos: Vector3[] = []\n    relRot: Euler[] = []\n    relScale: Vector3[] = []\n    opacity: number[] = []\n    parentObjInd: number = null\n    model: Object3D = null\n\n    radVec(degX: number, degY: number, degZ: number) {\n        return new Euler(degToRad(degY), degToRad(degX), degToRad(degZ), 'YXZ')\n    }\n\n    setFrameAndFollowing(animationFrameIndex: number, lastFrame: number, infos: number[]) {\n        this.relPos[animationFrameIndex] = new Vector3(infos[0], infos[1], infos[2])\n        this.relRot[animationFrameIndex] = this.radVec(infos[3], infos[4], infos[5])\n        this.relScale[animationFrameIndex] = new Vector3(infos[6], infos[7], infos[8])\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.relPos[c] = this.relPos[animationFrameIndex]\n            this.relRot[c] = this.relRot[animationFrameIndex]\n            this.relScale[c] = this.relScale[animationFrameIndex]\n        }\n    }\n\n    setOpacityAndFollowing(animationFrameIndex: number, lastFrame: number, value: number) {\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.opacity[c] = value\n        }\n    }\n\n}\n","import { Mesh } from 'three'\nimport { clearIntervalSafe } from '../core/Util'\n\nexport class AnimatedMesh {\n\n    mesh: Mesh = null\n    textureSequences = []\n\n    constructor(mesh: Mesh, textureSequences: any[]) {\n        this.mesh = mesh\n        this.textureSequences = textureSequences\n    }\n\n    dispose() {\n        this.textureSequences.forEach((s) => clearIntervalSafe(s))\n        this.mesh.geometry.dispose()\n        Array.isArray(this.mesh.material) ? this.mesh.material.forEach(mat => mat.dispose()) : this.mesh.material?.dispose()\n    }\n\n}\n","// noinspection JSUnusedLocalSymbols,JSBitwiseOperatorUsage\n\n/**\n * @author Marcus-Bizal https://github.com/marcbizal\n * patched by Scarabol\n *\n * This loader loads LWOB files exported from LW6.\n *\n * Support\n *  -\n */\n\nimport { AdditiveBlending, BufferAttribute, BufferGeometry, Color, DoubleSide, Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { decodeFilepath, decodeString, getFilename } from '../core/Util'\nimport { SEQUENCE_TEXTURE_FRAMERATE } from '../params'\nimport { AnimatedMesh } from './AnimatedMesh'\nimport { ResourceManager } from './ResourceManager'\n\n// HEADER SPEC //\nconst LWO_MAGIC = 0x4C574F42 // \"LWOB\"\nconst OFF_MAGIC = 8\n\n/********************/\n/* TYPE SIZES START */\n/********************/\n\nconst ID4_SIZE = 4\nconst I1_SIZE = 1\nconst I2_SIZE = 2\nconst I4_SIZE = 4\nconst F4_SIZE = 4\n\nconst COL4_SIZE = 4\nconst VEC12_SIZE = 12\nconst IP2_SIZE = 2\nconst FP4_SIZE = 4\nconst DEG4_SIZE = 4\n\n/********************/\n/*  TYPE SIZES END  */\n/********************/\n\n/*********************/\n/* CHUNK TYPES START */\n/*********************/\n\nconst LWO_FORM = 0x464F524D\nconst LWO_PNTS = 0x504E5453\nconst LWO_SFRS = 0x53524653\nconst LWO_POLS = 0x504F4C53\nconst LWO_CRVS = 0x43525653\nconst LWO_PCHS = 0x50434853\nconst LWO_SURF = 0x53555246\n\nconst CHUNK_HEADER_SIZE = 8\nconst SUBCHUNK_HEADER_SIZE = 6\n\n/*********************/\n/*  CHUNK TYPES END  */\n/*********************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\nconst SURF_COLR = 0x434F4C52\nconst SURF_FLAG = 0x464C4147\n\n// Base Shading Values (Fixed Point)\nconst SURF_LUMI = 0x4C554D49\nconst SURF_DIFF = 0x44494646\nconst SURF_SPEC = 0x53504543\nconst SURF_REFL = 0x5245464C\nconst SURF_TRAN = 0x5452414E\n\n// Base Shading Values (Floating Point)\nconst SURF_VLUM = 0x564C554D\nconst SURF_VDIF = 0x56444946\nconst SURF_VSPC = 0x56535043\nconst SURF_VRFL = 0x5646524C\nconst SURF_VTRN = 0x5654524E\n\nconst SURF_GLOS = 0x474C4F53\nconst SURF_RFLT = 0x52464C54\nconst SURF_RIMG = 0x52494D47\nconst SURF_RIND = 0x52494E44\nconst SURF_EDGE = 0x45444745\nconst SURF_SMAN = 0x534D414E\n\n/**************************/\n/*  SURF DEFINITIONS END  */\n/**************************/\n\n/*****************************/\n/* TEXTURE DEFINITIONS START */\n/*****************************/\n\n// Start of Definition\nconst SURF_CTEX = 0x43544558\nconst SURF_DTEX = 0x44544558\nconst SURF_STEX = 0x53544558\nconst SURF_RTEX = 0x52544558\nconst SURF_TTEX = 0x54544558\nconst SURF_LTEX = 0x4C544558\nconst SURF_BTEX = 0x42544558\n\n// Flags\nconst SURF_TFLG = 0x54464C47\n\n// Location and Size\nconst SURF_TSIZ = 0x5453495A\nconst SURF_TCTR = 0x54435452\nconst SURF_TFAL = 0x5446414C\nconst SURF_TVEL = 0x5456454C\n\n// Color\nconst SURF_TCLR = 0x54434C52\n\n// Value\nconst SURF_TVAL = 0x54434C52\n\n// Bump Amplitude\nconst SURF_TAMP = 0x54414D50\n\n// Image Map\nconst SURF_TIMG = 0x54494D47\n\n// Image Alpha\nconst SURF_TALP = 0x54414C50\n\n// Image Wrap Options\nconst SURF_TWRP = 0x54575250\n\n// Antialiasing Strength\nconst SURF_TAAS = 0x54414153\n\n// Texture Opacity\nconst SURF_TOPC = 0x544F5043\n\n/*****************************/\n/*  TEXTURE DEFINITIONS END  */\n/*****************************/\n\n/*************************/\n/* FLAG DEFINITION START */\n/*************************/\n\nconst LUMINOUS_BIT = 1\nconst OUTLINE_BIT = 2\nconst SMOOTHING_BIT = 4\nconst COLORHIGHLIGHTS_BIT = 8\nconst COLORFILTER_BIT = 16\nconst OPAQUEEDGE_BIT = 32\nconst TRANSPARENTEDGE_BIT = 64\nconst SHARPTERMINATOR_BIT = 128\nconst DOUBLESIDED_BIT = 256\nconst ADDITIVE_BIT = 512\nconst SHADOWALPHA_BIT = 1024\n\n/*************************/\n/*  FLAG DEFINITION END  */\n/*************************/\n\n/*************************/\n/* TFLG DEFINITION START */\n/*************************/\n\nconst XAXIS_BIT = 1\nconst YAXIS_BIT = 2\nconst ZAXIS_BIT = 4\nconst WORLDCOORDS_BIT = 8\nconst NEGATIVEIMAGE_BIT = 16\nconst PIXELBLENDING_BIT = 32\nconst ANTIALIASING_BIT = 64\n\n/*************************/\n/*  TFLG DEFINITION END  */\n\n/*************************/\n\nfunction getVector3AtOffset(view, offset) {\n    let vector = new Vector3()\n    vector.x = view.getFloat32(offset)\n    vector.y = view.getFloat32(offset + F4_SIZE)\n    vector.z = view.getFloat32(offset + (F4_SIZE * 2))\n    return vector\n}\n\nfunction planarMapUVS(geometry, vertices, uvs, indices, materialIndex, size, center, flags) {\n    // Check to ensure that one of the flags is set, if not throw an error.\n    const mask = XAXIS_BIT | YAXIS_BIT | ZAXIS_BIT\n    if (flags & mask) {\n        for (let group of geometry.groups) {\n            if (group.materialIndex !== materialIndex) continue\n\n            for (let i = group.start; i < group.start + group.count; i++) {\n\n                let vertexIndex = indices[i] * 3\n                let x = vertices[vertexIndex] - center.x\n                let y = vertices[vertexIndex + 1] - center.y\n                let z = vertices[vertexIndex + 2] - center.z\n\n                let uvIndex = indices[i] * 2\n                let u = 0\n                let v = 0\n\n                if (flags & XAXIS_BIT) {\n                    u = z / size.z + 0.5\n                    v = y / size.y + 0.5\n                } else if (flags & YAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = z / size.z + 0.5\n                } else if (flags & ZAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = y / size.y + 0.5\n                }\n\n                uvs[uvIndex] = u\n                uvs[uvIndex + 1] = v\n            }\n        }\n    } else {\n        // console.warn(\"LWOLoader.planarMapUVS: No axis bit is set!\"); // XXX what is this about\n    }\n}\n\nexport class LWOLoader {\n\n    COUNTER_CLOCKWISE: false\n\n    path: string = ''\n    verbose: boolean = false\n    materials: MeshPhongMaterial[] = []\n    geometry: BufferGeometry = new BufferGeometry()\n    vertices: Float32Array = null\n    indices: Uint16Array = null\n    uvs: Float32Array = null\n    sequenceIntervals = []\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('LWO path: ' + this.path)\n    }\n\n    parsePoints(view, chunkOffset, chunkSize) {\n        if (chunkSize % VEC12_SIZE !== 0) {\n            console.error('LWOLoader.parse: F12 does not evenly divide into chunk size (' + chunkSize + '). Possible corruption.')\n            return\n        }\n\n        let numVertices = (chunkSize / F4_SIZE) / 3\n        this.vertices = new Float32Array(numVertices * 3)\n        this.uvs = new Float32Array(numVertices * 2)\n\n        for (let i = 0; i < numVertices; i++) {\n            let vertexIndex = i * 3\n            let vertexOffset = vertexIndex * F4_SIZE\n            this.vertices[vertexIndex] = view.getFloat32(chunkOffset + vertexOffset) \t\t\t\t// x\n            this.vertices[vertexIndex + 1] = view.getFloat32(chunkOffset + vertexOffset + F4_SIZE) \t// y\n            this.vertices[vertexIndex + 2] = view.getFloat32(chunkOffset + vertexOffset + (F4_SIZE * 2)) \t// z\n        }\n    }\n\n    parseSurfaceNames(buffer, chunkOffset, chunkSize) {\n        let textChunk = new TextDecoder().decode(new Uint8Array(buffer, chunkOffset, chunkSize))\n        let surfaceNames = textChunk.split('\\0').filter(function (s) {\n            return s !== ''\n        })\n\n        for (let i = 0; i < surfaceNames.length; i++) {\n            const new_material = new MeshPhongMaterial()\n            new_material.name = surfaceNames[i]\n            new_material.side = DoubleSide\n\n            this.materials.push(new_material)\n        }\n        if (this.verbose) console.log('LWO contains ' + this.materials.length + ' materials with following names: ' + surfaceNames)\n    }\n\n    parsePolygons(view, chunkOffset, chunkSize) {\n        // Gather some initial data so that we can get the proper size\n        let totalNumIndices = 0\n        let offset = 0\n        while (offset < chunkSize) {\n            const numIndices = view.getInt16(chunkOffset + offset)\n            const materialIndex = view.getInt16(chunkOffset + offset + 2 + (numIndices * 2))\n\n            this.geometry.addGroup(totalNumIndices, (numIndices - 2) * 3, materialIndex - 1)\n\n            totalNumIndices += (numIndices - 2) * 3\n            offset += 4 + (numIndices * 2)\n        }\n\n        offset = 0\n        let currentIndex = 0\n        this.indices = new Uint16Array(totalNumIndices)\n        while (offset < chunkSize) {\n            let numIndices = view.getInt16(chunkOffset + offset)\n\n            offset += 2\n\n            let faceIndices = new Int16Array(numIndices)\n            for (let i = 0; i <= numIndices; i++) {\n                faceIndices[i] = view.getInt16(chunkOffset + offset + (i * 2))\n            }\n\n            for (let i = 0; i < numIndices - 2; i++) {\n                if (this.COUNTER_CLOCKWISE) {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                } else {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                }\n            }\n\n            offset += 2 + (numIndices * 2)\n        }\n    }\n\n    parseSurface(view, buffer, chunkOffset, chunkSize) {\n        let offset = 0\n        while (view.getUint8(chunkOffset + offset) !== 0) offset++\n\n        let materialName = decodeString(new Uint8Array(buffer, chunkOffset, offset))\n        if (this.verbose) console.log('Parsing surface: ' + materialName)\n        let materialIndex = -1\n        let material: MeshPhongMaterial = null\n\n        let textureFlags = 0\n        let textureSize = new Vector3(0, 0, 0)\n        let textureCenter = new Vector3(0, 0, 0)\n        // let textureFalloff = new Vector3(0, 0, 0);\n        // let textureVelocity = new Vector3(0, 0, 0);\n\n        for (let i = 0; i < this.materials.length; i++) {\n            if (this.materials[i].name === materialName) {\n                materialIndex = i\n                material = this.materials[i]\n            }\n        }\n\n        if (!material) {\n            console.error('LWOLoader.parse: Surface in SURF chunk does not exist in SRFS')\n            return\n        }\n\n        material.shininess = 0\n\n        while (offset < chunkSize) {\n            const subchunkOffset = chunkOffset + offset\n            if (view.getUint8(subchunkOffset) === 0) {\n                offset++\n            } else {\n                const subchunkType = view.getInt32(subchunkOffset)\n                const subchunkSize = view.getInt16(subchunkOffset + ID4_SIZE)\n\n                if (this.verbose) console.log('Parsing subchunk ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n\n                switch (subchunkType) {\n                    case SURF_COLR:\n                        const colorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                        ]\n                        material.color = new Color().fromArray(colorArray)\n                        if (this.verbose) console.log('Material color (COLR): ' + colorArray.join(' '))\n                        break\n                    case SURF_FLAG:\n                        const flags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (FLAG): ' + flags.toString(2))\n                        // if (this.verbose && flags & LUMINOUS_BIT) console.warn('Flag is set but unhandled: luminous') // flag replaced with LUMI below\n                        if (this.verbose && flags & OUTLINE_BIT) console.warn('Flag is set but unhandled: outline')\n                        if (this.verbose && flags & SMOOTHING_BIT) console.warn('Flag is set but unhandled: smoothing')\n                        if (this.verbose && flags & COLORHIGHLIGHTS_BIT) console.warn('Flag is set but unhandled: colorHighlights')\n                        if (this.verbose && flags & COLORFILTER_BIT) console.warn('Flag is set but unhandled: colorFilter')\n                        if (this.verbose && flags & OPAQUEEDGE_BIT) console.warn('Flag is set but unhandled: opaqueEdge')\n                        if (this.verbose && flags & TRANSPARENTEDGE_BIT) console.warn('Flag is set but unhandled: transparentEdge')\n                        if (this.verbose && flags & SHARPTERMINATOR_BIT) console.warn('Flag is set but unhandled: sharpTerminator')\n                        if (flags & DOUBLESIDED_BIT) material.side = DoubleSide\n                        if (flags & ADDITIVE_BIT) {\n                            material.blending = AdditiveBlending\n                            material.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n                        }\n                        if (this.verbose && flags & SHADOWALPHA_BIT) console.warn('Flag is set but unhandled: shadowAlpha')\n                        break\n                    case SURF_EDGE:\n                        const edgeTransparencyThreshold = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Edge transparency threshold (0.0 to 1.0): ' + edgeTransparencyThreshold)\n                        break\n                    case SURF_LUMI:\n                        const luminosity = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.log('Luminosity (LUMI): ' + luminosity)\n                        material.emissiveIntensity = luminosity\n                        break\n                    case SURF_DIFF:\n                        const diffuse = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.log('Diffuse (DIFF): ' + diffuse)\n                        if (!diffuse) material.color = null\n                        break\n                    case SURF_SPEC:\n                        const specular = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        // material.specular = material.color.multiplyScalar(specular);\n                        if (this.verbose) console.warn('Specular (SPEC): ' + specular)\n                        break\n                    case SURF_REFL:\n                        let reflection = 0\n                        if (reflection === SURF_VRFL) {\n                            reflection = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            reflection = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        }\n                        material.reflectivity = reflection\n                        if (this.verbose) console.log('Reflectivity (REFL): ' + material.reflectivity)\n                        break\n                    case SURF_TRAN:\n                    case SURF_VTRN:\n                        let transparency = 0\n                        if (subchunkType === SURF_VTRN) {\n                            transparency = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            transparency = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        }\n                        material.opacity = 1 - transparency\n                        if (this.verbose) console.log('Opacity (TRAN/VTRN): ' + material.opacity)\n                        material.transparent = material.transparent || material.opacity < 1\n                        break\n                    case SURF_VLUM:\n                        const vLuminosity = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Luminosity (VLUM): ' + vLuminosity)\n                        material.emissiveIntensity = vLuminosity\n                        break\n                    case SURF_VDIF:\n                        let vDiffuse = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Diffuse (VDIF): ' + vDiffuse)\n                        // material.vertexColors = !!vDiffuse // XXX push vertex colors first\n                        break\n                    case SURF_VSPC:\n                        let vSpecular = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        // material.specular = material.color.multiplyScalar(vSpecular);\n                        if (this.verbose) console.warn('Specular (VSPC): ' + vSpecular)\n                        break\n                    case SURF_TFLG:\n                        textureFlags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (TFLG): ' + textureFlags.toString(2))\n                        if (this.verbose && textureFlags & XAXIS_BIT) console.warn('Flag is set but unhandled: X Axis')\n                        if (this.verbose && textureFlags & YAXIS_BIT) console.warn('Flag is set but unhandled: Y Axis')\n                        if (this.verbose && textureFlags & ZAXIS_BIT) console.warn('Flag is set but unhandled: Z Axis')\n                        if (this.verbose && textureFlags & WORLDCOORDS_BIT) console.warn('Flag is set but unhandled: World Coords')\n                        if (this.verbose && textureFlags & NEGATIVEIMAGE_BIT) console.warn('Flag is set but unhandled: Negative Image')\n                        if (this.verbose && textureFlags & PIXELBLENDING_BIT) console.warn('Flag is set but unhandled: Pixel Blending')\n                        if (this.verbose && textureFlags & ANTIALIASING_BIT) console.log('Flag is set: Antialiasing') // turned on by default\n                        break\n                    case SURF_TSIZ:\n                        textureSize = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Texture size (TSIZ): ' + textureSize.toArray().join(' '))\n                        break\n                    case SURF_TCTR:\n                        textureCenter = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Texture center (TCTR): ' + textureCenter.toArray().join(' '))\n                        break\n                    case SURF_CTEX:\n                    case SURF_DTEX:\n                    case SURF_STEX:\n                    case SURF_RTEX:\n                    case SURF_TTEX:\n                    case SURF_BTEX:\n                        const textureTypeName = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture typename: ' + textureTypeName)\n                        // XXX handle different texture types\n                        break\n                    case SURF_TVAL: // always 0 in the game\n                        const textureValue = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.warn('Texture value (TVAL): ' + textureValue)\n                        break\n                    case SURF_TCLR:\n                        const textureColorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        // const textureColor = new Color().fromArray(textureColorArray);\n                        // seems to be 0 0 0 anyway...\n                        if (this.verbose) console.log('Texture color (TCLR): ' + textureColorArray.join(' '))\n                        break\n                    case SURF_TIMG:\n                        let textureFilepath = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture filepath (TIMG): ' + textureFilepath)\n                        if (textureFilepath === '(none)') break\n                        let sequenceTexture = false\n                        if (textureFilepath.endsWith(' (sequence)')) {\n                            sequenceTexture = true\n                            textureFilepath = textureFilepath.substring(0, textureFilepath.length - ' (sequence)'.length)\n                        }\n                        let filename = getFilename(textureFilepath)\n                        material.transparent = material.transparent || !!filename.match(/^a\\d+.+.bmp/i)\n                        const textureFilename = this.path + filename\n                        if (sequenceTexture) {\n                            const match = textureFilename.match(/(.+\\D)0+(\\d+)\\..+/)\n                            const textures = ResourceManager.filterTextureSequenceNames(match[1])\n                                .map((name) => ResourceManager.getTexture(name))\n                            if (textures) {\n                                let seqNum = 0\n                                material.color = null // no need for color, when color map (texture) in use\n                                this.sequenceIntervals.push(setInterval(() => {\n                                    material.map = textures[seqNum++]\n                                    if (seqNum >= textures.length) seqNum = 0\n                                }, 1000 / SEQUENCE_TEXTURE_FRAMERATE))\n                            }\n                        }\n                        const lTextureName = textureFilename.toLowerCase()\n                        if (lTextureName === 'miscanims/barrier/a_side.bmp' // workaround (TODO actually never add unknown textures?)\n                            || lTextureName === 'miscanims/barrier/a_top.bmp'\n                            || lTextureName === 'world/shared/teofoilreflections.jpg'\n                            || lTextureName === 'buildings/barracks/wingbase3.bmp') {\n                            break\n                        }\n                        material.map = ResourceManager.getTexture(textureFilename)\n                        material.color = null // no need for color, when color map (texture) in use\n                        break\n                    default: // TODO implement all LWO features\n                        if (this.verbose) console.warn('Found unrecognised SURF subchunk type ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n                        break\n                }\n\n                offset += SUBCHUNK_HEADER_SIZE + subchunkSize\n            }\n        }\n\n        planarMapUVS(this.geometry, this.vertices, this.uvs, this.indices, materialIndex, textureSize, textureCenter, textureFlags)\n    }\n\n    parse(buffer: ArrayBuffer): AnimatedMesh {\n        const view = new DataView(buffer)\n\n        if (view.getUint32(0) !== LWO_FORM) {\n            console.error('LWOLoader.parse: Cannot find header.')\n            return\n        }\n\n        const fileSize = view.getUint32(ID4_SIZE)\n        if (fileSize + CHUNK_HEADER_SIZE !== view.byteLength) {\n            console.warn('LWOLoader.parse: Discrepancy between size in header (' + (fileSize + CHUNK_HEADER_SIZE) + ' bytes) and actual size (' + view.byteLength + ' bytes).')\n        }\n\n        let magicOffset = ID4_SIZE + I4_SIZE\n        if (view.getUint32(magicOffset) !== LWO_MAGIC) {\n            const magic = decodeString(new Uint8Array(buffer, magicOffset, ID4_SIZE))\n            console.error('LWOLoader.parse: Invalid magic ID (' + magic + ') in LWO header.')\n            return\n        }\n\n        let cursor = 12\n        while (cursor < view.byteLength) {\n            // Skip null byte padding\n            if (view.getUint8(cursor) === 0) {\n                cursor++\n            } else {\n                const chunkType = view.getInt32(cursor)\n                const chunkSize = view.getInt32(cursor + ID4_SIZE)\n\n                cursor += CHUNK_HEADER_SIZE\n\n                switch (chunkType) {\n                    case LWO_PNTS:\n                        this.parsePoints(view, cursor, chunkSize)\n                        break\n                    case LWO_SFRS:\n                        this.parseSurfaceNames(buffer, cursor, chunkSize)\n                        break\n                    case LWO_POLS:\n                        this.parsePolygons(view, cursor, chunkSize)\n                        break\n                    case LWO_SURF:\n                        this.parseSurface(view, buffer, cursor, chunkSize)\n                        break\n                    default:\n                        console.warn('Found unrecognised chunk type ' + decodeString(new Uint8Array(buffer, cursor - CHUNK_HEADER_SIZE, ID4_SIZE)) + ' at ' + cursor)\n                }\n\n                cursor += chunkSize\n            }\n\n        }\n\n        this.geometry.setAttribute('position', new BufferAttribute(this.vertices, 3))\n        this.geometry.setAttribute('uv', new BufferAttribute(this.uvs, 2))\n        this.geometry.setIndex(new BufferAttribute(this.indices, 1))\n        this.geometry.computeVertexNormals()\n\n        return new AnimatedMesh(new Mesh(this.geometry, this.materials), this.sequenceIntervals)\n    }\n}\n","/**\n * @author Scarabol https://github.com/scarabol\n *\n * This loader loads LWSC files exported from LW\n *\n * File format description: http://www.martinreddy.net/gfx/3d/LWSC.txt\n */\n\nimport { Group } from 'three'\nimport { getFilename } from '../core/Util'\nimport { AnimClip } from '../game/model/anim/AnimClip'\nimport { AnimSubObj } from '../game/model/anim/AnimSubObj'\nimport { SceneManager } from '../game/SceneManager'\nimport { LWOLoader } from './LWOLoader'\nimport { ResourceManager } from './ResourceManager'\n\nexport class LWSCLoader {\n\n    path: string = ''\n    verbose: boolean = false\n    animationClip: AnimClip = new AnimClip()\n    lines: string[] = []\n    lineIndex: number = 0\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('Using verbose mode')\n    }\n\n    parse(content): AnimClip {\n        this.lines = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map(l => l.trim())\n\n        if (this.lines[0] !== 'LWSC') {\n            throw 'Invalid start of file! Expected \\'LWSC\\' in first line'\n        }\n\n        const sceneFileVersion = parseInt(this.lines[1], 10)\n        if (sceneFileVersion !== 1) {\n            console.warn('Unexpected scene file version: ' + sceneFileVersion)\n        }\n\n        for (this.lineIndex = 2; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) continue // empty line: object separator\n            const key = line.split(' ')[0]\n            if (key === 'FirstFrame') {\n                this.parseFrameBlock()\n            } else if (key === 'AddNullObject' || key === 'LoadObject') {\n                this.parseObjectBlock()\n                if (this.verbose) console.log(this.animationClip.bodies[this.animationClip.bodies.length - 1])\n            } else if (line.startsWith('PreviewFirstFrame ') || line.startsWith('PreviewLastFrame ') || line.startsWith('PreviewFrameStep ')) {\n                // only used in editor\n            } else {\n                // console.warn('Unexpected line: ' + line); // TODO analyze remaining entries\n            }\n        }\n\n        if (this.verbose) console.log(this.animationClip)\n        return this.animationClip\n    }\n\n    parseLine(line: string): string[] {\n        return line.split(' ').filter((l: string) => l !== '')\n    }\n\n    parseFrameBlock() {\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            const line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'FirstFrame') {\n                this.animationClip.firstFrame = parseInt(value)\n            } else if (key === 'LastFrame') {\n                this.animationClip.lastFrame = parseInt(value)\n            } else if (key === 'FrameStep') {\n                const frameStep = parseInt(value)\n                if (frameStep !== 1) console.error('Animation frameStep has unexpected value: ' + frameStep)\n            } else if (key === 'FramesPerSecond') {\n                this.animationClip.framesPerSecond = parseInt(value)\n            } else if (key === 'PreviewFirstFrame' || key === 'PreviewLastFrame' || key === 'PreviewFrameStep') {\n                // only used in editor\n            } else {\n                console.warn('Unexpected key in frame block')\n            }\n        }\n        console.error('Parsing block reached content end')\n    }\n\n    parseObjectBlock(): AnimSubObj {\n        const subObj = new AnimSubObj()\n        this.animationClip.bodies.push(subObj)\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'AddNullObject' || key === 'LoadObject') {\n                if (key === 'LoadObject') {\n                    const filename = getFilename(value)\n                    subObj.name = filename.slice(0, filename.length - '.lwo'.length)\n                    subObj.filename = this.path + filename\n                    const lwoBuffer = ResourceManager.getResource(subObj.filename)\n                    subObj.model = SceneManager.registerMesh(new LWOLoader(this.path).parse(lwoBuffer))\n                } else if (key === 'AddNullObject') {\n                    subObj.name = value\n                    subObj.model = new Group()\n                } else {\n                    throw 'Unexpected line: ' + line\n                }\n            } else if (key === 'ObjectMotion') {\n                let line = this.lines[++this.lineIndex]\n                const lenInfos = parseInt(line)\n                line = this.lines[++this.lineIndex]\n                const lenFrames = parseInt(line)\n                this.lineIndex++\n                for (let c = 0; c < lenFrames; c++) {\n                    let line = this.lines[this.lineIndex + c * 2]\n                    if (line.startsWith('EndBehavior')) break\n                    const infos = line.split(' ').map(Number)\n                    if (infos.length !== lenInfos) console.warn('Number of infos (' + infos.length + ') does not match if specified count (' + lenInfos + ')')\n                    line = this.lines[this.lineIndex + c * 2 + 1]\n                    const animationFrameIndex = parseInt(line.split(' ')[0]) // other entries in line should be zeros\n                    subObj.setFrameAndFollowing(animationFrameIndex, this.animationClip.lastFrame, infos)\n                }\n                this.lineIndex += lenFrames * 2\n            } else if (key === 'ParentObject') {\n                subObj.parentObjInd = Number(value) - 1 // index is 1 based\n                if (this.verbose) console.log('parent obj ind is: ' + subObj.parentObjInd)\n            } else if (key === 'ShowObject' || key === 'LockedChannels') {\n                // only used in editor\n            } else if (key === 'ShadowOptions') { // TODO implement shadow options (bitwise)\n                // 0 - Self Shadow\n                // 1 - Cast Shadow\n                // 2 - Receive Shadow\n            } else if (key === 'ObjDissolve') {\n                if (value == '(envelope)') {\n                    let line = this.lines[++this.lineIndex]\n                    const numOfInformationChannels = parseInt(line)\n                    if (numOfInformationChannels !== 1) console.error('Number of information channels for opacity is not 1, but: ' + numOfInformationChannels)\n                    line = this.lines[++this.lineIndex]\n                    const numOfKeyframes = parseInt(line)\n                    this.lineIndex++\n                    for (let c = 0; c < numOfKeyframes; c++) {\n                        let line = this.lines[this.lineIndex + c * 2]\n                        if (line.startsWith('EndBehavior')) break\n                        const opacity = 1 - Number(line)\n                        line = this.lines[this.lineIndex + c * 2 + 1]\n                        const frameNum = Number(line.split(' ')[0])\n                        subObj.setOpacityAndFollowing(frameNum, this.animationClip.lastFrame, opacity)\n                    }\n                    this.lineIndex += numOfKeyframes * 2\n                } else {\n                    const opacity = 1 - Number(value)\n                    subObj.setOpacityAndFollowing(0, this.animationClip.lastFrame, opacity)\n                }\n            } else {\n                // console.warn('Unhandled line in object block: ' + line + '; key: ' + key + '; value: ' + value) // TODO analyze unhandled lines\n            }\n        }\n        console.error('Parsing block reached content end')\n        return subObj\n    }\n\n}\n","export enum PriorityIdentifier {\n\n    aiPriorityTrain,\n    aiPriorityGetIn,\n    aiPriorityCrystal,\n    aiPriorityOre,\n    aiPriorityRepair,\n    aiPriorityClearing,\n    aiPriorityDestruction,\n    aiPriorityConstruction,\n    aiPriorityReinforce,\n    aiPriorityRecharge,\n\n}\n","export enum JobState {\n\n    INCOMPLETE,\n    COMPLETE,\n    CANCELED,\n\n}\n","export enum JobType {\n\n    DRILL,\n    REINFORCE,\n    CLEAR_RUBBLE,\n    CARRY,\n    MOVE,\n    TRAIN,\n    GET_TOOL,\n    EAT,\n    COMPLETE_POWER_PATH,\n\n}\n","import { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { Graph } from './model/map/astar'\nimport { Surface } from './model/map/Surface'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { Terrain } from './model/map/Terrain'\nimport { SceneManager } from './SceneManager'\nimport { WorldManager } from './WorldManager'\n\nexport class TerrainLoader {\n\n    static loadTerrain(levelConf: LevelEntryCfg, worldMgr: WorldManager, sceneMgr: SceneManager): Terrain {\n        const tileSize = levelConf.blockSize\n        if (tileSize !== TILESIZE) console.error('Unexpected tile size in level configuration: ' + tileSize)\n        const terrain = new Terrain(worldMgr, sceneMgr)\n\n        const themeName = levelConf.textureSet[1]\n        terrain.textureSet = ResourceManager.cfg('Textures', themeName)\n        // console.log(terrain.textureSet);\n\n        const terrainMap = ResourceManager.getResource(levelConf.terrainMap)\n        terrain.width = terrainMap.width\n        terrain.height = terrainMap.height\n        const pathMap = ResourceManager.getResource(levelConf.pathMap)?.level\n        const surfaceMap = ResourceManager.getResource(levelConf.surfaceMap)?.level\n        const predugMap = ResourceManager.getResource(levelConf.predugMap)?.level\n        const cryOreMap = ResourceManager.getResource(levelConf.cryOreMap)?.level\n        const fallinMap = ResourceManager.getResource(levelConf.fallinMap)?.level\n        const erodeMap = ResourceManager.getResource(levelConf.erodeMap)?.level\n\n        // maps parsed from WAD are row-wise saved, which means y (row) comes first and x (column) second\n        for (let r = 0; r < terrainMap.level.length; r++) {\n            for (let c = 0; c < (terrainMap.level)[r].length; c++) {\n                (terrain.surfaces)[c] = (terrain.surfaces)[c] || []\n                const surfaceTypeNum = (terrainMap.level)[r][c]\n                let surfaceType = SurfaceType.getByNum(surfaceTypeNum)\n                const predugLevel = predugMap[r][c]\n                if (predugLevel === PredugMap.CAVERN_EXPOSED) {\n                    if (surfaceType === SurfaceType.GROUND || surfaceType === SurfaceType.DIRT) {\n                        surfaceType = SurfaceType.GROUND\n                    } else if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) {\n                        console.warn('Unexpected cavern surface type: ' + surfaceType.name)\n                    }\n                } else if (predugLevel === PredugMap.SLUG_HOLE_EXPOSED || predugLevel === PredugMap.SLUG_HOLE_HIDDEN) {\n                    surfaceType = SurfaceType.SLUG_HOLE\n                } else if (predugLevel !== PredugMap.WALL && predugLevel !== PredugMap.CAVERN_HIDDEN) {\n                    console.warn('Unexpected predug level: ' + predugLevel)\n                }\n                // give the path map the highest priority, if it exists\n                const pathMapLevel = pathMap && surfaceType.floor ? pathMap[r][c] : PathMap.NONE\n                if (pathMapLevel === PathMap.RUBBLE) {\n                    surfaceType = SurfaceType.RUBBLE4\n                } else if (pathMapLevel === PathMap.POWER_PATH) {\n                    surfaceType = SurfaceType.POWER_PATH\n                } else if (pathMapLevel !== PathMap.NONE) {\n                    console.warn('Unexpected path map level: ' + pathMapLevel)\n                }\n\n                const surface = new Surface(terrain, surfaceType, c, r, surfaceMap[r][c])\n                if (cryOreMap) {\n                    const currentCryOre = cryOreMap[r][c]\n                    if (currentCryOre % 2 === 1) {\n                        surface.containedCrystals = (currentCryOre + 1) / 2\n                    } else {\n                        surface.containedOres = currentCryOre / 2\n                    }\n                }\n\n                (terrain.surfaces)[c].push(surface)\n            }\n        }\n\n        // exlpore predug surfaces\n        terrain.forEachSurface((s) => {\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_EXPOSED || predugMap[s.y][s.x] === PredugMap.SLUG_HOLE_EXPOSED) { // map are rows (y) first, columns (x) second\n                for (let x = s.x - 1; x <= s.x + 1; x++) {\n                    for (let y = s.y - 1; y <= s.y + 1; y++) {\n                        terrain.getSurfaceOrNull(x, y).discovered = true\n                    }\n                }\n            }\n        })\n\n        // create hidden caverns\n        terrain.forEachSurface((s) => {\n            const surface = terrain.getSurfaceOrNull(s.x, s.y)\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_HIDDEN && !surface.discovered) {\n                surface.surfaceType = SurfaceType.GROUND\n            }\n        })\n\n        const weights: number[][] = []\n        for (let x = 0; x < terrain.width; x++) {\n            const col: number[] = []\n            for (let y = 0; y < terrain.height; y++) {\n                const w = terrain.getSurfaceOrNull(x, y).getGraphWalkWeight()\n                col.push(w, w, w)\n            }\n            weights.push(col, col, col)\n        }\n        terrain.graphWalk = new Graph(weights, {diagonal: true})\n\n        // crumble unsupported walls\n        terrain.forEachSurface((s) => {\n            if (!s.isSupported()) s.collapse()\n        })\n\n        terrain.updateSurfaceMeshes(true)\n\n        if (fallinMap) {\n            for (let x = 0; x < terrain.width; x++) {\n                for (let y = 0; y < terrain.height; y++) {\n                    terrain.getSurface(x, y).setFallinLevel(fallinMap[y][x]) // rows (y) before columns (x) used in maps\n                }\n            }\n        }\n\n        if (erodeMap) { // TODO implement lava erosion\n            console.warn('Lucky you! Lava erosion not yet implemented')\n        }\n\n        return terrain\n    }\n\n}\n\nenum PathMap {\n\n    NONE = 0,\n    RUBBLE = 1,\n    POWER_PATH = 2,\n\n}\n\nenum PredugMap {\n\n    WALL = 0,\n    CAVERN_EXPOSED = 1,\n    CAVERN_HIDDEN = 2,\n    SLUG_HOLE_EXPOSED = 3,\n    SLUG_HOLE_HIDDEN = 4,\n}\n","export enum WorkerMessageType {\n\n    MSG,\n    CFG,\n    CACHE_MISS,\n    SFX,\n    ASSET,\n    DONE,\n\n}\n","export enum MoveState {\n\n    MOVED,\n    TARGET_REACHED,\n    TARGET_UNREACHABLE,\n\n}\n","export class BaseActivity {\n\n    activityKey: string\n\n    constructor(activityKey: string) {\n        this.activityKey = activityKey\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class AnimEntityActivity extends BaseActivity {\n\n    static Stand = new AnimEntityActivity('Activity_Stand')\n\n}\n","import { Box3, CanvasTexture, Matrix4, Mesh, MeshBasicMaterial, MeshPhongMaterial, Object3D, Sphere, SphereGeometry, Sprite, SpriteMaterial, Vector3 } from 'three'\nimport { createContext } from '../../../core/ImageHelper'\nimport { clearTimeoutSafe, iGet } from '../../../core/Util'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { BaseActivity } from '../activities/BaseActivity'\nimport { BaseEntity } from '../BaseEntity'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { AnimationEntityType } from './AnimationEntityType'\nimport { AnimClip } from './AnimClip'\nimport { AnimSubObj } from './AnimSubObj'\n\nexport abstract class AnimEntity extends BaseEntity {\n\n    animationEntityType: AnimationEntityType = null\n    poly: Object3D[] = []\n    animation: AnimClip = null\n    animationTimeout: NodeJS.Timeout = null\n    selectionFrame: Sprite = null\n    pickSphere: Mesh = null\n    carryJoint: Object3D = null\n    depositJoint: Object3D = null\n    getToolJoint: Object3D = null\n    activity: BaseActivity = null\n    radiusSq: number = 0\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, superType: EntitySuperType, entityType: EntityType, aeFilename: string) {\n        super(worldMgr, sceneMgr, superType, entityType)\n        if (aeFilename) this.animationEntityType = ResourceManager.getAnimationEntityType(aeFilename)\n    }\n\n    beamUp() {\n        // TODO avoid all further state changes and mark as unavailable here\n        // TODO publish event: check jobs with this target, update power state...\n        EventBus.publishEvent(new EntityDeselected())\n        this.changeActivity()\n        // TODO insert beam animation\n        AnimEntity.moveUp(this, 6 * TILESIZE)\n    }\n\n    private static moveUp(entity: AnimEntity, counter: number) {\n        if (counter > 0) {\n            counter--\n            entity.group.position.y += (TILESIZE / NATIVE_FRAMERATE) / 2\n            setTimeout(() => AnimEntity.moveUp(entity, counter), 1000 / NATIVE_FRAMERATE)\n        } else {\n            entity.removeFromScene()\n        }\n    }\n\n    changeActivity(activity: AnimEntityActivity = this.getDefaultActivity(), onAnimationDone: () => any = null, durationTimeMs: number = null) {\n        if (this.activity === activity || this.animationEntityType === null) return\n        this.activity = activity\n        let lActivityKey = activity.activityKey.toLowerCase()\n        let anim = this.animationEntityType.activities.get(lActivityKey)\n        if (!anim) { // find by prefix\n            this.animationEntityType.activities.forEach((a, key) => {\n                if (!anim && lActivityKey.startsWith(key)) anim = a\n            })\n        }\n        if (!anim?.animation) {\n            console.warn('Activity ' + activity.activityKey + ' unknown or has no animation defined')\n            console.log(this.animationEntityType.activities)\n            return\n        }\n        if (onAnimationDone) onAnimationDone.bind(this)\n        this.animation = anim.animation\n        this.animation.looping = true\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.group.remove(...this.poly)\n        this.poly = []\n        const carries = (this.carryJoint && this.carryJoint.children) || []\n        this.carryJoint = null\n        // bodies are defined in animation and second in high/medium/low poly groups\n        this.animation.bodies.forEach((body) => {\n            let model: Object3D = iGet(this.animationEntityType.highPoly, body.name)\n            if (!model) model = iGet(this.animationEntityType.mediumPoly, body.name)\n            if (!model) model = body.model\n            const polyModel = model.clone(true)\n            this.poly.push(polyModel)\n            if (body.name) {\n                const lBodyName = body.name.toLowerCase()\n                if (lBodyName === this.animationEntityType.carryNullName?.toLowerCase()) {\n                    this.carryJoint = polyModel\n                    if (carries.length > 0) this.carryJoint.add(...carries)\n                } else if (lBodyName === this.animationEntityType.depositNullName?.toLowerCase()) {\n                    this.depositJoint = polyModel\n                } else if (lBodyName === this.animationEntityType.toolNullName?.toLowerCase()) {\n                    this.getToolJoint = polyModel\n                }\n            }\n        })\n        this.animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = this.poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                this.poly[parentInd].add(polyPart)\n            } else {\n                this.group.add(polyPart)\n            }\n        })\n        const sphere = new Sphere()\n        new Box3().setFromObject(this.group).getBoundingSphere(sphere)\n        this.radiusSq = sphere.radius * sphere.radius\n        this.animate(0, onAnimationDone, durationTimeMs)\n    }\n\n    private animate(frameIndex: number, onAnimationDone: () => any, durationTimeMs: number) {\n        if (this.poly.length !== this.animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        this.animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = this.poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = mat.transparent || mat.opacity < 1\n                    })\n                }\n            }\n        })\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        let nextFrame = frameIndex + 1\n        if (nextFrame <= this.animation.lastFrame || !onAnimationDone || (durationTimeMs !== null && durationTimeMs > 0)) {\n            if (nextFrame > this.animation.lastFrame) {\n                nextFrame = this.animation.firstFrame\n            }\n            const standardDurationTimeMs = 1000 / this.animation.framesPerSecond * this.animation.transcoef\n            if (durationTimeMs !== null) durationTimeMs -= standardDurationTimeMs\n            const that = this\n            const timeoutTimeMs = durationTimeMs !== null ? Math.max(0, Math.min(durationTimeMs, standardDurationTimeMs)) : standardDurationTimeMs\n            this.animationTimeout = setTimeout(() => that.animate(nextFrame, onAnimationDone, durationTimeMs), timeoutTimeMs) // TODO get this in sync with threejs\n        } else if (onAnimationDone) {\n            onAnimationDone()\n        }\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return AnimEntityActivity.Stand\n    }\n\n    createPickSphere() {\n        if (this.pickSphere) return\n        const pickSphereDiameter = this.stats.PickSphere\n        const pickSphereRadius = pickSphereDiameter / 2\n        const geometry = new SphereGeometry(pickSphereRadius, pickSphereRadius, pickSphereRadius)\n        const material = new MeshBasicMaterial({color: 0xffff00, visible: false}) // change visible to true for debugging\n        this.pickSphere = new Mesh(geometry, material)\n        this.pickSphere.userData = {selectable: this}\n        const pickSphereCenter = this.getPickSphereCenter()\n        this.pickSphere.position.copy(pickSphereCenter)\n        this.group.add(this.pickSphere)\n        this.createSelectionFrame(pickSphereDiameter, pickSphereCenter)\n    }\n\n    getPickSphereCenter(): Vector3 {\n        return this.getBoundingBoxCenter()\n    }\n\n    getBoundingBoxCenter() {\n        const center = new Vector3()\n        new Box3().setFromObject(this.group).getCenter(center)\n        center.sub(this.group.position)\n        center.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        return center\n    }\n\n    private createSelectionFrame(pickSphereDiameter: number, pickSphereCenter: Vector3) {\n        const selectionFrameTextureSize = 128\n        const ctx = createContext(selectionFrameTextureSize, selectionFrameTextureSize)\n        ctx.fillStyle = '#0f0'\n        const strength = Math.round(50 / pickSphereDiameter)\n        const length = selectionFrameTextureSize / 6\n        ctx.fillRect(0, 0, length, strength)\n        ctx.fillRect(0, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, 0, length, strength)\n        ctx.fillRect(selectionFrameTextureSize - strength, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - strength, selectionFrameTextureSize - length, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - length, strength, length)\n        const selectionFrameTexture = new CanvasTexture(ctx.canvas)\n        const selectionMaterial = new SpriteMaterial({map: selectionFrameTexture, depthTest: false})\n        this.selectionFrame = new Sprite(selectionMaterial)\n        this.selectionFrame.position.copy(pickSphereCenter)\n        const selectionFrameSize = pickSphereDiameter\n        this.selectionFrame.scale.set(selectionFrameSize, selectionFrameSize, selectionFrameSize)\n        this.selectionFrame.visible = false\n        this.group.add(this.selectionFrame)\n    }\n\n}\n","import { Group, Vector2, Vector3 } from 'three'\nimport { SceneManager } from '../SceneManager'\nimport { WorldManager } from '../WorldManager'\nimport { EntitySuperType, EntityType } from './EntityType'\nimport { Surface } from './map/Surface'\n\nexport abstract class BaseEntity {\n\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n\n    group: Group = new Group()\n\n    superType: EntitySuperType = null\n    entityType: EntityType = null\n    level: number = 0\n    floorOffset: number = 0\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, superType: EntitySuperType, entityType: EntityType) {\n        this.worldMgr = worldMgr\n        this.sceneMgr = sceneMgr\n        this.superType = superType\n        this.entityType = entityType\n    }\n\n    get stats() {\n        return null\n    }\n\n    getPosition() {\n        return this.group.position.clone()\n    }\n\n    getPosition2D() {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    getHeading(): number {\n        return this.group.rotation.y\n    }\n\n    onDiscover() {\n        this.group.visible = true\n    }\n\n    addToScene(worldPosition: Vector2, radHeading: number) {\n        if (worldPosition) {\n            this.group.position.copy(this.sceneMgr.getFloorPosition(worldPosition))\n            this.group.position.y += this.floorOffset\n        }\n        if (radHeading !== undefined && radHeading !== null) {\n            this.group.rotateOnAxis(new Vector3(0, 1, 0), radHeading)\n        }\n        this.group.visible = this.surfaces.every((s) => s.discovered)\n        this.sceneMgr.scene.add(this.group)\n    }\n\n    removeFromScene() {\n        this.sceneMgr.scene.remove(this.group)\n    }\n\n    get surfaces(): Surface[] {\n        return [this.sceneMgr.terrain.getSurfaceFromWorld(this.group.position)]\n    }\n\n}\n","import { RaiderActivity } from '../activities/RaiderActivity'\nimport { MaterialEntity } from '../collect/MaterialEntity'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { PathTarget } from '../PathTarget'\nimport { RaiderTool } from '../raider/RaiderTool'\nimport { RaiderTraining } from '../raider/RaiderTraining'\nimport { JobState } from './JobState'\nimport { JobType } from './JobType'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport abstract class Job {\n\n    type: JobType\n    jobstate: JobState\n    fulfiller: FulfillerEntity[] = []\n\n    protected constructor(type: JobType) {\n        this.type = type\n        this.jobstate = JobState.INCOMPLETE\n    }\n\n    assign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller)\n        if (fulfiller && index === -1) {\n            this.fulfiller.push(fulfiller)\n        }\n    }\n\n    unassign(fulfiller: FulfillerEntity) {\n        this.fulfiller.remove(fulfiller)\n    }\n\n    cancel() {\n        this.jobstate = JobState.CANCELED\n        const fulfiller = this.fulfiller // ensure consistency while processing\n        this.fulfiller = []\n        fulfiller.forEach((fulfiller) => fulfiller.stopJob())\n    }\n\n    getRequiredTool(): RaiderTool {\n        return null\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return null\n    }\n\n    isReadyToComplete(): boolean {\n        return true\n    }\n\n    onJobComplete() {\n        this.jobstate = JobState.COMPLETE\n    }\n\n    abstract getWorkplaces(): PathTarget[];\n\n    setActualWorkplace(target: PathTarget) {\n    }\n\n    getCarryItem(): MaterialEntity {\n        return null\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return null\n    }\n\n    getWorkDuration(): number {\n        return null\n    }\n\n}\n\nexport abstract class PublicJob extends Job {\n\n    abstract getPriorityIdentifier(): PriorityIdentifier\n\n}\n","import { Vector3 } from 'three'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { CarryPathTarget } from '../collect/CarryPathTarget'\nimport { MaterialEntity } from '../collect/MaterialEntity'\nimport { PublicJob } from './Job'\nimport { JobType } from './JobType'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport class CarryJob<I extends MaterialEntity> extends PublicJob {\n\n    item: I\n    actualTarget: CarryPathTarget = null\n\n    constructor(item: I) {\n        super(JobType.CARRY)\n        this.item = item\n    }\n\n    getWorkplaces(): CarryPathTarget[] {\n        return this.item.getCarryTargets()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return this.item.getPriorityIdentifier()\n    }\n\n    setActualWorkplace(target: CarryPathTarget) {\n        this.item.setTargetSite(target.site)\n        this.actualTarget = target\n    }\n\n    getCarryItem(): I {\n        return this.item\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return this.actualTarget.getDropAction()\n    }\n\n    isReadyToComplete(): boolean {\n        return this.actualTarget.canGatherItem()\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        const targetLocation = this.actualTarget.targetLocation\n        this.fulfiller.forEach((f) => {\n            f.group.lookAt(new Vector3(targetLocation.x, f.group.position.y, targetLocation.y))\n            f.dropItem()\n        })\n        this.actualTarget.gatherItem(this.item)\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class BuildingActivity extends AnimEntityActivity {\n\n    static Teleport = new BuildingActivity('Activity_Teleport')\n    static Deposit = new BuildingActivity('Activity_Deposit')\n    static Explode = new BuildingActivity('Activity_Explode')\n    static Unpowered = new BuildingActivity('Activity_Unpowered')\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class RaiderActivity extends AnimEntityActivity {\n\n    static Route = new RaiderActivity('Activity_Route')\n    static RunPanic = new RaiderActivity('Activity_RunPanic')\n    static Drill = new RaiderActivity('Activity_Drill')\n    static Walk = new RaiderActivity('!Activity_Walk')\n    static Reinforce = new RaiderActivity('Activity_Reinforce')\n    static Reverse = new RaiderActivity('!Activity_Reverse')\n    static TurnLeft = new RaiderActivity('!Activity_TurnLeft')\n    static TurnRight = new RaiderActivity('!Activity_TurnRight')\n    static CantDo = new RaiderActivity('!Activity_CantDo')\n    static Collect = new RaiderActivity('Activity_Collect')\n    static Clear = new RaiderActivity('Activity_Clear')\n    static Carry = new RaiderActivity('Activity_Carry')\n    static CarryTurnLeft = new RaiderActivity('!Activity_CarryTurnLeft')\n    static CarryTurnRight = new RaiderActivity('!Activity_CarryTurnRight')\n    static CarryStand = new RaiderActivity('Activity_CarryStand')\n    static Dynamite = new RaiderActivity('Activity_Dynamite')\n    static Place = new RaiderActivity('Activity_Place')\n    static Deposit = new RaiderActivity('!Activity_Deposit')\n    static TeleportIn = new RaiderActivity('Activity_TeleportIn')\n    static Repair = new RaiderActivity('Activity_Repair')\n    static rest = new RaiderActivity('Activity_rest')\n    static routeRubble = new RaiderActivity('!Activity_routeRubble')\n    static CarryRubble = new RaiderActivity('!Activity_CarryRubble')\n    static Eat = new RaiderActivity('Activity_Eat')\n    static FireLaser = new RaiderActivity('Activity_FireLaser')\n    static GetUp = new RaiderActivity('!Activity_GetUp')\n    static ThrownByRockMonster = new RaiderActivity('Activity_ThrownByRockMonster')\n    static Slip = new RaiderActivity('Activity_Slip')\n    static Train = new RaiderActivity('Activity_Train')\n    static Recharge = new RaiderActivity('!Activity_Recharge')\n\n    static Waiting1 = new RaiderActivity('Activity_Waiting1')\n    static Waiting2 = new RaiderActivity('Activity_Waiting2')\n    static Waiting3 = new RaiderActivity('Activity_Waiting3')\n    static Waiting4 = new RaiderActivity('Activity_Waiting4')\n\n    static Hoverboard = new RaiderActivity('Activity_Hoverboard')\n    static Standhoverboard = new RaiderActivity('Activity_Standhoverboard')\n    static HitLefthoverboard = new RaiderActivity('!Activity_HitLefthoverboard')\n    static HitRighthoverboard = new RaiderActivity('!Activity_HitRighthoverboard')\n    static HitFronthoverboard = new RaiderActivity('!Activity_HitFronthoverboard')\n    static HitBackhoverboard = new RaiderActivity('!Activity_HitBackhoverboard')\n\n    static SMALLTRUCK = new RaiderActivity('Activity_SMALLTRUCK')\n    static StandSMALLTRUCK = new RaiderActivity('Activity_StandSMALLTRUCK')\n    static HitLeftSMALLTRUCK = new RaiderActivity('!Activity_HitLeftSMALLTRUCK')\n    static HitRightSMALLTRUCK = new RaiderActivity('!Activity_HitRightSMALLTRUCK')\n    static HitFrontSMALLTRUCK = new RaiderActivity('!Activity_HitFrontSMALLTRUCK')\n    static HitBackSMALLTRUCK = new RaiderActivity('!Activity_HitBackSMALLTRUCK')\n\n    static SMALLheli = new RaiderActivity('Activity_SMALLheli')\n    static StandSMALLheli = new RaiderActivity('Activity_StandSMALLheli')\n    static HitLeftSMALLheli = new RaiderActivity('!Activity_HitLeftSMALLheli')\n    static HitRightSMALLheli = new RaiderActivity('!Activity_HitRightSMALLheli')\n    static HitFrontSMALLheli = new RaiderActivity('!Activity_HitFrontSMALLheli')\n    static HitBackSMALLheli = new RaiderActivity('!Activity_HitBackSMALLheli')\n\n    static SMALLCAT = new RaiderActivity('Activity_SMALLCAT')\n    static StandSMALLCAT = new RaiderActivity('Activity_StandSMALLCAT')\n    static HitLeftSMALLCAT = new RaiderActivity('!Activity_HitLeftSMALLCAT')\n    static HitRightSMALLCAT = new RaiderActivity('!Activity_HitRightSMALLCAT')\n    static HitFrontSMALLCAT = new RaiderActivity('!Activity_HitFrontSMALLCAT')\n    static HitBackSMALLCAT = new RaiderActivity('!Activity_HitBackSMALLCAT')\n\n    static SMALLMLP = new RaiderActivity('Activity_SMALLMLP')\n    static StandSMALLMLP = new RaiderActivity('Activity_StandSMALLMLP')\n    static HitLeftSMALLMLP = new RaiderActivity('!Activity_HitLeftSMALLMLP')\n    static HitRightSMALLMLP = new RaiderActivity('!Activity_HitRightSMALLMLP')\n    static HitFrontSMALLMLP = new RaiderActivity('!Activity_HitFrontSMALLMLP')\n    static HitBackSMALLMLP = new RaiderActivity('!Activity_HitBackSMALLMLP')\n\n    static LARGECAT = new RaiderActivity('Activity_LARGECAT')\n    static StandLARGECAT = new RaiderActivity('Activity_StandLARGECAT')\n    static HitLeftLARGECAT = new RaiderActivity('!Activity_HitLeftLARGECAT')\n    static HitRightLARGECAT = new RaiderActivity('!Activity_HitRightLARGECAT')\n    static HitFrontLARGECAT = new RaiderActivity('!Activity_HitFrontLARGECAT')\n    static HitBackLARGECAT = new RaiderActivity('!Activity_HitBackLARGECAT')\n\n    static SMALLDIGGER = new RaiderActivity('Activity_SMALLDIGGER')\n    static StandSMALLDIGGER = new RaiderActivity('Activity_StandSMALLDIGGER')\n\n}\n","import { Vector2 } from 'three'\nimport { RaiderActivity } from './activities/RaiderActivity'\nimport { MaterialEntity } from './collect/MaterialEntity'\n\nexport class PathTarget {\n\n    targetLocation: Vector2\n\n    constructor(location: Vector2) {\n        this.targetLocation = location\n    }\n\n    isInArea(position: Vector2): boolean {\n        return false\n    }\n\n    canGatherItem(): boolean {\n        return false\n    }\n\n    gatherItem(item: MaterialEntity) {\n        item.addToScene(null, null)\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { MaterialAmountChanged } from '../../../event/WorldEvents'\nimport { BuildingActivity } from '../activities/BuildingActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { BuildingEntity } from '../building/BuildingEntity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { PathTarget } from '../PathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class CarryPathTarget extends PathTarget {\n\n    site: BuildingSite\n    building: BuildingEntity\n\n    constructor(location: Vector2, site: BuildingSite, building: BuildingEntity) {\n        super(location)\n        this.site = site\n        this.building = building\n    }\n\n    canGatherItem(): boolean {\n        if (this.building) {\n            return this.building.activity.activityKey === this.building.getDefaultActivity().activityKey\n        }\n        return true\n    }\n\n    gatherItem(item: MaterialEntity) {\n        if (this.site) {\n            this.site.addItem(item)\n        } else if (this.building) {\n            if (this.building.entityType === EntityType.POWER_STATION || this.building.entityType === EntityType.ORE_REFINERY) {\n                if (this.building.carryJoint) {\n                    this.building.carryJoint.add(item.group)\n                    item.group.position.set(0, 0, 0)\n                }\n                this.building.changeActivity(BuildingActivity.Deposit, () => {\n                    this.building.changeActivity()\n                    if (this.building.carryJoint) this.building.carryJoint.remove(item.group)\n                    CarryPathTarget.addItemToStorage(item)\n                    // TODO dispose item\n                })\n            } else {\n                item.removeFromScene()\n                CarryPathTarget.addItemToStorage(item)\n            }\n        } else {\n            item.addToScene(null, null)\n        }\n    }\n\n    private static addItemToStorage(item: MaterialEntity) {\n        switch (item.entityType) {\n            case EntityType.CRYSTAL:\n                GameState.numCrystal++\n                EventBus.publishEvent(new MaterialAmountChanged(item.entityType))\n                break\n            case EntityType.ORE:\n                GameState.numOre++\n                EventBus.publishEvent(new MaterialAmountChanged(item.entityType))\n                break\n        }\n    }\n\n    getDropAction(): RaiderActivity {\n        return (this.building || this.site).getDropAction()\n    }\n\n}\n","import { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { AnimEntity } from '../anim/AnimEntity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CarryJob } from '../job/CarryJob'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { CarryPathTarget } from './CarryPathTarget'\n\nexport abstract class MaterialEntity extends AnimEntity {\n\n    targetBuildingTypes: EntityType[] = []\n    priorityIdentifier: PriorityIdentifier = null\n    targets: CarryPathTarget[] = []\n    targetSite: BuildingSite = null\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, entityType: EntityType, aeFilename: string = null) {\n        super(worldMgr, sceneMgr, EntitySuperType.MATERIAL, entityType, aeFilename)\n        this.targetBuildingTypes = [EntityType.TOOLSTATION]\n    }\n\n    getCarryTargets(): CarryPathTarget[] {\n        return this.updateTargets()\n    }\n\n    resetTarget() {\n        this.targets = []\n        this.targetSite = null\n        this.updateTargets()\n    }\n\n    protected updateTargets(): CarryPathTarget[] {\n        if (this.targets.length < 1) {\n            const sites = GameState.buildingSites.filter((b) => b.needs(this.entityType))\n            if (sites.length > 0) {\n                this.targets = sites.map((s) => new CarryPathTarget(s.getRandomDropPosition(), s, null))\n            } else {\n                const buildings = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                if (buildings.length > 0) {\n                    this.targets = buildings.map((b) => new CarryPathTarget(b.getDropPosition2D(), null, b))\n                }\n            }\n        } else if (this.targets.some((t) => t.site && t.site.complete)) {\n            this.resetTarget()\n        } else if (this.targets.some((t) => t.building && !t.building.isPowered())) {\n            this.resetTarget()\n        }\n        return this.targets\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.materialsUndiscovered.remove(this)\n        GameState.materials.push(this)\n        EventBus.publishEvent(new JobCreateEvent(this.createCarryJob()))\n    }\n\n    setTargetSite(site: BuildingSite) {\n        if (this.targetSite === site) return\n        this.targetSite?.unAssign(this)\n        this.targetSite = site\n        this.targetSite?.assign(this)\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return this.priorityIdentifier\n    }\n\n    getTargetBuildingTypes(): EntityType[] {\n        return this.targetBuildingTypes\n    }\n\n    createCarryJob(): CarryJob<MaterialEntity> {\n        return new CarryJob(this)\n    }\n\n    onAddToSite() {\n        this.addToScene(null, null)\n    }\n\n}\n","import { AdditiveBlending, Color, Material, MeshPhongMaterial } from 'three'\nimport { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Crystal extends MaterialEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.CRYSTAL)\n        const resource2 = ResourceManager.getResource('MiscAnims/Crystal/vlp_greencrystal.lwo')\n        const mesh2 = SceneManager.registerMesh(new LWOLoader('MiscAnims/Crystal/').parse(resource2));\n        (mesh2.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.blending = AdditiveBlending\n            mat.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n            mat.opacity = 0.5 // XXX read from LWO file?\n            mat.transparent = mat.opacity < 1\n        })\n        mesh2.scale.set(1.75, 1.75, 1.75) // XXX derive from texture scale?\n        this.group.add(mesh2)\n        const resource = ResourceManager.getResource('World/Shared/Crystal.lwo') // high poly version\n        const mesh = SceneManager.registerMesh(new LWOLoader('World/Shared/').parse(resource));\n        (mesh.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.emissive = new Color(0, 8, 0) // XXX read from LWO file?\n            mat.color = new Color(0, 0, 0) // XXX read from LWO file?\n            mat.opacity = 0.9 // XXX read from LWO file?\n            mat.transparent = mat.opacity < 1\n        })\n        this.group.add(mesh)\n        this.targetBuildingTypes = [EntityType.POWER_STATION, EntityType.TOOLSTATION]\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityCrystal\n    }\n\n    get stats() {\n        return ResourceManager.stats.PowerCrystal\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class DynamiteActivity extends BaseActivity {\n\n    static Normal = new DynamiteActivity('Normal')\n    static TickDown = new DynamiteActivity('TickDown')\n\n}\n","import { Dynamite } from '../../collect/Dynamite'\nimport { RaiderTraining } from '../../raider/RaiderTraining'\nimport { CarryJob } from '../CarryJob'\n\nexport class CarryDynamiteJob extends CarryJob<Dynamite> {\n\n    color: number = 0xa06060\n\n    constructor(dynamite: Dynamite) {\n        super(dynamite)\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return RaiderTraining.DEMOLITION\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.item.ignite()\n    }\n\n}\n","import { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { DynamiteActivity } from '../activities/DynamiteActivity'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CarryJob } from '../job/CarryJob'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { CarryDynamiteJob } from '../job/surface/CarryDynamiteJob'\nimport { Surface } from '../map/Surface'\nimport { CarryPathTarget } from './CarryPathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Dynamite extends MaterialEntity {\n\n    targetSurface: Surface\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager, surface: Surface) {\n        super(worldMgr, sceneMgr, EntityType.DYNAMITE, 'MiscAnims/Dynamite/Dynamite.ae')\n        this.targetSurface = surface\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityDestruction\n        this.changeActivity()\n    }\n\n    getCarryTargets(): CarryPathTarget[] {\n        if (this.targetSurface && this.targetSurface.isExplodable()) {\n            return this.targetSurface.getDigPositions().map((p) => new CarryPathTarget(p, null, null))\n        } else {\n            return GameState.getBuildingsByType(EntityType.TOOLSTATION).map((b) => b.getDropPosition2D())\n                .map((p) => new CarryPathTarget(p, null, null))\n        }\n    }\n\n    ignite() {\n        // TODO add as explosive and scare em all!\n        const center = this.targetSurface.getCenterWorld()\n        center.y = this.group.position.y\n        this.group.lookAt(center)\n        this.changeActivity(DynamiteActivity.TickDown, () => {\n            this.removeFromScene()\n            this.targetSurface.collapse()\n            // TODO add explosion animation\n            // TODO damage raider, vehicle, buildings\n        })\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return DynamiteActivity.Normal\n    }\n\n    createCarryJob(): CarryJob<Dynamite> {\n        return new CarryDynamiteJob(this)\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Ore extends MaterialEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.ORE)\n        const resource = ResourceManager.getResource('MiscAnims/Ore/Ore1st.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('MiscAnims/Ore/').parse(resource))\n        this.group.add(mesh)\n        this.targetBuildingTypes = [EntityType.ORE_REFINERY, EntityType.TOOLSTATION]\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityOre\n    }\n\n    get stats() {\n        return ResourceManager.stats.Ore\n    }\n\n}\n","export class RaiderTool {\n\n    static DRILL = new RaiderTool('drill')\n    static HAMMER = new RaiderTool('hammer')\n    static SHOVEL = new RaiderTool('shovel')\n    static SPANNER = new RaiderTool('spanner')\n    static FREEZERGUN = new RaiderTool('freezergun')\n    static LASER = new RaiderTool('laser')\n    static PUSHERGUN = new RaiderTool('pushergun')\n    static BIRDSCARER = new RaiderTool('birdscarer')\n\n    name: string\n\n    constructor(name: string) {\n        this.name = name\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PublicJob } from '../Job'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class ClearRubbleJob extends PublicJob {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(JobType.CLEAR_RUBBLE)\n        this.surface = surface\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.SHOVEL\n    }\n\n    getWorkplaces(): PathTarget[] {\n        const rubblePositions = this.surface.rubblePositions\n        return rubblePositions.length > 0 ? [new PathTarget(rubblePositions[0])] : [] // use first (no need to optimize)\n    }\n\n    onJobComplete() {\n        this.fulfiller.forEach((f) => f.changeActivity())\n        this.surface.reduceRubble()\n        this.fulfiller.forEach((f) => f.jobWorkplaces = this.getWorkplaces())\n        if (!this.surface.hasRubble()) {\n            super.onJobComplete()\n        }\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityClearing\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Clear\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PublicJob } from '../Job'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class DrillJob extends PublicJob {\n\n    color: number = 0xa0a0a0\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(JobType.DRILL)\n        this.surface = surface\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.DRILL\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.surface.getDigPositions().map((p) => new PathTarget(p))\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.collapse()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityDestruction\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Drill\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { PublicJob } from '../Job'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class ReinforceJob extends PublicJob {\n\n    color: number = 0x60a060\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(JobType.REINFORCE)\n        this.surface = surface\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.surface.getDigPositions().map((p) => new PathTarget(p))\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.reinforce()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityReinforce\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Reinforce\n    }\n\n    getWorkDuration(): number {\n        return 2700\n    }\n\n}\n","import { Group, Mesh, MeshPhongMaterial, Vector2, Vector3 } from 'three'\nimport { clearTimeoutSafe, getRandom, getRandomSign } from '../../../core/Util'\nimport { EventBus } from '../../../event/EventBus'\nimport { SelectionEvent, SurfaceChanged, SurfaceSelectedEvent } from '../../../event/LocalEvents'\nimport { CavernDiscovered, JobCreateEvent, JobDeleteEvent, OreFoundEvent } from '../../../event/WorldEvents'\nimport { CrystalFoundEvent, LandslideEvent } from '../../../event/WorldLocationEvent'\nimport { HEIGHT_MULTIPLER, TILESIZE } from '../../../params'\nimport { LWSCLoader } from '../../../resource/LWSCLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { AnimSubObj } from '../anim/AnimSubObj'\nimport { BuildingEntity } from '../building/BuildingEntity'\nimport { Crystal } from '../collect/Crystal'\nimport { Dynamite } from '../collect/Dynamite'\nimport { ElectricFence } from '../collect/ElectricFence'\nimport { Ore } from '../collect/Ore'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CarryDynamiteJob } from '../job/surface/CarryDynamiteJob'\nimport { ClearRubbleJob } from '../job/surface/ClearRubbleJob'\nimport { DrillJob } from '../job/surface/DrillJob'\nimport { ReinforceJob } from '../job/surface/ReinforceJob'\nimport { Selectable, SelectionType } from '../Selectable'\nimport { SurfaceGeometry } from './SurfaceGeometry'\nimport { SurfaceType } from './SurfaceType'\nimport { Terrain } from './Terrain'\nimport { WALL_TYPE } from './WallType'\n\nexport class Surface implements Selectable {\n\n    terrain: Terrain\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    surfaceType: SurfaceType\n    x: number\n    y: number\n    containedOres: number = 0\n    containedCrystals: number = 0\n    heightOffset: number = null\n    discovered: boolean = false\n    selected: boolean = false\n    reinforced: boolean = false\n    drillJob: DrillJob = null\n    reinforceJob: ReinforceJob = null\n    dynamiteJob: CarryDynamiteJob = null\n    clearRubbleJob: ClearRubbleJob = null\n    surfaceRotation: number = 0\n    seamLevel: number = 0\n    fallinTimeout = null\n\n    fallinGrp: Group = null\n    animationTimeout = null\n\n    wallType: WALL_TYPE = null\n    mesh: Mesh = null\n    needsMeshUpdate: boolean = false\n\n    topLeftHeightOffset: number = 0\n    topRightHeightOffset: number = 0\n    bottomLeftHeightOffset: number = 0\n    bottomRightHeightOffset: number = 0\n\n    rubblePositions: Vector2[] = []\n\n    building: BuildingEntity = null\n    fence: ElectricFence = null\n    hasPower: boolean = false\n\n    constructor(terrain: Terrain, surfaceType: SurfaceType, x: number, y: number, heightOffset: number) {\n        this.terrain = terrain\n        this.worldMgr = this.terrain.worldMgr\n        this.sceneMgr = this.terrain.sceneMgr\n        this.surfaceType = surfaceType\n        if (surfaceType === SurfaceType.CRYSTAL_SEAM || surfaceType === SurfaceType.ORE_SEAM) this.seamLevel = 4\n        this.x = x\n        this.y = y\n        this.heightOffset = heightOffset\n    }\n\n    /**\n     * @return {boolean} Returns true, if a new cave has been discovered\n     */\n    discover(): boolean { // TODO improve performance then test with level 20\n        if (!this.discovered) GameState.discoverSurface(this)\n        this.discovered = true\n        this.needsMeshUpdate = true\n        if (!this.surfaceType.floor) return false\n        const floors: Surface[] = []\n        const others: Surface[] = []\n        for (let x = -1; x <= 1; x++) {\n            for (let y = -1; y <= 1; y++) {\n                if (x === 0 && y === 0) continue\n                const n = this.terrain.getSurface(this.x + x, this.y + y)\n                if ((x === 0 || y === 0) && n.surfaceType.floor) {\n                    floors.push(n)\n                } else {\n                    others.push(n)\n                }\n            }\n        }\n        let caveFound = false\n        let counter = 0\n        while (floors.length > 0) {\n            counter++\n            const neighbor = floors.shift()\n            neighbor.discovered = true\n            neighbor.needsMeshUpdate = true\n            for (let x = -1; x <= 1; x++) {\n                for (let y = -1; y <= 1; y++) {\n                    if (x === 0 && y === 0) continue\n                    const n = neighbor.terrain.getSurface(neighbor.x + x, neighbor.y + y)\n                    if ((x === 0 || y === 0) && n.surfaceType.floor && !n.discovered) {\n                        floors.push(n)\n                        caveFound = true\n                    } else {\n                        others.push(n)\n                    }\n                }\n            }\n        }\n        others.forEach((o) => {\n            o.discovered = true\n            o.needsMeshUpdate = true\n            if (!o.isSupported()) {\n                o.collapse()\n            }\n        })\n        console.log('surface discover handled ' + counter + ' floors and ' + others.length + ' others')\n        return caveFound\n    }\n\n    collapse() {\n        this.cancelJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += 4\n        this.needsMeshUpdate = true\n        const foundCave = this.discover()\n        if (foundCave) EventBus.publishEvent(new CavernDiscovered())\n        // drop contained ores and crystals\n        this.dropContainedOre(this.containedOres - 4)\n        for (let c = 0; c < this.containedCrystals; c++) {\n            const crystal = this.worldMgr.placeMaterial(new Crystal(this.worldMgr, this.sceneMgr), this.getRandomPosition())\n            EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n        }\n        // check for unsupported neighbors\n        for (let x = this.x - 1; x <= this.x + 1; x++) {\n            for (let y = this.y - 1; y <= this.y + 1; y++) {\n                if (x !== this.x || y !== this.y) {\n                    const surf = this.terrain.getSurface(x, y)\n                    surf.needsMeshUpdate = true\n                    if (!surf.isSupported()) surf.collapse()\n                }\n            }\n        }\n        // update meshes\n        this.terrain.updateSurfaceMeshes()\n        this.terrain.floorGroup.updateWorldMatrix(true, true)\n    }\n\n    private dropContainedOre(dropAmount: number) {\n        for (let c = 0; c < dropAmount && this.containedOres > 0; c++) {\n            this.containedOres--\n            this.worldMgr.placeMaterial(new Ore(this.worldMgr, this.sceneMgr), this.getRandomPosition())\n            EventBus.publishEvent(new OreFoundEvent())\n        }\n    }\n\n    getRandomPosition(): Vector2 {\n        return new Vector2(this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4),\n            this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4))\n    }\n\n    cancelJobs() {\n        this.drillJob = Surface.safeRemoveJob(this.drillJob)\n        this.reinforceJob = Surface.safeRemoveJob(this.reinforceJob)\n        this.dynamiteJob = Surface.safeRemoveJob(this.dynamiteJob)\n        this.clearRubbleJob = Surface.safeRemoveJob(this.clearRubbleJob)\n        this.updateJobColor()\n    }\n\n    private static safeRemoveJob(job: DrillJob | ReinforceJob | CarryDynamiteJob | ClearRubbleJob) {\n        if (job) EventBus.publishEvent(new JobDeleteEvent(job))\n        return null\n    }\n\n    reduceRubble() {\n        this.rubblePositions.shift()\n        if (this.surfaceType === SurfaceType.RUBBLE4) this.surfaceType = SurfaceType.RUBBLE3\n        else if (this.surfaceType === SurfaceType.RUBBLE3) this.surfaceType = SurfaceType.RUBBLE2\n        else if (this.surfaceType === SurfaceType.RUBBLE2) this.surfaceType = SurfaceType.RUBBLE1\n        else if (this.surfaceType === SurfaceType.RUBBLE1) this.surfaceType = SurfaceType.GROUND\n        this.dropContainedOre(this.containedOres - this.rubblePositions.length)\n        this.updateTexture()\n        EventBus.publishEvent(new SurfaceChanged(this))\n    }\n\n    isSupported(): boolean {\n        if (this.surfaceType.floor) return true\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        return isHighGround(surfLeft, surfTopLeft, surfTop)\n            || isHighGround(surfTop, surfTopRight, surfRight)\n            || isHighGround(surfRight, surfBottomRight, surfBottom)\n            || isHighGround(surfBottom, surfBottomLeft, surfLeft)\n    }\n\n    updateMesh(force: boolean = true) {\n        if (!force && !this.needsMeshUpdate) return\n        this.needsMeshUpdate = false\n\n        const topLeftVertex = new Vector3(this.x, 0, this.y)\n        const topRightVertex = new Vector3(this.x + 1, 0, this.y)\n        const bottomLeftVertex = new Vector3(this.x, 0, this.y + 1)\n        const bottomRightVertex = new Vector3(this.x + 1, 0, this.y + 1)\n\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        if (!this.discovered) {\n            topLeftVertex.y = 1\n            topRightVertex.y = 1\n            bottomRightVertex.y = 1\n            bottomLeftVertex.y = 1\n        } else if (!this.surfaceType.floor || !this.neighbors.some((n) => n.surfaceType.floor && n.discovered)) {\n            if (isHighGround(surfLeft, surfTopLeft, surfTop)) topLeftVertex.y = 1\n            if (isHighGround(surfTop, surfTopRight, surfRight)) topRightVertex.y = 1\n            if (isHighGround(surfRight, surfBottomRight, surfBottom)) bottomRightVertex.y = 1\n            if (isHighGround(surfBottom, surfBottomLeft, surfLeft)) bottomLeftVertex.y = 1\n        }\n\n        // update mesh (geometry), if wall type changed\n        let wallType = topLeftVertex.y + topRightVertex.y + bottomRightVertex.y + bottomLeftVertex.y\n        if (wallType === WALL_TYPE.WALL && topLeftVertex.y === bottomRightVertex.y) wallType = WALL_TYPE.WEIRD_CREVICE\n\n        if (this.wallType !== wallType) {\n            this.wallType = wallType\n            this.updateGeometry(topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex, surfTopLeft, surfTop, surfLeft, surfTopRight, surfRight, surfBottomRight, surfBottom, surfBottomLeft)\n            if (this.wallType !== WALL_TYPE.WALL) this.cancelReinforceJobs()\n        }\n\n        this.updateTexture()\n        this.updateJobColor()\n        this.updateGraphWalk()\n    }\n\n    private updateGraphWalk() {\n        const weight = this.getGraphWalkWeight()\n        for (let x = 0; x < 3; x++) {\n            for (let y = 0; y < 3; y++) {\n                this.terrain.graphWalk.grid[this.x * 3 + x][this.y * 3 + y].weight = weight\n            }\n        }\n    }\n\n    cancelReinforceJobs() {\n        this.reinforceJob = Surface.safeRemoveJob(this.reinforceJob)\n        this.updateJobColor()\n    }\n\n    updateTexture() {\n        let textureName = this.terrain.textureSet.texturebasename\n        if (!this.discovered) {\n            textureName += '70'\n        } else if (this.surfaceType === SurfaceType.POWER_PATH) {\n            textureName += this.updatePowerPathTexture()\n        } else if (!this.surfaceType.shaping && this.neighbors.some((n) => n.discovered && n.surfaceType.floor)) {\n            if (this.surfaceType === SurfaceType.POWER_PATH_BUILDING && this.hasPower) {\n                textureName += '66'\n            } else {\n                textureName += this.surfaceType.matIndex.toString()\n            }\n        } else if (this.wallType === WALL_TYPE.WEIRD_CREVICE) {\n            textureName += '77'\n        } else {\n            if (this.wallType === WALL_TYPE.CORNER) {\n                textureName += '5'\n            } else if (this.wallType === WALL_TYPE.INVERTED_CORNER) {\n                textureName += '3'\n            } else if (this.reinforced) {\n                textureName += '2'\n            } else {\n                textureName += '0'\n            }\n            textureName += this.surfaceType.shaping ? this.surfaceType.matIndex : SurfaceType.SOLID_ROCK.matIndex\n        }\n        textureName += '.bmp'\n\n        const texture = ResourceManager.getTexture(textureName)\n        texture.center.set(0.5, 0.5)\n        texture.rotation = this.surfaceRotation\n\n        this.accessMaterials().forEach((mat) => mat.map = texture)\n    }\n\n    private updatePowerPathTexture(): string {\n        this.surfaceRotation = 0\n        const left = this.terrain.getSurface(this.x - 1, this.y).isPath()\n        const top = this.terrain.getSurface(this.x, this.y - 1).isPath()\n        const right = this.terrain.getSurface(this.x + 1, this.y).isPath()\n        const bottom = this.terrain.getSurface(this.x, this.y + 1).isPath()\n        const pathSum = (left ? 1 : 0) + (top ? 1 : 0) + (right ? 1 : 0) + (bottom ? 1 : 0)\n        if (pathSum === 0 || pathSum === 1) {\n            if (left) this.surfaceRotation = -Math.PI / 2\n            if (top) this.surfaceRotation = Math.PI\n            if (right) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '75' : '65'\n        } else if (pathSum === 2) {\n            if (left === right) {\n                this.surfaceRotation = left ? Math.PI / 2 : 0\n                return this.hasPower ? '72' : '62'\n            } else {\n                if (left && bottom) this.surfaceRotation = -Math.PI / 2\n                if (left && top) this.surfaceRotation = Math.PI\n                if (top && right) this.surfaceRotation = Math.PI / 2\n                return this.hasPower ? '73' : '63'\n            }\n        } else if (pathSum === 3) {\n            if (!top) this.surfaceRotation = -Math.PI / 2\n            if (!right) this.surfaceRotation = Math.PI\n            if (!bottom) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '74' : '64'\n        } else {\n            return this.hasPower ? '71' : '60'\n        }\n    }\n\n    accessMaterials(): MeshPhongMaterial[] {\n        if (!this.mesh || !this.mesh.material) return []\n        if (Array.isArray(this.mesh.material)) {\n            return this.mesh.material as MeshPhongMaterial[]\n        } else {\n            return [this.mesh.material as MeshPhongMaterial]\n        }\n    }\n\n    updateGeometry(topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3, surfTopLeft: Surface, surfTop: Surface, surfLeft: Surface, surfTopRight: Surface, surfRight: Surface, surfBottomRight: Surface, surfBottom: Surface, surfBottomLeft: Surface) {\n        if (this.mesh) this.terrain.floorGroup.remove(this.mesh)\n        this.mesh?.geometry?.dispose()\n\n        function avgHeight(...args: Surface[]) {\n            let sum = 0, cnt = 0\n            args.map(s => s.heightOffset).filter(Boolean).forEach(h => {\n                sum += h\n                cnt++\n            })\n            return sum / cnt\n        }\n\n        this.topLeftHeightOffset = avgHeight(surfTopLeft, surfTop, this, surfLeft) * HEIGHT_MULTIPLER\n        this.topRightHeightOffset = avgHeight(surfTop, surfTopRight, surfRight, this) * HEIGHT_MULTIPLER\n        this.bottomRightHeightOffset = avgHeight(this, surfRight, surfBottomRight, surfBottom) * HEIGHT_MULTIPLER\n        this.bottomLeftHeightOffset = avgHeight(surfLeft, this, surfBottom, surfBottomLeft) * HEIGHT_MULTIPLER\n        const geometry = SurfaceGeometry.create(this.wallType, topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex,\n            topLeftVertex.y + this.topLeftHeightOffset,\n            topRightVertex.y + this.topRightHeightOffset,\n            bottomRightVertex.y + this.bottomRightHeightOffset,\n            bottomLeftVertex.y + this.bottomLeftHeightOffset,\n        )\n\n        this.mesh = new Mesh(geometry, new MeshPhongMaterial({shininess: 0}))\n        this.mesh.userData = {selectable: this, surface: this}\n\n        this.terrain.floorGroup.add(this.mesh)\n        this.terrain.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.SURFACE\n    }\n\n    select(): SelectionEvent {\n        if (this.surfaceType.selectable && (this.wallType !== WALL_TYPE.INVERTED_CORNER && this.wallType !== WALL_TYPE.WEIRD_CREVICE) && !this.selected && this.discovered) {\n            this.selected = true\n            this.accessMaterials().forEach((mat) => mat.color.setHex(0x6060a0))\n            console.log('Surface selected at ' + this.x + '/' + this.y)\n            return new SurfaceSelectedEvent(this)\n        }\n        return null\n    }\n\n    deselect(): any {\n        if (this.selected) {\n            this.selected = false\n            this.updateJobColor()\n        }\n    }\n\n    getSelectionCenter(): Vector3 {\n        return null // not used\n    }\n\n    updateJobColor() {\n        const color = this.dynamiteJob?.color || this.reinforceJob?.color || this.drillJob?.color || 0xffffff\n        this.accessMaterials().forEach((mat) => mat.color.setHex(color))\n    }\n\n    hasRubble(): boolean {\n        return this.rubblePositions.length > 0\n    }\n\n    isPath(): boolean {\n        return this.surfaceType === SurfaceType.POWER_PATH || this.surfaceType === SurfaceType.POWER_PATH_BUILDING\n    }\n\n    isWalkable(): boolean {\n        return this.surfaceType.floor && this.discovered && this.surfaceType !== SurfaceType.LAVA && this.surfaceType !== SurfaceType.WATER && !this.building?.blocksPathSurface\n    }\n\n    isDrillable(): boolean {\n        return this.surfaceType.drillable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDrillableHard(): boolean {\n        return this.surfaceType.drillableHard && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isReinforcable(): boolean {\n        return this.surfaceType.reinforcable && this.discovered && this.wallType === WALL_TYPE.WALL && !this.reinforced\n    }\n\n    isExplodable(): boolean {\n        return this.surfaceType.explodable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDigable(): boolean {\n        return this.isDrillable() || this.isExplodable()\n    }\n\n    getDigPositions(): Vector2[] {\n        const digPosition = []\n        if (this.terrain.getSurface(this.x - 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE - 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y - 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE - 1))\n        if (this.terrain.getSurface(this.x + 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE + 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y + 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE + TILESIZE + 1))\n        return digPosition\n    }\n\n    reinforce() {\n        this.reinforced = true\n        this.cancelReinforceJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.updateTexture()\n    }\n\n    getCenterWorld2D(): Vector2 {\n        return new Vector2(this.x, this.y).addScalar(0.5).multiplyScalar(TILESIZE)\n    }\n\n    getCenterWorld(): Vector3 {\n        const center = this.getCenterWorld2D()\n        return new Vector3(center.x, this.sceneMgr.getTerrainHeight(center.x, center.y), center.y)\n    }\n\n    setFallinLevel(fallinLevel: number) {\n        if (fallinLevel < 1) return\n        let originPos\n        let targetPos\n        if (this.surfaceType.floor) {\n            originPos = this.terrain.findFallInOrigin(this.x, this.y)\n            targetPos = [this.x, this.y]\n        } else {\n            originPos = [this.x, this.y]\n            targetPos = this.terrain.findFallInTarget(this.x, this.y)\n        }\n        if (originPos && targetPos) {\n            this.terrain.getSurface(originPos[0], originPos[1]).scheduleFallin(targetPos[0], targetPos[1])\n        }\n    }\n\n    scheduleFallin(targetX: number, targetY: number) {\n        this.fallinTimeout = setTimeout(() => {\n            this.createFallin(targetX, targetY)\n            this.scheduleFallin(targetX, targetY)\n        }, (30 + getRandom(60)) * 1000) // TODO adapt timer to level multiplier and fallin value\n    }\n\n    createFallin(targetX: number, targetY: number) {\n        const fallinPosition = this.terrain.getSurface(targetX, targetY).getCenterWorld()\n        EventBus.publishEvent(new LandslideEvent(fallinPosition))\n\n        // TODO refactor mesh and animation handling\n        const content = ResourceManager.getResource('MiscAnims/RockFall/Rock3Sides.lws')\n        const animation = new LWSCLoader('MiscAnims/RockFall/').parse(content)\n        this.fallinGrp = new Group()\n        this.fallinGrp.position.copy(fallinPosition)\n        const dx = this.x - targetX, dy = targetY - this.y\n        this.fallinGrp.rotateOnAxis(new Vector3(0, 1, 0), Math.atan2(dy, dx) + Math.PI / 2)\n        this.sceneMgr.scene.add(this.fallinGrp)\n        const poly = []\n        animation.bodies.forEach((body) => {\n            const polyModel = body.model.clone(true)\n            poly.push(polyModel)\n        })\n        animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                poly[parentInd].add(polyPart)\n            } else {\n                this.fallinGrp.add(polyPart)\n            }\n        })\n        this.animate(poly, animation, 0)\n\n        this.terrain.getSurface(targetX, targetY).makeRubble()\n    }\n\n    animate(poly, animation, frameIndex) {\n        if (poly.length !== animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = mat.transparent || mat.opacity < 1\n                    })\n                }\n            }\n        })\n        this.animationTimeout = null\n        if (!(frameIndex + 1 > animation.lastFrame) || animation.looping) {\n            let nextFrame = frameIndex + 1\n            if (nextFrame > animation.lastFrame) {\n                nextFrame = animation.firstFrame\n            }\n            const that = this\n            this.animationTimeout = setTimeout(() => that.animate(poly, animation, nextFrame), 1000 / animation.framesPerSecond * animation.transcoef)\n        } else {\n            this.sceneMgr.scene.remove(this.fallinGrp)\n            this.fallinGrp = null\n        }\n    }\n\n    dispose() {\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.accessMaterials().forEach(m => m.dispose())\n        this.mesh?.geometry?.dispose()\n    }\n\n    getFloorHeight(worldX: number, worldZ: number) {\n        const sx = worldX / TILESIZE - this.x\n        const sy = worldZ / TILESIZE - this.y\n        const dy0 = Surface.interpolate(this.topLeftHeightOffset, this.topRightHeightOffset, sx)\n        const dy1 = Surface.interpolate(this.bottomLeftHeightOffset, this.bottomRightHeightOffset, sx)\n        return Surface.interpolate(dy0, dy1, sy) * TILESIZE\n    }\n\n    private static interpolate(y0: number, y1: number, x: number): number {\n        return y0 + x * (y1 - y0)\n    }\n\n    get neighbors(): Surface[] {\n        return [this.terrain.getSurface(this.x - 1, this.y), this.terrain.getSurface(this.x, this.y - 1),\n            this.terrain.getSurface(this.x + 1, this.y), this.terrain.getSurface(this.x, this.y + 1)]\n    }\n\n    makeRubble(containedOre: number = 0) {\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += containedOre\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.updateTexture()\n    }\n\n    setBuilding(building: BuildingEntity) {\n        this.building = building\n        this.updateGraphWalk()\n    }\n\n    getGraphWalkWeight(): number {\n        return this.isWalkable() ? this.hasRubble() ? 4 : 1 : 0\n    }\n\n    setHasPower(state: boolean, recursive: boolean) {\n        if (this.hasPower === state) return\n        this.hasPower = state\n        this.updateTexture()\n        if (recursive) this.neighbors.forEach((n) => n.isPath() && n.setHasPower(state, recursive))\n    }\n\n    canPlaceFence(): boolean { // TODO performance this can be cached\n        return (this.surfaceType === SurfaceType.GROUND || this.isPath()) && !this.building && !this.fence &&\n            [1, 2].some((n) => {\n                return !!this.terrain.getSurface(this.x - n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y - n).building ||\n                    !!this.terrain.getSurface(this.x + n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y + n).building ||\n                    !!this.terrain.getSurface(this.x - n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y - n).fence ||\n                    !!this.terrain.getSurface(this.x + n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y + n).fence\n            })\n    }\n\n    createDrillJob(): DrillJob {\n        if (!this.drillJob) {\n            this.drillJob = new DrillJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.drillJob))\n        }\n        return this.drillJob\n    }\n\n    createReinforceJob(): ReinforceJob {\n        if (!this.reinforceJob) {\n            this.reinforceJob = new ReinforceJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.reinforceJob))\n        }\n        return this.reinforceJob\n    }\n\n    createDynamiteJob(): CarryDynamiteJob {\n        if (!this.dynamiteJob) {\n            const targetBuilding = GameState.getClosestBuildingByType(this.getCenterWorld(), EntityType.TOOLSTATION) // XXX performance cache this\n            if (!targetBuilding) throw 'Could not find toolstation to spawn dynamite'\n            const dynamite = new Dynamite(this.worldMgr, this.sceneMgr, this)\n            dynamite.addToScene(targetBuilding.getDropPosition2D(), targetBuilding.getHeading())\n            this.dynamiteJob = new CarryDynamiteJob(dynamite)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.dynamiteJob))\n        }\n        return this.dynamiteJob\n    }\n\n    createClearRubbleJob(): ClearRubbleJob {\n        if (!this.clearRubbleJob) {\n            this.clearRubbleJob = new ClearRubbleJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.clearRubbleJob))\n        }\n        return this.clearRubbleJob\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\n\nexport class TerrainPath {\n\n    target: PathTarget = null\n    locations: Vector2[] = []\n    lengthSq: number = 0\n\n    constructor(target: PathTarget, locations: Vector2[] | Vector2) {\n        this.target = target\n        this.locations = Array.isArray(locations) ? locations : [locations]\n        for (let c = 0; c < this.locations.length - 1; c++) {\n            const start = this.locations[c]\n            const end = this.locations[c + 1]\n            this.lengthSq += start.distanceToSquared(end)\n        }\n    }\n\n    addLocation(location: Vector2): TerrainPath {\n        this.locations.push(location)\n        if (this.locations.length > 1) {\n            this.lengthSq += this.locations[this.locations.length - 2].distanceToSquared(location)\n        }\n        return this\n    }\n\n    get targetPosition(): Vector2 {\n        return this.locations[this.locations.length - 1] || null\n    }\n\n    get firstLocation(): Vector2 {\n        return this.locations[0] || null\n    }\n\n}\n","import { Group, Vector2, Vector3 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { EntityAddedEvent } from '../../../event/WorldEvents'\nimport { TILESIZE } from '../../../params'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntitySuperType } from '../EntityType'\nimport { PathTarget } from '../PathTarget'\nimport { astar, Graph } from './astar'\nimport { Surface } from './Surface'\nimport { SurfaceType } from './SurfaceType'\nimport { TerrainPath } from './TerrainPath'\n\nexport class Terrain {\n\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    textureSet: any = {}\n    width: number = 0\n    height: number = 0\n    surfaces: Surface[][] = []\n    floorGroup: Group = new Group()\n    roofGroup: Group = new Group()\n    graphWalk: Graph = null\n    cachedPaths = new Map<string, TerrainPath>()\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        this.worldMgr = worldMgr\n        this.sceneMgr = sceneMgr\n        this.floorGroup.scale.setScalar(TILESIZE)\n        this.roofGroup.scale.setScalar(TILESIZE)\n        this.roofGroup.visible = false // keep roof hidden unless switched to other camera\n        EventBus.registerEventListener(EventKey.ENTITY_ADDED, (event: EntityAddedEvent) => {\n            if (event.superType !== EntitySuperType.BUILDING) return\n            event.entity.surfaces.forEach((s) => s.neighbors.forEach((n) => n.updateTexture()))\n        })\n    }\n\n    getSurfaceFromWorld(worldPosition: Vector3): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.z)\n    }\n\n    getSurfaceFromWorld2D(worldPosition: Vector2): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.y)\n    }\n\n    getSurfaceFromWorldXZ(worldX: number, worldZ: number): Surface | null {\n        return this.getSurface(worldX / TILESIZE, worldZ / TILESIZE)\n    }\n\n    getSurface(x, y): Surface {\n        x = Math.floor(x)\n        y = Math.floor(y)\n        return this.getSurfaceOrNull(x, y) || new Surface(this, SurfaceType.SOLID_ROCK, x, y, 0)\n    }\n\n    getSurfaceOrNull(x, y): Surface | null {\n        if (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n            return this.surfaces[x][y]\n        } else {\n            return null\n        }\n    }\n\n    updateSurfaceMeshes(force: boolean = false) {\n        this.forEachSurface((s) => s.updateMesh(force))\n        this.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n        this.resetGraphWalk()\n    }\n\n    resetGraphWalk() {\n        this.graphWalk.init()\n        this.cachedPaths.clear()\n        console.log('Cached paths cleared')\n    }\n\n    findPath(start: Vector2, target: PathTarget): TerrainPath {\n        const end = target.targetLocation\n        const gridStartX = Math.floor(start.x * 3 / TILESIZE)\n        const gridStartY = Math.floor(start.y * 3 / TILESIZE)\n        const gridEndX = Math.floor(end.x * 3 / TILESIZE)\n        const gridEndY = Math.floor(end.y * 3 / TILESIZE)\n        if (gridStartX === gridEndX && gridStartY === gridEndY) {\n            return new TerrainPath(target, end)\n        }\n        const cacheIdentifier = gridStartX + '/' + gridStartY + ' -> ' + gridEndX + '/' + gridEndY\n        const cachedPath = this.cachedPaths.get(cacheIdentifier)\n        if (cachedPath) {\n            return cachedPath.addLocation(end)\n        } else {\n            return this.searchPath(gridStartX, gridStartY, gridEndX, gridEndY, target, cacheIdentifier)\n        }\n    }\n\n    private searchPath(gridStartX: number, gridStartY: number, gridEndX: number, gridEndY: number, target: PathTarget, cacheIdentifier: string): TerrainPath {\n        const startNode = this.graphWalk.grid[gridStartX][gridStartY]\n        const endNode = this.graphWalk.grid[gridEndX][gridEndY]\n        const worldPath = astar.search(this.graphWalk, startNode, endNode).map((n) => Terrain.gridNodeToWorldPos(n))\n        if (worldPath.length < 1) return null // no path found\n        // replace last surface center with actual target position\n        worldPath.pop()\n        worldPath.push(target.targetLocation)\n        this.cachedPaths.set(cacheIdentifier, new TerrainPath(target, worldPath.slice(0, -1))) // cache shallow copy to avoid interference\n        return new TerrainPath(target, worldPath)\n    }\n\n    private static gridNodeToWorldPos(gridNode) {\n        return new Vector2(Math.random(), Math.random()).divideScalar(2).add(gridNode).multiplyScalar(TILESIZE / 3)\n    }\n\n    findFallInOrigin(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isReinforcable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isReinforcable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isReinforcable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isReinforcable()) return [bottomSurface.x, bottomSurface.y]\n        const leftSurface2 = this.getSurface(x - 1, y)\n        if (leftSurface2.isDigable()) return [leftSurface2.x, leftSurface2.y]\n        const topSurface2 = this.getSurface(x, y - 1)\n        if (topSurface2.isDigable()) return [topSurface2.x, topSurface2.y]\n        const rightSurface2 = this.getSurface(x + 1, y)\n        if (rightSurface2.isDigable()) return [rightSurface2.x, rightSurface2.y]\n        const bottomSurface2 = this.getSurface(x, y + 1)\n        if (bottomSurface2.isDigable()) return [bottomSurface2.x, bottomSurface2.y]\n        return null\n    }\n\n    findFallInTarget(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isWalkable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isWalkable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isWalkable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isWalkable()) return [bottomSurface.x, bottomSurface.y]\n        return null\n    }\n\n    dispose() {\n        this.forEachSurface(s => s.dispose())\n    }\n\n    forEachSurface(each: (surface: Surface) => any) {\n        this.surfaces?.forEach((r) => r.forEach((s) => each(s)))\n    }\n\n    countDiggables(): number {\n        let totalDiggables = 0\n        this.forEachSurface((s) => totalDiggables += s.isDigable() ? 1 : 0)\n        return totalDiggables\n    }\n\n    countCrystals(): number {\n        let totalCrystals = 0\n        this.forEachSurface((s) => totalCrystals += s.containedCrystals)\n        return totalCrystals\n    }\n\n    countOres(): number {\n        let totalOres = 0\n        this.forEachSurface((s) => totalOres += s.containedOres)\n        return totalOres\n    }\n\n}\n","import { AmbientLight, Color, Frustum, Mesh, MOUSE, PerspectiveCamera, PointLight, Raycaster, Scene, Vector2, Vector3, WebGLRenderer } from 'three'\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { clearIntervalSafe } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { TILESIZE } from '../params'\nimport { AnimatedMesh } from '../resource/AnimatedMesh'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { DebugHelper } from '../screen/DebugHelper'\nimport { BuildPlacementMarker } from './model/building/BuildPlacementMarker'\nimport { GameState } from './model/GameState'\nimport { Terrain } from './model/map/Terrain'\nimport { Selectable } from './model/Selectable'\nimport { TerrainLoader } from './TerrainLoader'\nimport { WorldManager } from './WorldManager'\n\nexport class SceneManager {\n\n    static meshRegistry: AnimatedMesh[] = []\n\n    maxFps: number = 30 // most animations use 25 fps so this should be enough\n    renderer: WebGLRenderer\n    debugHelper: DebugHelper = new DebugHelper()\n    renderInterval\n    animRequest\n    scene: Scene\n    camera: PerspectiveCamera\n    ambientLight: AmbientLight\n    light: PointLight\n    terrain: Terrain\n    controls: MapControls\n    cursorTorchlight: PointLight\n    buildMarker: BuildPlacementMarker\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.renderer = new WebGLRenderer({antialias: true, canvas: canvas})\n        this.renderer.setClearColor(0x000000)\n\n        this.camera = new PerspectiveCamera(30, canvas.width / canvas.height, 0.1, 5000) // TODO make these params configurable\n\n        this.controls = new MapControls(this.camera, this.renderer.domElement)\n        this.controls.mouseButtons = {LEFT: null, MIDDLE: MOUSE.ROTATE, RIGHT: MOUSE.PAN}\n        // this.controls.maxPolarAngle = Math.PI * 0.45; // TODO dynamically adapt to terrain height at camera position\n\n        this.buildMarker = new BuildPlacementMarker()\n        EventBus.registerEventListener(EventKey.CANCEL_BUILD_MODE, () => {\n            GameState.buildModeSelection = null\n            this.buildMarker.hideAllMarker()\n        })\n    }\n\n    selectEntitiesByRay(rx: number, ry: number) {\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        let intersects = raycaster.intersectObjects(GameState.raiders.map((r) => r.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.buildings.map((b) => b.pickSphere))\n        if (intersects.length < 1 && this.terrain) intersects = raycaster.intersectObjects(this.terrain.floorGroup.children)\n        const selected = []\n        if (intersects.length > 0) {\n            const userData = intersects[0].object.userData\n            if (userData && userData.hasOwnProperty('selectable')) {\n                const selectable = userData['selectable']\n                if (selectable) selected.push(selectable)\n            }\n        }\n        GameState.selectEntities(selected)\n    }\n\n    selectEntitiesInFrustum(r1x: number, r1y: number, r2x: number, r2y: number) {\n        const startPoint = new Vector3(r1x, r1y, 0.5)\n        const endPoint = new Vector3(r2x, r2y, 0.5)\n        // Avoid invalid frustum\n        if (startPoint.x === endPoint.x) {\n            endPoint.x += Number.EPSILON\n        }\n        if (startPoint.y === endPoint.y) {\n            endPoint.y += Number.EPSILON\n        }\n        // update camera\n        this.camera.updateProjectionMatrix()\n        this.camera.updateMatrixWorld()\n        // update frustum\n        const tmpPoint = new Vector3()\n        tmpPoint.copy(startPoint)\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x)\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y)\n        endPoint.x = Math.max(startPoint.x, endPoint.x)\n        endPoint.y = Math.min(startPoint.y, endPoint.y)\n\n        const vecNear = new Vector3()\n        const vecTopLeft = new Vector3()\n        const vecTopRight = new Vector3()\n        const vecDownRight = new Vector3()\n        const vecDownLeft = new Vector3()\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld)\n        vecTopLeft.copy(tmpPoint)\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0)\n        vecDownRight.copy(endPoint)\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0)\n\n        vecTopLeft.unproject(this.camera)\n        vecTopRight.unproject(this.camera)\n        vecDownRight.unproject(this.camera)\n        vecDownLeft.unproject(this.camera)\n\n        const vectemp1 = new Vector3()\n        const vectemp2 = new Vector3()\n        const vectemp3 = new Vector3()\n        vectemp1.copy(vecTopLeft).sub(vecNear)\n        vectemp2.copy(vecTopRight).sub(vecNear)\n        vectemp3.copy(vecDownRight).sub(vecNear)\n        vectemp1.normalize()\n        vectemp2.normalize()\n        vectemp3.normalize()\n\n        const deep = Number.MAX_VALUE\n        vectemp1.multiplyScalar(deep)\n        vectemp2.multiplyScalar(deep)\n        vectemp3.multiplyScalar(deep)\n        vectemp1.add(vecNear)\n        vectemp2.add(vecNear)\n        vectemp3.add(vecNear)\n\n        const frustum = new Frustum()\n        const planes = frustum.planes\n\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight)\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight)\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear)\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear)\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft)\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1)\n        planes[5].normal.multiplyScalar(-1)\n\n        let entities: Selectable[] = GameState.raiders.filter((r) => frustum.containsPoint(r.getSelectionCenter()))\n        if (entities.length < 1) entities = GameState.buildings.filter((b) => frustum.containsPoint(b.getSelectionCenter()))\n        GameState.selectEntities(entities)\n    }\n\n    setupScene(levelConf: LevelEntryCfg, worldMgr: WorldManager) {\n        this.scene = new Scene()\n\n        const ambientRgb = ResourceManager.cfg('Main', 'AmbientRGB') || [10, 10, 10]\n        const maxAmbRgb = Math.min(255, Math.max(0, ...ambientRgb))\n        const normalizedRgb = ambientRgb.map(v => v / (maxAmbRgb ? maxAmbRgb : 1))\n        const ambientColor = new Color(normalizedRgb[0], normalizedRgb[1], normalizedRgb[2])\n        this.ambientLight = new AmbientLight(ambientColor, 0.4)\n        this.scene.add(this.ambientLight)\n\n        this.cursorTorchlight = new PointLight(0xffffff, 1.5, 4, 1)\n        this.cursorTorchlight.distance *= TILESIZE\n        this.scene.add(this.cursorTorchlight)\n\n        this.scene.add(this.buildMarker.group)\n\n        // create terrain mesh and add it to the scene\n        this.terrain = TerrainLoader.loadTerrain(levelConf, worldMgr, this)\n        this.scene.add(this.terrain.floorGroup)\n\n        // gather level start details for game result score calculation\n        GameState.totalDiggables = this.terrain.countDiggables()\n        GameState.totalCrystals = this.terrain.countCrystals()\n        GameState.totalOres = this.terrain.countOres()\n    }\n\n    startScene() {\n        this.debugHelper.show()\n        this.renderInterval = setInterval(() => {\n            this.animRequest = requestAnimationFrame(() => {\n                this.debugHelper.renderStart()\n                this.renderer.render(this.scene, this.camera)\n                this.debugHelper.renderDone()\n            })\n        }, 1000 / this.maxFps)\n    }\n\n    disposeScene() {\n        this.debugHelper.hide()\n        this.renderInterval = clearIntervalSafe(this.renderInterval)\n        if (this.animRequest) {\n            cancelAnimationFrame(this.animRequest)\n            this.animRequest = null\n        }\n        GameState.remainingDiggables = this.terrain?.countDiggables() || 0\n        this.terrain?.dispose()\n        this.terrain = null\n        SceneManager.meshRegistry.forEach(mesh => mesh.dispose())\n        SceneManager.meshRegistry = []\n    }\n\n    static registerMesh(animatedMesh: AnimatedMesh): Mesh {\n        this.meshRegistry.push(animatedMesh)\n        return animatedMesh.mesh\n    }\n\n    resize(width: number, height: number) {\n        this.renderer.setSize(width, height)\n    }\n\n    getTerrainIntersectionPoint(rx: number, ry: number): Vector2 {\n        if (!this.terrain) return null\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        const intersects = raycaster.intersectObjects(this.terrain.floorGroup.children)\n        return intersects.length > 0 ? new Vector2(intersects[0].point.x, intersects[0].point.z) : null\n    }\n\n    setTorchPosition(position: Vector2) {\n        this.cursorTorchlight.position.copy(this.getFloorPosition(position))\n        this.cursorTorchlight.position.y += 2 * TILESIZE\n    }\n\n    getFloorPosition(world: Vector2) {\n        const floorY = this.terrain.getSurfaceFromWorldXZ(world.x, world.y).getFloorHeight(world.x, world.y)\n        return new Vector3(world.x, floorY, world.y)\n    }\n\n    getTerrainHeight(worldX: number, worldZ: number): number {\n        const raycaster = new Raycaster(new Vector3(Number(worldX), 3 * TILESIZE, Number(worldZ)), new Vector3(0, -1, 0))\n        const intersect = raycaster.intersectObject(this.terrain.floorGroup, true)\n        if (intersect.length > 0) {\n            return intersect[0].point.y\n        } else {\n            console.warn('could not determine terrain height for ' + worldX + '/' + worldZ)\n            return 0\n        }\n    }\n\n}\n","export function getPath(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n","import { createContext, createDummyImgData, getPixel, setPixel } from './ImageHelper'\n\nexport class BitmapFont {\n\n    charHeight: number\n    letters: ImageData[] = []\n\n    constructor(fontImageData: ImageData, cols = 10, rows = 19) { // font images always consist of 10 columns and 19 rows with last row empty\n        // actually chars are font dependent and have to be externalized in future\n        // maybe CP850 was used... not sure, doesn't fit...\n        const chars = [' ', '!', '\"', '#', '$', '%', '⌵', '`', '(', ')',\n            '*', '+', ',', '-', '.', '/', '0', '1', '2', '3',\n            '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',\n            '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n            'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n            'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[',\n            '\\\\', ']', '^', '_', '\\'', 'a', 'b', 'c', 'd', 'e',\n            'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\n            'z', 'Ä', 'Å', 'Á', 'À', 'Â', 'Ã', 'Ą', 'ä', 'å',\n            'á', 'à', 'â', 'ã', 'ą', 'Ë', 'E̊', 'É', 'È', 'É',\n            'Ę', 'ë', 'e̊', 'é', 'è', 'e̊', 'ę̊', '', '', '',\n            '', '', '', '', '', 'Ö', '', '', '', '',\n            'ö', '', '', '', '', 'Ü', '', '', '', 'ü',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', 'ß', '', '', '', 'Ñ', '', 'ñ',\n            '',\n        ] // XXX complete this character list\n\n        const maxCharWidth = fontImageData.width / cols\n        this.charHeight = fontImageData.height / rows\n\n        function getActualCharacterWidth(imgData) {\n            for (let y = 0; y < imgData.height / rows; y++) { // find non-empty row first\n                let rowPixelIndex = y * 4 * imgData.width\n                if (imgData.data[rowPixelIndex] !== 255 && imgData.data[rowPixelIndex + 2] !== 255) { // red/blue pixels indicate end of character\n                    for (let x = 0; x < maxCharWidth; x++) {\n                        let colPixelIndex = x * 4\n                        if (imgData.data[colPixelIndex] === 255 || imgData.data[colPixelIndex + 2] === 255) { // red/blue pixels indicate end of character\n                            return x\n                        }\n                    }\n                    return maxCharWidth\n                }\n            }\n            return 0\n        }\n\n        for (let i = 0; i < chars.length; i++) {\n            let imgData = this.extractData(fontImageData, (i % 10) * maxCharWidth, Math.floor(i / 10) * this.charHeight, maxCharWidth, this.charHeight)\n            let actualWidth = getActualCharacterWidth(imgData)\n            if (actualWidth > 0) {\n                imgData = this.extractData(imgData, 0, 0, actualWidth, this.charHeight)\n            } else {\n                imgData = createDummyImgData(maxCharWidth, this.charHeight)\n            }\n            this.letters[chars[i]] = imgData\n        }\n    }\n\n    extractData(imgData, startX, startY, width, height): ImageData {\n        const alpha = getPixel(imgData, startX + width - 1, startY + height - 1)\n        const result = new ImageData(width, height)\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const p = getPixel(imgData, startX + x, startY + y)\n                if (p.r === alpha.r && p.g === alpha.g && p.b === alpha.b) p.a = 0 // apply alpha channel\n                setPixel(result, x, y, p.r, p.g, p.b, p.a)\n            }\n        }\n        return result\n    }\n\n    createTextImage(text: string, maxWidth?: number, autoCenter: boolean = true): HTMLCanvasElement {\n        if (text === undefined || text === null || text.length < 1) {\n            // empty text requested, context with width 0 is not allowed, but 1 with alpha is close enough\n            return createContext(1, 1).canvas\n        }\n        text = text.replace(/_/g, ' ')\n        const rows = this.determineRows(text, maxWidth)\n        const width = Math.max(...(rows.map(r => r.width)))\n        const result = new ImageData(width, this.charHeight * rows.length)\n        rows.forEach((row, index) => {\n            const rowX = autoCenter ? Math.round((width - row.width) / 2) : 0\n            const rowY = index * this.charHeight\n            let letterX = 0\n            for (let c = 0; c < row.text.length; c++) {\n                const letterImgData = this.letters[row.text.charAt(c)]\n                if (letterImgData) {\n                    for (let x = letterX; x < letterX + letterImgData.width; x++) {\n                        for (let y = 0; y < letterImgData.height; y++) {\n                            const p = getPixel(letterImgData, x - letterX, y)\n                            setPixel(result, rowX + x, rowY + y, p.r, p.g, p.b, p.a)\n                        }\n                    }\n                    letterX += letterImgData.width\n                } // missing letter issue already reported above\n            }\n        })\n        const img: CanvasRenderingContext2D = createContext(result.width, result.height)\n        img.putImageData(result, 0, 0)\n        return img.canvas\n    }\n\n    private determineRows(text: string, maxWidth?: number): { text: string, width: number }[] {\n        const spaceWidth = this.letters[' '].width\n        const rows: { text: string, width: number }[] = []\n        let rowText = ''\n        let rowWidth = 0\n        text.split(' ').map(word => {\n            let wordWidth = 0\n            for (let c = 0; c < word.length; c++) {\n                const letter = word.charAt(c)\n                const letterImg = this.letters[letter]\n                if (letterImg) {\n                    wordWidth += letterImg.width\n                } else {\n                    console.error('Letter \\'' + letter + '\\' not found in charset! Ignoring it')\n                }\n            }\n            if (rowWidth > 0) {\n                if (!maxWidth || rowWidth + spaceWidth + wordWidth < maxWidth) {\n                    rowText += ' ' + word\n                    rowWidth += spaceWidth + wordWidth\n                } else {\n                    rows.push({text: rowText, width: rowWidth})\n                    rowText = word\n                    rowWidth = wordWidth\n                }\n            } else {\n                rowText += word\n                rowWidth += wordWidth\n            }\n            return wordWidth\n        })\n        if (rowWidth > 0) rows.push({text: rowText, width: rowWidth})\n        return rows\n    }\n}\n","import { GameStatsCfg } from '../cfg/GameStatsCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { createContext, createDummyImgData } from '../core/ImageHelper'\nimport { iGet } from './wadworker/WadUtil'\n\nexport class ResourceCache {\n\n    static configuration: any = {}\n    static resourceByName: Map<string, any> = new Map()\n    static fontCache: Map<string, BitmapFont> = new Map()\n    static stats: GameStatsCfg\n\n    static cfg(...keys: string[]): any {\n        return iGet(this.configuration, ...keys)\n    }\n\n    static getResource(resourceName: string): any {\n        const lName = resourceName ? resourceName.toString().toLowerCase() : null\n        return this.resourceByName.get(lName) || null\n    }\n\n    static getImageData(imageName: string): ImageData {\n        if (!imageName) throw 'imageName must not be undefined, null or empty - was ' + imageName\n        return this.resourceByName.getOrUpdate((imageName.toLowerCase()), () => {\n            console.error('Image \\'' + imageName + '\\' unknown! Using placeholder image instead')\n            return createDummyImgData(64, 64)\n        })\n    }\n\n    static getImage(imageName: string): HTMLCanvasElement {\n        const imgData = this.getImageData(imageName)\n        const context: CanvasRenderingContext2D = createContext(imgData.width, imgData.height)\n        context.putImageData(imgData, 0, 0)\n        return context.canvas\n    }\n\n    static getImageOrNull(imageName: string): HTMLCanvasElement | null {\n        return imageName ? this.getImage(imageName) : null\n    }\n\n    static getBitmapFont(name: string): BitmapFont {\n        return this.fontCache.getOrUpdate(name, () => {\n            const fontImageData = this.getResource(name)\n            if (!fontImageData) throw 'Could not load font image data for: ' + name\n            return new BitmapFont(fontImageData)\n        })\n    }\n\n    static getDefaultFont() {\n        return this.getBitmapFont('Interface/Fonts/Font5_Hi.bmp')\n    }\n\n}\n","export class InitLoadingMessage {\n\n    wad0FileUrl: string\n    wad1FileUrl: string\n\n    constructor(wad0FileUrl: string, wad1FileUrl: string) {\n        this.wad0FileUrl = wad0FileUrl\n        this.wad1FileUrl = wad1FileUrl\n    }\n\n}\n","import { RepeatWrapping, Texture } from 'three'\nimport { createDummyImgData } from '../core/ImageHelper'\nimport { getFilename } from '../core/Util'\nimport { AnimationEntityType } from '../game/model/anim/AnimationEntityType'\nimport { AnimEntityLoader } from './AnimEntityLoader'\nimport { ResourceCache } from './ResourceCache'\nimport { InitLoadingMessage } from './wadworker/InitLoadingMessage'\nimport { WadWorkerMessage } from './wadworker/WadWorkerMessage'\nimport { WorkerMessageType } from './wadworker/WorkerMessageType'\n\nexport class ResourceManager extends ResourceCache {\n\n    static worker: Worker = new Worker(new URL('./wadworker/WadWorker', import.meta.url))\n\n    static startLoadingFromCache() {\n        return this.startLoading(null)\n    }\n\n    static startLoadingFromUrl(wad0Url: string, wad1Url: string) {\n        return this.startLoading(new InitLoadingMessage(wad0Url, wad1Url))\n    }\n\n    private static startLoading(msg: InitLoadingMessage) {\n        this.worker.onmessage = (event) => {\n            const msg: WadWorkerMessage = event.data\n            if (msg.type === WorkerMessageType.ASSET) {\n                this.resourceByName.set(msg.assetName.toLowerCase(), msg.assetObj)\n                const alphaIndexMatch = msg.assetName.toLowerCase().match(/(.*a)\\d\\d\\d(_.+)/)\n                if (alphaIndexMatch) this.resourceByName.set(alphaIndexMatch[1] + alphaIndexMatch[2], msg.assetObj)\n                this.onAssetLoaded()\n            } else if (msg.type === WorkerMessageType.MSG) {\n                this.onMessage(msg.text)\n            } else if (msg.type === WorkerMessageType.CFG) {\n                this.configuration = msg.cfg\n                this.stats = msg.stats\n                this.onInitialLoad(msg.totalResources)\n            } else if (msg.type === WorkerMessageType.CACHE_MISS) {\n                this.onCacheMissed()\n            } else if (msg.type === WorkerMessageType.DONE) {\n                console.log('Loading of about ' + msg.totalResources + ' assets complete! Total load time: ' + msg.loadingTimeSeconds + ' seconds.')\n                this.onLoadDone()\n            }\n        }\n        this.worker.postMessage(msg)\n    }\n\n    static onMessage: (msg: string) => any = (msg: string) => {\n        console.log(msg)\n    }\n\n    static onCacheMissed: () => any = () => {\n        console.log('Worker missed cache')\n    }\n\n    static onInitialLoad: (totalResources: number) => any = () => {\n        console.log('Initial loading done.')\n    }\n\n    static onAssetLoaded: () => any = () => {\n    }\n\n    static onLoadDone: () => any = () => {\n    }\n\n    static filterTextureSequenceNames(basename: string): string[] {\n        const lBasename = basename.toLowerCase()\n        const result = []\n        this.resourceByName.forEach((res, name) => {\n            if (name.startsWith(lBasename)) result.push(name)\n        })\n        if (result.length > 0) {\n            return result\n        } else if (!lBasename.startsWith('world/shared/')) {\n            return this.filterTextureSequenceNames('world/shared/' + getFilename(basename))\n        } else {\n            console.warn('Texture sequence not found: ' + basename)\n            return null\n        }\n    }\n\n    static getTexture(textureName): Texture {\n        if (!textureName || textureName.length === 0) {\n            throw 'textureName must not be undefined, null or empty - was ' + textureName\n        }\n        const lTextureName = textureName.toLowerCase()\n        const imgData = this.resourceByName.getOrUpdate(lTextureName, () => {\n            const lSharedTextureName = 'world/shared/' + getFilename(lTextureName)\n            return this.resourceByName.getOrUpdate(lSharedTextureName, () => {\n                console.warn('Texture \\'' + textureName + '\\' (' + lTextureName + ', ' + lSharedTextureName + ') unknown! Using placeholder texture instead')\n                return createDummyImgData(64, 64)\n            })\n        })\n        const texture = new Texture(imgData, Texture.DEFAULT_MAPPING, RepeatWrapping, RepeatWrapping)\n        texture.needsUpdate = true\n        return texture\n    }\n\n    static getAnimationEntityType(aeFilename: string): AnimationEntityType {\n        let cfgRoot = this.getResource(aeFilename)\n        if (!cfgRoot) throw 'Could not get animation entity type for: ' + aeFilename\n        return AnimEntityLoader.loadModels(aeFilename, cfgRoot)\n    }\n\n}\n","import { AnimationEntityType } from '../game/model/anim/AnimationEntityType'\nimport { AnimClip } from '../game/model/anim/AnimClip'\nimport { SceneManager } from '../game/SceneManager'\nimport { LWOLoader } from './LWOLoader'\nimport { LWSCLoader } from './LWSCLoader'\nimport { ResourceManager } from './ResourceManager'\nimport { getPath, iGet } from './wadworker/WadUtil'\n\nexport class AnimEntityLoader {\n\n    static loadModels(url, root): AnimationEntityType {\n        const path = getPath(url)\n\n        const entityType = new AnimationEntityType()\n\n        entityType.carryNullName = iGet(root, 'CarryNullName')\n        entityType.depositNullName = iGet(root, 'DepositNullName')\n        entityType.toolNullName = iGet(root, 'ToolNullName')\n\n        // TODO load other poly quality models (if available)\n        // let mediumPoly = iGet(root, 'MediumPoly');\n        // if (mediumPoly) {\n        //     Object.keys(mediumPoly).forEach((key) => {\n        //         const polyname = mediumPoly[key];\n        //         const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //         const polyfile = path + polyname + '.lwo';\n        //         console.log('polyfile');\n        //         console.log(polyfile);\n        //         // new LWOLoader().load(polyfile, (model) => {\n        //         //     mediumPoly[polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //         // }, undefined, () => {\n        //         //     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //         // });\n        //     });\n        //     Object.keys(mediumPoly).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete mediumPoly[polykey]);\n        // }\n\n        const highPoly = iGet(root, 'highpoly')\n        if (highPoly) {\n            entityType.highPoly = {}\n            Object.keys(highPoly).forEach((key) => {\n                const polyname = highPoly[key] + '.lwo'\n                const polykey = key.startsWith('!') ? key.slice(1) : key\n                const lwoBuffer = ResourceManager.getResource(path + polyname)\n                entityType.highPoly[polykey] = SceneManager.registerMesh(new LWOLoader(path).parse(lwoBuffer))\n            })\n        }\n\n        // let fPoly = (root)['fppoly'];\n        // if (fPoly) {\n        //     Object.keys(fPoly).forEach((camera) => {\n        //         Object.keys(fPoly[camera]).forEach((key) => {\n        //             const polyname = fPoly[camera][key];\n        //             const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //             if (polyname !== 'null') {\n        //                 const polyfile = path + polyname + '.lwo';\n        //                 new LWOLoader().load(polyfile, (model) => {\n        //                     fPoly[camera][polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //                 }, undefined, () => {\n        //                     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //                 });\n        //             } else {\n        //                 fPoly[camera][key] = {polyname: polyname, polyfile: null, model: new Group()};\n        //             }\n        //         });\n        //         Object.keys(fPoly[camera]).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete fPoly[polykey][camera]);\n        //     });\n        // }\n\n        const activities = iGet(root, 'Activities')\n        if (activities) {\n            Object.keys(activities).forEach((activity) => {\n                try {\n                    let keyname = iGet(activities, activity)\n                    const act: { file: string, transcoef: number, lwsfile: boolean, animation: AnimClip } = iGet(root, keyname)\n                    const file = iGet(act, 'FILE')\n                    const isLws = iGet(act, 'LWSFILE') === true\n                    const transcoef = iGet(act, 'TRANSCOEF')\n                    const looping = iGet(act, 'LOOPING') === true\n                    if (isLws) {\n                        const content = ResourceManager.getResource(path + file + '.lws')\n                        act.animation = new LWSCLoader(path).parse(content)\n                        act.animation.looping = looping\n                        act.animation.transcoef = transcoef ? Number(transcoef) : 1\n                        entityType.activities.set(activity.toLowerCase(), act)\n                    } else {\n                        console.error('Found activity which is not an LWS file')\n                    }\n                } catch (e) {\n                    console.error(e)\n                    console.log(root)\n                    console.log(activities)\n                    console.log(activity)\n                }\n            })\n        }\n\n        return entityType\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class MoveJob extends Job {\n\n    target: PathTarget[]\n\n    constructor(target: Vector2) {\n        super(JobType.MOVE)\n        this.target = [new PathTarget(target)]\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.target\n    }\n\n}\n","import { Vector3 } from 'three'\n\nexport class EntityStep {\n\n    vec: Vector3 = null\n    targetReached: boolean = false\n\n    constructor(vec: Vector3) {\n        this.vec = vec\n    }\n\n}\n","import { Vector2, Vector3 } from 'three'\nimport { MovableEntityStats } from '../../cfg/MovableEntityStats'\nimport { JOB_ACTION_RANGE } from '../../params'\nimport { SceneManager } from '../SceneManager'\nimport { WorldManager } from '../WorldManager'\nimport { AnimEntityActivity } from './activities/AnimEntityActivity'\nimport { AnimEntity } from './anim/AnimEntity'\nimport { EntityStep } from './EntityStep'\nimport { EntitySuperType, EntityType } from './EntityType'\nimport { TerrainPath } from './map/TerrainPath'\nimport { MoveState } from './MoveState'\nimport { PathTarget } from './PathTarget'\n\nexport abstract class MovableEntity extends AnimEntity {\n\n    currentPath: TerrainPath = null\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, superType: EntitySuperType, entityType: EntityType, aeFilename: string) {\n        super(worldMgr, sceneMgr, superType, entityType, aeFilename)\n    }\n\n    abstract get stats(): MovableEntityStats\n\n    getPosition(): Vector3 {\n        return new Vector3(this.group.position.x, this.group.position.y, this.group.position.z)\n    }\n\n    getPosition2D(): Vector2 {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    getSpeed(): number {\n        return this.stats.RouteSpeed[this.level] * (this.animation?.transcoef || 1) * (this.isOnPath() ? this.stats.PathCoef : 1)\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        if (target.length < 1) console.warn('No targets given')\n        if (!this.currentPath || !target.some((t) => t.targetLocation.equals(this.currentPath.target.targetLocation))) {\n            const paths = target.map((t) => this.findPathToTarget(t))\n                .sort((l, r) => l.lengthSq - r.lengthSq)\n            this.currentPath = paths.length > 0 ? paths[0] : null\n            if (!this.currentPath) return MoveState.TARGET_UNREACHABLE\n        }\n        const nextLocation = this.currentPath.firstLocation\n        this.group.lookAt(new Vector3(nextLocation.x, this.group.position.y, nextLocation.y))\n        const step = this.determineStep()\n        if (step.targetReached || this.currentPath.target.isInArea(this.getPosition2D())) {\n            return MoveState.TARGET_REACHED\n        } else {\n            this.group.position.add(step.vec)\n            this.changeActivity(this.getRouteActivity()) // only change when actually moving\n            return MoveState.MOVED\n        }\n    }\n\n    abstract getRouteActivity(): AnimEntityActivity\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return new TerrainPath(target, target.targetLocation)\n    }\n\n    determineStep(): EntityStep {\n        const step = this.getEntityStep(this.currentPath.firstLocation)\n        const stepLengthSq = step.vec.lengthSq()\n        const entitySpeed = this.getSpeed() // TODO use average speed between current and target position\n        if (this.currentPath.locations.length > 1) {\n            if (stepLengthSq < entitySpeed * entitySpeed) {\n                this.currentPath.locations.shift()\n                return this.determineStep()\n            }\n        } else if (stepLengthSq < JOB_ACTION_RANGE * JOB_ACTION_RANGE) {\n            step.targetReached = true\n        }\n        step.vec.setLength(Math.min(entitySpeed, JOB_ACTION_RANGE))\n        return step\n    }\n\n    getEntityStep(target: Vector2): EntityStep {\n        const targetWorld = this.sceneMgr.getFloorPosition(target)\n        targetWorld.y += this.floorOffset\n        return new EntityStep(targetWorld.sub(this.group.position))\n    }\n\n    isOnRubble() {\n        return this.sceneMgr.terrain.getSurfaceFromWorld(this.group.position).hasRubble()\n    }\n\n    isOnPath(): boolean {\n        return this.sceneMgr.terrain.getSurfaceFromWorld(this.group.position).isPath()\n    }\n\n}\n","import { Vector2, Vector3 } from 'three'\nimport { clearIntervalSafe } from '../../core/Util'\nimport { SelectionEvent } from '../../event/LocalEvents'\nimport { NATIVE_FRAMERATE } from '../../params'\nimport { SceneManager } from '../SceneManager'\nimport { WorldManager } from '../WorldManager'\nimport { MaterialEntity } from './collect/MaterialEntity'\nimport { EntitySuperType, EntityType } from './EntityType'\nimport { Job } from './job/Job'\nimport { MovableEntity } from './MovableEntity'\nimport { PathTarget } from './PathTarget'\nimport { RaiderTool } from './raider/RaiderTool'\nimport { RaiderTraining } from './raider/RaiderTraining'\nimport { Selectable, SelectionType } from './Selectable'\n\nexport abstract class FulfillerEntity extends MovableEntity implements Selectable {\n\n    selectionType: SelectionType\n    selected: boolean\n    workInterval = null\n    job: Job = null\n    followUpJob: Job = null\n    carries: MaterialEntity = null\n    jobWorkplaces: PathTarget[] = []\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, superType: EntitySuperType, entityType: EntityType, aeFilename: string, selectionType: SelectionType) {\n        super(worldMgr, sceneMgr, superType, entityType, aeFilename)\n        this.selectionType = selectionType\n        this.group.userData = {'selectable': this}\n        this.workInterval = setInterval(this.work.bind(this), 1000 / NATIVE_FRAMERATE) // TODO do not use interval, make work trigger itself (with timeout/interval) until work is done\n    }\n\n    resetWorkInterval() {\n        this.workInterval = clearIntervalSafe(this.workInterval)\n    }\n\n    abstract work()\n\n    dropItem() {\n        if (!this.carries) return\n        const position = this.getPosition()\n        if (this.carryJoint) {\n            this.carryJoint.remove(this.carries.group)\n            this.carryJoint.getWorldPosition(position)\n        }\n        this.carries.addToScene(new Vector2(position.x, position.z), null)\n        this.carries = null\n    }\n\n    pickupItem(item: MaterialEntity) {\n        this.carries = item\n        if (this.carryJoint) this.carryJoint.add(this.carries.group)\n        this.carries.group.position.set(0, 0, 0)\n    }\n\n    setJob(job: Job, followUpJob: Job = null) {\n        if (this.job !== job) this.stopJob()\n        this.job = job\n        if (this.job) this.job.assign(this)\n        this.followUpJob = followUpJob\n        if (this.followUpJob) this.followUpJob.assign(this)\n        this.jobWorkplaces = this.job.getWorkplaces()\n    }\n\n    stopJob() {\n        this.dropItem()\n        if (!this.job) return\n        this.job.unassign(this)\n        if (this.followUpJob) this.followUpJob.unassign(this)\n        this.job = null\n        this.followUpJob = null\n        this.jobWorkplaces = []\n        this.changeActivity()\n    }\n\n    abstract hasTool(tool: RaiderTool)\n\n    abstract hasTraining(training: RaiderTraining)\n\n    getSelectionType(): SelectionType {\n        return this.selectionType\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    abstract select(): SelectionEvent;\n\n    abstract getSelectionCenter(): Vector3;\n\n    abstract addTool(tool: RaiderTool)\n\n    abstract addTraining(skill: RaiderTraining)\n\n}\n","import { MathUtils, Vector2, Vector3 } from 'three'\nimport { getRandom, getRandomInclusive } from '../../../core/Util'\nimport { EventBus } from '../../../event/EventBus'\nimport { RaiderSelected, SelectionEvent } from '../../../event/LocalEvents'\nimport { EntityAddedEvent, OreFoundEvent } from '../../../event/WorldEvents'\nimport { CrystalFoundEvent, RaiderDiscoveredEvent } from '../../../event/WorldLocationEvent'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { BaseActivity } from '../activities/BaseActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { Crystal } from '../collect/Crystal'\nimport { Ore } from '../collect/Ore'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { GameState } from '../GameState'\nimport { JobState } from '../job/JobState'\nimport { JobType } from '../job/JobType'\nimport { DrillJob } from '../job/surface/DrillJob'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { TerrainPath } from '../map/TerrainPath'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { SelectionType } from '../Selectable'\nimport { RaiderTool } from './RaiderTool'\nimport { RaiderTraining } from './RaiderTraining'\nimport degToRad = MathUtils.degToRad\n\nexport class Raider extends FulfillerEntity {\n\n    tools: Map<RaiderTool, boolean> = new Map()\n    trainings: Map<RaiderTraining, boolean> = new Map()\n    slipped: boolean = false\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntitySuperType.RAIDER, EntityType.PILOT, 'mini-figures/pilot/pilot.ae', SelectionType.RAIDER)\n        this.tools.set(RaiderTool.DRILL, true)\n    }\n\n    get stats() {\n        return ResourceManager.stats.Pilot\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.sceneMgr.terrain.findPath(this.getPosition2D(), target)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.raidersUndiscovered.remove(this)\n        GameState.raiders.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(this))\n        EventBus.publishEvent(new RaiderDiscoveredEvent(this.getPosition()))\n    }\n\n    select(): SelectionEvent {\n        this.selectionFrame.visible = !this.slipped\n        if (this.selected || this.slipped) return null\n        this.selected = true\n        this.changeActivity()\n        return new RaiderSelected(this)\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    isDriving(): boolean {\n        return false // TODO implement vehicles\n    }\n\n    getRouteActivity(): BaseActivity {\n        if (this.isOnRubble()) {\n            return !!this.carries ? RaiderActivity.CarryRubble : RaiderActivity.routeRubble\n        } else {\n            return !!this.carries ? RaiderActivity.Carry : RaiderActivity.Route\n        }\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        const result = super.moveToClosestTarget(target)\n        this.job.setActualWorkplace(this.currentPath?.target)\n        if (result === MoveState.MOVED) {\n            GameState.getNearbySpiders(this).some((spider) => {\n                if (this.group.position.distanceToSquared(spider.group.position) < this.radiusSq + spider.radiusSq) {\n                    this.slip()\n                    spider.onDeath()\n                    return true\n                }\n            })\n        } else if (result === MoveState.TARGET_UNREACHABLE) {\n            console.log('Entity could not move to job target, stopping job')\n            this.stopJob()\n        }\n        return result\n    }\n\n    slip() {\n        if (getRandomInclusive(0, 100) < 10) this.stopJob()\n        this.dropItem()\n        this.slipped = true\n        this.changeActivity(RaiderActivity.Slip, () => {\n            this.slipped = false\n        })\n    }\n\n    moveToClosestWorkplace(): boolean {\n        return this.moveToClosestTarget(this.jobWorkplaces) === MoveState.TARGET_REACHED\n    }\n\n    work() {\n        if (!this.job || this.selected || this.slipped) return\n        if (this.job.jobstate !== JobState.INCOMPLETE) {\n            this.stopJob()\n            return\n        }\n        if (this.job.type === JobType.DRILL) {\n            if (this.moveToClosestWorkplace()) {\n                const surfJob = this.job as DrillJob\n                let drillTimeMs = this.getDrillTime(surfJob.surface.surfaceType)\n                const focusPoint = surfJob.surface.getCenterWorld()\n                focusPoint.y = this.group.position.y\n                this.group.lookAt(focusPoint)\n                this.changeActivity(RaiderActivity.Drill, () => {\n                    if (surfJob.surface.seamLevel > 0) {\n                        surfJob.surface.seamLevel--\n                        const vec = new Vector2().copy(this.getPosition2D()).sub(surfJob.surface.getCenterWorld2D())\n                            .multiplyScalar(0.3 + getRandom(3) / 10)\n                            .rotateAround(new Vector2(0, 0), degToRad(-10 + getRandom(20)))\n                            .add(this.getPosition2D())\n                        if (surfJob.surface.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                            const crystal = this.worldMgr.placeMaterial(new Crystal(this.worldMgr, this.sceneMgr), vec)\n                            EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n                        } else if (surfJob.surface.surfaceType === SurfaceType.ORE_SEAM) {\n                            this.worldMgr.placeMaterial(new Ore(this.worldMgr, this.sceneMgr), vec)\n                            EventBus.publishEvent(new OreFoundEvent())\n                        }\n                        this.changeActivity()\n                    } else {\n                        this.completeJob()\n                    }\n                }, drillTimeMs)\n            }\n        } else {\n            const carryItem = this.job.getCarryItem()\n            if (carryItem && this.carries !== carryItem) {\n                this.dropItem()\n                if (this.moveToClosestTarget([new PathTarget(carryItem.getPosition2D())])) { // XXX cache item path target\n                    this.changeActivity(RaiderActivity.Collect, () => {\n                        this.pickupItem(carryItem)\n                    })\n                }\n            } else if (this.moveToClosestWorkplace()) {\n                if (this.job.isReadyToComplete()) {\n                    const workActivity = this.job.getWorkActivity() || this.getDefaultActivity()\n                    this.changeActivity(workActivity, () => {\n                        this.completeJob()\n                    }, this.job.getWorkDuration())\n                } else {\n                    this.changeActivity()\n                }\n            }\n        }\n    }\n\n    private getDrillTime(surfaceType: SurfaceType) {\n        let drillTimeMs = null\n        if (surfaceType === SurfaceType.HARD_ROCK) {\n            drillTimeMs = this.stats.HardDrillTime[this.level] * 1000\n        } else if (surfaceType === SurfaceType.LOOSE_ROCK) {\n            drillTimeMs = this.stats.LooseDrillTime[this.level] * 1000\n        } else if (surfaceType === SurfaceType.DIRT) {\n            drillTimeMs = this.stats.SoilDrillTime[this.level] * 1000\n        } else if (surfaceType === SurfaceType.ORE_SEAM ||\n            surfaceType === SurfaceType.CRYSTAL_SEAM) {\n            drillTimeMs = this.stats.SeamDrillTime[this.level] * 1000\n        }\n        drillTimeMs = drillTimeMs || 0\n        if (!drillTimeMs) console.warn('According to cfg this entity cannot drill this material')\n        return drillTimeMs\n    }\n\n    private completeJob() {\n        this.job?.onJobComplete()\n        if (this.job?.jobstate === JobState.INCOMPLETE) return\n        if (this.job) this.job.unassign(this)\n        this.job = this.followUpJob\n        this.followUpJob = null\n        this.jobWorkplaces = this.job?.getWorkplaces() || []\n        this.changeActivity()\n    }\n\n    getDefaultActivity(): BaseActivity {\n        return this.carries ? RaiderActivity.CarryStand : super.getDefaultActivity()\n    }\n\n    beamUp() {\n        this.stopJob()\n        super.beamUp()\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        GameState.raiders.remove(this)\n    }\n\n    hasTool(tool: RaiderTool) {\n        return !tool || this.tools.has(tool)\n    }\n\n    hasTraining(training: RaiderTraining) {\n        return !training || this.trainings.has(training)\n    }\n\n    addTool(tool: RaiderTool) {\n        this.tools.set(tool, true)\n    }\n\n    addTraining(training: RaiderTraining) {\n        this.trainings.set(training, true)\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class BarrierActivity extends AnimEntityActivity {\n\n    static Short = new AnimEntityActivity('Short')\n    static Expand = new AnimEntityActivity('Expand')\n    static Long = new AnimEntityActivity('Long')\n    static Teleport = new AnimEntityActivity('Teleport')\n\n}\n","import { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { BarrierActivity } from '../activities/BarrierActivity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntityType } from '../EntityType'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { BarrierLocation } from './BarrierLocation'\nimport { CarryPathTarget } from './CarryPathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Barrier extends MaterialEntity {\n\n    heading: number\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager, location: BarrierLocation, site: BuildingSite) {\n        super(worldMgr, sceneMgr, EntityType.BARRIER, 'MiscAnims/Barrier/Barrier.ae')\n        this.heading = location.heading\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityConstruction\n        this.changeActivity()\n        this.targets = [new CarryPathTarget(location.location, site, null)]\n    }\n\n    protected updateTargets(): CarryPathTarget[] {\n        return this.targets // TODO check target site still requires barrier, otherwise choose toolstation\n    }\n\n    getDefaultActivity(): BarrierActivity {\n        return BarrierActivity.Short\n    }\n\n    onAddToSite() {\n        super.onAddToSite()\n        this.group.rotation.y = this.heading\n        this.changeActivity(BarrierActivity.Expand, () => this.changeActivity(BarrierActivity.Long))\n    }\n\n}\n","import { ElectricFence } from '../collect/ElectricFence'\nimport { CarryJob } from './CarryJob'\n\nexport class CarryFenceJob extends CarryJob<ElectricFence> {\n\n    onJobComplete() {\n        super.onJobComplete()\n        if (this.item.targetSurface.canPlaceFence()) {\n            this.item.addToScene(null, null)\n            this.item.targetSurface.fence = this.item\n        } // TODO else dispose item entity with mesh\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CarryFenceJob } from '../job/CarryFenceJob'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { Surface } from '../map/Surface'\nimport { CarryPathTarget } from './CarryPathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class ElectricFence extends MaterialEntity {\n\n    targetSurface: Surface\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager, surface: Surface) {\n        super(worldMgr, sceneMgr, EntityType.ELECTRIC_FENCE)\n        const resource = ResourceManager.getResource('Buildings/E-Fence/E-Fence4.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('Buildings/E-Fence/').parse(resource))\n        this.group.add(mesh)\n        this.targetSurface = surface\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityConstruction\n    }\n\n    protected updateTargets(): CarryPathTarget[] {\n        if (this.targets.length < 1) {\n            if (this.targetSurface.canPlaceFence()) {\n                this.targets = [new CarryPathTarget(this.targetSurface.getCenterWorld2D(), null, null)]\n            } else {\n                this.targets = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                    .map((b) => new CarryPathTarget(b.getDropPosition2D(), null, b))\n            }\n        } else if (!this.targetSurface.canPlaceFence() && !this.targets[0].building) {\n            this.targets = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                .map((b) => new CarryPathTarget(b.getDropPosition2D(), null, b))\n        }\n        return this.targets\n    }\n\n    createCarryJob(): CarryFenceJob {\n        return new CarryFenceJob(this)\n    }\n\n}\n","import { Matrix4, Vector2, Vector3 } from 'three'\nimport { BuildingEntityStats } from '../../../cfg/BuildingEntityStats'\nimport { EventBus } from '../../../event/EventBus'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { BuildingSelected, EntityDeselected, SelectionEvent } from '../../../event/LocalEvents'\nimport { BuildingUpgraded, EntityAddedEvent, MaterialAmountChanged } from '../../../event/WorldEvents'\nimport { TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { BuildingActivity } from '../activities/BuildingActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { AnimEntity } from '../anim/AnimEntity'\nimport { Barrier } from '../collect/Barrier'\nimport { BarrierLocation } from '../collect/BarrierLocation'\nimport { Crystal } from '../collect/Crystal'\nimport { ElectricFence } from '../collect/ElectricFence'\nimport { Ore } from '../collect/Ore'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { Surface } from '../map/Surface'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { Selectable, SelectionType } from '../Selectable'\nimport { BuildingSite } from './BuildingSite'\n\nexport abstract class BuildingEntity extends AnimEntity implements Selectable {\n\n    blocksPathSurface: boolean = true\n    secondaryBuildingPart: Vector2 = null\n    primaryPowerPath: Vector2 = new Vector2(0, 1)\n    secondaryPowerPath: Vector2 = null\n    waterPathSurface: Vector2 = null\n\n    selected: boolean\n    powerSwitch: boolean = true\n    spawning: boolean = false\n    primarySurface: Surface = null\n    secondarySurface: Surface = null\n    primaryPathSurface: Surface = null\n    secondaryPathSurface: Surface = null\n    upgradeCostOre: number = 0\n    upgradeCostBrick: number = 0\n    crystalsInUse: number = 0\n    inBeam: boolean = false\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, entityType: EntityType, aeFilename: string) {\n        super(worldMgr, sceneMgr, EntitySuperType.BUILDING, entityType, aeFilename)\n        this.group.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        this.group.userData = {'selectable': this}\n        this.upgradeCostOre = ResourceManager.cfg('Main', 'BuildingUpgradeCostOre')\n        this.upgradeCostBrick = ResourceManager.cfg('Main', 'BuildingUpgradeCostStuds')\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, (event: MaterialAmountChanged) => {\n            if (event.entityType === EntityType.CRYSTAL && this.powerSwitch) {\n                this.turnOnPower()\n            }\n        })\n    }\n\n    abstract get stats(): BuildingEntityStats\n\n    getSelectionType(): SelectionType {\n        return SelectionType.BUILDING\n    }\n\n    select(): SelectionEvent {\n        if (this.inBeam) return null\n        this.selectionFrame.visible = true\n        if (!this.selected) {\n            this.selected = true\n            return new BuildingSelected(this)\n        }\n        return null\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    getPickSphereCenter(): Vector3 {\n        return new Vector3(0, this.stats.PickSphere / 4, 0)\n    }\n\n    getDropPosition2D(): Vector2 {\n        if (this.getToolJoint) {\n            const worldPos = new Vector3()\n            this.getToolJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else if (this.depositJoint) {\n            const worldPos = new Vector3()\n            this.depositJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else {\n            return this.getPosition2D()\n        }\n    }\n\n    getDropPosition(): Vector3 {\n        return this.sceneMgr.getFloorPosition(this.getDropPosition2D())\n    }\n\n    isPowered(): boolean {\n        return this.powerSwitch && (this.stats.SelfPowered || this.stats.PowerBuilding || this.crystalsInUse > 0)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.buildingsUndiscovered.remove(this)\n        GameState.buildings.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(this))\n    }\n\n    hasMaxLevel(): boolean {\n        return this.level >= this.stats.Levels - 1\n    }\n\n    upgrade() {\n        if (!this.canUpgrade()) return\n        if (GameState.numBrick >= this.upgradeCostBrick) {\n            GameState.numBrick -= this.upgradeCostBrick\n            EventBus.publishEvent(new MaterialAmountChanged(EntityType.BRICK))\n        } else {\n            GameState.numOre -= this.upgradeCostOre\n            EventBus.publishEvent(new MaterialAmountChanged(EntityType.ORE))\n        }\n        this.level++\n        EventBus.publishEvent(new EntityDeselected())\n        EventBus.publishEvent(new BuildingUpgraded(this))\n        // TODO add sparkly upgrade animation\n    }\n\n    getDefaultActivity(): BuildingActivity {\n        return !this.isPowered() ? BuildingActivity.Unpowered : AnimEntityActivity.Stand\n    }\n\n    beamUp() {\n        GameState.usedCrystals -= this.crystalsInUse\n        this.crystalsInUse = 0\n        this.inBeam = true\n        for (let c = 0; c < this.stats.CostOre; c++) {\n            this.worldMgr.placeMaterial(new Ore(this.worldMgr, this.sceneMgr), this.primarySurface.getRandomPosition())\n        }\n        for (let c = 0; c < this.stats.CostCrystal; c++) {\n            this.worldMgr.placeMaterial(new Crystal(this.worldMgr, this.sceneMgr), this.primarySurface.getRandomPosition())\n        }\n        this.surfaces.forEach((s) => {\n            s.surfaceType = SurfaceType.GROUND\n            s.setBuilding(null)\n            s.updateTexture()\n            s.neighbors.forEach((n) => n.updateTexture())\n        })\n        super.beamUp()\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        GameState.buildings.remove(this)\n    }\n\n    canUpgrade() {\n        return !this.hasMaxLevel() && (GameState.numOre >= this.upgradeCostOre || GameState.numBrick >= this.upgradeCostBrick)\n    }\n\n    spawnMaterials(type: EntityType, quantity: number) {\n        const material = []\n        if (type === EntityType.CRYSTAL) {\n            while (GameState.numCrystal > 0 && material.length < quantity) {\n                GameState.numCrystal--\n                material.push(new Crystal(this.worldMgr, this.sceneMgr))\n            }\n        } else if (type === EntityType.ORE) {\n            while (GameState.numOre > 0 && material.length < quantity) {\n                GameState.numOre--\n                material.push(new Ore(this.worldMgr, this.sceneMgr))\n            }\n        } else {\n            console.error('Material drop not implemented for: ' + type)\n        }\n        if (material.length > 0) EventBus.publishEvent(new MaterialAmountChanged(type))\n        material.forEach((m) => this.worldMgr.placeMaterial(m, this.getDropPosition2D()))\n    }\n\n    spawnBarriers(barrierLocations: BarrierLocation[], site: BuildingSite) {\n        barrierLocations.map((l) => new Barrier(this.worldMgr, this.sceneMgr, l, site)).forEach((b) => this.worldMgr.placeMaterial(b, this.getDropPosition2D()))\n    }\n\n    spawnFence(targetSurface: Surface) {\n        this.worldMgr.placeMaterial(new ElectricFence(this.worldMgr, this.sceneMgr, targetSurface), this.getDropPosition2D())\n    }\n\n    turnOnPower() {\n        if (this.crystalsInUse > 0 || GameState.usedCrystals >= GameState.numCrystal || (this.entityType !== EntityType.POWER_STATION && !this.surfaces.some((s) => s.neighbors.some((n) => n.hasPower)))) return\n        this.crystalsInUse = 1\n        GameState.usedCrystals += this.crystalsInUse\n        this.surfaces.forEach((s) => s.setHasPower(true, true))\n        this.changeActivity()\n    }\n\n    turnOffPower() {\n        if (this.crystalsInUse < 1) return\n        GameState.usedCrystals -= this.crystalsInUse\n        this.crystalsInUse = 0\n        this.surfaces.forEach((s) => s.setHasPower(false, false))\n        this.changeActivity()\n    }\n\n    get surfaces(): Surface[] {\n        const result = []\n        if (this.primarySurface) result.push(this.primarySurface)\n        if (this.secondarySurface) result.push(this.secondarySurface)\n        if (this.primaryPathSurface) result.push(this.primaryPathSurface)\n        if (this.secondaryPathSurface) result.push(this.secondaryPathSurface)\n        return result\n    }\n\n    placeDown(worldPosition: Vector2, radHeading: number, disableTeleportIn: boolean) {\n        this.addToScene(worldPosition, radHeading)\n        this.createPickSphere()\n        const primaryPathSurface = this.sceneMgr.terrain.getSurfaceFromWorld(this.group.position)\n        primaryPathSurface.setBuilding(this)\n        primaryPathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n        primaryPathSurface.updateTexture()\n        this.primarySurface = primaryPathSurface\n        if (this.secondaryBuildingPart) {\n            const secondaryOffset = new Vector3(TILESIZE * this.secondaryBuildingPart.x, 0, TILESIZE * this.secondaryBuildingPart.y)\n                .applyAxisAngle(new Vector3(0, 1, 0), radHeading).add(this.group.position)\n            const secondarySurface = this.sceneMgr.terrain.getSurfaceFromWorld(secondaryOffset)\n            secondarySurface.setBuilding(this)\n            secondarySurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n            secondarySurface.updateTexture()\n            this.secondarySurface = secondarySurface\n        }\n        if (this.primaryPowerPath) {\n            const pathOffset = new Vector3(this.primaryPowerPath.x, 0, this.primaryPowerPath.y).multiplyScalar(TILESIZE)\n                .applyAxisAngle(new Vector3(0, 1, 0), radHeading).add(this.group.position)\n            const pathSurface = this.sceneMgr.terrain.getSurfaceFromWorld(pathOffset)\n            if (this.entityType === EntityType.GEODOME) pathSurface.building = this\n            pathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n            pathSurface.updateTexture()\n            this.primaryPathSurface = pathSurface\n        }\n        if (this.group.visible) {\n            GameState.buildings.push(this)\n        } else {\n            GameState.buildingsUndiscovered.push(this)\n        }\n        if (this.group.visible && !disableTeleportIn) {\n            this.inBeam = true\n            this.changeActivity(BuildingActivity.Teleport, () => {\n                this.inBeam = false\n                this.onPlaceDown()\n            })\n        } else {\n            this.onPlaceDown()\n        }\n        this.sceneMgr.terrain.resetGraphWalk()\n    }\n\n    private onPlaceDown() {\n        this.changeActivity()\n        this.turnOnPower()\n        EventBus.publishEvent(new EntityAddedEvent(this))\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Barracks extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.BARRACKS, 'Buildings/Barracks/Barracks.ae')\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Barracks\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Docks extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.DOCKS, 'Buildings/Docks/Docks.ae')\n        this.waterPathSurface = new Vector2(0, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Docks\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Geodome extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.GEODOME, 'Buildings/Geo-dome/Geo-dome.ae')\n        this.primaryPowerPath = null\n        this.secondaryBuildingPart = new Vector2(0, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Geodome\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { BuildingActivity } from '../../activities/BuildingActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class GunStation extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.GUNSTATION, 'Buildings/gunstation/gunstation.ae')\n        this.primaryPowerPath = null\n    }\n\n    getDefaultActivity(): BuildingActivity {\n        return BuildingActivity.Stand\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.GunStation\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class OreRefinery extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.ORE_REFINERY, 'Buildings/OreRefinery/OreRefinery.ae')\n        this.primaryPowerPath = new Vector2(0, 2)\n        this.secondaryBuildingPart = new Vector2(0, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.OreRefinery\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Deposit\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class PowerStation extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.POWER_STATION, 'Buildings/Powerstation/Powerstation.ae')\n        this.secondaryBuildingPart = new Vector2(-1, 0)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Powerstation\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Deposit\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class TeleportBig extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.TELEPORT_BIG, 'Buildings/BIGTeleport/BIGTeleport.ae')\n        this.secondaryBuildingPart = new Vector2(1, 0)\n        this.secondaryPowerPath = new Vector2(1, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.TeleportBIG\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class TeleportPad extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.TELEPORT_PAD, 'Buildings/Teleports/Teleports.ae')\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.TeleportPad\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Toolstation extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.TOOLSTATION, 'Buildings/Toolstation/Toolstation.ae')\n        this.blocksPathSurface = false\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Toolstation\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Upgrade extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.UPGRADE, 'Buildings/Upgrade/Upgrade.ae')\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Upgrade\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class MonsterActivity extends AnimEntityActivity {\n\n    static Route = new MonsterActivity('Activity_Route')\n\n}\n","import { clearTimeoutSafe } from '../../../core/Util'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { MonsterActivity } from '../activities/MonsterActivity'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { MovableEntity } from '../MovableEntity'\nimport { PathTarget } from '../PathTarget'\n\nexport abstract class Monster extends MovableEntity {\n\n    moveTimeout: NodeJS.Timeout\n    target: PathTarget[] = []\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, entityType: EntityType, aeFilename: string) {\n        super(worldMgr, sceneMgr, EntitySuperType.MONSTER, entityType, aeFilename)\n    }\n\n    onLevelEnd() {\n        this.moveTimeout = clearTimeoutSafe(this.moveTimeout)\n        this.removeFromScene()\n    }\n\n    getRouteActivity(): MonsterActivity {\n        return MonsterActivity.Route\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { getRandomInclusive } from '../../../core/Util'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { Monster } from './Monster'\n\nexport class Bat extends Monster {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.BAT, 'Creatures/bat/bat.ae')\n        this.floorOffset = TILESIZE / 2\n    }\n\n    get stats() {\n        return ResourceManager.stats.Bat\n    }\n\n    startRandomMove() {\n        Bat.onMove(this)\n    }\n\n    private static onMove(bat: Bat) {\n        if (bat.target.length < 1 || bat.moveToClosestTarget(bat.target) === MoveState.TARGET_REACHED) {\n            bat.target = [bat.findTarget()]\n        }\n        bat.moveTimeout = setTimeout(() => Bat.onMove(bat), 1000 / NATIVE_FRAMERATE)\n    }\n\n    private findTarget(): PathTarget { // TODO move to nearby drilling noise, explosions or sonic blasters\n        const terrain = this.sceneMgr.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            if (terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType.floor) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a target')\n        return null\n    }\n\n    onDeath() {\n        this.onLevelEnd()\n        GameState.bats.remove(this)\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { getRandom, getRandomInclusive } from '../../../core/Util'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { Monster } from './Monster'\n\nexport class SmallSpider extends Monster {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.SMALL_SPIDER, 'Creatures/SpiderSB/SpiderSB.ae')\n        this.floorOffset = 1\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallSpider\n    }\n\n    startMoving() {\n        SmallSpider.onMove(this)\n    }\n\n    private static onMove(spider: SmallSpider) {\n        spider.surfaces.forEach((s) => GameState.spidersBySurface.getOrUpdate(s, () => []).remove(spider))\n        if (spider.target.length > 0 && spider.moveToClosestTarget(spider.target) === MoveState.MOVED) {\n            spider.surfaces.forEach((s) => GameState.spidersBySurface.getOrUpdate(s, () => []).push(spider))\n            if (!spider.sceneMgr.terrain.getSurfaceFromWorld(spider.getPosition()).surfaceType.floor) {\n                spider.onDeath()\n            } else {\n                spider.moveTimeout = setTimeout(() => SmallSpider.onMove(spider), 1000 / NATIVE_FRAMERATE)\n            }\n        } else {\n            spider.changeActivity()\n            spider.moveTimeout = setTimeout(() => {\n                spider.target = [spider.findTarget()]\n                SmallSpider.onMove(spider)\n            }, 1000 + getRandom(9000))\n        }\n    }\n\n    private findTarget(): PathTarget {\n        const terrain = this.sceneMgr.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            const surfaceType = terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType\n            if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a target')\n        return null\n    }\n\n    onDeath() {\n        this.onLevelEnd()\n        GameState.spiders.remove(this)\n        this.surfaces.forEach((s) => GameState.spidersBySurface.getOrUpdate(s, () => []).remove(this))\n    }\n\n}\n","import { MathUtils, Vector2, Vector3 } from 'three'\nimport { EventBus } from '../event/EventBus'\nimport { EntityAddedEvent } from '../event/WorldEvents'\nimport { TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { Barracks } from './model/building/entities/Barracks'\nimport { Docks } from './model/building/entities/Docks'\nimport { Geodome } from './model/building/entities/Geodome'\nimport { GunStation } from './model/building/entities/GunStation'\nimport { OreRefinery } from './model/building/entities/OreRefinery'\nimport { PowerStation } from './model/building/entities/PowerStation'\nimport { TeleportBig } from './model/building/entities/TeleportBig'\nimport { TeleportPad } from './model/building/entities/TeleportPad'\nimport { Toolstation } from './model/building/entities/Toolstation'\nimport { Upgrade } from './model/building/entities/Upgrade'\nimport { Crystal } from './model/collect/Crystal'\nimport { GameState } from './model/GameState'\nimport { Bat } from './model/monster/Bat'\nimport { SmallSpider } from './model/monster/SmallSpider'\nimport { Raider } from './model/raider/Raider'\nimport { SceneManager } from './SceneManager'\nimport { WorldManager } from './WorldManager'\nimport degToRad = MathUtils.degToRad\n\nexport class ObjectListLoader {\n\n    static loadObjectList(worldMgr: WorldManager, sceneMgr: SceneManager, objectListConf, disableStartTeleport: boolean) {\n        Object.values(objectListConf).forEach((olObject: any) => {\n            const lTypeName = olObject.type ? olObject.type.toLowerCase() : olObject.type\n            // all object positions are off by half a tile, because 0/0 is the top left corner of first tile\n            const worldPos = new Vector2(olObject.xPos, olObject.yPos).addScalar(-1).multiplyScalar(TILESIZE)\n            const buildingType: string = ResourceManager.cfg('BuildingTypes', olObject.type)\n            const radHeading = degToRad(olObject.heading)\n            if (lTypeName === 'TVCamera'.toLowerCase()) {\n                const terrainY = sceneMgr.getTerrainHeight(worldPos.x, worldPos.y)\n                const loc = new Vector3(worldPos.x, terrainY, worldPos.y - TILESIZE / 2)\n                const offset = new Vector3(5 * TILESIZE, 0, 0).applyAxisAngle(new Vector3(0, 1, 0), radHeading - Math.PI / 16).add(loc)\n                sceneMgr.camera.position.copy(offset)\n                sceneMgr.camera.position.y = 4.5 * TILESIZE\n                sceneMgr.controls.target.copy(loc)\n                sceneMgr.controls.update()\n                sceneMgr.setTorchPosition(new Vector2(worldPos.x, worldPos.y - TILESIZE / 2))\n            } else if (lTypeName === 'Pilot'.toLowerCase()) {\n                const raider = new Raider(worldMgr, sceneMgr)\n                raider.changeActivity()\n                raider.createPickSphere()\n                raider.addToScene(worldPos, radHeading - Math.PI / 2)\n                if (raider.group.visible) {\n                    GameState.raiders.push(raider)\n                    EventBus.publishEvent(new EntityAddedEvent(raider))\n                } else {\n                    GameState.raidersUndiscovered.push(raider)\n                }\n            } else if (buildingType) {\n                const entity = this.createBuildingByName(buildingType, worldMgr, sceneMgr)\n                entity.placeDown(worldPos, -radHeading - Math.PI, disableStartTeleport)\n            } else if (lTypeName === 'PowerCrystal'.toLowerCase()) {\n                worldMgr.placeMaterial(new Crystal(worldMgr, sceneMgr), worldPos)\n            } else if (lTypeName === 'SmallSpider'.toLowerCase()) {\n                const spider = new SmallSpider(worldMgr, sceneMgr)\n                spider.changeActivity()\n                spider.addToScene(worldPos, radHeading)\n                GameState.spiders.push(spider)\n                spider.surfaces.forEach((s) => GameState.spidersBySurface.getOrUpdate(s, () => []).push(spider))\n                spider.startMoving()\n            } else if (lTypeName === 'Bat'.toLowerCase()) {\n                const bat = new Bat(worldMgr, sceneMgr)\n                bat.changeActivity()\n                bat.addToScene(worldPos, radHeading)\n                GameState.bats.push(bat)\n                bat.startRandomMove()\n            } else {\n                // TODO implement remaining object types\n                console.warn('Object type ' + olObject.type + ' not yet implemented')\n            }\n        })\n        // update path textures when all buildings are added\n        GameState.buildings.forEach((b) => b.surfaces.forEach((s) => s.neighbors.forEach((n) => n.updateTexture())))\n    }\n\n    private static createBuildingByName(buildingType: string, worldMgr: WorldManager, sceneMgr: SceneManager) {\n        const typename = buildingType.slice(buildingType.lastIndexOf('/') + 1).toLowerCase()\n        if (typename === 'toolstation') {\n            return new Toolstation(worldMgr, sceneMgr)\n        } else if (typename === 'teleports') {\n            return new TeleportPad(worldMgr, sceneMgr)\n        } else if (typename === 'docks') {\n            return new Docks(worldMgr, sceneMgr)\n        } else if (typename === 'powerstation') {\n            return new PowerStation(worldMgr, sceneMgr)\n        } else if (typename === 'barracks') {\n            return new Barracks(worldMgr, sceneMgr)\n        } else if (typename === 'upgrade') {\n            return new Upgrade(worldMgr, sceneMgr)\n        } else if (typename === 'geo-dome') {\n            return new Geodome(worldMgr, sceneMgr)\n        } else if (typename === 'orerefinery') {\n            return new OreRefinery(worldMgr, sceneMgr)\n        } else if (typename === 'gunstation') {\n            return new GunStation(worldMgr, sceneMgr)\n        } else if (typename === 'teleportbig') {\n            return new TeleportBig(worldMgr, sceneMgr)\n        } else {\n            throw 'Unknown building type: ' + typename\n        }\n    }\n\n}\n","// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n}\n\nexport enum POINTER_EVENT {\n    MOVE,\n    DOWN,\n    UP,\n}\n\nexport enum KEY_EVENT {\n    DOWN,\n    UP,\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\nimport { RaiderTool } from '../raider/RaiderTool'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class GetToolJob extends Job {\n\n    target: PathTarget[]\n    tool: RaiderTool\n\n    constructor(target: Vector2, tool: RaiderTool) {\n        super(JobType.GET_TOOL)\n        this.target = [new PathTarget(target)]\n        this.tool = tool\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.target\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.fulfiller.forEach((f) => f.addTool(this.tool))\n    }\n\n}\n","import { Vector2 } from 'three'\n\nexport class Area {\n\n    x0: number = 0\n    y0: number = 0\n    x1: number = 0\n    y1: number = 0\n    center: Vector2 = null\n\n    constructor(x0: number, y0: number, x1: number, y1: number) {\n        this.x0 = x0\n        this.y0 = y0\n        this.x1 = x1\n        this.y1 = y1\n        this.center = new Vector2((this.x0 + this.x1) / 2, (this.y0 + this.y1) / 2)\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { Area } from '../../../core/Area'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityTrained } from '../../../event/WorldEvents'\nimport { JOB_ACTION_RANGE, TILESIZE } from '../../../params'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { Surface } from '../map/Surface'\nimport { PathTarget } from '../PathTarget'\nimport { RaiderTraining } from '../raider/RaiderTraining'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class TrainJob extends Job {\n\n    workplaces: TrainingPathTarget[]\n    training: RaiderTraining\n\n    constructor(surface: Surface, training: RaiderTraining) {\n        super(JobType.TRAIN)\n        this.workplaces = [new TrainingPathTarget(surface)]\n        this.training = training\n    }\n\n    getWorkplaces(): TrainingPathTarget[] {\n        return this.workplaces\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.fulfiller.forEach((f) => {\n            f.addTraining(this.training)\n            EventBus.publishEvent(new EntityTrained(f, this.training))\n        })\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Train\n    }\n\n    getWorkDuration(): number {\n        return 10000 // XXX adjust training time\n    }\n\n}\n\nexport class TrainingPathTarget extends PathTarget {\n\n    targetArea: Area\n\n    constructor(surface: Surface) {\n        super(surface.getCenterWorld2D())\n        this.targetArea = new Area(surface.x * TILESIZE - JOB_ACTION_RANGE, surface.y * TILESIZE - JOB_ACTION_RANGE,\n            (surface.x + 1) * TILESIZE + JOB_ACTION_RANGE, (surface.y + 1) * TILESIZE + JOB_ACTION_RANGE)\n    }\n\n    isInArea(position: Vector2): boolean {\n        return position.x >= this.targetArea.x0 && position.x < this.targetArea.x1\n            && position.y >= this.targetArea.y0 && position.y < this.targetArea.y1\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { clearIntervalSafe } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { JobCreateEvent, JobDeleteEvent } from '../event/WorldEvents'\nimport { CHECK_CLEARRUBBLE_INTERVAL, JOB_SCHEDULE_INTERVAL } from '../params'\nimport { EntityType } from './model/EntityType'\nimport { GameState } from './model/GameState'\nimport { GetToolJob } from './model/job/GetToolJob'\nimport { PublicJob } from './model/job/Job'\nimport { JobState } from './model/job/JobState'\nimport { TrainJob } from './model/job/TrainJob'\nimport { Surface } from './model/map/Surface'\nimport { PathTarget } from './model/PathTarget'\nimport { Raider } from './model/raider/Raider'\nimport { RaiderTool } from './model/raider/RaiderTool'\nimport { RaiderTraining } from './model/raider/RaiderTraining'\nimport { WorldManager } from './WorldManager'\n\nexport class Supervisor {\n\n    worldMgr: WorldManager\n    jobs: PublicJob[] = []\n    assignInterval = null\n    checkRubbleInterval = null\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        EventBus.registerEventListener(EventKey.JOB_CREATE, (event: JobCreateEvent) => {\n            this.jobs.push(event.job)\n        })\n        EventBus.registerEventListener(EventKey.JOB_DELETE, (event: JobDeleteEvent) => {\n            event.job.cancel()\n        })\n    }\n\n    start() {\n        stop()\n        this.assignInterval = setInterval(this.assignJobs.bind(this), JOB_SCHEDULE_INTERVAL)\n        this.checkRubbleInterval = setInterval(this.checkUnclearedRubble.bind(this), CHECK_CLEARRUBBLE_INTERVAL)\n    }\n\n    stop() {\n        this.assignInterval = clearIntervalSafe(this.assignInterval)\n        this.checkRubbleInterval = clearIntervalSafe(this.checkRubbleInterval)\n        GameState.raiders.forEach((r) => r.resetWorkInterval())\n        GameState.raidersUndiscovered.forEach((r) => r.resetWorkInterval())\n    }\n\n    assignJobs() {\n        const availableJobs: PublicJob[] = []\n        this.jobs = this.jobs.filter((j) => {\n            const result = j.jobstate === JobState.INCOMPLETE\n            if (result && j.fulfiller.length < 1) availableJobs.push(j)\n            return result\n        })\n        availableJobs.sort((left, right) => {\n            return Math.sign(GameState.priorityList.getPriority(left) - GameState.priorityList.getPriority(right))\n        })\n        const unemployedRaider = GameState.raiders.filter((r) => !r.job)\n        availableJobs.forEach((job) => { // XXX better use estimated time to complete job as metric\n                let closestRaider: Raider = null\n                let closestRaiderIndex: number = null\n                let minDistance: number = null\n                let closestToolRaider: Raider = null\n                let closestToolRaiderIndex: number = null\n                let minToolDistance: number = null\n                let closestToolstationPosition: Vector2 = null\n                let closestNeededTool: RaiderTool = null\n                let closestTrainingRaider: Raider = null\n                let closestTrainingRaiderIndex: number = null\n                let minTrainingDistance: number = null\n                let closestTrainingArea: Surface = null\n                let closestNeededTraining: RaiderTraining = null\n                unemployedRaider.forEach((raider, index) => {\n                    const requiredTool = job.getRequiredTool()\n                    const hasRequiredTool = raider.hasTool(requiredTool)\n                    const raiderTraining = job.getRequiredTraining()\n                    const hasTraining = raider.hasTraining(raiderTraining)\n                    const raiderPosition = raider.getPosition()\n                    if (hasRequiredTool && hasTraining) {\n                        const pathToJob = job.getWorkplaces().map((b) => raider.findPathToTarget(b))\n                            .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                        if (pathToJob) {\n                            const dist = pathToJob.lengthSq // TODO use precalculated path to job\n                            if (minDistance === null || dist < minDistance) {\n                                closestRaider = raider\n                                closestRaiderIndex = index\n                                minDistance = dist\n                            }\n                        }\n                    } else if (!hasRequiredTool) {\n                        const pathToToolstation = GameState.getBuildingsByType(EntityType.TOOLSTATION)\n                            .map((b) => raider.findPathToTarget(new PathTarget(b.getPosition2D())))\n                            .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                        if (pathToToolstation) {\n                            const dist = pathToToolstation.lengthSq\n                            if (minToolDistance === null || dist < minToolDistance) {\n                                closestToolRaider = raider\n                                closestToolRaiderIndex = index\n                                minToolDistance = dist\n                                closestToolstationPosition = pathToToolstation.targetPosition // TODO use precalculated path to toolstation\n                                closestNeededTool = requiredTool\n                            }\n                        }\n                    } else {\n                        const pathToTraining = GameState.getTrainingSites(raiderPosition, raiderTraining)\n                            .map((site) => raider.findPathToTarget(new PathTarget(site.getPosition2D())))\n                            .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                        if (pathToTraining) {\n                            const dist = pathToTraining.lengthSq\n                            if (minTrainingDistance === null || dist < minTrainingDistance) {\n                                closestTrainingRaider = raider\n                                closestTrainingRaiderIndex = index\n                                minTrainingDistance = dist\n                                closestTrainingArea = raider.sceneMgr.terrain.getSurfaceFromWorld2D(pathToTraining.targetPosition) // TODO use precalculated path to training\n                                closestNeededTraining = raiderTraining\n                            }\n                        }\n                    }\n                })\n                if (closestRaider) {\n                    closestRaider.setJob(job)\n                    unemployedRaider.splice(closestRaiderIndex, 1)\n                } else if (closestToolRaider) {\n                    closestToolRaider.setJob(new GetToolJob(closestToolstationPosition, closestNeededTool), job)\n                    unemployedRaider.splice(closestToolRaiderIndex, 1)\n                } else if (closestTrainingRaider) {\n                    closestTrainingRaider.setJob(new TrainJob(closestTrainingArea, closestNeededTraining), job)\n                    unemployedRaider.splice(closestTrainingRaiderIndex, 1)\n                }\n            },\n        )\n        // TODO move unemployed raider out of building sites\n    }\n\n    checkUnclearedRubble() {\n        GameState.raiders.forEach((raider) => {\n            if (raider.job) return\n            const startSurface = raider.sceneMgr.terrain.getSurfaceFromWorld(raider.getPosition())\n            for (let rad = 0; rad < 10; rad++) {\n                for (let x = startSurface.x - rad; x <= startSurface.x + rad; x++) {\n                    for (let y = startSurface.y - rad; y <= startSurface.y + rad; y++) {\n                        const surface = raider.sceneMgr.terrain.getSurfaceOrNull(x, y)\n                        if (!(surface?.hasRubble()) || !surface?.discovered) continue\n                        const clearRubbleJob = surface.createClearRubbleJob()\n                        if (!clearRubbleJob) continue\n                        const requiredTool = clearRubbleJob.getRequiredTool()\n                        if (raider.hasTool(requiredTool)) {\n                            raider.setJob(clearRubbleJob)\n                        } else {\n                            const pathToToolstation = GameState.getBuildingsByType(EntityType.TOOLSTATION)\n                                .map((b) => raider.findPathToTarget(new PathTarget(b.getPosition2D())))\n                                .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                            if (pathToToolstation) {\n                                raider.setJob(new GetToolJob(pathToToolstation.targetPosition, requiredTool), clearRubbleJob) // TODO use precalculated path to toolstation\n                            }\n                        }\n                    }\n                }\n            }\n        })\n    }\n\n}\n","/** Function documentation mostly copied from the following URLs\n *\n * https://kb.rockraidersunited.com/User:Jessietail/NERPs_reference\n * https://web.archive.org/web/20131206122442/http://rru-stuff.org/nerpfuncs.html\n * https://kb.rockraidersunited.com/NERPs_documentation#Labels\n *\n */\nimport { EntityType } from '../game/model/EntityType'\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { clearIntervalSafe, getRandom } from './Util'\n\nexport class NerpRunner {\n\n    debug = false\n    onLevelEnd: () => any = null\n    nerpInterval: NodeJS.Timeout = null\n\n    registers = new Array(8).fill(0)\n    timers = new Array(4).fill(0)\n    scriptLines = [] // contains humand readable script strings\n    statements = [] // contains parsed statements for execution\n    macrosByName = {}\n    labelsByName = {}\n    halted = false\n    programCounter = 0\n    messages = []\n    // more state variables and switches\n    messagePermit = null\n\n    constructor(debug = false) {\n        this.debug = debug\n    }\n\n    startExecution() {\n        const that = this\n        this.nerpInterval = setInterval(() => {\n            that.execute()\n        }, 2000)\n    }\n\n    pauseExecution() {\n        this.nerpInterval = clearIntervalSafe(this.nerpInterval)\n    }\n\n    /**\n     * Internally used to validate and parse a register number.\n     * @param register\n     * @return {number}\n     */\n    checkRegister(register) {\n        const num = parseInt(register)\n        if (isNaN(num) || num < 0 || num > this.registers.length) throw new Error('Invalid register (' + register + ') provided')\n        return num\n    }\n\n    /**\n     * Internally used to validate and parse a value before setting or adding it with a register.\n     * @param value\n     * @return {number}\n     */\n    checkRegisterValue(value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Invalid register value (' + value + ') provided')\n        return num\n    }\n\n    /**\n     * Gets the value currently stored in the given register, internally used to handle all registers with one method.\n     * @param register the register to read\n     * @return {number} returns the value currently stored in the register\n     */\n    getR(register) {\n        register = this.checkRegister(register)\n        return this.registers[register]\n    }\n\n    /**\n     * Sets the given value for the given register, internally used to handle all registers with one method.\n     * @param register the register to set\n     * @param value the value to set for the given register\n     */\n    setR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] = value\n    }\n\n    /**\n     * Adds the given value to the given register, internally used to handle all registers with one method.\n     * @param register the register to add to\n     * @param value the value to add to the given register\n     */\n    addR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] += value\n    }\n\n    /**\n     * Set the respective timer to the given numerical value. Units are in milliseconds.\n     * @param timer\n     * @param value\n     */\n    setTimer(timer, value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Can\\'t set timer to NaN value: ' + value)\n        this.timers[timer] = new Date().getTime() + num\n    }\n\n    /**\n     * Gets the value of the respective timer. Units are in milliseconds.\n     * @param timer\n     * @return {number}\n     */\n    getTimer(timer) {\n        return new Date().getTime() - this.timers[timer]\n    }\n\n    /**\n     * End the level successfully and show the score screen.\n     */\n    setLevelCompleted() {\n        console.log('Nerp runner marks level as complete')\n        this.halted = true\n        GameState.resultState = GameResultState.COMPLETE\n        this.onLevelEnd()\n    }\n\n    /**\n     * End the level as failure and show the score screen.\n     */\n    setLevelFail() {\n        console.log('NerpRunner marks level as failed')\n        this.halted = true\n        GameState.resultState = GameResultState.FAILED\n        this.onLevelEnd()\n    }\n\n    /**\n     * Sets tutorial flags\n     * @param value a bitmask to set flags with\n     */\n    setTutorialFlags(value) {\n        // TODO implement tutorial flags\n        // seems like value must be interpreted bitwise and sets a certain flag on each bit\n        // seen so far:\n        // 0 = 0x00 allow any click anywhere anytime\n        // 3 = 0x11 disallow invalid clicks\n        // 4095 = 0x111111111111 set all flags? (seen in Tutorial01 level)\n    }\n\n    /**\n     * This is used to make messages come up/not come up.\n     * @param messagesAllowed\n     */\n    setMessagePermit(messagesAllowed) {\n        this.messagePermit = !messagesAllowed\n    }\n\n    setBuildingsUpgradeLevel(typeName: EntityType, level: number) {\n        GameState.buildings.forEach(b => {\n            if (b.entityType === typeName) b.level = level\n        })\n    }\n\n    setToolStoreLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.TOOLSTATION, level)\n    }\n\n    setTeleportPadLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.TELEPORT_PAD, level)\n    }\n\n    setPowerStationLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.POWER_STATION, level)\n    }\n\n    setBarracksLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.BARRACKS, level)\n    }\n\n    /**\n     * Gets the number of tool stores currently built. NOT the total ever built.\n     * @return {number}\n     */\n    getToolStoresBuilt() {\n        return GameState.buildings.count((b) => b.entityType === EntityType.TOOLSTATION)\n    }\n\n    /**\n     * Gets the number of minifigures on the level. TODO it is NOT tested if this ignores minifigures in hidden caverns\n     * @return {number}\n     */\n    getMinifiguresOnLevel() {\n        return GameState.raiders.length\n    }\n\n    /**\n     * Gets the number of crystals currently stored.\n     * @return {number}\n     */\n    getCrystalsCurrentlyStored() {\n        return GameState.numCrystal\n    }\n\n    getObjectiveSwitch() {\n        // TODO implement this\n        return 0\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    setMessageTimerValues(arg1, arg2, arg3) {\n        // TODO implement this\n    }\n\n    getMessageTimer() {\n        return 0 // TODO return remaining amount of time needed to fully play WAV message\n    }\n\n    cameraUnlock() {\n        // TODO implement this\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    setMessage(messageNumber, arrowDisabled) {\n        if (!this.messagePermit) return\n        if (messageNumber === 0) return // TODO messages start at 1\n        const msg = this.messages[messageNumber]\n        console.log(msg.txt) // TODO show message to user\n        // msg.snd resides in sounds/streamed/ which is currently not loaded :(\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    setCameraGotoTutorial(arg1) {\n        // TODO implement this\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    getTutorialBlockIsGround(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    getTutorialBlockIsPath(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    getUnitAtBlock(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getOxygenLevel() {\n        // TODO implement this\n        return 100\n    }\n\n    getObjectiveShowing() {\n        // TODO implement this\n        return false\n    }\n\n    addPoweredCrystals() {\n        // TODO implement this\n    }\n\n    disallowAll() {\n        // TODO implement this\n    }\n\n    getPoweredPowerStationsBuilt() {\n        return GameState.buildings.count((b) => b.isPowered() && b.entityType === EntityType.POWER_STATION)\n    }\n\n    getPoweredBarracksBuilt() {\n        return GameState.buildings.count((b) => b.isPowered() && b.entityType === EntityType.BARRACKS)\n    }\n\n    getRecordObjectAtTutorial() {\n        // TODO implement this\n    }\n\n    getHiddenObjectsFound() {\n        // TODO implement this\n        return 0\n    }\n\n    getLevel1PowerStationsBuilt() {\n        // TODO implement this\n        return 0\n    }\n\n    getRandom100(): number {\n        return getRandom(100)\n    }\n\n    getSlugsOnLevel(): number {\n        // TODO implement slugs\n        return 0\n    }\n\n    generateSlug() {\n        console.warn('Slugs not yet implemented')\n        // TODO implement slugs\n    }\n\n    callMethod(methodName, methodArgs) {\n        if (methodName === 'Stop') {\n            throw 'Stop'\n        } else if (methodName === 'TRUE') {\n            return true\n        } else if (methodName === 'FALSE') {\n            return false\n        }\n        const setRegisterMatch = methodName.match(/^SetR([0-7])$/)\n        if (setRegisterMatch) {\n            return this.setR(setRegisterMatch[1], methodArgs[0])\n        }\n        const addRegisterMatch = methodName.match(/^AddR([0-7])$/)\n        if (addRegisterMatch) {\n            return this.addR(addRegisterMatch[1], methodArgs[0])\n        }\n        const getRegisterMatch = methodName.match(/^GetR([0-7])$/)\n        if (getRegisterMatch) {\n            return this.getR(getRegisterMatch[1])\n        }\n        const setTimerMatch = methodName.match(/^SetTimer([0-3])$/)\n        if (setTimerMatch) {\n            return this.setTimer(setTimerMatch[1], methodArgs[0])\n        }\n        const getTimerMatch = methodName.match(/^GetTimer([0-3])$/)\n        if (getTimerMatch) {\n            return this.getTimer(getTimerMatch[1])\n        }\n        const lMethodName = methodName.toLowerCase()\n        const memberName = Object.getOwnPropertyNames(NerpRunner.prototype).find((name) => name.toLowerCase() === lMethodName)\n        if (memberName) return this[memberName].apply(this, methodArgs)\n        throw new Error('Undefined method: ' + methodName)\n    }\n\n    conditional(left, right) {\n        const conditionResult = this.executeStatement(left)\n        if (this.debug) {\n            console.log('Condition evaluated to ' + conditionResult)\n        }\n        if (conditionResult) {\n            this.executeStatement(right)\n        }\n    }\n\n    executeStatement(expression) {\n        if (expression.invoke) {\n            const argValues = expression.invoke !== 'conditional' ? expression.args.map(e => this.executeStatement(e)) : expression.args\n            const result = this.callMethod(expression.invoke, argValues)\n            if (result !== undefined && this.debug) {\n                console.log('Method returned: ' + result)\n            }\n            return result\n        } else if (expression.comparator) {\n            const left = this.executeStatement(expression.left)\n            const right = this.executeStatement(expression.right)\n            if (expression.comparator === '=') {\n                return left === right\n            } else if (expression.comparator === '!=') {\n                return left !== right\n            } else if (expression.comparator === '<') {\n                return left < right\n            } else if (expression.comparator === '>') {\n                return left > right\n            } else {\n                console.log(expression)\n                throw new Error('Unknown comparator: ' + expression.comparator)\n            }\n        } else if (!isNaN(expression)) { // just a number\n            return expression\n        } else if (expression.jump) {\n            this.programCounter = this.labelsByName[expression.jump]\n            if (this.programCounter === undefined) {\n                throw new Error('Label \\'' + expression.jump + '\\' is unknown!')\n            }\n            if (this.debug) {\n                console.log('Jumping to label \\'' + expression.jump + '\\' in line ' + this.programCounter)\n            }\n        } else {\n            console.log(expression)\n            throw new Error('Unknown expression in line ' + this.programCounter + ': ' + expression)\n        }\n    }\n\n    execute(debug = false) {\n        this.debug = debug\n        if (this.halted) return\n        try {\n            if (this.debug) {\n                console.log('Executing following script\\n' + this.scriptLines.join('\\n'))\n                console.log('Registers: ' + this.registers)\n            }\n            for (this.programCounter = 0; this.programCounter < this.statements.length; this.programCounter++) {\n                const statement = this.statements[this.programCounter]\n                if (this.debug) {\n                    console.log(this.programCounter + ': ' + this.scriptLines[this.programCounter])\n                    console.log(statement)\n                }\n                if (!statement.label) { // do nothing for label markers\n                    this.executeStatement(statement)\n                }\n            }\n        } catch (e) {\n            if (e === 'Stop') {\n                return\n            }\n            console.error(e)\n            console.error('FATAL ERROR! Script execution failed! You can NOT win anymore!')\n            this.halted = true\n        }\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { NerpRunner } from './NerpRunner'\n\nexport class NerpParser {\n\n    static parse(nerpScript: string): NerpRunner {\n        const nerpRunner = new NerpRunner()\n        const lines = nerpScript.split('\\n').map(l => l\n            .split('//')[0].trim() // before comment starts\n            .split(';')[0].trim() // before preprocessor comment starts\n            .replace(/_/g, '') // some preprocessor macros use this prefix\n            .replace(/\\bTRUE \\? /, '') // some weird requirement of the original language\n            .replace(/[{}]/g, ''), // duplicate limit for macros using labels too\n        )\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c]\n            if (line.length < 1) {\n                continue // ignore empty lines, but important for macro closure\n            }\n            if (line.startsWith('#include ')) { // include other nerp scripts/headers\n                const includeName = line.replace(/^#include /, '').trim().slice(1, -1)\n                if (includeName === 'nerpdef.h') {\n                    // trivial default header file, is applied by search and replace above\n                    // see https://github.com/jgrip/legorr/blob/master/nerpdef.h\n                    continue\n                }\n                const includedRunner = NerpParser.parse(ResourceManager.getResource('Levels/' + includeName))\n                if (!includedRunner || !includedRunner.scriptLines || includedRunner.scriptLines.length < 1) {\n                    throw 'Can\\'t include unknown nerp script: ' + line\n                }\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(includedRunner.scriptLines)\n                // copy macros from included file to current file\n                nerpRunner.macrosByName = Object.assign({}, nerpRunner.macrosByName, includedRunner.macrosByName)\n            } else if (line.startsWith('#define ')) { // parse C++ preprocessor macro\n                const firstLine = line.replace(/^#define /, '').split(' ')\n                const macroLines = [firstLine.splice(1).join(' ').replace(/\\\\$/, '').trim()]\n                let mLine = line\n                let append = false\n                while (mLine.endsWith('\\\\') && c < lines.length - 1) {\n                    c++\n                    mLine = lines[c].trim()\n                    const macroLine = mLine.replace(/\\\\$/, '').trim()\n                    if (macroLine.length > 0) {\n                        if (append) {\n                            append = false\n                            macroLines[macroLines.length - 1] += macroLine\n                        } else {\n                            macroLines.push(macroLine)\n                        }\n                    }\n                    if (mLine.match(/:\\\\$/)) {\n                        append = true\n                    }\n                }\n                const macroCall = firstLine[0].split('(')\n                nerpRunner.macrosByName[macroCall[0]] = {\n                    args: macroCall[1].replace(/\\)$/, '').split(','),\n                    lines: macroLines,\n                }\n            } else {\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(this.replaceMacros(nerpRunner.macrosByName, line))\n            }\n        }\n        // somewhat precompile the script and create syntax tree\n        // must be done in separate block to make sure the script is complete and we can refer/rely on line numbers for label jumps\n        for (let c = 0; c < nerpRunner.scriptLines.length; c++) {\n            const line = nerpRunner.scriptLines[c]\n            nerpRunner.statements[c] = line.replace(/\\(\\)/g, '') // now the macros are applied and obsolete empty \"()\" can be removed\n                .split(' ? ')\n            const labelMatch = line.match(/(\\S+):/)\n            if (nerpRunner.statements[c].length === 2) { // line contains condition (primary operator)\n                nerpRunner.statements[c] = {\n                    invoke: 'conditional',\n                    args: [this.preProcess(nerpRunner.statements[c][0]), this.preProcess(nerpRunner.statements[c][1])],\n                }\n            } else if (labelMatch) { // keep label line number for later usage\n                const labelName = labelMatch[1].toLowerCase()\n                nerpRunner.labelsByName[labelName] = c\n                nerpRunner.statements[c] = {label: labelName}\n            } else if (nerpRunner.statements[c].length === 1) { // just a call\n                nerpRunner.statements[c] = this.preProcess(nerpRunner.statements[c][0])\n            } else { // lines contains more than 1 condition statement\n                throw 'Can\\'t deal with line: ' + line\n            }\n        }\n        return nerpRunner\n    }\n\n    static replaceMacros(macrosByName, line): string[] {\n        // check if this line contains a macro\n        const split = line.split('(') // not a very stable check though...\n        const macro = macrosByName[split[0]]\n        if (macro) {\n            const argValues = split.splice(1).join('(').slice(0, -1).split(',')\n            if (argValues.length !== macro.args.length) {\n                throw 'Invalid number of args provided for macro in line ' + line\n            }\n            const macroLines = []\n            macro.lines.forEach((line) => {\n                for (let c = 0; c < argValues.length; c++) {\n                    line = line.replace(new RegExp('\\\\b' + macro.args[c] + '\\\\b'), argValues[c])\n                }\n                macroLines.push(...(this.replaceMacros(macrosByName, line)))\n            })\n            return macroLines\n        } else {\n            return [line]\n        }\n    }\n\n    static preProcess(expression) {\n        expression = expression.trim().replace(/^_/, '') // remove whitespace and leading underscore\n        const number = parseInt(expression)\n        if (!isNaN(number)) {\n            return number\n        }\n        const opSplit = expression.split(/ (=) | (!=) | (>) | (<) /).filter(e => e !== undefined)\n        const brackets = expression.match(/^(.+)\\((.+)\\)$/)\n        const spaceSplit = expression.split(' ')\n        const labelMatch = expression.match(/([^:]+):$/)\n        const jumpMatch = expression.match(/^:([^:]+)$/)\n        if (opSplit.length === 3) { // expression contains secondary operator\n            return {left: this.preProcess(opSplit[0]), comparator: opSplit[1], right: this.preProcess(opSplit[2])}\n        } else if (brackets) {\n            const args = brackets[2].split(',').map(a => this.preProcess(a))\n            return {invoke: brackets[1], args: args}\n        } else if (spaceSplit.length > 1) { // space split must be the very last since most expressions contain space\n            const args = spaceSplit.length === 2 ? [this.preProcess(spaceSplit[1])] : spaceSplit.splice(1).map(a => this.preProcess(a))\n            return {invoke: spaceSplit[0], args: args}\n        } else if (labelMatch) { // label definition\n            return {label: labelMatch[1]}\n        } else if (jumpMatch) { // jump to label\n            return {jump: jumpMatch[1].toLowerCase()}\n        } else { // function call without args\n            if (expression.match(/[ =?><!]/)) {\n                throw 'Invalid expression given, parsing must have failed before somewhere'\n            }\n            return {invoke: expression, args: []}\n        }\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { NerpParser } from '../core/NerpParser'\nimport { NerpRunner } from '../core/NerpRunner'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { AirLevelChanged } from '../event/LocalEvents'\nimport { JobCreateEvent } from '../event/WorldEvents'\nimport { UPDATE_OXYGEN_TIMER } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MaterialEntity } from './model/collect/MaterialEntity'\nimport { GameState } from './model/GameState'\n\nexport class WorldManager {\n\n    nerpRunner: NerpRunner = null\n    oxygenUpdateInterval = null\n\n    constructor() {\n        EventBus.registerEventListener(EventKey.DESELECTED_ENTITY, () => GameState.selectEntities([]))\n        EventBus.registerEventListener(EventKey.CAVERN_DISCOVERED, () => {\n            GameState.discoveredCaverns++\n        })\n        this.oxygenUpdateInterval = setInterval(this.updateOxygen.bind(this), UPDATE_OXYGEN_TIMER)\n    }\n\n    setup(levelConf: LevelEntryCfg, onLevelEnd: () => any) {\n        GameState.levelFullName = levelConf.fullName\n        GameState.totalCaverns = levelConf.reward?.quota?.caverns || 0\n        GameState.rewardConfig = levelConf.reward\n        GameState.priorityList.setList(levelConf.priorities)\n        GameState.oxygenRate = levelConf.oxygenRate\n\n        // load nerp script\n        this.nerpRunner = NerpParser.parse(ResourceManager.getResource(levelConf.nerpFile))\n        this.nerpRunner.messages.push(...(ResourceManager.getResource(levelConf.nerpMessageFile)))\n        this.nerpRunner.onLevelEnd = onLevelEnd\n    }\n\n    start() {\n        this.nerpRunner?.startExecution()\n        GameState.levelStartTime = Date.now()\n    }\n\n    stop() {\n        GameState.levelStopTime = Date.now()\n        this.nerpRunner?.pauseExecution()\n        GameState.spiders.forEach((m) => m.onLevelEnd())\n        GameState.bats.forEach((b) => b.onLevelEnd())\n    }\n\n    placeMaterial(item: MaterialEntity, worldPosition: Vector2) {\n        item.addToScene(worldPosition, 0)\n        if (item.group.visible) {\n            GameState.materials.push(item)\n            EventBus.publishEvent(new JobCreateEvent(item.createCarryJob()))\n        } else {\n            GameState.materialsUndiscovered.push(item)\n        }\n        return item\n    }\n\n    updateOxygen() {\n        const sum = GameState.raiders.map((r) => r.stats.OxygenCoef).reduce((l, r) => l + r, 0) +\n            GameState.buildings.map((b) => b.isPowered() ? b.stats.OxygenCoef : 0).reduce((l, r) => l + r, 0)\n        const rateMultiplier = 0.001\n        const valuePerSecond = 1 / 25\n        const msToSeconds = 0.001\n        const diff = sum * GameState.oxygenRate * rateMultiplier * valuePerSecond * UPDATE_OXYGEN_TIMER * msToSeconds / 10\n        if (diff) {\n            GameState.airLevel = Math.min(1, Math.max(0, GameState.airLevel + diff))\n            EventBus.publishEvent(new AirLevelChanged())\n        }\n    }\n\n}\n","import { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../../params'\n\nexport class ScreenLayer {\n\n    canvas: HTMLCanvasElement\n    context: CanvasRenderingContext2D\n    onRedraw: (context: CanvasRenderingContext2D) => any\n    active: boolean = true\n\n    constructor(alpha: boolean = false, withContext: boolean = true) {\n        this.canvas = document.createElement('canvas')\n        if (!alpha) this.canvas.style.background = '#f0f'\n        if (withContext) this.context = this.canvas.getContext('2d', {alpha: alpha})\n        this.hide()\n    }\n\n    reset() {\n    }\n\n    setZIndex(zIndex: number) {\n        this.canvas.style.zIndex = String(zIndex)\n    }\n\n    static compareZ(layerA: ScreenLayer, layerB: ScreenLayer) {\n        let aIndex = layerA?.canvas?.style?.zIndex || 0\n        const bIndex = layerB?.canvas?.style?.zIndex || 0\n        return aIndex === bIndex ? 0 : aIndex > bIndex ? -1 : 1\n    }\n\n    resize(width, height) {\n        this.canvas.width = width\n        this.canvas.height = height\n    }\n\n    redraw() {\n        const callback = this.onRedraw\n        if (this.isActive() && callback) {\n            const context = this.context\n            requestAnimationFrame(() => callback(context))\n        }\n    }\n\n    show() {\n        this.reset()\n        this.active = true\n        this.canvas.style.visibility = 'visible'\n        this.redraw()\n    }\n\n    hide() {\n        this.active = false\n        this.canvas.style.visibility = 'hidden'\n    }\n\n    isActive() {\n        return this.active\n    }\n\n    toCanvasCoords(windowX: number, windowY: number) {\n        const clientRect = this.canvas.getBoundingClientRect()\n        return [windowX - clientRect.left, windowY - clientRect.top]\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        return false\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): boolean {\n        return false\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        return false\n    }\n\n}\n\nexport class ScaledLayer extends ScreenLayer {\n\n    fixedWidth: number = SPRITE_RESOLUTION_WIDTH\n    fixedHeight: number = SPRITE_RESOLUTION_HEIGHT\n    scaleX: number\n    scaleY: number\n\n    constructor() {\n        super(true)\n        this.updateScale()\n    }\n\n    private updateScale() {\n        this.scaleX = this.canvas.width / this.fixedWidth\n        this.scaleY = this.canvas.height / this.fixedHeight\n    }\n\n    toScaledCoords(windowX: number, windowY: number) {\n        const [cx, cy] = this.toCanvasCoords(windowX, windowY)\n        return [cx / this.scaleX, cy / this.scaleY].map((c) => Math.round(c))\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        this.updateScale()\n        this.context.scale(this.scaleX, this.scaleY)\n    }\n\n}\n","import { KEY_EVENT } from './EventTypeEnum'\n\nexport class GameKeyboardEvent {\n\n    eventEnum: KEY_EVENT\n    type: string\n    bubbles: boolean\n    key: string\n\n    constructor(eventEnum: KEY_EVENT, event: KeyboardEvent) {\n        this.eventEnum = eventEnum\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        this.key = event.key\n    }\n\n}\n","import { POINTER_EVENT } from './EventTypeEnum'\n\nexport class GamePointerEvent implements PointerEventInit {\n\n    type: string\n    eventEnum: POINTER_EVENT\n    bubbles: boolean\n    clientX: number\n    clientY: number\n    pointerType: string\n    button: number\n    ctrlKey: boolean\n    metaKey: boolean\n    shiftKey: boolean\n\n    constructor(eventEnum: POINTER_EVENT, event: PointerEvent) {\n        this.eventEnum = eventEnum\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        // all event attributes used by three.js controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n        this.clientX = event.clientX\n        this.clientY = event.clientY\n        this.pointerType = event.pointerType\n        this.button = event.button\n        this.ctrlKey = event.ctrlKey\n        this.metaKey = event.metaKey\n        this.shiftKey = event.shiftKey\n    }\n\n}\n","export class GameWheelEvent {\n\n    type: string\n    bubbles: boolean\n    clientX: number\n    clientY: number\n    deltaX: number\n    deltaY: number\n    deltaZ: number\n    button: number\n    ctrlKey: boolean\n    metaKey: boolean\n    shiftKey: boolean\n\n    constructor(event: WheelEvent) {\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        // all event attributes used by three.js controls: clientX, clientY, deltaY, keyCode, touches, button, ctrlKey, metaKey, shiftKey\n        this.clientX = event.clientX\n        this.clientY = event.clientY\n        this.deltaX = event.deltaX\n        this.deltaY = event.deltaY\n        this.deltaZ = event.deltaZ\n        this.button = event.button\n        this.ctrlKey = event.ctrlKey\n        this.metaKey = event.metaKey\n        this.shiftKey = event.shiftKey\n    }\n\n}\n","import { DEV_MODE } from '../params'\nimport { BaseScreen } from '../screen/BaseScreen'\nimport { ScreenLayer } from '../screen/layer/ScreenLayer'\nimport { KEY_EVENT, POINTER_EVENT } from './EventTypeEnum'\nimport { GameKeyboardEvent } from './GameKeyboardEvent'\nimport { GamePointerEvent } from './GamePointerEvent'\nimport { GameWheelEvent } from './GameWheelEvent'\n\nexport class EventManager {\n\n    constructor(screen: BaseScreen) {\n        screen.gameCanvasContainer.addEventListener('contextmenu', (event: MouseEvent) => {\n            if (screen.isInRect(event)) event.preventDefault()\n        })\n        new Map<string, POINTER_EVENT>([\n            ['pointermove', POINTER_EVENT.MOVE],\n            ['pointerdown', POINTER_EVENT.DOWN],\n            ['pointerup', POINTER_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: PointerEvent) => {\n                if (!screen.isInRect(event)) return\n                event.preventDefault()\n                const nonBubblingClone = new GamePointerEvent(eventEnum, event)\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handlePointerEvent(nonBubblingClone))\n            })\n        })\n        new Map<string, KEY_EVENT>([\n            ['keydown', KEY_EVENT.DOWN],\n            ['keyup', KEY_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: KeyboardEvent) => {\n                if (!DEV_MODE) event.preventDefault()\n                const nonBubblingClone = new GameKeyboardEvent(eventEnum, event)\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handleKeyEvent(nonBubblingClone))\n            })\n        })\n        screen.gameCanvasContainer.addEventListener('wheel', (event: WheelEvent) => {\n            if (!screen.isInRect(event)) return\n            const nonBubblingClone = new GameWheelEvent(event)\n            screen.layers.filter(l => l.isActive())\n                .sort((a, b) => ScreenLayer.compareZ(a, b))\n                .some(l => l.handleWheelEvent(nonBubblingClone))\n        })\n    }\n\n}\n","import { iGet } from '../../core/Util'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { ChangeCursor } from '../../event/LocalEvents'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Cursors } from '../Cursors'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class CursorLayer extends ScreenLayer {\n\n    pointersCfg\n    curUrl\n\n    constructor() {\n        super(true, false)\n        EventBus.registerEventListener(EventKey.CHANGE_CURSOR, (event: ChangeCursor) => {\n            this.changeCursor(event.cursor)\n        })\n    }\n\n    show() {\n        super.show()\n        this.pointersCfg = ResourceManager.cfg('Pointers')\n        this.changeCursor(Cursors.Pointer_Standard)\n    }\n\n    hide() {\n        super.hide()\n        this.canvas.style.cursor = null\n    }\n\n    private changeCursor(cursor: Cursors) {\n        if (this.curUrl) URL.revokeObjectURL(this.curUrl)\n        if (!this.pointersCfg) return\n        const cursorFilename = iGet(this.pointersCfg, Cursors[cursor])\n        const curImg = ResourceManager.getImage(cursorFilename)\n        this.curUrl = curImg.toDataURL()\n        // no resized possible; Chrome limits cursor size to 32x32 anyway\n        this.canvas.style.cursor = 'url(' + this.curUrl + '), auto'\n    }\n\n}\n","import { EventManager } from '../event/EventManager'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../params'\nimport { CursorLayer } from './layer/CursorLayer'\nimport { ScreenLayer } from './layer/ScreenLayer'\n\nexport class BaseScreen {\n\n    gameCanvasContainer: HTMLElement\n    eventMgr: EventManager\n    layers: ScreenLayer[] = []\n    width: number = SPRITE_RESOLUTION_WIDTH\n    height: number = SPRITE_RESOLUTION_HEIGHT\n    ratio: number = SPRITE_RESOLUTION_WIDTH / SPRITE_RESOLUTION_HEIGHT\n    cursorLayer: CursorLayer\n\n    constructor() {\n        this.gameCanvasContainer = document.getElementById('game-canvas-container')\n        this.gameCanvasContainer.focus()\n        this.eventMgr = new EventManager(this)\n        if (!this.gameCanvasContainer) throw 'Fatal error: game canvas container not found!'\n        window.addEventListener('resize', () => this.onWindowResize())\n        this.onWindowResize()\n        this.cursorLayer = this.addLayer(new CursorLayer(), 1000)\n    }\n\n    addLayer<T extends ScreenLayer>(layer: T, zIndex: number = 0): T {\n        layer.resize(this.width, this.height)\n        layer.setZIndex(zIndex)\n        this.layers.push(layer)\n        this.gameCanvasContainer.appendChild(layer.canvas)\n        return layer\n    }\n\n    redraw() {\n        this.layers.forEach((layer) => layer.redraw())\n    }\n\n    show() {\n        this.layers.forEach((layer) => layer.show())\n        this.redraw()\n    }\n\n    hide() {\n        this.layers.forEach((layer) => layer.hide())\n    }\n\n    onWindowResize() {\n        const maxWidth = this.gameCanvasContainer.offsetWidth, maxHeight = this.gameCanvasContainer.offsetHeight\n        const idealHeight = Math.round(maxWidth / this.ratio)\n        if (idealHeight > maxHeight) {\n            this.resize(Math.round(maxHeight * this.ratio), maxHeight)\n        } else {\n            this.resize(maxWidth, idealHeight)\n        }\n    }\n\n    resize(width: number, height: number) {\n        this.width = width\n        this.height = height\n        this.layers.forEach((layer) => layer.resize(width, height))\n        this.redraw()\n    }\n\n    isInRect(event: MouseEvent | WheelEvent) {\n        if (this.layers.length < 1) return false\n        const firstLayer = this.layers[0] // all layers have same state and size\n        if (!firstLayer.isActive() || !firstLayer.canvas) return false\n        const rect = firstLayer.canvas.getBoundingClientRect()\n        const clientX = event.clientX, clientY = event.clientY\n        return clientX >= rect.left && clientX < rect.right && clientY >= rect.top && clientY < rect.bottom\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { MaterialEntity } from '../../collect/MaterialEntity'\nimport { Surface } from '../../map/Surface'\nimport { SurfaceType } from '../../map/SurfaceType'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PublicJob } from '../Job'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class CompletePowerPathJob extends PublicJob {\n\n    surface: Surface\n    placedItems: MaterialEntity[]\n    workplaces: PathTarget[]\n\n    constructor(surface: Surface, placedItems: MaterialEntity[]) {\n        super(JobType.COMPLETE_POWER_PATH)\n        this.surface = surface\n        this.placedItems = placedItems\n        this.workplaces = [new PathTarget(surface.getRandomPosition())]\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.placedItems.forEach((placed) => placed.removeFromScene())\n        this.surface.surfaceType = SurfaceType.POWER_PATH\n        this.surface.updateTexture()\n        this.surface.neighbors.forEach((s) => s.updateTexture())\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.SHOVEL\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityConstruction\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.workplaces\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Clear\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { BarrierActivity } from '../activities/BarrierActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { Barrier } from '../collect/Barrier'\nimport { Crystal } from '../collect/Crystal'\nimport { MaterialEntity } from '../collect/MaterialEntity'\nimport { Ore } from '../collect/Ore'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CompletePowerPathJob } from '../job/surface/CompletePowerPathJob'\nimport { Surface } from '../map/Surface'\nimport { BuildingEntity } from './BuildingEntity'\n\nexport class BuildingSite {\n\n    primarySurface: Surface = null\n    secondarySurface: Surface = null\n    building: BuildingEntity\n    heading: number = 0\n    neededByType: Map<EntityType, number> = new Map()\n    assignedByType: Map<EntityType, MaterialEntity[]> = new Map()\n    onSiteByType: Map<EntityType, MaterialEntity[]> = new Map()\n    complete: boolean = false\n\n    constructor(primarySurface: Surface, secondarySurface: Surface = null, building: BuildingEntity = null) {\n        this.primarySurface = primarySurface\n        this.secondarySurface = secondarySurface\n        this.building = building\n    }\n\n    getRandomDropPosition(): Vector2 {\n        return this.primarySurface.getRandomPosition()\n    }\n\n    needs(EntityType: EntityType): boolean {\n        const needed = this.neededByType.getOrUpdate(EntityType, () => 0)\n        const assigned = this.assignedByType.getOrUpdate(EntityType, () => []).length\n        return needed > assigned\n    }\n\n    assign(item: MaterialEntity) {\n        this.assignedByType.getOrUpdate(item.entityType, () => []).push(item)\n    }\n\n    unAssign(item: MaterialEntity) {\n        this.assignedByType.getOrUpdate(item.entityType, () => []).remove(item)\n    }\n\n    addItem(item: MaterialEntity) {\n        const needed = this.neededByType.getOrUpdate(item.entityType, () => 0)\n        if (this.onSiteByType.getOrUpdate(item.entityType, () => []).length < needed) {\n            item.onAddToSite()\n            this.onSiteByType.getOrUpdate(item.entityType, () => []).push(item)\n            this.checkComplete()\n        } else {\n            item.resetTarget()\n        }\n    }\n\n    checkComplete() {\n        if (this.complete) return\n        this.complete = true\n        this.neededByType.forEach((needed, neededType) => {\n            this.complete = this.complete && this.onSiteByType.getOrUpdate(neededType, () => []).length >= needed\n        })\n        if (!this.complete) return\n        GameState.buildingSites.remove(this)\n        if (!this.building) {\n            const items = []\n            this.onSiteByType.forEach((itemsOnSite) => items.push(...itemsOnSite))\n            EventBus.publishEvent(new JobCreateEvent(new CompletePowerPathJob(this.primarySurface, items)))\n        } else {\n            this.onSiteByType.getOrUpdate(EntityType.BARRIER, () => []).forEach((item: Barrier) => {\n                item.changeActivity(BarrierActivity.Teleport, () => item.removeFromScene())\n            })\n            this.onSiteByType.getOrUpdate(EntityType.CRYSTAL, () => []).forEach((item: Crystal) => {\n                item.removeFromScene()\n            })\n            this.onSiteByType.getOrUpdate(EntityType.ORE, () => []).forEach((item: Ore) => {\n                item.removeFromScene()\n            })\n            const world = this.primarySurface.getCenterWorld2D()\n            this.building.placeDown(world, -this.heading + Math.PI / 2, false)\n        }\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n}\n","import { Raycaster, Vector2 } from 'three'\nimport { EventBus } from '../../event/EventBus'\nimport { KEY_EVENT, MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { CancelBuildMode, ChangeCursor, EntityDeselected } from '../../event/LocalEvents'\nimport { BuildingSite } from '../../game/model/building/BuildingSite'\nimport { EntityType } from '../../game/model/EntityType'\nimport { FulfillerEntity } from '../../game/model/FulfillerEntity'\nimport { GameState } from '../../game/model/GameState'\nimport { Job } from '../../game/model/job/Job'\nimport { MoveJob } from '../../game/model/job/MoveJob'\nimport { Surface } from '../../game/model/map/Surface'\nimport { SurfaceType } from '../../game/model/map/SurfaceType'\nimport { Raider } from '../../game/model/raider/Raider'\nimport { SelectionType } from '../../game/model/Selectable'\nimport { SceneManager } from '../../game/SceneManager'\nimport { WorldManager } from '../../game/WorldManager'\nimport { DEV_MODE } from '../../params'\nimport { Cursors } from '../Cursors'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class GameLayer extends ScreenLayer {\n\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    private rightDown: { x: number, y: number } = {x: 0, y: 0}\n    private lastCursor: Cursors = Cursors.Pointer_Standard\n\n    constructor() {\n        super(false, false)\n    }\n\n    reset() {\n        super.reset()\n        this.rightDown = {x: 0, y: 0}\n        this.lastCursor = Cursors.Pointer_Standard\n    }\n\n    hide() {\n        super.hide()\n        EventBus.publishEvent(new ChangeCursor(Cursors.Pointer_Standard))\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        const buildMarker = this.sceneMgr.buildMarker\n        if (event.eventEnum === POINTER_EVENT.MOVE) {\n            const intersectionPoint = this.getTerrainPositionFromEvent(event)\n            if (intersectionPoint) this.sceneMgr.setTorchPosition(intersectionPoint)\n            buildMarker.update(this.sceneMgr.terrain, intersectionPoint)\n            this.updateCursor(event)\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                if (GameState.buildModeSelection && buildMarker.lastCheck) {\n                    const building = GameState.buildModeSelection(this.worldMgr, this.sceneMgr)\n                    buildMarker.visibleSurfaces.forEach((s) => {\n                        s.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                        s.updateTexture()\n                        s.neighbors.forEach((n) => n.updateTexture())\n                    })\n                    const barrierLocations = buildMarker.getBarrierLocations()\n                    const stats = building.stats\n                    const neededCrystals = stats?.CostCrystal || 0\n                    const neededOre = stats?.CostOre || 0\n                    const site = new BuildingSite(buildMarker.primarySurface, buildMarker.secondarySurface, building)\n                    site.heading = buildMarker.heading\n                    site.neededByType.set(EntityType.BARRIER, barrierLocations.length)\n                    site.neededByType.set(EntityType.CRYSTAL, neededCrystals)\n                    site.neededByType.set(EntityType.ORE, neededOre)\n                    GameState.buildingSites.push(site)\n                    const closestToolstation = GameState.getClosestBuildingByType(buildMarker.primarySurface.getCenterWorld(), EntityType.TOOLSTATION)\n                    if (closestToolstation) {\n                        closestToolstation.spawnBarriers(barrierLocations, site)\n                        closestToolstation.spawnMaterials(EntityType.CRYSTAL, neededCrystals)\n                        closestToolstation.spawnMaterials(EntityType.ORE, neededOre)\n                    }\n                    EventBus.publishEvent(new EntityDeselected())\n                    EventBus.publishEvent(new CancelBuildMode())\n                }\n            } else if (event.button === MOUSE_BUTTON.SECONDARY) {\n                const downUpDistance = Math.abs(event.clientX - this.rightDown.x) + Math.abs(event.clientY - this.rightDown.y)\n                if (downUpDistance < 3 && (GameState.selectionType === SelectionType.RAIDER || GameState.selectionType === SelectionType.GROUP)) {\n                    // TODO check for collectable entity first\n                    const intersectionPoint = this.getTerrainPositionFromEvent(event)\n                    if (intersectionPoint) {\n                        const surface = this.sceneMgr.terrain.getSurfaceFromWorldXZ(intersectionPoint.x, intersectionPoint.y)\n                        if (surface) {\n                            if (surface.isDrillable()) {\n                                this.assignSurfaceJob(surface.createDrillJob(), surface, intersectionPoint)\n                            } else if (surface.hasRubble()) {\n                                this.assignSurfaceJob(surface.createClearRubbleJob(), surface, intersectionPoint)\n                            } else if (surface.isWalkable()) {\n                                GameState.selectedEntities.forEach((raider: Raider) => raider.setJob(new MoveJob(intersectionPoint)))\n                                if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n                            }\n                        }\n                    }\n                } else {\n                    GameState.buildModeSelection = null\n                    buildMarker.hideAllMarker()\n                }\n            }\n        } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.SECONDARY) {\n                this.rightDown.x = event.clientX\n                this.rightDown.y = event.clientY\n            }\n        }\n        this.canvas.dispatchEvent(new PointerEvent(event.type, event))\n        return true\n    }\n\n    updateCursor(event) {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.sceneMgr.camera)\n        const cursor = this.determineCursor(raycaster)\n        if (cursor !== this.lastCursor) {\n            this.lastCursor = cursor\n            EventBus.publishEvent(new ChangeCursor(cursor))\n        }\n    }\n\n    determineCursor(raycaster: Raycaster): Cursors {\n        let intersects = raycaster.intersectObjects(GameState.raiders.map((r) => r.pickSphere))\n        if (intersects.length > 0) {\n            return Cursors.Pointer_Selected\n        } else {\n            let intersects = raycaster.intersectObjects(GameState.buildings.map((b) => b.pickSphere))\n            if (intersects.length > 0) {\n                return Cursors.Pointer_Selected\n            } else {\n                intersects = raycaster.intersectObjects(this.sceneMgr.terrain.floorGroup.children)\n                if (intersects.length > 0) {\n                    const userData = intersects[0].object.userData\n                    if (userData && userData.hasOwnProperty('surface')) {\n                        const surface = userData['surface'] as Surface\n                        if (surface) {\n                            return surface.surfaceType.cursor\n                        }\n                    }\n                }\n            }\n        }\n        return Cursors.Pointer_Standard\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): boolean {\n        if (DEV_MODE && event.eventEnum === KEY_EVENT.UP) {\n            if (GameState.selectionType === SelectionType.SURFACE) {\n                GameState.selectedEntities.forEach((s: Surface) => {\n                    if (event.key === 'c') {\n                        if (!s.surfaceType.floor) s.collapse()\n                    } else if (event.key === 'f') {\n                        const t = s.terrain.findFallInTarget(s.x, s.y)\n                        if (!s.surfaceType.floor) s.createFallin(t[0], t[1])\n                    }\n                })\n                EventBus.publishEvent(new EntityDeselected())\n                return true\n            }\n        }\n        return false\n    }\n\n    assignSurfaceJob(job: Job, surface: Surface, intersectionPoint: Vector2) {\n        if (!job) return\n        GameState.selectedEntities.forEach((e: FulfillerEntity) => {\n            if (e.hasTool(job.getRequiredTool()) && e.hasTraining(job.getRequiredTraining())) {\n                e.setJob(job)\n            } else if (surface.isWalkable()) {\n                e.setJob(new MoveJob(intersectionPoint))\n            }\n        })\n        if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n    }\n\n    getTerrainPositionFromEvent(event): Vector2 {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        return this.sceneMgr.getTerrainIntersectionPoint(rx, ry)\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        this.canvas.dispatchEvent(new WheelEvent(event.type, event))\n        return true\n    }\n\n}\n","export class BaseConfig {\n\n    static setFromCfg(config: BaseConfig, cfgObj: any) {\n        Object.keys(cfgObj).forEach((cfgKey) => {\n            const lCfgKeyName = (cfgKey.startsWith('!') ? cfgKey.substring(1) : cfgKey)\n                .toLowerCase()\n                .replace(/_/g, '') // Activity_Stand\n                .replace(/-/g, '') // Geo-dome\n            const found = Object.keys(config).some((objKey) => {\n                return config.assignValue(objKey, lCfgKeyName, cfgObj[cfgKey])\n            })\n            if (!found) {\n                console.warn('cfg key does not exist: ' + cfgKey)\n            }\n        })\n        return config\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            const currentValue = this[objKey]\n            const currentIsArray = Array.isArray(currentValue)\n            let parsedValue = this.parseValue(lCfgKeyName, cfgValue)\n            const parsedIsArray = Array.isArray(parsedValue)\n            if (currentValue && currentIsArray !== parsedIsArray) {\n                if (currentIsArray) {\n                    parsedValue = [parsedValue]\n                    // } else {\n                    //     console.warn('Array overwrite conflict for key ' + objKey + ' with existing value (' + currentValue + ') and new value (' + parsedValue + ')')\n                }\n            }\n            this[objKey] = parsedValue\n            return true\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return cfgValue\n    }\n\n}\n","export class BaseButtonCfg {\n\n    buttonType?: string = null\n    normalFile?: string = null\n    highlightFile?: string = null\n    pressedFile?: string = null\n    disabledFile?: string = null\n    relX?: number = 0\n    relY?: number = 0\n    width?: number = 0\n    height?: number = 0\n    tooltip?: string = null\n}\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class ButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 9) {\n            [this.buttonType, this.normalFile, this.highlightFile, this.pressedFile, this.relX, this.relY, this.width, this.height, this.tooltip] = cfgValue\n        } else {\n            throw 'Invalid number of arguments (' + cfgValue.length + ') given for button configuration expected 9 or 5'\n        }\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class ButtonInfoDockCfg extends BaseConfig {\n\n    panelButtonInfoDockGoto: ButtonCfg = null\n    panelButtonInfoDockClose: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","export class BaseElement {\n\n    parent: BaseElement = null\n    x: number = 0\n    y: number = 0\n    relX: number = 0\n    relY: number = 0\n    width: number = 0\n    height: number = 0\n    children: BaseElement[] = []\n    hidden: boolean = false\n    disabled: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n\n    constructor(parent: BaseElement = null) {\n        this.parent = parent\n    }\n\n    reset() {\n        this.hidden = false\n        this.disabled = false\n        this.hover = false\n        this.pressed = false\n        this.children.forEach((c) => c.reset())\n    }\n\n    addChild<T extends BaseElement>(child: T): T {\n        child.parent = this\n        this.children.push(child)\n        child.updatePosition()\n        return child\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n    }\n\n    drawTooltip(context: CanvasRenderingContext2D) {\n    }\n\n    onClick() {\n    }\n\n    isInactive(): boolean {\n        for (let parent = this.parent; !!parent; parent = parent.parent) if (parent.isInactive()) return true\n        return this.hidden || this.disabled\n    }\n\n    hide() {\n        this.hidden = true\n        this.children.forEach((child) => child.hide())\n    }\n\n    show() {\n        this.hidden = false\n        this.children.forEach((child) => child.show())\n    }\n\n    updatePosition() {\n        this.x = this.parent ? this.parent.x + this.relX : this.relX\n        this.y = this.parent ? this.parent.y + this.relY : this.relY\n        this.children.forEach((child) => child.updatePosition())\n    }\n\n    isInRect(cx, cy) {\n        return cx >= this.x && cy >= this.y && cx < this.x + this.width && cy < this.y + this.height\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = this.pressed && this.hover\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => stateChanged = child.checkHover(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.pressed !== inRect\n        this.pressed = inRect\n        this.children.forEach((child) => stateChanged = child.checkClick(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        if (inRect && this.pressed) this.onClick()\n        let stateChanged = false\n        this.children.forEach((child) => stateChanged = child.checkRelease(cx, cy) || stateChanged)\n        stateChanged = this.pressed || stateChanged\n        this.pressed = false\n        return stateChanged\n    }\n\n    release(): boolean {\n        let stateChanged = this.pressed || this.hover\n        this.pressed = false\n        this.hover = false\n        this.children.forEach((child) => stateChanged = child.release() || stateChanged)\n        return stateChanged\n    }\n\n    notifyRedraw() {\n        if (this.parent) this.parent.notifyRedraw()\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\n\nexport class Button extends BaseElement {\n\n    buttonType: string = null\n    imgNormal: HTMLCanvasElement = null\n    imgHover: HTMLCanvasElement = null\n    imgPressed: HTMLCanvasElement = null\n    imgDisabled: HTMLCanvasElement = null\n    tooltip: string = null\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent)\n        this.buttonType = btnCfg.buttonType\n        this.imgNormal = ResourceManager.getImageOrNull(btnCfg.normalFile)\n        this.imgHover = ResourceManager.getImageOrNull(btnCfg.highlightFile)\n        this.imgPressed = ResourceManager.getImageOrNull(btnCfg.pressedFile)\n        this.imgDisabled = ResourceManager.getImageOrNull(btnCfg.disabledFile)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width || this.imgNormal?.width || this.imgPressed?.width\n        this.height = btnCfg.height || this.imgNormal?.height || this.imgPressed?.height\n        this.tooltip = btnCfg.tooltip?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.updatePosition()\n    }\n\n    onClick() {\n        console.log('button pressed: ' + this.buttonType)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled || this.imgPressed || this.imgNormal\n        } else if (this.pressed) {\n            img = this.imgPressed || this.imgNormal\n        } else if (this.hover) {\n            img = this.imgHover || this.imgNormal\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { NATIVE_FRAMERATE, PANEL_ANIMATION_MULTIPLIER } from '../../params'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\n\nexport class Panel extends BaseElement {\n\n    img: HTMLCanvasElement = null\n    xOut: number = 0\n    yOut: number = 0\n    xIn: number = 0\n    yIn: number = 0\n    animationTimeout = null\n    movedIn: boolean = true // xIn, yIn is the collapsed position out of screen\n\n    constructor(panelCfg?: PanelCfg) {\n        super()\n        if (panelCfg) {\n            this.img = ResourceManager.getImage(panelCfg.filename)\n            this.xOut = panelCfg.xOut\n            this.yOut = panelCfg.yOut\n            this.xIn = panelCfg.xIn\n            this.yIn = panelCfg.yIn\n            this.relX = this.xIn\n            this.relY = this.yIn\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.relX = this.xIn\n        this.relY = this.yIn\n        this.movedIn = true\n        this.updatePosition()\n    }\n\n    isInactive(): boolean {\n        return this.animationTimeout || super.isInactive()\n    }\n\n    setMovedIn(movedIn: boolean, onDone: () => any = null) {\n        if (this.movedIn !== movedIn) {\n            this.toggleState(onDone)\n        } else if (onDone) {\n            onDone()\n        }\n    }\n\n    toggleState(onDone: () => any = null) {\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        if (this.movedIn) {\n            this.movedIn = false\n            this.updateAnimation(this.xOut, this.yOut, PANEL_ANIMATION_MULTIPLIER, onDone)\n        } else {\n            this.movedIn = true\n            this.updateAnimation(this.xIn, this.yIn, PANEL_ANIMATION_MULTIPLIER, onDone)\n        }\n    }\n\n    protected updateAnimation(targetX: number, targetY: number, speed: number, onDone: () => any) {\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= speed && Math.abs(diffY) <= speed) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * speed)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * speed)\n            const panel = this\n            this.animationTimeout = setTimeout(() => panel.updateAnimation(targetX, targetY, speed, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.img) context.drawImage(this.img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { PanelCfg } from '../../cfg/PanelCfg'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\n\nexport class RadarPanel extends Panel {\n\n    fill: Panel\n    overlay: Panel\n    btnToggle: Button\n    btnMap: Button\n    btnTagged: Button\n\n    constructor(panelCfg: PanelCfg, panelFillCfg: PanelCfg, panelOverlayCfg: PanelCfg, buttonsCfg: ButtonRadarCfg) {\n        super(panelCfg)\n        this.fill = this.addChild(new Panel(panelFillCfg))\n        // fill cords given in abs, turn to rel (otherwise animation wont work)\n        this.fill.relX = this.relX - this.fill.relX\n        this.fill.relY = this.relY - this.fill.relY\n        this.overlay = this.addChild(new Panel(panelOverlayCfg))\n        // this.overlay.hide();\n        this.btnToggle = this.addChild(new Button(this, buttonsCfg.panelButtonRadarToggle))\n        this.btnToggle.onClick = () => this.toggleState()\n        this.btnMap = this.addChild(new Button(this, buttonsCfg.panelButtonRadarMapView))\n        this.btnMap.onClick = () => {\n            // this.fill.hide();\n            // this.overlay.hide();\n        }\n        this.btnTagged = this.addChild(new Button(this, buttonsCfg.panelButtonRadarTaggedObjectView))\n        this.btnTagged.onClick = () => {\n            // this.fill.show();\n            // this.overlay.show(); // TODO only show overlay, when entity selected\n        }\n    }\n\n}\n\nexport class ButtonRadarCfg extends BaseConfig {\n\n    panelButtonRadarToggle: ButtonCfg = null\n    panelButtonRadarTaggedObjectView: ButtonCfg = null\n    panelButtonRadarZoomIn: ButtonCfg = null\n    panelButtonRadarZoomOut: ButtonCfg = null\n    panelButtonRadarMapView: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { BaseElement } from '../base/BaseElement'\n\nexport class SideBarLabel extends BaseElement {\n\n    tooltip: string\n    label: string\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg, label: string) {\n        super(parent)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width\n        this.height = btnCfg.height\n        this.tooltip = btnCfg.tooltip\n        this.label = label\n        this.updatePosition()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.textAlign = 'center'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.label, this.x + this.width / 2, this.y + this.height - 2)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { PanelCfg } from '../../cfg/PanelCfg'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\nimport { SideBarLabel } from './SideBarLabel'\n\nexport class PanelCrystalSideBar extends Panel {\n\n    labelOre: SideBarLabel\n    labelCrystal: SideBarLabel\n    imgNoCrystal: HTMLCanvasElement\n    imgSmallCrystal: HTMLCanvasElement\n    imgUsedCrystal: HTMLCanvasElement\n    imgOre: HTMLCanvasElement\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonCrystalSideBarCfg) {\n        super(panelCfg)\n        this.labelOre = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarOre, GameState.totalOre.toString()))\n        this.labelCrystal = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarCrystals, GameState.numCrystal.toString()))\n        this.imgNoCrystal = ResourceManager.getImage('Interface/RightPanel/NoSmallCrystal.bmp')\n        this.imgSmallCrystal = ResourceManager.getImage('Interface/RightPanel/SmallCrystal.bmp')\n        this.imgUsedCrystal = ResourceManager.getImage('Interface/RightPanel/UsedCrystal.bmp')\n        this.imgOre = ResourceManager.getImage('Interface/RightPanel/CrystalSideBar_Ore.bmp')\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, (event: MaterialAmountChanged) => {\n            if (event.entityType === EntityType.CRYSTAL || event.entityType === EntityType.ORE || event.entityType === EntityType.BRICK) {\n                this.notifyRedraw()\n            }\n        })\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        this.labelOre.label = GameState.totalOre.toString()\n        this.labelCrystal.label = GameState.numCrystal.toString()\n        super.onRedraw(context)\n        // draw crystals\n        let curX = this.x + this.img.width - 8\n        let curY = this.y + this.img.height - 34\n        for (let c = 0; (GameState.neededCrystals < 1 || c < Math.max(GameState.neededCrystals, GameState.numCrystal)) && curY >= Math.max(this.imgNoCrystal.height, this.imgSmallCrystal.height, this.imgUsedCrystal.height); c++) {\n            let imgCrystal = this.imgNoCrystal\n            if (GameState.usedCrystals > c) {\n                imgCrystal = this.imgUsedCrystal\n            } else if (GameState.numCrystal > c) {\n                imgCrystal = this.imgSmallCrystal\n            }\n            curY -= imgCrystal.height\n            context.drawImage(imgCrystal, curX - imgCrystal.width / 2, curY)\n        }\n        // draw ores\n        curX = this.x + this.img.width - 21\n        curY = this.y + this.img.height - 42\n        for (let i = 0; i < GameState.numOre && curY >= this.imgOre.height; ++i) {\n            curY -= this.imgOre.height\n            context.drawImage(this.imgOre, curX - this.imgOre.width / 2, curY)\n        }\n    }\n\n}\n\nexport class ButtonCrystalSideBarCfg extends BaseConfig {\n\n    panelButtonCrystalSideBarOre: ButtonCfg = null\n    panelButtonCrystalSideBarCrystals: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class ButtonPriorityListCfg extends BaseConfig {\n\n    panelButtonPriorityListDisable: ButtonCfg[] = []\n    panelButtonPriorityListUpOne: ButtonCfg[] = []\n    panelButtonPriorityListClose: ButtonCfg = null // not used in the game\n    panelButtonPriorityListReset: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName.match(/panelButtonPriorityListDisable\\d+/i)) {\n            this.panelButtonPriorityListDisable.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else if (lCfgKeyName.match(/panelButtonPriorityListUpOne\\d+/i)) {\n            this.panelButtonPriorityListUpOne.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else {\n            return super.assignValue(objKey, lCfgKeyName, cfgValue)\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class ButtonTopCfg extends BaseConfig {\n\n    panelButtonTopPanelCallToArms: ButtonCfg = null\n    panelButtonTopPanelOptions: ButtonCfg = null\n    panelButtonTopPanelPriorities: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ButtonCfg } from './ButtonCfg'\n\nexport class ButtonCameraControlCfg extends BaseConfig {\n\n    panelButtonCameraControlZoomIn: ButtonCfg = null\n    panelButtonCameraControlZoomOut: ButtonCfg = null\n    panelButtonCameraControlCycleBuildings: ButtonCfg = null\n    panelButtonCameraControlRotate: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ButtonCfg } from './ButtonCfg'\n\nexport class ButtonInformationCfg extends BaseConfig {\n\n    panelButtonInformationToggle: ButtonCfg = null\n    panelButtonInformationFunction: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { ButtonInfoDockCfg } from '../gui/infodock/ButtonInfoDockCfg'\nimport { ButtonRadarCfg } from '../gui/radar/RadarPanel'\nimport { ButtonCrystalSideBarCfg } from '../gui/sidebar/PanelCrystalSideBar'\nimport { ButtonPriorityListCfg } from '../gui/toppanel/ButtonPriorityListCfg'\nimport { ButtonTopCfg } from '../gui/toppanel/ButtonTopCfg'\nimport { BaseConfig } from './BaseConfig'\nimport { ButtonCameraControlCfg } from './ButtonCameraControlCfg'\nimport { ButtonInformationCfg } from './ButtonInformationCfg'\n\nexport class ButtonsCfg extends BaseConfig {\n\n    panelRadar: ButtonRadarCfg = null\n    panelCrystalSideBar: ButtonCrystalSideBarCfg = null\n    panelTopPanel: ButtonTopCfg = null\n    panelInformation: ButtonInformationCfg = null\n    panelPriorityList: ButtonPriorityListCfg = null\n    panelCameraControl: ButtonCameraControlCfg = null\n    panelInfoDock: ButtonInfoDockCfg = null\n    panelEncyclopedia: any = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        const btnCfgValue = {}\n        cfgValue.forEach(arr => btnCfgValue[arr[0]] = arr)\n        if (lCfgKeyName === 'panelRadar'.toLowerCase()) {\n            return new ButtonRadarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCrystalSideBar'.toLowerCase()) {\n            return new ButtonCrystalSideBarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelTopPanel'.toLowerCase()) {\n            return new ButtonTopCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInformation'.toLowerCase()) {\n            return new ButtonInformationCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelPriorityList'.toLowerCase()) {\n            return new ButtonPriorityListCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCameraControl'.toLowerCase()) {\n            return new ButtonCameraControlCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInfoDock'.toLowerCase()) {\n            return new ButtonInfoDockCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelEncyclopedia'.toLowerCase()) {\n            return null // not used in the game\n        } else {\n            return btnCfgValue\n        }\n    }\n\n}\n","export class PanelCfg {\n\n    filename: string\n    xOut: number\n    yOut: number\n    xIn: number\n    yIn: number\n\n    constructor(cfgValue: any) {\n        [this.filename, this.xOut, this.yOut, this.xIn, this.yIn] = cfgValue\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { PanelCfg } from './PanelCfg'\n\nexport class PanelsCfg extends BaseConfig {\n\n    panelRadar: PanelCfg = null\n    panelRadarFill: PanelCfg = null\n    panelRadarOverlay: PanelCfg = null\n    panelMessages: PanelCfg = null\n    panelMessagesSide: PanelCfg = null\n    panelCrystalSideBar: PanelCfg = null\n    panelTopPanel: PanelCfg = null\n    panelInformation: PanelCfg = null\n    panelPriorityList: PanelCfg = null\n    panelCameraControl: PanelCfg = null\n    panelInfoDock: PanelCfg = null\n    panelEncyclopedia: PanelCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new PanelCfg(cfgValue)\n    }\n}\n\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class InfoButtonCfg extends BaseButtonCfg {\n\n    constructor(buttonImageFilename: string) {\n        super()\n        this.normalFile = buttonImageFilename\n        this.highlightFile = buttonImageFilename\n        this.pressedFile = buttonImageFilename\n        this.disabledFile = buttonImageFilename\n        this.relX = 0\n        this.relY = 0\n    }\n\n}\n","import { InfoButtonCfg } from '../../cfg/InfoButtonCfg'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { WorldEvent } from '../../event/WorldEvents'\nimport { WorldLocationEvent } from '../../event/WorldLocationEvent'\nimport { NATIVE_FRAMERATE } from '../../params'\nimport { Button } from '../base/Button'\nimport { InfoDockPanel } from './InfoDockPanel'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\n\nexport class InfoDockButton extends Button {\n\n    messages: WorldEvent[] = [] // newest message first\n    text: string = null\n    animationTimeout = null\n    animationSpeedX = 0.5\n    animationSpeedY = 1\n\n    constructor(parent: InfoDockPanel, infoMessagesEntryConfig: InfoMessagesEntryConfig, eventKey: EventKey) {\n        super(parent, new InfoButtonCfg(infoMessagesEntryConfig.buttonImageFilename))\n        this.text = infoMessagesEntryConfig.message\n        this.hidden = true\n\n        this.onClick = () => {\n            if (this.messages.length < 1) return\n            parent.buttonClicked(this)\n        }\n\n        EventBus.registerEventListener(eventKey, (event: WorldLocationEvent) => {\n            this.hidden = false\n            while (this.messages.length >= 9) this.messages.pop()\n            this.messages.unshift(event)\n            parent.showButton(this)\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.text = null\n        this.hidden = true\n        this.messages = []\n    }\n\n    slideToTarget(targetX: number, targetY: number): Promise<void> {\n        return new Promise<void>((resolve) => this.updateAnimation(targetX, targetY, resolve))\n    }\n\n    private updateAnimation(targetX: number, targetY: number, onDone: () => any) { // TODO refactor: almost equal with code for Panel\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= this.animationSpeedX && Math.abs(diffY) <= this.animationSpeedY) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * this.animationSpeedX)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * this.animationSpeedY)\n            const that = this\n            this.animationTimeout = setTimeout(() => that.updateAnimation(targetX, targetY, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.hidden) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.messages.length.toString(), this.x + 2, this.y + this.height / 2 + 2)\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { LandslideEvent } from '../../event/WorldLocationEvent'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { ButtonInfoDockCfg } from './ButtonInfoDockCfg'\nimport { InfoDockButton } from './InfoDockButton'\nimport { InfoMessagesConfig } from './InfoMessagesConfig'\nimport { InformationPanel } from './InformationPanel'\n\nexport class InfoDockPanel extends Panel {\n\n    stackButtons: InfoDockButton[] = []\n    informationPanel: InformationPanel = null\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonInfoDockCfg, infoMessagesConfig: InfoMessagesConfig, informationPanel: InformationPanel) {\n        super(panelCfg)\n        this.informationPanel = informationPanel\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockGoto)).onClick = () => this.gotoLatestMessage()\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockClose)).onClick = () => this.dropLatestMessage()\n\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericDeath, EventKey.LOCATION_DEATH))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericMonster, EventKey.LOCATION_MONSTER))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoCrystalFound, EventKey.LOCATION_CRYSTAL_FOUND))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoUnderAttack, EventKey.LOCATION_UNDER_ATTACK))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoLandslide, EventKey.LOCATION_LANDSLIDE))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoPowerDrain, EventKey.LOCATION_POWER_DRAIN))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoSlugEmerge, EventKey.LOCATION_SLUG_EMERGE))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoFoundMinifigure, EventKey.LOCATION_RAIDER_DISCOVERED))\n    }\n\n    reset() {\n        super.reset()\n        this.stackButtons = []\n    }\n\n    private gotoLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const btn = this.stackButtons[0]\n        if (btn.messages.length < 1) return\n        const msg = btn.messages[0] as LandslideEvent\n        console.log('TODO force move camera to: ' + msg.location.toArray()) // TODO force move camera\n    }\n\n    private dropLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const button = this.stackButtons[0]\n        if (button.messages.length < 1) return\n        button.messages.shift()\n        if (button.messages.length < 1) {\n            button.hidden = true\n            this.informationPanel.setMovedIn(true)\n            this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n            this.slideStackIntoPosition().then()\n        }\n        button.notifyRedraw()\n    }\n\n    showButton(button: InfoDockButton) {\n        if (this.stackButtons.includes(button)) {\n            button.notifyRedraw()\n        } else {\n            this.slideInButton(button)\n        }\n    }\n\n    private slideInButton(button: InfoDockButton) {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        const targetY = -this.stackButtons.map(b => b.height).reduce((prev, cur) => prev + cur, 0)\n        this.stackButtons.push(button)\n        button.relX = -button.width\n        button.relY = targetY - button.height\n        button.updatePosition()\n        button.slideToTarget(0, targetY).then(() => this.stackButtons.forEach(btn => btn.disabled = false))\n    }\n\n    buttonClicked(button: InfoDockButton) {\n        if (button !== this.stackButtons[0]) {\n            this.pushFirst(button)\n        } else {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.toggleState()\n        }\n    }\n\n    private pushFirst(button: InfoDockButton) {\n        this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n        this.stackButtons.unshift(button)\n        this.slideStackIntoPosition().then(() => {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.setMovedIn(false)\n        })\n    }\n\n    private slideStackIntoPosition() {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        let relY = 0\n        const promises = this.stackButtons.map(btn => {\n            const p = btn.slideToTarget(0, relY)\n            relY -= btn.height\n            return p\n        })\n        return new Promise<void>((resolve) => {\n            Promise.all(promises).then(() => {\n                this.stackButtons.forEach(btn => btn.disabled = false)\n                resolve()\n            })\n        })\n    }\n\n}\n\n","export class InfoMessagesEntryConfig {\n\n    message: string = null\n    buttonImageFilename: string = null\n    sfx: string = null\n    timing: string = null\n    flag: string = null\n\n    constructor(cfgValue: any) {\n        [this.message, this.buttonImageFilename, this.sfx, this.timing, this.flag] = cfgValue\n        this.message = this.message.replace(/_/g, ' ')\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\n\nexport class InfoMessagesConfig extends BaseConfig {\n\n    infoGenericDeath: InfoMessagesEntryConfig = null\n    infoGenericMonster: InfoMessagesEntryConfig = null\n    infoCrystalFound: InfoMessagesEntryConfig = null\n    infoUnderAttack: InfoMessagesEntryConfig = null\n    infoLandslide: InfoMessagesEntryConfig = null\n    infoPowerDrain: InfoMessagesEntryConfig = null\n    infoSlugEmerge: InfoMessagesEntryConfig = null\n    infoFoundMinifigure: InfoMessagesEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new InfoMessagesEntryConfig(cfgValue)\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { BitmapFont } from '../../core/BitmapFont'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\n\nexport class InformationPanel extends Panel {\n\n    font: BitmapFont = null\n    textImage = null\n\n    constructor(panelCfg: PanelCfg) {\n        super(panelCfg)\n        this.font = ResourceManager.getDefaultFont()\n    }\n\n    setText(text?: string) {\n        this.textImage = text ? this.font.createTextImage(text, this.img.width - 80) : null\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.textImage) context.drawImage(this.textImage, this.x + (this.img.width - this.textImage.width) / 2, this.y + 12)\n    }\n\n}\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class IconPanelBackButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super();\n        [this.width, this.height, this.highlightFile, this.pressedFile, this.tooltip] = cfgValue // Interface back button\n        this.relX = 4\n        this.relY = 14\n    }\n\n}\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class MenuItemCfg extends BaseButtonCfg {\n\n    tooltipSfx: string = null\n    tooltipDisabled: string = null\n    tooltipDisabledSfx: string = null\n    hotkey: string = null\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 4) {\n            [this.normalFile, this.disabledFile, this.pressedFile, this.hotkey] = cfgValue\n        } else if (cfgValue.length === 6 || cfgValue.length === 7) { // XXX 7th element is boolean, but usage unknown\n            let tooltip, tooltipDisabled\n            [this.normalFile, this.disabledFile, this.pressedFile, tooltip, tooltipDisabled, this.hotkey] = cfgValue\n            if (tooltip) {\n                if (Array.isArray(tooltip)) {\n                    [this.tooltip, this.tooltipSfx] = tooltip\n                } else {\n                    this.tooltip = tooltip\n                }\n            }\n            if (tooltipDisabled) {\n                if (Array.isArray(tooltipDisabled)) {\n                    [this.tooltipDisabled, this.tooltipDisabledSfx] = tooltipDisabled\n                } else {\n                    this.tooltipDisabled = tooltipDisabled\n                }\n            }\n        } else {\n            console.error('Unexpected menu item cfg value length: ' + cfgValue.length)\n        }\n        this.tooltip?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.tooltipDisabled?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.width = 40\n        this.height = 40\n    }\n\n}\n","import { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\n\nexport class IconPanelButton extends Button {\n\n    tooltipSfx: string = null\n    tooltipDisabled: string = null\n    tooltipDisabledSfx: string = null\n    hotkey: string = null\n    isDisabled: () => boolean = () => this.disabled\n\n    constructor(parent: BaseElement, menuItemCfg: MenuItemCfg, itemKey: string, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemCfg)\n        this.buttonType = itemKey\n        this.relX = parentWidth - 59\n        this.relY = 9 + this.height * menuIndex\n        this.tooltipSfx = menuItemCfg.tooltipSfx\n        this.tooltipDisabled = menuItemCfg.tooltipDisabled\n        this.tooltipDisabledSfx = menuItemCfg.tooltipDisabledSfx\n        this.hotkey = menuItemCfg.hotkey\n        this.disabled = true\n    }\n\n    reset() {\n        super.reset()\n        this.disabled = true\n        this.updateState(false)\n    }\n\n    onClick() {\n        console.log('menu item pressed: ' + this.buttonType)\n    }\n\n    updateState(autoRedraw: boolean = true) {\n        const targetState = !!this.isDisabled()\n        const stateChanged = this.disabled !== targetState\n        this.disabled = targetState\n        if (stateChanged && autoRedraw) this.notifyRedraw()\n        return stateChanged\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n        super.drawHover(context)\n        if (!this.disabled && this.hover) {\n            context.strokeStyle = '#0f0'\n            context.lineWidth = 2\n            context.strokeRect(this.x - context.lineWidth / 2, this.y - context.lineWidth / 2, this.width + context.lineWidth - 1, this.height + context.lineWidth - 1)\n        }\n    }\n\n}\n","import { IconPanelBackButtonCfg } from '../../cfg/IconPanelBackButtonCfg'\nimport { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class IconSubPanel extends Panel {\n\n    backBtn: Button = null\n    iconPanelButtons: IconPanelButton[] = []\n\n    constructor(numOfItems, onBackPanel: Panel = null) {\n        super()\n        if (onBackPanel) {\n            const backBtnCfg = new IconPanelBackButtonCfg(ResourceManager.cfg('InterfaceBackButton'))\n            this.backBtn = this.addChild(new Button(this, backBtnCfg))\n            this.backBtn.onClick = () => this.toggleState(() => onBackPanel.toggleState())\n        }\n        const frameImgCfg = ResourceManager.cfg('InterfaceSurroundImages', numOfItems.toString())\n        // noinspection JSUnusedLocalSymbols\n        const [imgName, val1, val2, val3, val4, imgNameWoBackName, woBack1, woBack2] = frameImgCfg\n        this.img = onBackPanel ? ResourceManager.getImage(imgName) : ResourceManager.getImage(imgNameWoBackName)\n        this.xOut = -this.img.width\n    }\n\n    addMenuItem(menuItemGroup: string, itemKey: string) {\n        const menuItemCfg = new MenuItemCfg(ResourceManager.cfg(menuItemGroup, itemKey))\n        const menuItem = this.addChild(new IconPanelButton(this, menuItemCfg, itemKey, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(menuItem)\n        return menuItem\n    }\n\n    toggleState(onDone: () => any = null) {\n        super.toggleState(onDone)\n        if (!this.movedIn) this.iconPanelButtons.forEach((button) => button.updateState())\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { CancelBuildMode } from '../../event/LocalEvents'\nimport { BuildingEntity } from '../../game/model/building/BuildingEntity'\nimport { Barracks } from '../../game/model/building/entities/Barracks'\nimport { Docks } from '../../game/model/building/entities/Docks'\nimport { Geodome } from '../../game/model/building/entities/Geodome'\nimport { GunStation } from '../../game/model/building/entities/GunStation'\nimport { OreRefinery } from '../../game/model/building/entities/OreRefinery'\nimport { PowerStation } from '../../game/model/building/entities/PowerStation'\nimport { TeleportBig } from '../../game/model/building/entities/TeleportBig'\nimport { TeleportPad } from '../../game/model/building/entities/TeleportPad'\nimport { Toolstation } from '../../game/model/building/entities/Toolstation'\nimport { Upgrade } from '../../game/model/building/entities/Upgrade'\nimport { GameState } from '../../game/model/GameState'\nimport { SceneManager } from '../../game/SceneManager'\nimport { WorldManager } from '../../game/WorldManager'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class BuildingPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        this.backBtn.onClick = () => {\n            EventBus.publishEvent(new CancelBuildMode())\n            this.toggleState(() => onBackPanel.toggleState())\n        }\n        this.addBuildMenuItem('InterfaceBuildImages', 'Toolstation', (worldMgr: WorldManager, sceneMgr: SceneManager) => new Toolstation(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'TeleportPad', (worldMgr: WorldManager, sceneMgr: SceneManager) => new TeleportPad(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'Docks', (worldMgr: WorldManager, sceneMgr: SceneManager) => new Docks(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'Powerstation', (worldMgr: WorldManager, sceneMgr: SceneManager) => new PowerStation(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'Barracks', (worldMgr: WorldManager, sceneMgr: SceneManager) => new Barracks(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'Upgrade', (worldMgr: WorldManager, sceneMgr: SceneManager) => new Upgrade(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'Geo-dome', (worldMgr: WorldManager, sceneMgr: SceneManager) => new Geodome(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'OreRefinery', (worldMgr: WorldManager, sceneMgr: SceneManager) => new OreRefinery(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'Gunstation', (worldMgr: WorldManager, sceneMgr: SceneManager) => new GunStation(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'TeleportBIG', (worldMgr: WorldManager, sceneMgr: SceneManager) => new TeleportBig(worldMgr, sceneMgr))\n    }\n\n    addBuildMenuItem(menuItemGroup: string, itemKey: string, factory: (worldMgr: WorldManager, sceneMgr: SceneManager) => BuildingEntity) {\n        const item = this.addMenuItem(menuItemGroup, itemKey)\n        item.isDisabled = () => false // TODO check Dependencies from config\n        item.onClick = () => GameState.buildModeSelection = factory\n        return item\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { GetToolJob } from '../../game/model/job/GetToolJob'\nimport { PathTarget } from '../../game/model/PathTarget'\nimport { RaiderTool } from '../../game/model/raider/RaiderTool'\nimport { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class GetToolPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(8, onBackPanel)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetDrill', RaiderTool.DRILL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpade', RaiderTool.SHOVEL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetHammer', RaiderTool.HAMMER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpanner', RaiderTool.SPANNER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetFreezerGun', RaiderTool.FREEZERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetLaser', RaiderTool.LASER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetPusherGun', RaiderTool.PUSHERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetBirdScarer', RaiderTool.BIRDSCARER)\n    }\n\n    addGetToolItem(menuItemGroup: string, itemKey: string, tool: RaiderTool): IconPanelButton {\n        const menuItem = super.addMenuItem(menuItemGroup, itemKey)\n        menuItem.isDisabled = () => !GameState.hasOneBuildingOf(EntityType.TOOLSTATION) ||\n            GameState.selectedRaiders.every((r) => r.hasTool(tool))\n        menuItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => {\n                if (!r.hasTool(tool)) {\n                    const pathToToolstation = GameState.getBuildingsByType(EntityType.TOOLSTATION)\n                        .map((b) => r.findPathToTarget(new PathTarget(b.getPosition2D())))\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToToolstation) {\n                        r.setJob(new GetToolJob(pathToToolstation.targetPosition, tool)) // TODO use precalculated path to toolstation\n                    }\n                }\n            })\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        return menuItem\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { GameState } from '../../game/model/GameState'\nimport { BaseElement } from '../base/BaseElement'\n\nexport class IconPanelButtonLabel extends BaseElement {\n\n    constructor(parent: BaseElement) {\n        super(parent)\n        this.relX = 4\n        this.relY = 11\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => this.notifyRedraw())\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        const requestedRaiders = GameState.requestedRaiders\n        if (!requestedRaiders) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = this.disabled || (this.parent && this.parent.disabled) ? '#444' : '#fff'\n        context.fillText(requestedRaiders.toString(), this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class LargeVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(5, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'BullDozer')\n        this.addMenuItem('InterfaceBuildImages', 'WalkerDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeMLP')\n        this.addMenuItem('InterfaceBuildImages', 'LargeDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeCat')\n    }\n\n}\n","import { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { BaseElement } from '../base/BaseElement'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class IconPanelToggleButton extends IconPanelButton {\n\n    toggleState: boolean = false\n    imgOnNormal: HTMLCanvasElement\n    imgOnHover: HTMLCanvasElement\n    imgOnPressed: HTMLCanvasElement\n    imgOnDisabled: HTMLCanvasElement\n\n    constructor(parent: BaseElement, menuItemOffCfg: MenuItemCfg, menuItemOnCfg: MenuItemCfg, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemOffCfg, null, parentWidth, menuIndex)\n        this.imgOnNormal = ResourceManager.getImageOrNull(menuItemOnCfg.normalFile)\n        this.imgOnHover = ResourceManager.getImageOrNull(menuItemOnCfg.highlightFile)\n        this.imgOnPressed = ResourceManager.getImageOrNull(menuItemOnCfg.pressedFile)\n        this.imgOnDisabled = ResourceManager.getImageOrNull(menuItemOnCfg.disabledFile)\n    }\n\n    onClick() {\n        this.toggleState = !this.toggleState\n        this.onToggleStateChange()\n    }\n\n    onToggleStateChange() {\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.toggleState ? this.imgOnNormal : this.imgNormal\n        if (this.disabled) {\n            if (this.toggleState) {\n                img = this.imgOnDisabled || this.imgOnPressed || this.imgOnNormal\n            } else {\n                img = this.imgDisabled || this.imgPressed || this.imgNormal\n            }\n        } else if (this.pressed) {\n            if (this.toggleState) {\n                img = this.imgOnPressed || this.imgOnNormal\n            } else {\n                img = this.imgPressed || this.imgNormal\n            }\n        } else if (this.hover) {\n            if (this.toggleState) {\n                img = this.imgOnHover || this.imgOnNormal\n            } else {\n                img = this.imgHover || this.imgNormal\n            }\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class SelectBasePanel extends IconSubPanel {\n\n    constructor(numOfItems, onBackPanel: Panel) {\n        super(numOfItems, onBackPanel)\n        this.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected())\n    }\n\n}\n","import { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { GameState } from '../../game/model/GameState'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\nimport { IconPanelToggleButton } from './IconPanelToggleButton'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectBuildingPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Repair')\n\n        const menuItemOffCfg = new MenuItemCfg(ResourceManager.cfg('InterfaceImages', 'Interface_MenuItem_PowerOff'))\n        const menuItemOnCfg = new MenuItemCfg(ResourceManager.cfg('InterfaceImages', 'Interface_MenuItem_PowerOn'))\n        const powerSwitchItem = this.addChild(new IconPanelToggleButton(this, menuItemOffCfg, menuItemOnCfg, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(powerSwitchItem)\n        powerSwitchItem.isDisabled = () => GameState.usedCrystals >= GameState.numCrystal || GameState.selectedBuilding?.stats?.SelfPowered || GameState.selectedBuilding?.stats?.PowerBuilding\n        powerSwitchItem.onToggleStateChange = () => {\n            if (powerSwitchItem.toggleState) {\n                GameState.selectedBuilding?.turnOffPower()\n            } else {\n                GameState.selectedBuilding?.turnOnPower()\n            }\n        }\n        const upgradeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeBuilding')\n        upgradeItem.isDisabled = () => !GameState.selectedBuilding?.canUpgrade()\n        upgradeItem.onClick = () => GameState.selectedBuilding?.upgrade()\n        const deleteBuildingItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteBuilding')\n        deleteBuildingItem.isDisabled = () => false\n        deleteBuildingItem.onClick = () => GameState.selectedBuilding?.beamUp()\n        EventBus.registerEventListener(EventKey.SELECTED_BUILDING, () => {\n            powerSwitchItem.updateState()\n            upgradeItem.updateState()\n        })\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, () => {\n            powerSwitchItem.updateState()\n            upgradeItem.updateState()\n        })\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { BuildingSite } from '../../game/model/building/BuildingSite'\nimport { EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { Surface } from '../../game/model/map/Surface'\nimport { SurfaceType } from '../../game/model/map/SurfaceType'\nimport { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectFloorPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(3, onBackPanel)\n        const pathItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_LayPath')\n        pathItem.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.surfaceType = SurfaceType.POWER_PATH_SITE\n            selectedSurface.updateTexture()\n            GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), EntityType.TOOLSTATION)?.spawnMaterials(EntityType.ORE, 2)\n            const site = new BuildingSite(selectedSurface)\n            site.neededByType.set(EntityType.ORE, 2)\n            GameState.buildingSites.push(site)\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        pathItem.isDisabled = () => GameState.selectedSurface?.surfaceType !== SurfaceType.GROUND\n        const removeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_RemovePath')\n        removeItem.onClick = () => {\n            GameState.selectedSurface?.makeRubble(2)\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        removeItem.isDisabled = () => GameState.selectedSurface?.surfaceType !== SurfaceType.POWER_PATH\n        const placeFenceItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        placeFenceItem.isDisabled = () => {\n            return !GameState.hasOneBuildingOf(EntityType.POWER_STATION) || !GameState.selectedSurface?.canPlaceFence()\n        }\n        placeFenceItem.onClick = () => {\n            const selectedSurface = GameState.selectedSurface\n            if (selectedSurface) {\n                GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), EntityType.TOOLSTATION)?.spawnFence(selectedSurface)\n            }\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => {\n            pathItem.updateState()\n            removeItem.updateState()\n            placeFenceItem.updateState()\n        })\n    }\n\n}\n","import { RaiderActivity } from '../activities/RaiderActivity'\nimport { PathTarget } from '../PathTarget'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class EatJob extends Job {\n\n    constructor() {\n        super(JobType.EAT)\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.fulfiller.map((f) => new PathTarget(f.getPosition2D()))\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        // TODO implement endurance, fill eat level here\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Eat\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { GameState } from '../../game/model/GameState'\nimport { EatJob } from '../../game/model/job/EatJob'\nimport { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectRaiderPanel extends SelectBasePanel {\n\n    getToolItem: IconPanelButton\n    trainItem: IconPanelButton\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        const feedItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GoFeed')\n        feedItem.isDisabled = () => false\n        feedItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => !r.isDriving() && r.setJob(new EatJob()))\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UnLoadMinifigure')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_MinifigurePickUp')\n        this.getToolItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GetTool')\n        this.getToolItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DropBirdScarer')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeMan')\n        this.trainItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSkill')\n        this.trainItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoFirstPerson')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoSecondPerson')\n        const deleteRaiderItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteMan')\n        deleteRaiderItem.isDisabled = () => false\n        deleteRaiderItem.onClick = () => GameState.selectedRaiders.forEach((r) => r.beamUp())\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { GameState } from '../../game/model/GameState'\nimport { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectRubblePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(2, onBackPanel)\n        const clearRubbleItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_ClearRubble')\n        clearRubbleItem.onClick = () => {\n            GameState.selectedSurface?.createClearRubbleJob()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        clearRubbleItem.isDisabled = () => !GameState.selectedSurface?.hasRubble()\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => clearRubbleItem.updateState())\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectVehiclePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(7, onBackPanel)\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { Surface } from '../../game/model/map/Surface'\nimport { RaiderTraining } from '../../game/model/raider/RaiderTraining'\nimport { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectWallPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        const itemDrill = this.addWallMenuItem('Interface_MenuItem_Dig', () => GameState.selectedSurface?.createDrillJob())\n        itemDrill.isDisabled = () => !(GameState.selectedSurface?.isDrillable()) &&\n            !(GameState.selectedSurface?.isDrillableHard()) // TODO implement vehicle check for drill hard skill\n        const itemReinforce = this.addWallMenuItem('Interface_MenuItem_Reinforce', () => GameState.selectedSurface?.createReinforceJob())\n        itemReinforce.isDisabled = () => !(GameState.selectedSurface?.isReinforcable())\n        const itemDynamite = this.addWallMenuItem('Interface_MenuItem_Dynamite', () => GameState.selectedSurface?.createDynamiteJob())\n        itemDynamite.isDisabled = () => !GameState.hasBuildingWithUpgrades(EntityType.TOOLSTATION, 2) &&\n            !GameState.raiders.some((r) => r.hasTraining(RaiderTraining.DEMOLITION))\n        const itemDeselect = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeselectDig')\n        itemDeselect.isDisabled = () => false\n        itemDeselect.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.cancelJobs()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => {\n            itemDrill.updateState(false)\n            itemReinforce.updateState(false)\n            itemDynamite.updateState(false)\n            this.notifyRedraw()\n        })\n    }\n\n    addWallMenuItem(itemKey: string, callback: () => any): IconPanelButton {\n        const item = this.addMenuItem('InterfaceImages', itemKey)\n        item.onClick = () => {\n            callback()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        return item\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class SmallVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Hoverboard')\n        this.addMenuItem('InterfaceBuildImages', 'SmallDigger')\n        this.addMenuItem('InterfaceBuildImages', 'SmallTruck')\n        this.addMenuItem('InterfaceBuildImages', 'SmallCat')\n        this.addMenuItem('InterfaceBuildImages', 'SmallMLP')\n        this.addMenuItem('InterfaceBuildImages', 'SmallHeli')\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { TrainJob } from '../../game/model/job/TrainJob'\nimport { RaiderTraining } from '../../game/model/raider/RaiderTraining'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class TrainRaiderPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainDriver')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainEngineer')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainGeologist')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainPilot')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSailor')\n        const trainDynamite = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainDynamite')\n        trainDynamite.isDisabled = () => !GameState.getBuildingsByType(EntityType.TOOLSTATION).some((b) => b.stats.TrainDynamite[b.level]) ||\n            GameState.selectedRaiders.every((r) => r.hasTraining(RaiderTraining.DEMOLITION))\n        trainDynamite.onClick = () => {\n            GameState.getBuildingsByType(EntityType.TOOLSTATION).some((b) => {\n                if (b.stats.TrainDynamite[b.level]) {\n                    GameState.selectedRaiders.forEach((r) => !r.hasTraining(RaiderTraining.DEMOLITION) && r.setJob(new TrainJob(b.primarySurface, RaiderTraining.DEMOLITION)))\n                    EventBus.publishEvent(new EntityDeselected())\n                    return true\n                }\n            })\n        }\n        EventBus.registerEventListener(EventKey.BUILDING_UPGRADED, () => trainDynamite.updateState())\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { SurfaceChanged, SurfaceSelectedEvent } from '../../event/LocalEvents'\nimport { EntityAddedEvent, EntityRemovedEvent, RaiderRequested } from '../../event/WorldEvents'\nimport { EntitySuperType, EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { Surface } from '../../game/model/map/Surface'\nimport { MAX_RAIDER_REQUEST } from '../../params'\nimport { Panel } from '../base/Panel'\nimport { BuildingPanel } from './BuildingPanel'\nimport { GetToolPanel } from './GetToolPanel'\nimport { IconPanelButtonLabel } from './IconPanelButtonLabel'\nimport { IconSubPanel } from './IconSubPanel'\nimport { LargeVehiclePanel } from './LargeVehiclePanel'\nimport { SelectBuildingPanel } from './SelectBuildingPanel'\nimport { SelectFloorPanel } from './SelectFloorPanel'\nimport { SelectRaiderPanel } from './SelectRaiderPanel'\nimport { SelectRubblePanel } from './SelectRubblePanel'\nimport { SelectVehiclePanel } from './SelectVehiclePanel'\nimport { SelectWallPanel } from './SelectWallPanel'\nimport { SmallVehiclePanel } from './SmallVehiclePanel'\nimport { TrainRaiderPanel } from './TrainRaiderPanel'\n\nexport class MainPanel extends Panel {\n\n    subPanels: IconSubPanel[] = []\n    mainPanel: IconSubPanel // don't use root itself, since sub panel must be decoupled from (animated) main panel position\n    selectWallPanel: SelectWallPanel\n    selectFloorPanel: SelectFloorPanel\n    selectRubblePanel: SelectRubblePanel\n\n    constructor() {\n        super()\n        this.relX = this.xOut = 640 - 16\n        this.xIn = 640 + 95\n        this.relY = this.yOut = this.yIn = 9\n        this.movedIn = false\n        this.mainPanel = this.addSubPanel(new IconSubPanel(4))\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n\n        const buildingPanel = this.addSubPanel(new BuildingPanel(this.mainPanel))\n        const smallVehiclePanel = this.addSubPanel(new SmallVehiclePanel(this.mainPanel))\n        const largeVehiclePanel = this.addSubPanel(new LargeVehiclePanel(this.mainPanel))\n        this.selectWallPanel = this.addSubPanel(new SelectWallPanel(this.mainPanel))\n        this.selectFloorPanel = this.addSubPanel(new SelectFloorPanel(this.mainPanel))\n        this.selectRubblePanel = this.addSubPanel(new SelectRubblePanel(this.mainPanel))\n        const selectBuildingPanel = this.addSubPanel(new SelectBuildingPanel(this.mainPanel))\n        const selectRaiderPanel = this.addSubPanel(new SelectRaiderPanel(this.mainPanel))\n        const trainRaiderPanel = this.addSubPanel(new TrainRaiderPanel(selectRaiderPanel))\n        selectRaiderPanel.trainItem.onClick = () => selectRaiderPanel.toggleState(() => trainRaiderPanel.toggleState())\n        const getToolPanel = this.addSubPanel(new GetToolPanel(selectRaiderPanel))\n        selectRaiderPanel.getToolItem.onClick = () => selectRaiderPanel.toggleState(() => getToolPanel.toggleState())\n        const selectVehiclePanel = this.addSubPanel(new SelectVehiclePanel(this.mainPanel))\n        const teleportRaider = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_TeleportMan')\n        teleportRaider.isDisabled = () => GameState.raiders.length >= GameState.getMaxRaiders() || GameState.requestedRaiders >= MAX_RAIDER_REQUEST ||\n            !GameState.hasOneBuildingOf(EntityType.TOOLSTATION, EntityType.TELEPORT_PAD)\n        teleportRaider.updateState()\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => teleportRaider.updateState())\n        EventBus.registerEventListener(EventKey.ENTITY_ADDED, (event: EntityAddedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.superType === EntitySuperType.BUILDING || event.superType === EntitySuperType.RAIDER) teleportRaider.updateState()\n        })\n        EventBus.registerEventListener(EventKey.ENTITY_REMOVED, (event: EntityRemovedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.superType === EntitySuperType.BUILDING || event.superType === EntitySuperType.RAIDER) teleportRaider.updateState()\n        })\n        teleportRaider.onClick = () => {\n            GameState.requestedRaiders++\n            EventBus.publishEvent(new RaiderRequested())\n        }\n        // TODO add decrease requested raider spawn option (needs right click for gui elements)\n        teleportRaider.addChild(new IconPanelButtonLabel(teleportRaider))\n        const buildingItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildBuilding')\n        buildingItem.isDisabled = () => false\n        buildingItem.onClick = () => this.mainPanel.toggleState(() => buildingPanel.toggleState())\n        const smallVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildSmallVehicle')\n        smallVehicleItem.isDisabled = () => false\n        smallVehicleItem.onClick = () => this.mainPanel.toggleState(() => smallVehiclePanel.toggleState())\n        const largeVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildLargeVehicle')\n        largeVehicleItem.isDisabled = () => false\n        largeVehicleItem.onClick = () => this.mainPanel.toggleState(() => largeVehiclePanel.toggleState())\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, (event: SurfaceSelectedEvent) => {\n            this.onSelectedSurfaceChange(event.surface)\n        })\n        EventBus.registerEventListener(EventKey.SURFACE_CHANGED, (event: SurfaceChanged) => {\n            if (GameState.selectedSurface === event.surface) this.onSelectedSurfaceChange(event.surface)\n        })\n        EventBus.registerEventListener(EventKey.DESELECTED_ENTITY, () => this.selectSubPanel(this.mainPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_BUILDING, () => this.selectSubPanel(selectBuildingPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_RAIDER, () => this.selectSubPanel(selectRaiderPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_VEHICLE, () => this.selectSubPanel(selectVehiclePanel))\n    }\n\n    reset() {\n        super.reset()\n        this.relX = this.xOut\n        this.relY = this.yOut\n        this.movedIn = false\n        this.updatePosition()\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n        this.mainPanel.updatePosition()\n    }\n\n    addSubPanel<T extends IconSubPanel>(childPanel: T): T {\n        this.addChild(childPanel)\n        this.subPanels.push(childPanel)\n        return childPanel\n    }\n\n    selectSubPanel(targetPanel: IconSubPanel) {\n        this.subPanels.forEach((subPanel) => subPanel !== targetPanel && subPanel.setMovedIn(true))\n        targetPanel.setMovedIn(false)\n    }\n\n    onSelectedSurfaceChange(surface: Surface) {\n        if (surface.surfaceType.floor) {\n            if (surface.hasRubble()) {\n                this.selectSubPanel(this.selectRubblePanel)\n            } else {\n                this.selectSubPanel(this.selectFloorPanel)\n            }\n        } else {\n            this.selectSubPanel(this.selectWallPanel)\n        }\n    }\n\n}\n","import { BitmapFont } from '../../core/BitmapFont'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\n\nexport class TextInfoMessage {\n\n    infoImage\n    textImage\n\n    constructor(font: BitmapFont, infoMessageEntryConfig: TextInfoMessageEntryConfig, maxWidth: number) {\n        this.textImage = font.createTextImage(infoMessageEntryConfig.text, maxWidth)\n        this.infoImage = ResourceManager.getImageOrNull(infoMessageEntryConfig.imageFilename)\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { GameState } from '../../game/model/GameState'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\nimport { TextInfoMessage } from './TextInfoMessage'\nimport { TextInfoMessageConfig } from './TextInfoMessageConfig'\n\nexport class MessagePanel extends Panel {\n\n    imgAir: HTMLCanvasElement = null\n    currentMessage: TextInfoMessage = null\n    messageTimeout = null\n\n    msgSpaceToContinue: TextInfoMessage\n    msgAirSupplyLow: TextInfoMessage\n    msgAirSupplyRunningOut: TextInfoMessage\n    msgGameCompleted: TextInfoMessage\n    msgManTrained: TextInfoMessage\n    msgUnitUpgraded: TextInfoMessage\n\n    constructor(panelCfg: PanelCfg, textInfoMessageConfig: TextInfoMessageConfig) {\n        super(panelCfg)\n        this.relX = this.xOut = this.xIn = 42\n        this.relY = this.yOut = this.yIn = 409\n        this.imgAir = ResourceManager.getImage('Interface/Airmeter/msgpanel_air_juice.bmp')\n\n        const font = ResourceManager.getDefaultFont()\n        const crystalFound = new TextInfoMessage(font, textInfoMessageConfig.textCrystalFound, this.img.width)\n        EventBus.registerEventListener(EventKey.LOCATION_CRYSTAL_FOUND, () => this.setMessage(crystalFound))\n        this.msgSpaceToContinue = new TextInfoMessage(font, textInfoMessageConfig.textSpaceToContinue, this.img.width)\n        const cavernDiscovered = new TextInfoMessage(font, textInfoMessageConfig.textCavernDiscovered, this.img.width)\n        EventBus.registerEventListener(EventKey.CAVERN_DISCOVERED, () => this.setMessage(cavernDiscovered))\n        const oreFound = new TextInfoMessage(font, textInfoMessageConfig.textOreFound, this.img.width)\n        EventBus.registerEventListener(EventKey.ORE_FOUND, () => this.setMessage(oreFound))\n        this.msgAirSupplyLow = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyLow, this.img.width)\n        this.msgAirSupplyRunningOut = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyRunningOut, this.img.width)\n        this.msgGameCompleted = new TextInfoMessage(font, textInfoMessageConfig.textGameCompleted, this.img.width)\n        this.msgManTrained = new TextInfoMessage(font, textInfoMessageConfig.textManTrained, this.img.width)\n        EventBus.registerEventListener(EventKey.RAIDER_TRAINED, () => this.setMessage(this.msgManTrained))\n        this.msgUnitUpgraded = new TextInfoMessage(font, textInfoMessageConfig.textUnitUpgraded, this.img.width)\n        EventBus.registerEventListener(EventKey.AIR_LEVEL_CHANGED, () => this.notifyRedraw())\n    }\n\n    setMessage(textInfoMessage: TextInfoMessage, timeout: number = 3000) {\n        this.messageTimeout = clearTimeoutSafe(this.messageTimeout)\n        this.currentMessage = textInfoMessage\n        this.notifyRedraw()\n        if (timeout) {\n            const that = this\n            this.messageTimeout = setTimeout(() => {\n                that.currentMessage = null\n                that.notifyRedraw()\n            }, timeout)\n        }\n    }\n\n    unsetMessage(textInfoMessage: TextInfoMessage) {\n        if (this.currentMessage === textInfoMessage) {\n            this.currentMessage = null\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (GameState.airLevel > 0) {\n            const width = Math.round(236 * Math.min(1, GameState.airLevel))\n            context.drawImage(this.imgAir, this.x + 85, this.y + 6, width, 8)\n        }\n        const textImage = this.currentMessage?.textImage\n        const infoImage = this.currentMessage?.infoImage\n        if (textImage) {\n            const txtX = this.x + (this.img.width - textImage.width - (infoImage ? infoImage.width : 0)) / 2\n            context.drawImage(textImage, txtX, this.y + 26)\n        }\n        if (infoImage) {\n            const infoX = this.x + this.img.width - infoImage.width\n            context.drawImage(infoImage, infoX, this.y + 16)\n        }\n    }\n\n}\n","export class TextInfoMessageEntryConfig {\n\n    text: string\n    imageFilename: string\n    sfxName: string\n\n    textImage\n    infoImage\n\n    constructor(cfgValue: any) {\n        [this.text, this.imageFilename, this.sfxName] = cfgValue\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\n\nexport class TextInfoMessageConfig extends BaseConfig {\n\n    textCrystalFound: TextInfoMessageEntryConfig = null\n    textSpaceToContinue: TextInfoMessageEntryConfig = null\n    textCavernDiscovered: TextInfoMessageEntryConfig = null\n    textOreFound: TextInfoMessageEntryConfig = null\n    textAirSupplyLow: TextInfoMessageEntryConfig = null\n    textAirSupplyRunningOut: TextInfoMessageEntryConfig = null\n    textGameCompleted: TextInfoMessageEntryConfig = null\n    textManTrained: TextInfoMessageEntryConfig = null\n    textUnitUpgraded: TextInfoMessageEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new TextInfoMessageEntryConfig(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class PriorityButtonsConfig extends BaseConfig {\n\n    aiPriorityTrain: ButtonCfg = null\n    aiPriorityGetIn: ButtonCfg = null\n    aiPriorityCrystal: ButtonCfg = null\n    aiPriorityOre: ButtonCfg = null\n    aiPriorityRepair: ButtonCfg = null\n    aiPriorityClearing: ButtonCfg = null\n    aiPriorityDestruction: ButtonCfg = null\n    aiPriorityConstruction: ButtonCfg = null\n    aiPriorityReinforce: ButtonCfg = null\n    aiPriorityRecharge: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): ButtonCfg {\n        return {\n            buttonType: cfgValue[0],\n            normalFile: cfgValue[1],\n            highlightFile: cfgValue[1],\n            pressedFile: cfgValue[2],\n            disabledFile: cfgValue[3],\n        }\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { GameState } from '../../game/model/GameState'\nimport { PriorityIdentifier } from '../../game/model/job/PriorityIdentifier'\nimport { PriorityEntry } from '../../game/model/job/PriorityList'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { ButtonPriorityListCfg } from './ButtonPriorityListCfg'\nimport { PriorityButtonsConfig } from './PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from './PriorityPositionsEntry'\n\nexport class PriorityListPanel extends Panel {\n\n    prioPositions: PriorityPositionsEntry[] = []\n    prioByName: Map<PriorityIdentifier, Button> = new Map()\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonPriorityListCfg, pos: PriorityPositionsEntry[], cfg: PriorityButtonsConfig) {\n        super(panelCfg)\n        buttonsCfg.panelButtonPriorityListDisable.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.toggle(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        buttonsCfg.panelButtonPriorityListUpOne.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.upOne(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        this.addChild(new Button(this, buttonsCfg.panelButtonPriorityListReset)).onClick = () => this.resetList()\n\n        this.prioPositions = pos\n        this.prioByName.set(PriorityIdentifier.aiPriorityTrain, this.addChild(new Button(this, cfg.aiPriorityTrain)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityGetIn, this.addChild(new Button(this, cfg.aiPriorityGetIn)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityCrystal, this.addChild(new Button(this, cfg.aiPriorityCrystal)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityOre, this.addChild(new Button(this, cfg.aiPriorityOre)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityRepair, this.addChild(new Button(this, cfg.aiPriorityRepair)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityClearing, this.addChild(new Button(this, cfg.aiPriorityClearing)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityDestruction, this.addChild(new Button(this, cfg.aiPriorityDestruction)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityConstruction, this.addChild(new Button(this, cfg.aiPriorityConstruction)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityReinforce, this.addChild(new Button(this, cfg.aiPriorityReinforce)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityRecharge, this.addChild(new Button(this, cfg.aiPriorityRecharge)))\n    }\n\n    reset() {\n        super.reset()\n        this.resetList()\n    }\n\n    resetList() {\n        GameState.priorityList.reset()\n        this.setList(GameState.priorityList.current)\n    }\n\n    private setList(priorityList: PriorityEntry[]) {\n        this.prioByName.forEach((btn) => btn.hidden = true)\n        let index = 0\n        let updated = false\n        priorityList.forEach(cfg => {\n            const prioButton: Button = this.prioByName.get(cfg.key)\n            if (prioButton) {\n                updated = updated || prioButton.hidden || prioButton.disabled !== !cfg.enabled\n                prioButton.hidden = false\n                prioButton.disabled = !cfg.enabled\n                prioButton.relX = this.prioPositions[index].x\n                prioButton.relY = this.prioPositions[index].y\n                prioButton.updatePosition()\n                const btnIndex = index\n                prioButton.onClick = () => {\n                    GameState.priorityList.pushToTop(btnIndex)\n                    this.setList(GameState.priorityList.current)\n                }\n                index++\n            }\n        })\n        if (updated) this.notifyRedraw()\n    }\n\n}\n\n","export class PriorityPositionsEntry {\n\n    x: number\n    y: number\n\n    constructor(cfgValue: any) {\n        [this.x, this.y] = cfgValue\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { BaseElement } from './BaseElement'\nimport { Button } from './Button'\n\nexport class ToggleButton extends Button {\n\n    toggleState: boolean = false\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent, btnCfg)\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = (this.pressed && this.hover) || this.toggleState\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => updated = child.checkHover(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const isPressed = this.isInRect(cx, cy) || this.toggleState\n        let updated = this.pressed !== isPressed\n        this.pressed = isPressed\n        this.children.forEach((child) => updated = child.checkClick(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = inRect && this.pressed\n        if (updated) {\n            this.toggleState = !this.toggleState\n            this.onClick()\n            this.pressed = updated && this.toggleState\n            this.hover = inRect\n        }\n        this.children.forEach((child) => updated = child.checkRelease(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    release(): boolean {\n        return false\n    }\n\n}\n\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { ToggleButton } from '../base/ToggleButton'\nimport { ButtonTopCfg } from './ButtonTopCfg'\n\nexport class TopPanel extends Panel {\n\n    btnCallToArms: ToggleButton\n    btnOptions: Button\n    btnPriorities: ToggleButton\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonTopCfg) {\n        super(panelCfg)\n        this.btnCallToArms = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelCallToArms))\n        this.btnOptions = this.addChild(new Button(this, buttonsCfg.panelButtonTopPanelOptions))\n        this.btnPriorities = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelPriorities))\n    }\n\n}\n\n","import { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { BaseElement } from '../../gui/base/BaseElement'\nimport { Panel } from '../../gui/base/Panel'\nimport { ScaledLayer } from './ScreenLayer'\n\nexport class GuiBaseLayer extends ScaledLayer {\n\n    rootElement: BaseElement = new BaseElement()\n    panels: Panel[] = []\n\n    constructor() {\n        super()\n        this.rootElement.notifyRedraw = () => this.redraw()\n        this.onRedraw = (context: CanvasRenderingContext2D) => {\n            context.clearRect(0, 0, context.canvas.width, context.canvas.height)\n            this.rootElement.onRedraw(context)\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.panels.forEach((p) => p.reset())\n    }\n\n    addPanel<T extends Panel>(panel: T): T {\n        this.rootElement.addChild(panel)\n        this.panels.push(panel)\n        return panel\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n        const hit = this.context && this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n        if (hit) {\n            if (event.eventEnum === POINTER_EVENT.MOVE) {\n                this.rootElement.checkHover(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) this.rootElement.checkClick(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) this.rootElement.checkRelease(sx, sy)\n            }\n        } else if (event.eventEnum === POINTER_EVENT.MOVE) {\n            this.rootElement.release()\n        }\n        return hit\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        return !this.context || this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n    }\n\n}\n","import { ButtonsCfg } from '../../cfg/ButtonsCfg'\nimport { PanelsCfg } from '../../cfg/PanelsCfg'\nimport { Panel } from '../../gui/base/Panel'\nimport { InfoDockPanel } from '../../gui/infodock/InfoDockPanel'\nimport { InfoMessagesConfig } from '../../gui/infodock/InfoMessagesConfig'\nimport { InformationPanel } from '../../gui/infodock/InformationPanel'\nimport { MainPanel } from '../../gui/main/MainPanel'\nimport { MessagePanel } from '../../gui/messagepanel/MessagePanel'\nimport { TextInfoMessageConfig } from '../../gui/messagepanel/TextInfoMessageConfig'\nimport { RadarPanel } from '../../gui/radar/RadarPanel'\nimport { PanelCrystalSideBar } from '../../gui/sidebar/PanelCrystalSideBar'\nimport { PriorityButtonsConfig } from '../../gui/toppanel/PriorityButtonsConfig'\nimport { PriorityListPanel } from '../../gui/toppanel/PriorityListPanel'\nimport { PriorityPositionsEntry } from '../../gui/toppanel/PriorityPositionsEntry'\nimport { TopPanel } from '../../gui/toppanel/TopPanel'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { GuiBaseLayer } from './GuiBaseLayer'\n\nexport class GuiMainLayer extends GuiBaseLayer {\n\n    panelRadar: RadarPanel\n    panelMessages: MessagePanel\n    panelMessagesSide: Panel\n    panelCrystalSideBar: PanelCrystalSideBar\n    panelMain: MainPanel\n    panelTopPanel: TopPanel\n    panelInformation: InformationPanel\n    panelPriorityList: PriorityListPanel\n    panelCameraControl: Panel\n    panelInfoDock: InfoDockPanel\n    panelEncyclopedia: Panel\n    onOptionsShow: () => any = () => console.log('show options triggered')\n\n    constructor() {\n        super()\n        const panelsCfg = new PanelsCfg(ResourceManager.cfg('Panels640x480'))\n        const buttonsCfg = new ButtonsCfg(ResourceManager.cfg('Buttons640x480'))\n        // created in reverse order compared to cfg, earlier in cfg means higher z-value // TODO add some z layering at least to panels\n        this.panelEncyclopedia = this.addPanel(new Panel(panelsCfg.panelEncyclopedia))\n        this.panelInformation = this.addPanel(new InformationPanel(panelsCfg.panelInformation))\n        this.panelInfoDock = this.addPanel(new InfoDockPanel(panelsCfg.panelInfoDock, buttonsCfg.panelInfoDock, new InfoMessagesConfig(ResourceManager.cfg('InfoMessages')), this.panelInformation))\n        this.panelCameraControl = this.addPanel(new Panel(panelsCfg.panelCameraControl))\n        const priorityButtonsConfig = new PriorityButtonsConfig(ResourceManager.cfg('PriorityImages'))\n        const priorityPositionsConfig = Object.values(ResourceManager.cfg('PrioritiesImagePositions')).map(cfgValue => new PriorityPositionsEntry(cfgValue))\n        this.panelPriorityList = this.addPanel(new PriorityListPanel(panelsCfg.panelPriorityList, buttonsCfg.panelPriorityList, priorityPositionsConfig, priorityButtonsConfig))\n        this.panelTopPanel = this.addPanel(new TopPanel(panelsCfg.panelTopPanel, buttonsCfg.panelTopPanel))\n        this.panelMain = this.addPanel(new MainPanel())\n        this.panelCrystalSideBar = this.addPanel(new PanelCrystalSideBar(panelsCfg.panelCrystalSideBar, buttonsCfg.panelCrystalSideBar))\n        this.panelMessagesSide = this.addPanel(new Panel(panelsCfg.panelMessagesSide))\n        this.panelMessages = this.addPanel(new MessagePanel(panelsCfg.panelMessages, new TextInfoMessageConfig(ResourceManager.cfg('TextMessagesWithImages'))))\n        this.panelRadar = this.addPanel(new RadarPanel(panelsCfg.panelRadar, panelsCfg.panelRadarFill, panelsCfg.panelRadarOverlay, buttonsCfg.panelRadar))\n        // link panels\n        this.panelTopPanel.btnOptions.onClick = () => this.onOptionsShow()\n        this.panelTopPanel.btnPriorities.onClick = () => {\n            if (this.panelTopPanel.btnPriorities.toggleState) {\n                this.panelMain.setMovedIn(true, () => this.panelPriorityList.setMovedIn(false))\n            } else {\n                this.panelPriorityList.setMovedIn(true, () => this.panelMain.setMovedIn(false))\n            }\n        }\n    }\n\n}\n","export class Rect {\n\n    x: number = 0\n    y: number = 0\n    w: number = 0\n    h: number = 0\n\n    constructor(arr: number[]) {\n        [this.x, this.y, this.w, this.h] = arr\n    }\n\n}\n","import { Rect } from '../core/Rect'\nimport { BaseConfig } from './BaseConfig'\n\nexport class DialogCfg extends BaseConfig {\n\n    image: string = null\n    titleWindow: Rect = null\n    textWindow: Rect = null\n    okWindow: Rect = null\n    cancelWindow: Rect = null\n    contrastOverlay: string = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        if (lCfgKeyName.endsWith('window')) {\n            return new Rect(cfgValue)\n        }\n        return super.parseValue(lCfgKeyName, cfgValue)\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { DialogCfg } from '../../cfg/DialogCfg'\nimport { PanelCfg } from '../../cfg/PanelCfg'\nimport { BitmapFont } from '../../core/BitmapFont'\nimport { Rect } from '../../core/Rect'\nimport { ResourceManager } from '../../resource/ResourceManager'\n\nexport class BriefingPanelCfg extends PanelCfg {\n\n    // XXX find config values for this class\n\n    titleFont: BitmapFont\n    title: string\n    titleWindow: Rect\n    textFont: BitmapFont\n    textWindow: Rect\n    nextButtonCfg: ButtonCfg\n    backButtonCfg: ButtonCfg\n\n    constructor() {\n        super([])\n        this.titleFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont2.bmp')\n        this.title = ResourceManager.cfg('Main', 'MissionBriefingText')\n        const dialogCfg = new DialogCfg(ResourceManager.cfg('Dialog'))\n        this.titleWindow = dialogCfg.titleWindow\n        this.textFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont.bmp')\n        this.textWindow = dialogCfg.textWindow\n        this.nextButtonCfg = {\n            buttonType: 'Next briefing paragraph',\n            relX: 394,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'NextButton640x480'),\n        }\n        this.backButtonCfg = {\n            buttonType: 'Previous briefing paragraph',\n            relX: 54,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'BackArrow'),\n        }\n    }\n\n}\n","import { ObjectiveImageCfg } from '../../cfg/ObjectiveImageCfg'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { MessagePanel } from '../messagepanel/MessagePanel'\nimport { BriefingPanelCfg } from './BriefingPanelCfg'\n\nexport class BriefingPanel extends Panel {\n\n    messagePanel: MessagePanel\n    cfg: BriefingPanelCfg = null\n    imgTitle: HTMLCanvasElement = null\n    titleRelX: number = 0\n    titleRelY: number = 0\n    btnNext: Button = null\n    btnBack: Button = null\n    imgBack: HTMLCanvasElement = null\n    imgParagraph: HTMLCanvasElement[] = []\n    paragraph: number = 0\n\n    constructor() {\n        super()\n        this.cfg = new BriefingPanelCfg()\n        this.imgTitle = this.cfg.titleFont.createTextImage(this.cfg.title)\n        this.titleRelX = this.cfg.titleWindow.x + (this.cfg.titleWindow.w - this.imgTitle.width) / 2\n        this.titleRelY = this.cfg.titleWindow.y\n        this.btnNext = this.addChild(new Button(this, this.cfg.nextButtonCfg))\n        this.btnNext.onClick = () => this.nextParagraph()\n        this.btnBack = this.addChild(new Button(this, this.cfg.backButtonCfg))\n        this.btnBack.onClick = () => this.prevParagraph()\n        this.hidden = true\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n        this.setParagraph(0)\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.imgBack = ResourceManager.getImageOrNull(objectiveBackImgCfg.filename)\n        this.xIn = objectiveBackImgCfg.x\n        this.yIn = objectiveBackImgCfg.y\n        this.width = this.imgBack.width\n        this.height = this.imgBack.height\n        this.updatePosition()\n        this.imgParagraph = objectiveText.split('\\\\a').map(txt => this.cfg.textFont.createTextImage(txt, this.cfg.textWindow.w, false))\n    }\n\n    setParagraph(paragraph: number) {\n        if (paragraph < 0) return\n        if (paragraph > this.imgParagraph.length - 1) {\n            this.hide()\n            this.notifyRedraw()\n            return\n        }\n        this.paragraph = paragraph\n        this.btnNext.hidden = this.paragraph >= this.imgParagraph.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.notifyRedraw()\n    }\n\n    nextParagraph() {\n        this.setParagraph(this.paragraph + 1)\n    }\n\n    prevParagraph() {\n        this.setParagraph(this.paragraph - 1)\n    }\n\n    show() {\n        super.show()\n        this.setParagraph(0)\n        this.btnNext.hidden = this.paragraph >= this.imgParagraph.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.messagePanel?.setMessage(this.messagePanel.msgSpaceToContinue, 0)\n    }\n\n    hide() {\n        super.hide()\n        this.messagePanel?.unsetMessage(this.messagePanel.msgSpaceToContinue)\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.imgBack) context.drawImage(this.imgBack, this.x, this.y)\n        if (this.imgTitle) context.drawImage(this.imgTitle, this.x + this.titleRelX, this.y + this.titleRelY)\n        if (this.imgParagraph && this.imgParagraph[this.paragraph]) context.drawImage(this.imgParagraph[this.paragraph], this.x + this.cfg.textWindow.x, this.y + this.cfg.textWindow.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuCycleItemCfg } from '../../cfg/MenuCycleItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuCycleItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLabelOnNormal: HTMLCanvasElement // TODO only toggle state with clicks on label\n    imgLabelOffNormal: HTMLCanvasElement // TODO use button?\n    imgLabelOnHover: HTMLCanvasElement\n    imgLabelOffHover: HTMLCanvasElement\n\n    labelX: number = 0\n    state: boolean = false\n\n    constructor(parent: MenuLayer, itemCfg: MenuCycleItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.labelX = itemCfg.width\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.imgLabelOffNormal = parent.loFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOffHover = parent.hiFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOnNormal = parent.loFont.createTextImage(itemCfg.labelOn)\n        this.imgLabelOnHover = parent.hiFont.createTextImage(itemCfg.labelOn)\n        this.width = itemCfg.width + Math.max(this.imgLabelOnHover.width, this.imgLabelOffHover.width)\n        this.height = this.imgTextNormal.height\n    }\n\n    onClick() {\n        this.state = !this.state\n        console.log('TODO: cycle item clicked; state: ' + this.state)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        let imgLabel = this.state ? this.imgLabelOnNormal : this.imgLabelOffNormal\n        if (this.hover) {\n            img = this.imgTextHover\n            imgLabel = this.state ? this.imgLabelOnHover : this.imgLabelOffHover\n        }\n        context.drawImage(img, this.x, this.y)\n        context.drawImage(imgLabel, this.x + this.labelX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuLabelItemCfg } from '../../cfg/MenuLabelItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuLabelItem extends BaseElement {\n\n    target: string\n    loImg: HTMLCanvasElement\n    hiImg: HTMLCanvasElement\n\n    constructor(parent: MenuLayer, itemCfg: MenuLabelItemCfg, autoCenter: boolean) {\n        super(parent)\n        this.target = itemCfg.target\n        this.loImg = parent.loFont.createTextImage(itemCfg.label)\n        this.hiImg = parent.hiFont.createTextImage(itemCfg.label)\n        this.width = this.loImg.width\n        this.height = this.loImg.height\n        this.relX = autoCenter ? -parent.relX + (parent.menuImage.width - this.width) / 2 : itemCfg.x\n        this.relY = itemCfg.y\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.hover) {\n            context.drawImage(this.hiImg, this.x, this.y)\n        } else {\n            context.drawImage(this.loImg, this.x, this.y)\n        }\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseButtonCfg } from '../../cfg/BaseButtonCfg'\nimport { MenuSliderItemCfg } from '../../cfg/MenuSliderItemCfg'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuSliderItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLeft: HTMLCanvasElement\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgRight: HTMLCanvasElement\n    sliderX: number = 0\n    min: number = 0\n    max: number = 1\n    value: number = 0\n    onValueChanged: (value: number) => any = (value) => console.log('value changed to: ' + value)\n\n    constructor(parent: MenuLayer, itemCfg: MenuSliderItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.sliderX = itemCfg.width\n        this.imgLeft = ResourceManager.getImage(itemCfg.imgLeft)\n        this.imgNormal = ResourceManager.getImage(itemCfg.imgOff)\n        this.imgHover = ResourceManager.getImage(itemCfg.imgOn)\n        this.imgRight = ResourceManager.getImage(itemCfg.imgRight)\n        const leftBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        leftBtn.imgNormal = ResourceManager.getImage(itemCfg.btnLeftNormal)\n        leftBtn.imgHover = ResourceManager.getImage(itemCfg.btnLeftHover)\n        leftBtn.relX = this.sliderX - this.imgLeft.width - leftBtn.imgHover.width\n        leftBtn.width = leftBtn.imgHover.width\n        leftBtn.height = leftBtn.imgHover.height\n        leftBtn.updatePosition()\n        leftBtn.onClick = () => {\n            if (this.value > this.min) {\n                this.value--\n                this.onValueChanged(this.value)\n            }\n        }\n        const rightBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        rightBtn.imgNormal = ResourceManager.getImage(itemCfg.btnRightNormal)\n        rightBtn.imgHover = ResourceManager.getImage(itemCfg.btnRightHover)\n        rightBtn.relX = this.sliderX + this.imgNormal.width + this.imgRight.width * 2\n        rightBtn.width = rightBtn.imgHover.width\n        rightBtn.height = rightBtn.imgHover.height\n        rightBtn.updatePosition()\n        rightBtn.onClick = () => {\n            if (this.value < this.max) {\n                this.value++\n                this.onValueChanged(this.value)\n            }\n        }\n        this.width = itemCfg.width + leftBtn.imgHover.width + this.imgLeft.width + this.imgNormal.width + this.imgRight.width * 2 + rightBtn.imgHover.width\n        this.min = itemCfg.min\n        this.max = itemCfg.max || 1\n        this.value = this.min // TODO set default value\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.height = this.imgTextNormal.height\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        if (this.hover) {\n            img = this.imgTextHover\n        }\n        context.drawImage(img, this.x, this.y)\n        let posX = this.x + this.sliderX\n        context.drawImage(this.imgLeft, posX, this.y)\n        context.drawImage(this.imgNormal, posX, this.y)\n        const dw = Math.round(this.value / this.max * this.imgHover.width)\n        context.drawImage(this.imgHover, 0, 0, dw, this.imgHover.height, posX, this.y, dw, this.imgHover.height)\n        posX += this.imgNormal.width\n        context.drawImage(this.imgRight, posX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuEntryCfg } from '../../cfg/MenuEntryCfg'\nimport { BitmapFont } from '../../core/BitmapFont'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuCycleItem } from './MenuCycleItem'\nimport { MenuLabelItem } from './MenuLabelItem'\nimport { MenuSliderItem } from './MenuSliderItem'\n\nexport class MenuLayer extends BaseElement {\n\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    itemsTrigger: MenuLabelItem[] = []\n    itemsNext: MenuLabelItem[] = []\n\n    constructor(parent: BaseElement, menuCfg: MenuEntryCfg) {\n        super(parent)\n        this.relX = menuCfg.position[0]\n        this.relY = menuCfg.position[1]\n        this.menuImage = ResourceManager.getImageOrNull(menuCfg.menuImage[0]) // menuImage has 4 parameter here\n        this.titleImage = ResourceManager.getBitmapFont(menuCfg.menuFont).createTextImage(menuCfg.fullName)\n        this.loFont = ResourceManager.getBitmapFont(menuCfg.loFont)\n        this.hiFont = ResourceManager.getBitmapFont(menuCfg.hiFont)\n        menuCfg.itemsLabel.forEach((itemCfg) => {\n            const item = this.addChild(new MenuLabelItem(this, itemCfg, menuCfg.autoCenter))\n            if (itemCfg.actionName.toLowerCase() === 'trigger') {\n                this.itemsTrigger.push(item)\n            } else {\n                this.itemsNext.push(item)\n            }\n        })\n        menuCfg.itemsCycle.forEach((itemCfg) => this.addChild(new MenuCycleItem(this, itemCfg)))\n        menuCfg.itemsSlider.forEach((itemCfg) => this.addChild(new MenuSliderItem(this, itemCfg)))\n        this.hidden = true\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.drawImage(this.menuImage, (this.parent.width - this.menuImage.width) / 2, (this.parent.height - this.menuImage.height) / 2)\n        context.drawImage(this.titleImage, (this.parent.width - this.titleImage.width) / 2, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuCfg } from '../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../screen/layer/ScreenLayer'\nimport { Panel } from '../base/Panel'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuBasePanel extends Panel {\n\n    layersByKey: Map<string, MenuLayer> = new Map()\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super()\n        this.width = layer.fixedWidth\n        this.height = layer.fixedHeight\n        this.hidden = true\n        cfg.menus.forEach((menuCfg, index) => this.layersByKey.set('menu' + (index + 1), this.addChild(new MenuLayer(this, menuCfg))))\n        const pausePanel = this\n        this.layersByKey.forEach((layer) => layer.itemsNext.forEach((item) => item.onClick = () => pausePanel.selectLayer(item.target)))\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n    }\n\n    show() {\n        this.hidden = false\n        this.selectLayer('menu1')\n    }\n\n    hide() {\n        super.hide()\n        this.notifyRedraw()\n    }\n\n    selectLayer(key: string) {\n        const layer = this.layersByKey.get(key.toLowerCase())\n        this.layersByKey.forEach(l => l !== layer && l.hide())\n        layer.show()\n        this.notifyRedraw()\n    }\n\n}\n","import { MenuCfg } from '../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../screen/layer/ScreenLayer'\nimport { MenuBasePanel } from './MenuBasePanel'\n\nexport class OptionsPanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const panel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => panel.onRepeatBriefing()\n        this.layersByKey.get('menu1').itemsTrigger[1].onClick = () => panel.hide()\n    }\n\n}\n","import { MenuCfg } from '../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../screen/layer/ScreenLayer'\nimport { MenuBasePanel } from './MenuBasePanel'\n\nexport class PausePanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n    onAbortGame: () => any = () => console.log('abort mission')\n    onRestartGame: () => any = () => console.log('restart mission')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const pausePanel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => pausePanel.hide() // Pause\n        this.layersByKey.get('menu2').itemsTrigger[0].onClick = () => pausePanel.onRepeatBriefing() // Options\n        this.layersByKey.get('menu3').itemsTrigger[0].onClick = () => pausePanel.onAbortGame() // Quit\n        this.layersByKey.get('menu4').itemsTrigger[0].onClick = () => pausePanel.onRestartGame() // Restart\n    }\n\n}\n","import { MenuCfg } from '../../cfg/MenuCfg'\nimport { ObjectiveImageCfg } from '../../cfg/ObjectiveImageCfg'\nimport { EventBus } from '../../event/EventBus'\nimport { KEY_EVENT } from '../../event/EventTypeEnum'\nimport { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { ChangeCursor } from '../../event/LocalEvents'\nimport { Panel } from '../../gui/base/Panel'\nimport { BriefingPanel } from '../../gui/briefing/BriefingPanel'\nimport { OptionsPanel } from '../../gui/overlay/OptionsPanel'\nimport { PausePanel } from '../../gui/overlay/PausePanel'\nimport { DEV_MODE } from '../../params'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Cursors } from '../Cursors'\nimport { GuiBaseLayer } from './GuiBaseLayer'\n\nexport class OverlayLayer extends GuiBaseLayer {\n\n    panelBriefing: BriefingPanel\n    panelOptions: OptionsPanel\n    panelPause: PausePanel\n\n    constructor() {\n        super()\n        this.panelPause = this.addPanel(new PausePanel(this, ResourceManager.getResource('PausedMenu') as MenuCfg))\n        this.panelOptions = this.addPanel(new OptionsPanel(this, ResourceManager.getResource('OptionsMenu') as MenuCfg))\n        this.panelBriefing = this.addPanel(new BriefingPanel())\n        // link items\n        this.panelPause.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n        this.panelOptions.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n    }\n\n    reset() {\n        super.reset()\n        if (!DEV_MODE) this.setActivePanel(this.panelBriefing)\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.panelBriefing.setup(objectiveText, objectiveBackImgCfg)\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        if (this.panels.every(p => p.hidden)) return false\n        return super.handlePointerEvent(event) || true // catch em all\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): boolean {\n        let result = false\n        const lEventKey = event.key.toLowerCase()\n        if (event.eventEnum === KEY_EVENT.UP) {\n            if (lEventKey === 'escape') {\n                if (this.panelBriefing.hidden && this.panelOptions.hidden) {\n                    if (this.panelPause.hidden) {\n                        // TODO actually pause the game\n                        this.setActivePanel(this.panelPause)\n                    } else {\n                        // TODO actually unpause the game\n                        this.panelPause.hide()\n                    }\n                    result = true\n                }\n            } else if (lEventKey === ' ') { // space\n                if (!this.panelBriefing.hidden) {\n                    this.panelBriefing.nextParagraph()\n                    result = true\n                }\n            }\n        }\n        return result\n    }\n\n    setActivePanel(panel: Panel) {\n        EventBus.publishEvent(new ChangeCursor(Cursors.Pointer_Standard))\n        this.panels.forEach(p => p !== panel && p.hide())\n        panel.show()\n        this.redraw()\n    }\n\n}\n","import { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameState } from '../../game/model/GameState'\nimport { SceneManager } from '../../game/SceneManager'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class SelectionLayer extends ScreenLayer {\n\n    sceneMgr: SceneManager\n    selectStart: { x: number, y: number } = null\n\n    constructor() {\n        super(true)\n    }\n\n    reset() {\n        super.reset()\n        this.selectStart = null\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        if (GameState.buildModeSelection) return\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.startSelection(cx, cy)\n        } else if (event.eventEnum === POINTER_EVENT.MOVE) {\n            return this.changeSelection(cx, cy)\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.selectEntities(cx, cy)\n        }\n        return false\n    }\n\n    startSelection(screenX: number, screenY: number) {\n        this.selectStart = {x: screenX, y: screenY}\n        return true\n    }\n\n    changeSelection(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        this.context.strokeStyle = 'rgba(128, 192, 192, 0.5)'\n        this.context.lineWidth = 2\n        this.context.strokeRect(this.selectStart.x, this.selectStart.y, screenX - this.selectStart.x, screenY - this.selectStart.y)\n        return true\n    }\n\n    selectEntities(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        const r1x = (this.selectStart.x / this.canvas.width) * 2 - 1\n        const r1y = -(this.selectStart.y / this.canvas.height) * 2 + 1\n        const r2x = (screenX / this.canvas.width) * 2 - 1\n        const r2y = -(screenY / this.canvas.height) * 2 + 1\n        if (Math.abs(screenX - this.selectStart.x) < 5 && Math.abs(screenY - this.selectStart.y) < 5) {\n            const x = (this.selectStart.x + screenX) / this.canvas.width - 1\n            const y = -(this.selectStart.y + screenY) / this.canvas.height + 1\n            this.sceneMgr.selectEntitiesByRay(x, y)\n        } else {\n            this.sceneMgr.selectEntitiesInFrustum(r1x, r1y, r2x, r2y)\n        }\n        this.selectStart = null\n        return true\n    }\n\n}\n","import { MathUtils, Vector2 } from 'three'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { clearIntervalSafe, getRandom, iGet } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { EntityAddedEvent, RaiderRequested } from '../event/WorldEvents'\nimport { RaiderActivity } from '../game/model/activities/RaiderActivity'\nimport { EntityType } from '../game/model/EntityType'\nimport { GameState } from '../game/model/GameState'\nimport { MoveJob } from '../game/model/job/MoveJob'\nimport { Raider } from '../game/model/raider/Raider'\nimport { ObjectListLoader } from '../game/ObjectListLoader'\nimport { SceneManager } from '../game/SceneManager'\nimport { Supervisor } from '../game/Supervisor'\nimport { WorldManager } from '../game/WorldManager'\nimport { CHECK_SPANW_RAIDER_TIMER, TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { LevelObjectiveTextEntry } from '../resource/wadworker/ObjectiveTextParser'\nimport { BaseScreen } from './BaseScreen'\nimport { GameLayer } from './layer/GameLayer'\nimport { GuiMainLayer } from './layer/GuiMainLayer'\nimport { OverlayLayer } from './layer/OverlayLayer'\nimport { SelectionLayer } from './layer/SelectionLayer'\nimport degToRad = MathUtils.degToRad\n\nexport class GameScreen extends BaseScreen {\n\n    onLevelEnd: () => void = () => console.log('Level aborted')\n    gameLayer: GameLayer\n    selectionLayer: SelectionLayer\n    guiLayer: GuiMainLayer\n    overlayLayer: OverlayLayer\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    spawnRaiderInterval = null\n    jobSupervisor: Supervisor\n    levelName: string\n    levelConf: LevelEntryCfg\n\n    constructor() {\n        super()\n        this.gameLayer = this.addLayer(new GameLayer(), 0)\n        this.selectionLayer = this.addLayer(new SelectionLayer(), 10)\n        this.guiLayer = this.addLayer(new GuiMainLayer(), 20)\n        this.overlayLayer = this.addLayer(new OverlayLayer(), 30)\n        this.worldMgr = new WorldManager()\n        this.gameLayer.worldMgr = this.worldMgr\n        this.sceneMgr = new SceneManager(this.gameLayer.canvas)\n        this.gameLayer.sceneMgr = this.sceneMgr\n        this.selectionLayer.sceneMgr = this.sceneMgr\n        this.jobSupervisor = new Supervisor(this.worldMgr)\n        // link layer\n        this.guiLayer.onOptionsShow = () => this.overlayLayer.panelOptions.show()\n        this.overlayLayer.panelBriefing.messagePanel = this.guiLayer.panelMessages\n        this.overlayLayer.panelPause.onAbortGame = () => this.onLevelEnd()\n        this.overlayLayer.panelPause.onRestartGame = () => this.restartLevel()\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => {\n            if (GameState.requestedRaiders > 0 && !this.spawnRaiderInterval) {\n                this.spawnRaiderInterval = setInterval(this.checkSpawnRaiders.bind(this), CHECK_SPANW_RAIDER_TIMER)\n            }\n        })\n    }\n\n    startLevel(levelName) {\n        this.levelName = levelName\n        this.levelConf = ResourceManager.getResource('Levels').levelsByName[this.levelName]\n        if (!this.levelConf) throw 'Could not find level configuration for \"' + this.levelName + '\"'\n        this.setupAndStartLevel()\n    }\n\n    restartLevel() {\n        this.hide()\n        GameState.reset()\n        this.setupAndStartLevel()\n    }\n\n    private setupAndStartLevel() {\n        console.log('Starting level ' + this.levelName + ' - ' + this.levelConf.fullName)\n        this.worldMgr.setup(this.levelConf, () => this.onLevelEnd())\n        this.sceneMgr.setupScene(this.levelConf, this.worldMgr)\n        // load in non-space objects next\n        const objectListConf = ResourceManager.getResource(this.levelConf.oListFile)\n        ObjectListLoader.loadObjectList(this.worldMgr, this.sceneMgr, objectListConf, this.levelConf.disableStartTeleport)\n        // setup GUI\n        const objectiveText: LevelObjectiveTextEntry = iGet(ResourceManager.getResource(this.levelConf.objectiveText), this.levelName)\n        this.guiLayer.reset()\n        this.overlayLayer.setup(objectiveText.objective, this.levelConf.objectiveImage640x480)\n        this.show()\n    }\n\n    show() {\n        super.show()\n        this.sceneMgr.startScene()\n        this.worldMgr.start()\n        this.jobSupervisor.start()\n    }\n\n    hide() {\n        this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n        this.jobSupervisor.stop()\n        this.worldMgr.stop()\n        this.sceneMgr.disposeScene()\n        super.hide()\n    }\n\n    resize(width: number, height: number) {\n        super.resize(width, height)\n        this.sceneMgr?.resize(width, height)\n    }\n\n    checkSpawnRaiders() {\n        if (GameState.requestedRaiders < 1) {\n            this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n            return\n        }\n        if (GameState.raiders.length >= GameState.getMaxRaiders()) return\n        const spawnBuildings = GameState.getBuildingsByType(EntityType.TOOLSTATION, EntityType.TELEPORT_PAD)\n        for (let c = 0; c < spawnBuildings.length && GameState.requestedRaiders > 0; c++) {\n            const station = spawnBuildings[c]\n            if (station.spawning) continue\n            GameState.requestedRaiders--\n            EventBus.publishEvent(new RaiderRequested())\n            station.spawning = true\n            const raider = new Raider(this.worldMgr, this.sceneMgr)\n            const heading = station.getHeading()\n            raider.changeActivity(RaiderActivity.TeleportIn, () => {\n                station.spawning = false\n                raider.changeActivity()\n                raider.createPickSphere()\n                const walkOutPos = station.getPosition2D().add(new Vector2(0, TILESIZE * 3 / 4 + getRandom(TILESIZE / 2))\n                    .rotateAround(new Vector2(0, 0), heading + degToRad(-10 + getRandom(20))))\n                raider.setJob(new MoveJob(walkOutPos))\n                GameState.raiders.push(raider)\n                EventBus.publishEvent(new EntityAddedEvent(raider))\n            })\n            raider.addToScene(station.primarySurface.getCenterWorld2D(), heading)\n        }\n    }\n\n}\n","export class MainMenuBaseItem {\n\n    x: number = 0\n    y: number = 0\n    width: number = 0\n    height: number = 0\n    zIndex: number = 100\n    scrollAffected = false\n    needsRedraw: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n    actionName: string = ''\n    targetIndex: number = 0\n\n    static compareZ(left: MainMenuBaseItem, right: MainMenuBaseItem) {\n        return left.zIndex === right.zIndex ? 0 : left.zIndex > right.zIndex ? -1 : 1\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const hover = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        if (this.hover !== hover) {\n            this.hover = hover\n            this.needsRedraw = true\n            this.onHoverChange()\n        }\n        if (!this.hover) this.pressed = false\n        return this.hover\n    }\n\n    onHoverChange() {\n    }\n\n    checkSetPressed() {\n        if (!this.hover) return\n        if (!this.pressed) this.needsRedraw = true\n        this.pressed = true\n    }\n\n    setReleased() {\n        if (this.pressed) this.needsRedraw = true\n        this.pressed = false\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        this.needsRedraw = false\n    }\n\n}\n","import { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuIconButton extends MainMenuBaseItem {\n\n    imgNormal = null\n    imgHover = null\n    imgPressed = null\n    tooltip = ''\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.imgNormal = ResourceManager.getImage(cfg.imgNormal)\n        this.imgHover = ResourceManager.getImage(cfg.imgHover)\n        this.imgPressed = ResourceManager.getImage(cfg.imgPressed)\n        this.tooltip = (cfg.tooltip || '').replace(/_/g, ' ')\n        this.width = Math.max(this.imgNormal.width, this.imgHover.width, this.imgPressed.width)\n        this.height = Math.max(this.imgNormal.height, this.imgHover.height, this.imgPressed.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgNormal\n        if (this.hover) img = this.imgHover\n        if (this.pressed) img = this.imgPressed\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuLabelButton extends MainMenuBaseItem {\n\n    labelImgLo = null\n    labelImgHi = null\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.labelImgLo = layer.loFont.createTextImage(cfg.label)\n        this.labelImgHi = layer.hiFont.createTextImage(cfg.label)\n        this.width = Math.max(this.labelImgLo.width, this.labelImgHi.width)\n        this.height = Math.max(this.labelImgLo.height, this.labelImgHi.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const img = this.hover && !this.pressed ? this.labelImgHi : this.labelImgLo\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { clearIntervalSafe } from '../core/Util'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { GamePointerEvent } from '../event/GamePointerEvent'\nimport { GameWheelEvent } from '../event/GameWheelEvent'\nimport { NATIVE_FRAMERATE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from '../screen/layer/ScreenLayer'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuIconButton } from './MainMenuIconButton'\nimport { MainMenuLabelButton } from './MainMenuLabelButton'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\n\nexport class MainMenuLayer extends ScaledLayer {\n\n    screen: MainMenuScreen\n    cfg: MenuEntryCfg\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    items: MainMenuBaseItem[] = []\n    scrollY: number = 0\n    scrollSpeedY: number = 0\n    scrollInterval = null\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg) {\n        super()\n        this.screen = screen\n        this.cfg = menuCfg\n        this.loFont = menuCfg.loFont ? ResourceManager.getBitmapFont(menuCfg.loFont) : null\n        this.hiFont = menuCfg.hiFont ? ResourceManager.getBitmapFont(menuCfg.hiFont) : null\n        this.menuImage = menuCfg.menuImage ? ResourceManager.getImage(menuCfg.menuImage) : null\n        this.titleImage = this.loFont.createTextImage(menuCfg.fullName)\n\n        menuCfg.itemsLabel.forEach((item) => {\n            if (item.label) {\n                this.items.push(new MainMenuLabelButton(this, item))\n            } else {\n                this.items.push(new MainMenuIconButton(this, item))\n            }\n        })\n\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n\n        this.onRedraw = (context) => {\n            context.drawImage(this.menuImage, 0, -this.scrollY)\n            if (menuCfg.displayTitle) context.drawImage(this.titleImage, (this.fixedWidth - this.titleImage.width) / 2, this.cfg.position[1])\n            this.items.forEach((item, index) => (this.items[this.items.length - 1 - index]).draw(context))\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.scrollY = 0\n        this.scrollSpeedY = 0\n    }\n\n    show() {\n        super.show()\n        const that = this\n        this.scrollInterval = setInterval(() => {\n            if (that.scrollSpeedY === 0) return\n            that.setScrollY(that.scrollSpeedY)\n        }, 1000 / NATIVE_FRAMERATE)\n    }\n\n    hide() {\n        this.scrollInterval = clearIntervalSafe(this.scrollInterval)\n        super.hide()\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        if (event.eventEnum === POINTER_EVENT.MOVE) {\n            const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n            let hovered = false\n            this.items.forEach((item) => {\n                if (!hovered) {\n                    const absY = sy + (item.scrollAffected ? this.scrollY : 0)\n                    hovered = item.checkHover(sx, absY)\n                } else {\n                    if (item.hover) item.needsRedraw = true\n                    item.hover = false\n                    item.setReleased()\n                }\n            })\n            if (this.cfg.canScroll) {\n                const scrollAreaHeight = 100\n                if (sy < scrollAreaHeight) {\n                    this.setScrollSpeedY(-(scrollAreaHeight - sy))\n                } else if (sy > this.fixedHeight - scrollAreaHeight) {\n                    this.setScrollSpeedY(sy - (this.fixedHeight - scrollAreaHeight))\n                } else {\n                    this.setScrollSpeedY(0)\n                }\n            }\n        } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => item.checkSetPressed())\n            }\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => {\n                    if (item.pressed) {\n                        item.setReleased()\n                        if (item.actionName.toLowerCase() === 'next') {\n                            this.screen.showMainMenu(item.targetIndex)\n                        } else if (item.actionName.toLowerCase() === 'selectlevel') {\n                            this.screen.selectLevel((item as MainMenuLevelButton).levelKey)\n                        } else if (item.actionName) {\n                            console.warn('not implemented: ' + item.actionName + ' - ' + item.targetIndex)\n                        }\n                    }\n                })\n            }\n        }\n        if (this.needsRedraw()) this.redraw()\n        return false\n    }\n\n    private setScrollSpeedY(deltaY: number) {\n        this.scrollSpeedY = Math.sign(deltaY) * Math.pow(Math.round(deltaY / 20), 2)\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        if (!this.cfg.canScroll) return false\n        this.setScrollY(event.deltaY)\n        return true\n    }\n\n    private setScrollY(deltaY: number) {\n        const scrollYBefore = this.scrollY\n        this.scrollY = Math.min(Math.max(this.scrollY + deltaY, 0), this.menuImage.height - this.fixedHeight)\n        if (scrollYBefore !== this.scrollY) this.redraw()\n    }\n\n    needsRedraw(): boolean {\n        return this.items.some((item) => item.needsRedraw)\n    }\n\n}\n","import { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuLevelButton extends MainMenuBaseItem {\n\n    layer: MainMenuLayer\n    imgActive = null\n    imgInactive = null\n    imgCross = null\n    unlocked: boolean = false\n    levelKey: string = ''\n\n    constructor(layer: MainMenuLayer, levelKey: string, levelCfg: LevelEntryCfg) {\n        super()\n        this.layer = layer\n        this.actionName = 'selectlevel'\n        this.levelKey = levelKey\n        this.x = levelCfg.frontEndX\n        this.y = levelCfg.frontEndY\n        this.zIndex = 10\n        this.scrollAffected = true\n        const [imgActive, imgInactive, imgCross] = levelCfg.menuBMP\n        this.imgActive = ResourceManager.getImage(imgActive)\n        this.imgInactive = ResourceManager.getImage(imgInactive)\n        this.imgCross = ResourceManager.getImage(imgCross)\n        this.width = Math.max(this.imgActive.width, this.imgInactive.width, this.imgCross.width)\n        this.height = Math.max(this.imgActive.height, this.imgInactive.height, this.imgCross.height)\n        this.unlocked = levelCfg.frontEndOpen\n        this.unlocked = true // TODO don't unlock everything by default\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgCross\n        if (this.unlocked) img = this.hover ? this.imgActive : this.imgInactive\n        context.drawImage(img, this.x, this.y - this.layer.scrollY)\n    }\n\n}\n","import { createContext } from '../core/ImageHelper'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class MainMenuPanel extends MainMenuBaseItem {\n\n    context: CanvasRenderingContext2D\n\n    constructor(imgData: ImageData, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.zIndex = 50\n        this.context = createContext(imgData.width, imgData.height)\n        this.context.putImageData(imgData, 0, 0)\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const inRect = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        const hover = inRect && this.context.getImageData(sx, sy, 1, 1).data[3] > 0\n        if (this.hover !== hover) this.needsRedraw = true\n        this.hover = hover\n        return this.hover\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        context.drawImage(this.context.canvas, this.x, this.y, this.width, this.height)\n    }\n\n}\n","import { BitmapFont } from '../core/BitmapFont'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class MainMenuWindow extends MainMenuBaseItem {\n\n    font: BitmapFont\n    imgFirstLine = null\n    imgSecondLine = null\n\n    constructor(font: BitmapFont, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.font = font\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    setFirstLine(text: string) {\n        this.imgFirstLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    setSecondLine(text: string) {\n        this.imgSecondLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const cx = this.x + this.width / 2, cy = this.y + this.height / 2\n        if (this.imgFirstLine) context.drawImage(this.imgFirstLine, cx - this.imgFirstLine.width / 2, cy - this.imgFirstLine.height)\n        if (this.imgSecondLine) context.drawImage(this.imgSecondLine, cx - this.imgSecondLine.width / 2, cy)\n    }\n\n}\n","import { LevelEntryCfg, LevelsCfg } from '../cfg/LevelsCfg'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { iGet } from '../core/Util'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { MainMenuPanel } from './MainMenuPanel'\nimport { MainMenuWindow } from './MainMenuWindow'\n\nexport class LevelSelectLayer extends MainMenuLayer {\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg, modeLevel: boolean) {\n        super(screen, menuCfg)\n        const levelsCfg: LevelsCfg = ResourceManager.getResource('Levels')\n        const levelTextCfg = new LevelTextCfg()\n        this.items.push(new MainMenuPanel(levelTextCfg.panelImgData, levelTextCfg.panelPos))\n        const levelTextWindow = new MainMenuWindow(ResourceManager.getDefaultFont(), levelTextCfg.window)\n        levelTextWindow.setFirstLine(modeLevel ? levelTextCfg.level : levelTextCfg.tutorial)\n        this.items.push(levelTextWindow)\n        Object.keys(levelsCfg.levelsByName).forEach((levelKey) => {\n            const level: LevelEntryCfg = levelsCfg.levelsByName[levelKey]\n            const levelButton = new MainMenuLevelButton(this, levelKey, level)\n            levelButton.onHoverChange = () => levelTextWindow.setSecondLine(levelButton.hover ? level.fullName : '')\n            this.items.push(levelButton)\n        })\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n    }\n\n}\n\nclass LevelTextCfg {\n\n    window = {x: 0, y: 0, w: 0, h: 0}\n    panelImgData: ImageData\n    panelPos = {x: 0, y: 0, w: 0, h: 0}\n    level: string = ''\n    tutorial: string = ''\n\n    constructor() {\n        const cfg = ResourceManager.cfg('Menu', 'LevelText')\n        const winCfg = iGet(cfg, 'Window')\n        this.window = {x: winCfg[0], y: winCfg[1], w: winCfg[2], h: winCfg[3]}\n        const panelCfg = iGet(cfg, 'Panel')\n        this.panelImgData = ResourceManager.getImageData(panelCfg[0])\n        this.panelPos = {x: panelCfg[1], y: panelCfg[2], w: panelCfg[3], h: panelCfg[4]}\n        this.level = iGet(cfg, 'Level').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n        this.tutorial = iGet(cfg, 'Tutorial').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n    }\n\n}\n","import { MenuCfg } from '../cfg/MenuCfg'\nimport { LevelSelectLayer } from '../menu/LevelSelectLayer'\nimport { MainMenuLayer } from '../menu/MainMenuLayer'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\n\nexport class MainMenuScreen extends BaseScreen {\n\n    onLevelSelected: (levelName: string) => void = null\n    menus: MainMenuLayer[] = []\n\n    constructor() {\n        super()\n        const mainMenuFullCfg = ResourceManager.getResource('MainMenuFull') as MenuCfg\n        mainMenuFullCfg.menus.forEach((menuCfg) => {\n            let layer\n            if (menuCfg.title === 'Levels') {\n                layer = new LevelSelectLayer(this, menuCfg, true)\n            } else if (menuCfg.title === 'Tutorials') {\n                layer = new LevelSelectLayer(this, menuCfg, false)\n            } else {\n                layer = new MainMenuLayer(this, menuCfg)\n            }\n            this.menus.push(layer)\n            this.addLayer(layer)\n        })\n    }\n\n    showMainMenu(index: number = 0) {\n        this.hide()\n        this.menus[index].show()\n        this.cursorLayer.show()\n    }\n\n    showLevelSelection() {\n        this.showMainMenu(1)\n    }\n\n    selectLevel(levelName) {\n        this.hide()\n        this.onLevelSelected(levelName)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class RewardScreenButton extends MainMenuBaseItem {\n\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgPressed: HTMLCanvasElement\n    imgDisabled: HTMLCanvasElement\n    disabled: boolean = false\n    visible: boolean = true\n\n    constructor(conf: any) {\n        super()\n        let imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath;\n        [imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath, this.x, this.y] = conf\n        this.imgNormal = ResourceManager.getImage(imgNormalFilepath)\n        this.imgHover = ResourceManager.getImage(imgHoverFilepath)\n        this.imgPressed = ResourceManager.getImage(imgPressedFilepath)\n        this.imgDisabled = ResourceManager.getImage(imgDisabledFilepath)\n        this.width = this.imgNormal.width\n        this.height = this.imgNormal.height\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        if (!this.visible) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled\n        } else if (this.pressed) {\n            img = this.imgPressed\n        } else if (this.hover) {\n            img = this.imgHover\n        }\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { RewardCfg } from '../cfg/RewardCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { clearTimeoutSafe } from '../core/Util'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { RewardScreenButton } from '../menu/RewardScreenButton'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\nimport { ScaledLayer } from './layer/ScreenLayer'\n\nexport class RewardScreen extends BaseScreen {\n\n    onAdvance: () => void\n    cfg: RewardCfg = null\n    titleFont: BitmapFont\n    resultsLayer: ScaledLayer\n    descriptionTextLayer: ScaledLayer\n    btnLayer: ScaledLayer\n    resultIndex: number = 0\n    resultLastIndex: number = 0\n    images: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    boxes: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    fonts = {}\n    texts: HTMLCanvasElement[] = []\n    uncoverTimeout = null\n    btnSave: RewardScreenButton\n    btnAdvance: RewardScreenButton\n\n    constructor() {\n        super()\n        this.cfg = ResourceManager.getResource('Reward')\n        this.titleFont = ResourceManager.getBitmapFont(this.cfg.titleFont)\n        const backgroundImg = ResourceManager.getImage(this.cfg.wallpaper)\n        const backgroundLayer = this.addLayer(new ScaledLayer())\n        backgroundLayer.onRedraw = (context) => context.drawImage(backgroundImg, 0, 0)\n        this.cfg.images.forEach((img) => {\n            this.images.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        this.cfg.boxImages.forEach((img) => {\n            this.boxes.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        Object.keys(this.cfg.fonts).forEach((fontKey, index) => {\n            const font = ResourceManager.getBitmapFont(this.cfg.fonts[fontKey])\n            this.fonts[fontKey.toLowerCase()] = font\n            const txt = this.cfg.texts[index]\n            const labelFont = index < 9 ? font : ResourceManager.getBitmapFont(this.cfg.backFont)\n            this.texts.push(labelFont.createTextImage(txt.text))\n        })\n        this.resultsLayer = this.addLayer(new ScaledLayer())\n        this.resultsLayer.handlePointerEvent = ((event) => {\n            if (event.eventEnum === POINTER_EVENT.UP) {\n                this.uncoverTimeout = clearTimeoutSafe(this.uncoverTimeout)\n                this.uncoverTimeout = null\n                this.resultIndex = this.resultLastIndex\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n                this.redraw()\n                return true\n            }\n            return false\n        })\n        this.descriptionTextLayer = this.addLayer(new ScaledLayer(), 20)\n        this.btnLayer = this.addLayer(new ScaledLayer(), 50)\n        this.btnSave = new RewardScreenButton(this.cfg.saveButton)\n        this.btnSave.disabled = true\n        this.btnAdvance = new RewardScreenButton(this.cfg.advanceButton)\n        this.btnLayer.handlePointerEvent = ((event) => {\n            if (event.eventEnum === POINTER_EVENT.MOVE) {\n                const [sx, sy] = this.btnLayer.toScaledCoords(event.clientX, event.clientY)\n                this.btnSave.checkHover(sx, sy)\n                this.btnAdvance.checkHover(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    this.btnSave.checkSetPressed()\n                    this.btnAdvance.checkSetPressed()\n                }\n            } else if (event.eventEnum === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    if (this.btnSave.pressed) {\n                        this.btnSave.setReleased()\n                        // TODO switch to save screen\n                    } else if (this.btnAdvance.pressed) {\n                        this.btnAdvance.setReleased()\n                        this.hide()\n                        this.onAdvance()\n                    }\n                }\n            }\n            if (this.btnSave.needsRedraw || this.btnAdvance.needsRedraw) this.redraw()\n            return false\n        })\n        this.btnLayer.onRedraw = (context) => {\n            this.btnSave.draw(context)\n            this.btnAdvance.draw(context)\n        }\n    }\n\n    show() {\n        this.resultIndex = 0\n        this.btnSave.visible = false\n        this.btnAdvance.visible = false\n        this.uncoverResult()\n        const levelFullNameImg = this.titleFont.createTextImage(GameState.levelFullName)\n        let resultText = this.cfg.quitText\n        this.resultLastIndex = this.images.length - 2\n        if (GameState.resultState === GameResultState.COMPLETE) {\n            resultText = this.cfg.completeText\n            this.resultLastIndex = this.images.length - 1\n        } else if (GameState.resultState === GameResultState.FAILED) {\n            resultText = this.cfg.failedText\n        }\n        const resultValues = []\n        resultValues.push(this.fonts['crystals'].createTextImage(this.percentString(GameState.numCrystal, GameState.neededCrystals)))\n        resultValues.push(this.fonts['ore'].createTextImage(this.percentString(GameState.numOre, GameState.totalOres)))\n        resultValues.push(this.fonts['diggable'].createTextImage(this.percentString(GameState.remainingDiggables, GameState.totalDiggables, true)))\n        resultValues.push(this.fonts['constructions'].createTextImage(GameState.buildings.length.toString()))\n        resultValues.push(this.fonts['caverns'].createTextImage(this.percentString(GameState.discoveredCaverns, GameState.totalCaverns)))\n        resultValues.push(this.fonts['figures'].createTextImage(this.percentString(GameState.raiders.length, GameState.getMaxRaiders())))\n        resultValues.push(this.fonts['rockmonsters'].createTextImage(this.percentString(0))) // TODO show defence report, is either 0% or 100%\n        resultValues.push(this.fonts['oxygen'].createTextImage(this.percentString(GameState.airLevel)))\n        resultValues.push(this.fonts['timer'].createTextImage(this.timeString(GameState.gameTimeSeconds)))\n        resultValues.push(this.fonts['score'].createTextImage(this.percentString(GameState.score)))\n        const gameResultTextImg = this.titleFont.createTextImage(resultText)\n        this.resultsLayer.onRedraw = (context) => {\n            context.clearRect(0, 0, this.resultsLayer.fixedWidth, this.resultsLayer.fixedHeight)\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const img = this.images[c]\n                if (img) context.drawImage(img.img, img.x, img.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const box = this.boxes[c]\n                if (box) context.drawImage(box.img, box.x, box.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const txt = this.cfg.texts[c]\n                const text = resultValues[c]\n                if (text) context.drawImage(text, txt.x - text.width / 2, txt.y)\n            }\n            context.drawImage(levelFullNameImg, this.resultsLayer.fixedWidth / 2 - levelFullNameImg.width / 2, this.cfg.vertSpacing - levelFullNameImg.height / 2)\n            context.drawImage(gameResultTextImg, this.resultsLayer.fixedWidth / 2 - gameResultTextImg.width / 2, this.cfg.vertSpacing + levelFullNameImg.height / 2)\n        }\n        this.descriptionTextLayer.onRedraw = (context) => {\n            const descriptionTextImg = this.texts[this.resultIndex]\n            context.clearRect(0, this.cfg.textPos[1], this.descriptionTextLayer.fixedWidth, this.descriptionTextLayer.fixedHeight - this.cfg.textPos[1])\n            const tx = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[0] : 305\n            const ty = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[1] : 195\n            context.drawImage(descriptionTextImg, tx - descriptionTextImg.width / 2, ty)\n        }\n        super.show()\n    }\n\n    percentString(actual, max = 1, lessIsMore: boolean = false) {\n        if (max === 0) max = 1\n        let value = Math.round(Math.max(Math.min(actual / max, 1), 0) * 100)\n        if (lessIsMore) value = 100 - value\n        return value.toString() + '%'\n    }\n\n    padLeft(value: string, padding = '0', length = 2) {\n        while (value.length < length) value = padding + value\n        return value\n    }\n\n    timeString(seconds: number) {\n        const ss = this.padLeft((seconds % 60).toString())\n        const minutes = Math.floor(seconds / 60)\n        const mm = this.padLeft(((minutes % 60).toString()))\n        const hh = this.padLeft((Math.floor(minutes / 60).toString()))\n        return hh + ':' + mm + ':' + ss\n    }\n\n    uncoverResult() {\n        this.uncoverTimeout = setTimeout(() => {\n            this.uncoverTimeout = null\n            this.resultIndex++\n            if (this.resultIndex < this.resultLastIndex) {\n                this.uncoverResult()\n            } else {\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n            }\n            this.redraw()\n        }, this.cfg.timer * 1000)\n    }\n\n}\n","import { ClearCacheButton } from '../site/clearcache/ClearCacheButton'\nimport { GithubBox } from '../site/github/github-box'\nimport { WadFileSelectionModal } from '../site/modal/WadFileSelectionModal'\nimport { getRandomInclusive } from './core/Util'\nimport { GameState } from './game/model/GameState'\nimport { DEV_MODE } from './params'\nimport { ResourceManager } from './resource/ResourceManager'\nimport { GameScreen } from './screen/GameScreen'\nimport { LoadingScreen } from './screen/LoadingScreen'\nimport { MainMenuScreen } from './screen/MainMenuScreen'\nimport { RewardScreen } from './screen/RewardScreen'\n\nif (DEV_MODE) console.warn('DEV MODE ACTIVE')\n\n// setup and link all components\n\nconst loadingScreen = new LoadingScreen()\nconst wadFileSelectModal = new WadFileSelectionModal('game-container')\nconst githubBox = new GithubBox('game-container')\nconst clearCacheButton = new ClearCacheButton('game-container')\n\nwadFileSelectModal.onStart = (wad0Url, wad1Url) => {\n    ResourceManager.startLoadingFromUrl(wad0Url, wad1Url)\n}\nResourceManager.onMessage = (msg: string) => {\n    loadingScreen.setLoadingMessage(msg)\n}\nResourceManager.onCacheMissed = () => {\n    wadFileSelectModal.show()\n}\nResourceManager.onInitialLoad = (totalResources: number) => {\n    wadFileSelectModal.hide()\n    loadingScreen.enableGraphicMode(totalResources)\n}\nResourceManager.onAssetLoaded = () => {\n    loadingScreen.increaseLoadingState()\n}\nResourceManager.onLoadDone = () => {\n    // complete setup\n    const mainMenuScreen = new MainMenuScreen()\n    const gameScreen = new GameScreen()\n    const rewardScreen = new RewardScreen()\n\n    mainMenuScreen.onLevelSelected = (levelName) => {\n        try {\n            gameScreen.startLevel(levelName)\n        } catch (e) {\n            console.error('Could not load level: ' + levelName, e)\n            gameScreen.hide()\n            mainMenuScreen.showLevelSelection()\n        }\n    }\n    gameScreen.onLevelEnd = () => {\n        gameScreen.hide()\n        rewardScreen.show()\n    }\n    rewardScreen.onAdvance = () => {\n        GameState.reset()\n        mainMenuScreen.showLevelSelection()\n    }\n\n    // setup complete\n    loadingScreen.hide()\n    githubBox.hide()\n    clearCacheButton.hide()\n    const params = new URLSearchParams(window.location.search)\n    const entry = params.get('entry')\n    if (DEV_MODE && entry) {\n        GameState.numOre = Number(params.get('numOre')) || 0\n        GameState.numCrystal = Number(params.get('numCrystal')) || 0\n        if (entry === 'level') mainMenuScreen.showLevelSelection()\n        else if (entry === 'reward') rewardScreen.show()\n        else if (entry === 'random') mainMenuScreen.selectLevel('Level' + (('00' + getRandomInclusive(1, 25)).substr(-2)))\n        else if (entry) mainMenuScreen.selectLevel(entry)\n    } else {\n        mainMenuScreen.showMainMenu()\n    }\n}\n\n// start the game engine with loading resources\n\nloadingScreen.show()\nResourceManager.startLoadingFromCache()\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\nimport { ScaledLayer } from './layer/ScreenLayer'\n\nexport class LoadingScreen extends BaseScreen {\n\n    layer: ScaledLayer\n    assetIndex: number = 0\n\n    constructor() {\n        super()\n        this.layer = this.addLayer(new ScaledLayer())\n    }\n\n    show() {\n        this.layers.forEach((layer) => {\n            if (layer !== this.cursorLayer) layer.show()\n        })\n        this.setLoadingMessage('Loading...')\n    }\n\n    setLoadingMessage(text) {\n        this.layer.onRedraw = (context) => {\n            // clear the screen to black\n            context.fillStyle = 'black'\n            context.fillRect(0, 0, this.layer.fixedWidth, this.layer.fixedHeight)\n            // draw the loading title\n            context.font = '24px Arial'\n            context.fillStyle = 'white'\n            context.fillText('Loading Rock Raiders', 20, this.layer.fixedHeight - 50)\n            // hard-code the first loading message\n            context.font = '18px Arial'\n            context.fillStyle = 'white'\n            context.fillText(text, 20, this.layer.fixedHeight - 20)\n        }\n        this.redraw()\n    }\n\n    enableGraphicMode(totalResources: number) {\n        const imgBackground = ResourceManager.getImage(ResourceManager.cfg('Main', 'LoadScreen'))\n        const imgProgress = ResourceManager.getImage(ResourceManager.cfg('Main', 'ProgressBar'))\n        const imgLoading = ResourceManager.getDefaultFont().createTextImage(ResourceManager.cfg('Main', 'LoadingText'))\n        this.layer.onRedraw = (context => {\n            context.drawImage(imgBackground, 0, 0)\n            const loadingBarWidth = 353 * (this.assetIndex < totalResources ? Math.round(this.assetIndex / totalResources) : 1)\n            context.drawImage(imgProgress, 142, 450, loadingBarWidth, 9)\n            context.drawImage(imgLoading, Math.round(320 - imgLoading.width / 2), Math.round(456 - imgLoading.height / 2))\n        })\n        this.cursorLayer.show()\n        this.redraw()\n    }\n\n    increaseLoadingState() {\n        this.assetIndex++\n        this.redraw()\n    }\n\n}\n","export const DEV_MODE = process.env.WEBPACK_MODE === 'development'\nexport const WAD_CACHE_DB_NAME = 'RockRaidersWeb'\nexport const JOB_SCHEDULE_INTERVAL = 1000 // milliseconds\nexport const CHECK_CLEARRUBBLE_INTERVAL = 5000 // milliseconds\nexport const JOB_ACTION_RANGE = 5\nexport const CHECK_SPANW_RAIDER_TIMER = 1000 // milliseconds\nexport const MAX_RAIDER_BASE = 12\nexport const MAX_RAIDER_REQUEST = 9\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10\nexport const UPDATE_OXYGEN_TIMER = 5000 // milliseconds\nexport const PANEL_ANIMATION_MULTIPLIER = 3\nexport const HEIGHT_MULTIPLER = 0.1\nexport const SEQUENCE_TEXTURE_FRAMERATE = 5\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640\nexport const SPRITE_RESOLUTION_HEIGHT = 480\nexport const TILESIZE = 40\nexport const NATIVE_FRAMERATE = 30\n"],"sourceRoot":""}