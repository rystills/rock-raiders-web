{"version":3,"sources":["webpack://rock-raiders-web/webpack/runtime/chunk loaded","webpack://rock-raiders-web/webpack/runtime/startup chunk dependencies","webpack://rock-raiders-web/./src/event/EventTypeEnum.ts","webpack://rock-raiders-web/./src/params.ts","webpack://rock-raiders-web/./src/cfg/ButtonCfg.ts","webpack://rock-raiders-web/./src/gui/infodock/ButtonInfoDockCfg.ts","webpack://rock-raiders-web/./src/gui/radar/RadarPanel.ts","webpack://rock-raiders-web/./src/gui/sidebar/SideBarLabel.ts","webpack://rock-raiders-web/./src/gui/sidebar/PanelCrystalSideBar.ts","webpack://rock-raiders-web/./src/gui/toppanel/ButtonPriorityListCfg.ts","webpack://rock-raiders-web/./src/gui/toppanel/ButtonTopCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonCameraControlCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonInformationCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonsCfg.ts","webpack://rock-raiders-web/./src/cfg/PanelsCfg.ts","webpack://rock-raiders-web/./src/cfg/InfoButtonCfg.ts","webpack://rock-raiders-web/./src/game/model/EntityType.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTraining.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoDockButton.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoDockPanel.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoMessagesEntryConfig.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoMessagesConfig.ts","webpack://rock-raiders-web/./src/gui/infodock/InformationPanel.ts","webpack://rock-raiders-web/./src/event/EventBus.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityList.ts","webpack://rock-raiders-web/./src/game/model/Selectable.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/screen/Cursors.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTool.ts","webpack://rock-raiders-web/./src/game/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/event/GameEvent.ts","webpack://rock-raiders-web/./src/event/GuiCommand.ts","webpack://rock-raiders-web/./src/cfg/IconPanelBackButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/MenuItemCfg.ts","webpack://rock-raiders-web/./src/gui/main/IconPanelButton.ts","webpack://rock-raiders-web/./src/gui/main/IconSubPanel.ts","webpack://rock-raiders-web/./src/gui/main/BuildingPanel.ts","webpack://rock-raiders-web/./src/gui/main/GetToolPanel.ts","webpack://rock-raiders-web/./src/gui/main/IconPanelButtonLabel.ts","webpack://rock-raiders-web/./src/gui/main/LargeVehiclePanel.ts","webpack://rock-raiders-web/./src/gui/main/IconPanelToggleButton.ts","webpack://rock-raiders-web/./src/gui/main/SelectBasePanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectBuildingPanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectFloorPanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectRaiderPanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectRubblePanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectVehiclePanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectWallPanel.ts","webpack://rock-raiders-web/./src/gui/main/SmallVehiclePanel.ts","webpack://rock-raiders-web/./src/gui/main/TrainRaiderPanel.ts","webpack://rock-raiders-web/./src/gui/main/MainPanel.ts","webpack://rock-raiders-web/./src/gui/messagepanel/TextInfoMessage.ts","webpack://rock-raiders-web/./src/gui/messagepanel/MessagePanel.ts","webpack://rock-raiders-web/./src/gui/messagepanel/TextInfoMessageEntryConfig.ts","webpack://rock-raiders-web/./src/gui/messagepanel/TextInfoMessageConfig.ts","webpack://rock-raiders-web/./src/gui/toppanel/PriorityButtonsConfig.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityIdentifier.ts","webpack://rock-raiders-web/./src/gui/toppanel/PriorityListPanel.ts","webpack://rock-raiders-web/./src/gui/toppanel/PriorityPositionsEntry.ts","webpack://rock-raiders-web/./src/gui/base/ToggleButton.ts","webpack://rock-raiders-web/./src/gui/toppanel/TopPanel.ts","webpack://rock-raiders-web/./src/worker/GuiMainWorker.ts","webpack://rock-raiders-web/webpack/bootstrap","webpack://rock-raiders-web/webpack/runtime/define property getters","webpack://rock-raiders-web/webpack/runtime/ensure chunk","webpack://rock-raiders-web/webpack/runtime/get javascript chunk filename","webpack://rock-raiders-web/webpack/runtime/global","webpack://rock-raiders-web/webpack/runtime/hasOwnProperty shorthand","webpack://rock-raiders-web/webpack/runtime/publicPath","webpack://rock-raiders-web/webpack/runtime/importScripts chunk loading","webpack://rock-raiders-web/webpack/startup"],"names":["deferred","next","MOUSE_BUTTON","POINTER_EVENT","KEY_EVENT","MAX_RAIDER_BASE","MAX_RAIDER_REQUEST","ADDITIONAL_RAIDER_PER_SUPPORT","PANEL_ANIMATION_MULTIPLIER","SPRITE_RESOLUTION_WIDTH","SPRITE_RESOLUTION_HEIGHT","TILESIZE","NATIVE_FRAMERATE","ButtonCfg","BaseButtonCfg","cfgValue","super","length","this","buttonType","normalFile","highlightFile","pressedFile","relX","relY","width","height","tooltip","ButtonInfoDockCfg","BaseConfig","cfgObj","panelButtonInfoDockGoto","panelButtonInfoDockClose","lCfgKeyName","RadarPanel","Panel","parent","panelCfg","panelFillCfg","panelOverlayCfg","buttonsCfg","fill","addChild","overlay","btnToggle","Button","panelButtonRadarToggle","onClick","toggleState","btnMap","panelButtonRadarMapView","btnTagged","panelButtonRadarTaggedObjectView","ButtonRadarCfg","panelButtonRadarZoomIn","panelButtonRadarZoomOut","SideBarLabel","BaseElement","btnCfg","label","updatePosition","reset","context","hidden","textAlign","font","fillStyle","fillText","x","y","onRedraw","PanelCrystalSideBar","numCrystal","usedCrystals","neededCrystals","totalOre","labelOre","panelButtonCrystalSideBarOre","labelCrystal","panelButtonCrystalSideBarCrystals","imgNoCrystal","GuiResourceCache","imgSmallCrystal","imgUsedCrystal","imgOre","registerEventListener","event","toString","usedCrystal","neededCrystal","notifyRedraw","curX","img","curY","c","Math","max","imgCrystal","drawImage","i","ButtonCrystalSideBarCfg","ButtonPriorityListCfg","panelButtonPriorityListDisable","panelButtonPriorityListUpOne","panelButtonPriorityListClose","panelButtonPriorityListReset","objKey","match","push","parseValue","assignValue","ButtonTopCfg","panelButtonTopPanelCallToArms","panelButtonTopPanelOptions","panelButtonTopPanelPriorities","ButtonCameraControlCfg","panelButtonCameraControlZoomIn","panelButtonCameraControlZoomOut","panelButtonCameraControlCycleBuildings","panelButtonCameraControlRotate","ButtonInformationCfg","panelButtonInformationToggle","panelButtonInformationFunction","ButtonsCfg","panelRadar","panelCrystalSideBar","panelTopPanel","panelInformation","panelPriorityList","panelCameraControl","panelInfoDock","panelEncyclopedia","btnCfgValue","forEach","arr","toLowerCase","PanelsCfg","panelRadarFill","panelRadarOverlay","panelMessages","panelMessagesSide","PanelCfg","InfoButtonCfg","buttonImageFilename","disabledFile","EntityType","EntitySuperType","RaiderTraining","InfoDockButton","infoMessagesEntryConfig","eventKey","messages","text","animationTimeout","animationSpeedX","animationSpeedY","message","buttonClicked","pop","unshift","showButton","targetX","targetY","Promise","resolve","updateAnimation","onDone","diffX","diffY","abs","round","sign","sqrt","that","setTimeout","InfoDockPanel","infoMessagesConfig","informationPanel","stackButtons","gotoLatestMessage","dropLatestMessage","infoGenericDeath","infoGenericMonster","infoCrystalFound","infoUnderAttack","infoLandslide","infoPowerDrain","infoSlugEmerge","infoFoundMinifigure","btn","msg","console","log","location","button","shift","setMovedIn","splice","indexOf","slideStackIntoPosition","then","includes","slideInButton","disabled","map","b","reduce","prev","cur","slideToTarget","pushFirst","setText","promises","p","all","InfoMessagesEntryConfig","sfx","timing","flag","replace","InfoMessagesConfig","InformationPanel","textImage","createTextImage","EventBus","blockedEvents","isLocal","workerListener","callback","getListener","remove","eventListener","getOrUpdate","Map","PriorityList","levelDefault","current","priorities","index","enabled","tmp","entry","PriorityEntry","element","job","priority","some","j","key","getPriorityIdentifier","priorityIdentifier","find","levelPriorityEntry","AllRaiderTrainings","DRIVER","ENGINEER","GEOLOGIST","PILOT","SAILOR","DEMOLITION","RaiderTrainingSites","BARRACKS","UPGRADE","GEODOME","TELEPORT_PAD","DOCKS","TOOLSTATION","RaiderTrainingStatsProperty","SelectionType","GameResultState","Cursors","RaiderTool","resultState","RUNNING","levelFullName","numOre","numBrick","airLevel","selectedEntities","selectionType","buildings","buildingsUndiscovered","raiders","raidersUndiscovered","requestedRaiders","materials","materialsUndiscovered","buildingSites","spiders","spidersBySurface","bats","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","discoveredCaverns","levelStartTime","levelStopTime","rewardConfig","priorityList","oxygenRate","buildModeSelection","objectiveShown","objectiveSwitch","buildingTypes","filter","isUsable","bt","entityType","position","targetBuildings","getBuildingsByType","closest","minDist","bPos","getDropPosition","dist","distanceToSquared","training","stats","level","entities","previouslySelected","stillSelected","deselect","freshlySelected","select","len","GROUP","getSelectionType","NOTHING","publishEvent","SelectionChanged","selectedSurface","selectedBuilding","selectedRaiders","count","surface","minX","minZ","maxX","maxZ","discoverEntities","undiscovered","discovered","e","pos","getPosition","z","onDiscover","r","quota","importance","scoreCrystals","crystals","Infinity","scoreTimer","gameTimeSeconds","timer","scoreCaverns","caverns","min","scoreConstructions","constructions","scoreOxygen","oxygen","scoreFigures","figures","SURFACE","BUILDING","RAIDER","entity","terrain","sceneMgr","currentSurface","getSurfaceFromWorld","nearbySpiders","getSurface","get","SurfaceType","options","shaping","matIndex","floor","selectable","drillable","drillableHard","explodable","reinforcable","cursor","Pointer_Standard","statsDrillName","canCarryFence","Object","assign","typeNum","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","error","GROUND","name","Pointer_SurfaceType_Immovable","Pointer_SurfaceType_Hard","Pointer_SurfaceType_Medium","Pointer_SurfaceType_Loose","Pointer_SurfaceType_OreSeam","Pointer_SurfaceType_CrystalSeam","Pointer_SurfaceType_RechargeSeam","POWER_PATH","POWER_PATH_SITE","AllRaiderTools","DRILL","HAMMER","SHOVEL","SPANNER","FREEZERGUN","LASER","PUSHERGUN","BIRDSCARER","LocalEvent","guiForward","canDoTraining","everyHasTool","isGround","surfaceType","isPowerPath","isFloor","hasRubble","isDrillable","isDrillableHard","isReinforcable","canPlaceFence","POWER_STATION","someCarries","carries","everyHasMaxLevel","every","Levels","set","hasTraining","tool","hasTool","buildingCanUpgrade","canUpgrade","buildingCanSwitchPower","SelfPowered","PowerBuilding","BuildingsChangedEvent","usableBuildingsByTypeAndLevel","perLevel","building","minLevel","result","GuiCommand","CancelBuildMode","SelectBuildMode","SelectedRaiderPickTool","CreatePowerPath","PlaceFence","MakeRubble","ChangeRaiderSpawnRequest","increase","CreateClearRubbleJob","UpgradeBuilding","BeamUpBuilding","ChangePriorityList","ChangeBuildingPowerState","state","CreateDrillJob","CreateReinforceJob","CreateDynamiteJob","CancelSurfaceJobs","RaiderEat","RaiderDrop","RaiderUpgrade","RaiderBeamUp","TrainRaider","IconPanelBackButtonCfg","MenuItemCfg","tooltipSfx","tooltipDisabled","tooltipDisabledSfx","hotkey","Array","isArray","IconPanelButton","menuItemCfg","itemKey","parentWidth","menuIndex","isDisabled","updateState","autoRedraw","targetState","stateChanged","drawHover","hover","strokeStyle","lineWidth","strokeRect","IconSubPanel","numOfItems","onBackPanel","backBtn","iconPanelButtons","backBtnCfg","frameImgCfg","imgName","val1","val2","val3","val4","imgNameWoBackName","woBack1","woBack2","xOut","menuItemGroup","menuItem","movedIn","updateAllButtonStates","BuildingPanel","addBuildMenuItem","ORE_REFINERY","GUNSTATION","TELEPORT_BIG","item","addMenuItem","GetToolPanel","numUsableToolstations","addGetToolItem","countUsable","IconPanelButtonLabel","numRequestedRaiders","LargeVehiclePanel","IconPanelToggleButton","menuItemOffCfg","menuItemOnCfg","imgOnNormal","imgOnHover","imgOnPressed","imgOnDisabled","onToggleStateChange","imgNormal","imgDisabled","imgPressed","pressed","imgHover","children","child","drawTooltip","SelectBasePanel","SelectBuildingPanel","powerSwitchItem","upgradeItem","deleteBuildingItem","SelectFloorPanel","pathItem","removeItem","placeFenceItem","SelectRaiderPanel","numToolstations","feedItem","unloadItem","getToolItem","trainItem","deleteRaiderItem","SelectRubblePanel","clearRubbleItem","SelectVehiclePanel","SelectWallPanel","isHardDrillable","numToolstationsLevel2","itemDrill","itemReinforce","itemDynamite","itemDeselect","SmallVehiclePanel","TrainRaiderPanel","addTrainingItem","trainingItem","MainPanel","subPanels","numTeleportPads","numBarracks","numRaiders","xIn","yOut","yIn","mainPanel","addSubPanel","buildingPanel","smallVehiclePanel","largeVehiclePanel","selectWallPanel","selectFloorPanel","selectRubblePanel","selectBuildingPanel","selectRaiderPanel","trainRaiderPanel","getToolPanel","selectVehiclePanel","teleportRaider","getMaxRaiders","buildingItem","smallVehicleItem","largeVehicleItem","selectSubPanel","VEHICLE","onSelectedSurfaceChange","childPanel","targetPanel","subPanel","TextInfoMessage","infoMessageEntryConfig","maxWidth","infoImage","imageFilename","MessagePanel","textInfoMessageConfig","imgAir","currentMessage","messageTimeout","crystalFound","textCrystalFound","setMessage","msgSpaceToContinue","textSpaceToContinue","cavernDiscovered","textCavernDiscovered","oreFound","textOreFound","msgAirSupplyLow","textAirSupplyLow","msgAirSupplyRunningOut","textAirSupplyRunningOut","msgGameCompleted","textGameCompleted","msgManTrained","textManTrained","msgUnitUpgraded","textUnitUpgraded","textInfoMessage","timeout","txtX","infoX","TextInfoMessageEntryConfig","sfxName","TextInfoMessageConfig","PriorityButtonsConfig","aiPriorityTrain","aiPriorityGetIn","aiPriorityCrystal","aiPriorityOre","aiPriorityRepair","aiPriorityClearing","aiPriorityDestruction","aiPriorityConstruction","aiPriorityReinforce","aiPriorityRecharge","PriorityIdentifier","PriorityListPanel","cfg","prioPositions","prioByName","buttonCfg","toggle","upOne","setList","updated","prioButton","btnIndex","pushToTop","PriorityPositionsEntry","ToggleButton","cx","cy","isInactive","inRect","isInRect","checkHover","isPressed","checkClick","checkRelease","TopPanel","btnCallToArms","btnOptions","btnPriorities","GuiMainWorker","GuiWorker","worker","panelsCfg","addPanel","rootElement","priorityButtonsConfig","priorityPositionsConfig","values","panelMain","sendResponse","type","WorkerMessageType","messageState","unsetMessage","workerInstance","self","addEventListener","data","resourceByName","processMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","__webpack_exports__","O","chunkIds","fn","notFulfilled","fulfilled","keys","d","definition","o","defineProperty","enumerable","f","chunkId","u","g","globalThis","Function","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","document","currentScript","src","scripts","getElementsByTagName","Error","installedChunks","588","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime"],"mappings":"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","file":"588.index.js","sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tresult = fn();\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(969).then(next);\n};","// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n}\n\nexport enum POINTER_EVENT {\n    MOVE,\n    DOWN,\n    UP,\n}\n\nexport enum KEY_EVENT {\n    DOWN,\n    UP,\n}\n","export const DEV_MODE = process.env.WEBPACK_MODE === 'development'\nexport const WAD_CACHE_DB_NAME = 'RockRaidersWeb'\nexport const JOB_SCHEDULE_INTERVAL = 1000 // milliseconds\nexport const CHECK_CLEARRUBBLE_INTERVAL = 5000 // milliseconds\nexport const JOB_ACTION_RANGE = 5\nexport const CHECK_SPANW_RAIDER_TIMER = 1000 // milliseconds\nexport const MAX_RAIDER_BASE = 12\nexport const MAX_RAIDER_REQUEST = 9\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10\nexport const UPDATE_OXYGEN_TIMER = 5000 // milliseconds\nexport const PANEL_ANIMATION_MULTIPLIER = 3\nexport const HEIGHT_MULTIPLER = 0.1\nexport const SEQUENCE_TEXTURE_FRAMERATE = 5\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640\nexport const SPRITE_RESOLUTION_HEIGHT = 480\nexport const TILESIZE = 40\nexport const NATIVE_FRAMERATE = 30\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class ButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 9) {\n            [this.buttonType, this.normalFile, this.highlightFile, this.pressedFile, this.relX, this.relY, this.width, this.height, this.tooltip] = cfgValue\n        } else {\n            throw 'Invalid number of arguments (' + cfgValue.length + ') given for button configuration expected 9 or 5'\n        }\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class ButtonInfoDockCfg extends BaseConfig {\n\n    panelButtonInfoDockGoto: ButtonCfg = null\n    panelButtonInfoDockClose: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { PanelCfg } from '../../cfg/PanelCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\n\nexport class RadarPanel extends Panel {\n\n    fill: Panel\n    overlay: Panel\n    btnToggle: Button\n    btnMap: Button\n    btnTagged: Button\n\n    constructor(parent: BaseElement, panelCfg: PanelCfg, panelFillCfg: PanelCfg, panelOverlayCfg: PanelCfg, buttonsCfg: ButtonRadarCfg) {\n        super(parent, panelCfg)\n        this.fill = this.addChild(new Panel(this, panelFillCfg))\n        // fill cords given in abs, turn to rel (otherwise animation wont work)\n        this.fill.relX = this.relX - this.fill.relX\n        this.fill.relY = this.relY - this.fill.relY\n        this.overlay = this.addChild(new Panel(this, panelOverlayCfg))\n        // this.overlay.hide();\n        this.btnToggle = this.addChild(new Button(this, buttonsCfg.panelButtonRadarToggle))\n        this.btnToggle.onClick = () => this.toggleState()\n        this.btnMap = this.addChild(new Button(this, buttonsCfg.panelButtonRadarMapView))\n        this.btnMap.onClick = () => {\n            // this.fill.hide();\n            // this.overlay.hide();\n        }\n        this.btnTagged = this.addChild(new Button(this, buttonsCfg.panelButtonRadarTaggedObjectView))\n        this.btnTagged.onClick = () => {\n            // this.fill.show();\n            // this.overlay.show(); // TODO only show overlay, when entity selected\n        }\n    }\n\n}\n\nexport class ButtonRadarCfg extends BaseConfig {\n\n    panelButtonRadarToggle: ButtonCfg = null\n    panelButtonRadarTaggedObjectView: ButtonCfg = null\n    panelButtonRadarZoomIn: ButtonCfg = null\n    panelButtonRadarZoomOut: ButtonCfg = null\n    panelButtonRadarMapView: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { BaseElement } from '../base/BaseElement'\n\nexport class SideBarLabel extends BaseElement {\n\n    tooltip: string\n    label: string\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width\n        this.height = btnCfg.height\n        this.tooltip = btnCfg.tooltip\n        this.label = '0'\n        this.updatePosition()\n    }\n\n    reset() {\n        super.reset()\n        this.label = '0'\n    }\n\n    onRedraw(context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.textAlign = 'center'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.label, this.x + this.width / 2, this.y + this.height - 2)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { PanelCfg } from '../../cfg/PanelCfg'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { SideBarLabel } from './SideBarLabel'\n\nexport class PanelCrystalSideBar extends Panel {\n\n    labelOre: SideBarLabel\n    labelCrystal: SideBarLabel\n    imgNoCrystal: HTMLCanvasElement\n    imgSmallCrystal: HTMLCanvasElement\n    imgUsedCrystal: HTMLCanvasElement\n    imgOre: HTMLCanvasElement\n\n    numCrystal: number = 0\n    usedCrystals: number = 0\n    neededCrystals: number = 0\n    totalOre: number = 0\n\n    constructor(parent: BaseElement, panelCfg: PanelCfg, buttonsCfg: ButtonCrystalSideBarCfg) {\n        super(parent, panelCfg)\n        this.labelOre = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarOre))\n        this.labelCrystal = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarCrystals))\n        this.imgNoCrystal = GuiResourceCache.getImage('Interface/RightPanel/NoSmallCrystal.bmp')\n        this.imgSmallCrystal = GuiResourceCache.getImage('Interface/RightPanel/SmallCrystal.bmp')\n        this.imgUsedCrystal = GuiResourceCache.getImage('Interface/RightPanel/UsedCrystal.bmp')\n        this.imgOre = GuiResourceCache.getImage('Interface/RightPanel/CrystalSideBar_Ore.bmp')\n        this.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, (event: MaterialAmountChanged) => {\n            this.labelOre.label = event.totalOre.toString()\n            this.labelCrystal.label = event.numCrystal.toString()\n            this.numCrystal = event.numCrystal\n            this.usedCrystals = event.usedCrystal\n            this.neededCrystals = event.neededCrystal\n            this.totalOre = event.totalOre\n            this.notifyRedraw()\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.numCrystal = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.totalOre = 0\n    }\n\n    onRedraw(context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) {\n        super.onRedraw(context)\n        // draw crystals\n        let curX = this.x + this.img.width - 8\n        let curY = this.y + this.img.height - 34\n        for (let c = 0; (this.neededCrystals < 1 || c < Math.max(this.neededCrystals, this.numCrystal)) && curY >= Math.max(this.imgNoCrystal.height, this.imgSmallCrystal.height, this.imgUsedCrystal.height); c++) {\n            let imgCrystal = this.imgNoCrystal\n            if (this.usedCrystals > c) {\n                imgCrystal = this.imgUsedCrystal\n            } else if (this.numCrystal > c) {\n                imgCrystal = this.imgSmallCrystal\n            }\n            curY -= imgCrystal.height\n            context.drawImage(imgCrystal, curX - imgCrystal.width / 2, curY)\n        }\n        // draw ores\n        curX = this.x + this.img.width - 21\n        curY = this.y + this.img.height - 42\n        for (let i = 0; i < this.totalOre && curY >= this.imgOre.height; ++i) {\n            curY -= this.imgOre.height\n            context.drawImage(this.imgOre, curX - this.imgOre.width / 2, curY)\n        }\n    }\n\n}\n\nexport class ButtonCrystalSideBarCfg extends BaseConfig {\n\n    panelButtonCrystalSideBarOre: ButtonCfg = null\n    panelButtonCrystalSideBarCrystals: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class ButtonPriorityListCfg extends BaseConfig {\n\n    panelButtonPriorityListDisable: ButtonCfg[] = []\n    panelButtonPriorityListUpOne: ButtonCfg[] = []\n    panelButtonPriorityListClose: ButtonCfg = null // not used in the game\n    panelButtonPriorityListReset: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName.match(/panelButtonPriorityListDisable\\d+/i)) {\n            this.panelButtonPriorityListDisable.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else if (lCfgKeyName.match(/panelButtonPriorityListUpOne\\d+/i)) {\n            this.panelButtonPriorityListUpOne.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else {\n            return super.assignValue(objKey, lCfgKeyName, cfgValue)\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class ButtonTopCfg extends BaseConfig {\n\n    panelButtonTopPanelCallToArms: ButtonCfg = null\n    panelButtonTopPanelOptions: ButtonCfg = null\n    panelButtonTopPanelPriorities: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ButtonCfg } from './ButtonCfg'\n\nexport class ButtonCameraControlCfg extends BaseConfig {\n\n    panelButtonCameraControlZoomIn: ButtonCfg = null\n    panelButtonCameraControlZoomOut: ButtonCfg = null\n    panelButtonCameraControlCycleBuildings: ButtonCfg = null\n    panelButtonCameraControlRotate: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ButtonCfg } from './ButtonCfg'\n\nexport class ButtonInformationCfg extends BaseConfig {\n\n    panelButtonInformationToggle: ButtonCfg = null\n    panelButtonInformationFunction: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { ButtonInfoDockCfg } from '../gui/infodock/ButtonInfoDockCfg'\nimport { ButtonRadarCfg } from '../gui/radar/RadarPanel'\nimport { ButtonCrystalSideBarCfg } from '../gui/sidebar/PanelCrystalSideBar'\nimport { ButtonPriorityListCfg } from '../gui/toppanel/ButtonPriorityListCfg'\nimport { ButtonTopCfg } from '../gui/toppanel/ButtonTopCfg'\nimport { BaseConfig } from './BaseConfig'\nimport { ButtonCameraControlCfg } from './ButtonCameraControlCfg'\nimport { ButtonInformationCfg } from './ButtonInformationCfg'\n\nexport class ButtonsCfg extends BaseConfig {\n\n    panelRadar: ButtonRadarCfg = null\n    panelCrystalSideBar: ButtonCrystalSideBarCfg = null\n    panelTopPanel: ButtonTopCfg = null\n    panelInformation: ButtonInformationCfg = null\n    panelPriorityList: ButtonPriorityListCfg = null\n    panelCameraControl: ButtonCameraControlCfg = null\n    panelInfoDock: ButtonInfoDockCfg = null\n    panelEncyclopedia: any = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        const btnCfgValue = {}\n        cfgValue.forEach(arr => btnCfgValue[arr[0]] = arr)\n        if (lCfgKeyName === 'panelRadar'.toLowerCase()) {\n            return new ButtonRadarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCrystalSideBar'.toLowerCase()) {\n            return new ButtonCrystalSideBarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelTopPanel'.toLowerCase()) {\n            return new ButtonTopCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInformation'.toLowerCase()) {\n            return new ButtonInformationCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelPriorityList'.toLowerCase()) {\n            return new ButtonPriorityListCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCameraControl'.toLowerCase()) {\n            return new ButtonCameraControlCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInfoDock'.toLowerCase()) {\n            return new ButtonInfoDockCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelEncyclopedia'.toLowerCase()) {\n            return null // not used in the game\n        } else {\n            return btnCfgValue\n        }\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { PanelCfg } from './PanelCfg'\n\nexport class PanelsCfg extends BaseConfig {\n\n    panelRadar: PanelCfg = null\n    panelRadarFill: PanelCfg = null\n    panelRadarOverlay: PanelCfg = null\n    panelMessages: PanelCfg = null\n    panelMessagesSide: PanelCfg = null\n    panelCrystalSideBar: PanelCfg = null\n    panelTopPanel: PanelCfg = null\n    panelInformation: PanelCfg = null\n    panelPriorityList: PanelCfg = null\n    panelCameraControl: PanelCfg = null\n    panelInfoDock: PanelCfg = null\n    panelEncyclopedia: PanelCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new PanelCfg(cfgValue)\n    }\n}\n\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class InfoButtonCfg extends BaseButtonCfg {\n\n    constructor(buttonImageFilename: string) {\n        super()\n        this.normalFile = buttonImageFilename\n        this.highlightFile = buttonImageFilename\n        this.pressedFile = buttonImageFilename\n        this.disabledFile = buttonImageFilename\n        this.relX = 0\n        this.relY = 0\n    }\n\n}\n","export enum EntityType {\n\n    // RAIDER\n    PILOT,\n\n    // BUILDING\n    TOOLSTATION,\n    TELEPORT_PAD,\n    DOCKS,\n    POWER_STATION,\n    BARRACKS,\n    UPGRADE,\n    GEODOME,\n    ORE_REFINERY,\n    GUNSTATION,\n    TELEPORT_BIG,\n\n    // MONSTER\n    BAT,\n    SMALL_SPIDER,\n\n    // MATERIAL\n    DYNAMITE,\n    ELECTRIC_FENCE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n\n}\n\nexport enum EntitySuperType {\n\n    RAIDER,\n    BUILDING,\n    MONSTER,\n    MATERIAL,\n\n}\n","import { EntityType } from '../EntityType'\n\nexport enum RaiderTraining {\n    DRIVER,\n    ENGINEER,\n    GEOLOGIST,\n    PILOT,\n    SAILOR,\n    DEMOLITION,\n}\n\nexport const AllRaiderTrainings: RaiderTraining[] = [\n    RaiderTraining.DRIVER,\n    RaiderTraining.ENGINEER,\n    RaiderTraining.GEOLOGIST,\n    RaiderTraining.PILOT,\n    RaiderTraining.SAILOR,\n    RaiderTraining.DEMOLITION,\n]\n\nexport const RaiderTrainingSites: EntityType[] = []\nRaiderTrainingSites[RaiderTraining.DRIVER] = EntityType.BARRACKS\nRaiderTrainingSites[RaiderTraining.DRIVER] = EntityType.BARRACKS\nRaiderTrainingSites[RaiderTraining.ENGINEER] = EntityType.UPGRADE\nRaiderTrainingSites[RaiderTraining.GEOLOGIST] = EntityType.GEODOME\nRaiderTrainingSites[RaiderTraining.PILOT] = EntityType.TELEPORT_PAD\nRaiderTrainingSites[RaiderTraining.SAILOR] = EntityType.DOCKS\nRaiderTrainingSites[RaiderTraining.DEMOLITION] = EntityType.TOOLSTATION\n\nexport const RaiderTrainingStatsProperty: string[] = []\nRaiderTrainingStatsProperty[RaiderTraining.DRIVER] = 'TrainDriver'\nRaiderTrainingStatsProperty[RaiderTraining.ENGINEER] = 'TrainRepair'\nRaiderTrainingStatsProperty[RaiderTraining.GEOLOGIST] = 'TrainScanner'\nRaiderTrainingStatsProperty[RaiderTraining.PILOT] = 'TrainPilot'\nRaiderTrainingStatsProperty[RaiderTraining.SAILOR] = 'TrainSailor'\nRaiderTrainingStatsProperty[RaiderTraining.DEMOLITION] = 'TrainDynamite'\n","import { InfoButtonCfg } from '../../cfg/InfoButtonCfg'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { WorldEvent } from '../../event/WorldEvents'\nimport { WorldLocationEvent } from '../../event/WorldLocationEvent'\nimport { NATIVE_FRAMERATE } from '../../params'\nimport { Button } from '../base/Button'\nimport { InfoDockPanel } from './InfoDockPanel'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\n\nexport class InfoDockButton extends Button {\n\n    messages: WorldEvent[] = [] // newest message first\n    text: string = null\n    animationTimeout = null\n    animationSpeedX = 0.5\n    animationSpeedY = 1\n\n    constructor(parent: InfoDockPanel, infoMessagesEntryConfig: InfoMessagesEntryConfig, eventKey: EventKey) {\n        super(parent, new InfoButtonCfg(infoMessagesEntryConfig.buttonImageFilename))\n        this.text = infoMessagesEntryConfig.message\n        this.hidden = true\n\n        this.onClick = () => {\n            if (this.messages.length < 1) return\n            parent.buttonClicked(this)\n        }\n\n        this.registerEventListener(eventKey, (event: WorldLocationEvent) => {\n            this.hidden = false\n            while (this.messages.length >= 9) this.messages.pop()\n            this.messages.unshift(event)\n            parent.showButton(this)\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.hidden = true\n        this.messages = []\n    }\n\n    slideToTarget(targetX: number, targetY: number): Promise<void> {\n        return new Promise<void>((resolve) => this.updateAnimation(targetX, targetY, resolve))\n    }\n\n    private updateAnimation(targetX: number, targetY: number, onDone: () => any) { // TODO refactor: almost equal with code for Panel\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= this.animationSpeedX && Math.abs(diffY) <= this.animationSpeedY) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * this.animationSpeedX)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * this.animationSpeedY)\n            const that = this\n            this.animationTimeout = setTimeout(() => that.updateAnimation(targetX, targetY, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.hidden) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.messages.length.toString(), this.x + 2, this.y + this.height / 2 + 2)\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { LandslideEvent } from '../../event/WorldLocationEvent'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { ButtonInfoDockCfg } from './ButtonInfoDockCfg'\nimport { InfoDockButton } from './InfoDockButton'\nimport { InfoMessagesConfig } from './InfoMessagesConfig'\nimport { InformationPanel } from './InformationPanel'\n\nexport class InfoDockPanel extends Panel {\n\n    stackButtons: InfoDockButton[] = []\n    informationPanel: InformationPanel = null\n\n    constructor(parent: BaseElement, panelCfg: PanelCfg, buttonsCfg: ButtonInfoDockCfg, infoMessagesConfig: InfoMessagesConfig, informationPanel: InformationPanel) {\n        super(parent, panelCfg)\n        this.informationPanel = informationPanel\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockGoto)).onClick = () => this.gotoLatestMessage()\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockClose)).onClick = () => this.dropLatestMessage()\n\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericDeath, EventKey.LOCATION_DEATH))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericMonster, EventKey.LOCATION_MONSTER))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoCrystalFound, EventKey.LOCATION_CRYSTAL_FOUND))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoUnderAttack, EventKey.LOCATION_UNDER_ATTACK))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoLandslide, EventKey.LOCATION_LANDSLIDE))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoPowerDrain, EventKey.LOCATION_POWER_DRAIN))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoSlugEmerge, EventKey.LOCATION_SLUG_EMERGE))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoFoundMinifigure, EventKey.LOCATION_RAIDER_DISCOVERED))\n    }\n\n    reset() {\n        super.reset()\n        this.stackButtons = []\n    }\n\n    private gotoLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const btn = this.stackButtons[0]\n        if (btn.messages.length < 1) return\n        const msg = btn.messages[0] as LandslideEvent\n        console.log('TODO force move camera to', msg.location) // TODO force move camera\n    }\n\n    private dropLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const button = this.stackButtons[0]\n        if (button.messages.length < 1) return\n        button.messages.shift()\n        if (button.messages.length < 1) {\n            button.hidden = true\n            this.informationPanel.setMovedIn(true)\n            this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n            this.slideStackIntoPosition().then()\n        }\n        button.notifyRedraw()\n    }\n\n    showButton(button: InfoDockButton) {\n        if (this.stackButtons.includes(button)) {\n            button.notifyRedraw()\n        } else {\n            this.slideInButton(button)\n        }\n    }\n\n    private slideInButton(button: InfoDockButton) {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        const targetY = -this.stackButtons.map(b => b.height).reduce((prev, cur) => prev + cur, 0)\n        this.stackButtons.push(button)\n        button.relX = -button.width\n        button.relY = targetY - button.height\n        button.updatePosition()\n        button.slideToTarget(0, targetY).then(() => this.stackButtons.forEach(btn => btn.disabled = false))\n    }\n\n    buttonClicked(button: InfoDockButton) {\n        if (button !== this.stackButtons[0]) {\n            this.pushFirst(button)\n        } else {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.toggleState()\n        }\n    }\n\n    private pushFirst(button: InfoDockButton) {\n        this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n        this.stackButtons.unshift(button)\n        this.slideStackIntoPosition().then(() => {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.setMovedIn(false)\n        })\n    }\n\n    private slideStackIntoPosition() {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        let relY = 0\n        const promises = this.stackButtons.map(btn => {\n            const p = btn.slideToTarget(0, relY)\n            relY -= btn.height\n            return p\n        })\n        return new Promise<void>((resolve) => {\n            Promise.all(promises).then(() => {\n                this.stackButtons.forEach(btn => btn.disabled = false)\n                resolve()\n            })\n        })\n    }\n\n}\n\n","export class InfoMessagesEntryConfig {\n\n    message: string = null\n    buttonImageFilename: string = null\n    sfx: string = null\n    timing: string = null\n    flag: string = null\n\n    constructor(cfgValue: any) {\n        [this.message, this.buttonImageFilename, this.sfx, this.timing, this.flag] = cfgValue\n        this.message = this.message.replace(/_/g, ' ')\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\n\nexport class InfoMessagesConfig extends BaseConfig {\n\n    infoGenericDeath: InfoMessagesEntryConfig = null\n    infoGenericMonster: InfoMessagesEntryConfig = null\n    infoCrystalFound: InfoMessagesEntryConfig = null\n    infoUnderAttack: InfoMessagesEntryConfig = null\n    infoLandslide: InfoMessagesEntryConfig = null\n    infoPowerDrain: InfoMessagesEntryConfig = null\n    infoSlugEmerge: InfoMessagesEntryConfig = null\n    infoFoundMinifigure: InfoMessagesEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new InfoMessagesEntryConfig(cfgValue)\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { BitmapFont } from '../../core/BitmapFont'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { GuiResourceCache } from '../GuiResourceCache'\n\nexport class InformationPanel extends Panel {\n\n    font: BitmapFont = null\n    textImage = null\n\n    constructor(parent: BaseElement, panelCfg: PanelCfg) {\n        super(parent, panelCfg)\n        this.font = GuiResourceCache.getDefaultFont()\n    }\n\n    setText(text?: string) {\n        this.textImage = text ? this.font.createTextImage(text, this.img.width - 80) : null\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.textImage) context.drawImage(this.textImage, this.x + (this.img.width - this.textImage.width) / 2, this.y + 12)\n    }\n\n}\n","import { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class EventBus {\n\n    static eventListener = new Map<EventKey, ((event: GameEvent) => any)[]>()\n    static workerListener: ((event: GameEvent) => any)[] = []\n    static blockedEvents = []\n\n    static publishEvent(event: GameEvent) {\n        if (this.blockedEvents.includes(event.eventKey)) return // event is currently blocked from publishing\n        if (!event.isLocal) console.log('Event published: ' + EventKey[event.eventKey])\n        this.blockedEvents.push(event.eventKey)\n        this.workerListener.forEach((callback) => callback(event))\n        this.getListener(event.eventKey).forEach((callback) => callback(event))\n        this.blockedEvents.remove(event.eventKey)\n    }\n\n    static registerEventListener(eventKey: EventKey, callback: (GameEvent) => any) {\n        this.getListener(eventKey).push(callback)\n    }\n\n    private static getListener(eventKey: EventKey) {\n        return this.eventListener.getOrUpdate(eventKey, () => [])\n    }\n\n    static registerWorkerListener(callback: (GameEvent) => any) {\n        this.workerListener.push(callback)\n    }\n\n    // TODO cleanup/unregister all event listener at level end?!\n\n}\n","import { LevelPrioritiesEntryConfig } from '../../../cfg/LevelsCfg'\nimport { PublicJob } from './Job'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport class PriorityList {\n\n    levelDefault: PriorityEntry[] = []\n    current: PriorityEntry[] = []\n\n    setList(priorities: PriorityEntry[]) {\n        this.levelDefault = priorities\n        this.reset()\n    }\n\n    toggle(index: number) {\n        this.current[index].enabled = !this.current[index].enabled\n    }\n\n    upOne(index: number) {\n        const tmp = this.current[index]\n        this.current[index] = this.current[index + 1]\n        this.current[index + 1] = tmp\n    }\n\n    reset() {\n        this.current = this.levelDefault.map(entry => new PriorityEntry(entry)) // use deep copy to avoid interference\n    }\n\n    pushToTop(index: number) {\n        const element = this.current[index]\n        for (let c = index; c > 0; c--) {\n            this.current[c] = this.current[c - 1]\n        }\n        this.current[0] = element\n    }\n\n    getPriority(job: PublicJob) {\n        let priority = 0\n        this.current.some((j, index) => {\n            if (j.key === job.getPriorityIdentifier()) {\n                priority = index\n                return true\n            }\n        })\n        return priority\n    }\n\n    isEnabled(priorityIdentifier: PriorityIdentifier): boolean {\n        return this.current.find((entry) => entry.key === priorityIdentifier)?.enabled || false\n    }\n}\n\nexport class PriorityEntry {\n\n    key: PriorityIdentifier\n    enabled: boolean\n\n    constructor(levelPriorityEntry: LevelPrioritiesEntryConfig) {\n        this.key = levelPriorityEntry.key\n        this.enabled = levelPriorityEntry.enabled\n    }\n\n}\n","import { Vector3 } from 'three'\n\nexport interface Selectable {\n\n    getSelectionType(): SelectionType\n\n    select(): boolean\n\n    deselect(): any\n\n    getSelectionCenter(): Vector3\n\n}\n\nexport enum SelectionType {\n\n    NOTHING,\n    SURFACE,\n    RAIDER,\n    BUILDING,\n    VEHICLE,\n    GROUP,\n\n}\n","import { Vector3 } from 'three'\nimport { LevelRewardConfig } from '../../cfg/LevelsCfg'\nimport { EventBus } from '../../event/EventBus'\nimport { SelectionChanged } from '../../event/LocalEvents'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../../params'\nimport { BaseEntity } from './BaseEntity'\nimport { BuildingEntity } from './building/BuildingEntity'\nimport { BuildingSite } from './building/BuildingSite'\nimport { MaterialEntity } from './collect/MaterialEntity'\nimport { EntityType } from './EntityType'\nimport { PriorityList } from './job/PriorityList'\nimport { Surface } from './map/Surface'\nimport { Bat } from './monster/Bat'\nimport { SmallSpider } from './monster/SmallSpider'\nimport { Raider } from './raider/Raider'\nimport { RaiderTraining, RaiderTrainingSites, RaiderTrainingStatsProperty } from './raider/RaiderTraining'\nimport { Selectable, SelectionType } from './Selectable'\n\nexport enum GameResultState {\n\n    RUNNING,\n    COMPLETE,\n    FAILED,\n\n}\n\nexport class GameState {\n\n    static resultState: GameResultState = GameResultState.RUNNING\n    static levelFullName: string = ''\n    static numCrystal: number = 0\n    static numOre: number = 0\n    static numBrick: number = 0\n    static usedCrystals: number = 0\n    static neededCrystals: number = 0\n    static airLevel: number = 1 // air level in percent from 0 to 1.0\n    static selectedEntities: Selectable[] = []\n    static selectionType: SelectionType = null\n    static buildings: BuildingEntity[] = []\n    static buildingsUndiscovered: BuildingEntity[] = []\n    static raiders: Raider[] = []\n    static raidersUndiscovered: Raider[] = []\n    static requestedRaiders: number = 0\n    static materials: MaterialEntity[] = []\n    static materialsUndiscovered: MaterialEntity[] = []\n    static buildingSites: BuildingSite[] = []\n    static spiders: SmallSpider[] = []\n    static spidersBySurface: Map<Surface, SmallSpider[]> = new Map()\n    static bats: Bat[] = []\n    static totalCrystals: number = 0\n    static totalOres: number = 0\n    static totalDiggables: number = 0\n    static remainingDiggables: number = 0\n    static totalCaverns: number = 0\n    static discoveredCaverns: number = 0\n    static levelStartTime: number = 0\n    static levelStopTime: number = 0\n    static rewardConfig: LevelRewardConfig = null\n    static priorityList: PriorityList = new PriorityList()\n    static oxygenRate: number = 0\n    static buildModeSelection: BuildingEntity = null\n    static objectiveShown: boolean = false\n    static objectiveSwitch: boolean = false\n\n    static reset() {\n        this.resultState = GameResultState.RUNNING\n        this.levelFullName = ''\n        this.numCrystal = 0\n        this.numOre = 0\n        this.numBrick = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.airLevel = 1\n        this.selectedEntities = []\n        this.selectionType = null\n        this.buildings = []\n        this.buildingsUndiscovered = []\n        this.raiders = []\n        this.raidersUndiscovered = []\n        this.requestedRaiders = 0\n        this.materials = []\n        this.materialsUndiscovered = []\n        this.buildingSites = []\n        this.spiders = []\n        this.spidersBySurface = new Map()\n        this.bats = []\n        this.totalCrystals = 0\n        this.totalOres = 0\n        this.totalDiggables = 0\n        this.remainingDiggables = 0\n        this.totalCaverns = 0\n        this.discoveredCaverns = 0\n        this.levelStartTime = 0\n        this.levelStopTime = 0\n        this.rewardConfig = null\n        this.priorityList = new PriorityList()\n        this.oxygenRate = 0\n        this.buildModeSelection = null\n        this.objectiveShown = false\n        this.objectiveSwitch = false\n    }\n\n    static getBuildingsByType(...buildingTypes: EntityType[]): BuildingEntity[] {\n        return this.buildings.filter(b => b.isUsable() && buildingTypes.some(bt => b.entityType === bt))\n    }\n\n    static getClosestBuildingByType(position: Vector3, ...buildingTypes: EntityType[]): BuildingEntity {\n        const targetBuildings = GameState.getBuildingsByType(...buildingTypes)\n        let closest = null, minDist = null\n        targetBuildings.forEach((b) => {\n            const bPos = b.getDropPosition()\n            const dist = position.distanceToSquared(bPos) // TODO better use pathfinding\n            if (closest === null || dist < minDist) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static getTrainingSites(training: RaiderTraining): BuildingEntity[] {\n        return this.buildings.filter((b) => b.entityType === RaiderTrainingSites[training] && b.isUsable() && b.stats[RaiderTrainingStatsProperty[training]][b.level])\n    }\n\n    static selectEntities(entities: Selectable[]) {\n        this.selectedEntities = this.selectedEntities.filter((previouslySelected) => {\n            const stillSelected = entities.indexOf(previouslySelected) !== -1\n            if (!stillSelected) previouslySelected.deselect()\n            return stillSelected\n        })\n        // add new entities that are selectable\n        entities.forEach((freshlySelected) => {\n            if (freshlySelected.select()) {\n                this.selectedEntities.push(freshlySelected)\n            }\n        })\n        // determine and set next selection type\n        const len = this.selectedEntities.length\n        if (len > 1) {\n            this.selectionType = SelectionType.GROUP\n        } else if (len === 1) {\n            this.selectionType = this.selectedEntities[0].getSelectionType()\n        } else if (this.selectionType !== null) {\n            this.selectionType = SelectionType.NOTHING\n        }\n        // AFTER updating selected entities and selection type, publish all events\n        EventBus.publishEvent(new SelectionChanged(this.selectionType, this.selectedSurface, this.selectedBuilding, this.selectedRaiders))\n    }\n\n    static getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + GameState.buildings.count((b) => b.isUsable() && b.entityType === EntityType.BARRACKS) * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    static discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE\n        this.discoverEntities(this.raidersUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.buildingsUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.materialsUndiscovered, minX, maxX, minZ, maxZ)\n    }\n\n    static discoverEntities(undiscovered: BaseEntity[], minX, maxX, minZ, maxZ) {\n        const discovered = []\n        undiscovered.forEach((e) => {\n            const pos = e.getPosition()\n            if (pos.x >= minX && pos.x < maxX && pos.z >= minZ && pos.z < maxZ) {\n                e.onDiscover()\n                discovered.push(e)\n            }\n        })\n        discovered.forEach((r) => undiscovered.remove(r))\n    }\n\n    static get gameTimeSeconds() {\n        return Math.round((GameState.levelStopTime - GameState.levelStartTime) / 1000)\n    }\n\n    static get score() {\n        if (!GameState.rewardConfig) return 0\n        let quota = GameState.rewardConfig.quota\n        let importance = GameState.rewardConfig.importance\n        const scoreCrystals = GameState.numCrystal >= (quota.crystals || Infinity) ? importance.crystals : 0\n        const scoreTimer = GameState.gameTimeSeconds <= (quota.timer || 0) ? importance.timer : 0\n        const scoreCaverns = quota.caverns ? Math.min(1, GameState.discoveredCaverns / quota.caverns) * importance.caverns : 0\n        const scoreConstructions = quota.constructions ? Math.min(1, GameState.buildings.length / quota.constructions * importance.constructions) : 0\n        const scoreOxygen = GameState.airLevel * importance.oxygen\n        const scoreFigures = GameState.raiders.length >= MAX_RAIDER_BASE ? importance.figures : 0\n        return Math.round(scoreCrystals + scoreTimer + scoreCaverns + scoreConstructions + scoreOxygen + scoreFigures) / 100\n    }\n\n    static get selectedSurface(): Surface {\n        return this.selectionType === SelectionType.SURFACE && this.selectedEntities.length > 0 ? this.selectedEntities[0] as Surface : null\n    }\n\n    static get selectedBuilding(): BuildingEntity {\n        return this.selectionType === SelectionType.BUILDING && this.selectedEntities.length > 0 ? this.selectedEntities[0] as BuildingEntity : null\n    }\n\n    static get selectedRaiders(): Raider[] {\n        return (this.selectionType === SelectionType.RAIDER || this.selectionType === SelectionType.GROUP) && this.selectedEntities.length > 0 ? this.selectedEntities as Raider[] : []\n    }\n\n    static get totalOre(): number {\n        return this.numOre + this.numBrick * 5\n    }\n\n    static getNearbySpiders(entity: BaseEntity): SmallSpider[] {\n        const terrain = entity.sceneMgr.terrain\n        const currentSurface = terrain.getSurfaceFromWorld(entity.getPosition())\n        const nearbySpiders: SmallSpider[] = []\n        for (let x = currentSurface.x; x <= currentSurface.x + 1; x++) {\n            for (let y = currentSurface.y; y <= currentSurface.y + 1; y++) {\n                const surface = terrain.getSurface(x, y)\n                nearbySpiders.push(...(GameState.spidersBySurface.get(surface) || []))\n            }\n        }\n        return nearbySpiders\n    }\n\n}\n","export enum Cursors {\n\n    Pointer_Blank,\n    Pointer_Standard,\n    Pointer_Drill,\n    Pointer_CantDrill,\n    Pointer_Clear,\n    Pointer_Go,\n    Pointer_CantGo,\n    Pointer_Teleport,\n    Pointer_CantTeleport,\n    Pointer_Reinforce,\n    Pointer_CantReinforce,\n    Pointer_Selected,\n    Pointer_RadarPan,\n    Pointer_TrackObject,\n    Pointer_Zoom,\n    Pointer_CantZoom,\n    Pointer_Help,\n    Pointer_CantHelp,\n    Pointer_PutDown,\n    Pointer_GetIn,\n    Pointer_GetOut,\n    Pointer_Okay,\n    Pointer_NotOkay,\n    Pointer_CanBuild,\n    Pointer_CannotBuild,\n    Pointer_Dynamite,\n    Pointer_CantDynamite,\n    Pointer_PickUp,\n    Pointer_CantPickUp,\n    Pointer_PickUpOre,\n    Pointer_LegoManCantDig,\n    Pointer_VehicleCantDig,\n    Pointer_LegoManDig,\n    Pointer_VehicleDig,\n    Pointer_LegoManCantPickUp,\n    Pointer_VehicleCantPickUp,\n    Pointer_LegoManPickUp,\n    Pointer_VehiclePickUp,\n    Pointer_LegoManCantGo,\n    Pointer_VehicleCantGo,\n    Pointer_LegoManGo,\n    Pointer_VehicleGo,\n    Pointer_LegoManClear,\n    Pointer_VehicleClear,\n    Pointer_SurfaceType_Immovable,\n    Pointer_SurfaceType_Hard,\n    Pointer_SurfaceType_Medium,\n    Pointer_SurfaceType_Loose,\n    Pointer_SurfaceType_Soil,\n    Pointer_SurfaceType_OreSeam,\n    Pointer_SurfaceType_CrystalSeam,\n    Pointer_SurfaceType_RechargeSeam,\n\n}\n","export enum RaiderTool {\n\n    DRILL,\n    HAMMER,\n    SHOVEL,\n    SPANNER,\n    FREEZERGUN,\n    LASER,\n    PUSHERGUN,\n    BIRDSCARER,\n\n}\n\nexport const AllRaiderTools: RaiderTool[] = [\n    RaiderTool.DRILL,\n    RaiderTool.HAMMER,\n    RaiderTool.SHOVEL,\n    RaiderTool.SPANNER,\n    RaiderTool.FREEZERGUN,\n    RaiderTool.LASER,\n    RaiderTool.PUSHERGUN,\n    RaiderTool.BIRDSCARER,\n]\n","import { Cursors } from '../../../screen/Cursors'\n\nexport class SurfaceType {\n\n    name: string // human readable, maybe used as label later on\n    shaping: boolean = false\n    matIndex: string = '00'\n    floor: boolean = false\n    selectable: boolean = false\n    drillable: boolean = false\n    drillableHard: boolean = false\n    explodable: boolean = false\n    reinforcable: boolean = false\n    cursor: Cursors = Cursors.Pointer_Standard\n    statsDrillName: string = null\n    canCarryFence: boolean = false\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options)\n    }\n\n    static readonly GROUND = new SurfaceType({\n        name: 'ground',\n        floor: true,\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly SOLID_ROCK = new SurfaceType({\n        name: 'solid rock',\n        shaping: true,\n        matIndex: '5',\n        cursor: Cursors.Pointer_SurfaceType_Immovable,\n    })\n    static readonly HARD_ROCK = new SurfaceType({\n        name: 'hard rock',\n        shaping: true,\n        matIndex: '4',\n        selectable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_Hard,\n        statsDrillName: 'HardDrillTime',\n    })\n    static readonly LOOSE_ROCK = new SurfaceType({\n        name: 'loose rock',\n        shaping: true,\n        matIndex: '3',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_Medium,\n        statsDrillName: 'LooseDrillTime',\n    })\n    static readonly DIRT = new SurfaceType({\n        name: 'dirt',\n        shaping: true,\n        matIndex: '2',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_Loose,\n        statsDrillName: 'SoilDrillTime',\n    })\n    static readonly SLUG_HOLE = new SurfaceType({name: 'slug hole', floor: true, matIndex: '30'})\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'})\n    static readonly ORE_SEAM = new SurfaceType({\n        name: 'ore seam',\n        matIndex: '40',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_OreSeam,\n        statsDrillName: 'SeamDrillTime',\n    })\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45'})\n    static readonly CRYSTAL_SEAM = new SurfaceType({\n        name: 'energy crystal seam',\n        matIndex: '20',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_CrystalSeam,\n        statsDrillName: 'SeamDrillTime',\n    })\n    static readonly RECHARGE_SEAM = new SurfaceType({\n        name: 'recharge seam',\n        matIndex: '67',\n        cursor: Cursors.Pointer_SurfaceType_RechargeSeam,\n    })\n    static readonly POWER_PATH = new SurfaceType({\n        name: 'power path all',\n        floor: true,\n        matIndex: '60',\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly POWER_PATH_SITE = new SurfaceType({\n        name: 'power path site',\n        floor: true,\n        matIndex: '61',\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly POWER_PATH_BUILDING = new SurfaceType({\n        name: 'power path building',\n        floor: true,\n        matIndex: '76',\n    })\n    static readonly RUBBLE1 = new SurfaceType({\n        name: 'rubble 1',\n        floor: true,\n        matIndex: '13',\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly RUBBLE2 = new SurfaceType({\n        name: 'rubble 2',\n        floor: true,\n        matIndex: '12',\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly RUBBLE3 = new SurfaceType({\n        name: 'rubble 3',\n        floor: true,\n        matIndex: '11',\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly RUBBLE4 = new SurfaceType({\n        name: 'rubble 4',\n        floor: true,\n        matIndex: '10',\n        selectable: true,\n        canCarryFence: true,\n    })\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING\n            case 1:\n                return SurfaceType.SOLID_ROCK\n            case 2:\n                return SurfaceType.HARD_ROCK\n            case 3:\n                return SurfaceType.LOOSE_ROCK\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT\n            case 6:\n                return SurfaceType.LAVA\n            case 8:\n                return SurfaceType.ORE_SEAM\n            case 9:\n                return SurfaceType.WATER\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM\n            case 11:\n                return SurfaceType.RECHARGE_SEAM\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE\n            case 100:\n                return SurfaceType.RUBBLE4\n            case 101:\n                return SurfaceType.RUBBLE3\n            case 102:\n                return SurfaceType.RUBBLE2\n            case 103:\n                return SurfaceType.RUBBLE1\n            default:\n                console.error('Unexpected surface type num: ' + typeNum)\n                return SurfaceType.SOLID_ROCK\n        }\n    }\n}\n","import { BuildingEntity } from '../game/model/building/BuildingEntity'\nimport { EntityType } from '../game/model/EntityType'\nimport { GameState } from '../game/model/GameState'\nimport { PriorityEntry } from '../game/model/job/PriorityList'\nimport { Surface } from '../game/model/map/Surface'\nimport { SurfaceType } from '../game/model/map/SurfaceType'\nimport { Raider } from '../game/model/raider/Raider'\nimport { AllRaiderTools, RaiderTool } from '../game/model/raider/RaiderTool'\nimport { AllRaiderTrainings, RaiderTraining } from '../game/model/raider/RaiderTraining'\nimport { SelectionType } from '../game/model/Selectable'\nimport { Cursors } from '../screen/Cursors'\nimport { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n        this.isLocal = true\n    }\n\n}\n\nexport class SelectionChanged extends LocalEvent {\n\n    selectionType: SelectionType\n    isGround: boolean\n    isPowerPath: boolean\n    canPlaceFence: boolean\n    isFloor: boolean\n    hasRubble: boolean\n    isDrillable: boolean\n    isDrillableHard: boolean\n    isReinforcable: boolean\n    someCarries: boolean\n    everyHasMaxLevel: boolean\n    canDoTraining: Map<RaiderTraining, boolean> = new Map()\n    everyHasTool: Map<RaiderTool, boolean> = new Map()\n    buildingCanUpgrade: boolean\n    buildingCanSwitchPower: boolean\n\n    constructor(selectionType: SelectionType = SelectionType.NOTHING, selectedSurface: Surface = null, selectedBuilding: BuildingEntity = null, selectedRaiders: Raider[] = null) {\n        super(EventKey.SELECTION_CHANGED)\n        this.selectionType = selectionType\n        this.isGround = selectedSurface?.surfaceType === SurfaceType.GROUND\n        this.isPowerPath = selectedSurface?.surfaceType === SurfaceType.POWER_PATH\n        this.isFloor = selectedSurface?.surfaceType.floor\n        this.hasRubble = selectedSurface?.hasRubble()\n        this.isDrillable = selectedSurface?.isDrillable()\n        this.isDrillableHard = selectedSurface?.isDrillableHard()\n        this.isReinforcable = selectedSurface?.isReinforcable()\n        this.canPlaceFence = selectedSurface?.canPlaceFence() && GameState.buildings.some((b) => b.entityType === EntityType.POWER_STATION && b.isUsable())\n        this.someCarries = !!selectedRaiders?.some((r) => !!r.carries)\n        this.everyHasMaxLevel = !!selectedRaiders?.every((r) => r.level >= r.stats.Levels)\n        AllRaiderTrainings.forEach((training) => this.canDoTraining.set(training, GameState.getTrainingSites(training).length > 0 && selectedRaiders?.some((r) => !r.hasTraining(training))))\n        AllRaiderTools.forEach((tool) => this.everyHasTool.set(tool, !!selectedRaiders?.every((r) => r.hasTool(tool))))\n        this.buildingCanUpgrade = selectedBuilding?.canUpgrade()\n        this.buildingCanSwitchPower = selectedBuilding?.stats.SelfPowered || selectedBuilding?.stats.PowerBuilding\n    }\n\n}\n\nexport class AirLevelChanged extends LocalEvent {\n\n    airLevel: number\n\n    constructor(airLevel: number) {\n        super(EventKey.AIR_LEVEL_CHANGED)\n        this.airLevel = airLevel\n    }\n\n}\n\nexport class ChangeCursor extends LocalEvent {\n\n    cursor: Cursors\n\n    constructor(cursor: Cursors) {\n        super(EventKey.CHANGE_CURSOR)\n        this.cursor = cursor\n    }\n\n}\n\nexport class SetupPriorityList extends LocalEvent {\n\n    priorityList: PriorityEntry[]\n\n    constructor(priorityList: PriorityEntry[]) {\n        super(EventKey.SETUP_PRIORITY_LIST)\n        this.priorityList = priorityList\n    }\n\n}\n\nexport class BuildingsChangedEvent extends LocalEvent {\n\n    usableBuildingsByTypeAndLevel: Map<EntityType, Map<number, number>> = new Map()\n\n    constructor() {\n        super(EventKey.BUILDINGS_CHANGED)\n        GameState.buildings.forEach((b) => {\n            if (b.isUsable()) {\n                const perLevel = this.usableBuildingsByTypeAndLevel.getOrUpdate(b.entityType, () => new Map())\n                perLevel.set(b.level, perLevel.getOrUpdate(b.level, () => 0) + 1)\n            }\n        })\n    }\n\n    static countUsable(event: BuildingsChangedEvent, building: EntityType, minLevel: number = 0) {\n        let result = 0\n        event.usableBuildingsByTypeAndLevel.getOrUpdate(building, () => new Map()).forEach((count, level) => {\n            if (level >= minLevel) result += count\n        })\n        return result\n    }\n\n}\n\nexport class RaidersChangedEvent extends LocalEvent {\n\n    numRaiders: number\n    training: RaiderTraining\n\n    constructor(training: RaiderTraining = null) {\n        super(EventKey.RAIDERS_CHANGED)\n        this.numRaiders = GameState.raiders.length\n        this.training = training\n    }\n\n}\n","import { EventKey } from './EventKeyEnum'\n\nexport class GameEvent {\n\n    eventKey: EventKey\n    isLocal: boolean\n    guiForward: boolean\n\n    constructor(eventKey: EventKey) {\n        this.eventKey = eventKey\n        this.guiForward = true\n    }\n\n}\n","import { EntityType } from '../game/model/EntityType'\nimport { PriorityEntry } from '../game/model/job/PriorityList'\nimport { RaiderTool } from '../game/model/raider/RaiderTool'\nimport { RaiderTraining } from '../game/model/raider/RaiderTraining'\nimport { EventKey } from './EventKeyEnum'\nimport { LocalEvent } from './LocalEvents'\n\nexport class GuiCommand extends LocalEvent {\n}\n\nexport class CancelBuildMode extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CANCEL_BUILD_MODE)\n    }\n\n}\n\nexport class SelectBuildMode extends GuiCommand {\n\n    entityType: EntityType\n\n    constructor(entityType: EntityType) {\n        super(EventKey.COMMAND_SELECT_BUILD_MODE)\n        this.entityType = entityType\n    }\n\n}\n\nexport class SelectedRaiderPickTool extends GuiCommand {\n\n    tool: RaiderTool\n\n    constructor(tool: RaiderTool) {\n        super(EventKey.COMMAND_PICK_TOOL)\n        this.tool = tool\n    }\n\n}\n\nexport class CreatePowerPath extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_POWER_PATH)\n    }\n\n}\n\nexport class PlaceFence extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_PLACE_FENCE)\n    }\n\n}\n\nexport class MakeRubble extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_MAKE_RUBBLE)\n    }\n\n}\n\nexport class ChangeRaiderSpawnRequest extends GuiCommand {\n\n    increase: boolean\n\n    constructor(increase: boolean) {\n        super(EventKey.COMMAND_CHANGE_RAIDER_SPAWN_REQUEST)\n        this.increase = increase\n    }\n\n}\n\nexport class CreateClearRubbleJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_CLEAR_RUBBLE_JOB)\n    }\n\n}\n\nexport class UpgradeBuilding extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_UPGRADE_BUILDING)\n    }\n\n}\n\nexport class BeamUpBuilding extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_BUILDING_BEAMUP)\n    }\n\n}\n\nexport class ChangePriorityList extends GuiCommand {\n\n    priorityList: PriorityEntry[]\n\n    constructor(priorityList: PriorityEntry[]) {\n        super(EventKey.CHANGE_PRIORITY_LIST)\n        this.priorityList = priorityList\n    }\n\n}\n\nexport class ChangeBuildingPowerState extends GuiCommand {\n\n    state: boolean\n\n    constructor(state: boolean) {\n        super(EventKey.COMMAND_CHANGE_BUILDING_POWER_STATE)\n        this.state = state\n    }\n\n}\n\nexport class CreateDrillJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_DRILL_JOB)\n    }\n\n}\n\nexport class CreateReinforceJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_REINFORCE_JOB)\n    }\n\n}\n\nexport class CreateDynamiteJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_DYNAMITE_JOB)\n    }\n\n}\n\nexport class CancelSurfaceJobs extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CANCEL_SURFACE_JOBS)\n    }\n\n}\n\nexport class RaiderEat extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_EAT)\n    }\n\n}\n\nexport class RaiderDrop extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_DROP)\n    }\n\n}\n\nexport class RaiderUpgrade extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_UPGRADE)\n    }\n\n}\n\nexport class RaiderBeamUp extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_BEAMUP)\n    }\n\n}\n\nexport class TrainRaider extends GuiCommand {\n\n    training: RaiderTraining\n\n    constructor(training: RaiderTraining) {\n        super(EventKey.COMMAND_TRAIN_RAIDER)\n        this.training = training\n    }\n\n}\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class IconPanelBackButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super();\n        [this.width, this.height, this.highlightFile, this.pressedFile, this.tooltip] = cfgValue // Interface back button\n        this.relX = 4\n        this.relY = 14\n    }\n\n}\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class MenuItemCfg extends BaseButtonCfg {\n\n    tooltipSfx: string = null\n    tooltipDisabled: string = null\n    tooltipDisabledSfx: string = null\n    hotkey: string = null\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 4) {\n            [this.normalFile, this.disabledFile, this.pressedFile, this.hotkey] = cfgValue\n        } else if (cfgValue.length === 6 || cfgValue.length === 7) { // XXX 7th element is boolean, but usage unknown\n            let tooltip, tooltipDisabled\n            [this.normalFile, this.disabledFile, this.pressedFile, tooltip, tooltipDisabled, this.hotkey] = cfgValue\n            if (tooltip) {\n                if (Array.isArray(tooltip)) {\n                    [this.tooltip, this.tooltipSfx] = tooltip\n                } else {\n                    this.tooltip = tooltip\n                }\n            }\n            if (tooltipDisabled) {\n                if (Array.isArray(tooltipDisabled)) {\n                    [this.tooltipDisabled, this.tooltipDisabledSfx] = tooltipDisabled\n                } else {\n                    this.tooltipDisabled = tooltipDisabled\n                }\n            }\n        } else {\n            console.error('Unexpected menu item cfg value length: ' + cfgValue.length)\n        }\n        this.tooltip?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.tooltipDisabled?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.width = 40\n        this.height = 40\n    }\n\n}\n","import { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\n\nexport class IconPanelButton extends Button {\n\n    tooltipSfx: string = null\n    tooltipDisabled: string = null\n    tooltipDisabledSfx: string = null\n    hotkey: string = null\n    isDisabled: () => boolean = () => this.disabled\n\n    constructor(parent: BaseElement, menuItemCfg: MenuItemCfg, itemKey: string, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemCfg)\n        this.buttonType = itemKey\n        this.relX = parentWidth - 59\n        this.relY = 9 + this.height * menuIndex\n        this.tooltipSfx = menuItemCfg.tooltipSfx\n        this.tooltipDisabled = menuItemCfg.tooltipDisabled\n        this.tooltipDisabledSfx = menuItemCfg.tooltipDisabledSfx\n        this.hotkey = menuItemCfg.hotkey\n        this.disabled = true\n    }\n\n    reset() {\n        super.reset()\n        this.disabled = true\n        this.updateState(false)\n    }\n\n    onClick() {\n        console.log('menu item pressed: ' + this.buttonType)\n    }\n\n    updateState(autoRedraw: boolean = true) {\n        const targetState = !!this.isDisabled()\n        const stateChanged = this.disabled !== targetState\n        this.disabled = targetState\n        if (stateChanged && autoRedraw) this.notifyRedraw()\n        return stateChanged\n    }\n\n    drawHover(context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) {\n        super.drawHover(context)\n        if (!this.disabled && this.hover) {\n            context.strokeStyle = '#0f0'\n            context.lineWidth = 2\n            context.strokeRect(this.x - context.lineWidth / 2, this.y - context.lineWidth / 2, this.width + context.lineWidth - 1, this.height + context.lineWidth - 1)\n        }\n    }\n\n}\n","import { IconPanelBackButtonCfg } from '../../cfg/IconPanelBackButtonCfg'\nimport { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class IconSubPanel extends Panel {\n\n    backBtn: Button = null\n    iconPanelButtons: IconPanelButton[] = []\n\n    constructor(parent: BaseElement, numOfItems, onBackPanel: Panel = null) {\n        super(parent)\n        if (onBackPanel) {\n            const backBtnCfg = new IconPanelBackButtonCfg(GuiResourceCache.cfg('InterfaceBackButton'))\n            this.backBtn = this.addChild(new Button(this, backBtnCfg))\n            this.backBtn.onClick = () => this.toggleState(() => onBackPanel.toggleState())\n        }\n        const frameImgCfg = GuiResourceCache.cfg('InterfaceSurroundImages', numOfItems.toString())\n        // noinspection JSUnusedLocalSymbols\n        const [imgName, val1, val2, val3, val4, imgNameWoBackName, woBack1, woBack2] = frameImgCfg\n        this.img = onBackPanel ? GuiResourceCache.getImage(imgName) : GuiResourceCache.getImage(imgNameWoBackName)\n        this.xOut = -this.img.width\n    }\n\n    addMenuItem(menuItemGroup: string, itemKey: string) {\n        const menuItemCfg = new MenuItemCfg(GuiResourceCache.cfg(menuItemGroup, itemKey))\n        const menuItem = this.addChild(new IconPanelButton(this, menuItemCfg, itemKey, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(menuItem)\n        return menuItem\n    }\n\n    toggleState(onDone: () => any = null) {\n        super.toggleState(onDone)\n        if (!this.movedIn) this.updateAllButtonStates()\n    }\n\n    updateAllButtonStates() {\n        this.iconPanelButtons.forEach((button) => button.updateState(false))\n        this.notifyRedraw()\n    }\n\n}\n","import { CancelBuildMode, SelectBuildMode } from '../../event/GuiCommand'\nimport { EntityType } from '../../game/model/EntityType'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class BuildingPanel extends IconSubPanel {\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 10, onBackPanel)\n        this.backBtn.onClick = () => {\n            this.publishEvent(new CancelBuildMode())\n            this.toggleState(() => onBackPanel.toggleState())\n        }\n        this.addBuildMenuItem('InterfaceBuildImages', 'Toolstation', EntityType.TOOLSTATION)\n        this.addBuildMenuItem('InterfaceBuildImages', 'TeleportPad', EntityType.TELEPORT_PAD)\n        this.addBuildMenuItem('InterfaceBuildImages', 'Docks', EntityType.DOCKS)\n        this.addBuildMenuItem('InterfaceBuildImages', 'Powerstation', EntityType.POWER_STATION)\n        this.addBuildMenuItem('InterfaceBuildImages', 'Barracks', EntityType.BARRACKS)\n        this.addBuildMenuItem('InterfaceBuildImages', 'Upgrade', EntityType.UPGRADE)\n        this.addBuildMenuItem('InterfaceBuildImages', 'Geo-dome', EntityType.GEODOME)\n        this.addBuildMenuItem('InterfaceBuildImages', 'OreRefinery', EntityType.ORE_REFINERY)\n        this.addBuildMenuItem('InterfaceBuildImages', 'Gunstation', EntityType.GUNSTATION)\n        this.addBuildMenuItem('InterfaceBuildImages', 'TeleportBIG', EntityType.TELEPORT_BIG)\n    }\n\n    addBuildMenuItem(menuItemGroup: string, itemKey: string, entityType: EntityType) {\n        const item = this.addMenuItem(menuItemGroup, itemKey)\n        item.isDisabled = () => false // TODO check Dependencies from config\n        item.onClick = () => this.publishEvent(new SelectBuildMode(entityType))\n        return item\n    }\n\n}\n","import { EventKey } from '../../event/EventKeyEnum'\nimport { SelectedRaiderPickTool } from '../../event/GuiCommand'\nimport { BuildingsChangedEvent, SelectionChanged } from '../../event/LocalEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { RaiderTool } from '../../game/model/raider/RaiderTool'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class GetToolPanel extends IconSubPanel {\n\n    numUsableToolstations: number = 0\n    everyHasTool: Map<RaiderTool, boolean> = new Map()\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 8, onBackPanel)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetDrill', RaiderTool.DRILL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpade', RaiderTool.SHOVEL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetHammer', RaiderTool.HAMMER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpanner', RaiderTool.SPANNER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetFreezerGun', RaiderTool.FREEZERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetLaser', RaiderTool.LASER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetPusherGun', RaiderTool.PUSHERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetBirdScarer', RaiderTool.BIRDSCARER)\n        this.registerEventListener(EventKey.BUILDINGS_CHANGED, (event: BuildingsChangedEvent) => {\n            this.numUsableToolstations = BuildingsChangedEvent.countUsable(event, EntityType.TOOLSTATION)\n            this.updateAllButtonStates()\n        })\n        this.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            this.everyHasTool = event.everyHasTool\n            this.updateAllButtonStates()\n        })\n    }\n\n    addGetToolItem(menuItemGroup: string, itemKey: string, tool: RaiderTool): IconPanelButton {\n        const menuItem = super.addMenuItem(menuItemGroup, itemKey)\n        menuItem.isDisabled = () => this.numUsableToolstations < 1 || !!this.everyHasTool.get(tool)\n        menuItem.onClick = () => this.publishEvent(new SelectedRaiderPickTool(tool))\n        return menuItem\n    }\n\n    reset() {\n        super.reset()\n        this.numUsableToolstations = 0\n        this.everyHasTool = new Map()\n    }\n\n}\n","import { EventKey } from '../../event/EventKeyEnum'\nimport { RequestedRaidersChanged } from '../../event/WorldEvents'\nimport { BaseElement } from '../base/BaseElement'\n\nexport class IconPanelButtonLabel extends BaseElement {\n\n    numRequestedRaiders: string = ''\n\n    constructor(parent: BaseElement) {\n        super(parent)\n        this.relX = 4\n        this.relY = 11\n        this.registerEventListener(EventKey.REQUESTED_RAIDERS_CHANGED, (event: RequestedRaidersChanged) => {\n            this.numRequestedRaiders = (event.numRequestedRaiders || '').toString()\n            this.notifyRedraw()\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.numRequestedRaiders = ''\n    }\n\n    onRedraw(context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = this.disabled || (this.parent && this.parent.disabled) ? '#444' : '#fff'\n        context.fillText(this.numRequestedRaiders, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class LargeVehiclePanel extends IconSubPanel {\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 5, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'BullDozer')\n        this.addMenuItem('InterfaceBuildImages', 'WalkerDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeMLP')\n        this.addMenuItem('InterfaceBuildImages', 'LargeDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeCat')\n    }\n\n}\n","import { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class IconPanelToggleButton extends IconPanelButton {\n\n    toggleState: boolean = false\n    imgOnNormal: HTMLCanvasElement\n    imgOnHover: HTMLCanvasElement\n    imgOnPressed: HTMLCanvasElement\n    imgOnDisabled: HTMLCanvasElement\n\n    constructor(parent: BaseElement, menuItemOffCfg: MenuItemCfg, menuItemOnCfg: MenuItemCfg, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemOffCfg, null, parentWidth, menuIndex)\n        this.imgOnNormal = GuiResourceCache.getImageOrNull(menuItemOnCfg.normalFile)\n        this.imgOnHover = GuiResourceCache.getImageOrNull(menuItemOnCfg.highlightFile)\n        this.imgOnPressed = GuiResourceCache.getImageOrNull(menuItemOnCfg.pressedFile)\n        this.imgOnDisabled = GuiResourceCache.getImageOrNull(menuItemOnCfg.disabledFile)\n    }\n\n    onClick() {\n        this.toggleState = !this.toggleState\n        this.onToggleStateChange()\n    }\n\n    onToggleStateChange() {\n    }\n\n    onRedraw(context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.toggleState ? this.imgOnNormal : this.imgNormal\n        if (this.disabled) {\n            if (this.toggleState) {\n                img = this.imgOnDisabled || this.imgOnPressed || this.imgOnNormal\n            } else {\n                img = this.imgDisabled || this.imgPressed || this.imgNormal\n            }\n        } else if (this.pressed) {\n            if (this.toggleState) {\n                img = this.imgOnPressed || this.imgOnNormal\n            } else {\n                img = this.imgPressed || this.imgNormal\n            }\n        } else if (this.hover) {\n            if (this.toggleState) {\n                img = this.imgOnHover || this.imgOnNormal\n            } else {\n                img = this.imgHover || this.imgNormal\n            }\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n}\n","import { SelectionChanged } from '../../event/LocalEvents'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class SelectBasePanel extends IconSubPanel {\n\n    constructor(parent: BaseElement, numOfItems, onBackPanel: Panel) {\n        super(parent, numOfItems, onBackPanel)\n        this.backBtn.onClick = () => this.publishEvent(new SelectionChanged())\n    }\n\n}\n","import { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { BeamUpBuilding, ChangeBuildingPowerState, UpgradeBuilding } from '../../event/GuiCommand'\nimport { SelectionChanged } from '../../event/LocalEvents'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { IconPanelToggleButton } from './IconPanelToggleButton'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectBuildingPanel extends SelectBasePanel {\n\n    usedCrystal = 0\n    numCrystal = 0\n    buildingCanUpgrade: boolean = false\n    buildingCanSwitchPower: boolean = false\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 4, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Repair') // TODO implement repair buildings\n        const menuItemOffCfg = new MenuItemCfg(GuiResourceCache.cfg('InterfaceImages', 'Interface_MenuItem_PowerOff'))\n        const menuItemOnCfg = new MenuItemCfg(GuiResourceCache.cfg('InterfaceImages', 'Interface_MenuItem_PowerOn'))\n        const powerSwitchItem = this.addChild(new IconPanelToggleButton(this, menuItemOffCfg, menuItemOnCfg, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(powerSwitchItem)\n        powerSwitchItem.isDisabled = () => this.usedCrystal >= this.numCrystal || !this.buildingCanSwitchPower\n        powerSwitchItem.onToggleStateChange = () => this.publishEvent(new ChangeBuildingPowerState(!powerSwitchItem.toggleState))\n        const upgradeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeBuilding')\n        upgradeItem.isDisabled = () => !this.buildingCanUpgrade\n        upgradeItem.onClick = () => this.publishEvent(new UpgradeBuilding())\n        const deleteBuildingItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteBuilding')\n        deleteBuildingItem.isDisabled = () => false\n        deleteBuildingItem.onClick = () => this.publishEvent(new BeamUpBuilding())\n        this.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            this.buildingCanUpgrade = event.buildingCanUpgrade\n            this.buildingCanSwitchPower = event.buildingCanSwitchPower\n            this.updateAllButtonStates()\n        })\n        this.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, (event: MaterialAmountChanged) => {\n            this.numCrystal = event.numCrystal\n            this.usedCrystal = event.usedCrystal\n            this.updateAllButtonStates()\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.usedCrystal = 0\n        this.numCrystal = 0\n        this.buildingCanUpgrade = false\n        this.buildingCanSwitchPower = false\n    }\n\n}\n","import { EventKey } from '../../event/EventKeyEnum'\nimport { CreatePowerPath, MakeRubble, PlaceFence } from '../../event/GuiCommand'\nimport { SelectionChanged } from '../../event/LocalEvents'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectFloorPanel extends SelectBasePanel {\n\n    isGround: boolean = false\n    isPowerPath: boolean = false\n    canPlaceFence: boolean = false\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 3, onBackPanel)\n        const pathItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_LayPath')\n        pathItem.onClick = () => this.publishEvent(new CreatePowerPath())\n        pathItem.isDisabled = () => !this.isGround\n        const removeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_RemovePath')\n        removeItem.onClick = () => this.publishEvent(new MakeRubble())\n        removeItem.isDisabled = () => !this.isPowerPath\n        const placeFenceItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        placeFenceItem.isDisabled = () => !this.canPlaceFence\n        placeFenceItem.onClick = () => this.publishEvent(new PlaceFence())\n        this.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            this.isGround = event.isGround\n            this.isPowerPath = event.isPowerPath\n            this.canPlaceFence = event.canPlaceFence\n            this.updateAllButtonStates()\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.isGround = false\n        this.isPowerPath = false\n        this.canPlaceFence = false\n    }\n\n}\n","import { EventKey } from '../../event/EventKeyEnum'\nimport { RaiderBeamUp, RaiderDrop, RaiderEat, RaiderUpgrade } from '../../event/GuiCommand'\nimport { BuildingsChangedEvent, SelectionChanged } from '../../event/LocalEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectRaiderPanel extends SelectBasePanel {\n\n    getToolItem: IconPanelButton\n    trainItem: IconPanelButton\n\n    someCarries: boolean = false\n    everyHasMaxLevel: boolean = false\n    numToolstations: number = 0\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 10, onBackPanel)\n        const feedItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GoFeed')\n        feedItem.isDisabled = () => false\n        feedItem.onClick = () => this.publishEvent(new RaiderEat())\n        const unloadItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UnLoadMinifigure')\n        unloadItem.isDisabled = () => !this.someCarries\n        unloadItem.onClick = () => this.publishEvent(new RaiderDrop())\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_MinifigurePickUp')\n        this.getToolItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GetTool')\n        this.getToolItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DropBirdScarer')\n        const upgradeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeMan')\n        upgradeItem.isDisabled = () => this.everyHasMaxLevel || this.numToolstations < 1\n        upgradeItem.onClick = () => this.publishEvent(new RaiderUpgrade())\n        this.trainItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSkill')\n        this.trainItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoFirstPerson')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoSecondPerson')\n        const deleteRaiderItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteMan')\n        deleteRaiderItem.isDisabled = () => false\n        deleteRaiderItem.onClick = () => this.publishEvent(new RaiderBeamUp())\n        this.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            this.someCarries = event.someCarries\n            this.everyHasMaxLevel = event.everyHasMaxLevel\n            this.updateAllButtonStates()\n        })\n        this.registerEventListener(EventKey.BUILDINGS_CHANGED, (event: BuildingsChangedEvent) => {\n            this.numToolstations = BuildingsChangedEvent.countUsable(event, EntityType.TOOLSTATION)\n            this.updateAllButtonStates()\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.someCarries = false\n        this.everyHasMaxLevel = false\n        this.numToolstations = 0\n    }\n\n}\n","import { EventKey } from '../../event/EventKeyEnum'\nimport { CreateClearRubbleJob } from '../../event/GuiCommand'\nimport { SelectionChanged } from '../../event/LocalEvents'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectRubblePanel extends SelectBasePanel {\n\n    hasRubble: boolean = false\n    canPlaceFence: boolean = false\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 2, onBackPanel)\n        const clearRubbleItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_ClearRubble')\n        clearRubbleItem.isDisabled = () => !this.hasRubble\n        clearRubbleItem.onClick = () => this.publishEvent(new CreateClearRubbleJob())\n        const placeFenceItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        placeFenceItem.isDisabled = () => !this.canPlaceFence\n        this.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            this.hasRubble = event.hasRubble\n            this.canPlaceFence = event.canPlaceFence\n            this.updateAllButtonStates()\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.hasRubble = false\n        this.canPlaceFence = false\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectVehiclePanel extends SelectBasePanel {\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 7, onBackPanel)\n    }\n\n}\n","import { EventKey } from '../../event/EventKeyEnum'\nimport { CancelSurfaceJobs, CreateDrillJob, CreateDynamiteJob, CreateReinforceJob } from '../../event/GuiCommand'\nimport { BuildingsChangedEvent, SelectionChanged } from '../../event/LocalEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectWallPanel extends SelectBasePanel {\n\n    isDrillable: boolean = false\n    isHardDrillable: boolean = false\n    isReinforcable: boolean = false\n    numToolstationsLevel2: number = 0\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 4, onBackPanel)\n        const itemDrill = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Dig')\n        itemDrill.isDisabled = () => !this.isDrillable && !this.isHardDrillable // TODO implement vehicle check for drill hard skill\n        itemDrill.onClick = () => this.publishEvent(new CreateDrillJob())\n        const itemReinforce = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Reinforce')\n        itemReinforce.isDisabled = () => !this.isReinforcable\n        itemReinforce.onClick = () => this.publishEvent(new CreateReinforceJob())\n        const itemDynamite = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Dynamite')\n        itemDynamite.isDisabled = () => this.numToolstationsLevel2 < 1\n        itemDynamite.onClick = () => this.publishEvent(new CreateDynamiteJob())\n        const itemDeselect = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeselectDig')\n        itemDeselect.isDisabled = () => false\n        itemDeselect.onClick = () => this.publishEvent(new CancelSurfaceJobs())\n        this.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            this.isDrillable = event.isDrillable\n            this.isHardDrillable = event.isDrillableHard\n            this.isReinforcable = event.isReinforcable\n            this.updateAllButtonStates()\n        })\n        this.registerEventListener(EventKey.BUILDINGS_CHANGED, (event: BuildingsChangedEvent) => {\n            this.numToolstationsLevel2 = BuildingsChangedEvent.countUsable(event, EntityType.TOOLSTATION, 2)\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.isDrillable = false\n        this.isHardDrillable = false\n        this.isReinforcable = false\n        this.numToolstationsLevel2 = 0\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class SmallVehiclePanel extends IconSubPanel {\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 6, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Hoverboard')\n        this.addMenuItem('InterfaceBuildImages', 'SmallDigger')\n        this.addMenuItem('InterfaceBuildImages', 'SmallTruck')\n        this.addMenuItem('InterfaceBuildImages', 'SmallCat')\n        this.addMenuItem('InterfaceBuildImages', 'SmallMLP')\n        this.addMenuItem('InterfaceBuildImages', 'SmallHeli')\n    }\n\n}\n","import { EventKey } from '../../event/EventKeyEnum'\nimport { TrainRaider } from '../../event/GuiCommand'\nimport { SelectionChanged } from '../../event/LocalEvents'\nimport { RaiderTraining } from '../../game/model/raider/RaiderTraining'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class TrainRaiderPanel extends IconSubPanel {\n\n    canDoTraining: Map<RaiderTraining, boolean> = new Map()\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 6, onBackPanel)\n        this.addTrainingItem('Interface_MenuItem_TrainDriver', RaiderTraining.DRIVER)\n        this.addTrainingItem('Interface_MenuItem_TrainEngineer', RaiderTraining.ENGINEER)\n        this.addTrainingItem('Interface_MenuItem_TrainGeologist', RaiderTraining.GEOLOGIST)\n        this.addTrainingItem('Interface_MenuItem_TrainPilot', RaiderTraining.PILOT)\n        this.addTrainingItem('Interface_MenuItem_TrainSailor', RaiderTraining.SAILOR)\n        this.addTrainingItem('Interface_MenuItem_TrainDynamite', RaiderTraining.DEMOLITION)\n        this.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            this.canDoTraining = event.canDoTraining\n        })\n    }\n\n    private addTrainingItem(itemKey: string, training: RaiderTraining) {\n        const trainingItem = this.addMenuItem('InterfaceImages', itemKey)\n        trainingItem.isDisabled = () => !this.canDoTraining.get(training)\n        trainingItem.onClick = () => this.publishEvent(new TrainRaider(training))\n    }\n\n    reset() {\n        super.reset()\n        this.canDoTraining = new Map()\n    }\n\n}\n","import { EventKey } from '../../event/EventKeyEnum'\nimport { ChangeRaiderSpawnRequest } from '../../event/GuiCommand'\nimport { BuildingsChangedEvent, RaidersChangedEvent, SelectionChanged } from '../../event/LocalEvents'\nimport { RequestedRaidersChanged } from '../../event/WorldEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { SelectionType } from '../../game/model/Selectable'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, MAX_RAIDER_REQUEST } from '../../params'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { BuildingPanel } from './BuildingPanel'\nimport { GetToolPanel } from './GetToolPanel'\nimport { IconPanelButtonLabel } from './IconPanelButtonLabel'\nimport { IconSubPanel } from './IconSubPanel'\nimport { LargeVehiclePanel } from './LargeVehiclePanel'\nimport { SelectBuildingPanel } from './SelectBuildingPanel'\nimport { SelectFloorPanel } from './SelectFloorPanel'\nimport { SelectRaiderPanel } from './SelectRaiderPanel'\nimport { SelectRubblePanel } from './SelectRubblePanel'\nimport { SelectVehiclePanel } from './SelectVehiclePanel'\nimport { SelectWallPanel } from './SelectWallPanel'\nimport { SmallVehiclePanel } from './SmallVehiclePanel'\nimport { TrainRaiderPanel } from './TrainRaiderPanel'\n\nexport class MainPanel extends Panel {\n\n    subPanels: IconSubPanel[] = []\n    mainPanel: IconSubPanel // don't use root itself, since sub panel must be decoupled from (animated) main panel position\n    selectWallPanel: SelectWallPanel\n    selectFloorPanel: SelectFloorPanel\n    selectRubblePanel: SelectRubblePanel\n\n    numRequestedRaiders: number = 0\n    numToolstations: number = 0\n    numTeleportPads: number = 0\n    numBarracks: number = 0\n    numRaiders: number = 0\n\n    constructor(parent: BaseElement) {\n        super(parent)\n        this.relX = this.xOut = 640 - 16\n        this.xIn = 640 + 95\n        this.relY = this.yOut = this.yIn = 9\n        this.movedIn = false\n        this.mainPanel = this.addSubPanel(new IconSubPanel(this, 4))\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n\n        const buildingPanel = this.addSubPanel(new BuildingPanel(this, this.mainPanel))\n        const smallVehiclePanel = this.addSubPanel(new SmallVehiclePanel(this, this.mainPanel))\n        const largeVehiclePanel = this.addSubPanel(new LargeVehiclePanel(this, this.mainPanel))\n        this.selectWallPanel = this.addSubPanel(new SelectWallPanel(this, this.mainPanel))\n        this.selectFloorPanel = this.addSubPanel(new SelectFloorPanel(this, this.mainPanel))\n        this.selectRubblePanel = this.addSubPanel(new SelectRubblePanel(this, this.mainPanel))\n        const selectBuildingPanel = this.addSubPanel(new SelectBuildingPanel(this, this.mainPanel))\n        const selectRaiderPanel = this.addSubPanel(new SelectRaiderPanel(this, this.mainPanel))\n        const trainRaiderPanel = this.addSubPanel(new TrainRaiderPanel(this, selectRaiderPanel))\n        selectRaiderPanel.trainItem.onClick = () => selectRaiderPanel.toggleState(() => trainRaiderPanel.toggleState())\n        const getToolPanel = this.addSubPanel(new GetToolPanel(this, selectRaiderPanel))\n        selectRaiderPanel.getToolItem.onClick = () => selectRaiderPanel.toggleState(() => getToolPanel.toggleState())\n        const selectVehiclePanel = this.addSubPanel(new SelectVehiclePanel(this, this.mainPanel))\n        const teleportRaider = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_TeleportMan')\n        teleportRaider.isDisabled = () => this.numRaiders >= this.getMaxRaiders() || this.numRequestedRaiders >= MAX_RAIDER_REQUEST ||\n            (this.numToolstations < 1 && this.numTeleportPads < 1)\n        teleportRaider.updateState()\n        teleportRaider.onClick = () => this.publishEvent(new ChangeRaiderSpawnRequest(true))\n        // TODO add decrease requested raider spawn option (needs right click for gui elements)\n        teleportRaider.addChild(new IconPanelButtonLabel(teleportRaider))\n        this.registerEventListener(EventKey.REQUESTED_RAIDERS_CHANGED, (event: RequestedRaidersChanged) => {\n            this.numRequestedRaiders = event.numRequestedRaiders\n            teleportRaider.updateState()\n        })\n        const buildingItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildBuilding')\n        buildingItem.isDisabled = () => false\n        buildingItem.onClick = () => this.mainPanel.toggleState(() => buildingPanel.toggleState())\n        const smallVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildSmallVehicle')\n        smallVehicleItem.isDisabled = () => false\n        smallVehicleItem.onClick = () => this.mainPanel.toggleState(() => smallVehiclePanel.toggleState())\n        const largeVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildLargeVehicle')\n        largeVehicleItem.isDisabled = () => false\n        largeVehicleItem.onClick = () => this.mainPanel.toggleState(() => largeVehiclePanel.toggleState())\n        this.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            if (event.selectionType === SelectionType.NOTHING) this.selectSubPanel(this.mainPanel)\n            else if (event.selectionType === SelectionType.BUILDING) this.selectSubPanel(selectBuildingPanel)\n            else if (event.selectionType === SelectionType.RAIDER) this.selectSubPanel(selectRaiderPanel)\n            else if (event.selectionType === SelectionType.VEHICLE) this.selectSubPanel(selectVehiclePanel)\n            else if (event.selectionType === SelectionType.SURFACE) this.onSelectedSurfaceChange(event.isFloor, event.hasRubble)\n        })\n        this.registerEventListener(EventKey.BUILDINGS_CHANGED, (event: BuildingsChangedEvent) => {\n            this.numToolstations = BuildingsChangedEvent.countUsable(event, EntityType.TOOLSTATION)\n            this.numTeleportPads = BuildingsChangedEvent.countUsable(event, EntityType.TELEPORT_PAD)\n            this.numBarracks = BuildingsChangedEvent.countUsable(event, EntityType.BARRACKS)\n            teleportRaider.updateState()\n        })\n        this.registerEventListener(EventKey.RAIDERS_CHANGED, (event: RaidersChangedEvent) => {\n            this.numRaiders = event.numRaiders\n            teleportRaider.updateState()\n        })\n    }\n\n    getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + this.numBarracks * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    reset() {\n        super.reset()\n        this.relX = this.xOut\n        this.relY = this.yOut\n        this.movedIn = false\n        this.updatePosition()\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n        this.mainPanel.updatePosition()\n        this.numRequestedRaiders = 0\n        this.numToolstations = 0\n        this.numTeleportPads = 0\n        this.numBarracks = 0\n        this.numRaiders = 0\n    }\n\n    addSubPanel<T extends IconSubPanel>(childPanel: T): T {\n        this.addChild(childPanel)\n        this.subPanels.push(childPanel)\n        return childPanel\n    }\n\n    selectSubPanel(targetPanel: IconSubPanel) {\n        this.subPanels.forEach((subPanel) => subPanel !== targetPanel && subPanel.setMovedIn(true))\n        targetPanel.setMovedIn(false)\n    }\n\n    onSelectedSurfaceChange(isFloor: boolean, hasRubble: boolean) {\n        if (isFloor) {\n            if (hasRubble) {\n                this.selectSubPanel(this.selectRubblePanel)\n            } else {\n                this.selectSubPanel(this.selectFloorPanel)\n            }\n        } else {\n            this.selectSubPanel(this.selectWallPanel)\n        }\n    }\n\n}\n","import { BitmapFont } from '../../core/BitmapFont'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\n\nexport class TextInfoMessage {\n\n    infoImage\n    textImage\n\n    constructor(font: BitmapFont, infoMessageEntryConfig: TextInfoMessageEntryConfig, maxWidth: number) {\n        this.textImage = font.createTextImage(infoMessageEntryConfig.text, maxWidth)\n        this.infoImage = GuiResourceCache.getImageOrNull(infoMessageEntryConfig.imageFilename)\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { AirLevelChanged, RaidersChangedEvent } from '../../event/LocalEvents'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { TextInfoMessage } from './TextInfoMessage'\nimport { TextInfoMessageConfig } from './TextInfoMessageConfig'\n\nexport class MessagePanel extends Panel {\n\n    imgAir: HTMLCanvasElement = null\n    currentMessage: TextInfoMessage = null\n    messageTimeout = null\n\n    msgSpaceToContinue: TextInfoMessage\n    msgAirSupplyLow: TextInfoMessage\n    msgAirSupplyRunningOut: TextInfoMessage\n    msgGameCompleted: TextInfoMessage\n    msgManTrained: TextInfoMessage\n    msgUnitUpgraded: TextInfoMessage\n\n    airLevel: number = 1\n\n    constructor(parent: BaseElement, panelCfg: PanelCfg, textInfoMessageConfig: TextInfoMessageConfig) {\n        super(parent, panelCfg)\n        this.relX = this.xOut = this.xIn = 42\n        this.relY = this.yOut = this.yIn = 409\n        this.imgAir = GuiResourceCache.getImage('Interface/Airmeter/msgpanel_air_juice.bmp')\n\n        const font = GuiResourceCache.getDefaultFont()\n        const crystalFound = new TextInfoMessage(font, textInfoMessageConfig.textCrystalFound, this.img.width)\n        this.registerEventListener(EventKey.LOCATION_CRYSTAL_FOUND, () => this.setMessage(crystalFound))\n        this.msgSpaceToContinue = new TextInfoMessage(font, textInfoMessageConfig.textSpaceToContinue, this.img.width)\n        const cavernDiscovered = new TextInfoMessage(font, textInfoMessageConfig.textCavernDiscovered, this.img.width)\n        this.registerEventListener(EventKey.CAVERN_DISCOVERED, () => this.setMessage(cavernDiscovered))\n        const oreFound = new TextInfoMessage(font, textInfoMessageConfig.textOreFound, this.img.width)\n        this.registerEventListener(EventKey.ORE_FOUND, () => this.setMessage(oreFound))\n        this.msgAirSupplyLow = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyLow, this.img.width)\n        this.msgAirSupplyRunningOut = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyRunningOut, this.img.width)\n        this.msgGameCompleted = new TextInfoMessage(font, textInfoMessageConfig.textGameCompleted, this.img.width)\n        this.msgManTrained = new TextInfoMessage(font, textInfoMessageConfig.textManTrained, this.img.width)\n        this.registerEventListener(EventKey.RAIDERS_CHANGED, (event: RaidersChangedEvent) => event.training && this.setMessage(this.msgManTrained))\n        this.msgUnitUpgraded = new TextInfoMessage(font, textInfoMessageConfig.textUnitUpgraded, this.img.width)\n        this.registerEventListener(EventKey.AIR_LEVEL_CHANGED, () => this.notifyRedraw())\n        this.registerEventListener(EventKey.AIR_LEVEL_CHANGED, (event: AirLevelChanged) => {\n            this.airLevel = event.airLevel\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.airLevel = 1\n    }\n\n    setMessage(textInfoMessage: TextInfoMessage, timeout: number = 3000) {\n        this.messageTimeout = clearTimeoutSafe(this.messageTimeout)\n        this.currentMessage = textInfoMessage\n        this.notifyRedraw()\n        if (timeout) {\n            const that = this\n            this.messageTimeout = setTimeout(() => {\n                that.currentMessage = null\n                that.notifyRedraw()\n            }, timeout)\n        }\n    }\n\n    unsetMessage(textInfoMessage: TextInfoMessage) {\n        if (this.currentMessage === textInfoMessage) {\n            this.currentMessage = null\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.airLevel > 0) {\n            const width = Math.round(236 * Math.min(1, this.airLevel))\n            context.drawImage(this.imgAir, this.x + 85, this.y + 6, width, 8)\n        }\n        const textImage = this.currentMessage?.textImage\n        const infoImage = this.currentMessage?.infoImage\n        if (textImage) {\n            const txtX = this.x + (this.img.width - textImage.width - (infoImage ? infoImage.width : 0)) / 2\n            context.drawImage(textImage, txtX, this.y + 26)\n        }\n        if (infoImage) {\n            const infoX = this.x + this.img.width - infoImage.width\n            context.drawImage(infoImage, infoX, this.y + 16)\n        }\n    }\n\n}\n","export class TextInfoMessageEntryConfig {\n\n    text: string\n    imageFilename: string\n    sfxName: string\n\n    textImage\n    infoImage\n\n    constructor(cfgValue: any) {\n        [this.text, this.imageFilename, this.sfxName] = cfgValue\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\n\nexport class TextInfoMessageConfig extends BaseConfig {\n\n    textCrystalFound: TextInfoMessageEntryConfig = null\n    textSpaceToContinue: TextInfoMessageEntryConfig = null\n    textCavernDiscovered: TextInfoMessageEntryConfig = null\n    textOreFound: TextInfoMessageEntryConfig = null\n    textAirSupplyLow: TextInfoMessageEntryConfig = null\n    textAirSupplyRunningOut: TextInfoMessageEntryConfig = null\n    textGameCompleted: TextInfoMessageEntryConfig = null\n    textManTrained: TextInfoMessageEntryConfig = null\n    textUnitUpgraded: TextInfoMessageEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new TextInfoMessageEntryConfig(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class PriorityButtonsConfig extends BaseConfig {\n\n    aiPriorityTrain: ButtonCfg = null\n    aiPriorityGetIn: ButtonCfg = null\n    aiPriorityCrystal: ButtonCfg = null\n    aiPriorityOre: ButtonCfg = null\n    aiPriorityRepair: ButtonCfg = null\n    aiPriorityClearing: ButtonCfg = null\n    aiPriorityDestruction: ButtonCfg = null\n    aiPriorityConstruction: ButtonCfg = null\n    aiPriorityReinforce: ButtonCfg = null\n    aiPriorityRecharge: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): ButtonCfg {\n        return {\n            buttonType: cfgValue[0],\n            normalFile: cfgValue[1],\n            highlightFile: cfgValue[1],\n            pressedFile: cfgValue[2],\n            disabledFile: cfgValue[3],\n        }\n    }\n\n}\n","export enum PriorityIdentifier {\n\n    aiPriorityTrain,\n    aiPriorityGetIn,\n    aiPriorityCrystal,\n    aiPriorityOre,\n    aiPriorityRepair,\n    aiPriorityClearing,\n    aiPriorityDestruction,\n    aiPriorityConstruction,\n    aiPriorityReinforce,\n    aiPriorityRecharge,\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { ChangePriorityList } from '../../event/GuiCommand'\nimport { SetupPriorityList } from '../../event/LocalEvents'\nimport { PriorityIdentifier } from '../../game/model/job/PriorityIdentifier'\nimport { PriorityEntry, PriorityList } from '../../game/model/job/PriorityList'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { ButtonPriorityListCfg } from './ButtonPriorityListCfg'\nimport { PriorityButtonsConfig } from './PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from './PriorityPositionsEntry'\n\nexport class PriorityListPanel extends Panel {\n\n    prioPositions: PriorityPositionsEntry[] = []\n    prioByName: Map<PriorityIdentifier, Button> = new Map()\n\n    priorityList: PriorityList = new PriorityList()\n\n    constructor(parent: BaseElement, panelCfg: PanelCfg, buttonsCfg: ButtonPriorityListCfg, pos: PriorityPositionsEntry[], cfg: PriorityButtonsConfig) {\n        super(parent, panelCfg)\n        buttonsCfg.panelButtonPriorityListDisable.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                this.priorityList.toggle(index)\n                this.publishEvent(new ChangePriorityList(this.priorityList.current))\n            }\n        })\n        buttonsCfg.panelButtonPriorityListUpOne.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                this.priorityList.upOne(index)\n                this.publishEvent(new ChangePriorityList(this.priorityList.current))\n            }\n        })\n        this.addChild(new Button(this, buttonsCfg.panelButtonPriorityListReset)).onClick = () => {\n            this.priorityList.reset()\n            this.publishEvent(new ChangePriorityList(this.priorityList.current))\n        }\n\n        this.prioPositions = pos\n        this.prioByName.set(PriorityIdentifier.aiPriorityTrain, this.addChild(new Button(this, cfg.aiPriorityTrain)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityGetIn, this.addChild(new Button(this, cfg.aiPriorityGetIn)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityCrystal, this.addChild(new Button(this, cfg.aiPriorityCrystal)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityOre, this.addChild(new Button(this, cfg.aiPriorityOre)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityRepair, this.addChild(new Button(this, cfg.aiPriorityRepair)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityClearing, this.addChild(new Button(this, cfg.aiPriorityClearing)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityDestruction, this.addChild(new Button(this, cfg.aiPriorityDestruction)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityConstruction, this.addChild(new Button(this, cfg.aiPriorityConstruction)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityReinforce, this.addChild(new Button(this, cfg.aiPriorityReinforce)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityRecharge, this.addChild(new Button(this, cfg.aiPriorityRecharge)))\n        this.registerEventListener(EventKey.SETUP_PRIORITY_LIST, (event: SetupPriorityList) => {\n            this.setList(event.priorityList)\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.priorityList.reset()\n    }\n\n    private setList(priorityList: PriorityEntry[]) {\n        this.priorityList.setList(priorityList)\n        this.prioByName.forEach((btn) => btn.hidden = true)\n        let index = 0\n        let updated = false\n        priorityList.forEach(cfg => {\n            const prioButton: Button = this.prioByName.get(cfg.key)\n            if (prioButton) {\n                updated = updated || prioButton.hidden || prioButton.disabled !== !cfg.enabled\n                prioButton.hidden = false\n                prioButton.disabled = !cfg.enabled\n                prioButton.relX = this.prioPositions[index].x\n                prioButton.relY = this.prioPositions[index].y\n                prioButton.updatePosition()\n                const btnIndex = index\n                prioButton.onClick = () => {\n                    this.priorityList.pushToTop(btnIndex)\n                    this.publishEvent(new ChangePriorityList(this.priorityList.current))\n                }\n                index++\n            }\n        })\n        if (updated) this.notifyRedraw()\n    }\n\n}\n\n","export class PriorityPositionsEntry {\n\n    x: number\n    y: number\n\n    constructor(cfgValue: any) {\n        [this.x, this.y] = cfgValue\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { BaseElement } from './BaseElement'\nimport { Button } from './Button'\n\nexport class ToggleButton extends Button {\n\n    toggleState: boolean = false\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent, btnCfg)\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = (this.pressed && this.hover) || this.toggleState\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => updated = child.checkHover(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const isPressed = this.isInRect(cx, cy) || this.toggleState\n        let updated = this.pressed !== isPressed\n        this.pressed = isPressed\n        this.children.forEach((child) => updated = child.checkClick(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = inRect && this.pressed\n        if (updated) {\n            this.toggleState = !this.toggleState\n            this.onClick()\n            this.pressed = updated && this.toggleState\n            this.hover = inRect\n        }\n        this.children.forEach((child) => updated = child.checkRelease(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    release(): boolean {\n        return false\n    }\n\n}\n\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { ToggleButton } from '../base/ToggleButton'\nimport { ButtonTopCfg } from './ButtonTopCfg'\n\nexport class TopPanel extends Panel {\n\n    btnCallToArms: ToggleButton\n    btnOptions: Button\n    btnPriorities: ToggleButton\n\n    constructor(parent: BaseElement, panelCfg: PanelCfg, buttonsCfg: ButtonTopCfg) {\n        super(parent, panelCfg)\n        this.btnCallToArms = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelCallToArms))\n        this.btnOptions = this.addChild(new Button(this, buttonsCfg.panelButtonTopPanelOptions))\n        this.btnPriorities = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelPriorities))\n    }\n\n}\n\n","import { ButtonsCfg } from '../cfg/ButtonsCfg'\nimport { PanelsCfg } from '../cfg/PanelsCfg'\nimport { Panel } from '../gui/base/Panel'\nimport { GuiResourceCache } from '../gui/GuiResourceCache'\nimport { InfoDockPanel } from '../gui/infodock/InfoDockPanel'\nimport { InfoMessagesConfig } from '../gui/infodock/InfoMessagesConfig'\nimport { InformationPanel } from '../gui/infodock/InformationPanel'\nimport { MainPanel } from '../gui/main/MainPanel'\nimport { MessagePanel } from '../gui/messagepanel/MessagePanel'\nimport { TextInfoMessageConfig } from '../gui/messagepanel/TextInfoMessageConfig'\nimport { RadarPanel } from '../gui/radar/RadarPanel'\nimport { PanelCrystalSideBar } from '../gui/sidebar/PanelCrystalSideBar'\nimport { PriorityButtonsConfig } from '../gui/toppanel/PriorityButtonsConfig'\nimport { PriorityListPanel } from '../gui/toppanel/PriorityListPanel'\nimport { PriorityPositionsEntry } from '../gui/toppanel/PriorityPositionsEntry'\nimport { TopPanel } from '../gui/toppanel/TopPanel'\nimport { WorkerMessageType } from '../resource/wadworker/WorkerMessageType'\nimport { GuiWorker } from './GuiWorker'\nimport { GuiWorkerMessage } from './GuiWorkerMessage'\n\nexport class GuiMainWorker extends GuiWorker {\n\n    panelRadar: RadarPanel\n    panelMessages: MessagePanel\n    panelMessagesSide: Panel\n    panelCrystalSideBar: PanelCrystalSideBar\n    panelMain: MainPanel\n    panelTopPanel: TopPanel\n    panelInformation: InformationPanel\n    panelPriorityList: PriorityListPanel\n    panelCameraControl: Panel\n    panelInfoDock: InfoDockPanel\n    panelEncyclopedia: Panel\n\n    constructor(worker: Worker) {\n        super(worker)\n        const panelsCfg = new PanelsCfg(GuiResourceCache.cfg('Panels640x480'))\n        const buttonsCfg = new ButtonsCfg(GuiResourceCache.cfg('Buttons640x480'))\n        // created in reverse order compared to cfg, earlier in cfg means higher z-value // TODO add some z layering at least to panels\n        this.panelEncyclopedia = this.addPanel(new Panel(this.rootElement, panelsCfg.panelEncyclopedia))\n        this.panelInformation = this.addPanel(new InformationPanel(this.rootElement, panelsCfg.panelInformation))\n        this.panelInfoDock = this.addPanel(new InfoDockPanel(this.rootElement, panelsCfg.panelInfoDock, buttonsCfg.panelInfoDock, new InfoMessagesConfig(GuiResourceCache.cfg('InfoMessages')), this.panelInformation))\n        this.panelCameraControl = this.addPanel(new Panel(this.rootElement, panelsCfg.panelCameraControl))\n        const priorityButtonsConfig = new PriorityButtonsConfig(GuiResourceCache.cfg('PriorityImages'))\n        const priorityPositionsConfig = Object.values(GuiResourceCache.cfg('PrioritiesImagePositions')).map(cfgValue => new PriorityPositionsEntry(cfgValue))\n        this.panelPriorityList = this.addPanel(new PriorityListPanel(this.rootElement, panelsCfg.panelPriorityList, buttonsCfg.panelPriorityList, priorityPositionsConfig, priorityButtonsConfig))\n        this.panelTopPanel = this.addPanel(new TopPanel(this.rootElement, panelsCfg.panelTopPanel, buttonsCfg.panelTopPanel))\n        this.panelMain = this.addPanel(new MainPanel(this.rootElement))\n        this.panelCrystalSideBar = this.addPanel(new PanelCrystalSideBar(this.rootElement, panelsCfg.panelCrystalSideBar, buttonsCfg.panelCrystalSideBar))\n        this.panelMessagesSide = this.addPanel(new Panel(this.rootElement, panelsCfg.panelMessagesSide))\n        this.panelMessages = this.addPanel(new MessagePanel(this.rootElement, panelsCfg.panelMessages, new TextInfoMessageConfig(GuiResourceCache.cfg('TextMessagesWithImages'))))\n        this.panelRadar = this.addPanel(new RadarPanel(this.rootElement, panelsCfg.panelRadar, panelsCfg.panelRadarFill, panelsCfg.panelRadarOverlay, buttonsCfg.panelRadar))\n        // link panels\n        this.panelTopPanel.btnOptions.onClick = () => {\n            this.sendResponse({type: WorkerMessageType.SHOW_OPTIONS})\n        }\n        this.panelTopPanel.btnPriorities.onClick = () => {\n            if (this.panelTopPanel.btnPriorities.toggleState) {\n                this.panelMain.setMovedIn(true, () => this.panelPriorityList.setMovedIn(false))\n            } else {\n                this.panelPriorityList.setMovedIn(true, () => this.panelMain.setMovedIn(false))\n            }\n        }\n    }\n\n    onProcessMessage(msg: GuiWorkerMessage): boolean {\n        if (msg.type === WorkerMessageType.SPACE_TO_CONINUE) {\n            if (msg.messageState) {\n                this.panelMessages.setMessage(this.panelMessages.msgSpaceToContinue, 0)\n            } else {\n                this.panelMessages.unsetMessage(this.panelMessages.msgSpaceToContinue)\n            }\n        } else {\n            return false\n        }\n        return true\n    }\n\n}\n\nlet workerInstance: GuiWorker = null\n\nconst worker: Worker = self as any\n\nworker.addEventListener('message', (event) => {\n    const msg: GuiWorkerMessage = event.data\n    if (msg.type === WorkerMessageType.INIT) {\n        GuiResourceCache.resourceByName = msg.resourceByName\n        GuiResourceCache.configuration = msg.cfg\n        GuiResourceCache.stats = msg.stats\n        workerInstance = new GuiMainWorker(worker)\n    } else {\n        workerInstance.processMessage(msg)\n    }\n})\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [969], () => (__webpack_require__(375)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".index.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t588: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkrock_raiders_web\"] = self[\"webpackChunkrock_raiders_web\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"sourceRoot":""}