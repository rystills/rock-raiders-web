{"version":3,"sources":["webpack://rock-raiders-web/./src/resource/wadworker/EncodingHelper.js","webpack://rock-raiders-web/./src/resource/wadworker/CfgFileParser.ts","webpack://rock-raiders-web/./src/resource/wadworker/WadFile.ts","webpack://rock-raiders-web/./src/resource/wadworker/WadUtil.ts","webpack://rock-raiders-web/./src/resource/wadworker/RonFile.ts","webpack://rock-raiders-web/./src/resource/wadworker/AlphaBitmapDecoder.ts","webpack://rock-raiders-web/./src/cfg/MainMenuItemCfg.ts","webpack://rock-raiders-web/./src/cfg/BaseConfig.ts","webpack://rock-raiders-web/./src/cfg/MenuCfg.ts","webpack://rock-raiders-web/./src/cfg/MainMenuFullCfg.ts","webpack://rock-raiders-web/./src/cfg/ConfigColor.ts","webpack://rock-raiders-web/./src/cfg/LevelsCfg.ts","webpack://rock-raiders-web/./src/cfg/RewardCfg.ts","webpack://rock-raiders-web/./src/resource/wadworker/WadLoader.ts","webpack://rock-raiders-web/./src/resource/wadworker/Resources.ts"],"names":["encodeChar","charCode","charCodeAt","parse","buffer","result","ancestry","activeObject","isComment","keyVal","key","value","seek","length","charStr","String","fromCharCode","pop","push","parsed","CfgFileParser","parseValue","hasOwnProperty","stack","obj","Object","keys","forEach","val","Array","isArray","sub","values","levelConf","replace","num","Number","splitShrink","sep","split","filter","map","isNaN","lVal","toString","toLowerCase","includes","call","this","entries","fLength","fStart","parseWadFile","data","debug","dataView","DataView","Int8Array","pos","apply","slice","console","log","numberOfEntries","getInt32","bufferStart","i","getEntryData","entryName","Uint8Array","getEntryBuffer","getEntryText","TextDecoder","decode","c","lEntryName","filterEntryNames","regexStr","regex","RegExp","entry","match","getPath","url","strUrl","startsWith","substring","lastInd","lastIndexOf","getFilename","iGet","keyname","HeaderTypes","content","lines","l","indDoubleSlash","indexOf","indComment","trim","v","root","parseObj","start","lv","toRGBA","bufferView","byteOffset","byteLength","bottomUp","flag","Error","locRed","locGreen","locBlue","locAlpha","parseHeader","parseRGBA","fileSize","readUInt32LE","reserved1","getUint16","reserved2","offset","headerSize","width","height","planes","bitPP","compression","rawSize","hr","vr","colors","importantColors","maskAlpha","maskRed","maskGreen","maskBlue","BITMAP_INFO_HEADER","BITMAP_V2_INFO_HEADER","BITMAP_V3_INFO_HEADER","BITMAP_V4_HEADER","BITMAP_V5_HEADER","len","palette","blue","green","red","quad","maskRedR","maskGreenR","maskBlueR","maskAlphaR","shiftedMaskRedL","shiftedMaskGreenL","shiftedMaskBlueL","shiftedMaskAlphaL","coloShift","shiftRed","x","shiftGreen","shiftBlue","shiftAlpha","bit1","bit4","bit8","bit16","bit24","bit32","lastLine","xLen","Math","ceil","mode","padding","scanImage","line","b","location","rgb","fill","lowNibble","a","y","setPixelData","first4","last4","loc","px","processPixel","getUint32","rgbIndex","decoder","BmpDecoder","Uint8ClampedArray","ImageData","cfgObj","actionName","label","imgNormal","imgHover","imgPressed","tooltip","warn","target","setFromCfg","config","cfgKey","lCfgKeyName","some","objKey","assignValue","cfgValue","parseLabel","fullName","title","position","menuFont","loFont","hiFont","itemCount","menuImage","autoCenter","displayTitle","overlays","playRandom","items","anchored","canScroll","BaseConfig","MainMenuItemCfg","menuCount","menus","MenuCfg","r","g","levelsByName","levelKey","LevelEntryCfg","endGameAvi1","endGameAvi2","allowRename","recallOLObjects","generateSpiders","video","disableEndTeleport","disableStartTeleport","emergeTimeOut","boulderAnimation","noMultiSelect","noAutoEat","disableToolTipSound","blockSize","digDepth","roughLevel","roofHeight","useRoof","selBoxHeight","fpRotLightRGB","fogColourRGB","highFogColourRGB","fogRate","fallinMultiplier","numberOfLandSlidesTillCaveIn","noFallins","oxygenRate","surfaceMap","predugMap","terrainMap","emergeMap","erodeMap","fallinMap","blockPointersMap","cryOreMap","pathMap","noGather","textureSet","rockFallStyle","emergeCreature","safeCaverns","seeThroughWalls","oListFile","ptlFile","nerpFile","nerpMessageFile","objectiveText","objectiveImage640x480","erodeTriggerTime","erodeErodeTime","erodeLockTime","nextLevel","levelLinks","frontEndX","frontEndY","frontEndOpen","priorities","reward","menuBMP","endsWith","ConfigColor","LevelPrioritiesConfig","LevelRewardConfig","AI_Priority_Crystal","AI_Priority_Destruction","AI_Priority_Clearing","AI_Priority_Ore","AI_Priority_Repair","AI_Priority_GetIn","AI_Priority_Construction","AI_Priority_Reinforce","AI_Priority_GetTool","AI_Priority_Train","AI_Priority_Recharge","enable","modifier","importance","quota","LevelRewardImportanceConfig","LevelRewardQuotaConfig","crystals","timer","caverns","constructions","oxygen","figures","display","wallpaper","images","texts","boxImages","fonts","flics","scrollSpeed","centreText","vertSpacing","backFont","font","titleFont","saveButton","advanceButton","completeText","failedText","quitText","textPos","imgConf","RewardImageCfg","RewardTextCfg","RewardFontsCfg","filePath","text","ore","diggable","rockMonsters","score","wad0File","wad1File","assetIndex","totalResources","onMessage","msg","onInitialLoad","onAssetLoaded","onLoadDone","loadingTimeSeconds","loadWadImageAsset","name","callback","AlphaBitmapDecoder","loadWadTexture","imgData","filename","isTranslucentTexture","n","max","isAlphaTexture","alpha","loadAlphaImageAsset","loadFontImageAsset","loadNerpAsset","parseNerpMsgFile","wadFile","txt0Match","txt1Match","sndMatch","index","undefined","numericNameToNumber","txt","snd","digits","one","two","three","four","five","six","seven","eight","nine","tens","twenty","thirty","forty","number","ten","eleven","twelve","thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen","digitName","loadNerpMsg","msg1","m1","loadMapAsset","level","row","loadObjectListAsset","objectList","currentObject","objectStartMatch","drivingMatch","driving","parseFloat","loadWavAsset","path","error","loadLWOFile","lwoFilepath","lwoContent","e","registerAllAssets","mainConf","addAssetFolder","menuFullCfg","MainMenuFullCfg","menuCfg","addAsset","addAlphaImageFolder","levelsCfg","LevelsCfg","bmpName","addTextureFolder","buildingTypes","bType","bName","aeFile","addAnimatedEntity","orePath","addLWSFile","rewardCfg","RewardCfg","imgPath","img","splice","cfgRoot","RonFile","polyType","cfgPoly","activities","activity","act","file","lwsFilepath","extractLwoFiles","lwoFile","objLine","folderPath","assetPath","method","optional","assetsFromCfgByName","bind","loadAssetsParallel","promises","that","assetsFromCfg","asset","Promise","resolve","assetObj","assetKey","all","then","Date","getTime","startTime","toFixed","startWithCachedFiles","onCacheMiss","_onerror","openLocalCache","objectStore","request1","get","onerror","onsuccess","prop","WadFile","request2","startLoadingProcess","loadWadFiles","wad0Url","wad1Url","loadWadFile","wadFiles","put","fetch","response","ok","arrayBuffer","onopen","request","indexedDB","open","onupgradeneeded","db","objectStoreNames","contains","deleteObjectStore","createObjectStore","transaction","cfg","resourceWorker","self","addEventListener","event","wadLoader","WadLoader","postMessage","assetName","done","wad0FileUrl","wad1FileUrl","cacheMissed"],"mappings":"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","file":"index.worker.js","sourcesContent":["export function encodeChar(charCode) { // encoding of the original files still remains a mystery\n    if (charCode === 130) {\n        return 'ä'.charCodeAt(0);\n    } else if (charCode === 142) {\n        return 'Ä'.charCodeAt(0);\n    } else if (charCode === 162) {\n        return 'ö'.charCodeAt(0);\n    } else if (charCode === 167) {\n        return 'Ü'.charCodeAt(0);\n    } else if (charCode === 171) {\n        return 'ü'.charCodeAt(0);\n    } else if (charCode === 195) {\n        return 'ß'.charCodeAt(0);\n    }\n    return charCode;\n}\n","import { encodeChar } from './EncodingHelper'\n\nexport class CfgFileParser {\n\n    static parse(buffer): any {\n        const result = {}\n        const ancestry = []\n        let activeObject = result\n        let isComment = false\n        let keyVal = 0 // 0 = looking for key, 1 = inside key, 1 = looking for value, 2 = inside value\n        let key = ''\n        let value = ''\n        // debug output is a bad idea here, buffer size is about 232.611 characters and has 6781 lines\n        for (let seek = 0; seek < buffer.length; seek++) {\n            let charCode = buffer[seek]\n            if (charCode === 123 && key === 'FullName') { // dirty workaround but in the original file { (123) was used instead of Ä (142)\n                charCode = 142\n            }\n            let charStr = String.fromCharCode(encodeChar(charCode))\n            if (charStr === ';' || charStr === '/') { // someone used // as a marker for a comment\n                isComment = true\n            } else if (charCode === 10 || charCode === 13) {\n                isComment = false\n            }\n            if (!isComment) {\n                if (charCode > 32) { // not a whitespace\n                    if (keyVal === 0) { // looking for key\n                        if (charStr === '}') {\n                            activeObject = ancestry.pop()\n                        } else {\n                            keyVal++\n                            key = charStr\n                        }\n                    } else if (keyVal === 1) { // inside key\n                        key += charStr\n                    } else if (keyVal === 2) { // looking for value\n                        if (charStr === '{') { // start of a new object key is identifier\n                            ancestry.push(activeObject)\n                            activeObject = {}\n                            ancestry[ancestry.length - 1][key] = activeObject\n                            keyVal = 0 // start looking for a key again\n                        } else {\n                            keyVal++\n                            value = charStr\n                        }\n                    } else if (keyVal === 3) { // inside value\n                        value += charStr\n                    }\n                } else { // some whitespace\n                    if (keyVal === 1) {\n                        keyVal++\n                    } else if (keyVal === 3) {\n                        keyVal = 0\n                        const parsed = CfgFileParser.parseValue(value)\n                        if (activeObject.hasOwnProperty(key)) {\n                            activeObject[key].push(parsed)\n                        } else {\n                            activeObject[key] = [parsed]\n                        }\n                    }\n                }\n            }\n        }\n\n        const stack = [result]\n        while (stack.length > 0) {\n            const obj = stack.pop()\n            Object.keys(obj).forEach((key) => {\n                const val = obj[key]\n                if (Array.isArray(val)) {\n                    if (val.length === 1) {\n                        obj[key] = val[0]\n                    } else {\n                        val.forEach((sub) => stack.push(sub))\n                    }\n                } else if (Object.keys(val).length > 1) {\n                    stack.push(val)\n                }\n            })\n        }\n\n        // apply some patches here\n        Object.values(result['Lego*']['Levels']).forEach((levelConf) => {\n            if (levelConf['CryoreMap']) {\n                levelConf['CryOreMap'] = levelConf['CryoreMap']  // typos... typos everywhere\n                delete levelConf['CryoreMap']\n            }\n            if (levelConf['CryOreMap']) {\n                levelConf['CryOreMap'] = levelConf['CryOreMap'].replace('Cryo_', 'Cror_')\n            }\n            if (levelConf['PredugMap']) {\n                levelConf['PreDugMap'] = levelConf['PredugMap']\n                delete levelConf['PredugMap']\n            }\n        })\n\n        return result['Lego*']\n    }\n\n    static parseValue(val) {\n        const num = Number(val)\n\n        function splitShrink(sep) {\n            val = val.split(sep).filter(val => val !== '').map(val => CfgFileParser.parseValue(val))\n            if (val.length === 0) {\n                val = ''\n            } else if (val.length === 1) {\n                val = val[0]\n            }\n        }\n\n        if (isNaN(num)) {\n            val = val.toString().replace(/\\\\/g, '/')\n            const lVal = val.toLowerCase()\n            if (lVal === 'true') return true\n            if (lVal === 'false') return false\n            if (lVal === 'null') return ''\n            if (val.includes(',')) {\n                splitShrink.call(this, ',')\n            } else if (val.includes(':')) {\n                splitShrink.call(this, ':')\n            } else if (val.includes('|')) {\n                splitShrink.call(this, '|')\n            }\n            return val\n        } else {\n            return num\n        }\n    }\n\n}\n","import { encodeChar } from './EncodingHelper'\n\n/**\n * Handles the extraction of single files from a bigger WAD data blob\n */\nexport class WadFile {\n\n    buffer: Int8Array = null\n    entries: string[] = []\n    fLength: number[] = []\n    fStart: number[] = []\n\n    /**\n     * Validate and parse the given data object as binary blob of a WAD file\n     * @param data binary blob\n     * @param debug enable/disable debug output while parsing\n     */\n    parseWadFile(data, debug = false) {\n        const dataView = new DataView(data)\n        this.buffer = new Int8Array(data)\n        let pos = 0\n        if (String.fromCharCode.apply(null, this.buffer.slice(pos, 4)) !== 'WWAD') {\n            throw 'Invalid WAD0 file provided'\n        }\n        if (debug) {\n            console.log('WAD0 file seems legit')\n        }\n        pos = 4\n        const numberOfEntries = dataView.getInt32(pos, true)\n        if (debug) {\n            console.log(numberOfEntries)\n        }\n        pos = 8\n\n        let bufferStart = pos\n        for (let i = 0; i < numberOfEntries; pos++) {\n            if (this.buffer[pos] === 0) {\n                this.entries[i] = String.fromCharCode.apply(null, this.buffer.slice(bufferStart, pos)).replace(/\\\\/g, '/').toLowerCase()\n                bufferStart = pos + 1\n                i++\n            }\n        }\n\n        if (debug) {\n            console.log(this.entries)\n        }\n\n        for (let i = 0; i < numberOfEntries; pos++) {\n            if (this.buffer[pos] === 0) {\n                bufferStart = pos + 1\n                i++\n            }\n        }\n\n        if (debug) {\n            console.log('Offset after absolute original names is ' + pos)\n        }\n\n        for (let i = 0; i < numberOfEntries; i++) {\n            this.fLength[i] = dataView.getInt32(pos + 8, true)\n            this.fStart[i] = dataView.getInt32(pos + 12, true)\n            pos += 16\n        }\n\n        if (debug) {\n            console.log(this.fLength)\n            console.log(this.fStart)\n        }\n    }\n\n    /**\n     * Returns the entries content extracted by name from the managed WAD file\n     * @param entryName Entry name to be extracted\n     * @returns {Uint8Array} Returns the content as Uint8Array\n     */\n    getEntryData(entryName): Uint8Array {\n        return new Uint8Array(this.getEntryBuffer(entryName))\n    }\n\n    /**\n     * Returns the entries content as text extracted by name from the managed WAD file\n     * @param entryName Entry name to be extracted\n     * @returns {string} Returns the content as String\n     */\n    getEntryText(entryName): string {\n        return new TextDecoder().decode(this.getEntryBuffer(entryName).map(c => encodeChar(c)))\n    }\n\n    /**\n     * Returns the entries content by name extracted from the managed WAD file\n     * @param entryName Entry name to be extracted\n     * @returns {Int8Array} Returns the content as buffer slice\n     */\n    getEntryBuffer(entryName): Int8Array {\n        const lEntryName = entryName.toLowerCase()\n        for (let i = 0; i < this.entries.length; i++) {\n            if (this.entries[i] === lEntryName) {\n                return this.buffer.slice(this.fStart[i], this.fStart[i] + this.fLength[i])\n            }\n        }\n        throw 'Entry \\'' + entryName + '\\' not found in WAD file'\n    }\n\n    filterEntryNames(regexStr) {\n        const regex = new RegExp(regexStr.toLowerCase())\n        const result = []\n        for (let c = 0; c < this.entries.length; c++) {\n            const entry = this.entries[c]\n            if (entry.toLowerCase().match(regex)) {\n                result.push(entry)\n            }\n        }\n        return result\n    }\n\n}\n","export function getPath(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n","// The RockRaidersObjectNotation (RON) format is related to JSON\n\nexport class RonFile {\n\n    parse(content: string) { // TODO read from ArrayBuffer and fix encoding?\n        const lines: string[][] = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map((l) => { // strip comments from each line\n                const indDoubleSlash = l.indexOf('//')\n                if (indDoubleSlash > -1) l = l.substring(0, indDoubleSlash)\n                const indComment = l.indexOf(';')\n                if (indComment > -1) l = l.substring(0, indComment)\n                return l\n            })\n            .map((l) => { // remove whitespace at start/end of lines\n                l = l.trim()\n                return l\n            })\n            .filter(l => l !== '') // filter empty lines\n            .map((v) => v.split(' ').filter(v => v !== ''))\n        const root = {}\n        this.parseObj(root, lines, 0)\n        return root\n    }\n\n    parseObj(obj: {}, lines: string[][], start): number {\n        for (let c = start; c < lines.length; c++) {\n            const [name, val] = lines[c]\n            const key = name.toLowerCase()\n            if (val === '{') {\n                obj[key] = {}\n                c = this.parseObj(obj[key], lines, c + 1)\n            } else if (key === '}') {\n                return c\n            } else {\n                // parse values\n                let value: any = val.split(':').filter(v => v !== '') // there is key::value\n                    .map(v => v.split(',').map(v => v.split('|').map(v => this.parseValue(v))))\n                while (value.length === 1) value = value[0] // replace arrays with only one value\n                obj[key] = value\n            }\n        }\n        return lines.length\n    }\n\n    parseValue(value: string) {\n        const num = Number(value)\n        const lv = value.toLowerCase()\n        if (!isNaN(num)) {\n            return num\n        } else if (lv === 'false') {\n            return false\n        } else if (lv === 'true') {\n            return true\n        } else {\n            return value\n        }\n    }\n\n}\n","/**\n * Source: https://github.com/wokwi/bmp-ts\n */\n\nenum HeaderTypes {\n    BITMAP_INFO_HEADER = 40,\n    BITMAP_V2_INFO_HEADER = 52,\n    BITMAP_V3_INFO_HEADER = 56,\n    BITMAP_V4_HEADER = 108,\n    BITMAP_V5_HEADER = 124\n}\n\n// We have these:\n//\n// const sample = 0101 0101 0101 0101\n// const mask   = 0111 1100 0000 0000\n// 256        === 0000 0001 0000 0000\n//\n// We want to take the sample and turn it into an 8-bit value.\n//\n// 1. We extract the last bit of the mask:\n//\n// 0000 0100 0000 0000\n//       ^\n//\n// Like so:\n//\n// const a = ~mask =    1000 0011 1111 1111\n// const b = a + 1 =    1000 0100 0000 0000\n// const c = b & mask = 0000 0100 0000 0000\n//\n// 2. We shift it to the right and extract the bit before the first:\n//\n// 0000 0000 0010 0000\n//             ^\n//\n// Like so:\n//\n// const d = mask / c = 0000 0000 0001 1111\n// const e = mask + 1 = 0000 0000 0010 0000\n//\n// 3. We apply the mask and the two values above to a sample:\n//\n// const f = sample & mask = 0101 0100 0000 0000\n// const g = f / c =         0000 0000 0001 0101\n// const h = 256 / e =       0000 0000 0000 0100\n// const i = g * h =         0000 0000 1010 1000\n//                                     ^^^^ ^\n//\n// Voila, we have extracted a sample and \"stretched\" it to 8 bits. For samples\n// which are already 8-bit, h === 1 and g === i.\n\nfunction maskColor(\n    maskRed: number,\n    maskGreen: number,\n    maskBlue: number,\n    maskAlpha: number,\n) {\n    const maskRedR = (~maskRed + 1) & maskRed\n    const maskGreenR = (~maskGreen + 1) & maskGreen\n    const maskBlueR = (~maskBlue + 1) & maskBlue\n    const maskAlphaR = (~maskAlpha + 1) & maskAlpha\n\n    const shiftedMaskRedL = maskRed / maskRedR + 1\n    const shiftedMaskGreenL = maskGreen / maskGreenR + 1\n    const shiftedMaskBlueL = maskBlue / maskBlueR + 1\n    const shiftedMaskAlphaL = maskAlpha / maskAlphaR + 1\n\n    return {\n        shiftRed: (x: number) =>\n            (((x & maskRed) / maskRedR) * 0x100) / shiftedMaskRedL,\n        shiftGreen: (x: number) =>\n            (((x & maskGreen) / maskGreenR) * 0x100) / shiftedMaskGreenL,\n        shiftBlue: (x: number) =>\n            (((x & maskBlue) / maskBlueR) * 0x100) / shiftedMaskBlueL,\n        shiftAlpha:\n            maskAlpha !== 0\n                ? (x: number) =>\n                (((x & maskAlpha) / maskAlphaR) * 0x100) / shiftedMaskAlphaL\n                : () => 255,\n    }\n}\n\nconst enum Compression {\n    NONE = 0,\n    BI_RLE8 = 1,\n    BI_RLE4 = 2,\n    BI_BIT_FIELDS = 3,\n    BI_ALPHA_BIT_FIELDS = 6\n}\n\ntype BitsPerPixel = 1 | 4 | 8 | 16 | 24 | 32;\n\ninterface IColor {\n    red: number;\n    green: number;\n    blue: number;\n    quad: number;\n}\n\ninterface IDecoderOptions {\n    toRGBA?: boolean;\n}\n\ninterface IImage {\n    width: number;\n    height: number;\n    bitPP: BitsPerPixel;\n    data: Uint8Array;\n    reserved1?: number;\n    reserved2?: number;\n    hr?: number;\n    vr?: number;\n    colors?: number;\n    importantColors?: number;\n    palette?: IColor[];\n}\n\ninterface IBitmapImage extends IImage {\n    flag: string;\n    fileSize: number;\n    offset: number;\n    headerSize: number;\n    planes?: number;\n    compression?: Compression;\n    rawSize: number;\n}\n\ntype IColorProcessor = (x: number, line: number) => void;\n\nclass BmpDecoder implements IBitmapImage {\n    // Header\n    public flag: string\n    public fileSize!: number\n    public reserved1!: number\n    public reserved2!: number\n    public offset!: number\n    public headerSize!: number\n    public width!: number\n    public height!: number\n    public planes!: number\n    public bitPP!: BitsPerPixel\n    public compression?: Compression\n    public rawSize!: number\n    public hr!: number\n    public vr!: number\n    public colors!: number\n    public importantColors!: number\n    public palette!: IColor[]\n    public data!: Uint8Array\n\n    private maskRed!: number\n    private maskGreen!: number\n    private maskBlue!: number\n    private maskAlpha!: number\n\n    private readonly toRGBA: boolean\n\n    private pos: number\n    private bottomUp: boolean\n    private readonly buffer: Uint8Array\n    private readonly bufferView: DataView\n\n    private readonly locRed: number\n    private readonly locGreen: number\n    private readonly locBlue: number\n    private readonly locAlpha: number\n\n    private shiftRed!: (x: number) => number\n    private shiftGreen!: (x: number) => number\n    private shiftBlue!: (x: number) => number\n    private shiftAlpha!: (x: number) => number\n\n    constructor(\n        buffer: Uint8Array,\n        {toRGBA}: IDecoderOptions = {toRGBA: false},\n    ) {\n        this.buffer = buffer\n        this.bufferView = new DataView(\n            buffer.buffer,\n            buffer.byteOffset,\n            buffer.byteLength,\n        )\n        this.toRGBA = !!toRGBA\n        this.bottomUp = true\n        this.flag = String.fromCharCode(this.buffer[0]) + String.fromCharCode(this.buffer[1])\n        this.pos = 2\n\n        if (this.flag !== 'BM') {\n            throw new Error('Invalid BMP File')\n        }\n\n        this.locRed = this.toRGBA ? 0 : 3\n        this.locGreen = this.toRGBA ? 1 : 2\n        this.locBlue = this.toRGBA ? 2 : 1\n        this.locAlpha = this.toRGBA ? 3 : 0\n\n        this.parseHeader()\n        this.parseRGBA()\n    }\n\n    private parseHeader() {\n        this.fileSize = this.readUInt32LE()\n\n        this.reserved1 = this.bufferView.getUint16(this.pos, true)\n        this.pos += 2\n        this.reserved2 = this.bufferView.getUint16(this.pos, true)\n        this.pos += 2\n\n        this.offset = this.readUInt32LE()\n\n        // End of BITMAP_FILE_HEADER\n        this.headerSize = this.readUInt32LE()\n\n        if (!(this.headerSize in HeaderTypes)) {\n            throw new Error(`Unsupported BMP header size ${this.headerSize}`)\n        }\n\n        this.width = this.readUInt32LE()\n        this.height = this.readUInt32LE()\n\n        this.planes = this.bufferView.getUint16(this.pos, true)\n        this.pos += 2\n        this.bitPP = this.bufferView.getUint16(this.pos, true) as BitsPerPixel\n        this.pos += 2\n\n        this.compression = this.readUInt32LE()\n        this.rawSize = this.readUInt32LE()\n        this.hr = this.readUInt32LE()\n        this.vr = this.readUInt32LE()\n        this.colors = this.readUInt32LE()\n        this.importantColors = this.readUInt32LE()\n\n        // De facto defaults\n\n        if (this.bitPP === 32) {\n            this.maskAlpha = 0\n            this.maskRed = 0x00ff0000\n            this.maskGreen = 0x0000ff00\n            this.maskBlue = 0x000000ff\n        } else if (this.bitPP === 16) {\n            this.maskAlpha = 0\n            this.maskRed = 0x7c00\n            this.maskGreen = 0x03e0\n            this.maskBlue = 0x001f\n        }\n\n        // End of BITMAP_INFO_HEADER\n\n        if (\n            this.headerSize > HeaderTypes.BITMAP_INFO_HEADER ||\n            this.compression === Compression.BI_BIT_FIELDS ||\n            this.compression === Compression.BI_ALPHA_BIT_FIELDS\n        ) {\n            this.maskRed = this.readUInt32LE()\n            this.maskGreen = this.readUInt32LE()\n            this.maskBlue = this.readUInt32LE()\n        }\n\n        // End of BITMAP_V2_INFO_HEADER\n\n        if (\n            this.headerSize > HeaderTypes.BITMAP_V2_INFO_HEADER ||\n            this.compression === Compression.BI_ALPHA_BIT_FIELDS\n        ) {\n            this.maskAlpha = this.readUInt32LE()\n        }\n\n        // End of BITMAP_V3_INFO_HEADER\n\n        if (this.headerSize > HeaderTypes.BITMAP_V3_INFO_HEADER) {\n            this.pos +=\n                HeaderTypes.BITMAP_V4_HEADER - HeaderTypes.BITMAP_V3_INFO_HEADER\n        }\n\n        // End of BITMAP_V4_HEADER\n\n        if (this.headerSize > HeaderTypes.BITMAP_V4_HEADER) {\n            this.pos += HeaderTypes.BITMAP_V5_HEADER - HeaderTypes.BITMAP_V4_HEADER\n        }\n\n        // End of BITMAP_V5_HEADER\n\n        if (this.bitPP <= 8 || this.colors > 0) {\n            const len = this.colors === 0 ? 1 << this.bitPP : this.colors\n            this.palette = new Array(len)\n\n            for (let i = 0; i < len; i++) {\n                const blue = this.buffer[this.pos++]\n                const green = this.buffer[this.pos++]\n                const red = this.buffer[this.pos++]\n                const quad = this.buffer[this.pos++]\n\n                this.palette[i] = {\n                    red,\n                    green,\n                    blue,\n                    quad,\n                }\n            }\n        }\n\n        // End of color table\n\n        // Can the height ever be negative?\n        if (this.height < 0) {\n            this.height *= -1\n            this.bottomUp = false\n        }\n\n        const coloShift = maskColor(\n            this.maskRed,\n            this.maskGreen,\n            this.maskBlue,\n            this.maskAlpha,\n        )\n\n        this.shiftRed = coloShift.shiftRed\n        this.shiftGreen = coloShift.shiftGreen\n        this.shiftBlue = coloShift.shiftBlue\n        this.shiftAlpha = coloShift.shiftAlpha\n    }\n\n    private parseRGBA() {\n        this.data = new Uint8Array(this.width * this.height * 4)\n\n        switch (this.bitPP) {\n            case 1:\n                this.bit1()\n                break\n            case 4:\n                this.bit4()\n                break\n            case 8:\n                this.bit8()\n                break\n            case 16:\n                this.bit16()\n                break\n            case 24:\n                this.bit24()\n                break\n            default:\n                this.bit32()\n        }\n    }\n\n    private bit1() {\n        const xLen = Math.ceil(this.width / 8)\n        const mode = xLen % 4\n        const padding = mode !== 0 ? 4 - mode : 0\n\n        let lastLine: number | undefined\n\n        this.scanImage(padding, xLen, (x, line) => {\n            if (line !== lastLine) {\n                lastLine = line\n            }\n\n            const b = this.buffer[this.pos++]\n            const location = line * this.width * 4 + x * 8 * 4\n\n            for (let i = 0; i < 8; i++) {\n                if (x * 8 + i < this.width) {\n                    const rgb = this.palette[(b >> (7 - i)) & 0x1]\n\n                    this.data[location + i * this.locAlpha] = 0\n                    this.data[location + i * 4 + this.locBlue] = rgb.blue\n                    this.data[location + i * 4 + this.locGreen] = rgb.green\n                    this.data[location + i * 4 + this.locRed] = rgb.red\n                } else {\n                    break\n                }\n            }\n        })\n    }\n\n    private bit4() {\n        if (this.compression === Compression.BI_RLE4) {\n            this.data.fill(0)\n\n            let lowNibble = false //for all count of pixel\n            let lines = this.bottomUp ? this.height - 1 : 0\n            let location = 0\n\n            while (location < this.data.length) {\n                const a = this.buffer[this.pos++]\n                const b = this.buffer[this.pos++]\n\n                //absolute mode\n                if (a === 0) {\n                    if (b === 0) {\n                        //line end\n                        lines += this.bottomUp ? -1 : 1\n                        location = lines * this.width * 4\n                        lowNibble = false\n\n                        continue\n                    }\n\n                    if (b === 1) {\n                        // image end\n                        break\n                    }\n\n                    if (b === 2) {\n                        // offset x, y\n                        const x = this.buffer[this.pos++]\n                        const y = this.buffer[this.pos++]\n\n                        lines += this.bottomUp ? -y : y\n                        location += y * this.width * 4 + x * 4\n                    } else {\n                        let c = this.buffer[this.pos++]\n\n                        for (let i = 0; i < b; i++) {\n                            location = this.setPixelData(\n                                location,\n                                lowNibble ? c & 0x0f : (c & 0xf0) >> 4,\n                            )\n\n                            if (i & 1 && i + 1 < b) {\n                                c = this.buffer[this.pos++]\n                            }\n\n                            lowNibble = !lowNibble\n                        }\n\n                        if ((((b + 1) >> 1) & 1) === 1) {\n                            this.pos++\n                        }\n                    }\n                } else {\n                    //encoded mode\n                    for (let i = 0; i < a; i++) {\n                        location = this.setPixelData(\n                            location,\n                            lowNibble ? b & 0x0f : (b & 0xf0) >> 4,\n                        )\n                        lowNibble = !lowNibble\n                    }\n                }\n            }\n        } else {\n            const xLen = Math.ceil(this.width / 2)\n            const mode = xLen % 4\n            const padding = mode !== 0 ? 4 - mode : 0\n\n            this.scanImage(padding, xLen, (x, line) => {\n                const b = this.buffer[this.pos++]\n                const location = line * this.width * 4 + x * 2 * 4\n\n                const first4 = b >> 4\n                let rgb = this.palette[first4]\n\n                this.data[location] = 0\n                this.data[location + 1] = rgb.blue\n                this.data[location + 2] = rgb.green\n                this.data[location + 3] = rgb.red\n\n                if (x * 2 + 1 >= this.width) {\n                    // throw new Error('Something');\n                    return false\n                }\n\n                const last4 = b & 0x0f\n                rgb = this.palette[last4]\n\n                this.data[location + 4] = 0\n                this.data[location + 4 + 1] = rgb.blue\n                this.data[location + 4 + 2] = rgb.green\n                this.data[location + 4 + 3] = rgb.red\n            })\n        }\n    }\n\n    private bit8() {\n        if (this.compression === Compression.BI_RLE8) {\n            this.data.fill(0)\n\n            let lines = this.bottomUp ? this.height - 1 : 0\n            let location = 0\n\n            while (location < this.data.length) {\n                const a = this.buffer[this.pos++]\n                const b = this.buffer[this.pos++]\n\n                //absolute mode\n                if (a === 0) {\n                    if (b === 0) {\n                        //line end\n                        lines += this.bottomUp ? -1 : 1\n                        location = lines * this.width * 4\n                        continue\n                    }\n\n                    if (b === 1) {\n                        //image end\n                        break\n                    }\n\n                    if (b === 2) {\n                        //offset x,y\n                        const x = this.buffer[this.pos++]\n                        const y = this.buffer[this.pos++]\n\n                        lines += this.bottomUp ? -y : y\n                        location += y * this.width * 4 + x * 4\n                    } else {\n                        for (let i = 0; i < b; i++) {\n                            const c = this.buffer[this.pos++]\n                            location = this.setPixelData(location, c)\n                        }\n\n                        // @ts-ignore\n                        const shouldIncrement = b & (1 === 1)\n                        if (shouldIncrement) {\n                            this.pos++\n                        }\n                    }\n                } else {\n                    //encoded mode\n                    for (let i = 0; i < a; i++) {\n                        location = this.setPixelData(location, b)\n                    }\n                }\n            }\n        } else {\n            const mode = this.width % 4\n            const padding = mode !== 0 ? 4 - mode : 0\n\n            this.scanImage(padding, this.width, (x, line) => {\n                const b = this.buffer[this.pos++]\n                const location = line * this.width * 4 + x * 4\n\n                if (b < this.palette.length) {\n                    const rgb = this.palette[b]\n\n                    this.data[location] = 0\n                    this.data[location + 1] = rgb.blue\n                    this.data[location + 2] = rgb.green\n                    this.data[location + 3] = rgb.red\n                } else {\n                    this.data[location] = 0\n                    this.data[location + 1] = 0xff\n                    this.data[location + 2] = 0xff\n                    this.data[location + 3] = 0xff\n                }\n            })\n        }\n    }\n\n    private bit16() {\n        const padding = (this.width % 2) * 2\n\n        this.scanImage(padding, this.width, (x, line) => {\n            const loc = line * this.width * 4 + x * 4\n            const px = this.bufferView.getUint16(this.pos, true)\n            this.pos += 2\n\n            this.data[loc + this.locRed] = this.shiftRed(px)\n            this.data[loc + this.locGreen] = this.shiftGreen(px)\n            this.data[loc + this.locBlue] = this.shiftBlue(px)\n            this.data[loc + this.locAlpha] = this.shiftAlpha(px)\n        })\n    }\n\n    private bit24() {\n        const padding = this.width % 4\n\n        this.scanImage(padding, this.width, (x, line) => {\n            const loc = line * this.width * 4 + x * 4\n            const blue = this.buffer[this.pos++]\n            const green = this.buffer[this.pos++]\n            const red = this.buffer[this.pos++]\n\n            this.data[loc + this.locRed] = red\n            this.data[loc + this.locGreen] = green\n            this.data[loc + this.locBlue] = blue\n            this.data[loc + this.locAlpha] = 0\n        })\n    }\n\n    private bit32() {\n        this.scanImage(0, this.width, (x, line) => {\n            const loc = line * this.width * 4 + x * 4\n            const px = this.readUInt32LE()\n\n            this.data[loc + this.locRed] = this.shiftRed(px)\n            this.data[loc + this.locGreen] = this.shiftGreen(px)\n            this.data[loc + this.locBlue] = this.shiftBlue(px)\n            this.data[loc + this.locAlpha] = this.shiftAlpha(px)\n        })\n    }\n\n    private scanImage(\n        padding = 0,\n        width = this.width,\n        processPixel: IColorProcessor,\n    ) {\n        for (let y = this.height - 1; y >= 0; y--) {\n            const line = this.bottomUp ? y : this.height - 1 - y\n\n            for (let x = 0; x < width; x++) {\n                processPixel.call(this, x, line)\n            }\n\n            this.pos += padding\n        }\n    }\n\n    private readUInt32LE() {\n        const value = this.bufferView.getUint32(this.pos, true)\n        this.pos += 4\n        return value\n    }\n\n    private setPixelData(location: number, rgbIndex: number) {\n        const {blue, green, red} = this.palette[rgbIndex]\n\n        this.data[location + this.locAlpha] = 0\n        this.data[location + 1 + this.locBlue] = blue\n        this.data[location + 2 + this.locGreen] = green\n        this.data[location + 3 + this.locRed] = red\n\n        return location + 4\n    }\n}\n\nexport class AlphaBitmapDecoder {\n\n    static parse(buffer: Uint8Array): ImageData {\n        const decoder = new BmpDecoder(buffer) // returns data in ABGR order and alpha set 0\n        const data = new Uint8ClampedArray(decoder.data.length)\n        for (let c = 0; c < decoder.data.length; c += 4) {\n            data[c] = decoder.data[c + 3] // red\n            data[c + 1] = decoder.data[c + 2] // green\n            data[c + 2] = decoder.data[c + 1] // blue\n            data[c + 3] = 255 - decoder.data[c] // alpha\n        }\n        return new ImageData(data, decoder.width, decoder.height)\n    }\n\n}\n","export class MainMenuItemCfg {\n\n    actionName: string\n    x: number\n    y: number\n    label: string\n    imgNormal: string\n    imgHover: string\n    imgPressed: string\n    tooltip: string\n    target: string\n\n    constructor(cfgObj: any) {\n        this.actionName = cfgObj[0]\n        this.x = Number(cfgObj[1])\n        this.y = Number(cfgObj[2])\n        if (cfgObj.length === 5) {\n            this.label = cfgObj[3].replace(/_/g, ' ')\n        } else if (cfgObj.length === 8) {\n            this.imgNormal = cfgObj[3]\n            this.imgHover = cfgObj[4]\n            this.imgPressed = cfgObj[5]\n            this.tooltip = cfgObj[6]\n        } else {\n            console.warn('Unexpected cfg object length: ' + cfgObj.length)\n        }\n        this.target = cfgObj[cfgObj.length - 1]\n    }\n\n}\n","export class BaseConfig {\n\n    static setFromCfg(config: BaseConfig, cfgObj: any) {\n        Object.keys(cfgObj).forEach((cfgKey) => {\n            const lCfgKeyName = (cfgKey.startsWith('!') ? cfgKey.substring(1) : cfgKey).toLowerCase()\n            const found = Object.keys(config).some((objKey) => {\n                return config.assignValue(objKey, lCfgKeyName, cfgObj[cfgKey])\n            })\n            if (!found) {\n                console.warn('cfg key does not exist: ' + cfgKey)\n            }\n        })\n        return config\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            this[objKey] = this.parseValue(lCfgKeyName, cfgValue)\n            return true\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return cfgValue\n    }\n\n    parseLabel(cfgValue) {\n        return cfgValue.replace(/_/g, ' ')\n    }\n\n}\n","import { MainMenuItemCfg } from './MainMenuItemCfg'\nimport { BaseConfig } from './BaseConfig'\n\nexport class MenuCfg extends BaseConfig {\n\n    fullName: string = ''\n    title: string = ''\n    position: [number, number] = [0, 0]\n    menuFont: string = ''\n    loFont: string = ''\n    hiFont: string = ''\n    itemCount: number = 0\n    menuImage: string = ''\n    autoCenter: boolean = false\n    displayTitle: boolean = false\n    overlays: any[] = []\n    playRandom: boolean = false\n    items: MainMenuItemCfg[] = []\n    anchored: boolean = false\n    canScroll: boolean = false\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName.match(/item\\d+/i)) {\n            this.items.push(new MainMenuItemCfg(cfgValue))\n            return true\n        } else if (lCfgKeyName.match(/overlay\\d+/i)) {\n            this.overlays.push(cfgValue)\n            return true\n        }\n        return super.assignValue(objKey, lCfgKeyName, cfgValue)\n    }\n\n}\n","import { MenuCfg } from './MenuCfg'\nimport { BaseConfig } from './BaseConfig'\n\nexport class MainMenuFullCfg extends BaseConfig {\n\n    menuCount: number = 0\n    menus: MenuCfg[] = []\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName.match(/menu\\d+/i)) {\n            this.menus.push(new MenuCfg(cfgValue))\n            return true\n        }\n        return super.assignValue(objKey, lCfgKeyName, cfgValue)\n    }\n\n}\n","export class ConfigColor {\n\n    r: number\n    g: number\n    b: number\n\n    constructor(values: number[]) {\n        [this.r, this.g, this.b] = values\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ConfigColor } from './ConfigColor'\n\nexport class LevelsCfg {\n\n    levelsByName: {} = []\n\n    constructor(cfgObj: any) {\n        Object.keys(cfgObj).forEach((levelKey) => {\n            if (!levelKey.startsWith('Tutorial') && !levelKey.startsWith('Level')) return // ignore incomplete test levels and duplicates\n            this.levelsByName[levelKey] = new LevelEntryCfg(cfgObj[levelKey])\n        })\n    }\n\n}\n\nexport class LevelEntryCfg extends BaseConfig {\n\n    fullName: string = ''\n    endGameAvi1: string = ''\n    endGameAvi2: string = ''\n    allowRename: boolean = false\n    recallOLObjects: boolean = false\n    generateSpiders: boolean = false\n    video: string = ''\n    disableEndTeleport: any = ''\n    disableStartTeleport: any = ''\n    emergeTimeOut: any = ''\n    boulderAnimation: any = ''\n    noMultiSelect: any = ''\n    noAutoEat: any = ''\n    disableToolTipSound: any = ''\n    blockSize: any = ''\n    digDepth: any = ''\n    roughLevel: any = ''\n    roofHeight: any = ''\n    useRoof: any = ''\n    selBoxHeight: any = ''\n    fpRotLightRGB: any = ''\n    fogColourRGB: any = ''\n    highFogColourRGB: any = ''\n    fogRate: number = 0\n    fallinMultiplier: number = 0\n    numberOfLandSlidesTillCaveIn: number = 0\n    noFallins: boolean = false\n    oxygenRate: number = 0 // 0 - 100\n    surfaceMap: string = ''\n    predugMap: string = ''\n    terrainMap: string = ''\n    emergeMap: string = ''\n    erodeMap: string = ''\n    fallinMap: string = ''\n    blockPointersMap: string = ''\n    cryOreMap: string = ''\n    pathMap: string = ''\n    noGather: boolean = false\n    textureSet: string = ''\n    rockFallStyle: any = ''\n    emergeCreature: any = ''\n    safeCaverns: any = ''\n    seeThroughWalls: any = ''\n    oListFile: any = ''\n    ptlFile: any = ''\n    nerpFile: any = ''\n    nerpMessageFile: any = ''\n    objectiveText: any = ''\n    objectiveImage640x480: any = ''\n    erodeTriggerTime: number = 0\n    erodeErodeTime: number = 0\n    erodeLockTime: number = 0\n    nextLevel: any = ''\n    levelLinks: any = ''\n    frontEndX: number = 0\n    frontEndY: number = 0\n    frontEndOpen: boolean = false\n    priorities: LevelPrioritiesConfig = null\n    reward: LevelRewardConfig = null\n    menuBMP: string[] = []\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        return super.assignValue(objKey, lCfgKeyName, cfgValue)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        if (lCfgKeyName === 'fullName'.toLowerCase()) {\n            return this.parseLabel(cfgValue)\n        } else if (lCfgKeyName.endsWith('rgb')) {\n            return new ConfigColor(cfgValue)\n        } else if (lCfgKeyName === 'priorities') {\n            return new LevelPrioritiesConfig(cfgValue)\n        } else if (lCfgKeyName === 'reward') {\n            return new LevelRewardConfig(cfgValue)\n        } else {\n            return super.parseValue(lCfgKeyName, cfgValue)\n        }\n    }\n\n}\n\nexport class LevelPrioritiesConfig extends BaseConfig {\n\n    AI_Priority_Crystal: boolean = true\n    AI_Priority_Destruction: boolean = true\n    AI_Priority_Clearing: boolean = true\n    AI_Priority_Ore: boolean = true\n    AI_Priority_Repair: boolean = true\n    AI_Priority_GetIn: boolean = true\n    AI_Priority_Construction: boolean = true\n    AI_Priority_Reinforce: boolean = true\n    AI_Priority_GetTool: boolean = true\n    AI_Priority_Train: boolean = true\n    AI_Priority_Recharge: boolean = true\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n}\n\nexport class LevelRewardConfig extends BaseConfig {\n\n    enable: boolean = true\n    modifier: number = null\n    importance: LevelRewardImportanceConfig = null\n    quota: LevelRewardQuotaConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        if (lCfgKeyName === 'importance') {\n            return new LevelRewardImportanceConfig(cfgValue)\n        } else if (lCfgKeyName === 'quota') {\n            return new LevelRewardQuotaConfig(cfgValue)\n        } else {\n            return super.parseValue(lCfgKeyName, cfgValue)\n        }\n    }\n}\n\nexport class LevelRewardImportanceConfig extends BaseConfig {\n\n    crystals: number = 0\n    timer: number = 0\n    caverns: number = 0\n    constructions: number = 0\n    oxygen: number = 0\n    figures: number = 0\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n}\n\nexport class LevelRewardQuotaConfig extends BaseConfig {\n\n    crystals: number = null\n    timer: number = null\n    caverns: number = null\n    constructions: number = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\n\nexport class RewardCfg extends BaseConfig {\n\n    display: boolean = true\n    wallpaper: string = ''\n    images: RewardImageCfg[] = []\n    texts: RewardTextCfg[] = []\n    boxImages: RewardImageCfg[] = []\n    fonts: RewardFontsCfg = null\n    flics: { flhFilepath: string, x: number, y: number, w: number, h: number } = null\n    scrollSpeed: number = 0\n    centreText: boolean = false\n    vertSpacing: number = 0\n    backFont: string = ''\n    font: string = ''\n    titleFont: string = ''\n    timer: number = 0\n    saveButton: any = ''\n    advanceButton: any = ''\n    completeText: string = ''\n    failedText: string = ''\n    quitText: string = ''\n    textPos: [number, number] = [0, 0]\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName === 'images') {\n            Object.values(cfgValue).forEach((imgConf) => this.images.push(new RewardImageCfg(imgConf)))\n            return true\n        } else if (lCfgKeyName === 'text') {\n            Object.values(cfgValue).forEach((imgConf) => this.texts.push(new RewardTextCfg(imgConf)))\n            return true\n        } else if (lCfgKeyName === 'boximages') {\n            Object.values(cfgValue).forEach((imgConf) => this.boxImages.push(new RewardImageCfg(imgConf)))\n            return true\n        } else if (lCfgKeyName === 'fonts') {\n            this.fonts = new RewardFontsCfg(cfgValue)\n            return true\n        } else {\n            return super.assignValue(objKey, lCfgKeyName, cfgValue)\n        }\n    }\n\n}\n\nexport class RewardImageCfg {\n\n    filePath: string = ''\n    x: number = 0\n    y: number = 0\n\n    constructor(cfgObj: any) {\n        [this.filePath, this.x, this.y] = cfgObj\n    }\n\n}\n\nexport class RewardTextCfg {\n\n    text: string = ''\n    x: number = 0\n    y: number = 0\n\n    constructor(cfgObj: any) {\n        [this.text, this.x, this.y] = cfgObj\n    }\n\n}\n\nexport class RewardFontsCfg extends BaseConfig {\n\n    crystals: string = ''\n    ore: string = ''\n    diggable: string = ''\n    constructions: string = ''\n    caverns: string = ''\n    figures: string = ''\n    rockMonsters: string = ''\n    oxygen: string = ''\n    timer: string = ''\n    score: string = ''\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n}\n","import { CfgFileParser } from './CfgFileParser'\nimport { WadFile } from './WadFile'\nimport { getFilename, getPath, iGet } from './WadUtil'\nimport { RonFile } from './RonFile'\nimport { AlphaBitmapDecoder } from './AlphaBitmapDecoder'\nimport { MainMenuFullCfg } from '../../cfg/MainMenuFullCfg'\nimport { LevelEntryCfg, LevelsCfg } from '../../cfg/LevelsCfg'\nimport { RewardCfg } from '../../cfg/RewardCfg'\n\nexport class WadLoader {\n\n    wad0File: WadFile = null\n    wad1File: WadFile = null\n    startTime: Date\n    assetIndex: number = 0\n    totalResources: number = 0\n    assetsFromCfg: any[]\n    assetsFromCfgByName: {}\n\n    onMessage: (msg: string) => any = (msg: string) => {\n        console.log(msg)\n    }\n    onInitialLoad: (totalResources: number, cfg: any) => any = () => {\n        console.log('Initial loading done.')\n    }\n    onAssetLoaded: (assetIndex: number, assetName: string, assetObj: any) => any = () => {\n    }\n    onLoadDone: (totalResources: number, loadingTimeSeconds: string) => any = (totalResources: number, loadingTimeSeconds: string) => {\n        console.log('Loading of about ' + totalResources + ' assets complete! Total load time: ' + loadingTimeSeconds + ' seconds.')\n    }\n\n    loadWadImageAsset(name: string, callback: (obj: ImageData) => any) {\n        const data = this.wad0File.getEntryData(name)\n        const imgData = AlphaBitmapDecoder.parse(data)\n        callback(imgData)\n    }\n\n    loadWadTexture(name: string, callback: (obj: ImageData) => any) {\n        function isTranslucentTexture(name): boolean { // TODO check for better approach\n            const filename = getFilename(name)\n            return !!filename.match(/\\d\\d\\d\\..+$/i) || !!filename.match(/^trans/i)\n                || !!filename.match(/telepulse/i) || !!filename.match(/^t_/i)\n                || !!filename.includes('crystalglow') || !!filename.match(/^glin/i)\n                || !!filename.match(/glow.bmp/i) || !!filename.match(/spankle/i)\n        }\n\n        function isAlphaTexture(name): boolean { // TODO check for better approach\n            return !!getFilename(name).match(/^a.+/i)\n        }\n\n        const data = this.wad0File.getEntryData(name)\n        const imgData = AlphaBitmapDecoder.parse(data)\n        if (isTranslucentTexture(name)) {\n            for (let n = 0; n < imgData.data.length; n += 4) {\n                if (imgData.data[n] === 255 && imgData.data[n + 1] === 255 && imgData.data[n + 2] === 255) {\n                    // TODO BitmapDecoder not working for sequence textures, surrounding color is white instead of black\n                    imgData.data[n + 3] = 0\n                } else {\n                    imgData.data[n + 3] = Math.max(imgData.data[n], imgData.data[n + 1], imgData.data[n + 2])\n                }\n            }\n        } else if (isAlphaTexture(name)) {\n            const alpha = { // last pixel defines alpha color\n                r: imgData.data[imgData.data.length - 4],\n                g: imgData.data[imgData.data.length - 3],\n                b: imgData.data[imgData.data.length - 2],\n            }\n            for (let n = 0; n < imgData.data.length; n += 4) {\n                if (imgData.data[n] === alpha.r && imgData.data[n + 1] === alpha.g && imgData.data[n + 2] === alpha.b) {\n                    imgData.data[n + 3] = 0\n                }\n            }\n        }\n        callback(imgData)\n    }\n\n    loadAlphaImageAsset(name: string, callback: (obj: ImageData) => any) {\n        const data = this.wad0File.getEntryData(name)\n        const imgData = AlphaBitmapDecoder.parse(data)\n        for (let n = 0; n < imgData.data.length; n += 4) {\n            if (imgData.data[n] <= 2 && imgData.data[n + 1] <= 2 && imgData.data[n + 2] <= 2) { // Interface/Reward/RSoxygen.bmp uses 2/2/2 as \"black\" alpha background\n                imgData.data[n + 3] = 0\n            }\n        }\n        callback(imgData)\n    }\n\n    loadFontImageAsset(name, callback) {\n        const data = this.wad0File.getEntryData(name)\n        const imgData = AlphaBitmapDecoder.parse(data)\n        callback(imgData)\n    }\n\n    loadNerpAsset(name, callback) {\n        name = name.replace(/.npl$/, '.nrn')\n        const script = this.wad0File.getEntryText(name)\n        callback(script)\n    }\n\n    parseNerpMsgFile(wadFile, name) {\n        const result = []\n        const lines = wadFile.getEntryText(name).split('\\n')\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c].trim()\n            if (line.length < 1 || line === '-') {\n                continue\n            }\n            // line formatting differs between wad0 and wad1 files!\n            const txt0Match = line.match(/\\\\\\[([^\\\\]+)\\\\](\\s*#([^#]+)#)?/)\n            const txt1Match = line.match(/^([^$][^#]+)(\\s*#([^#]+)#)?/)\n            const sndMatch = line.match(/\\$([^\\s]+)\\s*([^\\s]+)/)\n            if (wadFile === this.wad0File && txt0Match) {\n                const index = txt0Match[3] !== undefined ? this.numericNameToNumber(txt0Match[3]) : c // THIS IS MADNESS! #number# at the end of line is OPTIONAL\n                result[index] = result[index] || {}\n                result[index].txt = txt0Match[1]\n            } else if (wadFile === this.wad1File && txt1Match) {\n                const index = txt1Match[3] !== undefined ? this.numericNameToNumber(txt1Match[3]) : c // THIS IS MADNESS! #number# at the end of line is OPTIONAL\n                result[index] = result[index] || {}\n                result[index].txt = txt1Match[1].replace(/_/g, ' ').trim()\n            } else if (sndMatch && sndMatch.length === 3) {\n                const index = this.numericNameToNumber(sndMatch[1])\n                result[index] = result[index] || {}\n                result[index].snd = sndMatch[2].replace(/\\\\/g, '/')\n            } else {\n                throw 'Line in nerps message file did not match anything'\n            }\n        }\n        return result\n    }\n\n    numericNameToNumber(name) {\n        if (name === undefined) {\n            throw 'Numeric name must not be undefined'\n        }\n        const digits = {one: 1, two: 2, three: 3, four: 4, five: 5, six: 6, seven: 7, eight: 8, nine: 9}\n        const specials = {\n            ten: 10, eleven: 11, twelve: 12, thirteen: 13, fourteen: 14, fifteen: 15,\n            sixteen: 16, seventeen: 17, eighteen: 18, nineteen: 19,\n        }\n        const tens = {twenty: 20, thirty: 30, forty: 40}\n        let number = specials[name] || digits[name]\n        if (number === undefined) {\n            Object.keys(tens).forEach(ten => {\n                if (name.startsWith(ten)) {\n                    const digitName = name.replace(ten, '')\n                    number = tens[ten] + (digitName ? digits[digitName] : 0)\n                }\n            })\n        }\n        if (number === undefined) {\n            throw 'Found unexpected numeric name ' + name\n        }\n        return number\n    }\n\n    loadNerpMsg(name, callback) {\n        const result = this.parseNerpMsgFile(this.wad0File, name)\n        const msg1 = this.parseNerpMsgFile(this.wad1File, name)\n        for (let c = 0; c < msg1.length; c++) {\n            const m1 = msg1[c]\n            if (!m1) continue\n            if (m1.txt) {\n                result[c].txt = m1.txt\n            }\n            if (m1.snd) {\n                result[c].snd = m1.snd\n            }\n        }\n        callback(result)\n    }\n\n    loadMapAsset(name, callback) {\n        const buffer = this.wad0File.getEntryData(name)\n        if (buffer.length < 13 || String.fromCharCode.apply(String, buffer.slice(0, 3)) !== 'MAP') {\n            console.log('Invalid map data provided')\n            return\n        }\n        const map = {width: buffer[8], height: buffer[12], level: []}\n        let row = []\n        for (let seek = 16; seek < buffer.length; seek += 2) {\n            row.push(buffer[seek])\n            if (row.length >= map.width) {\n                map.level.push(row)\n                row = []\n            }\n        }\n        callback(map)\n    }\n\n    loadObjectListAsset(name, callback) {\n        const lines = this.wad0File.getEntryText(name).split('\\n')\n        const objectList = []\n        let currentObject = null\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c].trim()\n            const objectStartMatch = line.match(/(.+)\\s+{/)\n            const drivingMatch = line.match(/driving\\s+(.+)/)\n            if (line.length < 1 || line.startsWith(';') || line.startsWith('Lego*')) {\n                // ignore empty lines, comments and the root object\n            } else if (objectStartMatch) {\n                currentObject = {}\n                objectList[objectStartMatch[1]] = currentObject\n            } else if (line === '}') {\n                currentObject = null\n            } else if (drivingMatch) {\n                currentObject.driving = drivingMatch[1]\n            } else {\n                const split = line.split(/\\s+/)\n                if (split.length !== 2 || currentObject === null) {\n                    throw 'Unexpected key value entry: ' + line\n                }\n                const key = split[0]\n                let val: any = split[1]\n                if (key === 'xPos' || key === 'yPos' || key === 'heading') {\n                    val = parseFloat(val)\n                } else if (key !== 'type') {\n                    throw 'Unexpected key value entry: ' + line\n                }\n                currentObject[key] = val\n            }\n        }\n        callback(objectList)\n    }\n\n    /**\n     * Load a WAV file format sound asset from the WAD file.\n     * @param path Path inside the WAD file\n     * @param callback A callback that is triggered after the file has been loaded\n     * @param key Optional key to store the sound, should look like SND_pilotdrill\n     */\n    loadWavAsset(path, callback, key) {\n        console.error('wav asset loading not yet implemented') // TODO implement this\n        // const snd = document.createElement('audio');\n        // if (callback != null) {\n        //     snd.oncanplay = function () {\n        //         snd.oncanplay = null; // otherwise the callback is triggered multiple times\n        //         const keyPath = key || path;\n        //         // use array, because sounds have multiple variants sometimes\n        //         ResourceManager.sounds[keyPath] = ResourceManager.sounds[keyPath] || [];\n        //         ResourceManager.sounds[keyPath].push(snd);\n        //         callback();\n        //     };\n        // }\n        // // try (localized) wad1 file first, then use generic wad0 file\n        // try {\n        //     snd.src = this.wad1File.getEntryUrl(path);\n        // } catch (e) {\n        //     snd.src = this.wad0File.getEntryUrl(path);\n        // }\n    }\n\n    // loadAnimatedEntity(aeFile: string, callback) {\n    //     const content = this.wad0File.getEntryText(aeFile);\n    //     const cfgRoot = iGet(new RonFile().parse(content), 'Lego*');\n    //     console.error('Animated entity loading not yet implemented');\n    //     AnimEntityLoader.loadModels(aeFile, cfgRoot);\n    //     // callback(entity);\n    // }\n\n    loadLWOFile(lwoFilepath, callback) {\n        let lwoContent\n        try {\n            lwoContent = this.wad0File.getEntryBuffer(lwoFilepath)\n        } catch (e) {\n            // console.log('load failed for ' + subObj.filename + ' trying shared path at ' + sharedPath + filename + '; error: ' + e); // TODO debug logging\n            try {\n                lwoContent = this.wad0File.getEntryBuffer('world/shared/' + getFilename(lwoFilepath))\n            } catch (e) {\n                console.error('Could not load LWO file ' + lwoFilepath + '; Error: ' + e)\n                return\n            }\n        }\n        callback(lwoContent.buffer)\n    }\n\n    registerAllAssets(mainConf) { // dynamically register all assets from config\n        // add fonts and cursors\n        this.addAssetFolder(this.loadFontImageAsset, 'Interface/Fonts/')\n        this.addAssetFolder(this.loadAlphaImageAsset, 'Interface/Pointers/')\n        // add menu assets\n        const menuFullCfg = new MainMenuFullCfg(iGet(mainConf, 'Menu', 'MainMenuFull'))\n        this.onAssetLoaded(0, 'MainMenuFull', menuFullCfg)\n        menuFullCfg.menus.forEach((menuCfg) => {\n            this.addAsset(this.loadWadImageAsset, menuCfg.menuImage)\n            this.addAsset(this.loadFontImageAsset, menuCfg.menuFont)\n            this.addAsset(this.loadFontImageAsset, menuCfg.loFont)\n            this.addAsset(this.loadFontImageAsset, menuCfg.hiFont)\n        })\n        // add ingame assets\n        this.addAlphaImageFolder('Interface/TopPanel/') // top panel\n        this.addAlphaImageFolder('Interface/RightPanel/') // crystal side bar\n        this.addAlphaImageFolder('Interface/RadarPanel/')\n        this.addAlphaImageFolder('Interface/MessagePanel/')\n        this.addAsset(this.loadWadImageAsset, 'Interface/Airmeter/msgpanel_air_juice.bmp')\n        this.addAlphaImageFolder('Interface/InfoPanel/')\n        this.addAlphaImageFolder('Interface/PriorityPanel/')\n        this.addAlphaImageFolder('Interface/Priorities')\n        this.addAlphaImageFolder('Interface/CameraControl/')\n        this.addAlphaImageFolder('Interface/MessageTabs/')\n        this.addAlphaImageFolder('Interface/IconPanel/')\n        this.addAlphaImageFolder('Interface/Icons/')\n        this.addAlphaImageFolder('Interface/Menus/')\n        this.addAssetFolder(this.loadWadImageAsset, 'Interface/FrontEnd/lp_')\n        this.addAsset(this.loadAlphaImageAsset, 'Interface/FrontEnd/LowerPanel.bmp')\n        // level files\n        this.addAsset(this.loadNerpAsset, 'Levels/nerpnrn.h')\n        const levelsCfg = new LevelsCfg(iGet(mainConf, 'Levels'))\n        this.onAssetLoaded(0, 'Levels', levelsCfg)\n        Object.values(levelsCfg.levelsByName).forEach((level: LevelEntryCfg) => {\n            level.menuBMP.forEach((bmpName) => {\n                this.addAsset(this.loadAlphaImageAsset, bmpName)\n            })\n            this.addAsset(this.loadMapAsset, level.surfaceMap)\n            this.addAsset(this.loadMapAsset, level.predugMap)\n            this.addAsset(this.loadMapAsset, level.terrainMap)\n            this.addAsset(this.loadMapAsset, level.blockPointersMap, true)\n            this.addAsset(this.loadMapAsset, level.cryOreMap)\n            this.addAsset(this.loadMapAsset, level.pathMap, true)\n            if (level.fallinMap) this.addAsset(this.loadMapAsset, level.fallinMap)\n            if (level.erodeMap) this.addAsset(this.loadMapAsset, level.erodeMap)\n            this.addAsset(this.loadObjectListAsset, level.oListFile)\n            this.addAsset(this.loadNerpAsset, level.nerpFile)\n            this.addAsset(this.loadNerpMsg, level.nerpMessageFile)\n        })\n        // load all shared textures\n        this.addTextureFolder('World/Shared/')\n        // load all building types\n        const buildingTypes = mainConf['BuildingTypes']\n        Object.values(buildingTypes).forEach((bType: string) => {\n            const bName = bType.split('/')[1]\n            const aeFile = bType + '/' + bName + '.ae'\n            this.addAnimatedEntity(aeFile)\n        })\n        this.addAnimatedEntity('mini-figures/pilot/pilot.ae')\n        // load misc objects\n        this.addAnimatedEntity(iGet(mainConf, 'MiscObjects', 'Dynamite') + '/Dynamite.ae')\n        this.addAsset(this.loadLWOFile, 'World/Shared/Crystal.lwo') // highpoly version, but unused?\n        this.addAsset(this.loadLWOFile, iGet(mainConf, 'MiscObjects', 'Crystal') + '.lwo')\n        this.addTextureFolder('MiscAnims/Crystal/')\n        const orePath = iGet(mainConf, 'MiscObjects', 'Ore')\n        this.addAsset(this.loadLWOFile, orePath + '.lwo')\n        this.addAsset(this.loadWadTexture, 'MiscAnims/Ore/Ore.bmp') // TODO this could be extracted from LWO file\n        this.addAsset(this.loadLWOFile, 'World/Shared/Brick.lwo')\n        this.addAsset(this.loadLWOFile, iGet(mainConf, 'MiscObjects', 'ProcessedOre') + '.lwo')\n        this.addAnimatedEntity(iGet(mainConf, 'MiscObjects', 'Barrier') + '/Barrier.ae')\n        this.addAnimatedEntity('MiscAnims/Dynamite/Dynamite.ae')\n        this.addLWSFile('MiscAnims/RockFall/Rock3Sides.lws')\n        this.addTextureFolder('MiscAnims/RockFall/')\n        // spaces\n        this.addTextureFolder('World/WorldTextures/IceSplit/Ice')\n        this.addTextureFolder('World/WorldTextures/LavaSplit/Lava')\n        this.addTextureFolder('World/WorldTextures/RockSplit/Rock')\n        // reward screen\n        const rewardCfg = new RewardCfg(iGet(mainConf, 'Reward'))\n        this.onAssetLoaded(0, 'Reward', rewardCfg)\n        this.addAsset(this.loadWadImageAsset, rewardCfg.wallpaper)\n        this.addAsset(this.loadFontImageAsset, rewardCfg.backFont)\n        Object.values(rewardCfg.fonts).forEach(imgPath => this.addAsset(this.loadFontImageAsset, imgPath))\n        rewardCfg.images.forEach(img => this.addAsset(this.loadAlphaImageAsset, img.filePath))\n        rewardCfg.boxImages.forEach(img => this.addAsset(this.loadWadImageAsset, img.filePath))\n        rewardCfg.saveButton.splice(0, 4).forEach(img => this.addAsset(this.loadWadImageAsset, img))\n        rewardCfg.advanceButton.splice(0, 4).forEach(img => this.addAsset(this.loadWadImageAsset, img))\n        // rewardConf['SaveButton'].slice(0, 4).forEach(imgPath => {\n        //     this.addAsset(this.loadWadImageAsset, imgPath);\n        // });\n        // rewardConf['AdvanceButton'].slice(0, 4).forEach(imgPath => {\n        //     this.addAsset(this.loadWadImageAsset, imgPath);\n        // });\n        // // pause screen\n        // const pauseConf = mainConf['Menu']['PausedMenu'];\n        // this.addAsset(this.loadAlphaImageAsset, pauseConf['Menu1']['MenuImage'][0]);\n        // this.addAsset(this.loadFontImageAsset, pauseConf['Menu1']['MenuFont']);\n        // this.addAsset(this.loadFontImageAsset, pauseConf['Menu1']['HiFont']);\n        // this.addAsset(this.loadFontImageAsset, pauseConf['Menu1']['LoFont']);\n        // this.addAsset(this.loadAlphaImageAsset, 'Interface/FrontEnd/Vol_OffBar.bmp');\n        // this.addAsset(this.loadAlphaImageAsset, 'Interface/FrontEnd/Vol_OnBar.bmp');\n        // this.addAsset(this.loadAlphaImageAsset, 'Interface/FrontEnd/Vol_Leftcap.bmp');\n        // this.addAsset(this.loadAlphaImageAsset, 'Interface/FrontEnd/Vol_Rightcap.bmp');\n        // this.addAsset(this.loadAlphaImageAsset, 'Interface/FrontEnd/Vol_Plus.bmp');\n        // this.addAsset(this.loadAlphaImageAsset, 'Interface/FrontEnd/Vol_Minus.bmp');\n        // this.addAsset(this.loadAlphaImageAsset, 'Interface/FrontEnd/Vol_PlusHi.bmp');\n        // this.addAsset(this.loadAlphaImageAsset, 'Interface/FrontEnd/Vol_MinusHi.bmp');\n        // // sounds\n        // const samplesConf = mainConf['Samples'];\n        // Object.keys(samplesConf).forEach(sndKey => {\n        //     let sndPath = samplesConf[sndKey] + '.wav';\n        //     if (sndKey.startsWith('!')) { // TODO no clue what this means... loop? duplicate?!\n        //         sndKey = sndKey.slice(1);\n        //     }\n        //     if (sndPath.startsWith('*')) { // TODO no clue what this means... don't loop, see telportup\n        //         sndPath = sndPath.slice(1);\n        //     } else if (sndPath.startsWith('@')) {\n        //         // sndPath = sndPath.slice(1);\n        //         // console.warn('Sound ' + sndPath + ' must be loaded from program files folder. Not yet implemented!');\n        //         return;\n        //     }\n        //     sndPath.split(',').forEach(sndPath => {\n        //         this.addAsset(this.loadWavAsset, sndPath, false, sndKey);\n        //     });\n        // });\n    }\n\n    addAnimatedEntity(aeFile: string) {\n        const content = this.wad0File.getEntryText(aeFile)\n        const cfgRoot = iGet(new RonFile().parse(content), 'Lego*')\n        this.onAssetLoaded(0, aeFile, cfgRoot)\n        const path = getPath(aeFile);\n        ['HighPoly', 'MediumPoly', 'LowPoly'].forEach((polyType) => { // TODO add 'FPPoly' (contains two cameras)\n            const cfgPoly = iGet(cfgRoot, polyType)\n            if (cfgPoly) {\n                Object.keys(cfgPoly).forEach((key) => {\n                    this.addAsset(this.loadLWOFile, path + cfgPoly[key] + '.lwo')\n                })\n            }\n        })\n        const activities = iGet(cfgRoot, 'Activities')\n        if (activities) {\n            Object.keys(activities).forEach((activity) => {\n                try {\n                    let keyname = iGet(activities, activity)\n                    const act = iGet(cfgRoot, keyname)\n                    const file = iGet(act, 'FILE')\n                    const isLws = iGet(act, 'LWSFILE') === true\n                    if (isLws) {\n                        this.addLWSFile(path + file + '.lws')\n                    } else {\n                        console.error('Found activity which is not an LWS file')\n                    }\n                } catch (e) {\n                    console.error(e)\n                    console.log(cfgRoot)\n                    console.log(activities)\n                    console.log(activity)\n                }\n            })\n        }\n        // load all textures for this type\n        this.addTextureFolder(getPath(aeFile))\n    }\n\n    addLWSFile(lwsFilepath: string) {\n        const content = this.wad0File.getEntryText(lwsFilepath)\n        this.onAssetLoaded(0, lwsFilepath, content)\n        const lwoFiles: string[] = this.extractLwoFiles(getPath(lwsFilepath), content)\n        lwoFiles.forEach((lwoFile) => this.addAsset(this.loadLWOFile, lwoFile))\n    }\n\n    extractLwoFiles(path: string, content: string): string[] {\n        const lines: string[] = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map((l) => l.trim())\n\n        if (lines[0] !== 'LWSC') {\n            throw 'Invalid start of file! Expected \\'LWSC\\' in first line'\n        }\n\n        return lines.filter((line) => line.toLowerCase().startsWith('LoadObject '.toLowerCase()))\n            .map((objLine) => path + getFilename(objLine.substring('LoadObject '.length)).toLowerCase())\n    }\n\n    addAlphaImageFolder(folderPath) {\n        this.addAssetFolder(this.loadAlphaImageAsset, folderPath)\n    }\n\n    addTextureFolder(folderPath) {\n        this.addAssetFolder(this.loadWadTexture, folderPath)\n    }\n\n    addAssetFolder(callback, folderPath) {\n        this.wad0File.filterEntryNames(folderPath + '.+\\\\.bmp').forEach((assetPath) => {\n            this.addAsset(callback, assetPath)\n        })\n    }\n\n    addAsset(method, assetPath, optional = false) {\n        if (!assetPath || this.assetsFromCfgByName.hasOwnProperty(assetPath.toLowerCase()) || assetPath === 'NULL') {\n            return // do not load assets twice\n        }\n        this.assetsFromCfgByName[assetPath] = {\n            method: method.bind(this),\n            assetPath: assetPath,\n            optional: optional,\n        }\n    }\n\n    loadAssetsParallel() {\n        const promises = []\n        const that = this\n        this.assetsFromCfg.forEach((asset) => {\n            promises.push(new Promise<void>((resolve) => {\n                try {\n                    asset.method(asset.assetPath, (assetObj) => {\n                        this.assetIndex++\n                        that.onAssetLoaded(this.assetIndex, asset.assetPath, assetObj)\n                        resolve()\n                    }, asset.assetKey)\n                } catch (e) {\n                    if (!asset.optional) throw e\n                    this.assetIndex++\n                    that.onAssetLoaded(this.assetIndex, asset.assetPath, null)\n                    resolve()\n                }\n            }))\n        })\n        Promise.all(promises).then(() => {\n            // indicate that loading has finished, and display the total loading time\n            const loadingTimeSeconds = ((new Date().getTime() - this.startTime.getTime()) / 1000).toFixed(3).toString()\n            this.onLoadDone(this.totalResources, loadingTimeSeconds)\n        })\n    }\n\n    startWithCachedFiles(onCacheMiss: () => any) {\n        this.startTime = new Date()\n        const _onerror = () => {\n            this.onMessage('WAD files not found in cache')\n            onCacheMiss()\n        }\n        this.onMessage('Loading WAD files from cache...')\n        const that = this\n        this.openLocalCache((objectStore) => {\n            const request1 = objectStore.get('wad0')\n            request1.onerror = _onerror\n            request1.onsuccess = function () {\n                if (request1.result === undefined) {\n                    _onerror()\n                    return\n                }\n                // console.log('First WAD file loaded from cache after ' + ((new Date().getTime() - that.startTime.getTime()) / 1000));\n                that.wad0File = new WadFile()\n                for (let prop in request1.result) { // class info are runtime info and not stored in cache => use copy constructor\n                    if (request1.result.hasOwnProperty(prop)) {\n                        that.wad0File[prop] = request1.result[prop]\n                    }\n                }\n                const request2 = objectStore.get('wad1')\n                request2.onerror = _onerror\n                request2.onsuccess = function () {\n                    if (request2.result === undefined) {\n                        _onerror()\n                        return\n                    }\n                    that.wad1File = new WadFile()\n                    for (let prop in request2.result) { // class info are runtime info and not stored in cache => use copy constructor\n                        if (request2.result.hasOwnProperty(prop)) {\n                            that.wad1File[prop] = request2.result[prop]\n                        }\n                    }\n                    console.log('WAD files loaded from cache after ' + ((new Date().getTime() - that.startTime.getTime()) / 1000))\n                    that.startLoadingProcess()\n                }\n            }\n        })\n    }\n\n    /**\n     * Private helper method, which combines file loading and waits for them to become ready before continuing\n     * @param wad0Url Url to parse the LegoRR0.wad file from\n     * @param wad1Url Url to parse the LegoRR1.wad file from\n     */\n    loadWadFiles(wad0Url, wad1Url) {\n        const that = this\n        Promise.all([this.loadWadFile(wad0Url), this.loadWadFile(wad1Url)]).then(wadFiles => {\n            that.wad0File = wadFiles[0] as WadFile\n            that.wad1File = wadFiles[1] as WadFile\n            this.openLocalCache((objectStore) => {\n                objectStore.put(that.wad0File, 'wad0')\n                objectStore.put(that.wad1File, 'wad1')\n            })\n            this.startLoadingProcess()\n        })\n    }\n\n    /**\n     * Read WAD file as binary blob from the given URL and parse it on success\n     * @param url the url to the WAD file, can be local file url (file://...) too\n     */\n    loadWadFile(url) {\n        return new Promise(resolve => {\n            console.log('Loading WAD file from ' + url)\n            fetch(url).then((response) => {\n                if (response.ok) {\n                    response.arrayBuffer().then((buffer) => {\n                        const wadFile = new WadFile()\n                        wadFile.parseWadFile(buffer)\n                        resolve(wadFile)\n                    })\n                }\n            }) // TODO error handling\n        })\n    }\n\n    openLocalCache(onopen) {\n        const request: IDBOpenDBRequest = indexedDB.open('RockRaidersWeb')\n        request.onupgradeneeded = function () {\n            const db = request.result\n            if (db.objectStoreNames.contains('wadfiles')) {\n                db.deleteObjectStore('wadfiles')\n            }\n            db.createObjectStore('wadfiles')\n        }\n        request.onsuccess = function () {\n            const db = request.result\n            const transaction = db.transaction(['wadfiles'], 'readwrite')\n            const objectStore = transaction.objectStore('wadfiles')\n            onopen(objectStore)\n        }\n    }\n\n    /**\n     * Load essential files, to begin the chain of asset loading\n     */\n    startLoadingProcess() {\n        this.startTime = new Date()\n        this.assetsFromCfgByName = {}\n        this.onMessage('Loading configuration...')\n        const cfg = CfgFileParser.parse(this.wad1File.getEntryData('Lego.cfg'))\n        this.registerAllAssets(cfg)\n        this.onMessage('Loading initial assets...')\n        Promise.all([\n            new Promise<void>((resolve) => {\n                const name = iGet(cfg, 'Main', 'LoadScreen') // loading screen image\n                this.loadWadImageAsset(name, (imgData) => {\n                    this.onAssetLoaded(0, name, imgData)\n                    resolve()\n                })\n            }),\n            new Promise<void>((resolve) => {\n                const name = iGet(cfg, 'Main', 'ProgressBar') // loading bar container image\n                this.loadWadImageAsset(name, (imgData) => {\n                    this.onAssetLoaded(0, name, imgData)\n                    resolve()\n                })\n            }),\n            new Promise<void>((resolve) => {\n                const name = iGet(cfg, 'Pointers', 'Pointer_Standard')\n                this.loadAlphaImageAsset(name, (imgData) => {\n                    this.onAssetLoaded(0, name, imgData)\n                    resolve()\n                })\n            }),\n        ]).then(() => {\n            this.onMessage('Start loading assets...')\n            this.assetsFromCfg = Object.values(this.assetsFromCfgByName)\n            this.totalResources = this.assetsFromCfg.length\n            this.onInitialLoad(this.totalResources, cfg)\n            this.assetIndex = 0\n            this.loadAssetsParallel()\n        })\n    }\n\n}\n","import { InitLoadingMessage } from './InitLoadingMessage'\nimport { WadLoader } from './WadLoader'\n\nconst resourceWorker: Worker = self as any\n\nresourceWorker.addEventListener('message', (event) => {\n    const wadLoader = new WadLoader()\n    // set callbacks on wadLoader\n    wadLoader.onMessage = (msg: string) => {\n        resourceWorker.postMessage({msg: msg})\n    }\n    wadLoader.onInitialLoad = (totalResources: number, cfg: any) => {\n        resourceWorker.postMessage({totalResources: totalResources, cfg: cfg})\n    }\n    wadLoader.onAssetLoaded = (assetIndex: number, assetName: string, assetObj: any) => {\n        resourceWorker.postMessage({assetIndex: assetIndex, assetName: assetName, assetObj: assetObj})\n    }\n    wadLoader.onLoadDone = (totalResources: number, loadingTimeSeconds: string) => {\n        resourceWorker.postMessage({\n            done: true,\n            totalResources: totalResources,\n            loadingTimeSeconds: loadingTimeSeconds,\n        })\n    }\n    // start loading\n    const msg = event.data as InitLoadingMessage\n    if (msg) {\n        wadLoader.loadWadFiles(msg.wad0FileUrl, msg.wad1FileUrl)\n    } else {\n        wadLoader.startWithCachedFiles(() => {\n            resourceWorker.postMessage({cacheMissed: true})\n        })\n    }\n})\n"],"sourceRoot":""}