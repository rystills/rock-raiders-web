{"version":3,"sources":["webpack://rock-raiders-web/./src/resource/wadworker/EncodingHelper.js","webpack://rock-raiders-web/./src/resource/wadworker/CfgFileParser.ts","webpack://rock-raiders-web/./src/resource/wadworker/WadFile.ts","webpack://rock-raiders-web/./src/resource/wadworker/WadUtil.ts","webpack://rock-raiders-web/./src/resource/wadworker/RonFile.ts","webpack://rock-raiders-web/./src/resource/wadworker/AlphaBitmapDecoder.ts","webpack://rock-raiders-web/./src/resource/wadworker/ObjectiveTextParser.ts","webpack://rock-raiders-web/./src/cfg/BaseConfig.ts","webpack://rock-raiders-web/./src/cfg/MenuLabelItemCfg.ts","webpack://rock-raiders-web/./src/cfg/MenuSliderItemCfg.ts","webpack://rock-raiders-web/./src/cfg/MenuCycleItemCfg.ts","webpack://rock-raiders-web/./src/cfg/MenuEntryCfg.ts","webpack://rock-raiders-web/./src/cfg/MenuCfg.ts","webpack://rock-raiders-web/./src/cfg/ConfigColor.ts","webpack://rock-raiders-web/./src/cfg/ObjectiveImageCfg.ts","webpack://rock-raiders-web/./src/cfg/LevelsCfg.ts","webpack://rock-raiders-web/./src/cfg/RewardCfg.ts","webpack://rock-raiders-web/./src/resource/wadworker/WorkerMessage.ts","webpack://rock-raiders-web/./src/resource/wadworker/WadLoader.ts","webpack://rock-raiders-web/./src/resource/wadworker/Resources.ts"],"names":["encodeChar","c","parse","buffer","result","ancestry","activeObject","isComment","keyVal","key","value","seek","length","charCode","charStr","String","fromCharCode","pop","push","parsed","CfgFileParser","parseValue","hasOwnProperty","stack","obj","Object","keys","forEach","val","Array","isArray","sub","values","levelConf","replace","splitShrink","sep","split","filter","map","num","Number","isNaN","lVal","toString","toLowerCase","includes","call","this","entryIndexByName","Map","fLength","fStart","parseWadFile","data","debug","dataView","DataView","Int8Array","pos","apply","slice","console","log","numberOfEntries","getInt32","bufferStart","i","set","getEntryData","entryName","Uint8Array","getEntryBuffer","getEntryText","TextDecoder","decode","index","get","filterEntryNames","regexStr","regex","RegExp","entry","match","getPath","url","strUrl","startsWith","substring","lastInd","lastIndexOf","getFilename","iGet","keyname","HeaderTypes","content","lines","l","indDoubleSlash","indexOf","indComment","trim","v","root","parseObj","start","lv","PARSING_STATE","toRGBA","bufferView","byteOffset","byteLength","bottomUp","flag","Error","locRed","locGreen","locBlue","locAlpha","parseHeader","parseRGBA","fileSize","readUInt32LE","reserved1","getUint16","reserved2","offset","headerSize","width","height","planes","bitPP","compression","rawSize","hr","vr","colors","importantColors","maskAlpha","maskRed","maskGreen","maskBlue","BITMAP_INFO_HEADER","BITMAP_V2_INFO_HEADER","BITMAP_V3_INFO_HEADER","BITMAP_V4_HEADER","BITMAP_V5_HEADER","len","palette","blue","green","red","quad","maskRedR","maskGreenR","maskBlueR","maskAlphaR","shiftedMaskRedL","shiftedMaskGreenL","shiftedMaskBlueL","shiftedMaskAlphaL","coloShift","shiftRed","x","shiftGreen","shiftBlue","shiftAlpha","bit1","bit4","bit8","bit16","bit24","bit32","lastLine","xLen","Math","ceil","mode","padding","scanImage","line","b","location","rgb","fill","lowNibble","a","y","setPixelData","first4","last4","loc","px","processPixel","getUint32","rgbIndex","decoder","BmpDecoder","Uint8ClampedArray","ImageData","setFromCfg","config","cfgObj","cfgKey","lCfgKeyName","some","objKey","assignValue","warn","cfgValue","actionName","label","target","join","imgNormal","imgHover","imgPressed","tooltip","description","min","max","imgOff","imgOn","imgLeft","imgRight","btnRightNormal","btnLeftNormal","btnRightHover","btnLeftHover","two","labelOff","labelOn","fullName","title","position","menuFont","loFont","hiFont","itemCount","menuImage","autoCenter","displayTitle","overlays","playRandom","itemsLabel","itemsSlider","itemsCycle","anchored","canScroll","BaseConfig","lActionName","MenuLabelItemCfg","MenuSliderItemCfg","MenuCycleItemCfg","menuCount","menus","MenuEntryCfg","r","g","filename","levelsByName","levelKey","LevelEntryCfg","endGameAvi1","endGameAvi2","allowRename","recallOLObjects","generateSpiders","video","disableEndTeleport","disableStartTeleport","emergeTimeOut","boulderAnimation","noMultiSelect","noAutoEat","disableToolTipSound","blockSize","digDepth","roughLevel","roofHeight","useRoof","selBoxHeight","fpRotLightRGB","fogColourRGB","highFogColourRGB","fogRate","fallinMultiplier","numberOfLandSlidesTillCaveIn","noFallins","oxygenRate","surfaceMap","predugMap","terrainMap","emergeMap","erodeMap","fallinMap","blockPointersMap","cryOreMap","pathMap","noGather","textureSet","rockFallStyle","emergeCreature","safeCaverns","seeThroughWalls","oListFile","ptlFile","nerpFile","nerpMessageFile","objectiveText","objectiveImage640x480","erodeTriggerTime","erodeErodeTime","erodeLockTime","nextLevel","levelLinks","frontEndX","frontEndY","frontEndOpen","priorities","reward","menuBMP","endsWith","ConfigColor","name","LevelPrioritiesEntryConfig","LevelRewardConfig","ObjectiveImageCfg","enabled","enable","modifier","importance","quota","LevelRewardImportanceConfig","LevelRewardQuotaConfig","crystals","timer","caverns","constructions","oxygen","figures","display","wallpaper","images","texts","boxImages","fonts","flics","scrollSpeed","centreText","vertSpacing","backFont","font","titleFont","saveButton","advanceButton","completeText","failedText","quitText","textPos","imgConf","RewardImageCfg","RewardTextCfg","RewardFontsCfg","filePath","text","ore","diggable","rockMonsters","score","parseObjectiveTextFile","txtFileContent","state","DROP","currentLevel","code","char","LevelObjectiveTextEntry","KEY","lLine","OBJECTIVE","FAILURE","COMPLETION","CRYSTAL_FAILURE","charCodeAt","objective","failure","completion","crystalFailure","WorkerMessageType","wad0File","wad1File","assetIndex","totalResources","assetsFromCfgByName","onMessage","msg","onInitialLoad","onAssetLoaded","onLoadDone","loadingTimeSeconds","loadWadImageAsset","callback","AlphaBitmapDecoder","loadWadTexture","imgData","isTranslucentTexture","n","isAlphaTexture","alpha","loadAlphaImageAsset","loadFontImageAsset","loadNerpAsset","loadNerpMsg","parseNerpMsgFile","msg1","m1","txt","snd","wadFile","txt0Match","txt1Match","sndMatch","undefined","numericNameToNumber","digits","one","three","four","five","six","seven","eight","nine","tens","twenty","thirty","forty","number","ten","eleven","twelve","thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen","digitName","loadObjectiveTexts","txtContent","ObjectiveTextParser","loadMapAsset","level","row","loadObjectListAsset","objectList","currentObject","objectStartMatch","drivingMatch","driving","parseFloat","loadWavAsset","path","error","loadLWOFile","lwoFilepath","lwoContent","e","registerAllAssets","mainConf","addAssetFolder","addMenuWithAssets","addAsset","addAlphaImageFolder","levelsCfg","LevelsCfg","bmpName","addTextureFolder","buildingTypes","bType","bName","aeFile","addAnimatedEntity","orePath","addLWSFile","rewardCfg","RewardCfg","imgPath","img","splice","cfgRoot","RonFile","polyType","cfgPoly","activities","activity","act","file","lwsFilepath","extractLwoFiles","lwoFile","objLine","folderPath","assetPath","menuImageAlpha","menuCfg","MenuCfg","method","optional","bind","loadAssetsParallel","promises","that","asset","Promise","resolve","assetObj","all","then","Date","getTime","startTime","toFixed","startWithCachedFiles","onCacheMiss","_onerror","openLocalCache","objectStore","request1","onerror","onsuccess","prop","WadFile","request2","startLoadingProcess","loadWadFiles","wad0Url","wad1Url","loadWadFile","wadFiles","put","fetch","response","ok","arrayBuffer","onopen","request","indexedDB","open","onupgradeneeded","db","objectStoreNames","contains","deleteObjectStore","createObjectStore","transaction","cfg","size","type","createTextMessage","MSG","createCfgLoaded","CFG","createAssetLoaded","assetName","ASSET","createLoadDone","DONE","resourceWorker","self","postMessage","assetMessage","addEventListener","event","wadLoader","WadLoader","WorkerMessage","wad0FileUrl","wad1FileUrl","CACHE_MISS"],"mappings":"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","file":"index.worker.js","sourcesContent":["export const encodeChar = []\n\nfor (let c = 0; c < 256; c++) {\n    encodeChar[c] = c\n}\nencodeChar[130] = 0x00E4 // ä\nencodeChar[142] = 0x00C4 // Ä\nencodeChar[162] = 0x00F6 // ö\nencodeChar[167] = 0x00DC // Ü\nencodeChar[171] = 0x00FC // ü\nencodeChar[195] = 0x00DF // ß\n","import { encodeChar } from './EncodingHelper'\n\nexport class CfgFileParser {\n\n    static parse(buffer): any {\n        const result = {}\n        const ancestry = []\n        let activeObject = result\n        let isComment = false\n        let keyVal = 0 // 0 = looking for key, 1 = inside key, 1 = looking for value, 2 = inside value\n        let key = ''\n        let value = ''\n        // debug output is a bad idea here, buffer size is about 232.611 characters and has 6781 lines\n        for (let seek = 0; seek < buffer.length; seek++) {\n            let charCode = buffer[seek]\n            if (charCode === 123 && key === 'FullName') { // dirty workaround but in the original file { (123) was used instead of Ä (142)\n                charCode = 142\n            }\n            let charStr = String.fromCharCode(encodeChar[charCode])\n            if (charStr === ';' || charStr === '/') { // someone used // as a marker for a comment\n                isComment = true\n            } else if (charCode === 10 || charCode === 13) {\n                isComment = false\n            }\n            if (!isComment) {\n                if (charCode > 32) { // not a whitespace\n                    if (keyVal === 0) { // looking for key\n                        if (charStr === '}') {\n                            activeObject = ancestry.pop()\n                        } else {\n                            keyVal++\n                            key = charStr\n                        }\n                    } else if (keyVal === 1) { // inside key\n                        key += charStr\n                    } else if (keyVal === 2) { // looking for value\n                        if (charStr === '{') { // start of a new object key is identifier\n                            ancestry.push(activeObject)\n                            activeObject = {}\n                            ancestry[ancestry.length - 1][key] = activeObject\n                            keyVal = 0 // start looking for a key again\n                        } else {\n                            keyVal++\n                            value = charStr\n                        }\n                    } else if (keyVal === 3) { // inside value\n                        value += charStr\n                    }\n                } else { // some whitespace\n                    if (keyVal === 1) {\n                        keyVal++\n                    } else if (keyVal === 3) {\n                        keyVal = 0\n                        const parsed = CfgFileParser.parseValue(value)\n                        if (activeObject.hasOwnProperty(key)) {\n                            activeObject[key].push(parsed)\n                        } else {\n                            activeObject[key] = [parsed]\n                        }\n                    }\n                }\n            }\n        }\n\n        const stack = [result]\n        while (stack.length > 0) {\n            const obj = stack.pop()\n            Object.keys(obj).forEach((key) => {\n                const val = obj[key]\n                if (Array.isArray(val)) {\n                    if (val.length === 1) {\n                        obj[key] = val[0]\n                    } else {\n                        val.forEach((sub) => stack.push(sub))\n                    }\n                } else if (Object.keys(val).length > 1) {\n                    stack.push(val)\n                }\n            })\n        }\n\n        // apply some patches here\n        Object.values(result['Lego*']['Levels']).forEach((levelConf) => {\n            if (levelConf['CryoreMap']) {\n                levelConf['CryOreMap'] = levelConf['CryoreMap']  // typos... typos everywhere\n                delete levelConf['CryoreMap']\n            }\n            if (levelConf['CryOreMap']) {\n                levelConf['CryOreMap'] = levelConf['CryOreMap'].replace('Cryo_', 'Cror_')\n            }\n            if (levelConf['PredugMap']) {\n                levelConf['PreDugMap'] = levelConf['PredugMap']\n                delete levelConf['PredugMap']\n            }\n        })\n\n        return result['Lego*']\n    }\n\n    static parseValue(val) {\n        function splitShrink(sep) {\n            val = val.split(sep).filter(val => val !== '').map(val => CfgFileParser.parseValue(val))\n            if (val.length === 0) {\n                val = ''\n            } else if (val.length === 1) {\n                val = val[0]\n            }\n        }\n\n        const num = Number(val)\n        if (isNaN(num)) {\n            val = val.toString().replace(/\\\\/g, '/')\n            const lVal = val.toLowerCase()\n            if (lVal === 'true') return true\n            if (lVal === 'false') return false\n            if (lVal === 'null') return ''\n            if (val.includes(':')) {\n                splitShrink.call(this, ':')\n            } else if (val.includes(',')) { // TODO improve cfg handling: what about strings\n                splitShrink.call(this, ',')\n            } else if (val.includes('|')) {\n                splitShrink.call(this, '|')\n            }\n            return val\n        } else {\n            return num\n        }\n    }\n\n}\n","import { encodeChar } from './EncodingHelper'\n\n/**\n * Handles the extraction of single files from a bigger WAD data blob\n */\nexport class WadFile {\n\n    buffer: Int8Array = null\n    entryIndexByName: Map<string, number> = new Map()\n    fLength: number[] = []\n    fStart: number[] = []\n\n    /**\n     * Validate and parse the given data object as binary blob of a WAD file\n     * @param data binary blob\n     * @param debug enable/disable debug output while parsing\n     */\n    parseWadFile(data, debug = false) {\n        const dataView = new DataView(data)\n        this.buffer = new Int8Array(data)\n        let pos = 0\n        if (String.fromCharCode.apply(null, this.buffer.slice(pos, 4)) !== 'WWAD') {\n            throw 'Invalid WAD0 file provided'\n        }\n        if (debug) {\n            console.log('WAD0 file seems legit')\n        }\n        pos = 4\n        const numberOfEntries = dataView.getInt32(pos, true)\n        if (debug) {\n            console.log(numberOfEntries)\n        }\n        pos = 8\n\n        let bufferStart = pos\n        for (let i = 0; i < numberOfEntries; pos++) {\n            if (this.buffer[pos] === 0) {\n                this.entryIndexByName.set(String.fromCharCode.apply(null, this.buffer.slice(bufferStart, pos)).replace(/\\\\/g, '/').toLowerCase(), i)\n                bufferStart = pos + 1\n                i++\n            }\n        }\n\n        if (debug) {\n            console.log(this.entryIndexByName)\n        }\n\n        for (let i = 0; i < numberOfEntries; pos++) {\n            if (this.buffer[pos] === 0) {\n                bufferStart = pos + 1\n                i++\n            }\n        }\n\n        if (debug) {\n            console.log('Offset after absolute original names is ' + pos)\n        }\n\n        for (let i = 0; i < numberOfEntries; i++) {\n            this.fLength[i] = dataView.getInt32(pos + 8, true)\n            this.fStart[i] = dataView.getInt32(pos + 12, true)\n            pos += 16\n        }\n\n        if (debug) {\n            console.log(this.fLength)\n            console.log(this.fStart)\n        }\n    }\n\n    /**\n     * Returns the entries content extracted by name from the managed WAD file\n     * @param entryName Entry name to be extracted\n     * @returns {Uint8Array} Returns the content as Uint8Array\n     */\n    getEntryData(entryName): Uint8Array {\n        return new Uint8Array(this.getEntryBuffer(entryName))\n    }\n\n    /**\n     * Returns the entries content as text extracted by name from the managed WAD file\n     * @param entryName Entry name to be extracted\n     * @returns {string} Returns the content as String\n     */\n    getEntryText(entryName): string {\n        return new TextDecoder().decode(this.getEntryBuffer(entryName).map(c => encodeChar[c]))\n    }\n\n    /**\n     * Returns the entries content by name extracted from the managed WAD file\n     * @param entryName Entry name to be extracted\n     * @returns {Int8Array} Returns the content as buffer slice\n     */\n    getEntryBuffer(entryName): Int8Array {\n        const index = this.entryIndexByName.get(entryName.toLowerCase())\n        if (index === undefined || index === null) {\n            throw 'Entry \\'' + entryName + '\\' not found in WAD file'\n        }\n        return this.buffer.slice(this.fStart[index], this.fStart[index] + this.fLength[index])\n    }\n\n    filterEntryNames(regexStr) {\n        const regex = new RegExp(regexStr.toLowerCase())\n        const result = []\n        this.entryIndexByName.forEach((index, entry) => {\n            if (entry.match(regex)) result.push(entry)\n        })\n        return result\n    }\n\n}\n","export function getPath(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n","// The RockRaidersObjectNotation (RON) format is related to JSON\n\nexport class RonFile {\n\n    parse(content: string) { // TODO read from ArrayBuffer and fix encoding?\n        const lines: string[][] = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map((l) => { // strip comments from each line\n                const indDoubleSlash = l.indexOf('//')\n                if (indDoubleSlash > -1) l = l.substring(0, indDoubleSlash)\n                const indComment = l.indexOf(';')\n                if (indComment > -1) l = l.substring(0, indComment)\n                return l\n            })\n            .map((l) => { // remove whitespace at start/end of lines\n                l = l.trim()\n                return l\n            })\n            .filter(l => l !== '') // filter empty lines\n            .map((v) => v.split(' ').filter(v => v !== ''))\n        const root = {}\n        this.parseObj(root, lines, 0)\n        return root\n    }\n\n    parseObj(obj: {}, lines: string[][], start): number {\n        for (let c = start; c < lines.length; c++) {\n            const [name, val] = lines[c]\n            const key = name.toLowerCase()\n            if (val === '{') {\n                obj[key] = {}\n                c = this.parseObj(obj[key], lines, c + 1)\n            } else if (key === '}') {\n                return c\n            } else {\n                // parse values\n                let value: any = val.split(':').filter(v => v !== '') // there is key::value\n                    .map(v => v.split(',').map(v => v.split('|').map(v => this.parseValue(v))))\n                while (value.length === 1) value = value[0] // replace arrays with only one value\n                obj[key] = value\n            }\n        }\n        return lines.length\n    }\n\n    parseValue(value: string) {\n        const num = Number(value)\n        const lv = value.toLowerCase()\n        if (!isNaN(num)) {\n            return num\n        } else if (lv === 'false') {\n            return false\n        } else if (lv === 'true') {\n            return true\n        } else {\n            return value\n        }\n    }\n\n}\n","/**\n * Source: https://github.com/wokwi/bmp-ts\n */\n\nenum HeaderTypes {\n    BITMAP_INFO_HEADER = 40,\n    BITMAP_V2_INFO_HEADER = 52,\n    BITMAP_V3_INFO_HEADER = 56,\n    BITMAP_V4_HEADER = 108,\n    BITMAP_V5_HEADER = 124\n}\n\n// We have these:\n//\n// const sample = 0101 0101 0101 0101\n// const mask   = 0111 1100 0000 0000\n// 256        === 0000 0001 0000 0000\n//\n// We want to take the sample and turn it into an 8-bit value.\n//\n// 1. We extract the last bit of the mask:\n//\n// 0000 0100 0000 0000\n//       ^\n//\n// Like so:\n//\n// const a = ~mask =    1000 0011 1111 1111\n// const b = a + 1 =    1000 0100 0000 0000\n// const c = b & mask = 0000 0100 0000 0000\n//\n// 2. We shift it to the right and extract the bit before the first:\n//\n// 0000 0000 0010 0000\n//             ^\n//\n// Like so:\n//\n// const d = mask / c = 0000 0000 0001 1111\n// const e = mask + 1 = 0000 0000 0010 0000\n//\n// 3. We apply the mask and the two values above to a sample:\n//\n// const f = sample & mask = 0101 0100 0000 0000\n// const g = f / c =         0000 0000 0001 0101\n// const h = 256 / e =       0000 0000 0000 0100\n// const i = g * h =         0000 0000 1010 1000\n//                                     ^^^^ ^\n//\n// Voila, we have extracted a sample and \"stretched\" it to 8 bits. For samples\n// which are already 8-bit, h === 1 and g === i.\n\nfunction maskColor(\n    maskRed: number,\n    maskGreen: number,\n    maskBlue: number,\n    maskAlpha: number,\n) {\n    const maskRedR = (~maskRed + 1) & maskRed\n    const maskGreenR = (~maskGreen + 1) & maskGreen\n    const maskBlueR = (~maskBlue + 1) & maskBlue\n    const maskAlphaR = (~maskAlpha + 1) & maskAlpha\n\n    const shiftedMaskRedL = maskRed / maskRedR + 1\n    const shiftedMaskGreenL = maskGreen / maskGreenR + 1\n    const shiftedMaskBlueL = maskBlue / maskBlueR + 1\n    const shiftedMaskAlphaL = maskAlpha / maskAlphaR + 1\n\n    return {\n        shiftRed: (x: number) =>\n            (((x & maskRed) / maskRedR) * 0x100) / shiftedMaskRedL,\n        shiftGreen: (x: number) =>\n            (((x & maskGreen) / maskGreenR) * 0x100) / shiftedMaskGreenL,\n        shiftBlue: (x: number) =>\n            (((x & maskBlue) / maskBlueR) * 0x100) / shiftedMaskBlueL,\n        shiftAlpha:\n            maskAlpha !== 0\n                ? (x: number) =>\n                (((x & maskAlpha) / maskAlphaR) * 0x100) / shiftedMaskAlphaL\n                : () => 255,\n    }\n}\n\nconst enum Compression {\n    NONE = 0,\n    BI_RLE8 = 1,\n    BI_RLE4 = 2,\n    BI_BIT_FIELDS = 3,\n    BI_ALPHA_BIT_FIELDS = 6\n}\n\ntype BitsPerPixel = 1 | 4 | 8 | 16 | 24 | 32;\n\ninterface IColor {\n    red: number;\n    green: number;\n    blue: number;\n    quad: number;\n}\n\ninterface IDecoderOptions {\n    toRGBA?: boolean;\n}\n\ninterface IImage {\n    width: number;\n    height: number;\n    bitPP: BitsPerPixel;\n    data: Uint8Array;\n    reserved1?: number;\n    reserved2?: number;\n    hr?: number;\n    vr?: number;\n    colors?: number;\n    importantColors?: number;\n    palette?: IColor[];\n}\n\ninterface IBitmapImage extends IImage {\n    flag: string;\n    fileSize: number;\n    offset: number;\n    headerSize: number;\n    planes?: number;\n    compression?: Compression;\n    rawSize: number;\n}\n\ntype IColorProcessor = (x: number, line: number) => void;\n\nclass BmpDecoder implements IBitmapImage {\n    // Header\n    public flag: string\n    public fileSize!: number\n    public reserved1!: number\n    public reserved2!: number\n    public offset!: number\n    public headerSize!: number\n    public width!: number\n    public height!: number\n    public planes!: number\n    public bitPP!: BitsPerPixel\n    public compression?: Compression\n    public rawSize!: number\n    public hr!: number\n    public vr!: number\n    public colors!: number\n    public importantColors!: number\n    public palette!: IColor[]\n    public data!: Uint8Array\n\n    private maskRed!: number\n    private maskGreen!: number\n    private maskBlue!: number\n    private maskAlpha!: number\n\n    private readonly toRGBA: boolean\n\n    private pos: number\n    private bottomUp: boolean\n    private readonly buffer: Uint8Array\n    private readonly bufferView: DataView\n\n    private readonly locRed: number\n    private readonly locGreen: number\n    private readonly locBlue: number\n    private readonly locAlpha: number\n\n    private shiftRed!: (x: number) => number\n    private shiftGreen!: (x: number) => number\n    private shiftBlue!: (x: number) => number\n    private shiftAlpha!: (x: number) => number\n\n    constructor(\n        buffer: Uint8Array,\n        {toRGBA}: IDecoderOptions = {toRGBA: false},\n    ) {\n        this.buffer = buffer\n        this.bufferView = new DataView(\n            buffer.buffer,\n            buffer.byteOffset,\n            buffer.byteLength,\n        )\n        this.toRGBA = !!toRGBA\n        this.bottomUp = true\n        this.flag = String.fromCharCode(this.buffer[0]) + String.fromCharCode(this.buffer[1])\n        this.pos = 2\n\n        if (this.flag !== 'BM') {\n            throw new Error('Invalid BMP File')\n        }\n\n        this.locRed = this.toRGBA ? 0 : 3\n        this.locGreen = this.toRGBA ? 1 : 2\n        this.locBlue = this.toRGBA ? 2 : 1\n        this.locAlpha = this.toRGBA ? 3 : 0\n\n        this.parseHeader()\n        this.parseRGBA()\n    }\n\n    private parseHeader() {\n        this.fileSize = this.readUInt32LE()\n\n        this.reserved1 = this.bufferView.getUint16(this.pos, true)\n        this.pos += 2\n        this.reserved2 = this.bufferView.getUint16(this.pos, true)\n        this.pos += 2\n\n        this.offset = this.readUInt32LE()\n\n        // End of BITMAP_FILE_HEADER\n        this.headerSize = this.readUInt32LE()\n\n        if (!(this.headerSize in HeaderTypes)) {\n            throw new Error(`Unsupported BMP header size ${this.headerSize}`)\n        }\n\n        this.width = this.readUInt32LE()\n        this.height = this.readUInt32LE()\n\n        this.planes = this.bufferView.getUint16(this.pos, true)\n        this.pos += 2\n        this.bitPP = this.bufferView.getUint16(this.pos, true) as BitsPerPixel\n        this.pos += 2\n\n        this.compression = this.readUInt32LE()\n        this.rawSize = this.readUInt32LE()\n        this.hr = this.readUInt32LE()\n        this.vr = this.readUInt32LE()\n        this.colors = this.readUInt32LE()\n        this.importantColors = this.readUInt32LE()\n\n        // De facto defaults\n\n        if (this.bitPP === 32) {\n            this.maskAlpha = 0\n            this.maskRed = 0x00ff0000\n            this.maskGreen = 0x0000ff00\n            this.maskBlue = 0x000000ff\n        } else if (this.bitPP === 16) {\n            this.maskAlpha = 0\n            this.maskRed = 0x7c00\n            this.maskGreen = 0x03e0\n            this.maskBlue = 0x001f\n        }\n\n        // End of BITMAP_INFO_HEADER\n\n        if (\n            this.headerSize > HeaderTypes.BITMAP_INFO_HEADER ||\n            this.compression === Compression.BI_BIT_FIELDS ||\n            this.compression === Compression.BI_ALPHA_BIT_FIELDS\n        ) {\n            this.maskRed = this.readUInt32LE()\n            this.maskGreen = this.readUInt32LE()\n            this.maskBlue = this.readUInt32LE()\n        }\n\n        // End of BITMAP_V2_INFO_HEADER\n\n        if (\n            this.headerSize > HeaderTypes.BITMAP_V2_INFO_HEADER ||\n            this.compression === Compression.BI_ALPHA_BIT_FIELDS\n        ) {\n            this.maskAlpha = this.readUInt32LE()\n        }\n\n        // End of BITMAP_V3_INFO_HEADER\n\n        if (this.headerSize > HeaderTypes.BITMAP_V3_INFO_HEADER) {\n            this.pos +=\n                HeaderTypes.BITMAP_V4_HEADER - HeaderTypes.BITMAP_V3_INFO_HEADER\n        }\n\n        // End of BITMAP_V4_HEADER\n\n        if (this.headerSize > HeaderTypes.BITMAP_V4_HEADER) {\n            this.pos += HeaderTypes.BITMAP_V5_HEADER - HeaderTypes.BITMAP_V4_HEADER\n        }\n\n        // End of BITMAP_V5_HEADER\n\n        if (this.bitPP <= 8 || this.colors > 0) {\n            const len = this.colors === 0 ? 1 << this.bitPP : this.colors\n            this.palette = new Array(len)\n\n            for (let i = 0; i < len; i++) {\n                const blue = this.buffer[this.pos++]\n                const green = this.buffer[this.pos++]\n                const red = this.buffer[this.pos++]\n                const quad = this.buffer[this.pos++]\n\n                this.palette[i] = {\n                    red,\n                    green,\n                    blue,\n                    quad,\n                }\n            }\n        }\n\n        // End of color table\n\n        // Can the height ever be negative?\n        if (this.height < 0) {\n            this.height *= -1\n            this.bottomUp = false\n        }\n\n        const coloShift = maskColor(\n            this.maskRed,\n            this.maskGreen,\n            this.maskBlue,\n            this.maskAlpha,\n        )\n\n        this.shiftRed = coloShift.shiftRed\n        this.shiftGreen = coloShift.shiftGreen\n        this.shiftBlue = coloShift.shiftBlue\n        this.shiftAlpha = coloShift.shiftAlpha\n    }\n\n    private parseRGBA() {\n        this.data = new Uint8Array(this.width * this.height * 4)\n\n        switch (this.bitPP) {\n            case 1:\n                this.bit1()\n                break\n            case 4:\n                this.bit4()\n                break\n            case 8:\n                this.bit8()\n                break\n            case 16:\n                this.bit16()\n                break\n            case 24:\n                this.bit24()\n                break\n            default:\n                this.bit32()\n        }\n    }\n\n    private bit1() {\n        const xLen = Math.ceil(this.width / 8)\n        const mode = xLen % 4\n        const padding = mode !== 0 ? 4 - mode : 0\n\n        let lastLine: number | undefined\n\n        this.scanImage(padding, xLen, (x, line) => {\n            if (line !== lastLine) {\n                lastLine = line\n            }\n\n            const b = this.buffer[this.pos++]\n            const location = line * this.width * 4 + x * 8 * 4\n\n            for (let i = 0; i < 8; i++) {\n                if (x * 8 + i < this.width) {\n                    const rgb = this.palette[(b >> (7 - i)) & 0x1]\n\n                    this.data[location + i * this.locAlpha] = 0\n                    this.data[location + i * 4 + this.locBlue] = rgb.blue\n                    this.data[location + i * 4 + this.locGreen] = rgb.green\n                    this.data[location + i * 4 + this.locRed] = rgb.red\n                } else {\n                    break\n                }\n            }\n        })\n    }\n\n    private bit4() {\n        if (this.compression === Compression.BI_RLE4) {\n            this.data.fill(0)\n\n            let lowNibble = false //for all count of pixel\n            let lines = this.bottomUp ? this.height - 1 : 0\n            let location = 0\n\n            while (location < this.data.length) {\n                const a = this.buffer[this.pos++]\n                const b = this.buffer[this.pos++]\n\n                //absolute mode\n                if (a === 0) {\n                    if (b === 0) {\n                        //line end\n                        lines += this.bottomUp ? -1 : 1\n                        location = lines * this.width * 4\n                        lowNibble = false\n\n                        continue\n                    }\n\n                    if (b === 1) {\n                        // image end\n                        break\n                    }\n\n                    if (b === 2) {\n                        // offset x, y\n                        const x = this.buffer[this.pos++]\n                        const y = this.buffer[this.pos++]\n\n                        lines += this.bottomUp ? -y : y\n                        location += y * this.width * 4 + x * 4\n                    } else {\n                        let c = this.buffer[this.pos++]\n\n                        for (let i = 0; i < b; i++) {\n                            location = this.setPixelData(\n                                location,\n                                lowNibble ? c & 0x0f : (c & 0xf0) >> 4,\n                            )\n\n                            if (i & 1 && i + 1 < b) {\n                                c = this.buffer[this.pos++]\n                            }\n\n                            lowNibble = !lowNibble\n                        }\n\n                        if ((((b + 1) >> 1) & 1) === 1) {\n                            this.pos++\n                        }\n                    }\n                } else {\n                    //encoded mode\n                    for (let i = 0; i < a; i++) {\n                        location = this.setPixelData(\n                            location,\n                            lowNibble ? b & 0x0f : (b & 0xf0) >> 4,\n                        )\n                        lowNibble = !lowNibble\n                    }\n                }\n            }\n        } else {\n            const xLen = Math.ceil(this.width / 2)\n            const mode = xLen % 4\n            const padding = mode !== 0 ? 4 - mode : 0\n\n            this.scanImage(padding, xLen, (x, line) => {\n                const b = this.buffer[this.pos++]\n                const location = line * this.width * 4 + x * 2 * 4\n\n                const first4 = b >> 4\n                let rgb = this.palette[first4]\n\n                this.data[location] = 0\n                this.data[location + 1] = rgb.blue\n                this.data[location + 2] = rgb.green\n                this.data[location + 3] = rgb.red\n\n                if (x * 2 + 1 >= this.width) {\n                    // throw new Error('Something');\n                    return false\n                }\n\n                const last4 = b & 0x0f\n                rgb = this.palette[last4]\n\n                this.data[location + 4] = 0\n                this.data[location + 4 + 1] = rgb.blue\n                this.data[location + 4 + 2] = rgb.green\n                this.data[location + 4 + 3] = rgb.red\n            })\n        }\n    }\n\n    private bit8() {\n        if (this.compression === Compression.BI_RLE8) {\n            this.data.fill(0)\n\n            let lines = this.bottomUp ? this.height - 1 : 0\n            let location = 0\n\n            while (location < this.data.length) {\n                const a = this.buffer[this.pos++]\n                const b = this.buffer[this.pos++]\n\n                //absolute mode\n                if (a === 0) {\n                    if (b === 0) {\n                        //line end\n                        lines += this.bottomUp ? -1 : 1\n                        location = lines * this.width * 4\n                        continue\n                    }\n\n                    if (b === 1) {\n                        //image end\n                        break\n                    }\n\n                    if (b === 2) {\n                        //offset x,y\n                        const x = this.buffer[this.pos++]\n                        const y = this.buffer[this.pos++]\n\n                        lines += this.bottomUp ? -y : y\n                        location += y * this.width * 4 + x * 4\n                    } else {\n                        for (let i = 0; i < b; i++) {\n                            const c = this.buffer[this.pos++]\n                            location = this.setPixelData(location, c)\n                        }\n\n                        // @ts-ignore\n                        const shouldIncrement = b & (1 === 1)\n                        if (shouldIncrement) {\n                            this.pos++\n                        }\n                    }\n                } else {\n                    //encoded mode\n                    for (let i = 0; i < a; i++) {\n                        location = this.setPixelData(location, b)\n                    }\n                }\n            }\n        } else {\n            const mode = this.width % 4\n            const padding = mode !== 0 ? 4 - mode : 0\n\n            this.scanImage(padding, this.width, (x, line) => {\n                const b = this.buffer[this.pos++]\n                const location = line * this.width * 4 + x * 4\n\n                if (b < this.palette.length) {\n                    const rgb = this.palette[b]\n\n                    this.data[location] = 0\n                    this.data[location + 1] = rgb.blue\n                    this.data[location + 2] = rgb.green\n                    this.data[location + 3] = rgb.red\n                } else {\n                    this.data[location] = 0\n                    this.data[location + 1] = 0xff\n                    this.data[location + 2] = 0xff\n                    this.data[location + 3] = 0xff\n                }\n            })\n        }\n    }\n\n    private bit16() {\n        const padding = (this.width % 2) * 2\n\n        this.scanImage(padding, this.width, (x, line) => {\n            const loc = line * this.width * 4 + x * 4\n            const px = this.bufferView.getUint16(this.pos, true)\n            this.pos += 2\n\n            this.data[loc + this.locRed] = this.shiftRed(px)\n            this.data[loc + this.locGreen] = this.shiftGreen(px)\n            this.data[loc + this.locBlue] = this.shiftBlue(px)\n            this.data[loc + this.locAlpha] = this.shiftAlpha(px)\n        })\n    }\n\n    private bit24() {\n        const padding = this.width % 4\n\n        this.scanImage(padding, this.width, (x, line) => {\n            const loc = line * this.width * 4 + x * 4\n            const blue = this.buffer[this.pos++]\n            const green = this.buffer[this.pos++]\n            const red = this.buffer[this.pos++]\n\n            this.data[loc + this.locRed] = red\n            this.data[loc + this.locGreen] = green\n            this.data[loc + this.locBlue] = blue\n            this.data[loc + this.locAlpha] = 0\n        })\n    }\n\n    private bit32() {\n        this.scanImage(0, this.width, (x, line) => {\n            const loc = line * this.width * 4 + x * 4\n            const px = this.readUInt32LE()\n\n            this.data[loc + this.locRed] = this.shiftRed(px)\n            this.data[loc + this.locGreen] = this.shiftGreen(px)\n            this.data[loc + this.locBlue] = this.shiftBlue(px)\n            this.data[loc + this.locAlpha] = this.shiftAlpha(px)\n        })\n    }\n\n    private scanImage(\n        padding = 0,\n        width = this.width,\n        processPixel: IColorProcessor,\n    ) {\n        for (let y = this.height - 1; y >= 0; y--) {\n            const line = this.bottomUp ? y : this.height - 1 - y\n\n            for (let x = 0; x < width; x++) {\n                processPixel.call(this, x, line)\n            }\n\n            this.pos += padding\n        }\n    }\n\n    private readUInt32LE() {\n        const value = this.bufferView.getUint32(this.pos, true)\n        this.pos += 4\n        return value\n    }\n\n    private setPixelData(location: number, rgbIndex: number) {\n        const {blue, green, red} = this.palette[rgbIndex]\n\n        this.data[location + this.locAlpha] = 0\n        this.data[location + 1 + this.locBlue] = blue\n        this.data[location + 2 + this.locGreen] = green\n        this.data[location + 3 + this.locRed] = red\n\n        return location + 4\n    }\n}\n\nexport class AlphaBitmapDecoder {\n\n    static parse(buffer: Uint8Array): ImageData {\n        const decoder = new BmpDecoder(buffer) // returns data in ABGR order and alpha set 0\n        const data = new Uint8ClampedArray(decoder.data.length)\n        for (let c = 0; c < decoder.data.length; c += 4) {\n            data[c] = decoder.data[c + 3] // red\n            data[c + 1] = decoder.data[c + 2] // green\n            data[c + 2] = decoder.data[c + 1] // blue\n            data[c + 3] = 255 - decoder.data[c] // alpha\n        }\n        return new ImageData(data, decoder.width, decoder.height)\n    }\n\n}\n","import { encodeChar } from './EncodingHelper'\n\nexport class ObjectiveTextParser {\n\n    parseObjectiveTextFile(txtFileContent: Uint8Array) {\n        const result = {}\n        let state = PARSING_STATE.DROP\n        let currentLevel: LevelObjectiveTextEntry = null\n        let value = ''\n        let line = ''\n        for (let c = 0; c < txtFileContent.length; c++) {\n            const code = encodeChar[txtFileContent[c]]\n            let char = String.fromCharCode(code)\n            if (state === PARSING_STATE.DROP) {\n                if (char === '[') {\n                    if (currentLevel) result[currentLevel.key] = currentLevel\n                    currentLevel = new LevelObjectiveTextEntry()\n                    state = PARSING_STATE.KEY\n                } else if (char === ':') {\n                    const lLine = line.toLowerCase()\n                    if (lLine === 'objective') {\n                        line = ''\n                        state = PARSING_STATE.OBJECTIVE\n                    } else if (lLine === 'failure') {\n                        line = ''\n                        state = PARSING_STATE.FAILURE\n                    } else if (lLine === 'completion') {\n                        line = ''\n                        state = PARSING_STATE.COMPLETION\n                    } else if (lLine === 'crystalfailure') {\n                        line = ''\n                        state = PARSING_STATE.CRYSTAL_FAILURE\n                    }\n                    for (; c < txtFileContent.length && txtFileContent[c + 1] === '\\t'.charCodeAt(0); c++) {\n                    }\n                } else if (char === '\\n' || char === '\\r') {\n                    line = ''\n                } else {\n                    line += char\n                }\n            } else if (state === PARSING_STATE.KEY) {\n                if (char === ']') {\n                    currentLevel.key = value\n                    value = ''\n                    state = PARSING_STATE.DROP\n                } else if (char === '\\n' || char === '\\r') {\n                    throw 'Malformed objective text file'\n                } else {\n                    value += char\n                }\n            } else if (state === PARSING_STATE.OBJECTIVE) {\n                if (char === '\\n' || char === '\\r') {\n                    currentLevel.objective = value\n                    value = ''\n                    state = PARSING_STATE.DROP\n                } else {\n                    value += char\n                }\n            } else if (state === PARSING_STATE.FAILURE) {\n                if (char === '\\n' || char === '\\r') {\n                    currentLevel.failure = value\n                    value = ''\n                    state = PARSING_STATE.DROP\n                } else {\n                    value += char\n                }\n            } else if (state === PARSING_STATE.COMPLETION) {\n                if (char === '\\n' || char === '\\r') {\n                    currentLevel.completion = value\n                    value = ''\n                    state = PARSING_STATE.DROP\n                } else {\n                    value += char\n                }\n            } else if (state === PARSING_STATE.CRYSTAL_FAILURE) {\n                if (char === '\\n' || char === '\\r') {\n                    currentLevel.crystalFailure = value\n                    value = ''\n                    state = PARSING_STATE.DROP\n                } else {\n                    value += char\n                }\n            }\n        }\n        return result\n    }\n\n}\n\nenum PARSING_STATE {\n\n    DROP,\n    KEY,\n    OBJECTIVE,\n    FAILURE,\n    COMPLETION,\n    CRYSTAL_FAILURE,\n\n}\n\nexport class LevelObjectiveTextEntry {\n\n    key: string\n    objective: string\n    failure: string\n    completion: string\n    crystalFailure: string\n\n}\n","export class BaseConfig {\n\n    static setFromCfg(config: BaseConfig, cfgObj: any) {\n        Object.keys(cfgObj).forEach((cfgKey) => {\n            const lCfgKeyName = (cfgKey.startsWith('!') ? cfgKey.substring(1) : cfgKey).toLowerCase().replace(/_/g, '')\n            const found = Object.keys(config).some((objKey) => {\n                return config.assignValue(objKey, lCfgKeyName, cfgObj[cfgKey])\n            })\n            if (!found) {\n                console.warn('cfg key does not exist: ' + cfgKey)\n            }\n        })\n        return config\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            this[objKey] = this.parseValue(lCfgKeyName, cfgValue)\n            return true\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return cfgValue\n    }\n\n}\n","export class MenuLabelItemCfg {\n\n    actionName: string\n    x: number\n    y: number\n    label: string\n    imgNormal: string\n    imgHover: string\n    imgPressed: string\n    tooltip: string\n    target: string\n    flag: string // usage unclear\n\n    constructor(cfgObj: any) {\n        if (cfgObj.length === 5 || cfgObj.length === 6) {\n            [this.actionName, this.x, this.y, this.label, this.target, this.flag] = cfgObj\n            this.label = Array.isArray(this.label) ? this.label.join(',') : this.label // TODO improve cfg handling, remove join\n            this.label = this.label.replace(/_/g, ' ')\n        } else if (cfgObj.length === 8) {\n            [this.actionName, this.x, this.y, this.imgNormal, this.imgHover, this.imgPressed, this.tooltip, this.target] = cfgObj\n        } else {\n            console.warn('Unexpected cfg object length: ' + cfgObj.length)\n            console.log(cfgObj)\n        }\n    }\n\n}\n","export class MenuSliderItemCfg {\n\n    actionName: string\n    x: number\n    y: number\n    width: number\n    height: number\n    description: string\n    min: number\n    max: number\n    imgOff: string\n    imgOn: string\n    imgLeft: string\n    imgRight: string\n    btnLeftNormal: string\n    btnRightNormal: string\n    btnLeftHover: string\n    btnRightHover: string\n\n    constructor(cfgObj: any) {\n        [this.actionName, this.x, this.y, this.width, this.height, this.description, this.min, this.max, this.imgOff, this.imgOn,\n            this.imgLeft, this.imgRight, this.btnRightNormal, this.btnLeftNormal, this.btnRightHover, this.btnLeftHover] = cfgObj\n    }\n\n}\n","export class MenuCycleItemCfg {\n\n    actionName: string\n    x: number\n    y: number\n    width: number\n    height: number\n    description: string\n    two: number // usage unclear\n    labelOff: string\n    labelOn: string\n\n    constructor(cfgObj: any) {\n        [this.actionName, this.x, this.y, this.width, this.height, this.description, this.two, this.labelOff, this.labelOn] = cfgObj\n        this.description = this.description.replace(/_/g, ' ')\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { MenuLabelItemCfg } from './MenuLabelItemCfg'\nimport { MenuSliderItemCfg } from './MenuSliderItemCfg'\nimport { MenuCycleItemCfg } from './MenuCycleItemCfg'\n\nexport class MenuEntryCfg extends BaseConfig {\n\n    fullName: string = ''\n    title: string = ''\n    position: [number, number] = [0, 0]\n    menuFont: string = ''\n    loFont: string = ''\n    hiFont: string = ''\n    itemCount: number = 0\n    menuImage: string = ''\n    autoCenter: boolean = false\n    displayTitle: boolean = false\n    overlays: any[] = []\n    playRandom: boolean = false\n    itemsLabel: MenuLabelItemCfg[] = []\n    itemsSlider: MenuSliderItemCfg[] = []\n    itemsCycle: MenuCycleItemCfg[] = []\n    anchored: boolean = false\n    canScroll: boolean = false\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName.match(/item\\d+/i)) {\n            const lActionName = cfgValue[0].toLowerCase()\n            if (lActionName === 'next' || lActionName === 'trigger') {\n                this.itemsLabel.push(new MenuLabelItemCfg(cfgValue))\n            } else if (lActionName === 'slider') {\n                this.itemsSlider.push(new MenuSliderItemCfg(cfgValue))\n            } else if (lActionName === 'cycle') {\n                this.itemsCycle.push(new MenuCycleItemCfg(cfgValue))\n            } else {\n                console.warn('Unexpected item action name: ' + cfgValue[0])\n                return false\n            }\n            return true\n        } else if (lCfgKeyName.match(/overlay\\d+/i)) {\n            this.overlays.push(cfgValue)\n            return true\n        }\n        return super.assignValue(objKey, lCfgKeyName, cfgValue)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        if (lCfgKeyName === 'fullName'.toLowerCase() || lCfgKeyName === 'title') {\n            return cfgValue.replace(/_/g, ' ')\n        } else {\n            return super.parseValue(lCfgKeyName, cfgValue)\n        }\n    }\n\n}\n","import { MenuEntryCfg } from './MenuEntryCfg'\nimport { BaseConfig } from './BaseConfig'\n\nexport class MenuCfg extends BaseConfig {\n\n    menuCount: number = 0\n    menus: MenuEntryCfg[] = []\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName.match(/menu\\d+/i)) {\n            this.menus.push(new MenuEntryCfg(cfgValue))\n            return true\n        }\n        return super.assignValue(objKey, lCfgKeyName, cfgValue)\n    }\n\n}\n","export class ConfigColor {\n\n    r: number\n    g: number\n    b: number\n\n    constructor(values: number[]) {\n        [this.r, this.g, this.b] = values\n    }\n\n}\n","export class ObjectiveImageCfg {\n\n    filename: string\n    x: number\n    y: number\n\n    constructor(cfgValue: any) {\n        [this.filename, this.x, this.y] = cfgValue\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ConfigColor } from './ConfigColor'\nimport { ObjectiveImageCfg } from './ObjectiveImageCfg'\n\nexport class LevelsCfg {\n\n    levelsByName: {} = []\n\n    constructor(cfgObj: any) {\n        Object.keys(cfgObj).forEach((levelKey) => {\n            if (!levelKey.startsWith('Tutorial') && !levelKey.startsWith('Level')) return // ignore incomplete test levels and duplicates\n            this.levelsByName[levelKey] = new LevelEntryCfg(cfgObj[levelKey])\n        })\n    }\n\n}\n\nexport class LevelEntryCfg extends BaseConfig {\n\n    fullName: string = ''\n    endGameAvi1: string = ''\n    endGameAvi2: string = ''\n    allowRename: boolean = false\n    recallOLObjects: boolean = false\n    generateSpiders: boolean = false\n    video: string = ''\n    disableEndTeleport: any = ''\n    disableStartTeleport: any = ''\n    emergeTimeOut: any = ''\n    boulderAnimation: any = ''\n    noMultiSelect: any = ''\n    noAutoEat: any = ''\n    disableToolTipSound: any = ''\n    blockSize: any = ''\n    digDepth: any = ''\n    roughLevel: any = ''\n    roofHeight: any = ''\n    useRoof: any = ''\n    selBoxHeight: any = ''\n    fpRotLightRGB: any = ''\n    fogColourRGB: any = ''\n    highFogColourRGB: any = ''\n    fogRate: number = 0\n    fallinMultiplier: number = 0\n    numberOfLandSlidesTillCaveIn: number = 0\n    noFallins: boolean = false\n    oxygenRate: number = 0 // 0 - 100\n    surfaceMap: string = ''\n    predugMap: string = ''\n    terrainMap: string = ''\n    emergeMap: string = ''\n    erodeMap: string = ''\n    fallinMap: string = ''\n    blockPointersMap: string = ''\n    cryOreMap: string = ''\n    pathMap: string = ''\n    noGather: boolean = false\n    textureSet: string = ''\n    rockFallStyle: any = ''\n    emergeCreature: any = ''\n    safeCaverns: any = ''\n    seeThroughWalls: any = ''\n    oListFile: any = ''\n    ptlFile: any = ''\n    nerpFile: any = ''\n    nerpMessageFile: any = ''\n    objectiveText: any = ''\n    objectiveImage640x480: ObjectiveImageCfg = null\n    erodeTriggerTime: number = 0\n    erodeErodeTime: number = 0\n    erodeLockTime: number = 0\n    nextLevel: any = ''\n    levelLinks: any = ''\n    frontEndX: number = 0\n    frontEndY: number = 0\n    frontEndOpen: boolean = false\n    priorities: LevelPrioritiesEntryConfig[] = [] // priority order matters!\n    reward: LevelRewardConfig = null\n    menuBMP: string[] = []\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        if (lCfgKeyName === 'fullName'.toLowerCase()) {\n            return cfgValue.replace(/_/g, ' ')\n        } else if (lCfgKeyName.endsWith('rgb')) {\n            return new ConfigColor(cfgValue)\n        } else if (lCfgKeyName === 'priorities') {\n            return Object.keys(cfgValue)\n                .filter(name => name.toLowerCase() !== 'AI_Priority_GetTool'.toLowerCase()) // not used in the game\n                .map(name => new LevelPrioritiesEntryConfig(name, cfgValue[name]))\n        } else if (lCfgKeyName === 'reward') {\n            return new LevelRewardConfig(cfgValue)\n        } else if (lCfgKeyName === 'objectiveimage640x480') {\n            return new ObjectiveImageCfg(cfgValue)\n        } else {\n            return super.parseValue(lCfgKeyName, cfgValue)\n        }\n    }\n\n}\n\nexport class LevelPrioritiesEntryConfig {\n\n    key: string\n    enabled: boolean\n\n    constructor(name: string, enabled: boolean) {\n        this.key = name.replace(/_/g, '')\n        this.enabled = enabled\n    }\n\n}\n\nexport class LevelRewardConfig extends BaseConfig {\n\n    enable: boolean = true\n    modifier: number = null\n    importance: LevelRewardImportanceConfig = null\n    quota: LevelRewardQuotaConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        if (lCfgKeyName === 'importance') {\n            return new LevelRewardImportanceConfig(cfgValue)\n        } else if (lCfgKeyName === 'quota') {\n            return new LevelRewardQuotaConfig(cfgValue)\n        } else {\n            return super.parseValue(lCfgKeyName, cfgValue)\n        }\n    }\n}\n\nexport class LevelRewardImportanceConfig extends BaseConfig {\n\n    crystals: number = 0\n    timer: number = 0\n    caverns: number = 0\n    constructions: number = 0\n    oxygen: number = 0\n    figures: number = 0\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n}\n\nexport class LevelRewardQuotaConfig extends BaseConfig {\n\n    crystals: number = null\n    timer: number = null\n    caverns: number = null\n    constructions: number = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\n\nexport class RewardCfg extends BaseConfig {\n\n    display: boolean = true\n    wallpaper: string = ''\n    images: RewardImageCfg[] = []\n    texts: RewardTextCfg[] = []\n    boxImages: RewardImageCfg[] = []\n    fonts: RewardFontsCfg = null\n    flics: { flhFilepath: string, x: number, y: number, w: number, h: number } = null\n    scrollSpeed: number = 0\n    centreText: boolean = false\n    vertSpacing: number = 0\n    backFont: string = ''\n    font: string = ''\n    titleFont: string = ''\n    timer: number = 0\n    saveButton: any = ''\n    advanceButton: any = ''\n    completeText: string = ''\n    failedText: string = ''\n    quitText: string = ''\n    textPos: [number, number] = [0, 0]\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName === 'images') {\n            Object.values(cfgValue).forEach((imgConf) => this.images.push(new RewardImageCfg(imgConf)))\n            return true\n        } else if (lCfgKeyName === 'text') {\n            Object.values(cfgValue).forEach((imgConf) => this.texts.push(new RewardTextCfg(imgConf)))\n            return true\n        } else if (lCfgKeyName === 'boximages') {\n            Object.values(cfgValue).forEach((imgConf) => this.boxImages.push(new RewardImageCfg(imgConf)))\n            return true\n        } else if (lCfgKeyName === 'fonts') {\n            this.fonts = new RewardFontsCfg(cfgValue)\n            return true\n        } else {\n            return super.assignValue(objKey, lCfgKeyName, cfgValue)\n        }\n    }\n\n}\n\nexport class RewardImageCfg {\n\n    filePath: string = ''\n    x: number = 0\n    y: number = 0\n\n    constructor(cfgObj: any) {\n        [this.filePath, this.x, this.y] = cfgObj\n    }\n\n}\n\nexport class RewardTextCfg {\n\n    text: string = ''\n    x: number = 0\n    y: number = 0\n\n    constructor(cfgObj: any) {\n        [this.text, this.x, this.y] = cfgObj\n    }\n\n}\n\nexport class RewardFontsCfg extends BaseConfig {\n\n    crystals: string = ''\n    ore: string = ''\n    diggable: string = ''\n    constructions: string = ''\n    caverns: string = ''\n    figures: string = ''\n    rockMonsters: string = ''\n    oxygen: string = ''\n    timer: string = ''\n    score: string = ''\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n}\n","export class WorkerMessage {\n\n    type: WorkerMessageType = null\n    text?: string\n    cfg?: any\n    totalResources?: number\n    assetName?: string\n    assetObj?: any\n    assetIndex?: number\n    loadingTimeSeconds?: string\n\n    constructor(type: WorkerMessageType) {\n        this.type = type\n    }\n\n    static createTextMessage(msg: string): WorkerMessage {\n        return {type: WorkerMessageType.MSG, text: msg}\n    }\n\n    static createCfgLoaded(cfg: any, totalResources: number): WorkerMessage {\n        return {type: WorkerMessageType.CFG, cfg: cfg, totalResources: totalResources}\n    }\n\n    static createAssetLoaded(assetIndex: number, assetName: string, assetObj: any) {\n        return {type: WorkerMessageType.ASSET, assetIndex: assetIndex, assetName: assetName, assetObj: assetObj}\n    }\n\n    static createLoadDone(totalResources: number, loadingTimeSeconds: string) {\n        return {type: WorkerMessageType.DONE, totalResources: totalResources, loadingTimeSeconds: loadingTimeSeconds}\n    }\n\n}\n\nexport enum WorkerMessageType {\n\n    MSG,\n    CFG,\n    CACHE_MISS,\n    SFX,\n    ASSET,\n    DONE,\n\n}\n","import { CfgFileParser } from './CfgFileParser'\nimport { WadFile } from './WadFile'\nimport { getFilename, getPath, iGet } from './WadUtil'\nimport { RonFile } from './RonFile'\nimport { AlphaBitmapDecoder } from './AlphaBitmapDecoder'\nimport { MenuCfg } from '../../cfg/MenuCfg'\nimport { LevelEntryCfg, LevelsCfg } from '../../cfg/LevelsCfg'\nimport { RewardCfg } from '../../cfg/RewardCfg'\nimport { ObjectiveTextParser } from './ObjectiveTextParser'\n\nexport class WadLoader {\n\n    wad0File: WadFile = null\n    wad1File: WadFile = null\n    startTime: Date\n    assetIndex: number = 0\n    totalResources: number = 0\n    assetsFromCfgByName: Map<string, { method: ((name: string, callback: (any) => void) => void), assetPath: string, optional: boolean }> = new Map()\n\n    onMessage: (msg: string) => any = (msg: string) => {\n        console.log(msg)\n    }\n    onInitialLoad: (totalResources: number, cfg: any) => any = () => {\n        console.log('Initial loading done.')\n    }\n    onAssetLoaded: (assetIndex: number, assetName: string, assetObj: any) => any = () => {\n    }\n    onLoadDone: (totalResources: number, loadingTimeSeconds: string) => any = (totalResources: number, loadingTimeSeconds: string) => {\n        console.log('Loading of about ' + totalResources + ' assets complete! Total load time: ' + loadingTimeSeconds + ' seconds.')\n    }\n\n    loadWadImageAsset(name: string, callback: (obj: ImageData) => any) {\n        const data = this.wad0File.getEntryData(name)\n        const imgData = AlphaBitmapDecoder.parse(data)\n        callback(imgData)\n    }\n\n    loadWadTexture(name: string, callback: (obj: ImageData) => any) {\n        function isTranslucentTexture(name): boolean { // TODO check for better approach\n            const filename = getFilename(name)\n            return !!filename.match(/\\d\\d\\d\\..+$/i) || !!filename.match(/^trans/i)\n                || !!filename.match(/telepulse/i) || !!filename.match(/^t_/i)\n                || !!filename.includes('crystalglow') || !!filename.match(/^glin/i)\n                || !!filename.match(/glow.bmp/i) || !!filename.match(/spankle/i)\n        }\n\n        function isAlphaTexture(name): boolean { // TODO check for better approach\n            return !!getFilename(name).match(/^a.+/i)\n        }\n\n        const data = this.wad0File.getEntryData(name)\n        const imgData = AlphaBitmapDecoder.parse(data)\n        if (isTranslucentTexture(name)) {\n            for (let n = 0; n < imgData.data.length; n += 4) {\n                if (imgData.data[n] === 255 && imgData.data[n + 1] === 255 && imgData.data[n + 2] === 255) {\n                    // TODO BitmapDecoder not working for sequence textures, surrounding color is white instead of black\n                    imgData.data[n + 3] = 0\n                } else {\n                    imgData.data[n + 3] = Math.max(imgData.data[n], imgData.data[n + 1], imgData.data[n + 2])\n                }\n            }\n        } else if (isAlphaTexture(name)) {\n            const alpha = { // last pixel defines alpha color\n                r: imgData.data[imgData.data.length - 4],\n                g: imgData.data[imgData.data.length - 3],\n                b: imgData.data[imgData.data.length - 2],\n            }\n            for (let n = 0; n < imgData.data.length; n += 4) {\n                if (imgData.data[n] === alpha.r && imgData.data[n + 1] === alpha.g && imgData.data[n + 2] === alpha.b) {\n                    imgData.data[n + 3] = 0\n                }\n            }\n        }\n        callback(imgData)\n    }\n\n    loadAlphaImageAsset(name: string, callback: (obj: ImageData) => any) {\n        const data = this.wad0File.getEntryData(name)\n        const imgData = AlphaBitmapDecoder.parse(data)\n        for (let n = 0; n < imgData.data.length; n += 4) {\n            if (imgData.data[n] <= 2 && imgData.data[n + 1] <= 2 && imgData.data[n + 2] <= 2) { // Interface/Reward/RSoxygen.bmp uses 2/2/2 as \"black\" alpha background\n                imgData.data[n + 3] = 0\n            }\n        }\n        callback(imgData)\n    }\n\n    loadFontImageAsset(name: string, callback: (obj: ImageData) => any) {\n        const data = this.wad0File.getEntryData(name)\n        const imgData = AlphaBitmapDecoder.parse(data)\n        callback(imgData)\n    }\n\n    loadNerpAsset(name: string, callback: (obj: string) => any) {\n        name = name.replace(/.npl$/, '.nrn')\n        const script = this.wad0File.getEntryText(name)\n        callback(script)\n    }\n\n    loadNerpMsg(name: string, callback: (obj: any) => any) {\n        const result = this.parseNerpMsgFile(this.wad0File, name)\n        const msg1 = this.parseNerpMsgFile(this.wad1File, name)\n        for (let c = 0; c < msg1.length; c++) {\n            const m1 = msg1[c]\n            if (!m1) continue\n            if (m1.txt) {\n                result[c].txt = m1.txt\n            }\n            if (m1.snd) {\n                result[c].snd = m1.snd\n            }\n        }\n        callback(result)\n    }\n\n    parseNerpMsgFile(wadFile: WadFile, name: string) {\n        const result = []\n        const lines = wadFile.getEntryText(name).split('\\n')\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c].trim()\n            if (line.length < 1 || line === '-') {\n                continue\n            }\n            // line formatting differs between wad0 and wad1 files!\n            const txt0Match = line.match(/\\\\\\[([^\\\\]+)\\\\](\\s*#([^#]+)#)?/)\n            const txt1Match = line.match(/^([^$][^#]+)(\\s*#([^#]+)#)?/)\n            const sndMatch = line.match(/\\$([^\\s]+)\\s*([^\\s]+)/)\n            if (wadFile === this.wad0File && txt0Match) {\n                const index = txt0Match[3] !== undefined ? this.numericNameToNumber(txt0Match[3]) : c // THIS IS MADNESS! #number# at the end of line is OPTIONAL\n                result[index] = result[index] || {}\n                result[index].txt = txt0Match[1]\n            } else if (wadFile === this.wad1File && txt1Match) {\n                const index = txt1Match[3] !== undefined ? this.numericNameToNumber(txt1Match[3]) : c // THIS IS MADNESS! #number# at the end of line is OPTIONAL\n                result[index] = result[index] || {}\n                result[index].txt = txt1Match[1].replace(/_/g, ' ').trim()\n            } else if (sndMatch && sndMatch.length === 3) {\n                const index = this.numericNameToNumber(sndMatch[1])\n                result[index] = result[index] || {}\n                result[index].snd = sndMatch[2].replace(/\\\\/g, '/')\n            } else {\n                throw 'Line in nerps message file did not match anything'\n            }\n        }\n        return result\n    }\n\n    numericNameToNumber(name: string) {\n        if (name === undefined) {\n            throw 'Numeric name must not be undefined'\n        }\n        const digits = {one: 1, two: 2, three: 3, four: 4, five: 5, six: 6, seven: 7, eight: 8, nine: 9}\n        const specials = {\n            ten: 10, eleven: 11, twelve: 12, thirteen: 13, fourteen: 14, fifteen: 15,\n            sixteen: 16, seventeen: 17, eighteen: 18, nineteen: 19,\n        }\n        const tens = {twenty: 20, thirty: 30, forty: 40}\n        let number = specials[name] || digits[name]\n        if (number === undefined) {\n            Object.keys(tens).forEach(ten => {\n                if (name.startsWith(ten)) {\n                    const digitName = name.replace(ten, '')\n                    number = tens[ten] + (digitName ? digits[digitName] : 0)\n                }\n            })\n        }\n        if (number === undefined) {\n            throw 'Found unexpected numeric name ' + name\n        }\n        return number\n    }\n\n    loadObjectiveTexts(name: string, callback: (obj: any) => any) {\n        const txtContent = this.wad1File.getEntryData(name)\n        const result = new ObjectiveTextParser().parseObjectiveTextFile(txtContent)\n        callback(result)\n    }\n\n    loadMapAsset(name: string, callback: (obj: any) => any) {\n        const buffer = this.wad0File.getEntryData(name)\n        if (buffer.length < 13 || String.fromCharCode.apply(String, buffer.slice(0, 3)) !== 'MAP') {\n            console.log('Invalid map data provided')\n            return\n        }\n        const map = {width: buffer[8], height: buffer[12], level: []}\n        let row = []\n        for (let seek = 16; seek < buffer.length; seek += 2) {\n            row.push(buffer[seek])\n            if (row.length >= map.width) {\n                map.level.push(row)\n                row = []\n            }\n        }\n        callback(map)\n    }\n\n    loadObjectListAsset(name: string, callback: (obj: any) => any) {\n        const lines = this.wad0File.getEntryText(name).split('\\n')\n        const objectList = []\n        let currentObject = null\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c].trim()\n            const objectStartMatch = line.match(/(.+)\\s+{/)\n            const drivingMatch = line.match(/driving\\s+(.+)/)\n            if (line.length < 1 || line.startsWith(';') || line.startsWith('Lego*')) {\n                // ignore empty lines, comments and the root object\n            } else if (objectStartMatch) {\n                currentObject = {}\n                objectList[objectStartMatch[1]] = currentObject\n            } else if (line === '}') {\n                currentObject = null\n            } else if (drivingMatch) {\n                currentObject.driving = drivingMatch[1]\n            } else {\n                const split = line.split(/\\s+/)\n                if (split.length !== 2 || currentObject === null) {\n                    throw 'Unexpected key value entry: ' + line\n                }\n                const key = split[0]\n                let val: any = split[1]\n                if (key === 'xPos' || key === 'yPos' || key === 'heading') {\n                    val = parseFloat(val)\n                } else if (key !== 'type') {\n                    throw 'Unexpected key value entry: ' + line\n                }\n                currentObject[key] = val\n            }\n        }\n        callback(objectList)\n    }\n\n    /**\n     * Load a WAV file format sound asset from the WAD file.\n     * @param path Path inside the WAD file\n     * @param callback A callback that is triggered after the file has been loaded\n     * @param key Optional key to store the sound, should look like SND_pilotdrill\n     */\n    loadWavAsset(path, callback, key) {\n        console.error('wav asset loading not yet implemented') // TODO implement this\n        // const snd = document.createElement('audio');\n        // if (callback != null) {\n        //     snd.oncanplay = function () {\n        //         snd.oncanplay = null; // otherwise the callback is triggered multiple times\n        //         const keyPath = key || path;\n        //         // use array, because sounds have multiple variants sometimes\n        //         ResourceManager.sounds[keyPath] = ResourceManager.sounds[keyPath] || [];\n        //         ResourceManager.sounds[keyPath].push(snd);\n        //         callback();\n        //     };\n        // }\n        // // try (localized) wad1 file first, then use generic wad0 file\n        // try {\n        //     snd.src = this.wad1File.getEntryUrl(path);\n        // } catch (e) {\n        //     snd.src = this.wad0File.getEntryUrl(path);\n        // }\n    }\n\n    loadLWOFile(lwoFilepath: string, callback: (obj: any) => any) {\n        let lwoContent\n        try {\n            lwoContent = this.wad0File.getEntryBuffer(lwoFilepath)\n        } catch (e) {\n            // console.log('load failed for ' + subObj.filename + ' trying shared path at ' + sharedPath + filename + '; error: ' + e); // TODO debug logging\n            try {\n                lwoContent = this.wad0File.getEntryBuffer('world/shared/' + getFilename(lwoFilepath))\n            } catch (e) {\n                console.error('Could not load LWO file ' + lwoFilepath + '; Error: ' + e)\n                return\n            }\n        }\n        callback(lwoContent.buffer)\n    }\n\n    registerAllAssets(mainConf: any) { // dynamically register all assets from config\n        // add fonts and cursors\n        this.addAssetFolder(this.loadFontImageAsset, 'Interface/Fonts/')\n        this.addAssetFolder(this.loadAlphaImageAsset, 'Interface/Pointers/')\n        // add menu assets\n        this.addMenuWithAssets(mainConf, 'MainMenuFull', false)\n        this.addMenuWithAssets(mainConf, 'PausedMenu')\n        this.addMenuWithAssets(mainConf, 'OptionsMenu')\n        this.addAsset(this.loadAlphaImageAsset, 'Interface/BriefingPanel/BriefingPanel.bmp')\n        this.addAsset(this.loadObjectiveTexts, 'Languages/ObjectiveText.txt')\n        // add in-game assets\n        this.addAlphaImageFolder('Interface/TopPanel/') // top panel\n        this.addAlphaImageFolder('Interface/RightPanel/') // crystal side bar\n        this.addAlphaImageFolder('Interface/RadarPanel/')\n        this.addAlphaImageFolder('Interface/MessagePanel/')\n        this.addAsset(this.loadWadImageAsset, 'Interface/Airmeter/msgpanel_air_juice.bmp')\n        this.addAlphaImageFolder('Interface/InfoPanel/')\n        this.addAlphaImageFolder('Interface/PriorityPanel/')\n        this.addAlphaImageFolder('Interface/Priorities')\n        this.addAlphaImageFolder('Interface/CameraControl/')\n        this.addAlphaImageFolder('Interface/MessageTabs/')\n        this.addAlphaImageFolder('Interface/IconPanel/')\n        this.addAlphaImageFolder('Interface/Icons/')\n        this.addAlphaImageFolder('Interface/Menus/')\n        this.addAlphaImageFolder('Interface/Buttons/')\n        this.addAlphaImageFolder('Interface/InfoImages/')\n        this.addAssetFolder(this.loadAlphaImageAsset, 'Interface/FrontEnd/Vol_')\n        this.addAssetFolder(this.loadWadImageAsset, 'Interface/FrontEnd/lp_')\n        this.addAsset(this.loadAlphaImageAsset, 'Interface/FrontEnd/LowerPanel.bmp')\n        // level files\n        this.addAsset(this.loadNerpAsset, 'Levels/nerpnrn.h')\n        const levelsCfg = new LevelsCfg(iGet(mainConf, 'Levels'))\n        this.onAssetLoaded(0, 'Levels', levelsCfg)\n        Object.values(levelsCfg.levelsByName).forEach((level: LevelEntryCfg) => {\n            level.menuBMP.forEach((bmpName) => {\n                this.addAsset(this.loadAlphaImageAsset, bmpName)\n            })\n            this.addAsset(this.loadMapAsset, level.surfaceMap)\n            this.addAsset(this.loadMapAsset, level.predugMap)\n            this.addAsset(this.loadMapAsset, level.terrainMap)\n            this.addAsset(this.loadMapAsset, level.blockPointersMap, true)\n            this.addAsset(this.loadMapAsset, level.cryOreMap)\n            this.addAsset(this.loadMapAsset, level.pathMap, true)\n            if (level.fallinMap) this.addAsset(this.loadMapAsset, level.fallinMap)\n            if (level.erodeMap) this.addAsset(this.loadMapAsset, level.erodeMap)\n            this.addAsset(this.loadObjectListAsset, level.oListFile)\n            this.addAsset(this.loadNerpAsset, level.nerpFile)\n            this.addAsset(this.loadNerpMsg, level.nerpMessageFile)\n        })\n        // load all shared textures\n        this.addTextureFolder('World/Shared/')\n        // load all building types\n        const buildingTypes = mainConf['BuildingTypes']\n        Object.values(buildingTypes).forEach((bType: string) => {\n            const bName = bType.split('/')[1]\n            const aeFile = bType + '/' + bName + '.ae'\n            this.addAnimatedEntity(aeFile)\n        })\n        this.addAnimatedEntity('mini-figures/pilot/pilot.ae')\n        // load misc objects\n        this.addAnimatedEntity(iGet(mainConf, 'MiscObjects', 'Dynamite') + '/Dynamite.ae')\n        this.addAsset(this.loadLWOFile, 'World/Shared/Crystal.lwo') // highpoly version, but unused?\n        this.addAsset(this.loadLWOFile, iGet(mainConf, 'MiscObjects', 'Crystal') + '.lwo')\n        this.addTextureFolder('MiscAnims/Crystal/')\n        const orePath = iGet(mainConf, 'MiscObjects', 'Ore')\n        this.addAsset(this.loadLWOFile, orePath + '.lwo')\n        this.addAsset(this.loadWadTexture, 'MiscAnims/Ore/Ore.bmp') // TODO this could be extracted from LWO file\n        this.addAsset(this.loadLWOFile, 'World/Shared/Brick.lwo')\n        this.addAsset(this.loadLWOFile, iGet(mainConf, 'MiscObjects', 'ProcessedOre') + '.lwo')\n        this.addAnimatedEntity(iGet(mainConf, 'MiscObjects', 'Barrier') + '/Barrier.ae')\n        this.addAnimatedEntity('MiscAnims/Dynamite/Dynamite.ae')\n        this.addLWSFile('MiscAnims/RockFall/Rock3Sides.lws')\n        this.addTextureFolder('MiscAnims/RockFall/')\n        // spaces\n        this.addTextureFolder('World/WorldTextures/IceSplit/Ice')\n        this.addTextureFolder('World/WorldTextures/LavaSplit/Lava')\n        this.addTextureFolder('World/WorldTextures/RockSplit/Rock')\n        // reward screen\n        const rewardCfg = new RewardCfg(iGet(mainConf, 'Reward'))\n        this.onAssetLoaded(0, 'Reward', rewardCfg)\n        this.addAsset(this.loadWadImageAsset, rewardCfg.wallpaper)\n        this.addAsset(this.loadFontImageAsset, rewardCfg.backFont)\n        Object.values(rewardCfg.fonts).forEach(imgPath => this.addAsset(this.loadFontImageAsset, imgPath))\n        rewardCfg.images.forEach(img => this.addAsset(this.loadAlphaImageAsset, img.filePath))\n        rewardCfg.boxImages.forEach(img => this.addAsset(this.loadWadImageAsset, img.filePath))\n        rewardCfg.saveButton.splice(0, 4).forEach(img => this.addAsset(this.loadWadImageAsset, img))\n        rewardCfg.advanceButton.splice(0, 4).forEach(img => this.addAsset(this.loadWadImageAsset, img))\n        // // sounds\n        // const samplesConf = mainConf['Samples'];\n        // Object.keys(samplesConf).forEach(sndKey => {\n        //     let sndPath = samplesConf[sndKey] + '.wav';\n        //     if (sndKey.startsWith('!')) { // TODO no clue what this means... loop? duplicate?!\n        //         sndKey = sndKey.slice(1);\n        //     }\n        //     if (sndPath.startsWith('*')) { // TODO no clue what this means... don't loop, see telportup\n        //         sndPath = sndPath.slice(1);\n        //     } else if (sndPath.startsWith('@')) {\n        //         // sndPath = sndPath.slice(1);\n        //         // console.warn('Sound ' + sndPath + ' must be loaded from program files folder. Not yet implemented!');\n        //         return;\n        //     }\n        //     sndPath.split(',').forEach(sndPath => {\n        //         this.addAsset(this.loadWavAsset, sndPath, false, sndKey);\n        //     });\n        // });\n    }\n\n    addAnimatedEntity(aeFile: string) {\n        const content = this.wad0File.getEntryText(aeFile)\n        const cfgRoot = iGet(new RonFile().parse(content), 'Lego*')\n        this.onAssetLoaded(0, aeFile, cfgRoot)\n        const path = getPath(aeFile);\n        ['HighPoly', 'MediumPoly', 'LowPoly'].forEach((polyType) => { // TODO add 'FPPoly' (contains two cameras)\n            const cfgPoly = iGet(cfgRoot, polyType)\n            if (cfgPoly) {\n                Object.keys(cfgPoly).forEach((key) => {\n                    this.addAsset(this.loadLWOFile, path + cfgPoly[key] + '.lwo')\n                })\n            }\n        })\n        const activities = iGet(cfgRoot, 'Activities')\n        if (activities) {\n            Object.keys(activities).forEach((activity) => {\n                try {\n                    let keyname = iGet(activities, activity)\n                    const act = iGet(cfgRoot, keyname)\n                    const file = iGet(act, 'FILE')\n                    const isLws = iGet(act, 'LWSFILE') === true\n                    if (isLws) {\n                        this.addLWSFile(path + file + '.lws')\n                    } else {\n                        console.error('Found activity which is not an LWS file')\n                    }\n                } catch (e) {\n                    console.error(e)\n                    console.log(cfgRoot)\n                    console.log(activities)\n                    console.log(activity)\n                }\n            })\n        }\n        // load all textures for this type\n        this.addTextureFolder(getPath(aeFile))\n    }\n\n    addLWSFile(lwsFilepath: string) {\n        const content = this.wad0File.getEntryText(lwsFilepath)\n        this.onAssetLoaded(0, lwsFilepath, content)\n        const lwoFiles: string[] = this.extractLwoFiles(getPath(lwsFilepath), content)\n        lwoFiles.forEach((lwoFile) => this.addAsset(this.loadLWOFile, lwoFile))\n    }\n\n    extractLwoFiles(path: string, content: string): string[] {\n        const lines: string[] = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map((l) => l.trim())\n\n        if (lines[0] !== 'LWSC') {\n            throw 'Invalid start of file! Expected \\'LWSC\\' in first line'\n        }\n\n        return lines.filter((line) => line.toLowerCase().startsWith('LoadObject '.toLowerCase()))\n            .map((objLine) => path + getFilename(objLine.substring('LoadObject '.length)).toLowerCase())\n    }\n\n    addAlphaImageFolder(folderPath: string) {\n        this.addAssetFolder(this.loadAlphaImageAsset, folderPath)\n    }\n\n    addTextureFolder(folderPath: string) {\n        this.addAssetFolder(this.loadWadTexture, folderPath)\n    }\n\n    addAssetFolder(callback: (name: string, callback: (obj: any) => any) => void, folderPath) {\n        this.wad0File.filterEntryNames(folderPath + '.+\\\\.bmp').forEach((assetPath) => {\n            this.addAsset(callback, assetPath)\n        })\n    }\n\n    addMenuWithAssets(mainConf, name: string, menuImageAlpha: boolean = true) {\n        const menuCfg = new MenuCfg(iGet(mainConf, 'Menu', name))\n        this.onAssetLoaded(0, name, menuCfg)\n        menuCfg.menus.forEach((menuCfg) => {\n            const method = menuImageAlpha ? this.loadAlphaImageAsset : this.loadWadImageAsset\n            const menuImage = Array.isArray(menuCfg.menuImage) ? menuCfg.menuImage[0] : menuCfg.menuImage\n            this.addAsset(method, menuImage)\n            this.addAsset(this.loadFontImageAsset, menuCfg.menuFont)\n            this.addAsset(this.loadFontImageAsset, menuCfg.loFont)\n            this.addAsset(this.loadFontImageAsset, menuCfg.hiFont)\n        })\n    }\n\n    addAsset(method: (name: string, callback: (obj: any) => any) => void, assetPath, optional = false) {\n        if (!assetPath || this.assetsFromCfgByName.hasOwnProperty(assetPath) || assetPath === 'NULL') {\n            return // do not load assets twice\n        }\n        this.assetsFromCfgByName.set(assetPath, {method: method.bind(this), assetPath: assetPath, optional: optional})\n    }\n\n    loadAssetsParallel() {\n        const promises = []\n        const that = this\n        this.assetsFromCfgByName.forEach((asset) => {\n            promises.push(new Promise<void>((resolve) => {\n                try {\n                    asset.method(asset.assetPath, (assetObj) => {\n                        this.assetIndex++\n                        that.onAssetLoaded(this.assetIndex, asset.assetPath, assetObj)\n                        resolve()\n                    })\n                } catch (e) {\n                    if (!asset.optional) throw e\n                    this.assetIndex++\n                    that.onAssetLoaded(this.assetIndex, asset.assetPath, null)\n                    resolve()\n                }\n            }))\n        })\n        Promise.all(promises).then(() => {\n            // indicate that loading has finished, and display the total loading time\n            const loadingTimeSeconds = ((new Date().getTime() - this.startTime.getTime()) / 1000).toFixed(3).toString()\n            this.onLoadDone(this.totalResources, loadingTimeSeconds)\n        })\n    }\n\n    startWithCachedFiles(onCacheMiss: () => any) {\n        this.startTime = new Date()\n        const _onerror = () => {\n            this.onMessage('WAD files not found in cache')\n            onCacheMiss()\n        }\n        this.onMessage('Loading WAD files from cache...')\n        const that = this\n        this.openLocalCache((objectStore) => {\n            const request1 = objectStore.get('wad0')\n            request1.onerror = _onerror\n            request1.onsuccess = function () {\n                if (request1.result === undefined) {\n                    _onerror()\n                    return\n                }\n                // console.log('First WAD file loaded from cache after ' + ((new Date().getTime() - that.startTime.getTime()) / 1000));\n                that.wad0File = new WadFile()\n                for (let prop in request1.result) { // class info are runtime info and not stored in cache => use copy constructor\n                    if (request1.result.hasOwnProperty(prop)) {\n                        that.wad0File[prop] = request1.result[prop]\n                    }\n                }\n                const request2 = objectStore.get('wad1')\n                request2.onerror = _onerror\n                request2.onsuccess = function () {\n                    if (request2.result === undefined) {\n                        _onerror()\n                        return\n                    }\n                    that.wad1File = new WadFile()\n                    for (let prop in request2.result) { // class info are runtime info and not stored in cache => use copy constructor\n                        if (request2.result.hasOwnProperty(prop)) {\n                            that.wad1File[prop] = request2.result[prop]\n                        }\n                    }\n                    console.log('WAD files loaded from cache after ' + ((new Date().getTime() - that.startTime.getTime()) / 1000))\n                    that.startLoadingProcess()\n                }\n            }\n        })\n    }\n\n    /**\n     * Private helper method, which combines file loading and waits for them to become ready before continuing\n     * @param wad0Url Url to parse the LegoRR0.wad file from\n     * @param wad1Url Url to parse the LegoRR1.wad file from\n     */\n    loadWadFiles(wad0Url: string, wad1Url: string) {\n        const that = this\n        Promise.all([this.loadWadFile(wad0Url), this.loadWadFile(wad1Url)]).then(wadFiles => {\n            that.wad0File = wadFiles[0] as WadFile\n            that.wad1File = wadFiles[1] as WadFile\n            this.openLocalCache((objectStore) => {\n                objectStore.put(that.wad0File, 'wad0')\n                objectStore.put(that.wad1File, 'wad1')\n            })\n            this.startLoadingProcess()\n        })\n    }\n\n    /**\n     * Read WAD file as binary blob from the given URL and parse it on success\n     * @param url the url to the WAD file, can be local file url (file://...) too\n     */\n    loadWadFile(url: string) {\n        return new Promise(resolve => {\n            console.log('Loading WAD file from ' + url)\n            fetch(url).then((response) => {\n                if (response.ok) {\n                    response.arrayBuffer().then((buffer) => {\n                        const wadFile = new WadFile()\n                        wadFile.parseWadFile(buffer)\n                        resolve(wadFile)\n                    })\n                }\n            }) // TODO error handling\n        })\n    }\n\n    openLocalCache(onopen: (IDBObjectStore) => void) {\n        const request: IDBOpenDBRequest = indexedDB.open('RockRaidersWeb')\n        request.onupgradeneeded = function () {\n            const db = request.result\n            if (db.objectStoreNames.contains('wadfiles')) {\n                db.deleteObjectStore('wadfiles')\n            }\n            db.createObjectStore('wadfiles')\n        }\n        request.onsuccess = function () {\n            const db = request.result\n            const transaction = db.transaction(['wadfiles'], 'readwrite')\n            const objectStore = transaction.objectStore('wadfiles')\n            onopen(objectStore)\n        }\n    }\n\n    /**\n     * Load essential files, to begin the chain of asset loading\n     */\n    startLoadingProcess() {\n        this.startTime = new Date()\n        this.assetsFromCfgByName = new Map()\n        this.onMessage('Loading configuration...')\n        const cfg = CfgFileParser.parse(this.wad1File.getEntryData('Lego.cfg'))\n        this.registerAllAssets(cfg)\n        this.onMessage('Loading initial assets...')\n        Promise.all([\n            new Promise<void>((resolve) => {\n                const name = iGet(cfg, 'Main', 'LoadScreen') // loading screen image\n                this.loadWadImageAsset(name, (imgData) => {\n                    this.onAssetLoaded(0, name, imgData)\n                    resolve()\n                })\n            }),\n            new Promise<void>((resolve) => {\n                const name = iGet(cfg, 'Main', 'ProgressBar') // loading bar container image\n                this.loadWadImageAsset(name, (imgData) => {\n                    this.onAssetLoaded(0, name, imgData)\n                    resolve()\n                })\n            }),\n            new Promise<void>((resolve) => {\n                const name = iGet(cfg, 'Pointers', 'Pointer_Standard')\n                this.loadAlphaImageAsset(name, (imgData) => {\n                    this.onAssetLoaded(0, name, imgData)\n                    resolve()\n                })\n            }),\n        ]).then(() => {\n            this.onMessage('Start loading assets...')\n            this.totalResources = this.assetsFromCfgByName.size\n            this.onInitialLoad(this.totalResources, cfg)\n            this.assetIndex = 0\n            this.loadAssetsParallel()\n        })\n    }\n\n}\n","import { InitLoadingMessage } from './InitLoadingMessage'\nimport { WadLoader } from './WadLoader'\nimport { WorkerMessage, WorkerMessageType } from './WorkerMessage'\n\nconst resourceWorker: Worker = self as any\n\nfunction postMessage(assetMessage: WorkerMessage) {\n    resourceWorker.postMessage(assetMessage)\n}\n\nresourceWorker.addEventListener('message', (event) => {\n    const wadLoader = new WadLoader()\n    // set callbacks on wadLoader\n    wadLoader.onMessage = (text: string) => postMessage(WorkerMessage.createTextMessage(text))\n    wadLoader.onInitialLoad = (totalResources: number, cfg: any) => postMessage(WorkerMessage.createCfgLoaded(cfg, totalResources))\n    wadLoader.onAssetLoaded = (assetIndex: number, assetName: string, assetObj: any) => {\n        postMessage(WorkerMessage.createAssetLoaded(assetIndex, assetName, assetObj))\n    }\n    wadLoader.onLoadDone = (totalResources: number, loadingTimeSeconds: string) => {\n        postMessage(WorkerMessage.createLoadDone(totalResources, loadingTimeSeconds))\n    }\n    // start loading\n    const msg = event.data as InitLoadingMessage\n    if (msg) {\n        wadLoader.loadWadFiles(msg.wad0FileUrl, msg.wad1FileUrl)\n    } else {\n        wadLoader.startWithCachedFiles(() => postMessage(new WorkerMessage(WorkerMessageType.CACHE_MISS)))\n    }\n})\n"],"sourceRoot":""}