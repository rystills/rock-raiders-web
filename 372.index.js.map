{"version":3,"sources":["webpack://rock-raiders-web/webpack/runtime/chunk loaded","webpack://rock-raiders-web/webpack/runtime/startup chunk dependencies","webpack://rock-raiders-web/./src/event/EventTypeEnum.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/game/model/EntityType.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/game/model/Selectable.ts","webpack://rock-raiders-web/./src/game/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTool.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTraining.ts","webpack://rock-raiders-web/./src/params.ts","webpack://rock-raiders-web/./src/core/Rect.ts","webpack://rock-raiders-web/./src/cfg/DialogCfg.ts","webpack://rock-raiders-web/./src/gui/briefing/BriefingPanelCfg.ts","webpack://rock-raiders-web/./src/gui/briefing/BriefingPanel.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuCycleItem.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuLabelItem.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuSliderItem.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuLayer.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuBasePanel.ts","webpack://rock-raiders-web/./src/gui/overlay/OptionsPanel.ts","webpack://rock-raiders-web/./src/gui/overlay/PausePanel.ts","webpack://rock-raiders-web/./src/worker/OverlayWorker.ts","webpack://rock-raiders-web/webpack/bootstrap","webpack://rock-raiders-web/webpack/runtime/define property getters","webpack://rock-raiders-web/webpack/runtime/ensure chunk","webpack://rock-raiders-web/webpack/runtime/get javascript chunk filename","webpack://rock-raiders-web/webpack/runtime/global","webpack://rock-raiders-web/webpack/runtime/hasOwnProperty shorthand","webpack://rock-raiders-web/webpack/runtime/publicPath","webpack://rock-raiders-web/webpack/runtime/importScripts chunk loading","webpack://rock-raiders-web/webpack/startup"],"names":["deferred","next","MOUSE_BUTTON","POINTER_EVENT","KEY_EVENT","LocalEvent","eventKey","super","this","isLocal","SelectionChanged","selectionType","selectedSurface","selectedBuilding","selectedRaiders","canDoTraining","Map","everyHasTool","isGround","surfaceType","isPowerPath","isFloor","floor","isSite","hasRubble","isDrillable","isDrillableHard","isReinforcable","canPlaceFence","b","entityType","isUsable","someCarries","some","r","carries","everyHasMaxLevel","every","level","stats","Levels","training","set","length","hasTraining","tool","hasTool","buildingCanUpgrade","canUpgrade","buildingCanSwitchPower","SelfPowered","PowerBuilding","ChangeCursor","cursor","timeout","PlaySoundEvent","sample","EntityType","EntitySuperType","GameResultState","GameState","resultState","RUNNING","numCrystal","numOre","numBrick","usedCrystals","neededCrystals","airLevel","selectedEntities","buildings","buildingsUndiscovered","raiders","raidersUndiscovered","requestedRaiders","materials","materialsUndiscovered","buildingSites","spiders","spidersBySurface","bats","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","discoveredCaverns","levelStartTime","levelStopTime","oxygenRate","buildModeSelection","buildingTypes","filter","bt","position","targetBuildings","getBuildingsByType","closest","minDist","forEach","bPos","getDropPosition","dist","distanceToSquared","entities","previouslySelected","stillSelected","indexOf","deselect","freshlySelected","select","push","len","getSelectionType","count","surface","minX","x","minZ","y","maxX","maxZ","discoverEntities","undiscovered","discovered","e","pos","getPosition","z","onDiscover","remove","Math","round","entity","terrain","sceneMgr","currentSurface","getSurfaceFromWorld","nearbySpiders","getSurface","get","SelectionType","SurfaceType","options","shaping","matIndex","selectable","drillable","drillableHard","explodable","reinforcable","C","cursorFulfiller","statsDrillName","canCarryFence","Object","assign","typeNum","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","console","error","GROUND","name","POWER_PATH","POWER_PATH_BUILDING_SITE","POWER_PATH_CONSTRUCTION","RaiderTool","AllRaiderTools","DRILL","HAMMER","SHOVEL","SPANNER","FREEZERGUN","LASER","PUSHERGUN","BIRDSCARER","RaiderTraining","AllRaiderTrainings","DRIVER","ENGINEER","GEOLOGIST","PILOT","SAILOR","DEMOLITION","RaiderTrainingSites","RaiderTrainingStatsProperty","DEV_MODE","MAX_RAIDER_BASE","ADDITIONAL_RAIDER_PER_SUPPORT","PANEL_ANIMATION_MULTIPLIER","SPRITE_RESOLUTION_WIDTH","SPRITE_RESOLUTION_HEIGHT","TILESIZE","NATIVE_FRAMERATE","Rect","arr","w","h","DialogCfg","BaseConfig","cfgObj","image","titleWindow","textWindow","okWindow","cancelWindow","contrastOverlay","lCfgKeyName","cfgValue","endsWith","parseValue","BriefingPanelCfg","PanelCfg","titleFont","GuiResourceCache","title","dialogCfg","textFont","nextButtonCfg","buttonType","relX","relY","normalFile","backButtonCfg","BriefingPanel","Panel","parent","cfg","imgTitle","titleRelX","titleRelY","btnNext","btnBack","imgBack","imgParagraphList","paragraph","imgParagraph","onSetSpaceToContinue","state","log","createTextImage","width","addChild","Button","onClick","nextParagraph","prevParagraph","hidden","reset","setParagraph","objectiveText","objectiveBackImgCfg","filename","xIn","yIn","height","updatePosition","split","map","txt","hide","notifyRedraw","show","context","drawImage","onRedraw","MenuCycleItem","BaseElement","itemCfg","labelX","imgTextNormal","loFont","description","imgTextHover","hiFont","imgLabelOffNormal","labelOff","imgLabelOffHover","imgLabelOnNormal","labelOn","imgLabelOnHover","max","cx","cy","stateChanged","checkHover","checkClick","checkRelease","release","img","imgLabel","hover","MenuLabelItem","autoCenter","target","loImg","label","hiImg","menuImage","MenuSliderItem","sliderX","min","value","onValueChanged","imgLeft","imgNormal","imgOff","imgHover","imgOn","imgRight","leftBtn","BaseButtonCfg","btnLeftNormal","btnLeftHover","rightBtn","btnRightNormal","btnRightHover","posX","dw","MenuLayer","menuCfg","itemsTrigger","itemsNext","titleImage","menuFont","fullName","itemsLabel","item","actionName","toLowerCase","itemsCycle","itemsSlider","MenuBasePanel","layersByKey","menus","index","layer","selectLayer","key","l","OptionsPanel","onRepeatBriefing","PausePanel","onAbortGame","onRestartGame","OverlayWorker","GuiWorker","worker","panelPause","addPanel","rootElement","panelOptions","panelBriefing","setActivePanel","sendResponse","type","WorkerMessageType","messageState","canvas","setCanvas","msg","setup","panel","panels","p","redraw","event","handlePointerEvent","result","lEventKey","eventEnum","workerInstance","self","addEventListener","data","resourceByName","processMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","keys","splice","d","definition","o","defineProperty","enumerable","f","chunkId","Promise","all","reduce","promises","u","g","globalThis","Function","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","Error","replace","installedChunks","372","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","then"],"mappings":"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","file":"372.index.js","sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tresult = fn();\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([\n\t\t__webpack_require__.e(529),\n\t\t__webpack_require__.e(969)\n\t]).then(next);\n};","// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n}\n\nexport enum POINTER_EVENT {\n    MOVE,\n    DOWN,\n    UP,\n}\n\nexport enum KEY_EVENT {\n    DOWN,\n    UP,\n}\n","import { Sample } from '../audio/Sample'\nimport { BuildingEntity } from '../game/model/building/BuildingEntity'\nimport { EntityType } from '../game/model/EntityType'\nimport { GameState } from '../game/model/GameState'\nimport { PriorityEntry } from '../game/model/job/PriorityList'\nimport { Surface } from '../game/model/map/Surface'\nimport { SurfaceType } from '../game/model/map/SurfaceType'\nimport { Raider } from '../game/model/raider/Raider'\nimport { AllRaiderTools, RaiderTool } from '../game/model/raider/RaiderTool'\nimport { AllRaiderTrainings, RaiderTraining } from '../game/model/raider/RaiderTraining'\nimport { SelectionType } from '../game/model/Selectable'\nimport { Cursor } from '../screen/Cursor'\nimport { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n        this.isLocal = true\n    }\n\n}\n\nexport class SelectionChanged extends LocalEvent {\n\n    selectionType: SelectionType\n    isGround: boolean\n    isPowerPath: boolean\n    canPlaceFence: boolean\n    isFloor: boolean\n    isSite: boolean\n    hasRubble: boolean\n    isDrillable: boolean\n    isDrillableHard: boolean\n    isReinforcable: boolean\n    someCarries: boolean\n    everyHasMaxLevel: boolean\n    canDoTraining: Map<RaiderTraining, boolean> = new Map()\n    everyHasTool: Map<RaiderTool, boolean> = new Map()\n    buildingCanUpgrade: boolean\n    buildingCanSwitchPower: boolean\n\n    constructor(selectionType: SelectionType = SelectionType.NOTHING, selectedSurface: Surface = null, selectedBuilding: BuildingEntity = null, selectedRaiders: Raider[] = null) {\n        super(EventKey.SELECTION_CHANGED)\n        this.selectionType = selectionType\n        this.isGround = selectedSurface?.surfaceType === SurfaceType.GROUND\n        this.isPowerPath = selectedSurface?.surfaceType === SurfaceType.POWER_PATH\n        this.isFloor = selectedSurface?.surfaceType.floor\n        this.isSite = selectedSurface?.surfaceType === SurfaceType.POWER_PATH_CONSTRUCTION || selectedSurface?.surfaceType === SurfaceType.POWER_PATH_BUILDING_SITE\n        this.hasRubble = selectedSurface?.hasRubble()\n        this.isDrillable = selectedSurface?.isDrillable()\n        this.isDrillableHard = selectedSurface?.isDrillableHard()\n        this.isReinforcable = selectedSurface?.isReinforcable()\n        this.canPlaceFence = selectedSurface?.canPlaceFence() && GameState.buildings.some((b) => b.entityType === EntityType.POWER_STATION && b.isUsable())\n        this.someCarries = !!selectedRaiders?.some((r) => !!r.carries)\n        this.everyHasMaxLevel = !!selectedRaiders?.every((r) => r.level >= r.stats.Levels)\n        AllRaiderTrainings.forEach((training) => this.canDoTraining.set(training, GameState.getTrainingSites(training).length > 0 && selectedRaiders?.some((r) => !r.hasTraining(training))))\n        AllRaiderTools.forEach((tool) => this.everyHasTool.set(tool, !!selectedRaiders?.every((r) => r.hasTool(tool))))\n        this.buildingCanUpgrade = selectedBuilding?.canUpgrade()\n        this.buildingCanSwitchPower = !selectedBuilding?.stats.SelfPowered && !selectedBuilding?.stats.PowerBuilding\n    }\n\n}\n\nexport class AirLevelChanged extends LocalEvent {\n\n    airLevel: number\n\n    constructor(airLevel: number) {\n        super(EventKey.AIR_LEVEL_CHANGED)\n        this.airLevel = airLevel\n    }\n\n}\n\nexport class ChangeCursor extends LocalEvent {\n\n    cursor: Cursor\n    timeout: number\n\n    constructor(cursor: Cursor, timeout: number = null) {\n        super(EventKey.CHANGE_CURSOR)\n        this.cursor = cursor\n        this.timeout = timeout\n    }\n\n}\n\nexport class SetupPriorityList extends LocalEvent {\n\n    priorityList: PriorityEntry[]\n\n    constructor(priorityList: PriorityEntry[]) {\n        super(EventKey.SETUP_PRIORITY_LIST)\n        this.priorityList = priorityList\n    }\n\n}\n\nexport class BuildingsChangedEvent extends LocalEvent {\n\n    usableBuildingsByTypeAndLevel: Map<EntityType, Map<number, number>> = new Map()\n\n    constructor() {\n        super(EventKey.BUILDINGS_CHANGED)\n        GameState.buildings.forEach((b) => {\n            if (b.isUsable()) {\n                const perLevel = this.usableBuildingsByTypeAndLevel.getOrUpdate(b.entityType, () => new Map())\n                perLevel.set(b.level, perLevel.getOrUpdate(b.level, () => 0) + 1)\n            }\n        })\n    }\n\n    static countUsable(event: BuildingsChangedEvent, building: EntityType, minLevel: number = 0) {\n        let result = 0\n        event.usableBuildingsByTypeAndLevel.getOrUpdate(building, () => new Map()).forEach((count, level) => {\n            if (level >= minLevel) result += count\n        })\n        return result\n    }\n\n}\n\nexport class RaidersChangedEvent extends LocalEvent {\n\n    numRaiders: number\n    training: RaiderTraining\n\n    constructor(training: RaiderTraining = null) {\n        super(EventKey.RAIDERS_CHANGED)\n        this.numRaiders = GameState.raiders.length\n        this.training = training\n    }\n\n}\n\nexport class PlaySoundEvent extends LocalEvent {\n\n    sample: Sample\n\n    constructor(sample: Sample) {\n        super(EventKey.PLAY_SOUND)\n        this.sample = sample\n    }\n\n}\n","export enum EntityType {\n\n    // RAIDER\n    PILOT,\n\n    // BUILDING\n    TOOLSTATION,\n    TELEPORT_PAD,\n    DOCKS,\n    POWER_STATION,\n    BARRACKS,\n    UPGRADE,\n    GEODOME,\n    ORE_REFINERY,\n    GUNSTATION,\n    TELEPORT_BIG,\n\n    // MONSTER\n    BAT,\n    SMALL_SPIDER,\n\n    // MATERIAL\n    DYNAMITE,\n    ELECTRIC_FENCE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n\n}\n\nexport enum EntitySuperType {\n\n    RAIDER,\n    BUILDING,\n    MONSTER,\n    MATERIAL,\n\n}\n","import { Vector3 } from 'three'\nimport { EventBus } from '../../event/EventBus'\nimport { SelectionChanged } from '../../event/LocalEvents'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../../params'\nimport { BaseEntity } from './BaseEntity'\nimport { BuildingEntity } from './building/BuildingEntity'\nimport { BuildingSite } from './building/BuildingSite'\nimport { MaterialEntity } from './collect/MaterialEntity'\nimport { EntityType } from './EntityType'\nimport { Surface } from './map/Surface'\nimport { Bat } from './monster/Bat'\nimport { SmallSpider } from './monster/SmallSpider'\nimport { Raider } from './raider/Raider'\nimport { RaiderTraining, RaiderTrainingSites, RaiderTrainingStatsProperty } from './raider/RaiderTraining'\nimport { Selectable, SelectionType } from './Selectable'\n\nexport enum GameResultState {\n\n    RUNNING,\n    COMPLETE,\n    FAILED,\n\n}\n\nexport class GameState {\n\n    static resultState: GameResultState = GameResultState.RUNNING\n    static numCrystal: number = 0\n    static numOre: number = 0\n    static numBrick: number = 0\n    static usedCrystals: number = 0\n    static neededCrystals: number = 0\n    static airLevel: number = 1 // air level in percent from 0 to 1.0\n    static selectedEntities: Selectable[] = []\n    static selectionType: SelectionType = null\n    static buildings: BuildingEntity[] = []\n    static buildingsUndiscovered: BuildingEntity[] = []\n    static raiders: Raider[] = []\n    static raidersUndiscovered: Raider[] = []\n    static requestedRaiders: number = 0\n    static materials: MaterialEntity[] = []\n    static materialsUndiscovered: MaterialEntity[] = []\n    static buildingSites: BuildingSite[] = []\n    static spiders: SmallSpider[] = []\n    static spidersBySurface: Map<Surface, SmallSpider[]> = new Map()\n    static bats: Bat[] = []\n    static totalCrystals: number = 0\n    static totalOres: number = 0\n    static totalDiggables: number = 0\n    static remainingDiggables: number = 0\n    static totalCaverns: number = 0\n    static discoveredCaverns: number = 0\n    static levelStartTime: number = 0\n    static levelStopTime: number = 0\n    static oxygenRate: number = 0\n    static buildModeSelection: BuildingEntity = null\n\n    static reset() {\n        this.resultState = GameResultState.RUNNING\n        this.numCrystal = 0\n        this.numOre = 0\n        this.numBrick = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.airLevel = 1\n        this.selectedEntities = []\n        this.selectionType = null\n        this.buildings = []\n        this.buildingsUndiscovered = []\n        this.raiders = []\n        this.raidersUndiscovered = []\n        this.requestedRaiders = 0\n        this.materials = []\n        this.materialsUndiscovered = []\n        this.buildingSites = []\n        this.spiders = []\n        this.spidersBySurface = new Map()\n        this.bats = []\n        this.totalCrystals = 0\n        this.totalOres = 0\n        this.totalDiggables = 0\n        this.remainingDiggables = 0\n        this.totalCaverns = 0\n        this.discoveredCaverns = 0\n        this.levelStartTime = 0\n        this.levelStopTime = 0\n        this.oxygenRate = 0\n        this.buildModeSelection = null\n    }\n\n    static getBuildingsByType(...buildingTypes: EntityType[]): BuildingEntity[] {\n        return this.buildings.filter(b => b.isUsable() && buildingTypes.some(bt => b.entityType === bt))\n    }\n\n    static getClosestBuildingByType(position: Vector3, ...buildingTypes: EntityType[]): BuildingEntity {\n        const targetBuildings = GameState.getBuildingsByType(...buildingTypes)\n        let closest = null, minDist = null\n        targetBuildings.forEach((b) => {\n            const bPos = b.getDropPosition()\n            const dist = position.distanceToSquared(bPos) // TODO better use pathfinding\n            if (closest === null || dist < minDist) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static getTrainingSites(training: RaiderTraining): BuildingEntity[] {\n        return this.buildings.filter((b) => b.entityType === RaiderTrainingSites[training] && b.isUsable() && b.stats[RaiderTrainingStatsProperty[training]][b.level])\n    }\n\n    static selectEntities(entities: Selectable[]) {\n        this.selectedEntities = this.selectedEntities.filter((previouslySelected) => {\n            const stillSelected = entities.indexOf(previouslySelected) !== -1\n            if (!stillSelected) previouslySelected.deselect()\n            return stillSelected\n        })\n        // add new entities that are selectable\n        entities.forEach((freshlySelected) => {\n            if (freshlySelected.select()) {\n                this.selectedEntities.push(freshlySelected)\n            }\n        })\n        // determine and set next selection type\n        const len = this.selectedEntities.length\n        if (len > 1) {\n            this.selectionType = SelectionType.GROUP\n        } else if (len === 1) {\n            this.selectionType = this.selectedEntities[0].getSelectionType()\n        } else if (this.selectionType !== null) {\n            this.selectionType = SelectionType.NOTHING\n        }\n        // AFTER updating selected entities and selection type, publish all events\n        EventBus.publishEvent(new SelectionChanged(this.selectionType, this.selectedSurface, this.selectedBuilding, this.selectedRaiders))\n    }\n\n    static getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + GameState.buildings.count((b) => b.isUsable() && b.entityType === EntityType.BARRACKS) * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    static discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE\n        this.discoverEntities(this.raidersUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.buildingsUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.materialsUndiscovered, minX, maxX, minZ, maxZ)\n    }\n\n    static discoverEntities(undiscovered: BaseEntity[], minX, maxX, minZ, maxZ) {\n        const discovered = []\n        undiscovered.forEach((e) => {\n            const pos = e.getPosition()\n            if (pos.x >= minX && pos.x < maxX && pos.z >= minZ && pos.z < maxZ) {\n                e.onDiscover()\n                discovered.push(e)\n            }\n        })\n        discovered.forEach((r) => undiscovered.remove(r))\n    }\n\n    static get gameTimeSeconds() {\n        return Math.round((GameState.levelStopTime - GameState.levelStartTime) / 1000)\n    }\n\n    static get selectedSurface(): Surface {\n        return this.selectionType === SelectionType.SURFACE && this.selectedEntities.length > 0 ? this.selectedEntities[0] as Surface : null\n    }\n\n    static get selectedBuilding(): BuildingEntity {\n        return this.selectionType === SelectionType.BUILDING && this.selectedEntities.length > 0 ? this.selectedEntities[0] as BuildingEntity : null\n    }\n\n    static get selectedRaiders(): Raider[] {\n        return (this.selectionType === SelectionType.RAIDER || this.selectionType === SelectionType.GROUP) && this.selectedEntities.length > 0 ? this.selectedEntities as Raider[] : []\n    }\n\n    static get totalOre(): number {\n        return this.numOre + this.numBrick * 5\n    }\n\n    static getNearbySpiders(entity: BaseEntity): SmallSpider[] {\n        const terrain = entity.sceneMgr.terrain\n        const currentSurface = terrain.getSurfaceFromWorld(entity.getPosition())\n        const nearbySpiders: SmallSpider[] = []\n        for (let x = currentSurface.x; x <= currentSurface.x + 1; x++) {\n            for (let y = currentSurface.y; y <= currentSurface.y + 1; y++) {\n                const surface = terrain.getSurface(x, y)\n                nearbySpiders.push(...(GameState.spidersBySurface.get(surface) || []))\n            }\n        }\n        return nearbySpiders\n    }\n\n}\n","import { Vector3 } from 'three'\n\nexport interface Selectable {\n\n    getSelectionType(): SelectionType\n\n    select(): boolean\n\n    deselect(): any\n\n    getSelectionCenter(): Vector3\n\n}\n\nexport enum SelectionType {\n\n    NOTHING,\n    SURFACE,\n    RAIDER,\n    BUILDING,\n    VEHICLE,\n    GROUP,\n\n}\n","import { Cursor } from '../../../screen/Cursor'\n\nexport class SurfaceType {\n\n    name: string // human readable, maybe used as label later on\n    shaping: boolean = false\n    matIndex: string = '00'\n    floor: boolean = false\n    selectable: boolean = false\n    drillable: boolean = false\n    drillableHard: boolean = false\n    explodable: boolean = false\n    reinforcable: boolean = false\n    cursor: Cursor = Cursor.Pointer_Standard\n    cursorFulfiller: Cursor = Cursor.Pointer_Standard\n    statsDrillName: string = null\n    canCarryFence: boolean = false\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options)\n    }\n\n    static readonly GROUND = new SurfaceType({\n        name: 'ground',\n        floor: true,\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly SOLID_ROCK = new SurfaceType({\n        name: 'solid rock',\n        shaping: true,\n        matIndex: '5',\n        cursor: Cursor.Pointer_SurfaceType_Immovable,\n    })\n    static readonly HARD_ROCK = new SurfaceType({\n        name: 'hard rock',\n        shaping: true,\n        matIndex: '4',\n        selectable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_Hard,\n        statsDrillName: 'HardDrillTime',\n    })\n    static readonly LOOSE_ROCK = new SurfaceType({\n        name: 'loose rock',\n        shaping: true,\n        matIndex: '3',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_Medium,\n        statsDrillName: 'LooseDrillTime',\n    })\n    static readonly DIRT = new SurfaceType({\n        name: 'dirt',\n        shaping: true,\n        matIndex: '2',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_Loose,\n        statsDrillName: 'SoilDrillTime',\n    })\n    static readonly SLUG_HOLE = new SurfaceType({name: 'slug hole', floor: true, matIndex: '30'})\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'})\n    static readonly ORE_SEAM = new SurfaceType({\n        name: 'ore seam',\n        matIndex: '40',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_OreSeam,\n        statsDrillName: 'SeamDrillTime',\n    })\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45'})\n    static readonly CRYSTAL_SEAM = new SurfaceType({\n        name: 'energy crystal seam',\n        matIndex: '20',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_CrystalSeam,\n        statsDrillName: 'SeamDrillTime',\n    })\n    static readonly RECHARGE_SEAM = new SurfaceType({\n        name: 'recharge seam',\n        matIndex: '67',\n        cursor: Cursor.Pointer_SurfaceType_RechargeSeam,\n    })\n    static readonly POWER_PATH = new SurfaceType({\n        name: 'power path all',\n        floor: true,\n        matIndex: '60',\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly POWER_PATH_BUILDING_SITE = new SurfaceType({\n        name: 'power path building site',\n        floor: true,\n        matIndex: '61',\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly POWER_PATH_BUILDING = new SurfaceType({\n        name: 'power path building',\n        floor: true,\n        matIndex: '76',\n    })\n    static readonly POWER_PATH_CONSTRUCTION = new SurfaceType({\n        name: 'power path construction',\n        floor: true,\n        matIndex: '76',\n        selectable: true,\n    })\n    static readonly RUBBLE1 = new SurfaceType({\n        name: 'rubble 1',\n        floor: true,\n        matIndex: '13',\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_Clear,\n    })\n    static readonly RUBBLE2 = new SurfaceType({\n        name: 'rubble 2',\n        floor: true,\n        matIndex: '12',\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_Clear,\n    })\n    static readonly RUBBLE3 = new SurfaceType({\n        name: 'rubble 3',\n        floor: true,\n        matIndex: '11',\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_Clear,\n    })\n    static readonly RUBBLE4 = new SurfaceType({\n        name: 'rubble 4',\n        floor: true,\n        matIndex: '10',\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_Clear,\n    })\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING\n            case 1:\n                return SurfaceType.SOLID_ROCK\n            case 2:\n                return SurfaceType.HARD_ROCK\n            case 3:\n                return SurfaceType.LOOSE_ROCK\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT\n            case 6:\n                return SurfaceType.LAVA\n            case 8:\n                return SurfaceType.ORE_SEAM\n            case 9:\n                return SurfaceType.WATER\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM\n            case 11:\n                return SurfaceType.RECHARGE_SEAM\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE\n            case 100:\n                return SurfaceType.RUBBLE4\n            case 101:\n                return SurfaceType.RUBBLE3\n            case 102:\n                return SurfaceType.RUBBLE2\n            case 103:\n                return SurfaceType.RUBBLE1\n            default:\n                console.error('Unexpected surface type num: ' + typeNum)\n                return SurfaceType.SOLID_ROCK\n        }\n    }\n}\n","export enum RaiderTool {\n\n    DRILL,\n    HAMMER,\n    SHOVEL,\n    SPANNER,\n    FREEZERGUN,\n    LASER,\n    PUSHERGUN,\n    BIRDSCARER,\n\n}\n\nexport const AllRaiderTools: RaiderTool[] = [\n    RaiderTool.DRILL,\n    RaiderTool.HAMMER,\n    RaiderTool.SHOVEL,\n    RaiderTool.SPANNER,\n    RaiderTool.FREEZERGUN,\n    RaiderTool.LASER,\n    RaiderTool.PUSHERGUN,\n    RaiderTool.BIRDSCARER,\n]\n","import { EntityType } from '../EntityType'\n\nexport enum RaiderTraining {\n    DRIVER,\n    ENGINEER,\n    GEOLOGIST,\n    PILOT,\n    SAILOR,\n    DEMOLITION,\n}\n\nexport const AllRaiderTrainings: RaiderTraining[] = [\n    RaiderTraining.DRIVER,\n    RaiderTraining.ENGINEER,\n    RaiderTraining.GEOLOGIST,\n    RaiderTraining.PILOT,\n    RaiderTraining.SAILOR,\n    RaiderTraining.DEMOLITION,\n]\n\nexport const RaiderTrainingSites: EntityType[] = []\nRaiderTrainingSites[RaiderTraining.DRIVER] = EntityType.BARRACKS\nRaiderTrainingSites[RaiderTraining.DRIVER] = EntityType.BARRACKS\nRaiderTrainingSites[RaiderTraining.ENGINEER] = EntityType.UPGRADE\nRaiderTrainingSites[RaiderTraining.GEOLOGIST] = EntityType.GEODOME\nRaiderTrainingSites[RaiderTraining.PILOT] = EntityType.TELEPORT_PAD\nRaiderTrainingSites[RaiderTraining.SAILOR] = EntityType.DOCKS\nRaiderTrainingSites[RaiderTraining.DEMOLITION] = EntityType.TOOLSTATION\n\nexport const RaiderTrainingStatsProperty: string[] = []\nRaiderTrainingStatsProperty[RaiderTraining.DRIVER] = 'TrainDriver'\nRaiderTrainingStatsProperty[RaiderTraining.ENGINEER] = 'TrainRepair'\nRaiderTrainingStatsProperty[RaiderTraining.GEOLOGIST] = 'TrainScanner'\nRaiderTrainingStatsProperty[RaiderTraining.PILOT] = 'TrainPilot'\nRaiderTrainingStatsProperty[RaiderTraining.SAILOR] = 'TrainSailor'\nRaiderTrainingStatsProperty[RaiderTraining.DEMOLITION] = 'TrainDynamite'\n","export const DEV_MODE = process.env.WEBPACK_MODE === 'development'\nexport const WAD_CACHE_DB_NAME = 'RockRaidersWeb'\nexport const JOB_SCHEDULE_INTERVAL = 1000 // milliseconds\nexport const CHECK_CLEARRUBBLE_INTERVAL = 5000 // milliseconds\nexport const JOB_ACTION_RANGE = 7\nexport const CHECK_SPANW_RAIDER_TIMER = 1000 // milliseconds\nexport const MAX_RAIDER_BASE = 12\nexport const MAX_RAIDER_REQUEST = 9\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10\nexport const UPDATE_OXYGEN_TIMER = 5000 // milliseconds\nexport const PANEL_ANIMATION_MULTIPLIER = 3\nexport const HEIGHT_MULTIPLER = 0.1\nexport const SEQUENCE_TEXTURE_FRAMERATE = 5\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640\nexport const SPRITE_RESOLUTION_HEIGHT = 480\nexport const TILESIZE = 40\nexport const NATIVE_FRAMERATE = 30\n","export class Rect {\n\n    x: number = 0\n    y: number = 0\n    w: number = 0\n    h: number = 0\n\n    constructor(arr: number[]) {\n        [this.x, this.y, this.w, this.h] = arr\n    }\n\n}\n","import { Rect } from '../core/Rect'\nimport { BaseConfig } from './BaseConfig'\n\nexport class DialogCfg extends BaseConfig {\n\n    image: string = null\n    titleWindow: Rect = null\n    textWindow: Rect = null\n    okWindow: Rect = null\n    cancelWindow: Rect = null\n    contrastOverlay: string = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        if (lCfgKeyName.endsWith('window')) {\n            return new Rect(cfgValue)\n        }\n        return super.parseValue(lCfgKeyName, cfgValue)\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { DialogCfg } from '../../cfg/DialogCfg'\nimport { PanelCfg } from '../../cfg/PanelCfg'\nimport { BitmapFont } from '../../core/BitmapFont'\nimport { Rect } from '../../core/Rect'\nimport { GuiResourceCache } from '../GuiResourceCache'\n\nexport class BriefingPanelCfg extends PanelCfg {\n\n    // XXX find config values for this class\n\n    titleFont: BitmapFont\n    title: string\n    titleWindow: Rect\n    textFont: BitmapFont\n    textWindow: Rect\n    nextButtonCfg: ButtonCfg\n    backButtonCfg: ButtonCfg\n\n    constructor() {\n        super([])\n        this.titleFont = GuiResourceCache.getBitmapFont('Interface/Fonts/MbriefFont2.bmp')\n        this.title = GuiResourceCache.cfg('Main', 'MissionBriefingText')\n        const dialogCfg = new DialogCfg(GuiResourceCache.cfg('Dialog'))\n        this.titleWindow = dialogCfg.titleWindow\n        this.textFont = GuiResourceCache.getBitmapFont('Interface/Fonts/MbriefFont.bmp')\n        this.textWindow = dialogCfg.textWindow\n        this.textWindow.y -= 10\n        this.nextButtonCfg = {\n            buttonType: 'Next briefing paragraph',\n            relX: 394,\n            relY: 214,\n            normalFile: GuiResourceCache.cfg('Main', 'NextButton640x480'),\n        }\n        this.backButtonCfg = {\n            buttonType: 'Previous briefing paragraph',\n            relX: 54,\n            relY: 214,\n            normalFile: GuiResourceCache.cfg('Main', 'BackArrow'),\n        }\n    }\n\n}\n","import { ObjectiveImageCfg } from '../../cfg/ObjectiveImageCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { BriefingPanelCfg } from './BriefingPanelCfg'\n\nexport class BriefingPanel extends Panel {\n\n    cfg: BriefingPanelCfg = null\n    imgTitle: SpriteImage = null\n    titleRelX: number = 0\n    titleRelY: number = 0\n    btnNext: Button = null\n    btnBack: Button = null\n    imgBack: SpriteImage = null\n    imgParagraphList: SpriteImage[] = []\n    paragraph: number = 0\n    imgParagraph: SpriteImage = null\n    onSetSpaceToContinue: (state: boolean) => any = (state: boolean) => console.log('Message: press space to continue = ' + state)\n\n    constructor(parent: BaseElement) {\n        super(parent)\n        this.cfg = new BriefingPanelCfg()\n        this.imgTitle = this.cfg.titleFont.createTextImage(this.cfg.title)\n        this.titleRelX = this.cfg.titleWindow.x + (this.cfg.titleWindow.w - this.imgTitle.width) / 2\n        this.titleRelY = this.cfg.titleWindow.y\n        this.btnNext = this.addChild(new Button(this, this.cfg.nextButtonCfg))\n        this.btnNext.onClick = () => this.nextParagraph()\n        this.btnBack = this.addChild(new Button(this, this.cfg.backButtonCfg))\n        this.btnBack.onClick = () => this.prevParagraph()\n        this.hidden = true\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n        this.setParagraph(0)\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.imgBack = GuiResourceCache.getImageOrNull(objectiveBackImgCfg.filename)\n        this.xIn = objectiveBackImgCfg.x\n        this.yIn = objectiveBackImgCfg.y\n        this.width = this.imgBack.width\n        this.height = this.imgBack.height\n        this.updatePosition()\n        this.imgParagraphList = objectiveText.split('\\\\a').map(txt => this.cfg.textFont.createTextImage(txt, this.cfg.textWindow.w, false))\n    }\n\n    setParagraph(paragraph: number) {\n        if (paragraph < 0) return\n        if (paragraph > this.imgParagraphList.length - 1) {\n            this.hide()\n            this.notifyRedraw()\n            return\n        }\n        this.paragraph = paragraph\n        this.imgParagraph = this.imgParagraphList[this.paragraph]\n        this.btnNext.hidden = this.paragraph >= this.imgParagraphList.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.notifyRedraw()\n    }\n\n    nextParagraph() {\n        this.setParagraph(this.paragraph + 1)\n    }\n\n    prevParagraph() {\n        this.setParagraph(this.paragraph - 1)\n    }\n\n    show() {\n        super.show()\n        this.setParagraph(0)\n        this.btnNext.hidden = this.paragraph >= this.imgParagraphList.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.onSetSpaceToContinue(true)\n    }\n\n    hide() {\n        super.hide()\n        this.onSetSpaceToContinue(false)\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        if (this.imgBack) context.drawImage(this.imgBack, this.x, this.y)\n        if (this.imgTitle) context.drawImage(this.imgTitle, this.x + this.titleRelX, this.y + this.titleRelY)\n        if (this.imgParagraph) context.drawImage(this.imgParagraph, this.x + this.cfg.textWindow.x, this.y + this.cfg.textWindow.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuCycleItemCfg } from '../../cfg/MenuCycleItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuCycleItem extends BaseElement {\n\n    imgTextNormal: SpriteImage\n    imgTextHover: SpriteImage\n    imgLabelOnNormal: SpriteImage // TODO only toggle state with clicks on label\n    imgLabelOffNormal: SpriteImage // TODO use button?\n    imgLabelOnHover: SpriteImage\n    imgLabelOffHover: SpriteImage\n\n    labelX: number = 0\n    state: boolean = false\n\n    constructor(parent: MenuLayer, itemCfg: MenuCycleItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.labelX = itemCfg.width\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.imgLabelOffNormal = parent.loFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOffHover = parent.hiFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOnNormal = parent.loFont.createTextImage(itemCfg.labelOn)\n        this.imgLabelOnHover = parent.hiFont.createTextImage(itemCfg.labelOn)\n        this.width = itemCfg.width + Math.max(this.imgLabelOnHover.width, this.imgLabelOffHover.width)\n        this.height = this.imgTextNormal.height\n        this.onClick = () => {\n            this.state = !this.state\n            console.log('TODO: cycle item clicked; state: ' + this.state)\n        }\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        let imgLabel = this.state ? this.imgLabelOnNormal : this.imgLabelOffNormal\n        if (this.hover) {\n            img = this.imgTextHover\n            imgLabel = this.state ? this.imgLabelOnHover : this.imgLabelOffHover\n        }\n        context.drawImage(img, this.x, this.y)\n        context.drawImage(imgLabel, this.x + this.labelX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuLabelItemCfg } from '../../cfg/MenuLabelItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuLabelItem extends BaseElement {\n\n    target: string\n    loImg: SpriteImage\n    hiImg: SpriteImage\n\n    constructor(parent: MenuLayer, itemCfg: MenuLabelItemCfg, autoCenter: boolean) {\n        super(parent)\n        this.target = itemCfg.target\n        this.loImg = parent.loFont.createTextImage(itemCfg.label)\n        this.hiImg = parent.hiFont.createTextImage(itemCfg.label)\n        this.width = this.loImg.width\n        this.height = this.loImg.height\n        this.relX = autoCenter ? -parent.relX + (parent.menuImage.width - this.width) / 2 : itemCfg.x\n        this.relY = itemCfg.y\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        if (this.hover) {\n            context.drawImage(this.hiImg, this.x, this.y)\n        } else {\n            context.drawImage(this.loImg, this.x, this.y)\n        }\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseButtonCfg } from '../../cfg/BaseButtonCfg'\nimport { MenuSliderItemCfg } from '../../cfg/MenuSliderItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuSliderItem extends BaseElement {\n\n    imgTextNormal: SpriteImage\n    imgTextHover: SpriteImage\n    imgLeft: SpriteImage\n    imgNormal: SpriteImage\n    imgHover: SpriteImage\n    imgRight: SpriteImage\n    sliderX: number = 0\n    min: number = 0\n    max: number = 1\n    value: number = 0\n    onValueChanged: (value: number) => any = (value) => console.log('value changed to: ' + value)\n\n    constructor(parent: MenuLayer, itemCfg: MenuSliderItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.sliderX = itemCfg.width\n        this.imgLeft = GuiResourceCache.getImage(itemCfg.imgLeft)\n        this.imgNormal = GuiResourceCache.getImage(itemCfg.imgOff)\n        this.imgHover = GuiResourceCache.getImage(itemCfg.imgOn)\n        this.imgRight = GuiResourceCache.getImage(itemCfg.imgRight)\n        const leftBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        leftBtn.imgNormal = GuiResourceCache.getImage(itemCfg.btnLeftNormal)\n        leftBtn.imgHover = GuiResourceCache.getImage(itemCfg.btnLeftHover)\n        leftBtn.relX = this.sliderX - this.imgLeft.width - leftBtn.imgHover.width\n        leftBtn.width = leftBtn.imgHover.width\n        leftBtn.height = leftBtn.imgHover.height\n        leftBtn.updatePosition()\n        leftBtn.onClick = () => {\n            if (this.value > this.min) {\n                this.value--\n                this.onValueChanged(this.value)\n            }\n        }\n        const rightBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        rightBtn.imgNormal = GuiResourceCache.getImage(itemCfg.btnRightNormal)\n        rightBtn.imgHover = GuiResourceCache.getImage(itemCfg.btnRightHover)\n        rightBtn.relX = this.sliderX + this.imgNormal.width + this.imgRight.width * 2\n        rightBtn.width = rightBtn.imgHover.width\n        rightBtn.height = rightBtn.imgHover.height\n        rightBtn.updatePosition()\n        rightBtn.onClick = () => {\n            if (this.value < this.max) {\n                this.value++\n                this.onValueChanged(this.value)\n            }\n        }\n        this.width = itemCfg.width + leftBtn.imgHover.width + this.imgLeft.width + this.imgNormal.width + this.imgRight.width * 2 + rightBtn.imgHover.width\n        this.min = itemCfg.min\n        this.max = itemCfg.max || 1\n        this.value = this.min // TODO set default value\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.height = this.imgTextNormal.height\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        if (this.hover) {\n            img = this.imgTextHover\n        }\n        context.drawImage(img, this.x, this.y)\n        let posX = this.x + this.sliderX\n        context.drawImage(this.imgLeft, posX, this.y)\n        context.drawImage(this.imgNormal, posX, this.y)\n        const dw = Math.round(this.value / this.max * this.imgHover.width)\n        context.drawImage(this.imgHover, 0, 0, dw, this.imgHover.height, posX, this.y, dw, this.imgHover.height)\n        posX += this.imgNormal.width\n        context.drawImage(this.imgRight, posX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuEntryCfg } from '../../cfg/MenuEntryCfg'\nimport { BitmapFont } from '../../core/BitmapFont'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../../params'\nimport { BaseElement } from '../base/BaseElement'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { MenuCycleItem } from './MenuCycleItem'\nimport { MenuLabelItem } from './MenuLabelItem'\nimport { MenuSliderItem } from './MenuSliderItem'\n\nexport class MenuLayer extends BaseElement {\n\n    menuImage: SpriteImage\n    titleImage: SpriteImage\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    itemsTrigger: MenuLabelItem[] = []\n    itemsNext: MenuLabelItem[] = []\n\n    constructor(parent: BaseElement, menuCfg: MenuEntryCfg) {\n        super(parent)\n        this.relX = menuCfg.position[0]\n        this.relY = menuCfg.position[1]\n        this.menuImage = GuiResourceCache.getImageOrNull(menuCfg.menuImage[0]) // menuImage has 4 parameter here\n        this.titleImage = GuiResourceCache.getBitmapFont(menuCfg.menuFont).createTextImage(menuCfg.fullName)\n        this.loFont = GuiResourceCache.getBitmapFont(menuCfg.loFont)\n        this.hiFont = GuiResourceCache.getBitmapFont(menuCfg.hiFont)\n        menuCfg.itemsLabel.forEach((itemCfg) => {\n            const item = this.addChild(new MenuLabelItem(this, itemCfg, menuCfg.autoCenter))\n            if (itemCfg.actionName.toLowerCase() === 'trigger') {\n                this.itemsTrigger.push(item)\n            } else {\n                this.itemsNext.push(item)\n            }\n        })\n        menuCfg.itemsCycle.forEach((itemCfg) => this.addChild(new MenuCycleItem(this, itemCfg)))\n        menuCfg.itemsSlider.forEach((itemCfg) => this.addChild(new MenuSliderItem(this, itemCfg)))\n        this.hidden = true\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        context.drawImage(this.menuImage, (SPRITE_RESOLUTION_WIDTH - this.menuImage.width) / 2, (SPRITE_RESOLUTION_HEIGHT - this.menuImage.height) / 2)\n        context.drawImage(this.titleImage, (SPRITE_RESOLUTION_WIDTH - this.titleImage.width) / 2, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuCfg } from '../../cfg/MenuCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuBasePanel extends Panel {\n\n    layersByKey: Map<string, MenuLayer> = new Map()\n\n    constructor(parent: BaseElement, cfg: MenuCfg) {\n        super(parent)\n        this.hidden = true\n        cfg.menus.forEach((menuCfg, index) => this.layersByKey.set('menu' + (index + 1), this.addChild(new MenuLayer(this, menuCfg))))\n        this.layersByKey.forEach((layer) => layer.itemsNext.forEach((item) => item.onClick = () => this.selectLayer(item.target)))\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n    }\n\n    show() {\n        this.hidden = false\n        this.selectLayer('menu1')\n    }\n\n    hide() {\n        super.hide()\n        this.notifyRedraw()\n    }\n\n    selectLayer(key: string) {\n        const layer = this.layersByKey.get(key.toLowerCase())\n        this.layersByKey.forEach(l => l !== layer && l.hide())\n        layer.show()\n        this.notifyRedraw()\n    }\n\n}\n","import { MenuCfg } from '../../cfg/MenuCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuBasePanel } from './MenuBasePanel'\n\nexport class OptionsPanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n\n    constructor(parent: BaseElement, cfg: MenuCfg) {\n        super(parent, cfg)\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => this.onRepeatBriefing()\n        this.layersByKey.get('menu1').itemsTrigger[1].onClick = () => this.hide()\n    }\n\n}\n","import { MenuCfg } from '../../cfg/MenuCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuBasePanel } from './MenuBasePanel'\n\nexport class PausePanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n    onAbortGame: () => any = () => console.log('abort mission')\n    onRestartGame: () => any = () => console.log('restart mission')\n\n    constructor(parent: BaseElement, cfg: MenuCfg) {\n        super(parent, cfg)\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => this.hide() // Pause\n        this.layersByKey.get('menu2').itemsTrigger[0].onClick = () => this.onRepeatBriefing() // Options\n        this.layersByKey.get('menu3').itemsTrigger[0].onClick = () => this.onAbortGame() // Quit\n        this.layersByKey.get('menu4').itemsTrigger[0].onClick = () => this.onRestartGame() // Restart\n    }\n\n}\n","import { MenuCfg } from '../cfg/MenuCfg'\nimport { ObjectiveImageCfg } from '../cfg/ObjectiveImageCfg'\nimport { KEY_EVENT } from '../event/EventTypeEnum'\nimport { GameKeyboardEvent } from '../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../event/GamePointerEvent'\nimport { Panel } from '../gui/base/Panel'\nimport { BriefingPanel } from '../gui/briefing/BriefingPanel'\nimport { GuiResourceCache } from '../gui/GuiResourceCache'\nimport { OptionsPanel } from '../gui/overlay/OptionsPanel'\nimport { PausePanel } from '../gui/overlay/PausePanel'\nimport { DEV_MODE } from '../params'\nimport { WorkerMessageType } from '../resource/wadworker/WorkerMessageType'\nimport { GuiWorker } from './GuiWorker'\nimport { GuiWorkerMessage } from './GuiWorkerMessage'\n\nexport class OverlayWorker extends GuiWorker {\n\n    panelBriefing: BriefingPanel\n    panelOptions: OptionsPanel\n    panelPause: PausePanel\n\n    constructor(worker: Worker) {\n        super(worker)\n        this.panelPause = this.addPanel(new PausePanel(this.rootElement, GuiResourceCache.getResource('PausedMenu') as MenuCfg))\n        this.panelOptions = this.addPanel(new OptionsPanel(this.rootElement, GuiResourceCache.getResource('OptionsMenu') as MenuCfg))\n        this.panelBriefing = this.addPanel(new BriefingPanel(this.rootElement))\n        // link items\n        this.panelPause.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n        this.panelOptions.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n        this.panelBriefing.onSetSpaceToContinue = (state: boolean) => this.sendResponse({\n            type: WorkerMessageType.SPACE_TO_CONINUE,\n            messageState: state,\n        })\n        this.panelPause.onAbortGame = () => this.sendResponse({type: WorkerMessageType.GAME_ABORT})\n        this.panelPause.onRestartGame = () => this.sendResponse({type: WorkerMessageType.GAME_RESTART})\n    }\n\n    setCanvas(canvas: OffscreenCanvas) {\n        super.setCanvas(canvas)\n        this.panelPause.width = this.canvas.width\n        this.panelPause.height = this.canvas.height\n        this.panelOptions.width = this.canvas.width\n        this.panelOptions.height = this.canvas.height\n    }\n\n    onProcessMessage(msg: GuiWorkerMessage): boolean {\n        if (msg.type === WorkerMessageType.OVERLAY_SETUP) {\n            this.setup(msg.objectiveText, msg.objectiveBackImgCfg)\n        } else if (msg.type === WorkerMessageType.SHOW_OPTIONS) {\n            this.panelOptions.show()\n        } else {\n            return false\n        }\n        return true\n    }\n\n    setActivePanel(panel: Panel) {\n        this.panels.forEach(p => p !== panel && p.hide())\n        panel.show()\n        this.redraw()\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.panelBriefing.setup(objectiveText, objectiveBackImgCfg)\n        if (!DEV_MODE) this.setActivePanel(this.panelBriefing)\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        if (this.panels.every(p => p.hidden)) return false\n        return super.handlePointerEvent(event) || true // catch em all\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): boolean {\n        let result = false\n        const lEventKey = event.key.toLowerCase()\n        if (event.eventEnum === KEY_EVENT.UP) {\n            if (lEventKey === 'escape') {\n                if (this.panelBriefing.hidden && this.panelOptions.hidden) {\n                    if (this.panelPause.hidden) {\n                        // TODO actually pause the game\n                        this.setActivePanel(this.panelPause)\n                    } else {\n                        // TODO actually unpause the game\n                        this.panelPause.hide()\n                    }\n                    result = true\n                }\n            } else if (lEventKey === ' ') { // space\n                if (!this.panelBriefing.hidden) {\n                    this.panelBriefing.nextParagraph()\n                    result = true\n                }\n            }\n        }\n        return result\n    }\n\n}\n\nlet workerInstance: GuiWorker = null\n\nconst worker: Worker = self as any\n\nworker.addEventListener('message', (event) => {\n    const msg: GuiWorkerMessage = event.data\n    if (msg.type === WorkerMessageType.INIT) {\n        GuiResourceCache.resourceByName = msg.resourceByName\n        GuiResourceCache.configuration = msg.cfg\n        GuiResourceCache.stats = msg.stats\n        workerInstance = new OverlayWorker(worker)\n    } else {\n        workerInstance.processMessage(msg)\n    }\n})\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [529,969], () => (__webpack_require__(633)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".index.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t372: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkrock_raiders_web\"] = self[\"webpackChunkrock_raiders_web\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"sourceRoot":""}