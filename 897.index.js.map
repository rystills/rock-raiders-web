{"version":3,"sources":["webpack://rock-raiders-web/./site/modal/WadFileSelectionModal.ts","webpack://rock-raiders-web/./src/resource/wadworker/Resources.ts","webpack://rock-raiders-web/./src/resource/wadworker/InitLoadingMessage.ts","webpack://rock-raiders-web/./src/core/ImageHelper.js","webpack://rock-raiders-web/./src/resource/wadworker/WadUtil.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimationEntityType.ts","webpack://rock-raiders-web/./src/resource/AnimatedMesh.ts","webpack://rock-raiders-web/./src/resource/LWOLoader.ts","webpack://rock-raiders-web/./src/game/model/Selectable.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimClip.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimSubObj.ts","webpack://rock-raiders-web/./src/scene/DebugHelper.ts","webpack://rock-raiders-web/./src/game/model/entity/building/Building.ts","webpack://rock-raiders-web/./src/scene/model/BaseEntity.ts","webpack://rock-raiders-web/./src/event/WorldEvents.ts","webpack://rock-raiders-web/./src/event/EventBus.ts","webpack://rock-raiders-web/./src/game/model/job/JobState.ts","webpack://rock-raiders-web/./src/game/model/job/JobType.ts","webpack://rock-raiders-web/./src/game/model/job/Job.ts","webpack://rock-raiders-web/./src/scene/model/collect/CollectableEntity.ts","webpack://rock-raiders-web/./src/game/model/job/CollectJob.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/scene/model/activities/BaseActivity.ts","webpack://rock-raiders-web/./src/scene/model/activities/AnimEntityActivity.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimEntity.ts","webpack://rock-raiders-web/./src/scene/model/activities/DynamiteActivity.ts","webpack://rock-raiders-web/./src/scene/model/collect/Dynamite.ts","webpack://rock-raiders-web/./src/scene/model/collect/Crystal.ts","webpack://rock-raiders-web/./src/scene/model/collect/Ore.ts","webpack://rock-raiders-web/./src/scene/model/RaiderSkill.ts","webpack://rock-raiders-web/./src/resource/wadworker/WorkerMessage.ts","webpack://rock-raiders-web/./src/scene/SceneManager.ts","webpack://rock-raiders-web/./src/resource/LWSCLoader.ts","webpack://rock-raiders-web/./src/resource/AnimEntityLoader.ts","webpack://rock-raiders-web/./src/core/BitmapFont.ts","webpack://rock-raiders-web/./src/cfg/BaseConfig.ts","webpack://rock-raiders-web/./src/event/EventManager.ts","webpack://rock-raiders-web/./src/cfg/BuildingEntityStats.ts","webpack://rock-raiders-web/./src/cfg/MovableEntityStats.ts","webpack://rock-raiders-web/./src/cfg/GameStatsCfg.ts","webpack://rock-raiders-web/./src/resource/ResourceManager.ts","webpack://rock-raiders-web/./src/screen/ScreenLayer.ts","webpack://rock-raiders-web/./src/scene/model/map/Surface.ts","webpack://rock-raiders-web/./src/screen/BaseScreen.ts","webpack://rock-raiders-web/./src/screen/LoadingScreen.ts","webpack://rock-raiders-web/./src/menu/MainMenuBaseItem.ts","webpack://rock-raiders-web/./src/menu/MainMenuLabelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuIconButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLayer.ts","webpack://rock-raiders-web/./src/menu/MainMenuLevelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuPanel.ts","webpack://rock-raiders-web/./src/menu/MainMenuWindow.ts","webpack://rock-raiders-web/./src/menu/LevelSelectLayer.ts","webpack://rock-raiders-web/./src/screen/MainMenuScreen.ts","webpack://rock-raiders-web/./src/scene/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/scene/model/RaiderTool.ts","webpack://rock-raiders-web/./src/game/model/job/SurfaceJob.ts","webpack://rock-raiders-web/./src/scene/model/map/SurfaceGeometry.ts","webpack://rock-raiders-web/./src/event/WorldLocationEvent.ts","webpack://rock-raiders-web/./src/scene/model/map/astar.ts","webpack://rock-raiders-web/./src/scene/TerrainLoader.ts","webpack://rock-raiders-web/./src/scene/model/map/TerrainPath.ts","webpack://rock-raiders-web/./src/scene/model/map/Terrain.ts","webpack://rock-raiders-web/./src/scene/model/EntityStep.ts","webpack://rock-raiders-web/./src/scene/model/MoveState.ts","webpack://rock-raiders-web/./src/scene/model/MovableEntity.ts","webpack://rock-raiders-web/./src/scene/model/FulfillerEntity.ts","webpack://rock-raiders-web/./src/scene/model/activities/RaiderActivity.ts","webpack://rock-raiders-web/./src/scene/model/Raider.ts","webpack://rock-raiders-web/./src/scene/model/activities/BuildingActivity.ts","webpack://rock-raiders-web/./src/scene/model/BuildingEntity.ts","webpack://rock-raiders-web/./src/game/model/entity/monster/Monster.ts","webpack://rock-raiders-web/./src/scene/model/activities/MonsterActivity.ts","webpack://rock-raiders-web/./src/game/model/entity/monster/SmallSpider.ts","webpack://rock-raiders-web/./src/game/model/entity/monster/Bat.ts","webpack://rock-raiders-web/./src/scene/ObjectListLoader.ts","webpack://rock-raiders-web/./src/core/NerpRunner.ts","webpack://rock-raiders-web/./src/core/NerpParser.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityList.ts","webpack://rock-raiders-web/./src/game/model/job/MoveJob.ts","webpack://rock-raiders-web/./src/scene/WorldManager.ts","webpack://rock-raiders-web/./src/game/layer/SelectionLayer.ts","webpack://rock-raiders-web/./src/game/layer/GameLayer.ts","webpack://rock-raiders-web/./src/game/gui/base/BaseElement.ts","webpack://rock-raiders-web/./src/game/gui/base/Panel.ts","webpack://rock-raiders-web/./src/game/gui/base/Button.ts","webpack://rock-raiders-web/./src/game/gui/sidebar/SideBarLabel.ts","webpack://rock-raiders-web/./src/game/gui/sidebar/PanelCrystalSideBar.ts","webpack://rock-raiders-web/./src/game/gui/infodock/ButtonInfoDockCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/ButtonPriorityListCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/ButtonTopCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonsCfg.ts","webpack://rock-raiders-web/./src/game/gui/radar/RadarPanel.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessage.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/MessagePanel.ts","webpack://rock-raiders-web/./src/cfg/IconPanelBackButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/MenuItemCfg.ts","webpack://rock-raiders-web/./src/game/gui/main/IconPanelButton.ts","webpack://rock-raiders-web/./src/game/gui/main/IconSubPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/BuildingPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SmallVehiclePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/LargeVehiclePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectBasePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectWallPanel.ts","webpack://rock-raiders-web/./src/scene/model/BuildingSite.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectFloorPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectRubblePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectBuildingPanel.ts","webpack://rock-raiders-web/./src/game/model/job/EatJob.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectRaiderPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectVehiclePanel.ts","webpack://rock-raiders-web/./src/game/model/job/TrainJob.ts","webpack://rock-raiders-web/./src/game/gui/main/TrainRaiderPanel.ts","webpack://rock-raiders-web/./src/game/model/job/GetToolJob.ts","webpack://rock-raiders-web/./src/game/gui/main/GetToolPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/IconPanelButtonLabel.ts","webpack://rock-raiders-web/./src/game/gui/main/MainPanel.ts","webpack://rock-raiders-web/./src/game/gui/base/ToggleButton.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/TopPanel.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoDockButton.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoDockPanel.ts","webpack://rock-raiders-web/./src/cfg/PanelsCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityListPanel.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoMessagesEntryConfig.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoMessagesConfig.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InformationPanel.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityButtonsConfig.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityPositionsEntry.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessageEntryConfig.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessageConfig.ts","webpack://rock-raiders-web/./src/game/layer/GuiBaseLayer.ts","webpack://rock-raiders-web/./src/game/layer/GuiMainLayer.ts","webpack://rock-raiders-web/./src/game/Supervisor.ts","webpack://rock-raiders-web/./src/game/gui/briefing/BriefingPanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuCycleItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuSliderItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuLabelItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuLayer.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuBasePanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/OptionsPanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/PausePanel.ts","webpack://rock-raiders-web/./src/core/Rect.ts","webpack://rock-raiders-web/./src/cfg/DialogCfg.ts","webpack://rock-raiders-web/./src/cfg/BriefingPanelCfg.ts","webpack://rock-raiders-web/./src/game/layer/OverlayLayer.ts","webpack://rock-raiders-web/./src/screen/GameScreen.ts","webpack://rock-raiders-web/./src/menu/RewardScreenButton.ts","webpack://rock-raiders-web/./src/screen/RewardScreen.ts","webpack://rock-raiders-web/./src/main.ts"],"names":["parentId","onStart","rootElement","document","getElementById","appendChild","createElement","classList","add","tabIndex","setAttribute","modalDialog","modalContent","modalHeader","modalTitle","innerText","id","modalBody","navTabList","navFileBtn","WadFileSelectionModal","appendNavButton","navUrlBtn","navTabContent","this","appendNavFileTab","appendNavUrlTab","modal","backdrop","keyboard","parent","active","controlTarget","navBtn","type","String","labelledBy","navFileTab","appendNavTab","wad0File","appendWadFileGroup","wad1File","btnStartFile","addEventListener","disabled","wad0FileUrl","URL","createObjectURL","files","wad1FileUrl","filename","wadFileGroup","wadFileLabel","innerHTML","wadFileInput","required","navUrlTab","urlHint","wad0Url","appendWadUrlGroup","wad1Url","btnStartUrl","value","navTab","example","wadUrlGroup","wadUrlLabel","wadUrlInput","show","hide","Worker_fn","Worker","createContext","width","height","console","error","result","y","x","fillStyle","fillRect","createDummyContext","canvas","context","getContext","createDummyImgData","ImageData","e","px","py","setPixel","imgData","r","g","b","a","n","data","getPixel","iGet","obj","keys","forEach","keyname","Object","filter","key","toLowerCase","map","url","strUrl","toString","replace","startsWith","substring","lastInd","lastIndexOf","decodeString","TextDecoder","decode","decodeFilepath","getRandomInclusive","min","max","Math","ceil","floor","random","getRandom","getRandomSign","clearTimeoutSafe","timeout","clearTimeout","clearIntervalSafe","interval","clearInterval","removeFromArray","array","element","Array","isArray","index","indexOf","splice","carryNullName","mediumPoly","highPoly","fPPoly","activities","Map","mesh","textureSequences","dispose","s","geometry","material","mat","SURF_VTRN","getVector3AtOffset","view","offset","vector","getFloat32","z","SelectionType","path","verbose","materials","vertices","indices","uvs","sequenceIntervals","log","parsePoints","chunkOffset","chunkSize","numVertices","Float32Array","i","vertexIndex","vertexOffset","parseSurfaceNames","buffer","surfaceNames","Uint8Array","split","length","new_material","name","side","push","parsePolygons","totalNumIndices","numIndices","getInt16","materialIndex","addGroup","currentIndex","Uint16Array","faceIndices","Int16Array","COUNTER_CLOCKWISE","parseSurface","getUint8","materialName","textureFlags","textureSize","textureCenter","subchunkOffset","subchunkType","getInt32","subchunkSize","colorArray","color","fromArray","join","flags","getUint16","luminosity","diffuse","specular","reflection","reflectivity","transparency","opacity","transparent","luminosity2","diffuse2","specular2","toArray","textureTypeName","textureColorArray","textureFilepath","sequenceTexture","endsWith","textureFilename","match","ResourceManager","filterTextureSequenceNames","setInterval","getTexture","SEQUENCE_TEXTURE_FRAMERATE","alphaTest","warn","size","center","XAXIS_BIT","groups","group","start","count","uvIndex","u","v","planarMapUVS","parse","DataView","getUint32","fileSize","byteLength","ID4_SIZE","cursor","chunkType","setIndex","computeVertexNormals","AnimatedMesh","magic","looping","transcoef","firstFrame","lastFrame","framesPerSecond","bodies","degToRad","relPos","relRot","relScale","parentObjInd","model","radVec","degX","degY","degZ","setFrameAndFollowing","animationFrameIndex","infos","c","setOpacityAndFollowing","Stats","stats","setMode","domElement","style","position","left","top","body","visibility","renderStart","begin","renderDone","end","folder","dropPosAngleDeg","dropPosDist","aeFile","slice","getByName","buildingType","TOOLSTATION","TELEPORT_PAD","DOCKS","POWER_STATION","BARRACKS","UPGRADE","GEODOME","ORE_REFINERY","GUNSTATION","TELEPORT_BIG","Building","EntityType","level","getPosition","clone","getPosition2D","getHeading","rotation","onDiscover","visible","publishEvent","event","blockedEvents","includes","eventKey","isLocal","getListener","callback","registerEventListener","listener","eventListener","set","get","entityKey","GameEvent","job","WorldEvent","JobCreateEvent","JobEvent","JobDeleteEvent","numRequested","RaiderRequested","collectType","CollectEvent","surface","SpawnDynamiteEvent","collectable","spawnPosition","SpawnMaterialEvent","entity","EntityAddedEvent","EntityRemovedEvent","JobState","CavernDiscovered","OreFoundEvent","building","BuildingUpgraded","raider","skill","RaiderTrained","JobType","fulfiller","jobstate","OPEN","assign","unassign","cancel","CANCELED","stopJob","isQualified","isQualifiedWithTool","isQualifiedWithTraining","onJobComplete","COMPLETE","Job","CollectableType","CollectTargetType","item","CARRY","getWorkplaces","carries","hasTarget","getTargetType","getCollectableType","CRYSTAL","GameState","numCrystal","EventBus","ORE","numOre","BUILDING_SITE","targetSite","addItem","getPriorityIdentifier","PublicJob","collectableType","targetPos","getTargetPositions","sites","buildingSites","needs","getRandomDropPosition","targetType","buildings","getBuildingsByType","getTargetBuildingTypes","targetBuilding","getDropPosition2D","complete","resetTarget","unAssign","collectablesUndiscovered","collectables","CollectJob","BaseEntity","GameResultState","eventSuffix","SelectionEvent","LocalEvent","SurfaceSelectedEvent","BuildingSelected","RaiderSelected","vehicle","VehicleSelected","EntityDeselected","activityKey","Stand","AnimEntityActivity","BaseActivity","entityType","poly","animation","animationTimeout","selectionFrame","pickSphere","pickSphereRadius","carryJoint","activity","beamUp","setActivity","AnimEntity","moveUp","TILESIZE","counter","NATIVE_FRAMERATE","setTimeout","removeFromScene","worldMgr","sceneManager","scene","remove","changeActivity","onChangeDone","durationTimeMs","bind","onAnimationDone","act","setAnimation","children","polyModel","polyPart","parentInd","animate","frameIndex","p","copy","scale","hasOwnProperty","undefined","nextFrame","standardDurationTimeMs","timeoutTimeMs","createPickSphere","pickSphereCenter","getPickSphereCenter","userData","selectable","createSelectionFrame","getBoundingBoxCenter","setFromObject","getCenter","sub","applyMatrix4","makeScale","selectionFrameTextureSize","ctx","strength","round","selectionFrameTexture","selectionMaterial","depthTest","selectionFrameSize","Normal","DynamiteActivity","TickDown","getAnimationEntityType","targetSurface","isExplodable","hasOneBuildingOf","getDigPositions","DYNAMITE","ignite","getCenterWorld","lookAt","collapse","resource2","getResource","mesh2","SceneManager","registerMesh","LWOLoader","emissive","depthWrite","resource","PowerCrystal","CollectableEntity","Ore","DRIVER","RaiderSkill","ENGINEER","GEOLOGIST","PILOT","SAILOR","DEMOLITION","WorkerMessageType","reset","resultState","RUNNING","levelFullName","numBrick","usedCrystals","neededCrystals","airlevel","selectedEntities","selectionType","buildingsUndiscovered","raiders","raidersUndiscovered","requestedRaiders","vehicles","vehiclesUndiscovered","spiders","bats","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","discoveredCaverns","levelStartTime","levelStopTime","rewardConfig","priorityList","isPowered","buildingTypes","some","bt","getClosestBuildingByType","targetBuildings","closest","minDist","bPos","getDropPosition","dist","distanceToSquared","hasBuildingWithUpgrades","upgrades","getTrainingSites","training","TrainDynamite","selectEntities","entities","previouslySelected","stillSelected","deselect","selectionEvents","freshlySelected","selectionEvent","select","len","GROUP","getSelectionType","getMaxRaiders","MAX_RAIDER_BASE","ADDITIONAL_RAIDER_PER_SUPPORT","discoverSurface","minX","minZ","maxX","maxZ","discoverEntities","undiscovered","discovered","pos","dropMaterial","quantity","Dynamite","Crystal","quota","importance","scoreCrystals","crystals","Infinity","scoreTimer","gameTimeSeconds","timer","scoreCaverns","caverns","scoreConstructions","constructions","scoreOxygen","oxygen","scoreFigures","figures","SURFACE","BUILDING","maxFps","debugHelper","DebugHelper","renderer","antialias","setClearColor","camera","controls","mouseButtons","LEFT","MIDDLE","RIGHT","selectEntitiesByRay","rx","ry","raycaster","setFromCamera","intersects","intersectObjects","terrain","floorGroup","selected","object","selectEntitiesInFrustum","r1x","r1y","r2x","r2y","startPoint","endPoint","Number","EPSILON","updateProjectionMatrix","updateMatrixWorld","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","setFromMatrixPosition","matrixWorld","unproject","vectemp1","vectemp2","vectemp3","normalize","deep","MAX_VALUE","multiplyScalar","frustum","planes","setFromCoplanarPoints","normal","containsPoint","getSelectionCenter","setupScene","ambientColor","ambientLight","cursorTorchlight","distance","startScene","renderInterval","animRequest","requestAnimationFrame","render","disposeScene","cancelAnimationFrame","meshRegistry","animatedMesh","animationClip","AnimClip","lines","lineIndex","content","l","trim","sceneFileVersion","parseInt","line","parseFrameBlock","parseObjectBlock","parseLine","frameStep","subObj","AnimSubObj","lwoBuffer","lenInfos","lenFrames","numOfInformationChannels","numOfKeyframes","frameNum","loadModels","root","getPath","AnimationEntityType","polyname","polykey","file","isLws","LWSCLoader","fontImageData","cols","rows","letters","chars","maxCharWidth","getActualCharacterWidth","rowPixelIndex","colPixelIndex","charHeight","extractData","actualWidth","startX","startY","alpha","createTextImage","text","maxWidth","autoCenter","determineRows","row","rowX","rowY","letterX","letterImgData","charAt","img","putImageData","spaceWidth","rowText","rowWidth","word","wordWidth","letter","letterImg","createTextMessage","msg","MSG","createCfgLoaded","cfg","totalResources","CFG","createAssetLoaded","assetIndex","assetName","assetObj","ASSET","createLoadDone","loadingTimeSeconds","DONE","MOUSE_BUTTON","POINTER_EVENT","KEY_EVENT","setFromCfg","config","cfgObj","cfgKey","lCfgKeyName","objKey","assignValue","cfgValue","currentValue","currentIsArray","parsedValue","parseValue","parsedIsArray","Levels","SelfPowered","PickSphere","CostOre","CostCrystal","getByType","Toolstation","TeleportPad","Docks","Powerstation","Barracks","Upgrade","Geodome","OreRefinery","GunStation","TeleportBIG","BaseConfig","RouteSpeed","RubbleCoef","PathCoef","Pilot","SoilDrillTime","LooseDrillTime","MedDrillTime","HardDrillTime","SeamDrillTime","UpgradeTime","CollRadius","CollHeight","TrackDist","SingleWidthDig","RepairValue","SurveyRadius","Drillsound","Drillfadesound","RestPercent","EnergyDecayRate","CanClearRubble","NumOfToolsCanCarry","CrossLand","RouteAvoidance","UseLegoManTeleporter","AwarenessRange","OxygenCoef","CanStrafe","EnterToolStore","ShowHealthBar","RockMonster","AlertRadius","HealthDecayRate","CanScare","CarryMinHealth","PainThreshold","StampRadius","AttackRadius","CanSteal","GrabMinifigure","BumpDamage","AttackPaths","SplitOnZeroHealth","CanBeHitByFence","Capacity","CanBeShotAt","CanFreeze","FreezerTime","FreezerDamage","CanLaser","LaserDamage","CanPush","PusherDist","PusherDamage","WakeRadius","ScaredByBigBangs","RemoveReinforcement","SmallSpider","RandomMove","RandomEnterWall","CauseSlip","DontShowDamage","DontShowOnRadar","MovableEntityStats","Bat","randomMoveTime","Flocks","FlocksDebug","FlocksSmooth","FlocksSize","FlocksTurn","FlocksSpeed","FlocksTightness","FlocksGoalUpdate","FlocksRandomness","FlocksHeight","CrossWater","CrossLava","TinyRM","ScaredByPlayer","TinyIM","Slug","UseHoles","DrainPower","LavaMonster","IceMonster","Hoverboard","CanBeDriven","UseSmallTeleporter","UpgradeCostOre","UpgradeCostStuds","EngineSound","SmallHeli","Smallmlp","Tracker","CanDoubleSelect","SmallCat","UseWaterTeleporter","MaxCarry","GetInAtLand","GetOutAtLand","TakeCarryingDrivers","SmallDigger","VehicleCanBeCarried","SmallTruck","CarryStart","Bulldozer","UseBigTeleporter","InvisibleDriver","WalkerDigger","DrillSound","DrillFadeSound","LargeDigger","LargeCat","ClassAsLarge","CarryVehicles","LargeHeli","LargeMLP","CostRefinedOre","SnaxULike","TrainDriver","CrystalDrain","DamageCausesCallToArms","BuildingEntityStats","ProcessCrystal","PowerBuilding","ProcessOre","SmallTeleporter","ManTeleporter","TrainPilot","BigTeleporter","WaterEntrances","WaterTeleporter","TrainSailor","ToolStore","StoreObjects","FunctionCoef","TrainScanner","UpgradeBuilding","TrainRepair","ProcessedOre","Boulder","Pusher","Freezer","LaserShot","ColRadius","ElectricFence","Path","startLoadingFromCache","startLoading","startLoadingFromUrl","InitLoadingMessage","worker","onmessage","resourceByName","onAssetLoaded","onMessage","configuration","GameStatsCfg","onInitialLoad","CACHE_MISS","onCacheMissed","onLoadDone","postMessage","basename","lBasename","resourceName","lName","getImageData","imageName","lImageName","getImage","getImageOrNull","textureName","lTextureName","lSharedTextureName","texture","needsUpdate","getMap","aeFilename","cfgRoot","AnimEntityLoader","getBitmapFont","fontCache","BitmapFont","getDefaultFont","withContext","background","setZIndex","zIndex","compareZ","layerA","layerB","aIndex","bIndex","resize","redraw","onRedraw","isActive","toCanvasCoords","windowX","windowY","clientRect","getBoundingClientRect","handlePointerEvent","eventEnum","handleKeyEvent","handleWheelEvent","fixedWidth","SPRITE_RESOLUTION_WIDTH","fixedHeight","SPRITE_RESOLUTION_HEIGHT","toScaledCoords","cx","cy","scaleX","scaleY","ScreenLayer","cursorName","createCursor","curUrl","revokeObjectURL","curImg","toDataURL","ScaledLayer","WALL_TYPE","screen","gameCanvasContainer","isInRect","preventDefault","MOVE","DOWN","UP","eventType","nonBubblingClone","PointerEvent","bubbles","clientX","clientY","pointerType","button","ctrlKey","metaKey","shiftKey","layers","sort","WheelEvent","deltaX","deltaY","deltaZ","ratio","focus","eventMgr","EventManager","window","onWindowResize","cursorLayer","addLayer","CursorLayer","layer","offsetWidth","maxHeight","offsetHeight","idealHeight","firstLayer","rect","right","bottom","setLoadingMessage","font","fillText","enableGraphicMode","imgBackground","imgProgress","imgLoading","loadingBarWidth","drawImage","setLoadingState","BaseScreen","scrollAffected","needsRedraw","hover","pressed","actionName","targetIndex","checkHover","sx","sy","onHoverChange","checkSetPressed","setReleased","draw","labelImgLo","labelImgHi","loFont","label","hiFont","target","MainMenuBaseItem","imgNormal","imgHover","imgPressed","tooltip","menuCfg","items","scrollY","scrollSpeedY","scrollInterval","menuImage","titleImage","fullName","itemsLabel","MainMenuLabelButton","MainMenuIconButton","displayTitle","that","setScrollY","absY","canScroll","scrollAreaHeight","setScrollSpeedY","MAIN","showMainMenu","selectLevel","levelKey","sign","pow","scrollYBefore","levelCfg","imgActive","imgInactive","imgCross","unlocked","frontEndX","frontEndY","menuBMP","frontEndOpen","area","w","h","imgFirstLine","imgSecondLine","setFirstLine","setSecondLine","modeLevel","levelsCfg","levelTextCfg","LevelTextCfg","MainMenuPanel","panelImgData","panelPos","levelTextWindow","MainMenuWindow","tutorial","levelsByName","levelButton","MainMenuLevelButton","MainMenuLayer","winCfg","panelCfg","onLevelSelected","menus","title","LevelSelectLayer","showLevelSelection","levelName","options","shaping","matIndex","drillable","drillableHard","explodable","reinforcable","getByNum","typeNum","SurfaceType","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","GROUND","POWER_PATH","POWER_PATH_SITE","DRILL","RaiderTool","HAMMER","SHOVEL","SPANNER","FREEZERGUN","LASER","PUSHERGUN","BIRDSCARER","colorPriority","requiredTool","requiredSkill","SurfaceJobType","REINFORCE","BLOW","CLEAR_RUBBLE","workType","hasTool","hasSkill","rubblePositions","reinforce","reduceRubble","dynamite","SurfaceJob","placedItems","placed","surfaceType","updateTexture","create","wallType","topLeftVertex","bottomRightVertex","topRightVertex","bottomLeftVertex","topLeftHeight","topRightHeight","bottomRightHeight","bottomLeftHeight","uvOffset","INVERTED_CORNER","WALL","WEIRD_CREVICE","Boolean","uv","bufferVertices","bufferNormals","addFaceAndNormals","subVectors","cross","uvIndexes","bufferVertexUvs","bufferGeometry","BufferAttribute","copyVector3sArray","copyVector2sArray","location","GenericDeathEvent","WorldLocationEvent","GenericMonsterEvent","CrystalFoundEvent","UnderAttackEvent","LandslideEvent","PowerDrainEvent","SlugEmergeEvent","RaiderDiscoveredEvent","heightOffset","containedOres","containedCrystals","reinforced","jobs","surfaceRotation","seamLevel","fallinTimeout","fallinGrp","needsMeshUpdate","topLeftHeightOffset","topRightHeightOffset","bottomLeftHeightOffset","bottomRightHeightOffset","surfaceJob","hasJobType","discoverNeighbors","foundCave","surf","getSurfaceOrNull","cancelJobs","getRandomPosition","dropContainedOre","crystal","addCollectable","getSurface","isSupported","updateSurfaceMeshes","updateWorldMatrix","dropAmount","updateJobColor","shift","surfLeft","surfTopLeft","surfTop","surfTopRight","surfRight","surfBottomRight","surfBottom","surfBottomLeft","isHighGround","surf1","surf2","surf3","updateMesh","force","updateGeometry","cancelReinforceJobs","otherJobs","textureSet","texturebasename","updatePowerPathTexture","CORNER","accessMaterials","isPath","pathSum","PI","avgHeight","sum","cnt","args","HEIGHT_MULTIPLER","SurfaceGeometry","shininess","setHex","hasRubble","isWalkable","isDrillable","isDrillableHard","isReinforcable","isDigable","digPosition","getCenterWorld2D","getTerrainHeight","setFallinLevel","fallinLevel","originPos","findFallInOrigin","findFallInTarget","scheduleFallin","targetX","targetY","createFallin","fallinPosition","dx","dy","rotateOnAxis","atan2","m","getFloorHeight","worldX","worldZ","dy0","Surface","interpolate","dy1","y0","y1","pathTo","node","curr","unshift","PathMap","PredugMap","astar","search","graph","cleanDirty","heuristic","heuristics","manhattan","openHeap","BinaryHeap","f","closestNode","markDirty","currentNode","pop","closed","neighbors","il","neighbor","isWall","gScore","getCost","beenVisited","visited","rescoreElement","pos0","pos1","abs","diagonal","D2","sqrt","d1","d2","cleanNode","gridIn","nodes","grid","dirtyNodes","GridNode","init","ret","graphString","rowDebug","weight","fromNeighbor","scoreFunction","sinkDown","bubbleUp","parentN","elemScore","child2N","child1N","swap","child1Score","child1","child2","locations","lengthSq","addLocation","surfaces","roofGroup","graphWalk","cachedPaths","bSurf","getSurfaceFromWorld","worldPosition","getSurfaceFromWorldXZ","Graph","clear","findPath","startSurface","endSurface","TerrainPath","cacheIdentifier","cachedPath","searchPath","startNode","endNode","worldPath","leftSurface","topSurface","rightSurface","bottomSurface","leftSurface2","topSurface2","rightSurface2","bottomSurface2","loadTerrain","levelConf","tileSize","blockSize","Terrain","themeName","terrainMap","pathMap","surfaceMap","predugMap","cryOreMap","fallinMap","erodeMap","surfaceTypeNum","predugLevel","CAVERN_EXPOSED","SLUG_HOLE_EXPOSED","SLUG_HOLE_HIDDEN","CAVERN_HIDDEN","pathMapLevel","NONE","RUBBLE","currentCryOre","MoveState","dz","vec","targetReached","currentPath","getSpeed","isOnPath","moveToTarget","moveToClosestTarget","targets","t","equals","targetPosition","paths","findPathToTarget","TARGET_UNREACHABLE","step","determineStep","TARGET_REACHED","getRouteActivity","nextLocation","firstLocation","MOVED","getEntityStep","entitySpeed","stepLengthSq","JOB_ACTION_RANGE","setLength","EntityStep","determinePosY","isOnRubble","workInterval","followUpJob","work","resetWorkInterval","dropItem","pickupItem","setJob","getStandActivity","MovableEntity","Route","RaiderActivity","RunPanic","Drill","Walk","Reinforce","Reverse","TurnLeft","TurnRight","CantDo","Collect","Clear","Carry","CarryTurnLeft","CarryTurnRight","CarryStand","Place","Deposit","TeleportIn","Repair","rest","routeRubble","CarryRubble","Eat","FireLaser","GetUp","ThrownByRockMonster","Slip","Train","Recharge","Waiting1","Waiting2","Waiting3","Waiting4","Standhoverboard","HitLefthoverboard","HitRighthoverboard","HitFronthoverboard","HitBackhoverboard","SMALLTRUCK","StandSMALLTRUCK","HitLeftSMALLTRUCK","HitRightSMALLTRUCK","HitFrontSMALLTRUCK","HitBackSMALLTRUCK","SMALLheli","StandSMALLheli","HitLeftSMALLheli","HitRightSMALLheli","HitFrontSMALLheli","HitBackSMALLheli","SMALLCAT","StandSMALLCAT","HitLeftSMALLCAT","HitRightSMALLCAT","HitFrontSMALLCAT","HitBackSMALLCAT","SMALLMLP","StandSMALLMLP","HitLeftSMALLMLP","HitRightSMALLMLP","HitFrontSMALLMLP","HitBackSMALLMLP","LARGECAT","StandLARGECAT","HitLeftLARGECAT","HitRightLARGECAT","HitFrontLARGECAT","HitBackLARGECAT","SMALLDIGGER","StandSMALLDIGGER","tools","skills","RAIDER","isDriving","surfaceJobType","drillTimeMs","focusPoint","rotateAround","completeJob","TRAIN","GET_TOOL","tool","EAT","FulfillerEntity","Teleport","BuildingActivity","Explode","Unpowered","powerSwitch","powerLink","spawning","upgradeCostOre","upgradeCostBrick","dropPos2D","hasMaxLevel","upgrade","canUpgrade","BRICK","MonsterActivity","startMoving","onMove","spider","moveTimeout","onDeath","findSolidTarget","currentCenter","targetZ","onLevelEnd","Monster","bat","findTarget","loadObjectList","objectListConf","values","olObject","lTypeName","xPos","yPos","terrainY","radHeading","heading","applyAxisAngle","update","setTorchPosition","Raider","BuildingEntity","primaryPathSurface","secondaryOffset","secondarySurface","pathOffset","pathSurface","debug","onLevelComplete","nerpInterval","registers","fill","timers","scriptLines","statements","macrosByName","labelsByName","halted","programCounter","messages","messagePermit","startExecution","execute","pauseExecution","checkRegister","register","num","isNaN","Error","checkRegisterValue","getR","setR","addR","setTimer","Date","getTime","getTimer","setLevelCompleted","setLevelFail","FAILED","setTutorialFlags","setMessagePermit","messagesAllowed","setBuildingsUpgradeLevel","typeName","setToolStoreLevel","setTeleportPadLevel","setPowerStationLevel","setBarracksLevel","getToolStoresBuilt","getMinifiguresOnLevel","getCrystalsCurrentlyStored","getObjectiveSwitch","setMessageTimerValues","arg1","arg2","arg3","getMessageTimer","cameraUnlock","setMessage","messageNumber","arrowDisabled","txt","setCameraGotoTutorial","getTutorialBlockIsGround","getTutorialBlockIsPath","getUnitAtBlock","getOxygenLevel","getObjectiveShowing","addPoweredCrystals","disallowAll","getPoweredPowerStationsBuilt","getPoweredBarracksBuilt","getRecordObjectAtTutorial","getHiddenObjectsFound","callMethod","methodName","methodArgs","setRegisterMatch","addRegisterMatch","getRegisterMatch","setTimerMatch","getTimerMatch","lMethodName","memberName","apply","conditional","conditionResult","executeStatement","expression","invoke","argValues","comparator","jump","statement","nerpScript","nerpRunner","NerpRunner","includeName","includedRunner","NerpParser","concat","firstLine","macroLines","mLine","append","macroLine","macroCall","replaceMacros","labelMatch","preProcess","labelName","macro","RegExp","number","opSplit","brackets","spaceSplit","jumpMatch","priorities","levelDefault","current","toggle","enabled","upOne","tmp","entry","PriorityEntry","pushToTop","getPriority","levelPriorityEntry","spawnRaiderInterval","checkSpawnRaiders","CHECK_SPANW_RAIDER_TIMER","DynamiteJob","setup","gameScreen","reward","PriorityList","ambientRgb","maxAmbRgb","normalizedRgb","TerrainLoader","oListFile","ObjectListLoader","nerpFile","nerpMessageFile","now","stop","setSize","getTerrainIntersectionPoint","point","intersect","intersectObject","world","spawnBuildings","station","walkOutPos","MoveJob","applyEuler","selectStart","setWorldManager","worldManager","startSelection","changeSelection","screenX","screenY","clearRect","strokeStyle","lineWidth","strokeRect","rightDown","intersectionPoint","getTerrainPositionFromEvent","SECONDARY","createSurfaceJob","dispatchEvent","DEV_MODE","surfJob","relX","relY","hidden","addChild","child","updatePosition","drawHover","drawTooltip","onClick","isInactive","inRect","stateChanged","checkClick","checkRelease","release","notifyRedraw","xOut","yOut","xIn","yIn","movedIn","updateAnimation","speed","onDone","diffX","diffY","setMovedIn","toggleState","PANEL_ANIMATION_MULTIPLIER","BaseElement","btnCfg","buttonType","imgDisabled","normalFile","highlightFile","pressedFile","disabledFile","textAlign","buttonsCfg","labelOre","SideBarLabel","panelButtonCrystalSideBarOre","totalOre","labelCrystal","panelButtonCrystalSideBarCrystals","imgNoCrystal","imgSmallCrystal","imgUsedCrystal","imgOre","updateQuantities","curX","curY","imgCrystal","Panel","ButtonCfg","panelButtonInfoDockGoto","panelButtonInfoDockClose","panelButtonPriorityListDisable","panelButtonPriorityListUpOne","panelButtonPriorityListClose","panelButtonPriorityListReset","panelButtonTopPanelCallToArms","panelButtonTopPanelOptions","panelButtonTopPanelPriorities","panelRadar","panelCrystalSideBar","panelTopPanel","panelInformation","panelPriorityList","panelCameraControl","panelInfoDock","panelEncyclopedia","btnCfgValue","arr","ButtonRadarCfg","ButtonCrystalSideBarCfg","ButtonTopCfg","ButtonInformationCfg","ButtonPriorityListCfg","ButtonCameraControlCfg","ButtonInfoDockCfg","panelButtonInformationToggle","panelButtonInformationFunction","panelButtonCameraControlZoomIn","panelButtonCameraControlZoomOut","panelButtonCameraControlCycleBuildings","panelButtonCameraControlRotate","BaseButtonCfg","buttonImageFilename","panelFillCfg","panelOverlayCfg","overlay","btnToggle","Button","panelButtonRadarToggle","btnMap","panelButtonRadarMapView","btnTagged","panelButtonRadarTaggedObjectView","panelButtonRadarZoomIn","panelButtonRadarZoomOut","infoMessageEntryConfig","textImage","infoImage","imageFilename","textInfoMessageConfig","imgAir","currentMessage","messageTimeout","crystalFound","TextInfoMessage","textCrystalFound","msgSpaceToContinue","textSpaceToContinue","cavernDiscovered","textCavernDiscovered","oreFound","textOreFound","msgAirSupplyLow","textAirSupplyLow","msgAirSupplyRunningOut","textAirSupplyRunningOut","msgGameCompleted","textGameCompleted","msgManTrained","textManTrained","msgUnitUpgraded","textUnitUpgraded","textInfoMessage","unsetMessage","txtX","infoX","tooltipDisabled","hotkey","menuItemCfg","itemKey","parentWidth","menuIndex","isDisabled","updateState","autoRedraw","targetState","numOfItems","onBackPanel","backBtn","iconPanelButtons","backBtnCfg","IconPanelBackButtonCfg","frameImgCfg","imgName","imgNameWoBackName","addMenuItem","menuItemGroup","MenuItemCfg","menuItem","IconPanelButton","IconSubPanel","itemDrill","addWallMenuItem","itemReinforce","itemDynamite","itemDeselect","jobType","selectedSurface","SelectBasePanel","isPowerPath","neededByType","assignedByType","onSiteByType","needed","checkComplete","neededType","CompletePowerPathJob","pathItem","ore","site","BuildingSite","clearRubbleItem","upgradeItem","deleteBuildingItem","feedItem","selectedRaiders","EatJob","getToolItem","trainItem","deleteRaiderItem","trainDynamite","every","TrainJob","addGetToolItem","pathToToolstation","GetToolJob","subPanels","mainPanel","addSubPanel","buildingPanel","BuildingPanel","smallVehiclePanel","SmallVehiclePanel","largeVehiclePanel","LargeVehiclePanel","selectWallPanel","SelectWallPanel","selectFloorPanel","SelectFloorPanel","selectRubblePanel","SelectRubblePanel","selectBuildingPanel","SelectBuildingPanel","selectRaiderPanel","SelectRaiderPanel","trainRaiderPanel","TrainRaiderPanel","getToolPanel","GetToolPanel","selectVehiclePanel","SelectVehiclePanel","teleportRaider","IconPanelButtonLabel","buildingItem","smallVehicleItem","largeVehicleItem","selectSubPanel","childPanel","targetPanel","subPanel","updated","isPressed","btnCallToArms","ToggleButton","btnOptions","btnPriorities","infoMessagesEntryConfig","InfoButtonCfg","animationSpeedX","animationSpeedY","message","buttonClicked","showButton","slideToTarget","Promise","resolve","infoMessagesConfig","informationPanel","stackButtons","gotoLatestMessage","dropLatestMessage","InfoDockButton","infoGenericDeath","infoGenericMonster","infoCrystalFound","infoUnderAttack","infoLandslide","infoPowerDrain","infoSlugEmerge","infoFoundMinifigure","btn","slideStackIntoPosition","then","slideInButton","reduce","prev","cur","pushFirst","setText","promises","all","panelRadarFill","panelRadarOverlay","panelMessages","panelMessagesSide","PanelCfg","prioPositions","prioByName","buttonCfg","setList","resetList","aiPriorityTrain","aiPriorityGetIn","aiPriorityCrystal","aiPriorityOre","aiPriorityRepair","aiPriorityClearing","aiPriorityDestruction","aiPriorityConstruction","aiPriorityReinforce","aiPriorityRecharge","prioButton","sfx","timing","flag","InfoMessagesEntryConfig","sfxName","TextInfoMessageEntryConfig","panels","addPanel","panel","hit","onOptionsShow","panelsCfg","PanelsCfg","ButtonsCfg","InformationPanel","InfoDockPanel","InfoMessagesConfig","priorityButtonsConfig","PriorityButtonsConfig","priorityPositionsConfig","PriorityPositionsEntry","PriorityListPanel","TopPanel","panelMain","MainPanel","PanelCrystalSideBar","MessagePanel","TextInfoMessageConfig","RadarPanel","GuiBaseLayer","assignInterval","checkRubbleInterval","assignJobs","JOB_SCHEDULE_INTERVAL","checkUnclearedRubble","CHECK_CLEARRUBBLE_INTERVAL","availableJobs","j","unemployedRaider","closestRaider","closestRaiderIndex","minDistance","closestToolRaider","closestToolRaiderIndex","minToolDistance","closestToolstationPosition","closestNeededTool","closestTrainingRaider","closestTrainingRaiderIndex","minTrainingDistance","closestTrainingPath","closestNeededTraining","raiderPosition2D","raiderPosition","neededTool","neededTraining","pathToTraining","rad","imgTitle","titleRelX","titleRelY","btnNext","btnBack","imgBack","imgParagraph","paragraph","titleFont","titleWindow","nextButtonCfg","nextParagraph","backButtonCfg","prevParagraph","setParagraph","objectiveText","objectiveBackImgCfg","textFont","textWindow","messagePanel","itemCfg","labelX","state","imgTextNormal","description","imgTextHover","imgLabelOffNormal","labelOff","imgLabelOffHover","imgLabelOnNormal","labelOn","imgLabelOnHover","imgLabel","sliderX","onValueChanged","imgLeft","imgOff","imgOn","imgRight","leftBtn","btnLeftNormal","btnLeftHover","rightBtn","btnRightNormal","btnRightHover","posX","dw","loImg","hiImg","itemsTrigger","itemsNext","menuFont","MenuLabelItem","itemsCycle","MenuCycleItem","itemsSlider","MenuSliderItem","layersByKey","MenuLayer","pausePanel","selectLayer","onRepeatBriefing","MenuBasePanel","onAbortGame","onRestartGame","image","okWindow","cancelWindow","contrastOverlay","Rect","dialogCfg","DialogCfg","panelPause","PausePanel","panelOptions","OptionsPanel","panelBriefing","BriefingPanel","BriefingPanelCfg","setActivePanel","lEventKey","gameLayer","GameLayer","selectionLayer","SelectionLayer","guiLayer","GuiMainLayer","overlayLayer","OverlayLayer","WorldManager","jobSupervisor","Supervisor","restartLevel","startLevel","setupAndStartLevel","objective","objectiveImage640x480","conf","imgNormalFilepath","imgHoverFilepath","imgPressedFilepath","imgDisabledFilepath","resultIndex","resultLastIndex","images","boxes","fonts","texts","uncoverTimeout","backgroundImg","wallpaper","filePath","boxImages","fontKey","labelFont","backFont","resultsLayer","btnSave","btnAdvance","descriptionTextLayer","btnLayer","RewardScreenButton","saveButton","advanceButton","onAdvance","uncoverResult","levelFullNameImg","resultText","quitText","completeText","failedText","resultValues","percentString","timeString","score","gameResultTextImg","box","vertSpacing","descriptionTextImg","textPos","tx","ty","actual","lessIsMore","padLeft","padding","seconds","ss","minutes","mm","loadingScreen","LoadingScreen","wadfileSelectModal","mainMenuScreen","MainMenuScreen","GameScreen","rewardScreen","RewardScreen","params","URLSearchParams"],"mappings":"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","file":"897.index.js","sourcesContent":["import { Modal } from 'bootstrap'\n\nexport class WadFileSelectionModal {\n\n    public onStart: (wad0Url, wad1Url) => any = null\n\n    private readonly modal: Modal\n\n    constructor(parentId: string) {\n        const rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        rootElement.classList.add('modal')\n        rootElement.tabIndex = -1\n        rootElement.setAttribute('role', 'dialog')\n        rootElement.setAttribute('aria-hidden', 'true')\n\n        const modalDialog = rootElement.appendChild(document.createElement('div'))\n        modalDialog.classList.add('modal-dialog')\n        rootElement.setAttribute('role', 'document')\n\n        const modalContent = modalDialog.appendChild(document.createElement('div'))\n        modalContent.classList.add('modal-content')\n\n        const modalHeader = modalContent.appendChild(document.createElement('div'))\n        modalHeader.classList.add('modal-header')\n        const modalTitle = modalHeader.appendChild(document.createElement('h5'))\n        modalTitle.classList.add('modal-title')\n        modalTitle.innerText = 'Load .wad files'\n        modalTitle.id = 'wadfileSelectModalLabel'\n        rootElement.setAttribute('aria-labelledby', modalTitle.id)\n\n        const modalBody = modalContent.appendChild(document.createElement('div'))\n        modalBody.classList.add('modal-body')\n\n        const hint = modalBody.appendChild(document.createElement('p'))\n        hint.innerText = 'Assets not included! In order to play the game, please select the game files.'\n\n        const navTabs = modalBody.appendChild(document.createElement('nav'))\n        const navTabList = navTabs.appendChild(document.createElement('div'))\n        navTabList.id = 'nav-tab'\n        navTabList.classList.add('nav', 'nav-tabs')\n        navTabList.setAttribute('role', 'tablist')\n\n        const navFileBtn = WadFileSelectionModal.appendNavButton(navTabList, true, 'nav-file-tab', 'nav-file', 'Local files (recommended)')\n        const navUrlBtn = WadFileSelectionModal.appendNavButton(navTabList, false, 'nav-url-tab', 'nav-url', 'Online from URL')\n\n        const navTabContent = modalBody.appendChild(document.createElement('div'))\n        navTabContent.classList.add('tab-content')\n        this.appendNavFileTab(navTabContent, navFileBtn.id)\n        this.appendNavUrlTab(navTabContent, navUrlBtn.id)\n\n        // rootElement has to be a valid bootstrap HTML modal before we can instantiate it\n        this.modal = new Modal(rootElement, {backdrop: 'static', keyboard: false})\n    }\n\n    private static appendNavButton(parent: HTMLDivElement, active: boolean, id: string, controlTarget: string, innerText: string) {\n        const navBtn = parent.appendChild(document.createElement('button'))\n        navBtn.classList.add('nav-link')\n        if (active) navBtn.classList.add('active')\n        navBtn.id = id\n        navBtn.setAttribute('data-bs-toggle', 'tab')\n        navBtn.setAttribute('data-bs-target', '#' + controlTarget)\n        navBtn.type = 'button'\n        navBtn.setAttribute('role', 'tab')\n        navBtn.setAttribute('aria-controls', controlTarget)\n        navBtn.setAttribute('aria-selected', String(active))\n        navBtn.innerText = innerText\n        return navBtn\n    }\n\n    private appendNavFileTab(parent: HTMLDivElement, labelledBy: string) {\n        const navFileTab = WadFileSelectionModal.appendNavTab(parent, true, 'nav-file', labelledBy)\n\n        const wad0File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad0-file', 'LegoRR0.wad')\n        const wad1File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad1-file', 'LegoRR1.wad')\n\n        const btnStartFile = navFileTab.appendChild(document.createElement('button'))\n        btnStartFile.type = 'submit'\n        btnStartFile.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartFile.id = 'button-start-file'\n        btnStartFile.innerText = 'Start Game'\n        btnStartFile.addEventListener('click', () => {\n            btnStartFile.disabled = true\n            const wad0FileUrl = URL.createObjectURL(wad0File.files[0])\n            const wad1FileUrl = URL.createObjectURL(wad1File.files[0])\n            this.onStart(wad0FileUrl, wad1FileUrl)\n        })\n    }\n\n    private static appendWadFileGroup(parent: HTMLDivElement, id: string, filename: string) {\n        const wadFileGroup = parent.appendChild(document.createElement('div'))\n        wadFileGroup.classList.add('my-3')\n        const wadFileLabel = wadFileGroup.appendChild(document.createElement('label'))\n        wadFileLabel.setAttribute('for', id)\n        wadFileLabel.classList.add('form-label')\n        wadFileLabel.innerHTML = 'Select <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadFileInput = wadFileGroup.appendChild(document.createElement('input'))\n        wadFileInput.type = 'file'\n        wadFileInput.classList.add('form-control')\n        wadFileInput.id = id\n        wadFileInput.required = true\n        return wadFileInput\n    }\n\n    private appendNavUrlTab(parent: HTMLDivElement, labelledBy: string) {\n        const navUrlTab = WadFileSelectionModal.appendNavTab(parent, false, 'nav-url', labelledBy)\n\n        const urlHint = navUrlTab.appendChild(document.createElement('div'))\n        urlHint.classList.add('my-3')\n        urlHint.innerText = 'Direct links with correct Allow-Origin-CORS-Headers required here.'\n\n        const wad0Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad0-url', 'LegoRR0.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n        const wad1Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad1-url', 'LegoRR1.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n\n        const btnStartUrl = navUrlTab.appendChild(document.createElement('button'))\n        btnStartUrl.type = 'submit'\n        btnStartUrl.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartUrl.id = 'button-start-url'\n        btnStartUrl.innerText = 'Start Game'\n        btnStartUrl.addEventListener('click', () => {\n            btnStartUrl.disabled = true\n            // XXX show loading progress for WAD files\n            this.onStart(wad0Url.value, wad1Url.value)\n        })\n    }\n\n    private static appendNavTab(parent: HTMLDivElement, active: boolean, id: string, labelledBy: string) {\n        const navTab = parent.appendChild(document.createElement('div'))\n        navTab.classList.add('tab-pane', 'fade')\n        if (active) navTab.classList.add('show', 'active')\n        navTab.id = id\n        navTab.setAttribute('role', 'tabpanel')\n        navTab.setAttribute('aria-labelledby', labelledBy)\n        return navTab\n    }\n\n    private static appendWadUrlGroup(parent: HTMLDivElement, id: string, filename: string, example: string) {\n        const wadUrlGroup = parent.appendChild(document.createElement('div'))\n        wadUrlGroup.classList.add('my-3')\n        const wadUrlLabel = wadUrlGroup.appendChild(document.createElement('label'))\n        wadUrlLabel.setAttribute('for', id)\n        wadUrlLabel.classList.add('form-label')\n        wadUrlLabel.innerHTML = 'Enter url for <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadUrlInput = wadUrlGroup.appendChild(document.createElement('input'))\n        wadUrlInput.type = 'url'\n        wadUrlInput.classList.add('form-control')\n        wadUrlInput.id = id\n        wadUrlInput.required = true\n        wadUrlInput.value = example\n        return wadUrlInput\n    }\n\n    public show() {\n        this.modal.show()\n    }\n\n    public hide() {\n        this.modal.hide()\n    }\n\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"index.worker.js\");\n}\n","export class InitLoadingMessage {\n\n    wad0FileUrl: string\n    wad1FileUrl: string\n\n    constructor(wad0FileUrl: string, wad1FileUrl: string) {\n        this.wad0FileUrl = wad0FileUrl\n        this.wad1FileUrl = wad1FileUrl\n    }\n\n}\n","/**\n * creates a new context with the specified dimensions.\n * @param width: the desired width of the new context\n * @param height: the desired height of the new context\n * @returns RenderingContext the newly created canvas\n */\nexport function createContext(width, height) {\n    if (width < 1 || height < 1) {\n        console.error('Can\\'t create context with size ' + width + ' x ' + height);\n        return createDummyContext(64, 64);\n    }\n    const canvas = document.createElement('canvas');\n    canvas.setAttribute('width', width);\n    canvas.setAttribute('height', height);\n    const context = canvas.getContext('2d');\n    context.width = width;\n    context.height = height;\n    return context;\n}\n\n/**\n * This method is intended to increase stability by providing an (ugly) placeholder image in case the right one is missing\n * @param width: expected width of the original image\n * @param height: expected height of the original image\n */\nexport function createDummyContext(width, height) {\n    const result = createContext(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            if (x / 16 % 2 === y / 16 % 2) {\n                result.fillStyle = 'rgb(0,255,255)';\n            } else {\n                result.fillStyle = 'rgb(255,0,255)';\n            }\n            result.fillRect(x, y, 16, 16);\n        }\n    }\n    return result;\n}\n\nexport function createDummyImgData(width, height) {\n    const result = new ImageData(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            const e = x / 16 % 2 === y / 16 % 2;\n            for (let px = x; px < x + 16; px++) {\n                for (let py = y; py < y + 16; py++) {\n                    setPixel(result, px, py, e ? 0 : 255, e ? 255 : 0, 255);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport function setPixel(imgData, x, y, r, g, b, a = 255) {\n    const n = (y * imgData.width + x) * 4;\n    imgData.data[n] = r;\n    imgData.data[n + 1] = g;\n    imgData.data[n + 2] = b;\n    imgData.data[n + 3] = a;\n}\n\nexport function getPixel(imgData, x, y) {\n    const n = (y * imgData.width + x) * 4;\n    return {r: imgData.data[n], g: imgData.data[n + 1], b: imgData.data[n + 2], a: imgData.data[n + 3]};\n}\n\nexport function copyPixel(originData, targetData, x, y) {\n    const p = getPixel(originData);\n    setPixel(targetData, p.r, p.g, p.b, p.a);\n}\n","export function getPath(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n","export function getFilename(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '')\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/')\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max)\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2\n}\n\nexport function clearTimeoutSafe(timeout: NodeJS.Timeout) {\n    if (timeout) clearTimeout(timeout)\n    return null\n}\n\nexport function clearIntervalSafe(interval: NodeJS.Timeout) {\n    if (interval) clearInterval(interval)\n    return null\n}\n\nexport function removeFromArray<T>(array: T[], element: T) {\n    if (!array || !Array.isArray(array)) return\n    const index = array.indexOf(element)\n    if (index !== -1) array.splice(index, 1)\n}\n","import { AnimClip } from './AnimClip'\n\nexport class AnimationEntityType {\n\n    carryNullName: string = ''\n    mediumPoly: {} = {}\n    highPoly: {} = {}\n    fPPoly: {} = {}\n    activities: Map<string, {file: string, transcoef: number, lwsfile: boolean, animation: AnimClip}> = new Map()\n\n}\n","import { Mesh } from 'three'\nimport { clearIntervalSafe } from '../core/Util'\n\nexport class AnimatedMesh {\n\n    mesh: Mesh = null\n    textureSequences = []\n\n    constructor(mesh: Mesh, textureSequences: any[]) {\n        this.mesh = mesh\n        this.textureSequences = textureSequences\n    }\n\n    dispose() {\n        this.textureSequences.forEach((s) => clearIntervalSafe(s))\n        this.mesh.geometry.dispose()\n        Array.isArray(this.mesh.material) ? this.mesh.material.forEach(mat => mat.dispose()) : this.mesh.material?.dispose()\n    }\n\n}\n","// noinspection JSUnusedLocalSymbols\n\n/**\n * @author Marcus-Bizal https://github.com/marcbizal\n * patched by Scarabol\n *\n * This loader loads LWOB files exported from LW6.\n *\n * Support\n *  -\n */\n\nimport { BufferAttribute, BufferGeometry, Color, DoubleSide, Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { decodeFilepath, decodeString, getFilename } from '../core/Util'\nimport { ResourceManager } from './ResourceManager'\nimport { SEQUENCE_TEXTURE_FRAMERATE } from '../main'\nimport { AnimatedMesh } from './AnimatedMesh'\n\n// HEADER SPEC //\nconst LWO_MAGIC = 0x4C574F42 // \"LWOB\"\nconst OFF_MAGIC = 8\n\n/********************/\n/* TYPE SIZES START */\n/********************/\n\nconst ID4_SIZE = 4\nconst I1_SIZE = 1\nconst I2_SIZE = 2\nconst I4_SIZE = 4\nconst F4_SIZE = 4\n\nconst COL4_SIZE = 4\nconst VEC12_SIZE = 12\nconst IP2_SIZE = 2\nconst FP4_SIZE = 4\nconst DEG4_SIZE = 4\n\n/********************/\n/*  TYPE SIZES END  */\n/********************/\n\n/*********************/\n/* CHUNK TYPES START */\n/*********************/\n\nconst LWO_FORM = 0x464F524D\nconst LWO_PNTS = 0x504E5453\nconst LWO_SFRS = 0x53524653\nconst LWO_POLS = 0x504F4C53\nconst LWO_CRVS = 0x43525653\nconst LWO_PCHS = 0x50434853\nconst LWO_SURF = 0x53555246\n\nconst CHUNK_HEADER_SIZE = 8\nconst SUBCHUNK_HEADER_SIZE = 6\n\n/*********************/\n/*  CHUNK TYPES END  */\n/*********************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\nconst SURF_COLR = 0x434F4C52\nconst SURF_FLAG = 0x464C4147\n\n// Base Shading Values (Fixed Point)\nconst SURF_LUMI = 0x4C554D49\nconst SURF_DIFF = 0x44494646\nconst SURF_SPEC = 0x53504543\nconst SURF_REFL = 0x5245464C\nconst SURF_TRAN = 0x5452414E\n\n// Base Shading Values (Floating Point)\nconst SURF_VLUM = 0x564C554D\nconst SURF_VDIF = 0x56444946\nconst SURF_VSPC = 0x56535043\nconst SURF_VRFL = 0x5646524C\nconst SURF_VTRN = 0x5654524E\n\nconst SURF_GLOS = 0x474C4F53\nconst SURF_RFLT = 0x52464C54\nconst SURF_RIMG = 0x52494D47\nconst SURF_RIND = 0x52494E44\nconst SURF_EDGE = 0x45444745\nconst SURF_SMAN = 0x534D414E\n\n/**************************/\n/*  SURF DEFINITIONS END  */\n/**************************/\n\n/*****************************/\n/* TEXTURE DEFINITIONS START */\n/*****************************/\n\n// Start of Definition\nconst SURF_CTEX = 0x43544558\nconst SURF_DTEX = 0x44544558\nconst SURF_STEX = 0x53544558\nconst SURF_RTEX = 0x52544558\nconst SURF_TTEX = 0x54544558\nconst SURF_LTEX = 0x4C544558\nconst SURF_BTEX = 0x42544558\n\n// Flags\nconst SURF_TFLG = 0x54464C47\n\n// Location and Size\nconst SURF_TSIZ = 0x5453495A\nconst SURF_TCTR = 0x54435452\nconst SURF_TFAL = 0x5446414C\nconst SURF_TVEL = 0x5456454C\n\n// Color\nconst SURF_TCLR = 0x54434C52\n\n// Value\nconst SURF_TVAL = 0x54434C52\n\n// Bump Amplitude\nconst SURF_TAMP = 0x54414D50\n\n// Image Map\nconst SURF_TIMG = 0x54494D47\n\n// Image Alpha\nconst SURF_TALP = 0x54414C50\n\n// Image Wrap Options\nconst SURF_TWRP = 0x54575250\n\n// Antialiasing Strength\nconst SURF_TAAS = 0x54414153\n\n// Texture Opacity\nconst SURF_TOPC = 0x544F5043\n\n/*****************************/\n/*  TEXTURE DEFINITIONS END  */\n/*****************************/\n\n/*************************/\n/* FLAG DEFINITION START */\n/*************************/\n\nconst LUMINOUS_BIT = 1\nconst OUTLINE_BIT = 2\nconst SMOOTHING_BIT = 4\nconst COLORHIGHLIGHTS_BIT = 8\nconst COLORFILTER_BIT = 16\nconst OPAQUEEDGE_BIT = 32\nconst TRANSPARENTEDGE_BIT = 64\nconst SHARPTERMINATOR_BIT = 128\nconst DOUBLESIDED_BIT = 256\nconst ADDITIVE_BIT = 512\nconst SHADOWALPHA_BIT = 1024\n\n/*************************/\n/*  FLAG DEFINITION END  */\n/*************************/\n\n/*************************/\n/* TFLG DEFINITION START */\n/*************************/\n\nconst XAXIS_BIT = 1\nconst YAXIS_BIT = 2\nconst ZAXIS_BIT = 4\nconst WORLDCOORDS_BIT = 8\nconst NEGATIVEIMAGE_BIT = 16\nconst PIXELBLENDING_BIT = 32\nconst ANTIALIASING_BIT = 64\n\n/*************************/\n/*  TFLG DEFINITION END  */\n\n/*************************/\n\nfunction getVector3AtOffset(view, offset) {\n    let vector = new Vector3()\n    vector.x = view.getFloat32(offset)\n    vector.y = view.getFloat32(offset + F4_SIZE)\n    vector.z = view.getFloat32(offset + (F4_SIZE * 2))\n    return vector\n}\n\nfunction planarMapUVS(geometry, vertices, uvs, indices, materialIndex, size, center, flags) {\n    // Check to ensure that one of the flags is set, if not throw an error.\n    const mask = XAXIS_BIT | YAXIS_BIT | ZAXIS_BIT\n    if (flags & mask) {\n        for (let group of geometry.groups) {\n            if (group.materialIndex !== materialIndex) continue\n\n            for (let i = group.start; i < group.start + group.count; i++) {\n\n                let vertexIndex = indices[i] * 3\n                let x = vertices[vertexIndex] - center.x\n                let y = vertices[vertexIndex + 1] - center.y\n                let z = vertices[vertexIndex + 2] - center.z\n\n                let uvIndex = indices[i] * 2\n                let u = 0\n                let v = 0\n\n                if (flags & XAXIS_BIT) {\n                    u = z / size.z + 0.5\n                    v = y / size.y + 0.5\n                } else if (flags & YAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = z / size.z + 0.5\n                } else if (flags & ZAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = y / size.y + 0.5\n                }\n\n                uvs[uvIndex] = u\n                uvs[uvIndex + 1] = v\n            }\n        }\n    } else {\n        // console.warn(\"LWOLoader.planarMapUVS: No axis bit is set!\"); // XXX what is this about\n    }\n}\n\nexport class LWOLoader {\n\n    COUNTER_CLOCKWISE: false\n\n    path: string = ''\n    verbose: boolean = false\n    materials: MeshPhongMaterial[] = []\n    geometry: BufferGeometry = new BufferGeometry()\n    vertices: Float32Array = null\n    indices: Uint16Array = null\n    uvs: Float32Array = null\n    sequenceIntervals = []\n\n    constructor(path: string, verbose: boolean = false) {\n        this.verbose = verbose\n        this.path = path\n        if (this.verbose) console.log('LWO path: ' + this.path)\n    }\n\n    parsePoints(view, chunkOffset, chunkSize) {\n        if (chunkSize % VEC12_SIZE !== 0) {\n            console.error('LWOLoader.parse: F12 does not evenly divide into chunk size (' + chunkSize + '). Possible corruption.')\n            return\n        }\n\n        let numVertices = (chunkSize / F4_SIZE) / 3\n        this.vertices = new Float32Array(numVertices * 3)\n        this.uvs = new Float32Array(numVertices * 2)\n\n        for (let i = 0; i < numVertices; i++) {\n            let vertexIndex = i * 3\n            let vertexOffset = vertexIndex * F4_SIZE\n            this.vertices[vertexIndex] = view.getFloat32(chunkOffset + vertexOffset) \t\t\t\t// x\n            this.vertices[vertexIndex + 1] = view.getFloat32(chunkOffset + vertexOffset + F4_SIZE) \t// y\n            this.vertices[vertexIndex + 2] = view.getFloat32(chunkOffset + vertexOffset + (F4_SIZE * 2)) \t// z\n        }\n    }\n\n    parseSurfaceNames(buffer, chunkOffset, chunkSize) {\n        let textChunk = new TextDecoder().decode(new Uint8Array(buffer, chunkOffset, chunkSize))\n        let surfaceNames = textChunk.split('\\0').filter(function (s) {\n            return s !== ''\n        })\n\n        for (let i = 0; i < surfaceNames.length; i++) {\n            const new_material = new MeshPhongMaterial()\n            new_material.name = surfaceNames[i]\n            new_material.side = DoubleSide\n\n            this.materials.push(new_material)\n        }\n        if (this.verbose) console.log('LWO contains ' + this.materials.length + ' materials with following names: ' + surfaceNames)\n    }\n\n    parsePolygons(view, chunkOffset, chunkSize) {\n        // Gather some initial data so that we can get the proper size\n        let totalNumIndices = 0\n        let offset = 0\n        while (offset < chunkSize) {\n            const numIndices = view.getInt16(chunkOffset + offset)\n            const materialIndex = view.getInt16(chunkOffset + offset + 2 + (numIndices * 2))\n\n            this.geometry.addGroup(totalNumIndices, (numIndices - 2) * 3, materialIndex - 1)\n\n            totalNumIndices += (numIndices - 2) * 3\n            offset += 4 + (numIndices * 2)\n        }\n\n        offset = 0\n        let currentIndex = 0\n        this.indices = new Uint16Array(totalNumIndices)\n        while (offset < chunkSize) {\n            let numIndices = view.getInt16(chunkOffset + offset)\n\n            offset += 2\n\n            let faceIndices = new Int16Array(numIndices)\n            for (let i = 0; i <= numIndices; i++) {\n                faceIndices[i] = view.getInt16(chunkOffset + offset + (i * 2))\n            }\n\n            for (let i = 0; i < numIndices - 2; i++) {\n                if (this.COUNTER_CLOCKWISE) {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                } else {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                }\n            }\n\n            offset += 2 + (numIndices * 2)\n        }\n    }\n\n    parseSurface(view, buffer, chunkOffset, chunkSize) {\n        let offset = 0\n        while (view.getUint8(chunkOffset + offset) !== 0) offset++\n\n        let materialName = decodeString(new Uint8Array(buffer, chunkOffset, offset))\n        if (this.verbose) console.log('Parsing surface: ' + materialName)\n        let materialIndex = -1\n        let material: MeshPhongMaterial = null\n\n        let textureFlags = 0\n        let textureSize = new Vector3(0, 0, 0)\n        let textureCenter = new Vector3(0, 0, 0)\n        // let textureFalloff = new Vector3(0, 0, 0);\n        // let textureVelocity = new Vector3(0, 0, 0);\n\n        for (let i = 0; i < this.materials.length; i++) {\n            if (this.materials[i].name === materialName) {\n                materialIndex = i\n                material = this.materials[i]\n            }\n        }\n\n        if (!material) {\n            console.error('LWOLoader.parse: Surface in SURF chunk does not exist in SRFS')\n            return\n        }\n\n        while (offset < chunkSize) {\n            const subchunkOffset = chunkOffset + offset\n            if (view.getUint8(subchunkOffset) === 0) {\n                offset++\n            } else {\n                const subchunkType = view.getInt32(subchunkOffset)\n                const subchunkSize = view.getInt16(subchunkOffset + ID4_SIZE)\n\n                if (this.verbose) console.log('Parsing subchunk ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n\n                switch (subchunkType) {\n                    case SURF_COLR:\n                        const colorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        material.color = new Color().fromArray(colorArray)\n                        if (this.verbose) console.log('Material color (COLR): ' + colorArray.join(' '))\n                        break\n                    case SURF_FLAG:\n                        const flags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (FLAG): ' + flags.toString(2))\n                        break\n                    case SURF_LUMI:\n                        const luminosity = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        if (this.verbose) console.log('Luminosity (LUMI): ' + luminosity)\n                        break\n                    case SURF_DIFF:\n                        const diffuse = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        if (this.verbose) console.log('Diffuse (DIFF): ' + diffuse)\n                        break\n                    case SURF_SPEC:\n                        const specular = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        // material.specular = material.color.multiplyScalar(specular);\n                        if (this.verbose) console.log('Specular (SPEC): ' + specular)\n                        break\n                    case SURF_REFL:\n                        let reflection = 0\n                        if (reflection === SURF_VRFL) {\n                            reflection = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            reflection = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        }\n                        material.reflectivity = reflection\n                        if (this.verbose) console.log('Reflectivity (REFL): ' + material.reflectivity)\n                        break\n                    case SURF_TRAN:\n                    case SURF_VTRN:\n                        let transparency = 0\n                        if (subchunkType === SURF_VTRN) {\n                            transparency = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            transparency = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        }\n                        material.opacity = 1 - transparency\n                        if (this.verbose) console.log('Opacity (TRAN/VTRN): ' + material.opacity)\n                        if (transparency > 0) material.transparent = true\n                        break\n                    case SURF_VLUM:\n                        const luminosity2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Luminosity (VLUM): ' + luminosity2)\n                        break\n                    case SURF_VDIF:\n                        let diffuse2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Diffuse (VDIF): ' + diffuse2)\n                        break\n                    case SURF_VSPC:\n                        let specular2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        // material.specular = material.color.multiplyScalar(specular2);\n                        if (this.verbose) console.log('Specular (VSPC): ' + specular2)\n                        break\n                    case SURF_TFLG:\n                        textureFlags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (TFLG): ' + textureFlags.toString(2))\n                        break\n                    case SURF_TSIZ:\n                        textureSize = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Texture size (TSIZ): ' + textureSize.toArray().join(' '))\n                        break\n                    case SURF_TCTR:\n                        textureCenter = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Texture center (TCTR): ' + textureCenter.toArray().join(' '))\n                        break\n                    case SURF_CTEX:\n                    case SURF_DTEX:\n                    case SURF_STEX:\n                    case SURF_RTEX:\n                    case SURF_TTEX:\n                    case SURF_BTEX:\n                        const textureTypeName = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture typename: ' + textureTypeName)\n                        break\n                    case SURF_TCLR:\n                        const textureColorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        // const textureColor = new Color().fromArray(textureColorArray);\n                        // seems to be 0 0 0 anyway...\n                        if (this.verbose) console.log('Texture color (TCLR): ' + textureColorArray.join(' '))\n                        break\n                    case SURF_TIMG:\n                        let textureFilepath = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture filepath (TIMG): ' + textureFilepath)\n                        if (textureFilepath === '(none)') break\n                        let sequenceTexture = false\n                        if (textureFilepath.endsWith(' (sequence)')) {\n                            sequenceTexture = true\n                            textureFilepath = textureFilepath.substring(0, textureFilepath.length - ' (sequence)'.length)\n                        }\n                        let filename = getFilename(textureFilepath)\n                        const textureFilename = this.path + filename\n                        if (sequenceTexture) {\n                            const match = textureFilename.match(/(.+\\D)0+(\\d+)\\..+/)\n                            const sequenceNames = ResourceManager.filterTextureSequenceNames(match[1])\n                            if (sequenceNames) {\n                                let seqNum = 0\n                                this.sequenceIntervals.push(setInterval(() => {\n                                    material.map = ResourceManager.getTexture(sequenceNames[seqNum])\n                                    seqNum++\n                                    if (seqNum >= sequenceNames.length) seqNum = 0\n                                }, 1000 / SEQUENCE_TEXTURE_FRAMERATE))\n                                material.transparent = true\n                            }\n                        }\n                        material.map = ResourceManager.getTexture(textureFilename)\n                        material.alphaTest = material.transparent ? 0 : 0.5\n                        material.color = null // no need for color, when color map (texture) in use\n                        break\n                    default: // TODO implement all LWO features\n                        if (this.verbose) console.warn('Found unrecognised SURF subchunk type ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n                        break\n                }\n\n                offset += SUBCHUNK_HEADER_SIZE + subchunkSize\n            }\n        }\n\n        planarMapUVS(this.geometry, this.vertices, this.uvs, this.indices, materialIndex, textureSize, textureCenter, textureFlags)\n    }\n\n    parse(buffer: ArrayBuffer): AnimatedMesh {\n        const view = new DataView(buffer)\n\n        if (view.getUint32(0) !== LWO_FORM) {\n            console.error('LWOLoader.parse: Cannot find header.')\n            return\n        }\n\n        const fileSize = view.getUint32(ID4_SIZE)\n        if (fileSize + CHUNK_HEADER_SIZE !== view.byteLength) {\n            console.warn('LWOLoader.parse: Discrepancy between size in header (' + (fileSize + CHUNK_HEADER_SIZE) + ' bytes) and actual size (' + view.byteLength + ' bytes).')\n        }\n\n        let magicOffset = ID4_SIZE + I4_SIZE\n        if (view.getUint32(magicOffset) !== LWO_MAGIC) {\n            const magic = decodeString(new Uint8Array(buffer, magicOffset, ID4_SIZE))\n            console.error('LWOLoader.parse: Invalid magic ID (' + magic + ') in LWO header.')\n            return\n        }\n\n        let cursor = 12\n        while (cursor < view.byteLength) {\n            // Skip null byte padding\n            if (view.getUint8(cursor) === 0) {\n                cursor++\n            } else {\n                const chunkType = view.getInt32(cursor)\n                const chunkSize = view.getInt32(cursor + ID4_SIZE)\n\n                cursor += CHUNK_HEADER_SIZE\n\n                switch (chunkType) {\n                    case LWO_PNTS:\n                        this.parsePoints(view, cursor, chunkSize)\n                        break\n                    case LWO_SFRS:\n                        this.parseSurfaceNames(buffer, cursor, chunkSize)\n                        break\n                    case LWO_POLS:\n                        this.parsePolygons(view, cursor, chunkSize)\n                        break\n                    case LWO_SURF:\n                        this.parseSurface(view, buffer, cursor, chunkSize)\n                        break\n                    default:\n                        console.warn('Found unrecognised chunk type ' + decodeString(new Uint8Array(buffer, cursor - CHUNK_HEADER_SIZE, ID4_SIZE)) + ' at ' + cursor)\n                }\n\n                cursor += chunkSize\n            }\n\n        }\n\n        this.geometry.setAttribute('position', new BufferAttribute(this.vertices, 3))\n        this.geometry.setAttribute('uv', new BufferAttribute(this.uvs, 2))\n        this.geometry.setIndex(new BufferAttribute(this.indices, 1))\n        this.geometry.computeVertexNormals()\n\n        return new AnimatedMesh(new Mesh(this.geometry, this.materials), this.sequenceIntervals)\n    }\n}\n","import { Vector3 } from 'three'\nimport { SelectionEvent } from '../../event/LocalEvents'\n\nexport interface Selectable {\n\n    getSelectionType(): SelectionType;\n\n    select(): SelectionEvent;\n\n    deselect(): any;\n\n    getSelectionCenter(): Vector3;\n\n}\n\nexport enum SelectionType {\n\n    SURFACE,\n    PILOT,\n    BUILDING,\n    VEHICLE,\n    GROUP,\n\n}\n","import { AnimSubObj } from './AnimSubObj'\n\nexport class AnimClip {\n\n    looping: boolean = false\n    transcoef: number = 1\n    firstFrame: number = null\n    lastFrame: number = null\n    framesPerSecond: number = null\n    bodies: AnimSubObj[] = []\n\n}\n","import { Euler, MathUtils, Object3D, Vector3 } from 'three'\nimport degToRad = MathUtils.degToRad\n\nexport class AnimSubObj {\n\n    name: string = ''\n    filename: string = ''\n    relPos: Vector3[] = []\n    relRot: Euler[] = []\n    relScale: Vector3[] = []\n    opacity: number[] = []\n    parentObjInd: number = null\n    model: Object3D = null\n\n    radVec(degX: number, degY: number, degZ: number) {\n        return new Euler(degToRad(degY), degToRad(degX), degToRad(degZ), 'YXZ')\n    }\n\n    setFrameAndFollowing(animationFrameIndex: number, lastFrame: number, infos: number[]) {\n        this.relPos[animationFrameIndex] = new Vector3(infos[0], infos[1], infos[2])\n        this.relRot[animationFrameIndex] = this.radVec(infos[3], infos[4], infos[5])\n        this.relScale[animationFrameIndex] = new Vector3(infos[6], infos[7], infos[8])\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.relPos[c] = this.relPos[animationFrameIndex]\n            this.relRot[c] = this.relRot[animationFrameIndex]\n            this.relScale[c] = this.relScale[animationFrameIndex]\n        }\n    }\n\n    setOpacityAndFollowing(animationFrameIndex: number, lastFrame: number, value: number) {\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.opacity[c] = value\n        }\n    }\n\n}\n","const Stats = require('stats.js')\n\nexport class DebugHelper {\n\n    stats\n\n    constructor() {\n        this.stats = new Stats()\n        this.stats.setMode(0) // 0: fps, 1: ms\n\n        this.stats.domElement.style.position = 'absolute'\n        this.stats.domElement.style.left = '0px'\n        this.stats.domElement.style.top = '0px'\n\n        document.body.appendChild(this.stats.domElement)\n        this.hide()\n    }\n\n    show() {\n        this.stats.domElement.style.visibility = 'visible'\n    }\n\n    hide() {\n        this.stats.domElement.style.visibility = 'hidden'\n    }\n\n    renderStart() {\n        this.stats.begin()\n    }\n\n    renderDone() {\n        this.stats.end()\n    }\n\n}\n","export class Building {\n\n    // XXX dynamically read building types from cfg at BuildingTypes\n    static readonly TOOLSTATION = new Building('Toolstation', 'Buildings/Toolstation', 130, 10)\n    static readonly TELEPORT_PAD = new Building('TeleportPad', 'Buildings/Teleports')\n    static readonly DOCKS = new Building('Docks', 'Buildings/Docks')\n    static readonly POWER_STATION = new Building('Powerstation', 'Buildings/Powerstation')\n    static readonly BARRACKS = new Building('Barracks', 'Buildings/Barracks')\n    static readonly UPGRADE = new Building('Upgrade', 'Buildings/Upgrade')\n    static readonly GEODOME = new Building('Geo-dome', 'Buildings/Geo-dome')\n    static readonly ORE_REFINERY = new Building('OreRefinery', 'Buildings/OreRefinery')\n    static readonly GUNSTATION = new Building('Gunstation', 'Buildings/gunstation')\n    static readonly TELEPORT_BIG = new Building('TeleportBIG', 'Buildings/BIGTeleport')\n\n    name: string\n    aeFile: string\n    dropPosAngleDeg: number = 0\n    dropPosDist: number = 0\n\n    constructor(name: string, folder: string, dropPosAngleDeg: number = 0, dropPosDist: number = 0) {\n        this.name = name\n        this.aeFile = folder + '/' + folder.slice(folder.lastIndexOf('/') + 1) + '.ae'\n        this.dropPosAngleDeg = dropPosAngleDeg\n        this.dropPosDist = dropPosDist\n    }\n\n    static getByName(buildingType: string) {\n        const typename = buildingType.slice(buildingType.lastIndexOf('/') + 1).toLowerCase()\n        switch (typename) {\n            case 'toolstation':\n                return this.TOOLSTATION\n            case 'teleports':\n                return this.TELEPORT_PAD\n            case 'docks':\n                return this.DOCKS\n            case 'powerstation':\n                return this.POWER_STATION\n            case 'barracks':\n                return this.BARRACKS\n            case 'upgrade':\n                return this.UPGRADE\n            case 'geo-dome':\n                return this.GEODOME\n            case 'orerefinery':\n                return this.ORE_REFINERY\n            case 'gunstation':\n                return this.GUNSTATION\n            case 'teleportbig':\n                return this.TELEPORT_BIG\n            default:\n                throw 'Unknown building type: ' + buildingType\n        }\n    }\n\n}\n","import { WorldManager } from '../WorldManager'\nimport { Group, Vector2 } from 'three'\n\nexport abstract class BaseEntity {\n\n    worldMgr: WorldManager\n    group: Group = new Group()\n    level: number = 0\n\n    abstract get stats()\n\n    getPosition() {\n        return this.group.position.clone()\n    }\n\n    getPosition2D() {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    getHeading(): number {\n        return this.group.rotation.y\n    }\n\n    onDiscover() {\n        this.group.visible = true\n    }\n\n}\n","import { GameEvent } from './EventBus'\nimport { PublicJob } from '../game/model/job/Job'\nimport { CollectableEntity, CollectableType } from '../scene/model/collect/CollectableEntity'\nimport { AnimEntity } from '../scene/model/anim/AnimEntity'\nimport { Vector2 } from 'three'\nimport { Surface } from '../scene/model/map/Surface'\nimport { BuildingEntity } from '../scene/model/BuildingEntity'\nimport { FulfillerEntity } from '../scene/model/FulfillerEntity'\nimport { RaiderSkill } from '../scene/model/RaiderSkill'\n\nexport class WorldEvent extends GameEvent {\n\n    constructor(entityKey: string) {\n        super(entityKey)\n        this.isLocal = false\n    }\n\n}\n\nexport class JobEvent extends WorldEvent {\n\n    job: PublicJob\n\n    constructor(eventKey: string, job: PublicJob) {\n        super(eventKey)\n        this.job = job\n    }\n\n}\n\nexport class JobCreateEvent extends JobEvent {\n\n    static eventKey = 'job.create'\n\n    constructor(job: PublicJob) {\n        super(JobCreateEvent.eventKey, job)\n    }\n\n}\n\nexport class JobDeleteEvent extends JobEvent {\n\n    static eventKey = 'job.delete'\n\n    constructor(job: PublicJob) {\n        super(JobDeleteEvent.eventKey, job)\n    }\n\n}\n\nexport class RaiderRequested extends WorldEvent {\n\n    static eventKey = 'raider.request'\n\n    numRequested: number = 0\n\n    constructor(numRequested: number) {\n        super(RaiderRequested.eventKey)\n        this.numRequested = numRequested\n    }\n\n}\n\nexport class CollectEvent extends WorldEvent {\n\n    static eventKey = 'item.collected'\n\n    collectType: CollectableType\n\n    constructor(collectType: CollectableType) {\n        super(CollectEvent.eventKey)\n        this.collectType = collectType\n    }\n\n}\n\nexport class SpawnDynamiteEvent extends WorldEvent {\n\n    static eventKey = 'spawn.dynamite'\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(SpawnDynamiteEvent.eventKey)\n        this.surface = surface\n    }\n\n}\n\nexport class SpawnMaterialEvent extends WorldEvent {\n\n    static eventKey = 'spawn.material'\n\n    collectable: CollectableEntity\n    spawnPosition: Vector2\n\n    constructor(collectable: CollectableEntity, spawnPosition: Vector2) {\n        super(SpawnMaterialEvent.eventKey)\n        this.collectable = collectable\n        this.spawnPosition = spawnPosition\n    }\n\n}\n\nexport class EntityAddedEvent extends WorldEvent {\n\n    static eventKey = 'added.entity'\n\n    type: EntityType\n    entity: AnimEntity\n\n    constructor(type: EntityType, entity: AnimEntity) {\n        super(EntityAddedEvent.eventKey)\n        this.type = type\n        this.entity = entity\n    }\n\n}\n\nexport class EntityRemovedEvent extends WorldEvent {\n\n    static eventKey = 'remove.entity'\n\n    type: EntityType\n    entity: AnimEntity\n\n    constructor(type: EntityType, entity: AnimEntity) {\n        super(EntityRemovedEvent.eventKey)\n        this.type = type\n        this.entity = entity\n    }\n\n}\n\nexport enum EntityType {\n\n    RAIDER,\n    VEHICLE,\n    BUILDING,\n\n}\n\nexport class CavernDiscovered extends WorldEvent {\n\n    static eventKey = 'cavern.discovered'\n\n    constructor() {\n        super(CavernDiscovered.eventKey)\n    }\n\n}\n\nexport class OreFoundEvent extends WorldEvent {\n\n    static eventKey = 'ore.found'\n\n    constructor() {\n        super(OreFoundEvent.eventKey)\n    }\n\n}\n\nexport class BuildingUpgraded extends WorldEvent {\n\n    static eventKey = 'upgraded.building'\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(BuildingUpgraded.eventKey)\n        this.building = building\n    }\n\n}\n\nexport class RaiderTrained extends WorldEvent {\n\n    static eventKey = 'trained.raider'\n\n    entity: FulfillerEntity\n    skill: RaiderSkill\n\n    constructor(raider: FulfillerEntity, skill: RaiderSkill) {\n        super(RaiderTrained.eventKey)\n        this.entity = raider\n        this.skill = skill\n    }\n\n}\n","import { removeFromArray } from '../core/Util'\n\nexport class EventBus {\n\n    static eventListener = new Map<string, ((event: GameEvent) => any)[]>()\n    static blockedEvents = []\n\n    static publishEvent(event: GameEvent) {\n        if (this.blockedEvents.includes(event.eventKey)) return // event is currently blocked from publishing\n        if (!event.isLocal) console.log('Event published: ' + event.eventKey)\n        this.blockedEvents.push(event.eventKey)\n        this.getListener(event.eventKey).forEach((callback) => callback(event)) // TODO add inheritance match by prefix\n        removeFromArray(this.blockedEvents, event.eventKey)\n    }\n\n    static registerEventListener(eventKey: string, callback: (GameEvent) => any) {\n        const listener = this.getListener(eventKey)\n        listener.push(callback)\n        this.eventListener.set(eventKey, listener)\n    }\n\n    private static getListener(eventKey: string) {\n        return this.eventListener.get(eventKey) || []\n    }\n}\n\nexport class GameEvent {\n\n    eventKey: string\n    isLocal: boolean\n\n    constructor(eventKey: string) {\n        this.eventKey = eventKey\n    }\n\n}\n","export enum JobState {\n\n    OPEN,\n    COMPLETE,\n    CANCELED,\n\n}\n","export enum JobType {\n\n    SURFACE,\n    CARRY,\n    MOVE,\n    TRAIN,\n    GET_TOOL,\n    EAT,\n\n}\n","import { Vector2 } from 'three'\nimport { FulfillerEntity } from '../../../scene/model/FulfillerEntity'\nimport { removeFromArray } from '../../../core/Util'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\nimport { RaiderTool } from '../../../scene/model/RaiderTool'\nimport { JobType } from './JobType'\nimport { JobState } from './JobState'\n\nexport abstract class Job {\n\n    type: JobType\n    jobstate: JobState\n    fulfiller: FulfillerEntity[] = []\n\n    protected constructor(type: JobType) {\n        this.type = type\n        this.jobstate = JobState.OPEN\n    }\n\n    assign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller)\n        if (fulfiller && index === -1) {\n            this.fulfiller.push(fulfiller)\n        }\n    }\n\n    unassign(fulfiller: FulfillerEntity) {\n        removeFromArray(this.fulfiller, fulfiller)\n    }\n\n    cancel() {\n        this.jobstate = JobState.CANCELED\n        const fulfiller = this.fulfiller // ensure consistency while processing\n        this.fulfiller = []\n        fulfiller.forEach((fulfiller) => fulfiller.stopJob())\n    }\n\n    isQualified(fulfiller: FulfillerEntity): boolean {\n        return true\n    }\n\n    isQualifiedWithTool(fulfiller: FulfillerEntity): RaiderTool {\n        return null\n    }\n\n    isQualifiedWithTraining(fulfiller: FulfillerEntity): RaiderSkill {\n        return null\n    }\n\n    onJobComplete() {\n        this.jobstate = JobState.COMPLETE\n    }\n\n    abstract getWorkplaces(): Vector2[];\n\n}\n\nexport abstract class PublicJob extends Job {\n\n    abstract getPriorityIdentifier(): string\n\n}\n","import { BaseEntity } from '../BaseEntity'\nimport { GameState } from '../../../game/model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { Carryable } from './Carryable'\nimport { Vector2 } from 'three'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { BuildingSite } from '../BuildingSite'\nimport { CollectJob } from '../../../game/model/job/CollectJob'\nimport { removeFromArray } from '../../../core/Util'\n\nexport abstract class CollectableEntity extends BaseEntity implements Carryable {\n\n    collectableType: CollectableType\n    targetSite: BuildingSite\n    targetBuilding: BuildingEntity\n    targetPos: Vector2[] = []\n    targetType: CollectTargetType | Building\n\n    protected constructor(collectableType: CollectableType) {\n        super()\n        this.collectableType = collectableType\n    }\n\n    abstract getTargetBuildingTypes(): Building[];\n\n    hasTarget(): boolean {\n        this.targetPos = this.getTargetPositions()\n        return this.targetPos.length > 0\n    }\n\n    getTargetPositions(): Vector2[] {\n        if (this.targetPos.length < 1) {\n            const sites = GameState.buildingSites.filter((b) => b.needs(this.getCollectableType()))\n            if (sites.length > 0) {\n                this.targetSite = sites[0]\n                this.targetPos = [this.targetSite.getRandomDropPosition()]\n                this.targetType = CollectTargetType.BUILDING_SITE\n                this.targetSite.assign(this)\n            } else {\n                const buildings = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                if (buildings.length > 0) {\n                    this.targetBuilding = buildings[0] // FIXME consider other buildings\n                    this.targetPos = [this.targetBuilding.getDropPosition2D()]\n                    this.targetType = this.targetBuilding.type\n                }\n            }\n        } else if (this.targetSite) {\n            if (this.targetSite.complete) this.resetTarget()\n        } else if (this.targetBuilding) {\n            // TODO check if building has been teleported away or turned off\n        }\n        return this.targetPos\n    }\n\n    getTargetType(): CollectTargetType | Building {\n        return this.targetType\n    }\n\n    resetTarget() {\n        if (this.targetSite) this.targetSite.unAssign(this)\n        this.targetSite = null\n        this.targetBuilding = null\n        this.targetPos = null\n        this.targetType = null\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        removeFromArray(GameState.collectablesUndiscovered, this)\n        GameState.collectables.push(this)\n        EventBus.publishEvent(new JobCreateEvent(new CollectJob(this)))\n    }\n\n    getCollectableType(): CollectableType {\n        return this.collectableType\n    }\n\n}\n\nexport enum CollectableType {\n\n    DYNAMITE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n\n}\n\nexport enum CollectTargetType {\n\n    BUILDING_SITE,\n\n}\n","import { CollectableEntity, CollectableType, CollectTargetType } from '../../../scene/model/collect/CollectableEntity'\nimport { Vector2 } from 'three'\nimport { FulfillerEntity } from '../../../scene/model/FulfillerEntity'\nimport { Building } from '../entity/building/Building'\nimport { GameState } from '../GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { CollectEvent } from '../../../event/WorldEvents'\nimport { PublicJob } from './Job'\nimport { JobType } from './JobType'\n\nexport class CollectJob extends PublicJob {\n\n    item: CollectableEntity\n\n    constructor(item: CollectableEntity) {\n        super(JobType.CARRY)\n        this.item = item\n    }\n\n    getWorkplaces(): Vector2[] {\n        return [this.item.getPosition2D()]\n    }\n\n    isQualified(fulfiller: FulfillerEntity) {\n        return fulfiller.carries === null && this.item.hasTarget()\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        if (this.item.getTargetType() === Building.TOOLSTATION) {\n            switch (this.item.getCollectableType()) {\n                case CollectableType.CRYSTAL:\n                    GameState.numCrystal++\n                    EventBus.publishEvent(new CollectEvent(this.item.getCollectableType()))\n                    break\n                case CollectableType.ORE:\n                    GameState.numOre++\n                    EventBus.publishEvent(new CollectEvent(this.item.getCollectableType()))\n                    break\n            }\n        } else if (this.item.getTargetType() === CollectTargetType.BUILDING_SITE) {\n            this.item.targetSite.addItem(this.item)\n        } else {\n            console.error('target type not yet implemented: ' + this.item.getTargetType())\n        }\n    }\n\n    getPriorityIdentifier(): string {\n        return this.item.getCollectableType() === CollectableType.CRYSTAL ? 'aiPriorityCrystal' : 'aiPriorityOre'\n    }\n\n}\n","import { BuildingEntity } from '../../scene/model/BuildingEntity'\nimport { Building } from './entity/building/Building'\nimport { Selectable, SelectionType } from './Selectable'\nimport { Raider } from '../../scene/model/Raider'\nimport { VehicleEntity } from '../../scene/model/VehicleEntity'\nimport { CollectableEntity, CollectableType } from '../../scene/model/collect/CollectableEntity'\nimport { Vector3 } from 'three'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../../main'\nimport { Surface } from '../../scene/model/map/Surface'\nimport { BaseEntity } from '../../scene/model/BaseEntity'\nimport { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { BuildingSite } from '../../scene/model/BuildingSite'\nimport { Dynamite } from '../../scene/model/collect/Dynamite'\nimport { Crystal } from '../../scene/model/collect/Crystal'\nimport { Ore } from '../../scene/model/collect/Ore'\nimport { LevelRewardConfig } from '../../cfg/LevelsCfg'\nimport { PriorityList } from './job/PriorityList'\nimport { SmallSpider } from './entity/monster/SmallSpider'\nimport { Bat } from './entity/monster/Bat'\nimport { removeFromArray } from '../../core/Util'\nimport { RaiderSkill } from '../../scene/model/RaiderSkill'\n\nexport enum GameResultState {\n\n    RUNNING,\n    COMPLETE,\n    FAILED,\n\n}\n\nexport class GameState {\n\n    static resultState: GameResultState = GameResultState.RUNNING\n    static levelFullName: string = ''\n    static numCrystal: number = 0\n    static numOre: number = 0\n    static numBrick: number = 0\n    static usedCrystals: number = 0\n    static neededCrystals: number = 0\n    static airlevel: number = 1 // airlevel in percent from 0 to 1.0\n    static selectedEntities: Selectable[] = []\n    static selectionType: SelectionType = null\n    static buildings: BuildingEntity[] = []\n    static buildingsUndiscovered: BuildingEntity[] = []\n    static raiders: Raider[] = []\n    static raidersUndiscovered: Raider[] = []\n    static requestedRaiders: number = 0\n    static vehicles: VehicleEntity[] = []\n    static vehiclesUndiscovered: VehicleEntity[] = []\n    static collectables: CollectableEntity[] = []\n    static collectablesUndiscovered: CollectableEntity[] = []\n    static buildingSites: BuildingSite[] = []\n    static spiders: SmallSpider[] = []\n    static bats: Bat[] = []\n    static totalCrystals: number = 0\n    static totalOres: number = 0\n    static totalDiggables: number = 0\n    static remainingDiggables: number = 0\n    static totalCaverns: number = 0\n    static discoveredCaverns: number = 0\n    static levelStartTime: number = 0\n    static levelStopTime: number = 0\n    static rewardConfig: LevelRewardConfig = null\n    static priorityList: PriorityList = null\n\n    static reset() {\n        this.resultState = GameResultState.RUNNING\n        this.levelFullName = ''\n        this.numCrystal = 0\n        this.numOre = 0\n        this.numBrick = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.airlevel = 1\n        this.selectedEntities = []\n        this.selectionType = null\n        this.buildings = []\n        this.buildingsUndiscovered = []\n        this.raiders = []\n        this.raidersUndiscovered = []\n        this.requestedRaiders = 0\n        this.vehicles = []\n        this.vehiclesUndiscovered = []\n        this.collectables = []\n        this.collectablesUndiscovered = []\n        this.buildingSites = []\n        this.spiders = []\n        this.bats = []\n        this.totalCrystals = 0\n        this.totalOres = 0\n        this.totalDiggables = 0\n        this.remainingDiggables = 0\n        this.totalCaverns = 0\n        this.discoveredCaverns = 0\n        this.levelStartTime = 0\n        this.levelStopTime = 0\n        this.rewardConfig = null\n        this.priorityList = null\n    }\n\n    static getBuildingsByType(...buildingTypes: Building[]): BuildingEntity[] {\n        return this.buildings.filter(b => b.isPowered() && buildingTypes.some(bt => b.type === bt))\n    }\n\n    static getClosestBuildingByType(position: Vector3, ...buildingTypes: Building[]): BuildingEntity {\n        const targetBuildings = GameState.getBuildingsByType(...buildingTypes)\n        let closest = null, minDist = null\n        targetBuildings.forEach((b) => {\n            const bPos = b.getDropPosition()\n            const dist = position.distanceToSquared(bPos) // TODO better use pathfinding\n            if (closest === null || dist < minDist) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static hasOneBuildingOf(...buildings: Building[]): boolean {\n        return this.buildings.some((b) => buildings.some((type) => b.type === type) && b.isPowered())\n    }\n\n    static hasBuildingWithUpgrades(building: Building, upgrades: number = 0): boolean {\n        return this.buildings.some((b) => b.type === building && b.level >= upgrades && b.isPowered())\n    }\n\n    static getTrainingSites(position: Vector3, training: RaiderSkill): BuildingEntity[] {\n        if (training === RaiderSkill.DEMOLITION) {\n            return this.buildings.filter((b) => {\n                return b.stats.TrainDynamite && b.stats.TrainDynamite[b.level]\n            })\n        }\n        return []\n    }\n\n    static selectEntities(entities: Selectable[]) {\n        this.selectedEntities = this.selectedEntities.filter((previouslySelected) => {\n            const stillSelected = entities.indexOf(previouslySelected) !== -1\n            if (!stillSelected) previouslySelected.deselect()\n            return stillSelected\n        })\n        // add new entities that are selectable\n        const selectionEvents = []\n        entities.forEach((freshlySelected) => {\n            const selectionEvent = freshlySelected.select()\n            if (selectionEvent) {\n                this.selectedEntities.push(freshlySelected)\n                selectionEvents.push(selectionEvent)\n            }\n        })\n        // determine and set next selection type\n        const len = this.selectedEntities.length\n        if (len > 1) {\n            this.selectionType = SelectionType.GROUP\n        } else if (len === 1) {\n            this.selectionType = this.selectedEntities[0].getSelectionType()\n        } else if (this.selectionType !== null) {\n            this.selectionType = null\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        // AFTER updating selected entities and selection type, publish all events\n        selectionEvents.forEach((event) => EventBus.publishEvent(event))\n    }\n\n    static getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + this.getBuildingsByType(Building.BARRACKS).length * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    static discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE\n        this.discoverEntities(this.raidersUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.buildingsUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.vehiclesUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.collectablesUndiscovered, minX, maxX, minZ, maxZ)\n    }\n\n    static discoverEntities(undiscovered: BaseEntity[], minX, maxX, minZ, maxZ) {\n        const discovered = []\n        undiscovered.forEach((e) => {\n            const pos = e.getPosition()\n            if (pos.x >= minX && pos.x < maxX && pos.z >= minZ && pos.z < maxZ) {\n                e.onDiscover()\n                discovered.push(e)\n            }\n        })\n        discovered.forEach((r) => removeFromArray(undiscovered, r))\n    }\n\n    static dropMaterial(type: CollectableType, quantity: number): CollectableEntity[] {\n        const result = []\n        if (type === CollectableType.DYNAMITE) {\n            for (let c = 0; c < quantity; c++) result.push(new Dynamite())\n        } else if (type === CollectableType.CRYSTAL) {\n            while (GameState.numCrystal > 0 && result.length < quantity) {\n                GameState.numCrystal--\n                result.push(new Crystal())\n            }\n        } else if (type === CollectableType.ORE) {\n            while (GameState.numOre > 0 && result.length < quantity) {\n                GameState.numOre--\n                result.push(new Ore())\n            }\n        } else {\n            console.error('Material drop not yet implemented: ' + type)\n        }\n        return result\n    }\n\n    static get gameTimeSeconds() {\n        return Math.round((GameState.levelStopTime - GameState.levelStartTime) / 1000)\n    }\n\n    static get score() {\n        if (!GameState.rewardConfig) return 0\n        let quota = GameState.rewardConfig.quota\n        let importance = GameState.rewardConfig.importance\n        const scoreCrystals = GameState.numCrystal >= (quota.crystals || Infinity) ? importance.crystals : 0\n        const scoreTimer = GameState.gameTimeSeconds <= (quota.timer || 0) ? importance.timer : 0\n        const scoreCaverns = quota.caverns ? Math.min(1, GameState.discoveredCaverns / quota.caverns) * importance.caverns : 0\n        const scoreConstructions = quota.constructions ? Math.min(1, GameState.buildings.length / quota.constructions * importance.constructions) : 0\n        const scoreOxygen = GameState.airlevel * importance.oxygen\n        const scoreFigures = GameState.raiders.length >= MAX_RAIDER_BASE ? importance.figures : 0\n        return Math.round(scoreCrystals + scoreTimer + scoreCaverns + scoreConstructions + scoreOxygen + scoreFigures) / 100\n    }\n\n    static get selectedSurface(): Surface {\n        return this.selectionType === SelectionType.SURFACE && this.selectedEntities.length > 0 ? this.selectedEntities[0] as Surface : null\n    }\n\n    static get selectedBuilding(): BuildingEntity {\n        return this.selectionType === SelectionType.BUILDING && this.selectedEntities.length > 0 ? this.selectedEntities[0] as BuildingEntity : null\n    }\n\n    static get selectedRaiders(): Raider[] {\n        return (this.selectionType === SelectionType.PILOT || this.selectionType === SelectionType.GROUP) && this.selectedEntities.length > 0 ? this.selectedEntities as Raider[] : []\n    }\n\n    static get totalOre(): number {\n        return this.numOre + this.numBrick * 5\n    }\n\n}\n","import { GameEvent } from './EventBus'\nimport { BuildingEntity } from '../scene/model/BuildingEntity'\nimport { Surface } from '../scene/model/map/Surface'\nimport { Raider } from '../scene/model/Raider'\nimport { VehicleEntity } from '../scene/model/VehicleEntity'\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: string) {\n        super(eventKey)\n        this.isLocal = true\n    }\n\n}\n\nexport class SelectionEvent extends LocalEvent {\n\n    static eventKey = 'selected'\n\n    constructor(eventSuffix: string) {\n        super(SelectionEvent.eventKey + '.' + eventSuffix)\n    }\n\n}\n\nexport class SurfaceSelectedEvent extends SelectionEvent {\n\n    static eventSuffix = 'surface'\n    static eventKey = SelectionEvent.eventKey + '.' + SurfaceSelectedEvent.eventSuffix\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(SurfaceSelectedEvent.eventSuffix)\n        this.surface = surface\n    }\n\n}\n\nexport class BuildingSelected extends SelectionEvent {\n\n    static eventSuffix = 'building'\n    static eventKey = SelectionEvent.eventKey + '.' + BuildingSelected.eventSuffix\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(BuildingSelected.eventSuffix)\n        this.building = building\n    }\n\n}\n\nexport class RaiderSelected extends SelectionEvent {\n\n    static eventSuffix = 'raider'\n    static eventKey = SelectionEvent.eventKey + '.' + RaiderSelected.eventSuffix\n\n    raider: Raider\n\n    constructor(raider: Raider) {\n        super(RaiderSelected.eventSuffix)\n        this.raider = raider\n    }\n\n}\n\nexport class VehicleSelected extends SelectionEvent {\n\n    static eventSuffix = 'vehicle'\n    static eventKey = SelectionEvent.eventKey + '.' + VehicleSelected.eventSuffix\n\n    vehicle: VehicleEntity\n\n    constructor(vehicle: VehicleEntity) {\n        super(VehicleSelected.eventSuffix)\n        this.vehicle = vehicle\n    }\n\n}\n\nexport class EntityDeselected extends LocalEvent {\n\n    static eventKey = 'deselected.entity'\n\n    constructor() {\n        super(EntityDeselected.eventKey)\n    }\n\n}\n","export class BaseActivity {\n\n    activityKey: string\n\n    constructor(activityKey: string) {\n        this.activityKey = activityKey\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class AnimEntityActivity extends BaseActivity {\n\n    static Stand = new AnimEntityActivity('Activity_Stand')\n\n}\n","import { Box3, CanvasTexture, Matrix4, Mesh, MeshBasicMaterial, MeshPhongMaterial, Object3D, SphereGeometry, Sprite, SpriteMaterial, Vector3 } from 'three'\nimport { AnimClip } from './AnimClip'\nimport { clearTimeoutSafe, iGet } from '../../../core/Util'\nimport { AnimationEntityType } from './AnimationEntityType'\nimport { BaseEntity } from '../BaseEntity'\nimport { AnimSubObj } from './AnimSubObj'\nimport { createContext } from '../../../core/ImageHelper'\nimport { BaseActivity } from '../activities/BaseActivity'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../main'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\n\nexport abstract class AnimEntity extends BaseEntity {\n\n    entityType: AnimationEntityType = null\n    poly: Object3D[] = []\n    animation: AnimClip = null\n    animationTimeout: NodeJS.Timeout = null\n    selectionFrame: Sprite = null\n    pickSphere: Mesh = null\n    pickSphereRadius: number = 10 / 2\n    carryJoint: Object3D = null\n    activity: BaseActivity = null\n\n    protected constructor(entityType: AnimationEntityType) {\n        super()\n        this.entityType = entityType\n    }\n\n    beamUp() {\n        // TODO avoid all further state changes and mark as unavailable here\n        // TODO publish event: check jobs with this target, update power state...\n        EventBus.publishEvent(new EntityDeselected())\n        this.setActivity(AnimEntityActivity.Stand, () => {\n            // TODO insert beam animation\n            AnimEntity.moveUp(this, 6 * TILESIZE)\n        })\n    }\n\n    private static moveUp(entity: AnimEntity, counter: number) {\n        if (counter > 0) {\n            counter--\n            entity.group.position.y += (TILESIZE / NATIVE_FRAMERATE) / 2\n            setTimeout(() => AnimEntity.moveUp(entity, counter), 1000 / NATIVE_FRAMERATE)\n        } else {\n            entity.removeFromScene()\n        }\n    }\n\n    removeFromScene() {\n        this.worldMgr.sceneManager.scene.remove(this.group)\n    }\n\n    changeActivity(activity: AnimEntityActivity, onChangeDone = null, durationTimeMs: number = null) {\n        if (onChangeDone) onChangeDone.bind(this)\n        if (this.activity !== activity) {\n            this.activity = activity\n            this.setActivity(this.activity, onChangeDone, durationTimeMs)\n        }\n    }\n\n    setActivity(activity: AnimEntityActivity, onAnimationDone = null, durationTimeMs = null) {\n        let activityKey = activity.activityKey\n        let act = this.entityType.activities.get(activityKey.toLowerCase())\n        if (!act) { // find by prefix\n            this.entityType.activities.forEach((a, key) => {\n                if (activityKey.toLowerCase().startsWith(key)) {\n                    act = a\n                }\n            })\n        }\n        if (!act?.animation) {\n            console.warn('Activity ' + activityKey + ' unknown or has no animation defined yet')\n            console.log(this.entityType.activities)\n            return\n        }\n        this.setAnimation(act?.animation, onAnimationDone, durationTimeMs)\n    }\n\n    setAnimation(animation: AnimClip, onAnimationDone = null, durationTimeMs = null) {\n        this.animation = animation\n        this.animation.looping = true\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.group.remove(...this.poly)\n        this.poly = []\n        const carries = (this.carryJoint && this.carryJoint.children) || []\n        this.carryJoint = null\n        // bodies are defined in animation and second in high/medium/low poly groups\n        this.animation.bodies.forEach((body) => {\n            let model: Object3D = iGet(this.entityType.highPoly, body.name)\n            if (!model) model = iGet(this.entityType.mediumPoly, body.name)\n            if (!model) model = body.model\n            const polyModel = model.clone(true)\n            this.poly.push(polyModel)\n            if (this.entityType.carryNullName && body.name && this.entityType.carryNullName.toLowerCase() === body.name.toLowerCase()) {\n                this.carryJoint = polyModel\n                if (carries.length > 0) this.carryJoint.add(...carries)\n            }\n        })\n        this.animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = this.poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                this.poly[parentInd].add(polyPart)\n            } else {\n                this.group.add(polyPart)\n            }\n        })\n        this.animate(0, onAnimationDone, durationTimeMs)\n    }\n\n    animate(frameIndex, onAnimationDone, durationTimeMs) {\n        if (this.poly.length !== this.animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        this.animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = this.poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = true\n                        mat.alphaTest = 0\n                    })\n                }\n            }\n        })\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        let nextFrame = frameIndex + 1\n        if (nextFrame <= this.animation.lastFrame || !onAnimationDone || (durationTimeMs !== null && durationTimeMs > 0)) {\n            if (nextFrame > this.animation.lastFrame) {\n                nextFrame = this.animation.firstFrame\n            }\n            const standardDurationTimeMs = 1000 / this.animation.framesPerSecond * this.animation.transcoef\n            if (durationTimeMs !== null) durationTimeMs -= standardDurationTimeMs\n            const that = this\n            const timeoutTimeMs = durationTimeMs !== null ? Math.max(0, Math.min(durationTimeMs, standardDurationTimeMs)) : standardDurationTimeMs\n            this.animationTimeout = setTimeout(() => that.animate(nextFrame, onAnimationDone, durationTimeMs), timeoutTimeMs) // TODO get this in sync with threejs\n        } else if (onAnimationDone) {\n            onAnimationDone()\n        }\n    }\n\n    createPickSphere() {\n        if (this.pickSphere) return\n        const pickSphereCenter = this.getPickSphereCenter()\n        const geometry = new SphereGeometry(this.pickSphereRadius, this.pickSphereRadius, this.pickSphereRadius)\n        const material = new MeshBasicMaterial({color: 0xffff00, visible: false}) // change visible to true for debugging\n        this.pickSphere = new Mesh(geometry, material)\n        this.pickSphere.userData = {selectable: this}\n        this.pickSphere.position.copy(pickSphereCenter)\n        this.group.add(this.pickSphere)\n        this.createSelectionFrame(pickSphereCenter)\n    }\n\n    getPickSphereCenter(): Vector3 {\n        return this.getBoundingBoxCenter()\n    }\n\n    getBoundingBoxCenter() {\n        const center = new Vector3()\n        new Box3().setFromObject(this.group).getCenter(center)\n        center.sub(this.group.position)\n        center.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        return center\n    }\n\n    private createSelectionFrame(pickSphereCenter: Vector3) {\n        const selectionFrameTextureSize = 128\n        const ctx = createContext(selectionFrameTextureSize, selectionFrameTextureSize)\n        ctx.fillStyle = '#0f0'\n        const strength = Math.round(25 / this.pickSphereRadius)\n        const length = selectionFrameTextureSize / 6\n        ctx.fillRect(0, 0, length, strength)\n        ctx.fillRect(0, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, 0, length, strength)\n        ctx.fillRect(selectionFrameTextureSize - strength, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - strength, selectionFrameTextureSize - length, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - length, strength, length)\n        const selectionFrameTexture = new CanvasTexture(ctx.canvas)\n        const selectionMaterial = new SpriteMaterial({map: selectionFrameTexture, depthTest: false})\n        this.selectionFrame = new Sprite(selectionMaterial)\n        this.selectionFrame.position.copy(pickSphereCenter)\n        const selectionFrameSize = this.pickSphereRadius * 2\n        this.selectionFrame.scale.set(selectionFrameSize, selectionFrameSize, selectionFrameSize)\n        this.selectionFrame.visible = false\n        this.group.add(this.selectionFrame)\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class DynamiteActivity extends BaseActivity {\n\n    static Normal = new DynamiteActivity('Normal')\n    static TickDown = new DynamiteActivity('TickDown')\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { AnimEntity } from '../anim/AnimEntity'\nimport { Carryable } from './Carryable'\nimport { Surface } from '../map/Surface'\nimport { Vector2 } from 'three'\nimport { GameState } from '../../../game/model/GameState'\nimport { DynamiteActivity } from '../activities/DynamiteActivity'\n\nexport class Dynamite extends AnimEntity implements Carryable {\n\n    targetSurface: Surface\n\n    constructor() {\n        super(ResourceManager.getAnimationEntityType('MiscAnims/Dynamite/Dynamite.ae'))\n        this.setActivity(DynamiteActivity.Normal)\n    }\n\n    get stats() {\n        return {}\n    }\n\n    hasTarget(): boolean {\n        return this.targetSurface && this.targetSurface.isExplodable() || GameState.hasOneBuildingOf(Building.TOOLSTATION)\n    }\n\n    getTargetPositions(): Vector2[] {\n        if (this.targetSurface && this.targetSurface.isExplodable()) {\n            return this.targetSurface.getDigPositions()\n        } else {\n            return GameState.getBuildingsByType(Building.TOOLSTATION).map((b) => b.getDropPosition2D())\n        }\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.DYNAMITE\n    }\n\n    ignite() {\n        // TODO add as explosive and scare em all!\n        this.worldMgr.sceneManager.scene.add(this.group)\n        const center = this.targetSurface.getCenterWorld()\n        center.y = this.group.position.y\n        this.group.lookAt(center)\n        this.setActivity(DynamiteActivity.TickDown, () => {\n            this.worldMgr.sceneManager.scene.remove(this.group)\n            this.targetSurface.collapse()\n            // TODO add explosion animation\n            // TODO damage raider, vehicle, buildings\n        })\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Color, Material, MeshPhongMaterial } from 'three'\nimport { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { SceneManager } from '../../SceneManager'\n\nexport class Crystal extends CollectableEntity {\n\n    constructor() {\n        super(CollectableType.CRYSTAL)\n        const resource2 = ResourceManager.getResource('MiscAnims/Crystal/vlp_greencrystal.lwo')\n        const mesh2 = SceneManager.registerMesh(new LWOLoader('MiscAnims/Crystal/').parse(resource2));\n        (mesh2.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.color = new Color(0, 0, 0) // XXX read from LWO file?\n            mat.emissive = new Color(0, 255, 0) // XXX should be luminosity color from mesh file?\n            mat.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n            mat.opacity = 0.5 // XXX read from LWO file?\n            mat.transparent = true\n        })\n        mesh2.scale.set(1.75, 1.75, 1.75) // XXX derive from texture scale?\n        this.group.add(mesh2)\n        const resource = ResourceManager.getResource('World/Shared/Crystal.lwo') // highpoly version\n        const mesh = SceneManager.registerMesh(new LWOLoader('World/Shared/').parse(resource));\n        (mesh.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.emissive = new Color(0, 8, 0) // XXX read from LWO file?\n            mat.color = new Color(0, 0, 0) // XXX read from LWO file?\n            mat.transparent = true\n            mat.opacity = 0.4 // XXX read from LWO file?\n        })\n        this.group.add(mesh)\n    }\n\n    get stats() {\n        return ResourceManager.stats.PowerCrystal\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.POWER_STATION, Building.TOOLSTATION]\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        console.log('An energy crystal has been discovered')\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { SceneManager } from '../../SceneManager'\n\nexport class Ore extends CollectableEntity {\n\n    constructor() {\n        super(CollectableType.ORE)\n        const resource = ResourceManager.getResource('MiscAnims/Ore/Ore1st.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('MiscAnims/Ore/').parse(resource))\n        this.group.add(mesh)\n    }\n\n    get stats() {\n        return ResourceManager.stats.Ore\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.ORE_REFINERY, Building.TOOLSTATION]\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        console.log('Ore has been discovered')\n    }\n\n}\n","export class RaiderSkill {\n\n    static DRIVER = new RaiderSkill('driver')\n    static ENGINEER = new RaiderSkill('engineer')\n    static GEOLOGIST = new RaiderSkill('geologist')\n    static PILOT = new RaiderSkill('pilot')\n    static SAILOR = new RaiderSkill('sailor')\n    static DEMOLITION = new RaiderSkill('demolition')\n\n    name: string\n\n    constructor(name: string) {\n        this.name = name\n    }\n\n}\n","export class WorkerMessage {\n\n    type: WorkerMessageType = null\n    text?: string\n    cfg?: any\n    totalResources?: number\n    assetName?: string\n    assetObj?: any\n    assetIndex?: number\n    loadingTimeSeconds?: string\n\n    constructor(type: WorkerMessageType) {\n        this.type = type\n    }\n\n    static createTextMessage(msg: string): WorkerMessage {\n        return {type: WorkerMessageType.MSG, text: msg}\n    }\n\n    static createCfgLoaded(cfg: any, totalResources: number): WorkerMessage {\n        return {type: WorkerMessageType.CFG, cfg: cfg, totalResources: totalResources}\n    }\n\n    static createAssetLoaded(assetIndex: number, assetName: string, assetObj: any) {\n        return {type: WorkerMessageType.ASSET, assetIndex: assetIndex, assetName: assetName, assetObj: assetObj}\n    }\n\n    static createLoadDone(totalResources: number, loadingTimeSeconds: string) {\n        return {type: WorkerMessageType.DONE, totalResources: totalResources, loadingTimeSeconds: loadingTimeSeconds}\n    }\n\n}\n\nexport enum WorkerMessageType {\n\n    MSG,\n    CFG,\n    CACHE_MISS,\n    SFX,\n    ASSET,\n    DONE,\n\n}\n","import { AmbientLight, Color, Frustum, Mesh, MOUSE, PerspectiveCamera, PointLight, Raycaster, Scene, Vector3, WebGLRenderer } from 'three'\nimport { DebugHelper } from './DebugHelper'\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { GameState } from '../game/model/GameState'\nimport { Selectable } from '../game/model/Selectable'\nimport { Terrain } from './model/map/Terrain'\nimport { TILESIZE } from '../main'\nimport { clearIntervalSafe } from '../core/Util'\nimport { AnimatedMesh } from '../resource/AnimatedMesh'\n\nexport class SceneManager {\n\n    static meshRegistry: AnimatedMesh[] = []\n\n    maxFps: number = 30 // most animations use 25 fps so this should be enough\n    renderer: WebGLRenderer\n    debugHelper: DebugHelper = new DebugHelper()\n    renderInterval\n    animRequest\n    scene: Scene\n    camera: PerspectiveCamera\n    ambientLight: AmbientLight\n    light: PointLight\n    terrain: Terrain\n    controls: MapControls\n    cursorTorchlight: PointLight\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.renderer = new WebGLRenderer({antialias: true, canvas: canvas})\n        this.renderer.setClearColor(0x000000)\n\n        this.camera = new PerspectiveCamera(30, canvas.width / canvas.height, 0.1, 5000) // TODO make these params configurable\n\n        this.controls = new MapControls(this.camera, this.renderer.domElement)\n        this.controls.mouseButtons = {LEFT: null, MIDDLE: MOUSE.ROTATE, RIGHT: MOUSE.PAN}\n        // this.controls.maxPolarAngle = Math.PI * 0.45; // TODO dynamically adapt to terrain height at camera position\n    }\n\n    selectEntitiesByRay(rx: number, ry: number) {\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        let intersects = raycaster.intersectObjects(GameState.raiders.map((r) => r.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.vehicles.map((v) => v.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.buildings.map((b) => b.pickSphere))\n        if (intersects.length < 1 && this.terrain) intersects = raycaster.intersectObjects(this.terrain.floorGroup.children)\n        const selected = []\n        if (intersects.length > 0) {\n            const userData = intersects[0].object.userData\n            if (userData && userData.hasOwnProperty('selectable')) {\n                const selectable = userData['selectable']\n                if (selectable) selected.push(selectable)\n            }\n        }\n        GameState.selectEntities(selected)\n    }\n\n    selectEntitiesInFrustum(r1x: number, r1y: number, r2x: number, r2y: number) {\n        const startPoint = new Vector3(r1x, r1y, 0.5)\n        const endPoint = new Vector3(r2x, r2y, 0.5)\n        // Avoid invalid frustum\n        if (startPoint.x === endPoint.x) {\n            endPoint.x += Number.EPSILON\n        }\n        if (startPoint.y === endPoint.y) {\n            endPoint.y += Number.EPSILON\n        }\n        // update camera\n        this.camera.updateProjectionMatrix()\n        this.camera.updateMatrixWorld()\n        // update frustum\n        const tmpPoint = new Vector3()\n        tmpPoint.copy(startPoint)\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x)\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y)\n        endPoint.x = Math.max(startPoint.x, endPoint.x)\n        endPoint.y = Math.min(startPoint.y, endPoint.y)\n\n        const vecNear = new Vector3()\n        const vecTopLeft = new Vector3()\n        const vecTopRight = new Vector3()\n        const vecDownRight = new Vector3()\n        const vecDownLeft = new Vector3()\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld)\n        vecTopLeft.copy(tmpPoint)\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0)\n        vecDownRight.copy(endPoint)\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0)\n\n        vecTopLeft.unproject(this.camera)\n        vecTopRight.unproject(this.camera)\n        vecDownRight.unproject(this.camera)\n        vecDownLeft.unproject(this.camera)\n\n        const vectemp1 = new Vector3()\n        const vectemp2 = new Vector3()\n        const vectemp3 = new Vector3()\n        vectemp1.copy(vecTopLeft).sub(vecNear)\n        vectemp2.copy(vecTopRight).sub(vecNear)\n        vectemp3.copy(vecDownRight).sub(vecNear)\n        vectemp1.normalize()\n        vectemp2.normalize()\n        vectemp3.normalize()\n\n        const deep = Number.MAX_VALUE\n        vectemp1.multiplyScalar(deep)\n        vectemp2.multiplyScalar(deep)\n        vectemp3.multiplyScalar(deep)\n        vectemp1.add(vecNear)\n        vectemp2.add(vecNear)\n        vectemp3.add(vecNear)\n\n        const frustum = new Frustum()\n        const planes = frustum.planes\n\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight)\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight)\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear)\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear)\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft)\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1)\n        planes[5].normal.multiplyScalar(-1)\n\n        let entities: Selectable[] = GameState.raiders.filter((r) => frustum.containsPoint(r.getSelectionCenter()))\n        entities.push(...(GameState.vehicles.filter((v) => frustum.containsPoint(v.getSelectionCenter()))))\n        if (entities.length < 1) entities = GameState.buildings.filter((b) => frustum.containsPoint(b.getSelectionCenter()))\n        GameState.selectEntities(entities)\n    }\n\n    setupScene(ambientColor: Color) {\n        this.scene = new Scene()\n\n        this.ambientLight = new AmbientLight(ambientColor, 0.4)\n        this.scene.add(this.ambientLight)\n\n        this.cursorTorchlight = new PointLight(0xffffff, 1.5, 4, 1)\n        this.cursorTorchlight.distance *= TILESIZE\n        this.scene.add(this.cursorTorchlight)\n    }\n\n    startScene() {\n        this.debugHelper.show()\n        this.renderInterval = setInterval(() => {\n            this.animRequest = requestAnimationFrame(() => {\n                this.debugHelper.renderStart()\n                this.renderer.render(this.scene, this.camera)\n                this.debugHelper.renderDone()\n            })\n        }, 1000 / this.maxFps)\n    }\n\n    disposeScene() {\n        this.debugHelper.hide()\n        this.renderInterval = clearIntervalSafe(this.renderInterval)\n        if (this.animRequest) {\n            cancelAnimationFrame(this.animRequest)\n            this.animRequest = null\n        }\n        this.terrain?.dispose()\n        this.terrain = null\n        SceneManager.meshRegistry.forEach(mesh => mesh.dispose())\n        SceneManager.meshRegistry = []\n    }\n\n    static registerMesh(animatedMesh: AnimatedMesh): Mesh {\n        this.meshRegistry.push(animatedMesh)\n        return animatedMesh.mesh\n    }\n\n}\n","/**\n * @author Scarabol https://github.com/scarabol\n *\n * This loader loads LWSC files exported from LW\n *\n * File format description: http://www.martinreddy.net/gfx/3d/LWSC.txt\n */\n\nimport { AnimClip } from '../scene/model/anim/AnimClip'\nimport { AnimSubObj } from '../scene/model/anim/AnimSubObj'\nimport { Group } from 'three'\nimport { getFilename } from '../core/Util'\nimport { ResourceManager } from './ResourceManager'\nimport { LWOLoader } from './LWOLoader'\nimport { SceneManager } from '../scene/SceneManager'\n\nexport class LWSCLoader {\n\n    path: string = ''\n    verbose: boolean = false\n    animationClip: AnimClip = new AnimClip()\n    lines: string[] = []\n    lineIndex: number = 0\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('Using verbose mode')\n    }\n\n    parse(content): AnimClip {\n        this.lines = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map(l => l.trim())\n\n        if (this.lines[0] !== 'LWSC') {\n            throw 'Invalid start of file! Expected \\'LWSC\\' in first line'\n        }\n\n        const sceneFileVersion = parseInt(this.lines[1], 10)\n        if (sceneFileVersion !== 1) {\n            console.warn('Unexpected scene file version: ' + sceneFileVersion)\n        }\n\n        for (this.lineIndex = 2; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) continue // empty line: object separator\n            const key = line.split(' ')[0]\n            if (key === 'FirstFrame') {\n                this.parseFrameBlock()\n            } else if (key === 'AddNullObject' || key === 'LoadObject') {\n                this.parseObjectBlock()\n                if (this.verbose) console.log(this.animationClip.bodies[this.animationClip.bodies.length - 1])\n            } else if (line.startsWith('PreviewFirstFrame ') || line.startsWith('PreviewLastFrame ') || line.startsWith('PreviewFrameStep ')) {\n                // only used in editor\n            } else {\n                // console.warn('Unexpected line: ' + line); // TODO analyze remaining entries\n            }\n        }\n\n        if (this.verbose) console.log(this.animationClip)\n        return this.animationClip\n    }\n\n    parseLine(line: string): string[] {\n        return line.split(' ').filter((l: string) => l !== '')\n    }\n\n    parseFrameBlock() {\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            const line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'FirstFrame') {\n                this.animationClip.firstFrame = parseInt(value)\n            } else if (key === 'LastFrame') {\n                this.animationClip.lastFrame = parseInt(value)\n            } else if (key === 'FrameStep') {\n                const frameStep = parseInt(value)\n                if (frameStep !== 1) console.error('Animation frameStep has unexpected value: ' + frameStep)\n            } else if (key === 'FramesPerSecond') {\n                this.animationClip.framesPerSecond = parseInt(value)\n            } else if (key === 'PreviewFirstFrame' || key === 'PreviewLastFrame' || key === 'PreviewFrameStep') {\n                // only used in editor\n            } else {\n                console.warn('Unexpected key in frame block')\n            }\n        }\n        console.error('Parsing block reached content end')\n    }\n\n    parseObjectBlock(): AnimSubObj {\n        const subObj = new AnimSubObj()\n        this.animationClip.bodies.push(subObj)\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'AddNullObject' || key === 'LoadObject') {\n                if (key === 'LoadObject') {\n                    const filename = getFilename(value)\n                    subObj.name = filename.slice(0, filename.length - '.lwo'.length)\n                    subObj.filename = this.path + filename\n                    // FIXME do not parse twice, read from cache first\n                    const lwoBuffer = ResourceManager.getResource(subObj.filename)\n                    subObj.model = SceneManager.registerMesh(new LWOLoader(this.path).parse(lwoBuffer))\n                } else if (key === 'AddNullObject') {\n                    subObj.name = value\n                    subObj.model = new Group()\n                } else {\n                    throw 'Unexpected line: ' + line\n                }\n            } else if (key === 'ObjectMotion') {\n                let line = this.lines[++this.lineIndex]\n                const lenInfos = parseInt(line)\n                line = this.lines[++this.lineIndex]\n                const lenFrames = parseInt(line)\n                this.lineIndex++\n                for (let c = 0; c < lenFrames; c++) {\n                    let line = this.lines[this.lineIndex + c * 2]\n                    if (line.startsWith('EndBehavior')) break\n                    const infos = line.split(' ').map(Number)\n                    if (infos.length !== lenInfos) console.warn('Number of infos (' + infos.length + ') does not match if specified count (' + lenInfos + ')')\n                    line = this.lines[this.lineIndex + c * 2 + 1]\n                    const animationFrameIndex = parseInt(line.split(' ')[0]) // other entries in line should be zeros\n                    subObj.setFrameAndFollowing(animationFrameIndex, this.animationClip.lastFrame, infos)\n                }\n                this.lineIndex += lenFrames * 2\n            } else if (key === 'ParentObject') {\n                subObj.parentObjInd = Number(value) - 1 // index is 1 based\n                if (this.verbose) console.log('parent obj ind is: ' + subObj.parentObjInd)\n            } else if (key === 'ShowObject ' || key === 'LockedChannels') {\n                // only used in editor\n            } else if (key === 'ShadowOptions') { // TODO implement shadow options (bitwise)\n                // 0 - Self Shadow\n                // 1 - Cast Shadow\n                // 2 - Receive Shadow\n            } else if (key === 'ObjDissolve') {\n                if (value == '(envelope)') {\n                    let line = this.lines[++this.lineIndex]\n                    const numOfInformationChannels = parseInt(line)\n                    if (numOfInformationChannels !== 1) console.error('Number of information channels for opacity is not 1, but: ' + numOfInformationChannels)\n                    line = this.lines[++this.lineIndex]\n                    const numOfKeyframes = parseInt(line)\n                    this.lineIndex++\n                    for (let c = 0; c < numOfKeyframes; c++) {\n                        let line = this.lines[this.lineIndex + c * 2]\n                        if (line.startsWith('EndBehavior')) break\n                        const opacity = 1 - Number(line)\n                        line = this.lines[this.lineIndex + c * 2 + 1]\n                        const frameNum = Number(line.split(' ')[0])\n                        subObj.setOpacityAndFollowing(frameNum, this.animationClip.lastFrame, opacity)\n                    }\n                    this.lineIndex += numOfKeyframes * 2\n                } else {\n                    const opacity = 1 - Number(value)\n                    subObj.setOpacityAndFollowing(0, this.animationClip.lastFrame, opacity)\n                }\n            } else {\n                // console.log('Unhandled line in object block: ' + line); // TODO analyze unhandled lines\n            }\n        }\n        console.error('Parsing block reached content end')\n        return subObj\n    }\n\n}\n","import { AnimationEntityType } from '../scene/model/anim/AnimationEntityType'\nimport { getPath, iGet } from './wadworker/WadUtil'\nimport { ResourceManager } from './ResourceManager'\nimport { LWOLoader } from './LWOLoader'\nimport { LWSCLoader } from './LWSCLoader'\nimport { SceneManager } from '../scene/SceneManager'\nimport { AnimClip } from '../scene/model/anim/AnimClip'\n\nexport class AnimEntityLoader {\n\n    static loadModels(url, root): AnimationEntityType {\n        const path = getPath(url)\n\n        const entityType = new AnimationEntityType()\n\n        entityType.carryNullName = iGet(root, 'CarryNullName')\n\n        // TODO load other poly quality models (if available)\n        // let mediumPoly = iGet(root, 'MediumPoly');\n        // if (mediumPoly) {\n        //     Object.keys(mediumPoly).forEach((key) => {\n        //         const polyname = mediumPoly[key];\n        //         const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //         const polyfile = path + polyname + '.lwo';\n        //         console.log('polyfile');\n        //         console.log(polyfile);\n        //         // new LWOLoader().load(polyfile, (model) => {\n        //         //     mediumPoly[polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //         // }, undefined, () => {\n        //         //     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //         // });\n        //     });\n        //     Object.keys(mediumPoly).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete mediumPoly[polykey]);\n        // }\n\n        const highPoly = iGet(root, 'highpoly')\n        if (highPoly) {\n            entityType.highPoly = {}\n            Object.keys(highPoly).forEach((key) => {\n                const polyname = highPoly[key] + '.lwo'\n                const polykey = key.startsWith('!') ? key.slice(1) : key\n                // console.log(path + polyname);\n                // FIXME do not parse twice, read from cache first\n                const lwoBuffer = ResourceManager.getResource(path + polyname)\n                entityType.highPoly[polykey] = SceneManager.registerMesh(new LWOLoader(path).parse(lwoBuffer))\n            })\n        }\n\n        // let fPoly = (root)['fppoly'];\n        // if (fPoly) {\n        //     Object.keys(fPoly).forEach((camera) => {\n        //         Object.keys(fPoly[camera]).forEach((key) => {\n        //             const polyname = fPoly[camera][key];\n        //             const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //             if (polyname !== 'null') {\n        //                 const polyfile = path + polyname + '.lwo';\n        //                 new LWOLoader().load(polyfile, (model) => {\n        //                     fPoly[camera][polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //                 }, undefined, () => {\n        //                     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //                 });\n        //             } else {\n        //                 fPoly[camera][key] = {polyname: polyname, polyfile: null, model: new Group()};\n        //             }\n        //         });\n        //         Object.keys(fPoly[camera]).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete fPoly[polykey][camera]);\n        //     });\n        // }\n\n        const activities = iGet(root, 'Activities')\n        if (activities) {\n            Object.keys(activities).forEach((activity) => {\n                try {\n                    let keyname = iGet(activities, activity)\n                    const act: {file: string, transcoef: number, lwsfile: boolean, animation: AnimClip} = iGet(root, keyname)\n                    const file = iGet(act, 'FILE')\n                    const isLws = iGet(act, 'LWSFILE') === true\n                    const transcoef = iGet(act, 'TRANSCOEF')\n                    const looping = iGet(act, 'LOOPING') === true\n                    if (isLws) {\n                        const content = ResourceManager.getResource(path + file + '.lws')\n                        act.animation = new LWSCLoader(path).parse(content)\n                        act.animation.looping = looping\n                        act.animation.transcoef = transcoef ? Number(transcoef) : 1;\n                        entityType.activities.set(activity.toLowerCase(), act)\n                    } else {\n                        console.error('Found activity which is not an LWS file')\n                    }\n                } catch (e) {\n                    console.error(e)\n                    console.log(root)\n                    console.log(activities)\n                    console.log(activity)\n                }\n            })\n        }\n\n        return entityType\n    }\n\n}\n","import { createContext, createDummyImgData, getPixel, setPixel } from './ImageHelper'\n\nexport class BitmapFont {\n\n    charHeight: number\n    letters: ImageData[] = []\n\n    constructor(fontImageData: ImageData, cols = 10, rows = 19) { // font images always consist of 10 columns and 19 rows with last row empty\n        // actually chars are font dependent and have to be externalized in future\n        // maybe CP850 was used... not sure, doesn't fit...\n        const chars = [' ', '!', '\"', '#', '$', '%', '⌵', '`', '(', ')',\n            '*', '+', ',', '-', '.', '/', '0', '1', '2', '3',\n            '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',\n            '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n            'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n            'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[',\n            '\\\\', ']', '^', '_', '\\'', 'a', 'b', 'c', 'd', 'e',\n            'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\n            'z', 'Ä', 'Å', 'Á', 'À', 'Â', 'Ã', 'Ą', 'ä', 'å',\n            'á', 'à', 'â', 'ã', 'ą', 'Ë', 'E̊', 'É', 'È', 'É',\n            'Ę', 'ë', 'e̊', 'é', 'è', 'e̊', 'ę̊', '', '', '',\n            '', '', '', '', '', 'Ö', '', '', '', '',\n            'ö', '', '', '', '', 'Ü', '', '', '', 'ü',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', 'ß', '', '', '', 'Ñ', '', 'ñ',\n            '',\n        ] // XXX complete this character list\n\n        const maxCharWidth = fontImageData.width / cols\n        this.charHeight = fontImageData.height / rows\n\n        function getActualCharacterWidth(imgData) {\n            for (let y = 0; y < imgData.height / rows; y++) { // find non-empty row first\n                let rowPixelIndex = y * 4 * imgData.width\n                if (imgData.data[rowPixelIndex] !== 255 && imgData.data[rowPixelIndex + 2] !== 255) { // red/blue pixels indicate end of character\n                    for (let x = 0; x < maxCharWidth; x++) {\n                        let colPixelIndex = x * 4\n                        if (imgData.data[colPixelIndex] === 255 || imgData.data[colPixelIndex + 2] === 255) { // red/blue pixels indicate end of character\n                            return x\n                        }\n                    }\n                    return maxCharWidth\n                }\n            }\n            return 0\n        }\n\n        for (let i = 0; i < chars.length; i++) {\n            let imgData = this.extractData(fontImageData, (i % 10) * maxCharWidth, Math.floor(i / 10) * this.charHeight, maxCharWidth, this.charHeight)\n            let actualWidth = getActualCharacterWidth(imgData)\n            if (actualWidth > 0) {\n                imgData = this.extractData(imgData, 0, 0, actualWidth, this.charHeight)\n            } else {\n                imgData = createDummyImgData(maxCharWidth, this.charHeight)\n            }\n            this.letters[chars[i]] = imgData\n        }\n    }\n\n    extractData(imgData, startX, startY, width, height): ImageData {\n        const alpha = getPixel(imgData, startX + width - 1, startY + height - 1)\n        const result = new ImageData(width, height)\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const p = getPixel(imgData, startX + x, startY + y)\n                if (p.r === alpha.r && p.g === alpha.g && p.b === alpha.b) p.a = 0 // apply alpha channel\n                setPixel(result, x, y, p.r, p.g, p.b, p.a)\n            }\n        }\n        return result\n    }\n\n    createTextImage(text: string, maxWidth?: number, autoCenter: boolean = true): HTMLCanvasElement {\n        if (text === undefined || text === null || text.length < 1) {\n            // empty text requested, context with width 0 is not allowed, but 1 with alpha is close enough\n            return createContext(1, 1).canvas\n        }\n        text = text.replace(/_/g, ' ')\n        const rows = this.determineRows(text, maxWidth)\n        const width = Math.max(...(rows.map(r => r.width)))\n        const result = new ImageData(width, this.charHeight * rows.length)\n        rows.forEach((row, index) => {\n            const rowX = autoCenter ? Math.round((width - row.width) / 2) : 0\n            const rowY = index * this.charHeight\n            let letterX = 0\n            for (let c = 0; c < row.text.length; c++) {\n                const letterImgData = this.letters[row.text.charAt(c)]\n                if (letterImgData) {\n                    for (let x = letterX; x < letterX + letterImgData.width; x++) {\n                        for (let y = 0; y < letterImgData.height; y++) {\n                            const p = getPixel(letterImgData, x - letterX, y)\n                            setPixel(result, rowX + x, rowY + y, p.r, p.g, p.b, p.a)\n                        }\n                    }\n                    letterX += letterImgData.width\n                } // missing letter issue already reported above\n            }\n        })\n        const img: CanvasRenderingContext2D = createContext(result.width, result.height)\n        img.putImageData(result, 0, 0)\n        return img.canvas\n    }\n\n    private determineRows(text: string, maxWidth?: number): { text: string, width: number }[] {\n        const spaceWidth = this.letters[' '].width\n        const rows: { text: string, width: number }[] = []\n        let rowText = ''\n        let rowWidth = 0\n        text.split(' ').map(word => {\n            let wordWidth = 0\n            for (let c = 0; c < word.length; c++) {\n                const letter = word.charAt(c)\n                const letterImg = this.letters[letter]\n                if (letterImg) {\n                    wordWidth += letterImg.width\n                } else {\n                    console.error('Letter \\'' + letter + '\\' not found in charset! Ignoring it')\n                }\n            }\n            if (rowWidth > 0) {\n                if (!maxWidth || rowWidth + spaceWidth + wordWidth < maxWidth) {\n                    rowText += ' ' + word\n                    rowWidth += spaceWidth + wordWidth\n                } else {\n                    rows.push({text: rowText, width: rowWidth})\n                    rowText = word\n                    rowWidth = wordWidth\n                }\n            } else {\n                rowText += word\n                rowWidth += wordWidth\n            }\n            return wordWidth\n        })\n        if (rowWidth > 0) rows.push({text: rowText, width: rowWidth})\n        return rows\n    }\n}\n","export class BaseConfig {\n\n    static setFromCfg(config: BaseConfig, cfgObj: any) {\n        Object.keys(cfgObj).forEach((cfgKey) => {\n            const lCfgKeyName = (cfgKey.startsWith('!') ? cfgKey.substring(1) : cfgKey)\n                .toLowerCase()\n                .replace(/_/g, '') // Activity_Stand\n                .replace(/-/g, '') // Geo-dome\n            const found = Object.keys(config).some((objKey) => {\n                return config.assignValue(objKey, lCfgKeyName, cfgObj[cfgKey])\n            })\n            if (!found) {\n                console.warn('cfg key does not exist: ' + cfgKey)\n            }\n        })\n        return config\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            const currentValue = this[objKey]\n            const currentIsArray = Array.isArray(currentValue)\n            let parsedValue = this.parseValue(lCfgKeyName, cfgValue)\n            const parsedIsArray = Array.isArray(parsedValue)\n            if (currentValue && currentIsArray !== parsedIsArray) {\n                if (currentIsArray) {\n                    parsedValue = [parsedValue]\n                    // } else {\n                    //     console.warn('Array overwrite conflict for key ' + objKey + ' with existing value (' + currentValue + ') and new value (' + parsedValue + ')')\n                }\n            }\n            this[objKey] = parsedValue\n            return true\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return cfgValue\n    }\n\n}\n","import { ScreenLayer } from '../screen/ScreenLayer'\nimport { BaseScreen } from '../screen/BaseScreen'\n\n// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n}\n\nexport enum POINTER_EVENT {\n    MOVE,\n    DOWN,\n    UP,\n}\n\nexport enum KEY_EVENT {\n    DOWN,\n    UP,\n}\n\nexport class EventManager {\n\n    constructor(screen: BaseScreen) {\n        screen.gameCanvasContainer.addEventListener('contextmenu', (event: MouseEvent) => {\n            if (screen.isInRect(event)) event.preventDefault()\n        })\n        new Map<string, POINTER_EVENT>([\n            ['pointermove', POINTER_EVENT.MOVE],\n            ['pointerdown', POINTER_EVENT.DOWN],\n            ['pointerup', POINTER_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: PointerEvent) => {\n                if (!screen.isInRect(event)) return\n                event.preventDefault()\n                // all event attibutes used by controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n                const nonBubblingClone = new PointerEvent(event.type, {\n                    bubbles: false, // disable bubbling otherwise we'll trigger this same event handler again\n                    clientX: event.clientX,\n                    clientY: event.clientY,\n                    pointerType: event.pointerType,\n                    button: event.button,\n                    ctrlKey: event.ctrlKey,\n                    metaKey: event.metaKey,\n                    shiftKey: event.shiftKey,\n                })\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handlePointerEvent(eventEnum, nonBubblingClone))\n            })\n        })\n        new Map<string, KEY_EVENT>([\n            ['keydown', KEY_EVENT.DOWN],\n            ['keyup', KEY_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: KeyboardEvent) => {\n                // event.preventDefault(); // otherwise page reload with F5 stops working (may be intended in future)\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handleKeyEvent(eventEnum, event))\n            })\n        })\n        screen.gameCanvasContainer.addEventListener('wheel', (event: WheelEvent) => {\n            if (!screen.isInRect(event)) return\n            // all event attibutes used by controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n            const nonBubblingClone = new WheelEvent(event.type, {\n                bubbles: false, // disable bubbling otherwise we'll trigger this same event handler again\n                clientX: event.clientX,\n                clientY: event.clientY,\n                deltaX: event.deltaX,\n                deltaY: event.deltaY,\n                deltaZ: event.deltaZ,\n                button: event.button,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey,\n                shiftKey: event.shiftKey,\n            })\n            screen.layers.filter(l => l.isActive())\n                .sort((a, b) => ScreenLayer.compareZ(a, b))\n                .some(l => l.handleWheelEvent(nonBubblingClone))\n        })\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { Building } from '../game/model/entity/building/Building'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class BuildingEntityStats extends BaseConfig {\n\n    Levels: number = 0\n    SelfPowered: boolean = false\n    PickSphere: number = 0\n    TrainDynamite: boolean[] = null\n    CostOre: number = 0\n    CostCrystal: number = 0\n\n    static getByType(type: Building): BuildingEntityStats {\n        switch (type) {\n            case Building.TOOLSTATION:\n                return ResourceManager.stats.Toolstation\n            case Building.TELEPORT_PAD:\n                return ResourceManager.stats.TeleportPad\n            case Building.DOCKS:\n                return ResourceManager.stats.Docks\n            case Building.POWER_STATION:\n                return ResourceManager.stats.Powerstation\n            case Building.BARRACKS:\n                return ResourceManager.stats.Barracks\n            case Building.UPGRADE:\n                return ResourceManager.stats.Upgrade\n            case Building.GEODOME:\n                return ResourceManager.stats.Geodome\n            case Building.ORE_REFINERY:\n                return ResourceManager.stats.OreRefinery\n            case Building.GUNSTATION:\n                return ResourceManager.stats.GunStation\n            case Building.TELEPORT_BIG:\n                return ResourceManager.stats.TeleportBIG\n        }\n        throw 'Unexpected building type: '+type\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\n\nexport class MovableEntityStats extends BaseConfig {\n\n    RouteSpeed: number[] = []\n    RubbleCoef: number = 1\n    PathCoef: number = 1\n\n}\n","// noinspection JSUnusedGlobalSymbols\n\nimport { BaseConfig } from './BaseConfig'\nimport { BuildingEntityStats } from './BuildingEntityStats'\nimport { MovableEntityStats } from './MovableEntityStats'\n\nexport class GameStatsCfg extends BaseConfig {\n\n    Pilot = new class PilotStats extends BaseConfig {\n        Levels: number = 4\n        RouteSpeed: number[] = [1.10, 1.10, 1.10, 1.10]\n        SoilDrillTime: number[] = [4.0, 4.0, 4.0, 4.0] // Time in seconds to drill through the rock.\n        LooseDrillTime: number[] = [4.0, 4.0, 4.0, 4.0]\n        MedDrillTime: number[] = [8.0, 8.0, 8.0, 8.0]\n        HardDrillTime: number[] = [0.0, 0.0, 0.0, 0.0] // Zero means the object cannot drill the rock type\n        SeamDrillTime: number[] = [10.0, 10.0, 10.0, 10.0] // Either or both ore or crystal.\n        UpgradeTime: number[] = [30.0, 45.0, 60.0, 60.0] // Last entry is ignored as it can never upgrade from that.\n        CollRadius: number = 5.0\n        CollHeight: number = 12.0\n        TrackDist: number = 40.0\n        SingleWidthDig: boolean[] = [true, true, true, true]\n        PickSphere: number = 10.0\n        RepairValue: number[] = [10.0, 15.0, 20.0, 25.0]\n        SurveyRadius: number[] = [3, 3, 3, 3]\n        Drillsound: string = 'SND_pilotdrill'\n        Drillfadesound: string = 'SND_pilotdrillfade'\n        RestPercent: number = 60.0\n        EnergyDecayRate: number = 0.25\n        CanClearRubble: boolean = true\n        NumOfToolsCanCarry: number[] = [2, 3, 4, 5]\n        CrossLand: boolean = true\n        RubbleCoef: number = 0.5\n        PathCoef: number = 2.0\n        RouteAvoidance: boolean = true\n        UseLegoManTeleporter: boolean = true\n        AwarenessRange: number = 10.0\n        OxygenCoef: number = -1.0\n        CanStrafe: boolean = true\n        EnterToolStore: boolean = true\n        ShowHealthBar: boolean = true\n    }\n\n    RockMonster = new class RockMonsterStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 0.8\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 22.0\n        AlertRadius: number = 60.0\n        HealthDecayRate: number = 0.6 // Reduce health by 'n' every second.\n        PickSphere: number = 22.0\n        RepairValue: number = -10.0\n        CanScare: boolean = true\n        RestPercent: number = 20.0\n        CarryMinHealth: number = 15.0\n        PainThreshold: number = 20.0\n        StampRadius: number = 80.0\n        AttackRadius: number = 160.0\n        CanSteal: boolean = true\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        GrabMinifigure: boolean = true\n        RouteAvoidance: boolean = true\n        BumpDamage: boolean = true\n        AttackPaths: boolean = true\n        SplitOnZeroHealth: boolean = true\n        CanBeHitByFence: boolean = true\n        Capacity: number = 6 // How many crystals it can eat\n        PathCoef: number = 0.5\n        // Statistics about the weapons\n        CanBeShotAt: boolean = true // Can this monster be shot at by lego men\n        CanFreeze: boolean = true // Can this object be frozen\n        FreezerTime: number = 25.0 // Time this object is frozen for\n        FreezerDamage: number = 5.0 // Damage that freezing causes\n        CanLaser: boolean = true // Can this object be lasered\n        LaserDamage: number = 110.0 // Damage sustained by a laser\n        CanPush: boolean = true // Can this object be pusher'ed\n        PusherDist: number = 20.0 // Distance the object is pushed 40=1 block\n        PusherDamage: number = 2.0 // Damage that the pusher gun causes\n        WakeRadius: number = 25.0\n        ScaredByBigBangs: boolean = true\n        RemoveReinforcement: boolean = true\n        ShowHealthBar: boolean = true\n    }\n\n    SmallSpider = new class SmallSpiderStats extends MovableEntityStats {\n        Levels: number = 1\n        RouteSpeed: number[] = [2.0]\n        TrackDist: number = 10.0\n        CollRadius: number = 0.0\n        CollHeight: number = 0.0\n        PickSphere: number = 6.0\n        AlertRadius: number = 40.0\n        RandomMove: boolean = true\n        RandomEnterWall: boolean = true\n        CauseSlip: boolean = true\n        CrossLand: boolean = true\n        RubbleCoef: number = 0.2\n        DontShowDamage: boolean = true\n        DontShowOnRadar: boolean = true\n        ScaredByBigBangs: boolean = true\n    }\n\n    Bat = new class BatStats extends MovableEntityStats {\n        Levels: number = 1\n        RouteSpeed: number[] = [1.0]\n        TrackDist: number = 10.0\n        CollRadius: number = 10.0\n        AlertRadius: number = 10.0 // Alert radius (causes attack mode)\n        RandomMove: boolean = true // Random movement\n        randomMoveTime: number = 10\n        CanScare: boolean = true // Scare away the player\n        ScaredByBigBangs: boolean = true\n        // Flock parameters.\n        Flocks: boolean = true // Set this to create a flock for this object.\n        FlocksDebug: boolean = false // If this is set the actual lego objects animation is displayed at the \"lego\" position.\n        FlocksSmooth: boolean = true // Smooths out the orientation of the flocks elements.\n        FlocksSize: number = 8 // Number of the given item in the flock.  (Default 5)\n        FlocksTurn: number = 0.6 // Turning speed of the bat. (0.6 default)\n        FlocksSpeed: number = 1.5 // Velocity of the flock. (2.0 default)\n        FlocksTightness: number = 0.8 // Tightness of the flock. (2.0 default)\n        FlocksGoalUpdate: number = 2.0 // How often the flocks goal is updated (25 per second).  (2.0 default)\n        FlocksRandomness: number = 6.0 // Randomness of goals. (2.0 default)\n        FlocksHeight: number = 22.0 // Height above the ground of the flock elements.  (30.0 default)\n        CrossLand: boolean = true\n        CrossWater: boolean = true\n        CrossLava: boolean = true\n        DontShowDamage: boolean = true\n    }\n\n    TinyRM = new class TinyRMStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 1.2\n        TrackDist: number = 10.0\n        CollRadius: number = 0.0\n        CollHeight: number = 5.0\n        PickSphere: number = 6.0\n        AlertRadius: number = 40.0\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        DontShowDamage: boolean = true\n        DontShowOnRadar: boolean = true\n        ScaredByPlayer: boolean = true\n        ScaredByBigBangs: boolean = true\n    }\n\n    TinyIM = new class TinyIMStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 1.2\n        TrackDist: number = 10.0\n        CollRadius: number = 0.0\n        CollHeight: number = 5.0\n        PickSphere: number = 6.0\n        AlertRadius: number = 40.0\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        DontShowDamage: boolean = true\n        DontShowOnRadar: boolean = true\n        ScaredByPlayer: boolean = true\n        ScaredByBigBangs: boolean = true\n    }\n\n    Slug = new class SlugStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 0.3\n        TrackDist: number = 10.0\n        CollRadius: number = 3.0\n        CollHeight: number = 7.0\n        PickSphere: number = 12.0\n        AlertRadius: number = 40.0\n        CrossLand: boolean = true\n        RubbleCoef: number = 0.3\n        UseHoles: boolean = true\n        DrainPower: boolean = true\n        AttackRadius: number = 280.0\n        PainThreshold: number = 50.0\n        CanBeShotAt: boolean = true\n        CanLaser: boolean = true\n        LaserDamage: number = 5.0\n        CanPush: boolean = true // Can this object be pusher'ed\n        PusherDist: number = 60.0 // Distance the object is pushed\n        PusherDamage: number = 5.0 // Damage that the pusher gun causes\n        ShowHealthBar: boolean = true\n        ScaredByBigBangs: boolean = true\n    }\n\n    LavaMonster = new class LavaMonsterStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 0.8\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 22.0\n        AlertRadius: number = 60.0\n        HealthDecayRate: number = 0.6 // Reduce health by 'n' every second.\n        PickSphere: number = 22.0\n        RepairValue: number = -10.0\n        CanScare: boolean = true\n        RestPercent: number = 20.0\n        CarryMinHealth: number = 15.0\n        PainThreshold: number = 20.0\n        StampRadius: number = 80.0\n        AttackRadius: number = 160.0\n        CanSteal: boolean = true\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        GrabMinifigure: boolean = true\n        Capacity: number = 7 // How many crystals it can eat\n        RouteAvoidance: boolean = true\n        BumpDamage: boolean = true\n        AttackPaths: boolean = true\n        SplitOnZeroHealth: boolean = true\n        CanBeHitByFence: boolean = true\n        PathCoef: number = 0.5\n        CrossLava: boolean = true\n        // Statistics about the weapons\n        CanBeShotAt: boolean = true // Can this monster be shot at by lego men\n        CanFreeze: boolean = true // Can this object be frozen\n        FreezerTime: number = 75.0 // Time this object is frozen for\n        FreezerDamage: number = 40.0 // Damage that freezing causes\n        CanLaser: boolean = true // Can this object be lasered\n        LaserDamage: number = 1.0 // Damage sustained by a laser\n        CanPush: boolean = true // Can this object be pusher'ed\n        PusherDist: number = 60.0 // Distance the object is pushed\n        PusherDamage: number = 5.0 // Damage that the pusher gun causes\n        WakeRadius: number = 25.0\n        ScaredByBigBangs: boolean = true\n        RemoveReinforcement: boolean = true\n        ShowHealthBar: boolean = true\n    }\n\n    IceMonster = new class IceMonsterStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 0.8\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 22.0\n        AlertRadius: number = 60.0\n        HealthDecayRate: number = 0.6 // Reduce health by 'n' every second.\n        PickSphere: number = 22.0\n        RepairValue: number = -10.0\n        CanScare: boolean = true\n        RestPercent: number = 20.0\n        CarryMinHealth: number = 15.0\n        PainThreshold: number = 20.0\n        StampRadius: number = 80.0\n        AttackRadius: number = 120.0\n        CanSteal: boolean = true\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        GrabMinifigure: boolean = true\n        Capacity: number = 5 // How many crystals it can eat\n        RouteAvoidance: boolean = true\n        BumpDamage: boolean = true\n        AttackPaths: boolean = true\n        SplitOnZeroHealth: boolean = true\n        CanBeHitByFence: boolean = true\n        PathCoef: number = 0.5\n        // Statistics about the weapons\n        CanBeShotAt: boolean = true // Can this monster be shot at by lego men\n        CanFreeze: boolean = false // Can this object be frozen\n        FreezerTime: number = 0.0 // Time this object is frozen for\n        FreezerDamage: number = 0.0 // Damage that freezing causes\n        CanLaser: boolean = true // Can this object be lasered\n        LaserDamage: number = 110.0 // Damage sustained by a laser\n        CanPush: boolean = true // Can this object be pusher'ed\n        PusherDist: number = 60.0 // Distance the object is pushed\n        PusherDamage: number = 2.0 // Damage that the pusher gun causes\n        WakeRadius: number = 25.0\n        ScaredByBigBangs: boolean = true\n        RemoveReinforcement: boolean = true\n        ShowHealthBar: boolean = true\n    }\n\n    Hoverboard = new class HoverboardStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No drill or carry)\n        Levels: number = 8\n        RouteSpeed: number[] = [3.0, 3.0, 5.0, 5.0, 3.0, 3.0, 5.0, 5.0]\n        SurveyRadius: number[] = [0, 0, 0, 0, 4, 4, 4, 4]\n        TrackDist: number = 50.0\n        CollRadius: number = 8.0\n        CollHeight: number = 12.0\n        PickSphere: number = 16.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        UseSmallTeleporter: boolean = true\n        CanStrafe: boolean = true\n        CostCrystal: number = 1\n        UpgradeCostOre: number[] = [0, 5, 10, 0]\n        UpgradeCostStuds: number[] = [0, 1, 2, 0]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_SmallEngine'\n    }\n\n    SmallHeli = new class SmallHeliStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 2.50\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 12.0\n        PickSphere: number = 20.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        CrossWater: boolean = true\n        CrossLava: boolean = true\n        UseSmallTeleporter: boolean = true\n        CanStrafe: boolean = true\n        CostCrystal: number = 3\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_HeliEngine'\n    }\n\n    Smallmlp = new class SmallmlpStats extends BaseConfig {\n        Levels: number = 4\n        RouteSpeed: number[] = [0.50, 0.50, 0.50, 0.50]\n        TrackDist: number = 50.0\n        CollRadius: number = 12.0\n        CollHeight: number = 22.0\n        PickSphere: number = 26.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        UseSmallTeleporter: boolean = true\n        Tracker: boolean = true\n        CanDoubleSelect: boolean = true\n        CostCrystal: number = 3\n        UpgradeCostOre: number[] = [0, 0, 0, 10]\n        UpgradeCostStuds: number[] = [0, 0, 0, 2]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_MediumEngine'\n    }\n\n    SmallCat = new class SmallCatStats extends BaseConfig {\n        Levels: number = 3\n        RouteSpeed: number[] = [2.0, 3.0, 4.0]\n        TrackDist: number = 50.0\n        CollRadius: number = 12.0\n        CollHeight: number = 12.0\n        PickSphere: number = 26.0\n        CrossWater: boolean = true\n        CanBeDriven: boolean = true\n        UseWaterTeleporter: boolean = true\n        CostCrystal: number = 2\n        MaxCarry: number[] = [1, 1, 1]\n        GetInAtLand: boolean = true\n        GetOutAtLand: boolean = true\n        TakeCarryingDrivers: boolean = true\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_Catamaran'\n    }\n\n    SmallDigger = new class SmallDiggerStats extends BaseConfig {\n        Levels: number = 8\n        RouteSpeed: number[] = [2.0, 2.0, 4.0, 4.0, 2.0, 2.0, 4.0, 4.0]\n        SoilDrillTime: number[] = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n        LooseDrillTime: number[] = [2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0]\n        MedDrillTime: number[] = [4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0]\n        HardDrillTime: number[] = [180.0, 150.0, 180.0, 150.0, 180.0, 150.0, 180.0, 150.0]\n        SeamDrillTime: number[] = [8.0, 4.0, 8.0, 4.0, 8.0, 4.0, 8.0, 4.0]\n        MaxCarry: number[] = [0, 0, 0, 0, 0, 0, 0, 0]\n        SurveyRadius: number[] = [0, 0, 0, 0, 4, 4, 4, 4]\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 12.0\n        PickSphere: number = 20.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        RouteAvoidance: boolean = true\n        UseSmallTeleporter: boolean = true\n        VehicleCanBeCarried: boolean = true\n        CostCrystal: number = 1\n        UpgradeCostOre: number[] = [0, 5, 10, 10]\n        UpgradeCostStuds: number[] = [0, 1, 2, 2]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_SmallEngine'\n    }\n\n    SmallTruck = new class SmallTruckStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No drill)\n        Levels: number = 16\n        RouteSpeed: number[] = [2.0, 2.0, 3.0, 3.0, 2.0, 2.0, 3.0, 3.0, 2.0, 2.0, 3.0, 3.0, 2.0, 2.0, 3.0, 3.0]\n        MaxCarry: number[] = [3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6]\n        CarryStart: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3]\n        SurveyRadius: number[] = [0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4]\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 12.0\n        PickSphere: number = 20.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        UseSmallTeleporter: boolean = true\n        VehicleCanBeCarried: boolean = true\n        CostCrystal: number = 2\n        EnterToolStore: boolean = true\n        UpgradeCostOre: number[] = [5, 5, 10, 0]\n        UpgradeCostStuds: number[] = [1, 1, 2, 0]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_SmallEngine'\n    }\n\n    Bulldozer = new class BulldozerStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No drill)\n        Levels: number = 16\n        RouteSpeed: number[] = [0.5, 0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8]\n        MaxCarry: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2]\n        SurveyRadius: number[] = [0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5, 5, 5]\n        TrackDist: number = 80.0\n        CollRadius: number = 18.0\n        CollHeight: number = 26.0\n        PickSphere: number = 40.0\n        CrossLand: boolean = true\n        CanClearRubble: boolean = true\n        UseBigTeleporter: boolean = true\n        CanBeDriven: boolean = true\n        CostCrystal: number = 4\n        InvisibleDriver: boolean = true\n        UpgradeCostOre: number[] = [5, 5, 20, 0]\n        UpgradeCostStuds: number[] = [1, 1, 4, 0]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_MediumEngine'\n    }\n\n    WalkerDigger = new class WalkerDiggerStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No carry)\n        Levels: number = 8\n        RouteSpeed: number[] = [0.50, 0.50, 0.80, 0.80, 0.50, 0.50, 0.80, 0.80]\n        SoilDrillTime: number[] = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n        LooseDrillTime: number[] = [0.80, 0.40, 0.80, 0.40, 0.80, 0.40, 0.80, 0.40]\n        MedDrillTime: number[] = [2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0]\n        HardDrillTime: number[] = [180.0, 150.0, 180.0, 150.0, 180.0, 150.0, 180.0, 150.0]\n        SeamDrillTime: number[] = [4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0]\n        SurveyRadius: number[] = [0, 0, 0, 0, 5, 5, 5, 5]\n        TrackDist: number = 80.0\n        CollRadius: number = 15.0\n        CollHeight: number = 33.0\n        PickSphere: number = 35.0\n        CrossLand: boolean = true\n        UseBigTeleporter: boolean = true\n        CostCrystal: number = 3\n        CanBeDriven: boolean = true\n        InvisibleDriver: boolean = true\n        CanStrafe: boolean = true\n        DrillSound: string = 'DrillSFX_Grinder'\n        DrillFadeSound: string = 'DrillSFX_GrinderFade'\n        UpgradeCostOre: number[] = [0, 5, 20, 20]\n        UpgradeCostStuds: number[] = [0, 1, 4, 4]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_MediumEngine'\n    }\n\n    LargeDigger = new class LargeDiggerStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No carry or scan)\n        Levels: number = 4\n        RouteSpeed: number[] = [0.30, 0.30, 0.60, 0.60]\n        SoilDrillTime: number[] = [1.0, 1.0, 1.0, 1.0]\n        LooseDrillTime: number[] = [0.40, 0.20, 0.40, 0.20]\n        MedDrillTime: number[] = [0.80, 0.40, 0.80, 0.40]\n        HardDrillTime: number[] = [1.0, 0.50, 1.0, 0.50]\n        SeamDrillTime: number[] = [1.0, 0.50, 1.0, 0.50]\n        TrackDist: number = 80.0\n        CollRadius: number = 22.0\n        CollHeight: number = 30.0\n        PickSphere: number = 50.0\n        CrossLand: boolean = true\n        UseBigTeleporter: boolean = true\n        Tracker: boolean = true\n        CanDoubleSelect: boolean = true\n        CanBeDriven: boolean = true\n        CostCrystal: number = 5\n        InvisibleDriver: boolean = true\n        DrillSound: string = 'DrillSFX_Grinder'\n        DrillFadeSound: string = 'DrillSFX_GrinderFade'\n        UpgradeCostOre: number[] = [0, 0, 15, 20]\n        UpgradeCostStuds: number[] = [0, 0, 3, 4]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_LargeEngine'\n    }\n\n    LargeCat = new class LargeCatStats extends BaseConfig { // [Carry][Scan][Speed][Drill] (No carry) (Drill???)\n        Levels: number = 1\n        RouteSpeed: number = 1.50\n        SurveyRadius: number = 0\n        TrackDist: number = 80.0\n        CollRadius: number = 22.0\n        CollHeight: number = 25.0\n        PickSphere: number = 50.0\n        CanBeDriven: boolean = true\n        CrossWater: boolean = true\n        UseWaterTeleporter: boolean = true\n        ClassAsLarge: boolean = true\n        CarryVehicles: boolean = true\n        CostCrystal: number = 4\n        EngineSound: string = 'SND_Catamaran'\n        ShowHealthBar: boolean = true\n    }\n\n    LargeHeli = new class LargeHeliStats extends BaseConfig {\n        Levels: number = 3\n        RouteSpeed: number[] = [0.30, 0.40, 0.50]\n        TrackDist: number = 80.0\n        CollRadius: number = 0.0\n        CollHeight: number = 0.0\n        PickSphere: number = 20.0\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_HeliEngine'\n    }\n\n    LargeMLP = new class LargeMLPStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No carry or speed) (Doesn't have drills, just lasers)\n        Levels: number = 8\n        RouteSpeed: number[] = [0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40]\n        SurveyRadius: number[] = [0, 0, 0, 0, 5, 5, 5, 5]\n        TrackDist: number = 80.0\n        CollRadius: number = 20.0\n        CollHeight: number = 24.0\n        PickSphere: number = 47.0\n        CrossLand: boolean = true\n        UseBigTeleporter: boolean = true\n        Tracker: boolean = true\n        CanDoubleSelect: boolean = true\n        CostCrystal: number = 4\n        CanBeDriven: boolean = true\n        InvisibleDriver: boolean = true\n        UpgradeCostOre: number[] = [0, 5, 0, 25]\n        UpgradeCostStuds: number[] = [0, 1, 0, 5]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_LargeEngine'\n    }\n\n    Barracks = new class BarracksStats extends BuildingEntityStats {\n        Levels: number = 3\n        TrackDist: number = 50.0\n        CollHeight: number = 23.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 15\n        CostRefinedOre: number = 3\n        CostCrystal: number = 3\n        SnaxULike: boolean = true\n        TrainDriver: boolean[] = [true, true, true]\n        CrystalDrain: number[] = [1, 1, 1]\n        DamageCausesCallToArms: boolean = true\n        OxygenCoef: number = 10.0\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Powerstation = new class PowerstationStats extends BuildingEntityStats {\n        Levels: number = 2\n        TrackDist: number = 80.0\n        ProcessCrystal: boolean = true\n        CollHeight: number = 31.0\n        CollRadius: number = 15.0\n        PickSphere: number = 32.0\n        CostOre: number = 12\n        CostRefinedOre: number = 3\n        CostCrystal: number = 2\n        PowerBuilding: boolean = true\n        DamageCausesCallToArms: boolean = true\n        EngineSound: string = 'SND_PowerBuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    OreRefinery = new class OreRefineryStats extends BuildingEntityStats {\n        Levels: number = 4\n        TrackDist: number = 60.0\n        ProcessOre: boolean = true\n        CollHeight: number = 16.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 20\n        CostRefinedOre: number = 4\n        CostCrystal: number = 3\n        CrystalDrain: number[] = [1, 1, 1, 1]\n        DamageCausesCallToArms: boolean = true\n        MaxCarry: number[] = [5, 4, 3, 2]\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    TeleportPad = new class TeleportPadStats extends BuildingEntityStats {\n        Levels: number = 3\n        TrackDist: number = 60.0\n        SmallTeleporter: boolean = true\n        ManTeleporter: boolean = true\n        CollHeight: number = 20.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 8\n        CostRefinedOre: number = 2\n        CrystalDrain: number[] = [1, 1, 1]\n        DamageCausesCallToArms: boolean = true\n        TrainPilot: boolean[] = [true, true, true]\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    TeleportBIG = new class TeleportBIGStats extends BuildingEntityStats {\n        Levels: number = 2\n        TrackDist: number = 50.0\n        BigTeleporter: boolean = true\n        CollHeight: number = 17.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 20\n        CostRefinedOre: number = 4\n        CostCrystal: number = 2\n        CrystalDrain: number[] = [1, 1]\n        DamageCausesCallToArms: boolean = true\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Docks = new class DocksStats extends BuildingEntityStats {\n        Levels: number = 1\n        TrackDist: number = 60.0\n        CollHeight: number = 20.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 8\n        CostRefinedOre: number = 2\n        CostCrystal: number = 1\n        WaterEntrances: number = 1\n        WaterTeleporter: boolean = true\n        CrystalDrain: number = 1\n        DamageCausesCallToArms: boolean = true\n        TrainSailor: boolean = true\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Toolstation = new class ToolstationStats extends BuildingEntityStats {\n        Levels: number = 3\n        TrackDist: number = 50.0\n        ManTeleporter: boolean = true\n        CollHeight: number = 16.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        ToolStore: boolean = true\n        StoreObjects: boolean = true\n        SelfPowered: boolean = true\n        DamageCausesCallToArms: boolean = true\n        TrainDynamite: boolean[] = [false, false, true]\n        FunctionCoef: number[] = [1.0, 1.0, 1.0] // Function here is how long it takes to upgrade a minfigure\n        ShowHealthBar: boolean = true\n    }\n\n    GunStation = new class GunStationStats extends BuildingEntityStats {\n        Levels: number = 2\n        TrackDist: number = 60.0\n        CollHeight: number = 33.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 15\n        CostRefinedOre: number = 3\n        CostCrystal: number = 1\n        Tracker: boolean = true\n        CanDoubleSelect: boolean = true\n        CrystalDrain: number[] = [1, 1]\n        DamageCausesCallToArms: boolean = true\n        FunctionCoef: number[] = [1.0, 0.5] // How much of a crystal it drains every time it fires...\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Geodome = new class GeodomeStats extends BuildingEntityStats {\n        Levels: number = 3\n        TrackDist: number = 50.0\n        CollHeight: number = 20.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 15\n        CostRefinedOre: number = 3\n        CostCrystal: number = 3\n        SurveyRadius: number[] = [6, 8, 12]\n        CrystalDrain: number[] = [1, 1, 1]\n        DamageCausesCallToArms: boolean = true\n        TrainScanner: boolean[] = [true, true, true]\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Upgrade = new class UpgradeStats extends BuildingEntityStats {\n        Levels: number = 2\n        TrackDist: number = 80.0\n        CollHeight: number = 40.0\n        CollRadius: number = 15.0\n        PickSphere: number = 32.0\n        CostOre: number = 20\n        CostRefinedOre: number = 4\n        CostCrystal: number = 3\n        UpgradeBuilding: boolean = true\n        CrystalDrain: number[] = [1, 1]\n        DamageCausesCallToArms: boolean = true\n        FunctionCoef: number[] = [0.8, 1.6] // Function is speed of upgrade animation.\n        TrainRepair: boolean[] = [true, true]\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    PowerCrystal = new class PowerCrystalStats extends BaseConfig {\n        Levels: number = 1\n        TrackDist: number = 20.0\n        CollHeight: number = 2.0\n        PickSphere: number = 6.0\n    }\n\n    ProcessedOre = new class ProcessedOreStats extends BaseConfig {\n        Levels: number = 1\n        TrackDist: number = 20.0\n        CollHeight: number = 2.0\n        PickSphere: number = 8.0\n    }\n\n    Ore = new class OreStats extends BaseConfig {\n        Levels: number = 1\n        TrackDist: number = 20.0\n        CollHeight: number = 2.0\n        PickSphere: number = 6.0\n    }\n\n    Boulder = new class BoulderStats extends BaseConfig {\n        Levels: number = 1\n        CollRadius: number = 2.0\n    }\n\n    Pusher = new class PusherStats extends BaseConfig {\n        Levels: number = 1\n        CollRadius: number = 1.0\n    }\n\n    Freezer = new class FreezerStats extends BaseConfig {\n        Levels: number = 1\n        CollRadius: number = 1.0\n    }\n\n    LaserShot = new class LaserShotStats extends BaseConfig {\n        Levels: number = 1\n        ColRadius: number = 1.0\n    }\n\n    ElectricFence = new class ElectricFenceStats extends BaseConfig {\n        Levels: number = 1\n        TrackDist: number = 50.0\n        CollRadius: number = 5.0\n        CollHeight: number = 18.0\n        PickSphere: number = 20.0\n        DamageCausesCallToArms: boolean = true\n    }\n\n    Path = new class PathStats extends BaseConfig {\n        Levels: number = 1\n        CostOre: number = 2\n        CostRefinedOre: number = 1\n    }\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            BaseConfig.setFromCfg(this[objKey], cfgValue)\n            return true\n        }\n    }\n\n}\n\n","import ResourceWorker from 'worker-loader!./wadworker/Resources'\nimport { RepeatWrapping, Texture } from 'three'\nimport { AnimationEntityType } from '../scene/model/anim/AnimationEntityType'\nimport { InitLoadingMessage } from './wadworker/InitLoadingMessage'\nimport { createContext, createDummyImgData } from '../core/ImageHelper'\nimport { iGet } from './wadworker/WadUtil'\nimport { getFilename } from '../core/Util'\nimport { AnimEntityLoader } from './AnimEntityLoader'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { WorkerMessage, WorkerMessageType } from './wadworker/WorkerMessage'\nimport { GameStatsCfg } from '../cfg/GameStatsCfg'\n\nexport class ResourceManager {\n\n    static worker: ResourceWorker = new ResourceWorker()\n    static configuration: any = {}\n    static resourceByName: {} = {}\n    static fontCache = {}\n    static stats: GameStatsCfg\n\n    static startLoadingFromCache() {\n        return this.startLoading(null)\n    }\n\n    static startLoadingFromUrl(wad0Url: string, wad1Url: string) {\n        return this.startLoading(new InitLoadingMessage(wad0Url, wad1Url))\n    }\n\n    private static startLoading(msg: InitLoadingMessage) {\n        this.worker.onmessage = (event) => {\n            const msg: WorkerMessage = event.data\n            if (msg.type === WorkerMessageType.ASSET) {\n                this.resourceByName[msg.assetName.toLowerCase()] = msg.assetObj\n                this.onAssetLoaded(msg.assetIndex)\n            } else if (msg.type === WorkerMessageType.MSG) {\n                this.onMessage(msg.text)\n            } else if (msg.type === WorkerMessageType.CFG) {\n                this.configuration = msg.cfg\n                this.stats = new GameStatsCfg(this.cfg('Stats'))\n                this.onInitialLoad(msg.totalResources)\n            } else if (msg.type === WorkerMessageType.CACHE_MISS) {\n                this.onCacheMissed()\n            } else if (msg.type === WorkerMessageType.DONE) {\n                console.log('Loading of about ' + msg.totalResources + ' assets complete! Total load time: ' + msg.loadingTimeSeconds + ' seconds.')\n                this.onLoadDone()\n            }\n        }\n        this.worker.postMessage(msg)\n    }\n\n    static onMessage: (msg: string) => any = (msg: string) => {\n        console.log(msg)\n    }\n\n    static onCacheMissed: () => any = () => {\n        console.log('Worker missed cache')\n    }\n\n    static onInitialLoad: (totalResources: number) => any = () => {\n        console.log('Initial loading done.')\n    }\n\n    static onAssetLoaded: (assetIndex: number) => any = () => {\n    }\n\n    static onLoadDone: () => any = () => {\n    }\n\n    static cfg(...keys: string[]): any {\n        return iGet(ResourceManager.configuration, ...keys)\n    }\n\n    static filterTextureSequenceNames(basename: string): string[] {\n        const lBasename = basename.toLowerCase()\n        const result = Object.keys(this.resourceByName).filter((name) => name.startsWith(lBasename))\n        if (result.length > 0) {\n            return result\n        } else if (!lBasename.startsWith('world/shared/')) {\n            return ResourceManager.filterTextureSequenceNames('world/shared/' + getFilename(basename))\n        } else {\n            console.warn('Texture sequence not found: ' + basename)\n            return null\n        }\n    }\n\n    static getResource(resourceName: string): any {\n        const lName = resourceName ? resourceName.toString().toLowerCase() : null\n        if (lName && this.resourceByName.hasOwnProperty(lName)) {\n            return this.resourceByName[lName]\n        }\n        return null\n    }\n\n    static getImageData(imageName): ImageData {\n        if (!imageName || imageName.length === 0) {\n            throw 'imageName must not be undefined, null or empty - was ' + imageName\n        }\n        const lImageName = imageName.toLowerCase()\n        let imgData = this.getResource(lImageName)\n        if (!imgData) {\n            console.error('Image \\'' + imageName + '\\' unknown! Using placeholder image instead')\n            ResourceManager.resourceByName[lImageName] = createDummyImgData(64, 64)\n        }\n        return ResourceManager.resourceByName[lImageName]\n    }\n\n    static getImage(imageName: string): HTMLCanvasElement {\n        const imgData = this.getImageData(imageName)\n        const context: CanvasRenderingContext2D = createContext(imgData.width, imgData.height)\n        context.putImageData(imgData, 0, 0)\n        return context.canvas\n    }\n\n    static getImageOrNull(imageName: string): HTMLCanvasElement | null {\n        if (!imageName) return null\n        return this.getImage(imageName)\n    }\n\n    static getTexture(textureName): Texture {\n        if (!textureName || textureName.length === 0) {\n            throw 'textureName must not be undefined, null or empty - was ' + textureName\n        }\n        const lTextureName = textureName.toLowerCase()\n        const lSharedTextureName = 'world/shared/' + getFilename(lTextureName)\n        let imgData = this.getResource(lTextureName) || this.getResource(lSharedTextureName)\n        if (!imgData) {\n            if (lTextureName !== 'buildings/geo-dome/a_walkie.bmp' && // ignore known issues\n                lTextureName !== 'world/shared/teofoilreflections.jpg' &&\n                lTextureName !== 'buildings/barracks/wingbase3.bmp') {\n                console.warn('Texture \\'' + textureName + '\\' (' + lTextureName + ', ' + lSharedTextureName + ') unknown! Using placeholder texture instead')\n            }\n            ResourceManager.resourceByName[lTextureName] = imgData = createDummyImgData(64, 64)\n        }\n        const texture = new Texture(imgData, Texture.DEFAULT_MAPPING, RepeatWrapping, RepeatWrapping)\n        texture.needsUpdate = true\n        return texture\n    }\n\n    static getMap(name: string) {\n        return name ? this.getResource(name) : null\n    }\n\n    static getAnimationEntityType(aeFilename: string): AnimationEntityType {\n        let cfgRoot = this.getResource(aeFilename)\n        if (!cfgRoot) throw 'Could not get animation entity type for: ' + aeFilename\n        return AnimEntityLoader.loadModels(aeFilename, cfgRoot)\n    }\n\n    static getBitmapFont(name: string): BitmapFont {\n        const fontImageData = this.getResource(name)\n        if (!fontImageData) throw 'Could not load font image data for: ' + name\n        ResourceManager.fontCache[name] = ResourceManager.fontCache[name] || new BitmapFont(fontImageData)\n        return ResourceManager.fontCache[name]\n    }\n\n    static getDefaultFont() {\n        return ResourceManager.getBitmapFont('Interface/Fonts/Font5_Hi.bmp')\n    }\n}\n","import { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../main'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { KEY_EVENT, POINTER_EVENT } from '../event/EventManager'\n\nexport class ScreenLayer {\n\n    canvas: HTMLCanvasElement\n    context: CanvasRenderingContext2D\n    onRedraw: (context: CanvasRenderingContext2D) => any\n\n    constructor(alpha: boolean = false, withContext: boolean = true) {\n        this.canvas = document.createElement('canvas')\n        if (!alpha) this.canvas.style.background = '#f0f'\n        if (withContext) this.context = this.canvas.getContext('2d', {alpha: alpha})\n        this.hide()\n    }\n\n    reset() {\n    }\n\n    setZIndex(zIndex: number) {\n        this.canvas.style.zIndex = String(zIndex)\n    }\n\n    static compareZ(layerA: ScreenLayer, layerB: ScreenLayer) {\n        let aIndex = layerA?.canvas?.style?.zIndex || 0\n        const bIndex = layerB?.canvas?.style?.zIndex || 0\n        return aIndex === bIndex ? 0 : aIndex > bIndex ? -1 : 1\n    }\n\n    resize(width, height) {\n        this.canvas.width = width\n        this.canvas.height = height\n    }\n\n    redraw() {\n        const callback = this.onRedraw\n        if (this.isActive() && callback) {\n            const context = this.context\n            requestAnimationFrame(() => callback(context))\n        }\n    }\n\n    show() {\n        this.canvas.style.visibility = 'visible'\n        this.redraw()\n    }\n\n    hide() {\n        this.canvas.style.visibility = 'hidden'\n    }\n\n    isActive() {\n        return this.canvas.style.visibility === 'visible'\n    }\n\n    toCanvasCoords(windowX: number, windowY: number) {\n        const clientRect = this.canvas.getBoundingClientRect()\n        return [windowX - clientRect.left, windowY - clientRect.top]\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        return false\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        return false\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        return false\n    }\n\n}\n\nexport class ScaledLayer extends ScreenLayer {\n\n    fixedWidth: number\n    fixedHeight: number\n\n    constructor() {\n        super(true)\n        this.fixedWidth = SPRITE_RESOLUTION_WIDTH\n        this.fixedHeight = SPRITE_RESOLUTION_HEIGHT\n    }\n\n    toScaledCoords(windowX: number, windowY: number) {\n        const [cx, cy] = this.toCanvasCoords(windowX, windowY)\n        return [cx / this.scaleX(), cy / this.scaleY()]\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        this.context.scale(this.scaleX(), this.scaleY())\n    }\n\n    scaleX() {\n        return this.canvas.width / this.fixedWidth\n    }\n\n    scaleY() {\n        return this.canvas.height / this.fixedHeight\n    }\n\n}\n\nexport class CursorLayer extends ScaledLayer {\n\n    curUrl\n    cursorName: string = 'Aclosed'\n\n    show() {\n        super.show()\n        this.createCursor()\n    }\n\n    hide() {\n        super.hide()\n        this.canvas.style.cursor = null\n    }\n\n    createCursor() {\n        if (this.curUrl) URL.revokeObjectURL(this.curUrl)\n        const curImg = ResourceManager.getImage('Interface/Pointers/' + this.cursorName + '.bmp')\n        this.curUrl = curImg.toDataURL()\n        // Chrome limits cursor size to 32x32 anyway...\n        // const context: CanvasRenderingContext2D = createContext(curImg.width * this.scaleX(), curImg.height * this.scaleY());\n        // context.scale(this.scaleX(), this.scaleY());\n        // context.drawImage(curImg, 0, 0);\n        // this.curUrl = context.canvas.toDataURL();\n        this.canvas.style.cursor = 'url(' + this.curUrl + '), auto'\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        if (this.isActive()) this.createCursor()\n    }\n\n}\n","import { Group, Mesh, MeshPhongMaterial, Vector2, Vector3 } from 'three'\nimport { Terrain } from './Terrain'\nimport { SurfaceType } from './SurfaceType'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Selectable, SelectionType } from '../../../game/model/Selectable'\nimport { EventBus } from '../../../event/EventBus'\nimport { SelectionEvent, SurfaceSelectedEvent } from '../../../event/LocalEvents'\nimport { CavernDiscovered, JobCreateEvent, JobDeleteEvent, OreFoundEvent } from '../../../event/WorldEvents'\nimport { clearTimeoutSafe, getRandom, getRandomSign } from '../../../core/Util'\nimport { Crystal } from '../collect/Crystal'\nimport { Ore } from '../collect/Ore'\nimport { HEIGHT_MULTIPLER, TILESIZE } from '../../../main'\nimport { GameState } from '../../../game/model/GameState'\nimport { SurfaceJob, SurfaceJobType } from '../../../game/model/job/SurfaceJob'\nimport { LWSCLoader } from '../../../resource/LWSCLoader'\nimport { AnimSubObj } from '../anim/AnimSubObj'\nimport { SurfaceGeometry } from './SurfaceGeometry'\nimport { CrystalFoundEvent, LandslideEvent } from '../../../event/WorldLocationEvent'\nimport { JobType } from '../../../game/model/job/JobType'\n\nexport class Surface implements Selectable {\n\n    terrain: Terrain\n    surfaceType: SurfaceType\n    x: number\n    y: number\n    containedOres: number = 0\n    containedCrystals: number = 0\n    heightOffset: number = null\n    discovered: boolean = false\n    selected: boolean = false\n    reinforced: boolean = false\n    jobs: SurfaceJob[] = []\n    surfaceRotation: number = 0\n    seamLevel: number = 0\n    fallinTimeout = null\n\n    fallinGrp: Group = null\n    animationTimeout = null\n\n    wallType: WALL_TYPE = null\n    mesh: Mesh = null\n    needsMeshUpdate: boolean = false\n\n    topLeftHeightOffset: number = 0\n    topRightHeightOffset: number = 0\n    bottomLeftHeightOffset: number = 0\n    bottomRightHeightOffset: number = 0\n\n    rubblePositions: Vector2[] = []\n\n    constructor(terrain: Terrain, surfaceType: SurfaceType, x: number, y: number, heightOffset: number) {\n        this.terrain = terrain\n        this.surfaceType = surfaceType\n        if (surfaceType === SurfaceType.CRYSTAL_SEAM || surfaceType === SurfaceType.ORE_SEAM) this.seamLevel = 4\n        this.x = x\n        this.y = y\n        this.heightOffset = heightOffset\n        EventBus.registerEventListener(JobCreateEvent.eventKey, (event: JobCreateEvent) => {\n            const jobType = event.job.type\n            if (jobType === JobType.SURFACE) {\n                const surfaceJob = event.job as SurfaceJob\n                if (surfaceJob.surface === this) this.jobs.push(surfaceJob)\n            }\n        })\n    }\n\n    hasJobType(type: SurfaceJobType) {\n        return this.jobs.some((job) => job.workType === type)\n    }\n\n    /**\n     * @return {boolean} Returns true, if a new cave has been discovered\n     */\n    discoverNeighbors(): boolean {\n        if (!this.discovered) GameState.discoverSurface(this)\n        this.discovered = true\n        this.needsMeshUpdate = true\n        let foundCave = false\n        if (this.surfaceType.floor) {\n            for (let x = this.x - 1; x <= this.x + 1; x++) {\n                for (let y = this.y - 1; y <= this.y + 1; y++) {\n                    if (x !== this.x || y !== this.y) {\n                        const surf = this.terrain.getSurfaceOrNull(x, y)\n                        if (surf && !surf.discovered) {\n                            foundCave = surf.discoverNeighbors() || surf.surfaceType.floor\n                            surf.needsMeshUpdate = true\n                        }\n                    }\n                }\n            }\n        }\n        return foundCave\n    }\n\n    collapse() {\n        this.cancelJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += 4\n        this.needsMeshUpdate = true\n        // discover surface and all neighbors\n        const foundCave = this.discoverNeighbors()\n        if (foundCave) EventBus.publishEvent(new CavernDiscovered())\n        // drop contained ores and crystals\n        this.dropContainedOre(this.containedOres - 4)\n        for (let c = 0; c < this.containedCrystals; c++) {\n            const crystal = this.terrain.worldMgr.addCollectable(new Crystal(), this.getRandomPosition())\n            EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n        }\n        // check for unsupported neighbors\n        for (let x = this.x - 1; x <= this.x + 1; x++) {\n            for (let y = this.y - 1; y <= this.y + 1; y++) {\n                if (x !== this.x || y !== this.y) {\n                    const surf = this.terrain.getSurface(x, y)\n                    surf.needsMeshUpdate = true\n                    if (!surf.isSupported()) surf.collapse()\n                }\n            }\n        }\n        // update meshes\n        this.terrain.updateSurfaceMeshes()\n        this.terrain.floorGroup.updateWorldMatrix(true, true)\n    }\n\n    private dropContainedOre(dropAmount: number) {\n        for (let c = 0; c < dropAmount && this.containedOres > 0; c++) {\n            this.containedOres--\n            this.terrain.worldMgr.addCollectable(new Ore(), this.getRandomPosition())\n            EventBus.publishEvent(new OreFoundEvent())\n        }\n    }\n\n    getRandomPosition(): Vector2 {\n        return new Vector2(this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4),\n            this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4))\n    }\n\n    cancelJobs() {\n        const jobs = this.jobs // ensure consistency while processing\n        this.jobs = []\n        jobs.forEach((job) => EventBus.publishEvent(new JobDeleteEvent(job)))\n        this.updateJobColor()\n    }\n\n    reduceRubble() {\n        this.rubblePositions.shift()\n        if (this.surfaceType === SurfaceType.RUBBLE4) this.surfaceType = SurfaceType.RUBBLE3\n        else if (this.surfaceType === SurfaceType.RUBBLE3) this.surfaceType = SurfaceType.RUBBLE2\n        else if (this.surfaceType === SurfaceType.RUBBLE2) this.surfaceType = SurfaceType.RUBBLE1\n        else if (this.surfaceType === SurfaceType.RUBBLE1) this.surfaceType = SurfaceType.GROUND\n        this.dropContainedOre(1)\n        this.updateTexture()\n    }\n\n    isSupported(): boolean {\n        if (this.surfaceType.floor) return true\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        return isHighGround(surfLeft, surfTopLeft, surfTop)\n            || isHighGround(surfTop, surfTopRight, surfRight)\n            || isHighGround(surfRight, surfBottomRight, surfBottom)\n            || isHighGround(surfBottom, surfBottomLeft, surfLeft)\n    }\n\n    updateMesh(force: boolean = true) {\n        if (!force && !this.needsMeshUpdate) return\n        this.needsMeshUpdate = false\n\n        const topLeftVertex = new Vector3(this.x, 0, this.y)\n        const topRightVertex = new Vector3(this.x + 1, 0, this.y)\n        const bottomLeftVertex = new Vector3(this.x, 0, this.y + 1)\n        const bottomRightVertex = new Vector3(this.x + 1, 0, this.y + 1)\n\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        if (!this.discovered) {\n            topLeftVertex.y = 1\n            topRightVertex.y = 1\n            bottomRightVertex.y = 1\n            bottomLeftVertex.y = 1\n        } else if (!this.surfaceType.floor) {\n            if (isHighGround(surfLeft, surfTopLeft, surfTop)) topLeftVertex.y = 1\n            if (isHighGround(surfTop, surfTopRight, surfRight)) topRightVertex.y = 1\n            if (isHighGround(surfRight, surfBottomRight, surfBottom)) bottomRightVertex.y = 1\n            if (isHighGround(surfBottom, surfBottomLeft, surfLeft)) bottomLeftVertex.y = 1\n        }\n\n        // update mesh (geometry), if wall type changed\n        let wallType = topLeftVertex.y + topRightVertex.y + bottomRightVertex.y + bottomLeftVertex.y\n        if (wallType === WALL_TYPE.WALL && topLeftVertex.y === bottomRightVertex.y) wallType = WALL_TYPE.WEIRD_CREVICE\n\n        if (this.wallType !== wallType) {\n            this.wallType = wallType\n            this.updateGeometry(topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex, surfTopLeft, surfTop, surfLeft, surfTopRight, surfRight, surfBottomRight, surfBottom, surfBottomLeft)\n            if (this.wallType !== WALL_TYPE.WALL) this.cancelReinforceJobs()\n        }\n\n        this.updateTexture()\n        this.updateJobColor()\n    }\n\n    cancelReinforceJobs() {\n        const otherJobs = []\n        this.jobs.forEach((job) => {\n            if (job.workType === SurfaceJobType.REINFORCE) {\n                EventBus.publishEvent(new JobDeleteEvent(job))\n            } else {\n                otherJobs.push(job)\n            }\n        })\n        this.jobs = otherJobs\n        this.updateJobColor()\n    }\n\n    updateTexture() {\n        let textureName = this.terrain.textureSet.texturebasename\n        if (!this.discovered) {\n            textureName += '70'\n        } else if (this.surfaceType === SurfaceType.POWER_PATH) {\n            textureName += this.updatePowerPathTexture()\n        } else if (!this.surfaceType.shaping) {\n            textureName += this.surfaceType.matIndex.toString()\n        } else if (this.wallType === WALL_TYPE.WEIRD_CREVICE) {\n            textureName += '77'\n        } else {\n            if (this.wallType === WALL_TYPE.CORNER) {\n                textureName += '5'\n            } else if (this.wallType === WALL_TYPE.INVERTED_CORNER) {\n                textureName += '3'\n            } else if (this.reinforced) {\n                textureName += '2'\n            } else {\n                textureName += '0'\n            }\n            textureName += this.surfaceType.matIndex\n        }\n        textureName += '.bmp'\n\n        const texture = ResourceManager.getTexture(textureName)\n        texture.center.set(0.5, 0.5)\n        texture.rotation = this.surfaceRotation\n\n        this.accessMaterials().forEach((mat) => mat.map = texture)\n    }\n\n    updatePowerPathTexture(): string {\n        this.surfaceRotation = 0\n        const left = this.terrain.getSurface(this.x - 1, this.y).isPath()\n        const top = this.terrain.getSurface(this.x, this.y - 1).isPath()\n        const right = this.terrain.getSurface(this.x + 1, this.y).isPath()\n        const bottom = this.terrain.getSurface(this.x, this.y + 1).isPath()\n        const pathSum = (left ? 1 : 0) + (top ? 1 : 0) + (right ? 1 : 0) + (bottom ? 1 : 0)\n        if (pathSum === 0 || pathSum === 1) {\n            if (left) this.surfaceRotation = -Math.PI / 2\n            if (top) this.surfaceRotation = Math.PI\n            if (right) this.surfaceRotation = Math.PI / 2\n            return '65'\n        } else if (pathSum === 2) {\n            if (left === right) {\n                this.surfaceRotation = left ? Math.PI / 2 : 0\n                return '62'\n            } else {\n                if (left && bottom) this.surfaceRotation = -Math.PI / 2\n                if (left && top) this.surfaceRotation = Math.PI\n                if (top && right) this.surfaceRotation = Math.PI / 2\n                return '63'\n            }\n        } else if (pathSum === 3) {\n            if (!top) this.surfaceRotation = -Math.PI / 2\n            if (!right) this.surfaceRotation = Math.PI\n            if (!bottom) this.surfaceRotation = Math.PI / 2\n            return '64'\n        } else {\n            return '60'\n        }\n    }\n\n    accessMaterials(): MeshPhongMaterial[] {\n        if (!this.mesh || !this.mesh.material) return []\n        if (Array.isArray(this.mesh.material)) {\n            return this.mesh.material as MeshPhongMaterial[]\n        } else {\n            return [this.mesh.material as MeshPhongMaterial]\n        }\n    }\n\n    updateGeometry(topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3, surfTopLeft: Surface, surfTop: Surface, surfLeft: Surface, surfTopRight: Surface, surfRight: Surface, surfBottomRight: Surface, surfBottom: Surface, surfBottomLeft: Surface) {\n        if (this.mesh) this.terrain.floorGroup.remove(this.mesh)\n        this.mesh?.geometry?.dispose()\n\n        function avgHeight(...args: Surface[]) {\n            let sum = 0, cnt = 0\n            args.map(s => s.heightOffset).filter(Boolean).forEach(h => {\n                sum += h\n                cnt++\n            })\n            return sum / cnt\n        }\n\n        this.topLeftHeightOffset = avgHeight(surfTopLeft, surfTop, this, surfLeft) * HEIGHT_MULTIPLER\n        this.topRightHeightOffset = avgHeight(surfTop, surfTopRight, surfRight, this) * HEIGHT_MULTIPLER\n        this.bottomRightHeightOffset = avgHeight(this, surfRight, surfBottomRight, surfBottom) * HEIGHT_MULTIPLER\n        this.bottomLeftHeightOffset = avgHeight(surfLeft, this, surfBottom, surfBottomLeft) * HEIGHT_MULTIPLER\n        const geometry = SurfaceGeometry.create(this.wallType, topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex,\n            topLeftVertex.y + this.topLeftHeightOffset,\n            topRightVertex.y + this.topRightHeightOffset,\n            bottomRightVertex.y + this.bottomRightHeightOffset,\n            bottomLeftVertex.y + this.bottomLeftHeightOffset,\n        )\n\n        this.mesh = new Mesh(geometry, new MeshPhongMaterial({shininess: 0}))\n        this.mesh.userData = {selectable: this}\n\n        this.terrain.floorGroup.add(this.mesh)\n        this.terrain.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.SURFACE\n    }\n\n    select(): SelectionEvent {\n        if (this.surfaceType.selectable && (this.wallType !== WALL_TYPE.INVERTED_CORNER && this.wallType !== WALL_TYPE.WEIRD_CREVICE) && !this.selected) {\n            this.selected = true\n            this.accessMaterials().forEach((mat) => mat.color.setHex(0x6060a0))\n            return new SurfaceSelectedEvent(this)\n        }\n        return null\n    }\n\n    deselect(): any {\n        if (this.selected) {\n            this.selected = false\n            this.updateJobColor()\n        }\n    }\n\n    getSelectionCenter(): Vector3 {\n        return null // not used\n    }\n\n    updateJobColor() {\n        const sortedJobs = this.jobs.sort((l, r) => -l.workType.colorPriority + r.workType.colorPriority)\n        const color = sortedJobs[0]?.workType.color || 0xffffff\n        this.accessMaterials().forEach((mat) => mat.color.setHex(color))\n    }\n\n    hasRubble(): boolean {\n        return this.rubblePositions.length > 0\n    }\n\n    isPath(): boolean {\n        return this.surfaceType === SurfaceType.POWER_PATH || this.surfaceType === SurfaceType.POWER_PATH_BUILDING\n    }\n\n    isWalkable(): boolean {\n        return this.surfaceType.floor && this.discovered && this.surfaceType !== SurfaceType.LAVA && this.surfaceType !== SurfaceType.WATER\n    }\n\n    isDrillable(): boolean {\n        return this.surfaceType.drillable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDrillableHard(): boolean {\n        return this.surfaceType.drillableHard && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isReinforcable(): boolean {\n        return this.surfaceType.reinforcable && this.discovered && this.wallType === WALL_TYPE.WALL && !this.reinforced\n    }\n\n    isExplodable(): boolean {\n        return this.surfaceType.explodable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDigable(): boolean {\n        return this.isDrillable() || this.isExplodable()\n    }\n\n    getDigPositions(): Vector2[] {\n        const digPosition = []\n        if (this.terrain.getSurface(this.x - 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE - 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y - 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE - 1))\n        if (this.terrain.getSurface(this.x + 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE + 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y + 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE + TILESIZE + 1))\n        return digPosition\n    }\n\n    reinforce() {\n        this.reinforced = true\n        this.cancelReinforceJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.updateTexture()\n    }\n\n    getCenterWorld2D(): Vector2 {\n        return new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE + TILESIZE / 2)\n    }\n\n    getCenterWorld(): Vector3 {\n        const center = this.getCenterWorld2D()\n        return new Vector3(center.x, this.terrain.worldMgr.getTerrainHeight(center.x, center.y), center.y)\n    }\n\n    setFallinLevel(fallinLevel: number) {\n        if (fallinLevel < 1) return\n        let originPos\n        let targetPos\n        if (this.surfaceType.floor) {\n            originPos = this.terrain.findFallInOrigin(this.x, this.y)\n            targetPos = [this.x, this.y]\n        } else {\n            originPos = [this.x, this.y]\n            targetPos = this.terrain.findFallInTarget(this.x, this.y)\n        }\n        if (originPos && targetPos) {\n            this.terrain.getSurface(originPos[0], originPos[1]).scheduleFallin(targetPos[0], targetPos[1])\n        }\n    }\n\n    scheduleFallin(targetX: number, targetY: number) {\n        this.fallinTimeout = setTimeout(() => {\n            this.createFallin(targetX, targetY)\n            this.scheduleFallin(targetX, targetY)\n        }, (30 + getRandom(60)) * 1000) // TODO adapt timer to level multiplier and fallin value\n    }\n\n    createFallin(targetX: number, targetY: number) {\n        const fallinPosition = this.terrain.getSurface(targetX, targetY).getCenterWorld()\n        EventBus.publishEvent(new LandslideEvent(fallinPosition))\n\n        // FIXME refactor animation handling\n        const content = ResourceManager.getResource('MiscAnims/RockFall/Rock3Sides.lws')\n        const animation = new LWSCLoader('MiscAnims/RockFall/').parse(content)\n        this.fallinGrp = new Group()\n        this.fallinGrp.position.copy(fallinPosition)\n        const dx = this.x - targetX, dy = targetY - this.y\n        this.fallinGrp.rotateOnAxis(new Vector3(0, 1, 0), Math.atan2(dy, dx) + Math.PI / 2)\n        this.terrain.worldMgr.sceneManager.scene.add(this.fallinGrp)\n        const poly = []\n        animation.bodies.forEach((body) => {\n            const polyModel = body.model.clone(true)\n            poly.push(polyModel)\n        })\n        animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                poly[parentInd].add(polyPart)\n            } else {\n                this.fallinGrp.add(polyPart)\n            }\n        })\n        this.animate(poly, animation, 0)\n\n        const targetSurface = this.terrain.getSurface(targetX, targetY)\n        targetSurface.surfaceType = SurfaceType.RUBBLE4\n        targetSurface.updateTexture()\n    }\n\n    animate(poly, animation, frameIndex) { // FIXME refactor animation handling\n        if (poly.length !== animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = true\n                        mat.alphaTest = 0\n                    })\n                }\n            }\n        })\n        this.animationTimeout = null\n        if (!(frameIndex + 1 > animation.lastFrame) || animation.looping) {\n            let nextFrame = frameIndex + 1\n            if (nextFrame > animation.lastFrame) {\n                nextFrame = animation.firstFrame\n            }\n            const that = this\n            this.animationTimeout = setTimeout(() => that.animate(poly, animation, nextFrame), 1000 / animation.framesPerSecond * animation.transcoef)\n        } else {\n            this.terrain.worldMgr.sceneManager.scene.remove(this.fallinGrp)\n            this.fallinGrp = null\n        }\n    }\n\n    dispose() {\n        this.mesh.geometry.dispose()\n        this.accessMaterials().forEach(m => m.dispose())\n    }\n\n    getFloorHeight(worldX: number, worldZ: number) {\n        const sx = worldX / TILESIZE - this.x\n        const sy = worldZ / TILESIZE - this.y\n        const dy0 = Surface.interpolate(this.topLeftHeightOffset, this.topRightHeightOffset, sx)\n        const dy1 = Surface.interpolate(this.bottomLeftHeightOffset, this.bottomRightHeightOffset, sx)\n        return Surface.interpolate(dy0, dy1, sy) * TILESIZE\n    }\n\n    private static interpolate(y0: number, y1: number, x: number): number {\n        return y0 + x * (y1 - y0)\n    }\n}\n\nexport enum WALL_TYPE {\n\n    CORNER = 1,\n    WALL = 2,\n    INVERTED_CORNER = 3,\n    WEIRD_CREVICE = 20,\n\n}\n","import { CursorLayer, ScreenLayer } from './ScreenLayer'\nimport { EventManager } from '../event/EventManager'\n\nexport class BaseScreen {\n\n    gameCanvasContainer: HTMLElement\n    eventMgr: EventManager\n    layers: ScreenLayer[] = []\n    width: number = 800\n    height: number = 600\n    ratio: number = 800 / 600\n    cursorLayer: CursorLayer\n\n    constructor() {\n        this.gameCanvasContainer = document.getElementById('game-canvas-container')\n        this.gameCanvasContainer.focus()\n        this.eventMgr = new EventManager(this)\n        if (!this.gameCanvasContainer) throw 'Fatal error: game canvas container not found!'\n        window.addEventListener('resize', () => this.onWindowResize())\n        this.cursorLayer = this.addLayer(new CursorLayer(), 1000)\n        this.onWindowResize()\n    }\n\n    addLayer<T extends ScreenLayer>(layer: T, zIndex: number = 0): T {\n        layer.resize(this.width, this.height)\n        layer.setZIndex(zIndex)\n        this.layers.push(layer)\n        this.gameCanvasContainer.appendChild(layer.canvas)\n        return layer\n    }\n\n    redraw() {\n        this.layers.forEach((layer) => {\n            if (layer.isActive()) layer.redraw()\n        })\n    }\n\n    show() {\n        this.layers.forEach((layer) => layer.show())\n        this.redraw()\n    }\n\n    hide() {\n        this.layers.forEach((layer) => layer.hide())\n    }\n\n    onWindowResize() {\n        const maxWidth = this.gameCanvasContainer.offsetWidth, maxHeight = this.gameCanvasContainer.offsetHeight\n        const idealHeight = Math.round(maxWidth / this.ratio)\n        if (idealHeight > maxHeight) {\n            this.resize(Math.round(maxHeight * this.ratio), maxHeight)\n        } else {\n            this.resize(maxWidth, idealHeight)\n        }\n    }\n\n    resize(width: number, height: number) {\n        this.width = width\n        this.height = height\n        this.layers.forEach((layer) => layer.resize(width, height))\n        this.redraw()\n    }\n\n    isInRect(event: MouseEvent | WheelEvent) {\n        if (this.layers.length < 1) return false\n        const firstLayer = this.layers[0] // all layers have same state and size\n        if (!firstLayer.isActive() && !firstLayer.canvas) return false\n        const rect = firstLayer.canvas.getBoundingClientRect()\n        const clientX = event.clientX, clientY = event.clientY\n        return clientX >= rect.left && clientX < rect.right && clientY >= rect.top && clientY < rect.bottom\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from './ScreenLayer'\n\nexport class LoadingScreen extends BaseScreen {\n\n    layer: ScaledLayer\n    assetIndex: number = 0\n\n    constructor() {\n        super()\n        this.layer = this.addLayer(new ScaledLayer())\n    }\n\n    show() {\n        this.layers.forEach((layer) => {\n            if (layer !== this.cursorLayer) layer.show()\n        })\n        this.setLoadingMessage('Loading...')\n    }\n\n    setLoadingMessage(text) {\n        this.layer.onRedraw = (context) => {\n            // clear the screen to black\n            context.fillStyle = 'black'\n            context.fillRect(0, 0, this.layer.fixedWidth, this.layer.fixedHeight)\n            // draw the loading title\n            context.font = '24px Arial'\n            context.fillStyle = 'white'\n            context.fillText('Loading Rock Raiders', 20, this.layer.fixedHeight - 50)\n            // hard-code the first loading message\n            context.font = '18px Arial'\n            context.fillStyle = 'white'\n            context.fillText(text, 20, this.layer.fixedHeight - 20)\n        }\n        this.redraw()\n    }\n\n    enableGraphicMode(totalResources: number) {\n        const imgBackground = ResourceManager.getImage(ResourceManager.cfg('Main', 'LoadScreen'))\n        const imgProgress = ResourceManager.getImage(ResourceManager.cfg('Main', 'ProgressBar'))\n        const imgLoading = ResourceManager.getDefaultFont().createTextImage(ResourceManager.cfg('Main', 'LoadingText'))\n        this.layer.onRedraw = (context => {\n            const loadingBarWidth = Math.round(353 * this.assetIndex / totalResources)\n            context.drawImage(imgBackground, 0, 0)\n            context.drawImage(imgProgress, 142, 450, loadingBarWidth, 9)\n            context.drawImage(imgLoading, Math.round(320 - imgLoading.width / 2), Math.round(456 - imgLoading.height / 2))\n        })\n        this.cursorLayer.show()\n        this.redraw()\n    }\n\n    setLoadingState(assetIndex) {\n        if (this.assetIndex === assetIndex) return\n        this.assetIndex = assetIndex\n        this.redraw()\n    }\n\n}\n","export class MainMenuBaseItem {\n\n    x: number = 0\n    y: number = 0\n    width: number = 0\n    height: number = 0\n    zIndex: number = 100\n    scrollAffected = false\n    needsRedraw: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n    actionName: string = ''\n    targetIndex: number = 0\n\n    static compareZ(left: MainMenuBaseItem, right: MainMenuBaseItem) {\n        return left.zIndex === right.zIndex ? 0 : left.zIndex > right.zIndex ? -1 : 1\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const hover = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        if (this.hover !== hover) {\n            this.hover = hover\n            this.needsRedraw = true\n            this.onHoverChange()\n        }\n        if (!this.hover) this.pressed = false\n        return this.hover\n    }\n\n    onHoverChange() {\n    }\n\n    checkSetPressed() {\n        if (!this.hover) return\n        if (!this.pressed) this.needsRedraw = true\n        this.pressed = true\n    }\n\n    setReleased() {\n        if (this.pressed) this.needsRedraw = true\n        this.pressed = false\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        this.needsRedraw = false\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\n\nexport class MainMenuLabelButton extends MainMenuBaseItem {\n\n    labelImgLo = null\n    labelImgHi = null\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.labelImgLo = layer.loFont.createTextImage(cfg.label)\n        this.labelImgHi = layer.hiFont.createTextImage(cfg.label)\n        this.width = Math.max(this.labelImgLo.width, this.labelImgHi.width)\n        this.height = Math.max(this.labelImgLo.height, this.labelImgHi.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const img = this.hover && !this.pressed ? this.labelImgHi : this.labelImgLo\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\n\nexport class MainMenuIconButton extends MainMenuBaseItem {\n\n    imgNormal = null\n    imgHover = null\n    imgPressed = null\n    tooltip = ''\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.imgNormal = ResourceManager.getImage(cfg.imgNormal)\n        this.imgHover = ResourceManager.getImage(cfg.imgHover)\n        this.imgPressed = ResourceManager.getImage(cfg.imgPressed)\n        this.tooltip = (cfg.tooltip || '').replace(/_/g, ' ')\n        this.width = Math.max(this.imgNormal.width, this.imgHover.width, this.imgPressed.width)\n        this.height = Math.max(this.imgNormal.height, this.imgHover.height, this.imgPressed.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgNormal\n        if (this.hover) img = this.imgHover\n        if (this.pressed) img = this.imgPressed\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuLabelButton } from './MainMenuLabelButton'\nimport { ScaledLayer } from '../screen/ScreenLayer'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventManager'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuIconButton } from './MainMenuIconButton'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { clearIntervalSafe } from '../core/Util'\nimport { NATIVE_FRAMERATE } from '../main'\n\nexport class MainMenuLayer extends ScaledLayer {\n\n    screen: MainMenuScreen\n    cfg: MenuEntryCfg\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    items: MainMenuBaseItem[] = []\n    scrollY: number = 0\n    scrollSpeedY: number = 0\n    scrollInterval = null\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg) {\n        super()\n        this.screen = screen\n        this.cfg = menuCfg\n        this.loFont = menuCfg.loFont ? ResourceManager.getBitmapFont(menuCfg.loFont) : null\n        this.hiFont = menuCfg.hiFont ? ResourceManager.getBitmapFont(menuCfg.hiFont) : null\n        this.menuImage = menuCfg.menuImage ? ResourceManager.getImage(menuCfg.menuImage) : null\n        this.titleImage = this.loFont.createTextImage(menuCfg.fullName)\n\n        menuCfg.itemsLabel.forEach((item) => {\n            if (item.label) {\n                this.items.push(new MainMenuLabelButton(this, item))\n            } else {\n                this.items.push(new MainMenuIconButton(this, item))\n            }\n        })\n\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n\n        this.onRedraw = (context) => {\n            context.drawImage(this.menuImage, 0, -this.scrollY)\n            if (menuCfg.displayTitle) context.drawImage(this.titleImage, (this.fixedWidth - this.titleImage.width) / 2, this.cfg.position[1])\n            this.items.forEach((item, index) => (this.items[this.items.length - 1 - index]).draw(context))\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.scrollY = 0\n        this.scrollSpeedY = 0\n    }\n\n    show() {\n        super.show()\n        const that = this\n        this.scrollInterval = setInterval(() => {\n            if (that.scrollSpeedY === 0) return\n            that.setScrollY(that.scrollSpeedY)\n        }, 1000 / NATIVE_FRAMERATE)\n    }\n\n    hide() {\n        this.scrollInterval = clearIntervalSafe(this.scrollInterval)\n        super.hide()\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (eventEnum === POINTER_EVENT.MOVE) {\n            const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n            let hovered = false\n            this.items.forEach((item) => {\n                if (!hovered) {\n                    const absY = sy + (item.scrollAffected ? this.scrollY : 0)\n                    hovered = item.checkHover(sx, absY)\n                } else {\n                    if (item.hover) item.needsRedraw = true\n                    item.hover = false\n                    item.setReleased()\n                }\n            })\n            if (this.cfg.canScroll) {\n                const scrollAreaHeight = 100\n                if (sy < scrollAreaHeight) {\n                    this.setScrollSpeedY(-(scrollAreaHeight - sy))\n                } else if (sy > this.fixedHeight - scrollAreaHeight) {\n                    this.setScrollSpeedY(sy - (this.fixedHeight - scrollAreaHeight))\n                }\n            }\n        } else if (eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => item.checkSetPressed())\n            }\n        } else if (eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => {\n                    if (item.pressed) {\n                        item.setReleased()\n                        if (item.actionName.toLowerCase() === 'next') {\n                            this.screen.showMainMenu(item.targetIndex)\n                        } else if (item.actionName.toLowerCase() === 'selectlevel') {\n                            this.screen.selectLevel((item as MainMenuLevelButton).levelKey)\n                        } else if (item.actionName) {\n                            console.warn('not implemented: ' + item.actionName + ' - ' + item.targetIndex)\n                        }\n                    }\n                })\n            }\n        }\n        if (this.needsRedraw()) this.redraw()\n        return false\n    }\n\n    private setScrollSpeedY(deltaY: number) {\n        this.scrollSpeedY = Math.sign(deltaY) * Math.pow(Math.round(deltaY / 20), 2)\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        if (!this.cfg.canScroll) return false\n        this.setScrollY(event.deltaY)\n        return true\n    }\n\n    private setScrollY(deltaY: number) {\n        const scrollYBefore = this.scrollY\n        this.scrollY = Math.min(Math.max(this.scrollY + deltaY, 0), this.menuImage.height - this.fixedHeight)\n        if (scrollYBefore !== this.scrollY) this.redraw()\n    }\n\n    needsRedraw(): boolean {\n        return this.items.some((item) => item.needsRedraw)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class MainMenuLevelButton extends MainMenuBaseItem {\n\n    layer: MainMenuLayer\n    imgActive = null\n    imgInactive = null\n    imgCross = null\n    unlocked: boolean = false\n    levelKey: string = ''\n\n    constructor(layer: MainMenuLayer, levelKey: string, levelCfg: LevelEntryCfg) {\n        super()\n        this.layer = layer\n        this.actionName = 'selectlevel'\n        this.levelKey = levelKey\n        this.x = levelCfg.frontEndX\n        this.y = levelCfg.frontEndY\n        this.zIndex = 10\n        this.scrollAffected = true\n        const [imgActive, imgInactive, imgCross] = levelCfg.menuBMP\n        this.imgActive = ResourceManager.getImage(imgActive)\n        this.imgInactive = ResourceManager.getImage(imgInactive)\n        this.imgCross = ResourceManager.getImage(imgCross)\n        this.width = Math.max(this.imgActive.width, this.imgInactive.width, this.imgCross.width)\n        this.height = Math.max(this.imgActive.height, this.imgInactive.height, this.imgCross.height)\n        this.unlocked = levelCfg.frontEndOpen\n        this.unlocked = true // TODO don't unlock everything by default\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgCross\n        if (this.unlocked) img = this.hover ? this.imgActive : this.imgInactive\n        context.drawImage(img, this.x, this.y - this.layer.scrollY)\n    }\n\n}\n","import { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { createContext } from '../core/ImageHelper'\n\nexport class MainMenuPanel extends MainMenuBaseItem {\n\n    context: CanvasRenderingContext2D\n\n    constructor(imgData: ImageData, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.zIndex = 50\n        this.context = createContext(imgData.width, imgData.height)\n        this.context.putImageData(imgData, 0, 0)\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const inRect = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        const hover = inRect && this.context.getImageData(sx, sy, 1, 1).data[3] > 0\n        if (this.hover !== hover) this.needsRedraw = true\n        this.hover = hover\n        return this.hover\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        context.drawImage(this.context.canvas, this.x, this.y, this.width, this.height)\n    }\n\n}\n","import { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { BitmapFont } from '../core/BitmapFont'\n\nexport class MainMenuWindow extends MainMenuBaseItem {\n\n    font: BitmapFont\n    imgFirstLine = null\n    imgSecondLine = null\n\n    constructor(font: BitmapFont, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.font = font\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    setFirstLine(text: string) {\n        this.imgFirstLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    setSecondLine(text: string) {\n        this.imgSecondLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const cx = this.x + this.width / 2, cy = this.y + this.height / 2\n        if (this.imgFirstLine) context.drawImage(this.imgFirstLine, cx - this.imgFirstLine.width / 2, cy - this.imgFirstLine.height)\n        if (this.imgSecondLine) context.drawImage(this.imgSecondLine, cx - this.imgSecondLine.width / 2, cy)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { LevelEntryCfg, LevelsCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { iGet } from '../core/Util'\nimport { MainMenuPanel } from './MainMenuPanel'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuWindow } from './MainMenuWindow'\n\nexport class LevelSelectLayer extends MainMenuLayer {\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg, modeLevel: boolean) {\n        super(screen, menuCfg)\n        const levelsCfg: LevelsCfg = ResourceManager.getResource('Levels')\n        const levelTextCfg = new LevelTextCfg()\n        this.items.push(new MainMenuPanel(levelTextCfg.panelImgData, levelTextCfg.panelPos))\n        const levelTextWindow = new MainMenuWindow(ResourceManager.getDefaultFont(), levelTextCfg.window)\n        levelTextWindow.setFirstLine(modeLevel ? levelTextCfg.level : levelTextCfg.tutorial)\n        this.items.push(levelTextWindow)\n        Object.keys(levelsCfg.levelsByName).forEach((levelKey) => {\n            const level: LevelEntryCfg = levelsCfg.levelsByName[levelKey]\n            const levelButton = new MainMenuLevelButton(this, levelKey, level)\n            levelButton.onHoverChange = () => levelTextWindow.setSecondLine(levelButton.hover ? level.fullName : '')\n            this.items.push(levelButton)\n        })\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n    }\n\n    show() {\n        this.scrollY = 0\n        super.show()\n    }\n\n}\n\nclass LevelTextCfg {\n\n    window = {x: 0, y: 0, w: 0, h: 0}\n    panelImgData: ImageData\n    panelPos = {x: 0, y: 0, w: 0, h: 0}\n    level: string = ''\n    tutorial: string = ''\n\n    constructor() {\n        const cfg = ResourceManager.cfg('Menu', 'LevelText')\n        const winCfg = iGet(cfg, 'Window')\n        this.window = {x: winCfg[0], y: winCfg[1], w: winCfg[2], h: winCfg[3]}\n        const panelCfg = iGet(cfg, 'Panel')\n        this.panelImgData = ResourceManager.getImageData(panelCfg[0])\n        this.panelPos = {x: panelCfg[1], y: panelCfg[2], w: panelCfg[3], h: panelCfg[4]}\n        this.level = iGet(cfg, 'Level').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n        this.tutorial = iGet(cfg, 'Tutorial').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MenuCfg } from '../cfg/MenuCfg'\nimport { MainMenuLayer } from '../menu/MainMenuLayer'\nimport { LevelSelectLayer } from '../menu/LevelSelectLayer'\n\nexport class MainMenuScreen extends BaseScreen {\n\n    onLevelSelected: (levelName: string) => void = null\n    menus: MainMenuLayer[] = []\n\n    constructor() {\n        super()\n        const mainMenuFullCfg = ResourceManager.getResource('MainMenuFull') as MenuCfg\n        mainMenuFullCfg.menus.forEach((menuCfg) => {\n            let layer\n            if (menuCfg.title === 'Levels') {\n                layer = new LevelSelectLayer(this, menuCfg, true)\n            } else if (menuCfg.title === 'Tutorials') {\n                layer = new LevelSelectLayer(this, menuCfg, false)\n            } else {\n                layer = new MainMenuLayer(this, menuCfg)\n            }\n            this.menus.push(layer)\n            this.addLayer(layer)\n        })\n    }\n\n    showMainMenu(index: number = 0) {\n        this.hide()\n        this.menus[index].show()\n        this.cursorLayer.show()\n    }\n\n    showLevelSelection() {\n        this.showMainMenu(1)\n    }\n\n    selectLevel(levelName) {\n        this.hide()\n        this.onLevelSelected(levelName)\n    }\n\n}\n","export class SurfaceType {\n\n    name: string // humand readable, maybe used as label lateron\n    shaping: boolean = false\n    matIndex: string = '00'\n    floor: boolean = false\n    selectable: boolean = false\n    drillable: boolean = false\n    drillableHard: boolean = false\n    explodable: boolean = false\n    reinforcable: boolean = false\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options)\n    }\n\n    static readonly GROUND = new SurfaceType({name: 'ground', floor: true, selectable: true})\n    static readonly SOLID_ROCK = new SurfaceType({name: 'solid rock', shaping: true, matIndex: '5'})\n    static readonly HARD_ROCK = new SurfaceType({\n        name: 'hard rock',\n        shaping: true,\n        matIndex: '4',\n        selectable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly LOOSE_ROCK = new SurfaceType({\n        name: 'loose rock',\n        shaping: true,\n        matIndex: '3',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly DIRT = new SurfaceType({\n        name: 'dirt',\n        shaping: true,\n        matIndex: '1',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly SLUG_HOLE = new SurfaceType({name: 'slug hole', floor: true, matIndex: '30'})\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'})\n    static readonly ORE_SEAM = new SurfaceType({\n        name: 'ore seam',\n        matIndex: '40',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45'})\n    static readonly CRYSTAL_SEAM = new SurfaceType({\n        name: 'energy crystal seam',\n        matIndex: '20',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly RECHARGE_SEAM = new SurfaceType({name: 'recharge seam', matIndex: '67'})\n    static readonly POWER_PATH = new SurfaceType({\n        name: 'power path all',\n        floor: true,\n        matIndex: '60',\n        selectable: true,\n    })\n    static readonly POWER_PATH_SITE = new SurfaceType({\n        name: 'power path site',\n        floor: true,\n        matIndex: '61',\n        selectable: true,\n    })\n    static readonly POWER_PATH_BUILDING = new SurfaceType({name: 'power path', floor: true, matIndex: '76'})\n    static readonly RUBBLE1 = new SurfaceType({\n        name: 'rubble 1',\n        floor: true,\n        matIndex: '13',\n        selectable: true,\n    })\n    static readonly RUBBLE2 = new SurfaceType({\n        name: 'rubble 2',\n        floor: true,\n        matIndex: '12',\n        selectable: true,\n    })\n    static readonly RUBBLE3 = new SurfaceType({\n        name: 'rubble 3',\n        floor: true,\n        matIndex: '11',\n        selectable: true,\n    })\n    static readonly RUBBLE4 = new SurfaceType({\n        name: 'rubble 4',\n        floor: true,\n        matIndex: '10',\n        selectable: true,\n    })\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING\n            case 1:\n                return SurfaceType.SOLID_ROCK\n            case 2:\n                return SurfaceType.HARD_ROCK\n            case 3:\n                return SurfaceType.LOOSE_ROCK\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT\n            case 6:\n                return SurfaceType.LAVA\n            case 8:\n                return SurfaceType.ORE_SEAM\n            case 9:\n                return SurfaceType.WATER\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM\n            case 11:\n                return SurfaceType.RECHARGE_SEAM\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE\n            case 100:\n                return SurfaceType.RUBBLE4\n            case 101:\n                return SurfaceType.RUBBLE3\n            case 102:\n                return SurfaceType.RUBBLE2\n            case 103:\n                return SurfaceType.RUBBLE1\n            default:\n                console.error('Unexpected surface type num: ' + typeNum)\n                return SurfaceType.SOLID_ROCK\n        }\n    }\n}\n","export class RaiderTool {\n\n    static DRILL = new RaiderTool('drill')\n    static HAMMER = new RaiderTool('hammer')\n    static SHOVEL = new RaiderTool('shovel')\n    static SPANNER = new RaiderTool('spanner')\n    static FREEZERGUN = new RaiderTool('freezergun')\n    static LASER = new RaiderTool('laser')\n    static PUSHERGUN = new RaiderTool('pushergun')\n    static BIRDSCARER = new RaiderTool('birdscarer')\n\n    name: string\n\n    constructor(name: string) {\n        this.name = name\n    }\n\n}\n","import { Surface } from '../../../scene/model/map/Surface'\nimport { FulfillerEntity } from '../../../scene/model/FulfillerEntity'\nimport { Vector2 } from 'three'\nimport { Dynamite } from '../../../scene/model/collect/Dynamite'\nimport { PublicJob } from './Job'\nimport { SurfaceType } from '../../../scene/model/map/SurfaceType'\nimport { CollectableEntity } from '../../../scene/model/collect/CollectableEntity'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\nimport { RaiderTool } from '../../../scene/model/RaiderTool'\nimport { JobType } from './JobType'\n\nexport class SurfaceJobType {\n\n    color: number\n    colorPriority: number\n    requiredTool: RaiderTool\n    requiredSkill: RaiderSkill\n\n    constructor(color: number, colorPriority: number, requiredTool: RaiderTool, requiredSkill: RaiderSkill) {\n        this.color = color\n        this.colorPriority = colorPriority\n        this.requiredTool = requiredTool\n        this.requiredSkill = requiredSkill\n    }\n\n    static readonly DRILL = new SurfaceJobType(0xa0a0a0, 0, RaiderTool.DRILL, null)\n    static readonly REINFORCE = new SurfaceJobType(0x60a060, 1, RaiderTool.HAMMER, null)\n    static readonly BLOW = new SurfaceJobType(0xa06060, 2, null, RaiderSkill.DEMOLITION)\n    static readonly CLEAR_RUBBLE = new SurfaceJobType(0xffffff, 0, RaiderTool.SHOVEL, null)\n\n}\n\nexport class SurfaceJob extends PublicJob {\n\n    surface: Surface\n    workType: SurfaceJobType\n\n    constructor(workType: SurfaceJobType, surface: Surface) {\n        super(JobType.SURFACE)\n        this.surface = surface\n        this.workType = workType\n    }\n\n    isQualified(fulfiller: FulfillerEntity) {\n        return (!this.workType.requiredTool || fulfiller.hasTool(this.workType.requiredTool))\n            && (!this.workType.requiredSkill || fulfiller.hasSkill(this.workType.requiredSkill))\n    }\n\n    isQualifiedWithTool(fulfiller: FulfillerEntity): RaiderTool {\n        return this.workType.requiredTool\n    }\n\n    isQualifiedWithTraining(fulfiller: FulfillerEntity): RaiderSkill {\n        return this.workType.requiredSkill\n    }\n\n    getWorkplaces(): Vector2[] {\n        if (this.workType === SurfaceJobType.CLEAR_RUBBLE) {\n            return [this.surface.rubblePositions[0]] // use first (no need to optimize)\n        } else {\n            return this.surface.getDigPositions()\n        }\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        switch (this.workType) {\n            case SurfaceJobType.DRILL:\n                this.surface.collapse()\n                break\n            case SurfaceJobType.REINFORCE:\n                this.surface.reinforce()\n                break\n            case SurfaceJobType.CLEAR_RUBBLE:\n                this.surface.reduceRubble()\n                break\n        }\n    }\n\n    getPriorityIdentifier(): string {\n        if (this.workType === SurfaceJobType.DRILL) return 'aiPriorityDestruction'\n        else if (this.workType === SurfaceJobType.BLOW) return 'aiPriorityDestruction'\n        else if (this.workType === SurfaceJobType.CLEAR_RUBBLE) return 'aiPriorityClearing'\n        else if (this.workType === SurfaceJobType.REINFORCE) return 'aiPriorityReinforce'\n        console.warn('Unexpected work type: ' + this.workType)\n        return ''\n    }\n\n}\n\nexport class DynamiteJob extends SurfaceJob {\n\n    dynamite: Dynamite\n\n    constructor(surface: Surface, dynamite: Dynamite) {\n        super(SurfaceJobType.BLOW, surface)\n        this.dynamite = dynamite\n    }\n\n    getWorkplaces(): Vector2[] {\n        return [this.dynamite.getPosition2D()]\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.dynamite.ignite()\n    }\n\n}\n\nexport class CompletePowerPathJob extends SurfaceJob {\n\n    placedItems: CollectableEntity[]\n\n    constructor(surface: Surface, placedItems: CollectableEntity[]) {\n        super(SurfaceJobType.CLEAR_RUBBLE, surface)\n        this.placedItems = placedItems\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.placedItems.forEach((placed) => placed.worldMgr.sceneManager.scene.remove(placed.group))\n        this.surface.surfaceType = SurfaceType.POWER_PATH\n        this.surface.updateTexture()\n    }\n\n    getPriorityIdentifier(): string {\n        return 'aiPriorityConstruction'\n    }\n\n}\n","import { BufferGeometry, Vector2, Vector3 } from 'three'\nimport { WALL_TYPE } from './Surface'\nimport { BufferAttribute } from 'three/src/core/BufferAttribute'\n\nexport class SurfaceGeometry {\n\n    public static create(wallType: WALL_TYPE,\n                         topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3,\n                         topLeftHeight: number, topRightHeight: number, bottomRightHeight: number, bottomLeftHeight: number,\n    ) {\n        let uvOffset = 0\n\n        // not-rotated\n        // 1 ?\n        // ? 0\n        if (topLeftVertex.y && !bottomRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topRightVertex.y)))) {\n            uvOffset = 0\n        }\n\n        // 90 clock-wise\n        // ? 1\n        // 0 ?\n        if (topRightVertex.y && !bottomLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomRightVertex.y)))) {\n            uvOffset = 3\n        }\n\n        // 180 clock-wise\n        // 0 ?\n        // ? 1\n        if (bottomRightVertex.y && !topLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomLeftVertex.y)))) {\n            uvOffset = 2\n        }\n\n        // 270 clock-wise\n        // ? 0\n        // 1 ?\n        if (bottomLeftVertex.y && !topRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topLeftVertex.y)))) {\n            uvOffset = 1\n        }\n\n        if (wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) {\n            if (topLeftVertex.y && bottomRightVertex.y) {\n                uvOffset = 0\n            }\n            if (topRightVertex.y && bottomLeftVertex.y) {\n                uvOffset = 3\n            }\n        }\n\n        /*\n        //\t\t0---1                1         0---1\n        //\t\t|   |  becomes      /|   and   |  /\n        //\t\t|   |             /  |         |/\n        //\t\t3---2            3---2         3\n        //\n        //\t\tOR\n        //\n        //\t\t0---1            0             0---1\n        //\t\t|   |  becomes   |\\    \t and    \\  |\n        //\t\t|   |            |  \\             \\|\n        //\t\t3---2            3---2             2\n        //\n        //\t\tTriangles 0-1-3 and 0-3-2\n        //\t\tQuad 0-1-3-2\n        */\n\n        const uv = [\n            new Vector2(0, 1),\n            new Vector2(1, 1),\n            new Vector2(1, 0),\n            new Vector2(0, 0),\n        ]\n\n        const bufferVertices = []\n        const bufferNormals = []\n\n        function addFaceAndNormals(a, b, c) {\n            bufferVertices.push(a, b, c)\n            const normal = new Vector3().subVectors(c, b)\n            normal.cross(new Vector3().subVectors(a, b))\n            normal.normalize()\n            bufferNormals.push(normal, normal, normal)\n        }\n\n        const uvIndexes = []\n        if (topRightVertex.y !== bottomLeftVertex.y ||\n            ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) && !(topRightVertex.y && bottomLeftVertex.y))) {\n            uvIndexes.push(1, 3, 2)\n            uvIndexes.push(1, 0, 3)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topRightVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topRightVertex, topLeftVertex, bottomLeftVertex)\n        } else {\n            uvIndexes.push(0, 3, 2)\n            uvIndexes.push(0, 2, 1)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topLeftVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topLeftVertex, bottomRightVertex, topRightVertex)\n        }\n\n        const bufferVertexUvs = uvIndexes.map(i => uv[(i + uvOffset) % 4])\n\n        const bufferGeometry = new BufferGeometry()\n        bufferGeometry.setAttribute('position', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferVertices))\n        bufferGeometry.setAttribute('normal', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferNormals))\n        bufferGeometry.setAttribute('uv', new BufferAttribute(new Float32Array(12), 2).copyVector2sArray(bufferVertexUvs))\n        return bufferGeometry\n    }\n}\n","import { WorldEvent } from './WorldEvents'\nimport { Vector3 } from 'three'\n\nexport class WorldLocationEvent extends WorldEvent {\n\n    location: Vector3\n\n    constructor(entityKey: string, location: Vector3) {\n        super(entityKey)\n        this.location = location\n    }\n\n}\n\nexport class GenericDeathEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.death'\n\n    constructor(location: Vector3) {\n        super(GenericDeathEvent.eventKey, location)\n    }\n\n}\n\nexport class GenericMonsterEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.monster'\n\n    constructor(location: Vector3) {\n        super(GenericMonsterEvent.eventKey, location)\n    }\n\n}\n\nexport class CrystalFoundEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.crystal_found'\n\n    constructor(location: Vector3) {\n        super(CrystalFoundEvent.eventKey, location)\n    }\n\n}\n\nexport class UnderAttackEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.under_attack'\n\n    constructor(location: Vector3) {\n        super(UnderAttackEvent.eventKey, location)\n    }\n\n}\n\nexport class LandslideEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.landslide'\n\n    constructor(location: Vector3) {\n        super(LandslideEvent.eventKey, location)\n    }\n\n}\n\nexport class PowerDrainEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.power_drain'\n\n    constructor(location: Vector3) {\n        super(PowerDrainEvent.eventKey, location)\n    }\n\n}\n\nexport class SlugEmergeEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.slug_emerge'\n\n    constructor(location: Vector3) {\n        super(SlugEmergeEvent.eventKey, location)\n    }\n\n}\n\nexport class RaiderDiscoveredEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.raider_discovered'\n\n    constructor(location: Vector3) {\n        super(RaiderDiscoveredEvent.eventKey, location)\n    }\n\n}\n","// javascript-astar 0.4.1 (converted to typescript by Scarabol)\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n\nfunction pathTo(node) {\n    let curr = node\n    const path = []\n    while (curr.parent) {\n        path.unshift(curr)\n        curr = curr.parent\n    }\n    return path\n}\n\nfunction getHeap() {\n    return new BinaryHeap(function (node) {\n        return node.f\n    })\n}\n\nexport const astar = {\n\n    /**\n     * Perform an A* Search on a graph given a start and end node.\n     * @param {Graph} graph\n     * @param {GridNode} start\n     * @param {GridNode} end\n     * @param {Object} [options]\n     * @param {boolean} [options.closest] Specifies whether to return the\n     path to the closest node if the target is unreachable.\n     * @param {Function} [options.heuristic] Heuristic function (see\n     *          astar.heuristics).\n     */\n    search(graph: Graph, start: GridNode, end: GridNode, options = null): GridNode[] {\n        graph.cleanDirty()\n        options = options || {}\n        const heuristic = options.heuristic || astar.heuristics.manhattan\n        const closest = options.closest || false\n\n        const openHeap = getHeap()\n        let closestNode = start  // set the start node to be the closest if required\n\n        start.h = heuristic(start, end)\n        graph.markDirty(start)\n\n        openHeap.push(start)\n\n        while (openHeap.size() > 0) {\n\n            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n            const currentNode = openHeap.pop()\n\n            // End case -- result has been found, return the traced path.\n            if (currentNode === end) {\n                return pathTo(currentNode)\n            }\n\n            // Normal case -- move currentNode from open to closed, process each of its neighbors.\n            currentNode.closed = true\n\n            // Find all neighbors for the current node.\n            const neighbors = graph.neighbors(currentNode)\n\n            let i = 0\n            const il = neighbors.length\n            for (; i < il; ++i) {\n                const neighbor = neighbors[i]\n\n                if (neighbor.closed || neighbor.isWall()) {\n                    // Not a valid node to process, skip to next neighbor.\n                    continue\n                }\n\n                // The g score is the shortest distance from start to current node.\n                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n                const gScore = currentNode.g + neighbor.getCost(currentNode)\n                const beenVisited = neighbor.visited\n\n                if (!beenVisited || gScore < neighbor.g) {\n\n                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n                    neighbor.visited = true\n                    neighbor.parent = currentNode\n                    neighbor.h = neighbor.h || heuristic(neighbor, end)\n                    neighbor.g = gScore\n                    neighbor.f = neighbor.g + neighbor.h\n                    graph.markDirty(neighbor)\n                    if (closest) {\n                        // If the neighbour is closer than the current closestNode or if it's equally close but has\n                        // a cheaper path than the current closest node then it becomes the closest node\n                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n                            closestNode = neighbor\n                        }\n                    }\n\n                    if (!beenVisited) {\n                        // Pushing to heap will put it in proper place based on the 'f' value.\n                        openHeap.push(neighbor)\n                    } else {\n                        // Already seen the node, but since it has been rescored we need to reorder it in the heap\n                        openHeap.rescoreElement(neighbor)\n                    }\n                }\n            }\n        }\n\n        if (closest) {\n            return pathTo(closestNode)\n        }\n\n        // No result was found - empty array signifies failure to find path.\n        return []\n    },\n\n    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n    heuristics: {\n        manhattan(pos0, pos1) {\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return d1 + d2\n        },\n\n        diagonal(pos0, pos1) {\n            const D = 1\n            const D2 = Math.sqrt(2)\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2))\n        },\n    },\n\n    cleanNode(node) {\n        node.f = 0\n        node.g = 0\n        node.h = 0\n        node.visited = false\n        node.closed = false\n        node.parent = null\n    },\n}\n\nexport class Graph {\n\n    readonly nodes: GridNode[] = []\n    readonly diagonal: boolean\n    readonly grid: GridNode[][] = []\n    dirtyNodes: GridNode[] = []\n\n    /**\n     * A graph memory structure\n     * @param {Array} gridIn 2D array of input weights\n     * @param {Object} [options]\n     * @param {boolean} [options.diagonal] Specifies whether diagonal moves are allowed\n     */\n    constructor(gridIn: number[][], options = null) {\n        options = options || {}\n        this.diagonal = !!options.diagonal\n        for (let x = 0; x < gridIn.length; x++) {\n            this.grid[x] = []\n\n            let y = 0\n            const row = gridIn[x]\n            for (; y < row.length; y++) {\n                const node = new GridNode(x, y, row[y])\n                this.grid[x][y] = node\n                this.nodes.push(node)\n            }\n        }\n        this.init()\n    }\n\n    init() {\n        this.dirtyNodes = []\n        for (let i = 0; i < this.nodes.length; i++) {\n            astar.cleanNode(this.nodes[i])\n        }\n    }\n\n    cleanDirty() {\n        for (let i = 0; i < this.dirtyNodes.length; i++) {\n            astar.cleanNode(this.dirtyNodes[i])\n        }\n        this.dirtyNodes = []\n    }\n\n    markDirty(node) {\n        this.dirtyNodes.push(node)\n    }\n\n    neighbors(node: GridNode) {\n        const ret: GridNode[] = []\n        const x = node.x\n        const y = node.y\n        const grid = this.grid\n\n        // West\n        if (grid[x - 1] && grid[x - 1][y]) {\n            ret.push(grid[x - 1][y])\n        }\n\n        // East\n        if (grid[x + 1] && grid[x + 1][y]) {\n            ret.push(grid[x + 1][y])\n        }\n\n        // South\n        if (grid[x] && grid[x][y - 1]) {\n            ret.push(grid[x][y - 1])\n        }\n\n        // North\n        if (grid[x] && grid[x][y + 1]) {\n            ret.push(grid[x][y + 1])\n        }\n\n        if (this.diagonal) {\n            // Southwest\n            if (grid[x - 1] && grid[x - 1][y - 1]) {\n                ret.push(grid[x - 1][y - 1])\n            }\n\n            // Southeast\n            if (grid[x + 1] && grid[x + 1][y - 1]) {\n                ret.push(grid[x + 1][y - 1])\n            }\n\n            // Northwest\n            if (grid[x - 1] && grid[x - 1][y + 1]) {\n                ret.push(grid[x - 1][y + 1])\n            }\n\n            // Northeast\n            if (grid[x + 1] && grid[x + 1][y + 1]) {\n                ret.push(grid[x + 1][y + 1])\n            }\n        }\n\n        return ret\n    }\n\n    toString() {\n        const graphString = []\n        const nodes = this.grid\n        for (let x = 0; x < nodes.length; x++) {\n            const rowDebug = []\n            const row = nodes[x]\n            for (let y = 0; y < row.length; y++) {\n                rowDebug.push(row[y].weight)\n            }\n            graphString.push(rowDebug.join(' '))\n        }\n        return graphString.join('\\n')\n    }\n}\n\nclass GridNode {\n\n    x: number\n    y: number\n    weight: number\n    h: number\n    closed: boolean\n    visited: boolean\n    g: number\n    parent: GridNode\n    f: number\n\n    constructor(x, y, weight) {\n        this.x = x\n        this.y = y\n        this.weight = weight\n    }\n\n    toString() {\n        return '[' + this.x + ' ' + this.y + ']'\n    }\n\n    getCost(fromNeighbor: GridNode) {\n        // Take diagonal weight into consideration.\n        if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n            return this.weight * 1.41421\n        }\n        return this.weight\n    }\n\n    isWall() {\n        return this.weight === 0\n    }\n}\n\nclass BinaryHeap {\n\n    content = []\n    scoreFunction\n\n    constructor(scoreFunction) {\n        this.content = []\n        this.scoreFunction = scoreFunction\n    }\n\n    push(element) {\n        // Add the new element to the end of the array.\n        this.content.push(element)\n\n        // Allow it to sink down.\n        this.sinkDown(this.content.length - 1)\n    }\n\n    pop() {\n        // Store the first element so we can return it later.\n        const result = this.content[0]\n        // Get the element at the end of the array.\n        const end = this.content.pop()\n        // If there are any elements left, put the end element at the\n        // start, and let it bubble up.\n        if (this.content.length > 0) {\n            this.content[0] = end\n            this.bubbleUp(0)\n        }\n        return result\n    }\n\n    remove(node) {\n        const i = this.content.indexOf(node)\n\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        const end = this.content.pop()\n\n        if (i !== this.content.length - 1) {\n            this.content[i] = end\n\n            if (this.scoreFunction(end) < this.scoreFunction(node)) {\n                this.sinkDown(i)\n            } else {\n                this.bubbleUp(i)\n            }\n        }\n    }\n\n    size() {\n        return this.content.length\n    }\n\n    rescoreElement(node) {\n        this.sinkDown(this.content.indexOf(node))\n    }\n\n    sinkDown(n) {\n        // Fetch the element that has to be sunk.\n        const element = this.content[n]\n\n        // When at 0, an element can not sink any further.\n        while (n > 0) {\n\n            // Compute the parent element's index, and fetch it.\n            const parentN = ((n + 1) >> 1) - 1\n            const parent = this.content[parentN]\n            // Swap the elements if the parent is greater.\n            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n                this.content[parentN] = element\n                this.content[n] = parent\n                // Update 'n' to continue at the new position.\n                n = parentN\n            }\n            // Found a parent that is less, no need to sink any further.\n            else {\n                break\n            }\n        }\n    }\n\n    bubbleUp(n) {\n        // Look up the target element and its score.\n        const length = this.content.length\n        const element = this.content[n]\n        const elemScore = this.scoreFunction(element)\n\n        while (true) {\n            // Compute the indices of the child elements.\n            const child2N = (n + 1) << 1\n            const child1N = child2N - 1\n            // This is used to store the new position of the element, if any.\n            let swap = null\n            let child1Score\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                const child1 = this.content[child1N]\n                child1Score = this.scoreFunction(child1)\n\n                // If the score is less than our element's, we need to swap.\n                if (child1Score < elemScore) {\n                    swap = child1N\n                }\n            }\n\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                const child2 = this.content[child2N]\n                const child2Score = this.scoreFunction(child2)\n                if (child2Score < (swap === null ? elemScore : child1Score)) {\n                    swap = child2N\n                }\n            }\n\n            // If the element needs to be moved, swap it, and continue.\n            if (swap !== null) {\n                this.content[n] = this.content[swap]\n                this.content[swap] = element\n                n = swap\n            }\n            // Otherwise, we are done.\n            else {\n                break\n            }\n        }\n    }\n}\n","import { Surface } from './model/map/Surface'\nimport { Terrain } from './model/map/Terrain'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { WorldManager } from './WorldManager'\nimport { TILESIZE } from '../main'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\n\nexport class TerrainLoader {\n\n    static loadTerrain(levelConf: LevelEntryCfg, worldMgr: WorldManager): Terrain {\n        const tileSize = levelConf.blockSize\n        if (tileSize !== TILESIZE) console.error('Unexpected tile size in level configuration: ' + tileSize)\n        const terrain = new Terrain(worldMgr)\n\n        const themeName = levelConf.textureSet[1]\n        terrain.textureSet = ResourceManager.cfg('Textures', themeName)\n        // console.log(terrain.textureSet);\n\n        const terrainMap = ResourceManager.getMap(levelConf.terrainMap)\n        terrain.width = terrainMap.width\n        terrain.height = terrainMap.height\n        const pathMap = ResourceManager.getMap(levelConf.pathMap)?.level\n        const surfaceMap = ResourceManager.getMap(levelConf.surfaceMap)?.level\n        const predugMap = ResourceManager.getMap(levelConf.predugMap)?.level\n        const cryOreMap = ResourceManager.getMap(levelConf.cryOreMap)?.level\n        const fallinMap = ResourceManager.getMap(levelConf.fallinMap)?.level\n        const erodeMap = ResourceManager.getMap(levelConf.erodeMap)?.level\n\n        // maps parsed from WAD are row-wise saved, which means y (row) comes first and x (column) second\n        for (let r = 0; r < terrainMap.level.length; r++) {\n            for (let c = 0; c < (terrainMap.level)[r].length; c++) {\n                (terrain.surfaces)[c] = (terrain.surfaces)[c] || []\n                const surfaceTypeNum = (terrainMap.level)[r][c]\n                let surfaceType = SurfaceType.getByNum(surfaceTypeNum)\n                const predugLevel = predugMap[r][c]\n                if (predugLevel === PredugMap.CAVERN_EXPOSED) {\n                    if (surfaceType === SurfaceType.GROUND || surfaceType === SurfaceType.DIRT) {\n                        surfaceType = SurfaceType.GROUND\n                    } else if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) {\n                        console.warn('Unexpected cavern surface type: ' + surfaceType.name)\n                    }\n                } else if (predugLevel === PredugMap.SLUG_HOLE_EXPOSED || predugLevel === PredugMap.SLUG_HOLE_HIDDEN) {\n                    surfaceType = SurfaceType.SLUG_HOLE\n                } else if (predugLevel !== PredugMap.WALL && predugLevel !== PredugMap.CAVERN_HIDDEN) {\n                    console.warn('Unexpected predug level: ' + predugLevel)\n                }\n                // give the path map the highest priority, if it exists\n                const pathMapLevel = pathMap && surfaceType.floor ? pathMap[r][c] : PathMap.NONE\n                if (pathMapLevel === PathMap.RUBBLE) {\n                    surfaceType = SurfaceType.RUBBLE4\n                } else if (pathMapLevel === PathMap.POWER_PATH) {\n                    surfaceType = SurfaceType.POWER_PATH\n                } else if (pathMapLevel !== PathMap.NONE) {\n                    console.warn('Unexpected path map level: ' + pathMapLevel)\n                }\n\n                const surface = new Surface(terrain, surfaceType, c, r, surfaceMap[r][c])\n                if (cryOreMap) {\n                    const currentCryOre = cryOreMap[r][c]\n                    if (currentCryOre % 2 === 1) {\n                        surface.containedCrystals = (currentCryOre + 1) / 2\n                    } else {\n                        surface.containedOres = currentCryOre / 2\n                    }\n                }\n\n                (terrain.surfaces)[c].push(surface)\n            }\n        }\n\n        // exlpore predug surfaces\n        terrain.surfaces.forEach(c => c.forEach(s => {\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_EXPOSED || predugMap[s.y][s.x] === PredugMap.SLUG_HOLE_EXPOSED) { // map are rows (y) first, columns (x) second\n                for (let x = s.x - 1; x <= s.x + 1; x++) {\n                    for (let y = s.y - 1; y <= s.y + 1; y++) {\n                        terrain.getSurfaceOrNull(x, y).discovered = true\n                    }\n                }\n            }\n        }))\n\n        // create hidden caverns\n        terrain.surfaces.forEach(c => c.forEach(s => {\n            const surface = terrain.getSurfaceOrNull(s.x, s.y)\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_HIDDEN && !surface.discovered) {\n                surface.surfaceType = SurfaceType.GROUND\n            }\n        }))\n\n        // crumble unsupported walls\n        terrain.surfaces.forEach((c) => c.forEach((s) => {\n            if (!s.isSupported()) s.collapse()\n        }))\n\n        terrain.updateSurfaceMeshes(true)\n\n        if (fallinMap) {\n            for (let x = 0; x < terrain.width; x++) {\n                for (let y = 0; y < terrain.height; y++) {\n                    terrain.getSurface(x, y).setFallinLevel(fallinMap[y][x]) // rows (y) before columns (x) used in maps\n                }\n            }\n        }\n\n        if (erodeMap) { // TODO implement lava erosion\n            console.warn('Lucky you! Lava erosion not yet implemented')\n        }\n\n        return terrain\n    }\n\n}\n\nenum PathMap {\n\n    NONE = 0,\n    RUBBLE = 1,\n    POWER_PATH = 2,\n\n}\n\nenum PredugMap {\n\n    WALL = 0,\n    CAVERN_EXPOSED = 1,\n    CAVERN_HIDDEN = 2,\n    SLUG_HOLE_EXPOSED = 3,\n    SLUG_HOLE_HIDDEN = 4,\n}\n","import { Vector2 } from 'three'\n\nexport class TerrainPath {\n\n    locations: Vector2[] = []\n    lengthSq: number = 0\n\n    constructor(locations: Vector2 | Vector2[]) {\n        this.locations = Array.isArray(locations) ? locations : [locations]\n        for (let c = 0; c < this.locations.length - 1; c++) {\n            const start = this.locations[c]\n            const end = this.locations[c + 1]\n            this.lengthSq += start.distanceToSquared(end)\n        }\n    }\n\n    addLocation(location: Vector2): TerrainPath {\n        this.locations.push(location)\n        if (this.locations.length > 1) {\n            this.lengthSq += this.locations[this.locations.length - 2].distanceToSquared(location)\n        }\n        return this\n    }\n\n    get targetPosition(): Vector2 {\n        return this.locations[this.locations.length - 1] || null\n    }\n\n    get firstLocation(): Vector2 {\n        return this.locations[0] || null\n    }\n\n}\n","import { Group, Vector2, Vector3 } from 'three'\nimport { Surface } from './Surface'\nimport { WorldManager } from '../../WorldManager'\nimport { SurfaceType } from './SurfaceType'\nimport { TILESIZE } from '../../../main'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityAddedEvent, EntityType } from '../../../event/WorldEvents'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { astar, Graph } from './astar'\nimport { TerrainPath } from './TerrainPath'\n\nexport class Terrain {\n\n    worldMgr: WorldManager\n    textureSet: any = {}\n    width: number = 0\n    height: number = 0\n    surfaces: Surface[][] = []\n    floorGroup: Group = new Group()\n    roofGroup: Group = new Group()\n    graphWalk: Graph = null\n    cachedPaths = new Map<string, TerrainPath>()\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        this.floorGroup.scale.set(TILESIZE, TILESIZE, TILESIZE)\n        this.roofGroup.visible = false // keep roof hidden unless switched to other camera\n        EventBus.registerEventListener(EntityAddedEvent.eventKey, (event: EntityAddedEvent) => {\n            if (event.type !== EntityType.BUILDING) return;\n            (event.entity as BuildingEntity).surfaces.forEach((bSurf) => {\n                for (let x = -1; x <= 1; x++) {\n                    for (let y = -1; y <= 1; y++) {\n                        this.getSurface(bSurf.x + x, bSurf.y + y).updateTexture()\n                    }\n                }\n            })\n        })\n    }\n\n    getSurfaceFromWorld(worldPosition: Vector3): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.z)\n    }\n\n    getSurfaceFromWorldXZ(worldX: number, worldZ: number): Surface | null {\n        return this.getSurface(worldX / TILESIZE, worldZ / TILESIZE)\n    }\n\n    getSurface(x, y): Surface {\n        x = Math.floor(x)\n        y = Math.floor(y)\n        return this.getSurfaceOrNull(x, y) || new Surface(this, SurfaceType.SOLID_ROCK, x, y, 0)\n    }\n\n    getSurfaceOrNull(x, y): Surface | null {\n        if (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n            return this.surfaces[x][y]\n        } else {\n            return null\n        }\n    }\n\n    updateSurfaceMeshes(force: boolean = false) {\n        this.surfaces.forEach((r) => r.forEach((s) => s.updateMesh(force)))\n        this.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n\n        // FIXME performance: update specific graph entry, when surface type changes\n        this.graphWalk = new Graph(this.surfaces.map(c => c.map(s => s.isWalkable() ? s.hasRubble() ? 4 : 1 : 0)))\n        console.log('Cached paths cleared')\n        this.cachedPaths.clear()\n    }\n\n    findPath(start: Vector2, end: Vector2): TerrainPath {\n        const startSurface = this.getSurfaceFromWorldXZ(start.x, start.y)\n        const endSurface = this.getSurfaceFromWorldXZ(end.x, end.y)\n        if (startSurface.x === endSurface.x && startSurface.y === endSurface.y) {\n            return new TerrainPath(end)\n        }\n        const cacheIdentifier = startSurface.x + '/' + startSurface.y + ' -> ' + endSurface.x + '/' + endSurface.y\n        const cachedPath = this.cachedPaths.get(cacheIdentifier)\n        if (cachedPath) {\n            return cachedPath.addLocation(end)\n        } else {\n            return this.searchPath(startSurface, endSurface, end, cacheIdentifier)\n        }\n    }\n\n    private searchPath(startSurface: Surface, endSurface: Surface, end: Vector2, cacheIdentifier: string): TerrainPath {\n        const startNode = this.graphWalk.grid[startSurface.x][startSurface.y]\n        const endNode = this.graphWalk.grid[endSurface.x][endSurface.y]\n        const worldPath = astar.search(this.graphWalk, startNode, endNode).map(p => this.getSurface(p.x, p.y).getCenterWorld2D())\n        if (worldPath.length < 1) return null // no path found\n        // replace last surface center with actual target position\n        worldPath.pop()\n        worldPath.push(end)\n        this.cachedPaths.set(cacheIdentifier, new TerrainPath(worldPath.slice(0, -1))) // cache shallow copy to avoid interference\n        return new TerrainPath(worldPath)\n    }\n\n    findFallInOrigin(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isReinforcable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isReinforcable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isReinforcable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isReinforcable()) return [bottomSurface.x, bottomSurface.y]\n        const leftSurface2 = this.getSurface(x - 1, y)\n        if (leftSurface2.isDigable()) return [leftSurface2.x, leftSurface2.y]\n        const topSurface2 = this.getSurface(x, y - 1)\n        if (topSurface2.isDigable()) return [topSurface2.x, topSurface2.y]\n        const rightSurface2 = this.getSurface(x + 1, y)\n        if (rightSurface2.isDigable()) return [rightSurface2.x, rightSurface2.y]\n        const bottomSurface2 = this.getSurface(x, y + 1)\n        if (bottomSurface2.isDigable()) return [bottomSurface2.x, bottomSurface2.y]\n        return null\n    }\n\n    findFallInTarget(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isWalkable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isWalkable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isWalkable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isWalkable()) return [bottomSurface.x, bottomSurface.y]\n        return null\n    }\n\n    dispose() {\n        this.surfaces.forEach(c => c.forEach(s => s.dispose()))\n    }\n\n}\n","import { Vector3 } from 'three'\n\nexport class EntityStep {\n\n    vec: Vector3 = null\n    targetReached: boolean = false\n\n    constructor(dx: number, dy: number, dz: number) {\n        this.vec = new Vector3(dx, dy, dz)\n    }\n\n}\n","export enum MoveState {\n\n    MOVED,\n    TARGET_REACHED,\n    TARGET_UNREACHABLE,\n\n}\n","import { AnimEntity } from './anim/AnimEntity'\nimport { Vector2, Vector3 } from 'three'\nimport { AnimationEntityType } from './anim/AnimationEntityType'\nimport { BaseActivity } from './activities/BaseActivity'\nimport { MovableEntityStats } from '../../cfg/MovableEntityStats'\nimport { EntityStep } from './EntityStep'\nimport { MoveState } from './MoveState'\nimport { JOB_ACTION_RANGE } from '../../main'\nimport { TerrainPath } from './map/TerrainPath'\n\nexport abstract class MovableEntity extends AnimEntity {\n\n    currentPath: TerrainPath = null\n\n    constructor(entityType: AnimationEntityType) {\n        super(entityType)\n    }\n\n    abstract get stats(): MovableEntityStats\n\n    getPosition(): Vector3 {\n        return new Vector3(this.group.position.x, this.group.position.y, this.group.position.z)\n    }\n\n    getPosition2D(): Vector2 {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    getSpeed(): number {\n        return this.stats.RouteSpeed[this.level] * (this.animation?.transcoef || 1) * (this.isOnPath() ? this.stats.PathCoef : 1)\n    }\n\n    moveToTarget(target: Vector2): MoveState {\n        return this.moveToClosestTarget([target])\n    }\n\n    moveToClosestTarget(targets: Vector2[]): MoveState {\n        if (!this.currentPath || !targets.some((t) => t.equals(this.currentPath.targetPosition))) {\n            const paths = targets.map((t) => this.findPathToTarget(t))\n                .sort((l, r) => l.lengthSq - r.lengthSq)\n            this.currentPath = paths.length > 0 ? paths[0] : null\n            if (!this.currentPath) return MoveState.TARGET_UNREACHABLE\n        }\n        const step = this.determineStep()\n        if (step.targetReached) return MoveState.TARGET_REACHED\n        this.changeActivity(this.getRouteActivity())\n        this.group.position.add(step.vec)\n        const nextLocation = this.currentPath.firstLocation\n        this.group.lookAt(new Vector3(nextLocation.x, this.group.position.y, nextLocation.y))\n        return MoveState.MOVED\n    }\n\n    abstract getRouteActivity(): BaseActivity\n\n    findPathToTarget(target: Vector2): TerrainPath {\n        return new TerrainPath(target)\n    }\n\n    determineStep(): EntityStep {\n        const step = this.getEntityStep(this.currentPath.firstLocation)\n        const entitySpeed = this.getSpeed() // TODO use average speed between current and target position\n        const stepLengthSq = step.vec.lengthSq()\n        if (stepLengthSq > entitySpeed * entitySpeed && stepLengthSq > JOB_ACTION_RANGE * JOB_ACTION_RANGE) {\n            step.vec.setLength(entitySpeed)\n        } else if (this.currentPath.locations.length > 1) {\n            this.currentPath.locations.shift()\n            return this.determineStep()\n        } else {\n            step.targetReached = true\n        }\n        return step\n    }\n\n    getEntityStep(target: Vector2): EntityStep {\n        return new EntityStep(target.x - this.group.position.x, this.determinePosY(target.x, target.y) - this.determinePosY(this.group.position.x, this.group.position.z), target.y - this.group.position.z)\n    }\n\n    determinePosY(x: number, z: number) {\n        return this.worldMgr.getFloorHeight(x, z)\n    }\n\n    isOnRubble() {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).hasRubble()\n    }\n\n    isOnPath(): boolean {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).isPath()\n    }\n\n}\n","import { MovableEntity } from './MovableEntity'\nimport { Selectable, SelectionType } from '../../game/model/Selectable'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Job } from '../../game/model/job/Job'\nimport { Vector3 } from 'three'\nimport { NATIVE_FRAMERATE } from '../../main'\nimport { clearIntervalSafe } from '../../core/Util'\nimport { Carryable } from './collect/Carryable'\nimport { SelectionEvent } from '../../event/LocalEvents'\nimport { BaseActivity } from './activities/BaseActivity'\nimport { RaiderSkill } from './RaiderSkill'\nimport { RaiderTool } from './RaiderTool'\n\nexport abstract class FulfillerEntity extends MovableEntity implements Selectable {\n\n    selectionType: SelectionType\n    selected: boolean\n    workInterval = null\n    job: Job = null\n    followUpJob: Job = null\n    carries: Carryable = null // FIXME implement multi carry for vehicles\n\n    protected constructor(selectionType: SelectionType, aeFilename: string) {\n        super(ResourceManager.getAnimationEntityType(aeFilename))\n        this.selectionType = selectionType\n        this.group.userData = {'selectable': this}\n        this.workInterval = setInterval(this.work.bind(this), 1000 / NATIVE_FRAMERATE) // TODO do not use interval, make work trigger itself (with timeout/interval) until work is done\n    }\n\n    resetWorkInterval() {\n        this.workInterval = clearIntervalSafe(this.workInterval)\n    }\n\n    abstract work()\n\n    dropItem() {\n        if (!this.carries) return\n        if (this.carryJoint) this.carryJoint.remove(this.carries.group)\n        this.carries.group.position.copy(this.group.position)\n        this.carries = null\n    }\n\n    pickupItem(item: Carryable) {\n        this.carries = item\n        if (this.carryJoint) this.carryJoint.add(this.carries.group)\n        this.carries.group.position.set(0, 0, 0)\n    }\n\n    setJob(job: Job, followUpJob: Job = null) {\n        if (this.job !== job) this.stopJob()\n        this.job = job\n        if (this.job) this.job.assign(this)\n        this.followUpJob = followUpJob\n        if (this.followUpJob) this.followUpJob.assign(this)\n    }\n\n    abstract getStandActivity(): BaseActivity\n\n    stopJob() {\n        this.dropItem()\n        if (!this.job) return\n        this.job.unassign(this)\n        if (this.followUpJob) this.followUpJob.unassign(this)\n        this.job = null\n        this.followUpJob = null\n        this.changeActivity(this.getStandActivity())\n    }\n\n    abstract hasTool(tool: RaiderTool)\n\n    abstract hasSkill(skill: RaiderSkill)\n\n    getSelectionType(): SelectionType {\n        return this.selectionType\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    abstract select(): SelectionEvent;\n\n    abstract getSelectionCenter(): Vector3;\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class RaiderActivity extends AnimEntityActivity {\n\n    static Route = new RaiderActivity('Activity_Route')\n    static RunPanic = new RaiderActivity('Activity_RunPanic')\n    static Drill = new RaiderActivity('Activity_Drill')\n    static Walk = new RaiderActivity('!Activity_Walk')\n    static Reinforce = new RaiderActivity('Activity_Reinforce')\n    static Reverse = new RaiderActivity('!Activity_Reverse')\n    static TurnLeft = new RaiderActivity('!Activity_TurnLeft')\n    static TurnRight = new RaiderActivity('!Activity_TurnRight')\n    static CantDo = new RaiderActivity('!Activity_CantDo')\n    static Collect = new RaiderActivity('Activity_Collect')\n    static Clear = new RaiderActivity('Activity_Clear')\n    static Carry = new RaiderActivity('Activity_Carry')\n    static CarryTurnLeft = new RaiderActivity('!Activity_CarryTurnLeft')\n    static CarryTurnRight = new RaiderActivity('!Activity_CarryTurnRight')\n    static CarryStand = new RaiderActivity('Activity_CarryStand')\n    static Dynamite = new RaiderActivity('Activity_Dynamite')\n    static Place = new RaiderActivity('Activity_Place')\n    static Deposit = new RaiderActivity('!Activity_Deposit')\n    static TeleportIn = new RaiderActivity('Activity_TeleportIn')\n    static Repair = new RaiderActivity('Activity_Repair')\n    static rest = new RaiderActivity('Activity_rest')\n    static routeRubble = new RaiderActivity('!Activity_routeRubble')\n    static CarryRubble = new RaiderActivity('!Activity_CarryRubble')\n    static Eat = new RaiderActivity('Activity_Eat')\n    static FireLaser = new RaiderActivity('Activity_FireLaser')\n    static GetUp = new RaiderActivity('!Activity_GetUp')\n    static ThrownByRockMonster = new RaiderActivity('Activity_ThrownByRockMonster')\n    static Slip = new RaiderActivity('Activity_Slip')\n    static Train = new RaiderActivity('Activity_Train')\n    static Recharge = new RaiderActivity('!Activity_Recharge')\n\n    static Waiting1 = new RaiderActivity('Activity_Waiting1')\n    static Waiting2 = new RaiderActivity('Activity_Waiting2')\n    static Waiting3 = new RaiderActivity('Activity_Waiting3')\n    static Waiting4 = new RaiderActivity('Activity_Waiting4')\n\n    static Hoverboard = new RaiderActivity('Activity_Hoverboard')\n    static Standhoverboard = new RaiderActivity('Activity_Standhoverboard')\n    static HitLefthoverboard = new RaiderActivity('!Activity_HitLefthoverboard')\n    static HitRighthoverboard = new RaiderActivity('!Activity_HitRighthoverboard')\n    static HitFronthoverboard = new RaiderActivity('!Activity_HitFronthoverboard')\n    static HitBackhoverboard = new RaiderActivity('!Activity_HitBackhoverboard')\n\n    static SMALLTRUCK = new RaiderActivity('Activity_SMALLTRUCK')\n    static StandSMALLTRUCK = new RaiderActivity('Activity_StandSMALLTRUCK')\n    static HitLeftSMALLTRUCK = new RaiderActivity('!Activity_HitLeftSMALLTRUCK')\n    static HitRightSMALLTRUCK = new RaiderActivity('!Activity_HitRightSMALLTRUCK')\n    static HitFrontSMALLTRUCK = new RaiderActivity('!Activity_HitFrontSMALLTRUCK')\n    static HitBackSMALLTRUCK = new RaiderActivity('!Activity_HitBackSMALLTRUCK')\n\n    static SMALLheli = new RaiderActivity('Activity_SMALLheli')\n    static StandSMALLheli = new RaiderActivity('Activity_StandSMALLheli')\n    static HitLeftSMALLheli = new RaiderActivity('!Activity_HitLeftSMALLheli')\n    static HitRightSMALLheli = new RaiderActivity('!Activity_HitRightSMALLheli')\n    static HitFrontSMALLheli = new RaiderActivity('!Activity_HitFrontSMALLheli')\n    static HitBackSMALLheli = new RaiderActivity('!Activity_HitBackSMALLheli')\n\n    static SMALLCAT = new RaiderActivity('Activity_SMALLCAT')\n    static StandSMALLCAT = new RaiderActivity('Activity_StandSMALLCAT')\n    static HitLeftSMALLCAT = new RaiderActivity('!Activity_HitLeftSMALLCAT')\n    static HitRightSMALLCAT = new RaiderActivity('!Activity_HitRightSMALLCAT')\n    static HitFrontSMALLCAT = new RaiderActivity('!Activity_HitFrontSMALLCAT')\n    static HitBackSMALLCAT = new RaiderActivity('!Activity_HitBackSMALLCAT')\n\n    static SMALLMLP = new RaiderActivity('Activity_SMALLMLP')\n    static StandSMALLMLP = new RaiderActivity('Activity_StandSMALLMLP')\n    static HitLeftSMALLMLP = new RaiderActivity('!Activity_HitLeftSMALLMLP')\n    static HitRightSMALLMLP = new RaiderActivity('!Activity_HitRightSMALLMLP')\n    static HitFrontSMALLMLP = new RaiderActivity('!Activity_HitFrontSMALLMLP')\n    static HitBackSMALLMLP = new RaiderActivity('!Activity_HitBackSMALLMLP')\n\n    static LARGECAT = new RaiderActivity('Activity_LARGECAT')\n    static StandLARGECAT = new RaiderActivity('Activity_StandLARGECAT')\n    static HitLeftLARGECAT = new RaiderActivity('!Activity_HitLeftLARGECAT')\n    static HitRightLARGECAT = new RaiderActivity('!Activity_HitRightLARGECAT')\n    static HitFrontLARGECAT = new RaiderActivity('!Activity_HitFrontLARGECAT')\n    static HitBackLARGECAT = new RaiderActivity('!Activity_HitBackLARGECAT')\n\n    static SMALLDIGGER = new RaiderActivity('Activity_SMALLDIGGER')\n    static StandSMALLDIGGER = new RaiderActivity('Activity_StandSMALLDIGGER')\n\n}\n","import { SelectionType } from '../../game/model/Selectable'\nimport { EventBus } from '../../event/EventBus'\nimport { RaiderSelected, SelectionEvent } from '../../event/LocalEvents'\nimport { FulfillerEntity } from './FulfillerEntity'\nimport { GameState } from '../../game/model/GameState'\nimport { MathUtils, Vector2, Vector3 } from 'three'\nimport { EntityAddedEvent, EntityType, OreFoundEvent, RaiderTrained } from '../../event/WorldEvents'\nimport { CrystalFoundEvent, RaiderDiscoveredEvent } from '../../event/WorldLocationEvent'\nimport { BaseActivity } from './activities/BaseActivity'\nimport { RaiderActivity } from './activities/RaiderActivity'\nimport { DynamiteJob, SurfaceJob, SurfaceJobType } from '../../game/model/job/SurfaceJob'\nimport { SurfaceType } from './map/SurfaceType'\nimport { getRandom, removeFromArray } from '../../core/Util'\nimport { Crystal } from './collect/Crystal'\nimport { Ore } from './collect/Ore'\nimport { CollectJob } from '../../game/model/job/CollectJob'\nimport { TrainJob } from '../../game/model/job/TrainJob'\nimport { GetToolJob } from '../../game/model/job/GetToolJob'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { RaiderTool } from './RaiderTool'\nimport { RaiderSkill } from './RaiderSkill'\nimport { MoveState } from './MoveState'\nimport { JobType } from '../../game/model/job/JobType'\nimport { TerrainPath } from './map/TerrainPath'\nimport degToRad = MathUtils.degToRad\n\nexport class Raider extends FulfillerEntity {\n\n    tools: RaiderTool[] = []\n    skills: RaiderSkill[] = []\n\n    constructor() {\n        super(SelectionType.PILOT, 'mini-figures/pilot/pilot.ae')\n        this.tools = [RaiderTool.DRILL]\n        this.skills = []\n        this.pickSphereRadius = this.stats.PickSphere / 2\n    }\n\n    get stats() {\n        return ResourceManager.stats.Pilot\n    }\n\n    findPathToTarget(target: Vector2): TerrainPath {\n        return this.worldMgr.sceneManager.terrain.findPath(this.getPosition2D(), target)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        removeFromArray(GameState.raidersUndiscovered, this)\n        GameState.raiders.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, this))\n        EventBus.publishEvent(new RaiderDiscoveredEvent(this.getPosition()))\n    }\n\n    select(): SelectionEvent {\n        this.selectionFrame.visible = true\n        if (!this.selected) {\n            this.selected = true\n            this.changeActivity(RaiderActivity.Stand)\n            return new RaiderSelected(this)\n        }\n        return null\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    isDriving(): boolean {\n        return false // TODO implement vehicles\n    }\n\n    getRouteActivity(): BaseActivity {\n        if (this.isOnRubble()) {\n            return !!this.carries ? RaiderActivity.CarryRubble : RaiderActivity.routeRubble\n        } else {\n            return !!this.carries ? RaiderActivity.Carry : RaiderActivity.Route\n        }\n    }\n\n    moveToClosestTarget(targets: Vector2[]): MoveState {\n        const result = super.moveToClosestTarget(targets)\n        if (result === MoveState.MOVED) {\n            // FIXME check if Raider stepped on a Spider\n        } else if (result === MoveState.TARGET_UNREACHABLE) {\n            console.log('Entity could not move to job target, stopping job')\n            this.stopJob()\n        }\n        return result\n    }\n\n    work() {\n        if (!this.job || this.selected) return\n        if (this.job.type === JobType.SURFACE) {\n            const surfJob = this.job as SurfaceJob\n            const surfaceJobType = surfJob.workType\n            if (surfaceJobType === SurfaceJobType.DRILL) {\n                if (this.moveToClosestTarget(this.job.getWorkplaces()) === MoveState.TARGET_REACHED) {\n                    let drillTimeMs = null\n                    if (surfJob.surface.surfaceType === SurfaceType.HARD_ROCK) {\n                        drillTimeMs = this.stats.HardDrillTime[this.level] * 1000\n                    } else if (surfJob.surface.surfaceType === SurfaceType.LOOSE_ROCK) {\n                        drillTimeMs = this.stats.LooseDrillTime[this.level] * 1000\n                    } else if (surfJob.surface.surfaceType === SurfaceType.DIRT) {\n                        drillTimeMs = this.stats.SoilDrillTime[this.level] * 1000\n                    } else if (surfJob.surface.surfaceType === SurfaceType.ORE_SEAM ||\n                        surfJob.surface.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                        drillTimeMs = this.stats.SeamDrillTime[this.level] * 1000\n                    }\n                    if (drillTimeMs === 0) console.warn('According to cfg this entity cannot drill this material')\n                    const focusPoint = surfJob.surface.getCenterWorld()\n                    focusPoint.y = this.group.position.y\n                    this.group.lookAt(focusPoint)\n                    this.changeActivity(RaiderActivity.Drill, () => {\n                        if (surfJob.surface.seamLevel > 0) {\n                            surfJob.surface.seamLevel--\n                            const vec = new Vector2().copy(this.getPosition2D()).sub(surfJob.surface.getCenterWorld2D())\n                                .multiplyScalar(0.3 + getRandom(3) / 10)\n                                .rotateAround(new Vector2(0, 0), degToRad(-10 + getRandom(20)))\n                                .add(this.getPosition2D())\n                            if (surfJob.surface.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                                const crystal = this.worldMgr.addCollectable(new Crystal(), vec)\n                                EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n                            } else if (surfJob.surface.surfaceType === SurfaceType.ORE_SEAM) {\n                                this.worldMgr.addCollectable(new Ore(), vec)\n                                EventBus.publishEvent(new OreFoundEvent())\n                            }\n                            this.changeActivity(RaiderActivity.Stand)\n                        } else {\n                            this.completeJob()\n                        }\n                    }, drillTimeMs)\n                }\n            } else if (surfaceJobType === SurfaceJobType.CLEAR_RUBBLE) {\n                if (this.moveToClosestTarget(this.job.getWorkplaces()) === MoveState.TARGET_REACHED) {\n                    this.changeActivity(RaiderActivity.Clear, () => {\n                        this.job.onJobComplete()\n                        if (!surfJob.surface.hasRubble()) this.stopJob()\n                    })\n                }\n            } else if (surfaceJobType === SurfaceJobType.REINFORCE) {\n                if (this.moveToClosestTarget(this.job.getWorkplaces()) === MoveState.TARGET_REACHED) {\n                    this.changeActivity(RaiderActivity.Reinforce, () => {\n                        this.completeJob()\n                    }, 2700)\n                }\n            } else if (surfaceJobType === SurfaceJobType.BLOW) {\n                const bj = this.job as DynamiteJob\n                if (this.carries !== bj.dynamite) {\n                    this.dropItem()\n                    if (this.moveToClosestTarget(this.job.getWorkplaces()) === MoveState.TARGET_REACHED) {\n                        this.changeActivity(RaiderActivity.Collect, () => {\n                            this.pickupItem(bj.dynamite)\n                        })\n                    }\n                } else if (this.moveToClosestTarget(bj.surface.getDigPositions()) === MoveState.TARGET_REACHED) {\n                    this.changeActivity(RaiderActivity.Place, () => {\n                        this.completeJob()\n                    })\n                }\n            }\n        } else if (this.job.type === JobType.CARRY) {\n            const carryJobItem = (this.job as CollectJob).item\n            if (this.carries !== carryJobItem) {\n                this.dropItem()\n                if (this.moveToClosestTarget(this.job.getWorkplaces()) === MoveState.TARGET_REACHED) {\n                    this.changeActivity(RaiderActivity.Collect, () => {\n                        this.pickupItem(carryJobItem)\n                    })\n                }\n            } else if (this.moveToClosestTarget(this.carries.getTargetPositions()) === MoveState.TARGET_REACHED) {\n                this.changeActivity(RaiderActivity.Place, () => {\n                    this.completeJob()\n                })\n            }\n        } else if (this.job.type === JobType.MOVE) {\n            if (this.moveToClosestTarget(this.job.getWorkplaces()) === MoveState.TARGET_REACHED) {\n                this.changeActivity(RaiderActivity.Stand, () => {\n                    this.completeJob()\n                })\n            }\n        } else if (this.job.type === JobType.TRAIN) {\n            if (this.moveToClosestTarget(this.job.getWorkplaces()) === MoveState.TARGET_REACHED) {\n                const trainJob = this.job as TrainJob\n                this.changeActivity(RaiderActivity.Train, () => {\n                    this.skills.push(trainJob.skill)\n                    EventBus.publishEvent(new RaiderTrained(this, trainJob.skill))\n                    this.completeJob()\n                }, 10000) // XXX adjust training time\n            }\n        } else if (this.job.type === JobType.GET_TOOL) {\n            if (this.moveToClosestTarget(this.job.getWorkplaces()) === MoveState.TARGET_REACHED) {\n                this.tools.push((this.job as GetToolJob).tool)\n                this.completeJob()\n            }\n        } else if (this.job.type === JobType.EAT) {\n            this.changeActivity(RaiderActivity.Eat, () => {\n                // TODO implement endurance fill eat level\n                this.completeJob()\n            })\n        }\n    }\n\n    private completeJob() {\n        this.dropItem()\n        this.job.onJobComplete()\n        if (this.job) this.job.unassign(this)\n        this.job = this.followUpJob\n        this.followUpJob = null\n        this.changeActivity(RaiderActivity.Stand)\n    }\n\n    getStandActivity(): BaseActivity {\n        return this.carries ? RaiderActivity.CarryStand : RaiderActivity.Stand\n    }\n\n    beamUp() {\n        this.stopJob()\n        super.beamUp()\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        removeFromArray(GameState.raiders, this)\n    }\n\n    hasTool(tool: RaiderTool) {\n        return this.tools.indexOf(tool) !== -1\n    }\n\n    hasSkill(skill: RaiderSkill) {\n        return this.skills.indexOf(skill) !== -1\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class BuildingActivity extends AnimEntityActivity {\n\n    static Teleport = new BuildingActivity('Activity_Teleport')\n    static Deposit = new BuildingActivity('Activity_Deposit')\n    static Explode = new BuildingActivity('Activity_Explode')\n    static Unpowered = new BuildingActivity('Activity_Unpowered')\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { BuildingSelected, EntityDeselected, SelectionEvent } from '../../event/LocalEvents'\nimport { Building } from '../../game/model/entity/building/Building'\nimport { AnimEntity } from './anim/AnimEntity'\nimport { Selectable, SelectionType } from '../../game/model/Selectable'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { MathUtils, Matrix4, Vector2, Vector3 } from 'three'\nimport { GameState } from '../../game/model/GameState'\nimport { BuildingUpgraded, CollectEvent, EntityAddedEvent, EntityType } from '../../event/WorldEvents'\nimport { Surface } from './map/Surface'\nimport { CollectableType } from './collect/CollectableEntity'\nimport { BuildingActivity } from './activities/BuildingActivity'\nimport { removeFromArray } from '../../core/Util'\nimport { BuildingEntityStats } from '../../cfg/BuildingEntityStats'\nimport { Ore } from './collect/Ore'\nimport { Crystal } from './collect/Crystal'\nimport { SurfaceType } from './map/SurfaceType'\nimport degToRad = MathUtils.degToRad\n\nexport class BuildingEntity extends AnimEntity implements Selectable {\n\n    type: Building\n    selected: boolean\n    powerSwitch: boolean = true\n    powerLink: boolean = false\n    spawning: boolean = false\n    surfaces: Surface[] = []\n    upgradeCostOre: number = 5\n    upgradeCostBrick: number = 1\n\n    constructor(buildingType: Building) {\n        super(ResourceManager.getAnimationEntityType(buildingType.aeFile))\n        this.type = buildingType\n        this.group.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        this.group.userData = {'selectable': this}\n        this.pickSphereRadius = this.stats.PickSphere / 2\n        this.upgradeCostOre = ResourceManager.cfg('Main', 'BuildingUpgradeCostOre') || 5\n        this.upgradeCostBrick = ResourceManager.cfg('Main', 'BuildingUpgradeCostStuds') || 5\n    }\n\n    get stats(): BuildingEntityStats {\n        return BuildingEntityStats.getByType(this.type)\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.BUILDING\n    }\n\n    select(): SelectionEvent {\n        this.selectionFrame.visible = true\n        if (!this.selected) {\n            this.selected = true\n            return new BuildingSelected(this)\n        }\n        return null\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    getPickSphereCenter() {\n        const pickSphereCenter = this.getPosition()\n        pickSphereCenter.y += this.pickSphereRadius / 2\n        return pickSphereCenter\n    }\n\n    getDropPosition2D(): Vector2 {\n        return this.getPosition2D().add(new Vector2(0, this.type.dropPosDist)\n            .rotateAround(new Vector2(0, 0), this.getHeading() + degToRad(this.type.dropPosAngleDeg)))\n    }\n\n    getDropPosition(): Vector3 {\n        const dropPos2D = this.getDropPosition2D()\n        return new Vector3(dropPos2D.x, this.worldMgr.getFloorHeight(dropPos2D.x, dropPos2D.y), dropPos2D.y)\n    }\n\n    isPowered(): boolean {\n        return this.powerSwitch && (this.stats.SelfPowered || this.powerLink)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        removeFromArray(GameState.buildingsUndiscovered, this)\n        GameState.buildings.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(EntityType.BUILDING, this))\n    }\n\n    hasMaxLevel(): boolean {\n        return this.level >= this.stats.Levels - 1\n    }\n\n    upgrade() {\n        if (!this.canUpgrade()) return\n        if (GameState.numBrick >= this.upgradeCostBrick) {\n            GameState.numBrick -= this.upgradeCostBrick\n            EventBus.publishEvent(new CollectEvent(CollectableType.BRICK))\n        } else {\n            GameState.numOre -= this.upgradeCostOre\n            EventBus.publishEvent(new CollectEvent(CollectableType.ORE)) // FIXME refactor merge with SpawnMaterialEvent into MaterialAmountChangedEvent\n        }\n        this.level++\n        EventBus.publishEvent(new EntityDeselected())\n        EventBus.publishEvent(new BuildingUpgraded(this))\n    }\n\n    getStandActivity() {\n        return !this.isPowered() && this.type !== Building.GUNSTATION ? BuildingActivity.Unpowered : BuildingActivity.Stand\n    }\n\n    beamUp() {\n        for (let c = 0; c < this.stats.CostOre; c++) {\n            this.worldMgr.addCollectable(new Ore(), this.surfaces[0].getRandomPosition())\n        }\n        for (let c = 0; c < this.stats.CostCrystal; c++) {\n            this.worldMgr.addCollectable(new Crystal(), this.surfaces[0].getRandomPosition())\n        }\n        this.surfaces.forEach((s) => {\n            s.surfaceType = SurfaceType.GROUND\n            s.updateTexture()\n        })\n        super.beamUp()\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        removeFromArray(GameState.buildings, this)\n    }\n\n    canUpgrade() {\n        return !this.hasMaxLevel() && (GameState.numOre >= this.upgradeCostOre || GameState.numBrick >= this.upgradeCostBrick)\n    }\n}\n","import { MovableEntity } from '../../../../scene/model/MovableEntity'\n\nexport abstract class Monster extends MovableEntity {\n\n    abstract onLevelEnd()\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class MonsterActivity extends AnimEntityActivity {\n\n    static Route = new MonsterActivity('Activity_Route')\n\n}\n","import { Monster } from './Monster'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { Vector2 } from 'three'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../../main'\nimport { clearTimeoutSafe, getRandom, getRandomInclusive, removeFromArray } from '../../../../core/Util'\nimport { SurfaceType } from '../../../../scene/model/map/SurfaceType'\nimport { GameState } from '../../GameState'\nimport { MonsterActivity } from '../../../../scene/model/activities/MonsterActivity'\nimport { BaseActivity } from '../../../../scene/model/activities/BaseActivity'\nimport { MoveState } from '../../../../scene/model/MoveState'\nimport { TerrainPath } from '../../../../scene/model/map/TerrainPath'\n\nexport class SmallSpider extends Monster {\n\n    moveTimeout\n    target: Vector2 = null\n\n    constructor() {\n        super(ResourceManager.getAnimationEntityType('Creatures/SpiderSB/SpiderSB.ae'))\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallSpider\n    }\n\n    startMoving() {\n        SmallSpider.onMove(this)\n    }\n\n    private static onMove(spider: SmallSpider) {\n        if (spider.target && spider.moveToTarget(spider.target) === MoveState.MOVED) {\n            if (!spider.worldMgr.sceneManager.terrain.getSurfaceFromWorld(spider.getPosition()).surfaceType.floor) {\n                spider.onDeath()\n            } else {\n                spider.moveTimeout = setTimeout(() => SmallSpider.onMove(spider), 1000 / NATIVE_FRAMERATE)\n            }\n        } else {\n            spider.changeActivity(MonsterActivity.Stand)\n            spider.moveTimeout = setTimeout(() => {\n                spider.target = spider.findSolidTarget()\n                SmallSpider.onMove(spider)\n            }, 1000 + getRandom(9000))\n        }\n    }\n\n    findPathToTarget(target: Vector2): TerrainPath {\n        return new TerrainPath(target) // TODO add intermediate point to path to make it more interesting\n    }\n\n    private findSolidTarget(): Vector2 {\n        const terrain = this.worldMgr.sceneManager.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            const surfaceType = terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType\n            if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new Vector2(targetX, targetZ)\n            }\n        }\n        console.warn('Could not find a solid target')\n        return null\n    }\n\n    onDeath() {\n        this.onLevelEnd()\n        this.worldMgr.sceneManager.scene.remove(this.group)\n        removeFromArray(GameState.spiders, this)\n    }\n\n    onLevelEnd() {\n        this.moveTimeout = clearTimeoutSafe(this.moveTimeout)\n    }\n\n    getRouteActivity(): BaseActivity {\n        return MonsterActivity.Route\n    }\n\n}\n","import { Monster } from './Monster'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { Vector2 } from 'three'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../../main'\nimport { clearTimeoutSafe, getRandomInclusive, removeFromArray } from '../../../../core/Util'\nimport { GameState } from '../../GameState'\nimport { MonsterActivity } from '../../../../scene/model/activities/MonsterActivity'\nimport { BaseActivity } from '../../../../scene/model/activities/BaseActivity'\nimport { MoveState } from '../../../../scene/model/MoveState'\n\nexport class Bat extends Monster {\n\n    moveTimeout\n    target: Vector2 = null\n\n    constructor() {\n        super(ResourceManager.getAnimationEntityType('Creatures/bat/bat.ae'))\n    }\n\n    get stats() {\n        return ResourceManager.stats.Bat\n    }\n\n    startMoving() {\n        Bat.onMove(this)\n    }\n\n    private static onMove(bat: Bat) {\n        if (!bat.target || bat.moveToTarget(bat.target) === MoveState.TARGET_REACHED) {\n            bat.target = bat.findTarget()\n        }\n        bat.moveTimeout = setTimeout(() => Bat.onMove(bat), 1000 / NATIVE_FRAMERATE)\n    }\n\n    determinePosY(x: number, z: number) {\n        return this.worldMgr.getFloorHeight(x, z) + TILESIZE / 2\n    }\n\n    private findTarget(): Vector2 { // TODO move to nearby drilling noise, explosions or sonic blasters\n        const terrain = this.worldMgr.sceneManager.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            if (terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType.floor) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new Vector2(targetX, targetZ)\n            }\n        }\n        console.warn('Could not find a solid target')\n        return null\n    }\n\n    onDeath() {\n        this.onLevelEnd()\n        this.worldMgr.sceneManager.scene.remove(this.group)\n        removeFromArray(GameState.bats, this)\n    }\n\n    onLevelEnd() {\n        this.moveTimeout = clearTimeoutSafe(this.moveTimeout)\n    }\n\n    getRouteActivity(): BaseActivity {\n        return MonsterActivity.Route\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { TILESIZE } from '../main'\nimport { MathUtils, Vector2, Vector3 } from 'three'\nimport { Raider } from './model/Raider'\nimport { GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { BuildingEntity } from './model/BuildingEntity'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { Crystal } from './model/collect/Crystal'\nimport { WorldManager } from './WorldManager'\nimport { EventBus } from '../event/EventBus'\nimport { EntityAddedEvent, EntityType } from '../event/WorldEvents'\nimport { RaiderActivity } from './model/activities/RaiderActivity'\nimport { SmallSpider } from '../game/model/entity/monster/SmallSpider'\nimport { MonsterActivity } from './model/activities/MonsterActivity'\nimport { Bat } from '../game/model/entity/monster/Bat'\nimport degToRad = MathUtils.degToRad\n\nexport class ObjectListLoader {\n\n    static loadObjectList(worldMgr: WorldManager, objectListConf) {\n        Object.values(objectListConf).forEach((olObject: any) => {\n            const lTypeName = olObject.type ? olObject.type.toLowerCase() : olObject.type\n            // all object positions are off by half a tile, because 0/0 is the top left corner of first tile\n            const worldX = (olObject.xPos - 1) * TILESIZE\n            const worldZ = (olObject.yPos - 1) * TILESIZE\n            const terrainY = worldMgr.getTerrainHeight(worldX, worldZ)\n            const buildingType = ResourceManager.cfg('BuildingTypes', olObject.type)\n            const radHeading = degToRad(olObject.heading)\n            if (lTypeName === 'TVCamera'.toLowerCase()) {\n                const offset = new Vector3(5 * TILESIZE, 0, 0).applyAxisAngle(new Vector3(0, 1, 0), radHeading - Math.PI / 16).add(new Vector3(worldX, terrainY, worldZ - TILESIZE / 2))\n                worldMgr.sceneManager.camera.position.copy(offset)\n                worldMgr.sceneManager.camera.position.y = 4.5 * TILESIZE\n                worldMgr.sceneManager.controls.target.copy(new Vector3(worldX, terrainY, worldZ - TILESIZE / 2))\n                worldMgr.sceneManager.controls.update()\n                worldMgr.setTorchPosition(new Vector2(worldX, worldZ - TILESIZE / 2))\n            } else if (lTypeName === 'Pilot'.toLowerCase()) {\n                const raider = new Raider()\n                raider.worldMgr = worldMgr\n                raider.setActivity(RaiderActivity.Stand)\n                raider.createPickSphere()\n                raider.group.position.set(worldX, terrainY, worldZ)\n                raider.group.rotateOnAxis(new Vector3(0, 1, 0), radHeading - Math.PI / 2)\n                raider.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(raider.group.position).discovered\n                if (raider.group.visible) {\n                    GameState.raiders.push(raider)\n                    EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, raider))\n                } else {\n                    GameState.raidersUndiscovered.push(raider)\n                }\n                worldMgr.sceneManager.scene.add(raider.group)\n            } else if (buildingType) {\n                const building = Building.getByName(buildingType)\n                const entity = new BuildingEntity(building)\n                entity.worldMgr = worldMgr\n                entity.setActivity(entity.getStandActivity())\n                entity.createPickSphere()\n                entity.group.position.set(worldX, worldMgr.getFloorHeight(worldX, worldZ), worldZ)\n                entity.group.rotateOnAxis(new Vector3(0, 1, 0), -radHeading - Math.PI)\n                entity.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(entity.group.position).discovered\n                if (entity.group.visible) {\n                    GameState.buildings.push(entity)\n                    EventBus.publishEvent(new EntityAddedEvent(EntityType.BUILDING, entity))\n                } else {\n                    GameState.buildingsUndiscovered.push(entity)\n                }\n                // TODO rotate building with normal vector of surface\n                worldMgr.sceneManager.scene.add(entity.group)\n                const primaryPathSurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(entity.group.position)\n                primaryPathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                primaryPathSurface.updateTexture()\n                entity.surfaces.push(primaryPathSurface)\n                if (building === Building.POWER_STATION) {\n                    const secondaryOffset = new Vector3(0, 0, TILESIZE).applyAxisAngle(new Vector3(0, 1, 0), -radHeading + Math.PI / 2)\n                    secondaryOffset.add(entity.group.position)\n                    const secondarySurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(secondaryOffset)\n                    secondarySurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                    secondarySurface.updateTexture()\n                    entity.surfaces.push(secondarySurface)\n                }\n                if (building !== Building.GUNSTATION) {\n                    const pathOffset = new Vector3(0, 0, TILESIZE).applyAxisAngle(new Vector3(0, 1, 0), -radHeading - Math.PI)\n                    pathOffset.add(entity.group.position)\n                    const pathSurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(pathOffset)\n                    pathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                    pathSurface.updateTexture()\n                    entity.surfaces.push(pathSurface)\n                }\n            } else if (lTypeName === 'PowerCrystal'.toLowerCase()) {\n                worldMgr.addCollectable(new Crystal(), new Vector2(worldX, worldZ))\n            } else if (lTypeName === 'SmallSpider'.toLowerCase()) {\n                const spider = new SmallSpider()\n                spider.worldMgr = worldMgr\n                spider.setActivity(MonsterActivity.Stand)\n                spider.group.position.set(worldX, terrainY, worldZ)\n                spider.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(spider.group.position).discovered\n                worldMgr.sceneManager.scene.add(spider.group)\n                GameState.spiders.push(spider)\n                spider.startMoving()\n            } else if (lTypeName === 'Bat'.toLowerCase()) {\n                const bat = new Bat()\n                bat.worldMgr = worldMgr\n                bat.setActivity(MonsterActivity.Stand)\n                bat.group.position.set(worldX, bat.determinePosY(worldX, worldZ), worldZ)\n                bat.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(bat.group.position).discovered\n                worldMgr.sceneManager.scene.add(bat.group)\n                GameState.bats.push(bat)\n                bat.startMoving()\n            } else {\n                // TODO implement remaining object types\n                console.warn('Object type ' + olObject.type + ' not yet implemented')\n            }\n        })\n        // update path textures when all buildings are added\n        GameState.buildings.forEach((b) => b.surfaces.forEach((bSurf) => {\n            for (let x = -1; x <= 1; x++) {\n                for (let y = -1; y <= 1; y++) {\n                    worldMgr.sceneManager.terrain.getSurface(bSurf.x + x, bSurf.y + y).updateTexture()\n                }\n            }\n        }))\n    }\n\n}\n","/** Function documentation mostly copied from the following URLs\n *\n * https://kb.rockraidersunited.com/User:Jessietail/NERPs_reference\n * https://web.archive.org/web/20131206122442/http://rru-stuff.org/nerpfuncs.html\n * https://kb.rockraidersunited.com/NERPs_documentation#Labels\n *\n */\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { clearIntervalSafe } from './Util'\n\nexport class NerpRunner {\n\n    debug = false\n    onLevelComplete: () => any = null\n    nerpInterval: NodeJS.Timeout = null\n\n    registers = new Array(8).fill(0)\n    timers = new Array(4).fill(0)\n    scriptLines = [] // contains humand readable script strings\n    statements = [] // contains parsed statements for execution\n    macrosByName = {}\n    labelsByName = {}\n    halted = false\n    programCounter = 0\n    messages = []\n    // more state variables and switches\n    messagePermit = null\n\n    constructor(debug = false) {\n        this.debug = debug\n    }\n\n    startExecution() {\n        const that = this\n        this.nerpInterval = setInterval(() => {\n            that.execute()\n        }, 2000)\n    }\n\n    pauseExecution() {\n        this.nerpInterval = clearIntervalSafe(this.nerpInterval)\n    }\n\n    /**\n     * Internally used to validate and parse a register number.\n     * @param register\n     * @return {number}\n     */\n    checkRegister(register) {\n        const num = parseInt(register)\n        if (isNaN(num) || num < 0 || num > this.registers.length) throw new Error('Invalid register (' + register + ') provided')\n        return num\n    }\n\n    /**\n     * Internally used to validate and parse a value before setting or adding it with a register.\n     * @param value\n     * @return {number}\n     */\n    checkRegisterValue(value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Invalid register value (' + value + ') provided')\n        return num\n    }\n\n    /**\n     * Gets the value currently stored in the given register, internally used to handle all registers with one method.\n     * @param register the register to read\n     * @return {number} returns the value currently stored in the register\n     */\n    getR(register) {\n        register = this.checkRegister(register)\n        return this.registers[register]\n    }\n\n    /**\n     * Sets the given value for the given register, internally used to handle all registers with one method.\n     * @param register the register to set\n     * @param value the value to set for the given register\n     */\n    setR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] = value\n    }\n\n    /**\n     * Adds the given value to the given register, internally used to handle all registers with one method.\n     * @param register the register to add to\n     * @param value the value to add to the given register\n     */\n    addR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] += value\n    }\n\n    /**\n     * Set the respective timer to the given numerical value. Units are in milliseconds.\n     * @param timer\n     * @param value\n     */\n    setTimer(timer, value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Can\\'t set timer to NaN value: ' + value)\n        this.timers[timer] = new Date().getTime() + num\n    }\n\n    /**\n     * Gets the value of the respective timer. Units are in milliseconds.\n     * @param timer\n     * @return {number}\n     */\n    getTimer(timer) {\n        return new Date().getTime() - this.timers[timer]\n    }\n\n    /**\n     * End the level successfully and show the score screen.\n     */\n    setLevelCompleted() {\n        this.halted = true\n        GameState.resultState = GameResultState.COMPLETE\n        this.onLevelComplete()\n    }\n\n    /**\n     * End the level as failure and show the score screen.\n     */\n    setLevelFail() {\n        this.halted = true\n        GameState.resultState = GameResultState.FAILED\n        this.onLevelComplete()\n    }\n\n    /**\n     * Sets tutorial flags\n     * @param value a bitmask to set flags with\n     */\n    setTutorialFlags(value) {\n        // TODO implement tutorial flags\n        // seems like value must be interpreted bitwise and sets a certain flag on each bit\n        // seen so far:\n        // 0 = 0x00 allow any click anywhere anytime\n        // 3 = 0x11 disallow invalid clicks\n        // 4095 = 0x111111111111 set all flags? (seen in Tutorial01 level)\n    }\n\n    /**\n     * This is used to make messages come up/not come up.\n     * @param messagesAllowed\n     */\n    setMessagePermit(messagesAllowed) {\n        this.messagePermit = !messagesAllowed\n    }\n\n    setBuildingsUpgradeLevel(typeName, level) {\n        GameState.buildings.forEach(b => {\n            if (b.type === typeName) b.level = level\n        })\n    }\n\n    setToolStoreLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.TOOLSTATION, level)\n    }\n\n    setTeleportPadLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.TELEPORT_PAD, level)\n    }\n\n    setPowerStationLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.POWER_STATION, level)\n    }\n\n    setBarracksLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.BARRACKS, level)\n    }\n\n    /**\n     * Gets the number of tool stores currently built. NOT the total ever built.\n     * @return {number}\n     */\n    getToolStoresBuilt() {\n        return GameState.getBuildingsByType(Building.TOOLSTATION).length\n    }\n\n    /**\n     * Gets the number of minifigures on the level. TODO it is NOT tested if this ignores minifigures in hidden caverns\n     * @return {number}\n     */\n    getMinifiguresOnLevel() {\n        return GameState.raiders.length\n    }\n\n    /**\n     * Gets the number of crystals currently stored.\n     * @return {number}\n     */\n    getCrystalsCurrentlyStored() {\n        return GameState.numCrystal\n    }\n\n    getObjectiveSwitch() {\n        // TODO implement this\n        return 0\n    }\n\n    setMessageTimerValues(arg1, arg2, arg3) {\n        // TODO implement this\n    }\n\n    getMessageTimer() {\n        return 0 // TODO return remaining amount of time needed to fully play WAV message\n    }\n\n    cameraUnlock() {\n        // TODO implement this\n    }\n\n    setMessage(messageNumber, arrowDisabled) {\n        if (!this.messagePermit) {\n            return\n        }\n        const msg = this.messages[messageNumber]\n        // TODO show message to user\n        console.log(msg.txt)\n        // msg.snd resides in sounds/streamed/ which is currently not loaded :(\n    }\n\n    setCameraGotoTutorial(arg1) {\n        // TODO implement this\n    }\n\n    getTutorialBlockIsGround(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getTutorialBlockIsPath(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getUnitAtBlock(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getOxygenLevel() {\n        // TODO implement this\n        return 100\n    }\n\n    getObjectiveShowing() {\n        // TODO implement this\n        return false\n    }\n\n    addPoweredCrystals() {\n        // TODO implement this\n    }\n\n    disallowAll() {\n        // TODO implement this\n    }\n\n    getPoweredPowerStationsBuilt() {\n        return GameState.getBuildingsByType(Building.POWER_STATION).length\n    }\n\n    getPoweredBarracksBuilt() {\n        return GameState.getBuildingsByType(Building.BARRACKS).length\n    }\n\n    getRecordObjectAtTutorial() {\n        // TODO implement this\n    }\n\n    getHiddenObjectsFound() {\n        // TODO implement this\n        return 0\n    }\n\n    callMethod(methodName, methodArgs) {\n        if (methodName === 'Stop') {\n            throw 'Stop'\n        } else if (methodName === 'TRUE') {\n            return true\n        } else if (methodName === 'FALSE') {\n            return false\n        }\n        const setRegisterMatch = methodName.match(/^SetR([0-7])$/)\n        if (setRegisterMatch) {\n            return this.setR(setRegisterMatch[1], methodArgs[0])\n        }\n        const addRegisterMatch = methodName.match(/^AddR([0-7])$/)\n        if (addRegisterMatch) {\n            return this.addR(addRegisterMatch[1], methodArgs[0])\n        }\n        const getRegisterMatch = methodName.match(/^GetR([0-7])$/)\n        if (getRegisterMatch) {\n            return this.getR(getRegisterMatch[1])\n        }\n        const setTimerMatch = methodName.match(/^SetTimer([0-3])$/)\n        if (setTimerMatch) {\n            return this.setTimer(setTimerMatch[1], methodArgs[0])\n        }\n        const getTimerMatch = methodName.match(/^GetTimer([0-3])$/)\n        if (getTimerMatch) {\n            return this.getTimer(getTimerMatch[1])\n        }\n        const lMethodName = methodName.toLowerCase()\n        for (const memberName in this) {\n            // noinspection JSUnfilteredForInLoop\n            if (memberName.toLowerCase() === lMethodName) {\n                // @ts-ignore\n                // noinspection JSUnfilteredForInLoop\n                return this[memberName].apply(this, methodArgs)\n            }\n        }\n        throw new Error('Undefined method: ' + methodName)\n    }\n\n    conditional(left, right) {\n        const conditionResult = this.executeStatement(left)\n        if (this.debug) {\n            console.log('Condition evaluated to ' + conditionResult)\n        }\n        if (conditionResult) {\n            this.executeStatement(right)\n        }\n    }\n\n    executeStatement(expression) {\n        if (expression.invoke) {\n            const argValues = expression.invoke !== 'conditional' ? expression.args.map(e => this.executeStatement(e)) : expression.args\n            const result = this.callMethod(expression.invoke, argValues)\n            if (result !== undefined && this.debug) {\n                console.log('Method returned: ' + result)\n            }\n            return result\n        } else if (expression.comparator) {\n            const left = this.executeStatement(expression.left)\n            const right = this.executeStatement(expression.right)\n            if (expression.comparator === '=') {\n                return left === right\n            } else if (expression.comparator === '!=') {\n                return left !== right\n            } else if (expression.comparator === '<') {\n                return left < right\n            } else if (expression.comparator === '>') {\n                return left > right\n            } else {\n                console.log(expression)\n                throw new Error('Unknown comparator: ' + expression.comparator)\n            }\n        } else if (!isNaN(expression)) { // just a number\n            return expression\n        } else if (expression.jump) {\n            this.programCounter = this.labelsByName[expression.jump]\n            if (this.programCounter === undefined) {\n                throw new Error('Label \\'' + expression.jump + '\\' is unknown!')\n            }\n            if (this.debug) {\n                console.log('Jumping to label \\'' + expression.jump + '\\' in line ' + this.programCounter)\n            }\n        } else {\n            console.log(expression)\n            throw new Error('Unknown expression in line ' + this.programCounter + ': ' + expression)\n        }\n    }\n\n    execute(debug = false) {\n        this.debug = debug\n        if (this.halted) return\n        try {\n            if (this.debug) {\n                console.log('Executing following script\\n' + this.scriptLines.join('\\n'))\n                console.log('Registers: ' + this.registers)\n            }\n            for (this.programCounter = 0; this.programCounter < this.statements.length; this.programCounter++) {\n                const statement = this.statements[this.programCounter]\n                if (this.debug) {\n                    console.log(this.programCounter + ': ' + this.scriptLines[this.programCounter])\n                    console.log(statement)\n                }\n                if (!statement.label) { // do nothing for label markers\n                    this.executeStatement(statement)\n                }\n            }\n        } catch (e) {\n            if (e === 'Stop') {\n                return\n            }\n            console.error(e)\n            console.error('FATAL ERROR! Script execution failed! You can NOT win anymore!')\n            this.halted = true\n            debugger;\n        }\n    }\n\n}\n","import { NerpRunner } from './NerpRunner'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class NerpParser {\n\n    static parse(nerpScript: string): NerpRunner {\n        const nerpRunner = new NerpRunner()\n        const lines = nerpScript.split('\\n').map(l => l\n            .split('//')[0].trim() // before comment starts\n            .split(';')[0].trim() // before preprocessor comment starts\n            .replace(/_/g, '') // some preprocessor macros use this prefix\n            .replace(/\\bTRUE \\? /, '') // some weird requirement of the original language\n            .replace(/[{}]/g, ''), // duplicate limit for macros using labels too\n        )\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c]\n            if (line.length < 1) {\n                continue // ignore empty lines, but important for macro closure\n            }\n            if (line.startsWith('#include ')) { // include other nerp scripts/headers\n                const includeName = line.replace(/^#include /, '').trim().slice(1, -1)\n                if (includeName === 'nerpdef.h') {\n                    // trivial default header file, is applied by search and replace above\n                    // see https://github.com/jgrip/legorr/blob/master/nerpdef.h\n                    continue\n                }\n                const includedRunner = NerpParser.parse(ResourceManager.getResource('Levels/' + includeName))\n                if (!includedRunner || !includedRunner.scriptLines || includedRunner.scriptLines.length < 1) {\n                    throw 'Can\\'t include unknown nerp script: ' + line\n                }\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(includedRunner.scriptLines)\n                // copy macros from included file to current file\n                nerpRunner.macrosByName = Object.assign({}, nerpRunner.macrosByName, includedRunner.macrosByName)\n            } else if (line.startsWith('#define ')) { // parse C++ preprocessor macro\n                const firstLine = line.replace(/^#define /, '').split(' ')\n                const macroLines = [firstLine.splice(1).join(' ').replace(/\\\\$/, '').trim()]\n                let mLine = line\n                let append = false\n                while (mLine.endsWith('\\\\') && c < lines.length - 1) {\n                    c++\n                    mLine = lines[c].trim()\n                    const macroLine = mLine.replace(/\\\\$/, '').trim()\n                    if (macroLine.length > 0) {\n                        if (append) {\n                            append = false\n                            macroLines[macroLines.length - 1] += macroLine\n                        } else {\n                            macroLines.push(macroLine)\n                        }\n                    }\n                    if (mLine.match(/:\\\\$/)) {\n                        append = true\n                    }\n                }\n                const macroCall = firstLine[0].split('(')\n                nerpRunner.macrosByName[macroCall[0]] = {\n                    args: macroCall[1].replace(/\\)$/, '').split(','),\n                    lines: macroLines,\n                }\n            } else {\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(this.replaceMacros(nerpRunner.macrosByName, line))\n            }\n        }\n        // somewhat precompile the script and create syntax tree\n        // must be done in separate block to make sure the script is complete and we can refer/rely on line numbers for label jumps\n        for (let c = 0; c < nerpRunner.scriptLines.length; c++) {\n            const line = nerpRunner.scriptLines[c]\n            nerpRunner.statements[c] = line.replace(/\\(\\)/g, '') // now the macros are applied and obsolete empty \"()\" can be removed\n                .split(' ? ')\n            const labelMatch = line.match(/(\\S+):/)\n            if (nerpRunner.statements[c].length === 2) { // line contains condition (primary operator)\n                nerpRunner.statements[c] = {\n                    invoke: 'conditional',\n                    args: [this.preProcess(nerpRunner.statements[c][0]), this.preProcess(nerpRunner.statements[c][1])],\n                }\n            } else if (labelMatch) { // keep label line number for later usage\n                const labelName = labelMatch[1].toLowerCase()\n                nerpRunner.labelsByName[labelName] = c\n                nerpRunner.statements[c] = {label: labelName}\n            } else if (nerpRunner.statements[c].length === 1) { // just a call\n                nerpRunner.statements[c] = this.preProcess(nerpRunner.statements[c][0])\n            } else { // lines contains more than 1 condition statement\n                throw 'Can\\'t deal with line: ' + line\n            }\n        }\n        return nerpRunner\n    }\n\n    static replaceMacros(macrosByName, line): string[] {\n        // check if this line contains a macro\n        const split = line.split('(') // not a very stable check though...\n        const macro = macrosByName[split[0]]\n        if (macro) {\n            const argValues = split.splice(1).join('(').slice(0, -1).split(',')\n            if (argValues.length !== macro.args.length) {\n                throw 'Invalid number of args provided for macro in line ' + line\n            }\n            const macroLines = []\n            macro.lines.forEach((line) => {\n                for (let c = 0; c < argValues.length; c++) {\n                    line = line.replace(new RegExp('\\\\b' + macro.args[c] + '\\\\b'), argValues[c])\n                }\n                macroLines.push(...(this.replaceMacros(macrosByName, line)))\n            })\n            return macroLines\n        } else {\n            return [line]\n        }\n    }\n\n    static preProcess(expression) {\n        expression = expression.trim().replace(/^_/, '') // remove whitespace and leading underscore\n        const number = parseInt(expression)\n        if (!isNaN(number)) {\n            return number\n        }\n        const opSplit = expression.split(/ (=) | (!=) | (>) | (<) /).filter(e => e !== undefined)\n        const brackets = expression.match(/^(.+)\\((.+)\\)$/)\n        const spaceSplit = expression.split(' ')\n        const labelMatch = expression.match(/([^:]+):$/)\n        const jumpMatch = expression.match(/^:([^:]+)$/)\n        if (opSplit.length === 3) { // expression contains secondary operator\n            return {left: this.preProcess(opSplit[0]), comparator: opSplit[1], right: this.preProcess(opSplit[2])}\n        } else if (brackets) {\n            const args = brackets[2].split(',').map(a => this.preProcess(a))\n            return {invoke: brackets[1], args: args}\n        } else if (spaceSplit.length > 1) { // space split must be the very last since most expressions contain space\n            const args = spaceSplit.length === 2 ? [this.preProcess(spaceSplit[1])] : spaceSplit.splice(1).map(a => this.preProcess(a))\n            return {invoke: spaceSplit[0], args: args}\n        } else if (labelMatch) { // label definition\n            return {label: labelMatch[1]}\n        } else if (jumpMatch) { // jump to label\n            return {jump: jumpMatch[1].toLowerCase()}\n        } else { // function call without args\n            if (expression.match(/[ =?><!]/)) {\n                throw 'Invalid expression given, parsing must have failed before somewhere'\n            }\n            return {invoke: expression, args: []}\n        }\n    }\n\n}\n","import { LevelPrioritiesEntryConfig } from '../../../cfg/LevelsCfg'\nimport { PublicJob } from './Job'\n\nexport class PriorityList {\n\n    levelDefault: PriorityEntry[] = []\n    current: PriorityEntry[] = []\n\n    constructor(priorities: LevelPrioritiesEntryConfig[]) {\n        this.levelDefault = priorities\n        this.reset()\n    }\n\n    toggle(index: number) {\n        this.current[index].enabled = !this.current[index].enabled\n    }\n\n    upOne(index: number) {\n        const tmp = this.current[index]\n        this.current[index] = this.current[index + 1]\n        this.current[index + 1] = tmp\n    }\n\n    reset() {\n        this.current = this.levelDefault.map(entry => new PriorityEntry(entry)) // deep copy required\n    }\n\n    pushToTop(index: number) {\n        const element = this.current[index]\n        for (let c = index; c > 0; c--) {\n            this.current[c] = this.current[c - 1]\n        }\n        this.current[0] = element\n    }\n\n    getPriority(job: PublicJob) {\n        return this.current[job.getPriorityIdentifier()] || 0\n    }\n\n}\n\nexport class PriorityEntry {\n\n    key: string\n    enabled: boolean\n\n    constructor(levelPriorityEntry: LevelPrioritiesEntryConfig) {\n        this.key = levelPriorityEntry.key\n        this.enabled = levelPriorityEntry.enabled\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class MoveJob extends Job {\n\n    target: Vector2\n\n    constructor(target: Vector2) {\n        super(JobType.MOVE)\n        this.target = target\n    }\n\n    getWorkplaces(): Vector2[] {\n        return [this.target.clone()]\n    }\n\n}\n","import { SceneManager } from './SceneManager'\nimport { TerrainLoader } from './TerrainLoader'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { Color, MathUtils, Raycaster, Vector2, Vector3 } from 'three'\nimport { clearIntervalSafe, getRandom } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { CavernDiscovered, EntityAddedEvent, EntityType, JobCreateEvent, RaiderRequested, SpawnDynamiteEvent, SpawnMaterialEvent } from '../event/WorldEvents'\nimport { Raider } from './model/Raider'\nimport { GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { CollectableEntity } from './model/collect/CollectableEntity'\nimport { CHECK_SPANW_RAIDER_TIMER, TILESIZE } from '../main'\nimport { EntityDeselected } from '../event/LocalEvents'\nimport { ObjectListLoader } from './ObjectListLoader'\nimport { Dynamite } from './model/collect/Dynamite'\nimport { DynamiteJob } from '../game/model/job/SurfaceJob'\nimport { NerpParser } from '../core/NerpParser'\nimport { NerpRunner } from '../core/NerpRunner'\nimport { GameScreen } from '../screen/GameScreen'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { PriorityList } from '../game/model/job/PriorityList'\nimport { CollectJob } from '../game/model/job/CollectJob'\nimport { MoveJob } from '../game/model/job/MoveJob'\nimport { RaiderActivity } from './model/activities/RaiderActivity'\nimport degToRad = MathUtils.degToRad\n\nexport class WorldManager {\n\n    sceneManager: SceneManager\n    spawnRaiderInterval = null\n    nerpRunner: NerpRunner = null\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.sceneManager = new SceneManager(canvas)\n        EventBus.registerEventListener(EntityDeselected.eventKey, () => GameState.selectEntities([]))\n        EventBus.registerEventListener(RaiderRequested.eventKey, (event: RaiderRequested) => {\n            GameState.requestedRaiders = event.numRequested\n            if (GameState.requestedRaiders > 0 && !this.spawnRaiderInterval) {\n                this.spawnRaiderInterval = setInterval(this.checkSpawnRaiders.bind(this), CHECK_SPANW_RAIDER_TIMER)\n            }\n        })\n        EventBus.registerEventListener(SpawnDynamiteEvent.eventKey, (event: SpawnDynamiteEvent) => {\n            const targetBuilding = GameState.getClosestBuildingByType(event.surface.getCenterWorld(), Building.TOOLSTATION)\n            if (!targetBuilding) {\n                throw 'Could not find toolstation to spawn dynamite'\n            }\n            const pos = targetBuilding.getDropPosition() // FIXME use ToolNullName from cfg\n            const dynamite = new Dynamite()\n            dynamite.targetSurface = event.surface\n            dynamite.worldMgr = this\n            dynamite.group.position.copy(pos)\n            this.sceneManager.scene.add(dynamite.group)\n            EventBus.publishEvent(new JobCreateEvent(new DynamiteJob(event.surface, dynamite)))\n        })\n        EventBus.registerEventListener(SpawnMaterialEvent.eventKey, (event: SpawnMaterialEvent) => {\n            this.addCollectable(event.collectable, event.spawnPosition)\n        })\n        EventBus.registerEventListener(CavernDiscovered.eventKey, () => {\n            GameState.discoveredCaverns++\n        })\n    }\n\n    setup(levelConf: LevelEntryCfg, gameScreen: GameScreen) {\n        GameState.levelFullName = levelConf.fullName\n        GameState.totalCaverns = levelConf.reward?.quota?.caverns || 0\n        GameState.rewardConfig = levelConf.reward\n        GameState.priorityList = new PriorityList(levelConf.priorities)\n\n        const ambientRgb = ResourceManager.cfg('Main', 'AmbientRGB') || [10, 10, 10]\n        const maxAmbRgb = Math.min(255, Math.max(0, ...ambientRgb))\n        const normalizedRgb = ambientRgb.map(v => v / (maxAmbRgb ? maxAmbRgb : 1))\n        const ambientColor = new Color(normalizedRgb[0], normalizedRgb[1], normalizedRgb[2])\n        this.sceneManager.setupScene(ambientColor)\n\n        // create terrain mesh and add it to the scene\n        this.sceneManager.terrain = TerrainLoader.loadTerrain(levelConf, this)\n        this.sceneManager.scene.add(this.sceneManager.terrain.floorGroup)\n\n        // load in non-space objects next\n        const objectListConf = ResourceManager.getResource(levelConf.oListFile)\n        ObjectListLoader.loadObjectList(this, objectListConf)\n\n        // load nerp script\n        this.nerpRunner = NerpParser.parse(ResourceManager.getResource(levelConf.nerpFile))\n        this.nerpRunner.messages.push(...(ResourceManager.getResource(levelConf.nerpMessageFile)))\n        this.nerpRunner.onLevelComplete = () => gameScreen.onLevelEnd()\n\n        // gather level start details for game result score calculation\n        GameState.totalDiggables = this.sceneManager.terrain.surfaces.filter((r) => r.forEach((s) => s.isDigable())).length\n        GameState.totalCrystals = 0\n        this.sceneManager.terrain.surfaces.forEach((r) => r.forEach((s) => GameState.totalCrystals += s.containedCrystals))\n        GameState.totalOres = 0\n        this.sceneManager.terrain.surfaces.forEach((r) => r.forEach((s) => GameState.totalOres += s.containedOres))\n    }\n\n    start() {\n        this.sceneManager.startScene()\n        this.nerpRunner?.startExecution()\n        GameState.levelStartTime = Date.now()\n    }\n\n    stop() {\n        GameState.levelStopTime = Date.now()\n        this.nerpRunner?.pauseExecution()\n        this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n        GameState.spiders.forEach((m) => m.onLevelEnd())\n        GameState.bats.forEach((b) => b.onLevelEnd())\n        GameState.remainingDiggables = 0\n        this.sceneManager?.terrain?.surfaces?.forEach((r) => r.forEach((s) => GameState.remainingDiggables += s.isDigable() ? 1 : 0))\n        this.sceneManager.disposeScene()\n    }\n\n    resize(width: number, height: number) {\n        if (this.sceneManager) this.sceneManager.renderer.setSize(width, height)\n    }\n\n    getTerrainIntersectionPoint(rx: number, ry: number): Vector3 {\n        if (!this.sceneManager.terrain) return null\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.sceneManager.camera)\n        const intersects = raycaster.intersectObjects(this.sceneManager.terrain.floorGroup.children)\n        return intersects.length > 0 ? intersects[0].point : null\n    }\n\n    setTorchPosition(position: Vector2) {\n        this.sceneManager.cursorTorchlight.position.x = position.x\n        this.sceneManager.cursorTorchlight.position.y = this.getFloorHeight(position.x, position.y) + 2 * TILESIZE\n        this.sceneManager.cursorTorchlight.position.z = position.y\n    }\n\n    getFloorHeight(worldX: number, worldZ: number): number { // FIXME use interpolation to determine ground level height\n        const surface = this.sceneManager.terrain.getSurfaceFromWorldXZ(worldX, worldZ)\n        if (!surface) return 0\n        return surface.getFloorHeight(worldX, worldZ)\n    }\n\n    getTerrainHeight(worldX: number, worldZ: number): number {\n        const raycaster = new Raycaster(new Vector3(Number(worldX), 3 * TILESIZE, Number(worldZ)), new Vector3(0, -1, 0))\n        const intersect = raycaster.intersectObject(this.sceneManager.terrain.floorGroup, true)\n        if (intersect.length > 0) {\n            return intersect[0].point.y\n        } else {\n            console.warn('could not determine terrain height for ' + worldX + '/' + worldZ)\n            return 0\n        }\n    }\n\n    addCollectable(collectable: CollectableEntity, world: Vector2) {\n        collectable.worldMgr = this\n        collectable.group.position.set(world.x, this.getFloorHeight(world.x, world.y), world.y)\n        collectable.group.visible = this.sceneManager.terrain.getSurfaceFromWorld(collectable.group.position).discovered\n        this.sceneManager.scene.add(collectable.group)\n        if (collectable.group.visible) {\n            GameState.collectables.push(collectable)\n            EventBus.publishEvent(new JobCreateEvent(new CollectJob(collectable)))\n        } else {\n            GameState.collectablesUndiscovered.push(collectable)\n        }\n        return collectable\n    }\n\n    checkSpawnRaiders() {\n        if (GameState.requestedRaiders < 1) {\n            this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n            return\n        }\n        if (GameState.raiders.length >= GameState.getMaxRaiders()) return\n        const spawnBuildings = GameState.getBuildingsByType(Building.TOOLSTATION, Building.TELEPORT_PAD).filter((b) => !b.spawning)\n        for (let c = 0; c < spawnBuildings.length && GameState.requestedRaiders > 0; c++) {\n            EventBus.publishEvent(new RaiderRequested(GameState.requestedRaiders - 1))\n            const station = spawnBuildings[c]\n            station.spawning = true\n            const raider = new Raider()\n            raider.worldMgr = this\n            raider.setActivity(RaiderActivity.TeleportIn, () => {\n                station.spawning = false\n                raider.setActivity(RaiderActivity.Stand)\n                raider.createPickSphere()\n                const walkOutPos = station.getPosition2D().add(new Vector2(0, TILESIZE * 3 / 4 + getRandom(TILESIZE / 2))\n                    .rotateAround(new Vector2(0, 0), station.getHeading() + degToRad(-10 + getRandom(20))))\n                raider.setJob(new MoveJob(walkOutPos))\n                GameState.raiders.push(raider)\n                EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, raider))\n            })\n            raider.group.position.copy(station.group.position).add(new Vector3(0, 0, TILESIZE / 2).applyEuler(station.group.rotation))\n            raider.group.rotation.copy(station.group.rotation)\n            this.sceneManager.scene.add(raider.group)\n        }\n    }\n\n}\n","import { ScreenLayer } from '../../screen/ScreenLayer'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventManager'\nimport { WorldManager } from '../../scene/WorldManager'\n\nexport class SelectionLayer extends ScreenLayer {\n\n    worldManager: WorldManager\n    selectStart: { x: number, y: number } = null\n\n    constructor() {\n        super(true)\n    }\n\n    reset() {\n        super.reset()\n        this.selectStart = null\n    }\n\n    setWorldManager(worldManager: WorldManager) {\n        this.worldManager = worldManager\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        if (eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.startSelection(cx, cy)\n        } else if (eventEnum === POINTER_EVENT.MOVE) {\n            return this.changeSelection(cx, cy)\n        } else if (eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.selectEntities(cx, cy)\n        }\n        return false\n    }\n\n    startSelection(screenX: number, screenY: number) {\n        this.selectStart = {x: screenX, y: screenY}\n        return true\n    }\n\n    changeSelection(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        this.context.strokeStyle = 'rgba(128, 192, 192, 0.5)'\n        this.context.lineWidth = 2\n        this.context.strokeRect(this.selectStart.x, this.selectStart.y, screenX - this.selectStart.x, screenY - this.selectStart.y)\n        return true\n    }\n\n    selectEntities(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        const r1x = (this.selectStart.x / this.canvas.width) * 2 - 1\n        const r1y = -(this.selectStart.y / this.canvas.height) * 2 + 1\n        const r2x = (screenX / this.canvas.width) * 2 - 1\n        const r2y = -(screenY / this.canvas.height) * 2 + 1\n        if (Math.abs(screenX - this.selectStart.x) < 5 && Math.abs(screenY - this.selectStart.y) < 5) {\n            const x = (this.selectStart.x + screenX) / this.canvas.width - 1\n            const y = -(this.selectStart.y + screenY) / this.canvas.height + 1\n            this.worldManager.sceneManager.selectEntitiesByRay(x, y)\n        } else {\n            this.worldManager.sceneManager.selectEntitiesInFrustum(r1x, r1y, r2x, r2y)\n        }\n        this.selectStart = null\n        return true\n    }\n\n}\n","import { ScreenLayer } from '../../screen/ScreenLayer'\nimport { WorldManager } from '../../scene/WorldManager'\nimport { SelectionType } from '../model/Selectable'\nimport { GameState } from '../model/GameState'\nimport { Raider } from '../../scene/model/Raider'\nimport { EventBus } from '../../event/EventBus'\nimport { JobCreateEvent } from '../../event/WorldEvents'\nimport { Surface } from '../../scene/model/map/Surface'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { FulfillerEntity } from '../../scene/model/FulfillerEntity'\nimport { SurfaceJob, SurfaceJobType } from '../model/job/SurfaceJob'\nimport { KEY_EVENT, MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventManager'\nimport { DEV_MODE } from '../../main'\nimport { MoveJob } from '../model/job/MoveJob'\nimport { Vector2 } from 'three'\n\nexport class GameLayer extends ScreenLayer {\n\n    private worldMgr: WorldManager\n    private rightDown: { x: number, y: number } = {x: 0, y: 0}\n\n    constructor() {\n        super(false, false)\n    }\n\n    reset() {\n        super.reset()\n        this.rightDown = {x: 0, y: 0}\n    }\n\n    setWorldManager(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (eventEnum === POINTER_EVENT.MOVE) {\n            const intersectionPoint = this.getTerrainPositionFromEvent(event)\n            if (intersectionPoint) this.worldMgr.setTorchPosition(intersectionPoint)\n        } else if (eventEnum === POINTER_EVENT.UP && event.button === MOUSE_BUTTON.SECONDARY) {\n            const downUpDistance = Math.abs(event.x - this.rightDown.x) + Math.abs(event.y - this.rightDown.y)\n            if (downUpDistance < 3 && (GameState.selectionType === SelectionType.PILOT || GameState.selectionType === SelectionType.GROUP)) {\n                // TODO check for collectable entity first\n                const intersectionPoint = this.getTerrainPositionFromEvent(event)\n                if (intersectionPoint) {\n                    const surface = this.worldMgr.sceneManager.terrain.getSurfaceFromWorldXZ(intersectionPoint.x, intersectionPoint.y)\n                    if (surface) {\n                        if (surface.isDrillable()) {\n                            this.createSurfaceJob(SurfaceJobType.DRILL, surface, intersectionPoint)\n                        } else if (surface.hasRubble()) {\n                            this.createSurfaceJob(SurfaceJobType.CLEAR_RUBBLE, surface, intersectionPoint)\n                        } else if (surface.isWalkable()) {\n                            GameState.selectedEntities.forEach((raider: Raider) => raider.setJob(new MoveJob(intersectionPoint)))\n                            if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n                        }\n                    }\n                }\n            }\n        } else if (eventEnum === POINTER_EVENT.DOWN && event.button === MOUSE_BUTTON.SECONDARY) {\n            this.rightDown.x = event.x\n            this.rightDown.y = event.y\n        }\n        this.canvas.dispatchEvent(event)\n        return true\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        if (DEV_MODE && eventEnum === KEY_EVENT.UP) {\n            if (GameState.selectionType === SelectionType.SURFACE) {\n                GameState.selectedEntities.forEach((s: Surface) => {\n                    if (event.key === 'c') {\n                        if (!s.surfaceType.floor) s.collapse()\n                    } else if (event.key === 'f') {\n                        const t = s.terrain.findFallInTarget(s.x, s.y)\n                        if (!s.surfaceType.floor) s.createFallin(t[0], t[1])\n                    }\n                })\n                EventBus.publishEvent(new EntityDeselected())\n                return true\n            }\n        }\n        return false\n    }\n\n    createSurfaceJob(surfaceJobType: SurfaceJobType, surface: Surface, intersectionPoint: Vector2) {\n        const surfJob = new SurfaceJob(surfaceJobType, surface)\n        GameState.selectedEntities.forEach((e: FulfillerEntity) => {\n            if (surfJob.isQualified(e)) {\n                e.setJob(surfJob)\n            } else if (surface.isWalkable()) {\n                e.setJob(new MoveJob(intersectionPoint))\n            }\n        })\n        EventBus.publishEvent(new JobCreateEvent(surfJob))\n        surface.updateJobColor()\n        if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n    }\n\n    getTerrainPositionFromEvent(event): Vector2 {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        const intersectionPoint = this.worldMgr.getTerrainIntersectionPoint(rx, ry)\n        return intersectionPoint ? new Vector2(intersectionPoint.x, intersectionPoint.z) : null\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        this.canvas.dispatchEvent(event)\n        return true\n    }\n\n}\n","export class BaseElement {\n\n    parent: BaseElement = null\n    x: number = 0\n    y: number = 0\n    relX: number = 0\n    relY: number = 0\n    width: number = 0\n    height: number = 0\n    children: BaseElement[] = []\n    hidden: boolean = false\n    disabled: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n\n    constructor(parent: BaseElement = null) {\n        this.parent = parent\n    }\n\n    reset() {\n        this.hidden = false\n        this.disabled = false\n        this.hover = false\n        this.pressed = false\n        this.children.forEach((c) => c.reset())\n    }\n\n    addChild<T extends BaseElement>(child: T): T {\n        child.parent = this\n        this.children.push(child)\n        child.updatePosition()\n        return child\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n    }\n\n    drawTooltip(context: CanvasRenderingContext2D) {\n    }\n\n    onClick() {\n    }\n\n    isInactive(): boolean {\n        for (let parent = this.parent; !!parent; parent = parent.parent) if (parent.isInactive()) return true\n        return this.hidden || this.disabled\n    }\n\n    hide() {\n        this.hidden = true\n        this.children.forEach((child) => child.hide())\n    }\n\n    show() {\n        this.hidden = false\n        this.children.forEach((child) => child.show())\n    }\n\n    updatePosition() {\n        this.x = this.parent ? this.parent.x + this.relX : this.relX\n        this.y = this.parent ? this.parent.y + this.relY : this.relY\n        this.children.forEach((child) => child.updatePosition())\n    }\n\n    isInRect(cx, cy) {\n        return cx >= this.x && cy >= this.y && cx < this.x + this.width && cy < this.y + this.height\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = this.pressed && this.hover\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => stateChanged = child.checkHover(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.pressed !== inRect\n        this.pressed = inRect\n        this.children.forEach((child) => stateChanged = child.checkClick(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        if (inRect && this.pressed) this.onClick()\n        let stateChanged = false\n        this.children.forEach((child) => stateChanged = child.checkRelease(cx, cy) || stateChanged)\n        stateChanged = this.pressed || stateChanged\n        this.pressed = false\n        return stateChanged\n    }\n\n    release(): boolean {\n        let stateChanged = this.pressed || this.hover\n        this.pressed = false\n        this.hover = false\n        this.children.forEach((child) => stateChanged = child.release() || stateChanged)\n        return stateChanged\n    }\n\n    notifyRedraw() {\n        if (this.parent) this.parent.notifyRedraw()\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\nimport { NATIVE_FRAMERATE, PANEL_ANIMATION_MULTIPLIER } from '../../../main'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { clearTimeoutSafe } from '../../../core/Util'\n\nexport class Panel extends BaseElement {\n\n    img: HTMLCanvasElement = null\n    xOut: number = 0\n    yOut: number = 0\n    xIn: number = 0\n    yIn: number = 0\n    animationTimeout = null\n    movedIn: boolean = true // xIn, yIn is the collapsed position out of screen\n\n    constructor(panelCfg?: PanelCfg) {\n        super()\n        if (panelCfg) {\n            this.img = ResourceManager.getImage(panelCfg.filename)\n            this.xOut = panelCfg.xOut\n            this.yOut = panelCfg.yOut\n            this.xIn = panelCfg.xIn\n            this.yIn = panelCfg.yIn\n            this.relX = this.xIn\n            this.relY = this.yIn\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.relX = this.xIn\n        this.relY = this.yIn\n        this.movedIn = true\n        this.updatePosition()\n    }\n\n    isInactive(): boolean {\n        return this.animationTimeout || super.isInactive()\n    }\n\n    updateAnimation(targetX: number, targetY: number, speed: number, onDone: () => any) {\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= speed && Math.abs(diffY) <= speed) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * speed)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * speed)\n            const panel = this\n            this.animationTimeout = setTimeout(() => panel.updateAnimation(targetX, targetY, speed, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    setMovedIn(movedIn: boolean, onDone: () => any = null) {\n        if (this.movedIn !== movedIn) {\n            this.toggleState(onDone)\n        } else if (onDone) {\n            onDone()\n        }\n    }\n\n    toggleState(onDone: () => any = null) {\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        if (this.movedIn) {\n            this.movedIn = false\n            this.updateAnimation(this.xOut, this.yOut, PANEL_ANIMATION_MULTIPLIER, onDone)\n        } else {\n            this.movedIn = true\n            this.updateAnimation(this.xIn, this.yIn, PANEL_ANIMATION_MULTIPLIER, onDone)\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.img) context.drawImage(this.img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class Button extends BaseElement {\n\n    buttonType: string = null\n    imgNormal: HTMLCanvasElement = null\n    imgHover: HTMLCanvasElement = null\n    imgPressed: HTMLCanvasElement = null\n    imgDisabled: HTMLCanvasElement = null\n    tooltip: string = null\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent)\n        this.buttonType = btnCfg.buttonType\n        this.imgNormal = ResourceManager.getImageOrNull(btnCfg.normalFile)\n        this.imgHover = ResourceManager.getImageOrNull(btnCfg.highlightFile)\n        this.imgPressed = ResourceManager.getImageOrNull(btnCfg.pressedFile)\n        this.imgDisabled = ResourceManager.getImageOrNull(btnCfg.disabledFile)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width || this.imgNormal?.width || this.imgPressed?.width\n        this.height = btnCfg.height || this.imgNormal?.height || this.imgPressed?.height\n        this.tooltip = btnCfg.tooltip\n        this.updatePosition()\n    }\n\n    onClick() {\n        console.log('button pressed: ' + this.buttonType)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled || this.imgPressed || this.imgNormal\n        } else if (this.pressed) {\n            img = this.imgPressed || this.imgNormal\n        } else if (this.hover) {\n            img = this.imgHover || this.imgNormal\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { BaseElement } from '../base/BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class SideBarLabel extends BaseElement {\n\n    tooltip: string\n    label: string\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg, label: string) {\n        super(parent)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width\n        this.height = btnCfg.height\n        this.tooltip = btnCfg.tooltip\n        this.label = label\n        this.updatePosition()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.textAlign = 'center'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.label, this.x + this.width / 2, this.y + this.height - 2)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { GameState } from '../../model/GameState'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { CollectEvent, SpawnMaterialEvent } from '../../../event/WorldEvents'\nimport { CollectableType } from '../../../scene/model/collect/CollectableEntity'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { SideBarLabel } from './SideBarLabel'\n\nexport class PanelCrystalSideBar extends Panel {\n\n    labelOre: SideBarLabel\n    labelCrystal: SideBarLabel\n    imgNoCrystal: HTMLCanvasElement\n    imgSmallCrystal: HTMLCanvasElement\n    imgUsedCrystal: HTMLCanvasElement\n    imgOre: HTMLCanvasElement\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonCrystalSideBarCfg) {\n        super(panelCfg)\n        this.labelOre = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarOre, GameState.totalOre.toString()))\n        this.labelCrystal = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarCrystals, GameState.numCrystal.toString()))\n        this.imgNoCrystal = ResourceManager.getImage('Interface/RightPanel/NoSmallCrystal.bmp')\n        this.imgSmallCrystal = ResourceManager.getImage('Interface/RightPanel/SmallCrystal.bmp')\n        this.imgUsedCrystal = ResourceManager.getImage('Interface/RightPanel/UsedCrystal.bmp')\n        this.imgOre = ResourceManager.getImage('Interface/RightPanel/CrystalSideBar_Ore.bmp')\n        EventBus.registerEventListener(CollectEvent.eventKey, (event: CollectEvent) => {\n            this.updateQuantities(event.collectType)\n        })\n        EventBus.registerEventListener(SpawnMaterialEvent.eventKey, (event: SpawnMaterialEvent) => {\n            this.updateQuantities(event.collectable.getCollectableType())\n        })\n    }\n\n    updateQuantities(type: CollectableType) {\n        if (type === CollectableType.CRYSTAL || type === CollectableType.ORE || type === CollectableType.BRICK) {\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        this.labelOre.label = GameState.totalOre.toString()\n        this.labelCrystal.label = GameState.numCrystal.toString()\n        super.onRedraw(context)\n        // draw crystals\n        let curX = this.x + this.img.width - 8\n        let curY = this.y + this.img.height - 34\n        for (let c = 0; (GameState.neededCrystals < 1 || c < Math.max(GameState.neededCrystals, GameState.numCrystal)) && curY >= Math.max(this.imgNoCrystal.height, this.imgSmallCrystal.height, this.imgUsedCrystal.height); c++) {\n            let imgCrystal = this.imgNoCrystal\n            if (GameState.usedCrystals > c) {\n                imgCrystal = this.imgUsedCrystal\n            } else if (GameState.numCrystal > c) {\n                imgCrystal = this.imgSmallCrystal\n            }\n            curY -= imgCrystal.height\n            context.drawImage(imgCrystal, curX - imgCrystal.width / 2, curY)\n        }\n        // draw ores\n        curX = this.x + this.img.width - 21\n        curY = this.y + this.img.height - 42\n        for (let i = 0; i < GameState.numOre && curY >= this.imgOre.height; ++i) {\n            curY -= this.imgOre.height\n            context.drawImage(this.imgOre, curX - this.imgOre.width / 2, curY)\n        }\n    }\n\n}\n\nexport class ButtonCrystalSideBarCfg extends BaseConfig {\n\n    panelButtonCrystalSideBarOre: ButtonCfg = null\n    panelButtonCrystalSideBarCrystals: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonInfoDockCfg extends BaseConfig {\n\n    panelButtonInfoDockGoto: ButtonCfg = null\n    panelButtonInfoDockClose: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonPriorityListCfg extends BaseConfig {\n\n    panelButtonPriorityListDisable: ButtonCfg[] = []\n    panelButtonPriorityListUpOne: ButtonCfg[] = []\n    panelButtonPriorityListClose: ButtonCfg = null // not used in the game\n    panelButtonPriorityListReset: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName.match(/panelButtonPriorityListDisable\\d+/i)) {\n            this.panelButtonPriorityListDisable.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else if (lCfgKeyName.match(/panelButtonPriorityListUpOne\\d+/i)) {\n            this.panelButtonPriorityListUpOne.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else {\n            return super.assignValue(objKey, lCfgKeyName, cfgValue)\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonTopCfg extends BaseConfig {\n\n    panelButtonTopPanelCallToArms: ButtonCfg = null\n    panelButtonTopPanelOptions: ButtonCfg = null\n    panelButtonTopPanelPriorities: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ButtonRadarCfg } from '../game/gui/radar/RadarPanel'\nimport { ButtonCrystalSideBarCfg } from '../game/gui/sidebar/PanelCrystalSideBar'\nimport { ButtonInfoDockCfg } from '../game/gui/infodock/ButtonInfoDockCfg'\nimport { ButtonPriorityListCfg } from '../game/gui/toppanel/ButtonPriorityListCfg'\nimport { ButtonTopCfg } from '../game/gui/toppanel/ButtonTopCfg'\n\nexport class ButtonsCfg extends BaseConfig {\n\n    panelRadar: ButtonRadarCfg = null\n    panelCrystalSideBar: ButtonCrystalSideBarCfg = null\n    panelTopPanel: ButtonTopCfg = null\n    panelInformation: ButtonInformationCfg = null\n    panelPriorityList: ButtonPriorityListCfg = null\n    panelCameraControl: ButtonCameraControlCfg = null\n    panelInfoDock: ButtonInfoDockCfg = null\n    panelEncyclopedia: any = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        const btnCfgValue = {}\n        cfgValue.forEach(arr => btnCfgValue[arr[0]] = arr)\n        if (lCfgKeyName === 'panelRadar'.toLowerCase()) {\n            return new ButtonRadarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCrystalSideBar'.toLowerCase()) {\n            return new ButtonCrystalSideBarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelTopPanel'.toLowerCase()) {\n            return new ButtonTopCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInformation'.toLowerCase()) {\n            return new ButtonInformationCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelPriorityList'.toLowerCase()) {\n            return new ButtonPriorityListCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCameraControl'.toLowerCase()) {\n            return new ButtonCameraControlCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInfoDock'.toLowerCase()) {\n            return new ButtonInfoDockCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelEncyclopedia'.toLowerCase()) {\n            return null // not used in the game\n        } else {\n            return btnCfgValue\n        }\n    }\n\n}\n\nexport class ButtonInformationCfg extends BaseConfig {\n\n    panelButtonInformationToggle: ButtonCfg = null\n    panelButtonInformationFunction: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n\nexport class ButtonCameraControlCfg extends BaseConfig {\n\n    panelButtonCameraControlZoomIn: ButtonCfg = null\n    panelButtonCameraControlZoomOut: ButtonCfg = null\n    panelButtonCameraControlCycleBuildings: ButtonCfg = null\n    panelButtonCameraControlRotate: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n\nexport class BaseButtonCfg {\n\n    buttonType?: string = null\n    normalFile?: string = null\n    highlightFile?: string = null\n    pressedFile?: string = null\n    disabledFile?: string = null\n    relX?: number = 0\n    relY?: number = 0\n    width?: number = 0\n    height?: number = 0\n    tooltip?: string = null\n}\n\nexport class ButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 9) {\n            [this.buttonType, this.normalFile, this.highlightFile, this.pressedFile, this.relX, this.relY, this.width, this.height, this.tooltip] = cfgValue\n        } else {\n            throw 'Invalid number of arguments (' + cfgValue.length + ') given for button configuration expected 9 or 5'\n        }\n    }\n\n}\n\nexport class InfoButtonCfg extends BaseButtonCfg {\n\n    constructor(buttonImageFilename: string) {\n        super()\n        this.normalFile = buttonImageFilename\n        this.highlightFile = buttonImageFilename\n        this.pressedFile = buttonImageFilename\n        this.disabledFile = buttonImageFilename\n        this.relX = 0\n        this.relY = 0\n    }\n\n}\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { BaseConfig } from '../../../cfg/BaseConfig'\n\nexport class RadarPanel extends Panel {\n\n    fill: Panel\n    overlay: Panel\n    btnToggle: Button\n    btnMap: Button\n    btnTagged: Button\n\n    constructor(panelCfg: PanelCfg, panelFillCfg: PanelCfg, panelOverlayCfg: PanelCfg, buttonsCfg: ButtonRadarCfg) {\n        super(panelCfg)\n        this.fill = this.addChild(new Panel(panelFillCfg))\n        // fill cords given in abs, turn to rel (otherwise animation wont work)\n        this.fill.relX = this.relX - this.fill.relX\n        this.fill.relY = this.relY - this.fill.relY\n        this.overlay = this.addChild(new Panel(panelOverlayCfg))\n        // this.overlay.hide();\n        this.btnToggle = this.addChild(new Button(this, buttonsCfg.panelButtonRadarToggle))\n        this.btnToggle.onClick = () => this.toggleState()\n        this.btnMap = this.addChild(new Button(this, buttonsCfg.panelButtonRadarMapView))\n        this.btnMap.onClick = () => {\n            // this.fill.hide();\n            // this.overlay.hide();\n        }\n        this.btnTagged = this.addChild(new Button(this, buttonsCfg.panelButtonRadarTaggedObjectView))\n        this.btnTagged.onClick = () => {\n            // this.fill.show();\n            // this.overlay.show(); // TODO only show overlay, when entity selected\n        }\n    }\n\n}\n\nexport class ButtonRadarCfg extends BaseConfig {\n\n    panelButtonRadarToggle: ButtonCfg = null\n    panelButtonRadarTaggedObjectView: ButtonCfg = null\n    panelButtonRadarZoomIn: ButtonCfg = null\n    panelButtonRadarZoomOut: ButtonCfg = null\n    panelButtonRadarMapView: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class TextInfoMessage {\n\n    infoImage\n    textImage\n\n    constructor(font: BitmapFont, infoMessageEntryConfig: TextInfoMessageEntryConfig, maxWidth: number) {\n        this.textImage = font.createTextImage(infoMessageEntryConfig.text, maxWidth)\n        this.infoImage = ResourceManager.getImageOrNull(infoMessageEntryConfig.imageFilename)\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { GameState } from '../../model/GameState'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { TextInfoMessageConfig } from './TextInfoMessageConfig'\nimport { EventBus } from '../../../event/EventBus'\nimport { CrystalFoundEvent } from '../../../event/WorldLocationEvent'\nimport { TextInfoMessage } from './TextInfoMessage'\nimport { CavernDiscovered, OreFoundEvent, RaiderTrained } from '../../../event/WorldEvents'\nimport { clearTimeoutSafe } from '../../../core/Util'\n\nexport class MessagePanel extends Panel {\n\n    imgAir: HTMLCanvasElement = null\n    currentMessage: TextInfoMessage = null\n    messageTimeout = null\n\n    msgSpaceToContinue: TextInfoMessage\n    msgAirSupplyLow: TextInfoMessage\n    msgAirSupplyRunningOut: TextInfoMessage\n    msgGameCompleted: TextInfoMessage\n    msgManTrained: TextInfoMessage\n    msgUnitUpgraded: TextInfoMessage\n\n    constructor(panelCfg: PanelCfg, textInfoMessageConfig: TextInfoMessageConfig) {\n        super(panelCfg)\n        this.relX = this.xOut = this.xIn = 42\n        this.relY = this.yOut = this.yIn = 409\n        this.imgAir = ResourceManager.getImage('Interface/Airmeter/msgpanel_air_juice.bmp')\n\n        const font = ResourceManager.getDefaultFont()\n        const crystalFound = new TextInfoMessage(font, textInfoMessageConfig.textCrystalFound, this.img.width)\n        EventBus.registerEventListener(CrystalFoundEvent.eventKey, () => this.setMessage(crystalFound))\n        this.msgSpaceToContinue = new TextInfoMessage(font, textInfoMessageConfig.textSpaceToContinue, this.img.width)\n        const cavernDiscovered = new TextInfoMessage(font, textInfoMessageConfig.textCavernDiscovered, this.img.width)\n        EventBus.registerEventListener(CavernDiscovered.eventKey, () => this.setMessage(cavernDiscovered))\n        const oreFound = new TextInfoMessage(font, textInfoMessageConfig.textOreFound, this.img.width)\n        EventBus.registerEventListener(OreFoundEvent.eventKey, () => this.setMessage(oreFound))\n        this.msgAirSupplyLow = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyLow, this.img.width)\n        this.msgAirSupplyRunningOut = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyRunningOut, this.img.width)\n        this.msgGameCompleted = new TextInfoMessage(font, textInfoMessageConfig.textGameCompleted, this.img.width)\n        this.msgManTrained = new TextInfoMessage(font, textInfoMessageConfig.textManTrained, this.img.width)\n        EventBus.registerEventListener(RaiderTrained.eventKey, () => this.setMessage(this.msgManTrained))\n        this.msgUnitUpgraded = new TextInfoMessage(font, textInfoMessageConfig.textUnitUpgraded, this.img.width)\n    }\n\n    setMessage(textInfoMessage: TextInfoMessage, timeout: number = 3000) {\n        this.messageTimeout = clearTimeoutSafe(this.messageTimeout)\n        this.currentMessage = textInfoMessage\n        this.notifyRedraw()\n        if (timeout) {\n            const that = this\n            this.messageTimeout = setTimeout(() => {\n                that.currentMessage = null\n                that.notifyRedraw()\n            }, timeout)\n        }\n    }\n\n    unsetMessage(textInfoMessage: TextInfoMessage) {\n        if (this.currentMessage === textInfoMessage) {\n            this.currentMessage = null\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (GameState.airlevel > 0) {\n            const width = Math.round(236 * Math.min(1, GameState.airlevel))\n            context.drawImage(this.imgAir, this.x + 85, this.y + 6, width, 8)\n        }\n        const textImage = this.currentMessage?.textImage\n        const infoImage = this.currentMessage?.infoImage\n        if (textImage) {\n            const txtX = this.x + (this.img.width - textImage.width - (infoImage ? infoImage.width : 0)) / 2\n            context.drawImage(textImage, txtX, this.y + 26)\n        }\n        if (infoImage) {\n            const infoX = this.x + this.img.width - infoImage.width\n            context.drawImage(infoImage, infoX, this.y + 16)\n        }\n    }\n\n}\n","import { BaseButtonCfg } from './ButtonsCfg'\n\nexport class IconPanelBackButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super();\n        [this.width, this.height, this.highlightFile, this.pressedFile, this.tooltip] = cfgValue // Interface back button\n        this.relX = 4\n        this.relY = 14\n    }\n\n}\n","import { BaseButtonCfg } from './ButtonsCfg'\n\nexport class MenuItemCfg extends BaseButtonCfg {\n\n    tooltipDisabled: string\n    hotkey: string\n\n    constructor(cfgValue: any) {\n        super();\n        [this.normalFile, this.disabledFile, this.pressedFile, this.tooltip, this.tooltipDisabled, this.hotkey] = cfgValue\n        this.width = 40\n        this.height = 40\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\n\nexport class IconPanelButton extends Button {\n\n    tooltipDisabled: string\n    hotkey: string\n    isDisabled: () => boolean = () => this.disabled\n\n    constructor(parent: BaseElement, menuItemCfg: MenuItemCfg, itemKey: string, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemCfg)\n        this.buttonType = itemKey\n        this.relX = parentWidth - 59\n        this.relY = 9 + this.height * menuIndex\n        this.tooltipDisabled = menuItemCfg.tooltipDisabled\n        this.hotkey = menuItemCfg.hotkey\n        this.disabled = true\n    }\n\n    reset() {\n        super.reset()\n        this.disabled = true\n        this.updateState(false)\n    }\n\n    onClick() {\n        console.log('menu item pressed: ' + this.buttonType)\n    }\n\n    updateState(autoRedraw: boolean = true) {\n        const targetState = !!this.isDisabled()\n        const stateChanged = this.disabled !== targetState\n        this.disabled = targetState\n        if (stateChanged && autoRedraw) this.notifyRedraw()\n        return stateChanged\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n        super.drawHover(context)\n        if (!this.disabled && this.hover) {\n            context.strokeStyle = '#0f0'\n            context.lineWidth = 2\n            context.strokeRect(this.x - context.lineWidth / 2, this.y - context.lineWidth / 2, this.width + context.lineWidth - 1, this.height + context.lineWidth - 1)\n        }\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { Button } from '../base/Button'\nimport { IconPanelBackButtonCfg } from '../../../cfg/IconPanelBackButtonCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class IconSubPanel extends Panel {\n\n    backBtn: Button = null\n    iconPanelButtons: IconPanelButton[] = []\n\n    constructor(numOfItems, onBackPanel: Panel = null) {\n        super()\n        if (onBackPanel) {\n            const backBtnCfg = new IconPanelBackButtonCfg(ResourceManager.cfg('InterfaceBackButton'))\n            this.backBtn = this.addChild(new Button(this, backBtnCfg))\n            const panel = this\n            this.backBtn.onClick = () => panel.toggleState(() => onBackPanel.toggleState())\n        }\n        const frameImgCfg = ResourceManager.cfg('InterfaceSurroundImages', numOfItems.toString())\n        const [imgName, val1, val2, val3, val4, imgNameWoBackName, woBack1, woBack2] = frameImgCfg\n        this.img = onBackPanel ? ResourceManager.getImage(imgName) : ResourceManager.getImage(imgNameWoBackName)\n        this.xOut = -this.img.width\n    }\n\n    addMenuItem(menuItemGroup: string, itemKey: string) {\n        const menuItemCfg = new MenuItemCfg(ResourceManager.cfg(menuItemGroup, itemKey))\n        const menuItem = this.addChild(new IconPanelButton(this, menuItemCfg, itemKey, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(menuItem)\n        return menuItem\n    }\n\n    toggleState(onDone: () => any = null) {\n        super.toggleState(onDone)\n        if (!this.movedIn) this.iconPanelButtons.forEach((button) => button.updateState())\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\n\nexport class BuildingPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Toolstation')\n        this.addMenuItem('InterfaceBuildImages', 'TeleportPad')\n        this.addMenuItem('InterfaceBuildImages', 'Docks')\n        this.addMenuItem('InterfaceBuildImages', 'Powerstation')\n        this.addMenuItem('InterfaceBuildImages', 'Barracks')\n        this.addMenuItem('InterfaceBuildImages', 'Upgrade')\n        this.addMenuItem('InterfaceBuildImages', 'Geo-dome')\n        this.addMenuItem('InterfaceBuildImages', 'OreRefinery')\n        this.addMenuItem('InterfaceBuildImages', 'Gunstation')\n        this.addMenuItem('InterfaceBuildImages', 'TeleportBIG')\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class SmallVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Hoverboard')\n        this.addMenuItem('InterfaceBuildImages', 'SmallDigger')\n        this.addMenuItem('InterfaceBuildImages', 'SmallTruck')\n        this.addMenuItem('InterfaceBuildImages', 'SmallCat')\n        this.addMenuItem('InterfaceBuildImages', 'SmallMLP')\n        this.addMenuItem('InterfaceBuildImages', 'SmallHeli')\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\n\nexport class LargeVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(5, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'BullDozer')\n        this.addMenuItem('InterfaceBuildImages', 'WalkerDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeMLP')\n        this.addMenuItem('InterfaceBuildImages', 'LargeDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeCat')\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\n\nexport class SelectBasePanel extends IconSubPanel {\n\n    constructor(numOfItems, onBackPanel: Panel) {\n        super(numOfItems, onBackPanel)\n        this.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected())\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { SurfaceJob, SurfaceJobType } from '../../model/job/SurfaceJob'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent, SpawnDynamiteEvent } from '../../../event/WorldEvents'\nimport { EntityDeselected, SurfaceSelectedEvent } from '../../../event/LocalEvents'\nimport { IconPanelButton } from './IconPanelButton'\nimport { Building } from '../../model/entity/building/Building'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\n\nexport class SelectWallPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        const itemDrill = this.addWallMenuItem('Interface_MenuItem_Dig', SurfaceJobType.DRILL)\n        itemDrill.isDisabled = () => !(GameState.selectedSurface?.isDrillable()) &&\n            !(GameState.selectedSurface?.isDrillableHard()) // TODO implement vehicle check for drill hard skill\n        const itemReinforce = this.addWallMenuItem('Interface_MenuItem_Reinforce', SurfaceJobType.REINFORCE)\n        itemReinforce.isDisabled = () => !(GameState.selectedSurface?.isReinforcable())\n        const itemDynamite = this.addWallMenuItem('Interface_MenuItem_Dynamite', SurfaceJobType.BLOW)\n        itemDynamite.isDisabled = () => !GameState.hasBuildingWithUpgrades(Building.TOOLSTATION, 2) &&\n            !GameState.raiders.some((r) => r.hasSkill(RaiderSkill.DEMOLITION))\n        const itemDeselect = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeselectDig')\n        itemDeselect.isDisabled = () => false\n        itemDeselect.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.cancelJobs()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        EventBus.registerEventListener(SurfaceSelectedEvent.eventKey, () => {\n            itemDrill.updateState(false)\n            itemReinforce.updateState(false)\n            itemDynamite.updateState(false)\n            this.notifyRedraw()\n        })\n    }\n\n    addWallMenuItem(itemKey: string, jobType: SurfaceJobType): IconPanelButton {\n        const item = this.addMenuItem('InterfaceImages', itemKey)\n        item.onClick = () => {\n            const selectedSurface = GameState.selectedSurface\n            if (selectedSurface) {\n                if (jobType === SurfaceJobType.BLOW) {\n                    EventBus.publishEvent(new SpawnDynamiteEvent(selectedSurface))\n                } else if (!selectedSurface.hasJobType(jobType)) {\n                    EventBus.publishEvent(new JobCreateEvent(new SurfaceJob(jobType, selectedSurface)))\n                }\n                EventBus.publishEvent(new EntityDeselected())\n            }\n        }\n        return item\n    }\n\n}\n","import { Vector2, Vector3 } from 'three'\nimport { Surface } from './map/Surface'\nimport { CollectableEntity, CollectableType } from './collect/CollectableEntity'\nimport { EventBus } from '../../event/EventBus'\nimport { JobCreateEvent } from '../../event/WorldEvents'\nimport { CompletePowerPathJob } from '../../game/model/job/SurfaceJob'\nimport { GameState } from '../../game/model/GameState'\n\nexport class BuildingSite {\n\n    isPowerPath: boolean\n    surfaces: Surface[] = []\n    neededByType = {}\n    assignedByType = {}\n    onSiteByType = {}\n    complete: boolean = false\n\n    constructor(isPowerPath: boolean = false) {\n        this.isPowerPath = isPowerPath\n    }\n\n    getPosition(): Vector3 {\n        return this.surfaces[0].getCenterWorld() // TODO use combined center of all surfaces\n    }\n\n    getRandomDropPosition(): Vector2 {\n        return this.surfaces[0].getRandomPosition() // TODO use \"primary\" surface\n    }\n\n    needs(collectableType: CollectableType): boolean {\n        const needed = this.neededByType[collectableType] || 0\n        const assigned = (this.assignedByType[collectableType] || []).length\n        return needed > assigned\n    }\n\n    assign(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        this.assignedByType[collectableType] = this.assignedByType[collectableType] || []\n        this.assignedByType[collectableType].push(item)\n    }\n\n    unAssign(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        this.assignedByType[collectableType] = (this.assignedByType[collectableType] || [])\n        this.assignedByType[collectableType].splice(this.assignedByType[collectableType].indexOf(item), 1)\n    }\n\n    addItem(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        const needed = this.neededByType[collectableType] || 0\n        this.onSiteByType[collectableType] = this.onSiteByType[collectableType] || []\n        if (this.onSiteByType[collectableType].length < needed) {\n            // item.group.position.copy(item.getTargetPos())\n            item.group.position.copy(this.getPosition())\n            item.worldMgr.sceneManager.scene.add(item.group)\n            this.onSiteByType[collectableType].push(item)\n            this.checkComplete()\n        } else {\n            item.resetTarget()\n            item.worldMgr.addCollectable(item, item.getPosition2D())\n        }\n    }\n\n    checkComplete() {\n        if (this.complete) return\n        let complete = true\n        Object.keys(this.neededByType).some((neededType) => {\n            const needed = this.neededByType[neededType] || 0\n            const onSite = (this.onSiteByType[neededType] || []).length\n            if (onSite < needed) {\n                complete = false\n                return true\n            }\n        })\n        if (complete) {\n            this.complete = complete\n            GameState.buildingSites.splice(GameState.buildingSites.indexOf(this), 1)\n            const items = []\n            Object.keys(this.onSiteByType).forEach((collectableType) => items.push(...this.onSiteByType[collectableType]))\n            if (this.isPowerPath) {\n                EventBus.publishEvent(new JobCreateEvent(new CompletePowerPathJob(this.surfaces[0], items)))\n            } else {\n                // TODO implement building spawning\n                console.log('Building site is complete')\n            }\n        }\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { SurfaceType } from '../../../scene/model/map/SurfaceType'\nimport { Building } from '../../model/entity/building/Building'\nimport { CollectableType } from '../../../scene/model/collect/CollectableEntity'\nimport { EventBus } from '../../../event/EventBus'\nimport { SpawnMaterialEvent } from '../../../event/WorldEvents'\nimport { BuildingSite } from '../../../scene/model/BuildingSite'\nimport { EntityDeselected, SurfaceSelectedEvent } from '../../../event/LocalEvents'\n\nexport class SelectFloorPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(3, onBackPanel)\n        const pathItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_LayPath')\n        pathItem.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.surfaceType = SurfaceType.POWER_PATH_SITE\n            selectedSurface.updateTexture()\n            const targetBuilding = GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), Building.TOOLSTATION)\n            if (targetBuilding) {\n                const ores = GameState.dropMaterial(CollectableType.ORE, 2)\n                ores.forEach((ore) => {\n                    EventBus.publishEvent(new SpawnMaterialEvent(ore, targetBuilding.getDropPosition2D())) // TODO use ToolNullName from cfg\n                })\n            }\n            const site = new BuildingSite(true)\n            site.surfaces.push(selectedSurface)\n            site.neededByType[CollectableType.ORE] = 2\n            GameState.buildingSites.push(site)\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        pathItem.isDisabled = () => GameState.selectedSurface?.hasRubble()\n        EventBus.registerEventListener(SurfaceSelectedEvent.eventKey, () => pathItem.updateState())\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_RemovePath')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { SurfaceJob, SurfaceJobType } from '../../model/job/SurfaceJob'\nimport { EntityDeselected, SurfaceSelectedEvent } from '../../../event/LocalEvents'\n\nexport class SelectRubblePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(2, onBackPanel)\n        const clearRubbleItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_ClearRubble')\n        clearRubbleItem.onClick = () => {\n            EventBus.publishEvent(new JobCreateEvent(new SurfaceJob(SurfaceJobType.CLEAR_RUBBLE, GameState.selectedSurface)))\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        clearRubbleItem.isDisabled = () => !GameState.selectedSurface?.hasRubble()\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        EventBus.registerEventListener(SurfaceSelectedEvent.eventKey, () => clearRubbleItem.updateState())\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { EventBus } from '../../../event/EventBus'\nimport { CollectEvent, SpawnMaterialEvent } from '../../../event/WorldEvents'\nimport { GameState } from '../../model/GameState'\nimport { BuildingSelected } from '../../../event/LocalEvents'\n\nexport class SelectBuildingPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Repair')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PowerOff') // TODO other option is Interface_MenuItem_PowerOn\n        const upgradeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeBuilding')\n        upgradeItem.isDisabled = () => !GameState.selectedBuilding?.canUpgrade()\n        upgradeItem.updateState()\n        upgradeItem.onClick = () => GameState.selectedBuilding?.upgrade()\n        const deleteBuildingItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteBuilding')\n        deleteBuildingItem.isDisabled = () => false\n        deleteBuildingItem.onClick = () => GameState.selectedBuilding?.beamUp()\n        EventBus.registerEventListener(BuildingSelected.eventKey, () => upgradeItem.updateState())\n        EventBus.registerEventListener(CollectEvent.eventKey, () => upgradeItem.updateState())\n        EventBus.registerEventListener(SpawnMaterialEvent.eventKey, () => upgradeItem.updateState())\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class EatJob extends Job {\n\n    constructor() {\n        super(JobType.EAT)\n    }\n\n    getWorkplaces(): Vector2[] {\n        return []\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { EatJob } from '../../model/job/EatJob'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\n\nexport class SelectRaiderPanel extends SelectBasePanel {\n\n    getToolItem: IconPanelButton\n    trainItem: IconPanelButton\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        const feedItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GoFeed')\n        feedItem.isDisabled = () => false\n        feedItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => !r.isDriving() && r.setJob(new EatJob()))\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UnLoadMinifigure')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_MinifigurePickUp')\n        this.getToolItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GetTool')\n        this.getToolItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DropBirdScarer')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeMan')\n        this.trainItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSkill')\n        this.trainItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoFirstPerson')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoSecondPerson')\n        const deleteRaiderItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteMan')\n        deleteRaiderItem.isDisabled = () => false\n        deleteRaiderItem.onClick = () => GameState.selectedRaiders.forEach((r) => r.beamUp())\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectVehiclePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(7, onBackPanel)\n    }\n\n}\n","import { Job } from './Job'\nimport { Vector2 } from 'three'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\nimport { JobType } from './JobType'\n\nexport class TrainJob extends Job {\n\n    target: Vector2\n    skill: RaiderSkill\n\n    constructor(target: Vector2, skill: RaiderSkill) {\n        super(JobType.TRAIN)\n        this.target = target\n        this.skill = skill\n    }\n\n    getWorkplaces(): Vector2[] {\n        return [this.target.clone()]\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { BuildingUpgraded } from '../../../event/WorldEvents'\nimport { GameState } from '../../model/GameState'\nimport { Building } from '../../model/entity/building/Building'\nimport { TrainJob } from '../../model/job/TrainJob'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\n\nexport class TrainRaiderPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainDriver')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainEngineer')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainGeologist')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainPilot')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSailor')\n        const trainDynamite = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainDynamite')\n        trainDynamite.isDisabled = () => !GameState.getBuildingsByType(Building.TOOLSTATION).some((b) => b.stats.TrainDynamite[b.level]) ||\n            GameState.selectedRaiders.every((r) => r.hasSkill(RaiderSkill.DEMOLITION))\n        trainDynamite.onClick = () => {\n            GameState.getBuildingsByType(Building.TOOLSTATION).some((b) => {\n                if (b.stats.TrainDynamite[b.level]) {\n                    GameState.selectedRaiders.forEach((r) => !r.hasSkill(RaiderSkill.DEMOLITION) && r.setJob(new TrainJob(b.getPosition2D(), RaiderSkill.DEMOLITION)))\n                    EventBus.publishEvent(new EntityDeselected())\n                    return true\n                }\n            })\n        }\n        EventBus.registerEventListener(BuildingUpgraded.eventKey, () => trainDynamite.updateState())\n    }\n\n}\n","import { Job } from './Job'\nimport { Vector2 } from 'three'\nimport { RaiderTool } from '../../../scene/model/RaiderTool'\nimport { JobType } from './JobType'\n\nexport class GetToolJob extends Job {\n\n    target: Vector2\n    tool: RaiderTool\n\n    constructor(target: Vector2, tool: RaiderTool) {\n        super(JobType.GET_TOOL)\n        this.target = target\n        this.tool = tool\n    }\n\n    getWorkplaces(): Vector2[] {\n        return [this.target.clone()]\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { GameState } from '../../model/GameState'\nimport { IconPanelButton } from './IconPanelButton'\nimport { Building } from '../../model/entity/building/Building'\nimport { GetToolJob } from '../../model/job/GetToolJob'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { RaiderTool } from '../../../scene/model/RaiderTool'\n\nexport class GetToolPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(8, onBackPanel)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetDrill', RaiderTool.DRILL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpade', RaiderTool.SHOVEL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetHammer', RaiderTool.HAMMER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpanner', RaiderTool.SPANNER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetFreezerGun', RaiderTool.FREEZERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetLaser', RaiderTool.LASER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetPusherGun', RaiderTool.PUSHERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetBirdScarer', RaiderTool.BIRDSCARER)\n    }\n\n    addGetToolItem(menuItemGroup: string, itemKey: string, tool: RaiderTool): IconPanelButton {\n        const menuItem = super.addMenuItem(menuItemGroup, itemKey)\n        menuItem.isDisabled = () => !GameState.hasOneBuildingOf(Building.TOOLSTATION) ||\n            GameState.selectedRaiders.every((r) => r.hasTool(tool))\n        menuItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => {\n                if (!r.hasTool(tool)) {\n                    const pathToToolstation = GameState.getBuildingsByType(Building.TOOLSTATION)\n                        .map((b) => r.findPathToTarget(b.getPosition2D()))\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToToolstation) {\n                        r.setJob(new GetToolJob(pathToToolstation.targetPosition, tool)) // TODO use precalculated path to toolstation\n                    }\n                }\n            })\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        return menuItem\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { GameState } from '../../model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { RaiderRequested } from '../../../event/WorldEvents'\n\nexport class IconPanelButtonLabel extends BaseElement {\n\n    constructor(parent: BaseElement) {\n        super(parent)\n        this.relX = 4\n        this.relY = 11\n        EventBus.registerEventListener(RaiderRequested.eventKey, () => this.notifyRedraw())\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        const requestedRaiders = GameState.requestedRaiders\n        if (!requestedRaiders) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = this.disabled || (this.parent && this.parent.disabled) ? '#444' : '#fff'\n        context.fillText(requestedRaiders.toString(), this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { EventBus } from '../../../event/EventBus'\nimport { BuildingSelected, EntityDeselected, RaiderSelected, SurfaceSelectedEvent, VehicleSelected } from '../../../event/LocalEvents'\nimport { EntityAddedEvent, EntityRemovedEvent, EntityType, RaiderRequested } from '../../../event/WorldEvents'\nimport { GameState } from '../../model/GameState'\nimport { Building } from '../../model/entity/building/Building'\nimport { BuildingPanel } from './BuildingPanel'\nimport { SmallVehiclePanel } from './SmallVehiclePanel'\nimport { LargeVehiclePanel } from './LargeVehiclePanel'\nimport { SelectWallPanel } from './SelectWallPanel'\nimport { SelectFloorPanel } from './SelectFloorPanel'\nimport { SelectRubblePanel } from './SelectRubblePanel'\nimport { SelectBuildingPanel } from './SelectBuildingPanel'\nimport { SelectRaiderPanel } from './SelectRaiderPanel'\nimport { SelectVehiclePanel } from './SelectVehiclePanel'\nimport { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { TrainRaiderPanel } from './TrainRaiderPanel'\nimport { GetToolPanel } from './GetToolPanel'\nimport { IconPanelButtonLabel } from './IconPanelButtonLabel'\n\nexport class MainPanel extends Panel {\n\n    subPanels: IconSubPanel[] = []\n    mainPanel: IconSubPanel // don't use root itself, since sub panel must be decoupled from (animated) main panel position\n\n    constructor() {\n        super()\n        this.relX = this.xOut = 640 - 16\n        this.xIn = 640 + 95\n        this.relY = this.yOut = this.yIn = 9\n        this.movedIn = false\n        this.mainPanel = this.addSubPanel(new IconSubPanel(4))\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n\n        const buildingPanel = this.addSubPanel(new BuildingPanel(this.mainPanel))\n        const smallVehiclePanel = this.addSubPanel(new SmallVehiclePanel(this.mainPanel))\n        const largeVehiclePanel = this.addSubPanel(new LargeVehiclePanel(this.mainPanel))\n        const selectWallPanel = this.addSubPanel(new SelectWallPanel(this.mainPanel))\n        const selectFloorPanel = this.addSubPanel(new SelectFloorPanel(this.mainPanel))\n        const selectRubblePanel = this.addSubPanel(new SelectRubblePanel(this.mainPanel))\n        const selectBuildingPanel = this.addSubPanel(new SelectBuildingPanel(this.mainPanel))\n        const selectRaiderPanel = this.addSubPanel(new SelectRaiderPanel(this.mainPanel))\n        const trainRaiderPanel = this.addSubPanel(new TrainRaiderPanel(selectRaiderPanel))\n        selectRaiderPanel.trainItem.onClick = () => selectRaiderPanel.toggleState(() => trainRaiderPanel.toggleState())\n        const getToolPanel = this.addSubPanel(new GetToolPanel(selectRaiderPanel))\n        selectRaiderPanel.getToolItem.onClick = () => selectRaiderPanel.toggleState(() => getToolPanel.toggleState())\n        const selectVehiclePanel = this.addSubPanel(new SelectVehiclePanel(this.mainPanel))\n        const teleportRaider = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_TeleportMan')\n        teleportRaider.isDisabled = () => !GameState.hasOneBuildingOf(Building.TOOLSTATION, Building.TELEPORT_PAD)\n            || GameState.raiders.length + GameState.requestedRaiders >= GameState.getMaxRaiders()\n        teleportRaider.updateState()\n        EventBus.registerEventListener(RaiderRequested.eventKey, () => teleportRaider.updateState())\n        EventBus.registerEventListener(EntityAddedEvent.eventKey, (event: EntityAddedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.type === EntityType.BUILDING || event.type === EntityType.RAIDER) teleportRaider.updateState()\n        })\n        EventBus.registerEventListener(EntityRemovedEvent.eventKey, (event: EntityRemovedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.type === EntityType.BUILDING || event.type === EntityType.RAIDER) teleportRaider.updateState()\n        })\n        teleportRaider.onClick = () => EventBus.publishEvent(new RaiderRequested(GameState.requestedRaiders + 1))\n        // TODO add decrease requested raider spawn option (needs right click for gui elements)\n        teleportRaider.addChild(new IconPanelButtonLabel(teleportRaider))\n        const buildingItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildBuilding')\n        buildingItem.isDisabled = () => false\n        buildingItem.onClick = () => this.mainPanel.toggleState(() => buildingPanel.toggleState())\n        const smallVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildSmallVehicle')\n        smallVehicleItem.isDisabled = () => false\n        smallVehicleItem.onClick = () => this.mainPanel.toggleState(() => smallVehiclePanel.toggleState())\n        const largeVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildLargeVehicle')\n        largeVehicleItem.isDisabled = () => false\n        largeVehicleItem.onClick = () => this.mainPanel.toggleState(() => largeVehiclePanel.toggleState())\n        EventBus.registerEventListener(SurfaceSelectedEvent.eventKey, (event: SurfaceSelectedEvent) => {\n            const surface = event.surface\n            if (surface.surfaceType.floor) {\n                if (surface.hasRubble()) {\n                    this.selectSubPanel(selectRubblePanel)\n                } else {\n                    this.selectSubPanel(selectFloorPanel)\n                }\n            } else {\n                this.selectSubPanel(selectWallPanel)\n            }\n        })\n        EventBus.registerEventListener(EntityDeselected.eventKey, () => this.selectSubPanel(this.mainPanel))\n        EventBus.registerEventListener(BuildingSelected.eventKey, () => this.selectSubPanel(selectBuildingPanel))\n        EventBus.registerEventListener(RaiderSelected.eventKey, () => this.selectSubPanel(selectRaiderPanel))\n        EventBus.registerEventListener(VehicleSelected.eventKey, () => this.selectSubPanel(selectVehiclePanel))\n    }\n\n    reset() {\n        super.reset()\n        this.relX = this.xOut\n        this.relY = this.yOut\n        this.movedIn = false\n        this.updatePosition()\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n        this.mainPanel.updatePosition()\n    }\n\n    addSubPanel<T extends IconSubPanel>(childPanel: T): T {\n        this.addChild(childPanel)\n        this.subPanels.push(childPanel)\n        return childPanel\n    }\n\n    selectSubPanel(targetPanel: IconSubPanel) {\n        this.subPanels.forEach((subPanel) => subPanel !== targetPanel && subPanel.setMovedIn(true))\n        targetPanel.setMovedIn(false)\n    }\n\n}\n","import { BaseElement } from './BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { Button } from './Button'\n\nexport class ToggleButton extends Button {\n\n    toggleState: boolean = false\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent, btnCfg)\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = (this.pressed && this.hover) || this.toggleState\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => updated = child.checkHover(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const isPressed = this.isInRect(cx, cy) || this.toggleState\n        let updated = this.pressed !== isPressed\n        this.pressed = isPressed\n        this.children.forEach((child) => updated = child.checkClick(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = inRect && this.pressed\n        if (updated) {\n            this.toggleState = !this.toggleState\n            this.onClick()\n            this.pressed = updated && this.toggleState\n            this.hover = inRect\n        }\n        this.children.forEach((child) => updated = child.checkRelease(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    release(): boolean {\n        return false\n    }\n\n}\n\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ToggleButton } from '../base/ToggleButton'\nimport { ButtonTopCfg } from './ButtonTopCfg'\n\nexport class TopPanel extends Panel {\n\n    btnCallToArms: ToggleButton\n    btnOptions: Button\n    btnPriorities: ToggleButton\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonTopCfg) {\n        super(panelCfg)\n        this.btnCallToArms = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelCallToArms))\n        this.btnOptions = this.addChild(new Button(this, buttonsCfg.panelButtonTopPanelOptions))\n        this.btnPriorities = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelPriorities))\n    }\n\n}\n\n","import { Button } from '../base/Button'\nimport { WorldEvent } from '../../../event/WorldEvents'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\nimport { InfoButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { InfoDockPanel } from './InfoDockPanel'\nimport { EventBus } from '../../../event/EventBus'\nimport { WorldLocationEvent } from '../../../event/WorldLocationEvent'\nimport { NATIVE_FRAMERATE } from '../../../main'\nimport { clearTimeoutSafe } from '../../../core/Util'\n\nexport class InfoDockButton extends Button {\n\n    messages: WorldEvent[] = [] // newest message first\n    text: string = null\n    animationTimeout = null\n    animationSpeedX = 0.5\n    animationSpeedY = 1\n\n    constructor(parent: InfoDockPanel, infoMessagesEntryConfig: InfoMessagesEntryConfig, eventKey: string) {\n        super(parent, new InfoButtonCfg(infoMessagesEntryConfig.buttonImageFilename))\n        this.text = infoMessagesEntryConfig.message\n        this.hidden = true\n\n        this.onClick = () => {\n            if (this.messages.length < 1) return\n            parent.buttonClicked(this)\n        }\n\n        EventBus.registerEventListener(eventKey, (event: WorldLocationEvent) => {\n            this.hidden = false\n            while (this.messages.length >= 9) this.messages.pop()\n            this.messages.unshift(event)\n            parent.showButton(this)\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.text = null\n        this.hidden = true\n        this.messages = []\n    }\n\n    slideToTarget(targetX: number, targetY: number): Promise<void> {\n        return new Promise<void>((resolve) => this.updateAnimation(targetX, targetY, resolve))\n    }\n\n    private updateAnimation(targetX: number, targetY: number, onDone: () => any) { // TODO refactor: almost equal with code for Panel\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= this.animationSpeedX && Math.abs(diffY) <= this.animationSpeedY) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * this.animationSpeedX)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * this.animationSpeedY)\n            const that = this\n            this.animationTimeout = setTimeout(() => that.updateAnimation(targetX, targetY, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.hidden) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.messages.length.toString(), this.x + 2, this.y + this.height / 2 + 2)\n    }\n\n}\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ButtonInfoDockCfg } from './ButtonInfoDockCfg'\nimport { InfoMessagesConfig } from './InfoMessagesConfig'\nimport { CrystalFoundEvent, GenericDeathEvent, GenericMonsterEvent, LandslideEvent, PowerDrainEvent, RaiderDiscoveredEvent, SlugEmergeEvent, UnderAttackEvent } from '../../../event/WorldLocationEvent'\nimport { InfoDockButton } from './InfoDockButton'\nimport { InformationPanel } from './InformationPanel'\n\nexport class InfoDockPanel extends Panel {\n\n    stackButtons: InfoDockButton[] = []\n    informationPanel: InformationPanel = null\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonInfoDockCfg, infoMessagesConfig: InfoMessagesConfig, informationPanel: InformationPanel) {\n        super(panelCfg)\n        this.informationPanel = informationPanel\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockGoto)).onClick = () => this.gotoLatestMessage()\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockClose)).onClick = () => this.dropLatestMessage()\n\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericDeath, GenericDeathEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericMonster, GenericMonsterEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoCrystalFound, CrystalFoundEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoUnderAttack, UnderAttackEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoLandslide, LandslideEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoPowerDrain, PowerDrainEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoSlugEmerge, SlugEmergeEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoFoundMinifigure, RaiderDiscoveredEvent.eventKey))\n    }\n\n    reset() {\n        super.reset()\n        this.stackButtons = []\n    }\n\n    private gotoLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const btn = this.stackButtons[0]\n        if (btn.messages.length < 1) return\n        const msg = btn.messages[0] as LandslideEvent\n        console.log('TODO force move camera to: ' + msg.location.toArray()) // TODO force move camera\n    }\n\n    private dropLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const button = this.stackButtons[0]\n        if (button.messages.length < 1) return\n        button.messages.shift()\n        if (button.messages.length < 1) {\n            button.hidden = true\n            this.informationPanel.setMovedIn(true)\n            this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n            this.slideStackIntoPosition().then()\n        }\n        button.notifyRedraw()\n    }\n\n    showButton(button: InfoDockButton) {\n        if (this.stackButtons.includes(button)) {\n            button.notifyRedraw()\n        } else {\n            this.slideInButton(button)\n        }\n    }\n\n    private slideInButton(button: InfoDockButton) {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        const targetY = -this.stackButtons.map(b => b.height).reduce((prev, cur) => prev + cur, 0)\n        this.stackButtons.push(button)\n        button.relX = -button.width\n        button.relY = targetY - button.height\n        button.updatePosition()\n        button.slideToTarget(0, targetY).then(() => this.stackButtons.forEach(btn => btn.disabled = false))\n    }\n\n    buttonClicked(button: InfoDockButton) {\n        if (button !== this.stackButtons[0]) {\n            this.pushFirst(button)\n        } else {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.toggleState()\n        }\n    }\n\n    private pushFirst(button: InfoDockButton) {\n        this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n        this.stackButtons.unshift(button)\n        this.slideStackIntoPosition().then(() => {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.setMovedIn(false)\n        })\n    }\n\n    private slideStackIntoPosition() {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        let relY = 0\n        const promises = this.stackButtons.map(btn => {\n            const p = btn.slideToTarget(0, relY)\n            relY -= btn.height\n            return p\n        })\n        return new Promise<void>((resolve) => {\n            Promise.all(promises).then(() => {\n                this.stackButtons.forEach(btn => btn.disabled = false)\n                resolve()\n            })\n        })\n    }\n\n}\n\n","import { BaseConfig } from './BaseConfig'\n\nexport class PanelsCfg extends BaseConfig {\n\n    panelRadar: PanelCfg = null\n    panelRadarFill: PanelCfg = null\n    panelRadarOverlay: PanelCfg = null\n    panelMessages: PanelCfg = null\n    panelMessagesSide: PanelCfg = null\n    panelCrystalSideBar: PanelCfg = null\n    panelTopPanel: PanelCfg = null\n    panelInformation: PanelCfg = null\n    panelPriorityList: PanelCfg = null\n    panelCameraControl: PanelCfg = null\n    panelInfoDock: PanelCfg = null\n    panelEncyclopedia: PanelCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new PanelCfg(cfgValue)\n    }\n}\n\nexport class PanelCfg {\n\n    filename: string\n    xOut: number\n    yOut: number\n    xIn: number\n    yIn: number\n\n    constructor(cfgValue: any) {\n        [this.filename, this.xOut, this.yOut, this.xIn, this.yIn] = cfgValue\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { Button } from '../base/Button'\nimport { GameState } from '../../model/GameState'\nimport { LevelPrioritiesEntryConfig } from '../../../cfg/LevelsCfg'\nimport { ButtonPriorityListCfg } from './ButtonPriorityListCfg'\nimport { PriorityButtonsConfig } from './PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from './PriorityPositionsEntry'\n\nexport class PriorityListPanel extends Panel {\n\n    prioPositions: PriorityPositionsEntry[] = []\n    prioByName: Map<string, Button> = new Map()\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonPriorityListCfg, pos: PriorityPositionsEntry[], cfg: PriorityButtonsConfig) {\n        super(panelCfg)\n        buttonsCfg.panelButtonPriorityListDisable.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.toggle(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        buttonsCfg.panelButtonPriorityListUpOne.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.upOne(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        this.addChild(new Button(this, buttonsCfg.panelButtonPriorityListReset)).onClick = () => this.resetList()\n\n        this.prioPositions = pos\n        this.prioByName.set('aiPriorityTrain'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityTrain)))\n        this.prioByName.set('aiPriorityGetIn'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityGetIn)))\n        this.prioByName.set('aiPriorityCrystal'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityCrystal)))\n        this.prioByName.set('aiPriorityOre'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityOre)))\n        this.prioByName.set('aiPriorityRepair'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityRepair)))\n        this.prioByName.set('aiPriorityClearing'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityClearing)))\n        this.prioByName.set('aiPriorityDestruction'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityDestruction)))\n        this.prioByName.set('aiPriorityConstruction'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityConstruction)))\n        this.prioByName.set('aiPriorityReinforce'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityReinforce)))\n        this.prioByName.set('aiPriorityRecharge'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityRecharge)))\n    }\n\n    reset() {\n        super.reset()\n        this.resetList()\n    }\n\n    resetList() {\n        GameState.priorityList.reset()\n        this.setList(GameState.priorityList.current)\n    }\n\n    private setList(priorityList: LevelPrioritiesEntryConfig[]) {\n        this.prioByName.forEach((btn) => btn.hidden = true)\n        let index = 0\n        let updated = false\n        priorityList.forEach(cfg => {\n            const prioButton: Button = this.prioByName.get(cfg.key.toLowerCase())\n            if (prioButton) {\n                updated = updated || prioButton.hidden || prioButton.disabled !== !cfg.enabled\n                prioButton.hidden = false\n                prioButton.disabled = !cfg.enabled\n                prioButton.relX = this.prioPositions[index].x\n                prioButton.relY = this.prioPositions[index].y\n                prioButton.updatePosition()\n                const btnIndex = index\n                prioButton.onClick = () => {\n                    GameState.priorityList.pushToTop(btnIndex)\n                    this.setList(GameState.priorityList.current)\n                }\n                index++\n            }\n        })\n        if (updated) this.notifyRedraw()\n    }\n\n}\n\n","export class InfoMessagesEntryConfig {\n\n    message: string = null\n    buttonImageFilename: string = null\n    sfx: string = null\n    timing: string = null\n    flag: string = null\n\n    constructor(cfgValue: any) {\n        [this.message, this.buttonImageFilename, this.sfx, this.timing, this.flag] = cfgValue\n        this.message = this.message.replace(/_/g, ' ')\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\n\nexport class InfoMessagesConfig extends BaseConfig {\n\n    infoGenericDeath: InfoMessagesEntryConfig = null\n    infoGenericMonster: InfoMessagesEntryConfig = null\n    infoCrystalFound: InfoMessagesEntryConfig = null\n    infoUnderAttack: InfoMessagesEntryConfig = null\n    infoLandslide: InfoMessagesEntryConfig = null\n    infoPowerDrain: InfoMessagesEntryConfig = null\n    infoSlugEmerge: InfoMessagesEntryConfig = null\n    infoFoundMinifigure: InfoMessagesEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new InfoMessagesEntryConfig(cfgValue)\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class InformationPanel extends Panel {\n\n    font: BitmapFont = null\n    textImage = null\n\n    constructor(panelCfg: PanelCfg) {\n        super(panelCfg)\n        this.font = ResourceManager.getDefaultFont()\n    }\n\n    setText(text?: string) {\n        this.textImage = text ? this.font.createTextImage(text, this.img.width - 80) : null\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.textImage) context.drawImage(this.textImage, this.x + (this.img.width - this.textImage.width) / 2, this.y + 12)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class PriorityButtonsConfig extends BaseConfig {\n\n    aiPriorityTrain: ButtonCfg = null\n    aiPriorityGetIn: ButtonCfg = null\n    aiPriorityCrystal: ButtonCfg = null\n    aiPriorityOre: ButtonCfg = null\n    aiPriorityRepair: ButtonCfg = null\n    aiPriorityClearing: ButtonCfg = null\n    aiPriorityDestruction: ButtonCfg = null\n    aiPriorityConstruction: ButtonCfg = null\n    aiPriorityReinforce: ButtonCfg = null\n    aiPriorityRecharge: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): ButtonCfg {\n        return {\n            buttonType: cfgValue[0],\n            normalFile: cfgValue[1],\n            highlightFile: cfgValue[1],\n            pressedFile: cfgValue[2],\n            disabledFile: cfgValue[3],\n        }\n    }\n\n}\n","export class PriorityPositionsEntry {\n\n    x: number\n    y: number\n\n    constructor(cfgValue: any) {\n        [this.x, this.y] = cfgValue\n    }\n\n}\n","export class TextInfoMessageEntryConfig {\n\n    text: string\n    imageFilename: string\n    sfxName: string\n\n    textImage\n    infoImage\n\n    constructor(cfgValue: any) {\n        [this.text, this.imageFilename, this.sfxName] = cfgValue\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\n\nexport class TextInfoMessageConfig extends BaseConfig {\n\n    textCrystalFound: TextInfoMessageEntryConfig = null\n    textSpaceToContinue: TextInfoMessageEntryConfig = null\n    textCavernDiscovered: TextInfoMessageEntryConfig = null\n    textOreFound: TextInfoMessageEntryConfig = null\n    textAirSupplyLow: TextInfoMessageEntryConfig = null\n    textAirSupplyRunningOut: TextInfoMessageEntryConfig = null\n    textGameCompleted: TextInfoMessageEntryConfig = null\n    textManTrained: TextInfoMessageEntryConfig = null\n    textUnitUpgraded: TextInfoMessageEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new TextInfoMessageEntryConfig(cfgValue)\n    }\n\n}\n","import { ScaledLayer } from '../../screen/ScreenLayer'\nimport { Panel } from '../gui/base/Panel'\nimport { BaseElement } from '../gui/base/BaseElement'\nimport { POINTER_EVENT } from '../../event/EventManager'\n\nexport class GuiBaseLayer extends ScaledLayer {\n\n    rootElement: BaseElement = new BaseElement()\n    panels: Panel[] = []\n\n    constructor() {\n        super()\n        this.rootElement.notifyRedraw = () => this.redraw()\n        this.onRedraw = (context: CanvasRenderingContext2D) => {\n            context.clearRect(0, 0, context.canvas.width, context.canvas.height)\n            this.rootElement.onRedraw(context)\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.panels.forEach((p) => p.reset())\n    }\n\n    addPanel<T extends Panel>(panel: T): T {\n        this.rootElement.addChild(panel)\n        this.panels.push(panel)\n        return panel\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n        const hit = this.context && this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n        if (hit) {\n            event.preventDefault()\n            if (eventEnum === POINTER_EVENT.MOVE) {\n                this.rootElement.checkHover(sx, sy)\n            } else if (eventEnum === POINTER_EVENT.DOWN) {\n                this.rootElement.checkClick(sx, sy)\n            } else if (eventEnum === POINTER_EVENT.UP) {\n                this.rootElement.checkRelease(sx, sy)\n            }\n        } else if (eventEnum === POINTER_EVENT.MOVE) {\n            this.rootElement.release()\n        }\n        return hit\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        return !this.context || this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n    }\n\n}\n","import { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../gui/base/Panel'\nimport { RadarPanel } from '../gui/radar/RadarPanel'\nimport { MessagePanel } from '../gui/messagepanel/MessagePanel'\nimport { PanelCrystalSideBar } from '../gui/sidebar/PanelCrystalSideBar'\nimport { MainPanel } from '../gui/main/MainPanel'\nimport { TopPanel } from '../gui/toppanel/TopPanel'\nimport { InfoDockPanel } from '../gui/infodock/InfoDockPanel'\nimport { PanelsCfg } from '../../cfg/PanelsCfg'\nimport { ButtonsCfg } from '../../cfg/ButtonsCfg'\nimport { PriorityListPanel } from '../gui/toppanel/PriorityListPanel'\nimport { InfoMessagesConfig } from '../gui/infodock/InfoMessagesConfig'\nimport { InformationPanel } from '../gui/infodock/InformationPanel'\nimport { PriorityButtonsConfig } from '../gui/toppanel/PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from '../gui/toppanel/PriorityPositionsEntry'\nimport { TextInfoMessageConfig } from '../gui/messagepanel/TextInfoMessageConfig'\nimport { GuiBaseLayer } from './GuiBaseLayer'\n\nexport class GuiMainLayer extends GuiBaseLayer {\n\n    panelRadar: RadarPanel\n    panelMessages: MessagePanel\n    panelMessagesSide: Panel\n    panelCrystalSideBar: PanelCrystalSideBar\n    panelMain: MainPanel\n    panelTopPanel: TopPanel\n    panelInformation: InformationPanel\n    panelPriorityList: PriorityListPanel\n    panelCameraControl: Panel\n    panelInfoDock: InfoDockPanel\n    panelEncyclopedia: Panel\n    onOptionsShow: () => any = () => console.log('show options triggered')\n\n    constructor() {\n        super()\n        const panelsCfg = new PanelsCfg(ResourceManager.cfg('Panels640x480'))\n        const buttonsCfg = new ButtonsCfg(ResourceManager.cfg('Buttons640x480'))\n        // created in reverse order compared to cfg, earlier in cfg means higher z-value // TODO add some z layering at least to panels\n        this.panelEncyclopedia = this.addPanel(new Panel(panelsCfg.panelEncyclopedia))\n        this.panelInformation = this.addPanel(new InformationPanel(panelsCfg.panelInformation))\n        this.panelInfoDock = this.addPanel(new InfoDockPanel(panelsCfg.panelInfoDock, buttonsCfg.panelInfoDock, new InfoMessagesConfig(ResourceManager.cfg('InfoMessages')), this.panelInformation))\n        this.panelCameraControl = this.addPanel(new Panel(panelsCfg.panelCameraControl))\n        const priorityButtonsConfig = new PriorityButtonsConfig(ResourceManager.cfg('PriorityImages'))\n        const priorityPositionsConfig = Object.values(ResourceManager.cfg('PrioritiesImagePositions')).map(cfgValue => new PriorityPositionsEntry(cfgValue))\n        this.panelPriorityList = this.addPanel(new PriorityListPanel(panelsCfg.panelPriorityList, buttonsCfg.panelPriorityList, priorityPositionsConfig, priorityButtonsConfig))\n        this.panelTopPanel = this.addPanel(new TopPanel(panelsCfg.panelTopPanel, buttonsCfg.panelTopPanel))\n        this.panelMain = this.addPanel(new MainPanel())\n        this.panelCrystalSideBar = this.addPanel(new PanelCrystalSideBar(panelsCfg.panelCrystalSideBar, buttonsCfg.panelCrystalSideBar))\n        this.panelMessagesSide = this.addPanel(new Panel(panelsCfg.panelMessagesSide))\n        this.panelMessages = this.addPanel(new MessagePanel(panelsCfg.panelMessages, new TextInfoMessageConfig(ResourceManager.cfg('TextMessagesWithImages'))))\n        this.panelRadar = this.addPanel(new RadarPanel(panelsCfg.panelRadar, panelsCfg.panelRadarFill, panelsCfg.panelRadarOverlay, buttonsCfg.panelRadar))\n        // link panels\n        this.panelTopPanel.btnOptions.onClick = () => this.onOptionsShow()\n        this.panelTopPanel.btnPriorities.onClick = () => {\n            if (this.panelTopPanel.btnPriorities.toggleState) {\n                this.panelMain.setMovedIn(true, () => this.panelPriorityList.setMovedIn(false))\n            } else {\n                this.panelPriorityList.setMovedIn(true, () => this.panelMain.setMovedIn(false))\n            }\n        }\n    }\n\n}\n","import { EventBus } from '../event/EventBus'\nimport { JobCreateEvent, JobDeleteEvent } from '../event/WorldEvents'\nimport { PublicJob } from './model/job/Job'\nimport { GameState } from './model/GameState'\nimport { Vector2 } from 'three'\nimport { Raider } from '../scene/model/Raider'\nimport { WorldManager } from '../scene/WorldManager'\nimport { CHECK_CLEARRUBBLE_INTERVAL, JOB_SCHEDULE_INTERVAL } from '../main'\nimport { Building } from './model/entity/building/Building'\nimport { GetToolJob } from './model/job/GetToolJob'\nimport { TrainJob } from './model/job/TrainJob'\nimport { clearIntervalSafe } from '../core/Util'\nimport { SurfaceJob, SurfaceJobType } from './model/job/SurfaceJob'\nimport { RaiderSkill } from '../scene/model/RaiderSkill'\nimport { RaiderTool } from '../scene/model/RaiderTool'\nimport { JobState } from './model/job/JobState'\n\nexport class Supervisor {\n\n    worldMgr: WorldManager\n    jobs: PublicJob[] = []\n    assignInterval = null\n    checkRubbleInterval = null\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        EventBus.registerEventListener(JobCreateEvent.eventKey, (event: JobCreateEvent) => {\n            this.jobs.push(event.job)\n        })\n        EventBus.registerEventListener(JobDeleteEvent.eventKey, (event: JobDeleteEvent) => {\n            event.job.cancel()\n        })\n    }\n\n    start() {\n        stop()\n        this.assignInterval = setInterval(this.assignJobs.bind(this), JOB_SCHEDULE_INTERVAL)\n        this.checkRubbleInterval = setInterval(this.checkUnclearedRubble.bind(this), CHECK_CLEARRUBBLE_INTERVAL)\n    }\n\n    stop() {\n        this.assignInterval = clearIntervalSafe(this.assignInterval)\n        this.checkRubbleInterval = clearIntervalSafe(this.checkRubbleInterval)\n        GameState.raiders.forEach((r) => r.resetWorkInterval())\n        GameState.raidersUndiscovered.forEach((r) => r.resetWorkInterval())\n        GameState.vehicles.forEach((v) => v.resetWorkInterval())\n        GameState.vehiclesUndiscovered.forEach((v) => v.resetWorkInterval())\n    }\n\n    assignJobs() {\n        const availableJobs: PublicJob[] = []\n        this.jobs = this.jobs.filter((j) => {\n            const result = j.jobstate === JobState.OPEN\n            if (result && j.fulfiller.length < 1) availableJobs.push(j)\n            return result\n        })\n        availableJobs.sort((left, right) => {\n            return Math.sign(GameState.priorityList.getPriority(left) - GameState.priorityList.getPriority(right))\n        })\n        const unemployedRaider = GameState.raiders.filter((r) => !r.job)\n        availableJobs.forEach((job) => { // XXX better use estimated time to complete job as metric\n            let closestRaider: Raider = null\n            let closestRaiderIndex: number = null\n            let minDistance: number = null\n            let closestToolRaider: Raider = null\n            let closestToolRaiderIndex: number = null\n            let minToolDistance: number = null\n            let closestToolstationPosition: Vector2 = null\n            let closestNeededTool: RaiderTool = null\n            let closestTrainingRaider: Raider = null\n            let closestTrainingRaiderIndex: number = null\n            let minTrainingDistance: number = null\n            let closestTrainingPath: Vector2 = null\n            let closestNeededTraining: RaiderSkill = null\n            unemployedRaider.forEach((raider, index) => {\n                const raiderPosition2D = raider.getPosition2D()\n                if (job.isQualified(raider)) {\n                    const dist = job.getWorkplaces().map((p) => p.distanceToSquared(raiderPosition2D)).sort((l, r) => l - r)[0]\n                    if (minDistance === null || dist < minDistance) {\n                        closestRaider = raider\n                        closestRaiderIndex = index\n                        minDistance = dist\n                    }\n                } else {\n                    const raiderPosition = raider.getPosition()\n                    const neededTool = job.isQualifiedWithTool(raider)\n                    if (neededTool) {\n                        const pathToToolstation = GameState.getBuildingsByType(Building.TOOLSTATION)\n                            .map((b) => raider.findPathToTarget(b.getPosition2D()))\n                            .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                        if (pathToToolstation) {\n                            const dist = pathToToolstation.lengthSq\n                            if (minToolDistance === null || dist < minToolDistance) {\n                                closestToolRaider = raider\n                                closestToolRaiderIndex = index\n                                minToolDistance = dist\n                                closestToolstationPosition = pathToToolstation.targetPosition // TODO use precalculated path to toolstation\n                                closestNeededTool = neededTool\n                            }\n                        }\n                    } else {\n                        const neededTraining = job.isQualifiedWithTraining(raider)\n                        if (neededTraining) {\n                            const pathToTraining = GameState.getTrainingSites(raiderPosition, neededTraining)\n                                .map((site) => raider.findPathToTarget(site.getPosition2D()))\n                                .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                            if (pathToTraining) {\n                                const dist = pathToTraining.lengthSq\n                                if (minTrainingDistance === null || dist < minTrainingDistance) {\n                                    closestTrainingRaider = raider\n                                    closestTrainingRaiderIndex = index\n                                    minTrainingDistance = dist\n                                    closestTrainingPath = pathToTraining.targetPosition // TODO use precalculated path to training\n                                    closestNeededTraining = neededTraining\n                                }\n                            }\n                        }\n                    }\n                }\n            })\n            if (closestRaider) {\n                closestRaider.setJob(job)\n                unemployedRaider.splice(closestRaiderIndex, 1)\n            } else if (closestToolRaider) {\n                closestToolRaider.setJob(new GetToolJob(closestToolstationPosition, closestNeededTool), job)\n                unemployedRaider.splice(closestToolRaiderIndex, 1)\n            } else if (closestTrainingRaider) {\n                closestTrainingRaider.setJob(new TrainJob(closestTrainingPath, closestNeededTraining), job)\n                unemployedRaider.splice(closestTrainingRaiderIndex, 1)\n            }\n        })\n    }\n\n    checkUnclearedRubble() {\n        GameState.raiders.forEach((raider) => {\n            if (raider.job) return\n            const startSurface = raider.worldMgr.sceneManager.terrain.getSurfaceFromWorld(raider.getPosition())\n            for (let rad = 0; rad < 10; rad++) {\n                for (let x = startSurface.x - rad; x <= startSurface.x + rad; x++) {\n                    for (let y = startSurface.y - rad; y <= startSurface.y + rad; y++) {\n                        const surface = raider.worldMgr.sceneManager.terrain.getSurfaceOrNull(x, y)\n                        if (!(surface?.hasRubble()) || !surface.discovered || surface.hasJobType(SurfaceJobType.CLEAR_RUBBLE)) continue\n                        const surfJob = new SurfaceJob(SurfaceJobType.CLEAR_RUBBLE, surface)\n                        if (surfJob.isQualified(raider)) {\n                            raider.setJob(surfJob)\n                        } else {\n                            const neededTool = surfJob.isQualifiedWithTool(raider)\n                            if (neededTool) {\n                                const pathToToolstation = GameState.getBuildingsByType(Building.TOOLSTATION)\n                                    .map((b) => raider.findPathToTarget(b.getPosition2D()))\n                                    .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                                if (pathToToolstation) {\n                                    raider.setJob(new GetToolJob(pathToToolstation.targetPosition, neededTool), surfJob) // TODO use precalculated path to toolstation\n                                }\n                            } else {\n                                continue\n                            }\n                        }\n                        EventBus.publishEvent(new JobCreateEvent(surfJob))\n                        surface.updateJobColor()\n                    }\n                }\n            }\n        })\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { BriefingPanelCfg } from '../../../cfg/BriefingPanelCfg'\nimport { MessagePanel } from '../messagepanel/MessagePanel'\nimport { ObjectiveImageCfg } from '../../../cfg/ObjectiveImageCfg'\n\nexport class BriefingPanel extends Panel {\n\n    messagePanel: MessagePanel\n    cfg: BriefingPanelCfg = null\n    imgTitle: HTMLCanvasElement = null\n    titleRelX: number = 0\n    titleRelY: number = 0\n    btnNext: Button = null\n    btnBack: Button = null\n    imgBack: HTMLCanvasElement = null\n    imgParagraph: HTMLCanvasElement[] = []\n    paragraph: number = 0\n\n    constructor(cfg: BriefingPanelCfg) {\n        super()\n        this.cfg = cfg\n        this.imgTitle = cfg.titleFont.createTextImage(cfg.title)\n        this.titleRelX = cfg.titleWindow.x + (cfg.titleWindow.w - this.imgTitle.width) / 2\n        this.titleRelY = cfg.titleWindow.y\n        this.btnNext = this.addChild(new Button(this, cfg.nextButtonCfg))\n        this.btnNext.onClick = () => this.nextParagraph()\n        this.btnBack = this.addChild(new Button(this, cfg.backButtonCfg))\n        this.btnBack.onClick = () => this.prevParagraph()\n        this.hidden = true\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n        this.setParagraph(0)\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.imgBack = ResourceManager.getImageOrNull(objectiveBackImgCfg.filename)\n        this.relX = objectiveBackImgCfg.x\n        this.relY = objectiveBackImgCfg.y\n        this.width = this.imgBack.width\n        this.height = this.imgBack.height\n        this.updatePosition()\n        this.imgParagraph = objectiveText.split('\\\\a').map(txt => this.cfg.textFont.createTextImage(txt, this.cfg.textWindow.w, false))\n    }\n\n    setParagraph(paragraph: number) {\n        if (paragraph < 0) return\n        if (paragraph > this.imgParagraph.length - 1) {\n            this.hide()\n            this.notifyRedraw()\n            return\n        }\n        this.paragraph = paragraph\n        this.btnNext.hidden = this.paragraph >= this.imgParagraph.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.notifyRedraw()\n    }\n\n    nextParagraph() {\n        this.setParagraph(this.paragraph + 1)\n    }\n\n    prevParagraph() {\n        this.setParagraph(this.paragraph - 1)\n    }\n\n    show() {\n        super.show()\n        this.setParagraph(0)\n        this.btnNext.hidden = this.paragraph >= this.imgParagraph.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.messagePanel?.setMessage(this.messagePanel.msgSpaceToContinue, 0)\n    }\n\n    hide() {\n        super.hide()\n        this.messagePanel?.unsetMessage(this.messagePanel.msgSpaceToContinue)\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.imgBack) context.drawImage(this.imgBack, this.x, this.y)\n        if (this.imgTitle) context.drawImage(this.imgTitle, this.x + this.titleRelX, this.y + this.titleRelY)\n        if (this.imgParagraph && this.imgParagraph[this.paragraph]) context.drawImage(this.imgParagraph[this.paragraph], this.x + this.cfg.textWindow.x, this.y + this.cfg.textWindow.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuCycleItemCfg } from '../../../cfg/MenuCycleItemCfg'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuCycleItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLabelOnNormal: HTMLCanvasElement // TODO only toggle state with clicks on label\n    imgLabelOffNormal: HTMLCanvasElement // TODO use button?\n    imgLabelOnHover: HTMLCanvasElement\n    imgLabelOffHover: HTMLCanvasElement\n\n    labelX: number = 0\n    state: boolean = false\n\n    constructor(parent: MenuLayer, itemCfg: MenuCycleItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.labelX = itemCfg.width\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.imgLabelOffNormal = parent.loFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOffHover = parent.hiFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOnNormal = parent.loFont.createTextImage(itemCfg.labelOn)\n        this.imgLabelOnHover = parent.hiFont.createTextImage(itemCfg.labelOn)\n        this.width = itemCfg.width + Math.max(this.imgLabelOnHover.width, this.imgLabelOffHover.width)\n        this.height = this.imgTextNormal.height\n    }\n\n    onClick() {\n        this.state = !this.state\n        console.log('TODO: cycle item clicked; state: ' + this.state)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        let imgLabel = this.state ? this.imgLabelOnNormal : this.imgLabelOffNormal\n        if (this.hover) {\n            img = this.imgTextHover\n            imgLabel = this.state ? this.imgLabelOnHover : this.imgLabelOffHover\n        }\n        context.drawImage(img, this.x, this.y)\n        context.drawImage(imgLabel, this.x + this.labelX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuSliderItemCfg } from '../../../cfg/MenuSliderItemCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { BaseButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuSliderItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLeft: HTMLCanvasElement\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgRight: HTMLCanvasElement\n    sliderX: number = 0\n    min: number = 0\n    max: number = 1\n    value: number = 0\n    onValueChanged: (value: number) => any = (value) => console.log('value changed to: ' + value)\n\n    constructor(parent: MenuLayer, itemCfg: MenuSliderItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.sliderX = itemCfg.width\n        this.imgLeft = ResourceManager.getImage(itemCfg.imgLeft)\n        this.imgNormal = ResourceManager.getImage(itemCfg.imgOff)\n        this.imgHover = ResourceManager.getImage(itemCfg.imgOn)\n        this.imgRight = ResourceManager.getImage(itemCfg.imgRight)\n        const leftBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        leftBtn.imgNormal = ResourceManager.getImage(itemCfg.btnLeftNormal)\n        leftBtn.imgHover = ResourceManager.getImage(itemCfg.btnLeftHover)\n        leftBtn.relX = this.sliderX - this.imgLeft.width - leftBtn.imgHover.width\n        leftBtn.width = leftBtn.imgHover.width\n        leftBtn.height = leftBtn.imgHover.height\n        leftBtn.updatePosition()\n        leftBtn.onClick = () => {\n            if (this.value > this.min) {\n                this.value--\n                this.onValueChanged(this.value)\n            }\n        }\n        const rightBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        rightBtn.imgNormal = ResourceManager.getImage(itemCfg.btnRightNormal)\n        rightBtn.imgHover = ResourceManager.getImage(itemCfg.btnRightHover)\n        rightBtn.relX = this.sliderX + this.imgNormal.width + this.imgRight.width * 2\n        rightBtn.width = rightBtn.imgHover.width\n        rightBtn.height = rightBtn.imgHover.height\n        rightBtn.updatePosition()\n        rightBtn.onClick = () => {\n            if (this.value < this.max) {\n                this.value++\n                this.onValueChanged(this.value)\n            }\n        }\n        this.width = itemCfg.width + leftBtn.imgHover.width + this.imgLeft.width + this.imgNormal.width + this.imgRight.width * 2 + rightBtn.imgHover.width\n        this.min = itemCfg.min\n        this.max = itemCfg.max || 1\n        this.value = this.min // TODO set default value\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.height = this.imgTextNormal.height\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        if (this.hover) {\n            img = this.imgTextHover\n        }\n        context.drawImage(img, this.x, this.y)\n        let posX = this.x + this.sliderX\n        context.drawImage(this.imgLeft, posX, this.y)\n        context.drawImage(this.imgNormal, posX, this.y)\n        const dw = Math.round(this.value / this.max * this.imgHover.width)\n        context.drawImage(this.imgHover, 0, 0, dw, this.imgHover.height, posX, this.y, dw, this.imgHover.height)\n        posX += this.imgNormal.width\n        context.drawImage(this.imgRight, posX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuLayer } from './MenuLayer'\nimport { MenuLabelItemCfg } from '../../../cfg/MenuLabelItemCfg'\n\nexport class MenuLabelItem extends BaseElement {\n\n    target: string\n    loImg: HTMLCanvasElement\n    hiImg: HTMLCanvasElement\n\n    constructor(parent: MenuLayer, itemCfg: MenuLabelItemCfg, autoCenter: boolean) {\n        super(parent)\n        this.target = itemCfg.target\n        this.loImg = parent.loFont.createTextImage(itemCfg.label)\n        this.hiImg = parent.hiFont.createTextImage(itemCfg.label)\n        this.width = this.loImg.width\n        this.height = this.loImg.height\n        this.relX = autoCenter ? -parent.relX + (parent.menuImage.width - this.width) / 2 : itemCfg.x\n        this.relY = itemCfg.y\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.hover) {\n            context.drawImage(this.hiImg, this.x, this.y)\n        } else {\n            context.drawImage(this.loImg, this.x, this.y)\n        }\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuEntryCfg } from '../../../cfg/MenuEntryCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuCycleItem } from './MenuCycleItem'\nimport { MenuSliderItem } from './MenuSliderItem'\nimport { MenuLabelItem } from './MenuLabelItem'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class MenuLayer extends BaseElement {\n\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    itemsTrigger: MenuLabelItem[] = []\n    itemsNext: MenuLabelItem[] = []\n\n    constructor(parent: BaseElement, menuCfg: MenuEntryCfg) {\n        super(parent)\n        this.relX = menuCfg.position[0]\n        this.relY = menuCfg.position[1]\n        this.menuImage = ResourceManager.getImageOrNull(menuCfg.menuImage[0]) // menuImage has 4 parameter here\n        this.titleImage = ResourceManager.getBitmapFont(menuCfg.menuFont).createTextImage(menuCfg.fullName)\n        this.loFont = ResourceManager.getBitmapFont(menuCfg.loFont)\n        this.hiFont = ResourceManager.getBitmapFont(menuCfg.hiFont)\n        menuCfg.itemsLabel.forEach((itemCfg) => {\n            const item = this.addChild(new MenuLabelItem(this, itemCfg, menuCfg.autoCenter))\n            if (itemCfg.actionName.toLowerCase() === 'trigger') {\n                this.itemsTrigger.push(item)\n            } else {\n                this.itemsNext.push(item)\n            }\n        })\n        menuCfg.itemsCycle.forEach((itemCfg) => this.addChild(new MenuCycleItem(this, itemCfg)))\n        menuCfg.itemsSlider.forEach((itemCfg) => this.addChild(new MenuSliderItem(this, itemCfg)))\n        this.hidden = true\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.drawImage(this.menuImage, (this.parent.width - this.menuImage.width) / 2, (this.parent.height - this.menuImage.height) / 2)\n        context.drawImage(this.titleImage, (this.parent.width - this.titleImage.width) / 2, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { MenuLayer } from './MenuLayer'\nimport { MenuCfg } from '../../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\n\nexport class MenuBasePanel extends Panel {\n\n    layersByKey: Map<string, MenuLayer> = new Map()\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super()\n        this.width = layer.fixedWidth\n        this.height = layer.fixedHeight\n        this.hidden = true\n        cfg.menus.forEach((menuCfg, index) => this.layersByKey.set('menu' + (index + 1), this.addChild(new MenuLayer(this, menuCfg))))\n        const pausePanel = this\n        this.layersByKey.forEach((layer) => layer.itemsNext.forEach((item) => item.onClick = () => pausePanel.selectLayer(item.target)))\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n    }\n\n    show() {\n        this.hidden = false\n        this.selectLayer('menu1')\n    }\n\n    hide() {\n        super.hide()\n        this.notifyRedraw()\n    }\n\n    selectLayer(key: string) {\n        const layer = this.layersByKey.get(key.toLowerCase())\n        this.layersByKey.forEach(l => l !== layer && l.hide())\n        layer.show()\n        this.notifyRedraw()\n    }\n\n}\n","import { MenuCfg } from '../../../cfg/MenuCfg'\nimport { MenuBasePanel } from './MenuBasePanel'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\n\nexport class OptionsPanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const panel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => panel.onRepeatBriefing()\n        this.layersByKey.get('menu1').itemsTrigger[1].onClick = () => panel.hide()\n    }\n\n}\n","import { MenuCfg } from '../../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\nimport { MenuBasePanel } from './MenuBasePanel'\n\nexport class PausePanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n    onAbortGame: () => any = () => console.log('abort mission')\n    onRestartGame: () => any = () => console.log('restart mission')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const pausePanel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => pausePanel.hide() // Pause\n        this.layersByKey.get('menu2').itemsTrigger[0].onClick = () => pausePanel.onRepeatBriefing() // Options\n        this.layersByKey.get('menu3').itemsTrigger[0].onClick = () => pausePanel.onAbortGame() // Quit\n        this.layersByKey.get('menu4').itemsTrigger[0].onClick = () => pausePanel.onRestartGame() // Restart\n    }\n\n}\n","export class Rect {\n\n    x: number = 0\n    y: number = 0\n    w: number = 0\n    h: number = 0\n\n    constructor(arr: number[]) {\n        [this.x, this.y, this.w, this.h] = arr\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { Rect } from '../core/Rect'\n\nexport class DialogCfg extends BaseConfig {\n\n    image: string = null\n    titleWindow: Rect = null\n    textWindow: Rect = null\n    okWindow: Rect = null\n    cancelWindow: Rect = null\n    contrastOverlay: string = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        if (lCfgKeyName.endsWith('window')) {\n            return new Rect(cfgValue)\n        }\n        return super.parseValue(lCfgKeyName, cfgValue)\n    }\n\n}\n","import { PanelCfg } from './PanelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { DialogCfg } from './DialogCfg'\nimport { Rect } from '../core/Rect'\nimport { ButtonCfg } from './ButtonsCfg'\n\nexport class BriefingPanelCfg extends PanelCfg {\n\n    // XXX find config values for this class\n\n    titleFont: BitmapFont\n    title: string\n    titleWindow: Rect\n    textFont: BitmapFont\n    textWindow: Rect\n    nextButtonCfg: ButtonCfg\n    backButtonCfg: ButtonCfg\n\n    constructor() {\n        super([])\n        this.titleFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont2.bmp')\n        this.title = ResourceManager.cfg('Main', 'MissionBriefingText')\n        const dialogCfg = new DialogCfg(ResourceManager.cfg('Dialog'))\n        this.titleWindow = dialogCfg.titleWindow\n        this.textFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont.bmp')\n        this.textWindow = dialogCfg.textWindow\n        this.nextButtonCfg = {\n            buttonType: 'Next briefing paragraph',\n            relX: 394,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'NextButton640x480'),\n        }\n        this.backButtonCfg = {\n            buttonType: 'Previous briefing paragraph',\n            relX: 54,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'BackArrow'),\n        }\n    }\n\n}\n","import { BriefingPanel } from '../gui/briefing/BriefingPanel'\nimport { OptionsPanel } from '../gui/overlay/OptionsPanel'\nimport { PausePanel } from '../gui/overlay/PausePanel'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { MenuCfg } from '../../cfg/MenuCfg'\nimport { BriefingPanelCfg } from '../../cfg/BriefingPanelCfg'\nimport { KEY_EVENT, POINTER_EVENT } from '../../event/EventManager'\nimport { Panel } from '../gui/base/Panel'\nimport { GuiBaseLayer } from './GuiBaseLayer'\nimport { ObjectiveImageCfg } from '../../cfg/ObjectiveImageCfg'\nimport { DEV_MODE } from '../../main'\n\nexport class OverlayLayer extends GuiBaseLayer {\n\n    panelBriefing: BriefingPanel\n    panelOptions: OptionsPanel\n    panelPause: PausePanel\n\n    constructor() {\n        super()\n        this.panelPause = this.addPanel(new PausePanel(this, ResourceManager.getResource('PausedMenu') as MenuCfg))\n        this.panelOptions = this.addPanel(new OptionsPanel(this, ResourceManager.getResource('OptionsMenu') as MenuCfg))\n        this.panelBriefing = this.addPanel(new BriefingPanel(new BriefingPanelCfg()))\n        // link items\n        this.panelPause.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n        this.panelOptions.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n    }\n\n    setActivePanel(panel: Panel) {\n        this.panels.forEach(p => p !== panel && p.hide())\n        panel.show()\n        this.redraw()\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.panelBriefing.setup(objectiveText, objectiveBackImgCfg)\n        if (!DEV_MODE) this.setActivePanel(this.panelBriefing)\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (this.panels.every(p => p.hidden)) return false\n        return super.handlePointerEvent(eventEnum, event) || this.isActive() // catch em all\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        let result = false\n        const lEventKey = event.key.toLowerCase()\n        if (eventEnum === KEY_EVENT.UP) {\n            if (lEventKey === 'escape') {\n                if (this.panelBriefing.hidden && this.panelOptions.hidden) {\n                    if (this.panelPause.hidden) {\n                        // TODO actually pause the game\n                        this.setActivePanel(this.panelPause)\n                    } else {\n                        // TODO actually unpause the game\n                        this.panelPause.hide()\n                    }\n                    result = true\n                }\n            } else if (lEventKey === ' ') { // space\n                if (!this.panelBriefing.hidden) {\n                    this.panelBriefing.nextParagraph()\n                    result = true\n                }\n            }\n        }\n        return result\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { WorldManager } from '../scene/WorldManager'\nimport { SelectionLayer } from '../game/layer/SelectionLayer'\nimport { GameLayer } from '../game/layer/GameLayer'\nimport { GuiMainLayer } from '../game/layer/GuiMainLayer'\nimport { Supervisor } from '../game/Supervisor'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { iGet } from '../core/Util'\nimport { LevelObjectiveTextEntry } from '../resource/wadworker/ObjectiveTextParser'\nimport { OverlayLayer } from '../game/layer/OverlayLayer'\nimport { GameState } from '../game/model/GameState'\n\nexport class GameScreen extends BaseScreen {\n\n    onLevelEnd: () => void\n    gameLayer: GameLayer\n    selectionLayer: SelectionLayer\n    guiLayer: GuiMainLayer\n    overlayLayer: OverlayLayer\n    worldManager: WorldManager\n    jobSupervisor: Supervisor\n    levelName: string\n    levelConf: LevelEntryCfg\n\n    constructor() {\n        super()\n        this.gameLayer = this.addLayer(new GameLayer(), 0)\n        this.selectionLayer = this.addLayer(new SelectionLayer(), 10)\n        this.guiLayer = this.addLayer(new GuiMainLayer(), 20)\n        this.overlayLayer = this.addLayer(new OverlayLayer(), 30)\n        this.worldManager = new WorldManager(this.gameLayer.canvas)\n        this.gameLayer.setWorldManager(this.worldManager)\n        this.selectionLayer.setWorldManager(this.worldManager)\n        this.jobSupervisor = new Supervisor(this.worldManager)\n        // link layer\n        this.guiLayer.onOptionsShow = () => this.overlayLayer.panelOptions.show()\n        this.overlayLayer.panelBriefing.messagePanel = this.guiLayer.panelMessages\n        this.overlayLayer.panelPause.onAbortGame = () => this.onLevelEnd && this.onLevelEnd()\n        this.overlayLayer.panelPause.onRestartGame = () => this.restartLevel()\n    }\n\n    startLevel(levelName) {\n        this.levelName = levelName\n        this.levelConf = ResourceManager.getResource('Levels').levelsByName[this.levelName]\n        if (!this.levelConf) throw 'Could not find level configuration for \"' + this.levelName + '\"'\n        this.setupAndStartLevel()\n    }\n\n    restartLevel() {\n        this.hide()\n        GameState.reset()\n        this.setupAndStartLevel()\n    }\n\n    private setupAndStartLevel() {\n        console.log('Starting level ' + this.levelName + ' - ' + this.levelConf.fullName)\n        this.worldManager.setup(this.levelConf, this)\n        const objectiveText: LevelObjectiveTextEntry = iGet(ResourceManager.getResource(this.levelConf.objectiveText), this.levelName)\n        this.guiLayer.reset()\n        this.overlayLayer.setup(objectiveText.objective, this.levelConf.objectiveImage640x480)\n        this.show()\n    }\n\n    show() {\n        super.show()\n        this.worldManager.start()\n        this.jobSupervisor.start()\n    }\n\n    hide() {\n        this.worldManager.stop()\n        this.jobSupervisor.stop()\n        this.layers.forEach((l) => l.reset())\n        super.hide()\n    }\n\n    resize(width: number, height: number) {\n        super.resize(width, height)\n        if (this.worldManager) this.worldManager.resize(width, height)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class RewardScreenButton extends MainMenuBaseItem {\n\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgPressed: HTMLCanvasElement\n    imgDisabled: HTMLCanvasElement\n    disabled: boolean = false\n    visible: boolean = true\n\n    constructor(conf: any) {\n        super()\n        let imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath;\n        [imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath, this.x, this.y] = conf\n        this.imgNormal = ResourceManager.getImage(imgNormalFilepath)\n        this.imgHover = ResourceManager.getImage(imgHoverFilepath)\n        this.imgPressed = ResourceManager.getImage(imgPressedFilepath)\n        this.imgDisabled = ResourceManager.getImage(imgDisabledFilepath)\n        this.width = this.imgNormal.width\n        this.height = this.imgNormal.height\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        if (!this.visible) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled\n        } else if (this.pressed) {\n            img = this.imgPressed\n        } else if (this.hover) {\n            img = this.imgHover\n        }\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from './ScreenLayer'\nimport { RewardCfg } from '../cfg/RewardCfg'\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { RewardScreenButton } from '../menu/RewardScreenButton'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventManager'\nimport { clearTimeoutSafe } from '../core/Util'\n\nexport class RewardScreen extends BaseScreen {\n\n    onAdvance: () => void\n    cfg: RewardCfg = null\n    titleFont: BitmapFont\n    resultsLayer: ScaledLayer\n    descriptionTextLayer: ScaledLayer\n    btnLayer: ScaledLayer\n    resultIndex: number = 0\n    resultLastIndex: number = 0\n    images: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    boxes: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    fonts = {}\n    texts: HTMLCanvasElement[] = []\n    uncoverTimeout = null\n    btnSave: RewardScreenButton\n    btnAdvance: RewardScreenButton\n\n    constructor() {\n        super()\n        this.cfg = ResourceManager.getResource('Reward')\n        this.titleFont = ResourceManager.getBitmapFont(this.cfg.titleFont)\n        const backgroundImg = ResourceManager.getImage(this.cfg.wallpaper)\n        const backgroundLayer = this.addLayer(new ScaledLayer())\n        backgroundLayer.onRedraw = (context) => context.drawImage(backgroundImg, 0, 0)\n        this.cfg.images.forEach((img) => {\n            this.images.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        this.cfg.boxImages.forEach((img) => {\n            this.boxes.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        Object.keys(this.cfg.fonts).forEach((fontKey, index) => {\n            const font = ResourceManager.getBitmapFont(this.cfg.fonts[fontKey])\n            this.fonts[fontKey.toLowerCase()] = font\n            const txt = this.cfg.texts[index]\n            const labelFont = index < 9 ? font : ResourceManager.getBitmapFont(this.cfg.backFont)\n            this.texts.push(labelFont.createTextImage(txt.text))\n        })\n        this.resultsLayer = this.addLayer(new ScaledLayer())\n        this.resultsLayer.handlePointerEvent = ((eventType) => {\n            if (eventType === POINTER_EVENT.UP) {\n                this.uncoverTimeout = clearTimeoutSafe(this.uncoverTimeout)\n                this.uncoverTimeout = null\n                this.resultIndex = this.resultLastIndex\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n                this.redraw()\n                return true\n            }\n            return false\n        })\n        this.descriptionTextLayer = this.addLayer(new ScaledLayer(), 20)\n        this.btnLayer = this.addLayer(new ScaledLayer(), 50)\n        this.btnSave = new RewardScreenButton(this.cfg.saveButton)\n        this.btnSave.disabled = true\n        this.btnAdvance = new RewardScreenButton(this.cfg.advanceButton)\n        this.btnLayer.handlePointerEvent = ((eventType, event) => {\n            if (eventType === POINTER_EVENT.MOVE) {\n                const [sx, sy] = this.btnLayer.toScaledCoords(event.clientX, event.clientY)\n                this.btnSave.checkHover(sx, sy)\n                this.btnAdvance.checkHover(sx, sy)\n            } else if (eventType === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    this.btnSave.checkSetPressed()\n                    this.btnAdvance.checkSetPressed()\n                }\n            } else if (eventType === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    if (this.btnSave.pressed) {\n                        this.btnSave.setReleased()\n                        // TODO switch to save screen\n                    } else if (this.btnAdvance.pressed) {\n                        this.btnAdvance.setReleased()\n                        this.hide()\n                        this.onAdvance()\n                    }\n                }\n            }\n            if (this.btnSave.needsRedraw || this.btnAdvance.needsRedraw) this.redraw()\n            return false\n        })\n        this.btnLayer.onRedraw = (context) => {\n            this.btnSave.draw(context)\n            this.btnAdvance.draw(context)\n        }\n    }\n\n    show() {\n        this.resultIndex = 0\n        this.btnSave.visible = false\n        this.btnAdvance.visible = false\n        this.uncoverResult()\n        const levelFullNameImg = this.titleFont.createTextImage(GameState.levelFullName)\n        let resultText = this.cfg.quitText\n        this.resultLastIndex = this.images.length - 2\n        if (GameState.resultState === GameResultState.COMPLETE) {\n            resultText = this.cfg.completeText\n            this.resultLastIndex = this.images.length - 1\n        } else if (GameState.resultState === GameResultState.FAILED) {\n            resultText = this.cfg.failedText\n        }\n        const resultValues = []\n        resultValues.push(this.fonts['crystals'].createTextImage(this.percentString(GameState.numCrystal, GameState.neededCrystals)))\n        resultValues.push(this.fonts['ore'].createTextImage(this.percentString(GameState.numOre, GameState.totalOres)))\n        resultValues.push(this.fonts['diggable'].createTextImage(this.percentString(GameState.remainingDiggables, GameState.totalDiggables, true)))\n        resultValues.push(this.fonts['constructions'].createTextImage(GameState.buildings.length.toString()))\n        resultValues.push(this.fonts['caverns'].createTextImage(this.percentString(GameState.discoveredCaverns, GameState.totalCaverns)))\n        resultValues.push(this.fonts['figures'].createTextImage(this.percentString(GameState.raiders.length, GameState.getMaxRaiders())))\n        resultValues.push(this.fonts['rockmonsters'].createTextImage(this.percentString(0))) // TODO show defence report, is either 0% or 100%\n        resultValues.push(this.fonts['oxygen'].createTextImage(this.percentString(GameState.airlevel)))\n        resultValues.push(this.fonts['timer'].createTextImage(this.timeString(GameState.gameTimeSeconds)))\n        resultValues.push(this.fonts['score'].createTextImage(this.percentString(GameState.score)))\n        const gameResultTextImg = this.titleFont.createTextImage(resultText)\n        this.resultsLayer.onRedraw = (context) => {\n            context.clearRect(0, 0, this.resultsLayer.fixedWidth, this.resultsLayer.fixedHeight)\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const img = this.images[c]\n                if (img) context.drawImage(img.img, img.x, img.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const box = this.boxes[c]\n                if (box) context.drawImage(box.img, box.x, box.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const txt = this.cfg.texts[c]\n                const text = resultValues[c]\n                if (text) context.drawImage(text, txt.x - text.width / 2, txt.y)\n            }\n            context.drawImage(levelFullNameImg, this.resultsLayer.fixedWidth / 2 - levelFullNameImg.width / 2, this.cfg.vertSpacing - levelFullNameImg.height / 2)\n            context.drawImage(gameResultTextImg, this.resultsLayer.fixedWidth / 2 - gameResultTextImg.width / 2, this.cfg.vertSpacing + levelFullNameImg.height / 2)\n        }\n        this.descriptionTextLayer.onRedraw = (context) => {\n            const descriptionTextImg = this.texts[this.resultIndex]\n            context.clearRect(0, this.cfg.textPos[1], this.descriptionTextLayer.fixedWidth, this.descriptionTextLayer.fixedHeight - this.cfg.textPos[1])\n            const tx = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[0] : 305\n            const ty = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[1] : 195\n            context.drawImage(descriptionTextImg, tx - descriptionTextImg.width / 2, ty)\n        }\n        super.show()\n    }\n\n    percentString(actual, max = 1, lessIsMore: boolean = false) {\n        if (max === 0) max = 1\n        let value = Math.round(Math.max(Math.min(actual / max, 1), 0) * 100)\n        if (lessIsMore) value = 100 - value\n        return value.toString() + '%'\n    }\n\n    padLeft(value: string, padding = '0', length = 2) {\n        while (value.length < length) value = padding + value\n        return value\n    }\n\n    timeString(seconds: number) {\n        const ss = this.padLeft((seconds % 60).toString())\n        const minutes = Math.floor(seconds / 60)\n        const mm = this.padLeft(((minutes % 60).toString()))\n        const hh = this.padLeft((Math.floor(minutes / 60).toString()))\n        return hh + ':' + mm + ':' + ss\n    }\n\n    uncoverResult() {\n        this.uncoverTimeout = setTimeout(() => {\n            this.uncoverTimeout = null\n            this.resultIndex++\n            if (this.resultIndex < this.resultLastIndex) {\n                this.uncoverResult()\n            } else {\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n            }\n            this.redraw()\n        }, this.cfg.timer * 1000)\n    }\n\n}\n","import { ResourceManager } from './resource/ResourceManager'\nimport { LoadingScreen } from './screen/LoadingScreen'\nimport { MainMenuScreen } from './screen/MainMenuScreen'\nimport { GameScreen } from './screen/GameScreen'\nimport { RewardScreen } from './screen/RewardScreen'\nimport { GameState } from './game/model/GameState'\nimport { WadFileSelectionModal } from '../site/modal/WadFileSelectionModal'\n\n// define constants\n\nexport const DEV_MODE = process.env.WEBPACK_MODE === 'development'\nif (DEV_MODE) console.warn('DEV MODE ACTIVE')\n\nexport const JOB_SCHEDULE_INTERVAL = 1000 // milliseconds\nexport const CHECK_CLEARRUBBLE_INTERVAL = 5000 // milliseconds\nexport const JOB_ACTION_RANGE = 5\nexport const CHECK_SPANW_RAIDER_TIMER = 1000 // milliseconds\nexport const MAX_RAIDER_BASE = 12\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10\n\nexport const PANEL_ANIMATION_MULTIPLIER = 3\nexport const HEIGHT_MULTIPLER = 0.1\nexport const SEQUENCE_TEXTURE_FRAMERATE = 5\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640\nexport const SPRITE_RESOLUTION_HEIGHT = 480\nexport const TILESIZE = 40\nexport const NATIVE_FRAMERATE = 30\n\n// setup and link all components\n\nconst loadingScreen = new LoadingScreen()\nconst wadfileSelectModal = new WadFileSelectionModal('game-container')\n\nwadfileSelectModal.onStart = (wad0Url, wad1Url) => {\n    ResourceManager.startLoadingFromUrl(wad0Url, wad1Url)\n}\nResourceManager.onMessage = (msg: string) => {\n    loadingScreen.setLoadingMessage(msg)\n}\nResourceManager.onCacheMissed = () => {\n    wadfileSelectModal.show()\n}\nResourceManager.onInitialLoad = (totalResources: number) => {\n    wadfileSelectModal.hide()\n    loadingScreen.enableGraphicMode(totalResources)\n}\nResourceManager.onAssetLoaded = (assetIndex: number) => {\n    loadingScreen.setLoadingState(assetIndex)\n}\nResourceManager.onLoadDone = () => {\n    // complete setup\n    const mainMenuScreen = new MainMenuScreen()\n    const gameScreen = new GameScreen()\n    const rewardScreen = new RewardScreen()\n\n    mainMenuScreen.onLevelSelected = (levelName) => {\n        try {\n            gameScreen.startLevel(levelName)\n        } catch (e) {\n            console.error('Could not load level: ' + levelName, e)\n            gameScreen.hide()\n            mainMenuScreen.showLevelSelection()\n        }\n    }\n    gameScreen.onLevelEnd = () => {\n        gameScreen.hide()\n        rewardScreen.show()\n    }\n    rewardScreen.onAdvance = () => {\n        GameState.reset()\n        mainMenuScreen.showLevelSelection()\n    }\n\n    // setup complete\n    loadingScreen.hide()\n    const params = new URLSearchParams(window.location.search)\n    const entry = params.get('entry')\n    if (DEV_MODE && entry) {\n        GameState.numOre = Number(params.get('numOre')) || 0\n        GameState.numCrystal = Number(params.get('numCrystal')) || 0\n        if (entry === 'level') mainMenuScreen.showLevelSelection()\n        else if (entry === 'reward') rewardScreen.show()\n        else if (entry) mainMenuScreen.selectLevel(entry)\n    } else {\n        mainMenuScreen.showMainMenu()\n    }\n}\n\n// start the game engine with loading resources\n\nloadingScreen.show()\nResourceManager.startLoadingFromCache()\n"],"sourceRoot":""}