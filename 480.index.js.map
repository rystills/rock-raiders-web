{"version":3,"sources":["webpack://rock-raiders-web/./site/clearcache/clearCacheButton.css","webpack://rock-raiders-web/./site/github/github.css","webpack://rock-raiders-web/./site/clearcache/clearCacheButton.css?9693","webpack://rock-raiders-web/./site/clearcache/ClearCacheButton.ts","webpack://rock-raiders-web/./site/github/github.css?bbb3","webpack://rock-raiders-web/./site/github/github-box.ts","webpack://rock-raiders-web/./site/modal/WadFileSelectionModal.ts","webpack://rock-raiders-web/./src/event/EventKeyEnum.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/event/EventBus.ts","webpack://rock-raiders-web/./src/event/GameEvent.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/game/model/EntityType.ts","webpack://rock-raiders-web/./src/game/model/Selectable.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityList.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTraining.ts","webpack://rock-raiders-web/./src/core/ImageHelper.js","webpack://rock-raiders-web/./src/game/model/anim/AnimationEntityType.ts","webpack://rock-raiders-web/./src/screen/DebugHelper.ts","webpack://rock-raiders-web/./src/game/model/collect/BarrierLocation.ts","webpack://rock-raiders-web/./src/screen/Cursors.ts","webpack://rock-raiders-web/./src/game/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/game/model/map/WallType.ts","webpack://rock-raiders-web/./src/game/model/map/SurfaceGeometry.ts","webpack://rock-raiders-web/./src/game/model/building/BuildPlacementMarkerMesh.ts","webpack://rock-raiders-web/./src/game/model/building/BuildPlacementMarker.ts","webpack://rock-raiders-web/./src/game/model/map/astar.ts","webpack://rock-raiders-web/./src/event/WorldEvents.ts","webpack://rock-raiders-web/./src/event/WorldLocationEvent.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimClip.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimSubObj.ts","webpack://rock-raiders-web/./src/resource/AnimatedMesh.ts","webpack://rock-raiders-web/./src/resource/LWOLoader.ts","webpack://rock-raiders-web/./src/resource/LWSCLoader.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityIdentifier.ts","webpack://rock-raiders-web/./src/game/model/job/JobState.ts","webpack://rock-raiders-web/./src/game/model/job/JobType.ts","webpack://rock-raiders-web/./src/game/model/activities/BaseActivity.ts","webpack://rock-raiders-web/./src/game/model/activities/AnimEntityActivity.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimEntity.ts","webpack://rock-raiders-web/./src/game/model/BaseEntity.ts","webpack://rock-raiders-web/./src/game/model/job/Job.ts","webpack://rock-raiders-web/./src/game/model/job/CarryJob.ts","webpack://rock-raiders-web/./src/game/model/activities/RaiderActivity.ts","webpack://rock-raiders-web/./src/game/model/PathTarget.ts","webpack://rock-raiders-web/./src/game/model/activities/BuildingActivity.ts","webpack://rock-raiders-web/./src/game/model/collect/CarryPathTarget.ts","webpack://rock-raiders-web/./src/game/model/collect/MaterialEntity.ts","webpack://rock-raiders-web/./src/game/model/collect/Crystal.ts","webpack://rock-raiders-web/./src/game/model/activities/DynamiteActivity.ts","webpack://rock-raiders-web/./src/game/model/job/surface/CarryDynamiteJob.ts","webpack://rock-raiders-web/./src/game/model/collect/Dynamite.ts","webpack://rock-raiders-web/./src/game/model/collect/Ore.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTool.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ClearRubbleJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/DrillJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ReinforceJob.ts","webpack://rock-raiders-web/./src/game/model/map/Surface.ts","webpack://rock-raiders-web/./src/game/TerrainLoader.ts","webpack://rock-raiders-web/./src/resource/wadworker/WorkerMessageType.ts","webpack://rock-raiders-web/./src/game/model/MoveState.ts","webpack://rock-raiders-web/./src/game/model/map/TerrainPath.ts","webpack://rock-raiders-web/./src/game/model/map/Terrain.ts","webpack://rock-raiders-web/./src/game/SceneManager.ts","webpack://rock-raiders-web/./src/resource/wadworker/WadUtil.ts","webpack://rock-raiders-web/./src/core/BitmapFont.ts","webpack://rock-raiders-web/./src/resource/ResourceCache.ts","webpack://rock-raiders-web/./src/resource/wadworker/InitLoadingMessage.ts","webpack://rock-raiders-web/./src/resource/ResourceManager.ts","webpack://rock-raiders-web/./src/resource/AnimEntityLoader.ts","webpack://rock-raiders-web/./src/game/model/job/MoveJob.ts","webpack://rock-raiders-web/./src/game/model/EntityStep.ts","webpack://rock-raiders-web/./src/game/model/MovableEntity.ts","webpack://rock-raiders-web/./src/game/model/FulfillerEntity.ts","webpack://rock-raiders-web/./src/game/model/raider/Raider.ts","webpack://rock-raiders-web/./src/game/model/activities/BarrierActivity.ts","webpack://rock-raiders-web/./src/game/model/collect/Barrier.ts","webpack://rock-raiders-web/./src/game/model/job/CarryFenceJob.ts","webpack://rock-raiders-web/./src/game/model/collect/ElectricFence.ts","webpack://rock-raiders-web/./src/game/model/building/BuildingEntity.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Barracks.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Docks.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Geodome.ts","webpack://rock-raiders-web/./src/game/model/building/entities/GunStation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/OreRefinery.ts","webpack://rock-raiders-web/./src/game/model/building/entities/PowerStation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/TeleportBig.ts","webpack://rock-raiders-web/./src/game/model/building/entities/TeleportPad.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Toolstation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Upgrade.ts","webpack://rock-raiders-web/./src/game/model/activities/MonsterActivity.ts","webpack://rock-raiders-web/./src/game/model/monster/Monster.ts","webpack://rock-raiders-web/./src/game/model/monster/Bat.ts","webpack://rock-raiders-web/./src/game/model/monster/SmallSpider.ts","webpack://rock-raiders-web/./src/game/ObjectListLoader.ts","webpack://rock-raiders-web/./src/event/EventTypeEnum.ts","webpack://rock-raiders-web/./src/game/model/job/GetToolJob.ts","webpack://rock-raiders-web/./src/core/Area.ts","webpack://rock-raiders-web/./src/game/model/job/TrainingPathTarget.ts","webpack://rock-raiders-web/./src/game/model/job/TrainJob.ts","webpack://rock-raiders-web/./src/game/Supervisor.ts","webpack://rock-raiders-web/./src/core/NerpRunner.ts","webpack://rock-raiders-web/./src/core/NerpParser.ts","webpack://rock-raiders-web/./src/game/WorldManager.ts","webpack://rock-raiders-web/./src/screen/layer/ScreenLayer.ts","webpack://rock-raiders-web/./src/event/GameKeyboardEvent.ts","webpack://rock-raiders-web/./src/event/GamePointerEvent.ts","webpack://rock-raiders-web/./src/event/GameWheelEvent.ts","webpack://rock-raiders-web/./src/event/EventManager.ts","webpack://rock-raiders-web/./src/screen/layer/CursorLayer.ts","webpack://rock-raiders-web/./src/screen/BaseScreen.ts","webpack://rock-raiders-web/./src/game/model/job/surface/CompletePowerPathJob.ts","webpack://rock-raiders-web/./src/game/model/building/BuildingSite.ts","webpack://rock-raiders-web/./src/screen/layer/GameLayer.ts","webpack://rock-raiders-web/./src/cfg/BaseConfig.ts","webpack://rock-raiders-web/./src/cfg/BaseButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonCfg.ts","webpack://rock-raiders-web/./src/gui/infodock/ButtonInfoDockCfg.ts","webpack://rock-raiders-web/./src/gui/base/BaseElement.ts","webpack://rock-raiders-web/./src/gui/base/Button.ts","webpack://rock-raiders-web/./src/gui/base/Panel.ts","webpack://rock-raiders-web/./src/gui/radar/RadarPanel.ts","webpack://rock-raiders-web/./src/gui/sidebar/SideBarLabel.ts","webpack://rock-raiders-web/./src/gui/sidebar/PanelCrystalSideBar.ts","webpack://rock-raiders-web/./src/gui/toppanel/ButtonPriorityListCfg.ts","webpack://rock-raiders-web/./src/gui/toppanel/ButtonTopCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonCameraControlCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonInformationCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonsCfg.ts","webpack://rock-raiders-web/./src/cfg/PanelCfg.ts","webpack://rock-raiders-web/./src/cfg/PanelsCfg.ts","webpack://rock-raiders-web/./src/cfg/InfoButtonCfg.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoDockButton.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoDockPanel.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoMessagesEntryConfig.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoMessagesConfig.ts","webpack://rock-raiders-web/./src/gui/infodock/InformationPanel.ts","webpack://rock-raiders-web/./src/cfg/IconPanelBackButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/MenuItemCfg.ts","webpack://rock-raiders-web/./src/gui/main/IconPanelButton.ts","webpack://rock-raiders-web/./src/gui/main/IconSubPanel.ts","webpack://rock-raiders-web/./src/gui/main/BuildingPanel.ts","webpack://rock-raiders-web/./src/gui/main/GetToolPanel.ts","webpack://rock-raiders-web/./src/gui/main/IconPanelButtonLabel.ts","webpack://rock-raiders-web/./src/gui/main/LargeVehiclePanel.ts","webpack://rock-raiders-web/./src/gui/main/IconPanelToggleButton.ts","webpack://rock-raiders-web/./src/gui/main/SelectBasePanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectBuildingPanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectFloorPanel.ts","webpack://rock-raiders-web/./src/game/model/job/EatJob.ts","webpack://rock-raiders-web/./src/game/model/job/UpgradeJob.ts","webpack://rock-raiders-web/./src/gui/main/SelectRaiderPanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectRubblePanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectVehiclePanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectWallPanel.ts","webpack://rock-raiders-web/./src/gui/main/SmallVehiclePanel.ts","webpack://rock-raiders-web/./src/gui/main/TrainRaiderPanel.ts","webpack://rock-raiders-web/./src/gui/main/MainPanel.ts","webpack://rock-raiders-web/./src/gui/messagepanel/TextInfoMessage.ts","webpack://rock-raiders-web/./src/gui/messagepanel/MessagePanel.ts","webpack://rock-raiders-web/./src/gui/messagepanel/TextInfoMessageEntryConfig.ts","webpack://rock-raiders-web/./src/gui/messagepanel/TextInfoMessageConfig.ts","webpack://rock-raiders-web/./src/gui/toppanel/PriorityButtonsConfig.ts","webpack://rock-raiders-web/./src/gui/toppanel/PriorityListPanel.ts","webpack://rock-raiders-web/./src/gui/toppanel/PriorityPositionsEntry.ts","webpack://rock-raiders-web/./src/gui/base/ToggleButton.ts","webpack://rock-raiders-web/./src/gui/toppanel/TopPanel.ts","webpack://rock-raiders-web/./src/screen/layer/GuiBaseLayer.ts","webpack://rock-raiders-web/./src/screen/layer/GuiMainLayer.ts","webpack://rock-raiders-web/./src/core/Rect.ts","webpack://rock-raiders-web/./src/cfg/DialogCfg.ts","webpack://rock-raiders-web/./src/gui/briefing/BriefingPanelCfg.ts","webpack://rock-raiders-web/./src/gui/briefing/BriefingPanel.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuCycleItem.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuLabelItem.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuSliderItem.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuLayer.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuBasePanel.ts","webpack://rock-raiders-web/./src/gui/overlay/OptionsPanel.ts","webpack://rock-raiders-web/./src/gui/overlay/PausePanel.ts","webpack://rock-raiders-web/./src/screen/layer/OverlayLayer.ts","webpack://rock-raiders-web/./src/screen/layer/SelectionLayer.ts","webpack://rock-raiders-web/./src/screen/GameScreen.ts","webpack://rock-raiders-web/./src/menu/MainMenuBaseItem.ts","webpack://rock-raiders-web/./src/menu/MainMenuIconButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLabelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLayer.ts","webpack://rock-raiders-web/./src/menu/MainMenuLevelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuPanel.ts","webpack://rock-raiders-web/./src/menu/MainMenuWindow.ts","webpack://rock-raiders-web/./src/menu/LevelSelectLayer.ts","webpack://rock-raiders-web/./src/screen/MainMenuScreen.ts","webpack://rock-raiders-web/./src/menu/RewardScreenButton.ts","webpack://rock-raiders-web/./src/screen/RewardScreen.ts","webpack://rock-raiders-web/./src/main.ts","webpack://rock-raiders-web/./src/screen/LoadingScreen.ts","webpack://rock-raiders-web/./src/params.ts"],"names":["___CSS_LOADER_EXPORT___","push","module","id","ClearCacheButton","parentId","this","rootElement","document","getElementById","appendChild","createElement","classList","add","button","innerText","onclick","indexedDB","deleteDatabase","location","reload","style","visibility","GithubBox","link","href","img","src","alt","textContent","WadFileSelectionModal","onStart","tabIndex","setAttribute","modalDialog","modalContent","modalHeader","modalTitle","modalBody","navTabList","navFileBtn","appendNavButton","navUrlBtn","navTabContent","appendNavFileTab","appendNavUrlTab","modal","backdrop","keyboard","parent","active","controlTarget","navBtn","type","String","labelledBy","navFileTab","appendNavTab","wad0File","appendWadFileGroup","wad1File","btnStartFile","addEventListener","disabled","wad0FileUrl","URL","createObjectURL","files","wad1FileUrl","filename","wadFileGroup","wadFileLabel","innerHTML","wadFileInput","required","navUrlTab","urlHint","wad0Url","appendWadUrlGroup","wad1Url","btnStartUrl","value","navTab","example","wadUrlGroup","wadUrlLabel","wadUrlInput","show","hide","EventKey","getFilename","url","strUrl","toString","replace","startsWith","substring","lastInd","lastIndexOf","iGet","obj","keys","forEach","keyname","Object","filter","key","toLowerCase","map","decodeString","data","TextDecoder","decode","decodeFilepath","getRandomInclusive","min","max","Math","ceil","floor","random","getRandom","getRandomSign","clearTimeoutSafe","timeout","clearTimeout","clearIntervalSafe","interval","clearInterval","Array","prototype","remove","element","index","indexOf","splice","last","length","undefined","count","callback","counter","e","partition","left","right","a","Map","getOrUpdate","updateCallback","get","set","EventBus","event","blockedEvents","includes","eventKey","isLocal","console","log","getListener","eventListener","GameEvent","LocalEvent","super","SelectionEvent","SurfaceSelectedEvent","surface","BuildingSelected","building","RaiderSelected","raider","EntityDeselected","SurfaceChanged","AirLevelChanged","CancelBuildMode","ChangeCursor","cursor","EntityType","EntitySuperType","SelectionType","GameResultState","PriorityList","levelDefault","current","priorities","reset","enabled","tmp","entry","PriorityEntry","c","job","priority","some","j","getPriorityIdentifier","priorityIdentifier","find","levelPriorityEntry","RaiderTraining","name","DRIVER","ENGINEER","GEOLOGIST","PILOT","SAILOR","DEMOLITION","GameState","resultState","RUNNING","levelFullName","numCrystal","numOre","numBrick","usedCrystals","neededCrystals","airLevel","selectedEntities","selectionType","buildings","buildingsUndiscovered","raiders","raidersUndiscovered","requestedRaiders","materials","materialsUndiscovered","buildingSites","spiders","spidersBySurface","bats","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","discoveredCaverns","levelStartTime","levelStopTime","rewardConfig","priorityList","oxygenRate","buildModeSelection","buildingTypes","b","isPowered","bt","entityType","position","targetBuildings","getBuildingsByType","closest","minDist","bPos","getDropPosition","dist","distanceToSquared","upgrades","level","training","stats","TrainDynamite","entities","previouslySelected","stillSelected","deselect","selectionEvents","freshlySelected","selectionEvent","select","len","GROUP","getSelectionType","publishEvent","BARRACKS","minX","x","minZ","y","maxX","maxZ","discoverEntities","undiscovered","discovered","pos","getPosition","z","onDiscover","r","round","quota","importance","scoreCrystals","crystals","Infinity","scoreTimer","gameTimeSeconds","timer","scoreCaverns","caverns","scoreConstructions","constructions","scoreOxygen","oxygen","scoreFigures","figures","SURFACE","BUILDING","RAIDER","entity","terrain","sceneMgr","currentSurface","getSurfaceFromWorld","nearbySpiders","getSurface","createContext","width","height","error","result","fillStyle","fillRect","createDummyContext","canvas","context","getContext","createDummyImgData","ImageData","px","py","setPixel","imgData","g","n","getPixel","AnimationEntityType","carryNullName","depositNullName","toolNullName","mediumPoly","highPoly","fPPoly","activities","Stats","DebugHelper","setMode","domElement","top","body","begin","end","BarrierLocation","surfaceCenter","heading","clone","sub","angle","PI","Cursors","SurfaceType","options","shaping","matIndex","selectable","drillable","drillableHard","explodable","reinforcable","Pointer_Standard","statsDrillName","assign","typeNum","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","GROUND","Pointer_SurfaceType_Immovable","Pointer_SurfaceType_Hard","Pointer_SurfaceType_Medium","Pointer_SurfaceType_Loose","Pointer_SurfaceType_OreSeam","Pointer_SurfaceType_CrystalSeam","Pointer_SurfaceType_RechargeSeam","POWER_PATH","POWER_PATH_SITE","WALL_TYPE","SurfaceGeometry","wallType","topLeftVertex","bottomRightVertex","topRightVertex","bottomLeftVertex","topLeftHeight","topRightHeight","bottomRightHeight","bottomLeftHeight","uvOffset","INVERTED_CORNER","WALL","WEIRD_CREVICE","Boolean","uv","bufferVertices","bufferNormals","addFaceAndNormals","normal","subVectors","cross","normalize","uvIndexes","bufferVertexUvs","i","bufferGeometry","BufferAttribute","Float32Array","copyVector3sArray","copyVector2sArray","BuildPlacementMarkerMesh","standardColor","geometry","shininess","transparent","opacity","color","visible","primaryPosition","multiplyScalar","applyAxisAngle","isValid","material","setHex","create","BuildPlacementMarker","group","markers","buildingMarkerPrimary","buildingMarkerSecondary","powerPathMarkerPrimary","powerPathMarkerSecondary","waterPathMarker","sdx","sdz","lastCheck","visibleSurfaces","primarySurface","secondarySurface","waterSurface","buildingMarkerColor","pathMarkerColor","waterMarkerColor","addMarker","marker","worldPosition","updateAllMarker","markAsValid","hideAllMarker","worldMgr","copy","getFloorPosition","sdxv","sdzv","abs","sign","atan2","updateState","secondaryBuildingPart","primaryPowerPath","secondaryPowerPath","waterPathSurface","every","s","surfaceType","neighbors","m","barrierLocations","center","getCenterWorld2D","barrierOffset","secondary","dx","dy","pathTo","node","curr","path","unshift","astar","graph","start","cleanDirty","heuristic","heuristics","manhattan","openHeap","BinaryHeap","f","closestNode","h","markDirty","size","currentNode","pop","closed","il","neighbor","isWall","gScore","getCost","beenVisited","visited","rescoreElement","pos0","pos1","D2","sqrt","d1","d2","Graph","gridIn","nodes","grid","dirtyNodes","diagonal","row","GridNode","init","cleanNode","ret","graphString","rowDebug","weight","join","fromNeighbor","scoreFunction","content","sinkDown","bubbleUp","parentN","elemScore","child2N","child1N","child1Score","swap","child1","child2","WorldEvent","entityKey","JobEvent","JobCreateEvent","JobDeleteEvent","RaiderRequested","MaterialAmountChanged","EntityAddedEvent","superType","EntityRemovedEvent","CavernDiscovered","OreFoundEvent","BuildingUpgraded","EntityTrained","WorldLocationEvent","locationProvider","CrystalFoundEvent","LandslideEvent","RaiderDiscoveredEvent","AnimClip","looping","transcoef","firstFrame","lastFrame","framesPerSecond","bodies","degToRad","AnimSubObj","relPos","relRot","relScale","parentObjInd","model","degX","degY","degZ","animationFrameIndex","infos","radVec","AnimatedMesh","mesh","textureSequences","dispose","isArray","mat","SURF_VTRN","getVector3AtOffset","view","offset","vector","getFloat32","LWOLoader","verbose","vertices","indices","uvs","sequenceIntervals","chunkOffset","chunkSize","numVertices","vertexIndex","vertexOffset","buffer","surfaceNames","Uint8Array","split","new_material","alphaToCoverage","totalNumIndices","numIndices","getInt16","materialIndex","addGroup","currentIndex","Uint16Array","faceIndices","Int16Array","COUNTER_CLOCKWISE","getUint8","materialName","textureFlags","textureSize","textureCenter","subchunkOffset","subchunkType","getInt32","subchunkSize","colorArray","fromArray","flags","getUint16","warn","side","blending","depthWrite","edgeTransparencyThreshold","luminosity","emissiveIntensity","diffuse","specular","reflection","reflectivity","transparency","vLuminosity","vDiffuse","vSpecular","toArray","textureTypeName","textureValue","textureColorArray","textureFilepath","sequenceTexture","endsWith","match","textureFilename","textures","ResourceManager","filterTextureSequenceNames","getTexture","seqNum","setInterval","lTextureName","XAXIS_BIT","groups","uvIndex","u","v","planarMapUVS","DataView","getUint32","fileSize","byteLength","ID4_SIZE","magic","chunkType","parsePoints","parseSurfaceNames","parsePolygons","parseSurface","setIndex","computeVertexNormals","LWSCLoader","animationClip","lines","lineIndex","l","trim","sceneFileVersion","parseInt","line","parseFrameBlock","parseObjectBlock","parseLine","frameStep","subObj","slice","lwoBuffer","getResource","SceneManager","registerMesh","parse","lenInfos","lenFrames","Number","setFrameAndFollowing","numOfInformationChannels","numOfKeyframes","frameNum","setOpacityAndFollowing","PriorityIdentifier","JobState","JobType","BaseActivity","activityKey","AnimEntityActivity","Stand","AnimEntity","floorOffset","rotation","radHeading","rotateOnAxis","surfaces","scene","aeFilename","animationEntityType","poly","animation","animationTimeout","selectionFrame","pickSphere","carryJoint","depositJoint","getToolJoint","activity","radiusSq","getAnimationEntityType","changeActivity","moveUp","setTimeout","removeFromScene","getDefaultActivity","onAnimationDone","durationTimeMs","lActivityKey","anim","bind","carries","children","polyModel","lBodyName","polyPart","parentInd","sphere","setFromObject","getBoundingSphere","radius","animate","frameIndex","p","scale","hasOwnProperty","nextFrame","standardDurationTimeMs","that","timeoutTimeMs","pickSphereDiameter","PickSphere","pickSphereRadius","userData","pickSphereCenter","getPickSphereCenter","createSelectionFrame","getBoundingBoxCenter","getCenter","applyMatrix4","makeScale","selectionFrameTextureSize","ctx","strength","selectionFrameTexture","selectionMaterial","depthTest","selectionFrameSize","Job","fulfiller","jobstate","INCOMPLETE","CANCELED","stopJob","COMPLETE","target","PublicJob","CarryJob","item","CARRY","actualTarget","getCarryTargets","setTargetSite","site","getDropAction","canGatherItem","onJobComplete","targetLocation","lookAt","dropItem","gatherItem","RaiderActivity","Route","RunPanic","Drill","Walk","Reinforce","Reverse","TurnLeft","TurnRight","CantDo","Collect","Clear","Carry","CarryTurnLeft","CarryTurnRight","CarryStand","Dynamite","Place","Deposit","TeleportIn","Repair","rest","routeRubble","CarryRubble","Eat","FireLaser","GetUp","ThrownByRockMonster","Slip","Train","Recharge","Waiting1","Waiting2","Waiting3","Waiting4","Hoverboard","Standhoverboard","HitLefthoverboard","HitRighthoverboard","HitFronthoverboard","HitBackhoverboard","SMALLTRUCK","StandSMALLTRUCK","HitLeftSMALLTRUCK","HitRightSMALLTRUCK","HitFrontSMALLTRUCK","HitBackSMALLTRUCK","SMALLheli","StandSMALLheli","HitLeftSMALLheli","HitRightSMALLheli","HitFrontSMALLheli","HitBackSMALLheli","SMALLCAT","StandSMALLCAT","HitLeftSMALLCAT","HitRightSMALLCAT","HitFrontSMALLCAT","HitBackSMALLCAT","SMALLMLP","StandSMALLMLP","HitLeftSMALLMLP","HitRightSMALLMLP","HitFrontSMALLMLP","HitBackSMALLMLP","LARGECAT","StandLARGECAT","HitLeftLARGECAT","HitRightLARGECAT","HitFrontLARGECAT","HitBackLARGECAT","SMALLDIGGER","StandSMALLDIGGER","PathTarget","addToScene","BuildingActivity","Teleport","Explode","Unpowered","CarryPathTarget","addItem","POWER_STATION","ORE_REFINERY","addItemToStorage","CRYSTAL","ORE","MaterialEntity","MATERIAL","targetBuildingTypes","targets","targetSite","positionPathTarget","TOOLSTATION","updateTargets","sites","needs","getRandomDropPosition","getTargetBuildingTypes","getDropPosition2D","t","complete","resetTarget","createCarryJob","unAssign","getPosition2D","equals","Crystal","resource2","mesh2","resource","emissive","aiPriorityCrystal","PowerCrystal","DynamiteActivity","Normal","TickDown","CarryDynamiteJob","dynamite","ignite","DYNAMITE","targetSurface","aiPriorityDestruction","isExplodable","getDigPositions","getCenterWorld","collapse","Ore","aiPriorityOre","RaiderTool","DRILL","HAMMER","SHOVEL","SPANNER","FREEZERGUN","LASER","PUSHERGUN","BIRDSCARER","ClearRubbleJob","CLEAR_RUBBLE","rubblePositions","reduceRubble","jobWorkplaces","getWorkplaces","hasRubble","aiPriorityClearing","DrillJob","onDrillComplete","drillTimeInMsPerType","drillTime","drillTimeEntry","drillTimeMs","ReinforceJob","REINFORCE","reinforce","aiPriorityReinforce","PathMap","PredugMap","WorkerMessageType","MoveState","Surface","heightOffset","containedOres","containedCrystals","selected","reinforced","drillJob","reinforceJob","dynamiteJob","clearRubbleJob","surfaceRotation","seamLevel","fallinTimeout","fallinGrp","needsMeshUpdate","topLeftHeightOffset","topRightHeightOffset","bottomLeftHeightOffset","bottomRightHeightOffset","fence","hasPower","setDiscovered","floors","others","caveFound","shift","o","isSupported","discoverSurface","drillPosition","vec","rotateAround","crystal","placeMaterial","cancelJobs","getRandomPosition","discover","dropContainedOre","surf","updateSurfaceMeshes","floorGroup","updateWorldMatrix","dropAmount","safeRemoveJob","updateJobColor","updateTexture","surfLeft","surfTopLeft","surfTop","surfTopRight","surfRight","surfBottomRight","surfBottom","surfBottomLeft","isHighGround","surf1","surf2","surf3","force","updateGeometry","cancelReinforceJobs","updateGraphWalk","getGraphWalkWeight","graphWalk","textureName","textureSet","texturebasename","updatePowerPathTexture","CORNER","texture","accessMaterials","isPath","bottom","pathSum","avgHeight","args","sum","cnt","blocksPathSurface","isDrillable","digPosition","isWalkable","addScalar","getTerrainHeight","fallinLevel","originPos","targetPos","findFallInOrigin","findFallInTarget","scheduleFallin","targetX","targetY","createFallin","fallinPosition","makeRubble","worldX","worldZ","sx","sy","dy0","interpolate","dy1","y0","y1","containedOre","state","recursive","setHasPower","targetBuilding","getClosestBuildingByType","getHeading","TerrainPath","locations","lengthSq","Terrain","roofGroup","cachedPaths","setScalar","registerEventListener","getSurfaceFromWorldXZ","getSurfaceOrNull","forEachSurface","updateMesh","resetGraphWalk","clear","gridStartX","gridStartY","gridEndX","gridEndY","cacheIdentifier","cachedPath","addLocation","searchPath","startNode","endNode","worldPath","search","gridNodeToWorldPos","gridNode","divideScalar","leftSurface","isReinforcable","topSurface","rightSurface","bottomSurface","leftSurface2","isDigable","topSurface2","rightSurface2","bottomSurface2","each","maxFps","debugHelper","renderer","antialias","setClearColor","camera","controls","mouseButtons","LEFT","MIDDLE","RIGHT","buildMarker","rx","ry","raycaster","setFromCamera","intersects","intersectObjects","object","selectEntities","r1x","r1y","r2x","r2y","startPoint","endPoint","EPSILON","updateProjectionMatrix","updateMatrixWorld","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","setFromMatrixPosition","matrixWorld","unproject","vectemp1","vectemp2","vectemp3","deep","MAX_VALUE","frustum","planes","setFromCoplanarPoints","containsPoint","getSelectionCenter","levelConf","ambientRgb","cfg","maxAmbRgb","normalizedRgb","ambientColor","ambientLight","cursorTorchlight","distance","tileSize","blockSize","themeName","terrainMap","pathMap","surfaceMap","predugMap","cryOreMap","fallinMap","erodeMap","surfaceTypeNum","getByNum","predugLevel","CAVERN_EXPOSED","SLUG_HOLE_EXPOSED","SLUG_HOLE_HIDDEN","CAVERN_HIDDEN","pathMapLevel","NONE","RUBBLE","currentCryOre","weights","col","w","setFallinLevel","loadTerrain","countDiggables","countCrystals","countOres","renderInterval","animRequest","requestAnimationFrame","renderStart","render","renderDone","cancelAnimationFrame","meshRegistry","animatedMesh","setSize","point","world","floorY","getFloorHeight","intersect","intersectObject","BitmapFont","fontImageData","cols","rows","letters","chars","maxCharWidth","getActualCharacterWidth","rowPixelIndex","colPixelIndex","charHeight","extractData","actualWidth","startX","startY","alpha","text","maxWidth","autoCenter","determineRows","rowX","rowY","letterX","letterImgData","charAt","putImageData","spaceWidth","rowText","rowWidth","word","wordWidth","letter","letterImg","ResourceCache","configuration","resourceName","lName","resourceByName","imageName","getImageData","getImage","fontCache","getBitmapFont","InitLoadingMessage","startLoading","msg","worker","onmessage","ASSET","assetName","assetObj","alphaIndexMatch","onAssetLoaded","MSG","onMessage","CFG","onInitialLoad","totalResources","CACHE_MISS","onCacheMissed","DONE","loadingTimeSeconds","onLoadDone","postMessage","basename","lBasename","res","lSharedTextureName","needsUpdate","cfgRoot","root","getPath","polyname","polykey","act","file","isLws","loadModels","Worker","MoveJob","MOVE","EntityStep","targetReached","MovableEntity","currentPath","RouteSpeed","isOnPath","PathCoef","paths","findPathToTarget","sort","TARGET_UNREACHABLE","nextLocation","firstLocation","step","determineStep","isInArea","TARGET_REACHED","getRouteActivity","MOVED","getEntityStep","stepLengthSq","entitySpeed","getSpeed","setLength","targetWorld","FulfillerEntity","workInterval","followUpJob","work","getWorldPosition","unassign","Raider","tools","trainings","slipped","Pilot","findPath","isOnRubble","moveToClosestTarget","setActualWorkplace","getNearbySpiders","spider","slip","onDeath","carryItem","getCarryItem","getPositionPathTarget","pickupItem","moveToClosestWorkplace","isReadyToComplete","workActivity","getWorkActivity","completeJob","getWorkDuration","beamUp","tool","has","BarrierActivity","Short","Expand","Long","Barrier","BARRIER","aiPriorityConstruction","onAddToSite","CarryFenceJob","canPlaceFence","ElectricFence","ELECTRIC_FENCE","BuildingEntity","powerSwitch","spawning","primaryPathSurface","secondaryPathSurface","upgradeCostOre","upgradeCostBrick","crystalsInUse","inBeam","turnOnPower","worldPos","SelfPowered","PowerBuilding","Levels","canUpgrade","BRICK","CostOre","CostCrystal","setBuilding","hasMaxLevel","quantity","disableTeleportIn","getSurfaceFromWorld2D","secondaryOffset","pathOffset","pathSurface","GEODOME","createPickSphere","onPlaceDown","Barracks","Docks","DOCKS","Geodome","GunStation","GUNSTATION","OreRefinery","PowerStation","Powerstation","TeleportBig","TELEPORT_BIG","TeleportBIG","TeleportPad","TELEPORT_PAD","Toolstation","Upgrade","UPGRADE","MonsterActivity","Monster","MONSTER","moveTimeout","Bat","BAT","onMove","bat","findTarget","currentCenter","targetZ","onLevelEnd","SmallSpider","SMALL_SPIDER","MOUSE_BUTTON","POINTER_EVENT","KEY_EVENT","GetToolJob","GET_TOOL","addTool","Area","x0","x1","TrainingPathTarget","targetArea","TrainJob","TRAIN","workplaces","addTraining","Supervisor","jobs","assignInterval","checkRubbleInterval","cancel","stop","assignJobs","checkUnclearedRubble","resetWorkInterval","availableJobs","isEnabled","getPriority","unemployedRaider","closestRaider","closestRaiderIndex","minDistance","closestToolRaider","closestToolRaiderIndex","minToolDistance","closestToolstationPosition","closestNeededTool","closestTrainingRaider","closestTrainingRaiderIndex","minTrainingDistance","closestTrainingArea","closestNeededTraining","requiredTool","getRequiredTool","hasRequiredTool","hasTool","raiderTraining","getRequiredTraining","hasTraining","raiderPosition","pathToJob","pathToTraining","getTrainingSites","targetPosition","pathToToolstation","setJob","startSurface","rad","createClearRubbleJob","NerpRunner","debug","nerpInterval","registers","fill","timers","scriptLines","statements","macrosByName","labelsByName","halted","programCounter","messages","messagePermit","execute","register","num","isNaN","Error","checkRegister","checkRegisterValue","Date","getTime","FAILED","messagesAllowed","typeName","setBuildingsUpgradeLevel","arg1","arg2","arg3","messageNumber","arrowDisabled","txt","methodName","methodArgs","setRegisterMatch","setR","addRegisterMatch","addR","getRegisterMatch","getR","setTimerMatch","setTimer","getTimerMatch","getTimer","lMethodName","memberName","getOwnPropertyNames","apply","conditionResult","executeStatement","expression","invoke","argValues","callMethod","comparator","jump","statement","label","NerpParser","nerpScript","nerpRunner","includeName","includedRunner","concat","firstLine","macroLines","mLine","append","macroLine","macroCall","replaceMacros","labelMatch","preProcess","labelName","macro","RegExp","number","opSplit","brackets","spaceSplit","jumpMatch","WorldManager","oxygenUpdateInterval","updateOxygen","fullName","reward","setList","nerpFile","nerpMessageFile","startExecution","now","pauseExecution","diff","OxygenCoef","reduce","ScreenLayer","withContext","background","zIndex","layerA","layerB","aIndex","bIndex","onRedraw","isActive","redraw","windowX","windowY","clientRect","getBoundingClientRect","ScaledLayer","fixedWidth","fixedHeight","updateScale","scaleX","scaleY","cx","cy","toCanvasCoords","resize","GameKeyboardEvent","eventEnum","bubbles","GamePointerEvent","clientX","clientY","pointerType","ctrlKey","metaKey","shiftKey","GameWheelEvent","deltaX","deltaY","deltaZ","EventManager","screen","gameCanvasContainer","isInRect","preventDefault","DOWN","UP","eventType","nonBubblingClone","layers","compareZ","handlePointerEvent","handleKeyEvent","handleWheelEvent","CursorLayer","changeCursor","pointersCfg","curUrl","revokeObjectURL","cursorFilename","curImg","toDataURL","BaseScreen","ratio","focus","eventMgr","window","onWindowResize","cursorLayer","addLayer","layer","setZIndex","offsetWidth","maxHeight","offsetHeight","idealHeight","firstLayer","rect","CompletePowerPathJob","placedItems","COMPLETE_POWER_PATH","placed","BuildingSite","neededByType","assignedByType","onSiteByType","needed","checkComplete","neededType","placeDown","items","itemsOnSite","GameLayer","rightDown","lastCursor","intersectionPoint","getTerrainPositionFromEvent","setTorchPosition","update","updateCursor","MAIN","getBarrierLocations","neededOre","closestToolstation","spawnBarriers","spawnMaterials","SECONDARY","assignSurfaceJob","createDrillJob","dispatchEvent","PointerEvent","determineCursor","Pointer_Selected","getTerrainIntersectionPoint","WheelEvent","BaseConfig","config","cfgObj","cfgKey","lCfgKeyName","objKey","assignValue","constructor","cfgValue","currentValue","currentIsArray","parsedValue","parseValue","parsedIsArray","BaseButtonCfg","buttonType","normalFile","highlightFile","pressedFile","disabledFile","relX","relY","tooltip","ButtonCfg","ButtonInfoDockCfg","panelButtonInfoDockGoto","panelButtonInfoDockClose","setFromCfg","BaseElement","hidden","hover","pressed","child","updatePosition","drawHover","drawTooltip","isInactive","inRect","stateChanged","checkHover","checkClick","onClick","checkRelease","release","notifyRedraw","Button","btnCfg","imgNormal","imgHover","imgPressed","imgDisabled","getImageOrNull","drawImage","Panel","panelCfg","xOut","yOut","xIn","yIn","movedIn","onDone","toggleState","updateAnimation","speed","diffX","diffY","panel","RadarPanel","panelFillCfg","panelOverlayCfg","buttonsCfg","addChild","overlay","btnToggle","panelButtonRadarToggle","btnMap","panelButtonRadarMapView","btnTagged","panelButtonRadarTaggedObjectView","ButtonRadarCfg","panelButtonRadarZoomIn","panelButtonRadarZoomOut","SideBarLabel","textAlign","font","fillText","PanelCrystalSideBar","labelOre","panelButtonCrystalSideBarOre","totalOre","labelCrystal","panelButtonCrystalSideBarCrystals","imgNoCrystal","imgSmallCrystal","imgUsedCrystal","imgOre","curX","curY","imgCrystal","ButtonCrystalSideBarCfg","ButtonPriorityListCfg","panelButtonPriorityListDisable","panelButtonPriorityListUpOne","panelButtonPriorityListClose","panelButtonPriorityListReset","ButtonTopCfg","panelButtonTopPanelCallToArms","panelButtonTopPanelOptions","panelButtonTopPanelPriorities","ButtonCameraControlCfg","panelButtonCameraControlZoomIn","panelButtonCameraControlZoomOut","panelButtonCameraControlCycleBuildings","panelButtonCameraControlRotate","ButtonInformationCfg","panelButtonInformationToggle","panelButtonInformationFunction","ButtonsCfg","panelRadar","panelCrystalSideBar","panelTopPanel","panelInformation","panelPriorityList","panelCameraControl","panelInfoDock","panelEncyclopedia","btnCfgValue","arr","PanelCfg","PanelsCfg","panelRadarFill","panelRadarOverlay","panelMessages","panelMessagesSide","InfoButtonCfg","buttonImageFilename","InfoDockButton","infoMessagesEntryConfig","animationSpeedX","animationSpeedY","message","buttonClicked","showButton","Promise","resolve","InfoDockPanel","infoMessagesConfig","informationPanel","stackButtons","gotoLatestMessage","dropLatestMessage","infoGenericDeath","infoGenericMonster","infoCrystalFound","infoUnderAttack","infoLandslide","infoPowerDrain","infoSlugEmerge","infoFoundMinifigure","btn","setMovedIn","slideStackIntoPosition","then","slideInButton","prev","cur","slideToTarget","pushFirst","setText","promises","all","InfoMessagesEntryConfig","sfx","timing","flag","InfoMessagesConfig","InformationPanel","textImage","getDefaultFont","createTextImage","IconPanelBackButtonCfg","MenuItemCfg","tooltipSfx","tooltipDisabled","tooltipDisabledSfx","hotkey","IconPanelButton","menuItemCfg","itemKey","parentWidth","menuIndex","isDisabled","autoRedraw","targetState","strokeStyle","lineWidth","strokeRect","IconSubPanel","numOfItems","onBackPanel","backBtn","iconPanelButtons","backBtnCfg","frameImgCfg","imgName","val1","val2","val3","val4","imgNameWoBackName","woBack1","woBack2","menuItemGroup","menuItem","BuildingPanel","addBuildMenuItem","factory","addMenuItem","GetToolPanel","addGetToolItem","hasOneBuildingOf","selectedRaiders","IconPanelButtonLabel","LargeVehiclePanel","IconPanelToggleButton","menuItemOffCfg","menuItemOnCfg","imgOnNormal","imgOnHover","imgOnPressed","imgOnDisabled","onToggleStateChange","SelectBasePanel","SelectBuildingPanel","powerSwitchItem","turnOffPower","upgradeItem","upgrade","deleteBuildingItem","SelectFloorPanel","pathItem","selectedSurface","removeItem","placeFenceItem","spawnFence","EatJob","EAT","UpgradeJob","SelectRaiderPanel","feedItem","isDriving","unloadItem","getToolItem","trainItem","deleteRaiderItem","SelectRubblePanel","clearRubbleItem","SelectVehiclePanel","SelectWallPanel","itemDrill","addWallMenuItem","isDrillableHard","itemReinforce","createReinforceJob","itemDynamite","createDynamiteJob","hasBuildingWithUpgrades","itemDeselect","SmallVehiclePanel","TrainRaiderPanel","addTrainingItem","updateAllItems","statsProperty","trainingItem","MainPanel","subPanels","mainPanel","addSubPanel","buildingPanel","smallVehiclePanel","largeVehiclePanel","selectWallPanel","selectFloorPanel","selectRubblePanel","selectBuildingPanel","selectRaiderPanel","trainRaiderPanel","getToolPanel","selectVehiclePanel","teleportRaider","getMaxRaiders","buildingItem","smallVehicleItem","largeVehicleItem","onSelectedSurfaceChange","selectSubPanel","childPanel","targetPanel","subPanel","TextInfoMessage","infoMessageEntryConfig","infoImage","imageFilename","MessagePanel","textInfoMessageConfig","imgAir","currentMessage","messageTimeout","crystalFound","textCrystalFound","setMessage","msgSpaceToContinue","textSpaceToContinue","cavernDiscovered","textCavernDiscovered","oreFound","textOreFound","msgAirSupplyLow","textAirSupplyLow","msgAirSupplyRunningOut","textAirSupplyRunningOut","msgGameCompleted","textGameCompleted","msgManTrained","textManTrained","msgUnitUpgraded","textUnitUpgraded","textInfoMessage","txtX","infoX","TextInfoMessageEntryConfig","sfxName","TextInfoMessageConfig","PriorityButtonsConfig","aiPriorityTrain","aiPriorityGetIn","aiPriorityRepair","aiPriorityRecharge","PriorityListPanel","prioPositions","prioByName","buttonCfg","toggle","upOne","resetList","updated","prioButton","btnIndex","pushToTop","PriorityPositionsEntry","ToggleButton","isPressed","TopPanel","btnCallToArms","btnOptions","btnPriorities","GuiBaseLayer","panels","clearRect","toScaledCoords","hit","GuiMainLayer","onOptionsShow","panelsCfg","addPanel","priorityButtonsConfig","priorityPositionsConfig","values","panelMain","Rect","DialogCfg","image","titleWindow","textWindow","okWindow","cancelWindow","contrastOverlay","BriefingPanelCfg","titleFont","title","dialogCfg","textFont","nextButtonCfg","backButtonCfg","BriefingPanel","imgTitle","titleRelX","titleRelY","btnNext","btnBack","imgBack","imgParagraphList","paragraph","imgParagraph","nextParagraph","prevParagraph","setParagraph","objectiveText","objectiveBackImgCfg","messagePanel","unsetMessage","MenuCycleItem","itemCfg","labelX","imgTextNormal","loFont","description","imgTextHover","hiFont","imgLabelOffNormal","labelOff","imgLabelOffHover","imgLabelOnNormal","labelOn","imgLabelOnHover","imgLabel","MenuLabelItem","loImg","hiImg","menuImage","MenuSliderItem","sliderX","onValueChanged","imgLeft","imgOff","imgOn","imgRight","leftBtn","btnLeftNormal","btnLeftHover","rightBtn","btnRightNormal","btnRightHover","posX","dw","MenuLayer","menuCfg","itemsTrigger","itemsNext","titleImage","menuFont","itemsLabel","actionName","itemsCycle","itemsSlider","MenuBasePanel","layersByKey","menus","pausePanel","selectLayer","OptionsPanel","onRepeatBriefing","PausePanel","onAbortGame","onRestartGame","OverlayLayer","panelPause","panelOptions","panelBriefing","setActivePanel","setup","lEventKey","SelectionLayer","selectStart","startSelection","changeSelection","screenX","screenY","selectEntitiesByRay","selectEntitiesInFrustum","GameScreen","spawnRaiderInterval","gameLayer","selectionLayer","guiLayer","overlayLayer","jobSupervisor","restartLevel","checkSpawnRaiders","levelName","levelsByName","setupAndStartLevel","setupScene","objectListConf","oListFile","disableStartTeleport","olObject","lTypeName","xPos","yPos","buildingType","terrainY","loc","createBuildingByName","startMoving","startRandomMove","typename","loadObjectList","objective","objectiveImage640x480","startScene","disposeScene","spawnBuildings","station","walkOutPos","MainMenuBaseItem","scrollAffected","needsRedraw","targetIndex","onHoverChange","MainMenuIconButton","draw","MainMenuLabelButton","labelImgLo","labelImgHi","MainMenuLayer","scrollY","scrollSpeedY","scrollInterval","displayTitle","setScrollY","hovered","setReleased","absY","canScroll","scrollAreaHeight","setScrollSpeedY","checkSetPressed","showMainMenu","selectLevel","levelKey","pow","scrollYBefore","MainMenuLevelButton","levelCfg","imgActive","imgInactive","imgCross","unlocked","frontEndX","frontEndY","menuBMP","frontEndOpen","MainMenuPanel","area","MainMenuWindow","imgFirstLine","imgSecondLine","LevelSelectLayer","modeLevel","levelsCfg","levelTextCfg","LevelTextCfg","panelImgData","panelPos","levelTextWindow","setFirstLine","tutorial","levelButton","setSecondLine","winCfg","parseLabel","MainMenuScreen","onLevelSelected","RewardScreenButton","conf","imgNormalFilepath","imgHoverFilepath","imgPressedFilepath","imgDisabledFilepath","RewardScreen","resultIndex","resultLastIndex","images","boxes","fonts","texts","uncoverTimeout","backgroundImg","wallpaper","filePath","boxImages","fontKey","labelFont","backFont","resultsLayer","btnSave","btnAdvance","descriptionTextLayer","btnLayer","saveButton","advanceButton","onAdvance","uncoverResult","levelFullNameImg","resultText","quitText","completeText","failedText","resultValues","percentString","timeString","score","gameResultTextImg","box","vertSpacing","descriptionTextImg","textPos","tx","ty","actual","lessIsMore","padding","seconds","ss","padLeft","minutes","mm","loadingScreen","assetIndex","setLoadingMessage","imgBackground","imgProgress","imgLoading","loadingBarWidth","wadFileSelectModal","githubBox","clearCacheButton","startLoadingFromUrl","enableGraphicMode","increaseLoadingState","mainMenuScreen","gameScreen","rewardScreen","startLevel","showLevelSelection","params","URLSearchParams","substr","startLoadingFromCache","DEV_MODE","WAD_CACHE_DB_NAME","JOB_SCHEDULE_INTERVAL","CHECK_CLEARRUBBLE_INTERVAL","JOB_ACTION_RANGE","CHECK_SPANW_RAIDER_TIMER","MAX_RAIDER_BASE","MAX_RAIDER_REQUEST","ADDITIONAL_RAIDER_PER_SUPPORT","UPDATE_OXYGEN_TIMER","PANEL_ANIMATION_MULTIPLIER","HEIGHT_MULTIPLER","SEQUENCE_TEXTURE_FRAMERATE","SPRITE_RESOLUTION_WIDTH","SPRITE_RESOLUTION_HEIGHT","TILESIZE","NATIVE_FRAMERATE"],"mappings":"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","file":"480.index.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".clear-cache-box {\\n    z-index: 2000;\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./site/clearcache/clearCacheButton.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;IACb,kBAAkB;IAClB,OAAO;IACP,MAAM;AACV\",\"sourcesContent\":[\".clear-cache-box {\\n    z-index: 2000;\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".github-box {\\n    z-index: 2000;\\n    padding: 16px;\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    background-color: rgba(0, 0, 0, 0.6);\\n    color: #fff;\\n}\\n\\n.github-box a {\\n    color: #fff;\\n    text-decoration: none;\\n    padding: 8px;\\n}\\n\\n.github-box a:hover {\\n    color: #fff;\\n    text-decoration: underline;\\n}\\n\\n.github-logo {\\n    width: 16px;\\n    height: 16px;\\n    margin-right: 8px;\\n    vertical-align: middle;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./site/github/github.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;IACb,aAAa;IACb,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,oCAAoC;IACpC,WAAW;AACf;;AAEA;IACI,WAAW;IACX,qBAAqB;IACrB,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,0BAA0B;AAC9B;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,sBAAsB;AAC1B\",\"sourcesContent\":[\".github-box {\\n    z-index: 2000;\\n    padding: 16px;\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    background-color: rgba(0, 0, 0, 0.6);\\n    color: #fff;\\n}\\n\\n.github-box a {\\n    color: #fff;\\n    text-decoration: none;\\n    padding: 8px;\\n}\\n\\n.github-box a:hover {\\n    color: #fff;\\n    text-decoration: underline;\\n}\\n\\n.github-logo {\\n    width: 16px;\\n    height: 16px;\\n    margin-right: 8px;\\n    vertical-align: middle;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!./clearCacheButton.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { WAD_CACHE_DB_NAME } from '../../src/params'\nimport './clearCacheButton.css'\n\nexport class ClearCacheButton {\n\n    rootElement: HTMLDivElement\n\n    constructor(parentId: string) {\n        this.rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        this.rootElement.classList.add('clear-cache-box')\n\n        const button = this.rootElement.appendChild(document.createElement('button'))\n        button.classList.add('btn', 'btn-info')\n        button.innerText = 'Clear cached wad files and restart'\n        button.onclick = () => {\n            indexedDB.deleteDatabase(WAD_CACHE_DB_NAME)\n            location.reload()\n        }\n    }\n\n    hide() {\n        this.rootElement.style.visibility = 'hidden'\n    }\n\n}\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!./github.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import './github.css'\nimport GithubIcon from './github.png'\n\nexport class GithubBox {\n\n    rootElement: HTMLDivElement\n\n    constructor(parentId: string) {\n        this.rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        this.rootElement.classList.add('github-box')\n\n        const link = this.rootElement.appendChild(document.createElement('a'))\n        link.href = 'https://github.com/scarabol/rock-raiders-web'\n\n        const img = link.appendChild(document.createElement('img'))\n        img.src = GithubIcon\n        img.classList.add('github-logo')\n        img.alt = 'Fork on GitHub'\n\n        const txt = link.appendChild(document.createElement('span'))\n        txt.textContent = img.alt\n    }\n\n    hide() {\n        this.rootElement.style.visibility = 'hidden'\n    }\n\n}\n","import { Modal } from 'bootstrap'\n\nexport class WadFileSelectionModal {\n\n    public onStart: (wad0Url, wad1Url) => any = null\n\n    private readonly modal: Modal\n\n    constructor(parentId: string) {\n        const rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        rootElement.classList.add('modal')\n        rootElement.tabIndex = -1\n        rootElement.setAttribute('role', 'dialog')\n        rootElement.setAttribute('aria-hidden', 'true')\n\n        const modalDialog = rootElement.appendChild(document.createElement('div'))\n        modalDialog.classList.add('modal-dialog')\n        rootElement.setAttribute('role', 'document')\n\n        const modalContent = modalDialog.appendChild(document.createElement('div'))\n        modalContent.classList.add('modal-content')\n\n        const modalHeader = modalContent.appendChild(document.createElement('div'))\n        modalHeader.classList.add('modal-header')\n        const modalTitle = modalHeader.appendChild(document.createElement('h5'))\n        modalTitle.classList.add('modal-title')\n        modalTitle.innerText = 'Load .wad files'\n        modalTitle.id = 'wadfileSelectModalLabel'\n        rootElement.setAttribute('aria-labelledby', modalTitle.id)\n\n        const modalBody = modalContent.appendChild(document.createElement('div'))\n        modalBody.classList.add('modal-body')\n\n        const hint = modalBody.appendChild(document.createElement('p'))\n        hint.innerText = 'Assets not included! In order to play the game, please select the game files.'\n\n        const navTabs = modalBody.appendChild(document.createElement('nav'))\n        const navTabList = navTabs.appendChild(document.createElement('div'))\n        navTabList.id = 'nav-tab'\n        navTabList.classList.add('nav', 'nav-tabs')\n        navTabList.setAttribute('role', 'tablist')\n\n        const navFileBtn = WadFileSelectionModal.appendNavButton(navTabList, true, 'nav-file-tab', 'nav-file', 'Local files (recommended)')\n        const navUrlBtn = WadFileSelectionModal.appendNavButton(navTabList, false, 'nav-url-tab', 'nav-url', 'Online from URL')\n\n        const navTabContent = modalBody.appendChild(document.createElement('div'))\n        navTabContent.classList.add('tab-content')\n        this.appendNavFileTab(navTabContent, navFileBtn.id)\n        this.appendNavUrlTab(navTabContent, navUrlBtn.id)\n\n        // rootElement has to be a valid bootstrap HTML modal before we can instantiate it\n        this.modal = new Modal(rootElement, {backdrop: 'static', keyboard: false})\n    }\n\n    private static appendNavButton(parent: HTMLDivElement, active: boolean, id: string, controlTarget: string, innerText: string) {\n        const navBtn = parent.appendChild(document.createElement('button'))\n        navBtn.classList.add('nav-link')\n        if (active) navBtn.classList.add('active')\n        navBtn.id = id\n        navBtn.setAttribute('data-bs-toggle', 'tab')\n        navBtn.setAttribute('data-bs-target', '#' + controlTarget)\n        navBtn.type = 'button'\n        navBtn.setAttribute('role', 'tab')\n        navBtn.setAttribute('aria-controls', controlTarget)\n        navBtn.setAttribute('aria-selected', String(active))\n        navBtn.innerText = innerText\n        return navBtn\n    }\n\n    private appendNavFileTab(parent: HTMLDivElement, labelledBy: string) {\n        const navFileTab = WadFileSelectionModal.appendNavTab(parent, true, 'nav-file', labelledBy)\n\n        const wad0File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad0-file', 'LegoRR0.wad')\n        const wad1File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad1-file', 'LegoRR1.wad')\n\n        const btnStartFile = navFileTab.appendChild(document.createElement('button'))\n        btnStartFile.type = 'submit'\n        btnStartFile.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartFile.id = 'button-start-file'\n        btnStartFile.innerText = 'Start Game'\n        btnStartFile.addEventListener('click', () => {\n            btnStartFile.disabled = true\n            const wad0FileUrl = URL.createObjectURL(wad0File.files[0])\n            const wad1FileUrl = URL.createObjectURL(wad1File.files[0])\n            this.onStart(wad0FileUrl, wad1FileUrl)\n        })\n    }\n\n    private static appendWadFileGroup(parent: HTMLDivElement, id: string, filename: string) {\n        const wadFileGroup = parent.appendChild(document.createElement('div'))\n        wadFileGroup.classList.add('my-3')\n        const wadFileLabel = wadFileGroup.appendChild(document.createElement('label'))\n        wadFileLabel.setAttribute('for', id)\n        wadFileLabel.classList.add('form-label')\n        wadFileLabel.innerHTML = 'Select <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadFileInput = wadFileGroup.appendChild(document.createElement('input'))\n        wadFileInput.type = 'file'\n        wadFileInput.classList.add('form-control')\n        wadFileInput.id = id\n        wadFileInput.required = true\n        return wadFileInput\n    }\n\n    private appendNavUrlTab(parent: HTMLDivElement, labelledBy: string) {\n        const navUrlTab = WadFileSelectionModal.appendNavTab(parent, false, 'nav-url', labelledBy)\n\n        const urlHint = navUrlTab.appendChild(document.createElement('div'))\n        urlHint.classList.add('my-3')\n        urlHint.innerText = 'Direct links with correct Allow-Origin-CORS-Headers required here.'\n\n        const wad0Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad0-url', 'LegoRR0.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n        const wad1Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad1-url', 'LegoRR1.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n\n        const btnStartUrl = navUrlTab.appendChild(document.createElement('button'))\n        btnStartUrl.type = 'submit'\n        btnStartUrl.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartUrl.id = 'button-start-url'\n        btnStartUrl.innerText = 'Start Game'\n        btnStartUrl.addEventListener('click', () => {\n            btnStartUrl.disabled = true\n            // XXX show loading progress for WAD files\n            this.onStart(wad0Url.value, wad1Url.value)\n        })\n    }\n\n    private static appendNavTab(parent: HTMLDivElement, active: boolean, id: string, labelledBy: string) {\n        const navTab = parent.appendChild(document.createElement('div'))\n        navTab.classList.add('tab-pane', 'fade')\n        if (active) navTab.classList.add('show', 'active')\n        navTab.id = id\n        navTab.setAttribute('role', 'tabpanel')\n        navTab.setAttribute('aria-labelledby', labelledBy)\n        return navTab\n    }\n\n    private static appendWadUrlGroup(parent: HTMLDivElement, id: string, filename: string, example: string) {\n        const wadUrlGroup = parent.appendChild(document.createElement('div'))\n        wadUrlGroup.classList.add('my-3')\n        const wadUrlLabel = wadUrlGroup.appendChild(document.createElement('label'))\n        wadUrlLabel.setAttribute('for', id)\n        wadUrlLabel.classList.add('form-label')\n        wadUrlLabel.innerHTML = 'Enter url for <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadUrlInput = wadUrlGroup.appendChild(document.createElement('input'))\n        wadUrlInput.type = 'url'\n        wadUrlInput.classList.add('form-control')\n        wadUrlInput.id = id\n        wadUrlInput.required = true\n        wadUrlInput.value = example\n        return wadUrlInput\n    }\n\n    public show() {\n        this.modal.show()\n    }\n\n    public hide() {\n        this.modal.hide()\n    }\n\n}\n","export enum EventKey {\n\n    SELECTED_SURFACE,\n    SELECTED_BUILDING,\n    SELECTED_RAIDER,\n    SELECTED_VEHICLE,\n\n    DESELECTED_ENTITY,\n\n    JOB_CREATE,\n    JOB_DELETE,\n\n    RAIDER_REQUESTED,\n\n    MATERIAL_AMOUNT_CHANGED,\n\n    ENTITY_ADDED,\n    ENTITY_REMOVED,\n\n    CAVERN_DISCOVERED,\n\n    ORE_FOUND,\n\n    BUILDING_UPGRADED,\n\n    RAIDER_TRAINED,\n\n    LOCATION_DEATH,\n    LOCATION_MONSTER,\n    LOCATION_CRYSTAL_FOUND,\n    LOCATION_UNDER_ATTACK,\n    LOCATION_LANDSLIDE,\n    LOCATION_POWER_DRAIN,\n    LOCATION_SLUG_EMERGE,\n    LOCATION_RAIDER_DISCOVERED,\n\n    SURFACE_CHANGED,\n    AIR_LEVEL_CHANGED,\n    CANCEL_BUILD_MODE,\n    CHANGE_CURSOR,\n\n}\n","export function getFilename(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '')\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/')\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max)\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2\n}\n\nexport function clearTimeoutSafe(timeout: NodeJS.Timeout) {\n    if (timeout) clearTimeout(timeout)\n    return null\n}\n\nexport function clearIntervalSafe(interval: NodeJS.Timeout) {\n    if (interval) clearInterval(interval)\n    return null\n}\n\ndeclare global {\n\n    interface Array<T> {\n        remove(element: T): void\n\n        last(): T\n\n        count(callback: (element: T) => boolean): number\n\n        partition(filter: (element: T) => boolean): [T[], T[]]\n    }\n\n    interface Map<K, V> {\n        getOrUpdate(key: K, updateCallback: () => V): V\n    }\n\n}\n\nArray.prototype.remove = function <T>(element: T): void {\n    const index = this.indexOf(element)\n    if (index !== -1) this.splice(index, 1)\n}\n\nArray.prototype.last = function <T>(): T {\n    return this.length > 0 ? this[this.length - 1] : undefined\n}\n\nArray.prototype.count = function <T>(callback: (element: T) => boolean): number {\n    let counter = 0\n    this.forEach((e) => callback(e) && counter++)\n    return counter\n}\n\nArray.prototype.partition = function <T>(filter: (element: T) => boolean): [T[], T[]] {\n    const left: T[] = [], right: T[] = []\n    this.forEach((a) => filter(a) ? left.push(a) : right.push(a))\n    return [left, right]\n}\n\n// noinspection JSUnusedGlobalSymbols\nMap.prototype.getOrUpdate = function <K, V>(key: K, updateCallback: () => V): V {\n    let value = this.get(key)\n    if (value === undefined) {\n        value = updateCallback()\n        this.set(key, value)\n    }\n    return value\n}\n","import { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class EventBus {\n\n    static eventListener = new Map<EventKey, ((event: GameEvent) => any)[]>()\n    static blockedEvents = []\n\n    static publishEvent(event: GameEvent) {\n        if (this.blockedEvents.includes(event.eventKey)) return // event is currently blocked from publishing\n        if (!event.isLocal) console.log('Event published: ' + EventKey[event.eventKey])\n        this.blockedEvents.push(event.eventKey)\n        this.getListener(event.eventKey).forEach((callback) => callback(event))\n        this.blockedEvents.remove(event.eventKey)\n    }\n\n    static registerEventListener(eventKey: EventKey, callback: (GameEvent) => any) {\n        this.getListener(eventKey).push(callback)\n    }\n\n    private static getListener(eventKey: EventKey) {\n        return this.eventListener.getOrUpdate(eventKey, () => [])\n    }\n\n    // TODO cleanup/unregister all event listener at level end?!\n\n}\n","import { EventKey } from './EventKeyEnum'\n\nexport class GameEvent {\n\n    eventKey: EventKey\n    isLocal: boolean\n\n    constructor(eventKey: EventKey) {\n        this.eventKey = eventKey\n    }\n\n}\n","import { BuildingEntity } from '../game/model/building/BuildingEntity'\nimport { Surface } from '../game/model/map/Surface'\nimport { Raider } from '../game/model/raider/Raider'\nimport { Cursors } from '../screen/Cursors'\nimport { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n        this.isLocal = true\n    }\n\n}\n\nexport class SelectionEvent extends LocalEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n    }\n\n}\n\nexport class SurfaceSelectedEvent extends SelectionEvent {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(EventKey.SELECTED_SURFACE)\n        this.surface = surface\n    }\n\n}\n\nexport class BuildingSelected extends SelectionEvent {\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(EventKey.SELECTED_BUILDING)\n        this.building = building\n    }\n\n}\n\nexport class RaiderSelected extends SelectionEvent {\n\n    raider: Raider\n\n    constructor(raider: Raider) {\n        super(EventKey.SELECTED_RAIDER)\n        this.raider = raider\n    }\n\n}\n\nexport class EntityDeselected extends LocalEvent {\n\n    constructor() {\n        super(EventKey.DESELECTED_ENTITY)\n    }\n\n}\n\nexport class SurfaceChanged extends LocalEvent {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(EventKey.SURFACE_CHANGED)\n        this.surface = surface\n    }\n\n}\n\nexport class AirLevelChanged extends LocalEvent {\n\n    constructor() {\n        super(EventKey.AIR_LEVEL_CHANGED)\n    }\n\n}\n\nexport class CancelBuildMode extends LocalEvent {\n\n    constructor() {\n        super(EventKey.CANCEL_BUILD_MODE)\n    }\n\n}\n\nexport class ChangeCursor extends LocalEvent {\n\n    cursor: Cursors\n\n    constructor(cursor: Cursors) {\n        super(EventKey.CHANGE_CURSOR)\n        this.cursor = cursor\n    }\n\n}\n","export enum EntityType {\n\n    // RAIDER\n    PILOT,\n\n    // BUILDING\n    TOOLSTATION,\n    TELEPORT_PAD,\n    DOCKS,\n    POWER_STATION,\n    BARRACKS,\n    UPGRADE,\n    GEODOME,\n    ORE_REFINERY,\n    GUNSTATION,\n    TELEPORT_BIG,\n\n    // MONSTER\n    BAT,\n    SMALL_SPIDER,\n\n    // MATERIAL\n    DYNAMITE,\n    ELECTRIC_FENCE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n\n}\n\nexport enum EntitySuperType {\n\n    RAIDER,\n    BUILDING,\n    MONSTER,\n    MATERIAL,\n\n}\n","import { Vector3 } from 'three'\nimport { SelectionEvent } from '../../event/LocalEvents'\n\nexport interface Selectable {\n\n    getSelectionType(): SelectionType;\n\n    select(): SelectionEvent;\n\n    deselect(): any;\n\n    getSelectionCenter(): Vector3;\n\n}\n\nexport enum SelectionType {\n\n    SURFACE,\n    RAIDER,\n    BUILDING,\n    VEHICLE,\n    GROUP,\n\n}\n","import { Vector3 } from 'three'\nimport { LevelRewardConfig } from '../../cfg/LevelsCfg'\nimport { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../../params'\nimport { SceneManager } from '../SceneManager'\nimport { WorldManager } from '../WorldManager'\nimport { BaseEntity } from './BaseEntity'\nimport { BuildingEntity } from './building/BuildingEntity'\nimport { BuildingSite } from './building/BuildingSite'\nimport { MaterialEntity } from './collect/MaterialEntity'\nimport { EntityType } from './EntityType'\nimport { PriorityList } from './job/PriorityList'\nimport { Surface } from './map/Surface'\nimport { Bat } from './monster/Bat'\nimport { SmallSpider } from './monster/SmallSpider'\nimport { Raider } from './raider/Raider'\nimport { RaiderTraining } from './raider/RaiderTraining'\nimport { Selectable, SelectionType } from './Selectable'\n\nexport enum GameResultState {\n\n    RUNNING,\n    COMPLETE,\n    FAILED,\n\n}\n\nexport class GameState {\n\n    static resultState: GameResultState = GameResultState.RUNNING\n    static levelFullName: string = ''\n    static numCrystal: number = 0\n    static numOre: number = 0\n    static numBrick: number = 0\n    static usedCrystals: number = 0\n    static neededCrystals: number = 0\n    static airLevel: number = 1 // air level in percent from 0 to 1.0\n    static selectedEntities: Selectable[] = []\n    static selectionType: SelectionType = null\n    static buildings: BuildingEntity[] = []\n    static buildingsUndiscovered: BuildingEntity[] = []\n    static raiders: Raider[] = []\n    static raidersUndiscovered: Raider[] = []\n    static requestedRaiders: number = 0\n    static materials: MaterialEntity[] = []\n    static materialsUndiscovered: MaterialEntity[] = []\n    static buildingSites: BuildingSite[] = []\n    static spiders: SmallSpider[] = []\n    static spidersBySurface: Map<Surface, SmallSpider[]> = new Map()\n    static bats: Bat[] = []\n    static totalCrystals: number = 0\n    static totalOres: number = 0\n    static totalDiggables: number = 0\n    static remainingDiggables: number = 0\n    static totalCaverns: number = 0\n    static discoveredCaverns: number = 0\n    static levelStartTime: number = 0\n    static levelStopTime: number = 0\n    static rewardConfig: LevelRewardConfig = null\n    static priorityList: PriorityList = new PriorityList()\n    static oxygenRate: number = 0\n    static buildModeSelection: (worldMgr: WorldManager, sceneMgr: SceneManager) => BuildingEntity = null\n\n    static reset() {\n        this.resultState = GameResultState.RUNNING\n        this.levelFullName = ''\n        this.numCrystal = 0\n        this.numOre = 0\n        this.numBrick = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.airLevel = 1\n        this.selectedEntities = []\n        this.selectionType = null\n        this.buildings = []\n        this.buildingsUndiscovered = []\n        this.raiders = []\n        this.raidersUndiscovered = []\n        this.requestedRaiders = 0\n        this.materials = []\n        this.materialsUndiscovered = []\n        this.buildingSites = []\n        this.spiders = []\n        this.spidersBySurface = new Map()\n        this.bats = []\n        this.totalCrystals = 0\n        this.totalOres = 0\n        this.totalDiggables = 0\n        this.remainingDiggables = 0\n        this.totalCaverns = 0\n        this.discoveredCaverns = 0\n        this.levelStartTime = 0\n        this.levelStopTime = 0\n        this.rewardConfig = null\n        this.priorityList = new PriorityList()\n        this.oxygenRate = 0\n        this.buildModeSelection = null\n    }\n\n    static getBuildingsByType(...buildingTypes: EntityType[]): BuildingEntity[] {\n        return this.buildings.filter(b => b.isPowered() && buildingTypes.some(bt => b.entityType === bt))\n    }\n\n    static getClosestBuildingByType(position: Vector3, ...buildingTypes: EntityType[]): BuildingEntity {\n        const targetBuildings = GameState.getBuildingsByType(...buildingTypes)\n        let closest = null, minDist = null\n        targetBuildings.forEach((b) => {\n            const bPos = b.getDropPosition()\n            const dist = position.distanceToSquared(bPos) // TODO better use pathfinding\n            if (closest === null || dist < minDist) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static hasOneBuildingOf(...buildings: EntityType[]): boolean {\n        return this.buildings.some((b) => buildings.some((type) => b.entityType === type) && b.isPowered())\n    }\n\n    static hasBuildingWithUpgrades(building: EntityType, upgrades: number = 0): boolean {\n        return this.buildings.some((b) => b.entityType === building && b.level >= upgrades && b.isPowered())\n    }\n\n    static getTrainingSites(position: Vector3, training: RaiderTraining): BuildingEntity[] {\n        if (training === RaiderTraining.DEMOLITION) {\n            return this.buildings.filter((b) => {\n                return b.isPowered() && b.stats.TrainDynamite && b.stats.TrainDynamite[b.level]\n            })\n        }\n        return []\n    }\n\n    static selectEntities(entities: Selectable[]) {\n        this.selectedEntities = this.selectedEntities.filter((previouslySelected) => {\n            const stillSelected = entities.indexOf(previouslySelected) !== -1\n            if (!stillSelected) previouslySelected.deselect()\n            return stillSelected\n        })\n        // add new entities that are selectable\n        const selectionEvents = []\n        entities.forEach((freshlySelected) => {\n            const selectionEvent = freshlySelected.select()\n            if (selectionEvent) {\n                this.selectedEntities.push(freshlySelected)\n                selectionEvents.push(selectionEvent)\n            }\n        })\n        // determine and set next selection type\n        const len = this.selectedEntities.length\n        if (len > 1) {\n            this.selectionType = SelectionType.GROUP\n        } else if (len === 1) {\n            this.selectionType = this.selectedEntities[0].getSelectionType()\n        } else if (this.selectionType !== null) {\n            this.selectionType = null\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        // AFTER updating selected entities and selection type, publish all events\n        selectionEvents.forEach((event) => EventBus.publishEvent(event))\n    }\n\n    static getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + GameState.buildings.count((b) => b.isPowered() && b.entityType === EntityType.BARRACKS) * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    static discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE\n        this.discoverEntities(this.raidersUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.buildingsUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.materialsUndiscovered, minX, maxX, minZ, maxZ)\n    }\n\n    static discoverEntities(undiscovered: BaseEntity[], minX, maxX, minZ, maxZ) {\n        const discovered = []\n        undiscovered.forEach((e) => {\n            const pos = e.getPosition()\n            if (pos.x >= minX && pos.x < maxX && pos.z >= minZ && pos.z < maxZ) {\n                e.onDiscover()\n                discovered.push(e)\n            }\n        })\n        discovered.forEach((r) => undiscovered.remove(r))\n    }\n\n    static get gameTimeSeconds() {\n        return Math.round((GameState.levelStopTime - GameState.levelStartTime) / 1000)\n    }\n\n    static get score() {\n        if (!GameState.rewardConfig) return 0\n        let quota = GameState.rewardConfig.quota\n        let importance = GameState.rewardConfig.importance\n        const scoreCrystals = GameState.numCrystal >= (quota.crystals || Infinity) ? importance.crystals : 0\n        const scoreTimer = GameState.gameTimeSeconds <= (quota.timer || 0) ? importance.timer : 0\n        const scoreCaverns = quota.caverns ? Math.min(1, GameState.discoveredCaverns / quota.caverns) * importance.caverns : 0\n        const scoreConstructions = quota.constructions ? Math.min(1, GameState.buildings.length / quota.constructions * importance.constructions) : 0\n        const scoreOxygen = GameState.airLevel * importance.oxygen\n        const scoreFigures = GameState.raiders.length >= MAX_RAIDER_BASE ? importance.figures : 0\n        return Math.round(scoreCrystals + scoreTimer + scoreCaverns + scoreConstructions + scoreOxygen + scoreFigures) / 100\n    }\n\n    static get selectedSurface(): Surface {\n        return this.selectionType === SelectionType.SURFACE && this.selectedEntities.length > 0 ? this.selectedEntities[0] as Surface : null\n    }\n\n    static get selectedBuilding(): BuildingEntity {\n        return this.selectionType === SelectionType.BUILDING && this.selectedEntities.length > 0 ? this.selectedEntities[0] as BuildingEntity : null\n    }\n\n    static get selectedRaiders(): Raider[] {\n        return (this.selectionType === SelectionType.RAIDER || this.selectionType === SelectionType.GROUP) && this.selectedEntities.length > 0 ? this.selectedEntities as Raider[] : []\n    }\n\n    static get totalOre(): number {\n        return this.numOre + this.numBrick * 5\n    }\n\n    static getNearbySpiders(entity: BaseEntity): SmallSpider[] {\n        const terrain = entity.sceneMgr.terrain\n        const currentSurface = terrain.getSurfaceFromWorld(entity.getPosition())\n        const nearbySpiders: SmallSpider[] = []\n        for (let x = currentSurface.x; x <= currentSurface.x + 1; x++) {\n            for (let y = currentSurface.y; y <= currentSurface.y + 1; y++) {\n                const surface = terrain.getSurface(x, y)\n                nearbySpiders.push(...(GameState.spidersBySurface.get(surface) || []))\n            }\n        }\n        return nearbySpiders\n    }\n\n}\n","import { LevelPrioritiesEntryConfig } from '../../../cfg/LevelsCfg'\nimport { PublicJob } from './Job'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport class PriorityList {\n\n    levelDefault: PriorityEntry[] = []\n    current: PriorityEntry[] = []\n\n    setList(priorities: LevelPrioritiesEntryConfig[]) {\n        this.levelDefault = priorities\n        this.reset()\n    }\n\n    toggle(index: number) {\n        this.current[index].enabled = !this.current[index].enabled\n    }\n\n    upOne(index: number) {\n        const tmp = this.current[index]\n        this.current[index] = this.current[index + 1]\n        this.current[index + 1] = tmp\n    }\n\n    reset() {\n        this.current = this.levelDefault.map(entry => new PriorityEntry(entry)) // use deep copy to avoid interference\n    }\n\n    pushToTop(index: number) {\n        const element = this.current[index]\n        for (let c = index; c > 0; c--) {\n            this.current[c] = this.current[c - 1]\n        }\n        this.current[0] = element\n    }\n\n    getPriority(job: PublicJob) {\n        let priority = 0\n        this.current.some((j, index) => {\n            if (j.key === job.getPriorityIdentifier()) {\n                priority = index\n                return true\n            }\n        })\n        return priority\n    }\n\n    isEnabled(priorityIdentifier: PriorityIdentifier): boolean {\n        return this.current.find((entry) => entry.key === priorityIdentifier)?.enabled || false\n    }\n}\n\nexport class PriorityEntry {\n\n    key: PriorityIdentifier\n    enabled: boolean\n\n    constructor(levelPriorityEntry: LevelPrioritiesEntryConfig) {\n        this.key = levelPriorityEntry.key\n        this.enabled = levelPriorityEntry.enabled\n    }\n\n}\n","export class RaiderTraining {\n\n    static DRIVER = new RaiderTraining('driver')\n    static ENGINEER = new RaiderTraining('engineer')\n    static GEOLOGIST = new RaiderTraining('geologist')\n    static PILOT = new RaiderTraining('pilot')\n    static SAILOR = new RaiderTraining('sailor')\n    static DEMOLITION = new RaiderTraining('demolition')\n\n    name: string\n\n    constructor(name: string) {\n        this.name = name\n    }\n\n}\n","/**\n * creates a new context with the specified dimensions.\n * @param width: the desired width of the new context\n * @param height: the desired height of the new context\n * @returns RenderingContext the newly created canvas\n */\nexport function createContext(width, height) {\n    if (width < 1 || height < 1) {\n        console.error('Can\\'t create context with size ' + width + ' x ' + height);\n        return createDummyContext(64, 64);\n    }\n    const canvas = document.createElement('canvas');\n    canvas.setAttribute('width', width);\n    canvas.setAttribute('height', height);\n    const context = canvas.getContext('2d');\n    context.width = width;\n    context.height = height;\n    return context;\n}\n\n/**\n * This method is intended to increase stability by providing an (ugly) placeholder image in case the right one is missing\n * @param width: expected width of the original image\n * @param height: expected height of the original image\n */\nexport function createDummyContext(width, height) {\n    const result = createContext(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            if (x / 16 % 2 === y / 16 % 2) {\n                result.fillStyle = 'rgb(0,255,255)';\n            } else {\n                result.fillStyle = 'rgb(255,0,255)';\n            }\n            result.fillRect(x, y, 16, 16);\n        }\n    }\n    return result;\n}\n\nexport function createDummyImgData(width, height) {\n    const result = new ImageData(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            const e = x / 16 % 2 === y / 16 % 2;\n            for (let px = x; px < x + 16; px++) {\n                for (let py = y; py < y + 16; py++) {\n                    setPixel(result, px, py, e ? 0 : 255, e ? 255 : 0, 255);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport function setPixel(imgData, x, y, r, g, b, a = 255) {\n    const n = (y * imgData.width + x) * 4;\n    imgData.data[n] = r;\n    imgData.data[n + 1] = g;\n    imgData.data[n + 2] = b;\n    imgData.data[n + 3] = a;\n}\n\nexport function getPixel(imgData, x, y) {\n    const n = (y * imgData.width + x) * 4;\n    return {r: imgData.data[n], g: imgData.data[n + 1], b: imgData.data[n + 2], a: imgData.data[n + 3]};\n}\n","import { AnimClip } from './AnimClip'\n\nexport class AnimationEntityType {\n\n    carryNullName: string = ''\n    depositNullName: string = ''\n    toolNullName: string = ''\n    mediumPoly: {} = {}\n    highPoly: {} = {}\n    fPPoly: {} = {}\n    activities: Map<string, { file: string, transcoef: number, lwsfile: boolean, animation: AnimClip }> = new Map()\n\n}\n","const Stats = require('stats.js')\n\nexport class DebugHelper {\n\n    stats\n\n    constructor() {\n        this.stats = new Stats()\n        this.stats.setMode(0) // 0: fps, 1: ms\n\n        this.stats.domElement.style.position = 'absolute'\n        this.stats.domElement.style.left = '0px'\n        this.stats.domElement.style.top = '0px'\n\n        document.body.appendChild(this.stats.domElement)\n        this.hide()\n    }\n\n    show() {\n        this.stats.domElement.style.visibility = 'visible'\n    }\n\n    hide() {\n        this.stats.domElement.style.visibility = 'hidden'\n    }\n\n    renderStart() {\n        this.stats.begin()\n    }\n\n    renderDone() {\n        this.stats.end()\n    }\n\n}\n","import { Vector2 } from 'three'\n\nexport class BarrierLocation {\n\n    location: Vector2\n    heading: number\n\n    constructor(location: Vector2, surfaceCenter: Vector2) {\n        this.location = location\n        this.heading = location.clone().sub(surfaceCenter).angle()\n        if (location.y === surfaceCenter.y) {\n            this.heading -= Math.PI / 2\n        } else {\n            this.heading += Math.PI / 2\n        }\n    }\n\n}\n","export enum Cursors {\n\n    Pointer_Blank,\n    Pointer_Standard,\n    Pointer_Drill,\n    Pointer_CantDrill,\n    Pointer_Clear,\n    Pointer_Go,\n    Pointer_CantGo,\n    Pointer_Teleport,\n    Pointer_CantTeleport,\n    Pointer_Reinforce,\n    Pointer_CantReinforce,\n    Pointer_Selected,\n    Pointer_RadarPan,\n    Pointer_TrackObject,\n    Pointer_Zoom,\n    Pointer_CantZoom,\n    Pointer_Help,\n    Pointer_CantHelp,\n    Pointer_PutDown,\n    Pointer_GetIn,\n    Pointer_GetOut,\n    Pointer_Okay,\n    Pointer_NotOkay,\n    Pointer_CanBuild,\n    Pointer_CannotBuild,\n    Pointer_Dynamite,\n    Pointer_CantDynamite,\n    Pointer_PickUp,\n    Pointer_CantPickUp,\n    Pointer_PickUpOre,\n    Pointer_LegoManCantDig,\n    Pointer_VehicleCantDig,\n    Pointer_LegoManDig,\n    Pointer_VehicleDig,\n    Pointer_LegoManCantPickUp,\n    Pointer_VehicleCantPickUp,\n    Pointer_LegoManPickUp,\n    Pointer_VehiclePickUp,\n    Pointer_LegoManCantGo,\n    Pointer_VehicleCantGo,\n    Pointer_LegoManGo,\n    Pointer_VehicleGo,\n    Pointer_LegoManClear,\n    Pointer_VehicleClear,\n    Pointer_SurfaceType_Immovable,\n    Pointer_SurfaceType_Hard,\n    Pointer_SurfaceType_Medium,\n    Pointer_SurfaceType_Loose,\n    Pointer_SurfaceType_Soil,\n    Pointer_SurfaceType_OreSeam,\n    Pointer_SurfaceType_CrystalSeam,\n    Pointer_SurfaceType_RechargeSeam,\n\n}\n","import { Cursors } from '../../../screen/Cursors'\n\nexport class SurfaceType {\n\n    name: string // humand readable, maybe used as label lateron\n    shaping: boolean = false\n    matIndex: string = '00'\n    floor: boolean = false\n    selectable: boolean = false\n    drillable: boolean = false\n    drillableHard: boolean = false\n    explodable: boolean = false\n    reinforcable: boolean = false\n    cursor: Cursors = Cursors.Pointer_Standard\n    statsDrillName: string = null\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options)\n    }\n\n    static readonly GROUND = new SurfaceType({name: 'ground', floor: true, selectable: true})\n    static readonly SOLID_ROCK = new SurfaceType({\n        name: 'solid rock',\n        shaping: true,\n        matIndex: '5',\n        cursor: Cursors.Pointer_SurfaceType_Immovable,\n    })\n    static readonly HARD_ROCK = new SurfaceType({\n        name: 'hard rock',\n        shaping: true,\n        matIndex: '4',\n        selectable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_Hard,\n        statsDrillName: 'HardDrillTime',\n    })\n    static readonly LOOSE_ROCK = new SurfaceType({\n        name: 'loose rock',\n        shaping: true,\n        matIndex: '3',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_Medium,\n        statsDrillName: 'LooseDrillTime',\n    })\n    static readonly DIRT = new SurfaceType({\n        name: 'dirt',\n        shaping: true,\n        matIndex: '1',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_Loose,\n        statsDrillName: 'SoilDrillTime',\n    })\n    static readonly SLUG_HOLE = new SurfaceType({name: 'slug hole', floor: true, matIndex: '30'})\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'})\n    static readonly ORE_SEAM = new SurfaceType({\n        name: 'ore seam',\n        matIndex: '40',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_OreSeam,\n        statsDrillName: 'SeamDrillTime',\n    })\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45'})\n    static readonly CRYSTAL_SEAM = new SurfaceType({\n        name: 'energy crystal seam',\n        matIndex: '20',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_CrystalSeam,\n        statsDrillName: 'SeamDrillTime',\n    })\n    static readonly RECHARGE_SEAM = new SurfaceType({\n        name: 'recharge seam',\n        matIndex: '67',\n        cursor: Cursors.Pointer_SurfaceType_RechargeSeam,\n    })\n    static readonly POWER_PATH = new SurfaceType({\n        name: 'power path all',\n        floor: true,\n        matIndex: '60',\n        selectable: true,\n    })\n    static readonly POWER_PATH_SITE = new SurfaceType({\n        name: 'power path site',\n        floor: true,\n        matIndex: '61',\n        selectable: true,\n    })\n    static readonly POWER_PATH_BUILDING = new SurfaceType({\n        name: 'power path building',\n        floor: true,\n        matIndex: '76',\n    })\n    static readonly RUBBLE1 = new SurfaceType({\n        name: 'rubble 1',\n        floor: true,\n        matIndex: '13',\n        selectable: true,\n    })\n    static readonly RUBBLE2 = new SurfaceType({\n        name: 'rubble 2',\n        floor: true,\n        matIndex: '12',\n        selectable: true,\n    })\n    static readonly RUBBLE3 = new SurfaceType({\n        name: 'rubble 3',\n        floor: true,\n        matIndex: '11',\n        selectable: true,\n    })\n    static readonly RUBBLE4 = new SurfaceType({\n        name: 'rubble 4',\n        floor: true,\n        matIndex: '10',\n        selectable: true,\n    })\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING\n            case 1:\n                return SurfaceType.SOLID_ROCK\n            case 2:\n                return SurfaceType.HARD_ROCK\n            case 3:\n                return SurfaceType.LOOSE_ROCK\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT\n            case 6:\n                return SurfaceType.LAVA\n            case 8:\n                return SurfaceType.ORE_SEAM\n            case 9:\n                return SurfaceType.WATER\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM\n            case 11:\n                return SurfaceType.RECHARGE_SEAM\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE\n            case 100:\n                return SurfaceType.RUBBLE4\n            case 101:\n                return SurfaceType.RUBBLE3\n            case 102:\n                return SurfaceType.RUBBLE2\n            case 103:\n                return SurfaceType.RUBBLE1\n            default:\n                console.error('Unexpected surface type num: ' + typeNum)\n                return SurfaceType.SOLID_ROCK\n        }\n    }\n}\n","export enum WALL_TYPE {\n\n    CORNER = 1,\n    WALL = 2,\n    INVERTED_CORNER = 3,\n    WEIRD_CREVICE = 20,\n\n}\n","import { BufferGeometry, Vector2, Vector3 } from 'three'\nimport { BufferAttribute } from 'three/src/core/BufferAttribute'\nimport { WALL_TYPE } from './WallType'\n\nexport class SurfaceGeometry {\n\n    public static create(wallType: WALL_TYPE,\n                         topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3,\n                         topLeftHeight: number, topRightHeight: number, bottomRightHeight: number, bottomLeftHeight: number,\n    ) {\n        let uvOffset = 0\n\n        // not-rotated\n        // 1 ?\n        // ? 0\n        if (topLeftVertex.y && !bottomRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topRightVertex.y)))) {\n            uvOffset = 0\n        }\n\n        // 90 clock-wise\n        // ? 1\n        // 0 ?\n        if (topRightVertex.y && !bottomLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomRightVertex.y)))) {\n            uvOffset = 3\n        }\n\n        // 180 clock-wise\n        // 0 ?\n        // ? 1\n        if (bottomRightVertex.y && !topLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomLeftVertex.y)))) {\n            uvOffset = 2\n        }\n\n        // 270 clock-wise\n        // ? 0\n        // 1 ?\n        if (bottomLeftVertex.y && !topRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topLeftVertex.y)))) {\n            uvOffset = 1\n        }\n\n        if (wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) {\n            if (topLeftVertex.y && bottomRightVertex.y) {\n                uvOffset = 0\n            }\n            if (topRightVertex.y && bottomLeftVertex.y) {\n                uvOffset = 3\n            }\n        }\n\n        /*\n        //\t\t0---1                1         0---1\n        //\t\t|   |  becomes      /|   and   |  /\n        //\t\t|   |             /  |         |/\n        //\t\t3---2            3---2         3\n        //\n        //\t\tOR\n        //\n        //\t\t0---1            0             0---1\n        //\t\t|   |  becomes   |\\    \t and    \\  |\n        //\t\t|   |            |  \\             \\|\n        //\t\t3---2            3---2             2\n        //\n        //\t\tTriangles 0-1-3 and 0-3-2\n        //\t\tQuad 0-1-3-2\n        */\n\n        const uv = [\n            new Vector2(0, 1),\n            new Vector2(1, 1),\n            new Vector2(1, 0),\n            new Vector2(0, 0),\n        ]\n\n        const bufferVertices = []\n        const bufferNormals = []\n\n        function addFaceAndNormals(a, b, c) {\n            bufferVertices.push(a, b, c)\n            const normal = new Vector3().subVectors(c, b)\n            normal.cross(new Vector3().subVectors(a, b))\n            normal.normalize()\n            bufferNormals.push(normal, normal, normal)\n        }\n\n        const uvIndexes = []\n        if (topRightVertex.y !== bottomLeftVertex.y ||\n            ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) && !(topRightVertex.y && bottomLeftVertex.y))) {\n            uvIndexes.push(1, 3, 2)\n            uvIndexes.push(1, 0, 3)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topRightVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topRightVertex, topLeftVertex, bottomLeftVertex)\n        } else {\n            uvIndexes.push(0, 3, 2)\n            uvIndexes.push(0, 2, 1)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topLeftVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topLeftVertex, bottomRightVertex, topRightVertex)\n        }\n\n        const bufferVertexUvs = uvIndexes.map(i => uv[(i + uvOffset) % 4])\n\n        const bufferGeometry = new BufferGeometry()\n        bufferGeometry.setAttribute('position', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferVertices))\n        bufferGeometry.setAttribute('normal', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferNormals))\n        bufferGeometry.setAttribute('uv', new BufferAttribute(new Float32Array(12), 2).copyVector2sArray(bufferVertexUvs))\n        return bufferGeometry\n    }\n}\n","import { Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { TILESIZE } from '../../../params'\nimport { SurfaceGeometry } from '../map/SurfaceGeometry'\nimport { WALL_TYPE } from '../map/WallType'\n\nexport class BuildPlacementMarkerMesh extends Mesh {\n\n    static readonly geometry = SurfaceGeometry.create(WALL_TYPE.WALL,\n        new Vector3(0, 0, 0), new Vector3(TILESIZE, 0, TILESIZE),\n        new Vector3(TILESIZE, 0, 0), new Vector3(0, 0, TILESIZE),\n        1, 1, 1, 1,\n    )\n\n    standardColor: number\n\n    constructor(standardColor: number) {\n        super(BuildPlacementMarkerMesh.geometry, new MeshPhongMaterial({\n            shininess: 0,\n            transparent: true,\n            opacity: 0.4,\n            color: standardColor,\n        }))\n        this.standardColor = standardColor\n        this.visible = false\n    }\n\n    updateState(position: { x: number, y: number }, heading: number, primaryPosition: Vector3) {\n        this.visible = !!position\n        if (position) {\n            this.position.set(position.x, 0, position.y).multiplyScalar(TILESIZE)\n                .applyAxisAngle(new Vector3(0, 1, 0), -heading + Math.PI / 2)\n                .add(primaryPosition)\n        }\n    }\n\n    markAsValid(isValid: boolean) {\n        const color = isValid ? this.standardColor : 0x500000;\n        (this.material as MeshPhongMaterial).color.setHex(color)\n    }\n\n}\n","import { Group, Vector2 } from 'three'\nimport { TILESIZE } from '../../../params'\nimport { BarrierLocation } from '../collect/BarrierLocation'\nimport { GameState } from '../GameState'\nimport { Surface } from '../map/Surface'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { Terrain } from '../map/Terrain'\nimport { BuildPlacementMarkerMesh } from './BuildPlacementMarkerMesh'\n\nexport class BuildPlacementMarker {\n\n    static readonly buildingMarkerColor: number = 0x005000\n    static readonly pathMarkerColor: number = 0x505000\n    static readonly waterMarkerColor: number = 0x000050\n\n    group: Group = new Group()\n    markers: BuildPlacementMarkerMesh[] = []\n    buildingMarkerPrimary: BuildPlacementMarkerMesh = null\n    buildingMarkerSecondary: BuildPlacementMarkerMesh = null\n    powerPathMarkerPrimary: BuildPlacementMarkerMesh = null\n    powerPathMarkerSecondary: BuildPlacementMarkerMesh = null\n    waterPathMarker: BuildPlacementMarkerMesh = null\n    heading: number = 0\n    sdx: number = 0\n    sdz: number = 0\n    lastCheck: boolean = false\n    visibleSurfaces: Surface[] = []\n    primarySurface: Surface = null\n    secondarySurface: Surface = null\n    waterSurface: Surface = null\n\n    constructor() {\n        this.buildingMarkerPrimary = new BuildPlacementMarkerMesh(BuildPlacementMarker.buildingMarkerColor)\n        this.buildingMarkerSecondary = new BuildPlacementMarkerMesh(BuildPlacementMarker.buildingMarkerColor)\n        this.powerPathMarkerPrimary = new BuildPlacementMarkerMesh(BuildPlacementMarker.pathMarkerColor)\n        this.powerPathMarkerSecondary = new BuildPlacementMarkerMesh(BuildPlacementMarker.pathMarkerColor)\n        this.waterPathMarker = new BuildPlacementMarkerMesh(BuildPlacementMarker.waterMarkerColor)\n        this.addMarker(this.buildingMarkerPrimary)\n        this.addMarker(this.buildingMarkerSecondary)\n        this.addMarker(this.powerPathMarkerPrimary)\n        this.addMarker(this.powerPathMarkerSecondary)\n        this.addMarker(this.waterPathMarker)\n    }\n\n    private addMarker(marker: BuildPlacementMarkerMesh) {\n        this.group.add(marker)\n        this.markers.push(marker)\n    }\n\n    update(terrain: Terrain, worldPosition: Vector2) {\n        if (!worldPosition || !GameState.buildModeSelection) {\n            this.hideAllMarker()\n        } else {\n            const isValid = this.updateAllMarker(terrain, worldPosition)\n            this.markers.forEach((c) => c.markAsValid(isValid))\n        }\n    }\n\n    private updateAllMarker(terrain: Terrain, worldPosition: Vector2 = null): boolean {\n        // TODO use surface height offsets, refactor terrain map/data handling before\n        const building = GameState.buildModeSelection(terrain.worldMgr, terrain.sceneMgr)\n        this.buildingMarkerPrimary.visible = true\n        this.buildingMarkerPrimary.position.copy(terrain.sceneMgr.getFloorPosition(new Vector2(Math.floor(worldPosition.x / TILESIZE) * TILESIZE, Math.floor(worldPosition.y / TILESIZE) * TILESIZE)))\n        const sdxv = worldPosition.x - this.buildingMarkerPrimary.position.x - TILESIZE / 2\n        const sdzv = worldPosition.y - this.buildingMarkerPrimary.position.z - TILESIZE / 2\n        const sdx = Math.abs(sdxv) > Math.abs(sdzv) ? Math.sign(sdxv) : 0\n        const sdz = Math.abs(sdzv) > Math.abs(sdxv) ? Math.sign(sdzv) : 0\n        if (this.sdx === sdx && this.sdz === sdz) return this.lastCheck\n        this.sdx = sdx\n        this.sdz = sdz\n        this.heading = Math.atan2(sdz, sdx)\n        this.buildingMarkerSecondary.updateState(building.secondaryBuildingPart, this.heading, this.buildingMarkerPrimary.position)\n        this.powerPathMarkerPrimary.updateState(building.primaryPowerPath, this.heading, this.buildingMarkerPrimary.position)\n        this.powerPathMarkerSecondary.updateState(building.secondaryPowerPath, this.heading, this.buildingMarkerPrimary.position)\n        this.waterPathMarker.updateState(building.waterPathSurface, this.heading, this.buildingMarkerPrimary.position)\n        this.visibleSurfaces = [this.buildingMarkerPrimary, this.buildingMarkerSecondary, this.powerPathMarkerPrimary, this.powerPathMarkerSecondary]\n            .filter((c) => c.visible).map((c) => terrain.getSurfaceFromWorld(c.position))\n        this.primarySurface = this.visibleSurfaces[0]\n        this.secondarySurface = this.buildingMarkerSecondary.visible ? this.visibleSurfaces[1] : null\n        this.waterSurface = this.waterPathMarker.visible ? terrain.getSurfaceFromWorld(this.waterPathMarker.position) : null\n        this.lastCheck = this.visibleSurfaces.every((s) => s.surfaceType === SurfaceType.GROUND)\n            && ([this.powerPathMarkerPrimary, this.powerPathMarkerSecondary]\n                    .some((c) => c.visible && terrain.getSurfaceFromWorld(c.position).neighbors\n                        .some((n) => n.surfaceType === SurfaceType.POWER_PATH)) ||\n                !building.primaryPowerPath && this.primarySurface.neighbors.some((n) => n.surfaceType === SurfaceType.POWER_PATH))\n            && (!this.waterPathMarker.visible || this.waterSurface.surfaceType === SurfaceType.WATER)\n        return this.lastCheck\n    }\n\n    hideAllMarker() {\n        this.markers.forEach((m) => m.visible = false)\n        this.lastCheck = false\n    }\n\n    getBarrierLocations(): BarrierLocation[] {\n        const barrierLocations: BarrierLocation[] = []\n        const center = this.primarySurface.getCenterWorld2D()\n        const barrierOffset = TILESIZE * 9 / 20\n        if (this.secondarySurface) {\n            const secondary = this.secondarySurface.getCenterWorld2D()\n            const dx = Math.sign(secondary.x - center.x)\n            const dy = Math.sign(secondary.y - center.y)\n            if (dx !== 0) {\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x - dx * barrierOffset, center.y), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y - barrierOffset), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y + barrierOffset), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x + dx * barrierOffset, center.y), secondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x, secondary.y - barrierOffset), secondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x, secondary.y + barrierOffset), secondary))\n            } else {\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y - dy * barrierOffset), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x - barrierOffset, center.y), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x + barrierOffset, center.y), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x, secondary.y + dy * barrierOffset), secondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x - barrierOffset, center.y), secondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x + barrierOffset, center.y), secondary))\n            }\n        } else {\n            barrierLocations.push(new BarrierLocation(new Vector2(center.x - barrierOffset, center.y), center))\n            barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y - barrierOffset), center))\n            barrierLocations.push(new BarrierLocation(new Vector2(center.x + barrierOffset, center.y), center))\n            barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y + barrierOffset), center))\n        }\n        return barrierLocations\n    }\n\n}\n","// javascript-astar 0.4.1 (converted to typescript by Scarabol)\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n\nfunction pathTo(node) {\n    let curr = node\n    const path = []\n    while (curr.parent) {\n        path.unshift(curr)\n        curr = curr.parent\n    }\n    return path\n}\n\nfunction getHeap() {\n    return new BinaryHeap(function (node) {\n        return node.f\n    })\n}\n\nexport const astar = {\n\n    /**\n     * Perform an A* Search on a graph given a start and end node.\n     * @param {Graph} graph\n     * @param {GridNode} start\n     * @param {GridNode} end\n     * @param {Object} [options]\n     * @param {boolean} [options.closest] Specifies whether to return the\n     path to the closest node if the target is unreachable.\n     * @param {Function} [options.heuristic] Heuristic function (see\n     *          astar.heuristics).\n     */\n    search(graph: Graph, start: GridNode, end: GridNode, options = null): GridNode[] {\n        graph.cleanDirty()\n        options = options || {}\n        const heuristic = options.heuristic || astar.heuristics.manhattan\n        const closest = options.closest || false\n\n        const openHeap = getHeap()\n        let closestNode = start  // set the start node to be the closest if required\n\n        start.h = heuristic(start, end)\n        graph.markDirty(start)\n\n        openHeap.push(start)\n\n        while (openHeap.size() > 0) {\n\n            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n            const currentNode = openHeap.pop()\n\n            // End case -- result has been found, return the traced path.\n            if (currentNode === end) {\n                return pathTo(currentNode)\n            }\n\n            // Normal case -- move currentNode from open to closed, process each of its neighbors.\n            currentNode.closed = true\n\n            // Find all neighbors for the current node.\n            const neighbors = graph.neighbors(currentNode)\n\n            let i = 0\n            const il = neighbors.length\n            for (; i < il; ++i) {\n                const neighbor = neighbors[i]\n\n                if (neighbor.closed || neighbor.isWall()) {\n                    // Not a valid node to process, skip to next neighbor.\n                    continue\n                }\n\n                // The g score is the shortest distance from start to current node.\n                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n                const gScore = currentNode.g + neighbor.getCost(currentNode)\n                const beenVisited = neighbor.visited\n\n                if (!beenVisited || gScore < neighbor.g) {\n\n                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n                    neighbor.visited = true\n                    neighbor.parent = currentNode\n                    neighbor.h = neighbor.h || heuristic(neighbor, end)\n                    neighbor.g = gScore\n                    neighbor.f = neighbor.g + neighbor.h\n                    graph.markDirty(neighbor)\n                    if (closest) {\n                        // If the neighbour is closer than the current closestNode or if it's equally close but has\n                        // a cheaper path than the current closest node then it becomes the closest node\n                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n                            closestNode = neighbor\n                        }\n                    }\n\n                    if (!beenVisited) {\n                        // Pushing to heap will put it in proper place based on the 'f' value.\n                        openHeap.push(neighbor)\n                    } else {\n                        // Already seen the node, but since it has been rescored we need to reorder it in the heap\n                        openHeap.rescoreElement(neighbor)\n                    }\n                }\n            }\n        }\n\n        if (closest) {\n            return pathTo(closestNode)\n        }\n\n        // No result was found - empty array signifies failure to find path.\n        return []\n    },\n\n    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n    heuristics: {\n        manhattan(pos0, pos1) {\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return d1 + d2\n        },\n\n        diagonal(pos0, pos1) {\n            const D = 1\n            const D2 = Math.sqrt(2)\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2))\n        },\n    },\n\n    cleanNode(node) {\n        node.f = 0\n        node.g = 0\n        node.h = 0\n        node.visited = false\n        node.closed = false\n        node.parent = null\n    },\n}\n\nexport class Graph {\n\n    readonly nodes: GridNode[] = []\n    readonly diagonal: boolean\n    readonly grid: GridNode[][] = []\n    dirtyNodes: GridNode[] = []\n\n    /**\n     * A graph memory structure\n     * @param {Array} gridIn 2D array of input weights\n     * @param {Object} [options]\n     * @param {boolean} [options.diagonal] Specifies whether diagonal moves are allowed\n     */\n    constructor(gridIn: number[][], options = null) {\n        options = options || {}\n        this.diagonal = !!options.diagonal\n        for (let x = 0; x < gridIn.length; x++) {\n            this.grid[x] = []\n\n            let y = 0\n            const row = gridIn[x]\n            for (; y < row.length; y++) {\n                const node = new GridNode(x, y, row[y])\n                this.grid[x][y] = node\n                this.nodes.push(node)\n            }\n        }\n        this.init()\n    }\n\n    init() {\n        this.dirtyNodes = []\n        for (let i = 0; i < this.nodes.length; i++) {\n            astar.cleanNode(this.nodes[i])\n        }\n    }\n\n    cleanDirty() {\n        for (let i = 0; i < this.dirtyNodes.length; i++) {\n            astar.cleanNode(this.dirtyNodes[i])\n        }\n        this.dirtyNodes = []\n    }\n\n    markDirty(node) {\n        this.dirtyNodes.push(node)\n    }\n\n    neighbors(node: GridNode) {\n        const ret: GridNode[] = []\n        const x = node.x\n        const y = node.y\n        const grid = this.grid\n\n        // West\n        if (grid[x - 1] && grid[x - 1][y]) {\n            ret.push(grid[x - 1][y])\n        }\n\n        // East\n        if (grid[x + 1] && grid[x + 1][y]) {\n            ret.push(grid[x + 1][y])\n        }\n\n        // South\n        if (grid[x] && grid[x][y - 1]) {\n            ret.push(grid[x][y - 1])\n        }\n\n        // North\n        if (grid[x] && grid[x][y + 1]) {\n            ret.push(grid[x][y + 1])\n        }\n\n        if (this.diagonal) {\n            // Southwest\n            if (grid[x - 1] && grid[x - 1][y - 1]) {\n                ret.push(grid[x - 1][y - 1])\n            }\n\n            // Southeast\n            if (grid[x + 1] && grid[x + 1][y - 1]) {\n                ret.push(grid[x + 1][y - 1])\n            }\n\n            // Northwest\n            if (grid[x - 1] && grid[x - 1][y + 1]) {\n                ret.push(grid[x - 1][y + 1])\n            }\n\n            // Northeast\n            if (grid[x + 1] && grid[x + 1][y + 1]) {\n                ret.push(grid[x + 1][y + 1])\n            }\n        }\n\n        return ret\n    }\n\n    toString() {\n        const graphString = []\n        const nodes = this.grid\n        for (let x = 0; x < nodes.length; x++) {\n            const rowDebug = []\n            const row = nodes[x]\n            for (let y = 0; y < row.length; y++) {\n                rowDebug.push(row[y].weight)\n            }\n            graphString.push(rowDebug.join(' '))\n        }\n        return graphString.join('\\n')\n    }\n}\n\nclass GridNode {\n\n    x: number\n    y: number\n    weight: number\n    h: number\n    closed: boolean\n    visited: boolean\n    g: number\n    parent: GridNode\n    f: number\n\n    constructor(x, y, weight) {\n        this.x = x\n        this.y = y\n        this.weight = weight\n    }\n\n    toString() {\n        return '[' + this.x + ' ' + this.y + ']'\n    }\n\n    getCost(fromNeighbor: GridNode) {\n        // Take diagonal weight into consideration.\n        if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n            return this.weight * 1.41421\n        }\n        return this.weight\n    }\n\n    isWall() {\n        return this.weight === 0\n    }\n}\n\nclass BinaryHeap {\n\n    content = []\n    scoreFunction\n\n    constructor(scoreFunction) {\n        this.content = []\n        this.scoreFunction = scoreFunction\n    }\n\n    push(element) {\n        // Add the new element to the end of the array.\n        this.content.push(element)\n\n        // Allow it to sink down.\n        this.sinkDown(this.content.length - 1)\n    }\n\n    pop() {\n        // Store the first element so we can return it later.\n        const result = this.content[0]\n        // Get the element at the end of the array.\n        const end = this.content.pop()\n        // If there are any elements left, put the end element at the\n        // start, and let it bubble up.\n        if (this.content.length > 0) {\n            this.content[0] = end\n            this.bubbleUp(0)\n        }\n        return result\n    }\n\n    remove(node) {\n        const i = this.content.indexOf(node)\n\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        const end = this.content.pop()\n\n        if (i !== this.content.length - 1) {\n            this.content[i] = end\n\n            if (this.scoreFunction(end) < this.scoreFunction(node)) {\n                this.sinkDown(i)\n            } else {\n                this.bubbleUp(i)\n            }\n        }\n    }\n\n    size() {\n        return this.content.length\n    }\n\n    rescoreElement(node) {\n        this.sinkDown(this.content.indexOf(node))\n    }\n\n    sinkDown(n) {\n        // Fetch the element that has to be sunk.\n        const element = this.content[n]\n\n        // When at 0, an element can not sink any further.\n        while (n > 0) {\n\n            // Compute the parent element's index, and fetch it.\n            const parentN = ((n + 1) >> 1) - 1\n            const parent = this.content[parentN]\n            // Swap the elements if the parent is greater.\n            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n                this.content[parentN] = element\n                this.content[n] = parent\n                // Update 'n' to continue at the new position.\n                n = parentN\n            }\n            // Found a parent that is less, no need to sink any further.\n            else {\n                break\n            }\n        }\n    }\n\n    bubbleUp(n) {\n        // Look up the target element and its score.\n        const length = this.content.length\n        const element = this.content[n]\n        const elemScore = this.scoreFunction(element)\n\n        while (true) {\n            // Compute the indices of the child elements.\n            const child2N = (n + 1) << 1\n            const child1N = child2N - 1\n            // This is used to store the new position of the element, if any.\n            let swap = null\n            let child1Score\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                const child1 = this.content[child1N]\n                child1Score = this.scoreFunction(child1)\n\n                // If the score is less than our element's, we need to swap.\n                if (child1Score < elemScore) {\n                    swap = child1N\n                }\n            }\n\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                const child2 = this.content[child2N]\n                const child2Score = this.scoreFunction(child2)\n                if (child2Score < (swap === null ? elemScore : child1Score)) {\n                    swap = child2N\n                }\n            }\n\n            // If the element needs to be moved, swap it, and continue.\n            if (swap !== null) {\n                this.content[n] = this.content[swap]\n                this.content[swap] = element\n                n = swap\n            }\n            // Otherwise, we are done.\n            else {\n                break\n            }\n        }\n    }\n}\n","import { BaseEntity } from '../game/model/BaseEntity'\nimport { BuildingEntity } from '../game/model/building/BuildingEntity'\nimport { EntitySuperType, EntityType } from '../game/model/EntityType'\nimport { FulfillerEntity } from '../game/model/FulfillerEntity'\nimport { PublicJob } from '../game/model/job/Job'\nimport { RaiderTraining } from '../game/model/raider/RaiderTraining'\nimport { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class WorldEvent extends GameEvent {\n\n    constructor(entityKey: EventKey) {\n        super(entityKey)\n        this.isLocal = false\n    }\n\n}\n\nexport class JobEvent extends WorldEvent {\n\n    job: PublicJob\n\n    constructor(eventKey: EventKey, job: PublicJob) {\n        super(eventKey)\n        this.job = job\n    }\n\n}\n\nexport class JobCreateEvent extends JobEvent {\n\n    constructor(job: PublicJob) {\n        super(EventKey.JOB_CREATE, job)\n    }\n\n}\n\nexport class JobDeleteEvent extends JobEvent {\n\n    constructor(job: PublicJob) {\n        super(EventKey.JOB_DELETE, job)\n    }\n\n}\n\nexport class RaiderRequested extends WorldEvent {\n\n    constructor() {\n        super(EventKey.RAIDER_REQUESTED)\n    }\n\n}\n\nexport class MaterialAmountChanged extends WorldEvent {\n\n    entityType: EntityType\n\n    constructor(entityType: EntityType) {\n        super(EventKey.MATERIAL_AMOUNT_CHANGED)\n        this.entityType = entityType\n    }\n\n}\n\nexport class EntityAddedEvent extends WorldEvent {\n\n    superType: EntitySuperType\n    entity: BaseEntity\n\n    constructor(entity: BaseEntity) {\n        super(EventKey.ENTITY_ADDED)\n        this.superType = entity.superType\n        this.entity = entity\n    }\n\n}\n\nexport class EntityRemovedEvent extends WorldEvent {\n\n    superType: EntitySuperType\n    entity: BaseEntity\n\n    constructor(entity: BaseEntity) {\n        super(EventKey.ENTITY_REMOVED)\n        this.superType = entity.superType\n        this.entity = entity\n    }\n\n}\n\nexport class CavernDiscovered extends WorldEvent {\n\n    constructor() {\n        super(EventKey.CAVERN_DISCOVERED)\n    }\n\n}\n\nexport class OreFoundEvent extends WorldEvent {\n\n    constructor() {\n        super(EventKey.ORE_FOUND)\n    }\n\n}\n\nexport class BuildingUpgraded extends WorldEvent {\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(EventKey.BUILDING_UPGRADED)\n        this.building = building\n    }\n\n}\n\nexport class EntityTrained extends WorldEvent {\n\n    entity: FulfillerEntity\n    training: RaiderTraining\n\n    constructor(entity: FulfillerEntity, training: RaiderTraining) {\n        super(EventKey.RAIDER_TRAINED)\n        this.entity = entity\n        this.training = training\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { EventKey } from './EventKeyEnum'\nimport { WorldEvent } from './WorldEvents'\n\nexport interface LocationProvider {\n\n    getPosition(): Vector3\n\n}\n\nexport class WorldLocationEvent extends WorldEvent {\n\n    locationProvider: LocationProvider\n\n    constructor(entityKey: EventKey, locationProvider: LocationProvider) {\n        super(entityKey)\n        this.locationProvider = locationProvider\n    }\n\n}\n\nexport class GenericDeathEvent extends WorldLocationEvent {\n\n    constructor(locationProvider: LocationProvider) {\n        super(EventKey.LOCATION_DEATH, locationProvider)\n    }\n\n}\n\nexport class GenericMonsterEvent extends WorldLocationEvent {\n\n    constructor(locationProvider: LocationProvider) {\n        super(EventKey.LOCATION_MONSTER, locationProvider)\n    }\n\n}\n\nexport class CrystalFoundEvent extends WorldLocationEvent {\n\n    constructor(locationProvider: LocationProvider) {\n        super(EventKey.LOCATION_CRYSTAL_FOUND, locationProvider)\n    }\n\n}\n\nexport class UnderAttackEvent extends WorldLocationEvent {\n\n    constructor(locationProvider: LocationProvider) {\n        super(EventKey.LOCATION_UNDER_ATTACK, locationProvider)\n    }\n\n}\n\nexport class LandslideEvent extends WorldLocationEvent {\n\n    constructor(locationProvider: LocationProvider) {\n        super(EventKey.LOCATION_LANDSLIDE, locationProvider)\n    }\n\n}\n\nexport class PowerDrainEvent extends WorldLocationEvent {\n\n    constructor(locationProvider: LocationProvider) {\n        super(EventKey.LOCATION_POWER_DRAIN, locationProvider)\n    }\n\n}\n\nexport class SlugEmergeEvent extends WorldLocationEvent {\n\n    constructor(locationProvider: LocationProvider) {\n        super(EventKey.LOCATION_SLUG_EMERGE, locationProvider)\n    }\n\n}\n\nexport class RaiderDiscoveredEvent extends WorldLocationEvent {\n\n    constructor(locationProvider: LocationProvider) {\n        super(EventKey.LOCATION_RAIDER_DISCOVERED, locationProvider)\n    }\n\n}\n","import { AnimSubObj } from './AnimSubObj'\n\nexport class AnimClip {\n\n    looping: boolean = false\n    transcoef: number = 1\n    firstFrame: number = null\n    lastFrame: number = null\n    framesPerSecond: number = null\n    bodies: AnimSubObj[] = []\n\n}\n","import { Euler, MathUtils, Object3D, Vector3 } from 'three'\nimport degToRad = MathUtils.degToRad\n\nexport class AnimSubObj {\n\n    name: string = ''\n    filename: string = ''\n    relPos: Vector3[] = []\n    relRot: Euler[] = []\n    relScale: Vector3[] = []\n    opacity: number[] = []\n    parentObjInd: number = null\n    model: Object3D = null\n\n    radVec(degX: number, degY: number, degZ: number) {\n        return new Euler(degToRad(degY), degToRad(degX), degToRad(degZ), 'YXZ')\n    }\n\n    setFrameAndFollowing(animationFrameIndex: number, lastFrame: number, infos: number[]) {\n        this.relPos[animationFrameIndex] = new Vector3(infos[0], infos[1], infos[2])\n        this.relRot[animationFrameIndex] = this.radVec(infos[3], infos[4], infos[5])\n        this.relScale[animationFrameIndex] = new Vector3(infos[6], infos[7], infos[8])\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.relPos[c] = this.relPos[animationFrameIndex]\n            this.relRot[c] = this.relRot[animationFrameIndex]\n            this.relScale[c] = this.relScale[animationFrameIndex]\n        }\n    }\n\n    setOpacityAndFollowing(animationFrameIndex: number, lastFrame: number, value: number) {\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.opacity[c] = value\n        }\n    }\n\n}\n","import { Mesh } from 'three'\nimport { clearIntervalSafe } from '../core/Util'\n\nexport class AnimatedMesh {\n\n    mesh: Mesh = null\n    textureSequences = []\n\n    constructor(mesh: Mesh, textureSequences: any[]) {\n        this.mesh = mesh\n        this.textureSequences = textureSequences\n    }\n\n    dispose() {\n        this.textureSequences.forEach((s) => clearIntervalSafe(s))\n        this.mesh.geometry.dispose()\n        Array.isArray(this.mesh.material) ? this.mesh.material.forEach(mat => mat.dispose()) : this.mesh.material?.dispose()\n    }\n\n}\n","// noinspection JSUnusedLocalSymbols,JSBitwiseOperatorUsage\n\n/**\n * @author Marcus-Bizal https://github.com/marcbizal\n * patched by Scarabol\n *\n * This loader loads LWOB files exported from LW6.\n *\n * Support\n *  -\n */\n\nimport { AdditiveBlending, BufferAttribute, BufferGeometry, Color, DoubleSide, Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { decodeFilepath, decodeString, getFilename } from '../core/Util'\nimport { SEQUENCE_TEXTURE_FRAMERATE } from '../params'\nimport { AnimatedMesh } from './AnimatedMesh'\nimport { ResourceManager } from './ResourceManager'\n\n// HEADER SPEC //\nconst LWO_MAGIC = 0x4C574F42 // \"LWOB\"\nconst OFF_MAGIC = 8\n\n/********************/\n/* TYPE SIZES START */\n/********************/\n\nconst ID4_SIZE = 4\nconst I1_SIZE = 1\nconst I2_SIZE = 2\nconst I4_SIZE = 4\nconst F4_SIZE = 4\n\nconst COL4_SIZE = 4\nconst VEC12_SIZE = 12\nconst IP2_SIZE = 2\nconst FP4_SIZE = 4\nconst DEG4_SIZE = 4\n\n/********************/\n/*  TYPE SIZES END  */\n/********************/\n\n/*********************/\n/* CHUNK TYPES START */\n/*********************/\n\nconst LWO_FORM = 0x464F524D\nconst LWO_PNTS = 0x504E5453\nconst LWO_SFRS = 0x53524653\nconst LWO_POLS = 0x504F4C53\nconst LWO_CRVS = 0x43525653\nconst LWO_PCHS = 0x50434853\nconst LWO_SURF = 0x53555246\n\nconst CHUNK_HEADER_SIZE = 8\nconst SUBCHUNK_HEADER_SIZE = 6\n\n/*********************/\n/*  CHUNK TYPES END  */\n/*********************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\nconst SURF_COLR = 0x434F4C52\nconst SURF_FLAG = 0x464C4147\n\n// Base Shading Values (Fixed Point)\nconst SURF_LUMI = 0x4C554D49\nconst SURF_DIFF = 0x44494646\nconst SURF_SPEC = 0x53504543\nconst SURF_REFL = 0x5245464C\nconst SURF_TRAN = 0x5452414E\n\n// Base Shading Values (Floating Point)\nconst SURF_VLUM = 0x564C554D\nconst SURF_VDIF = 0x56444946\nconst SURF_VSPC = 0x56535043\nconst SURF_VRFL = 0x5646524C\nconst SURF_VTRN = 0x5654524E\n\nconst SURF_GLOS = 0x474C4F53\nconst SURF_RFLT = 0x52464C54\nconst SURF_RIMG = 0x52494D47\nconst SURF_RIND = 0x52494E44\nconst SURF_EDGE = 0x45444745\nconst SURF_SMAN = 0x534D414E\n\n/**************************/\n/*  SURF DEFINITIONS END  */\n/**************************/\n\n/*****************************/\n/* TEXTURE DEFINITIONS START */\n/*****************************/\n\n// Start of Definition\nconst SURF_CTEX = 0x43544558\nconst SURF_DTEX = 0x44544558\nconst SURF_STEX = 0x53544558\nconst SURF_RTEX = 0x52544558\nconst SURF_TTEX = 0x54544558\nconst SURF_LTEX = 0x4C544558\nconst SURF_BTEX = 0x42544558\n\n// Flags\nconst SURF_TFLG = 0x54464C47\n\n// Location and Size\nconst SURF_TSIZ = 0x5453495A\nconst SURF_TCTR = 0x54435452\nconst SURF_TFAL = 0x5446414C\nconst SURF_TVEL = 0x5456454C\n\n// Color\nconst SURF_TCLR = 0x54434C52\n\n// Value\nconst SURF_TVAL = 0x54434C52\n\n// Bump Amplitude\nconst SURF_TAMP = 0x54414D50\n\n// Image Map\nconst SURF_TIMG = 0x54494D47\n\n// Image Alpha\nconst SURF_TALP = 0x54414C50\n\n// Image Wrap Options\nconst SURF_TWRP = 0x54575250\n\n// Antialiasing Strength\nconst SURF_TAAS = 0x54414153\n\n// Texture Opacity\nconst SURF_TOPC = 0x544F5043\n\n/*****************************/\n/*  TEXTURE DEFINITIONS END  */\n/*****************************/\n\n/*************************/\n/* FLAG DEFINITION START */\n/*************************/\n\nconst LUMINOUS_BIT = 1\nconst OUTLINE_BIT = 2\nconst SMOOTHING_BIT = 4\nconst COLORHIGHLIGHTS_BIT = 8\nconst COLORFILTER_BIT = 16\nconst OPAQUEEDGE_BIT = 32\nconst TRANSPARENTEDGE_BIT = 64\nconst SHARPTERMINATOR_BIT = 128\nconst DOUBLESIDED_BIT = 256\nconst ADDITIVE_BIT = 512\nconst SHADOWALPHA_BIT = 1024\n\n/*************************/\n/*  FLAG DEFINITION END  */\n/*************************/\n\n/*************************/\n/* TFLG DEFINITION START */\n/*************************/\n\nconst XAXIS_BIT = 1\nconst YAXIS_BIT = 2\nconst ZAXIS_BIT = 4\nconst WORLDCOORDS_BIT = 8\nconst NEGATIVEIMAGE_BIT = 16\nconst PIXELBLENDING_BIT = 32\nconst ANTIALIASING_BIT = 64\n\n/*************************/\n/*  TFLG DEFINITION END  */\n\n/*************************/\n\nfunction getVector3AtOffset(view, offset) {\n    let vector = new Vector3()\n    vector.x = view.getFloat32(offset)\n    vector.y = view.getFloat32(offset + F4_SIZE)\n    vector.z = view.getFloat32(offset + (F4_SIZE * 2))\n    return vector\n}\n\nfunction planarMapUVS(geometry, vertices, uvs, indices, materialIndex, size, center, flags) {\n    // Check to ensure that one of the flags is set, if not throw an error.\n    const mask = XAXIS_BIT | YAXIS_BIT | ZAXIS_BIT\n    if (flags & mask) {\n        for (let group of geometry.groups) {\n            if (group.materialIndex !== materialIndex) continue\n\n            for (let i = group.start; i < group.start + group.count; i++) {\n\n                let vertexIndex = indices[i] * 3\n                let x = vertices[vertexIndex] - center.x\n                let y = vertices[vertexIndex + 1] - center.y\n                let z = vertices[vertexIndex + 2] - center.z\n\n                let uvIndex = indices[i] * 2\n                let u = 0\n                let v = 0\n\n                if (flags & XAXIS_BIT) {\n                    u = z / size.z + 0.5\n                    v = y / size.y + 0.5\n                } else if (flags & YAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = z / size.z + 0.5\n                } else if (flags & ZAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = y / size.y + 0.5\n                }\n\n                uvs[uvIndex] = u\n                uvs[uvIndex + 1] = v\n            }\n        }\n    } else {\n        // console.warn(\"LWOLoader.planarMapUVS: No axis bit is set!\"); // XXX what is this about\n    }\n}\n\nexport class LWOLoader {\n\n    COUNTER_CLOCKWISE: false\n\n    path: string = ''\n    verbose: boolean = false\n    materials: MeshPhongMaterial[] = []\n    geometry: BufferGeometry = new BufferGeometry()\n    vertices: Float32Array = null\n    indices: Uint16Array = null\n    uvs: Float32Array = null\n    sequenceIntervals = []\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('LWO path: ' + this.path)\n    }\n\n    parsePoints(view, chunkOffset, chunkSize) {\n        if (chunkSize % VEC12_SIZE !== 0) {\n            console.error('LWOLoader.parse: F12 does not evenly divide into chunk size (' + chunkSize + '). Possible corruption.')\n            return\n        }\n\n        let numVertices = (chunkSize / F4_SIZE) / 3\n        this.vertices = new Float32Array(numVertices * 3)\n        this.uvs = new Float32Array(numVertices * 2)\n\n        for (let i = 0; i < numVertices; i++) {\n            let vertexIndex = i * 3\n            let vertexOffset = vertexIndex * F4_SIZE\n            this.vertices[vertexIndex] = view.getFloat32(chunkOffset + vertexOffset) \t\t\t\t// x\n            this.vertices[vertexIndex + 1] = view.getFloat32(chunkOffset + vertexOffset + F4_SIZE) \t// y\n            this.vertices[vertexIndex + 2] = view.getFloat32(chunkOffset + vertexOffset + (F4_SIZE * 2)) \t// z\n        }\n    }\n\n    parseSurfaceNames(buffer, chunkOffset, chunkSize) {\n        let textChunk = new TextDecoder().decode(new Uint8Array(buffer, chunkOffset, chunkSize))\n        let surfaceNames = textChunk.split('\\0').filter(function (s) {\n            return s !== ''\n        })\n\n        for (let i = 0; i < surfaceNames.length; i++) {\n            const new_material = new MeshPhongMaterial()\n            new_material.name = surfaceNames[i]\n            new_material.alphaToCoverage = true\n\n            this.materials.push(new_material)\n        }\n        if (this.verbose) console.log('LWO contains ' + this.materials.length + ' materials with following names: ' + surfaceNames)\n    }\n\n    parsePolygons(view, chunkOffset, chunkSize) {\n        // Gather some initial data so that we can get the proper size\n        let totalNumIndices = 0\n        let offset = 0\n        while (offset < chunkSize) {\n            const numIndices = view.getInt16(chunkOffset + offset)\n            const materialIndex = view.getInt16(chunkOffset + offset + 2 + (numIndices * 2))\n\n            this.geometry.addGroup(totalNumIndices, (numIndices - 2) * 3, materialIndex - 1)\n\n            totalNumIndices += (numIndices - 2) * 3\n            offset += 4 + (numIndices * 2)\n        }\n\n        offset = 0\n        let currentIndex = 0\n        this.indices = new Uint16Array(totalNumIndices)\n        while (offset < chunkSize) {\n            let numIndices = view.getInt16(chunkOffset + offset)\n\n            offset += 2\n\n            let faceIndices = new Int16Array(numIndices)\n            for (let i = 0; i <= numIndices; i++) {\n                faceIndices[i] = view.getInt16(chunkOffset + offset + (i * 2))\n            }\n\n            for (let i = 0; i < numIndices - 2; i++) {\n                if (this.COUNTER_CLOCKWISE) {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                } else {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                }\n            }\n\n            offset += 2 + (numIndices * 2)\n        }\n    }\n\n    parseSurface(view, buffer, chunkOffset, chunkSize) {\n        let offset = 0\n        while (view.getUint8(chunkOffset + offset) !== 0) offset++\n\n        let materialName = decodeString(new Uint8Array(buffer, chunkOffset, offset))\n        if (this.verbose) console.log('Parsing surface: ' + materialName)\n        let materialIndex = -1\n        let material: MeshPhongMaterial = null\n\n        let textureFlags = 0\n        let textureSize = new Vector3(0, 0, 0)\n        let textureCenter = new Vector3(0, 0, 0)\n        // let textureFalloff = new Vector3(0, 0, 0);\n        // let textureVelocity = new Vector3(0, 0, 0);\n\n        for (let i = 0; i < this.materials.length; i++) {\n            if (this.materials[i].name === materialName) {\n                materialIndex = i\n                material = this.materials[i]\n            }\n        }\n\n        if (!material) {\n            console.error('LWOLoader.parse: Surface in SURF chunk does not exist in SRFS')\n            return\n        }\n\n        material.shininess = 0\n\n        while (offset < chunkSize) {\n            const subchunkOffset = chunkOffset + offset\n            if (view.getUint8(subchunkOffset) === 0) {\n                offset++\n            } else {\n                const subchunkType = view.getInt32(subchunkOffset)\n                const subchunkSize = view.getInt16(subchunkOffset + ID4_SIZE)\n\n                if (this.verbose) console.log('Parsing subchunk ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n\n                switch (subchunkType) {\n                    case SURF_COLR:\n                        const colorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                        ]\n                        material.color = new Color().fromArray(colorArray)\n                        if (this.verbose) console.log('Material color (COLR): ' + colorArray.join(' '))\n                        break\n                    case SURF_FLAG:\n                        const flags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (FLAG): ' + flags.toString(2))\n                        // if (this.verbose && flags & LUMINOUS_BIT) console.warn('Flag is set but unhandled: luminous') // flag replaced with LUMI below\n                        if (this.verbose && flags & OUTLINE_BIT) console.warn('Flag is set but unhandled: outline')\n                        if (this.verbose && flags & SMOOTHING_BIT) console.warn('Flag is set but unhandled: smoothing')\n                        if (this.verbose && flags & COLORHIGHLIGHTS_BIT) console.warn('Flag is set but unhandled: colorHighlights')\n                        if (this.verbose && flags & COLORFILTER_BIT) console.warn('Flag is set but unhandled: colorFilter')\n                        if (this.verbose && flags & OPAQUEEDGE_BIT) console.warn('Flag is set but unhandled: opaqueEdge')\n                        if (this.verbose && flags & TRANSPARENTEDGE_BIT) console.warn('Flag is set but unhandled: transparentEdge')\n                        if (this.verbose && flags & SHARPTERMINATOR_BIT) console.warn('Flag is set but unhandled: sharpTerminator')\n                        if (flags & DOUBLESIDED_BIT) material.side = DoubleSide\n                        if (flags & ADDITIVE_BIT) {\n                            material.blending = AdditiveBlending\n                            material.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n                        }\n                        if (this.verbose && flags & SHADOWALPHA_BIT) console.warn('Flag is set but unhandled: shadowAlpha')\n                        break\n                    case SURF_EDGE:\n                        const edgeTransparencyThreshold = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Edge transparency threshold (0.0 to 1.0): ' + edgeTransparencyThreshold)\n                        break\n                    case SURF_LUMI:\n                        const luminosity = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.log('Luminosity (LUMI): ' + luminosity)\n                        material.emissiveIntensity = luminosity\n                        break\n                    case SURF_DIFF:\n                        const diffuse = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.log('Diffuse (DIFF): ' + diffuse)\n                        if (!diffuse) material.color = null\n                        break\n                    case SURF_SPEC:\n                        const specular = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        // material.specular = material.color.multiplyScalar(specular);\n                        if (this.verbose) console.warn('Specular (SPEC): ' + specular)\n                        break\n                    case SURF_REFL:\n                        let reflection = 0\n                        if (reflection === SURF_VRFL) {\n                            reflection = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            reflection = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        }\n                        material.reflectivity = reflection\n                        if (this.verbose) console.log('Reflectivity (REFL): ' + material.reflectivity)\n                        break\n                    case SURF_TRAN:\n                    case SURF_VTRN:\n                        let transparency = 0\n                        if (subchunkType === SURF_VTRN) {\n                            transparency = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            transparency = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        }\n                        material.opacity = 1 - transparency\n                        if (this.verbose) console.log('Opacity (TRAN/VTRN): ' + material.opacity)\n                        material.transparent = material.transparent || material.opacity < 1\n                        break\n                    case SURF_VLUM:\n                        const vLuminosity = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Luminosity (VLUM): ' + vLuminosity)\n                        material.emissiveIntensity = vLuminosity\n                        break\n                    case SURF_VDIF:\n                        let vDiffuse = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Diffuse (VDIF): ' + vDiffuse)\n                        // material.vertexColors = !!vDiffuse // XXX push vertex colors first\n                        break\n                    case SURF_VSPC:\n                        let vSpecular = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        // material.specular = material.color.multiplyScalar(vSpecular);\n                        if (this.verbose) console.warn('Specular (VSPC): ' + vSpecular)\n                        break\n                    case SURF_TFLG:\n                        textureFlags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (TFLG): ' + textureFlags.toString(2))\n                        if (this.verbose && textureFlags & XAXIS_BIT) console.warn('Flag is set but unhandled: X Axis')\n                        if (this.verbose && textureFlags & YAXIS_BIT) console.warn('Flag is set but unhandled: Y Axis')\n                        if (this.verbose && textureFlags & ZAXIS_BIT) console.warn('Flag is set but unhandled: Z Axis')\n                        if (this.verbose && textureFlags & WORLDCOORDS_BIT) console.warn('Flag is set but unhandled: World Coords')\n                        if (this.verbose && textureFlags & NEGATIVEIMAGE_BIT) console.warn('Flag is set but unhandled: Negative Image')\n                        if (this.verbose && textureFlags & PIXELBLENDING_BIT) console.warn('Flag is set but unhandled: Pixel Blending')\n                        if (this.verbose && textureFlags & ANTIALIASING_BIT) console.log('Flag is set: Antialiasing') // turned on by default\n                        break\n                    case SURF_TSIZ:\n                        textureSize = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Texture size (TSIZ): ' + textureSize.toArray().join(' '))\n                        break\n                    case SURF_TCTR:\n                        textureCenter = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Texture center (TCTR): ' + textureCenter.toArray().join(' '))\n                        break\n                    case SURF_CTEX:\n                    case SURF_DTEX:\n                    case SURF_STEX:\n                    case SURF_RTEX:\n                    case SURF_TTEX:\n                    case SURF_BTEX:\n                        const textureTypeName = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture typename: ' + textureTypeName)\n                        // XXX handle different texture types\n                        break\n                    case SURF_TVAL: // always 0 in the game\n                        const textureValue = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.warn('Texture value (TVAL): ' + textureValue)\n                        break\n                    case SURF_TCLR:\n                        const textureColorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        // const textureColor = new Color().fromArray(textureColorArray);\n                        // seems to be 0 0 0 anyway...\n                        if (this.verbose) console.log('Texture color (TCLR): ' + textureColorArray.join(' '))\n                        break\n                    case SURF_TIMG:\n                        let textureFilepath = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture filepath (TIMG): ' + textureFilepath)\n                        if (textureFilepath === '(none)') break\n                        let sequenceTexture = false\n                        if (textureFilepath.endsWith(' (sequence)')) {\n                            sequenceTexture = true\n                            textureFilepath = textureFilepath.substring(0, textureFilepath.length - ' (sequence)'.length)\n                        }\n                        let filename = getFilename(textureFilepath)\n                        material.transparent = material.transparent || !!filename.match(/^a\\d+.+.bmp/i)\n                        const textureFilename = this.path + filename\n                        if (sequenceTexture) {\n                            const match = textureFilename.match(/(.+\\D)0+(\\d+)\\..+/)\n                            const textures = ResourceManager.filterTextureSequenceNames(match[1])\n                                .map((name) => ResourceManager.getTexture(name))\n                            if (textures) {\n                                let seqNum = 0\n                                material.color = null // no need for color, when color map (texture) in use\n                                this.sequenceIntervals.push(setInterval(() => {\n                                    material.map = textures[seqNum++]\n                                    if (seqNum >= textures.length) seqNum = 0\n                                }, 1000 / SEQUENCE_TEXTURE_FRAMERATE))\n                            }\n                        }\n                        const lTextureName = textureFilename.toLowerCase()\n                        if (lTextureName === 'miscanims/barrier/a_side.bmp' // workaround (TODO actually never add unknown textures?)\n                            || lTextureName === 'miscanims/barrier/a_top.bmp'\n                            || lTextureName === 'world/shared/teofoilreflections.jpg'\n                            || lTextureName === 'buildings/barracks/wingbase3.bmp') {\n                            break\n                        }\n                        material.map = ResourceManager.getTexture(textureFilename)\n                        material.color = null // no need for color, when color map (texture) in use\n                        break\n                    default: // TODO implement all LWO features\n                        if (this.verbose) console.warn('Found unrecognised SURF subchunk type ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n                        break\n                }\n\n                offset += SUBCHUNK_HEADER_SIZE + subchunkSize\n            }\n        }\n\n        planarMapUVS(this.geometry, this.vertices, this.uvs, this.indices, materialIndex, textureSize, textureCenter, textureFlags)\n    }\n\n    parse(buffer: ArrayBuffer): AnimatedMesh {\n        const view = new DataView(buffer)\n\n        if (view.getUint32(0) !== LWO_FORM) {\n            console.error('LWOLoader.parse: Cannot find header.')\n            return\n        }\n\n        const fileSize = view.getUint32(ID4_SIZE)\n        if (fileSize + CHUNK_HEADER_SIZE !== view.byteLength) {\n            console.warn('LWOLoader.parse: Discrepancy between size in header (' + (fileSize + CHUNK_HEADER_SIZE) + ' bytes) and actual size (' + view.byteLength + ' bytes).')\n        }\n\n        let magicOffset = ID4_SIZE + I4_SIZE\n        if (view.getUint32(magicOffset) !== LWO_MAGIC) {\n            const magic = decodeString(new Uint8Array(buffer, magicOffset, ID4_SIZE))\n            console.error('LWOLoader.parse: Invalid magic ID (' + magic + ') in LWO header.')\n            return\n        }\n\n        let cursor = 12\n        while (cursor < view.byteLength) {\n            // Skip null byte padding\n            if (view.getUint8(cursor) === 0) {\n                cursor++\n            } else {\n                const chunkType = view.getInt32(cursor)\n                const chunkSize = view.getInt32(cursor + ID4_SIZE)\n\n                cursor += CHUNK_HEADER_SIZE\n\n                switch (chunkType) {\n                    case LWO_PNTS:\n                        this.parsePoints(view, cursor, chunkSize)\n                        break\n                    case LWO_SFRS:\n                        this.parseSurfaceNames(buffer, cursor, chunkSize)\n                        break\n                    case LWO_POLS:\n                        this.parsePolygons(view, cursor, chunkSize)\n                        break\n                    case LWO_SURF:\n                        this.parseSurface(view, buffer, cursor, chunkSize)\n                        break\n                    default:\n                        console.warn('Found unrecognised chunk type ' + decodeString(new Uint8Array(buffer, cursor - CHUNK_HEADER_SIZE, ID4_SIZE)) + ' at ' + cursor)\n                }\n\n                cursor += chunkSize\n            }\n\n        }\n\n        this.geometry.setAttribute('position', new BufferAttribute(this.vertices, 3))\n        this.geometry.setAttribute('uv', new BufferAttribute(this.uvs, 2))\n        this.geometry.setIndex(new BufferAttribute(this.indices, 1))\n        this.geometry.computeVertexNormals()\n\n        return new AnimatedMesh(new Mesh(this.geometry, this.materials), this.sequenceIntervals)\n    }\n}\n","/**\n * @author Scarabol https://github.com/scarabol\n *\n * This loader loads LWSC files exported from LW\n *\n * File format description: http://www.martinreddy.net/gfx/3d/LWSC.txt\n */\n\nimport { Group } from 'three'\nimport { getFilename } from '../core/Util'\nimport { AnimClip } from '../game/model/anim/AnimClip'\nimport { AnimSubObj } from '../game/model/anim/AnimSubObj'\nimport { SceneManager } from '../game/SceneManager'\nimport { LWOLoader } from './LWOLoader'\nimport { ResourceManager } from './ResourceManager'\n\nexport class LWSCLoader {\n\n    path: string = ''\n    verbose: boolean = false\n    animationClip: AnimClip = new AnimClip()\n    lines: string[] = []\n    lineIndex: number = 0\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('Using verbose mode')\n    }\n\n    parse(content): AnimClip {\n        this.lines = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map(l => l.trim())\n\n        if (this.lines[0] !== 'LWSC') {\n            throw 'Invalid start of file! Expected \\'LWSC\\' in first line'\n        }\n\n        const sceneFileVersion = parseInt(this.lines[1], 10)\n        if (sceneFileVersion !== 1) {\n            console.warn('Unexpected scene file version: ' + sceneFileVersion)\n        }\n\n        for (this.lineIndex = 2; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) continue // empty line: object separator\n            const key = line.split(' ')[0]\n            if (key === 'FirstFrame') {\n                this.parseFrameBlock()\n            } else if (key === 'AddNullObject' || key === 'LoadObject') {\n                this.parseObjectBlock()\n                if (this.verbose) console.log(this.animationClip.bodies[this.animationClip.bodies.length - 1])\n            } else if (line.startsWith('PreviewFirstFrame ') || line.startsWith('PreviewLastFrame ') || line.startsWith('PreviewFrameStep ')) {\n                // only used in editor\n            } else {\n                // console.warn('Unexpected line: ' + line); // TODO analyze remaining entries\n            }\n        }\n\n        if (this.verbose) console.log(this.animationClip)\n        return this.animationClip\n    }\n\n    parseLine(line: string): string[] {\n        return line.split(' ').filter((l: string) => l !== '')\n    }\n\n    parseFrameBlock() {\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            const line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'FirstFrame') {\n                this.animationClip.firstFrame = parseInt(value)\n            } else if (key === 'LastFrame') {\n                this.animationClip.lastFrame = parseInt(value)\n            } else if (key === 'FrameStep') {\n                const frameStep = parseInt(value)\n                if (frameStep !== 1) console.error('Animation frameStep has unexpected value: ' + frameStep)\n            } else if (key === 'FramesPerSecond') {\n                this.animationClip.framesPerSecond = parseInt(value)\n            } else if (key === 'PreviewFirstFrame' || key === 'PreviewLastFrame' || key === 'PreviewFrameStep') {\n                // only used in editor\n            } else {\n                console.warn('Unexpected key in frame block')\n            }\n        }\n        console.error('Parsing block reached content end')\n    }\n\n    parseObjectBlock(): AnimSubObj {\n        const subObj = new AnimSubObj()\n        this.animationClip.bodies.push(subObj)\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'AddNullObject' || key === 'LoadObject') {\n                if (key === 'LoadObject') {\n                    const filename = getFilename(value)\n                    subObj.name = filename.slice(0, filename.length - '.lwo'.length)\n                    subObj.filename = this.path + filename\n                    const lwoBuffer = ResourceManager.getResource(subObj.filename)\n                    subObj.model = SceneManager.registerMesh(new LWOLoader(this.path).parse(lwoBuffer))\n                } else if (key === 'AddNullObject') {\n                    subObj.name = value\n                    subObj.model = new Group()\n                } else {\n                    throw 'Unexpected line: ' + line\n                }\n            } else if (key === 'ObjectMotion') {\n                let line = this.lines[++this.lineIndex]\n                const lenInfos = parseInt(line)\n                line = this.lines[++this.lineIndex]\n                const lenFrames = parseInt(line)\n                this.lineIndex++\n                for (let c = 0; c < lenFrames; c++) {\n                    let line = this.lines[this.lineIndex + c * 2]\n                    if (line.startsWith('EndBehavior')) break\n                    const infos = line.split(' ').map(Number)\n                    if (infos.length !== lenInfos) console.warn('Number of infos (' + infos.length + ') does not match if specified count (' + lenInfos + ')')\n                    line = this.lines[this.lineIndex + c * 2 + 1]\n                    const animationFrameIndex = parseInt(line.split(' ')[0]) // other entries in line should be zeros\n                    subObj.setFrameAndFollowing(animationFrameIndex, this.animationClip.lastFrame, infos)\n                }\n                this.lineIndex += lenFrames * 2\n            } else if (key === 'ParentObject') {\n                subObj.parentObjInd = Number(value) - 1 // index is 1 based\n                if (this.verbose) console.log('parent obj ind is: ' + subObj.parentObjInd)\n            } else if (key === 'ShowObject' || key === 'LockedChannels') {\n                // only used in editor\n            } else if (key === 'ShadowOptions') { // TODO implement shadow options (bitwise)\n                // 0 - Self Shadow\n                // 1 - Cast Shadow\n                // 2 - Receive Shadow\n            } else if (key === 'ObjDissolve') {\n                if (value == '(envelope)') {\n                    let line = this.lines[++this.lineIndex]\n                    const numOfInformationChannels = parseInt(line)\n                    if (numOfInformationChannels !== 1) console.error('Number of information channels for opacity is not 1, but: ' + numOfInformationChannels)\n                    line = this.lines[++this.lineIndex]\n                    const numOfKeyframes = parseInt(line)\n                    this.lineIndex++\n                    for (let c = 0; c < numOfKeyframes; c++) {\n                        let line = this.lines[this.lineIndex + c * 2]\n                        if (line.startsWith('EndBehavior')) break\n                        const opacity = 1 - Number(line)\n                        line = this.lines[this.lineIndex + c * 2 + 1]\n                        const frameNum = Number(line.split(' ')[0])\n                        subObj.setOpacityAndFollowing(frameNum, this.animationClip.lastFrame, opacity)\n                    }\n                    this.lineIndex += numOfKeyframes * 2\n                } else {\n                    const opacity = 1 - Number(value)\n                    subObj.setOpacityAndFollowing(0, this.animationClip.lastFrame, opacity)\n                }\n            } else {\n                // console.warn('Unhandled line in object block: ' + line + '; key: ' + key + '; value: ' + value) // TODO analyze unhandled lines\n            }\n        }\n        console.error('Parsing block reached content end')\n        return subObj\n    }\n\n}\n","export enum PriorityIdentifier {\n\n    aiPriorityTrain,\n    aiPriorityGetIn,\n    aiPriorityCrystal,\n    aiPriorityOre,\n    aiPriorityRepair,\n    aiPriorityClearing,\n    aiPriorityDestruction,\n    aiPriorityConstruction,\n    aiPriorityReinforce,\n    aiPriorityRecharge,\n\n}\n","export enum JobState {\n\n    INCOMPLETE,\n    COMPLETE,\n    CANCELED,\n\n}\n","export enum JobType {\n\n    DRILL,\n    REINFORCE,\n    CLEAR_RUBBLE,\n    CARRY,\n    MOVE,\n    TRAIN,\n    GET_TOOL,\n    EAT,\n    COMPLETE_POWER_PATH,\n\n}\n","export class BaseActivity {\n\n    activityKey: string\n\n    constructor(activityKey: string) {\n        this.activityKey = activityKey\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class AnimEntityActivity extends BaseActivity {\n\n    static Stand = new AnimEntityActivity('Activity_Stand')\n\n}\n","import { Box3, CanvasTexture, Matrix4, Mesh, MeshBasicMaterial, MeshPhongMaterial, Object3D, Sphere, SphereGeometry, Sprite, SpriteMaterial, Vector3 } from 'three'\nimport { createContext } from '../../../core/ImageHelper'\nimport { clearTimeoutSafe, iGet } from '../../../core/Util'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { EntityRemovedEvent } from '../../../event/WorldEvents'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { BaseActivity } from '../activities/BaseActivity'\nimport { BaseEntity } from '../BaseEntity'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { AnimationEntityType } from './AnimationEntityType'\nimport { AnimClip } from './AnimClip'\nimport { AnimSubObj } from './AnimSubObj'\n\nexport abstract class AnimEntity extends BaseEntity {\n\n    animationEntityType: AnimationEntityType = null\n    poly: Object3D[] = []\n    animation: AnimClip = null\n    animationTimeout: NodeJS.Timeout = null\n    selectionFrame: Sprite = null\n    pickSphere: Mesh = null\n    carryJoint: Object3D = null\n    depositJoint: Object3D = null\n    getToolJoint: Object3D = null\n    activity: BaseActivity = null\n    radiusSq: number = 0\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, superType: EntitySuperType, entityType: EntityType, aeFilename: string) {\n        super(worldMgr, sceneMgr, superType, entityType)\n        if (aeFilename) this.animationEntityType = ResourceManager.getAnimationEntityType(aeFilename)\n    }\n\n    beamUp() {\n        // TODO avoid all further state changes and mark as unavailable here\n        // TODO publish event: check jobs with this target, update power state...\n        EventBus.publishEvent(new EntityDeselected())\n        EventBus.publishEvent(new EntityRemovedEvent(this))\n        this.changeActivity()\n        // TODO insert beam animation\n        AnimEntity.moveUp(this, 6 * TILESIZE)\n    }\n\n    private static moveUp(entity: AnimEntity, counter: number) {\n        if (counter > 0) {\n            counter--\n            entity.group.position.y += (TILESIZE / NATIVE_FRAMERATE) / 2\n            setTimeout(() => AnimEntity.moveUp(entity, counter), 1000 / NATIVE_FRAMERATE)\n        } else {\n            entity.removeFromScene()\n        }\n    }\n\n    changeActivity(activity: AnimEntityActivity = this.getDefaultActivity(), onAnimationDone: () => any = null, durationTimeMs: number = null) {\n        if (this.activity === activity || this.animationEntityType === null) return\n        this.activity = activity\n        let lActivityKey = activity.activityKey.toLowerCase()\n        let anim = this.animationEntityType.activities.get(lActivityKey)\n        if (!anim) { // find by prefix\n            this.animationEntityType.activities.forEach((a, key) => {\n                if (!anim && lActivityKey.startsWith(key)) anim = a\n            })\n        }\n        if (!anim?.animation) {\n            console.warn('Activity ' + activity.activityKey + ' unknown or has no animation defined')\n            console.log(this.animationEntityType.activities)\n            return\n        }\n        if (onAnimationDone) onAnimationDone.bind(this)\n        this.animation = anim.animation\n        this.animation.looping = true\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.group.remove(...this.poly)\n        this.poly = []\n        const carries = (this.carryJoint && this.carryJoint.children) || []\n        this.carryJoint = null\n        // bodies are defined in animation and second in high/medium/low poly groups\n        this.animation.bodies.forEach((body) => {\n            let model: Object3D = iGet(this.animationEntityType.highPoly, body.name)\n            if (!model) model = iGet(this.animationEntityType.mediumPoly, body.name)\n            if (!model) model = body.model\n            const polyModel = model.clone(true)\n            this.poly.push(polyModel)\n            if (body.name) {\n                const lBodyName = body.name.toLowerCase()\n                if (lBodyName === this.animationEntityType.carryNullName?.toLowerCase()) {\n                    this.carryJoint = polyModel\n                    if (carries.length > 0) this.carryJoint.add(...carries)\n                } else if (lBodyName === this.animationEntityType.depositNullName?.toLowerCase()) {\n                    this.depositJoint = polyModel\n                } else if (lBodyName === this.animationEntityType.toolNullName?.toLowerCase()) {\n                    this.getToolJoint = polyModel\n                }\n            }\n        })\n        this.animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = this.poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                this.poly[parentInd].add(polyPart)\n            } else {\n                this.group.add(polyPart)\n            }\n        })\n        const sphere = new Sphere()\n        new Box3().setFromObject(this.group).getBoundingSphere(sphere)\n        this.radiusSq = sphere.radius * sphere.radius\n        this.animate(0, onAnimationDone, durationTimeMs)\n    }\n\n    private animate(frameIndex: number, onAnimationDone: () => any, durationTimeMs: number) {\n        if (this.poly.length !== this.animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        this.animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = this.poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = mat.transparent || mat.opacity < 1\n                    })\n                }\n            }\n        })\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        let nextFrame = frameIndex + 1\n        if (nextFrame <= this.animation.lastFrame || !onAnimationDone || (durationTimeMs !== null && durationTimeMs > 0)) {\n            if (nextFrame > this.animation.lastFrame) {\n                nextFrame = this.animation.firstFrame\n            }\n            const standardDurationTimeMs = 1000 / this.animation.framesPerSecond * this.animation.transcoef\n            if (durationTimeMs !== null) durationTimeMs -= standardDurationTimeMs\n            const that = this\n            const timeoutTimeMs = durationTimeMs !== null ? Math.max(0, Math.min(durationTimeMs, standardDurationTimeMs)) : standardDurationTimeMs\n            this.animationTimeout = setTimeout(() => that.animate(nextFrame, onAnimationDone, durationTimeMs), timeoutTimeMs) // TODO get this in sync with threejs\n        } else if (onAnimationDone) {\n            onAnimationDone()\n        }\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return AnimEntityActivity.Stand\n    }\n\n    createPickSphere() {\n        if (this.pickSphere) return\n        const pickSphereDiameter = this.stats.PickSphere\n        const pickSphereRadius = pickSphereDiameter / 2\n        const geometry = new SphereGeometry(pickSphereRadius, pickSphereRadius, pickSphereRadius)\n        const material = new MeshBasicMaterial({color: 0xffff00, visible: false}) // change visible to true for debugging\n        this.pickSphere = new Mesh(geometry, material)\n        this.pickSphere.userData = {selectable: this}\n        const pickSphereCenter = this.getPickSphereCenter()\n        this.pickSphere.position.copy(pickSphereCenter)\n        this.group.add(this.pickSphere)\n        this.createSelectionFrame(pickSphereDiameter, pickSphereCenter)\n    }\n\n    getPickSphereCenter(): Vector3 {\n        return this.getBoundingBoxCenter()\n    }\n\n    getBoundingBoxCenter() {\n        const center = new Vector3()\n        new Box3().setFromObject(this.group).getCenter(center)\n        center.sub(this.group.position)\n        center.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        return center\n    }\n\n    private createSelectionFrame(pickSphereDiameter: number, pickSphereCenter: Vector3) {\n        const selectionFrameTextureSize = 128\n        const ctx = createContext(selectionFrameTextureSize, selectionFrameTextureSize)\n        ctx.fillStyle = '#0f0'\n        const strength = Math.round(50 / pickSphereDiameter)\n        const length = selectionFrameTextureSize / 6\n        ctx.fillRect(0, 0, length, strength)\n        ctx.fillRect(0, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, 0, length, strength)\n        ctx.fillRect(selectionFrameTextureSize - strength, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - strength, selectionFrameTextureSize - length, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - length, strength, length)\n        const selectionFrameTexture = new CanvasTexture(ctx.canvas)\n        const selectionMaterial = new SpriteMaterial({map: selectionFrameTexture, depthTest: false})\n        this.selectionFrame = new Sprite(selectionMaterial)\n        this.selectionFrame.position.copy(pickSphereCenter)\n        const selectionFrameSize = pickSphereDiameter\n        this.selectionFrame.scale.set(selectionFrameSize, selectionFrameSize, selectionFrameSize)\n        this.selectionFrame.visible = false\n        this.group.add(this.selectionFrame)\n    }\n\n}\n","import { Group, Vector2, Vector3 } from 'three'\nimport { SceneManager } from '../SceneManager'\nimport { WorldManager } from '../WorldManager'\nimport { EntitySuperType, EntityType } from './EntityType'\nimport { Surface } from './map/Surface'\n\nexport abstract class BaseEntity {\n\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n\n    group: Group = new Group()\n\n    superType: EntitySuperType = null\n    entityType: EntityType = null\n    level: number = 0\n    floorOffset: number = 0\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, superType: EntitySuperType, entityType: EntityType) {\n        this.worldMgr = worldMgr\n        this.sceneMgr = sceneMgr\n        this.superType = superType\n        this.entityType = entityType\n    }\n\n    get stats() {\n        return null\n    }\n\n    getPosition() {\n        return this.group.position.clone()\n    }\n\n    getPosition2D() {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    getHeading(): number {\n        return this.group.rotation.y\n    }\n\n    onDiscover() {\n        this.group.visible = true\n    }\n\n    addToScene(worldPosition: Vector2, radHeading: number) {\n        if (worldPosition) {\n            this.group.position.copy(this.sceneMgr.getFloorPosition(worldPosition))\n            this.group.position.y += this.floorOffset\n        }\n        if (radHeading !== undefined && radHeading !== null) {\n            this.group.rotateOnAxis(new Vector3(0, 1, 0), radHeading)\n        }\n        this.group.visible = this.surfaces.some((s) => s.discovered)\n        this.sceneMgr.scene.add(this.group)\n    }\n\n    removeFromScene() {\n        this.sceneMgr.scene.remove(this.group)\n    }\n\n    get surfaces(): Surface[] {\n        return [this.sceneMgr.terrain.getSurfaceFromWorld(this.group.position)]\n    }\n\n}\n","import { RaiderActivity } from '../activities/RaiderActivity'\nimport { MaterialEntity } from '../collect/MaterialEntity'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { PathTarget } from '../PathTarget'\nimport { RaiderTool } from '../raider/RaiderTool'\nimport { RaiderTraining } from '../raider/RaiderTraining'\nimport { JobState } from './JobState'\nimport { JobType } from './JobType'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport abstract class Job {\n\n    type: JobType\n    jobstate: JobState\n    fulfiller: FulfillerEntity[] = []\n\n    protected constructor(type: JobType) {\n        this.type = type\n        this.jobstate = JobState.INCOMPLETE\n    }\n\n    assign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller)\n        if (fulfiller && index === -1) {\n            this.fulfiller.push(fulfiller)\n        }\n    }\n\n    unassign(fulfiller: FulfillerEntity) {\n        this.fulfiller.remove(fulfiller)\n    }\n\n    cancel() {\n        this.jobstate = JobState.CANCELED\n        const fulfiller = this.fulfiller // ensure consistency while processing\n        this.fulfiller = []\n        fulfiller.forEach((fulfiller) => fulfiller.stopJob())\n    }\n\n    getRequiredTool(): RaiderTool {\n        return null\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return null\n    }\n\n    isReadyToComplete(): boolean {\n        return true\n    }\n\n    onJobComplete() {\n        this.jobstate = JobState.COMPLETE\n    }\n\n    abstract getWorkplaces(): PathTarget[];\n\n    setActualWorkplace(target: PathTarget) {\n    }\n\n    getCarryItem(): MaterialEntity {\n        return null\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return null\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        return null\n    }\n\n}\n\nexport abstract class PublicJob extends Job {\n\n    abstract getPriorityIdentifier(): PriorityIdentifier\n\n}\n","import { Vector3 } from 'three'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { CarryPathTarget } from '../collect/CarryPathTarget'\nimport { MaterialEntity } from '../collect/MaterialEntity'\nimport { PublicJob } from './Job'\nimport { JobType } from './JobType'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport class CarryJob<I extends MaterialEntity> extends PublicJob {\n\n    item: I\n    actualTarget: CarryPathTarget = null\n\n    constructor(item: I) {\n        super(JobType.CARRY)\n        this.item = item\n    }\n\n    getWorkplaces(): CarryPathTarget[] {\n        return this.item.getCarryTargets()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return this.item.getPriorityIdentifier()\n    }\n\n    setActualWorkplace(target: CarryPathTarget) {\n        this.item.setTargetSite(target.site)\n        this.actualTarget = target\n    }\n\n    getCarryItem(): I {\n        return this.item\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return this.actualTarget.getDropAction()\n    }\n\n    isReadyToComplete(): boolean {\n        return this.actualTarget.canGatherItem()\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        const targetLocation = this.actualTarget.targetLocation\n        this.fulfiller.forEach((f) => {\n            f.group.lookAt(new Vector3(targetLocation.x, f.group.position.y, targetLocation.y))\n            f.dropItem()\n        })\n        this.actualTarget.gatherItem(this.item)\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class RaiderActivity extends AnimEntityActivity {\n\n    static Route = new RaiderActivity('Activity_Route')\n    static RunPanic = new RaiderActivity('Activity_RunPanic')\n    static Drill = new RaiderActivity('Activity_Drill')\n    static Walk = new RaiderActivity('!Activity_Walk')\n    static Reinforce = new RaiderActivity('Activity_Reinforce')\n    static Reverse = new RaiderActivity('!Activity_Reverse')\n    static TurnLeft = new RaiderActivity('!Activity_TurnLeft')\n    static TurnRight = new RaiderActivity('!Activity_TurnRight')\n    static CantDo = new RaiderActivity('!Activity_CantDo')\n    static Collect = new RaiderActivity('Activity_Collect')\n    static Clear = new RaiderActivity('Activity_Clear')\n    static Carry = new RaiderActivity('Activity_Carry')\n    static CarryTurnLeft = new RaiderActivity('!Activity_CarryTurnLeft')\n    static CarryTurnRight = new RaiderActivity('!Activity_CarryTurnRight')\n    static CarryStand = new RaiderActivity('Activity_CarryStand')\n    static Dynamite = new RaiderActivity('Activity_Dynamite')\n    static Place = new RaiderActivity('Activity_Place')\n    static Deposit = new RaiderActivity('!Activity_Deposit')\n    static TeleportIn = new RaiderActivity('Activity_TeleportIn')\n    static Repair = new RaiderActivity('Activity_Repair')\n    static rest = new RaiderActivity('Activity_rest')\n    static routeRubble = new RaiderActivity('!Activity_routeRubble')\n    static CarryRubble = new RaiderActivity('!Activity_CarryRubble')\n    static Eat = new RaiderActivity('Activity_Eat')\n    static FireLaser = new RaiderActivity('Activity_FireLaser')\n    static GetUp = new RaiderActivity('!Activity_GetUp')\n    static ThrownByRockMonster = new RaiderActivity('Activity_ThrownByRockMonster')\n    static Slip = new RaiderActivity('Activity_Slip')\n    static Train = new RaiderActivity('Activity_Train')\n    static Recharge = new RaiderActivity('!Activity_Recharge')\n\n    static Waiting1 = new RaiderActivity('Activity_Waiting1')\n    static Waiting2 = new RaiderActivity('Activity_Waiting2')\n    static Waiting3 = new RaiderActivity('Activity_Waiting3')\n    static Waiting4 = new RaiderActivity('Activity_Waiting4')\n\n    static Hoverboard = new RaiderActivity('Activity_Hoverboard')\n    static Standhoverboard = new RaiderActivity('Activity_Standhoverboard')\n    static HitLefthoverboard = new RaiderActivity('!Activity_HitLefthoverboard')\n    static HitRighthoverboard = new RaiderActivity('!Activity_HitRighthoverboard')\n    static HitFronthoverboard = new RaiderActivity('!Activity_HitFronthoverboard')\n    static HitBackhoverboard = new RaiderActivity('!Activity_HitBackhoverboard')\n\n    static SMALLTRUCK = new RaiderActivity('Activity_SMALLTRUCK')\n    static StandSMALLTRUCK = new RaiderActivity('Activity_StandSMALLTRUCK')\n    static HitLeftSMALLTRUCK = new RaiderActivity('!Activity_HitLeftSMALLTRUCK')\n    static HitRightSMALLTRUCK = new RaiderActivity('!Activity_HitRightSMALLTRUCK')\n    static HitFrontSMALLTRUCK = new RaiderActivity('!Activity_HitFrontSMALLTRUCK')\n    static HitBackSMALLTRUCK = new RaiderActivity('!Activity_HitBackSMALLTRUCK')\n\n    static SMALLheli = new RaiderActivity('Activity_SMALLheli')\n    static StandSMALLheli = new RaiderActivity('Activity_StandSMALLheli')\n    static HitLeftSMALLheli = new RaiderActivity('!Activity_HitLeftSMALLheli')\n    static HitRightSMALLheli = new RaiderActivity('!Activity_HitRightSMALLheli')\n    static HitFrontSMALLheli = new RaiderActivity('!Activity_HitFrontSMALLheli')\n    static HitBackSMALLheli = new RaiderActivity('!Activity_HitBackSMALLheli')\n\n    static SMALLCAT = new RaiderActivity('Activity_SMALLCAT')\n    static StandSMALLCAT = new RaiderActivity('Activity_StandSMALLCAT')\n    static HitLeftSMALLCAT = new RaiderActivity('!Activity_HitLeftSMALLCAT')\n    static HitRightSMALLCAT = new RaiderActivity('!Activity_HitRightSMALLCAT')\n    static HitFrontSMALLCAT = new RaiderActivity('!Activity_HitFrontSMALLCAT')\n    static HitBackSMALLCAT = new RaiderActivity('!Activity_HitBackSMALLCAT')\n\n    static SMALLMLP = new RaiderActivity('Activity_SMALLMLP')\n    static StandSMALLMLP = new RaiderActivity('Activity_StandSMALLMLP')\n    static HitLeftSMALLMLP = new RaiderActivity('!Activity_HitLeftSMALLMLP')\n    static HitRightSMALLMLP = new RaiderActivity('!Activity_HitRightSMALLMLP')\n    static HitFrontSMALLMLP = new RaiderActivity('!Activity_HitFrontSMALLMLP')\n    static HitBackSMALLMLP = new RaiderActivity('!Activity_HitBackSMALLMLP')\n\n    static LARGECAT = new RaiderActivity('Activity_LARGECAT')\n    static StandLARGECAT = new RaiderActivity('Activity_StandLARGECAT')\n    static HitLeftLARGECAT = new RaiderActivity('!Activity_HitLeftLARGECAT')\n    static HitRightLARGECAT = new RaiderActivity('!Activity_HitRightLARGECAT')\n    static HitFrontLARGECAT = new RaiderActivity('!Activity_HitFrontLARGECAT')\n    static HitBackLARGECAT = new RaiderActivity('!Activity_HitBackLARGECAT')\n\n    static SMALLDIGGER = new RaiderActivity('Activity_SMALLDIGGER')\n    static StandSMALLDIGGER = new RaiderActivity('Activity_StandSMALLDIGGER')\n\n}\n","import { Vector2 } from 'three'\nimport { RaiderActivity } from './activities/RaiderActivity'\nimport { MaterialEntity } from './collect/MaterialEntity'\n\nexport class PathTarget {\n\n    targetLocation: Vector2\n\n    constructor(location: Vector2) {\n        this.targetLocation = location\n    }\n\n    isInArea(position: Vector2): boolean {\n        return false\n    }\n\n    canGatherItem(): boolean {\n        return false\n    }\n\n    gatherItem(item: MaterialEntity) {\n        item.addToScene(null, null)\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class BuildingActivity extends AnimEntityActivity {\n\n    static Teleport = new BuildingActivity('Activity_Teleport')\n    static Deposit = new BuildingActivity('Activity_Deposit')\n    static Explode = new BuildingActivity('Activity_Explode')\n    static Unpowered = new BuildingActivity('Activity_Unpowered')\n\n}\n","import { Vector2 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { MaterialAmountChanged } from '../../../event/WorldEvents'\nimport { BuildingActivity } from '../activities/BuildingActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { BuildingEntity } from '../building/BuildingEntity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { PathTarget } from '../PathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class CarryPathTarget extends PathTarget {\n\n    site: BuildingSite\n    building: BuildingEntity\n\n    constructor(location: Vector2, site: BuildingSite, building: BuildingEntity) {\n        super(location)\n        this.site = site\n        this.building = building\n    }\n\n    canGatherItem(): boolean {\n        if (this.building) {\n            return this.building.activity.activityKey === this.building.getDefaultActivity().activityKey\n        }\n        return true\n    }\n\n    gatherItem(item: MaterialEntity) {\n        if (this.site) {\n            this.site.addItem(item)\n        } else if (this.building) {\n            if (this.building.entityType === EntityType.POWER_STATION || this.building.entityType === EntityType.ORE_REFINERY) {\n                if (this.building.carryJoint) {\n                    this.building.carryJoint.add(item.group)\n                    item.group.position.set(0, 0, 0)\n                }\n                this.building.changeActivity(BuildingActivity.Deposit, () => {\n                    this.building.changeActivity()\n                    if (this.building.carryJoint) this.building.carryJoint.remove(item.group)\n                    CarryPathTarget.addItemToStorage(item)\n                    // TODO dispose item\n                })\n            } else {\n                item.removeFromScene()\n                CarryPathTarget.addItemToStorage(item)\n            }\n        } else {\n            item.addToScene(null, null)\n        }\n    }\n\n    private static addItemToStorage(item: MaterialEntity) {\n        switch (item.entityType) {\n            case EntityType.CRYSTAL:\n                GameState.numCrystal++\n                EventBus.publishEvent(new MaterialAmountChanged(item.entityType))\n                break\n            case EntityType.ORE:\n                GameState.numOre++\n                EventBus.publishEvent(new MaterialAmountChanged(item.entityType))\n                break\n        }\n    }\n\n    getDropAction(): RaiderActivity {\n        return (this.building || this.site).getDropAction()\n    }\n\n}\n","import { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { AnimEntity } from '../anim/AnimEntity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CarryJob } from '../job/CarryJob'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { PathTarget } from '../PathTarget'\nimport { CarryPathTarget } from './CarryPathTarget'\n\nexport abstract class MaterialEntity extends AnimEntity {\n\n    targetBuildingTypes: EntityType[] = []\n    priorityIdentifier: PriorityIdentifier = null\n    targets: CarryPathTarget[] = []\n    targetSite: BuildingSite = null\n    positionPathTarget: PathTarget[] = null\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, entityType: EntityType, aeFilename: string = null) {\n        super(worldMgr, sceneMgr, EntitySuperType.MATERIAL, entityType, aeFilename)\n        this.targetBuildingTypes = [EntityType.TOOLSTATION]\n    }\n\n    getCarryTargets(): CarryPathTarget[] {\n        return this.updateTargets()\n    }\n\n    resetTarget() {\n        this.targets = []\n        this.targetSite = null\n        this.updateTargets()\n    }\n\n    protected updateTargets(): CarryPathTarget[] {\n        if (this.targets.length < 1) {\n            const sites = GameState.buildingSites.filter((b) => b.needs(this.entityType))\n            if (sites.length > 0) {\n                this.targets = sites.map((s) => new CarryPathTarget(s.getRandomDropPosition(), s, null))\n            } else {\n                const buildings = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                if (buildings.length > 0) {\n                    this.targets = buildings.map((b) => new CarryPathTarget(b.getDropPosition2D(), null, b))\n                }\n            }\n        } else if (this.targets.some((t) => t.site && t.site.complete)) {\n            this.resetTarget()\n        } else if (this.targets.some((t) => t.building && !t.building.isPowered())) {\n            this.resetTarget()\n        }\n        return this.targets\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.materialsUndiscovered.remove(this)\n        GameState.materials.push(this)\n        EventBus.publishEvent(new JobCreateEvent(this.createCarryJob()))\n    }\n\n    setTargetSite(site: BuildingSite) {\n        if (this.targetSite === site) return\n        this.targetSite?.unAssign(this)\n        this.targetSite = site\n        this.targetSite?.assign(this)\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return this.priorityIdentifier\n    }\n\n    getTargetBuildingTypes(): EntityType[] {\n        return this.targetBuildingTypes\n    }\n\n    createCarryJob(): CarryJob<MaterialEntity> {\n        return new CarryJob(this)\n    }\n\n    onAddToSite() {\n        this.addToScene(null, null)\n    }\n\n    getPositionPathTarget(): PathTarget[] {\n        const position = this.getPosition2D()\n        if (!this.positionPathTarget || !this.positionPathTarget[0].targetLocation.equals(position)) {\n            this.positionPathTarget = [new PathTarget(position)]\n        }\n        return this.positionPathTarget\n    }\n\n}\n","import { AdditiveBlending, Color, Material, MeshPhongMaterial } from 'three'\nimport { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Crystal extends MaterialEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.CRYSTAL)\n        const resource2 = ResourceManager.getResource('MiscAnims/Crystal/vlp_greencrystal.lwo')\n        const mesh2 = SceneManager.registerMesh(new LWOLoader('MiscAnims/Crystal/').parse(resource2));\n        (mesh2.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.blending = AdditiveBlending\n            mat.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n            mat.opacity = 0.5 // XXX read from LWO file?\n            mat.transparent = mat.opacity < 1\n        })\n        mesh2.scale.set(1.75, 1.75, 1.75) // XXX derive from texture scale?\n        this.group.add(mesh2)\n        const resource = ResourceManager.getResource('World/Shared/Crystal.lwo') // high poly version\n        const mesh = SceneManager.registerMesh(new LWOLoader('World/Shared/').parse(resource));\n        (mesh.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.emissive = new Color(0, 8, 0) // XXX read from LWO file?\n            mat.color = new Color(0, 0, 0) // XXX read from LWO file?\n            mat.opacity = 0.9 // XXX read from LWO file?\n            mat.transparent = mat.opacity < 1\n        })\n        this.group.add(mesh)\n        this.targetBuildingTypes = [EntityType.POWER_STATION, EntityType.TOOLSTATION]\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityCrystal\n    }\n\n    get stats() {\n        return ResourceManager.stats.PowerCrystal\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class DynamiteActivity extends BaseActivity {\n\n    static Normal = new DynamiteActivity('Normal')\n    static TickDown = new DynamiteActivity('TickDown')\n\n}\n","import { Dynamite } from '../../collect/Dynamite'\nimport { RaiderTraining } from '../../raider/RaiderTraining'\nimport { CarryJob } from '../CarryJob'\n\nexport class CarryDynamiteJob extends CarryJob<Dynamite> {\n\n    color: number = 0xa06060\n\n    constructor(dynamite: Dynamite) {\n        super(dynamite)\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return RaiderTraining.DEMOLITION\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.item.ignite()\n    }\n\n}\n","import { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { DynamiteActivity } from '../activities/DynamiteActivity'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CarryJob } from '../job/CarryJob'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { CarryDynamiteJob } from '../job/surface/CarryDynamiteJob'\nimport { Surface } from '../map/Surface'\nimport { CarryPathTarget } from './CarryPathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Dynamite extends MaterialEntity {\n\n    targetSurface: Surface\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager, surface: Surface) {\n        super(worldMgr, sceneMgr, EntityType.DYNAMITE, 'MiscAnims/Dynamite/Dynamite.ae')\n        this.targetSurface = surface\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityDestruction\n        this.changeActivity()\n    }\n\n    getCarryTargets(): CarryPathTarget[] {\n        if (this.targetSurface && this.targetSurface.isExplodable()) {\n            return this.targetSurface.getDigPositions().map((p) => new CarryPathTarget(p, null, null))\n        } else {\n            return GameState.getBuildingsByType(EntityType.TOOLSTATION).map((b) => b.getDropPosition2D())\n                .map((p) => new CarryPathTarget(p, null, null))\n        }\n    }\n\n    ignite() {\n        // TODO add as explosive and scare em all!\n        const center = this.targetSurface.getCenterWorld()\n        center.y = this.group.position.y\n        this.group.lookAt(center)\n        this.changeActivity(DynamiteActivity.TickDown, () => {\n            this.removeFromScene()\n            this.targetSurface.collapse()\n            // TODO add explosion animation\n            // TODO damage raider, vehicle, buildings\n        })\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return DynamiteActivity.Normal\n    }\n\n    createCarryJob(): CarryJob<Dynamite> {\n        return new CarryDynamiteJob(this)\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Ore extends MaterialEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.ORE)\n        const resource = ResourceManager.getResource('MiscAnims/Ore/Ore1st.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('MiscAnims/Ore/').parse(resource))\n        this.group.add(mesh)\n        this.targetBuildingTypes = [EntityType.ORE_REFINERY, EntityType.TOOLSTATION]\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityOre\n    }\n\n    get stats() {\n        return ResourceManager.stats.Ore\n    }\n\n}\n","export class RaiderTool {\n\n    static DRILL = new RaiderTool('drill')\n    static HAMMER = new RaiderTool('hammer')\n    static SHOVEL = new RaiderTool('shovel')\n    static SPANNER = new RaiderTool('spanner')\n    static FREEZERGUN = new RaiderTool('freezergun')\n    static LASER = new RaiderTool('laser')\n    static PUSHERGUN = new RaiderTool('pushergun')\n    static BIRDSCARER = new RaiderTool('birdscarer')\n\n    name: string\n\n    constructor(name: string) {\n        this.name = name\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PublicJob } from '../Job'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class ClearRubbleJob extends PublicJob {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(JobType.CLEAR_RUBBLE)\n        this.surface = surface\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.SHOVEL\n    }\n\n    getWorkplaces(): PathTarget[] {\n        const rubblePositions = this.surface.rubblePositions\n        return rubblePositions.length > 0 ? [new PathTarget(rubblePositions[0])] : [] // use first (no need to optimize)\n    }\n\n    onJobComplete() {\n        this.fulfiller.forEach((f) => f.changeActivity())\n        this.surface.reduceRubble()\n        this.fulfiller.forEach((f) => f.jobWorkplaces = this.getWorkplaces())\n        if (!this.surface.hasRubble()) {\n            super.onJobComplete()\n        }\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityClearing\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Clear\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { FulfillerEntity } from '../../FulfillerEntity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PublicJob } from '../Job'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class DrillJob extends PublicJob {\n\n    color: number = 0xa0a0a0\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(JobType.DRILL)\n        this.surface = surface\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.DRILL\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.surface.getDigPositions().map((p) => new PathTarget(p))\n    }\n\n    onJobComplete() {\n        if (this.surface.onDrillComplete(this.fulfiller.last().getPosition2D())) super.onJobComplete()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityDestruction\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Drill\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        const drillTimeInMsPerType: Map<EntityType, { drillTime: number, count: number }> = new Map()\n        this.fulfiller.forEach((f) => {\n            drillTimeInMsPerType.getOrUpdate(f.entityType, () => {\n                return {drillTime: f.stats[this.surface.surfaceType.statsDrillName][f.level] * 1000, count: 0}\n            }).count++\n        })\n        const drillTimeEntry = drillTimeInMsPerType.get(fulfiller.entityType)\n        const drillTimeMs = drillTimeEntry?.drillTime / (drillTimeEntry?.count || 1) || null\n        if (!drillTimeMs) console.warn('According to cfg this entity cannot drill this material')\n        return drillTimeMs\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { FulfillerEntity } from '../../FulfillerEntity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { PublicJob } from '../Job'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class ReinforceJob extends PublicJob {\n\n    color: number = 0x60a060\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(JobType.REINFORCE)\n        this.surface = surface\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.surface.getDigPositions().map((p) => new PathTarget(p))\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.reinforce()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityReinforce\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Reinforce\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        return 2700\n    }\n\n}\n","import { Group, MathUtils, Mesh, MeshPhongMaterial, Vector2, Vector3 } from 'three'\nimport { clearTimeoutSafe, getRandom, getRandomSign } from '../../../core/Util'\nimport { EventBus } from '../../../event/EventBus'\nimport { SelectionEvent, SurfaceChanged, SurfaceSelectedEvent } from '../../../event/LocalEvents'\nimport { CavernDiscovered, JobCreateEvent, JobDeleteEvent, OreFoundEvent } from '../../../event/WorldEvents'\nimport { CrystalFoundEvent, LandslideEvent } from '../../../event/WorldLocationEvent'\nimport { HEIGHT_MULTIPLER, TILESIZE } from '../../../params'\nimport { LWSCLoader } from '../../../resource/LWSCLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { AnimSubObj } from '../anim/AnimSubObj'\nimport { BuildingEntity } from '../building/BuildingEntity'\nimport { Crystal } from '../collect/Crystal'\nimport { Dynamite } from '../collect/Dynamite'\nimport { ElectricFence } from '../collect/ElectricFence'\nimport { Ore } from '../collect/Ore'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CarryDynamiteJob } from '../job/surface/CarryDynamiteJob'\nimport { ClearRubbleJob } from '../job/surface/ClearRubbleJob'\nimport { DrillJob } from '../job/surface/DrillJob'\nimport { ReinforceJob } from '../job/surface/ReinforceJob'\nimport { Selectable, SelectionType } from '../Selectable'\nimport { SurfaceGeometry } from './SurfaceGeometry'\nimport { SurfaceType } from './SurfaceType'\nimport { Terrain } from './Terrain'\nimport { WALL_TYPE } from './WallType'\nimport degToRad = MathUtils.degToRad\n\nexport class Surface implements Selectable {\n\n    terrain: Terrain\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    surfaceType: SurfaceType\n    x: number\n    y: number\n    containedOres: number = 0\n    containedCrystals: number = 0\n    heightOffset: number = null\n    discovered: boolean = false\n    selected: boolean = false\n    reinforced: boolean = false\n    drillJob: DrillJob = null\n    reinforceJob: ReinforceJob = null\n    dynamiteJob: CarryDynamiteJob = null\n    clearRubbleJob: ClearRubbleJob = null\n    surfaceRotation: number = 0\n    seamLevel: number = 0\n    fallinTimeout = null\n\n    fallinGrp: Group = null\n    animationTimeout = null\n\n    wallType: WALL_TYPE = null\n    mesh: Mesh = null\n    needsMeshUpdate: boolean = false\n\n    topLeftHeightOffset: number = 0\n    topRightHeightOffset: number = 0\n    bottomLeftHeightOffset: number = 0\n    bottomRightHeightOffset: number = 0\n\n    rubblePositions: Vector2[] = []\n\n    building: BuildingEntity = null\n    fence: ElectricFence = null\n    hasPower: boolean = false\n\n    constructor(terrain: Terrain, surfaceType: SurfaceType, x: number, y: number, heightOffset: number) {\n        this.terrain = terrain\n        this.worldMgr = this.terrain.worldMgr\n        this.sceneMgr = this.terrain.sceneMgr\n        this.surfaceType = surfaceType\n        if (surfaceType === SurfaceType.CRYSTAL_SEAM || surfaceType === SurfaceType.ORE_SEAM) this.seamLevel = 4\n        this.x = x\n        this.y = y\n        this.heightOffset = heightOffset\n    }\n\n    /**\n     * @return {boolean} Returns true, if a new cave has been discovered\n     */\n    discover(): boolean { // TODO improve performance then test with level 20\n        this.setDiscovered()\n        this.needsMeshUpdate = true\n        if (!this.surfaceType.floor) return false\n        const floors: Surface[] = []\n        const others: Surface[] = []\n        for (let x = -1; x <= 1; x++) {\n            for (let y = -1; y <= 1; y++) {\n                if (x === 0 && y === 0) continue\n                const n = this.terrain.getSurface(this.x + x, this.y + y)\n                if ((x === 0 || y === 0) && n.surfaceType.floor) {\n                    floors.push(n)\n                } else {\n                    others.push(n)\n                }\n            }\n        }\n        let caveFound = false\n        let counter = 0\n        while (floors.length > 0) {\n            counter++\n            const neighbor = floors.shift()\n            neighbor.setDiscovered()\n            for (let x = -1; x <= 1; x++) {\n                for (let y = -1; y <= 1; y++) {\n                    if (x === 0 && y === 0) continue\n                    const n = neighbor.terrain.getSurface(neighbor.x + x, neighbor.y + y)\n                    if ((x === 0 || y === 0) && n.surfaceType.floor && !n.discovered) {\n                        floors.push(n)\n                        caveFound = true\n                    } else {\n                        others.push(n)\n                    }\n                }\n            }\n        }\n        others.forEach((o) => {\n            o.setDiscovered()\n            if (!o.isSupported()) {\n                o.collapse()\n            }\n        })\n        console.log('surface discover handled ' + counter + ' floors and ' + others.length + ' others')\n        return caveFound\n    }\n\n    private setDiscovered() {\n        if (!this.discovered) GameState.discoverSurface(this)\n        this.discovered = true\n        this.needsMeshUpdate = true\n    }\n\n    onDrillComplete(drillPosition: Vector2): boolean {\n        if (this.seamLevel > 0) {\n            this.seamLevel--\n            const vec = new Vector2().copy(drillPosition).sub(this.getCenterWorld2D())\n                .multiplyScalar(0.3 + getRandom(3) / 10)\n                .rotateAround(new Vector2(0, 0), degToRad(-10 + getRandom(20)))\n                .add(drillPosition)\n            if (this.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                const crystal = this.worldMgr.placeMaterial(new Crystal(this.worldMgr, this.sceneMgr), vec)\n                EventBus.publishEvent(new CrystalFoundEvent(crystal))\n            } else if (this.surfaceType === SurfaceType.ORE_SEAM) {\n                this.worldMgr.placeMaterial(new Ore(this.worldMgr, this.sceneMgr), vec)\n                EventBus.publishEvent(new OreFoundEvent())\n            }\n        }\n        if (this.seamLevel > 0) {\n            return false\n        } else {\n            this.collapse()\n            return true\n        }\n    }\n\n    collapse() {\n        this.cancelJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += 4\n        this.needsMeshUpdate = true\n        const foundCave = this.discover()\n        if (foundCave) EventBus.publishEvent(new CavernDiscovered())\n        // drop contained ores and crystals\n        this.dropContainedOre(this.containedOres - 4)\n        for (let c = 0; c < this.containedCrystals; c++) {\n            const crystal = this.worldMgr.placeMaterial(new Crystal(this.worldMgr, this.sceneMgr), this.getRandomPosition())\n            EventBus.publishEvent(new CrystalFoundEvent(crystal))\n        }\n        // check for unsupported neighbors\n        for (let x = this.x - 1; x <= this.x + 1; x++) {\n            for (let y = this.y - 1; y <= this.y + 1; y++) {\n                if (x !== this.x || y !== this.y) {\n                    const surf = this.terrain.getSurface(x, y)\n                    surf.needsMeshUpdate = true\n                    if (!surf.isSupported()) surf.collapse()\n                }\n            }\n        }\n        // update meshes\n        this.terrain.updateSurfaceMeshes()\n        this.terrain.floorGroup.updateWorldMatrix(true, true)\n    }\n\n    private dropContainedOre(dropAmount: number) {\n        for (let c = 0; c < dropAmount && this.containedOres > 0; c++) {\n            this.containedOres--\n            this.worldMgr.placeMaterial(new Ore(this.worldMgr, this.sceneMgr), this.getRandomPosition())\n            EventBus.publishEvent(new OreFoundEvent())\n        }\n    }\n\n    getRandomPosition(): Vector2 {\n        return new Vector2(this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4),\n            this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4))\n    }\n\n    cancelJobs() {\n        this.drillJob = Surface.safeRemoveJob(this.drillJob)\n        this.reinforceJob = Surface.safeRemoveJob(this.reinforceJob)\n        this.dynamiteJob = Surface.safeRemoveJob(this.dynamiteJob)\n        this.clearRubbleJob = Surface.safeRemoveJob(this.clearRubbleJob)\n        this.updateJobColor()\n    }\n\n    private static safeRemoveJob(job: DrillJob | ReinforceJob | CarryDynamiteJob | ClearRubbleJob) {\n        if (job) EventBus.publishEvent(new JobDeleteEvent(job))\n        return null\n    }\n\n    reduceRubble() {\n        this.rubblePositions.shift()\n        if (this.surfaceType === SurfaceType.RUBBLE4) this.surfaceType = SurfaceType.RUBBLE3\n        else if (this.surfaceType === SurfaceType.RUBBLE3) this.surfaceType = SurfaceType.RUBBLE2\n        else if (this.surfaceType === SurfaceType.RUBBLE2) this.surfaceType = SurfaceType.RUBBLE1\n        else if (this.surfaceType === SurfaceType.RUBBLE1) this.surfaceType = SurfaceType.GROUND\n        this.dropContainedOre(this.containedOres - this.rubblePositions.length)\n        this.updateTexture()\n        EventBus.publishEvent(new SurfaceChanged(this))\n    }\n\n    isSupported(): boolean {\n        if (this.surfaceType.floor) return true\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        return isHighGround(surfLeft, surfTopLeft, surfTop)\n            || isHighGround(surfTop, surfTopRight, surfRight)\n            || isHighGround(surfRight, surfBottomRight, surfBottom)\n            || isHighGround(surfBottom, surfBottomLeft, surfLeft)\n    }\n\n    updateMesh(force: boolean = true) {\n        if (!force && !this.needsMeshUpdate) return\n        this.needsMeshUpdate = false\n\n        const topLeftVertex = new Vector3(this.x, 0, this.y)\n        const topRightVertex = new Vector3(this.x + 1, 0, this.y)\n        const bottomLeftVertex = new Vector3(this.x, 0, this.y + 1)\n        const bottomRightVertex = new Vector3(this.x + 1, 0, this.y + 1)\n\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        if (!this.discovered) {\n            topLeftVertex.y = 1\n            topRightVertex.y = 1\n            bottomRightVertex.y = 1\n            bottomLeftVertex.y = 1\n        } else if (!this.surfaceType.floor || !this.neighbors.some((n) => n.surfaceType.floor && n.discovered)) {\n            if (isHighGround(surfLeft, surfTopLeft, surfTop)) topLeftVertex.y = 1\n            if (isHighGround(surfTop, surfTopRight, surfRight)) topRightVertex.y = 1\n            if (isHighGround(surfRight, surfBottomRight, surfBottom)) bottomRightVertex.y = 1\n            if (isHighGround(surfBottom, surfBottomLeft, surfLeft)) bottomLeftVertex.y = 1\n        }\n\n        // update mesh (geometry), if wall type changed\n        let wallType = topLeftVertex.y + topRightVertex.y + bottomRightVertex.y + bottomLeftVertex.y\n        if (wallType === WALL_TYPE.WALL && topLeftVertex.y === bottomRightVertex.y) wallType = WALL_TYPE.WEIRD_CREVICE\n\n        if (this.wallType !== wallType) {\n            this.wallType = wallType\n            this.updateGeometry(topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex, surfTopLeft, surfTop, surfLeft, surfTopRight, surfRight, surfBottomRight, surfBottom, surfBottomLeft)\n            if (this.wallType !== WALL_TYPE.WALL) this.cancelReinforceJobs()\n        }\n\n        this.updateTexture()\n        this.updateJobColor()\n        this.updateGraphWalk()\n    }\n\n    private updateGraphWalk() {\n        const weight = this.getGraphWalkWeight()\n        for (let x = 0; x < 3; x++) {\n            for (let y = 0; y < 3; y++) {\n                this.terrain.graphWalk.grid[this.x * 3 + x][this.y * 3 + y].weight = weight\n            }\n        }\n    }\n\n    cancelReinforceJobs() {\n        this.reinforceJob = Surface.safeRemoveJob(this.reinforceJob)\n        this.updateJobColor()\n    }\n\n    updateTexture() {\n        let textureName = this.terrain.textureSet.texturebasename\n        if (!this.discovered) {\n            textureName += '70'\n        } else if (this.surfaceType === SurfaceType.POWER_PATH) {\n            textureName += this.updatePowerPathTexture()\n        } else if (!this.surfaceType.shaping && this.neighbors.some((n) => n.discovered && n.surfaceType.floor)) {\n            if (this.surfaceType === SurfaceType.POWER_PATH_BUILDING && this.hasPower) {\n                textureName += '66'\n            } else {\n                textureName += this.surfaceType.matIndex.toString()\n            }\n        } else if (this.wallType === WALL_TYPE.WEIRD_CREVICE) {\n            textureName += '77'\n        } else {\n            if (this.wallType === WALL_TYPE.CORNER) {\n                textureName += '5'\n            } else if (this.wallType === WALL_TYPE.INVERTED_CORNER) {\n                textureName += '3'\n            } else if (this.reinforced) {\n                textureName += '2'\n            } else {\n                textureName += '0'\n            }\n            textureName += this.surfaceType.shaping ? this.surfaceType.matIndex : SurfaceType.SOLID_ROCK.matIndex\n        }\n        textureName += '.bmp'\n\n        const texture = ResourceManager.getTexture(textureName)\n        texture.center.set(0.5, 0.5)\n        texture.rotation = this.surfaceRotation\n\n        this.accessMaterials().forEach((mat) => mat.map = texture)\n    }\n\n    private updatePowerPathTexture(): string {\n        this.surfaceRotation = 0\n        const left = this.terrain.getSurface(this.x - 1, this.y).isPath()\n        const top = this.terrain.getSurface(this.x, this.y - 1).isPath()\n        const right = this.terrain.getSurface(this.x + 1, this.y).isPath()\n        const bottom = this.terrain.getSurface(this.x, this.y + 1).isPath()\n        const pathSum = (left ? 1 : 0) + (top ? 1 : 0) + (right ? 1 : 0) + (bottom ? 1 : 0)\n        if (pathSum === 0 || pathSum === 1) {\n            if (left) this.surfaceRotation = -Math.PI / 2\n            if (top) this.surfaceRotation = Math.PI\n            if (right) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '75' : '65'\n        } else if (pathSum === 2) {\n            if (left === right) {\n                this.surfaceRotation = left ? Math.PI / 2 : 0\n                return this.hasPower ? '72' : '62'\n            } else {\n                if (left && bottom) this.surfaceRotation = -Math.PI / 2\n                if (left && top) this.surfaceRotation = Math.PI\n                if (top && right) this.surfaceRotation = Math.PI / 2\n                return this.hasPower ? '73' : '63'\n            }\n        } else if (pathSum === 3) {\n            if (!top) this.surfaceRotation = -Math.PI / 2\n            if (!right) this.surfaceRotation = Math.PI\n            if (!bottom) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '74' : '64'\n        } else {\n            return this.hasPower ? '71' : '60'\n        }\n    }\n\n    accessMaterials(): MeshPhongMaterial[] {\n        if (!this.mesh || !this.mesh.material) return []\n        if (Array.isArray(this.mesh.material)) {\n            return this.mesh.material as MeshPhongMaterial[]\n        } else {\n            return [this.mesh.material as MeshPhongMaterial]\n        }\n    }\n\n    updateGeometry(topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3, surfTopLeft: Surface, surfTop: Surface, surfLeft: Surface, surfTopRight: Surface, surfRight: Surface, surfBottomRight: Surface, surfBottom: Surface, surfBottomLeft: Surface) {\n        if (this.mesh) this.terrain.floorGroup.remove(this.mesh)\n        this.mesh?.geometry?.dispose()\n\n        function avgHeight(...args: Surface[]) {\n            let sum = 0, cnt = 0\n            args.map(s => s.heightOffset).filter(Boolean).forEach(h => {\n                sum += h\n                cnt++\n            })\n            return sum / cnt\n        }\n\n        this.topLeftHeightOffset = avgHeight(surfTopLeft, surfTop, this, surfLeft) * HEIGHT_MULTIPLER\n        this.topRightHeightOffset = avgHeight(surfTop, surfTopRight, surfRight, this) * HEIGHT_MULTIPLER\n        this.bottomRightHeightOffset = avgHeight(this, surfRight, surfBottomRight, surfBottom) * HEIGHT_MULTIPLER\n        this.bottomLeftHeightOffset = avgHeight(surfLeft, this, surfBottom, surfBottomLeft) * HEIGHT_MULTIPLER\n        const geometry = SurfaceGeometry.create(this.wallType, topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex,\n            topLeftVertex.y + this.topLeftHeightOffset,\n            topRightVertex.y + this.topRightHeightOffset,\n            bottomRightVertex.y + this.bottomRightHeightOffset,\n            bottomLeftVertex.y + this.bottomLeftHeightOffset,\n        )\n\n        this.mesh = new Mesh(geometry, new MeshPhongMaterial({shininess: 0}))\n        this.mesh.userData = {selectable: this, surface: this}\n\n        this.terrain.floorGroup.add(this.mesh)\n        this.terrain.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.SURFACE\n    }\n\n    select(): SelectionEvent {\n        if (this.surfaceType.selectable && (this.wallType !== WALL_TYPE.INVERTED_CORNER && this.wallType !== WALL_TYPE.WEIRD_CREVICE) && !this.selected && this.discovered) {\n            this.selected = true\n            this.accessMaterials().forEach((mat) => mat.color.setHex(0x6060a0))\n            console.log('Surface selected at ' + this.x + '/' + this.y)\n            return new SurfaceSelectedEvent(this)\n        }\n        return null\n    }\n\n    deselect(): any {\n        if (this.selected) {\n            this.selected = false\n            this.updateJobColor()\n        }\n    }\n\n    getSelectionCenter(): Vector3 {\n        return null // not used\n    }\n\n    updateJobColor() {\n        const color = this.dynamiteJob?.color || this.reinforceJob?.color || this.drillJob?.color || 0xffffff\n        this.accessMaterials().forEach((mat) => mat.color.setHex(color))\n    }\n\n    hasRubble(): boolean {\n        return this.rubblePositions.length > 0\n    }\n\n    isPath(): boolean {\n        return this.surfaceType === SurfaceType.POWER_PATH || this.surfaceType === SurfaceType.POWER_PATH_BUILDING\n    }\n\n    isWalkable(): boolean {\n        return this.surfaceType.floor && this.discovered && this.surfaceType !== SurfaceType.LAVA && this.surfaceType !== SurfaceType.WATER && !this.building?.blocksPathSurface\n    }\n\n    isDrillable(): boolean {\n        return this.surfaceType.drillable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDrillableHard(): boolean {\n        return this.surfaceType.drillableHard && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isReinforcable(): boolean {\n        return this.surfaceType.reinforcable && this.discovered && this.wallType === WALL_TYPE.WALL && !this.reinforced\n    }\n\n    isExplodable(): boolean {\n        return this.surfaceType.explodable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDigable(): boolean {\n        return this.isDrillable() || this.isExplodable()\n    }\n\n    getDigPositions(): Vector2[] {\n        const digPosition = []\n        if (this.terrain.getSurface(this.x - 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE - 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y - 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE - 1))\n        if (this.terrain.getSurface(this.x + 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE + 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y + 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE + TILESIZE + 1))\n        return digPosition\n    }\n\n    reinforce() {\n        this.reinforced = true\n        this.cancelReinforceJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.updateTexture()\n    }\n\n    getCenterWorld2D(): Vector2 {\n        return new Vector2(this.x, this.y).addScalar(0.5).multiplyScalar(TILESIZE)\n    }\n\n    getCenterWorld(): Vector3 {\n        const center = this.getCenterWorld2D()\n        return new Vector3(center.x, this.sceneMgr.getTerrainHeight(center.x, center.y), center.y)\n    }\n\n    setFallinLevel(fallinLevel: number) {\n        if (fallinLevel < 1) return\n        let originPos\n        let targetPos\n        if (this.surfaceType.floor) {\n            originPos = this.terrain.findFallInOrigin(this.x, this.y)\n            targetPos = [this.x, this.y]\n        } else {\n            originPos = [this.x, this.y]\n            targetPos = this.terrain.findFallInTarget(this.x, this.y)\n        }\n        if (originPos && targetPos) {\n            this.terrain.getSurface(originPos[0], originPos[1]).scheduleFallin(targetPos[0], targetPos[1])\n        }\n    }\n\n    scheduleFallin(targetX: number, targetY: number) {\n        this.fallinTimeout = setTimeout(() => {\n            this.createFallin(targetX, targetY)\n            this.scheduleFallin(targetX, targetY)\n        }, (30 + getRandom(60)) * 1000) // TODO adapt timer to level multiplier and fallin value\n    }\n\n    createFallin(targetX: number, targetY: number) {\n        const fallinPosition = this.terrain.getSurface(targetX, targetY).getCenterWorld()\n        EventBus.publishEvent(new LandslideEvent({\n            getPosition(): Vector3 {\n                return fallinPosition\n            },\n        }))\n\n        // TODO refactor mesh and animation handling\n        const content = ResourceManager.getResource('MiscAnims/RockFall/Rock3Sides.lws')\n        const animation = new LWSCLoader('MiscAnims/RockFall/').parse(content)\n        this.fallinGrp = new Group()\n        this.fallinGrp.position.copy(fallinPosition)\n        const dx = this.x - targetX, dy = targetY - this.y\n        this.fallinGrp.rotateOnAxis(new Vector3(0, 1, 0), Math.atan2(dy, dx) + Math.PI / 2)\n        this.sceneMgr.scene.add(this.fallinGrp)\n        const poly = []\n        animation.bodies.forEach((body) => {\n            const polyModel = body.model.clone(true)\n            poly.push(polyModel)\n        })\n        animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                poly[parentInd].add(polyPart)\n            } else {\n                this.fallinGrp.add(polyPart)\n            }\n        })\n        this.animate(poly, animation, 0)\n\n        this.terrain.getSurface(targetX, targetY).makeRubble()\n    }\n\n    animate(poly, animation, frameIndex) {\n        if (poly.length !== animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = mat.transparent || mat.opacity < 1\n                    })\n                }\n            }\n        })\n        this.animationTimeout = null\n        if (!(frameIndex + 1 > animation.lastFrame) || animation.looping) {\n            let nextFrame = frameIndex + 1\n            if (nextFrame > animation.lastFrame) {\n                nextFrame = animation.firstFrame\n            }\n            const that = this\n            this.animationTimeout = setTimeout(() => that.animate(poly, animation, nextFrame), 1000 / animation.framesPerSecond * animation.transcoef)\n        } else {\n            this.sceneMgr.scene.remove(this.fallinGrp)\n            this.fallinGrp = null\n        }\n    }\n\n    dispose() {\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.accessMaterials().forEach(m => m.dispose())\n        this.mesh?.geometry?.dispose()\n    }\n\n    getFloorHeight(worldX: number, worldZ: number) {\n        const sx = worldX / TILESIZE - this.x\n        const sy = worldZ / TILESIZE - this.y\n        const dy0 = Surface.interpolate(this.topLeftHeightOffset, this.topRightHeightOffset, sx)\n        const dy1 = Surface.interpolate(this.bottomLeftHeightOffset, this.bottomRightHeightOffset, sx)\n        return Surface.interpolate(dy0, dy1, sy) * TILESIZE\n    }\n\n    private static interpolate(y0: number, y1: number, x: number): number {\n        return y0 + x * (y1 - y0)\n    }\n\n    get neighbors(): Surface[] {\n        return [this.terrain.getSurface(this.x - 1, this.y), this.terrain.getSurface(this.x, this.y - 1),\n            this.terrain.getSurface(this.x + 1, this.y), this.terrain.getSurface(this.x, this.y + 1)]\n    }\n\n    makeRubble(containedOre: number = 0) {\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += containedOre\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.updateTexture()\n    }\n\n    setBuilding(building: BuildingEntity) {\n        this.building = building\n        this.updateGraphWalk()\n    }\n\n    getGraphWalkWeight(): number {\n        return this.isWalkable() ? this.hasRubble() ? 4 : 1 : 0\n    }\n\n    setHasPower(state: boolean, recursive: boolean) {\n        if (this.hasPower === state) return\n        this.hasPower = state\n        this.updateTexture()\n        if (recursive) this.neighbors.forEach((n) => n.isPath() && n.setHasPower(state, recursive))\n    }\n\n    canPlaceFence(): boolean { // TODO performance this can be cached\n        return (this.surfaceType === SurfaceType.GROUND || this.isPath()) && !this.building && !this.fence &&\n            [1, 2].some((n) => {\n                return !!this.terrain.getSurface(this.x - n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y - n).building ||\n                    !!this.terrain.getSurface(this.x + n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y + n).building ||\n                    !!this.terrain.getSurface(this.x - n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y - n).fence ||\n                    !!this.terrain.getSurface(this.x + n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y + n).fence\n            })\n    }\n\n    createDrillJob(): DrillJob {\n        if (!this.drillJob) {\n            this.drillJob = new DrillJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.drillJob))\n        }\n        return this.drillJob\n    }\n\n    createReinforceJob(): ReinforceJob {\n        if (!this.reinforceJob) {\n            this.reinforceJob = new ReinforceJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.reinforceJob))\n        }\n        return this.reinforceJob\n    }\n\n    createDynamiteJob(): CarryDynamiteJob {\n        if (!this.dynamiteJob) {\n            const targetBuilding = GameState.getClosestBuildingByType(this.getCenterWorld(), EntityType.TOOLSTATION) // XXX performance cache this\n            if (!targetBuilding) throw 'Could not find toolstation to spawn dynamite'\n            const dynamite = new Dynamite(this.worldMgr, this.sceneMgr, this)\n            dynamite.addToScene(targetBuilding.getDropPosition2D(), targetBuilding.getHeading())\n            this.dynamiteJob = new CarryDynamiteJob(dynamite)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.dynamiteJob))\n        }\n        return this.dynamiteJob\n    }\n\n    createClearRubbleJob(): ClearRubbleJob {\n        if (!this.clearRubbleJob) {\n            this.clearRubbleJob = new ClearRubbleJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.clearRubbleJob))\n        }\n        return this.clearRubbleJob\n    }\n\n}\n","import { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { Graph } from './model/map/astar'\nimport { Surface } from './model/map/Surface'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { Terrain } from './model/map/Terrain'\nimport { SceneManager } from './SceneManager'\nimport { WorldManager } from './WorldManager'\n\nexport class TerrainLoader {\n\n    static loadTerrain(levelConf: LevelEntryCfg, worldMgr: WorldManager, sceneMgr: SceneManager): Terrain {\n        const tileSize = levelConf.blockSize\n        if (tileSize !== TILESIZE) console.error('Unexpected tile size in level configuration: ' + tileSize)\n        const terrain = new Terrain(worldMgr, sceneMgr)\n\n        const themeName = levelConf.textureSet[1]\n        terrain.textureSet = ResourceManager.cfg('Textures', themeName)\n        // console.log(terrain.textureSet);\n\n        const terrainMap = ResourceManager.getResource(levelConf.terrainMap)\n        terrain.width = terrainMap.width\n        terrain.height = terrainMap.height\n        const pathMap = ResourceManager.getResource(levelConf.pathMap)?.level\n        const surfaceMap = ResourceManager.getResource(levelConf.surfaceMap)?.level\n        const predugMap = ResourceManager.getResource(levelConf.predugMap)?.level\n        const cryOreMap = ResourceManager.getResource(levelConf.cryOreMap)?.level\n        const fallinMap = ResourceManager.getResource(levelConf.fallinMap)?.level\n        const erodeMap = ResourceManager.getResource(levelConf.erodeMap)?.level\n\n        // maps parsed from WAD are row-wise saved, which means y (row) comes first and x (column) second\n        for (let r = 0; r < terrainMap.level.length; r++) {\n            for (let c = 0; c < (terrainMap.level)[r].length; c++) {\n                (terrain.surfaces)[c] = (terrain.surfaces)[c] || []\n                const surfaceTypeNum = (terrainMap.level)[r][c]\n                let surfaceType = SurfaceType.getByNum(surfaceTypeNum)\n                const predugLevel = predugMap[r][c]\n                if (predugLevel === PredugMap.CAVERN_EXPOSED) {\n                    if (surfaceType === SurfaceType.GROUND || surfaceType === SurfaceType.DIRT\n                        || surfaceType === SurfaceType.POWER_PATH_BUILDING) { // used by mods\n                        surfaceType = SurfaceType.GROUND\n                    } else if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) {\n                        console.warn('Unexpected cavern surface type: ' + surfaceType.name)\n                    }\n                } else if (predugLevel === PredugMap.SLUG_HOLE_EXPOSED || predugLevel === PredugMap.SLUG_HOLE_HIDDEN) {\n                    surfaceType = SurfaceType.SLUG_HOLE\n                } else if (predugLevel !== PredugMap.WALL && predugLevel !== PredugMap.CAVERN_HIDDEN) {\n                    console.warn('Unexpected predug level: ' + predugLevel)\n                }\n                // give the path map the highest priority, if it exists\n                const pathMapLevel = pathMap && surfaceType.floor ? pathMap[r][c] : PathMap.NONE\n                if (pathMapLevel === PathMap.RUBBLE) {\n                    surfaceType = SurfaceType.RUBBLE4\n                } else if (pathMapLevel === PathMap.POWER_PATH) {\n                    surfaceType = SurfaceType.POWER_PATH\n                } else if (pathMapLevel !== PathMap.NONE) {\n                    console.warn('Unexpected path map level: ' + pathMapLevel)\n                }\n\n                const surface = new Surface(terrain, surfaceType, c, r, surfaceMap[r][c])\n                if (cryOreMap) {\n                    const currentCryOre = cryOreMap[r][c]\n                    if (currentCryOre % 2 === 1) {\n                        surface.containedCrystals = (currentCryOre + 1) / 2\n                    } else {\n                        surface.containedOres = currentCryOre / 2\n                    }\n                }\n\n                (terrain.surfaces)[c].push(surface)\n            }\n        }\n\n        // exlpore predug surfaces\n        terrain.forEachSurface((s) => {\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_EXPOSED || predugMap[s.y][s.x] === PredugMap.SLUG_HOLE_EXPOSED) { // map are rows (y) first, columns (x) second\n                for (let x = s.x - 1; x <= s.x + 1; x++) {\n                    for (let y = s.y - 1; y <= s.y + 1; y++) {\n                        terrain.getSurfaceOrNull(x, y).discovered = true\n                    }\n                }\n            }\n        })\n\n        // create hidden caverns\n        terrain.forEachSurface((s) => {\n            const surface = terrain.getSurfaceOrNull(s.x, s.y)\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_HIDDEN && !surface.discovered) {\n                surface.surfaceType = SurfaceType.GROUND\n            }\n        })\n\n        const weights: number[][] = []\n        for (let x = 0; x < terrain.width; x++) {\n            const col: number[] = []\n            for (let y = 0; y < terrain.height; y++) {\n                const w = terrain.getSurfaceOrNull(x, y).getGraphWalkWeight()\n                col.push(w, w, w)\n            }\n            weights.push(col, col, col)\n        }\n        terrain.graphWalk = new Graph(weights, {diagonal: true})\n\n        // crumble unsupported walls\n        terrain.forEachSurface((s) => {\n            if (!s.isSupported()) s.collapse()\n        })\n\n        terrain.updateSurfaceMeshes(true)\n\n        if (fallinMap) {\n            for (let x = 0; x < terrain.width; x++) {\n                for (let y = 0; y < terrain.height; y++) {\n                    terrain.getSurface(x, y).setFallinLevel(fallinMap[y][x]) // rows (y) before columns (x) used in maps\n                }\n            }\n        }\n\n        if (erodeMap) { // TODO implement lava erosion\n            console.warn('Lucky you! Lava erosion not yet implemented')\n        }\n\n        return terrain\n    }\n\n}\n\nenum PathMap {\n\n    NONE = 0,\n    RUBBLE = 1,\n    POWER_PATH = 2,\n\n}\n\nenum PredugMap {\n\n    WALL = 0,\n    CAVERN_EXPOSED = 1,\n    CAVERN_HIDDEN = 2,\n    SLUG_HOLE_EXPOSED = 3,\n    SLUG_HOLE_HIDDEN = 4,\n}\n","export enum WorkerMessageType {\n\n    MSG,\n    CFG,\n    CACHE_MISS,\n    SFX,\n    ASSET,\n    DONE,\n\n}\n","export enum MoveState {\n\n    MOVED,\n    TARGET_REACHED,\n    TARGET_UNREACHABLE,\n\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\n\nexport class TerrainPath {\n\n    target: PathTarget = null\n    locations: Vector2[] = []\n    lengthSq: number = 0\n\n    constructor(target: PathTarget, locations: Vector2[] | Vector2) {\n        this.target = target\n        this.locations = Array.isArray(locations) ? locations : [locations]\n        for (let c = 0; c < this.locations.length - 1; c++) {\n            const start = this.locations[c]\n            const end = this.locations[c + 1]\n            this.lengthSq += start.distanceToSquared(end)\n        }\n    }\n\n    addLocation(location: Vector2): TerrainPath {\n        this.locations.push(location)\n        if (this.locations.length > 1) {\n            this.lengthSq += this.locations[this.locations.length - 2].distanceToSquared(location)\n        }\n        return this\n    }\n\n    get targetPosition(): Vector2 {\n        return this.locations[this.locations.length - 1] || null\n    }\n\n    get firstLocation(): Vector2 {\n        return this.locations[0] || null\n    }\n\n}\n","import { Group, Vector2, Vector3 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { EntityAddedEvent } from '../../../event/WorldEvents'\nimport { TILESIZE } from '../../../params'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntitySuperType } from '../EntityType'\nimport { PathTarget } from '../PathTarget'\nimport { astar, Graph } from './astar'\nimport { Surface } from './Surface'\nimport { SurfaceType } from './SurfaceType'\nimport { TerrainPath } from './TerrainPath'\n\nexport class Terrain {\n\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    textureSet: any = {}\n    width: number = 0\n    height: number = 0\n    surfaces: Surface[][] = []\n    floorGroup: Group = new Group()\n    roofGroup: Group = new Group()\n    graphWalk: Graph = null\n    cachedPaths = new Map<string, TerrainPath>()\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        this.worldMgr = worldMgr\n        this.sceneMgr = sceneMgr\n        this.floorGroup.scale.setScalar(TILESIZE)\n        this.roofGroup.scale.setScalar(TILESIZE)\n        this.roofGroup.visible = false // keep roof hidden unless switched to other camera\n        EventBus.registerEventListener(EventKey.ENTITY_ADDED, (event: EntityAddedEvent) => {\n            if (event.superType !== EntitySuperType.BUILDING) return\n            event.entity.surfaces.forEach((s) => s.neighbors.forEach((n) => n.updateTexture()))\n        })\n    }\n\n    getSurfaceFromWorld(worldPosition: Vector3): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.z)\n    }\n\n    getSurfaceFromWorld2D(worldPosition: Vector2): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.y)\n    }\n\n    getSurfaceFromWorldXZ(worldX: number, worldZ: number): Surface | null {\n        return this.getSurface(worldX / TILESIZE, worldZ / TILESIZE)\n    }\n\n    getSurface(x, y): Surface {\n        x = Math.floor(x)\n        y = Math.floor(y)\n        return this.getSurfaceOrNull(x, y) || new Surface(this, SurfaceType.SOLID_ROCK, x, y, 0)\n    }\n\n    getSurfaceOrNull(x, y): Surface | null {\n        if (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n            return this.surfaces[x][y]\n        } else {\n            return null\n        }\n    }\n\n    updateSurfaceMeshes(force: boolean = false) {\n        this.forEachSurface((s) => s.updateMesh(force))\n        this.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n        this.resetGraphWalk()\n    }\n\n    resetGraphWalk() {\n        this.graphWalk.init()\n        this.cachedPaths.clear()\n        console.log('Cached paths cleared')\n    }\n\n    findPath(start: Vector2, target: PathTarget): TerrainPath {\n        const end = target.targetLocation\n        const gridStartX = Math.floor(start.x * 3 / TILESIZE)\n        const gridStartY = Math.floor(start.y * 3 / TILESIZE)\n        const gridEndX = Math.floor(end.x * 3 / TILESIZE)\n        const gridEndY = Math.floor(end.y * 3 / TILESIZE)\n        if (gridStartX === gridEndX && gridStartY === gridEndY) {\n            return new TerrainPath(target, end)\n        }\n        const cacheIdentifier = gridStartX + '/' + gridStartY + ' -> ' + gridEndX + '/' + gridEndY\n        const cachedPath = this.cachedPaths.get(cacheIdentifier)\n        if (cachedPath) {\n            return cachedPath.addLocation(end)\n        } else {\n            return this.searchPath(gridStartX, gridStartY, gridEndX, gridEndY, target, cacheIdentifier)\n        }\n    }\n\n    private searchPath(gridStartX: number, gridStartY: number, gridEndX: number, gridEndY: number, target: PathTarget, cacheIdentifier: string): TerrainPath {\n        const startNode = this.graphWalk.grid[gridStartX][gridStartY]\n        const endNode = this.graphWalk.grid[gridEndX][gridEndY]\n        const worldPath = astar.search(this.graphWalk, startNode, endNode, {closest: true}) // option closest used by training jobs\n            .map((n) => Terrain.gridNodeToWorldPos(n))\n        if (worldPath.length < 1) return null // no path found\n        // replace last surface center with actual target position\n        worldPath.pop()\n        worldPath.push(target.targetLocation)\n        this.cachedPaths.set(cacheIdentifier, new TerrainPath(target, worldPath.slice(0, -1))) // cache shallow copy to avoid interference\n        return new TerrainPath(target, worldPath)\n    }\n\n    private static gridNodeToWorldPos(gridNode) {\n        return new Vector2(Math.random(), Math.random()).divideScalar(2).add(gridNode).multiplyScalar(TILESIZE / 3)\n    }\n\n    findFallInOrigin(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isReinforcable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isReinforcable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isReinforcable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isReinforcable()) return [bottomSurface.x, bottomSurface.y]\n        const leftSurface2 = this.getSurface(x - 1, y)\n        if (leftSurface2.isDigable()) return [leftSurface2.x, leftSurface2.y]\n        const topSurface2 = this.getSurface(x, y - 1)\n        if (topSurface2.isDigable()) return [topSurface2.x, topSurface2.y]\n        const rightSurface2 = this.getSurface(x + 1, y)\n        if (rightSurface2.isDigable()) return [rightSurface2.x, rightSurface2.y]\n        const bottomSurface2 = this.getSurface(x, y + 1)\n        if (bottomSurface2.isDigable()) return [bottomSurface2.x, bottomSurface2.y]\n        return null\n    }\n\n    findFallInTarget(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isWalkable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isWalkable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isWalkable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isWalkable()) return [bottomSurface.x, bottomSurface.y]\n        return null\n    }\n\n    dispose() {\n        this.forEachSurface(s => s.dispose())\n    }\n\n    forEachSurface(each: (surface: Surface) => any) {\n        this.surfaces?.forEach((r) => r.forEach((s) => each(s)))\n    }\n\n    countDiggables(): number {\n        let totalDiggables = 0\n        this.forEachSurface((s) => totalDiggables += s.isDigable() ? 1 : 0)\n        return totalDiggables\n    }\n\n    countCrystals(): number {\n        let totalCrystals = 0\n        this.forEachSurface((s) => totalCrystals += s.containedCrystals)\n        return totalCrystals\n    }\n\n    countOres(): number {\n        let totalOres = 0\n        this.forEachSurface((s) => totalOres += s.containedOres)\n        return totalOres\n    }\n\n}\n","import { AmbientLight, Color, Frustum, Mesh, MOUSE, PerspectiveCamera, PointLight, Raycaster, Scene, Vector2, Vector3, WebGLRenderer } from 'three'\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { clearIntervalSafe } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { TILESIZE } from '../params'\nimport { AnimatedMesh } from '../resource/AnimatedMesh'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { DebugHelper } from '../screen/DebugHelper'\nimport { BuildPlacementMarker } from './model/building/BuildPlacementMarker'\nimport { GameState } from './model/GameState'\nimport { Terrain } from './model/map/Terrain'\nimport { Selectable } from './model/Selectable'\nimport { TerrainLoader } from './TerrainLoader'\nimport { WorldManager } from './WorldManager'\n\nexport class SceneManager {\n\n    static meshRegistry: AnimatedMesh[] = []\n\n    maxFps: number = 30 // most animations use 25 fps so this should be enough\n    renderer: WebGLRenderer\n    debugHelper: DebugHelper = new DebugHelper()\n    renderInterval\n    animRequest\n    scene: Scene\n    camera: PerspectiveCamera\n    ambientLight: AmbientLight\n    light: PointLight\n    terrain: Terrain\n    controls: MapControls\n    cursorTorchlight: PointLight\n    buildMarker: BuildPlacementMarker\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.renderer = new WebGLRenderer({antialias: true, canvas: canvas})\n        this.renderer.setClearColor(0x000000)\n\n        this.camera = new PerspectiveCamera(30, canvas.width / canvas.height, 0.1, 5000) // TODO make these params configurable\n\n        this.controls = new MapControls(this.camera, this.renderer.domElement)\n        this.controls.mouseButtons = {LEFT: null, MIDDLE: MOUSE.ROTATE, RIGHT: MOUSE.PAN}\n        // this.controls.maxPolarAngle = Math.PI * 0.45; // TODO dynamically adapt to terrain height at camera position\n\n        this.buildMarker = new BuildPlacementMarker()\n        EventBus.registerEventListener(EventKey.CANCEL_BUILD_MODE, () => {\n            GameState.buildModeSelection = null\n            this.buildMarker.hideAllMarker()\n        })\n    }\n\n    selectEntitiesByRay(rx: number, ry: number) {\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        let intersects = raycaster.intersectObjects(GameState.raiders.map((r) => r.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.buildings.map((b) => b.pickSphere))\n        if (intersects.length < 1 && this.terrain) intersects = raycaster.intersectObjects(this.terrain.floorGroup.children)\n        const selected = []\n        if (intersects.length > 0) {\n            const userData = intersects[0].object.userData\n            if (userData && userData.hasOwnProperty('selectable')) {\n                const selectable = userData['selectable']\n                if (selectable) selected.push(selectable)\n            }\n        }\n        GameState.selectEntities(selected)\n    }\n\n    selectEntitiesInFrustum(r1x: number, r1y: number, r2x: number, r2y: number) {\n        const startPoint = new Vector3(r1x, r1y, 0.5)\n        const endPoint = new Vector3(r2x, r2y, 0.5)\n        // Avoid invalid frustum\n        if (startPoint.x === endPoint.x) {\n            endPoint.x += Number.EPSILON\n        }\n        if (startPoint.y === endPoint.y) {\n            endPoint.y += Number.EPSILON\n        }\n        // update camera\n        this.camera.updateProjectionMatrix()\n        this.camera.updateMatrixWorld()\n        // update frustum\n        const tmpPoint = new Vector3()\n        tmpPoint.copy(startPoint)\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x)\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y)\n        endPoint.x = Math.max(startPoint.x, endPoint.x)\n        endPoint.y = Math.min(startPoint.y, endPoint.y)\n\n        const vecNear = new Vector3()\n        const vecTopLeft = new Vector3()\n        const vecTopRight = new Vector3()\n        const vecDownRight = new Vector3()\n        const vecDownLeft = new Vector3()\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld)\n        vecTopLeft.copy(tmpPoint)\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0)\n        vecDownRight.copy(endPoint)\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0)\n\n        vecTopLeft.unproject(this.camera)\n        vecTopRight.unproject(this.camera)\n        vecDownRight.unproject(this.camera)\n        vecDownLeft.unproject(this.camera)\n\n        const vectemp1 = new Vector3()\n        const vectemp2 = new Vector3()\n        const vectemp3 = new Vector3()\n        vectemp1.copy(vecTopLeft).sub(vecNear)\n        vectemp2.copy(vecTopRight).sub(vecNear)\n        vectemp3.copy(vecDownRight).sub(vecNear)\n        vectemp1.normalize()\n        vectemp2.normalize()\n        vectemp3.normalize()\n\n        const deep = Number.MAX_VALUE\n        vectemp1.multiplyScalar(deep)\n        vectemp2.multiplyScalar(deep)\n        vectemp3.multiplyScalar(deep)\n        vectemp1.add(vecNear)\n        vectemp2.add(vecNear)\n        vectemp3.add(vecNear)\n\n        const frustum = new Frustum()\n        const planes = frustum.planes\n\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight)\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight)\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear)\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear)\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft)\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1)\n        planes[5].normal.multiplyScalar(-1)\n\n        let entities: Selectable[] = GameState.raiders.filter((r) => frustum.containsPoint(r.getSelectionCenter()))\n        if (entities.length < 1) entities = GameState.buildings.filter((b) => frustum.containsPoint(b.getSelectionCenter()))\n        GameState.selectEntities(entities)\n    }\n\n    setupScene(levelConf: LevelEntryCfg, worldMgr: WorldManager) {\n        this.scene = new Scene()\n\n        const ambientRgb = ResourceManager.cfg('Main', 'AmbientRGB') || [10, 10, 10]\n        const maxAmbRgb = Math.min(255, Math.max(0, ...ambientRgb))\n        const normalizedRgb = ambientRgb.map(v => v / (maxAmbRgb ? maxAmbRgb : 1))\n        const ambientColor = new Color(normalizedRgb[0], normalizedRgb[1], normalizedRgb[2])\n        this.ambientLight = new AmbientLight(ambientColor, 0.4)\n        this.scene.add(this.ambientLight)\n\n        this.cursorTorchlight = new PointLight(0xffffff, 1.5, 4, 1)\n        this.cursorTorchlight.distance *= TILESIZE\n        this.scene.add(this.cursorTorchlight)\n\n        this.scene.add(this.buildMarker.group)\n\n        // create terrain mesh and add it to the scene\n        this.terrain = TerrainLoader.loadTerrain(levelConf, worldMgr, this)\n        this.scene.add(this.terrain.floorGroup)\n\n        // gather level start details for game result score calculation\n        GameState.totalDiggables = this.terrain.countDiggables()\n        GameState.totalCrystals = this.terrain.countCrystals()\n        GameState.totalOres = this.terrain.countOres()\n    }\n\n    startScene() {\n        this.debugHelper.show()\n        this.renderInterval = setInterval(() => {\n            this.animRequest = requestAnimationFrame(() => {\n                this.debugHelper.renderStart()\n                this.renderer.render(this.scene, this.camera)\n                this.debugHelper.renderDone()\n            })\n        }, 1000 / this.maxFps)\n    }\n\n    disposeScene() {\n        this.debugHelper.hide()\n        this.renderInterval = clearIntervalSafe(this.renderInterval)\n        if (this.animRequest) {\n            cancelAnimationFrame(this.animRequest)\n            this.animRequest = null\n        }\n        GameState.remainingDiggables = this.terrain?.countDiggables() || 0\n        this.terrain?.dispose()\n        this.terrain = null\n        SceneManager.meshRegistry.forEach(mesh => mesh.dispose())\n        SceneManager.meshRegistry = []\n    }\n\n    static registerMesh(animatedMesh: AnimatedMesh): Mesh {\n        this.meshRegistry.push(animatedMesh)\n        return animatedMesh.mesh\n    }\n\n    resize(width: number, height: number) {\n        this.renderer.setSize(width, height)\n    }\n\n    getTerrainIntersectionPoint(rx: number, ry: number): Vector2 {\n        if (!this.terrain) return null\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        const intersects = raycaster.intersectObjects(this.terrain.floorGroup.children)\n        return intersects.length > 0 ? new Vector2(intersects[0].point.x, intersects[0].point.z) : null\n    }\n\n    setTorchPosition(position: Vector2) {\n        this.cursorTorchlight.position.copy(this.getFloorPosition(position))\n        this.cursorTorchlight.position.y += 2 * TILESIZE\n    }\n\n    getFloorPosition(world: Vector2) {\n        const floorY = this.terrain.getSurfaceFromWorldXZ(world.x, world.y).getFloorHeight(world.x, world.y)\n        return new Vector3(world.x, floorY, world.y)\n    }\n\n    getTerrainHeight(worldX: number, worldZ: number): number {\n        const raycaster = new Raycaster(new Vector3(Number(worldX), 3 * TILESIZE, Number(worldZ)), new Vector3(0, -1, 0))\n        const intersect = raycaster.intersectObject(this.terrain.floorGroup, true)\n        if (intersect.length > 0) {\n            return intersect[0].point.y\n        } else {\n            console.warn('could not determine terrain height for ' + worldX + '/' + worldZ)\n            return 0\n        }\n    }\n\n}\n","export function getPath(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n","import { createContext, createDummyImgData, getPixel, setPixel } from './ImageHelper'\n\nexport class BitmapFont {\n\n    charHeight: number\n    letters: ImageData[] = []\n\n    constructor(fontImageData: ImageData, cols = 10, rows = 19) { // font images always consist of 10 columns and 19 rows with last row empty\n        // actually chars are font dependent and have to be externalized in future\n        // maybe CP850 was used... not sure, doesn't fit...\n        const chars = [' ', '!', '\"', '#', '$', '%', '⌵', '`', '(', ')',\n            '*', '+', ',', '-', '.', '/', '0', '1', '2', '3',\n            '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',\n            '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n            'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n            'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[',\n            '\\\\', ']', '^', '_', '\\'', 'a', 'b', 'c', 'd', 'e',\n            'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\n            'z', 'Ä', 'Å', 'Á', 'À', 'Â', 'Ã', 'Ą', 'ä', 'å',\n            'á', 'à', 'â', 'ã', 'ą', 'Ë', 'E̊', 'É', 'È', 'É',\n            'Ę', 'ë', 'e̊', 'é', 'è', 'e̊', 'ę̊', '', '', '',\n            '', '', '', '', '', 'Ö', '', '', '', '',\n            'ö', '', '', '', '', 'Ü', '', '', '', 'ü',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', 'ß', '', '', '', 'Ñ', '', 'ñ',\n            '',\n        ] // XXX complete this character list\n\n        const maxCharWidth = fontImageData.width / cols\n        this.charHeight = fontImageData.height / rows\n\n        function getActualCharacterWidth(imgData) {\n            for (let y = 0; y < imgData.height / rows; y++) { // find non-empty row first\n                let rowPixelIndex = y * 4 * imgData.width\n                if (imgData.data[rowPixelIndex] !== 255 && imgData.data[rowPixelIndex + 2] !== 255) { // red/blue pixels indicate end of character\n                    for (let x = 0; x < maxCharWidth; x++) {\n                        let colPixelIndex = x * 4\n                        if (imgData.data[colPixelIndex] === 255 || imgData.data[colPixelIndex + 2] === 255) { // red/blue pixels indicate end of character\n                            return x\n                        }\n                    }\n                    return maxCharWidth\n                }\n            }\n            return 0\n        }\n\n        for (let i = 0; i < chars.length; i++) {\n            let imgData = this.extractData(fontImageData, (i % 10) * maxCharWidth, Math.floor(i / 10) * this.charHeight, maxCharWidth, this.charHeight)\n            let actualWidth = getActualCharacterWidth(imgData)\n            if (actualWidth > 0) {\n                imgData = this.extractData(imgData, 0, 0, actualWidth, this.charHeight)\n            } else {\n                imgData = createDummyImgData(maxCharWidth, this.charHeight)\n            }\n            this.letters[chars[i]] = imgData\n        }\n    }\n\n    extractData(imgData, startX, startY, width, height): ImageData {\n        const alpha = getPixel(imgData, startX + width - 1, startY + height - 1)\n        const result = new ImageData(width, height)\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const p = getPixel(imgData, startX + x, startY + y)\n                if (p.r === alpha.r && p.g === alpha.g && p.b === alpha.b) p.a = 0 // apply alpha channel\n                setPixel(result, x, y, p.r, p.g, p.b, p.a)\n            }\n        }\n        return result\n    }\n\n    createTextImage(text: string, maxWidth?: number, autoCenter: boolean = true): HTMLCanvasElement {\n        if (text === undefined || text === null || text.length < 1) {\n            // empty text requested, context with width 0 is not allowed, but 1 with alpha is close enough\n            return createContext(1, 1).canvas\n        }\n        text = text.replace(/_/g, ' ')\n        const rows = this.determineRows(text, maxWidth)\n        const width = Math.max(...(rows.map(r => r.width)))\n        const result = new ImageData(width, this.charHeight * rows.length)\n        rows.forEach((row, index) => {\n            const rowX = autoCenter ? Math.round((width - row.width) / 2) : 0\n            const rowY = index * this.charHeight\n            let letterX = 0\n            for (let c = 0; c < row.text.length; c++) {\n                const letterImgData = this.letters[row.text.charAt(c)]\n                if (letterImgData) {\n                    for (let x = letterX; x < letterX + letterImgData.width; x++) {\n                        for (let y = 0; y < letterImgData.height; y++) {\n                            const p = getPixel(letterImgData, x - letterX, y)\n                            setPixel(result, rowX + x, rowY + y, p.r, p.g, p.b, p.a)\n                        }\n                    }\n                    letterX += letterImgData.width\n                } // missing letter issue already reported above\n            }\n        })\n        const img: CanvasRenderingContext2D = createContext(result.width, result.height)\n        img.putImageData(result, 0, 0)\n        return img.canvas\n    }\n\n    private determineRows(text: string, maxWidth?: number): { text: string, width: number }[] {\n        const spaceWidth = this.letters[' '].width\n        const rows: { text: string, width: number }[] = []\n        let rowText = ''\n        let rowWidth = 0\n        text.split(' ').map(word => {\n            let wordWidth = 0\n            for (let c = 0; c < word.length; c++) {\n                const letter = word.charAt(c)\n                const letterImg = this.letters[letter]\n                if (letterImg) {\n                    wordWidth += letterImg.width\n                } else {\n                    console.error('Letter \\'' + letter + '\\' not found in charset! Ignoring it')\n                }\n            }\n            if (rowWidth > 0) {\n                if (!maxWidth || rowWidth + spaceWidth + wordWidth < maxWidth) {\n                    rowText += ' ' + word\n                    rowWidth += spaceWidth + wordWidth\n                } else {\n                    rows.push({text: rowText, width: rowWidth})\n                    rowText = word\n                    rowWidth = wordWidth\n                }\n            } else {\n                rowText += word\n                rowWidth += wordWidth\n            }\n            return wordWidth\n        })\n        if (rowWidth > 0) rows.push({text: rowText, width: rowWidth})\n        return rows\n    }\n}\n","import { GameStatsCfg } from '../cfg/GameStatsCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { createContext, createDummyImgData } from '../core/ImageHelper'\nimport { iGet } from './wadworker/WadUtil'\n\nexport class ResourceCache {\n\n    static configuration: any = {}\n    static resourceByName: Map<string, any> = new Map()\n    static fontCache: Map<string, BitmapFont> = new Map()\n    static stats: GameStatsCfg\n\n    static cfg(...keys: string[]): any {\n        return iGet(this.configuration, ...keys)\n    }\n\n    static getResource(resourceName: string): any {\n        const lName = resourceName ? resourceName.toString().toLowerCase() : null\n        return this.resourceByName.get(lName) || null\n    }\n\n    static getImageData(imageName: string): ImageData {\n        if (!imageName) throw 'imageName must not be undefined, null or empty - was ' + imageName\n        return this.resourceByName.getOrUpdate((imageName.toLowerCase()), () => {\n            console.error('Image \\'' + imageName + '\\' unknown! Using placeholder image instead')\n            return createDummyImgData(64, 64)\n        })\n    }\n\n    static getImage(imageName: string): HTMLCanvasElement {\n        const imgData = this.getImageData(imageName)\n        const context: CanvasRenderingContext2D = createContext(imgData.width, imgData.height)\n        context.putImageData(imgData, 0, 0)\n        return context.canvas\n    }\n\n    static getImageOrNull(imageName: string): HTMLCanvasElement | null {\n        return imageName ? this.getImage(imageName) : null\n    }\n\n    static getBitmapFont(name: string): BitmapFont {\n        return this.fontCache.getOrUpdate(name, () => {\n            const fontImageData = this.getResource(name)\n            if (!fontImageData) throw 'Could not load font image data for: ' + name\n            return new BitmapFont(fontImageData)\n        })\n    }\n\n    static getDefaultFont() {\n        return this.getBitmapFont('Interface/Fonts/Font5_Hi.bmp')\n    }\n\n}\n","export class InitLoadingMessage {\n\n    wad0FileUrl: string\n    wad1FileUrl: string\n\n    constructor(wad0FileUrl: string, wad1FileUrl: string) {\n        this.wad0FileUrl = wad0FileUrl\n        this.wad1FileUrl = wad1FileUrl\n    }\n\n}\n","import { RepeatWrapping, Texture } from 'three'\nimport { createDummyImgData } from '../core/ImageHelper'\nimport { getFilename } from '../core/Util'\nimport { AnimationEntityType } from '../game/model/anim/AnimationEntityType'\nimport { AnimEntityLoader } from './AnimEntityLoader'\nimport { ResourceCache } from './ResourceCache'\nimport { InitLoadingMessage } from './wadworker/InitLoadingMessage'\nimport { WadWorkerMessage } from './wadworker/WadWorkerMessage'\nimport { WorkerMessageType } from './wadworker/WorkerMessageType'\n\nexport class ResourceManager extends ResourceCache {\n\n    static worker: Worker = new Worker(new URL('./wadworker/WadWorker', import.meta.url))\n\n    static startLoadingFromCache() {\n        return this.startLoading(null)\n    }\n\n    static startLoadingFromUrl(wad0Url: string, wad1Url: string) {\n        return this.startLoading(new InitLoadingMessage(wad0Url, wad1Url))\n    }\n\n    private static startLoading(msg: InitLoadingMessage) {\n        this.worker.onmessage = (event) => {\n            const msg: WadWorkerMessage = event.data\n            if (msg.type === WorkerMessageType.ASSET) {\n                this.resourceByName.set(msg.assetName.toLowerCase(), msg.assetObj)\n                const alphaIndexMatch = msg.assetName.toLowerCase().match(/(.*a)\\d\\d\\d(_.+)/)\n                if (alphaIndexMatch) this.resourceByName.set(alphaIndexMatch[1] + alphaIndexMatch[2], msg.assetObj)\n                this.onAssetLoaded()\n            } else if (msg.type === WorkerMessageType.MSG) {\n                this.onMessage(msg.text)\n            } else if (msg.type === WorkerMessageType.CFG) {\n                this.configuration = msg.cfg\n                this.stats = msg.stats\n                this.onInitialLoad(msg.totalResources)\n            } else if (msg.type === WorkerMessageType.CACHE_MISS) {\n                this.onCacheMissed()\n            } else if (msg.type === WorkerMessageType.DONE) {\n                console.log('Loading of about ' + msg.totalResources + ' assets complete! Total load time: ' + msg.loadingTimeSeconds + ' seconds.')\n                this.onLoadDone()\n            }\n        }\n        this.worker.postMessage(msg)\n    }\n\n    static onMessage: (msg: string) => any = (msg: string) => {\n        console.log(msg)\n    }\n\n    static onCacheMissed: () => any = () => {\n        console.log('Worker missed cache')\n    }\n\n    static onInitialLoad: (totalResources: number) => any = () => {\n        console.log('Initial loading done.')\n    }\n\n    static onAssetLoaded: () => any = () => {\n    }\n\n    static onLoadDone: () => any = () => {\n    }\n\n    static filterTextureSequenceNames(basename: string): string[] {\n        const lBasename = basename.toLowerCase()\n        const result = []\n        this.resourceByName.forEach((res, name) => {\n            if (name.startsWith(lBasename)) result.push(name)\n        })\n        if (result.length > 0) {\n            return result\n        } else if (!lBasename.startsWith('world/shared/')) {\n            return this.filterTextureSequenceNames('world/shared/' + getFilename(basename))\n        } else {\n            console.warn('Texture sequence not found: ' + basename)\n            return null\n        }\n    }\n\n    static getTexture(textureName): Texture {\n        if (!textureName || textureName.length === 0) {\n            throw 'textureName must not be undefined, null or empty - was ' + textureName\n        }\n        const lTextureName = textureName.toLowerCase()\n        const imgData = this.resourceByName.getOrUpdate(lTextureName, () => {\n            const lSharedTextureName = 'world/shared/' + getFilename(lTextureName)\n            return this.resourceByName.getOrUpdate(lSharedTextureName, () => {\n                console.warn('Texture \\'' + textureName + '\\' (' + lTextureName + ', ' + lSharedTextureName + ') unknown! Using placeholder texture instead')\n                return createDummyImgData(64, 64)\n            })\n        })\n        const texture = new Texture(imgData, Texture.DEFAULT_MAPPING, RepeatWrapping, RepeatWrapping)\n        texture.needsUpdate = true\n        return texture\n    }\n\n    static getAnimationEntityType(aeFilename: string): AnimationEntityType {\n        let cfgRoot = this.getResource(aeFilename)\n        if (!cfgRoot) throw 'Could not get animation entity type for: ' + aeFilename\n        return AnimEntityLoader.loadModels(aeFilename, cfgRoot)\n    }\n\n}\n","import { AnimationEntityType } from '../game/model/anim/AnimationEntityType'\nimport { AnimClip } from '../game/model/anim/AnimClip'\nimport { SceneManager } from '../game/SceneManager'\nimport { LWOLoader } from './LWOLoader'\nimport { LWSCLoader } from './LWSCLoader'\nimport { ResourceManager } from './ResourceManager'\nimport { getPath, iGet } from './wadworker/WadUtil'\n\nexport class AnimEntityLoader {\n\n    static loadModels(url, root): AnimationEntityType {\n        const path = getPath(url)\n\n        const entityType = new AnimationEntityType()\n\n        entityType.carryNullName = iGet(root, 'CarryNullName')\n        entityType.depositNullName = iGet(root, 'DepositNullName')\n        entityType.toolNullName = iGet(root, 'ToolNullName')\n\n        // TODO load other poly quality models (if available)\n        // let mediumPoly = iGet(root, 'MediumPoly');\n        // if (mediumPoly) {\n        //     Object.keys(mediumPoly).forEach((key) => {\n        //         const polyname = mediumPoly[key];\n        //         const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //         const polyfile = path + polyname + '.lwo';\n        //         console.log('polyfile');\n        //         console.log(polyfile);\n        //         // new LWOLoader().load(polyfile, (model) => {\n        //         //     mediumPoly[polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //         // }, undefined, () => {\n        //         //     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //         // });\n        //     });\n        //     Object.keys(mediumPoly).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete mediumPoly[polykey]);\n        // }\n\n        const highPoly = iGet(root, 'highpoly')\n        if (highPoly) {\n            entityType.highPoly = {}\n            Object.keys(highPoly).forEach((key) => {\n                const polyname = highPoly[key] + '.lwo'\n                const polykey = key.startsWith('!') ? key.slice(1) : key\n                const lwoBuffer = ResourceManager.getResource(path + polyname)\n                entityType.highPoly[polykey] = SceneManager.registerMesh(new LWOLoader(path).parse(lwoBuffer))\n            })\n        }\n\n        // let fPoly = (root)['fppoly'];\n        // if (fPoly) {\n        //     Object.keys(fPoly).forEach((camera) => {\n        //         Object.keys(fPoly[camera]).forEach((key) => {\n        //             const polyname = fPoly[camera][key];\n        //             const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //             if (polyname !== 'null') {\n        //                 const polyfile = path + polyname + '.lwo';\n        //                 new LWOLoader().load(polyfile, (model) => {\n        //                     fPoly[camera][polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //                 }, undefined, () => {\n        //                     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //                 });\n        //             } else {\n        //                 fPoly[camera][key] = {polyname: polyname, polyfile: null, model: new Group()};\n        //             }\n        //         });\n        //         Object.keys(fPoly[camera]).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete fPoly[polykey][camera]);\n        //     });\n        // }\n\n        const activities = iGet(root, 'Activities')\n        if (activities) {\n            Object.keys(activities).forEach((activity) => {\n                try {\n                    let keyname = iGet(activities, activity)\n                    const act: { file: string, transcoef: number, lwsfile: boolean, animation: AnimClip } = iGet(root, keyname)\n                    const file = iGet(act, 'FILE')\n                    const isLws = iGet(act, 'LWSFILE') === true\n                    const transcoef = iGet(act, 'TRANSCOEF')\n                    const looping = iGet(act, 'LOOPING') === true\n                    if (isLws) {\n                        const content = ResourceManager.getResource(path + file + '.lws')\n                        act.animation = new LWSCLoader(path).parse(content)\n                        act.animation.looping = looping\n                        act.animation.transcoef = transcoef ? Number(transcoef) : 1\n                        entityType.activities.set(activity.toLowerCase(), act)\n                    } else {\n                        console.error('Found activity which is not an LWS file')\n                    }\n                } catch (e) {\n                    console.error(e)\n                    console.log(root)\n                    console.log(activities)\n                    console.log(activity)\n                }\n            })\n        }\n\n        return entityType\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class MoveJob extends Job {\n\n    target: PathTarget[]\n\n    constructor(target: Vector2) {\n        super(JobType.MOVE)\n        this.target = [new PathTarget(target)]\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.target\n    }\n\n}\n","import { Vector3 } from 'three'\n\nexport class EntityStep {\n\n    vec: Vector3 = null\n    targetReached: boolean = false\n\n    constructor(vec: Vector3) {\n        this.vec = vec\n    }\n\n}\n","import { Vector2, Vector3 } from 'three'\nimport { MovableEntityStats } from '../../cfg/MovableEntityStats'\nimport { JOB_ACTION_RANGE } from '../../params'\nimport { SceneManager } from '../SceneManager'\nimport { WorldManager } from '../WorldManager'\nimport { AnimEntityActivity } from './activities/AnimEntityActivity'\nimport { AnimEntity } from './anim/AnimEntity'\nimport { EntityStep } from './EntityStep'\nimport { EntitySuperType, EntityType } from './EntityType'\nimport { TerrainPath } from './map/TerrainPath'\nimport { MoveState } from './MoveState'\nimport { PathTarget } from './PathTarget'\n\nexport abstract class MovableEntity extends AnimEntity {\n\n    currentPath: TerrainPath = null\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, superType: EntitySuperType, entityType: EntityType, aeFilename: string) {\n        super(worldMgr, sceneMgr, superType, entityType, aeFilename)\n    }\n\n    abstract get stats(): MovableEntityStats\n\n    getPosition(): Vector3 {\n        return new Vector3(this.group.position.x, this.group.position.y, this.group.position.z)\n    }\n\n    getPosition2D(): Vector2 {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    getSpeed(): number {\n        return this.stats.RouteSpeed[this.level] * (this.animation?.transcoef || 1) * (this.isOnPath() ? this.stats.PathCoef : 1)\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        if (!target?.length) {\n            console.warn('No targets given')\n            debugger\n        }\n        if (!this.currentPath || !target.some((t) => t.targetLocation.equals(this.currentPath.target.targetLocation))) {\n            const paths = target.map((t) => this.findPathToTarget(t))\n                .sort((l, r) => l.lengthSq - r.lengthSq)\n            this.currentPath = paths.length > 0 ? paths[0] : null\n            if (!this.currentPath) return MoveState.TARGET_UNREACHABLE\n        }\n        const nextLocation = this.currentPath.firstLocation\n        this.group.lookAt(new Vector3(nextLocation.x, this.group.position.y, nextLocation.y))\n        const step = this.determineStep()\n        if (step.targetReached || this.currentPath.target.isInArea(this.getPosition2D())) {\n            return MoveState.TARGET_REACHED\n        } else {\n            this.group.position.add(step.vec)\n            this.changeActivity(this.getRouteActivity()) // only change when actually moving\n            return MoveState.MOVED\n        }\n    }\n\n    abstract getRouteActivity(): AnimEntityActivity\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return new TerrainPath(target, target.targetLocation)\n    }\n\n    determineStep(): EntityStep {\n        const step = this.getEntityStep(this.currentPath.firstLocation)\n        const stepLengthSq = step.vec.lengthSq()\n        const entitySpeed = this.getSpeed() // TODO use average speed between current and target position\n        if (this.currentPath.locations.length > 1) {\n            if (stepLengthSq < entitySpeed * entitySpeed) {\n                this.currentPath.locations.shift()\n                return this.determineStep()\n            }\n        } else if (stepLengthSq < JOB_ACTION_RANGE * JOB_ACTION_RANGE) {\n            step.targetReached = true\n        }\n        step.vec.setLength(Math.min(entitySpeed, JOB_ACTION_RANGE))\n        return step\n    }\n\n    getEntityStep(target: Vector2): EntityStep {\n        const targetWorld = this.sceneMgr.getFloorPosition(target)\n        targetWorld.y += this.floorOffset\n        return new EntityStep(targetWorld.sub(this.group.position))\n    }\n\n    isOnRubble() {\n        return this.sceneMgr.terrain.getSurfaceFromWorld(this.group.position).hasRubble()\n    }\n\n    isOnPath(): boolean {\n        return this.sceneMgr.terrain.getSurfaceFromWorld(this.group.position).isPath()\n    }\n\n}\n","import { Vector2, Vector3 } from 'three'\nimport { MovableEntityStats } from '../../cfg/MovableEntityStats'\nimport { clearIntervalSafe } from '../../core/Util'\nimport { SelectionEvent } from '../../event/LocalEvents'\nimport { NATIVE_FRAMERATE } from '../../params'\nimport { SceneManager } from '../SceneManager'\nimport { WorldManager } from '../WorldManager'\nimport { MaterialEntity } from './collect/MaterialEntity'\nimport { EntitySuperType, EntityType } from './EntityType'\nimport { Job } from './job/Job'\nimport { MovableEntity } from './MovableEntity'\nimport { PathTarget } from './PathTarget'\nimport { RaiderTool } from './raider/RaiderTool'\nimport { RaiderTraining } from './raider/RaiderTraining'\nimport { Selectable, SelectionType } from './Selectable'\n\nexport abstract class FulfillerEntity extends MovableEntity implements Selectable {\n\n    selectionType: SelectionType\n    selected: boolean\n    workInterval = null\n    job: Job = null\n    followUpJob: Job = null\n    carries: MaterialEntity = null\n    jobWorkplaces: PathTarget[] = []\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, superType: EntitySuperType, entityType: EntityType, aeFilename: string, selectionType: SelectionType) {\n        super(worldMgr, sceneMgr, superType, entityType, aeFilename)\n        this.selectionType = selectionType\n        this.group.userData = {'selectable': this}\n        this.workInterval = setInterval(this.work.bind(this), 1000 / NATIVE_FRAMERATE) // TODO do not use interval, make work trigger itself (with timeout/interval) until work is done\n    }\n\n    resetWorkInterval() {\n        this.workInterval = clearIntervalSafe(this.workInterval)\n    }\n\n    abstract work()\n\n    dropItem() {\n        if (!this.carries) return\n        const position = this.getPosition()\n        if (this.carryJoint) {\n            this.carryJoint.remove(this.carries.group)\n            this.carryJoint.getWorldPosition(position)\n        }\n        this.carries.addToScene(new Vector2(position.x, position.z), null)\n        this.carries = null\n    }\n\n    pickupItem(item: MaterialEntity) {\n        this.carries = item\n        if (this.carryJoint) this.carryJoint.add(this.carries.group)\n        this.carries.group.position.set(0, 0, 0)\n    }\n\n    setJob(job: Job, followUpJob: Job = null) {\n        if (this.job !== job) this.stopJob()\n        this.job = job\n        if (this.job) this.job.assign(this)\n        this.followUpJob = followUpJob\n        if (this.followUpJob) this.followUpJob.assign(this)\n        this.jobWorkplaces = this.job.getWorkplaces()\n    }\n\n    stopJob() {\n        this.dropItem()\n        if (!this.job) return\n        this.job.unassign(this)\n        if (this.followUpJob) this.followUpJob.unassign(this)\n        this.job = null\n        this.followUpJob = null\n        this.jobWorkplaces = []\n        this.changeActivity()\n    }\n\n    abstract hasTool(tool: RaiderTool)\n\n    abstract hasTraining(training: RaiderTraining)\n\n    getSelectionType(): SelectionType {\n        return this.selectionType\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    abstract select(): SelectionEvent;\n\n    abstract getSelectionCenter(): Vector3;\n\n    abstract addTool(tool: RaiderTool)\n\n    abstract addTraining(skill: RaiderTraining)\n\n    abstract get stats(): FulfillerStats\n\n}\n\nexport class FulfillerStats extends MovableEntityStats {\n\n    Levels: number\n    HardDrillTime: number[]\n    LooseDrillTime: number[]\n    SoilDrillTime: number[]\n    SeamDrillTime: number[]\n\n}\n","import { Vector3 } from 'three'\nimport { getRandomInclusive } from '../../../core/Util'\nimport { EventBus } from '../../../event/EventBus'\nimport { RaiderSelected, SelectionEvent } from '../../../event/LocalEvents'\nimport { EntityAddedEvent } from '../../../event/WorldEvents'\nimport { RaiderDiscoveredEvent } from '../../../event/WorldLocationEvent'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { BaseActivity } from '../activities/BaseActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { GameState } from '../GameState'\nimport { JobState } from '../job/JobState'\nimport { TerrainPath } from '../map/TerrainPath'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { SelectionType } from '../Selectable'\nimport { RaiderTool } from './RaiderTool'\nimport { RaiderTraining } from './RaiderTraining'\n\nexport class Raider extends FulfillerEntity {\n\n    tools: Map<RaiderTool, boolean> = new Map()\n    trainings: Map<RaiderTraining, boolean> = new Map()\n    slipped: boolean = false\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntitySuperType.RAIDER, EntityType.PILOT, 'mini-figures/pilot/pilot.ae', SelectionType.RAIDER)\n        this.tools.set(RaiderTool.DRILL, true)\n    }\n\n    get stats() {\n        return ResourceManager.stats.Pilot\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.sceneMgr.terrain.findPath(this.getPosition2D(), target)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.raidersUndiscovered.remove(this)\n        GameState.raiders.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(this))\n        EventBus.publishEvent(new RaiderDiscoveredEvent(this))\n    }\n\n    select(): SelectionEvent {\n        this.selectionFrame.visible = !this.slipped\n        if (this.selected || this.slipped) return null\n        this.selected = true\n        this.changeActivity()\n        return new RaiderSelected(this)\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    isDriving(): boolean {\n        return false // TODO implement vehicles\n    }\n\n    getRouteActivity(): BaseActivity {\n        if (this.isOnRubble()) {\n            return !!this.carries ? RaiderActivity.CarryRubble : RaiderActivity.routeRubble\n        } else {\n            return !!this.carries ? RaiderActivity.Carry : RaiderActivity.Route\n        }\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        const result = super.moveToClosestTarget(target)\n        this.job.setActualWorkplace(this.currentPath?.target)\n        if (result === MoveState.MOVED) {\n            GameState.getNearbySpiders(this).some((spider) => {\n                if (this.group.position.distanceToSquared(spider.group.position) < this.radiusSq + spider.radiusSq) {\n                    this.slip()\n                    spider.onDeath()\n                    return true\n                }\n            })\n        } else if (result === MoveState.TARGET_UNREACHABLE) {\n            console.log('Entity could not move to job target, stopping job')\n            this.stopJob()\n        }\n        return result\n    }\n\n    slip() {\n        if (getRandomInclusive(0, 100) < 10) this.stopJob()\n        this.dropItem()\n        this.slipped = true\n        this.changeActivity(RaiderActivity.Slip, () => {\n            this.slipped = false\n        })\n    }\n\n    moveToClosestWorkplace(): boolean {\n        return this.moveToClosestTarget(this.jobWorkplaces) === MoveState.TARGET_REACHED\n    }\n\n    work() {\n        if (!this.job || this.selected || this.slipped) return\n        if (this.job.jobstate !== JobState.INCOMPLETE) {\n            this.stopJob()\n        } else {\n            const carryItem = this.job.getCarryItem()\n            if (carryItem && this.carries !== carryItem) {\n                this.dropItem()\n                if (this.moveToClosestTarget(carryItem.getPositionPathTarget())) {\n                    this.changeActivity(RaiderActivity.Collect, () => {\n                        this.pickupItem(carryItem)\n                    })\n                }\n            } else if (this.moveToClosestWorkplace()) {\n                if (this.job.isReadyToComplete()) {\n                    const workActivity = this.job.getWorkActivity() || this.getDefaultActivity()\n                    this.changeActivity(workActivity, () => {\n                        this.completeJob()\n                    }, this.job.getWorkDuration(this))\n                } else {\n                    this.changeActivity()\n                }\n            }\n        }\n    }\n\n    private completeJob() {\n        this.job?.onJobComplete()\n        if (this.job?.jobstate === JobState.INCOMPLETE) return\n        if (this.job) this.job.unassign(this)\n        this.job = this.followUpJob\n        this.followUpJob = null\n        this.jobWorkplaces = this.job?.getWorkplaces() || []\n        this.changeActivity()\n    }\n\n    getDefaultActivity(): BaseActivity {\n        return this.carries ? RaiderActivity.CarryStand : super.getDefaultActivity()\n    }\n\n    beamUp() {\n        this.stopJob()\n        super.beamUp()\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        GameState.raiders.remove(this)\n    }\n\n    hasTool(tool: RaiderTool) {\n        return !tool || this.tools.has(tool)\n    }\n\n    hasTraining(training: RaiderTraining) {\n        return !training || this.trainings.has(training)\n    }\n\n    addTool(tool: RaiderTool) {\n        this.tools.set(tool, true)\n    }\n\n    addTraining(training: RaiderTraining) {\n        this.trainings.set(training, true)\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class BarrierActivity extends AnimEntityActivity {\n\n    static Short = new AnimEntityActivity('Short')\n    static Expand = new AnimEntityActivity('Expand')\n    static Long = new AnimEntityActivity('Long')\n    static Teleport = new AnimEntityActivity('Teleport')\n\n}\n","import { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { BarrierActivity } from '../activities/BarrierActivity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntityType } from '../EntityType'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { BarrierLocation } from './BarrierLocation'\nimport { CarryPathTarget } from './CarryPathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Barrier extends MaterialEntity {\n\n    heading: number\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager, location: BarrierLocation, site: BuildingSite) {\n        super(worldMgr, sceneMgr, EntityType.BARRIER, 'MiscAnims/Barrier/Barrier.ae')\n        this.heading = location.heading\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityConstruction\n        this.changeActivity()\n        this.targets = [new CarryPathTarget(location.location, site, null)]\n    }\n\n    protected updateTargets(): CarryPathTarget[] {\n        return this.targets // TODO check target site still requires barrier, otherwise choose toolstation\n    }\n\n    getDefaultActivity(): BarrierActivity {\n        return BarrierActivity.Short\n    }\n\n    onAddToSite() {\n        super.onAddToSite()\n        this.group.rotation.y = this.heading\n        this.changeActivity(BarrierActivity.Expand, () => this.changeActivity(BarrierActivity.Long))\n    }\n\n}\n","import { ElectricFence } from '../collect/ElectricFence'\nimport { CarryJob } from './CarryJob'\n\nexport class CarryFenceJob extends CarryJob<ElectricFence> {\n\n    onJobComplete() {\n        super.onJobComplete()\n        if (this.item.targetSurface.canPlaceFence()) {\n            this.item.addToScene(null, null)\n            this.item.targetSurface.fence = this.item\n        } // TODO else dispose item entity with mesh\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CarryFenceJob } from '../job/CarryFenceJob'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { Surface } from '../map/Surface'\nimport { CarryPathTarget } from './CarryPathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class ElectricFence extends MaterialEntity {\n\n    targetSurface: Surface\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager, surface: Surface) {\n        super(worldMgr, sceneMgr, EntityType.ELECTRIC_FENCE)\n        const resource = ResourceManager.getResource('Buildings/E-Fence/E-Fence4.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('Buildings/E-Fence/').parse(resource))\n        this.group.add(mesh)\n        this.targetSurface = surface\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityConstruction\n    }\n\n    protected updateTargets(): CarryPathTarget[] {\n        if (this.targets.length < 1) {\n            if (this.targetSurface.canPlaceFence()) {\n                this.targets = [new CarryPathTarget(this.targetSurface.getCenterWorld2D(), null, null)]\n            } else {\n                this.targets = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                    .map((b) => new CarryPathTarget(b.getDropPosition2D(), null, b))\n            }\n        } else if (!this.targetSurface.canPlaceFence() && !this.targets[0].building) {\n            this.targets = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                .map((b) => new CarryPathTarget(b.getDropPosition2D(), null, b))\n        }\n        return this.targets\n    }\n\n    createCarryJob(): CarryFenceJob {\n        return new CarryFenceJob(this)\n    }\n\n}\n","import { Matrix4, Vector2, Vector3 } from 'three'\nimport { BuildingEntityStats } from '../../../cfg/BuildingEntityStats'\nimport { EventBus } from '../../../event/EventBus'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { BuildingSelected, EntityDeselected, SelectionEvent } from '../../../event/LocalEvents'\nimport { BuildingUpgraded, EntityAddedEvent, MaterialAmountChanged } from '../../../event/WorldEvents'\nimport { TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { BuildingActivity } from '../activities/BuildingActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { AnimEntity } from '../anim/AnimEntity'\nimport { Barrier } from '../collect/Barrier'\nimport { BarrierLocation } from '../collect/BarrierLocation'\nimport { Crystal } from '../collect/Crystal'\nimport { ElectricFence } from '../collect/ElectricFence'\nimport { Ore } from '../collect/Ore'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { Surface } from '../map/Surface'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { Selectable, SelectionType } from '../Selectable'\nimport { BuildingSite } from './BuildingSite'\n\nexport abstract class BuildingEntity extends AnimEntity implements Selectable {\n\n    blocksPathSurface: boolean = true\n    secondaryBuildingPart: Vector2 = null\n    primaryPowerPath: Vector2 = new Vector2(0, 1)\n    secondaryPowerPath: Vector2 = null\n    waterPathSurface: Vector2 = null\n\n    selected: boolean\n    powerSwitch: boolean = true\n    spawning: boolean = false\n    primarySurface: Surface = null\n    secondarySurface: Surface = null\n    primaryPathSurface: Surface = null\n    secondaryPathSurface: Surface = null\n    upgradeCostOre: number = 0\n    upgradeCostBrick: number = 0\n    crystalsInUse: number = 0\n    inBeam: boolean = false\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, entityType: EntityType, aeFilename: string) {\n        super(worldMgr, sceneMgr, EntitySuperType.BUILDING, entityType, aeFilename)\n        this.group.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        this.group.userData = {'selectable': this}\n        this.upgradeCostOre = ResourceManager.cfg('Main', 'BuildingUpgradeCostOre')\n        this.upgradeCostBrick = ResourceManager.cfg('Main', 'BuildingUpgradeCostStuds')\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, (event: MaterialAmountChanged) => {\n            if (event.entityType === EntityType.CRYSTAL && this.powerSwitch) {\n                this.turnOnPower()\n            }\n        })\n    }\n\n    abstract get stats(): BuildingEntityStats\n\n    getSelectionType(): SelectionType {\n        return SelectionType.BUILDING\n    }\n\n    select(): SelectionEvent {\n        if (this.inBeam) return null\n        this.selectionFrame.visible = true\n        if (!this.selected) {\n            this.selected = true\n            return new BuildingSelected(this)\n        }\n        return null\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    getPickSphereCenter(): Vector3 {\n        return new Vector3(0, this.stats.PickSphere / 4, 0)\n    }\n\n    getDropPosition2D(): Vector2 {\n        if (this.getToolJoint) {\n            const worldPos = new Vector3()\n            this.getToolJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else if (this.depositJoint) {\n            const worldPos = new Vector3()\n            this.depositJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else {\n            return this.getPosition2D()\n        }\n    }\n\n    getDropPosition(): Vector3 {\n        return this.sceneMgr.getFloorPosition(this.getDropPosition2D())\n    }\n\n    isPowered(): boolean {\n        return !this.inBeam && this.powerSwitch && (this.stats.SelfPowered || this.stats.PowerBuilding || this.crystalsInUse > 0)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.buildingsUndiscovered.remove(this)\n        GameState.buildings.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(this))\n    }\n\n    hasMaxLevel(): boolean {\n        return this.level >= this.stats.Levels - 1\n    }\n\n    upgrade() {\n        if (!this.canUpgrade()) return\n        if (GameState.numBrick >= this.upgradeCostBrick) {\n            GameState.numBrick -= this.upgradeCostBrick\n            EventBus.publishEvent(new MaterialAmountChanged(EntityType.BRICK))\n        } else {\n            GameState.numOre -= this.upgradeCostOre\n            EventBus.publishEvent(new MaterialAmountChanged(EntityType.ORE))\n        }\n        this.level++\n        EventBus.publishEvent(new EntityDeselected())\n        EventBus.publishEvent(new BuildingUpgraded(this))\n        // TODO add sparkly upgrade animation\n    }\n\n    getDefaultActivity(): BuildingActivity {\n        return !this.isPowered() ? BuildingActivity.Unpowered : AnimEntityActivity.Stand\n    }\n\n    beamUp() {\n        GameState.usedCrystals -= this.crystalsInUse\n        this.crystalsInUse = 0\n        this.inBeam = true\n        for (let c = 0; c < this.stats.CostOre; c++) {\n            this.worldMgr.placeMaterial(new Ore(this.worldMgr, this.sceneMgr), this.primarySurface.getRandomPosition())\n        }\n        for (let c = 0; c < this.stats.CostCrystal; c++) {\n            this.worldMgr.placeMaterial(new Crystal(this.worldMgr, this.sceneMgr), this.primarySurface.getRandomPosition())\n        }\n        this.surfaces.forEach((s) => {\n            s.surfaceType = SurfaceType.GROUND\n            s.setBuilding(null)\n            s.updateTexture()\n            s.neighbors.forEach((n) => n.updateTexture())\n        })\n        super.beamUp()\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        GameState.buildings.remove(this)\n    }\n\n    canUpgrade() {\n        return !this.hasMaxLevel() && (GameState.numOre >= this.upgradeCostOre || GameState.numBrick >= this.upgradeCostBrick)\n    }\n\n    spawnMaterials(type: EntityType, quantity: number) {\n        const material = []\n        if (type === EntityType.CRYSTAL) {\n            while (GameState.numCrystal > 0 && material.length < quantity) {\n                GameState.numCrystal--\n                material.push(new Crystal(this.worldMgr, this.sceneMgr))\n            }\n        } else if (type === EntityType.ORE) {\n            while (GameState.numOre > 0 && material.length < quantity) {\n                GameState.numOre--\n                material.push(new Ore(this.worldMgr, this.sceneMgr))\n            }\n        } else {\n            console.error('Material drop not implemented for: ' + type)\n        }\n        if (material.length > 0) EventBus.publishEvent(new MaterialAmountChanged(type))\n        material.forEach((m) => this.worldMgr.placeMaterial(m, this.getDropPosition2D()))\n    }\n\n    spawnBarriers(barrierLocations: BarrierLocation[], site: BuildingSite) {\n        barrierLocations.map((l) => new Barrier(this.worldMgr, this.sceneMgr, l, site)).forEach((b) => this.worldMgr.placeMaterial(b, this.getDropPosition2D()))\n    }\n\n    spawnFence(targetSurface: Surface) {\n        this.worldMgr.placeMaterial(new ElectricFence(this.worldMgr, this.sceneMgr, targetSurface), this.getDropPosition2D())\n    }\n\n    turnOnPower() {\n        if (this.crystalsInUse > 0 || GameState.usedCrystals >= GameState.numCrystal || (this.entityType !== EntityType.POWER_STATION && !this.surfaces.some((s) => s.neighbors.some((n) => n.hasPower)))) return\n        this.crystalsInUse = 1\n        GameState.usedCrystals += this.crystalsInUse\n        this.surfaces.forEach((s) => s.setHasPower(true, true))\n        this.changeActivity()\n    }\n\n    turnOffPower() {\n        if (this.crystalsInUse < 1) return\n        GameState.usedCrystals -= this.crystalsInUse\n        this.crystalsInUse = 0\n        this.surfaces.forEach((s) => s.setHasPower(false, false))\n        this.changeActivity()\n    }\n\n    get surfaces(): Surface[] {\n        const result = []\n        if (this.primarySurface) result.push(this.primarySurface)\n        if (this.secondarySurface) result.push(this.secondarySurface)\n        if (this.primaryPathSurface) result.push(this.primaryPathSurface)\n        if (this.secondaryPathSurface) result.push(this.secondaryPathSurface)\n        return result\n    }\n\n    placeDown(worldPosition: Vector2, radHeading: number, disableTeleportIn: boolean) {\n        const primaryPathSurface = this.sceneMgr.terrain.getSurfaceFromWorld2D(worldPosition)\n        primaryPathSurface.setBuilding(this)\n        primaryPathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n        primaryPathSurface.updateTexture()\n        this.primarySurface = primaryPathSurface\n        if (this.secondaryBuildingPart) {\n            const secondaryOffset = new Vector2(TILESIZE * this.secondaryBuildingPart.x, TILESIZE * this.secondaryBuildingPart.y)\n                .rotateAround(new Vector2(0, 0), -radHeading).add(worldPosition)\n            const secondarySurface = this.sceneMgr.terrain.getSurfaceFromWorld2D(secondaryOffset)\n            secondarySurface.setBuilding(this)\n            secondarySurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n            secondarySurface.updateTexture()\n            this.secondarySurface = secondarySurface\n        }\n        if (this.primaryPowerPath) {\n            const pathOffset = new Vector2(this.primaryPowerPath.x, this.primaryPowerPath.y).multiplyScalar(TILESIZE)\n                .rotateAround(new Vector2(0, 0), -radHeading).add(worldPosition)\n            const pathSurface = this.sceneMgr.terrain.getSurfaceFromWorld2D(pathOffset)\n            if (this.entityType === EntityType.GEODOME) pathSurface.building = this\n            pathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n            pathSurface.updateTexture()\n            this.primaryPathSurface = pathSurface\n        }\n        this.addToScene(worldPosition, radHeading)\n        this.createPickSphere()\n        if (this.group.visible) {\n            GameState.buildings.push(this)\n        } else {\n            GameState.buildingsUndiscovered.push(this)\n        }\n        if (this.group.visible && !disableTeleportIn) {\n            this.inBeam = true\n            this.changeActivity(BuildingActivity.Teleport, () => {\n                this.inBeam = false\n                this.onPlaceDown()\n            })\n        } else {\n            this.onPlaceDown()\n        }\n        this.sceneMgr.terrain.resetGraphWalk()\n    }\n\n    private onPlaceDown() {\n        this.changeActivity()\n        this.turnOnPower()\n        EventBus.publishEvent(new EntityAddedEvent(this))\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Barracks extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.BARRACKS, 'Buildings/Barracks/Barracks.ae')\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Barracks\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Docks extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.DOCKS, 'Buildings/Docks/Docks.ae')\n        this.waterPathSurface = new Vector2(0, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Docks\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Geodome extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.GEODOME, 'Buildings/Geo-dome/Geo-dome.ae')\n        this.primaryPowerPath = null\n        this.secondaryBuildingPart = new Vector2(0, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Geodome\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { BuildingActivity } from '../../activities/BuildingActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class GunStation extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.GUNSTATION, 'Buildings/gunstation/gunstation.ae')\n        this.primaryPowerPath = null\n    }\n\n    getDefaultActivity(): BuildingActivity {\n        return BuildingActivity.Stand\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.GunStation\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class OreRefinery extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.ORE_REFINERY, 'Buildings/OreRefinery/OreRefinery.ae')\n        this.primaryPowerPath = new Vector2(0, 2)\n        this.secondaryBuildingPart = new Vector2(0, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.OreRefinery\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Deposit\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class PowerStation extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.POWER_STATION, 'Buildings/Powerstation/Powerstation.ae')\n        this.secondaryBuildingPart = new Vector2(-1, 0)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Powerstation\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Deposit\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class TeleportBig extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.TELEPORT_BIG, 'Buildings/BIGTeleport/BIGTeleport.ae')\n        this.secondaryBuildingPart = new Vector2(1, 0)\n        this.secondaryPowerPath = new Vector2(1, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.TeleportBIG\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class TeleportPad extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.TELEPORT_PAD, 'Buildings/Teleports/Teleports.ae')\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.TeleportPad\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Toolstation extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.TOOLSTATION, 'Buildings/Toolstation/Toolstation.ae')\n        this.blocksPathSurface = false\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Toolstation\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Upgrade extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.UPGRADE, 'Buildings/Upgrade/Upgrade.ae')\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Upgrade\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class MonsterActivity extends AnimEntityActivity {\n\n    static Route = new MonsterActivity('Activity_Route')\n\n}\n","import { clearTimeoutSafe } from '../../../core/Util'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { MonsterActivity } from '../activities/MonsterActivity'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { MovableEntity } from '../MovableEntity'\nimport { PathTarget } from '../PathTarget'\n\nexport abstract class Monster extends MovableEntity {\n\n    moveTimeout: NodeJS.Timeout\n    target: PathTarget[] = []\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, entityType: EntityType, aeFilename: string) {\n        super(worldMgr, sceneMgr, EntitySuperType.MONSTER, entityType, aeFilename)\n    }\n\n    onLevelEnd() {\n        this.moveTimeout = clearTimeoutSafe(this.moveTimeout)\n        this.removeFromScene()\n    }\n\n    getRouteActivity(): MonsterActivity {\n        return MonsterActivity.Route\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { getRandomInclusive } from '../../../core/Util'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { Monster } from './Monster'\n\nexport class Bat extends Monster {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.BAT, 'Creatures/bat/bat.ae')\n        this.floorOffset = TILESIZE / 2\n    }\n\n    get stats() {\n        return ResourceManager.stats.Bat\n    }\n\n    startRandomMove() {\n        Bat.onMove(this)\n    }\n\n    private static onMove(bat: Bat) {\n        if (bat.target.length < 1 || bat.moveToClosestTarget(bat.target) === MoveState.TARGET_REACHED) {\n            bat.target = [bat.findTarget()]\n        }\n        bat.moveTimeout = setTimeout(() => Bat.onMove(bat), 1000 / NATIVE_FRAMERATE)\n    }\n\n    private findTarget(): PathTarget { // TODO move to nearby drilling noise, explosions or sonic blasters\n        const terrain = this.sceneMgr.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            if (terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType.floor) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a target')\n        return null\n    }\n\n    onDeath() {\n        this.onLevelEnd()\n        GameState.bats.remove(this)\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { getRandom, getRandomInclusive } from '../../../core/Util'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { Monster } from './Monster'\n\nexport class SmallSpider extends Monster {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.SMALL_SPIDER, 'Creatures/SpiderSB/SpiderSB.ae')\n        this.floorOffset = 1\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallSpider\n    }\n\n    startMoving() {\n        SmallSpider.onMove(this)\n    }\n\n    private static onMove(spider: SmallSpider) {\n        spider.surfaces.forEach((s) => GameState.spidersBySurface.getOrUpdate(s, () => []).remove(spider))\n        if (spider.target.length > 0 && spider.moveToClosestTarget(spider.target) === MoveState.MOVED) {\n            spider.surfaces.forEach((s) => GameState.spidersBySurface.getOrUpdate(s, () => []).push(spider))\n            if (!spider.sceneMgr.terrain.getSurfaceFromWorld(spider.getPosition()).surfaceType.floor) {\n                spider.onDeath()\n            } else {\n                spider.moveTimeout = setTimeout(() => SmallSpider.onMove(spider), 1000 / NATIVE_FRAMERATE)\n            }\n        } else {\n            spider.changeActivity()\n            spider.moveTimeout = setTimeout(() => {\n                spider.target = [spider.findTarget()]\n                SmallSpider.onMove(spider)\n            }, 1000 + getRandom(9000))\n        }\n    }\n\n    private findTarget(): PathTarget {\n        const terrain = this.sceneMgr.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            const surfaceType = terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType\n            if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a target')\n        return null\n    }\n\n    onDeath() {\n        this.onLevelEnd()\n        GameState.spiders.remove(this)\n        this.surfaces.forEach((s) => GameState.spidersBySurface.getOrUpdate(s, () => []).remove(this))\n    }\n\n}\n","import { MathUtils, Vector2, Vector3 } from 'three'\nimport { EventBus } from '../event/EventBus'\nimport { EntityAddedEvent } from '../event/WorldEvents'\nimport { TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { Barracks } from './model/building/entities/Barracks'\nimport { Docks } from './model/building/entities/Docks'\nimport { Geodome } from './model/building/entities/Geodome'\nimport { GunStation } from './model/building/entities/GunStation'\nimport { OreRefinery } from './model/building/entities/OreRefinery'\nimport { PowerStation } from './model/building/entities/PowerStation'\nimport { TeleportBig } from './model/building/entities/TeleportBig'\nimport { TeleportPad } from './model/building/entities/TeleportPad'\nimport { Toolstation } from './model/building/entities/Toolstation'\nimport { Upgrade } from './model/building/entities/Upgrade'\nimport { Crystal } from './model/collect/Crystal'\nimport { GameState } from './model/GameState'\nimport { Bat } from './model/monster/Bat'\nimport { SmallSpider } from './model/monster/SmallSpider'\nimport { Raider } from './model/raider/Raider'\nimport { SceneManager } from './SceneManager'\nimport { WorldManager } from './WorldManager'\nimport degToRad = MathUtils.degToRad\n\nexport class ObjectListLoader {\n\n    static loadObjectList(worldMgr: WorldManager, sceneMgr: SceneManager, objectListConf, disableStartTeleport: boolean) {\n        Object.values(objectListConf).forEach((olObject: any) => {\n            const lTypeName = olObject.type ? olObject.type.toLowerCase() : olObject.type\n            // all object positions are off by one tile, because they start at 1 not 0\n            const worldPos = new Vector2(olObject.xPos, olObject.yPos).addScalar(-1).multiplyScalar(TILESIZE)\n            const buildingType: string = ResourceManager.cfg('BuildingTypes', olObject.type)\n            const radHeading = degToRad(olObject.heading)\n            if (lTypeName === 'TVCamera'.toLowerCase()) {\n                const terrainY = sceneMgr.getTerrainHeight(worldPos.x, worldPos.y)\n                const loc = new Vector3(worldPos.x, terrainY, worldPos.y - TILESIZE / 2)\n                const offset = new Vector3(5 * TILESIZE, 0, 0).applyAxisAngle(new Vector3(0, 1, 0), radHeading - Math.PI / 16).add(loc)\n                sceneMgr.camera.position.copy(offset)\n                sceneMgr.camera.position.y = 4.5 * TILESIZE\n                sceneMgr.controls.target.copy(loc)\n                sceneMgr.controls.update()\n                sceneMgr.setTorchPosition(new Vector2(worldPos.x, worldPos.y - TILESIZE / 2))\n            } else if (lTypeName === 'Pilot'.toLowerCase()) {\n                const raider = new Raider(worldMgr, sceneMgr)\n                raider.changeActivity()\n                raider.createPickSphere()\n                raider.addToScene(worldPos, radHeading - Math.PI / 2)\n                if (raider.group.visible) {\n                    GameState.raiders.push(raider)\n                    EventBus.publishEvent(new EntityAddedEvent(raider))\n                } else {\n                    GameState.raidersUndiscovered.push(raider)\n                }\n            } else if (buildingType) {\n                const entity = this.createBuildingByName(buildingType, worldMgr, sceneMgr)\n                entity.placeDown(worldPos, -radHeading - Math.PI, disableStartTeleport)\n            } else if (lTypeName === 'PowerCrystal'.toLowerCase()) {\n                worldMgr.placeMaterial(new Crystal(worldMgr, sceneMgr), worldPos)\n            } else if (lTypeName === 'SmallSpider'.toLowerCase()) {\n                const spider = new SmallSpider(worldMgr, sceneMgr)\n                spider.changeActivity()\n                spider.addToScene(worldPos, radHeading)\n                GameState.spiders.push(spider)\n                spider.surfaces.forEach((s) => GameState.spidersBySurface.getOrUpdate(s, () => []).push(spider))\n                spider.startMoving()\n            } else if (lTypeName === 'Bat'.toLowerCase()) {\n                const bat = new Bat(worldMgr, sceneMgr)\n                bat.changeActivity()\n                bat.addToScene(worldPos, radHeading)\n                GameState.bats.push(bat)\n                bat.startRandomMove()\n            } else {\n                // TODO implement remaining object types\n                console.warn('Object type ' + olObject.type + ' not yet implemented')\n            }\n        })\n    }\n\n    private static createBuildingByName(buildingType: string, worldMgr: WorldManager, sceneMgr: SceneManager) {\n        const typename = buildingType.slice(buildingType.lastIndexOf('/') + 1).toLowerCase()\n        if (typename === 'toolstation') {\n            return new Toolstation(worldMgr, sceneMgr)\n        } else if (typename === 'teleports') {\n            return new TeleportPad(worldMgr, sceneMgr)\n        } else if (typename === 'docks') {\n            return new Docks(worldMgr, sceneMgr)\n        } else if (typename === 'powerstation') {\n            return new PowerStation(worldMgr, sceneMgr)\n        } else if (typename === 'barracks') {\n            return new Barracks(worldMgr, sceneMgr)\n        } else if (typename === 'upgrade') {\n            return new Upgrade(worldMgr, sceneMgr)\n        } else if (typename === 'geo-dome') {\n            return new Geodome(worldMgr, sceneMgr)\n        } else if (typename === 'orerefinery') {\n            return new OreRefinery(worldMgr, sceneMgr)\n        } else if (typename === 'gunstation') {\n            return new GunStation(worldMgr, sceneMgr)\n        } else if (typename === 'teleportbig') {\n            return new TeleportBig(worldMgr, sceneMgr)\n        } else {\n            throw 'Unknown building type: ' + typename\n        }\n    }\n\n}\n","// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n}\n\nexport enum POINTER_EVENT {\n    MOVE,\n    DOWN,\n    UP,\n}\n\nexport enum KEY_EVENT {\n    DOWN,\n    UP,\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\nimport { RaiderTool } from '../raider/RaiderTool'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class GetToolJob extends Job {\n\n    target: PathTarget[]\n    tool: RaiderTool\n\n    constructor(target: Vector2, tool: RaiderTool) {\n        super(JobType.GET_TOOL)\n        this.target = [new PathTarget(target)]\n        this.tool = tool\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.target\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.fulfiller.forEach((f) => f.addTool(this.tool))\n    }\n\n}\n","import { Vector2 } from 'three'\n\nexport class Area {\n\n    x0: number = 0\n    y0: number = 0\n    x1: number = 0\n    y1: number = 0\n    center: Vector2 = null\n\n    constructor(x0: number, y0: number, x1: number, y1: number) {\n        this.x0 = x0\n        this.y0 = y0\n        this.x1 = x1\n        this.y1 = y1\n        this.center = new Vector2((this.x0 + this.x1) / 2, (this.y0 + this.y1) / 2)\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { Area } from '../../../core/Area'\nimport { JOB_ACTION_RANGE, TILESIZE } from '../../../params'\nimport { Surface } from '../map/Surface'\nimport { PathTarget } from '../PathTarget'\n\nexport class TrainingPathTarget extends PathTarget {\n\n    targetArea: Area\n\n    constructor(surface: Surface) {\n        super(surface.getCenterWorld2D())\n        this.targetArea = new Area(surface.x * TILESIZE - JOB_ACTION_RANGE, surface.y * TILESIZE - JOB_ACTION_RANGE,\n            (surface.x + 1) * TILESIZE + JOB_ACTION_RANGE, (surface.y + 1) * TILESIZE + JOB_ACTION_RANGE)\n    }\n\n    isInArea(position: Vector2): boolean {\n        return position.x >= this.targetArea.x0 && position.x < this.targetArea.x1\n            && position.y >= this.targetArea.y0 && position.y < this.targetArea.y1\n    }\n\n}\n","import { EventBus } from '../../../event/EventBus'\nimport { EntityTrained } from '../../../event/WorldEvents'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { Surface } from '../map/Surface'\nimport { RaiderTraining } from '../raider/RaiderTraining'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\nimport { TrainingPathTarget } from './TrainingPathTarget'\n\nexport class TrainJob extends Job {\n\n    workplaces: TrainingPathTarget[]\n    training: RaiderTraining\n\n    constructor(surface: Surface, training: RaiderTraining) {\n        super(JobType.TRAIN)\n        this.workplaces = [new TrainingPathTarget(surface)]\n        this.training = training\n    }\n\n    getWorkplaces(): TrainingPathTarget[] {\n        return this.workplaces\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.fulfiller.forEach((f) => {\n            f.addTraining(this.training)\n            EventBus.publishEvent(new EntityTrained(f, this.training))\n        })\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Train\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        return 10000 // XXX adjust training time\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { clearIntervalSafe } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { JobCreateEvent, JobDeleteEvent } from '../event/WorldEvents'\nimport { CHECK_CLEARRUBBLE_INTERVAL, JOB_SCHEDULE_INTERVAL } from '../params'\nimport { EntityType } from './model/EntityType'\nimport { GameState } from './model/GameState'\nimport { GetToolJob } from './model/job/GetToolJob'\nimport { PublicJob } from './model/job/Job'\nimport { JobState } from './model/job/JobState'\nimport { PriorityIdentifier } from './model/job/PriorityIdentifier'\nimport { TrainJob } from './model/job/TrainJob'\nimport { Surface } from './model/map/Surface'\nimport { PathTarget } from './model/PathTarget'\nimport { Raider } from './model/raider/Raider'\nimport { RaiderTool } from './model/raider/RaiderTool'\nimport { RaiderTraining } from './model/raider/RaiderTraining'\nimport { WorldManager } from './WorldManager'\n\nexport class Supervisor {\n\n    worldMgr: WorldManager\n    jobs: PublicJob[] = []\n    assignInterval = null\n    checkRubbleInterval = null\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        EventBus.registerEventListener(EventKey.JOB_CREATE, (event: JobCreateEvent) => {\n            this.jobs.push(event.job)\n        })\n        EventBus.registerEventListener(EventKey.JOB_DELETE, (event: JobDeleteEvent) => {\n            event.job.cancel()\n        })\n    }\n\n    start() {\n        stop()\n        this.assignInterval = setInterval(this.assignJobs.bind(this), JOB_SCHEDULE_INTERVAL)\n        this.checkRubbleInterval = setInterval(this.checkUnclearedRubble.bind(this), CHECK_CLEARRUBBLE_INTERVAL)\n    }\n\n    stop() {\n        this.assignInterval = clearIntervalSafe(this.assignInterval)\n        this.checkRubbleInterval = clearIntervalSafe(this.checkRubbleInterval)\n        GameState.raiders.forEach((r) => r.resetWorkInterval())\n        GameState.raidersUndiscovered.forEach((r) => r.resetWorkInterval())\n    }\n\n    assignJobs() {\n        const availableJobs: PublicJob[] = []\n        this.jobs = this.jobs.filter((j) => {\n            const result = j.jobstate === JobState.INCOMPLETE\n            if (result && j.fulfiller.length < 1 && GameState.priorityList.isEnabled(j.getPriorityIdentifier())) { // TODO don't assign jobs on hidden surfaces\n                availableJobs.push(j)\n            }\n            return result\n        })\n        availableJobs.sort((left, right) => {\n            return Math.sign(GameState.priorityList.getPriority(left) - GameState.priorityList.getPriority(right))\n        })\n        const unemployedRaider = GameState.raiders.filter((r) => !r.job)\n        availableJobs.forEach((job) => { // XXX better use estimated time to complete job as metric\n                let closestRaider: Raider = null\n                let closestRaiderIndex: number = null\n                let minDistance: number = null\n                let closestToolRaider: Raider = null\n                let closestToolRaiderIndex: number = null\n                let minToolDistance: number = null\n                let closestToolstationPosition: Vector2 = null\n                let closestNeededTool: RaiderTool = null\n                let closestTrainingRaider: Raider = null\n                let closestTrainingRaiderIndex: number = null\n                let minTrainingDistance: number = null\n                let closestTrainingArea: Surface = null\n                let closestNeededTraining: RaiderTraining = null\n                unemployedRaider.forEach((raider, index) => {\n                    const requiredTool = job.getRequiredTool()\n                    const hasRequiredTool = raider.hasTool(requiredTool)\n                    const raiderTraining = job.getRequiredTraining()\n                    const hasTraining = raider.hasTraining(raiderTraining)\n                    const raiderPosition = raider.getPosition()\n                    if (hasRequiredTool && hasTraining) {\n                        const pathToJob = job.getWorkplaces().map((b) => raider.findPathToTarget(b))\n                            .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                        if (pathToJob) {\n                            const dist = pathToJob.lengthSq // TODO use precalculated path to job\n                            if (minDistance === null || dist < minDistance) {\n                                closestRaider = raider\n                                closestRaiderIndex = index\n                                minDistance = dist\n                            }\n                        }\n                    } else if (!hasRequiredTool) {\n                        const pathToToolstation = GameState.getBuildingsByType(EntityType.TOOLSTATION)\n                            .map((b) => raider.findPathToTarget(new PathTarget(b.getPosition2D())))\n                            .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                        if (pathToToolstation) {\n                            const dist = pathToToolstation.lengthSq\n                            if (minToolDistance === null || dist < minToolDistance) {\n                                closestToolRaider = raider\n                                closestToolRaiderIndex = index\n                                minToolDistance = dist\n                                closestToolstationPosition = pathToToolstation.targetPosition // TODO use precalculated path to toolstation\n                                closestNeededTool = requiredTool\n                            }\n                        }\n                    } else {\n                        const pathToTraining = GameState.getTrainingSites(raiderPosition, raiderTraining)\n                            .map((site) => raider.findPathToTarget(new PathTarget(site.getPosition2D())))\n                            .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                        if (pathToTraining) {\n                            const dist = pathToTraining.lengthSq\n                            if (minTrainingDistance === null || dist < minTrainingDistance) {\n                                closestTrainingRaider = raider\n                                closestTrainingRaiderIndex = index\n                                minTrainingDistance = dist\n                                closestTrainingArea = raider.sceneMgr.terrain.getSurfaceFromWorld2D(pathToTraining.targetPosition) // TODO use precalculated path to training\n                                closestNeededTraining = raiderTraining\n                            }\n                        }\n                    }\n                })\n                if (closestRaider) {\n                    closestRaider.setJob(job)\n                    unemployedRaider.splice(closestRaiderIndex, 1)\n                } else if (closestToolRaider) {\n                    closestToolRaider.setJob(new GetToolJob(closestToolstationPosition, closestNeededTool), job)\n                    unemployedRaider.splice(closestToolRaiderIndex, 1)\n                } else if (closestTrainingRaider) {\n                    closestTrainingRaider.setJob(new TrainJob(closestTrainingArea, closestNeededTraining), job)\n                    unemployedRaider.splice(closestTrainingRaiderIndex, 1)\n                }\n            },\n        )\n        // TODO move unemployed raider out of building sites\n    }\n\n    checkUnclearedRubble() {\n        if (!GameState.priorityList.isEnabled(PriorityIdentifier.aiPriorityClearing)) return\n        GameState.raiders.forEach((raider) => {\n            if (raider.job) return\n            const startSurface = raider.sceneMgr.terrain.getSurfaceFromWorld(raider.getPosition())\n            for (let rad = 0; rad < 10; rad++) {\n                for (let x = startSurface.x - rad; x <= startSurface.x + rad; x++) {\n                    for (let y = startSurface.y - rad; y <= startSurface.y + rad; y++) {\n                        const surface = raider.sceneMgr.terrain.getSurfaceOrNull(x, y)\n                        if (!(surface?.hasRubble()) || !surface?.discovered) continue\n                        const clearRubbleJob = surface.createClearRubbleJob()\n                        if (!clearRubbleJob) continue\n                        const requiredTool = clearRubbleJob.getRequiredTool()\n                        if (raider.hasTool(requiredTool)) {\n                            raider.setJob(clearRubbleJob)\n                        } else {\n                            const pathToToolstation = GameState.getBuildingsByType(EntityType.TOOLSTATION)\n                                .map((b) => raider.findPathToTarget(new PathTarget(b.getPosition2D())))\n                                .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                            if (pathToToolstation) {\n                                raider.setJob(new GetToolJob(pathToToolstation.targetPosition, requiredTool), clearRubbleJob) // TODO use precalculated path to toolstation\n                            }\n                        }\n                    }\n                }\n            }\n        })\n    }\n\n}\n","/** Function documentation mostly copied from the following URLs\n *\n * https://kb.rockraidersunited.com/User:Jessietail/NERPs_reference\n * https://web.archive.org/web/20131206122442/http://rru-stuff.org/nerpfuncs.html\n * https://kb.rockraidersunited.com/NERPs_documentation#Labels\n *\n */\nimport { EntityType } from '../game/model/EntityType'\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { clearIntervalSafe, getRandom } from './Util'\n\nexport class NerpRunner {\n\n    debug = false\n    onLevelEnd: () => any = null\n    nerpInterval: NodeJS.Timeout = null\n\n    registers = new Array(8).fill(0)\n    timers = new Array(4).fill(0)\n    scriptLines = [] // contains humand readable script strings\n    statements = [] // contains parsed statements for execution\n    macrosByName = {}\n    labelsByName = {}\n    halted = false\n    programCounter = 0\n    messages = []\n    // more state variables and switches\n    messagePermit = null\n\n    constructor(debug = false) {\n        this.debug = debug\n    }\n\n    startExecution() {\n        const that = this\n        this.nerpInterval = setInterval(() => {\n            that.execute()\n        }, 2000)\n    }\n\n    pauseExecution() {\n        this.nerpInterval = clearIntervalSafe(this.nerpInterval)\n    }\n\n    /**\n     * Internally used to validate and parse a register number.\n     * @param register\n     * @return {number}\n     */\n    checkRegister(register) {\n        const num = parseInt(register)\n        if (isNaN(num) || num < 0 || num > this.registers.length) throw new Error('Invalid register (' + register + ') provided')\n        return num\n    }\n\n    /**\n     * Internally used to validate and parse a value before setting or adding it with a register.\n     * @param value\n     * @return {number}\n     */\n    checkRegisterValue(value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Invalid register value (' + value + ') provided')\n        return num\n    }\n\n    /**\n     * Gets the value currently stored in the given register, internally used to handle all registers with one method.\n     * @param register the register to read\n     * @return {number} returns the value currently stored in the register\n     */\n    getR(register) {\n        register = this.checkRegister(register)\n        return this.registers[register]\n    }\n\n    /**\n     * Sets the given value for the given register, internally used to handle all registers with one method.\n     * @param register the register to set\n     * @param value the value to set for the given register\n     */\n    setR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] = value\n    }\n\n    /**\n     * Adds the given value to the given register, internally used to handle all registers with one method.\n     * @param register the register to add to\n     * @param value the value to add to the given register\n     */\n    addR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] += value\n    }\n\n    /**\n     * Set the respective timer to the given numerical value. Units are in milliseconds.\n     * @param timer\n     * @param value\n     */\n    setTimer(timer, value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Can\\'t set timer to NaN value: ' + value)\n        this.timers[timer] = new Date().getTime() + num\n    }\n\n    /**\n     * Gets the value of the respective timer. Units are in milliseconds.\n     * @param timer\n     * @return {number}\n     */\n    getTimer(timer) {\n        return new Date().getTime() - this.timers[timer]\n    }\n\n    /**\n     * End the level successfully and show the score screen.\n     */\n    setLevelCompleted() {\n        console.log('Nerp runner marks level as complete')\n        this.halted = true\n        GameState.resultState = GameResultState.COMPLETE\n        this.onLevelEnd()\n    }\n\n    /**\n     * End the level as failure and show the score screen.\n     */\n    setLevelFail() {\n        console.log('NerpRunner marks level as failed; at line: ' + this.scriptLines[this.programCounter])\n        this.halted = true\n        GameState.resultState = GameResultState.FAILED\n        this.onLevelEnd()\n    }\n\n    /**\n     * Sets tutorial flags\n     * @param value a bitmask to set flags with\n     */\n    setTutorialFlags(value) {\n        // TODO implement tutorial flags\n        // seems like value must be interpreted bitwise and sets a certain flag on each bit\n        // seen so far:\n        // 0 = 0x00 allow any click anywhere anytime\n        // 3 = 0x11 disallow invalid clicks\n        // 4095 = 0x111111111111 set all flags? (seen in Tutorial01 level)\n    }\n\n    /**\n     * This is used to make messages come up/not come up.\n     * @param messagesAllowed\n     */\n    setMessagePermit(messagesAllowed) {\n        this.messagePermit = !messagesAllowed\n    }\n\n    setBuildingsUpgradeLevel(typeName: EntityType, level: number) {\n        GameState.buildings.forEach(b => {\n            if (b.entityType === typeName) b.level = level\n        })\n    }\n\n    setToolStoreLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.TOOLSTATION, level)\n    }\n\n    setTeleportPadLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.TELEPORT_PAD, level)\n    }\n\n    setPowerStationLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.POWER_STATION, level)\n    }\n\n    setBarracksLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.BARRACKS, level)\n    }\n\n    /**\n     * Gets the number of tool stores currently built. NOT the total ever built.\n     * @return {number}\n     */\n    getToolStoresBuilt() {\n        return GameState.buildings.count((b) => b.entityType === EntityType.TOOLSTATION)\n    }\n\n    /**\n     * Gets the number of minifigures on the level. TODO it is NOT tested if this ignores minifigures in hidden caverns\n     * @return {number}\n     */\n    getMinifiguresOnLevel() {\n        return GameState.raiders.length\n    }\n\n    /**\n     * Gets the number of crystals currently stored.\n     * @return {number}\n     */\n    getCrystalsCurrentlyStored() {\n        return GameState.numCrystal\n    }\n\n    getObjectiveSwitch() {\n        // TODO implement this\n        return 0\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    setMessageTimerValues(arg1, arg2, arg3) {\n        // TODO implement this\n    }\n\n    getMessageTimer() {\n        return 0 // TODO return remaining amount of time needed to fully play WAV message\n    }\n\n    cameraUnlock() {\n        // TODO implement this\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    setMessage(messageNumber, arrowDisabled) {\n        if (!this.messagePermit) return\n        if (messageNumber === 0) return // TODO messages start at 1\n        const msg = this.messages[messageNumber]\n        console.log(msg.txt) // TODO show message to user\n        // msg.snd resides in sounds/streamed/ which is currently not loaded :(\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    setCameraGotoTutorial(arg1) {\n        // TODO implement this\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    getTutorialBlockIsGround(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    getTutorialBlockIsPath(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    getUnitAtBlock(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getOxygenLevel() {\n        // TODO implement this\n        return 100\n    }\n\n    getObjectiveShowing() {\n        // TODO implement this\n        return false\n    }\n\n    addPoweredCrystals() {\n        // TODO implement this\n    }\n\n    disallowAll() {\n        // TODO implement this\n    }\n\n    getPoweredPowerStationsBuilt() {\n        return GameState.buildings.count((b) => b.isPowered() && b.entityType === EntityType.POWER_STATION)\n    }\n\n    getPoweredBarracksBuilt() {\n        return GameState.buildings.count((b) => b.isPowered() && b.entityType === EntityType.BARRACKS)\n    }\n\n    getRecordObjectAtTutorial() {\n        // TODO implement this\n    }\n\n    getHiddenObjectsFound() {\n        // TODO implement this\n        return 0\n    }\n\n    getLevel1PowerStationsBuilt() {\n        // TODO implement this\n        return 0\n    }\n\n    getRandom100(): number {\n        return getRandom(100)\n    }\n\n    getSlugsOnLevel(): number {\n        // TODO implement slugs\n        return 0\n    }\n\n    generateSlug() {\n        console.warn('Slugs not yet implemented')\n        // TODO implement slugs\n    }\n\n    callMethod(methodName, methodArgs) {\n        if (methodName === 'Stop') {\n            throw 'Stop'\n        } else if (methodName === 'TRUE') {\n            return true\n        } else if (methodName === 'FALSE') {\n            return false\n        }\n        const setRegisterMatch = methodName.match(/^SetR([0-7])$/)\n        if (setRegisterMatch) {\n            return this.setR(setRegisterMatch[1], methodArgs[0])\n        }\n        const addRegisterMatch = methodName.match(/^AddR([0-7])$/)\n        if (addRegisterMatch) {\n            return this.addR(addRegisterMatch[1], methodArgs[0])\n        }\n        const getRegisterMatch = methodName.match(/^GetR([0-7])$/)\n        if (getRegisterMatch) {\n            return this.getR(getRegisterMatch[1])\n        }\n        const setTimerMatch = methodName.match(/^SetTimer([0-3])$/)\n        if (setTimerMatch) {\n            return this.setTimer(setTimerMatch[1], methodArgs[0])\n        }\n        const getTimerMatch = methodName.match(/^GetTimer([0-3])$/)\n        if (getTimerMatch) {\n            return this.getTimer(getTimerMatch[1])\n        }\n        const lMethodName = methodName.toLowerCase()\n        const memberName = Object.getOwnPropertyNames(NerpRunner.prototype).find((name) => name.toLowerCase() === lMethodName)\n        if (memberName) return this[memberName].apply(this, methodArgs)\n        throw new Error('Undefined method: ' + methodName)\n    }\n\n    conditional(left, right) {\n        const conditionResult = this.executeStatement(left)\n        if (this.debug) {\n            console.log('Condition evaluated to ' + conditionResult)\n        }\n        if (conditionResult) {\n            this.executeStatement(right)\n        }\n    }\n\n    executeStatement(expression) {\n        if (expression.invoke) {\n            const argValues = expression.invoke !== 'conditional' ? expression.args.map(e => this.executeStatement(e)) : expression.args\n            const result = this.callMethod(expression.invoke, argValues)\n            if (result !== undefined && this.debug) {\n                console.log('Method returned: ' + result)\n            }\n            return result\n        } else if (expression.comparator) {\n            const left = this.executeStatement(expression.left)\n            const right = this.executeStatement(expression.right)\n            if (expression.comparator === '=') {\n                return left === right\n            } else if (expression.comparator === '!=') {\n                return left !== right\n            } else if (expression.comparator === '<') {\n                return left < right\n            } else if (expression.comparator === '>') {\n                return left > right\n            } else {\n                console.log(expression)\n                throw new Error('Unknown comparator: ' + expression.comparator)\n            }\n        } else if (!isNaN(expression)) { // just a number\n            return expression\n        } else if (expression.jump) {\n            this.programCounter = this.labelsByName[expression.jump]\n            if (this.programCounter === undefined) {\n                throw new Error('Label \\'' + expression.jump + '\\' is unknown!')\n            }\n            if (this.debug) {\n                console.log('Jumping to label \\'' + expression.jump + '\\' in line ' + this.programCounter)\n            }\n        } else {\n            console.log(expression)\n            throw new Error('Unknown expression in line ' + this.programCounter + ': ' + expression)\n        }\n    }\n\n    execute(debug = false) {\n        this.debug = debug\n        if (this.halted) return\n        try {\n            if (this.debug) {\n                console.log('Executing following script\\n' + this.scriptLines.join('\\n'))\n                console.log('Registers: ' + this.registers)\n            }\n            for (this.programCounter = 0; this.programCounter < this.statements.length; this.programCounter++) {\n                const statement = this.statements[this.programCounter]\n                if (this.debug) {\n                    console.log(this.programCounter + ': ' + this.scriptLines[this.programCounter])\n                    console.log(statement)\n                }\n                if (!statement.label) { // do nothing for label markers\n                    this.executeStatement(statement)\n                }\n            }\n        } catch (e) {\n            if (e === 'Stop') {\n                return\n            }\n            console.error(e)\n            console.error('FATAL ERROR! Script execution failed! You can NOT win anymore!')\n            this.halted = true\n        }\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { NerpRunner } from './NerpRunner'\n\nexport class NerpParser {\n\n    static parse(nerpScript: string): NerpRunner {\n        const nerpRunner = new NerpRunner()\n        const lines = nerpScript.split('\\n').map(l => l\n            .split('//')[0].trim() // before comment starts\n            .split(';')[0].trim() // before preprocessor comment starts\n            .replace(/_/g, '') // some preprocessor macros use this prefix\n            .replace(/\\bTRUE \\? /, '') // some weird requirement of the original language\n            .replace(/[{}]/g, ''), // duplicate limit for macros using labels too\n        )\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c]\n            if (line.length < 1) {\n                continue // ignore empty lines, but important for macro closure\n            }\n            if (line.startsWith('#include ')) { // include other nerp scripts/headers\n                const includeName = line.replace(/^#include /, '').trim().slice(1, -1)\n                if (includeName === 'nerpdef.h') {\n                    // trivial default header file, is applied by search and replace above\n                    // see https://github.com/jgrip/legorr/blob/master/nerpdef.h\n                    continue\n                }\n                const includedRunner = NerpParser.parse(ResourceManager.getResource('Levels/' + includeName))\n                if (!includedRunner || !includedRunner.scriptLines || includedRunner.scriptLines.length < 1) {\n                    throw 'Can\\'t include unknown nerp script: ' + line\n                }\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(includedRunner.scriptLines)\n                // copy macros from included file to current file\n                nerpRunner.macrosByName = Object.assign({}, nerpRunner.macrosByName, includedRunner.macrosByName)\n            } else if (line.startsWith('#define ')) { // parse C++ preprocessor macro\n                const firstLine = line.replace(/^#define /, '').split(' ')\n                const macroLines = [firstLine.splice(1).join(' ').replace(/\\\\$/, '').trim()]\n                let mLine = line\n                let append = false\n                while (mLine.endsWith('\\\\') && c < lines.length - 1) {\n                    c++\n                    mLine = lines[c].trim()\n                    const macroLine = mLine.replace(/\\\\$/, '').trim()\n                    if (macroLine.length > 0) {\n                        if (append) {\n                            append = false\n                            macroLines[macroLines.length - 1] += macroLine\n                        } else {\n                            macroLines.push(macroLine)\n                        }\n                    }\n                    if (mLine.match(/:\\\\$/)) {\n                        append = true\n                    }\n                }\n                const macroCall = firstLine[0].split('(')\n                nerpRunner.macrosByName[macroCall[0]] = {\n                    args: macroCall[1].replace(/\\)$/, '').split(','),\n                    lines: macroLines,\n                }\n            } else {\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(this.replaceMacros(nerpRunner.macrosByName, line))\n            }\n        }\n        // somewhat precompile the script and create syntax tree\n        // must be done in separate block to make sure the script is complete and we can refer/rely on line numbers for label jumps\n        for (let c = 0; c < nerpRunner.scriptLines.length; c++) {\n            const line = nerpRunner.scriptLines[c]\n            nerpRunner.statements[c] = line.replace(/\\(\\)/g, '') // now the macros are applied and obsolete empty \"()\" can be removed\n                .split(' ? ')\n            const labelMatch = line.match(/(\\S+):/)\n            if (nerpRunner.statements[c].length === 2) { // line contains condition (primary operator)\n                nerpRunner.statements[c] = {\n                    invoke: 'conditional',\n                    args: [this.preProcess(nerpRunner.statements[c][0]), this.preProcess(nerpRunner.statements[c][1])],\n                }\n            } else if (labelMatch) { // keep label line number for later usage\n                const labelName = labelMatch[1].toLowerCase()\n                nerpRunner.labelsByName[labelName] = c\n                nerpRunner.statements[c] = {label: labelName}\n            } else if (nerpRunner.statements[c].length === 1) { // just a call\n                nerpRunner.statements[c] = this.preProcess(nerpRunner.statements[c][0])\n            } else { // lines contains more than 1 condition statement\n                throw 'Can\\'t deal with line: ' + line\n            }\n        }\n        return nerpRunner\n    }\n\n    static replaceMacros(macrosByName, line): string[] {\n        // check if this line contains a macro\n        const split = line.split('(') // not a very stable check though...\n        const macro = macrosByName[split[0]]\n        if (macro) {\n            const argValues = split.splice(1).join('(').slice(0, -1).split(',')\n            if (argValues.length !== macro.args.length) {\n                throw 'Invalid number of args provided for macro in line ' + line\n            }\n            const macroLines = []\n            macro.lines.forEach((line) => {\n                for (let c = 0; c < argValues.length; c++) {\n                    line = line.replace(new RegExp('\\\\b' + macro.args[c] + '\\\\b'), argValues[c])\n                }\n                macroLines.push(...(this.replaceMacros(macrosByName, line)))\n            })\n            return macroLines\n        } else {\n            return [line]\n        }\n    }\n\n    static preProcess(expression) {\n        expression = expression.trim().replace(/^_/, '') // remove whitespace and leading underscore\n        const number = parseInt(expression)\n        if (!isNaN(number)) {\n            return number\n        }\n        const opSplit = expression.split(/ (=) | (!=) | (>) | (<) /).filter(e => e !== undefined)\n        const brackets = expression.match(/^(.+)\\((.+)\\)$/)\n        const spaceSplit = expression.split(' ')\n        const labelMatch = expression.match(/([^:]+):$/)\n        const jumpMatch = expression.match(/^:([^:]+)$/)\n        if (opSplit.length === 3) { // expression contains secondary operator\n            return {left: this.preProcess(opSplit[0]), comparator: opSplit[1], right: this.preProcess(opSplit[2])}\n        } else if (brackets) {\n            const args = brackets[2].split(',').map(a => this.preProcess(a))\n            return {invoke: brackets[1], args: args}\n        } else if (spaceSplit.length > 1) { // space split must be the very last since most expressions contain space\n            const args = spaceSplit.length === 2 ? [this.preProcess(spaceSplit[1])] : spaceSplit.splice(1).map(a => this.preProcess(a))\n            return {invoke: spaceSplit[0], args: args}\n        } else if (labelMatch) { // label definition\n            return {label: labelMatch[1]}\n        } else if (jumpMatch) { // jump to label\n            return {jump: jumpMatch[1].toLowerCase()}\n        } else { // function call without args\n            if (expression.match(/[ =?><!]/)) {\n                throw 'Invalid expression given, parsing must have failed before somewhere'\n            }\n            return {invoke: expression, args: []}\n        }\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { NerpParser } from '../core/NerpParser'\nimport { NerpRunner } from '../core/NerpRunner'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { AirLevelChanged } from '../event/LocalEvents'\nimport { JobCreateEvent } from '../event/WorldEvents'\nimport { UPDATE_OXYGEN_TIMER } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MaterialEntity } from './model/collect/MaterialEntity'\nimport { GameState } from './model/GameState'\n\nexport class WorldManager {\n\n    nerpRunner: NerpRunner = null\n    oxygenUpdateInterval = null\n\n    constructor() {\n        EventBus.registerEventListener(EventKey.DESELECTED_ENTITY, () => GameState.selectEntities([]))\n        EventBus.registerEventListener(EventKey.CAVERN_DISCOVERED, () => {\n            GameState.discoveredCaverns++\n        })\n        this.oxygenUpdateInterval = setInterval(this.updateOxygen.bind(this), UPDATE_OXYGEN_TIMER)\n    }\n\n    setup(levelConf: LevelEntryCfg, onLevelEnd: () => any) {\n        GameState.levelFullName = levelConf.fullName\n        GameState.totalCaverns = levelConf.reward?.quota?.caverns || 0\n        GameState.rewardConfig = levelConf.reward\n        GameState.priorityList.setList(levelConf.priorities)\n        GameState.oxygenRate = levelConf.oxygenRate\n\n        // load nerp script\n        this.nerpRunner = NerpParser.parse(ResourceManager.getResource(levelConf.nerpFile))\n        this.nerpRunner.messages.push(...(ResourceManager.getResource(levelConf.nerpMessageFile)))\n        this.nerpRunner.onLevelEnd = onLevelEnd\n    }\n\n    start() {\n        this.nerpRunner?.startExecution()\n        GameState.levelStartTime = Date.now()\n    }\n\n    stop() {\n        GameState.levelStopTime = Date.now()\n        this.nerpRunner?.pauseExecution()\n        GameState.spiders.forEach((m) => m.onLevelEnd())\n        GameState.bats.forEach((b) => b.onLevelEnd())\n    }\n\n    placeMaterial(item: MaterialEntity, worldPosition: Vector2) {\n        item.addToScene(worldPosition, 0)\n        if (item.group.visible) {\n            GameState.materials.push(item)\n            EventBus.publishEvent(new JobCreateEvent(item.createCarryJob()))\n        } else {\n            GameState.materialsUndiscovered.push(item)\n        }\n        return item\n    }\n\n    updateOxygen() {\n        const sum = GameState.raiders.map((r) => r.stats.OxygenCoef).reduce((l, r) => l + r, 0) +\n            GameState.buildings.map((b) => b.isPowered() ? b.stats.OxygenCoef : 0).reduce((l, r) => l + r, 0)\n        const rateMultiplier = 0.001\n        const valuePerSecond = 1 / 25\n        const msToSeconds = 0.001\n        const diff = sum * GameState.oxygenRate * rateMultiplier * valuePerSecond * UPDATE_OXYGEN_TIMER * msToSeconds / 10\n        if (diff) {\n            GameState.airLevel = Math.min(1, Math.max(0, GameState.airLevel + diff))\n            EventBus.publishEvent(new AirLevelChanged())\n        }\n    }\n\n}\n","import { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../../params'\n\nexport class ScreenLayer {\n\n    canvas: HTMLCanvasElement\n    context: CanvasRenderingContext2D\n    onRedraw: (context: CanvasRenderingContext2D) => any\n    active: boolean = true\n\n    constructor(alpha: boolean = false, withContext: boolean = true) {\n        this.canvas = document.createElement('canvas')\n        if (!alpha) this.canvas.style.background = '#f0f'\n        if (withContext) this.context = this.canvas.getContext('2d', {alpha: alpha})\n        this.hide()\n    }\n\n    reset() {\n    }\n\n    setZIndex(zIndex: number) {\n        this.canvas.style.zIndex = String(zIndex)\n    }\n\n    static compareZ(layerA: ScreenLayer, layerB: ScreenLayer) {\n        let aIndex = layerA?.canvas?.style?.zIndex || 0\n        const bIndex = layerB?.canvas?.style?.zIndex || 0\n        return aIndex === bIndex ? 0 : aIndex > bIndex ? -1 : 1\n    }\n\n    resize(width, height) {\n        this.canvas.width = width\n        this.canvas.height = height\n    }\n\n    redraw() {\n        const callback = this.onRedraw\n        if (this.isActive() && callback) {\n            const context = this.context\n            requestAnimationFrame(() => callback(context))\n        }\n    }\n\n    show() {\n        this.reset()\n        this.active = true\n        this.canvas.style.visibility = 'visible'\n        this.redraw()\n    }\n\n    hide() {\n        this.active = false\n        this.canvas.style.visibility = 'hidden'\n    }\n\n    isActive() {\n        return this.active\n    }\n\n    toCanvasCoords(windowX: number, windowY: number) {\n        const clientRect = this.canvas.getBoundingClientRect()\n        return [windowX - clientRect.left, windowY - clientRect.top]\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        return false\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): boolean {\n        return false\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        return false\n    }\n\n}\n\nexport class ScaledLayer extends ScreenLayer {\n\n    fixedWidth: number = SPRITE_RESOLUTION_WIDTH\n    fixedHeight: number = SPRITE_RESOLUTION_HEIGHT\n    scaleX: number\n    scaleY: number\n\n    constructor() {\n        super(true)\n        this.updateScale()\n    }\n\n    private updateScale() {\n        this.scaleX = this.canvas.width / this.fixedWidth\n        this.scaleY = this.canvas.height / this.fixedHeight\n    }\n\n    toScaledCoords(windowX: number, windowY: number) {\n        const [cx, cy] = this.toCanvasCoords(windowX, windowY)\n        return [cx / this.scaleX, cy / this.scaleY].map((c) => Math.round(c))\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        this.updateScale()\n        this.context.scale(this.scaleX, this.scaleY)\n    }\n\n}\n","import { KEY_EVENT } from './EventTypeEnum'\n\nexport class GameKeyboardEvent {\n\n    eventEnum: KEY_EVENT\n    type: string\n    bubbles: boolean\n    key: string\n\n    constructor(eventEnum: KEY_EVENT, event: KeyboardEvent) {\n        this.eventEnum = eventEnum\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        this.key = event.key\n    }\n\n}\n","import { POINTER_EVENT } from './EventTypeEnum'\n\nexport class GamePointerEvent implements PointerEventInit {\n\n    type: string\n    eventEnum: POINTER_EVENT\n    bubbles: boolean\n    clientX: number\n    clientY: number\n    pointerType: string\n    button: number\n    ctrlKey: boolean\n    metaKey: boolean\n    shiftKey: boolean\n\n    constructor(eventEnum: POINTER_EVENT, event: PointerEvent) {\n        this.eventEnum = eventEnum\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        // all event attributes used by three.js controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n        this.clientX = event.clientX\n        this.clientY = event.clientY\n        this.pointerType = event.pointerType\n        this.button = event.button\n        this.ctrlKey = event.ctrlKey\n        this.metaKey = event.metaKey\n        this.shiftKey = event.shiftKey\n    }\n\n}\n","export class GameWheelEvent {\n\n    type: string\n    bubbles: boolean\n    clientX: number\n    clientY: number\n    deltaX: number\n    deltaY: number\n    deltaZ: number\n    button: number\n    ctrlKey: boolean\n    metaKey: boolean\n    shiftKey: boolean\n\n    constructor(event: WheelEvent) {\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        // all event attributes used by three.js controls: clientX, clientY, deltaY, keyCode, touches, button, ctrlKey, metaKey, shiftKey\n        this.clientX = event.clientX\n        this.clientY = event.clientY\n        this.deltaX = event.deltaX\n        this.deltaY = event.deltaY\n        this.deltaZ = event.deltaZ\n        this.button = event.button\n        this.ctrlKey = event.ctrlKey\n        this.metaKey = event.metaKey\n        this.shiftKey = event.shiftKey\n    }\n\n}\n","import { DEV_MODE } from '../params'\nimport { BaseScreen } from '../screen/BaseScreen'\nimport { ScreenLayer } from '../screen/layer/ScreenLayer'\nimport { KEY_EVENT, POINTER_EVENT } from './EventTypeEnum'\nimport { GameKeyboardEvent } from './GameKeyboardEvent'\nimport { GamePointerEvent } from './GamePointerEvent'\nimport { GameWheelEvent } from './GameWheelEvent'\n\nexport class EventManager {\n\n    constructor(screen: BaseScreen) {\n        screen.gameCanvasContainer.addEventListener('contextmenu', (event: MouseEvent) => {\n            if (screen.isInRect(event)) event.preventDefault()\n        })\n        new Map<string, POINTER_EVENT>([\n            ['pointermove', POINTER_EVENT.MOVE],\n            ['pointerdown', POINTER_EVENT.DOWN],\n            ['pointerup', POINTER_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: PointerEvent) => {\n                if (!screen.isInRect(event)) return\n                event.preventDefault()\n                const nonBubblingClone = new GamePointerEvent(eventEnum, event)\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handlePointerEvent(nonBubblingClone))\n            })\n        })\n        new Map<string, KEY_EVENT>([\n            ['keydown', KEY_EVENT.DOWN],\n            ['keyup', KEY_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: KeyboardEvent) => {\n                if (!DEV_MODE) event.preventDefault()\n                const nonBubblingClone = new GameKeyboardEvent(eventEnum, event)\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handleKeyEvent(nonBubblingClone))\n            })\n        })\n        screen.gameCanvasContainer.addEventListener('wheel', (event: WheelEvent) => {\n            if (!screen.isInRect(event)) return\n            const nonBubblingClone = new GameWheelEvent(event)\n            screen.layers.filter(l => l.isActive())\n                .sort((a, b) => ScreenLayer.compareZ(a, b))\n                .some(l => l.handleWheelEvent(nonBubblingClone))\n        })\n    }\n\n}\n","import { iGet } from '../../core/Util'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { ChangeCursor } from '../../event/LocalEvents'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Cursors } from '../Cursors'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class CursorLayer extends ScreenLayer {\n\n    pointersCfg\n    curUrl\n\n    constructor() {\n        super(true, false)\n        EventBus.registerEventListener(EventKey.CHANGE_CURSOR, (event: ChangeCursor) => {\n            this.changeCursor(event.cursor)\n        })\n    }\n\n    show() {\n        super.show()\n        this.pointersCfg = ResourceManager.cfg('Pointers')\n        this.changeCursor(Cursors.Pointer_Standard)\n    }\n\n    hide() {\n        super.hide()\n        this.canvas.style.cursor = null\n    }\n\n    private changeCursor(cursor: Cursors) {\n        if (this.curUrl) URL.revokeObjectURL(this.curUrl)\n        if (!this.pointersCfg) return\n        const cursorFilename = iGet(this.pointersCfg, Cursors[cursor])\n        const curImg = ResourceManager.getImage(cursorFilename)\n        this.curUrl = curImg.toDataURL()\n        // no resized possible; Chrome limits cursor size to 32x32 anyway\n        this.canvas.style.cursor = 'url(' + this.curUrl + '), auto'\n    }\n\n}\n","import { EventManager } from '../event/EventManager'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../params'\nimport { CursorLayer } from './layer/CursorLayer'\nimport { ScreenLayer } from './layer/ScreenLayer'\n\nexport class BaseScreen {\n\n    gameCanvasContainer: HTMLElement\n    eventMgr: EventManager\n    layers: ScreenLayer[] = []\n    width: number = SPRITE_RESOLUTION_WIDTH\n    height: number = SPRITE_RESOLUTION_HEIGHT\n    ratio: number = SPRITE_RESOLUTION_WIDTH / SPRITE_RESOLUTION_HEIGHT\n    cursorLayer: CursorLayer\n\n    constructor() {\n        this.gameCanvasContainer = document.getElementById('game-canvas-container')\n        this.gameCanvasContainer.focus()\n        this.eventMgr = new EventManager(this)\n        if (!this.gameCanvasContainer) throw 'Fatal error: game canvas container not found!'\n        window.addEventListener('resize', () => this.onWindowResize())\n        this.onWindowResize()\n        this.cursorLayer = this.addLayer(new CursorLayer(), 1000)\n    }\n\n    addLayer<T extends ScreenLayer>(layer: T, zIndex: number = 0): T {\n        layer.resize(this.width, this.height)\n        layer.setZIndex(zIndex)\n        this.layers.push(layer)\n        this.gameCanvasContainer.appendChild(layer.canvas)\n        return layer\n    }\n\n    redraw() {\n        this.layers.forEach((layer) => layer.redraw())\n    }\n\n    show() {\n        this.layers.forEach((layer) => layer.show())\n        this.redraw()\n    }\n\n    hide() {\n        this.layers.forEach((layer) => layer.hide())\n    }\n\n    onWindowResize() {\n        const maxWidth = this.gameCanvasContainer.offsetWidth, maxHeight = this.gameCanvasContainer.offsetHeight\n        const idealHeight = Math.round(maxWidth / this.ratio)\n        if (idealHeight > maxHeight) {\n            this.resize(Math.round(maxHeight * this.ratio), maxHeight)\n        } else {\n            this.resize(maxWidth, idealHeight)\n        }\n    }\n\n    resize(width: number, height: number) {\n        this.width = width\n        this.height = height\n        this.layers.forEach((layer) => layer.resize(width, height))\n        this.redraw()\n    }\n\n    isInRect(event: MouseEvent | WheelEvent) {\n        if (this.layers.length < 1) return false\n        const firstLayer = this.layers[0] // all layers have same state and size\n        if (!firstLayer.isActive() || !firstLayer.canvas) return false\n        const rect = firstLayer.canvas.getBoundingClientRect()\n        const clientX = event.clientX, clientY = event.clientY\n        return clientX >= rect.left && clientX < rect.right && clientY >= rect.top && clientY < rect.bottom\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { MaterialEntity } from '../../collect/MaterialEntity'\nimport { Surface } from '../../map/Surface'\nimport { SurfaceType } from '../../map/SurfaceType'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PublicJob } from '../Job'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class CompletePowerPathJob extends PublicJob {\n\n    surface: Surface\n    placedItems: MaterialEntity[]\n    workplaces: PathTarget[]\n\n    constructor(surface: Surface, placedItems: MaterialEntity[]) {\n        super(JobType.COMPLETE_POWER_PATH)\n        this.surface = surface\n        this.placedItems = placedItems\n        this.workplaces = [new PathTarget(surface.getRandomPosition())]\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.placedItems.forEach((placed) => placed.removeFromScene())\n        this.surface.surfaceType = SurfaceType.POWER_PATH\n        this.surface.updateTexture()\n        this.surface.neighbors.forEach((s) => s.updateTexture())\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.SHOVEL\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityConstruction\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.workplaces\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Clear\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { BarrierActivity } from '../activities/BarrierActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { Barrier } from '../collect/Barrier'\nimport { Crystal } from '../collect/Crystal'\nimport { MaterialEntity } from '../collect/MaterialEntity'\nimport { Ore } from '../collect/Ore'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CompletePowerPathJob } from '../job/surface/CompletePowerPathJob'\nimport { Surface } from '../map/Surface'\nimport { BuildingEntity } from './BuildingEntity'\n\nexport class BuildingSite {\n\n    primarySurface: Surface = null\n    secondarySurface: Surface = null\n    building: BuildingEntity\n    heading: number = 0\n    neededByType: Map<EntityType, number> = new Map()\n    assignedByType: Map<EntityType, MaterialEntity[]> = new Map()\n    onSiteByType: Map<EntityType, MaterialEntity[]> = new Map()\n    complete: boolean = false\n\n    constructor(primarySurface: Surface, secondarySurface: Surface = null, building: BuildingEntity = null) {\n        this.primarySurface = primarySurface\n        this.secondarySurface = secondarySurface\n        this.building = building\n    }\n\n    getRandomDropPosition(): Vector2 {\n        return this.primarySurface.getRandomPosition()\n    }\n\n    needs(EntityType: EntityType): boolean {\n        const needed = this.neededByType.getOrUpdate(EntityType, () => 0)\n        const assigned = this.assignedByType.getOrUpdate(EntityType, () => []).length\n        return needed > assigned\n    }\n\n    assign(item: MaterialEntity) {\n        this.assignedByType.getOrUpdate(item.entityType, () => []).push(item)\n    }\n\n    unAssign(item: MaterialEntity) {\n        this.assignedByType.getOrUpdate(item.entityType, () => []).remove(item)\n    }\n\n    addItem(item: MaterialEntity) {\n        const needed = this.neededByType.getOrUpdate(item.entityType, () => 0)\n        if (this.onSiteByType.getOrUpdate(item.entityType, () => []).length < needed) {\n            item.onAddToSite()\n            this.onSiteByType.getOrUpdate(item.entityType, () => []).push(item)\n            this.checkComplete()\n        } else {\n            item.resetTarget()\n        }\n    }\n\n    checkComplete() {\n        if (this.complete) return\n        this.complete = true\n        this.neededByType.forEach((needed, neededType) => {\n            this.complete = this.complete && this.onSiteByType.getOrUpdate(neededType, () => []).length >= needed\n        })\n        if (!this.complete) return\n        GameState.buildingSites.remove(this)\n        if (!this.building) {\n            const items = []\n            this.onSiteByType.forEach((itemsOnSite) => items.push(...itemsOnSite))\n            EventBus.publishEvent(new JobCreateEvent(new CompletePowerPathJob(this.primarySurface, items)))\n        } else {\n            this.onSiteByType.getOrUpdate(EntityType.BARRIER, () => []).forEach((item: Barrier) => {\n                item.changeActivity(BarrierActivity.Teleport, () => item.removeFromScene())\n            })\n            this.onSiteByType.getOrUpdate(EntityType.CRYSTAL, () => []).forEach((item: Crystal) => {\n                item.removeFromScene()\n            })\n            this.onSiteByType.getOrUpdate(EntityType.ORE, () => []).forEach((item: Ore) => {\n                item.removeFromScene()\n            })\n            const world = this.primarySurface.getCenterWorld2D()\n            this.building.placeDown(world, -this.heading + Math.PI / 2, false)\n        }\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n}\n","import { Raycaster, Vector2 } from 'three'\nimport { EventBus } from '../../event/EventBus'\nimport { KEY_EVENT, MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { CancelBuildMode, ChangeCursor, EntityDeselected } from '../../event/LocalEvents'\nimport { BuildingSite } from '../../game/model/building/BuildingSite'\nimport { EntityType } from '../../game/model/EntityType'\nimport { FulfillerEntity } from '../../game/model/FulfillerEntity'\nimport { GameState } from '../../game/model/GameState'\nimport { Job } from '../../game/model/job/Job'\nimport { MoveJob } from '../../game/model/job/MoveJob'\nimport { Surface } from '../../game/model/map/Surface'\nimport { SurfaceType } from '../../game/model/map/SurfaceType'\nimport { Raider } from '../../game/model/raider/Raider'\nimport { SelectionType } from '../../game/model/Selectable'\nimport { SceneManager } from '../../game/SceneManager'\nimport { WorldManager } from '../../game/WorldManager'\nimport { DEV_MODE } from '../../params'\nimport { Cursors } from '../Cursors'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class GameLayer extends ScreenLayer {\n\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    private rightDown: { x: number, y: number } = {x: 0, y: 0}\n    private lastCursor: Cursors = Cursors.Pointer_Standard\n\n    constructor() {\n        super(false, false)\n    }\n\n    reset() {\n        super.reset()\n        this.rightDown = {x: 0, y: 0}\n        this.lastCursor = Cursors.Pointer_Standard\n    }\n\n    hide() {\n        super.hide()\n        EventBus.publishEvent(new ChangeCursor(Cursors.Pointer_Standard))\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        const buildMarker = this.sceneMgr.buildMarker\n        if (event.eventEnum === POINTER_EVENT.MOVE) {\n            const intersectionPoint = this.getTerrainPositionFromEvent(event)\n            if (intersectionPoint) this.sceneMgr.setTorchPosition(intersectionPoint)\n            buildMarker.update(this.sceneMgr.terrain, intersectionPoint)\n            this.updateCursor(event)\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                if (GameState.buildModeSelection && buildMarker.lastCheck) {\n                    const building = GameState.buildModeSelection(this.worldMgr, this.sceneMgr)\n                    buildMarker.visibleSurfaces.forEach((s) => {\n                        s.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                        s.updateTexture()\n                        s.neighbors.forEach((n) => n.updateTexture())\n                    })\n                    const barrierLocations = buildMarker.getBarrierLocations()\n                    const stats = building.stats\n                    const neededCrystals = stats?.CostCrystal || 0\n                    const neededOre = stats?.CostOre || 0\n                    const site = new BuildingSite(buildMarker.primarySurface, buildMarker.secondarySurface, building)\n                    site.heading = buildMarker.heading\n                    site.neededByType.set(EntityType.BARRIER, barrierLocations.length)\n                    site.neededByType.set(EntityType.CRYSTAL, neededCrystals)\n                    site.neededByType.set(EntityType.ORE, neededOre)\n                    GameState.buildingSites.push(site)\n                    const closestToolstation = GameState.getClosestBuildingByType(buildMarker.primarySurface.getCenterWorld(), EntityType.TOOLSTATION)\n                    if (closestToolstation) {\n                        closestToolstation.spawnBarriers(barrierLocations, site)\n                        closestToolstation.spawnMaterials(EntityType.CRYSTAL, neededCrystals)\n                        closestToolstation.spawnMaterials(EntityType.ORE, neededOre)\n                    }\n                    EventBus.publishEvent(new EntityDeselected())\n                    EventBus.publishEvent(new CancelBuildMode())\n                }\n            } else if (event.button === MOUSE_BUTTON.SECONDARY) {\n                const downUpDistance = Math.abs(event.clientX - this.rightDown.x) + Math.abs(event.clientY - this.rightDown.y)\n                if (downUpDistance < 3 && (GameState.selectionType === SelectionType.RAIDER || GameState.selectionType === SelectionType.GROUP)) {\n                    // TODO check for collectable entity first\n                    const intersectionPoint = this.getTerrainPositionFromEvent(event)\n                    if (intersectionPoint) {\n                        const surface = this.sceneMgr.terrain.getSurfaceFromWorldXZ(intersectionPoint.x, intersectionPoint.y)\n                        if (surface) {\n                            if (surface.isDrillable()) {\n                                this.assignSurfaceJob(surface.createDrillJob(), surface, intersectionPoint)\n                            } else if (surface.hasRubble()) {\n                                this.assignSurfaceJob(surface.createClearRubbleJob(), surface, intersectionPoint)\n                            } else if (surface.isWalkable()) {\n                                GameState.selectedEntities.forEach((raider: Raider) => raider.setJob(new MoveJob(intersectionPoint)))\n                                if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n                            }\n                        }\n                    }\n                } else {\n                    GameState.buildModeSelection = null\n                    buildMarker.hideAllMarker()\n                }\n            }\n        } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.SECONDARY) {\n                this.rightDown.x = event.clientX\n                this.rightDown.y = event.clientY\n            }\n        }\n        this.canvas.dispatchEvent(new PointerEvent(event.type, event))\n        return true\n    }\n\n    updateCursor(event) {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.sceneMgr.camera)\n        const cursor = this.determineCursor(raycaster)\n        if (cursor !== this.lastCursor) {\n            this.lastCursor = cursor\n            EventBus.publishEvent(new ChangeCursor(cursor))\n        }\n    }\n\n    determineCursor(raycaster: Raycaster): Cursors {\n        let intersects = raycaster.intersectObjects(GameState.raiders.map((r) => r.pickSphere))\n        if (intersects.length > 0) {\n            return Cursors.Pointer_Selected\n        } else {\n            let intersects = raycaster.intersectObjects(GameState.buildings.map((b) => b.pickSphere))\n            if (intersects.length > 0) {\n                return Cursors.Pointer_Selected\n            } else {\n                intersects = raycaster.intersectObjects(this.sceneMgr.terrain.floorGroup.children)\n                if (intersects.length > 0) {\n                    const userData = intersects[0].object.userData\n                    if (userData && userData.hasOwnProperty('surface')) {\n                        const surface = userData['surface'] as Surface\n                        if (surface) {\n                            return surface.surfaceType.cursor\n                        }\n                    }\n                }\n            }\n        }\n        return Cursors.Pointer_Standard\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): boolean {\n        if (DEV_MODE && event.eventEnum === KEY_EVENT.UP) {\n            if (GameState.selectionType === SelectionType.SURFACE) {\n                GameState.selectedEntities.forEach((s: Surface) => {\n                    if (event.key === 'c') {\n                        if (!s.surfaceType.floor) s.collapse()\n                    } else if (event.key === 'f') {\n                        const t = s.terrain.findFallInTarget(s.x, s.y)\n                        if (!s.surfaceType.floor) s.createFallin(t[0], t[1])\n                    }\n                })\n                EventBus.publishEvent(new EntityDeselected())\n                return true\n            }\n        }\n        return false\n    }\n\n    assignSurfaceJob(job: Job, surface: Surface, intersectionPoint: Vector2) {\n        if (!job) return\n        GameState.selectedEntities.forEach((e: FulfillerEntity) => {\n            if (e.hasTool(job.getRequiredTool()) && e.hasTraining(job.getRequiredTraining())) {\n                e.setJob(job)\n            } else if (surface.isWalkable()) {\n                e.setJob(new MoveJob(intersectionPoint))\n            }\n        })\n        if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n    }\n\n    getTerrainPositionFromEvent(event): Vector2 {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        return this.sceneMgr.getTerrainIntersectionPoint(rx, ry)\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        this.canvas.dispatchEvent(new WheelEvent(event.type, event))\n        return true\n    }\n\n}\n","export class BaseConfig {\n\n    static setFromCfg(config: BaseConfig, cfgObj: any) {\n        Object.keys(cfgObj).forEach((cfgKey) => {\n            const lCfgKeyName = (cfgKey.startsWith('!') ? cfgKey.substring(1) : cfgKey)\n                .toLowerCase()\n                .replace(/_/g, '') // Activity_Stand\n                .replace(/-/g, '') // Geo-dome\n            const found = Object.keys(config).some((objKey) => {\n                return config.assignValue(objKey, lCfgKeyName, cfgObj[cfgKey])\n            })\n            if (!found) {\n                console.warn('cfg key: ' + cfgKey + ' does not exist in cfg: ' + config?.constructor?.name)\n            }\n        })\n        return config\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            const currentValue = this[objKey]\n            const currentIsArray = Array.isArray(currentValue)\n            let parsedValue = this.parseValue(lCfgKeyName, cfgValue)\n            const parsedIsArray = Array.isArray(parsedValue)\n            if (currentValue && currentIsArray !== parsedIsArray) {\n                if (currentIsArray) {\n                    parsedValue = [parsedValue]\n                    // } else {\n                    //     console.warn('Array overwrite conflict for key ' + objKey + ' with existing value (' + currentValue + ') and new value (' + parsedValue + ')')\n                }\n            }\n            this[objKey] = parsedValue\n            return true\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return cfgValue\n    }\n\n}\n","export class BaseButtonCfg {\n\n    buttonType?: string = null\n    normalFile?: string = null\n    highlightFile?: string = null\n    pressedFile?: string = null\n    disabledFile?: string = null\n    relX?: number = 0\n    relY?: number = 0\n    width?: number = 0\n    height?: number = 0\n    tooltip?: string = null\n}\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class ButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 9) {\n            [this.buttonType, this.normalFile, this.highlightFile, this.pressedFile, this.relX, this.relY, this.width, this.height, this.tooltip] = cfgValue\n        } else {\n            throw 'Invalid number of arguments (' + cfgValue.length + ') given for button configuration expected 9 or 5'\n        }\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class ButtonInfoDockCfg extends BaseConfig {\n\n    panelButtonInfoDockGoto: ButtonCfg = null\n    panelButtonInfoDockClose: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","export class BaseElement {\n\n    parent: BaseElement = null\n    x: number = 0\n    y: number = 0\n    relX: number = 0\n    relY: number = 0\n    width: number = 0\n    height: number = 0\n    children: BaseElement[] = []\n    hidden: boolean = false\n    disabled: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n\n    constructor(parent: BaseElement = null) {\n        this.parent = parent\n    }\n\n    reset() {\n        this.hidden = false\n        this.disabled = false\n        this.hover = false\n        this.pressed = false\n        this.children.forEach((c) => c.reset())\n    }\n\n    addChild<T extends BaseElement>(child: T): T {\n        child.parent = this\n        this.children.push(child)\n        child.updatePosition()\n        return child\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n    }\n\n    drawTooltip(context: CanvasRenderingContext2D) {\n    }\n\n    onClick() {\n    }\n\n    isInactive(): boolean {\n        for (let parent = this.parent; !!parent; parent = parent.parent) if (parent.isInactive()) return true\n        return this.hidden || this.disabled\n    }\n\n    hide() {\n        this.hidden = true\n        this.children.forEach((child) => child.hide())\n    }\n\n    show() {\n        this.hidden = false\n        this.children.forEach((child) => child.show())\n    }\n\n    updatePosition() {\n        this.x = this.parent ? this.parent.x + this.relX : this.relX\n        this.y = this.parent ? this.parent.y + this.relY : this.relY\n        this.children.forEach((child) => child.updatePosition())\n    }\n\n    isInRect(cx, cy) {\n        return cx >= this.x && cy >= this.y && cx < this.x + this.width && cy < this.y + this.height\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = this.pressed && this.hover\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => stateChanged = child.checkHover(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.pressed !== inRect\n        this.pressed = inRect\n        this.children.forEach((child) => stateChanged = child.checkClick(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        if (inRect && this.pressed) this.onClick()\n        let stateChanged = false\n        this.children.forEach((child) => stateChanged = child.checkRelease(cx, cy) || stateChanged)\n        stateChanged = this.pressed || stateChanged\n        this.pressed = false\n        return stateChanged\n    }\n\n    release(): boolean {\n        let stateChanged = this.pressed || this.hover\n        this.pressed = false\n        this.hover = false\n        this.children.forEach((child) => stateChanged = child.release() || stateChanged)\n        return stateChanged\n    }\n\n    notifyRedraw() {\n        if (this.parent) this.parent.notifyRedraw()\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\n\nexport class Button extends BaseElement {\n\n    buttonType: string = null\n    imgNormal: HTMLCanvasElement = null\n    imgHover: HTMLCanvasElement = null\n    imgPressed: HTMLCanvasElement = null\n    imgDisabled: HTMLCanvasElement = null\n    tooltip: string = null\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent)\n        this.buttonType = btnCfg.buttonType\n        this.imgNormal = ResourceManager.getImageOrNull(btnCfg.normalFile)\n        this.imgHover = ResourceManager.getImageOrNull(btnCfg.highlightFile)\n        this.imgPressed = ResourceManager.getImageOrNull(btnCfg.pressedFile)\n        this.imgDisabled = ResourceManager.getImageOrNull(btnCfg.disabledFile)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width || this.imgNormal?.width || this.imgPressed?.width\n        this.height = btnCfg.height || this.imgNormal?.height || this.imgPressed?.height\n        this.tooltip = btnCfg.tooltip?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.updatePosition()\n    }\n\n    onClick() {\n        console.log('button pressed: ' + this.buttonType)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled || this.imgPressed || this.imgNormal\n        } else if (this.pressed) {\n            img = this.imgPressed || this.imgNormal\n        } else if (this.hover) {\n            img = this.imgHover || this.imgNormal\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { NATIVE_FRAMERATE, PANEL_ANIMATION_MULTIPLIER } from '../../params'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\n\nexport class Panel extends BaseElement {\n\n    img: HTMLCanvasElement = null\n    xOut: number = 0\n    yOut: number = 0\n    xIn: number = 0\n    yIn: number = 0\n    animationTimeout = null\n    movedIn: boolean = true // xIn, yIn is the collapsed position out of screen\n\n    constructor(panelCfg?: PanelCfg) {\n        super()\n        if (panelCfg) {\n            this.img = ResourceManager.getImage(panelCfg.filename)\n            this.xOut = panelCfg.xOut\n            this.yOut = panelCfg.yOut\n            this.xIn = panelCfg.xIn\n            this.yIn = panelCfg.yIn\n            this.relX = this.xIn\n            this.relY = this.yIn\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.relX = this.xIn\n        this.relY = this.yIn\n        this.movedIn = true\n        this.updatePosition()\n    }\n\n    isInactive(): boolean {\n        return this.animationTimeout || super.isInactive()\n    }\n\n    setMovedIn(movedIn: boolean, onDone: () => any = null) {\n        if (this.movedIn !== movedIn) {\n            this.toggleState(onDone)\n        } else if (onDone) {\n            onDone()\n        }\n    }\n\n    toggleState(onDone: () => any = null) {\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        if (this.movedIn) {\n            this.movedIn = false\n            this.updateAnimation(this.xOut, this.yOut, PANEL_ANIMATION_MULTIPLIER, onDone)\n        } else {\n            this.movedIn = true\n            this.updateAnimation(this.xIn, this.yIn, PANEL_ANIMATION_MULTIPLIER, onDone)\n        }\n    }\n\n    protected updateAnimation(targetX: number, targetY: number, speed: number, onDone: () => any) {\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= speed && Math.abs(diffY) <= speed) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * speed)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * speed)\n            const panel = this\n            this.animationTimeout = setTimeout(() => panel.updateAnimation(targetX, targetY, speed, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.img) context.drawImage(this.img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { PanelCfg } from '../../cfg/PanelCfg'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\n\nexport class RadarPanel extends Panel {\n\n    fill: Panel\n    overlay: Panel\n    btnToggle: Button\n    btnMap: Button\n    btnTagged: Button\n\n    constructor(panelCfg: PanelCfg, panelFillCfg: PanelCfg, panelOverlayCfg: PanelCfg, buttonsCfg: ButtonRadarCfg) {\n        super(panelCfg)\n        this.fill = this.addChild(new Panel(panelFillCfg))\n        // fill cords given in abs, turn to rel (otherwise animation wont work)\n        this.fill.relX = this.relX - this.fill.relX\n        this.fill.relY = this.relY - this.fill.relY\n        this.overlay = this.addChild(new Panel(panelOverlayCfg))\n        // this.overlay.hide();\n        this.btnToggle = this.addChild(new Button(this, buttonsCfg.panelButtonRadarToggle))\n        this.btnToggle.onClick = () => this.toggleState()\n        this.btnMap = this.addChild(new Button(this, buttonsCfg.panelButtonRadarMapView))\n        this.btnMap.onClick = () => {\n            // this.fill.hide();\n            // this.overlay.hide();\n        }\n        this.btnTagged = this.addChild(new Button(this, buttonsCfg.panelButtonRadarTaggedObjectView))\n        this.btnTagged.onClick = () => {\n            // this.fill.show();\n            // this.overlay.show(); // TODO only show overlay, when entity selected\n        }\n    }\n\n}\n\nexport class ButtonRadarCfg extends BaseConfig {\n\n    panelButtonRadarToggle: ButtonCfg = null\n    panelButtonRadarTaggedObjectView: ButtonCfg = null\n    panelButtonRadarZoomIn: ButtonCfg = null\n    panelButtonRadarZoomOut: ButtonCfg = null\n    panelButtonRadarMapView: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { BaseElement } from '../base/BaseElement'\n\nexport class SideBarLabel extends BaseElement {\n\n    tooltip: string\n    label: string\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg, label: string) {\n        super(parent)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width\n        this.height = btnCfg.height\n        this.tooltip = btnCfg.tooltip\n        this.label = label\n        this.updatePosition()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.textAlign = 'center'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.label, this.x + this.width / 2, this.y + this.height - 2)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { PanelCfg } from '../../cfg/PanelCfg'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\nimport { SideBarLabel } from './SideBarLabel'\n\nexport class PanelCrystalSideBar extends Panel {\n\n    labelOre: SideBarLabel\n    labelCrystal: SideBarLabel\n    imgNoCrystal: HTMLCanvasElement\n    imgSmallCrystal: HTMLCanvasElement\n    imgUsedCrystal: HTMLCanvasElement\n    imgOre: HTMLCanvasElement\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonCrystalSideBarCfg) {\n        super(panelCfg)\n        this.labelOre = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarOre, GameState.totalOre.toString()))\n        this.labelCrystal = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarCrystals, GameState.numCrystal.toString()))\n        this.imgNoCrystal = ResourceManager.getImage('Interface/RightPanel/NoSmallCrystal.bmp')\n        this.imgSmallCrystal = ResourceManager.getImage('Interface/RightPanel/SmallCrystal.bmp')\n        this.imgUsedCrystal = ResourceManager.getImage('Interface/RightPanel/UsedCrystal.bmp')\n        this.imgOre = ResourceManager.getImage('Interface/RightPanel/CrystalSideBar_Ore.bmp')\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, (event: MaterialAmountChanged) => {\n            if (event.entityType === EntityType.CRYSTAL || event.entityType === EntityType.ORE || event.entityType === EntityType.BRICK) {\n                this.notifyRedraw()\n            }\n        })\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        this.labelOre.label = GameState.totalOre.toString()\n        this.labelCrystal.label = GameState.numCrystal.toString()\n        super.onRedraw(context)\n        // draw crystals\n        let curX = this.x + this.img.width - 8\n        let curY = this.y + this.img.height - 34\n        for (let c = 0; (GameState.neededCrystals < 1 || c < Math.max(GameState.neededCrystals, GameState.numCrystal)) && curY >= Math.max(this.imgNoCrystal.height, this.imgSmallCrystal.height, this.imgUsedCrystal.height); c++) {\n            let imgCrystal = this.imgNoCrystal\n            if (GameState.usedCrystals > c) {\n                imgCrystal = this.imgUsedCrystal\n            } else if (GameState.numCrystal > c) {\n                imgCrystal = this.imgSmallCrystal\n            }\n            curY -= imgCrystal.height\n            context.drawImage(imgCrystal, curX - imgCrystal.width / 2, curY)\n        }\n        // draw ores\n        curX = this.x + this.img.width - 21\n        curY = this.y + this.img.height - 42\n        for (let i = 0; i < GameState.numOre && curY >= this.imgOre.height; ++i) {\n            curY -= this.imgOre.height\n            context.drawImage(this.imgOre, curX - this.imgOre.width / 2, curY)\n        }\n    }\n\n}\n\nexport class ButtonCrystalSideBarCfg extends BaseConfig {\n\n    panelButtonCrystalSideBarOre: ButtonCfg = null\n    panelButtonCrystalSideBarCrystals: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class ButtonPriorityListCfg extends BaseConfig {\n\n    panelButtonPriorityListDisable: ButtonCfg[] = []\n    panelButtonPriorityListUpOne: ButtonCfg[] = []\n    panelButtonPriorityListClose: ButtonCfg = null // not used in the game\n    panelButtonPriorityListReset: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName.match(/panelButtonPriorityListDisable\\d+/i)) {\n            this.panelButtonPriorityListDisable.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else if (lCfgKeyName.match(/panelButtonPriorityListUpOne\\d+/i)) {\n            this.panelButtonPriorityListUpOne.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else {\n            return super.assignValue(objKey, lCfgKeyName, cfgValue)\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class ButtonTopCfg extends BaseConfig {\n\n    panelButtonTopPanelCallToArms: ButtonCfg = null\n    panelButtonTopPanelOptions: ButtonCfg = null\n    panelButtonTopPanelPriorities: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ButtonCfg } from './ButtonCfg'\n\nexport class ButtonCameraControlCfg extends BaseConfig {\n\n    panelButtonCameraControlZoomIn: ButtonCfg = null\n    panelButtonCameraControlZoomOut: ButtonCfg = null\n    panelButtonCameraControlCycleBuildings: ButtonCfg = null\n    panelButtonCameraControlRotate: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ButtonCfg } from './ButtonCfg'\n\nexport class ButtonInformationCfg extends BaseConfig {\n\n    panelButtonInformationToggle: ButtonCfg = null\n    panelButtonInformationFunction: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { ButtonInfoDockCfg } from '../gui/infodock/ButtonInfoDockCfg'\nimport { ButtonRadarCfg } from '../gui/radar/RadarPanel'\nimport { ButtonCrystalSideBarCfg } from '../gui/sidebar/PanelCrystalSideBar'\nimport { ButtonPriorityListCfg } from '../gui/toppanel/ButtonPriorityListCfg'\nimport { ButtonTopCfg } from '../gui/toppanel/ButtonTopCfg'\nimport { BaseConfig } from './BaseConfig'\nimport { ButtonCameraControlCfg } from './ButtonCameraControlCfg'\nimport { ButtonInformationCfg } from './ButtonInformationCfg'\n\nexport class ButtonsCfg extends BaseConfig {\n\n    panelRadar: ButtonRadarCfg = null\n    panelCrystalSideBar: ButtonCrystalSideBarCfg = null\n    panelTopPanel: ButtonTopCfg = null\n    panelInformation: ButtonInformationCfg = null\n    panelPriorityList: ButtonPriorityListCfg = null\n    panelCameraControl: ButtonCameraControlCfg = null\n    panelInfoDock: ButtonInfoDockCfg = null\n    panelEncyclopedia: any = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        const btnCfgValue = {}\n        cfgValue.forEach(arr => btnCfgValue[arr[0]] = arr)\n        if (lCfgKeyName === 'panelRadar'.toLowerCase()) {\n            return new ButtonRadarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCrystalSideBar'.toLowerCase()) {\n            return new ButtonCrystalSideBarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelTopPanel'.toLowerCase()) {\n            return new ButtonTopCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInformation'.toLowerCase()) {\n            return new ButtonInformationCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelPriorityList'.toLowerCase()) {\n            return new ButtonPriorityListCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCameraControl'.toLowerCase()) {\n            return new ButtonCameraControlCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInfoDock'.toLowerCase()) {\n            return new ButtonInfoDockCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelEncyclopedia'.toLowerCase()) {\n            return null // not used in the game\n        } else {\n            return btnCfgValue\n        }\n    }\n\n}\n","export class PanelCfg {\n\n    filename: string\n    xOut: number\n    yOut: number\n    xIn: number\n    yIn: number\n\n    constructor(cfgValue: any) {\n        [this.filename, this.xOut, this.yOut, this.xIn, this.yIn] = cfgValue\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { PanelCfg } from './PanelCfg'\n\nexport class PanelsCfg extends BaseConfig {\n\n    panelRadar: PanelCfg = null\n    panelRadarFill: PanelCfg = null\n    panelRadarOverlay: PanelCfg = null\n    panelMessages: PanelCfg = null\n    panelMessagesSide: PanelCfg = null\n    panelCrystalSideBar: PanelCfg = null\n    panelTopPanel: PanelCfg = null\n    panelInformation: PanelCfg = null\n    panelPriorityList: PanelCfg = null\n    panelCameraControl: PanelCfg = null\n    panelInfoDock: PanelCfg = null\n    panelEncyclopedia: PanelCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new PanelCfg(cfgValue)\n    }\n}\n\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class InfoButtonCfg extends BaseButtonCfg {\n\n    constructor(buttonImageFilename: string) {\n        super()\n        this.normalFile = buttonImageFilename\n        this.highlightFile = buttonImageFilename\n        this.pressedFile = buttonImageFilename\n        this.disabledFile = buttonImageFilename\n        this.relX = 0\n        this.relY = 0\n    }\n\n}\n","import { InfoButtonCfg } from '../../cfg/InfoButtonCfg'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { WorldEvent } from '../../event/WorldEvents'\nimport { WorldLocationEvent } from '../../event/WorldLocationEvent'\nimport { NATIVE_FRAMERATE } from '../../params'\nimport { Button } from '../base/Button'\nimport { InfoDockPanel } from './InfoDockPanel'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\n\nexport class InfoDockButton extends Button {\n\n    messages: WorldEvent[] = [] // newest message first\n    text: string = null\n    animationTimeout = null\n    animationSpeedX = 0.5\n    animationSpeedY = 1\n\n    constructor(parent: InfoDockPanel, infoMessagesEntryConfig: InfoMessagesEntryConfig, eventKey: EventKey) {\n        super(parent, new InfoButtonCfg(infoMessagesEntryConfig.buttonImageFilename))\n        this.text = infoMessagesEntryConfig.message\n        this.hidden = true\n\n        this.onClick = () => {\n            if (this.messages.length < 1) return\n            parent.buttonClicked(this)\n        }\n\n        EventBus.registerEventListener(eventKey, (event: WorldLocationEvent) => {\n            this.hidden = false\n            while (this.messages.length >= 9) this.messages.pop()\n            this.messages.unshift(event)\n            parent.showButton(this)\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.hidden = true\n        this.messages = []\n    }\n\n    slideToTarget(targetX: number, targetY: number): Promise<void> {\n        return new Promise<void>((resolve) => this.updateAnimation(targetX, targetY, resolve))\n    }\n\n    private updateAnimation(targetX: number, targetY: number, onDone: () => any) { // TODO refactor: almost equal with code for Panel\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= this.animationSpeedX && Math.abs(diffY) <= this.animationSpeedY) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * this.animationSpeedX)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * this.animationSpeedY)\n            const that = this\n            this.animationTimeout = setTimeout(() => that.updateAnimation(targetX, targetY, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.hidden) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.messages.length.toString(), this.x + 2, this.y + this.height / 2 + 2)\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { LandslideEvent } from '../../event/WorldLocationEvent'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { ButtonInfoDockCfg } from './ButtonInfoDockCfg'\nimport { InfoDockButton } from './InfoDockButton'\nimport { InfoMessagesConfig } from './InfoMessagesConfig'\nimport { InformationPanel } from './InformationPanel'\n\nexport class InfoDockPanel extends Panel {\n\n    stackButtons: InfoDockButton[] = []\n    informationPanel: InformationPanel = null\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonInfoDockCfg, infoMessagesConfig: InfoMessagesConfig, informationPanel: InformationPanel) {\n        super(panelCfg)\n        this.informationPanel = informationPanel\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockGoto)).onClick = () => this.gotoLatestMessage()\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockClose)).onClick = () => this.dropLatestMessage()\n\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericDeath, EventKey.LOCATION_DEATH))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericMonster, EventKey.LOCATION_MONSTER))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoCrystalFound, EventKey.LOCATION_CRYSTAL_FOUND))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoUnderAttack, EventKey.LOCATION_UNDER_ATTACK))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoLandslide, EventKey.LOCATION_LANDSLIDE))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoPowerDrain, EventKey.LOCATION_POWER_DRAIN))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoSlugEmerge, EventKey.LOCATION_SLUG_EMERGE))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoFoundMinifigure, EventKey.LOCATION_RAIDER_DISCOVERED))\n    }\n\n    reset() {\n        super.reset()\n        this.stackButtons = []\n    }\n\n    private gotoLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const btn = this.stackButtons[0]\n        if (btn.messages.length < 1) return\n        const msg = btn.messages[0] as LandslideEvent\n        console.log('TODO force move camera to: ' + msg.locationProvider.getPosition().toArray()) // TODO force move camera\n    }\n\n    private dropLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const button = this.stackButtons[0]\n        if (button.messages.length < 1) return\n        button.messages.shift()\n        if (button.messages.length < 1) {\n            button.hidden = true\n            this.informationPanel.setMovedIn(true)\n            this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n            this.slideStackIntoPosition().then()\n        }\n        button.notifyRedraw()\n    }\n\n    showButton(button: InfoDockButton) {\n        if (this.stackButtons.includes(button)) {\n            button.notifyRedraw()\n        } else {\n            this.slideInButton(button)\n        }\n    }\n\n    private slideInButton(button: InfoDockButton) {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        const targetY = -this.stackButtons.map(b => b.height).reduce((prev, cur) => prev + cur, 0)\n        this.stackButtons.push(button)\n        button.relX = -button.width\n        button.relY = targetY - button.height\n        button.updatePosition()\n        button.slideToTarget(0, targetY).then(() => this.stackButtons.forEach(btn => btn.disabled = false))\n    }\n\n    buttonClicked(button: InfoDockButton) {\n        if (button !== this.stackButtons[0]) {\n            this.pushFirst(button)\n        } else {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.toggleState()\n        }\n    }\n\n    private pushFirst(button: InfoDockButton) {\n        this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n        this.stackButtons.unshift(button)\n        this.slideStackIntoPosition().then(() => {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.setMovedIn(false)\n        })\n    }\n\n    private slideStackIntoPosition() {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        let relY = 0\n        const promises = this.stackButtons.map(btn => {\n            const p = btn.slideToTarget(0, relY)\n            relY -= btn.height\n            return p\n        })\n        return new Promise<void>((resolve) => {\n            Promise.all(promises).then(() => {\n                this.stackButtons.forEach(btn => btn.disabled = false)\n                resolve()\n            })\n        })\n    }\n\n}\n\n","export class InfoMessagesEntryConfig {\n\n    message: string = null\n    buttonImageFilename: string = null\n    sfx: string = null\n    timing: string = null\n    flag: string = null\n\n    constructor(cfgValue: any) {\n        [this.message, this.buttonImageFilename, this.sfx, this.timing, this.flag] = cfgValue\n        this.message = this.message.replace(/_/g, ' ')\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\n\nexport class InfoMessagesConfig extends BaseConfig {\n\n    infoGenericDeath: InfoMessagesEntryConfig = null\n    infoGenericMonster: InfoMessagesEntryConfig = null\n    infoCrystalFound: InfoMessagesEntryConfig = null\n    infoUnderAttack: InfoMessagesEntryConfig = null\n    infoLandslide: InfoMessagesEntryConfig = null\n    infoPowerDrain: InfoMessagesEntryConfig = null\n    infoSlugEmerge: InfoMessagesEntryConfig = null\n    infoFoundMinifigure: InfoMessagesEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new InfoMessagesEntryConfig(cfgValue)\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { BitmapFont } from '../../core/BitmapFont'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\n\nexport class InformationPanel extends Panel {\n\n    font: BitmapFont = null\n    textImage = null\n\n    constructor(panelCfg: PanelCfg) {\n        super(panelCfg)\n        this.font = ResourceManager.getDefaultFont()\n    }\n\n    setText(text?: string) {\n        this.textImage = text ? this.font.createTextImage(text, this.img.width - 80) : null\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.textImage) context.drawImage(this.textImage, this.x + (this.img.width - this.textImage.width) / 2, this.y + 12)\n    }\n\n}\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class IconPanelBackButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super();\n        [this.width, this.height, this.highlightFile, this.pressedFile, this.tooltip] = cfgValue // Interface back button\n        this.relX = 4\n        this.relY = 14\n    }\n\n}\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class MenuItemCfg extends BaseButtonCfg {\n\n    tooltipSfx: string = null\n    tooltipDisabled: string = null\n    tooltipDisabledSfx: string = null\n    hotkey: string = null\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 4) {\n            [this.normalFile, this.disabledFile, this.pressedFile, this.hotkey] = cfgValue\n        } else if (cfgValue.length === 6 || cfgValue.length === 7) { // XXX 7th element is boolean, but usage unknown\n            let tooltip, tooltipDisabled\n            [this.normalFile, this.disabledFile, this.pressedFile, tooltip, tooltipDisabled, this.hotkey] = cfgValue\n            if (tooltip) {\n                if (Array.isArray(tooltip)) {\n                    [this.tooltip, this.tooltipSfx] = tooltip\n                } else {\n                    this.tooltip = tooltip\n                }\n            }\n            if (tooltipDisabled) {\n                if (Array.isArray(tooltipDisabled)) {\n                    [this.tooltipDisabled, this.tooltipDisabledSfx] = tooltipDisabled\n                } else {\n                    this.tooltipDisabled = tooltipDisabled\n                }\n            }\n        } else {\n            console.error('Unexpected menu item cfg value length: ' + cfgValue.length)\n        }\n        this.tooltip?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.tooltipDisabled?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.width = 40\n        this.height = 40\n    }\n\n}\n","import { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\n\nexport class IconPanelButton extends Button {\n\n    tooltipSfx: string = null\n    tooltipDisabled: string = null\n    tooltipDisabledSfx: string = null\n    hotkey: string = null\n    isDisabled: () => boolean = () => this.disabled\n\n    constructor(parent: BaseElement, menuItemCfg: MenuItemCfg, itemKey: string, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemCfg)\n        this.buttonType = itemKey\n        this.relX = parentWidth - 59\n        this.relY = 9 + this.height * menuIndex\n        this.tooltipSfx = menuItemCfg.tooltipSfx\n        this.tooltipDisabled = menuItemCfg.tooltipDisabled\n        this.tooltipDisabledSfx = menuItemCfg.tooltipDisabledSfx\n        this.hotkey = menuItemCfg.hotkey\n        this.disabled = true\n    }\n\n    reset() {\n        super.reset()\n        this.disabled = true\n        this.updateState(false)\n    }\n\n    onClick() {\n        console.log('menu item pressed: ' + this.buttonType)\n    }\n\n    updateState(autoRedraw: boolean = true) {\n        const targetState = !!this.isDisabled()\n        const stateChanged = this.disabled !== targetState\n        this.disabled = targetState\n        if (stateChanged && autoRedraw) this.notifyRedraw()\n        return stateChanged\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n        super.drawHover(context)\n        if (!this.disabled && this.hover) {\n            context.strokeStyle = '#0f0'\n            context.lineWidth = 2\n            context.strokeRect(this.x - context.lineWidth / 2, this.y - context.lineWidth / 2, this.width + context.lineWidth - 1, this.height + context.lineWidth - 1)\n        }\n    }\n\n}\n","import { IconPanelBackButtonCfg } from '../../cfg/IconPanelBackButtonCfg'\nimport { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class IconSubPanel extends Panel {\n\n    backBtn: Button = null\n    iconPanelButtons: IconPanelButton[] = []\n\n    constructor(numOfItems, onBackPanel: Panel = null) {\n        super()\n        if (onBackPanel) {\n            const backBtnCfg = new IconPanelBackButtonCfg(ResourceManager.cfg('InterfaceBackButton'))\n            this.backBtn = this.addChild(new Button(this, backBtnCfg))\n            this.backBtn.onClick = () => this.toggleState(() => onBackPanel.toggleState())\n        }\n        const frameImgCfg = ResourceManager.cfg('InterfaceSurroundImages', numOfItems.toString())\n        // noinspection JSUnusedLocalSymbols\n        const [imgName, val1, val2, val3, val4, imgNameWoBackName, woBack1, woBack2] = frameImgCfg\n        this.img = onBackPanel ? ResourceManager.getImage(imgName) : ResourceManager.getImage(imgNameWoBackName)\n        this.xOut = -this.img.width\n    }\n\n    addMenuItem(menuItemGroup: string, itemKey: string) {\n        const menuItemCfg = new MenuItemCfg(ResourceManager.cfg(menuItemGroup, itemKey))\n        const menuItem = this.addChild(new IconPanelButton(this, menuItemCfg, itemKey, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(menuItem)\n        return menuItem\n    }\n\n    toggleState(onDone: () => any = null) {\n        super.toggleState(onDone)\n        if (!this.movedIn) this.iconPanelButtons.forEach((button) => button.updateState())\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { CancelBuildMode } from '../../event/LocalEvents'\nimport { BuildingEntity } from '../../game/model/building/BuildingEntity'\nimport { Barracks } from '../../game/model/building/entities/Barracks'\nimport { Docks } from '../../game/model/building/entities/Docks'\nimport { Geodome } from '../../game/model/building/entities/Geodome'\nimport { GunStation } from '../../game/model/building/entities/GunStation'\nimport { OreRefinery } from '../../game/model/building/entities/OreRefinery'\nimport { PowerStation } from '../../game/model/building/entities/PowerStation'\nimport { TeleportBig } from '../../game/model/building/entities/TeleportBig'\nimport { TeleportPad } from '../../game/model/building/entities/TeleportPad'\nimport { Toolstation } from '../../game/model/building/entities/Toolstation'\nimport { Upgrade } from '../../game/model/building/entities/Upgrade'\nimport { GameState } from '../../game/model/GameState'\nimport { SceneManager } from '../../game/SceneManager'\nimport { WorldManager } from '../../game/WorldManager'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class BuildingPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        this.backBtn.onClick = () => {\n            EventBus.publishEvent(new CancelBuildMode())\n            this.toggleState(() => onBackPanel.toggleState())\n        }\n        this.addBuildMenuItem('InterfaceBuildImages', 'Toolstation', (worldMgr: WorldManager, sceneMgr: SceneManager) => new Toolstation(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'TeleportPad', (worldMgr: WorldManager, sceneMgr: SceneManager) => new TeleportPad(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'Docks', (worldMgr: WorldManager, sceneMgr: SceneManager) => new Docks(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'Powerstation', (worldMgr: WorldManager, sceneMgr: SceneManager) => new PowerStation(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'Barracks', (worldMgr: WorldManager, sceneMgr: SceneManager) => new Barracks(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'Upgrade', (worldMgr: WorldManager, sceneMgr: SceneManager) => new Upgrade(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'Geo-dome', (worldMgr: WorldManager, sceneMgr: SceneManager) => new Geodome(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'OreRefinery', (worldMgr: WorldManager, sceneMgr: SceneManager) => new OreRefinery(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'Gunstation', (worldMgr: WorldManager, sceneMgr: SceneManager) => new GunStation(worldMgr, sceneMgr))\n        this.addBuildMenuItem('InterfaceBuildImages', 'TeleportBIG', (worldMgr: WorldManager, sceneMgr: SceneManager) => new TeleportBig(worldMgr, sceneMgr))\n    }\n\n    addBuildMenuItem(menuItemGroup: string, itemKey: string, factory: (worldMgr: WorldManager, sceneMgr: SceneManager) => BuildingEntity) {\n        const item = this.addMenuItem(menuItemGroup, itemKey)\n        item.isDisabled = () => false // TODO check Dependencies from config\n        item.onClick = () => GameState.buildModeSelection = factory\n        return item\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { GetToolJob } from '../../game/model/job/GetToolJob'\nimport { PathTarget } from '../../game/model/PathTarget'\nimport { RaiderTool } from '../../game/model/raider/RaiderTool'\nimport { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class GetToolPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(8, onBackPanel)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetDrill', RaiderTool.DRILL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpade', RaiderTool.SHOVEL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetHammer', RaiderTool.HAMMER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpanner', RaiderTool.SPANNER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetFreezerGun', RaiderTool.FREEZERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetLaser', RaiderTool.LASER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetPusherGun', RaiderTool.PUSHERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetBirdScarer', RaiderTool.BIRDSCARER)\n    }\n\n    addGetToolItem(menuItemGroup: string, itemKey: string, tool: RaiderTool): IconPanelButton {\n        const menuItem = super.addMenuItem(menuItemGroup, itemKey)\n        menuItem.isDisabled = () => !GameState.hasOneBuildingOf(EntityType.TOOLSTATION) ||\n            GameState.selectedRaiders.every((r) => r.hasTool(tool))\n        menuItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => {\n                if (!r.hasTool(tool)) {\n                    const pathToToolstation = GameState.getBuildingsByType(EntityType.TOOLSTATION)\n                        .map((b) => r.findPathToTarget(new PathTarget(b.getPosition2D())))\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToToolstation) {\n                        r.setJob(new GetToolJob(pathToToolstation.targetPosition, tool)) // TODO use precalculated path to toolstation\n                    }\n                }\n            })\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        return menuItem\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { GameState } from '../../game/model/GameState'\nimport { BaseElement } from '../base/BaseElement'\n\nexport class IconPanelButtonLabel extends BaseElement {\n\n    constructor(parent: BaseElement) {\n        super(parent)\n        this.relX = 4\n        this.relY = 11\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => this.notifyRedraw())\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        const requestedRaiders = GameState.requestedRaiders\n        if (!requestedRaiders) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = this.disabled || (this.parent && this.parent.disabled) ? '#444' : '#fff'\n        context.fillText(requestedRaiders.toString(), this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class LargeVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(5, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'BullDozer')\n        this.addMenuItem('InterfaceBuildImages', 'WalkerDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeMLP')\n        this.addMenuItem('InterfaceBuildImages', 'LargeDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeCat')\n    }\n\n}\n","import { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { BaseElement } from '../base/BaseElement'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class IconPanelToggleButton extends IconPanelButton {\n\n    toggleState: boolean = false\n    imgOnNormal: HTMLCanvasElement\n    imgOnHover: HTMLCanvasElement\n    imgOnPressed: HTMLCanvasElement\n    imgOnDisabled: HTMLCanvasElement\n\n    constructor(parent: BaseElement, menuItemOffCfg: MenuItemCfg, menuItemOnCfg: MenuItemCfg, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemOffCfg, null, parentWidth, menuIndex)\n        this.imgOnNormal = ResourceManager.getImageOrNull(menuItemOnCfg.normalFile)\n        this.imgOnHover = ResourceManager.getImageOrNull(menuItemOnCfg.highlightFile)\n        this.imgOnPressed = ResourceManager.getImageOrNull(menuItemOnCfg.pressedFile)\n        this.imgOnDisabled = ResourceManager.getImageOrNull(menuItemOnCfg.disabledFile)\n    }\n\n    onClick() {\n        this.toggleState = !this.toggleState\n        this.onToggleStateChange()\n    }\n\n    onToggleStateChange() {\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.toggleState ? this.imgOnNormal : this.imgNormal\n        if (this.disabled) {\n            if (this.toggleState) {\n                img = this.imgOnDisabled || this.imgOnPressed || this.imgOnNormal\n            } else {\n                img = this.imgDisabled || this.imgPressed || this.imgNormal\n            }\n        } else if (this.pressed) {\n            if (this.toggleState) {\n                img = this.imgOnPressed || this.imgOnNormal\n            } else {\n                img = this.imgPressed || this.imgNormal\n            }\n        } else if (this.hover) {\n            if (this.toggleState) {\n                img = this.imgOnHover || this.imgOnNormal\n            } else {\n                img = this.imgHover || this.imgNormal\n            }\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class SelectBasePanel extends IconSubPanel {\n\n    constructor(numOfItems, onBackPanel: Panel) {\n        super(numOfItems, onBackPanel)\n        this.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected())\n    }\n\n}\n","import { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { GameState } from '../../game/model/GameState'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\nimport { IconPanelToggleButton } from './IconPanelToggleButton'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectBuildingPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Repair')\n\n        const menuItemOffCfg = new MenuItemCfg(ResourceManager.cfg('InterfaceImages', 'Interface_MenuItem_PowerOff'))\n        const menuItemOnCfg = new MenuItemCfg(ResourceManager.cfg('InterfaceImages', 'Interface_MenuItem_PowerOn'))\n        const powerSwitchItem = this.addChild(new IconPanelToggleButton(this, menuItemOffCfg, menuItemOnCfg, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(powerSwitchItem)\n        powerSwitchItem.isDisabled = () => GameState.usedCrystals >= GameState.numCrystal || GameState.selectedBuilding?.stats?.SelfPowered || GameState.selectedBuilding?.stats?.PowerBuilding\n        powerSwitchItem.onToggleStateChange = () => {\n            if (powerSwitchItem.toggleState) {\n                GameState.selectedBuilding?.turnOffPower()\n            } else {\n                GameState.selectedBuilding?.turnOnPower()\n            }\n        }\n        const upgradeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeBuilding')\n        upgradeItem.isDisabled = () => !GameState.selectedBuilding?.canUpgrade()\n        upgradeItem.onClick = () => GameState.selectedBuilding?.upgrade()\n        const deleteBuildingItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteBuilding')\n        deleteBuildingItem.isDisabled = () => false\n        deleteBuildingItem.onClick = () => GameState.selectedBuilding?.beamUp()\n        EventBus.registerEventListener(EventKey.SELECTED_BUILDING, () => {\n            powerSwitchItem.updateState()\n            upgradeItem.updateState()\n        })\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, () => {\n            powerSwitchItem.updateState()\n            upgradeItem.updateState()\n        })\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { BuildingSite } from '../../game/model/building/BuildingSite'\nimport { EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { Surface } from '../../game/model/map/Surface'\nimport { SurfaceType } from '../../game/model/map/SurfaceType'\nimport { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectFloorPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(3, onBackPanel)\n        const pathItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_LayPath')\n        pathItem.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.surfaceType = SurfaceType.POWER_PATH_SITE\n            selectedSurface.updateTexture()\n            GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), EntityType.TOOLSTATION)?.spawnMaterials(EntityType.ORE, 2)\n            const site = new BuildingSite(selectedSurface)\n            site.neededByType.set(EntityType.ORE, 2)\n            GameState.buildingSites.push(site)\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        pathItem.isDisabled = () => GameState.selectedSurface?.surfaceType !== SurfaceType.GROUND\n        const removeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_RemovePath')\n        removeItem.onClick = () => {\n            GameState.selectedSurface?.makeRubble(2)\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        removeItem.isDisabled = () => GameState.selectedSurface?.surfaceType !== SurfaceType.POWER_PATH\n        const placeFenceItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        placeFenceItem.isDisabled = () => {\n            return !GameState.hasOneBuildingOf(EntityType.POWER_STATION) || !GameState.selectedSurface?.canPlaceFence()\n        }\n        placeFenceItem.onClick = () => {\n            const selectedSurface = GameState.selectedSurface\n            if (selectedSurface) {\n                GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), EntityType.TOOLSTATION)?.spawnFence(selectedSurface)\n            }\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => {\n            pathItem.updateState()\n            removeItem.updateState()\n            placeFenceItem.updateState()\n        })\n    }\n\n}\n","import { RaiderActivity } from '../activities/RaiderActivity'\nimport { PathTarget } from '../PathTarget'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class EatJob extends Job {\n\n    constructor() {\n        super(JobType.EAT)\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.fulfiller.map((f) => new PathTarget(f.getPosition2D()))\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        // TODO implement endurance, fill eat level here\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Eat\n    }\n\n}\n","import { RaiderActivity } from '../activities/RaiderActivity'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { Surface } from '../map/Surface'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\nimport { TrainingPathTarget } from './TrainingPathTarget'\n\nexport class UpgradeJob extends Job {\n\n    workplaces: TrainingPathTarget[]\n\n    constructor(surface: Surface) {\n        super(JobType.TRAIN)\n        this.workplaces = [new TrainingPathTarget(surface)]\n    }\n\n    getWorkplaces(): TrainingPathTarget[] {\n        return this.workplaces\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.fulfiller.forEach((f) => {\n            if (f.level < f.stats.Levels) f.level++\n        })\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Train\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        return 30000 // XXX adjust upgrade time\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { EatJob } from '../../game/model/job/EatJob'\nimport { UpgradeJob } from '../../game/model/job/UpgradeJob'\nimport { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectRaiderPanel extends SelectBasePanel {\n\n    getToolItem: IconPanelButton\n    trainItem: IconPanelButton\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        const feedItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GoFeed')\n        feedItem.isDisabled = () => false\n        feedItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => !r.isDriving() && r.setJob(new EatJob()))\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        const unloadItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UnLoadMinifigure')\n        unloadItem.isDisabled = () => !GameState.selectedRaiders?.some((r) => r.carries !== null)\n        unloadItem.onClick = () => GameState.selectedRaiders?.forEach((r) => r.dropItem())\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_MinifigurePickUp')\n        this.getToolItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GetTool')\n        this.getToolItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DropBirdScarer')\n        const upgradeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeMan')\n        upgradeItem.isDisabled = () => GameState.selectedRaiders.every((r) => r.level >= r.stats.Levels) || !GameState.hasOneBuildingOf(EntityType.TOOLSTATION)\n        upgradeItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => {\n                const closestToolstation = GameState.getClosestBuildingByType(r.getPosition(), EntityType.TOOLSTATION)\n                if (closestToolstation && r.level < r.stats.Levels) {\n                    r.setJob(new UpgradeJob(closestToolstation.primarySurface))\n                }\n            })\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        this.trainItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSkill')\n        this.trainItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoFirstPerson')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoSecondPerson')\n        const deleteRaiderItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteMan')\n        deleteRaiderItem.isDisabled = () => false\n        deleteRaiderItem.onClick = () => GameState.selectedRaiders.forEach((r) => r.beamUp())\n        EventBus.registerEventListener(EventKey.ENTITY_ADDED, () => this.iconPanelButtons.forEach((b) => b.updateState()))\n        EventBus.registerEventListener(EventKey.SELECTED_RAIDER, () => this.iconPanelButtons.forEach((b) => b.updateState()))\n        EventBus.registerEventListener(EventKey.DESELECTED_ENTITY, () => this.iconPanelButtons.forEach((b) => b.updateState()))\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { GameState } from '../../game/model/GameState'\nimport { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectRubblePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(2, onBackPanel)\n        const clearRubbleItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_ClearRubble')\n        clearRubbleItem.onClick = () => {\n            GameState.selectedSurface?.createClearRubbleJob()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        clearRubbleItem.isDisabled = () => !GameState.selectedSurface?.hasRubble()\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => clearRubbleItem.updateState())\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectVehiclePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(7, onBackPanel)\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { Surface } from '../../game/model/map/Surface'\nimport { RaiderTraining } from '../../game/model/raider/RaiderTraining'\nimport { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectWallPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        const itemDrill = this.addWallMenuItem('Interface_MenuItem_Dig', () => GameState.selectedSurface?.createDrillJob())\n        itemDrill.isDisabled = () => !(GameState.selectedSurface?.isDrillable()) &&\n            !(GameState.selectedSurface?.isDrillableHard()) // TODO implement vehicle check for drill hard skill\n        const itemReinforce = this.addWallMenuItem('Interface_MenuItem_Reinforce', () => GameState.selectedSurface?.createReinforceJob())\n        itemReinforce.isDisabled = () => !(GameState.selectedSurface?.isReinforcable())\n        const itemDynamite = this.addWallMenuItem('Interface_MenuItem_Dynamite', () => GameState.selectedSurface?.createDynamiteJob())\n        itemDynamite.isDisabled = () => !GameState.hasBuildingWithUpgrades(EntityType.TOOLSTATION, 2) &&\n            !GameState.raiders.some((r) => r.hasTraining(RaiderTraining.DEMOLITION))\n        const itemDeselect = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeselectDig')\n        itemDeselect.isDisabled = () => false\n        itemDeselect.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.cancelJobs()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => {\n            itemDrill.updateState(false)\n            itemReinforce.updateState(false)\n            itemDynamite.updateState(false)\n            this.notifyRedraw()\n        })\n    }\n\n    addWallMenuItem(itemKey: string, callback: () => any): IconPanelButton {\n        const item = this.addMenuItem('InterfaceImages', itemKey)\n        item.onClick = () => {\n            callback()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        return item\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class SmallVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Hoverboard')\n        this.addMenuItem('InterfaceBuildImages', 'SmallDigger')\n        this.addMenuItem('InterfaceBuildImages', 'SmallTruck')\n        this.addMenuItem('InterfaceBuildImages', 'SmallCat')\n        this.addMenuItem('InterfaceBuildImages', 'SmallMLP')\n        this.addMenuItem('InterfaceBuildImages', 'SmallHeli')\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { TrainJob } from '../../game/model/job/TrainJob'\nimport { RaiderTraining } from '../../game/model/raider/RaiderTraining'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class TrainRaiderPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addTrainingItem('Interface_MenuItem_TrainDriver', RaiderTraining.DRIVER, EntityType.BARRACKS, 'TrainDriver')\n        this.addTrainingItem('Interface_MenuItem_TrainEngineer', RaiderTraining.ENGINEER, EntityType.UPGRADE, 'TrainRepair')\n        this.addTrainingItem('Interface_MenuItem_TrainGeologist', RaiderTraining.GEOLOGIST, EntityType.GEODOME, 'TrainScanner')\n        this.addTrainingItem('Interface_MenuItem_TrainPilot', RaiderTraining.PILOT, EntityType.TELEPORT_PAD, 'TrainPilot')\n        this.addTrainingItem('Interface_MenuItem_TrainSailor', RaiderTraining.SAILOR, EntityType.DOCKS, 'TrainSailor')\n        this.addTrainingItem('Interface_MenuItem_TrainDynamite', RaiderTraining.DEMOLITION, EntityType.TOOLSTATION, 'TrainDynamite')\n        EventBus.registerEventListener(EventKey.ENTITY_ADDED, () => this.updateAllItems())\n        EventBus.registerEventListener(EventKey.ENTITY_REMOVED, () => this.updateAllItems())\n        EventBus.registerEventListener(EventKey.BUILDING_UPGRADED, () => this.updateAllItems())\n    }\n\n    updateAllItems() {\n        this.iconPanelButtons.forEach((b) => b.updateState())\n    }\n\n    private addTrainingItem(itemKey: string, training: RaiderTraining, building: EntityType, statsProperty: string) {\n        const trainingItem = this.addMenuItem('InterfaceImages', itemKey)\n        trainingItem.isDisabled = () => !GameState.getBuildingsByType(building).some((b) => b.stats[statsProperty][b.level]) ||\n            GameState.selectedRaiders.every((r) => r.hasTraining(training))\n        trainingItem.onClick = () => {\n            GameState.getBuildingsByType(building).some((b) => {\n                if (b.stats[statsProperty][b.level]) {\n                    GameState.selectedRaiders.forEach((r) => !r.hasTraining(training) && r.setJob(new TrainJob(b.primarySurface, training)))\n                    EventBus.publishEvent(new EntityDeselected())\n                    return true\n                }\n            })\n        }\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { SurfaceChanged, SurfaceSelectedEvent } from '../../event/LocalEvents'\nimport { EntityAddedEvent, EntityRemovedEvent, RaiderRequested } from '../../event/WorldEvents'\nimport { EntitySuperType, EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { Surface } from '../../game/model/map/Surface'\nimport { MAX_RAIDER_REQUEST } from '../../params'\nimport { Panel } from '../base/Panel'\nimport { BuildingPanel } from './BuildingPanel'\nimport { GetToolPanel } from './GetToolPanel'\nimport { IconPanelButtonLabel } from './IconPanelButtonLabel'\nimport { IconSubPanel } from './IconSubPanel'\nimport { LargeVehiclePanel } from './LargeVehiclePanel'\nimport { SelectBuildingPanel } from './SelectBuildingPanel'\nimport { SelectFloorPanel } from './SelectFloorPanel'\nimport { SelectRaiderPanel } from './SelectRaiderPanel'\nimport { SelectRubblePanel } from './SelectRubblePanel'\nimport { SelectVehiclePanel } from './SelectVehiclePanel'\nimport { SelectWallPanel } from './SelectWallPanel'\nimport { SmallVehiclePanel } from './SmallVehiclePanel'\nimport { TrainRaiderPanel } from './TrainRaiderPanel'\n\nexport class MainPanel extends Panel {\n\n    subPanels: IconSubPanel[] = []\n    mainPanel: IconSubPanel // don't use root itself, since sub panel must be decoupled from (animated) main panel position\n    selectWallPanel: SelectWallPanel\n    selectFloorPanel: SelectFloorPanel\n    selectRubblePanel: SelectRubblePanel\n\n    constructor() {\n        super()\n        this.relX = this.xOut = 640 - 16\n        this.xIn = 640 + 95\n        this.relY = this.yOut = this.yIn = 9\n        this.movedIn = false\n        this.mainPanel = this.addSubPanel(new IconSubPanel(4))\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n\n        const buildingPanel = this.addSubPanel(new BuildingPanel(this.mainPanel))\n        const smallVehiclePanel = this.addSubPanel(new SmallVehiclePanel(this.mainPanel))\n        const largeVehiclePanel = this.addSubPanel(new LargeVehiclePanel(this.mainPanel))\n        this.selectWallPanel = this.addSubPanel(new SelectWallPanel(this.mainPanel))\n        this.selectFloorPanel = this.addSubPanel(new SelectFloorPanel(this.mainPanel))\n        this.selectRubblePanel = this.addSubPanel(new SelectRubblePanel(this.mainPanel))\n        const selectBuildingPanel = this.addSubPanel(new SelectBuildingPanel(this.mainPanel))\n        const selectRaiderPanel = this.addSubPanel(new SelectRaiderPanel(this.mainPanel))\n        const trainRaiderPanel = this.addSubPanel(new TrainRaiderPanel(selectRaiderPanel))\n        selectRaiderPanel.trainItem.onClick = () => selectRaiderPanel.toggleState(() => trainRaiderPanel.toggleState())\n        const getToolPanel = this.addSubPanel(new GetToolPanel(selectRaiderPanel))\n        selectRaiderPanel.getToolItem.onClick = () => selectRaiderPanel.toggleState(() => getToolPanel.toggleState())\n        const selectVehiclePanel = this.addSubPanel(new SelectVehiclePanel(this.mainPanel))\n        const teleportRaider = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_TeleportMan')\n        teleportRaider.isDisabled = () => GameState.raiders.length >= GameState.getMaxRaiders() || GameState.requestedRaiders >= MAX_RAIDER_REQUEST ||\n            !GameState.hasOneBuildingOf(EntityType.TOOLSTATION, EntityType.TELEPORT_PAD)\n        teleportRaider.updateState()\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => teleportRaider.updateState())\n        EventBus.registerEventListener(EventKey.ENTITY_ADDED, (event: EntityAddedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.superType === EntitySuperType.BUILDING || event.superType === EntitySuperType.RAIDER) teleportRaider.updateState()\n        })\n        EventBus.registerEventListener(EventKey.ENTITY_REMOVED, (event: EntityRemovedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.superType === EntitySuperType.BUILDING || event.superType === EntitySuperType.RAIDER) teleportRaider.updateState()\n        })\n        teleportRaider.onClick = () => {\n            GameState.requestedRaiders++\n            EventBus.publishEvent(new RaiderRequested())\n        }\n        // TODO add decrease requested raider spawn option (needs right click for gui elements)\n        teleportRaider.addChild(new IconPanelButtonLabel(teleportRaider))\n        const buildingItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildBuilding')\n        buildingItem.isDisabled = () => false\n        buildingItem.onClick = () => this.mainPanel.toggleState(() => buildingPanel.toggleState())\n        const smallVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildSmallVehicle')\n        smallVehicleItem.isDisabled = () => false\n        smallVehicleItem.onClick = () => this.mainPanel.toggleState(() => smallVehiclePanel.toggleState())\n        const largeVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildLargeVehicle')\n        largeVehicleItem.isDisabled = () => false\n        largeVehicleItem.onClick = () => this.mainPanel.toggleState(() => largeVehiclePanel.toggleState())\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, (event: SurfaceSelectedEvent) => {\n            this.onSelectedSurfaceChange(event.surface)\n        })\n        EventBus.registerEventListener(EventKey.SURFACE_CHANGED, (event: SurfaceChanged) => {\n            if (GameState.selectedSurface === event.surface) this.onSelectedSurfaceChange(event.surface)\n        })\n        EventBus.registerEventListener(EventKey.DESELECTED_ENTITY, () => this.selectSubPanel(this.mainPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_BUILDING, () => this.selectSubPanel(selectBuildingPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_RAIDER, () => this.selectSubPanel(selectRaiderPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_VEHICLE, () => this.selectSubPanel(selectVehiclePanel))\n    }\n\n    reset() {\n        super.reset()\n        this.relX = this.xOut\n        this.relY = this.yOut\n        this.movedIn = false\n        this.updatePosition()\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n        this.mainPanel.updatePosition()\n    }\n\n    addSubPanel<T extends IconSubPanel>(childPanel: T): T {\n        this.addChild(childPanel)\n        this.subPanels.push(childPanel)\n        return childPanel\n    }\n\n    selectSubPanel(targetPanel: IconSubPanel) {\n        this.subPanels.forEach((subPanel) => subPanel !== targetPanel && subPanel.setMovedIn(true))\n        targetPanel.setMovedIn(false)\n    }\n\n    onSelectedSurfaceChange(surface: Surface) {\n        if (surface.surfaceType.floor) {\n            if (surface.hasRubble()) {\n                this.selectSubPanel(this.selectRubblePanel)\n            } else {\n                this.selectSubPanel(this.selectFloorPanel)\n            }\n        } else {\n            this.selectSubPanel(this.selectWallPanel)\n        }\n    }\n\n}\n","import { BitmapFont } from '../../core/BitmapFont'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\n\nexport class TextInfoMessage {\n\n    infoImage\n    textImage\n\n    constructor(font: BitmapFont, infoMessageEntryConfig: TextInfoMessageEntryConfig, maxWidth: number) {\n        this.textImage = font.createTextImage(infoMessageEntryConfig.text, maxWidth)\n        this.infoImage = ResourceManager.getImageOrNull(infoMessageEntryConfig.imageFilename)\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { GameState } from '../../game/model/GameState'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\nimport { TextInfoMessage } from './TextInfoMessage'\nimport { TextInfoMessageConfig } from './TextInfoMessageConfig'\n\nexport class MessagePanel extends Panel {\n\n    imgAir: HTMLCanvasElement = null\n    currentMessage: TextInfoMessage = null\n    messageTimeout = null\n\n    msgSpaceToContinue: TextInfoMessage\n    msgAirSupplyLow: TextInfoMessage\n    msgAirSupplyRunningOut: TextInfoMessage\n    msgGameCompleted: TextInfoMessage\n    msgManTrained: TextInfoMessage\n    msgUnitUpgraded: TextInfoMessage\n\n    constructor(panelCfg: PanelCfg, textInfoMessageConfig: TextInfoMessageConfig) {\n        super(panelCfg)\n        this.relX = this.xOut = this.xIn = 42\n        this.relY = this.yOut = this.yIn = 409\n        this.imgAir = ResourceManager.getImage('Interface/Airmeter/msgpanel_air_juice.bmp')\n\n        const font = ResourceManager.getDefaultFont()\n        const crystalFound = new TextInfoMessage(font, textInfoMessageConfig.textCrystalFound, this.img.width)\n        EventBus.registerEventListener(EventKey.LOCATION_CRYSTAL_FOUND, () => this.setMessage(crystalFound))\n        this.msgSpaceToContinue = new TextInfoMessage(font, textInfoMessageConfig.textSpaceToContinue, this.img.width)\n        const cavernDiscovered = new TextInfoMessage(font, textInfoMessageConfig.textCavernDiscovered, this.img.width)\n        EventBus.registerEventListener(EventKey.CAVERN_DISCOVERED, () => this.setMessage(cavernDiscovered))\n        const oreFound = new TextInfoMessage(font, textInfoMessageConfig.textOreFound, this.img.width)\n        EventBus.registerEventListener(EventKey.ORE_FOUND, () => this.setMessage(oreFound))\n        this.msgAirSupplyLow = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyLow, this.img.width)\n        this.msgAirSupplyRunningOut = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyRunningOut, this.img.width)\n        this.msgGameCompleted = new TextInfoMessage(font, textInfoMessageConfig.textGameCompleted, this.img.width)\n        this.msgManTrained = new TextInfoMessage(font, textInfoMessageConfig.textManTrained, this.img.width)\n        EventBus.registerEventListener(EventKey.RAIDER_TRAINED, () => this.setMessage(this.msgManTrained))\n        this.msgUnitUpgraded = new TextInfoMessage(font, textInfoMessageConfig.textUnitUpgraded, this.img.width)\n        EventBus.registerEventListener(EventKey.AIR_LEVEL_CHANGED, () => this.notifyRedraw())\n    }\n\n    setMessage(textInfoMessage: TextInfoMessage, timeout: number = 3000) {\n        this.messageTimeout = clearTimeoutSafe(this.messageTimeout)\n        this.currentMessage = textInfoMessage\n        this.notifyRedraw()\n        if (timeout) {\n            const that = this\n            this.messageTimeout = setTimeout(() => {\n                that.currentMessage = null\n                that.notifyRedraw()\n            }, timeout)\n        }\n    }\n\n    unsetMessage(textInfoMessage: TextInfoMessage) {\n        if (this.currentMessage === textInfoMessage) {\n            this.currentMessage = null\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (GameState.airLevel > 0) {\n            const width = Math.round(236 * Math.min(1, GameState.airLevel))\n            context.drawImage(this.imgAir, this.x + 85, this.y + 6, width, 8)\n        }\n        const textImage = this.currentMessage?.textImage\n        const infoImage = this.currentMessage?.infoImage\n        if (textImage) {\n            const txtX = this.x + (this.img.width - textImage.width - (infoImage ? infoImage.width : 0)) / 2\n            context.drawImage(textImage, txtX, this.y + 26)\n        }\n        if (infoImage) {\n            const infoX = this.x + this.img.width - infoImage.width\n            context.drawImage(infoImage, infoX, this.y + 16)\n        }\n    }\n\n}\n","export class TextInfoMessageEntryConfig {\n\n    text: string\n    imageFilename: string\n    sfxName: string\n\n    textImage\n    infoImage\n\n    constructor(cfgValue: any) {\n        [this.text, this.imageFilename, this.sfxName] = cfgValue\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\n\nexport class TextInfoMessageConfig extends BaseConfig {\n\n    textCrystalFound: TextInfoMessageEntryConfig = null\n    textSpaceToContinue: TextInfoMessageEntryConfig = null\n    textCavernDiscovered: TextInfoMessageEntryConfig = null\n    textOreFound: TextInfoMessageEntryConfig = null\n    textAirSupplyLow: TextInfoMessageEntryConfig = null\n    textAirSupplyRunningOut: TextInfoMessageEntryConfig = null\n    textGameCompleted: TextInfoMessageEntryConfig = null\n    textManTrained: TextInfoMessageEntryConfig = null\n    textUnitUpgraded: TextInfoMessageEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new TextInfoMessageEntryConfig(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class PriorityButtonsConfig extends BaseConfig {\n\n    aiPriorityTrain: ButtonCfg = null\n    aiPriorityGetIn: ButtonCfg = null\n    aiPriorityCrystal: ButtonCfg = null\n    aiPriorityOre: ButtonCfg = null\n    aiPriorityRepair: ButtonCfg = null\n    aiPriorityClearing: ButtonCfg = null\n    aiPriorityDestruction: ButtonCfg = null\n    aiPriorityConstruction: ButtonCfg = null\n    aiPriorityReinforce: ButtonCfg = null\n    aiPriorityRecharge: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): ButtonCfg {\n        return {\n            buttonType: cfgValue[0],\n            normalFile: cfgValue[1],\n            highlightFile: cfgValue[1],\n            pressedFile: cfgValue[2],\n            disabledFile: cfgValue[3],\n        }\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { GameState } from '../../game/model/GameState'\nimport { PriorityIdentifier } from '../../game/model/job/PriorityIdentifier'\nimport { PriorityEntry } from '../../game/model/job/PriorityList'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { ButtonPriorityListCfg } from './ButtonPriorityListCfg'\nimport { PriorityButtonsConfig } from './PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from './PriorityPositionsEntry'\n\nexport class PriorityListPanel extends Panel {\n\n    prioPositions: PriorityPositionsEntry[] = []\n    prioByName: Map<PriorityIdentifier, Button> = new Map()\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonPriorityListCfg, pos: PriorityPositionsEntry[], cfg: PriorityButtonsConfig) {\n        super(panelCfg)\n        buttonsCfg.panelButtonPriorityListDisable.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.toggle(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        buttonsCfg.panelButtonPriorityListUpOne.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.upOne(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        this.addChild(new Button(this, buttonsCfg.panelButtonPriorityListReset)).onClick = () => this.resetList()\n\n        this.prioPositions = pos\n        this.prioByName.set(PriorityIdentifier.aiPriorityTrain, this.addChild(new Button(this, cfg.aiPriorityTrain)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityGetIn, this.addChild(new Button(this, cfg.aiPriorityGetIn)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityCrystal, this.addChild(new Button(this, cfg.aiPriorityCrystal)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityOre, this.addChild(new Button(this, cfg.aiPriorityOre)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityRepair, this.addChild(new Button(this, cfg.aiPriorityRepair)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityClearing, this.addChild(new Button(this, cfg.aiPriorityClearing)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityDestruction, this.addChild(new Button(this, cfg.aiPriorityDestruction)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityConstruction, this.addChild(new Button(this, cfg.aiPriorityConstruction)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityReinforce, this.addChild(new Button(this, cfg.aiPriorityReinforce)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityRecharge, this.addChild(new Button(this, cfg.aiPriorityRecharge)))\n    }\n\n    reset() {\n        super.reset()\n        this.resetList()\n    }\n\n    resetList() {\n        GameState.priorityList.reset()\n        this.setList(GameState.priorityList.current)\n    }\n\n    private setList(priorityList: PriorityEntry[]) {\n        this.prioByName.forEach((btn) => btn.hidden = true)\n        let index = 0\n        let updated = false\n        priorityList.forEach(cfg => {\n            const prioButton: Button = this.prioByName.get(cfg.key)\n            if (prioButton) {\n                updated = updated || prioButton.hidden || prioButton.disabled !== !cfg.enabled\n                prioButton.hidden = false\n                prioButton.disabled = !cfg.enabled\n                prioButton.relX = this.prioPositions[index].x\n                prioButton.relY = this.prioPositions[index].y\n                prioButton.updatePosition()\n                const btnIndex = index\n                prioButton.onClick = () => {\n                    GameState.priorityList.pushToTop(btnIndex)\n                    this.setList(GameState.priorityList.current)\n                }\n                index++\n            }\n        })\n        if (updated) this.notifyRedraw()\n    }\n\n}\n\n","export class PriorityPositionsEntry {\n\n    x: number\n    y: number\n\n    constructor(cfgValue: any) {\n        [this.x, this.y] = cfgValue\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { BaseElement } from './BaseElement'\nimport { Button } from './Button'\n\nexport class ToggleButton extends Button {\n\n    toggleState: boolean = false\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent, btnCfg)\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = (this.pressed && this.hover) || this.toggleState\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => updated = child.checkHover(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const isPressed = this.isInRect(cx, cy) || this.toggleState\n        let updated = this.pressed !== isPressed\n        this.pressed = isPressed\n        this.children.forEach((child) => updated = child.checkClick(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = inRect && this.pressed\n        if (updated) {\n            this.toggleState = !this.toggleState\n            this.onClick()\n            this.pressed = updated && this.toggleState\n            this.hover = inRect\n        }\n        this.children.forEach((child) => updated = child.checkRelease(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    release(): boolean {\n        return false\n    }\n\n}\n\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { ToggleButton } from '../base/ToggleButton'\nimport { ButtonTopCfg } from './ButtonTopCfg'\n\nexport class TopPanel extends Panel {\n\n    btnCallToArms: ToggleButton\n    btnOptions: Button\n    btnPriorities: ToggleButton\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonTopCfg) {\n        super(panelCfg)\n        this.btnCallToArms = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelCallToArms))\n        this.btnOptions = this.addChild(new Button(this, buttonsCfg.panelButtonTopPanelOptions))\n        this.btnPriorities = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelPriorities))\n    }\n\n}\n\n","import { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { BaseElement } from '../../gui/base/BaseElement'\nimport { Panel } from '../../gui/base/Panel'\nimport { ScaledLayer } from './ScreenLayer'\n\nexport class GuiBaseLayer extends ScaledLayer {\n\n    rootElement: BaseElement = new BaseElement()\n    panels: Panel[] = []\n\n    constructor() {\n        super()\n        this.rootElement.notifyRedraw = () => this.redraw()\n        this.onRedraw = (context: CanvasRenderingContext2D) => {\n            context.clearRect(0, 0, context.canvas.width, context.canvas.height)\n            this.rootElement.onRedraw(context)\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.panels.forEach((p) => p.reset())\n    }\n\n    addPanel<T extends Panel>(panel: T): T {\n        this.rootElement.addChild(panel)\n        this.panels.push(panel)\n        return panel\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n        const hit = this.context && this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n        if (hit) {\n            if (event.eventEnum === POINTER_EVENT.MOVE) {\n                this.rootElement.checkHover(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) this.rootElement.checkClick(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) this.rootElement.checkRelease(sx, sy)\n            }\n        } else if (event.eventEnum === POINTER_EVENT.MOVE) {\n            this.rootElement.release()\n        }\n        return hit\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        return !this.context || this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n    }\n\n}\n","import { ButtonsCfg } from '../../cfg/ButtonsCfg'\nimport { PanelsCfg } from '../../cfg/PanelsCfg'\nimport { Panel } from '../../gui/base/Panel'\nimport { InfoDockPanel } from '../../gui/infodock/InfoDockPanel'\nimport { InfoMessagesConfig } from '../../gui/infodock/InfoMessagesConfig'\nimport { InformationPanel } from '../../gui/infodock/InformationPanel'\nimport { MainPanel } from '../../gui/main/MainPanel'\nimport { MessagePanel } from '../../gui/messagepanel/MessagePanel'\nimport { TextInfoMessageConfig } from '../../gui/messagepanel/TextInfoMessageConfig'\nimport { RadarPanel } from '../../gui/radar/RadarPanel'\nimport { PanelCrystalSideBar } from '../../gui/sidebar/PanelCrystalSideBar'\nimport { PriorityButtonsConfig } from '../../gui/toppanel/PriorityButtonsConfig'\nimport { PriorityListPanel } from '../../gui/toppanel/PriorityListPanel'\nimport { PriorityPositionsEntry } from '../../gui/toppanel/PriorityPositionsEntry'\nimport { TopPanel } from '../../gui/toppanel/TopPanel'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { GuiBaseLayer } from './GuiBaseLayer'\n\nexport class GuiMainLayer extends GuiBaseLayer {\n\n    panelRadar: RadarPanel\n    panelMessages: MessagePanel\n    panelMessagesSide: Panel\n    panelCrystalSideBar: PanelCrystalSideBar\n    panelMain: MainPanel\n    panelTopPanel: TopPanel\n    panelInformation: InformationPanel\n    panelPriorityList: PriorityListPanel\n    panelCameraControl: Panel\n    panelInfoDock: InfoDockPanel\n    panelEncyclopedia: Panel\n    onOptionsShow: () => any = () => console.log('show options triggered')\n\n    constructor() {\n        super()\n        const panelsCfg = new PanelsCfg(ResourceManager.cfg('Panels640x480'))\n        const buttonsCfg = new ButtonsCfg(ResourceManager.cfg('Buttons640x480'))\n        // created in reverse order compared to cfg, earlier in cfg means higher z-value // TODO add some z layering at least to panels\n        this.panelEncyclopedia = this.addPanel(new Panel(panelsCfg.panelEncyclopedia))\n        this.panelInformation = this.addPanel(new InformationPanel(panelsCfg.panelInformation))\n        this.panelInfoDock = this.addPanel(new InfoDockPanel(panelsCfg.panelInfoDock, buttonsCfg.panelInfoDock, new InfoMessagesConfig(ResourceManager.cfg('InfoMessages')), this.panelInformation))\n        this.panelCameraControl = this.addPanel(new Panel(panelsCfg.panelCameraControl))\n        const priorityButtonsConfig = new PriorityButtonsConfig(ResourceManager.cfg('PriorityImages'))\n        const priorityPositionsConfig = Object.values(ResourceManager.cfg('PrioritiesImagePositions')).map(cfgValue => new PriorityPositionsEntry(cfgValue))\n        this.panelPriorityList = this.addPanel(new PriorityListPanel(panelsCfg.panelPriorityList, buttonsCfg.panelPriorityList, priorityPositionsConfig, priorityButtonsConfig))\n        this.panelTopPanel = this.addPanel(new TopPanel(panelsCfg.panelTopPanel, buttonsCfg.panelTopPanel))\n        this.panelMain = this.addPanel(new MainPanel())\n        this.panelCrystalSideBar = this.addPanel(new PanelCrystalSideBar(panelsCfg.panelCrystalSideBar, buttonsCfg.panelCrystalSideBar))\n        this.panelMessagesSide = this.addPanel(new Panel(panelsCfg.panelMessagesSide))\n        this.panelMessages = this.addPanel(new MessagePanel(panelsCfg.panelMessages, new TextInfoMessageConfig(ResourceManager.cfg('TextMessagesWithImages'))))\n        this.panelRadar = this.addPanel(new RadarPanel(panelsCfg.panelRadar, panelsCfg.panelRadarFill, panelsCfg.panelRadarOverlay, buttonsCfg.panelRadar))\n        // link panels\n        this.panelTopPanel.btnOptions.onClick = () => this.onOptionsShow()\n        this.panelTopPanel.btnPriorities.onClick = () => {\n            if (this.panelTopPanel.btnPriorities.toggleState) {\n                this.panelMain.setMovedIn(true, () => this.panelPriorityList.setMovedIn(false))\n            } else {\n                this.panelPriorityList.setMovedIn(true, () => this.panelMain.setMovedIn(false))\n            }\n        }\n    }\n\n}\n","export class Rect {\n\n    x: number = 0\n    y: number = 0\n    w: number = 0\n    h: number = 0\n\n    constructor(arr: number[]) {\n        [this.x, this.y, this.w, this.h] = arr\n    }\n\n}\n","import { Rect } from '../core/Rect'\nimport { BaseConfig } from './BaseConfig'\n\nexport class DialogCfg extends BaseConfig {\n\n    image: string = null\n    titleWindow: Rect = null\n    textWindow: Rect = null\n    okWindow: Rect = null\n    cancelWindow: Rect = null\n    contrastOverlay: string = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        if (lCfgKeyName.endsWith('window')) {\n            return new Rect(cfgValue)\n        }\n        return super.parseValue(lCfgKeyName, cfgValue)\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { DialogCfg } from '../../cfg/DialogCfg'\nimport { PanelCfg } from '../../cfg/PanelCfg'\nimport { BitmapFont } from '../../core/BitmapFont'\nimport { Rect } from '../../core/Rect'\nimport { ResourceManager } from '../../resource/ResourceManager'\n\nexport class BriefingPanelCfg extends PanelCfg {\n\n    // XXX find config values for this class\n\n    titleFont: BitmapFont\n    title: string\n    titleWindow: Rect\n    textFont: BitmapFont\n    textWindow: Rect\n    nextButtonCfg: ButtonCfg\n    backButtonCfg: ButtonCfg\n\n    constructor() {\n        super([])\n        this.titleFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont2.bmp')\n        this.title = ResourceManager.cfg('Main', 'MissionBriefingText')\n        const dialogCfg = new DialogCfg(ResourceManager.cfg('Dialog'))\n        this.titleWindow = dialogCfg.titleWindow\n        this.textFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont.bmp')\n        this.textWindow = dialogCfg.textWindow\n        this.textWindow.y -= 10\n        this.nextButtonCfg = {\n            buttonType: 'Next briefing paragraph',\n            relX: 394,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'NextButton640x480'),\n        }\n        this.backButtonCfg = {\n            buttonType: 'Previous briefing paragraph',\n            relX: 54,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'BackArrow'),\n        }\n    }\n\n}\n","import { ObjectiveImageCfg } from '../../cfg/ObjectiveImageCfg'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { MessagePanel } from '../messagepanel/MessagePanel'\nimport { BriefingPanelCfg } from './BriefingPanelCfg'\n\nexport class BriefingPanel extends Panel {\n\n    messagePanel: MessagePanel\n    cfg: BriefingPanelCfg = null\n    imgTitle: HTMLCanvasElement = null\n    titleRelX: number = 0\n    titleRelY: number = 0\n    btnNext: Button = null\n    btnBack: Button = null\n    imgBack: HTMLCanvasElement = null\n    imgParagraphList: HTMLCanvasElement[] = []\n    paragraph: number = 0\n    imgParagraph: HTMLCanvasElement = null\n\n    constructor() {\n        super()\n        this.cfg = new BriefingPanelCfg()\n        this.imgTitle = this.cfg.titleFont.createTextImage(this.cfg.title)\n        this.titleRelX = this.cfg.titleWindow.x + (this.cfg.titleWindow.w - this.imgTitle.width) / 2\n        this.titleRelY = this.cfg.titleWindow.y\n        this.btnNext = this.addChild(new Button(this, this.cfg.nextButtonCfg))\n        this.btnNext.onClick = () => this.nextParagraph()\n        this.btnBack = this.addChild(new Button(this, this.cfg.backButtonCfg))\n        this.btnBack.onClick = () => this.prevParagraph()\n        this.hidden = true\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n        this.setParagraph(0)\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.imgBack = ResourceManager.getImageOrNull(objectiveBackImgCfg.filename)\n        this.xIn = objectiveBackImgCfg.x\n        this.yIn = objectiveBackImgCfg.y\n        this.width = this.imgBack.width\n        this.height = this.imgBack.height\n        this.updatePosition()\n        this.imgParagraphList = objectiveText.split('\\\\a').map(txt => this.cfg.textFont.createTextImage(txt, this.cfg.textWindow.w, false))\n    }\n\n    setParagraph(paragraph: number) {\n        if (paragraph < 0) return\n        if (paragraph > this.imgParagraphList.length - 1) {\n            this.hide()\n            this.notifyRedraw()\n            return\n        }\n        this.paragraph = paragraph\n        this.imgParagraph = this.imgParagraphList[this.paragraph]\n        this.btnNext.hidden = this.paragraph >= this.imgParagraphList.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.notifyRedraw()\n    }\n\n    nextParagraph() {\n        this.setParagraph(this.paragraph + 1)\n    }\n\n    prevParagraph() {\n        this.setParagraph(this.paragraph - 1)\n    }\n\n    show() {\n        super.show()\n        this.setParagraph(0)\n        this.btnNext.hidden = this.paragraph >= this.imgParagraphList.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.messagePanel?.setMessage(this.messagePanel.msgSpaceToContinue, 0)\n    }\n\n    hide() {\n        super.hide()\n        this.messagePanel?.unsetMessage(this.messagePanel.msgSpaceToContinue)\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.imgBack) context.drawImage(this.imgBack, this.x, this.y)\n        if (this.imgTitle) context.drawImage(this.imgTitle, this.x + this.titleRelX, this.y + this.titleRelY)\n        if (this.imgParagraph) context.drawImage(this.imgParagraph, this.x + this.cfg.textWindow.x, this.y + this.cfg.textWindow.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuCycleItemCfg } from '../../cfg/MenuCycleItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuCycleItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLabelOnNormal: HTMLCanvasElement // TODO only toggle state with clicks on label\n    imgLabelOffNormal: HTMLCanvasElement // TODO use button?\n    imgLabelOnHover: HTMLCanvasElement\n    imgLabelOffHover: HTMLCanvasElement\n\n    labelX: number = 0\n    state: boolean = false\n\n    constructor(parent: MenuLayer, itemCfg: MenuCycleItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.labelX = itemCfg.width\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.imgLabelOffNormal = parent.loFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOffHover = parent.hiFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOnNormal = parent.loFont.createTextImage(itemCfg.labelOn)\n        this.imgLabelOnHover = parent.hiFont.createTextImage(itemCfg.labelOn)\n        this.width = itemCfg.width + Math.max(this.imgLabelOnHover.width, this.imgLabelOffHover.width)\n        this.height = this.imgTextNormal.height\n    }\n\n    onClick() {\n        this.state = !this.state\n        console.log('TODO: cycle item clicked; state: ' + this.state)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        let imgLabel = this.state ? this.imgLabelOnNormal : this.imgLabelOffNormal\n        if (this.hover) {\n            img = this.imgTextHover\n            imgLabel = this.state ? this.imgLabelOnHover : this.imgLabelOffHover\n        }\n        context.drawImage(img, this.x, this.y)\n        context.drawImage(imgLabel, this.x + this.labelX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuLabelItemCfg } from '../../cfg/MenuLabelItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuLabelItem extends BaseElement {\n\n    target: string\n    loImg: HTMLCanvasElement\n    hiImg: HTMLCanvasElement\n\n    constructor(parent: MenuLayer, itemCfg: MenuLabelItemCfg, autoCenter: boolean) {\n        super(parent)\n        this.target = itemCfg.target\n        this.loImg = parent.loFont.createTextImage(itemCfg.label)\n        this.hiImg = parent.hiFont.createTextImage(itemCfg.label)\n        this.width = this.loImg.width\n        this.height = this.loImg.height\n        this.relX = autoCenter ? -parent.relX + (parent.menuImage.width - this.width) / 2 : itemCfg.x\n        this.relY = itemCfg.y\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.hover) {\n            context.drawImage(this.hiImg, this.x, this.y)\n        } else {\n            context.drawImage(this.loImg, this.x, this.y)\n        }\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseButtonCfg } from '../../cfg/BaseButtonCfg'\nimport { MenuSliderItemCfg } from '../../cfg/MenuSliderItemCfg'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuSliderItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLeft: HTMLCanvasElement\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgRight: HTMLCanvasElement\n    sliderX: number = 0\n    min: number = 0\n    max: number = 1\n    value: number = 0\n    onValueChanged: (value: number) => any = (value) => console.log('value changed to: ' + value)\n\n    constructor(parent: MenuLayer, itemCfg: MenuSliderItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.sliderX = itemCfg.width\n        this.imgLeft = ResourceManager.getImage(itemCfg.imgLeft)\n        this.imgNormal = ResourceManager.getImage(itemCfg.imgOff)\n        this.imgHover = ResourceManager.getImage(itemCfg.imgOn)\n        this.imgRight = ResourceManager.getImage(itemCfg.imgRight)\n        const leftBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        leftBtn.imgNormal = ResourceManager.getImage(itemCfg.btnLeftNormal)\n        leftBtn.imgHover = ResourceManager.getImage(itemCfg.btnLeftHover)\n        leftBtn.relX = this.sliderX - this.imgLeft.width - leftBtn.imgHover.width\n        leftBtn.width = leftBtn.imgHover.width\n        leftBtn.height = leftBtn.imgHover.height\n        leftBtn.updatePosition()\n        leftBtn.onClick = () => {\n            if (this.value > this.min) {\n                this.value--\n                this.onValueChanged(this.value)\n            }\n        }\n        const rightBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        rightBtn.imgNormal = ResourceManager.getImage(itemCfg.btnRightNormal)\n        rightBtn.imgHover = ResourceManager.getImage(itemCfg.btnRightHover)\n        rightBtn.relX = this.sliderX + this.imgNormal.width + this.imgRight.width * 2\n        rightBtn.width = rightBtn.imgHover.width\n        rightBtn.height = rightBtn.imgHover.height\n        rightBtn.updatePosition()\n        rightBtn.onClick = () => {\n            if (this.value < this.max) {\n                this.value++\n                this.onValueChanged(this.value)\n            }\n        }\n        this.width = itemCfg.width + leftBtn.imgHover.width + this.imgLeft.width + this.imgNormal.width + this.imgRight.width * 2 + rightBtn.imgHover.width\n        this.min = itemCfg.min\n        this.max = itemCfg.max || 1\n        this.value = this.min // TODO set default value\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.height = this.imgTextNormal.height\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        if (this.hover) {\n            img = this.imgTextHover\n        }\n        context.drawImage(img, this.x, this.y)\n        let posX = this.x + this.sliderX\n        context.drawImage(this.imgLeft, posX, this.y)\n        context.drawImage(this.imgNormal, posX, this.y)\n        const dw = Math.round(this.value / this.max * this.imgHover.width)\n        context.drawImage(this.imgHover, 0, 0, dw, this.imgHover.height, posX, this.y, dw, this.imgHover.height)\n        posX += this.imgNormal.width\n        context.drawImage(this.imgRight, posX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuEntryCfg } from '../../cfg/MenuEntryCfg'\nimport { BitmapFont } from '../../core/BitmapFont'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuCycleItem } from './MenuCycleItem'\nimport { MenuLabelItem } from './MenuLabelItem'\nimport { MenuSliderItem } from './MenuSliderItem'\n\nexport class MenuLayer extends BaseElement {\n\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    itemsTrigger: MenuLabelItem[] = []\n    itemsNext: MenuLabelItem[] = []\n\n    constructor(parent: BaseElement, menuCfg: MenuEntryCfg) {\n        super(parent)\n        this.relX = menuCfg.position[0]\n        this.relY = menuCfg.position[1]\n        this.menuImage = ResourceManager.getImageOrNull(menuCfg.menuImage[0]) // menuImage has 4 parameter here\n        this.titleImage = ResourceManager.getBitmapFont(menuCfg.menuFont).createTextImage(menuCfg.fullName)\n        this.loFont = ResourceManager.getBitmapFont(menuCfg.loFont)\n        this.hiFont = ResourceManager.getBitmapFont(menuCfg.hiFont)\n        menuCfg.itemsLabel.forEach((itemCfg) => {\n            const item = this.addChild(new MenuLabelItem(this, itemCfg, menuCfg.autoCenter))\n            if (itemCfg.actionName.toLowerCase() === 'trigger') {\n                this.itemsTrigger.push(item)\n            } else {\n                this.itemsNext.push(item)\n            }\n        })\n        menuCfg.itemsCycle.forEach((itemCfg) => this.addChild(new MenuCycleItem(this, itemCfg)))\n        menuCfg.itemsSlider.forEach((itemCfg) => this.addChild(new MenuSliderItem(this, itemCfg)))\n        this.hidden = true\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.drawImage(this.menuImage, (this.parent.width - this.menuImage.width) / 2, (this.parent.height - this.menuImage.height) / 2)\n        context.drawImage(this.titleImage, (this.parent.width - this.titleImage.width) / 2, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuCfg } from '../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../screen/layer/ScreenLayer'\nimport { Panel } from '../base/Panel'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuBasePanel extends Panel {\n\n    layersByKey: Map<string, MenuLayer> = new Map()\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super()\n        this.width = layer.fixedWidth\n        this.height = layer.fixedHeight\n        this.hidden = true\n        cfg.menus.forEach((menuCfg, index) => this.layersByKey.set('menu' + (index + 1), this.addChild(new MenuLayer(this, menuCfg))))\n        const pausePanel = this\n        this.layersByKey.forEach((layer) => layer.itemsNext.forEach((item) => item.onClick = () => pausePanel.selectLayer(item.target)))\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n    }\n\n    show() {\n        this.hidden = false\n        this.selectLayer('menu1')\n    }\n\n    hide() {\n        super.hide()\n        this.notifyRedraw()\n    }\n\n    selectLayer(key: string) {\n        const layer = this.layersByKey.get(key.toLowerCase())\n        this.layersByKey.forEach(l => l !== layer && l.hide())\n        layer.show()\n        this.notifyRedraw()\n    }\n\n}\n","import { MenuCfg } from '../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../screen/layer/ScreenLayer'\nimport { MenuBasePanel } from './MenuBasePanel'\n\nexport class OptionsPanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const panel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => panel.onRepeatBriefing()\n        this.layersByKey.get('menu1').itemsTrigger[1].onClick = () => panel.hide()\n    }\n\n}\n","import { MenuCfg } from '../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../screen/layer/ScreenLayer'\nimport { MenuBasePanel } from './MenuBasePanel'\n\nexport class PausePanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n    onAbortGame: () => any = () => console.log('abort mission')\n    onRestartGame: () => any = () => console.log('restart mission')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const pausePanel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => pausePanel.hide() // Pause\n        this.layersByKey.get('menu2').itemsTrigger[0].onClick = () => pausePanel.onRepeatBriefing() // Options\n        this.layersByKey.get('menu3').itemsTrigger[0].onClick = () => pausePanel.onAbortGame() // Quit\n        this.layersByKey.get('menu4').itemsTrigger[0].onClick = () => pausePanel.onRestartGame() // Restart\n    }\n\n}\n","import { MenuCfg } from '../../cfg/MenuCfg'\nimport { ObjectiveImageCfg } from '../../cfg/ObjectiveImageCfg'\nimport { EventBus } from '../../event/EventBus'\nimport { KEY_EVENT } from '../../event/EventTypeEnum'\nimport { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { ChangeCursor } from '../../event/LocalEvents'\nimport { Panel } from '../../gui/base/Panel'\nimport { BriefingPanel } from '../../gui/briefing/BriefingPanel'\nimport { OptionsPanel } from '../../gui/overlay/OptionsPanel'\nimport { PausePanel } from '../../gui/overlay/PausePanel'\nimport { DEV_MODE } from '../../params'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Cursors } from '../Cursors'\nimport { GuiBaseLayer } from './GuiBaseLayer'\n\nexport class OverlayLayer extends GuiBaseLayer {\n\n    panelBriefing: BriefingPanel\n    panelOptions: OptionsPanel\n    panelPause: PausePanel\n\n    constructor() {\n        super()\n        this.panelPause = this.addPanel(new PausePanel(this, ResourceManager.getResource('PausedMenu') as MenuCfg))\n        this.panelOptions = this.addPanel(new OptionsPanel(this, ResourceManager.getResource('OptionsMenu') as MenuCfg))\n        this.panelBriefing = this.addPanel(new BriefingPanel())\n        // link items\n        this.panelPause.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n        this.panelOptions.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n    }\n\n    reset() {\n        super.reset()\n        if (!DEV_MODE) this.setActivePanel(this.panelBriefing)\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.panelBriefing.setup(objectiveText, objectiveBackImgCfg)\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        if (this.panels.every(p => p.hidden)) return false\n        return super.handlePointerEvent(event) || true // catch em all\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): boolean {\n        let result = false\n        const lEventKey = event.key.toLowerCase()\n        if (event.eventEnum === KEY_EVENT.UP) {\n            if (lEventKey === 'escape') {\n                if (this.panelBriefing.hidden && this.panelOptions.hidden) {\n                    if (this.panelPause.hidden) {\n                        // TODO actually pause the game\n                        this.setActivePanel(this.panelPause)\n                    } else {\n                        // TODO actually unpause the game\n                        this.panelPause.hide()\n                    }\n                    result = true\n                }\n            } else if (lEventKey === ' ') { // space\n                if (!this.panelBriefing.hidden) {\n                    this.panelBriefing.nextParagraph()\n                    result = true\n                }\n            }\n        }\n        return result\n    }\n\n    setActivePanel(panel: Panel) {\n        EventBus.publishEvent(new ChangeCursor(Cursors.Pointer_Standard))\n        this.panels.forEach(p => p !== panel && p.hide())\n        panel.show()\n        this.redraw()\n    }\n\n}\n","import { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameState } from '../../game/model/GameState'\nimport { SceneManager } from '../../game/SceneManager'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class SelectionLayer extends ScreenLayer {\n\n    sceneMgr: SceneManager\n    selectStart: { x: number, y: number } = null\n\n    constructor() {\n        super(true)\n    }\n\n    reset() {\n        super.reset()\n        this.selectStart = null\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        if (GameState.buildModeSelection) return\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.startSelection(cx, cy)\n        } else if (event.eventEnum === POINTER_EVENT.MOVE) {\n            return this.changeSelection(cx, cy)\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.selectEntities(cx, cy)\n        }\n        return false\n    }\n\n    startSelection(screenX: number, screenY: number) {\n        this.selectStart = {x: screenX, y: screenY}\n        return true\n    }\n\n    changeSelection(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        this.context.strokeStyle = 'rgba(128, 192, 192, 0.5)'\n        this.context.lineWidth = 2\n        this.context.strokeRect(this.selectStart.x, this.selectStart.y, screenX - this.selectStart.x, screenY - this.selectStart.y)\n        return true\n    }\n\n    selectEntities(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        const r1x = (this.selectStart.x / this.canvas.width) * 2 - 1\n        const r1y = -(this.selectStart.y / this.canvas.height) * 2 + 1\n        const r2x = (screenX / this.canvas.width) * 2 - 1\n        const r2y = -(screenY / this.canvas.height) * 2 + 1\n        if (Math.abs(screenX - this.selectStart.x) < 5 && Math.abs(screenY - this.selectStart.y) < 5) {\n            const x = (this.selectStart.x + screenX) / this.canvas.width - 1\n            const y = -(this.selectStart.y + screenY) / this.canvas.height + 1\n            this.sceneMgr.selectEntitiesByRay(x, y)\n        } else {\n            this.sceneMgr.selectEntitiesInFrustum(r1x, r1y, r2x, r2y)\n        }\n        this.selectStart = null\n        return true\n    }\n\n}\n","import { MathUtils, Vector2 } from 'three'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { clearIntervalSafe, getRandom, iGet } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { EntityAddedEvent, RaiderRequested } from '../event/WorldEvents'\nimport { RaiderActivity } from '../game/model/activities/RaiderActivity'\nimport { EntityType } from '../game/model/EntityType'\nimport { GameState } from '../game/model/GameState'\nimport { MoveJob } from '../game/model/job/MoveJob'\nimport { Raider } from '../game/model/raider/Raider'\nimport { ObjectListLoader } from '../game/ObjectListLoader'\nimport { SceneManager } from '../game/SceneManager'\nimport { Supervisor } from '../game/Supervisor'\nimport { WorldManager } from '../game/WorldManager'\nimport { CHECK_SPANW_RAIDER_TIMER, TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { LevelObjectiveTextEntry } from '../resource/wadworker/ObjectiveTextParser'\nimport { BaseScreen } from './BaseScreen'\nimport { GameLayer } from './layer/GameLayer'\nimport { GuiMainLayer } from './layer/GuiMainLayer'\nimport { OverlayLayer } from './layer/OverlayLayer'\nimport { SelectionLayer } from './layer/SelectionLayer'\nimport degToRad = MathUtils.degToRad\n\nexport class GameScreen extends BaseScreen {\n\n    onLevelEnd: () => void = () => console.log('Level aborted')\n    gameLayer: GameLayer\n    selectionLayer: SelectionLayer\n    guiLayer: GuiMainLayer\n    overlayLayer: OverlayLayer\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    spawnRaiderInterval = null\n    jobSupervisor: Supervisor\n    levelName: string\n    levelConf: LevelEntryCfg\n\n    constructor() {\n        super()\n        this.gameLayer = this.addLayer(new GameLayer(), 0)\n        this.selectionLayer = this.addLayer(new SelectionLayer(), 10)\n        this.guiLayer = this.addLayer(new GuiMainLayer(), 20)\n        this.overlayLayer = this.addLayer(new OverlayLayer(), 30)\n        this.worldMgr = new WorldManager()\n        this.gameLayer.worldMgr = this.worldMgr\n        this.sceneMgr = new SceneManager(this.gameLayer.canvas)\n        this.gameLayer.sceneMgr = this.sceneMgr\n        this.selectionLayer.sceneMgr = this.sceneMgr\n        this.jobSupervisor = new Supervisor(this.worldMgr)\n        // link layer\n        this.guiLayer.onOptionsShow = () => this.overlayLayer.panelOptions.show()\n        this.overlayLayer.panelBriefing.messagePanel = this.guiLayer.panelMessages\n        this.overlayLayer.panelPause.onAbortGame = () => this.onLevelEnd()\n        this.overlayLayer.panelPause.onRestartGame = () => this.restartLevel()\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => {\n            if (GameState.requestedRaiders > 0 && !this.spawnRaiderInterval) {\n                this.spawnRaiderInterval = setInterval(this.checkSpawnRaiders.bind(this), CHECK_SPANW_RAIDER_TIMER)\n            }\n        })\n    }\n\n    startLevel(levelName) {\n        this.levelName = levelName\n        this.levelConf = ResourceManager.getResource('Levels').levelsByName[this.levelName]\n        if (!this.levelConf) throw 'Could not find level configuration for \"' + this.levelName + '\"'\n        this.setupAndStartLevel()\n    }\n\n    restartLevel() {\n        this.hide()\n        GameState.reset()\n        this.setupAndStartLevel()\n    }\n\n    private setupAndStartLevel() {\n        console.log('Starting level ' + this.levelName + ' - ' + this.levelConf.fullName)\n        this.worldMgr.setup(this.levelConf, () => this.onLevelEnd())\n        this.sceneMgr.setupScene(this.levelConf, this.worldMgr)\n        // load in non-space objects next\n        const objectListConf = ResourceManager.getResource(this.levelConf.oListFile)\n        ObjectListLoader.loadObjectList(this.worldMgr, this.sceneMgr, objectListConf, this.levelConf.disableStartTeleport)\n        // setup GUI\n        const objectiveText: LevelObjectiveTextEntry = iGet(ResourceManager.getResource(this.levelConf.objectiveText), this.levelName)\n        this.guiLayer.reset()\n        this.overlayLayer.setup(objectiveText.objective, this.levelConf.objectiveImage640x480)\n        this.show()\n    }\n\n    show() {\n        super.show()\n        this.sceneMgr.startScene()\n        this.worldMgr.start()\n        this.jobSupervisor.start()\n    }\n\n    hide() {\n        this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n        this.jobSupervisor.stop()\n        this.worldMgr.stop()\n        this.sceneMgr.disposeScene()\n        super.hide()\n    }\n\n    resize(width: number, height: number) {\n        super.resize(width, height)\n        this.sceneMgr?.resize(width, height)\n    }\n\n    checkSpawnRaiders() {\n        if (GameState.requestedRaiders < 1) {\n            this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n            return\n        }\n        if (GameState.raiders.length >= GameState.getMaxRaiders()) return\n        const spawnBuildings = GameState.getBuildingsByType(EntityType.TOOLSTATION, EntityType.TELEPORT_PAD)\n        for (let c = 0; c < spawnBuildings.length && GameState.requestedRaiders > 0; c++) {\n            const station = spawnBuildings[c]\n            if (station.spawning) continue\n            GameState.requestedRaiders--\n            EventBus.publishEvent(new RaiderRequested())\n            station.spawning = true\n            const raider = new Raider(this.worldMgr, this.sceneMgr)\n            const heading = station.getHeading()\n            raider.changeActivity(RaiderActivity.TeleportIn, () => {\n                station.spawning = false\n                raider.changeActivity()\n                raider.createPickSphere()\n                const walkOutPos = station.getPosition2D().add(new Vector2(0, TILESIZE * 3 / 4 + getRandom(TILESIZE / 2))\n                    .rotateAround(new Vector2(0, 0), heading + degToRad(-10 + getRandom(20))))\n                raider.setJob(new MoveJob(walkOutPos))\n                GameState.raiders.push(raider)\n                EventBus.publishEvent(new EntityAddedEvent(raider))\n            })\n            raider.addToScene(new Vector2(0, TILESIZE / 2).rotateAround(new Vector2(0, 0), station.getHeading()).add(station.getPosition2D()), heading)\n        }\n    }\n\n}\n","export class MainMenuBaseItem {\n\n    x: number = 0\n    y: number = 0\n    width: number = 0\n    height: number = 0\n    zIndex: number = 100\n    scrollAffected = false\n    needsRedraw: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n    actionName: string = ''\n    targetIndex: number = 0\n\n    static compareZ(left: MainMenuBaseItem, right: MainMenuBaseItem) {\n        return left.zIndex === right.zIndex ? 0 : left.zIndex > right.zIndex ? -1 : 1\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const hover = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        if (this.hover !== hover) {\n            this.hover = hover\n            this.needsRedraw = true\n            this.onHoverChange()\n        }\n        if (!this.hover) this.pressed = false\n        return this.hover\n    }\n\n    onHoverChange() {\n    }\n\n    checkSetPressed() {\n        if (!this.hover) return\n        if (!this.pressed) this.needsRedraw = true\n        this.pressed = true\n    }\n\n    setReleased() {\n        if (this.pressed) this.needsRedraw = true\n        this.pressed = false\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        this.needsRedraw = false\n    }\n\n}\n","import { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuIconButton extends MainMenuBaseItem {\n\n    imgNormal = null\n    imgHover = null\n    imgPressed = null\n    tooltip = ''\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.imgNormal = ResourceManager.getImage(cfg.imgNormal)\n        this.imgHover = ResourceManager.getImage(cfg.imgHover)\n        this.imgPressed = ResourceManager.getImage(cfg.imgPressed)\n        this.tooltip = (cfg.tooltip || '').replace(/_/g, ' ')\n        this.width = Math.max(this.imgNormal.width, this.imgHover.width, this.imgPressed.width)\n        this.height = Math.max(this.imgNormal.height, this.imgHover.height, this.imgPressed.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgNormal\n        if (this.hover) img = this.imgHover\n        if (this.pressed) img = this.imgPressed\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuLabelButton extends MainMenuBaseItem {\n\n    labelImgLo = null\n    labelImgHi = null\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.labelImgLo = layer.loFont.createTextImage(cfg.label)\n        this.labelImgHi = layer.hiFont.createTextImage(cfg.label)\n        this.width = Math.max(this.labelImgLo.width, this.labelImgHi.width)\n        this.height = Math.max(this.labelImgLo.height, this.labelImgHi.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const img = this.hover && !this.pressed ? this.labelImgHi : this.labelImgLo\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { clearIntervalSafe } from '../core/Util'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { GamePointerEvent } from '../event/GamePointerEvent'\nimport { GameWheelEvent } from '../event/GameWheelEvent'\nimport { NATIVE_FRAMERATE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from '../screen/layer/ScreenLayer'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuIconButton } from './MainMenuIconButton'\nimport { MainMenuLabelButton } from './MainMenuLabelButton'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\n\nexport class MainMenuLayer extends ScaledLayer {\n\n    screen: MainMenuScreen\n    cfg: MenuEntryCfg\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    items: MainMenuBaseItem[] = []\n    scrollY: number = 0\n    scrollSpeedY: number = 0\n    scrollInterval = null\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg) {\n        super()\n        this.screen = screen\n        this.cfg = menuCfg\n        this.loFont = menuCfg.loFont ? ResourceManager.getBitmapFont(menuCfg.loFont) : null\n        this.hiFont = menuCfg.hiFont ? ResourceManager.getBitmapFont(menuCfg.hiFont) : null\n        this.menuImage = menuCfg.menuImage ? ResourceManager.getImage(menuCfg.menuImage) : null\n        this.titleImage = this.loFont.createTextImage(menuCfg.fullName)\n\n        menuCfg.itemsLabel.forEach((item) => {\n            if (item.label) {\n                this.items.push(new MainMenuLabelButton(this, item))\n            } else {\n                this.items.push(new MainMenuIconButton(this, item))\n            }\n        })\n\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n\n        this.onRedraw = (context) => {\n            context.drawImage(this.menuImage, 0, -this.scrollY)\n            if (menuCfg.displayTitle) context.drawImage(this.titleImage, (this.fixedWidth - this.titleImage.width) / 2, this.cfg.position[1])\n            this.items.forEach((item, index) => (this.items[this.items.length - 1 - index]).draw(context))\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.scrollY = 0\n        this.scrollSpeedY = 0\n    }\n\n    show() {\n        super.show()\n        const that = this\n        this.scrollInterval = setInterval(() => {\n            if (that.scrollSpeedY === 0) return\n            that.setScrollY(that.scrollSpeedY)\n        }, 1000 / NATIVE_FRAMERATE)\n    }\n\n    hide() {\n        this.scrollInterval = clearIntervalSafe(this.scrollInterval)\n        super.hide()\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        if (event.eventEnum === POINTER_EVENT.MOVE) {\n            const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n            let hovered = false\n            this.items.forEach((item) => {\n                if (!hovered) {\n                    const absY = sy + (item.scrollAffected ? this.scrollY : 0)\n                    hovered = item.checkHover(sx, absY)\n                } else {\n                    if (item.hover) item.needsRedraw = true\n                    item.hover = false\n                    item.setReleased()\n                }\n            })\n            if (this.cfg.canScroll) {\n                const scrollAreaHeight = 100\n                if (sy < scrollAreaHeight) {\n                    this.setScrollSpeedY(-(scrollAreaHeight - sy))\n                } else if (sy > this.fixedHeight - scrollAreaHeight) {\n                    this.setScrollSpeedY(sy - (this.fixedHeight - scrollAreaHeight))\n                } else {\n                    this.setScrollSpeedY(0)\n                }\n            }\n        } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => item.checkSetPressed())\n            }\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => {\n                    if (item.pressed) {\n                        item.setReleased()\n                        if (item.actionName.toLowerCase() === 'next') {\n                            this.screen.showMainMenu(item.targetIndex)\n                        } else if (item.actionName.toLowerCase() === 'selectlevel') {\n                            this.screen.selectLevel((item as MainMenuLevelButton).levelKey)\n                        } else if (item.actionName) {\n                            console.warn('not implemented: ' + item.actionName + ' - ' + item.targetIndex)\n                        }\n                    }\n                })\n            }\n        }\n        if (this.needsRedraw()) this.redraw()\n        return false\n    }\n\n    private setScrollSpeedY(deltaY: number) {\n        this.scrollSpeedY = Math.sign(deltaY) * Math.pow(Math.round(deltaY / 20), 2)\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        if (!this.cfg.canScroll) return false\n        this.setScrollY(event.deltaY)\n        return true\n    }\n\n    private setScrollY(deltaY: number) {\n        const scrollYBefore = this.scrollY\n        this.scrollY = Math.min(Math.max(this.scrollY + deltaY, 0), this.menuImage.height - this.fixedHeight)\n        if (scrollYBefore !== this.scrollY) this.redraw()\n    }\n\n    needsRedraw(): boolean {\n        return this.items.some((item) => item.needsRedraw)\n    }\n\n}\n","import { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuLevelButton extends MainMenuBaseItem {\n\n    layer: MainMenuLayer\n    imgActive = null\n    imgInactive = null\n    imgCross = null\n    unlocked: boolean = false\n    levelKey: string = ''\n\n    constructor(layer: MainMenuLayer, levelKey: string, levelCfg: LevelEntryCfg) {\n        super()\n        this.layer = layer\n        this.actionName = 'selectlevel'\n        this.levelKey = levelKey\n        this.x = levelCfg.frontEndX\n        this.y = levelCfg.frontEndY\n        this.zIndex = 10\n        this.scrollAffected = true\n        const [imgActive, imgInactive, imgCross] = levelCfg.menuBMP\n        this.imgActive = ResourceManager.getImage(imgActive)\n        this.imgInactive = ResourceManager.getImage(imgInactive)\n        this.imgCross = ResourceManager.getImage(imgCross)\n        this.width = Math.max(this.imgActive.width, this.imgInactive.width, this.imgCross.width)\n        this.height = Math.max(this.imgActive.height, this.imgInactive.height, this.imgCross.height)\n        this.unlocked = levelCfg.frontEndOpen\n        this.unlocked = true // TODO don't unlock everything by default\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgCross\n        if (this.unlocked) img = this.hover ? this.imgActive : this.imgInactive\n        context.drawImage(img, this.x, this.y - this.layer.scrollY)\n    }\n\n}\n","import { createContext } from '../core/ImageHelper'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class MainMenuPanel extends MainMenuBaseItem {\n\n    context: CanvasRenderingContext2D\n\n    constructor(imgData: ImageData, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.zIndex = 50\n        this.context = createContext(imgData.width, imgData.height)\n        this.context.putImageData(imgData, 0, 0)\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const inRect = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        const hover = inRect && this.context.getImageData(sx, sy, 1, 1).data[3] > 0\n        if (this.hover !== hover) this.needsRedraw = true\n        this.hover = hover\n        return this.hover\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        context.drawImage(this.context.canvas, this.x, this.y, this.width, this.height)\n    }\n\n}\n","import { BitmapFont } from '../core/BitmapFont'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class MainMenuWindow extends MainMenuBaseItem {\n\n    font: BitmapFont\n    imgFirstLine = null\n    imgSecondLine = null\n\n    constructor(font: BitmapFont, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.font = font\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    setFirstLine(text: string) {\n        this.imgFirstLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    setSecondLine(text: string) {\n        this.imgSecondLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const cx = this.x + this.width / 2, cy = this.y + this.height / 2\n        if (this.imgFirstLine) context.drawImage(this.imgFirstLine, cx - this.imgFirstLine.width / 2, cy - this.imgFirstLine.height)\n        if (this.imgSecondLine) context.drawImage(this.imgSecondLine, cx - this.imgSecondLine.width / 2, cy)\n    }\n\n}\n","import { LevelEntryCfg, LevelsCfg } from '../cfg/LevelsCfg'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { iGet } from '../core/Util'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { MainMenuPanel } from './MainMenuPanel'\nimport { MainMenuWindow } from './MainMenuWindow'\n\nexport class LevelSelectLayer extends MainMenuLayer {\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg, modeLevel: boolean) {\n        super(screen, menuCfg)\n        const levelsCfg: LevelsCfg = ResourceManager.getResource('Levels')\n        const levelTextCfg = new LevelTextCfg()\n        this.items.push(new MainMenuPanel(levelTextCfg.panelImgData, levelTextCfg.panelPos))\n        const levelTextWindow = new MainMenuWindow(ResourceManager.getDefaultFont(), levelTextCfg.window)\n        levelTextWindow.setFirstLine(modeLevel ? levelTextCfg.level : levelTextCfg.tutorial)\n        this.items.push(levelTextWindow)\n        Object.keys(levelsCfg.levelsByName).forEach((levelKey) => {\n            const level: LevelEntryCfg = levelsCfg.levelsByName[levelKey]\n            const levelButton = new MainMenuLevelButton(this, levelKey, level)\n            levelButton.onHoverChange = () => levelTextWindow.setSecondLine(levelButton.hover ? level.fullName : '')\n            this.items.push(levelButton)\n        })\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n    }\n\n}\n\nclass LevelTextCfg {\n\n    window = {x: 0, y: 0, w: 0, h: 0}\n    panelImgData: ImageData\n    panelPos = {x: 0, y: 0, w: 0, h: 0}\n    level: string = ''\n    tutorial: string = ''\n\n    constructor() {\n        const cfg = ResourceManager.cfg('Menu', 'LevelText')\n        const winCfg = iGet(cfg, 'Window')\n        this.window = {x: winCfg[0], y: winCfg[1], w: winCfg[2], h: winCfg[3]}\n        const panelCfg = iGet(cfg, 'Panel')\n        this.panelImgData = ResourceManager.getImageData(panelCfg[0])\n        this.panelPos = {x: panelCfg[1], y: panelCfg[2], w: panelCfg[3], h: panelCfg[4]}\n        this.level = LevelTextCfg.parseLabel(iGet(cfg, 'Level'))\n        this.tutorial = LevelTextCfg.parseLabel(iGet(cfg, 'Tutorial'))\n    }\n\n    private static parseLabel(cfg: any) { // TODO improve cfg handling instead\n        if (!cfg) {\n            return ''\n        } else if (Array.isArray(cfg)) {\n            return cfg.join(',').replace(/_/g, ' ')\n        } else {\n            return cfg.replace(/_/g, ' ')\n        }\n    }\n\n}\n","import { MenuCfg } from '../cfg/MenuCfg'\nimport { LevelSelectLayer } from '../menu/LevelSelectLayer'\nimport { MainMenuLayer } from '../menu/MainMenuLayer'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\n\nexport class MainMenuScreen extends BaseScreen {\n\n    onLevelSelected: (levelName: string) => void = null\n    menus: MainMenuLayer[] = []\n\n    constructor() {\n        super()\n        const mainMenuFullCfg = ResourceManager.getResource('MainMenuFull') as MenuCfg\n        mainMenuFullCfg.menus.forEach((menuCfg) => {\n            let layer\n            if (menuCfg.title === 'Levels') {\n                layer = new LevelSelectLayer(this, menuCfg, true)\n            } else if (menuCfg.title === 'Tutorials') {\n                layer = new LevelSelectLayer(this, menuCfg, false)\n            } else {\n                layer = new MainMenuLayer(this, menuCfg)\n            }\n            this.menus.push(layer)\n            this.addLayer(layer)\n        })\n    }\n\n    showMainMenu(index: number = 0) {\n        this.hide()\n        this.menus[index].show()\n        this.cursorLayer.show()\n    }\n\n    showLevelSelection() {\n        this.showMainMenu(1)\n    }\n\n    selectLevel(levelName) {\n        this.hide()\n        this.onLevelSelected(levelName)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class RewardScreenButton extends MainMenuBaseItem {\n\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgPressed: HTMLCanvasElement\n    imgDisabled: HTMLCanvasElement\n    disabled: boolean = false\n    visible: boolean = true\n\n    constructor(conf: any) {\n        super()\n        let imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath;\n        [imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath, this.x, this.y] = conf\n        this.imgNormal = ResourceManager.getImage(imgNormalFilepath)\n        this.imgHover = ResourceManager.getImage(imgHoverFilepath)\n        this.imgPressed = ResourceManager.getImage(imgPressedFilepath)\n        this.imgDisabled = ResourceManager.getImage(imgDisabledFilepath)\n        this.width = this.imgNormal.width\n        this.height = this.imgNormal.height\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        if (!this.visible) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled\n        } else if (this.pressed) {\n            img = this.imgPressed\n        } else if (this.hover) {\n            img = this.imgHover\n        }\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { RewardCfg } from '../cfg/RewardCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { clearTimeoutSafe } from '../core/Util'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { RewardScreenButton } from '../menu/RewardScreenButton'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\nimport { ScaledLayer } from './layer/ScreenLayer'\n\nexport class RewardScreen extends BaseScreen {\n\n    onAdvance: () => void\n    cfg: RewardCfg = null\n    titleFont: BitmapFont\n    resultsLayer: ScaledLayer\n    descriptionTextLayer: ScaledLayer\n    btnLayer: ScaledLayer\n    resultIndex: number = 0\n    resultLastIndex: number = 0\n    images: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    boxes: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    fonts = {}\n    texts: HTMLCanvasElement[] = []\n    uncoverTimeout = null\n    btnSave: RewardScreenButton\n    btnAdvance: RewardScreenButton\n\n    constructor() {\n        super()\n        this.cfg = ResourceManager.getResource('Reward')\n        this.titleFont = ResourceManager.getBitmapFont(this.cfg.titleFont)\n        const backgroundImg = ResourceManager.getImage(this.cfg.wallpaper)\n        const backgroundLayer = this.addLayer(new ScaledLayer())\n        backgroundLayer.onRedraw = (context) => context.drawImage(backgroundImg, 0, 0)\n        this.cfg.images.forEach((img) => {\n            this.images.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        this.cfg.boxImages.forEach((img) => {\n            this.boxes.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        Object.keys(this.cfg.fonts).forEach((fontKey, index) => {\n            const font = ResourceManager.getBitmapFont(this.cfg.fonts[fontKey])\n            this.fonts[fontKey.toLowerCase()] = font\n            const txt = this.cfg.texts[index]\n            const labelFont = index < 9 ? font : ResourceManager.getBitmapFont(this.cfg.backFont)\n            this.texts.push(labelFont.createTextImage(txt.text))\n        })\n        this.resultsLayer = this.addLayer(new ScaledLayer())\n        this.resultsLayer.handlePointerEvent = ((event) => {\n            if (event.eventEnum === POINTER_EVENT.UP) {\n                this.uncoverTimeout = clearTimeoutSafe(this.uncoverTimeout)\n                this.uncoverTimeout = null\n                this.resultIndex = this.resultLastIndex\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n                this.redraw()\n                return true\n            }\n            return false\n        })\n        this.descriptionTextLayer = this.addLayer(new ScaledLayer(), 20)\n        this.btnLayer = this.addLayer(new ScaledLayer(), 50)\n        this.btnSave = new RewardScreenButton(this.cfg.saveButton)\n        this.btnSave.disabled = true\n        this.btnAdvance = new RewardScreenButton(this.cfg.advanceButton)\n        this.btnLayer.handlePointerEvent = ((event) => {\n            if (event.eventEnum === POINTER_EVENT.MOVE) {\n                const [sx, sy] = this.btnLayer.toScaledCoords(event.clientX, event.clientY)\n                this.btnSave.checkHover(sx, sy)\n                this.btnAdvance.checkHover(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    this.btnSave.checkSetPressed()\n                    this.btnAdvance.checkSetPressed()\n                }\n            } else if (event.eventEnum === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    if (this.btnSave.pressed) {\n                        this.btnSave.setReleased()\n                        // TODO switch to save screen\n                    } else if (this.btnAdvance.pressed) {\n                        this.btnAdvance.setReleased()\n                        this.hide()\n                        this.onAdvance()\n                    }\n                }\n            }\n            if (this.btnSave.needsRedraw || this.btnAdvance.needsRedraw) this.redraw()\n            return false\n        })\n        this.btnLayer.onRedraw = (context) => {\n            this.btnSave.draw(context)\n            this.btnAdvance.draw(context)\n        }\n    }\n\n    show() {\n        this.resultIndex = 0\n        this.btnSave.visible = false\n        this.btnAdvance.visible = false\n        this.uncoverResult()\n        const levelFullNameImg = this.titleFont.createTextImage(GameState.levelFullName)\n        let resultText = this.cfg.quitText\n        this.resultLastIndex = this.images.length - 2\n        if (GameState.resultState === GameResultState.COMPLETE) {\n            resultText = this.cfg.completeText\n            this.resultLastIndex = this.images.length - 1\n        } else if (GameState.resultState === GameResultState.FAILED) {\n            resultText = this.cfg.failedText\n        }\n        const resultValues = []\n        resultValues.push(this.fonts['crystals'].createTextImage(this.percentString(GameState.numCrystal, GameState.neededCrystals)))\n        resultValues.push(this.fonts['ore'].createTextImage(this.percentString(GameState.numOre, GameState.totalOres)))\n        resultValues.push(this.fonts['diggable'].createTextImage(this.percentString(GameState.remainingDiggables, GameState.totalDiggables, true)))\n        resultValues.push(this.fonts['constructions'].createTextImage(GameState.buildings.length.toString()))\n        resultValues.push(this.fonts['caverns'].createTextImage(this.percentString(GameState.discoveredCaverns, GameState.totalCaverns)))\n        resultValues.push(this.fonts['figures'].createTextImage(this.percentString(GameState.raiders.length, GameState.getMaxRaiders())))\n        resultValues.push(this.fonts['rockmonsters'].createTextImage(this.percentString(0))) // TODO show defence report, is either 0% or 100%\n        resultValues.push(this.fonts['oxygen'].createTextImage(this.percentString(GameState.airLevel)))\n        resultValues.push(this.fonts['timer'].createTextImage(this.timeString(GameState.gameTimeSeconds)))\n        resultValues.push(this.fonts['score'].createTextImage(this.percentString(GameState.score)))\n        const gameResultTextImg = this.titleFont.createTextImage(resultText)\n        this.resultsLayer.onRedraw = (context) => {\n            context.clearRect(0, 0, this.resultsLayer.fixedWidth, this.resultsLayer.fixedHeight)\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const img = this.images[c]\n                if (img) context.drawImage(img.img, img.x, img.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const box = this.boxes[c]\n                if (box) context.drawImage(box.img, box.x, box.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const txt = this.cfg.texts[c]\n                const text = resultValues[c]\n                if (text) context.drawImage(text, txt.x - text.width / 2, txt.y)\n            }\n            context.drawImage(levelFullNameImg, this.resultsLayer.fixedWidth / 2 - levelFullNameImg.width / 2, this.cfg.vertSpacing - levelFullNameImg.height / 2)\n            context.drawImage(gameResultTextImg, this.resultsLayer.fixedWidth / 2 - gameResultTextImg.width / 2, this.cfg.vertSpacing + levelFullNameImg.height / 2)\n        }\n        this.descriptionTextLayer.onRedraw = (context) => {\n            const descriptionTextImg = this.texts[this.resultIndex]\n            context.clearRect(0, this.cfg.textPos[1], this.descriptionTextLayer.fixedWidth, this.descriptionTextLayer.fixedHeight - this.cfg.textPos[1])\n            const tx = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[0] : 305\n            const ty = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[1] : 195\n            context.drawImage(descriptionTextImg, tx - descriptionTextImg.width / 2, ty)\n        }\n        super.show()\n    }\n\n    percentString(actual, max = 1, lessIsMore: boolean = false) {\n        if (max === 0) max = 1\n        let value = Math.round(Math.max(Math.min(actual / max, 1), 0) * 100)\n        if (lessIsMore) value = 100 - value\n        return value.toString() + '%'\n    }\n\n    padLeft(value: string, padding = '0', length = 2) {\n        while (value.length < length) value = padding + value\n        return value\n    }\n\n    timeString(seconds: number) {\n        const ss = this.padLeft((seconds % 60).toString())\n        const minutes = Math.floor(seconds / 60)\n        const mm = this.padLeft(((minutes % 60).toString()))\n        const hh = this.padLeft((Math.floor(minutes / 60).toString()))\n        return hh + ':' + mm + ':' + ss\n    }\n\n    uncoverResult() {\n        this.uncoverTimeout = setTimeout(() => {\n            this.uncoverTimeout = null\n            this.resultIndex++\n            if (this.resultIndex < this.resultLastIndex) {\n                this.uncoverResult()\n            } else {\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n            }\n            this.redraw()\n        }, this.cfg.timer * 1000)\n    }\n\n}\n","import { ClearCacheButton } from '../site/clearcache/ClearCacheButton'\nimport { GithubBox } from '../site/github/github-box'\nimport { WadFileSelectionModal } from '../site/modal/WadFileSelectionModal'\nimport { getRandomInclusive } from './core/Util'\nimport { GameState } from './game/model/GameState'\nimport { DEV_MODE } from './params'\nimport { ResourceManager } from './resource/ResourceManager'\nimport { GameScreen } from './screen/GameScreen'\nimport { LoadingScreen } from './screen/LoadingScreen'\nimport { MainMenuScreen } from './screen/MainMenuScreen'\nimport { RewardScreen } from './screen/RewardScreen'\n\nif (DEV_MODE) console.warn('DEV MODE ACTIVE')\n\n// setup and link all components\n\nconst loadingScreen = new LoadingScreen()\nconst wadFileSelectModal = new WadFileSelectionModal('game-container')\nconst githubBox = new GithubBox('game-container')\nconst clearCacheButton = new ClearCacheButton('game-container')\n\nwadFileSelectModal.onStart = (wad0Url, wad1Url) => {\n    ResourceManager.startLoadingFromUrl(wad0Url, wad1Url)\n}\nResourceManager.onMessage = (msg: string) => {\n    loadingScreen.setLoadingMessage(msg)\n}\nResourceManager.onCacheMissed = () => {\n    wadFileSelectModal.show()\n}\nResourceManager.onInitialLoad = (totalResources: number) => {\n    wadFileSelectModal.hide()\n    loadingScreen.enableGraphicMode(totalResources)\n}\nResourceManager.onAssetLoaded = () => {\n    loadingScreen.increaseLoadingState()\n}\nResourceManager.onLoadDone = () => {\n    // complete setup\n    const mainMenuScreen = new MainMenuScreen()\n    const gameScreen = new GameScreen()\n    const rewardScreen = new RewardScreen()\n\n    mainMenuScreen.onLevelSelected = (levelName) => {\n        try {\n            gameScreen.startLevel(levelName)\n        } catch (e) {\n            console.error('Could not load level: ' + levelName, e)\n            gameScreen.hide()\n            mainMenuScreen.showLevelSelection()\n        }\n    }\n    gameScreen.onLevelEnd = () => {\n        gameScreen.hide()\n        rewardScreen.show()\n    }\n    rewardScreen.onAdvance = () => {\n        GameState.reset()\n        mainMenuScreen.showLevelSelection()\n    }\n\n    // setup complete\n    loadingScreen.hide()\n    githubBox.hide()\n    clearCacheButton.hide()\n    const params = new URLSearchParams(window.location.search)\n    const entry = params.get('entry')\n    if (DEV_MODE && entry) {\n        GameState.numOre = Number(params.get('numOre')) || 0\n        GameState.numCrystal = Number(params.get('numCrystal')) || 0\n        if (entry === 'level') mainMenuScreen.showLevelSelection()\n        else if (entry === 'reward') rewardScreen.show()\n        else if (entry === 'random') mainMenuScreen.selectLevel('Level' + (('00' + getRandomInclusive(1, 25)).substr(-2)))\n        else if (entry) mainMenuScreen.selectLevel(entry)\n    } else {\n        mainMenuScreen.showMainMenu()\n    }\n}\n\n// start the game engine with loading resources\n\nloadingScreen.show()\nResourceManager.startLoadingFromCache()\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\nimport { ScaledLayer } from './layer/ScreenLayer'\n\nexport class LoadingScreen extends BaseScreen {\n\n    layer: ScaledLayer\n    assetIndex: number = 0\n\n    constructor() {\n        super()\n        this.layer = this.addLayer(new ScaledLayer())\n    }\n\n    show() {\n        this.layers.forEach((layer) => {\n            if (layer !== this.cursorLayer) layer.show()\n        })\n        this.setLoadingMessage('Loading...')\n    }\n\n    setLoadingMessage(text) {\n        this.layer.onRedraw = (context) => {\n            // clear the screen to black\n            context.fillStyle = 'black'\n            context.fillRect(0, 0, this.layer.fixedWidth, this.layer.fixedHeight)\n            // draw the loading title\n            context.font = '24px Arial'\n            context.fillStyle = 'white'\n            context.fillText('Loading Rock Raiders', 20, this.layer.fixedHeight - 50)\n            // hard-code the first loading message\n            context.font = '18px Arial'\n            context.fillStyle = 'white'\n            context.fillText(text, 20, this.layer.fixedHeight - 20)\n        }\n        this.redraw()\n    }\n\n    enableGraphicMode(totalResources: number) {\n        const imgBackground = ResourceManager.getImage(ResourceManager.cfg('Main', 'LoadScreen'))\n        const imgProgress = ResourceManager.getImage(ResourceManager.cfg('Main', 'ProgressBar'))\n        const imgLoading = ResourceManager.getDefaultFont().createTextImage(ResourceManager.cfg('Main', 'LoadingText'))\n        this.layer.onRedraw = (context => {\n            context.drawImage(imgBackground, 0, 0)\n            const loadingBarWidth = 353 * (this.assetIndex < totalResources ? Math.round(this.assetIndex / totalResources) : 1)\n            context.drawImage(imgProgress, 142, 450, loadingBarWidth, 9)\n            context.drawImage(imgLoading, Math.round(320 - imgLoading.width / 2), Math.round(456 - imgLoading.height / 2))\n        })\n        this.cursorLayer.show()\n        this.redraw()\n    }\n\n    increaseLoadingState() {\n        this.assetIndex++\n        this.redraw()\n    }\n\n}\n","export const DEV_MODE = process.env.WEBPACK_MODE === 'development'\nexport const WAD_CACHE_DB_NAME = 'RockRaidersWeb'\nexport const JOB_SCHEDULE_INTERVAL = 1000 // milliseconds\nexport const CHECK_CLEARRUBBLE_INTERVAL = 5000 // milliseconds\nexport const JOB_ACTION_RANGE = 5\nexport const CHECK_SPANW_RAIDER_TIMER = 1000 // milliseconds\nexport const MAX_RAIDER_BASE = 12\nexport const MAX_RAIDER_REQUEST = 9\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10\nexport const UPDATE_OXYGEN_TIMER = 5000 // milliseconds\nexport const PANEL_ANIMATION_MULTIPLIER = 3\nexport const HEIGHT_MULTIPLER = 0.1\nexport const SEQUENCE_TEXTURE_FRAMERATE = 5\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640\nexport const SPRITE_RESOLUTION_HEIGHT = 480\nexport const TILESIZE = 40\nexport const NATIVE_FRAMERATE = 30\n"],"sourceRoot":""}