{"version":3,"sources":["webpack://rock-raiders-web/./site/modal/WadFileSelectionModal.ts","webpack://rock-raiders-web/./src/resource/wadworker/Resources.ts","webpack://rock-raiders-web/./src/resource/wadworker/InitLoadingMessage.ts","webpack://rock-raiders-web/./src/core/ImageHelper.js","webpack://rock-raiders-web/./src/resource/wadworker/WadUtil.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimationEntityType.ts","webpack://rock-raiders-web/./src/resource/LWOLoader.ts","webpack://rock-raiders-web/./src/game/model/Selectable.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimClip.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimSubObj.ts","webpack://rock-raiders-web/./src/resource/LWSCLoader.ts","webpack://rock-raiders-web/./src/scene/DebugHelper.ts","webpack://rock-raiders-web/./src/game/model/entity/building/Building.ts","webpack://rock-raiders-web/./src/scene/model/BaseEntity.ts","webpack://rock-raiders-web/./src/event/WorldEvents.ts","webpack://rock-raiders-web/./src/event/EventBus.ts","webpack://rock-raiders-web/./src/game/model/job/Job.ts","webpack://rock-raiders-web/./src/scene/model/collect/CollectableEntity.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimEntity.ts","webpack://rock-raiders-web/./src/scene/model/collect/Dynamite.ts","webpack://rock-raiders-web/./src/scene/model/collect/Crystal.ts","webpack://rock-raiders-web/./src/scene/model/collect/Ore.ts","webpack://rock-raiders-web/./src/event/EventManager.ts","webpack://rock-raiders-web/./src/scene/SceneManager.ts","webpack://rock-raiders-web/./src/resource/AnimEntityLoader.ts","webpack://rock-raiders-web/./src/core/BitmapFont.ts","webpack://rock-raiders-web/./src/resource/ResourceManager.ts","webpack://rock-raiders-web/./src/screen/ScreenLayer.ts","webpack://rock-raiders-web/./src/scene/model/map/Surface.ts","webpack://rock-raiders-web/./src/screen/BaseScreen.ts","webpack://rock-raiders-web/./src/screen/LoadingScreen.ts","webpack://rock-raiders-web/./src/menu/MainMenuBaseItem.ts","webpack://rock-raiders-web/./src/menu/MainMenuLabelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuIconButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLayer.ts","webpack://rock-raiders-web/./src/menu/MainMenuLevelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuPanel.ts","webpack://rock-raiders-web/./src/menu/MainMenuWindow.ts","webpack://rock-raiders-web/./src/menu/LevelSelectLayer.ts","webpack://rock-raiders-web/./src/screen/MainMenuScreen.ts","webpack://rock-raiders-web/./src/scene/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/game/model/job/SurfaceJob.ts","webpack://rock-raiders-web/./src/scene/model/map/SurfaceGeometry.ts","webpack://rock-raiders-web/./src/scene/model/map/astar.ts","webpack://rock-raiders-web/./src/scene/TerrainLoader.ts","webpack://rock-raiders-web/./src/scene/model/map/Terrain.ts","webpack://rock-raiders-web/./src/scene/model/FulfillerEntity.ts","webpack://rock-raiders-web/./src/scene/model/MovableEntity.ts","webpack://rock-raiders-web/./src/scene/model/Raider.ts","webpack://rock-raiders-web/./src/scene/model/BuildingEntity.ts","webpack://rock-raiders-web/./src/scene/ObjectListLoader.ts","webpack://rock-raiders-web/./src/core/NerpRunner.ts","webpack://rock-raiders-web/./src/core/NerpParser.ts","webpack://rock-raiders-web/./src/scene/WorldManager.ts","webpack://rock-raiders-web/./src/game/layer/SelectionLayer.ts","webpack://rock-raiders-web/./src/game/layer/GameLayer.ts","webpack://rock-raiders-web/./src/game/gui/base/BaseElement.ts","webpack://rock-raiders-web/./src/game/gui/base/button/Button.ts","webpack://rock-raiders-web/./src/game/gui/base/button/ButtonCfg.ts","webpack://rock-raiders-web/./src/game/gui/ingame/panel/Panel.ts","webpack://rock-raiders-web/./src/game/gui/ingame/panel/RadarPanel.ts","webpack://rock-raiders-web/./src/game/gui/ingame/panel/MessagePanel.ts","webpack://rock-raiders-web/./src/game/gui/ingame/panel/PanelCrystalSideBar.ts","webpack://rock-raiders-web/./src/game/gui/base/MenuItem.ts","webpack://rock-raiders-web/./src/game/gui/base/button/InterfaceBackButton.ts","webpack://rock-raiders-web/./src/game/gui/ingame/panel/IconPanel.ts","webpack://rock-raiders-web/./src/scene/model/BuildingSite.ts","webpack://rock-raiders-web/./src/game/gui/ingame/panel/MainPanel.ts","webpack://rock-raiders-web/./src/game/layer/GuiLayer.ts","webpack://rock-raiders-web/./src/game/Supervisor.ts","webpack://rock-raiders-web/./src/screen/GameScreen.ts","webpack://rock-raiders-web/./src/menu/RewardScreenButton.ts","webpack://rock-raiders-web/./src/screen/RewardScreen.ts","webpack://rock-raiders-web/./src/main.ts"],"names":["parentId","onStart","rootElement","document","getElementById","appendChild","createElement","classList","add","tabIndex","setAttribute","modalDialog","modalContent","modalHeader","modalTitle","innerText","id","modalBody","navTabList","navFileBtn","WadFileSelectionModal","appendNavButton","navUrlBtn","navTabContent","this","appendNavFileTab","appendNavUrlTab","modal","backdrop","keyboard","parent","active","controlTarget","navBtn","type","String","labelledBy","navFileTab","appendNavTab","wad0File","appendWadFileGroup","wad1File","btnStartFile","addEventListener","disabled","wad0FileUrl","URL","createObjectURL","files","wad1FileUrl","filename","wadFileGroup","wadFileLabel","innerHTML","wadFileInput","required","navUrlTab","urlHint","wad0Url","appendWadUrlGroup","wad1Url","btnStartUrl","value","navTab","example","wadUrlGroup","wadUrlLabel","wadUrlInput","show","hide","Worker_fn","Worker","createContext","width","height","console","error","result","y","x","fillStyle","fillRect","createDummyContext","canvas","context","getContext","createDummyImgData","ImageData","e","px","py","setPixel","imgData","r","g","b","a","n","data","getPixel","iGet","obj","keys","forEach","keyname","Object","filter","key","toLowerCase","map","url","strUrl","toString","replace","startsWith","substring","lastInd","lastIndexOf","decodeString","TextDecoder","decode","decodeFilepath","getRandomInclusive","min","max","Math","ceil","floor","random","getRandom","getRandomSign","carryNullName","mediumPoly","highPoly","fPPoly","activities","SURF_VTRN","getVector3AtOffset","view","offset","vector","getFloat32","z","SelectionType","path","verbose","materials","geometry","vertices","indices","uvs","log","parsePoints","chunkOffset","chunkSize","numVertices","Float32Array","i","vertexIndex","vertexOffset","parseSurfaceNames","buffer","surfaceNames","Uint8Array","split","s","length","new_material","name","side","push","parsePolygons","totalNumIndices","numIndices","getInt16","materialIndex","addGroup","currentIndex","Uint16Array","faceIndices","Int16Array","COUNTER_CLOCKWISE","parseSurface","getUint8","materialName","material","textureFlags","textureSize","textureCenter","subchunkOffset","subchunkType","getInt32","subchunkSize","colorArray","color","fromArray","join","flags","getUint16","luminosity","diffuse","specular","reflection","reflectivity","transparency","opacity","transparent","luminosity2","diffuse2","specular2","toArray","textureTypeName","textureColorArray","textureFilepath","sequenceTexture","endsWith","textureFilename","match","ResourceManager","filterTextureSequenceNames","setInterval","getTexture","alphaTest","warn","size","center","XAXIS_BIT","groups","group","start","count","uvIndex","u","v","planarMapUVS","parse","DataView","getUint32","fileSize","byteLength","ID4_SIZE","cursor","chunkType","setIndex","computeVertexNormals","magic","looping","transcoef","firstFrame","lastFrame","framesPerSecond","bodies","degToRad","relPos","relRot","relScale","parentObjInd","model","radVec","degX","degY","degZ","setFrameAndFollowing","animationFrameIndex","infos","c","setOpacityAndFollowing","animationClip","AnimClip","lines","lineIndex","content","l","trim","numOfModels","parseInt","line","parseFrameBlock","parseObjectBlock","parseLine","frameStep","subObj","AnimSubObj","slice","lwoBuffer","getResource","LWOLoader","lenInfos","lenFrames","Number","numOfInformationChannels","numOfKeyframes","frameNum","Stats","stats","setMode","domElement","style","position","left","top","body","visibility","renderStart","begin","renderDone","end","dropPosAngleDeg","dropPosDist","selfPowered","maxUpgrades","aeFile","getByName","buildingType","TOOLSTATION","TELEPORT_PAD","UPGRADE","POWER_STATION","SUPPORT","REFINERY","GEODOME","Building","EntityType","sequenceIntervals","getPosition","copy","getRotation","rotation","onDiscover","visible","publishEvent","event","blockedEvents","includes","eventKey","isLocal","eventListener","callback","index","indexOf","splice","registerEventListener","entityKey","GameEvent","job","WorldEvent","JobCreateEvent","JobEvent","JobDeleteEvent","numRequested","RaiderRequested","collectType","CollectEvent","surface","SpawnDynamiteEvent","collectable","spawnPosition","SpawnMaterialEvent","entity","EntityAddedEvent","EntityRemovedEvent","JobType","JobState","CollectableType","CollectTargetType","fulfiller","jobstate","OPEN","assign","unassign","cancel","CANCELED","stopJob","isQualified","onJobComplete","COMPLETE","item","CARRY","isInArea","pos","sub","JOB_ACTION_RANGE","carries","getTargetPos","getTargetType","getCollectableType","CRYSTAL","GameState","numCrystal","EventBus","ORE","numOre","BUILDING_SITE","targetSite","addItem","Job","target","MOVE","lengthSq","RAIDER_SPEED","collectableType","targetPos","complete","resetTarget","targetBuilding","site","getClosestSiteThatRequires","targetType","getClosestBuildingByType","getTargetBuildingTypes","getDropPosition","unAssign","collectablesUndiscovered","collectables","CollectJob","BaseEntity","GameResultState","SurfaceSelectedEvent","LocalEvent","building","BuildingSelected","raider","RaiderSelected","vehicle","VehicleSelected","EntityDeselected","entityType","poly","animation","animationTimeout","selectionFrame","pickSphere","pickSphereRadius","selectionFrameSize","carryJoint","setActivity","onAnimationDone","iterations","clearTimeout","activity","remove","children","polyModel","clone","polyPart","parentInd","animate","frameIndex","p","scale","hasOwnProperty","undefined","Array","isArray","mat","setTimeout","createPickSphere","setFromObject","getCenter","userData","selectable","ctx","strength","texture","selectionMaterial","depthTest","set","getAnimationEntityType","targetSurface","isExplodable","getDigPositions","DYNAMITE","ignite","worldMgr","sceneManager","scene","getCenterWorld","lookAt","collapse","AnimEntity","resource2","mesh2","SceneManager","registerMesh","emissive","depthWrite","resource","mesh","interval","clearInterval","CollectableEntity","MOUSE_BUTTON","POINTER_EVENT","KEY_EVENT","reset","resultState","RUNNING","levelFullName","numBrick","usedCrystals","neededCrystals","airlevel","selectedEntities","selectionType","buildings","buildingsUndiscovered","raiders","raidersUndiscovered","requestedRaiders","vehicles","vehiclesUndiscovered","buildingSites","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","discoveredCaverns","levelStartTime","levelStopTime","rewardConfig","getBuildingsByType","matches","buildingTypes","targetBuildings","closest","minDist","bPos","dist","needs","selectEntities","entities","deselect","select","len","GROUP","getSelectionType","getMaxRaiders","MAX_RAIDER_BASE","ADDITIONAL_RAIDER_PER_SUPPORT","discoverSurface","minX","TILESIZE","minZ","maxX","maxZ","discoverEntities","undiscovered","discovered","dropMaterial","quantity","Dynamite","Crystal","Ore","round","quota","importance","scoreCrystals","crystals","Infinity","scoreTimer","gameTimeSeconds","timer","scoreCaverns","caverns","scoreConstructions","constructions","scoreOxygen","oxygen","scoreFigures","figures","maxFps","debugHelper","DebugHelper","renderer","antialias","setClearColor","camera","controls","mouseButtons","LEFT","MIDDLE","RIGHT","selectEntitiesByRay","rx","ry","raycaster","setFromCamera","intersects","intersectObjects","terrain","floorGroup","selected","object","selectEntitiesInFrustum","r1x","r1y","r2x","r2y","startPoint","endPoint","EPSILON","updateProjectionMatrix","updateMatrixWorld","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","setFromMatrixPosition","matrixWorld","unproject","vectemp1","vectemp2","vectemp3","normalize","deep","MAX_VALUE","multiplyScalar","frustum","planes","setFromCoplanarPoints","normal","containsPoint","getSelectionCenter","setupScene","amb","cursorTorchlight","distance","startScene","renderInterval","animRequest","requestAnimationFrame","render","disposeScene","cancelAnimationFrame","dispose","meshRegistry","loadModels","root","getPath","AnimationEntityType","polyname","polykey","act","file","isLws","LWSCLoader","fontImageData","cols","rows","letters","chars","maxCharWidth","getActualCharacterWidth","rowPixelIndex","colPixelIndex","charHeight","extractData","actualWidth","startX","startY","alpha","createTextImage","text","letter","charAt","letterImg","letterX","letterImgData","img","putImageData","startLoadingFromCache","startLoading","startLoadingFromUrl","InitLoadingMessage","msg","worker","onmessage","onMessage","configuration","cfg","onInitialLoad","totalResources","onCacheMissed","resourceByName","assetName","assetObj","onAssetLoaded","assetIndex","loadingTimeSeconds","onLoadDone","postMessage","basename","lBasename","resourceName","lName","getImageData","imageName","lImageName","getImage","getImageOrNull","textureName","lTextureName","lSharedTextureName","needsUpdate","getMap","aeFilename","cfgRoot","AnimEntityLoader","getBitmapFont","BitmapFont","withContext","background","setZIndex","zIndex","compareZ","layerA","layerB","aIndex","bIndex","resize","redraw","isActive","onRedraw","toCanvasCoords","windowX","windowY","clientRect","getBoundingClientRect","handlePointerEvent","eventEnum","handleKeyEvent","handleWheelEvent","fixedWidth","SPRITE_RESOLUTION_WIDTH","fixedHeight","SPRITE_RESOLUTION_HEIGHT","toScaledCoords","cx","cy","scaleX","scaleY","ScreenLayer","cursorName","createCursor","curUrl","revokeObjectURL","curImg","toDataURL","ScaledLayer","WALL_TYPE","screen","gameCanvasContainer","isInRect","preventDefault","Map","DOWN","UP","eventType","nonBubblingClone","PointerEvent","bubbles","clientX","clientY","pointerType","button","ctrlKey","metaKey","shiftKey","layers","sort","some","WheelEvent","deltaX","deltaY","deltaZ","ratio","eventMgr","EventManager","window","onWindowResize","cursorLayer","addLayer","CursorLayer","layer","maxWidth","offsetWidth","maxHeight","offsetHeight","idealHeight","firstLayer","rect","right","bottom","font","fillText","setLoadingMessage","enableGraphicMode","imgBackground","imgProgress","screenZoom","loadingBarWidth","drawImage","setLoadingState","BaseScreen","scrollAffected","needsRedraw","hover","pressed","actionName","targetIndex","checkHover","sx","sy","onHoverChange","checkSetPressed","setReleased","draw","labelImgLo","labelImgHi","loFont","label","hiFont","autoCenter","MainMenuBaseItem","imgNormal","imgHover","imgPressed","tooltip","menuCfg","items","scrollY","fullName","title","menuFont","menuImage","titleImage","MainMenuLabelButton","MainMenuIconButton","displayTitle","absY","MAIN","showMainMenu","selectLevel","levelKey","canScroll","levelCfg","imgActive","imgInactive","imgCross","unlocked","frontEndX","frontEndY","menuBMP","frontEndOpen","area","w","h","imgFirstLine","imgSecondLine","setFirstLine","setSecondLine","modeLevel","levelsCfg","levelTextCfg","LevelTextCfg","MainMenuPanel","panelImgData","panelPos","levelTextWindow","MainMenuWindow","level","tutorial","levelsByName","levelButton","MainMenuLevelButton","MainMenuLayer","winCfg","panelCfg","onLevelSelected","menus","LevelSelectLayer","showLevelSelection","levelName","options","shaping","matIndex","drillable","explodable","reinforcable","getByNum","typeNum","SurfaceType","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","GROUND","POWER_PATH","POWER_PATH_SITE","requiredTools","requiredSkills","DRILL","SurfaceJobType","REINFORCE","BLOW","CLEAR_RUBBLE","workType","SURFACE","hasTools","hasSkills","digPos","getTerrainHeight","reinforce","reduceRubble","dynamite","SurfaceJob","placedItems","placed","surfaceType","updateTexture","create","wallType","topLeftVertex","bottomRightVertex","topRightVertex","bottomLeftVertex","topLeftHeight","topRightHeight","bottomRightHeight","bottomLeftHeight","uvOffset","INVERTED_CORNER","WALL","WEIRD_CREVICE","Boolean","uv","bufferVertices","bufferNormals","addFaceAndNormals","subVectors","cross","uvIndexes","bufferVertexUvs","bufferGeometry","BufferAttribute","copyVector3sArray","copyVector2sArray","heightOffset","containedOres","containedCrystals","reinforced","jobs","surfaceRotation","seamLevel","fallinTimeout","fallinGrp","needsMeshUpdate","surfaceJob","hasJobType","discoverNeighbors","foundCave","surf","getSurfaceOrNull","cancelJobs","getSurface","isSupported","updateSurfaceMeshes","updateWorldMatrix","addCollectable","dropContainedOre","dropAmount","updateJobColor","surfLeft","surfTopLeft","surfTop","surfTopRight","surfRight","surfBottomRight","surfBottom","surfBottomLeft","isHighGround","surf1","surf2","surf3","updateMesh","force","updateGeometry","cancelReinforceJobs","j","textureSet","texturebasename","updatePowerPathTexture","CORNER","accessMaterials","isPath","pathSum","PI","avgHeight","sum","cnt","args","SurfaceGeometry","HEIGHT_MULTIPLER","shininess","setHex","hasRubble","isWalkable","isDrillable","isReinforcable","isDigable","digPosition","setFallinLevel","fallinLevel","originPos","findFallInOrigin","findFallInTarget","scheduleFallin","targetX","targetY","createFallin","dx","dy","rotateOnAxis","atan2","m","pathTo","node","curr","unshift","PathMap","PredugMap","astar","search","graph","cleanDirty","heuristic","heuristics","manhattan","openHeap","BinaryHeap","f","closestNode","markDirty","currentNode","pop","closed","neighbors","il","neighbor","isWall","gScore","getCost","beenVisited","visited","rescoreElement","pos0","pos1","abs","diagonal","D2","sqrt","d1","d2","cleanNode","gridIn","nodes","grid","dirtyNodes","row","GridNode","init","ret","graphString","rowDebug","weight","fromNeighbor","scoreFunction","element","sinkDown","bubbleUp","parentN","elemScore","child2N","child1N","swap","child1Score","child1","child2","surfaces","roofGroup","graphWalk","cachedPaths","BUILDING","bSurf","getSurfaceFromWorld","worldPosition","Surface","Graph","clear","findPath","canFly","canSwim","startSurface","endSurface","cacheIdentifier","cachedPath","get","searchPath","startNode","endNode","worldPath","leftSurface","topSurface","rightSurface","bottomSurface","leftSurface2","topSurface2","rightSurface2","bottomSurface2","loadTerrain","levelConf","tileSize","blockSize","Terrain","themeName","terrainMap","pathMap","surfaceMap","predugMap","cryOreMap","fallinMap","erodeMap","surfaceTypeNum","predugLevel","CAVERN_EXPOSED","SLUG_HOLE_EXPOSED","SLUG_HOLE_HIDDEN","CAVERN_HIDDEN","pathMapLevel","NONE","RUBBLE","currentCryOre","FulfillerActivity","speed","pathToTarget","getSpeed","moveToTarget","equals","findPathToTarget","isOnRubble","changeActivity","MOVING_RUBBLE","MOVING","determineStep","pathStepTarget","step","setLength","shift","onChangeDone","workInterval","jobSubPos","tools","skills","carryTarget","work","bind","NATIVE_FRAMERATE","surfaceJobType","DRILLING","vec","applyAxisAngle","STANDING","jobPos","SHOVELING","dropItem","PICKING","pickupItem","DROPPING","setJob","toolnames","skillKeys","onSelect","MovableEntity","PILOT","isNaN","isOnPath","RAIDER","applyMatrix4","FulfillerEntity","powerSwitch","powerLink","spawning","upgrades","makeScale","dropPos","applyEuler","isPowered","hasMaxUpgrades","upgrade","loadObjectList","objectListConf","values","olObject","lTypeName","worldX","xPos","worldZ","yPos","worldY","radHeading","heading","update","setTorchPosition","Raider","BuildingEntity","path1Surface","pathOffset","path2Surface","debug","onLevelComplete","nerpInterval","registers","fill","timers","scriptLines","statements","macrosByName","labelsByName","halted","programCounter","messages","messagePermit","startExecution","that","execute","pauseExecution","checkRegister","register","num","Error","checkRegisterValue","getR","setR","addR","setTimer","Date","getTime","getTimer","setLevelCompleted","setLevelFail","FAILED","setTutorialFlags","setMessagePermit","messagesAllowed","setBuildingsUpgradeLevel","typeName","setToolStoreLevel","setTeleportPadLevel","setPowerStationLevel","setBarracksLevel","getToolStoresBuilt","getMinifiguresOnLevel","getCrystalsCurrentlyStored","getObjectiveSwitch","setMessageTimerValues","arg1","arg2","arg3","getMessageTimer","cameraUnlock","setMessage","messageNumber","arrowDisabled","txt","setCameraGotoTutorial","getTutorialBlockIsGround","getTutorialBlockIsPath","getUnitAtBlock","getOxygenLevel","getObjectiveShowing","addPoweredCrystals","disallowAll","getPoweredPowerStationsBuilt","getPoweredBarracksBuilt","getRecordObjectAtTutorial","getHiddenObjectsFound","callMethod","methodName","methodArgs","setRegisterMatch","addRegisterMatch","getRegisterMatch","setTimerMatch","getTimerMatch","lMethodName","memberName","apply","conditional","conditionResult","executeStatement","expression","invoke","argValues","comparator","jump","statement","nerpScript","nerpRunner","NerpRunner","includeName","includedRunner","NerpParser","concat","firstLine","macroLines","mLine","append","macroLine","macroCall","replaceMacros","labelMatch","preProcess","labelName","macro","RegExp","number","opSplit","brackets","spaceSplit","jumpMatch","spawnRaiderInterval","checkSpawnRaiders","CHECK_SPANW_RAIDER_TIMER","DynamiteJob","setup","gameScreen","reward","TerrainLoader","oListFile","ObjectListLoader","nerpFile","nerpMessageFile","onLevelEnd","now","stop","setSize","getTerrainIntersectionPoint","point","intersect","intersectObject","spawnBuildings","station","walkOutPos","MoveJob","selectStart","setWorldManager","worldManager","startSelection","changeSelection","screenX","screenY","clearRect","strokeStyle","lineWidth","strokeRect","intersectionPoint","getTerrainPositionFromEvent","SECONDARY","createSurfaceJob","dispatchEvent","t","surfJob","relX","relY","hidden","addChild","child","updatePosition","drawHover","drawTooltip","onClick","isInactive","inRect","updated","checkClick","checkRelease","release","notifyRedraw","btnCfg","buttonType","normalFile","highlightFile","pressedFile","textAlign","BaseElement","panelName","panelsCfg","buttonsCfg","imgName","xIn","yIn","xOut","yOut","buttons","movedIn","panelButtonsCfg","addButton","Button","ButtonCfg","updateAnimation","onDone","diffX","diffY","sign","setMovedIn","toggleState","PANEL_ANIMATION_MULTIPLIER","btnPriorities","Panel","btnGoto","btnClose","overlay","btnToggle","btnMap","btnTagged","imgAir","btnOre","btnCrystal","imgNoCrystal","imgSmallCrystal","imgUsedCrystal","imgOre","updateQuantities","BRICK","curX","curY","imgCrystal","panel","menuItemGroup","itemKey","disabledFile","menuItemCfg","tooltipDisabled","hotkey","imgDisabled","subPanels","addSubPanel","numOfItems","childPanel","IconSubPanel","mainPanel","selectSubPanel","targetPanel","subPanel","onBackPanel","countMenuItems","backBtn","backBtnCfg","InterfaceBackButton","frameImgCfg","imgNameWoBackName","addMenuItem","menuItem","MenuItem","isPowerPath","neededByType","assignedByType","onSiteByType","assigned","needed","checkComplete","neededType","CompletePowerPathJob","buildingPanel","smallVehiclePanel","largeVehiclePanel","selectWallPanel","selectFloorPanel","selectRubblePanel","selectBuildingPanel","selectRaiderPanel","selectVehiclePanel","teleportRaider","buildingItem","smallVehicleItem","largeVehicleItem","itemDrill","selectedSurface","itemReinforce","itemDynamite","itemDeselect","pathItem","ore","BuildingSite","clearRubbleItem","upgradeItem","IconPanel","panelEncyclopedia","addPanel","panelInfoDock","InfoDockPanel","panelCameraControl","panelPriorityList","panelInformation","panelTopPanel","TopPanel","panelMain","MainPanel","panelCrystalSideBar","PanelCrystalSideBar","panelMessagesSide","panelMessages","MessagePanel","panelRadar","RadarPanel","hit","scheduleJobs","JOB_SCHEDULE_INTERVAL","closestRaider","minDistance","gameLayer","GameLayer","selectionLayer","SelectionLayer","guiLayer","GuiLayer","WorldManager","jobSupervisor","Supervisor","startLevel","conf","imgNormalFilepath","imgHoverFilepath","imgPressedFilepath","imgDisabledFilepath","resultIndex","resultLastIndex","images","boxes","fonts","texts","uncoverTimeout","titleFont","backgroundImg","wallpaper","filePath","boxImages","fontKey","labelFont","backFont","resultsLayer","btnSave","btnAdvance","descriptionTextLayer","btnLayer","RewardScreenButton","saveButton","advanceButton","onAdvance","uncoverResult","levelFullNameImg","resultText","quitText","completeText","failedText","resultValues","percentString","timeString","score","gameResultTextImg","box","vertSpacing","descriptionTextImg","textPos","tx","ty","actual","lessIsMore","padLeft","padding","seconds","ss","minutes","mm","loadingScreen","LoadingScreen","wadfileSelectModal","mainMenuScreen","MainMenuScreen","GameScreen","rewardScreen","RewardScreen"],"mappings":"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","file":"322.index.js","sourcesContent":["import { Modal } from 'bootstrap'\n\nexport class WadFileSelectionModal {\n\n    public onStart: (wad0Url, wad1Url) => any = null\n\n    private readonly modal: Modal\n\n    constructor(parentId: string) {\n        const rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        rootElement.classList.add('modal')\n        rootElement.tabIndex = -1\n        rootElement.setAttribute('role', 'dialog')\n        rootElement.setAttribute('aria-hidden', 'true')\n\n        const modalDialog = rootElement.appendChild(document.createElement('div'))\n        modalDialog.classList.add('modal-dialog')\n        rootElement.setAttribute('role', 'document')\n\n        const modalContent = modalDialog.appendChild(document.createElement('div'))\n        modalContent.classList.add('modal-content')\n\n        const modalHeader = modalContent.appendChild(document.createElement('div'))\n        modalHeader.classList.add('modal-header')\n        const modalTitle = modalHeader.appendChild(document.createElement('h5'))\n        modalTitle.classList.add('modal-title')\n        modalTitle.innerText = 'Load .wad files'\n        modalTitle.id = 'wadfileSelectModalLabel'\n        rootElement.setAttribute('aria-labelledby', modalTitle.id)\n\n        const modalBody = modalContent.appendChild(document.createElement('div'))\n        modalBody.classList.add('modal-body')\n\n        const hint = modalBody.appendChild(document.createElement('p'))\n        hint.innerText = 'Assets not included! In order to play the game, please select the game files.'\n\n        const navTabs = modalBody.appendChild(document.createElement('nav'))\n        const navTabList = navTabs.appendChild(document.createElement('div'))\n        navTabList.id = 'nav-tab'\n        navTabList.classList.add('nav', 'nav-tabs')\n        navTabList.setAttribute('role', 'tablist')\n\n        const navFileBtn = WadFileSelectionModal.appendNavButton(navTabList, true, 'nav-file-tab', 'nav-file', 'Local files (recommended)')\n        const navUrlBtn = WadFileSelectionModal.appendNavButton(navTabList, false, 'nav-url-tab', 'nav-url', 'Online from URL')\n\n        const navTabContent = modalBody.appendChild(document.createElement('div'))\n        navTabContent.classList.add('tab-content')\n        this.appendNavFileTab(navTabContent, navFileBtn.id)\n        this.appendNavUrlTab(navTabContent, navUrlBtn.id)\n\n        // rootElement has to be a valid bootstrap HTML modal before we can instantiate it\n        this.modal = new Modal(rootElement, {backdrop: 'static', keyboard: false})\n    }\n\n    private static appendNavButton(parent: HTMLDivElement, active: boolean, id: string, controlTarget: string, innerText: string) {\n        const navBtn = parent.appendChild(document.createElement('button'))\n        navBtn.classList.add('nav-link')\n        if (active) navBtn.classList.add('active')\n        navBtn.id = id\n        navBtn.setAttribute('data-bs-toggle', 'tab')\n        navBtn.setAttribute('data-bs-target', '#' + controlTarget)\n        navBtn.type = 'button'\n        navBtn.setAttribute('role', 'tab')\n        navBtn.setAttribute('aria-controls', controlTarget)\n        navBtn.setAttribute('aria-selected', String(active))\n        navBtn.innerText = innerText\n        return navBtn\n    }\n\n    private appendNavFileTab(parent: HTMLDivElement, labelledBy: string) {\n        const navFileTab = WadFileSelectionModal.appendNavTab(parent, true, 'nav-file', labelledBy)\n\n        const wad0File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad0-file', 'LegoRR0.wad')\n        const wad1File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad1-file', 'LegoRR1.wad')\n\n        const btnStartFile = navFileTab.appendChild(document.createElement('button'))\n        btnStartFile.type = 'submit'\n        btnStartFile.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartFile.id = 'button-start-file'\n        btnStartFile.innerText = 'Start Game'\n        btnStartFile.addEventListener('click', () => {\n            btnStartFile.disabled = true\n            const wad0FileUrl = URL.createObjectURL(wad0File.files[0])\n            const wad1FileUrl = URL.createObjectURL(wad1File.files[0])\n            this.onStart(wad0FileUrl, wad1FileUrl)\n        })\n    }\n\n    private static appendWadFileGroup(parent: HTMLDivElement, id: string, filename: string) {\n        const wadFileGroup = parent.appendChild(document.createElement('div'))\n        wadFileGroup.classList.add('my-3')\n        const wadFileLabel = wadFileGroup.appendChild(document.createElement('label'))\n        wadFileLabel.setAttribute('for', id)\n        wadFileLabel.classList.add('form-label')\n        wadFileLabel.innerHTML = 'Select <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadFileInput = wadFileGroup.appendChild(document.createElement('input'))\n        wadFileInput.type = 'file'\n        wadFileInput.classList.add('form-control')\n        wadFileInput.id = id\n        wadFileInput.required = true\n        return wadFileInput\n    }\n\n    private appendNavUrlTab(parent: HTMLDivElement, labelledBy: string) {\n        const navUrlTab = WadFileSelectionModal.appendNavTab(parent, false, 'nav-url', labelledBy)\n\n        const urlHint = navUrlTab.appendChild(document.createElement('div'))\n        urlHint.classList.add('my-3')\n        urlHint.innerText = 'Direct links with correct Allow-Origin-CORS-Headers required here.'\n\n        const wad0Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad0-url', 'LegoRR0.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n        const wad1Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad1-url', 'LegoRR1.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n\n        const btnStartUrl = navUrlTab.appendChild(document.createElement('button'))\n        btnStartUrl.type = 'submit'\n        btnStartUrl.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartUrl.id = 'button-start-url'\n        btnStartUrl.innerText = 'Start Game'\n        btnStartUrl.addEventListener('click', () => {\n            btnStartUrl.disabled = true\n            // TODO show loading progress for WAD files\n            this.onStart(wad0Url.value, wad1Url.value)\n        })\n    }\n\n    private static appendNavTab(parent: HTMLDivElement, active: boolean, id: string, labelledBy: string) {\n        const navTab = parent.appendChild(document.createElement('div'))\n        navTab.classList.add('tab-pane', 'fade')\n        if (active) navTab.classList.add('show', 'active')\n        navTab.id = id\n        navTab.setAttribute('role', 'tabpanel')\n        navTab.setAttribute('aria-labelledby', labelledBy)\n        return navTab\n    }\n\n    private static appendWadUrlGroup(parent: HTMLDivElement, id: string, filename: string, example: string) {\n        const wadUrlGroup = parent.appendChild(document.createElement('div'))\n        wadUrlGroup.classList.add('my-3')\n        const wadUrlLabel = wadUrlGroup.appendChild(document.createElement('label'))\n        wadUrlLabel.setAttribute('for', id)\n        wadUrlLabel.classList.add('form-label')\n        wadUrlLabel.innerHTML = 'Enter url for <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadUrlInput = wadUrlGroup.appendChild(document.createElement('input'))\n        wadUrlInput.type = 'url'\n        wadUrlInput.classList.add('form-control')\n        wadUrlInput.id = id\n        wadUrlInput.required = true\n        wadUrlInput.value = example\n        return wadUrlInput\n    }\n\n    public show() {\n        this.modal.show()\n    }\n\n    public hide() {\n        this.modal.hide()\n    }\n\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"index.worker.js\");\n}\n","export class InitLoadingMessage {\n\n    wad0FileUrl: string\n    wad1FileUrl: string\n\n    constructor(wad0FileUrl: string, wad1FileUrl: string) {\n        this.wad0FileUrl = wad0FileUrl\n        this.wad1FileUrl = wad1FileUrl\n    }\n\n}\n","/**\n * creates a new context with the specified dimensions.\n * @param width: the desired width of the new context\n * @param height: the desired height of the new context\n * @returns RenderingContext the newly created canvas\n */\nexport function createContext(width, height) {\n    if (width < 1 || height < 1) {\n        console.error('Can\\'t create context with size ' + width + ' x ' + height);\n        return createDummyContext(64, 64);\n    }\n    const canvas = document.createElement('canvas');\n    canvas.setAttribute('width', width);\n    canvas.setAttribute('height', height);\n    const context = canvas.getContext('2d');\n    context.width = width;\n    context.height = height;\n    return context;\n}\n\n/**\n * This method is intended to increase stability by providing an (ugly) placeholder image in case the right one is missing\n * @param width: expected width of the original image\n * @param height: expected height of the original image\n */\nexport function createDummyContext(width, height) {\n    const result = createContext(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            if (x / 16 % 2 === y / 16 % 2) {\n                result.fillStyle = 'rgb(0,255,255)';\n            } else {\n                result.fillStyle = 'rgb(255,0,255)';\n            }\n            result.fillRect(x, y, 16, 16);\n        }\n    }\n    return result;\n}\n\nexport function createDummyImgData(width, height) {\n    const result = new ImageData(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            const e = x / 16 % 2 === y / 16 % 2;\n            for (let px = x; px < x + 16; px++) {\n                for (let py = y; py < y + 16; py++) {\n                    setPixel(result, px, py, e ? 0 : 255, e ? 255 : 0, 255);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport function setPixel(imgData, x, y, r, g, b, a = 255) {\n    const n = (y * imgData.width + x) * 4;\n    imgData.data[n] = r;\n    imgData.data[n + 1] = g;\n    imgData.data[n + 2] = b;\n    imgData.data[n + 3] = a;\n}\n\nexport function getPixel(imgData, x, y) {\n    const n = (y * imgData.width + x) * 4;\n    return {r: imgData.data[n], g: imgData.data[n + 1], b: imgData.data[n + 2], a: imgData.data[n + 3]};\n}\n\nexport function copyPixel(originData, targetData, x, y) {\n    const p = getPixel(originData);\n    setPixel(targetData, p.r, p.g, p.b, p.a);\n}\n","export function getPath(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n","export function getFilename(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '')\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/')\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max)\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2\n}\n","export class AnimationEntityType {\n\n    carryNullName: string = ''\n    mediumPoly: {} = {}\n    highPoly: {} = {}\n    fPPoly: {} = {}\n    activities = {}\n\n}\n","/**\n * @author Marcus-Bizal https://github.com/marcbizal\n * patched by Scarabol\n *\n * This loader loads LWOB files exported from LW6.\n *\n * Support\n *  -\n */\n\nimport { BufferAttribute, BufferGeometry, Color, DoubleSide, Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { decodeFilepath, decodeString, getFilename } from '../core/Util'\nimport { ResourceManager } from './ResourceManager'\n\n// HEADER SPEC //\nconst LWO_MAGIC = 0x4C574F42 // \"LWOB\"\nconst OFF_MAGIC = 8\n\n/********************/\n/* TYPE SIZES START */\n/********************/\n\nconst ID4_SIZE = 4\nconst I1_SIZE = 1\nconst I2_SIZE = 2\nconst I4_SIZE = 4\nconst F4_SIZE = 4\n\nconst COL4_SIZE = 4\nconst VEC12_SIZE = 12\nconst IP2_SIZE = 2\nconst FP4_SIZE = 4\nconst DEG4_SIZE = 4\n\n/********************/\n/*  TYPE SIZES END  */\n/********************/\n\n/*********************/\n/* CHUNK TYPES START */\n/*********************/\n\nconst LWO_FORM = 0x464F524D\nconst LWO_PNTS = 0x504E5453\nconst LWO_SFRS = 0x53524653\nconst LWO_POLS = 0x504F4C53\nconst LWO_CRVS = 0x43525653\nconst LWO_PCHS = 0x50434853\nconst LWO_SURF = 0x53555246\n\nconst CHUNK_HEADER_SIZE = 8\nconst SUBCHUNK_HEADER_SIZE = 6\n\n/*********************/\n/*  CHUNK TYPES END  */\n/*********************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\nconst SURF_COLR = 0x434F4C52\nconst SURF_FLAG = 0x464C4147\n\n// Base Shading Values (Fixed Point)\nconst SURF_LUMI = 0x4C554D49\nconst SURF_DIFF = 0x44494646\nconst SURF_SPEC = 0x53504543\nconst SURF_REFL = 0x5245464C\nconst SURF_TRAN = 0x5452414E\n\n// Base Shading Values (Floating Point)\nconst SURF_VLUM = 0x564C554D\nconst SURF_VDIF = 0x56444946\nconst SURF_VSPC = 0x56535043\nconst SURF_VRFL = 0x5646524C\nconst SURF_VTRN = 0x5654524E\n\nconst SURF_GLOS = 0x474C4F53\nconst SURF_RFLT = 0x52464C54\nconst SURF_RIMG = 0x52494D47\nconst SURF_RIND = 0x52494E44\nconst SURF_EDGE = 0x45444745\nconst SURF_SMAN = 0x534D414E\n\n/**************************/\n/*  SURF DEFINITIONS END  */\n/**************************/\n\n/*****************************/\n/* TEXTURE DEFINITIONS START */\n/*****************************/\n\n// Start of Definition\nconst SURF_CTEX = 0x43544558\nconst SURF_DTEX = 0x44544558\nconst SURF_STEX = 0x53544558\nconst SURF_RTEX = 0x52544558\nconst SURF_TTEX = 0x54544558\nconst SURF_LTEX = 0x4C544558\nconst SURF_BTEX = 0x42544558\n\n// Flags\nconst SURF_TFLG = 0x54464C47\n\n// Location and Size\nconst SURF_TSIZ = 0x5453495A\nconst SURF_TCTR = 0x54435452\nconst SURF_TFAL = 0x5446414C\nconst SURF_TVEL = 0x5456454C\n\n// Color\nconst SURF_TCLR = 0x54434C52\n\n// Value\nconst SURF_TVAL = 0x54434C52\n\n// Bump Amplitude\nconst SURF_TAMP = 0x54414D50\n\n// Image Map\nconst SURF_TIMG = 0x54494D47\n\n// Image Alpha\nconst SURF_TALP = 0x54414C50\n\n// Image Wrap Options\nconst SURF_TWRP = 0x54575250\n\n// Antialiasing Strength\nconst SURF_TAAS = 0x54414153\n\n// Texture Opacity\nconst SURF_TOPC = 0x544F5043\n\n/*****************************/\n/*  TEXTURE DEFINITIONS END  */\n/*****************************/\n\n/*************************/\n/* FLAG DEFINITION START */\n/*************************/\n\nconst LUMINOUS_BIT = 1\nconst OUTLINE_BIT = 2\nconst SMOOTHING_BIT = 4\nconst COLORHIGHLIGHTS_BIT = 8\nconst COLORFILTER_BIT = 16\nconst OPAQUEEDGE_BIT = 32\nconst TRANSPARENTEDGE_BIT = 64\nconst SHARPTERMINATOR_BIT = 128\nconst DOUBLESIDED_BIT = 256\nconst ADDITIVE_BIT = 512\nconst SHADOWALPHA_BIT = 1024\n\n/*************************/\n/*  FLAG DEFINITION END  */\n/*************************/\n\n/*************************/\n/* TFLG DEFINITION START */\n/*************************/\n\nconst XAXIS_BIT = 1\nconst YAXIS_BIT = 2\nconst ZAXIS_BIT = 4\nconst WORLDCOORDS_BIT = 8\nconst NEGATIVEIMAGE_BIT = 16\nconst PIXELBLENDING_BIT = 32\nconst ANTIALIASING_BIT = 64\n\n/*************************/\n/*  TFLG DEFINITION END  */\n\n/*************************/\n\nfunction getVector3AtOffset(view, offset) {\n    let vector = new Vector3()\n    vector.x = view.getFloat32(offset)\n    vector.y = view.getFloat32(offset + F4_SIZE)\n    vector.z = view.getFloat32(offset + (F4_SIZE * 2))\n    return vector\n}\n\nfunction planarMapUVS(geometry, vertices, uvs, indices, materialIndex, size, center, flags) {\n    // Check to ensure that one of the flags is set, if not throw an error.\n    const mask = XAXIS_BIT | YAXIS_BIT | ZAXIS_BIT\n    if (flags & mask) {\n        for (let group of geometry.groups) {\n            if (group.materialIndex !== materialIndex) continue\n\n            for (let i = group.start; i < group.start + group.count; i++) {\n\n                let vertexIndex = indices[i] * 3\n                let x = vertices[vertexIndex] - center.x\n                let y = vertices[vertexIndex + 1] - center.y\n                let z = vertices[vertexIndex + 2] - center.z\n\n                let uvIndex = indices[i] * 2\n                let u = 0\n                let v = 0\n\n                if (flags & XAXIS_BIT) {\n                    u = z / size.z + 0.5\n                    v = y / size.y + 0.5\n                } else if (flags & YAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = z / size.z + 0.5\n                } else if (flags & ZAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = y / size.y + 0.5\n                }\n\n                uvs[uvIndex] = u\n                uvs[uvIndex + 1] = v\n            }\n        }\n    } else {\n        // console.warn(\"LWOLoader.planarMapUVS: No axis bit is set!\"); // TODO what is this about\n    }\n}\n\nexport class LWOLoader {\n\n    COUNTER_CLOCKWISE: false\n\n    path: string = ''\n    verbose: boolean = false\n    materials: MeshPhongMaterial[] = []\n    geometry: BufferGeometry = new BufferGeometry()\n    vertices: Float32Array = null\n    indices: Uint16Array = null\n    uvs: Float32Array = null\n\n    constructor(path: string, verbose: boolean = false) {\n        this.verbose = verbose\n        this.path = path\n        if (this.verbose) console.log('LWO path: ' + this.path)\n    }\n\n    parsePoints(view, chunkOffset, chunkSize) {\n        if (chunkSize % VEC12_SIZE !== 0) {\n            console.error('LWOLoader.parse: F12 does not evenly divide into chunk size (' + chunkSize + '). Possible corruption.')\n            return\n        }\n\n        let numVertices = (chunkSize / F4_SIZE) / 3\n        this.vertices = new Float32Array(numVertices * 3)\n        this.uvs = new Float32Array(numVertices * 2)\n\n        for (let i = 0; i < numVertices; i++) {\n            let vertexIndex = i * 3\n            let vertexOffset = vertexIndex * F4_SIZE\n            this.vertices[vertexIndex] = view.getFloat32(chunkOffset + vertexOffset) \t\t\t\t// x\n            this.vertices[vertexIndex + 1] = view.getFloat32(chunkOffset + vertexOffset + F4_SIZE) \t// y\n            this.vertices[vertexIndex + 2] = view.getFloat32(chunkOffset + vertexOffset + (F4_SIZE * 2)) \t// z\n        }\n    }\n\n    parseSurfaceNames(buffer, chunkOffset, chunkSize) {\n        let textChunk = new TextDecoder().decode(new Uint8Array(buffer, chunkOffset, chunkSize))\n        let surfaceNames = textChunk.split('\\0').filter(function (s) {\n            return s !== ''\n        })\n\n        for (let i = 0; i < surfaceNames.length; i++) {\n            const new_material = new MeshPhongMaterial()\n            new_material.name = surfaceNames[i]\n            new_material.side = DoubleSide\n\n            this.materials.push(new_material)\n        }\n        if (this.verbose) console.log('LWO contains ' + this.materials.length + ' materials with following names: ' + surfaceNames)\n    }\n\n    parsePolygons(view, chunkOffset, chunkSize) {\n        // Gather some initial data so that we can get the proper size\n        let totalNumIndices = 0\n        let offset = 0\n        while (offset < chunkSize) {\n            const numIndices = view.getInt16(chunkOffset + offset)\n            const materialIndex = view.getInt16(chunkOffset + offset + 2 + (numIndices * 2))\n\n            this.geometry.addGroup(totalNumIndices, (numIndices - 2) * 3, materialIndex - 1)\n\n            totalNumIndices += (numIndices - 2) * 3\n            offset += 4 + (numIndices * 2)\n        }\n\n        offset = 0\n        let currentIndex = 0\n        this.indices = new Uint16Array(totalNumIndices)\n        while (offset < chunkSize) {\n            let numIndices = view.getInt16(chunkOffset + offset)\n\n            offset += 2\n\n            let faceIndices = new Int16Array(numIndices)\n            for (let i = 0; i <= numIndices; i++) {\n                faceIndices[i] = view.getInt16(chunkOffset + offset + (i * 2))\n            }\n\n            for (let i = 0; i < numIndices - 2; i++) {\n                if (this.COUNTER_CLOCKWISE) {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                } else {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                }\n            }\n\n            offset += 2 + (numIndices * 2)\n        }\n    }\n\n    parseSurface(view, buffer, chunkOffset, chunkSize) {\n        let offset = 0\n        while (view.getUint8(chunkOffset + offset) !== 0) offset++\n\n        let materialName = decodeString(new Uint8Array(buffer, chunkOffset, offset))\n        if (this.verbose) console.log('Parsing surface: ' + materialName)\n        let materialIndex = -1\n        let material: MeshPhongMaterial = null\n\n        let textureFlags = 0\n        let textureSize = new Vector3(0, 0, 0)\n        let textureCenter = new Vector3(0, 0, 0)\n        // let textureFalloff = new Vector3(0, 0, 0);\n        // let textureVelocity = new Vector3(0, 0, 0);\n\n        for (let i = 0; i < this.materials.length; i++) {\n            if (this.materials[i].name === materialName) {\n                materialIndex = i\n                material = this.materials[i]\n            }\n        }\n\n        if (!material) {\n            console.error('LWOLoader.parse: Surface in SURF chunk does not exist in SRFS')\n            return\n        }\n\n        while (offset < chunkSize) {\n            const subchunkOffset = chunkOffset + offset\n            if (view.getUint8(subchunkOffset) === 0) {\n                offset++\n            } else {\n                const subchunkType = view.getInt32(subchunkOffset)\n                const subchunkSize = view.getInt16(subchunkOffset + ID4_SIZE)\n\n                if (this.verbose) console.log('Parsing subchunk ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n\n                switch (subchunkType) {\n                    case SURF_COLR:\n                        const colorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        material.color = new Color().fromArray(colorArray)\n                        if (this.verbose) console.log('Material color (COLR): ' + colorArray.join(' '))\n                        break\n                    case SURF_FLAG:\n                        const flags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (FLAG): ' + flags.toString(2))\n                        break\n                    case SURF_LUMI:\n                        const luminosity = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        if (this.verbose) console.log('Luminosity (LUMI): ' + luminosity)\n                        break\n                    case SURF_DIFF:\n                        const diffuse = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        if (this.verbose) console.log('Diffuse (DIFF): ' + diffuse)\n                        break\n                    case SURF_SPEC:\n                        const specular = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        // material.specular = material.color.multiplyScalar(specular);\n                        if (this.verbose) console.log('Specular (SPEC): ' + specular)\n                        break\n                    case SURF_REFL:\n                        let reflection = 0\n                        if (reflection === SURF_VRFL) {\n                            reflection = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            reflection = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        }\n                        material.reflectivity = reflection\n                        if (this.verbose) console.log('Reflectivity (REFL): ' + material.reflectivity)\n                        break\n                    case SURF_TRAN:\n                    case SURF_VTRN:\n                        let transparency = 0\n                        if (subchunkType === SURF_VTRN) {\n                            transparency = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            transparency = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        }\n                        material.opacity = 1 - transparency\n                        if (this.verbose) console.log('Opacity (TRAN/VTRN): ' + material.opacity)\n                        if (transparency > 0) material.transparent = true\n                        break\n                    case SURF_VLUM:\n                        const luminosity2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Luminosity (VLUM): ' + luminosity2)\n                        break\n                    case SURF_VDIF:\n                        let diffuse2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Diffuse (VDIF): ' + diffuse2)\n                        break\n                    case SURF_VSPC:\n                        let specular2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        // material.specular = material.color.multiplyScalar(specular2);\n                        if (this.verbose) console.log('Specular (VSPC): ' + specular2)\n                        break\n                    case SURF_TFLG:\n                        textureFlags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (TFLG): ' + textureFlags.toString(2))\n                        break\n                    case SURF_TSIZ:\n                        textureSize = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Texture size (TSIZ): ' + textureSize.toArray().join(' '))\n                        break\n                    case SURF_TCTR:\n                        textureCenter = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Texture center (TCTR): ' + textureCenter.toArray().join(' '))\n                        break\n                    case SURF_CTEX:\n                    case SURF_DTEX:\n                    case SURF_STEX:\n                    case SURF_RTEX:\n                    case SURF_TTEX:\n                    case SURF_BTEX:\n                        const textureTypeName = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture typename: ' + textureTypeName)\n                        break\n                    case SURF_TCLR:\n                        const textureColorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        // const textureColor = new Color().fromArray(textureColorArray);\n                        // seems to be 0 0 0 anyway...\n                        if (this.verbose) console.log('Texture color (TCLR): ' + textureColorArray.join(' '))\n                        break\n                    case SURF_TIMG:\n                        let textureFilepath = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture filepath (TIMG): ' + textureFilepath)\n                        if (textureFilepath === '(none)') break\n                        let sequenceTexture = false\n                        if (textureFilepath.endsWith(' (sequence)')) {\n                            sequenceTexture = true\n                            textureFilepath = textureFilepath.substring(0, textureFilepath.length - ' (sequence)'.length)\n                        }\n                        let filename = getFilename(textureFilepath)\n                        const textureFilename = this.path + filename\n                        if (sequenceTexture) {\n                            const match = textureFilename.match(/(\\D+)0+(\\d+)\\..+/)\n                            const sequenceNames = ResourceManager.filterTextureSequenceNames(match[1])\n                            let seqNum = 0\n                            setInterval(() => { // TODO need to keep track on these intervals?\n                                material.map = ResourceManager.getTexture(sequenceNames[seqNum])\n                                seqNum++\n                                if (seqNum >= sequenceNames.length) seqNum = 0\n                            }, 1000 / 5) // TODO 5? FPS for texture animations?\n                            material.transparent = true\n                        }\n                        material.map = ResourceManager.getTexture(textureFilename)\n                        material.alphaTest = material.transparent ? 0 : 0.5\n                        material.color = null // no need for color, when color map (texture) in use\n                        break\n                    default: // TODO implement all LWO features\n                        if (this.verbose) console.warn('Found unrecognised SURF subchunk type ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n                        break\n                }\n\n                offset += SUBCHUNK_HEADER_SIZE + subchunkSize\n            }\n        }\n\n        planarMapUVS(this.geometry, this.vertices, this.uvs, this.indices, materialIndex, textureSize, textureCenter, textureFlags)\n    }\n\n    parse(buffer: ArrayBuffer): Mesh {\n        const view = new DataView(buffer)\n\n        if (view.getUint32(0) !== LWO_FORM) {\n            console.error('LWOLoader.parse: Cannot find header.')\n            return\n        }\n\n        const fileSize = view.getUint32(ID4_SIZE)\n        if (fileSize + CHUNK_HEADER_SIZE !== view.byteLength) {\n            console.warn('LWOLoader.parse: Discrepancy between size in header (' + (fileSize + CHUNK_HEADER_SIZE) + ' bytes) and actual size (' + view.byteLength + ' bytes).')\n        }\n\n        let magicOffset = ID4_SIZE + I4_SIZE\n        if (view.getUint32(magicOffset) !== LWO_MAGIC) {\n            const magic = decodeString(new Uint8Array(buffer, magicOffset, ID4_SIZE))\n            console.error('LWOLoader.parse: Invalid magic ID (' + magic + ') in LWO header.')\n            return\n        }\n\n        let cursor = 12\n        while (cursor < view.byteLength) {\n            // Skip null byte padding\n            if (view.getUint8(cursor) === 0) {\n                cursor++\n            } else {\n                const chunkType = view.getInt32(cursor)\n                const chunkSize = view.getInt32(cursor + ID4_SIZE)\n\n                cursor += CHUNK_HEADER_SIZE\n\n                switch (chunkType) {\n                    case LWO_PNTS:\n                        this.parsePoints(view, cursor, chunkSize)\n                        break\n                    case LWO_SFRS:\n                        this.parseSurfaceNames(buffer, cursor, chunkSize)\n                        break\n                    case LWO_POLS:\n                        this.parsePolygons(view, cursor, chunkSize)\n                        break\n                    case LWO_SURF:\n                        this.parseSurface(view, buffer, cursor, chunkSize)\n                        break\n                    default:\n                        console.warn('Found unrecognised chunk type ' + decodeString(new Uint8Array(buffer, cursor - CHUNK_HEADER_SIZE, ID4_SIZE)) + ' at ' + cursor)\n                }\n\n                cursor += chunkSize\n            }\n\n        }\n\n        this.geometry.setAttribute('position', new BufferAttribute(this.vertices, 3))\n        this.geometry.setAttribute('uv', new BufferAttribute(this.uvs, 2))\n        this.geometry.setIndex(new BufferAttribute(this.indices, 1))\n        this.geometry.computeVertexNormals()\n\n        return new Mesh(this.geometry, this.materials)\n    }\n}\n","import { Vector3 } from 'three'\n\nexport interface Selectable {\n\n    getSelectionType(): SelectionType;\n\n    select();\n\n    deselect(): any;\n\n    getSelectionCenter(): Vector3;\n\n}\n\nexport enum SelectionType {\n\n    SURFACE,\n    PILOT,\n    BUILDING,\n    VEHICLE,\n    GROUP,\n\n}\n","import { AnimSubObj } from './AnimSubObj'\n\nexport class AnimClip {\n\n    looping: boolean = false\n    transcoef: number = 1\n    firstFrame: number = null\n    lastFrame: number = null\n    framesPerSecond: number = null\n    bodies: AnimSubObj[] = []\n\n}\n","import { Euler, MathUtils, Object3D, Vector3 } from 'three'\nimport degToRad = MathUtils.degToRad\n\nexport class AnimSubObj {\n\n    name: string = ''\n    filename: string = ''\n    relPos: Vector3[] = []\n    relRot: Euler[] = []\n    relScale: Vector3[] = []\n    opacity: number[] = []\n    parentObjInd: number = null\n    model: Object3D = null\n\n    radVec(degX: number, degY: number, degZ: number) {\n        return new Euler(degToRad(degY), degToRad(degX), degToRad(degZ), 'YXZ')\n    }\n\n    setFrameAndFollowing(animationFrameIndex: number, lastFrame: number, infos: number[]) {\n        this.relPos[animationFrameIndex] = new Vector3(infos[0], infos[1], infos[2])\n        this.relRot[animationFrameIndex] = this.radVec(infos[3], infos[4], infos[5])\n        this.relScale[animationFrameIndex] = new Vector3(infos[6], infos[7], infos[8])\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.relPos[c] = this.relPos[animationFrameIndex]\n            this.relRot[c] = this.relRot[animationFrameIndex]\n            this.relScale[c] = this.relScale[animationFrameIndex]\n        }\n    }\n\n    setOpacityAndFollowing(animationFrameIndex: number, lastFrame: number, value: number) {\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.opacity[c] = value\n        }\n    }\n\n}\n","/**\n * @author Scarabol https://github.com/scarabol\n *\n * This loader loads LWSC files exported from LW\n *\n * File format description: http://www.martinreddy.net/gfx/3d/LWSC.txt\n */\n\nimport { AnimClip } from '../scene/model/anim/AnimClip'\nimport { AnimSubObj } from '../scene/model/anim/AnimSubObj'\nimport { Group } from 'three'\nimport { getFilename } from '../core/Util'\nimport { ResourceManager } from './ResourceManager'\nimport { LWOLoader } from './LWOLoader'\n\nexport class LWSCLoader {\n\n    path: string = ''\n    verbose: boolean = false\n    animationClip: AnimClip = new AnimClip()\n    lines: string[] = []\n    lineIndex: number = 0\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('Using verbose mode')\n    }\n\n    parse(content): AnimClip {\n        this.lines = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map(l => l.trim())\n\n        if (this.lines[0] !== 'LWSC') {\n            throw 'Invalid start of file! Expected \\'LWSC\\' in first line'\n        }\n\n        const numOfModels = parseInt(this.lines[1], 10) // TODO is this correct? May be something else\n        if (numOfModels !== 1) {\n            console.warn('Number of models has unexpected value: ' + numOfModels)\n        }\n\n        for (this.lineIndex = 2; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) continue // empty line: object separator\n            const key = line.split(' ')[0]\n            if (key === 'FirstFrame') {\n                this.parseFrameBlock()\n            } else if (key === 'AddNullObject' || key === 'LoadObject') {\n                this.parseObjectBlock()\n                if (this.verbose) console.log(this.animationClip.bodies[this.animationClip.bodies.length - 1])\n            } else if (line.startsWith('PreviewFirstFrame ') || line.startsWith('PreviewLastFrame ') || line.startsWith('PreviewFrameStep ')) {\n                // only used in editor\n            } else {\n                // console.warn('Unexpected line: ' + line); // TODO debug logging, analyze remaining entries\n            }\n        }\n\n        if (this.verbose) console.log(this.animationClip)\n        return this.animationClip\n    }\n\n    parseLine(line: string): string[] {\n        return line.split(' ').filter((l: string) => l !== '')\n    }\n\n    parseFrameBlock() {\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            const line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'FirstFrame') {\n                this.animationClip.firstFrame = parseInt(value)\n            } else if (key === 'LastFrame') {\n                this.animationClip.lastFrame = parseInt(value)\n            } else if (key === 'FrameStep') {\n                const frameStep = parseInt(value)\n                if (frameStep !== 1) console.error('Animation frameStep has unexpected value: ' + frameStep)\n            } else if (key === 'FramesPerSecond') {\n                this.animationClip.framesPerSecond = parseInt(value)\n            } else if (key === 'PreviewFirstFrame' || key === 'PreviewLastFrame' || key === 'PreviewFrameStep') {\n                // only used in editor\n            } else {\n                console.warn('Unexpected key in frame block')\n            }\n        }\n        console.error('Parsing block reached content end')\n    }\n\n    parseObjectBlock(): AnimSubObj {\n        const subObj = new AnimSubObj()\n        this.animationClip.bodies.push(subObj)\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'AddNullObject' || key === 'LoadObject') {\n                if (key === 'LoadObject') {\n                    const filename = getFilename(value)\n                    subObj.name = filename.slice(0, filename.length - '.lwo'.length)\n                    subObj.filename = this.path + filename\n                    // TODO do not parse twice, read from cache first\n                    const lwoBuffer = ResourceManager.getResource(subObj.filename)\n                    subObj.model = new LWOLoader(this.path).parse(lwoBuffer)\n                } else if (key === 'AddNullObject') {\n                    subObj.name = value\n                    subObj.model = new Group()\n                } else {\n                    throw 'Unexpected line: ' + line\n                }\n            } else if (key === 'ObjectMotion') {\n                let line = this.lines[++this.lineIndex]\n                const lenInfos = parseInt(line)\n                line = this.lines[++this.lineIndex]\n                const lenFrames = parseInt(line)\n                this.lineIndex++\n                for (let c = 0; c < lenFrames; c++) {\n                    let line = this.lines[this.lineIndex + c * 2]\n                    if (line.startsWith('EndBehavior')) break\n                    const infos = line.split(' ').map(Number)\n                    if (infos.length !== lenInfos) console.warn('Number of infos (' + infos.length + ') does not match if specified count (' + lenInfos + ')')\n                    line = this.lines[this.lineIndex + c * 2 + 1]\n                    const animationFrameIndex = parseInt(line.split(' ')[0]) // other entries in line should be zeros\n                    subObj.setFrameAndFollowing(animationFrameIndex, this.animationClip.lastFrame, infos)\n                }\n                this.lineIndex += lenFrames * 2\n            } else if (key === 'ParentObject') {\n                subObj.parentObjInd = Number(value) - 1 // index is 1 based\n                if (this.verbose) console.log('parent obj ind is: ' + subObj.parentObjInd)\n            } else if (key === 'ShowObject ' || key === 'LockedChannels') {\n                // only used in editor\n            } else if (key === 'ShadowOptions') { // TODO implement shadow options (bitwise)\n                // 0 - Self Shadow\n                // 1 - Cast Shadow\n                // 2 - Receive Shadow\n            } else if (key === 'ObjDissolve') {\n                if (value == '(envelope)') {\n                    let line = this.lines[++this.lineIndex]\n                    const numOfInformationChannels = parseInt(line)\n                    if (numOfInformationChannels !== 1) console.error('Number of information channels for opacity is not 1, but: ' + numOfInformationChannels)\n                    line = this.lines[++this.lineIndex]\n                    const numOfKeyframes = parseInt(line)\n                    this.lineIndex++\n                    for (let c = 0; c < numOfKeyframes; c++) {\n                        let line = this.lines[this.lineIndex + c * 2]\n                        if (line.startsWith('EndBehavior')) break\n                        const opacity = 1 - Number(line)\n                        line = this.lines[this.lineIndex + c * 2 + 1]\n                        const frameNum = Number(line.split(' ')[0])\n                        subObj.setOpacityAndFollowing(frameNum, this.animationClip.lastFrame, opacity)\n                    }\n                    this.lineIndex += numOfKeyframes * 2\n                } else {\n                    const opacity = 1 - Number(value)\n                    subObj.setOpacityAndFollowing(0, this.animationClip.lastFrame, opacity)\n                }\n            } else {\n                // console.log('Unhandled line in object block: ' + line); // TODO debug logging\n            }\n        }\n        console.error('Parsing block reached content end')\n        return subObj\n    }\n\n}\n","const Stats = require('stats.js')\n\nexport class DebugHelper {\n\n    stats\n\n    constructor() {\n        this.stats = new Stats()\n        this.stats.setMode(0) // 0: fps, 1: ms\n\n        this.stats.domElement.style.position = 'absolute'\n        this.stats.domElement.style.left = '0px'\n        this.stats.domElement.style.top = '0px'\n\n        document.body.appendChild(this.stats.domElement)\n        this.hide()\n    }\n\n    show() {\n        this.stats.domElement.style.visibility = 'visible'\n    }\n\n    hide() {\n        this.stats.domElement.style.visibility = 'hidden'\n    }\n\n    renderStart() {\n        this.stats.begin()\n    }\n\n    renderDone() {\n        this.stats.end()\n    }\n\n}\n","export class Building {\n\n    static readonly TOOLSTATION = new Building('Buildings/Toolstation', 130, 10, true)\n    static readonly TELEPORT_PAD = new Building('Buildings/Teleports') // TODO test with level 25\n    static readonly POWER_STATION = new Building('Buildings/Powerstation') // TODO test with level 09\n    static readonly SUPPORT = new Building('Buildings/Support')\n    static readonly UPGRADE = new Building('Buildings/Upgrade') // TODO test with level 09\n    static readonly REFINERY = new Building('Buildings/Refinery')\n    static readonly GEODOME = new Building('Buildings/Geo-dome') // TODO test with level 25\n\n    name: string\n    aeFile: string\n    dropPosAngleDeg: number = 0\n    dropPosDist: number = 0\n    selfPowered: boolean = false\n    maxUpgrades: number = 2 // TODO read from cfg\n\n    constructor(name: string, dropPosAngleDeg: number = 0, dropPosDist: number = 0, selfPowered: boolean = false) {\n        this.name = name\n        this.aeFile = name + '/' + name.slice(name.lastIndexOf('/') + 1) + '.ae'\n        this.dropPosAngleDeg = dropPosAngleDeg\n        this.dropPosDist = dropPosDist\n        this.selfPowered = selfPowered\n    }\n\n    static getByName(buildingType: string) {\n        const typename = buildingType.slice(buildingType.lastIndexOf('/') + 1).toLowerCase()\n        switch (typename) {\n            case 'toolstation':\n                return this.TOOLSTATION\n            case 'teleports':\n                return this.TELEPORT_PAD\n            case 'upgrade':\n                return this.UPGRADE\n            case 'powerstation':\n                return this.POWER_STATION\n            case 'support':\n                return this.SUPPORT\n            case 'refinery':\n                return this.REFINERY\n            case 'geo-dome':\n                return this.GEODOME\n            default:\n                throw 'Unknown building type: ' + buildingType\n        }\n    }\n\n}\n","import { WorldManager } from '../WorldManager'\nimport { Euler, Group, Vector3 } from 'three'\n\nexport class BaseEntity {\n\n    worldMgr: WorldManager\n    group: Group = new Group()\n    sequenceIntervals = []\n\n    constructor() {\n        // this.group.add(new AxesHelper(40)); // TODO debug orientations and possible x-axis flip\n    }\n\n    getPosition() {\n        return new Vector3().copy(this.group.position)\n    }\n\n    getRotation() {\n        return new Euler().copy(this.group.rotation)\n    }\n\n    onDiscover() {\n        this.group.visible = true\n    }\n\n}\n","import { GameEvent } from './EventBus'\nimport { Job } from '../game/model/job/Job'\nimport { CollectableEntity, CollectableType } from '../scene/model/collect/CollectableEntity'\nimport { AnimEntity } from '../scene/model/anim/AnimEntity'\nimport { Vector3 } from 'three'\nimport { Surface } from '../scene/model/map/Surface'\n\nexport class WorldEvent extends GameEvent {\n\n    constructor(entityKey: string) {\n        super(entityKey)\n        this.isLocal = false\n    }\n\n}\n\nexport class JobEvent extends WorldEvent {\n\n    job: Job\n\n    constructor(eventKey: string, job: Job) {\n        super(eventKey)\n        this.job = job\n    }\n\n}\n\nexport class JobCreateEvent extends JobEvent {\n\n    static eventKey = 'job.create'\n\n    constructor(job: Job) {\n        super(JobCreateEvent.eventKey, job)\n    }\n\n}\n\nexport class JobDeleteEvent extends JobEvent {\n\n    static eventKey = 'job.delete'\n\n    constructor(job: Job) {\n        super(JobDeleteEvent.eventKey, job)\n    }\n\n}\n\nexport class RaiderRequested extends WorldEvent {\n\n    static eventKey = 'raider.request'\n\n    numRequested: number = 0\n\n    constructor(numRequested: number) {\n        super(RaiderRequested.eventKey)\n        this.numRequested = numRequested\n    }\n\n}\n\nexport class CollectEvent extends WorldEvent {\n\n    static eventKey = 'item.collected'\n\n    collectType: CollectableType\n\n    constructor(collectType: CollectableType) {\n        super(CollectEvent.eventKey)\n        this.collectType = collectType\n    }\n\n}\n\nexport class SpawnDynamiteEvent extends WorldEvent {\n\n    static eventKey = 'spawn.dynamite'\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(SpawnDynamiteEvent.eventKey)\n        this.surface = surface\n    }\n\n}\n\nexport class SpawnMaterialEvent extends WorldEvent {\n\n    static eventKey = 'spawn.material'\n\n    collectable: CollectableEntity\n    spawnPosition: Vector3\n\n    constructor(collectable: CollectableEntity, spawnPosition: Vector3) {\n        super(SpawnMaterialEvent.eventKey)\n        this.collectable = collectable\n        this.spawnPosition = spawnPosition\n    }\n\n}\n\nexport class EntityAddedEvent extends WorldEvent {\n\n    static eventKey = 'added.entity'\n\n    type: EntityType\n    entity: AnimEntity\n\n    constructor(type: EntityType, entity: AnimEntity) {\n        super(EntityAddedEvent.eventKey)\n        this.type = type\n        this.entity = entity\n    }\n\n}\n\nexport class EntityRemovedEvent extends WorldEvent {\n\n    static eventKey = 'remove.entity'\n\n    type: EntityType\n    entity: AnimEntity\n\n    constructor(type: EntityType, entity: AnimEntity) {\n        super(EntityRemovedEvent.eventKey)\n        this.type = type\n        this.entity = entity\n    }\n\n}\n\nexport enum EntityType {\n\n    RAIDER,\n    VEHICLE,\n    BUILDING,\n\n}\n","export class EventBus {\n\n    static eventListener = {}\n    static blockedEvents = []\n\n    static publishEvent(event: GameEvent) {\n        if (this.blockedEvents.includes(event.eventKey)) return // event is currently blocked from publishing\n        if (!event.isLocal) console.log('Event published: ' + event.eventKey)\n        this.blockedEvents.push(event.eventKey);\n        (this.eventListener[event.eventKey] || []).forEach((callback) => callback(event))\n        const index = this.blockedEvents.indexOf(event.eventKey)\n        if (index > -1) this.blockedEvents.splice(index, 1)\n    }\n\n    static registerEventListener(eventKey: string, callback: (GameEvent) => any) {\n        this.eventListener[eventKey] = this.eventListener[eventKey] || []\n        this.eventListener[eventKey].push(callback)\n    }\n\n}\n\nexport class GameEvent {\n\n    eventKey: string\n    isLocal: boolean\n\n    constructor(eventKey: string) {\n        this.eventKey = eventKey\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { CollectableEntity, CollectableType, CollectTargetType } from '../../../scene/model/collect/CollectableEntity'\nimport { JOB_ACTION_RANGE, RAIDER_SPEED } from '../../../main'\nimport { GameState } from '../GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { CollectEvent } from '../../../event/WorldEvents'\nimport { FulfillerEntity } from '../../../scene/model/FulfillerEntity'\nimport { Building } from '../entity/building/Building'\n\nexport enum JobType {\n\n    SURFACE,\n    CARRY,\n    MOVE,\n\n}\n\nexport enum JobState {\n\n    OPEN,\n    COMPLETE,\n    CANCELED,\n\n}\n\nexport abstract class Job {\n\n    type: JobType\n    jobstate: JobState\n    fulfiller: FulfillerEntity[] = []\n\n    protected constructor(type: JobType) {\n        this.type = type\n        this.jobstate = JobState.OPEN\n    }\n\n    assign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller)\n        if (fulfiller && index === -1) {\n            this.fulfiller.push(fulfiller)\n        }\n    }\n\n    unassign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller)\n        if (index > -1) this.fulfiller.splice(index, 1)\n    }\n\n    cancel() {\n        this.jobstate = JobState.CANCELED\n        const fulfiller = this.fulfiller // ensure consistency while processing\n        this.fulfiller = []\n        fulfiller.forEach((fulfiller) => fulfiller.stopJob())\n    }\n\n    isQualified(fulfiller: FulfillerEntity): boolean {\n        return true\n    }\n\n    onJobComplete() {\n        this.jobstate = JobState.COMPLETE\n    }\n\n    abstract getPosition(): Vector3; // TODO job system in 2d should be sufficient and decouple from three for deps and worker reasons\n\n    abstract isInArea(x: number, z: number): boolean;\n\n}\n\nexport class CollectJob extends Job {\n\n    item: CollectableEntity\n\n    constructor(item: CollectableEntity) {\n        super(JobType.CARRY)\n        this.item = item\n    }\n\n    getPosition(): Vector3 {\n        return this.item.getPosition()\n    }\n\n    isInArea(x: number, z: number): boolean {\n        const pos = this.getPosition()\n        return pos.sub(new Vector3(x, pos.y, z)).length() < JOB_ACTION_RANGE\n    }\n\n    isQualified(fulfiller: FulfillerEntity) {\n        return fulfiller.carries === null && !!this.item.getTargetPos()\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        if (this.item.getTargetType() === Building.TOOLSTATION) {\n            switch (this.item.getCollectableType()) {\n                case CollectableType.CRYSTAL:\n                    GameState.numCrystal++\n                    EventBus.publishEvent(new CollectEvent(this.item.getCollectableType()))\n                    break\n                case CollectableType.ORE:\n                    GameState.numOre++\n                    EventBus.publishEvent(new CollectEvent(this.item.getCollectableType()))\n                    break\n            }\n        } else if (this.item.getTargetType() === CollectTargetType.BUILDING_SITE) {\n            this.item.targetSite.addItem(this.item)\n        } else {\n            console.error('target type not yet implemented: ' + this.item.getTargetType())\n        }\n    }\n\n}\n\nexport class MoveJob extends Job {\n\n    target: Vector3\n\n    constructor(target: Vector3) {\n        super(JobType.MOVE)\n        this.target = target\n    }\n\n    getPosition(): Vector3 {\n        return new Vector3().copy(this.target)\n    }\n\n    isInArea(x: number, z: number) {\n        return this.getPosition().sub(new Vector3(x, this.target.y, z)).lengthSq() < RAIDER_SPEED * RAIDER_SPEED\n    }\n\n}\n","import { BaseEntity } from '../BaseEntity'\nimport { GameState } from '../../../game/model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { CollectJob } from '../../../game/model/job/Job'\nimport { Carryable } from './Carryable'\nimport { Vector3 } from 'three'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { BuildingSite } from '../BuildingSite'\n\nexport abstract class CollectableEntity extends BaseEntity implements Carryable {\n\n    collectableType: CollectableType\n    targetSite: BuildingSite\n    targetBuilding: BuildingEntity\n    targetPos: Vector3 = null\n    targetType: CollectTargetType | Building\n\n    protected constructor(collectableType: CollectableType) {\n        super()\n        this.collectableType = collectableType\n    }\n\n    abstract getTargetBuildingTypes(): Building[];\n\n    getTargetPos(): Vector3 {\n        if (!this.targetPos) {\n            const site = GameState.getClosestSiteThatRequires(this.getPosition(), this.getCollectableType())\n            if (site) {\n                this.targetSite = site\n                this.targetPos = site.getPosition()\n                this.targetType = CollectTargetType.BUILDING_SITE\n                site.assign(this)\n            } else {\n                const targetBuilding = GameState.getClosestBuildingByType(this.getPosition(), ...this.getTargetBuildingTypes())\n                if (targetBuilding) {\n                    this.targetBuilding = targetBuilding\n                    this.targetPos = targetBuilding.getDropPosition()\n                    this.targetType = targetBuilding.type\n                }\n            }\n        } else if (this.targetSite) {\n            if (this.targetSite.complete) this.resetTarget()\n        } else if (this.targetBuilding) {\n            // TODO check if building has been teleported away or turned off\n        }\n        return this.targetPos\n    }\n\n    getTargetType(): CollectTargetType | Building {\n        return this.targetType\n    }\n\n    resetTarget() {\n        if (this.targetSite) this.targetSite.unAssign(this)\n        this.targetSite = null\n        this.targetBuilding = null\n        this.targetPos = null\n        this.targetType = null\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        const index = GameState.collectablesUndiscovered.indexOf(this)\n        if (index !== -1) GameState.collectablesUndiscovered.splice(index, 1)\n        GameState.collectables.push(this)\n        EventBus.publishEvent(new JobCreateEvent(new CollectJob(this)))\n    }\n\n    getCollectableType(): CollectableType {\n        return this.collectableType\n    }\n\n}\n\nexport enum CollectableType {\n\n    DYNAMITE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n\n}\n\nexport enum CollectTargetType {\n\n    SURFACE,\n    BUILDING_SITE,\n\n}\n","import { BuildingEntity } from '../../scene/model/BuildingEntity'\nimport { Building } from './entity/building/Building'\nimport { Selectable, SelectionType } from './Selectable'\nimport { Raider } from '../../scene/model/Raider'\nimport { VehicleEntity } from '../../scene/model/VehicleEntity'\nimport { CollectableEntity, CollectableType } from '../../scene/model/collect/CollectableEntity'\nimport { Vector3 } from 'three'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../../main'\nimport { Surface } from '../../scene/model/map/Surface'\nimport { BaseEntity } from '../../scene/model/BaseEntity'\nimport { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { BuildingSite } from '../../scene/model/BuildingSite'\nimport { Dynamite } from '../../scene/model/collect/Dynamite'\nimport { Crystal } from '../../scene/model/collect/Crystal'\nimport { Ore } from '../../scene/model/collect/Ore'\nimport { LevelRewardConfig } from '../../cfg/LevelsCfg'\n\nexport enum GameResultState {\n\n    RUNNING,\n    COMPLETE,\n    FAILED,\n    CANCELED,\n\n}\n\nexport class GameState {\n\n    static resultState: GameResultState = GameResultState.RUNNING\n    static levelFullName: string = ''\n    static numCrystal: number = 0\n    static numOre: number = 0\n    static numBrick: number = 0\n    static usedCrystals: number = 0\n    static neededCrystals: number = 0\n    static airlevel: number = 1 // airlevel in percent from 0 to 1.0\n    static selectedEntities: Selectable[] = []\n    static selectionType: SelectionType = null\n    static buildings: BuildingEntity[] = []\n    static buildingsUndiscovered: BuildingEntity[] = []\n    static raiders: Raider[] = []\n    static raidersUndiscovered: Raider[] = []\n    static requestedRaiders: number = 0\n    static vehicles: VehicleEntity[] = []\n    static vehiclesUndiscovered: VehicleEntity[] = []\n    static collectables: CollectableEntity[] = []\n    static collectablesUndiscovered: CollectableEntity[] = []\n    static buildingSites: BuildingSite[] = []\n    static totalCrystals: number = 0\n    static totalOres: number = 0\n    static totalDiggables: number = 0\n    static remainingDiggables: number = 0\n    static totalCaverns: number = 0\n    static discoveredCaverns: number = 0\n    static levelStartTime: number = 0\n    static levelStopTime: number = 0\n    static rewardConfig: LevelRewardConfig = null\n\n    static reset() {\n        this.resultState = GameResultState.RUNNING\n        this.levelFullName = ''\n        this.numCrystal = 0\n        this.numOre = 0\n        this.numBrick = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.airlevel = 1\n        this.selectedEntities = []\n        this.selectionType = null\n        this.buildings = []\n        this.buildingsUndiscovered = []\n        this.raiders = []\n        this.raidersUndiscovered = []\n        this.requestedRaiders = 0\n        this.vehicles = []\n        this.vehiclesUndiscovered = []\n        this.collectables = []\n        this.collectablesUndiscovered = []\n        this.buildingSites = []\n        this.totalCrystals = 0\n        this.totalOres = 0\n        this.totalDiggables = 0\n        this.remainingDiggables = 0\n        this.totalCaverns = 0\n        this.discoveredCaverns = 0\n        this.levelStartTime = 0\n        this.levelStopTime = 0\n        this.rewardConfig = null\n    }\n\n    static getBuildingsByType(...buildingTypes: Building[]): BuildingEntity[] {\n        const matches = []\n        for (let c = 0; c < buildingTypes.length; c++) {\n            matches.push(...this.buildings.filter((b) => b.type === buildingTypes[c]))\n        }\n        return matches\n    }\n\n    static getClosestBuildingByType(position: Vector3, ...buildingTypes: Building[]): BuildingEntity {\n        const targetBuildings = GameState.getBuildingsByType(...buildingTypes)\n        let closest = null, minDist = null\n        targetBuildings.forEach((b) => {\n            const bPos = b.getDropPosition()\n            const dist = new Vector3().copy(position).sub(bPos).lengthSq()\n            if (closest === null || dist < minDist) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static getClosestSiteThatRequires(position: Vector3, collectableType: CollectableType): BuildingSite {\n        let closest = null, minDist = null\n        this.buildingSites.forEach((b) => {\n            const bPos = b.getPosition()\n            const dist = new Vector3().copy(position).sub(bPos).lengthSq()\n            if ((closest === null || dist < minDist) && b.needs(collectableType)) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static selectEntities(entities: Selectable[]) {\n        // deselect and remove entities that are not selected anymore\n        this.selectedEntities.filter((e) => entities.indexOf(e) === -1).forEach((e) => e.deselect())\n        this.selectedEntities = this.selectedEntities.filter((e) => entities.indexOf(e) !== -1)\n        // add and select new entities (if they are selectable)\n        this.selectedEntities.push(...(entities.filter((e) => e.select())))\n        // determine and set next selection type\n        const len = this.selectedEntities.length\n        if (len > 1) {\n            this.selectionType = SelectionType.GROUP\n        } else if (len === 1) {\n            this.selectionType = this.selectedEntities[0].getSelectionType()\n        } else if (this.selectionType !== null) {\n            this.selectionType = null\n            EventBus.publishEvent(new EntityDeselected())\n        }\n    }\n\n    static getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + this.getBuildingsByType(Building.SUPPORT).length * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    static discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE\n        this.discoverEntities(this.raidersUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.buildingsUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.vehiclesUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.collectablesUndiscovered, minX, maxX, minZ, maxZ)\n    }\n\n    static discoverEntities(undiscovered: BaseEntity[], minX, maxX, minZ, maxZ) {\n        const discovered = []\n        undiscovered.forEach((e) => {\n            const pos = e.getPosition()\n            if (pos.x >= minX && pos.x < maxX && pos.z >= minZ && pos.z < maxZ) {\n                e.onDiscover()\n                discovered.push(e)\n            }\n        })\n        discovered.forEach((r) => {\n            const index = undiscovered.indexOf(r)\n            if (index !== -1) undiscovered.splice(index, 1)\n        })\n    }\n\n    static dropMaterial(type: CollectableType, quantity: number): CollectableEntity[] {\n        const result = []\n        if (type === CollectableType.DYNAMITE) {\n            for (let c = 0; c < quantity; c++) result.push(new Dynamite())\n        } else if (type === CollectableType.CRYSTAL) {\n            while (GameState.numCrystal > 0 && result.length < quantity) {\n                GameState.numCrystal--\n                result.push(new Crystal())\n            }\n        } else if (type === CollectableType.ORE) {\n            while (GameState.numOre > 0 && result.length < quantity) {\n                GameState.numOre--\n                result.push(new Ore())\n            }\n        } else {\n            console.error('Material drop not yet implemented: ' + type)\n        }\n        return result\n    }\n\n    static get gameTimeSeconds() {\n        return Math.round((GameState.levelStopTime - GameState.levelStartTime) / 1000)\n    }\n\n    static get score() {\n        if (!GameState.rewardConfig) return 0\n        let quota = GameState.rewardConfig.quota\n        let importance = GameState.rewardConfig.importance\n        const scoreCrystals = GameState.numCrystal >= (quota.crystals || Infinity) ? importance.crystals : 0\n        const scoreTimer = GameState.gameTimeSeconds <= (quota.timer || 0) ? importance.timer : 0\n        const scoreCaverns = quota.caverns ? Math.min(1, GameState.discoveredCaverns / quota.caverns) * importance.caverns : 0\n        const scoreConstructions = quota.constructions ? Math.min(1, GameState.buildings.length / quota.constructions * importance.constructions) : 0\n        const scoreOxygen = GameState.airlevel * importance.oxygen\n        const scoreFigures = GameState.raiders.length >= MAX_RAIDER_BASE ? importance.figures : 0\n        return Math.round(scoreCrystals + scoreTimer + scoreCaverns + scoreConstructions + scoreOxygen + scoreFigures) / 100\n    }\n\n}\n","import { GameEvent } from './EventBus'\nimport { BuildingEntity } from '../scene/model/BuildingEntity'\nimport { Surface } from '../scene/model/map/Surface'\nimport { Raider } from '../scene/model/Raider'\nimport { VehicleEntity } from '../scene/model/VehicleEntity'\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: string) {\n        super(eventKey)\n        this.isLocal = true\n    }\n\n}\n\nexport class SurfaceSelectedEvent extends LocalEvent {\n\n    static eventKey: string = 'surface.selected'\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(SurfaceSelectedEvent.eventKey)\n        this.surface = surface\n    }\n\n}\n\nexport class BuildingSelected extends LocalEvent {\n\n    static eventKey: string = 'building.selected'\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(BuildingSelected.eventKey)\n        this.building = building\n    }\n\n}\n\nexport class RaiderSelected extends LocalEvent {\n\n    static eventKey: string = 'raider.select'\n\n    raider: Raider\n\n    constructor(raider: Raider) {\n        super(RaiderSelected.eventKey)\n        this.raider = raider\n    }\n\n}\n\nexport class VehicleSelected extends LocalEvent {\n\n    static eventKey: string = 'vehicle.select'\n\n    vehicle: VehicleEntity\n\n    constructor(vehicle: VehicleEntity) {\n        super(VehicleSelected.eventKey)\n        this.vehicle = vehicle\n    }\n\n}\n\nexport class EntityDeselected extends LocalEvent {\n\n    static eventKey: string = 'entity.deselect'\n\n    constructor() {\n        super(EntityDeselected.eventKey)\n    }\n\n}\n","import { Box3, CanvasTexture, Mesh, MeshBasicMaterial, MeshPhongMaterial, Object3D, SphereGeometry, Sprite, SpriteMaterial, Vector3 } from 'three'\nimport { AnimClip } from './AnimClip'\nimport { iGet } from '../../../core/Util'\nimport { AnimationEntityType } from './AnimationEntityType'\nimport { BaseEntity } from '../BaseEntity'\nimport { AnimSubObj } from './AnimSubObj'\n\nexport abstract class AnimEntity extends BaseEntity {\n\n    entityType: AnimationEntityType = null\n    poly: Object3D[] = []\n    animation: AnimClip = null\n    animationTimeout: NodeJS.Timeout = null\n    selectionFrame: Sprite = null\n    pickSphere: Mesh = null\n    pickSphereRadius: number = 10\n    selectionFrameSize: number = 10\n    carryJoint: Object3D = null\n\n    protected constructor(entityType: AnimationEntityType) {\n        super()\n        this.entityType = entityType\n    }\n\n    setActivity(keyname, onAnimationDone = null, iterations = 1) {\n        if (this.animationTimeout) {\n            clearTimeout(this.animationTimeout)\n            this.animationTimeout = null\n        }\n        const activity = iGet(this.entityType.activities, keyname)\n        if (!activity) {\n            console.error('Activity \\'' + keyname + '\\' unknown')\n            console.log(this.entityType.activities)\n            return\n        }\n        if (activity.animation) {\n            this.animation = activity.animation\n            this.group.remove(...this.poly)\n            this.poly = []\n            const carries = (this.carryJoint && this.carryJoint.children) || []\n            this.carryJoint = null\n            // bodies are defined in animation and second in high/medium/low poly groups\n            this.animation.bodies.forEach((body) => {\n                let model: Object3D = iGet(this.entityType.highPoly, body.name)\n                if (!model) model = iGet(this.entityType.mediumPoly, body.name)\n                if (!model) model = body.model\n                const polyModel = model.clone(true)\n                this.poly.push(polyModel)\n                if (this.entityType.carryNullName && body.name && this.entityType.carryNullName.toLowerCase() === body.name.toLowerCase()) {\n                    this.carryJoint = polyModel\n                    if (carries.length > 0) this.carryJoint.add(...carries)\n                }\n            })\n            this.animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n                const polyPart = this.poly[index]\n                const parentInd = body.parentObjInd\n                if (parentInd !== undefined && parentInd !== null) { // can be 0\n                    this.poly[parentInd].add(polyPart)\n                } else {\n                    this.group.add(polyPart)\n                }\n            })\n            this.animate(0, onAnimationDone, iterations)\n        } else {\n            console.warn('Activity ' + keyname + ' has no animation defined yet')\n        }\n    }\n\n    animate(frameIndex, onAnimationDone, iterations) {\n        if (this.poly.length !== this.animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        this.animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = this.poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = true\n                        mat.alphaTest = 0\n                    })\n                }\n            }\n        })\n        this.animationTimeout = null\n        if (!(frameIndex + 1 > this.animation.lastFrame) || (this.animation.looping && (!onAnimationDone || iterations > 1))) {\n            let nextFrame = frameIndex + 1\n            if (nextFrame > this.animation.lastFrame) {\n                nextFrame = this.animation.firstFrame\n                iterations--\n            }\n            const that = this\n            this.animationTimeout = setTimeout(() => that.animate(nextFrame, onAnimationDone, iterations), 1000 / this.animation.framesPerSecond * this.animation.transcoef) // TODO get this in sync with threejs\n        } else if (onAnimationDone) {\n            onAnimationDone()\n        }\n    }\n\n    createPickSphere() {\n        if (this.pickSphere) return\n        const center = new Vector3()\n        new Box3().setFromObject(this.group).getCenter(center)\n        center.sub(this.group.position)\n        const geometry = new SphereGeometry(this.pickSphereRadius, this.pickSphereRadius, this.pickSphereRadius)\n        const material = new MeshBasicMaterial({color: 0xffff00, visible: false}) // change to true for debugging\n        this.pickSphere = new Mesh(geometry, material)\n        this.pickSphere.userData = {selectable: this}\n        this.pickSphere.position.copy(center)\n        this.group.add(this.pickSphere)\n\n        const ctx = document.createElement('canvas').getContext('2d')\n        const size = 128 // TODO read from cfg?\n        ctx.canvas.width = size\n        ctx.canvas.height = size\n        ctx.fillStyle = '#0f0'\n        const strength = 50 / this.selectionFrameSize\n        const length = size / 3\n        ctx.fillRect(0, 0, length, strength)\n        ctx.fillRect(0, 0, strength, length)\n        ctx.fillRect(size - length, 0, length, strength)\n        ctx.fillRect(size - strength, 0, strength, length)\n        ctx.fillRect(size - strength, size - length, strength, length)\n        ctx.fillRect(size - length, size - strength, length, strength)\n        ctx.fillRect(0, size - strength, length, strength)\n        ctx.fillRect(0, size - length, strength, length)\n        const texture = new CanvasTexture(ctx.canvas)\n        const selectionMaterial = new SpriteMaterial({map: texture, depthTest: false})\n        this.selectionFrame = new Sprite(selectionMaterial)\n        this.selectionFrame.position.copy(center)\n        this.selectionFrame.scale.set(this.selectionFrameSize, this.selectionFrameSize, this.selectionFrameSize)\n        this.selectionFrame.visible = false\n        this.group.add(this.selectionFrame)\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { AnimEntity } from '../anim/AnimEntity'\nimport { Carryable } from './Carryable'\nimport { Surface } from '../map/Surface'\nimport { Vector3 } from 'three'\nimport { GameState } from '../../../game/model/GameState'\n\nexport class Dynamite extends AnimEntity implements Carryable {\n\n    targetSurface: Surface\n\n    constructor() {\n        super(ResourceManager.getAnimationEntityType('MiscAnims/Dynamite/Dynamite.ae'))\n    }\n\n    getTargetPos(): Vector3 {\n        if (this.targetSurface && this.targetSurface.isExplodable()) {\n            return this.targetSurface.getDigPositions()[0] // TODO find closest dig position\n        } else {\n            return GameState.getClosestBuildingByType(this.getPosition(), Building.TOOLSTATION).getDropPosition()\n        }\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.DYNAMITE\n    }\n\n    ignite() {\n        this.worldMgr.sceneManager.scene.add(this.group) // TODO add as explosive and scare em all!\n        const center = this.targetSurface.getCenterWorld()\n        center.y = this.group.position.y\n        this.group.lookAt(center)\n        this.setActivity('TickDown', () => {\n            this.worldMgr.sceneManager.scene.remove(this.group)\n            this.targetSurface.collapse()\n            // TODO add explosion animation\n            // TODO damage raider, vehicle, buildings\n        })\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Color, Material, MeshPhongMaterial } from 'three'\nimport { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { SceneManager } from '../../SceneManager'\n\nexport class Crystal extends CollectableEntity {\n\n    constructor() {\n        super(CollectableType.CRYSTAL)\n        const resource2 = ResourceManager.getResource('MiscAnims/Crystal/vlp_greencrystal.lwo')\n        const mesh2 = SceneManager.registerMesh(new LWOLoader('MiscAnims/Crystal/').parse(resource2));\n        (mesh2.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.color = new Color(0, 0, 0) // TODO read from LWO file?\n            mat.emissive = new Color(0, 255, 0) // TODO should be luminosity color from mesh file?\n            mat.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n            mat.opacity = 0.5 // TODO read from LWO file?\n            mat.transparent = true\n        })\n        mesh2.scale.set(1.75, 1.75, 1.75) // TODO derive from texture scale?\n        this.group.add(mesh2)\n        const resource = ResourceManager.getResource('World/Shared/Crystal.lwo') // highpoly version\n        const mesh = SceneManager.registerMesh(new LWOLoader('World/Shared/').parse(resource));\n        (mesh.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.emissive = new Color(0, 8, 0) // TODO read from LWO file?\n            mat.color = new Color(0, 0, 0) // TODO read from LWO file?\n            mat.transparent = true\n            mat.opacity = 0.4 // TODO read from LWO file?\n        })\n        this.group.add(mesh)\n        this.sequenceIntervals.forEach((interval) => clearInterval(interval)) // TODO looks better without sequence, maybe just slow it down or merge it?\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.POWER_STATION, Building.TOOLSTATION]\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        console.log('An energy crystal has been discovered')\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { SceneManager } from '../../SceneManager'\n\nexport class Ore extends CollectableEntity {\n\n    constructor() {\n        super(CollectableType.ORE)\n        const resource = ResourceManager.getResource('MiscAnims/Ore/Ore1st.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('MiscAnims/Ore/').parse(resource))\n        this.group.add(mesh)\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.REFINERY, Building.TOOLSTATION]\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        console.log('Ore has been discovered')\n    }\n\n}\n","import { ScreenLayer } from '../screen/ScreenLayer'\nimport { BaseScreen } from '../screen/BaseScreen'\n\n// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n}\n\nexport enum POINTER_EVENT {\n    MOVE,\n    DOWN,\n    UP,\n}\n\nexport enum KEY_EVENT {\n    DOWN,\n    UP,\n}\n\nexport class EventManager {\n\n    constructor(screen: BaseScreen) {\n        screen.gameCanvasContainer.addEventListener('contextmenu', (event: MouseEvent) => {\n            if (screen.isInRect(event)) event.preventDefault()\n        })\n        new Map<string, POINTER_EVENT>([\n            ['pointermove', POINTER_EVENT.MOVE],\n            ['pointerdown', POINTER_EVENT.DOWN],\n            ['pointerup', POINTER_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: PointerEvent) => {\n                if (!screen.isInRect(event)) return\n                event.preventDefault()\n                // all event attibutes used by controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n                const nonBubblingClone = new PointerEvent(event.type, {\n                    bubbles: false, // disable bubbling otherwise we'll trigger this same event handler again\n                    clientX: event.clientX,\n                    clientY: event.clientY,\n                    pointerType: event.pointerType,\n                    button: event.button,\n                    ctrlKey: event.ctrlKey,\n                    metaKey: event.metaKey,\n                    shiftKey: event.shiftKey,\n                })\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handlePointerEvent(eventEnum, nonBubblingClone))\n            })\n        })\n        new Map<string, KEY_EVENT>([\n            ['keydown', KEY_EVENT.DOWN],\n            ['keyup', KEY_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: KeyboardEvent) => {\n                // event.preventDefault(); // otherwise page reload with F5 stops working (may be intended in future)\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handleKeyEvent(eventEnum, event))\n            })\n        })\n        screen.gameCanvasContainer.addEventListener('wheel', (event: WheelEvent) => {\n            if (!screen.isInRect(event)) return\n            // all event attibutes used by controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n            const nonBubblingClone = new WheelEvent(event.type, {\n                bubbles: false, // disable bubbling otherwise we'll trigger this same event handler again\n                clientX: event.clientX,\n                clientY: event.clientY,\n                deltaX: event.deltaX,\n                deltaY: event.deltaY,\n                deltaZ: event.deltaZ,\n                button: event.button,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey,\n                shiftKey: event.shiftKey,\n            })\n            screen.layers.filter(l => l.isActive())\n                .sort((a, b) => ScreenLayer.compareZ(a, b))\n                .some(l => l.handleWheelEvent(nonBubblingClone))\n        })\n    }\n\n}\n","import { AmbientLight, Frustum, Mesh, MOUSE, PerspectiveCamera, PointLight, Raycaster, Scene, Vector3, WebGLRenderer } from 'three'\nimport { DebugHelper } from './DebugHelper'\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { GameState } from '../game/model/GameState'\nimport { Selectable } from '../game/model/Selectable'\nimport { Terrain } from './model/map/Terrain'\nimport { TILESIZE } from '../main'\n\nexport class SceneManager {\n\n    static meshRegistry = []\n\n    maxFps: number = 30 // most animations use 25 fps so this should be enough\n    renderer: WebGLRenderer\n    debugHelper: DebugHelper = new DebugHelper()\n    renderInterval\n    animRequest\n    scene: Scene\n    camera: PerspectiveCamera\n    amb: AmbientLight\n    light: PointLight\n    terrain: Terrain\n    controls: MapControls\n    cursorTorchlight: PointLight\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.renderer = new WebGLRenderer({antialias: true, canvas: canvas})\n        this.renderer.setClearColor(0x000000)\n\n        this.camera = new PerspectiveCamera(30, canvas.width / canvas.height, 0.1, 5000) // TODO make these params configurable\n\n        this.controls = new MapControls(this.camera, this.renderer.domElement)\n        this.controls.mouseButtons = {LEFT: null, MIDDLE: MOUSE.ROTATE, RIGHT: MOUSE.PAN}\n        // this.controls.maxPolarAngle = Math.PI * 0.45; // TODO dynamically adapt to terrain height at camera position\n    }\n\n    selectEntitiesByRay(rx: number, ry: number) {\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        let intersects = raycaster.intersectObjects(GameState.raiders.map((r) => r.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.vehicles.map((v) => v.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.buildings.map((b) => b.pickSphere))\n        if (intersects.length < 1 && this.terrain) intersects = raycaster.intersectObjects(this.terrain.floorGroup.children)\n        const selected = []\n        if (intersects.length > 0) {\n            const userData = intersects[0].object.userData\n            if (userData && userData.hasOwnProperty('selectable')) {\n                const selectable = userData['selectable']\n                if (selectable) selected.push(selectable)\n            }\n        }\n        GameState.selectEntities(selected)\n    }\n\n    selectEntitiesInFrustum(r1x: number, r1y: number, r2x: number, r2y: number) {\n        const startPoint = new Vector3(r1x, r1y, 0.5)\n        const endPoint = new Vector3(r2x, r2y, 0.5)\n        // Avoid invalid frustum\n        if (startPoint.x === endPoint.x) {\n            endPoint.x += Number.EPSILON\n        }\n        if (startPoint.y === endPoint.y) {\n            endPoint.y += Number.EPSILON\n        }\n        // update camera\n        this.camera.updateProjectionMatrix()\n        this.camera.updateMatrixWorld()\n        // update frustum\n        const tmpPoint = new Vector3()\n        tmpPoint.copy(startPoint)\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x)\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y)\n        endPoint.x = Math.max(startPoint.x, endPoint.x)\n        endPoint.y = Math.min(startPoint.y, endPoint.y)\n\n        const vecNear = new Vector3()\n        const vecTopLeft = new Vector3()\n        const vecTopRight = new Vector3()\n        const vecDownRight = new Vector3()\n        const vecDownLeft = new Vector3()\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld)\n        vecTopLeft.copy(tmpPoint)\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0)\n        vecDownRight.copy(endPoint)\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0)\n\n        vecTopLeft.unproject(this.camera)\n        vecTopRight.unproject(this.camera)\n        vecDownRight.unproject(this.camera)\n        vecDownLeft.unproject(this.camera)\n\n        const vectemp1 = new Vector3()\n        const vectemp2 = new Vector3()\n        const vectemp3 = new Vector3()\n        vectemp1.copy(vecTopLeft).sub(vecNear)\n        vectemp2.copy(vecTopRight).sub(vecNear)\n        vectemp3.copy(vecDownRight).sub(vecNear)\n        vectemp1.normalize()\n        vectemp2.normalize()\n        vectemp3.normalize()\n\n        const deep = Number.MAX_VALUE\n        vectemp1.multiplyScalar(deep)\n        vectemp2.multiplyScalar(deep)\n        vectemp3.multiplyScalar(deep)\n        vectemp1.add(vecNear)\n        vectemp2.add(vecNear)\n        vectemp3.add(vecNear)\n\n        const frustum = new Frustum()\n        const planes = frustum.planes\n\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight)\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight)\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear)\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear)\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft)\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1)\n        planes[5].normal.multiplyScalar(-1)\n\n        let entities: Selectable[] = GameState.raiders.filter((r) => frustum.containsPoint(r.getSelectionCenter()))\n        entities.push(...(GameState.vehicles.filter((v) => frustum.containsPoint(v.getSelectionCenter()))))\n        if (entities.length < 1) entities = GameState.buildings.filter((b) => frustum.containsPoint(b.getSelectionCenter()))\n        GameState.selectEntities(entities)\n    }\n\n    setupScene() {\n        this.scene = new Scene()\n        // this.scene.fog = new FogExp2(0x6e6e9b, 0.05); // TODO derive from level config\n\n        this.amb = new AmbientLight(0x808080) // TODO use \"cave\" light setup\n        this.scene.add(this.amb)\n\n        this.cursorTorchlight = new PointLight(0xffffff, 1, 7, 2)\n        this.cursorTorchlight.distance *= TILESIZE\n        this.scene.add(this.cursorTorchlight)\n    }\n\n    startScene() {\n        this.debugHelper.show()\n        this.renderInterval = setInterval(() => {\n            this.animRequest = requestAnimationFrame(() => {\n                this.debugHelper.renderStart()\n                this.renderer.render(this.scene, this.camera)\n                this.debugHelper.renderDone()\n            })\n        }, 1000 / this.maxFps)\n    }\n\n    disposeScene() {\n        this.debugHelper.hide()\n        if (this.renderInterval) {\n            clearInterval(this.renderInterval)\n            this.renderInterval = null\n        }\n        if (this.animRequest) {\n            cancelAnimationFrame(this.animRequest)\n            this.animRequest = null\n        }\n        this.scene?.children?.filter(c => c)\n        this.terrain?.dispose()\n        this.terrain = null\n        SceneManager.meshRegistry.forEach(mesh => {\n            // TODO stop animation intervals/timeouts\n            mesh.geometry.dispose() // TODO refactor better handle on entity level\n            Array.isArray(mesh.material) ? mesh.material.forEach(mat => mat.dispose()) : mesh.material?.dispose()\n        })\n        SceneManager.meshRegistry = []\n    }\n\n    static registerMesh(mesh: Mesh): Mesh {\n        this.meshRegistry.push(mesh)\n        return mesh\n    }\n\n}\n","import { AnimationEntityType } from '../scene/model/anim/AnimationEntityType'\nimport { getPath, iGet } from './wadworker/WadUtil'\nimport { ResourceManager } from './ResourceManager'\nimport { LWOLoader } from './LWOLoader'\nimport { LWSCLoader } from './LWSCLoader'\nimport { SceneManager } from '../scene/SceneManager'\n\nexport class AnimEntityLoader {\n\n    static loadModels(url, root): AnimationEntityType {\n        const path = getPath(url)\n\n        const entityType = new AnimationEntityType()\n\n        entityType.carryNullName = iGet(root, 'CarryNullName')\n\n        // TODO load other poly quality models (if available)\n        // let mediumPoly = iGet(root, 'MediumPoly');\n        // if (mediumPoly) {\n        //     Object.keys(mediumPoly).forEach((key) => {\n        //         const polyname = mediumPoly[key];\n        //         const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //         const polyfile = path + polyname + '.lwo';\n        //         console.log('polyfile');\n        //         console.log(polyfile);\n        //         // new LWOLoader().load(polyfile, (model) => {\n        //         //     mediumPoly[polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //         // }, undefined, () => {\n        //         //     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //         // });\n        //     });\n        //     Object.keys(mediumPoly).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete mediumPoly[polykey]);\n        // }\n\n        const highPoly = iGet(root, 'highpoly')\n        if (highPoly) {\n            entityType.highPoly = {}\n            Object.keys(highPoly).forEach((key) => {\n                const polyname = highPoly[key] + '.lwo'\n                const polykey = key.startsWith('!') ? key.slice(1) : key\n                // console.log(path + polyname);\n                // TODO do not parse twice, read from cache first\n                const lwoBuffer = ResourceManager.getResource(path + polyname)\n                entityType.highPoly[polykey] = SceneManager.registerMesh(new LWOLoader(path).parse(lwoBuffer))\n            })\n        }\n\n        // let fPoly = (root)['fppoly'];\n        // if (fPoly) {\n        //     Object.keys(fPoly).forEach((camera) => {\n        //         Object.keys(fPoly[camera]).forEach((key) => {\n        //             const polyname = fPoly[camera][key];\n        //             const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //             if (polyname !== 'null') {\n        //                 const polyfile = path + polyname + '.lwo';\n        //                 new LWOLoader().load(polyfile, (model) => {\n        //                     fPoly[camera][polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //                 }, undefined, () => {\n        //                     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //                 });\n        //             } else {\n        //                 fPoly[camera][key] = {polyname: polyname, polyfile: null, model: new Group()};\n        //             }\n        //         });\n        //         Object.keys(fPoly[camera]).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete fPoly[polykey][camera]);\n        //     });\n        // }\n\n        const activities = iGet(root, 'Activities')\n        if (activities) {\n            Object.keys(activities).forEach((activity) => {\n                try {\n                    let keyname = iGet(activities, activity)\n                    const act = iGet(root, keyname)\n                    const file = iGet(act, 'FILE')\n                    const isLws = iGet(act, 'LWSFILE') === true\n                    const transcoef = iGet(act, 'TRANSCOEF')\n                    const looping = iGet(act, 'LOOPING') === true\n                    if (isLws) {\n                        const content = ResourceManager.getResource(path + file + '.lws')\n                        act.animation = new LWSCLoader(path).parse(content)\n                        act.animation.looping = looping\n                        act.animation.transcoef = transcoef ? Number(transcoef) : 1;\n                        (entityType.activities)[keyname] = act\n                    } else {\n                        console.error('Found activity which is not an LWS file')\n                    }\n                } catch (e) {\n                    console.error(e)\n                    console.log(root)\n                    console.log(activities)\n                    console.log(activity)\n                }\n            })\n        }\n\n        return entityType\n    }\n\n}\n","import { createContext, createDummyImgData, getPixel, setPixel } from './ImageHelper'\n\nexport class BitmapFont {\n\n    charHeight: number\n    letters: ImageData[] = []\n\n    constructor(fontImageData: ImageData, cols = 10, rows = 19) { // font images always consist of 10 columns and 19 rows with last row empty\n        // actually chars are font dependent and have to be externalized in future\n        // maybe CP850 was used... not sure, doesn't fit...\n        const chars = [' ', '!', '\"', '#', '$', '%', '⌵', '`', '(', ')',\n            '*', '+', ',', '-', '.', '/', '0', '1', '2', '3',\n            '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',\n            '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n            'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n            'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[',\n            '\\\\', ']', '^', '_', '\\'', 'a', 'b', 'c', 'd', 'e',\n            'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\n            'z', 'Ä', 'Å', 'Á', 'À', 'Â', 'Ã', 'Ą', 'ä', 'å',\n            'á', 'à', 'â', 'ã', 'ą', 'Ë', 'E̊', 'É', 'È', 'É',\n            'Ę', 'ë', 'e̊', 'é', 'è', 'e̊', 'ę̊', '', '', '',\n            '', '', '', '', '', 'Ö', '', '', '', '',\n            'ö', '', '', '', '', 'Ü', '', '', '', 'ü',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', 'ß', '', '', '', 'Ñ', '', 'ñ',\n            '',\n        ] // TODO complete this character list\n\n        const maxCharWidth = fontImageData.width / cols\n        this.charHeight = fontImageData.height / rows\n\n        function getActualCharacterWidth(imgData) {\n            for (let y = 0; y < imgData.height / rows; y++) { // find non-empty row first\n                let rowPixelIndex = y * 4 * imgData.width\n                if (imgData.data[rowPixelIndex] !== 255 && imgData.data[rowPixelIndex + 2] !== 255) { // red/blue pixels indicate end of character\n                    for (let x = 0; x < maxCharWidth; x++) {\n                        let colPixelIndex = x * 4\n                        if (imgData.data[colPixelIndex] === 255 || imgData.data[colPixelIndex + 2] === 255) { // red/blue pixels indicate end of character\n                            return x\n                        }\n                    }\n                    return maxCharWidth\n                }\n            }\n            return 0\n        }\n\n        for (let i = 0; i < chars.length; i++) {\n            let imgData = this.extractData(fontImageData, (i % 10) * maxCharWidth, Math.floor(i / 10) * this.charHeight, maxCharWidth, this.charHeight)\n            let actualWidth = getActualCharacterWidth(imgData)\n            if (actualWidth > 0) {\n                imgData = this.extractData(imgData, 0, 0, actualWidth, this.charHeight)\n            } else {\n                imgData = createDummyImgData(maxCharWidth, this.charHeight)\n            }\n            this.letters[chars[i]] = imgData\n        }\n    }\n\n    extractData(imgData, startX, startY, width, height): ImageData {\n        const alpha = getPixel(imgData, startX + width - 1, startY + height - 1)\n        const result = new ImageData(width, height)\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const p = getPixel(imgData, startX + x, startY + y)\n                if (p.r === alpha.r && p.g === alpha.g && p.b === alpha.b) p.a = 0 // apply alpha channel\n                setPixel(result, x, y, p.r, p.g, p.b, p.a)\n            }\n        }\n        return result\n    }\n\n    createTextImage(text): HTMLCanvasElement {\n        if (text === undefined || text === null || text.length < 1) {\n            // empty text requested, context with width 0 is not allowed, but 1 with alpha is close enough\n            return createContext(1, 1).canvas\n        }\n        text = text.replace(/_/g, ' ')\n        let width = 0\n        for (let c = 0; c < text.length; c++) {\n            const letter = text.charAt(c)\n            const letterImg = this.letters[letter]\n            if (letterImg) {\n                width += letterImg.width\n            } else {\n                console.error('Letter \\'' + letter + '\\' not found in charset! Ignoring it')\n            }\n        }\n        const result = new ImageData(width, this.charHeight)\n        let letterX = 0\n        for (let c = 0; c < text.length; c++) {\n            const letterImgData = this.letters[text.charAt(c)]\n            if (letterImgData) {\n                for (let x = letterX; x < letterX + letterImgData.width; x++) {\n                    for (let y = 0; y < letterImgData.height; y++) {\n                        const p = getPixel(letterImgData, x - letterX, y)\n                        setPixel(result, x, y, p.r, p.g, p.b, p.a)\n                    }\n                }\n                letterX += letterImgData.width\n            } // missing letter issue already reported above\n        }\n        const img: CanvasRenderingContext2D = createContext(result.width, result.height)\n        img.putImageData(result, 0, 0)\n        return img.canvas\n    }\n}\n","import ResourceWorker from 'worker-loader!./wadworker/Resources'\nimport { RepeatWrapping, Texture } from 'three'\nimport { AnimationEntityType } from '../scene/model/anim/AnimationEntityType'\nimport { InitLoadingMessage } from './wadworker/InitLoadingMessage'\nimport { createContext, createDummyImgData } from '../core/ImageHelper'\nimport { iGet } from './wadworker/WadUtil'\nimport { getFilename } from '../core/Util'\nimport { AnimEntityLoader } from './AnimEntityLoader'\nimport { BitmapFont } from '../core/BitmapFont'\n\nexport class ResourceManager {\n\n    static worker: ResourceWorker = new ResourceWorker()\n    static configuration: any = {}\n    static resourceByName: {} = {}\n\n    static startLoadingFromCache() {\n        return this.startLoading(null)\n    }\n\n    static startLoadingFromUrl(wad0Url: string, wad1Url: string) {\n        return this.startLoading(new InitLoadingMessage(wad0Url, wad1Url))\n    }\n\n    private static startLoading(msg: InitLoadingMessage) {\n        this.worker.onmessage = (event) => {\n            const data = event.data\n            if (data.hasOwnProperty('msg')) {\n                this.onMessage(data.msg)\n            } else if (data.hasOwnProperty('cfg')) {\n                this.configuration = data.cfg\n                this.onInitialLoad(data.totalResources)\n            } else if (data.hasOwnProperty('cacheMissed')) {\n                this.onCacheMissed()\n            } else if (data.hasOwnProperty('assetIndex')) {\n                this.resourceByName[data.assetName.toLowerCase()] = data.assetObj\n                this.onAssetLoaded(data.assetIndex)\n            } else if (data.hasOwnProperty('done')) {\n                console.log('Loading of about ' + data.totalResources + ' assets complete! Total load time: ' + data.loadingTimeSeconds + ' seconds.')\n                this.onLoadDone()\n            }\n        }\n        this.worker.postMessage(msg)\n    }\n\n    static onMessage: (msg: string) => any = (msg: string) => {\n        console.log(msg)\n    }\n\n    static onCacheMissed: () => any = () => {\n        console.log('Worker missed cache')\n    }\n\n    static onInitialLoad: (totalResources: number) => any = () => {\n        console.log('Initial loading done.')\n    }\n\n    static onAssetLoaded: (assetIndex: number) => any = () => {\n    }\n\n    static onLoadDone: () => any = () => {\n    }\n\n    static cfg(...keys: string[]): any {\n        return iGet(ResourceManager.configuration, ...keys)\n    }\n\n    static filterTextureSequenceNames(basename: string): string[] {\n        const lBasename = basename.toLowerCase()\n        const result = Object.keys(this.resourceByName).filter((name) => name.startsWith(lBasename))\n        return result.length > 0 ? result : ResourceManager.filterTextureSequenceNames('world/shared/' + getFilename(basename))\n    }\n\n    static getResource(resourceName: string): any {\n        const lName = resourceName ? resourceName.toString().toLowerCase() : null\n        if (lName && this.resourceByName.hasOwnProperty(lName)) {\n            return this.resourceByName[lName]\n        }\n        return null\n    }\n\n    static getImageData(imageName): ImageData {\n        if (!imageName || imageName.length === 0) {\n            throw 'imageName must not be undefined, null or empty - was ' + imageName\n        }\n        const lImageName = imageName.toLowerCase()\n        let imgData = this.getResource(lImageName)\n        if (!imgData) {\n            console.error('Image \\'' + imageName + '\\' unknown! Using placeholder image instead')\n            ResourceManager.resourceByName[lImageName] = createDummyImgData(64, 64)\n        }\n        return ResourceManager.resourceByName[lImageName]\n    }\n\n    static getImage(imageName: string): HTMLCanvasElement {\n        const imgData = this.getImageData(imageName)\n        const context: CanvasRenderingContext2D = createContext(imgData.width, imgData.height)\n        context.putImageData(imgData, 0, 0)\n        return context.canvas\n    }\n\n    static getImageOrNull(imageName: string): HTMLCanvasElement | null {\n        if (!imageName) return null\n        return this.getImage(imageName)\n    }\n\n    static getTexture(textureName): Texture {\n        if (!textureName || textureName.length === 0) {\n            throw 'textureName must not be undefined, null or empty - was ' + textureName\n        }\n        const lTextureName = textureName.toLowerCase()\n        const lSharedTextureName = 'world/shared/' + getFilename(lTextureName)\n        let imgData = this.getResource(lTextureName) || this.getResource(lSharedTextureName)\n        if (!imgData) {\n            console.error('Texture \\'' + textureName + '\\' (' + lTextureName + ', ' + lSharedTextureName + ') unknown! Using placeholder texture instead')\n            ResourceManager.resourceByName[lTextureName] = imgData = createDummyImgData(64, 64)\n        }\n        const texture = new Texture(imgData, Texture.DEFAULT_MAPPING, RepeatWrapping, RepeatWrapping)\n        texture.needsUpdate = true\n        return texture\n    }\n\n    static getMap(name: string) {\n        return name ? this.getResource(name) : null\n    }\n\n    static getAnimationEntityType(aeFilename: string): AnimationEntityType {\n        let cfgRoot = this.getResource(aeFilename)\n        if (!cfgRoot) throw 'Could not get animation entity type for: ' + aeFilename\n        return AnimEntityLoader.loadModels(aeFilename, cfgRoot)\n    }\n\n    static getBitmapFont(name: string) {\n        return new BitmapFont(this.getResource(name))\n    }\n\n}\n","import { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../main'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { KEY_EVENT, POINTER_EVENT } from '../event/EventManager'\n\nexport class ScreenLayer {\n\n    canvas: HTMLCanvasElement\n    context: CanvasRenderingContext2D\n    onRedraw: (context: CanvasRenderingContext2D) => any\n\n    constructor(alpha: boolean = false, withContext: boolean = true) {\n        this.canvas = document.createElement('canvas')\n        if (!alpha) this.canvas.style.background = '#f0f'\n        if (withContext) this.context = this.canvas.getContext('2d', {alpha: alpha})\n        this.hide()\n    }\n\n    setZIndex(zIndex: number) {\n        this.canvas.style.zIndex = String(zIndex)\n    }\n\n    static compareZ(layerA: ScreenLayer, layerB: ScreenLayer) {\n        let aIndex = layerA?.canvas?.style?.zIndex || 0\n        const bIndex = layerB?.canvas?.style?.zIndex || 0\n        return aIndex === bIndex ? 0 : aIndex > bIndex ? -1 : 1\n    }\n\n    resize(width, height) {\n        this.canvas.width = width\n        this.canvas.height = height\n    }\n\n    redraw() {\n        if (this.isActive() && this.onRedraw) this.onRedraw(this.context)\n    }\n\n    show() {\n        this.canvas.style.visibility = 'visible'\n        this.redraw()\n    }\n\n    hide() {\n        this.canvas.style.visibility = 'hidden'\n    }\n\n    isActive() {\n        return this.canvas.style.visibility === 'visible'\n    }\n\n    toCanvasCoords(windowX: number, windowY: number) {\n        const clientRect = this.canvas.getBoundingClientRect()\n        return [windowX - clientRect.left, windowY - clientRect.top]\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        return false\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        return false\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        return false\n    }\n\n}\n\nexport class ScaledLayer extends ScreenLayer {\n\n    fixedWidth: number\n    fixedHeight: number\n\n    constructor() {\n        super(true)\n        this.fixedWidth = SPRITE_RESOLUTION_WIDTH\n        this.fixedHeight = SPRITE_RESOLUTION_HEIGHT\n    }\n\n    toScaledCoords(windowX: number, windowY: number) {\n        const [cx, cy] = this.toCanvasCoords(windowX, windowY)\n        return [cx / this.scaleX(), cy / this.scaleY()]\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        this.context.scale(this.scaleX(), this.scaleY())\n    }\n\n    scaleX() {\n        return this.canvas.width / this.fixedWidth\n    }\n\n    scaleY() {\n        return this.canvas.height / this.fixedHeight\n    }\n\n}\n\nexport class CursorLayer extends ScaledLayer {\n\n    curUrl\n    cursorName: string = 'Aclosed'\n\n    show() {\n        super.show()\n        this.createCursor()\n    }\n\n    hide() {\n        super.hide()\n        this.canvas.style.cursor = null\n    }\n\n    createCursor() {\n        if (this.curUrl) URL.revokeObjectURL(this.curUrl)\n        const curImg = ResourceManager.getImage('Interface/Pointers/' + this.cursorName + '.bmp')\n        this.curUrl = curImg.toDataURL()\n        // Chrome limits cursor size to 32x32 anyway...\n        // const context: CanvasRenderingContext2D = createContext(curImg.width * this.scaleX(), curImg.height * this.scaleY());\n        // context.scale(this.scaleX(), this.scaleY());\n        // context.drawImage(curImg, 0, 0);\n        // this.curUrl = context.canvas.toDataURL();\n        this.canvas.style.cursor = 'url(' + this.curUrl + '), auto'\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        if (this.isActive()) this.createCursor()\n    }\n\n}\n","import { Group, Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { Terrain } from './Terrain'\nimport { SurfaceType } from './SurfaceType'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Selectable, SelectionType } from '../../../game/model/Selectable'\nimport { EventBus } from '../../../event/EventBus'\nimport { SurfaceSelectedEvent } from '../../../event/LocalEvents'\nimport { JobType } from '../../../game/model/job/Job'\nimport { JobCreateEvent, JobDeleteEvent } from '../../../event/WorldEvents'\nimport { getRandom, getRandomSign } from '../../../core/Util'\nimport { Crystal } from '../collect/Crystal'\nimport { Ore } from '../collect/Ore'\nimport { HEIGHT_MULTIPLER, TILESIZE } from '../../../main'\nimport { GameState } from '../../../game/model/GameState'\nimport { SurfaceJob, SurfaceJobType } from '../../../game/model/job/SurfaceJob'\nimport { LWSCLoader } from '../../../resource/LWSCLoader'\nimport { AnimSubObj } from '../anim/AnimSubObj'\nimport { SurfaceGeometry } from './SurfaceGeometry'\n\nexport class Surface implements Selectable {\n\n    terrain: Terrain\n    surfaceType: SurfaceType\n    x: number\n    y: number\n    containedOres: number = 0\n    containedCrystals: number = 0\n    heightOffset: number = null\n    discovered: boolean = false\n    selected: boolean = false\n    reinforced: boolean = false\n    jobs: SurfaceJob[] = []\n    surfaceRotation: number = 0\n    seamLevel: number = 0\n    fallinTimeout = null\n\n    fallinGrp: Group = null\n    animationTimeout = null\n\n    wallType: WALL_TYPE = null\n    mesh: Mesh = null\n    needsMeshUpdate: boolean = false\n\n    constructor(terrain: Terrain, surfaceType: SurfaceType, x: number, y: number, heightOffset: number) {\n        this.terrain = terrain\n        this.surfaceType = surfaceType\n        if (surfaceType === SurfaceType.CRYSTAL_SEAM || surfaceType === SurfaceType.ORE_SEAM) this.seamLevel = 4\n        this.x = x\n        this.y = y\n        this.heightOffset = heightOffset\n        EventBus.registerEventListener(JobCreateEvent.eventKey, (event: JobCreateEvent) => {\n            const jobType = event.job.type\n            if (jobType === JobType.SURFACE) {\n                const surfaceJob = event.job as SurfaceJob\n                if (surfaceJob.surface === this) this.jobs.push(surfaceJob)\n            }\n        })\n    }\n\n    hasJobType(type: SurfaceJobType) {\n        return this.jobs.filter((job) => job.workType === type).length > 0\n    }\n\n    /**\n     * @return {boolean} Returns true, if a new cave has been discovered\n     */\n    discoverNeighbors(): boolean {\n        if (!this.discovered) GameState.discoverSurface(this)\n        this.discovered = true\n        this.needsMeshUpdate = true\n        let foundCave = false\n        if (this.surfaceType.floor) {\n            for (let x = this.x - 1; x <= this.x + 1; x++) {\n                for (let y = this.y - 1; y <= this.y + 1; y++) {\n                    if (x !== this.x || y !== this.y) {\n                        const surf = this.terrain.getSurfaceOrNull(x, y)\n                        if (surf && !surf.discovered) {\n                            foundCave = surf.discoverNeighbors() || surf.surfaceType.floor\n                            surf.needsMeshUpdate = true\n                        }\n                    }\n                }\n            }\n        }\n        return foundCave\n    }\n\n    collapse() {\n        this.cancelJobs()\n        if (this.fallinTimeout) clearTimeout(this.fallinTimeout)\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.containedOres += 4\n        this.needsMeshUpdate = true\n        // discover surface and all neighbors\n        const foundCave = this.discoverNeighbors()\n        if (foundCave) {\n            GameState.discoveredCaverns++ // TODO emit new-cave event instead\n            console.log('A new cave has been discovered')\n        }\n        // check for unsupported neighbors\n        for (let x = this.x - 1; x <= this.x + 1; x++) {\n            for (let y = this.y - 1; y <= this.y + 1; y++) {\n                if (x !== this.x || y !== this.y) {\n                    const surf = this.terrain.getSurface(x, y)\n                    surf.needsMeshUpdate = true\n                    if (!surf.isSupported()) surf.collapse()\n                }\n            }\n        }\n        // update meshes\n        this.terrain.updateSurfaceMeshes()\n        this.terrain.floorGroup.updateWorldMatrix(true, true)\n        // drop contained crystals and ores\n        for (let c = 0; c < this.containedCrystals; c++) {\n            const x = this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4)\n            const z = this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4)\n            this.terrain.worldMgr.addCollectable(new Crystal(), x, z)\n        }\n        this.dropContainedOre(this.containedOres - 4)\n        // TODO workaround until buildings can be placed without terrain ray intersection\n        GameState.buildings.forEach((b) => b.group.position.y = this.terrain.worldMgr.getTerrainHeight(b.group.position.x, b.group.position.z))\n    }\n\n    private dropContainedOre(dropAmount: number) {\n        for (let c = 0; c < dropAmount && this.containedOres > 0; c++) {\n            this.containedOres--\n            const x = this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4)\n            const z = this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4)\n            this.terrain.worldMgr.addCollectable(new Ore(), x, z)\n        }\n    }\n\n    cancelJobs() {\n        const jobs = this.jobs // ensure consistency while processing\n        this.jobs = []\n        jobs.forEach((job) => EventBus.publishEvent(new JobDeleteEvent(job)))\n        this.updateJobColor()\n    }\n\n    reduceRubble() {\n        if (this.surfaceType === SurfaceType.RUBBLE4) this.surfaceType = SurfaceType.RUBBLE3\n        else if (this.surfaceType === SurfaceType.RUBBLE3) this.surfaceType = SurfaceType.RUBBLE2\n        else if (this.surfaceType === SurfaceType.RUBBLE2) this.surfaceType = SurfaceType.RUBBLE1\n        else if (this.surfaceType === SurfaceType.RUBBLE1) this.surfaceType = SurfaceType.GROUND\n        this.dropContainedOre(1)\n        this.updateTexture()\n    }\n\n    isSupported(): boolean {\n        if (this.surfaceType.floor) return true\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        return isHighGround(surfLeft, surfTopLeft, surfTop)\n            || isHighGround(surfTop, surfTopRight, surfRight)\n            || isHighGround(surfRight, surfBottomRight, surfBottom)\n            || isHighGround(surfBottom, surfBottomLeft, surfLeft)\n    }\n\n    updateMesh(force: boolean = true) {\n        if (!force && !this.needsMeshUpdate) return\n        this.needsMeshUpdate = false\n\n        const topLeftVertex = new Vector3(this.x, 0, this.y)\n        const topRightVertex = new Vector3(this.x + 1, 0, this.y)\n        const bottomLeftVertex = new Vector3(this.x, 0, this.y + 1)\n        const bottomRightVertex = new Vector3(this.x + 1, 0, this.y + 1)\n\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        if (!this.discovered) {\n            topLeftVertex.y = 1\n            topRightVertex.y = 1\n            bottomRightVertex.y = 1\n            bottomLeftVertex.y = 1\n        } else if (!this.surfaceType.floor) {\n            if (isHighGround(surfLeft, surfTopLeft, surfTop)) topLeftVertex.y = 1\n            if (isHighGround(surfTop, surfTopRight, surfRight)) topRightVertex.y = 1\n            if (isHighGround(surfRight, surfBottomRight, surfBottom)) bottomRightVertex.y = 1\n            if (isHighGround(surfBottom, surfBottomLeft, surfLeft)) bottomLeftVertex.y = 1\n        }\n\n        // update mesh (geometry), if wall type changed\n        let wallType = topLeftVertex.y + topRightVertex.y + bottomRightVertex.y + bottomLeftVertex.y\n        if (wallType === WALL_TYPE.WALL && topLeftVertex.y === bottomRightVertex.y) wallType = WALL_TYPE.WEIRD_CREVICE\n\n        if (this.wallType !== wallType) {\n            this.wallType = wallType\n            this.updateGeometry(topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex, surfTopLeft, surfTop, surfLeft, surfTopRight, surfRight, surfBottomRight, surfBottom, surfBottomLeft)\n            if (this.wallType !== WALL_TYPE.WALL) this.cancelReinforceJobs()\n            // TODO if wall was reinforced remove it (same for fallin)\n        }\n\n        this.updateTexture()\n        this.updateJobColor()\n    }\n\n    cancelReinforceJobs() {\n        this.jobs.filter((j) => j.workType === SurfaceJobType.REINFORCE).forEach((j) => EventBus.publishEvent(new JobDeleteEvent(j)))\n        this.jobs = this.jobs.filter((j) => j.workType !== SurfaceJobType.REINFORCE)\n        this.updateJobColor()\n    }\n\n    updateTexture() {\n        let textureName = this.terrain.textureSet.texturebasename\n        if (!this.discovered) {\n            textureName += '70'\n        } else if (this.surfaceType === SurfaceType.POWER_PATH) {\n            textureName += this.updatePowerPathTexture()\n        } else if (!this.surfaceType.shaping) {\n            textureName += this.surfaceType.matIndex.toString()\n        } else if (this.wallType === WALL_TYPE.WEIRD_CREVICE) {\n            textureName += '77'\n        } else {\n            if (this.wallType === WALL_TYPE.CORNER) {\n                textureName += '5'\n            } else if (this.wallType === WALL_TYPE.INVERTED_CORNER) {\n                textureName += '3'\n            } else if (this.reinforced) {\n                textureName += '2'\n            } else {\n                textureName += '0'\n            }\n            textureName += this.surfaceType.matIndex\n        }\n        textureName += '.bmp'\n\n        const texture = ResourceManager.getTexture(textureName)\n        texture.center.set(0.5, 0.5)\n        texture.rotation = this.surfaceRotation\n\n        this.accessMaterials().forEach((mat) => mat.map = texture)\n    }\n\n    updatePowerPathTexture(): string {\n        this.surfaceRotation = 0\n        const left = this.terrain.getSurface(this.x - 1, this.y).isPath()\n        const top = this.terrain.getSurface(this.x, this.y - 1).isPath()\n        const right = this.terrain.getSurface(this.x + 1, this.y).isPath()\n        const bottom = this.terrain.getSurface(this.x, this.y + 1).isPath()\n        const pathSum = (left ? 1 : 0) + (top ? 1 : 0) + (right ? 1 : 0) + (bottom ? 1 : 0)\n        if (pathSum === 0 || pathSum === 1) {\n            if (left) this.surfaceRotation = Math.PI / 2\n            if (top) this.surfaceRotation = Math.PI\n            if (right) this.surfaceRotation = -Math.PI / 2\n            return '65'\n        } else if (pathSum === 2) {\n            if (left === right) {\n                this.surfaceRotation = left ? Math.PI / 2 : 0\n                return '62'\n            } else {\n                if (left && bottom) this.surfaceRotation = Math.PI / 2\n                if (left && top) this.surfaceRotation = Math.PI\n                if (top && right) this.surfaceRotation = -Math.PI / 2\n                return '63'\n            }\n        } else if (pathSum === 3) {\n            if (!top) this.surfaceRotation = Math.PI / 2\n            if (!right) this.surfaceRotation = Math.PI\n            if (!bottom) this.surfaceRotation = -Math.PI / 2\n            return '64'\n        } else {\n            return '60'\n        }\n    }\n\n    accessMaterials(): MeshPhongMaterial[] {\n        if (!this.mesh || !this.mesh.material) return []\n        if (Array.isArray(this.mesh.material)) {\n            return this.mesh.material as MeshPhongMaterial[]\n        } else {\n            return [this.mesh.material as MeshPhongMaterial]\n        }\n    }\n\n    updateGeometry(topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3, surfTopLeft: Surface, surfTop: Surface, surfLeft: Surface, surfTopRight: Surface, surfRight: Surface, surfBottomRight: Surface, surfBottom: Surface, surfBottomLeft: Surface) {\n        if (this.mesh) this.terrain.floorGroup.remove(this.mesh)\n        this.mesh?.geometry?.dispose()\n\n        function avgHeight(...args: Surface[]) {\n            let sum = 0, cnt = 0\n            args.map(s => s.heightOffset).filter(Boolean).forEach(h => {\n                sum += h\n                cnt++\n            })\n            return sum / cnt\n        }\n\n        const geometry = SurfaceGeometry.create(this.wallType, topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex,\n            topLeftVertex.y + avgHeight(surfTopLeft, surfTop, this, surfLeft) * HEIGHT_MULTIPLER,\n            topRightVertex.y + avgHeight(surfTop, surfTopRight, surfRight, this) * HEIGHT_MULTIPLER,\n            bottomRightVertex.y + avgHeight(this, surfRight, surfBottomRight, surfBottom) * HEIGHT_MULTIPLER,\n            bottomLeftVertex.y + avgHeight(surfLeft, this, surfBottom, surfBottomLeft) * HEIGHT_MULTIPLER,\n        )\n\n        this.mesh = new Mesh(geometry, new MeshPhongMaterial({shininess: 0}))\n        this.mesh.userData = {selectable: this}\n\n        this.terrain.floorGroup.add(this.mesh)\n        this.terrain.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.SURFACE\n    }\n\n    select(): Selectable {\n        if (this.surfaceType.selectable && (this.wallType !== WALL_TYPE.INVERTED_CORNER && this.wallType !== WALL_TYPE.WEIRD_CREVICE) && !this.selected) {\n            this.selected = true\n            this.accessMaterials().forEach((mat) => mat.color.setHex(0x6060a0))\n            EventBus.publishEvent(new SurfaceSelectedEvent(this))\n            return this\n        }\n        return null\n    }\n\n    deselect(): any {\n        if (this.selected) {\n            this.selected = false\n            this.updateJobColor()\n        }\n    }\n\n    getSelectionCenter(): Vector3 {\n        return null // not used\n    }\n\n    updateJobColor() {\n        let color = 0xffffff\n        this.jobs.forEach((job) => color = job.workType.color) // TODO prioritize colors?\n        this.accessMaterials().forEach((mat) => mat.color.setHex(color))\n    }\n\n    hasRubble(): boolean { // TODO performance: use boolean on surfacetype\n        return this.surfaceType === SurfaceType.RUBBLE1\n            || this.surfaceType === SurfaceType.RUBBLE2\n            || this.surfaceType === SurfaceType.RUBBLE3\n            || this.surfaceType === SurfaceType.RUBBLE4\n    }\n\n    isPath(): boolean {\n        return this.surfaceType === SurfaceType.POWER_PATH || this.surfaceType === SurfaceType.POWER_PATH_BUILDING\n    }\n\n    isWalkable(): boolean {\n        return this.surfaceType.floor && this.discovered && this.surfaceType !== SurfaceType.LAVA && this.surfaceType !== SurfaceType.WATER\n    }\n\n    isDrillable(): boolean {\n        return this.surfaceType.drillable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isReinforcable(): boolean {\n        return this.surfaceType.reinforcable && this.discovered && this.wallType === WALL_TYPE.WALL && !this.reinforced\n    }\n\n    isExplodable(): boolean {\n        return this.surfaceType.explodable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDigable(): boolean {\n        return this.isDrillable() || this.isExplodable()\n    }\n\n    getDigPositions(): Vector3[] {\n        const digPosition = []\n        if (this.terrain.getSurface(this.x - 1, this.y).isWalkable()) digPosition.push(new Vector3(this.x * TILESIZE - 1, 0, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y - 1).isWalkable()) digPosition.push(new Vector3(this.x * TILESIZE + TILESIZE / 2, 0, this.y * TILESIZE - 1))\n        if (this.terrain.getSurface(this.x + 1, this.y).isWalkable()) digPosition.push(new Vector3(this.x * TILESIZE + TILESIZE + 1, 0, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y + 1).isWalkable()) digPosition.push(new Vector3(this.x * TILESIZE + TILESIZE / 2, 0, this.y * TILESIZE + TILESIZE + 1))\n        return digPosition\n    }\n\n    reinforce() {\n        this.reinforced = true\n        this.cancelReinforceJobs()\n        if (this.fallinTimeout) clearTimeout(this.fallinTimeout)\n        this.updateTexture()\n    }\n\n    getCenterWorld(): Vector3 {\n        const center = new Vector3(this.x * TILESIZE + TILESIZE / 2, 0, this.y * TILESIZE + TILESIZE / 2)\n        center.y = this.terrain.worldMgr.getTerrainHeight(center.x, center.z)\n        return center\n    }\n\n    setFallinLevel(fallinLevel: number) {\n        if (fallinLevel < 1) return\n        let originPos\n        let targetPos\n        if (this.surfaceType.floor) {\n            originPos = this.terrain.findFallInOrigin(this.x, this.y)\n            targetPos = [this.x, this.y]\n        } else {\n            originPos = [this.x, this.y]\n            targetPos = this.terrain.findFallInTarget(this.x, this.y)\n        }\n        if (originPos && targetPos) {\n            this.terrain.getSurface(originPos[0], originPos[1]).scheduleFallin(targetPos[0], targetPos[1])\n        }\n    }\n\n    scheduleFallin(targetX: number, targetY: number) {\n        this.fallinTimeout = setTimeout(() => {\n            this.createFallin(targetX, targetY)\n            this.scheduleFallin(targetX, targetY)\n        }, (60 + getRandom(120)) * 1000) // TODO adapt timer to level multiplier and fallin value\n    }\n\n    createFallin(targetX: number, targetY: number) {\n        console.log('there was a fallin') // TODO publish event notice\n\n        // FIXME refactor animation handling\n        const content = ResourceManager.getResource('MiscAnims/RockFall/Rock3Sides.lws')\n        const animation = new LWSCLoader('MiscAnims/RockFall/').parse(content)\n        this.fallinGrp = new Group()\n        this.fallinGrp.position.copy(this.terrain.getSurface(targetX, targetY).getCenterWorld())\n        const dx = this.x - targetX, dy = targetY - this.y\n        this.fallinGrp.rotateOnAxis(new Vector3(0, 1, 0), Math.atan2(dy, dx) + Math.PI / 2)\n        this.terrain.worldMgr.sceneManager.scene.add(this.fallinGrp)\n        const poly = []\n        animation.bodies.forEach((body) => {\n            const polyModel = body.model.clone(true)\n            poly.push(polyModel)\n        })\n        animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                poly[parentInd].add(polyPart)\n            } else {\n                this.fallinGrp.add(polyPart)\n            }\n        })\n        this.animate(poly, animation, 0)\n\n        const targetSurface = this.terrain.getSurface(targetX, targetY)\n        targetSurface.surfaceType = SurfaceType.RUBBLE4\n        targetSurface.updateTexture()\n    }\n\n    animate(poly, animation, frameIndex) { // FIXME refactor animation handling\n        if (poly.length !== animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = true\n                        mat.alphaTest = 0\n                    })\n                }\n            }\n        })\n        this.animationTimeout = null\n        if (!(frameIndex + 1 > animation.lastFrame) || animation.looping) {\n            let nextFrame = frameIndex + 1\n            if (nextFrame > animation.lastFrame) {\n                nextFrame = animation.firstFrame\n            }\n            const that = this\n            this.animationTimeout = setTimeout(() => that.animate(poly, animation, nextFrame), 1000 / animation.framesPerSecond * animation.transcoef)\n        } else {\n            this.terrain.worldMgr.sceneManager.scene.remove(this.fallinGrp)\n            this.fallinGrp = null\n        }\n    }\n\n    dispose() {\n        this.mesh.geometry.dispose()\n        this.accessMaterials().forEach(m => m.dispose())\n    }\n\n}\n\nexport enum WALL_TYPE {\n\n    CORNER = 1,\n    WALL = 2,\n    INVERTED_CORNER = 3,\n    WEIRD_CREVICE = 20,\n\n}\n","import { CursorLayer, ScreenLayer } from './ScreenLayer'\nimport { EventManager } from '../event/EventManager'\n\nexport class BaseScreen {\n\n    gameCanvasContainer: HTMLElement\n    eventMgr: EventManager\n    layers: ScreenLayer[] = []\n    width: number = 800\n    height: number = 600\n    ratio: number = 800 / 600\n    cursorLayer: CursorLayer\n\n    constructor() {\n        this.gameCanvasContainer = document.getElementById('game-canvas-container')\n        this.eventMgr = new EventManager(this)\n        if (!this.gameCanvasContainer) throw 'Fatal error: game canvas container not found!'\n        window.addEventListener('resize', () => this.onWindowResize())\n        this.cursorLayer = this.addLayer(new CursorLayer(), 1000)\n        this.onWindowResize()\n    }\n\n    addLayer<T extends ScreenLayer>(layer: T, zIndex: number = 0): T {\n        layer.resize(this.width, this.height)\n        layer.setZIndex(zIndex)\n        this.layers.push(layer)\n        this.gameCanvasContainer.appendChild(layer.canvas)\n        return layer\n    }\n\n    redraw() {\n        this.layers.filter(layer => layer.isActive()).forEach((layer) => layer.redraw())\n    }\n\n    show() {\n        this.layers.forEach((layer) => layer.show())\n        this.redraw()\n    }\n\n    hide() {\n        this.layers.forEach((layer) => layer.hide())\n    }\n\n    onWindowResize() {\n        const maxWidth = this.gameCanvasContainer.offsetWidth, maxHeight = this.gameCanvasContainer.offsetHeight\n        const idealHeight = Math.round(maxWidth / this.ratio)\n        if (idealHeight > maxHeight) {\n            this.resize(Math.round(maxHeight * this.ratio), maxHeight)\n        } else {\n            this.resize(maxWidth, idealHeight)\n        }\n    }\n\n    resize(width: number, height: number) {\n        this.width = width\n        this.height = height\n        this.layers.forEach((layer) => layer.resize(width, height))\n        this.redraw()\n    }\n\n    isInRect(event: MouseEvent | WheelEvent) {\n        if (this.layers.length < 1) return false\n        const firstLayer = this.layers[0] // all layers have same state and size\n        if (!firstLayer.isActive() && !firstLayer.canvas) return false\n        const rect = firstLayer.canvas.getBoundingClientRect()\n        const clientX = event.clientX, clientY = event.clientY\n        return clientX >= rect.left && clientX < rect.right && clientY >= rect.top && clientY < rect.bottom\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class LoadingScreen extends BaseScreen {\n\n    layer: ScreenLayer\n    assetIndex: number = 0\n    totalResources: number = 0\n\n    constructor() {\n        super()\n        this.layer = this.addLayer(new ScreenLayer())\n        this.layer.onRedraw = (context) => {\n            // clear the screen to black\n            context.fillStyle = 'black'\n            context.fillRect(0, 0, this.width, this.height)\n            // draw the loading title\n            context.font = '48px Arial'\n            context.fillStyle = 'white'\n            context.fillText('Loading Rock Raiders', 5, this.height - 80)\n            // hard-code the first loading message\n            context.font = '30px Arial'\n            context.fillStyle = 'white'\n            context.fillText('Loading...', 20, this.height - 30)\n        }\n    }\n\n    show() {\n        this.layers.filter((l) => l !== this.cursorLayer).forEach((layer) => layer.show())\n        this.redraw()\n    }\n\n    setLoadingMessage(text) {\n        this.layer.onRedraw = (context) => {\n            // wipe old message text\n            context.fillStyle = 'black'\n            context.fillRect(0, this.height - 60, this.width, 60)\n            // write new message text\n            context.font = '30px Arial'\n            context.fillStyle = 'white'\n            context.fillText(text, 20, this.height - 30)\n        }\n        this.redraw()\n    }\n\n    enableGraphicMode(totalResources: number) {\n        this.totalResources = totalResources\n        const imgBackground = ResourceManager.getImage(ResourceManager.cfg('Main', 'LoadScreen'))\n        const imgProgress = ResourceManager.getImage(ResourceManager.cfg('Main', 'ProgressBar'))\n        this.layer.onRedraw = (context => {\n            const screenZoom = this.width / imgBackground.width\n            const loadingBarWidth = 353 * this.assetIndex / this.totalResources * screenZoom\n            context.drawImage(imgBackground, 0, 0, this.width, this.height)\n            context.drawImage(imgProgress, 142 * screenZoom, 450 * screenZoom, loadingBarWidth, 9 * screenZoom)\n            // TODO show LoadingText from cfg\n        })\n        this.cursorLayer.show()\n        this.redraw()\n    }\n\n    setLoadingState(assetIndex) {\n        if (this.assetIndex === assetIndex) return\n        this.assetIndex = assetIndex\n        this.redraw()\n    }\n\n}\n","export class MainMenuBaseItem {\n\n    x: number = 0\n    y: number = 0\n    width: number = 0\n    height: number = 0\n    zIndex: number = 100\n    scrollAffected = false\n    needsRedraw: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n    actionName: string = ''\n    targetIndex: number = 0\n\n    static compareZ(left: MainMenuBaseItem, right: MainMenuBaseItem) {\n        return left.zIndex === right.zIndex ? 0 : left.zIndex > right.zIndex ? -1 : 1\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const hover = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        if (this.hover !== hover) {\n            this.hover = hover\n            this.needsRedraw = true\n            this.onHoverChange()\n        }\n        if (!this.hover) this.pressed = false\n        return this.hover\n    }\n\n    onHoverChange() {\n    }\n\n    checkSetPressed() {\n        if (!this.hover) return\n        if (!this.pressed) this.needsRedraw = true\n        this.pressed = true\n    }\n\n    setReleased() {\n        if (this.pressed) this.needsRedraw = true\n        this.pressed = false\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        this.needsRedraw = false\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuItemCfg } from '../cfg/MainMenuItemCfg'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class MainMenuLabelButton extends MainMenuBaseItem {\n\n    labelImgLo = null\n    labelImgHi = null\n\n    constructor(layer: MainMenuLayer, cfg: MainMenuItemCfg) {\n        super()\n        this.labelImgLo = layer.loFont.createTextImage(cfg.label)\n        this.labelImgHi = layer.hiFont.createTextImage(cfg.label)\n        this.width = Math.max(this.labelImgLo.width, this.labelImgHi.width)\n        this.height = Math.max(this.labelImgLo.height, this.labelImgHi.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const img = this.hover && !this.pressed ? this.labelImgHi : this.labelImgLo\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuItemCfg } from '../cfg/MainMenuItemCfg'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class MainMenuIconButton extends MainMenuBaseItem {\n\n    imgNormal = null\n    imgHover = null\n    imgPressed = null\n    tooltip = ''\n\n    constructor(layer: MainMenuLayer, cfg: MainMenuItemCfg) {\n        super()\n        this.imgNormal = ResourceManager.getImage(cfg.imgNormal)\n        this.imgHover = ResourceManager.getImage(cfg.imgHover)\n        this.imgPressed = ResourceManager.getImage(cfg.imgPressed)\n        this.tooltip = (cfg.tooltip || '').replace(/_/g, ' ')\n        this.width = Math.max(this.imgNormal.width, this.imgHover.width, this.imgPressed.width)\n        this.height = Math.max(this.imgNormal.height, this.imgHover.height, this.imgPressed.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgNormal\n        if (this.hover) img = this.imgHover\n        if (this.pressed) img = this.imgPressed\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuLabelButton } from './MainMenuLabelButton'\nimport { ScaledLayer } from '../screen/ScreenLayer'\nimport { MenuCfg } from '../cfg/MenuCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventManager'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuIconButton } from './MainMenuIconButton'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\n\nexport class MainMenuLayer extends ScaledLayer {\n\n    screen: MainMenuScreen\n    cfg: MenuCfg\n    fullName: string\n    titleImage: HTMLCanvasElement\n    title: string\n    menuFont: BitmapFont\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    menuImage: HTMLCanvasElement\n    items: MainMenuBaseItem[] = []\n    scrollY: number = 0\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuCfg) {\n        super()\n        this.screen = screen\n        this.cfg = menuCfg\n        this.fullName = menuCfg.fullName\n        this.title = menuCfg.title\n        this.menuFont = menuCfg.menuFont ? ResourceManager.getBitmapFont(menuCfg.menuFont) : null\n        this.loFont = menuCfg.loFont ? ResourceManager.getBitmapFont(menuCfg.loFont) : null\n        this.hiFont = menuCfg.hiFont ? ResourceManager.getBitmapFont(menuCfg.hiFont) : null\n        this.menuImage = menuCfg.menuImage ? ResourceManager.getImage(menuCfg.menuImage) : null\n        this.titleImage = this.loFont.createTextImage(this.fullName)\n\n        menuCfg.items.forEach((item) => {\n            if (item.label) {\n                this.items.push(new MainMenuLabelButton(this, item))\n            } else {\n                this.items.push(new MainMenuIconButton(this, item))\n            }\n        })\n\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n\n        this.onRedraw = (context) => {\n            context.drawImage(this.menuImage, 0, -this.scrollY)\n            if (menuCfg.displayTitle) context.drawImage(this.titleImage, (this.fixedWidth - this.titleImage.width) / 2, this.cfg.position[1])\n            this.items.forEach((item, index) => (this.items[this.items.length - 1 - index]).draw(context))\n        }\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (eventEnum === POINTER_EVENT.MOVE) { // TODO scroll when close to menu top/bottom border\n            const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n            let hovered = false\n            this.items.forEach((item) => {\n                if (!hovered) {\n                    const absY = sy + (item.scrollAffected ? this.scrollY : 0)\n                    hovered = item.checkHover(sx, absY)\n                } else {\n                    if (item.hover) item.needsRedraw = true\n                    item.hover = false\n                    item.setReleased()\n                }\n            })\n        } else if (eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => item.checkSetPressed())\n            }\n        } else if (eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => {\n                    if (item.pressed) {\n                        item.setReleased()\n                        if (item.actionName.toLowerCase() === 'next') {\n                            this.screen.showMainMenu(item.targetIndex)\n                        } else if (item.actionName.toLowerCase() === 'selectlevel') {\n                            this.screen.selectLevel((item as MainMenuLevelButton).levelKey)\n                        } else if (item.actionName) {\n                            console.warn('not implemented: ' + item.actionName + ' - ' + item.targetIndex)\n                        }\n                    }\n                })\n            }\n        }\n        if (this.needsRedraw()) this.redraw()\n        return false\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        if (!this.cfg.canScroll) return false\n        this.scrollY = Math.min(Math.max(this.scrollY + event.deltaY, 0), this.menuImage.height - this.fixedHeight)\n        this.redraw()\n        return true\n    }\n\n    needsRedraw(): boolean {\n        return this.items.some((item) => item.needsRedraw)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class MainMenuLevelButton extends MainMenuBaseItem {\n\n    layer: MainMenuLayer\n    imgActive = null\n    imgInactive = null\n    imgCross = null\n    unlocked: boolean = false\n    levelKey: string = ''\n\n    constructor(layer: MainMenuLayer, levelKey: string, levelCfg: LevelEntryCfg) {\n        super()\n        this.layer = layer\n        this.actionName = 'selectlevel'\n        this.levelKey = levelKey\n        this.x = levelCfg.frontEndX\n        this.y = levelCfg.frontEndY\n        this.zIndex = 10\n        this.scrollAffected = true\n        const [imgActive, imgInactive, imgCross] = levelCfg.menuBMP\n        this.imgActive = ResourceManager.getImage(imgActive)\n        this.imgInactive = ResourceManager.getImage(imgInactive)\n        this.imgCross = ResourceManager.getImage(imgCross)\n        this.width = Math.max(this.imgActive.width, this.imgInactive.width, this.imgCross.width)\n        this.height = Math.max(this.imgActive.height, this.imgInactive.height, this.imgCross.height)\n        this.unlocked = levelCfg.frontEndOpen\n        this.unlocked = true // TODO don't unlock everything by default\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgCross\n        if (this.unlocked) img = this.hover ? this.imgActive : this.imgInactive\n        context.drawImage(img, this.x, this.y - this.layer.scrollY)\n    }\n\n}\n","import { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { createContext } from '../core/ImageHelper'\n\nexport class MainMenuPanel extends MainMenuBaseItem {\n\n    context: CanvasRenderingContext2D\n\n    constructor(imgData: ImageData, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.zIndex = 50\n        this.context = createContext(imgData.width, imgData.height)\n        this.context.putImageData(imgData, 0, 0)\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const inRect = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        const hover = inRect && this.context.getImageData(sx, sy, 1, 1).data[3] > 0\n        if (this.hover !== hover) this.needsRedraw = true\n        this.hover = hover\n        return this.hover\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        context.drawImage(this.context.canvas, this.x, this.y, this.width, this.height)\n    }\n\n}\n","import { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { BitmapFont } from '../core/BitmapFont'\n\nexport class MainMenuWindow extends MainMenuBaseItem {\n\n    font: BitmapFont\n    imgFirstLine = null\n    imgSecondLine = null\n\n    constructor(font: BitmapFont, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.font = font\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    setFirstLine(text: string) {\n        this.imgFirstLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    setSecondLine(text: string) {\n        this.imgSecondLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const cx = this.x + this.width / 2, cy = this.y + this.height / 2\n        if (this.imgFirstLine) context.drawImage(this.imgFirstLine, cx - this.imgFirstLine.width / 2, cy - this.imgFirstLine.height)\n        if (this.imgSecondLine) context.drawImage(this.imgSecondLine, cx - this.imgSecondLine.width / 2, cy)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { LevelEntryCfg, LevelsCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MenuCfg } from '../cfg/MenuCfg'\nimport { iGet } from '../core/Util'\nimport { MainMenuPanel } from './MainMenuPanel'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuWindow } from './MainMenuWindow'\n\nexport class LevelSelectLayer extends MainMenuLayer {\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuCfg, modeLevel: boolean) {\n        super(screen, menuCfg)\n        const levelsCfg: LevelsCfg = ResourceManager.getResource('Levels')\n        const levelTextCfg = new LevelTextCfg()\n        this.items.push(new MainMenuPanel(levelTextCfg.panelImgData, levelTextCfg.panelPos))\n        const levelTextWindow = new MainMenuWindow(ResourceManager.getBitmapFont('Interface/Fonts/Font5_Hi.bmp'), levelTextCfg.window)\n        levelTextWindow.setFirstLine(modeLevel ? levelTextCfg.level : levelTextCfg.tutorial)\n        this.items.push(levelTextWindow)\n        Object.keys(levelsCfg.levelsByName).forEach((levelKey) => {\n            const level: LevelEntryCfg = levelsCfg.levelsByName[levelKey]\n            const levelButton = new MainMenuLevelButton(this, levelKey, level)\n            levelButton.onHoverChange = () => levelTextWindow.setSecondLine(levelButton.hover ? level.fullName : '')\n            this.items.push(levelButton)\n        })\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n    }\n\n    show() {\n        this.scrollY = 0\n        super.show()\n    }\n\n}\n\nclass LevelTextCfg {\n\n    window = {x: 0, y: 0, w: 0, h: 0}\n    panelImgData: ImageData\n    panelPos = {x: 0, y: 0, w: 0, h: 0}\n    level: string = ''\n    tutorial: string = ''\n\n    constructor() {\n        const cfg = ResourceManager.cfg('Menu', 'LevelText')\n        const winCfg = iGet(cfg, 'Window')\n        this.window = {x: winCfg[0], y: winCfg[1], w: winCfg[2], h: winCfg[3]}\n        const panelCfg = iGet(cfg, 'Panel')\n        this.panelImgData = ResourceManager.getImageData(panelCfg[0])\n        this.panelPos = {x: panelCfg[1], y: panelCfg[2], w: panelCfg[3], h: panelCfg[4]}\n        this.level = iGet(cfg, 'Level').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n        this.tutorial = iGet(cfg, 'Tutorial').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuFullCfg } from '../cfg/MainMenuFullCfg'\nimport { MainMenuLayer } from '../menu/MainMenuLayer'\nimport { LevelSelectLayer } from '../menu/LevelSelectLayer'\n\nexport class MainMenuScreen extends BaseScreen {\n\n    onLevelSelected: (levelName: string) => void = null\n    menus: MainMenuLayer[] = []\n\n    constructor() {\n        super()\n        const mainMenuFullCfg = ResourceManager.getResource('MainMenuFull') as MainMenuFullCfg\n        mainMenuFullCfg.menus.forEach((menuCfg) => {\n            let layer\n            if (menuCfg.title === 'Levels') {\n                layer = new LevelSelectLayer(this, menuCfg, true)\n            } else if (menuCfg.title === 'Tutorials') {\n                layer = new LevelSelectLayer(this, menuCfg, false)\n            } else {\n                layer = new MainMenuLayer(this, menuCfg)\n            }\n            this.menus.push(layer)\n            this.addLayer(layer)\n        })\n    }\n\n    showMainMenu(index: number = 0) {\n        this.hide()\n        this.menus[index].show()\n        this.cursorLayer.show()\n    }\n\n    showLevelSelection() {\n        this.showMainMenu(1)\n    }\n\n    selectLevel(levelName) {\n        this.hide()\n        this.onLevelSelected(levelName)\n    }\n\n}\n","export class SurfaceType {\n\n    name: string // humand readable, maybe used as label lateron\n    shaping: boolean = false\n    matIndex: string = '00'\n    floor: boolean = false\n    selectable: boolean = false\n    drillable: boolean = false\n    explodable: boolean = false\n    reinforcable: boolean = false\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options)\n    }\n\n    static readonly GROUND = new SurfaceType({name: 'ground', floor: true, selectable: true})\n    static readonly SOLID_ROCK = new SurfaceType({name: 'solid rock', shaping: true, matIndex: '5'})\n    static readonly HARD_ROCK = new SurfaceType({\n        name: 'hard rock',\n        shaping: true,\n        matIndex: '4',\n        selectable: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly LOOSE_ROCK = new SurfaceType({\n        name: 'loose rock',\n        shaping: true,\n        matIndex: '3',\n        selectable: true,\n        drillable: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly DIRT = new SurfaceType({\n        name: 'dirt',\n        shaping: true,\n        matIndex: '1',\n        selectable: true,\n        drillable: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly SLUG_HOLE = new SurfaceType({name: 'slug hole', floor: true, matIndex: '30'})\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'})\n    static readonly ORE_SEAM = new SurfaceType({\n        name: 'ore seam',\n        matIndex: '40',\n        selectable: true,\n        drillable: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45'})\n    static readonly CRYSTAL_SEAM = new SurfaceType({\n        name: 'energy crystal seam',\n        matIndex: '20',\n        selectable: true,\n        drillable: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly RECHARGE_SEAM = new SurfaceType({name: 'recharge seam', matIndex: '67'})\n    static readonly POWER_PATH = new SurfaceType({\n        name: 'power path all',\n        floor: true,\n        matIndex: '60',\n        selectable: true,\n    })\n    static readonly POWER_PATH_SITE = new SurfaceType({\n        name: 'power path site',\n        floor: true,\n        matIndex: '61',\n        selectable: true,\n    })\n    static readonly POWER_PATH_BUILDING = new SurfaceType({name: 'power path', floor: true, matIndex: '76'})\n    static readonly RUBBLE1 = new SurfaceType({name: 'rubble 1', floor: true, matIndex: '13', selectable: true})\n    static readonly RUBBLE2 = new SurfaceType({name: 'rubble 2', floor: true, matIndex: '12', selectable: true})\n    static readonly RUBBLE3 = new SurfaceType({name: 'rubble 3', floor: true, matIndex: '11', selectable: true})\n    static readonly RUBBLE4 = new SurfaceType({name: 'rubble 4', floor: true, matIndex: '10', selectable: true})\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING\n            case 1:\n                return SurfaceType.SOLID_ROCK\n            case 2:\n                return SurfaceType.HARD_ROCK\n            case 3:\n                return SurfaceType.LOOSE_ROCK\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT\n            case 6:\n                return SurfaceType.LAVA\n            case 8:\n                return SurfaceType.ORE_SEAM\n            case 9:\n                return SurfaceType.WATER\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM\n            case 11:\n                return SurfaceType.RECHARGE_SEAM\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE\n            case 100:\n                return SurfaceType.RUBBLE4\n            case 101:\n                return SurfaceType.RUBBLE3\n            case 102:\n                return SurfaceType.RUBBLE2\n            case 103:\n                return SurfaceType.RUBBLE1\n            default:\n                console.error('Unexpected surface type num: ' + typeNum)\n                return SurfaceType.SOLID_ROCK\n        }\n    }\n}\n","import { Surface } from '../../../scene/model/map/Surface'\nimport { FulfillerEntity } from '../../../scene/model/FulfillerEntity'\nimport { Vector3 } from 'three'\nimport { JOB_ACTION_RANGE, TILESIZE } from '../../../main'\nimport { Dynamite } from '../../../scene/model/collect/Dynamite'\nimport { Job, JobType } from './Job'\nimport { SurfaceType } from '../../../scene/model/map/SurfaceType'\nimport { CollectableEntity } from '../../../scene/model/collect/CollectableEntity'\n\nexport class SurfaceJobType {\n\n    color: number\n    requiredTools: string[]\n    requiredSkills: string[]\n\n    constructor(color: number, requiredTools: string[], requiredSkills: string[]) {\n        this.color = color\n        this.requiredTools = requiredTools\n        this.requiredSkills = requiredSkills\n    }\n\n    static readonly DRILL = new SurfaceJobType(0xa0a0a0, ['drill'], [])\n    static readonly REINFORCE = new SurfaceJobType(0x60a060, ['hammer'], [])\n    static readonly BLOW = new SurfaceJobType(0xa06060, [], ['demolition'])\n    static readonly CLEAR_RUBBLE = new SurfaceJobType(0xffffff, ['shovel'], [])\n\n}\n\nexport class SurfaceJob extends Job {\n\n    surface: Surface\n    workType: SurfaceJobType\n\n    constructor(workType: SurfaceJobType, surface: Surface) {\n        super(JobType.SURFACE)\n        this.surface = surface\n        this.workType = workType\n    }\n\n    isQualified(fulfiller: FulfillerEntity) {\n        return fulfiller.hasTools(this.workType.requiredTools) && fulfiller.hasSkills(this.workType.requiredSkills)\n    }\n\n    getPosition(): Vector3 {\n        if (this.workType === SurfaceJobType.CLEAR_RUBBLE) {\n            return this.surface.getCenterWorld()\n        } else {\n            const digPos = this.surface.getDigPositions()[0]\n            digPos.y = this.surface.terrain.worldMgr.getTerrainHeight(digPos.x, digPos.z)\n            return digPos\n        }\n    }\n\n    isInArea(x: number, z: number): boolean {\n        if (this.workType === SurfaceJobType.CLEAR_RUBBLE) {\n            return x >= this.surface.x * TILESIZE + 5 && x < this.surface.x * TILESIZE + TILESIZE + 5\n                && z >= this.surface.y * TILESIZE + 5 && z < this.surface.y * TILESIZE + TILESIZE + 5\n        } else {\n            const pos = this.getPosition()\n            return pos.sub(new Vector3(x, pos.y, z)).length() < JOB_ACTION_RANGE\n        }\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        switch (this.workType) {\n            case SurfaceJobType.DRILL:\n                this.surface.collapse()\n                break\n            case SurfaceJobType.REINFORCE:\n                this.surface.reinforce()\n                break\n            case SurfaceJobType.CLEAR_RUBBLE:\n                this.surface.reduceRubble()\n                break\n        }\n    }\n\n}\n\nexport class DynamiteJob extends SurfaceJob {\n\n    dynamite: Dynamite\n\n    constructor(surface: Surface, dynamite: Dynamite) {\n        super(SurfaceJobType.BLOW, surface)\n        this.dynamite = dynamite\n    }\n\n    getPosition(): Vector3 {\n        return this.dynamite.getPosition()\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.dynamite.ignite()\n    }\n\n}\n\nexport class CompletePowerPathJob extends SurfaceJob {\n\n    placedItems: CollectableEntity[]\n\n    constructor(surface: Surface, placedItems: CollectableEntity[]) {\n        super(SurfaceJobType.CLEAR_RUBBLE, surface)\n        this.placedItems = placedItems\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.placedItems.forEach((placed) => placed.worldMgr.sceneManager.scene.remove(placed.group))\n        this.surface.surfaceType = SurfaceType.POWER_PATH\n        this.surface.updateTexture()\n    }\n\n}\n","import { BufferGeometry, Vector2, Vector3 } from 'three'\nimport { WALL_TYPE } from './Surface'\nimport { BufferAttribute } from 'three/src/core/BufferAttribute'\n\nexport class SurfaceGeometry {\n\n    public static create(wallType: WALL_TYPE,\n                         topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3,\n                         topLeftHeight: number, topRightHeight: number, bottomRightHeight: number, bottomLeftHeight: number,\n    ) {\n        let uvOffset = 0\n\n        // not-rotated\n        // 1 ?\n        // ? 0\n        if (topLeftVertex.y && !bottomRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topRightVertex.y)))) {\n            uvOffset = 0\n        }\n\n        // 90 clock-wise\n        // ? 1\n        // 0 ?\n        if (topRightVertex.y && !bottomLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomRightVertex.y)))) {\n            uvOffset = 3\n        }\n\n        // 180 clock-wise\n        // 0 ?\n        // ? 1\n        if (bottomRightVertex.y && !topLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomLeftVertex.y)))) {\n            uvOffset = 2\n        }\n\n        // 270 clock-wise\n        // ? 0\n        // 1 ?\n        if (bottomLeftVertex.y && !topRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topLeftVertex.y)))) {\n            uvOffset = 1\n        }\n\n        if (wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) {\n            if (topLeftVertex.y && bottomRightVertex.y) {\n                uvOffset = 0\n            }\n            if (topRightVertex.y && bottomLeftVertex.y) {\n                uvOffset = 3\n            }\n        }\n\n        /*\n        //\t\t0---1                1         0---1\n        //\t\t|   |  becomes      /|   and   |  /\n        //\t\t|   |             /  |         |/\n        //\t\t3---2            3---2         3\n        //\n        //\t\tOR\n        //\n        //\t\t0---1            0             0---1\n        //\t\t|   |  becomes   |\\    \t and    \\  |\n        //\t\t|   |            |  \\             \\|\n        //\t\t3---2            3---2             2\n        //\n        //\t\tTriangles 0-1-3 and 0-3-2\n        //\t\tQuad 0-1-3-2\n        */\n\n        const uv = [\n            new Vector2(0, 1),\n            new Vector2(1, 1),\n            new Vector2(1, 0),\n            new Vector2(0, 0),\n        ]\n\n        const bufferVertices = []\n        const bufferNormals = []\n\n        function addFaceAndNormals(a, b, c) {\n            bufferVertices.push(a, b, c)\n            const normal = new Vector3().subVectors(c, b)\n            normal.cross(new Vector3().subVectors(a, b))\n            normal.normalize()\n            bufferNormals.push(normal, normal, normal)\n        }\n\n        const uvIndexes = []\n        if (topRightVertex.y !== bottomLeftVertex.y ||\n            ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) && !(topRightVertex.y && bottomLeftVertex.y))) {\n            uvIndexes.push(1, 3, 2)\n            uvIndexes.push(1, 0, 3)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topRightVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topRightVertex, topLeftVertex, bottomLeftVertex)\n        } else {\n            uvIndexes.push(0, 3, 2)\n            uvIndexes.push(0, 2, 1)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topLeftVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topLeftVertex, bottomRightVertex, topRightVertex)\n        }\n\n        const bufferVertexUvs = uvIndexes.map(i => uv[(i + uvOffset) % 4])\n\n        const bufferGeometry = new BufferGeometry()\n        bufferGeometry.setAttribute('position', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferVertices))\n        bufferGeometry.setAttribute('normal', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferNormals))\n        bufferGeometry.setAttribute('uv', new BufferAttribute(new Float32Array(12), 2).copyVector2sArray(bufferVertexUvs))\n        return bufferGeometry\n    }\n}\n","// javascript-astar 0.4.1 (converted to typescript by Scarabol)\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n\nfunction pathTo(node) {\n    let curr = node\n    const path = []\n    while (curr.parent) {\n        path.unshift(curr)\n        curr = curr.parent\n    }\n    return path\n}\n\nfunction getHeap() {\n    return new BinaryHeap(function (node) {\n        return node.f\n    })\n}\n\nexport const astar = {\n\n    /**\n     * Perform an A* Search on a graph given a start and end node.\n     * @param {Graph} graph\n     * @param {GridNode} start\n     * @param {GridNode} end\n     * @param {Object} [options]\n     * @param {boolean} [options.closest] Specifies whether to return the\n     path to the closest node if the target is unreachable.\n     * @param {Function} [options.heuristic] Heuristic function (see\n     *          astar.heuristics).\n     */\n    search(graph: Graph, start: GridNode, end: GridNode, options = null): GridNode[] {\n        graph.cleanDirty()\n        options = options || {}\n        const heuristic = options.heuristic || astar.heuristics.manhattan\n        const closest = options.closest || false\n\n        const openHeap = getHeap()\n        let closestNode = start  // set the start node to be the closest if required\n\n        start.h = heuristic(start, end)\n        graph.markDirty(start)\n\n        openHeap.push(start)\n\n        while (openHeap.size() > 0) {\n\n            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n            const currentNode = openHeap.pop()\n\n            // End case -- result has been found, return the traced path.\n            if (currentNode === end) {\n                return pathTo(currentNode)\n            }\n\n            // Normal case -- move currentNode from open to closed, process each of its neighbors.\n            currentNode.closed = true\n\n            // Find all neighbors for the current node.\n            const neighbors = graph.neighbors(currentNode)\n\n            let i = 0\n            const il = neighbors.length\n            for (; i < il; ++i) {\n                const neighbor = neighbors[i]\n\n                if (neighbor.closed || neighbor.isWall()) {\n                    // Not a valid node to process, skip to next neighbor.\n                    continue\n                }\n\n                // The g score is the shortest distance from start to current node.\n                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n                const gScore = currentNode.g + neighbor.getCost(currentNode)\n                const beenVisited = neighbor.visited\n\n                if (!beenVisited || gScore < neighbor.g) {\n\n                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n                    neighbor.visited = true\n                    neighbor.parent = currentNode\n                    neighbor.h = neighbor.h || heuristic(neighbor, end)\n                    neighbor.g = gScore\n                    neighbor.f = neighbor.g + neighbor.h\n                    graph.markDirty(neighbor)\n                    if (closest) {\n                        // If the neighbour is closer than the current closestNode or if it's equally close but has\n                        // a cheaper path than the current closest node then it becomes the closest node\n                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n                            closestNode = neighbor\n                        }\n                    }\n\n                    if (!beenVisited) {\n                        // Pushing to heap will put it in proper place based on the 'f' value.\n                        openHeap.push(neighbor)\n                    } else {\n                        // Already seen the node, but since it has been rescored we need to reorder it in the heap\n                        openHeap.rescoreElement(neighbor)\n                    }\n                }\n            }\n        }\n\n        if (closest) {\n            return pathTo(closestNode)\n        }\n\n        // No result was found - empty array signifies failure to find path.\n        return []\n    },\n\n    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n    heuristics: {\n        manhattan(pos0, pos1) {\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return d1 + d2\n        },\n\n        diagonal(pos0, pos1) {\n            const D = 1\n            const D2 = Math.sqrt(2)\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2))\n        },\n    },\n\n    cleanNode(node) {\n        node.f = 0\n        node.g = 0\n        node.h = 0\n        node.visited = false\n        node.closed = false\n        node.parent = null\n    },\n}\n\nexport class Graph {\n\n    readonly nodes: GridNode[] = []\n    readonly diagonal: boolean\n    readonly grid: GridNode[][] = []\n    dirtyNodes: GridNode[] = []\n\n    /**\n     * A graph memory structure\n     * @param {Array} gridIn 2D array of input weights\n     * @param {Object} [options]\n     * @param {boolean} [options.diagonal] Specifies whether diagonal moves are allowed\n     */\n    constructor(gridIn: number[][], options = null) {\n        options = options || {}\n        this.diagonal = !!options.diagonal\n        for (let x = 0; x < gridIn.length; x++) {\n            this.grid[x] = []\n\n            let y = 0\n            const row = gridIn[x]\n            for (; y < row.length; y++) {\n                const node = new GridNode(x, y, row[y])\n                this.grid[x][y] = node\n                this.nodes.push(node)\n            }\n        }\n        this.init()\n    }\n\n    init() {\n        this.dirtyNodes = []\n        for (let i = 0; i < this.nodes.length; i++) {\n            astar.cleanNode(this.nodes[i])\n        }\n    }\n\n    cleanDirty() {\n        for (let i = 0; i < this.dirtyNodes.length; i++) {\n            astar.cleanNode(this.dirtyNodes[i])\n        }\n        this.dirtyNodes = []\n    }\n\n    markDirty(node) {\n        this.dirtyNodes.push(node)\n    }\n\n    neighbors(node: GridNode) {\n        const ret: GridNode[] = []\n        const x = node.x\n        const y = node.y\n        const grid = this.grid\n\n        // West\n        if (grid[x - 1] && grid[x - 1][y]) {\n            ret.push(grid[x - 1][y])\n        }\n\n        // East\n        if (grid[x + 1] && grid[x + 1][y]) {\n            ret.push(grid[x + 1][y])\n        }\n\n        // South\n        if (grid[x] && grid[x][y - 1]) {\n            ret.push(grid[x][y - 1])\n        }\n\n        // North\n        if (grid[x] && grid[x][y + 1]) {\n            ret.push(grid[x][y + 1])\n        }\n\n        if (this.diagonal) {\n            // Southwest\n            if (grid[x - 1] && grid[x - 1][y - 1]) {\n                ret.push(grid[x - 1][y - 1])\n            }\n\n            // Southeast\n            if (grid[x + 1] && grid[x + 1][y - 1]) {\n                ret.push(grid[x + 1][y - 1])\n            }\n\n            // Northwest\n            if (grid[x - 1] && grid[x - 1][y + 1]) {\n                ret.push(grid[x - 1][y + 1])\n            }\n\n            // Northeast\n            if (grid[x + 1] && grid[x + 1][y + 1]) {\n                ret.push(grid[x + 1][y + 1])\n            }\n        }\n\n        return ret\n    }\n\n    toString() {\n        const graphString = []\n        const nodes = this.grid\n        for (let x = 0; x < nodes.length; x++) {\n            const rowDebug = []\n            const row = nodes[x]\n            for (let y = 0; y < row.length; y++) {\n                rowDebug.push(row[y].weight)\n            }\n            graphString.push(rowDebug.join(' '))\n        }\n        return graphString.join('\\n')\n    }\n}\n\nclass GridNode {\n\n    x: number\n    y: number\n    weight: number\n    h: number\n    closed: boolean\n    visited: boolean\n    g: number\n    parent: GridNode\n    f: number\n\n    constructor(x, y, weight) {\n        this.x = x\n        this.y = y\n        this.weight = weight\n    }\n\n    toString() {\n        return '[' + this.x + ' ' + this.y + ']'\n    }\n\n    getCost(fromNeighbor: GridNode) {\n        // Take diagonal weight into consideration.\n        if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n            return this.weight * 1.41421\n        }\n        return this.weight\n    }\n\n    isWall() {\n        return this.weight === 0\n    }\n}\n\nclass BinaryHeap {\n\n    content = []\n    scoreFunction\n\n    constructor(scoreFunction) {\n        this.content = []\n        this.scoreFunction = scoreFunction\n    }\n\n    push(element) {\n        // Add the new element to the end of the array.\n        this.content.push(element)\n\n        // Allow it to sink down.\n        this.sinkDown(this.content.length - 1)\n    }\n\n    pop() {\n        // Store the first element so we can return it later.\n        const result = this.content[0]\n        // Get the element at the end of the array.\n        const end = this.content.pop()\n        // If there are any elements left, put the end element at the\n        // start, and let it bubble up.\n        if (this.content.length > 0) {\n            this.content[0] = end\n            this.bubbleUp(0)\n        }\n        return result\n    }\n\n    remove(node) {\n        const i = this.content.indexOf(node)\n\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        const end = this.content.pop()\n\n        if (i !== this.content.length - 1) {\n            this.content[i] = end\n\n            if (this.scoreFunction(end) < this.scoreFunction(node)) {\n                this.sinkDown(i)\n            } else {\n                this.bubbleUp(i)\n            }\n        }\n    }\n\n    size() {\n        return this.content.length\n    }\n\n    rescoreElement(node) {\n        this.sinkDown(this.content.indexOf(node))\n    }\n\n    sinkDown(n) {\n        // Fetch the element that has to be sunk.\n        const element = this.content[n]\n\n        // When at 0, an element can not sink any further.\n        while (n > 0) {\n\n            // Compute the parent element's index, and fetch it.\n            const parentN = ((n + 1) >> 1) - 1\n            const parent = this.content[parentN]\n            // Swap the elements if the parent is greater.\n            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n                this.content[parentN] = element\n                this.content[n] = parent\n                // Update 'n' to continue at the new position.\n                n = parentN\n            }\n            // Found a parent that is less, no need to sink any further.\n            else {\n                break\n            }\n        }\n    }\n\n    bubbleUp(n) {\n        // Look up the target element and its score.\n        const length = this.content.length\n        const element = this.content[n]\n        const elemScore = this.scoreFunction(element)\n\n        while (true) {\n            // Compute the indices of the child elements.\n            const child2N = (n + 1) << 1\n            const child1N = child2N - 1\n            // This is used to store the new position of the element, if any.\n            let swap = null\n            let child1Score\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                const child1 = this.content[child1N]\n                child1Score = this.scoreFunction(child1)\n\n                // If the score is less than our element's, we need to swap.\n                if (child1Score < elemScore) {\n                    swap = child1N\n                }\n            }\n\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                const child2 = this.content[child2N]\n                const child2Score = this.scoreFunction(child2)\n                if (child2Score < (swap === null ? elemScore : child1Score)) {\n                    swap = child2N\n                }\n            }\n\n            // If the element needs to be moved, swap it, and continue.\n            if (swap !== null) {\n                this.content[n] = this.content[swap]\n                this.content[swap] = element\n                n = swap\n            }\n            // Otherwise, we are done.\n            else {\n                break\n            }\n        }\n    }\n}\n","import { Surface } from './model/map/Surface'\nimport { Terrain } from './model/map/Terrain'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { WorldManager } from './WorldManager'\nimport { TILESIZE } from '../main'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\n\nexport class TerrainLoader {\n\n    static loadTerrain(levelConf: LevelEntryCfg, worldMgr: WorldManager): Terrain {\n        const tileSize = levelConf.blockSize\n        if (tileSize !== TILESIZE) console.error('Unexpected tile size in level configuration: ' + tileSize)\n        const terrain = new Terrain(worldMgr)\n\n        const themeName = levelConf.textureSet[1]\n        terrain.textureSet = ResourceManager.cfg('Textures', themeName)\n        // console.log(terrain.textureSet);\n\n        const terrainMap = ResourceManager.getMap(levelConf.terrainMap)\n        terrain.width = terrainMap.width\n        terrain.height = terrainMap.height\n        const pathMap = ResourceManager.getMap(levelConf.pathMap)?.level\n        const surfaceMap = ResourceManager.getMap(levelConf.surfaceMap)?.level\n        const predugMap = ResourceManager.getMap(levelConf.predugMap)?.level\n        const cryOreMap = ResourceManager.getMap(levelConf.cryOreMap)?.level\n        const fallinMap = ResourceManager.getMap(levelConf.fallinMap)?.level\n        const erodeMap = ResourceManager.getMap(levelConf.erodeMap)?.level\n\n        // maps parsed from WAD are row-wise saved, which means y (row) comes first and x (column) second\n        for (let r = 0; r < terrainMap.level.length; r++) {\n            for (let c = 0; c < (terrainMap.level)[r].length; c++) {\n                (terrain.surfaces)[c] = (terrain.surfaces)[c] || []\n                const surfaceTypeNum = (terrainMap.level)[r][c]\n                let surfaceType = SurfaceType.getByNum(surfaceTypeNum)\n                const predugLevel = predugMap[r][c]\n                if (predugLevel === PredugMap.CAVERN_EXPOSED) {\n                    if (surfaceType === SurfaceType.GROUND || surfaceType === SurfaceType.DIRT) {\n                        surfaceType = SurfaceType.GROUND\n                    } else if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) {\n                        console.warn('Unexpected cavern surface type: ' + surfaceType.name)\n                    }\n                } else if (predugLevel === PredugMap.SLUG_HOLE_EXPOSED || predugLevel === PredugMap.SLUG_HOLE_HIDDEN) {\n                    surfaceType = SurfaceType.SLUG_HOLE\n                } else if (predugLevel !== PredugMap.WALL && predugLevel !== PredugMap.CAVERN_HIDDEN) {\n                    console.warn('Unexpected predug level: ' + predugLevel)\n                }\n                // give the path map the highest priority, if it exists\n                const pathMapLevel = pathMap && surfaceType.floor ? pathMap[r][c] : PathMap.NONE\n                if (pathMapLevel === PathMap.RUBBLE) {\n                    surfaceType = SurfaceType.RUBBLE4\n                } else if (pathMapLevel === PathMap.POWER_PATH) {\n                    surfaceType = SurfaceType.POWER_PATH\n                } else if (pathMapLevel !== PathMap.NONE) {\n                    console.warn('Unexpected path map level: ' + pathMapLevel)\n                }\n\n                const surface = new Surface(terrain, surfaceType, c, r, surfaceMap[r][c])\n                if (cryOreMap) {\n                    const currentCryOre = cryOreMap[r][c]\n                    if (currentCryOre % 2 === 1) {\n                        surface.containedCrystals = (currentCryOre + 1) / 2\n                    } else {\n                        surface.containedOres = currentCryOre / 2\n                    }\n                }\n\n                (terrain.surfaces)[c].push(surface)\n            }\n        }\n\n        // exlpore predug surfaces\n        terrain.surfaces.forEach(c => c.forEach(s => {\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_EXPOSED || predugMap[s.y][s.x] === PredugMap.SLUG_HOLE_EXPOSED) { // map are rows (y) first, columns (x) second\n                for (let x = s.x - 1; x <= s.x + 1; x++) {\n                    for (let y = s.y - 1; y <= s.y + 1; y++) {\n                        terrain.getSurfaceOrNull(x, y).discovered = true\n                    }\n                }\n            }\n        }))\n\n        // create hidden caverns\n        terrain.surfaces.forEach(c => c.forEach(s => {\n            const surface = terrain.getSurfaceOrNull(s.x, s.y)\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_HIDDEN && !surface.discovered) {\n                surface.surfaceType = SurfaceType.GROUND\n            }\n        }))\n\n        // crumble unsupported walls\n        terrain.surfaces.forEach((c) => c.forEach((s) => {\n            if (!s.isSupported()) s.collapse()\n        }))\n\n        terrain.updateSurfaceMeshes(true)\n\n        if (fallinMap) {\n            for (let x = 0; x < terrain.width; x++) {\n                for (let y = 0; y < terrain.height; y++) {\n                    terrain.getSurface(x, y).setFallinLevel(fallinMap[y][x]) // rows (y) before columns (x) used in maps\n                }\n            }\n        }\n\n        if (erodeMap) { // TODO implement lava erosion\n            console.warn('Lucky you! Lava erosion not yet implemented')\n        }\n\n        return terrain\n    }\n\n}\n\nenum PathMap {\n\n    NONE = 0,\n    RUBBLE = 1,\n    POWER_PATH = 2,\n\n}\n\nenum PredugMap {\n\n    WALL = 0,\n    CAVERN_EXPOSED = 1,\n    CAVERN_HIDDEN = 2,\n    SLUG_HOLE_EXPOSED = 3,\n    SLUG_HOLE_HIDDEN = 4,\n}\n","import { Group, Vector3 } from 'three'\nimport { Surface } from './Surface'\nimport { WorldManager } from '../../WorldManager'\nimport { SurfaceType } from './SurfaceType'\nimport { TILESIZE } from '../../../main'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityAddedEvent, EntityType } from '../../../event/WorldEvents'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { astar, Graph } from './astar'\n\nexport class Terrain {\n\n    worldMgr: WorldManager\n    textureSet: any = {}\n    width: number = 0\n    height: number = 0\n    surfaces: Surface[][] = []\n    floorGroup: Group = new Group()\n    roofGroup: Group = new Group()\n    graphWalk: Graph = null\n    cachedPaths = new Map()\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        this.floorGroup.scale.set(TILESIZE, TILESIZE, TILESIZE)\n        this.roofGroup.visible = false // keep roof hidden unless switched to other camera\n        EventBus.registerEventListener(EntityAddedEvent.eventKey, (event: EntityAddedEvent) => {\n            if (event.type !== EntityType.BUILDING) return;\n            (event.entity as BuildingEntity).surfaces.forEach((bSurf) => {\n                for (let x = -1; x <= 1; x++) {\n                    for (let y = -1; y <= 1; y++) {\n                        this.getSurface(bSurf.x + x, bSurf.y + y).updateTexture()\n                    }\n                }\n            })\n        })\n    }\n\n    getSurfaceFromWorld(worldPosition: Vector3): Surface | null {\n        return this.getSurface(worldPosition.x / TILESIZE, worldPosition.z / TILESIZE)\n    }\n\n    getSurface(x, y): Surface {\n        x = Math.floor(x)\n        y = Math.floor(y)\n        return this.getSurfaceOrNull(x, y) || new Surface(this, SurfaceType.SOLID_ROCK, x, y, 0)\n    }\n\n    getSurfaceOrNull(x, y): Surface | null {\n        if (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n            return this.surfaces[x][y]\n        } else {\n            return null\n        }\n    }\n\n    updateSurfaceMeshes(force: boolean = false) {\n        this.surfaces.forEach((r) => r.forEach((s) => s.updateMesh(force)))\n        this.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n\n        // TODO performance: update specific graph entry, when surface type changes\n        this.graphWalk = new Graph(this.surfaces.map(c => c.map(s => s.isWalkable() ? s.hasRubble() ? 4 : 1 : 0)))\n        console.log('Cached paths cleared')\n        this.cachedPaths.clear()\n    }\n\n    findPath(start: Vector3, end: Vector3, canFly = false, canSwim = false): Vector3[] {\n        const startSurface = this.getSurfaceFromWorld(start)\n        const endSurface = this.getSurfaceFromWorld(end)\n        if (startSurface.x === endSurface.x && startSurface.y === endSurface.y) {\n            return [end]\n        }\n        const cacheIdentifier = startSurface.x + '/' + startSurface.y + ' -> ' + endSurface.x + '/' + endSurface.y\n        const cachedPath = this.cachedPaths.get(cacheIdentifier)\n        if (cachedPath) {\n            return [...cachedPath, end]\n        } else {\n            return this.searchPath(startSurface, endSurface, end, cacheIdentifier)\n        }\n    }\n\n    private searchPath(startSurface: Surface, endSurface: Surface, end, cacheIdentifier: string) {\n        const startNode = this.graphWalk.grid[startSurface.x][startSurface.y]\n        const endNode = this.graphWalk.grid[endSurface.x][endSurface.y]\n        const worldPath = astar.search(this.graphWalk, startNode, endNode).map(p => this.getSurface(p.x, p.y).getCenterWorld())\n        if (worldPath.length < 1) return null // no path found\n        // replace last surface center with actual target position\n        worldPath.pop()\n        worldPath.push(end)\n        this.cachedPaths.set(cacheIdentifier, worldPath.slice(0, -1)) // cache shallow copy to avoid interference\n        return worldPath\n    }\n\n    findFallInOrigin(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isReinforcable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isReinforcable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isReinforcable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isReinforcable()) return [bottomSurface.x, bottomSurface.y]\n        const leftSurface2 = this.getSurface(x - 1, y)\n        if (leftSurface2.isDigable()) return [leftSurface2.x, leftSurface2.y]\n        const topSurface2 = this.getSurface(x, y - 1)\n        if (topSurface2.isDigable()) return [topSurface2.x, topSurface2.y]\n        const rightSurface2 = this.getSurface(x + 1, y)\n        if (rightSurface2.isDigable()) return [rightSurface2.x, rightSurface2.y]\n        const bottomSurface2 = this.getSurface(x, y + 1)\n        if (bottomSurface2.isDigable()) return [bottomSurface2.x, bottomSurface2.y]\n        return null\n    }\n\n    findFallInTarget(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isWalkable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isWalkable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isWalkable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isWalkable()) return [bottomSurface.x, bottomSurface.y]\n        return null\n    }\n\n    dispose() {\n        this.surfaces.forEach(c => c.forEach(s => s.dispose()))\n    }\n\n}\n","import { MovableEntity } from './MovableEntity'\nimport { Selectable, SelectionType } from '../../game/model/Selectable'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { CollectJob, Job, JobType } from '../../game/model/job/Job'\nimport { MathUtils, Vector3 } from 'three'\nimport { JOB_ACTION_RANGE, NATIVE_FRAMERATE } from '../../main'\nimport { getRandom, getRandomSign } from '../../core/Util'\nimport { Carryable } from './collect/Carryable'\nimport { DynamiteJob, SurfaceJob, SurfaceJobType } from '../../game/model/job/SurfaceJob'\nimport { SurfaceType } from './map/SurfaceType'\nimport { Crystal } from './collect/Crystal'\nimport { Ore } from './collect/Ore'\nimport degToRad = MathUtils.degToRad\n\nexport abstract class FulfillerEntity extends MovableEntity implements Selectable {\n\n    selectionType: SelectionType\n    selected: boolean\n    workInterval = null\n    job: Job = null\n    activity: FulfillerActivity = null\n    jobSubPos: Vector3 = null\n    tools: string[] = []\n    skills: string[] = []\n    carries: Carryable = null // TODO implement multi carry for vehicles\n    carryTarget: Vector3 = null\n\n    protected constructor(selectionType: SelectionType, aeFilename: string, speed: number) {\n        super(ResourceManager.getAnimationEntityType(aeFilename), speed)\n        this.selectionType = selectionType\n        this.group.userData = {'selectable': this}\n        this.workInterval = setInterval(this.work.bind(this), 1000 / NATIVE_FRAMERATE) // TODO do not use interval, make work trigger itself (with timeout/interval) until work is done\n    }\n\n    work() {\n        if (!this.job || this.selected) return\n        if (this.job.type === JobType.SURFACE) {\n            const surfJob = this.job as SurfaceJob\n            const surfaceJobType = surfJob.workType\n            if (surfaceJobType === SurfaceJobType.DRILL) {\n                if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                    this.moveToTarget(this.job.getPosition())\n                } else {\n                    this.changeActivity(FulfillerActivity.DRILLING, () => { // TODO use drilling times from cfg\n                        if (surfJob.surface.seamLevel > 0) {\n                            surfJob.surface.seamLevel--\n                            const vec = new Vector3().copy(this.getPosition()).sub(surfJob.surface.getCenterWorld())\n                                .multiplyScalar(0.3 + getRandom(3) / 10)\n                                .applyAxisAngle(new Vector3(0, 1, 0), degToRad(-10 + getRandom(20)))\n                                .add(this.getPosition())\n                            if (surfJob.surface.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                                this.worldMgr.addCollectable(new Crystal(), vec.x, vec.z)\n                            } else if (surfJob.surface.surfaceType === SurfaceType.ORE_SEAM) {\n                                this.worldMgr.addCollectable(new Ore(), vec.x, vec.z)\n                            }\n                            this.changeActivity(FulfillerActivity.STANDING)\n                        } else {\n                            this.job.onJobComplete()\n                            this.stopJob()\n                        }\n                    })\n                }\n            } else if (surfaceJobType === SurfaceJobType.CLEAR_RUBBLE) {\n                if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                    this.moveToTarget(this.job.getPosition())\n                } else {\n                    if (!this.jobSubPos) {\n                        const jobPos = this.job.getPosition()\n                        this.jobSubPos = new Vector3(jobPos.x + getRandomSign() * getRandom(10), 0, jobPos.z + getRandomSign() * getRandom(10))\n                        this.jobSubPos.y = this.worldMgr.getTerrainHeight(this.jobSubPos.x, this.jobSubPos.z)\n                    }\n                    if (new Vector3().copy(this.jobSubPos).sub(this.getPosition()).length() > this.getSpeed()) {\n                        this.moveToTarget(this.jobSubPos)\n                    } else {\n                        this.changeActivity(FulfillerActivity.SHOVELING, () => {\n                            this.job.onJobComplete()\n                            if (surfJob.surface.hasRubble()) {\n                                this.jobSubPos = null\n                            } else {\n                                this.stopJob()\n                            }\n                        })\n                    }\n                }\n            } else if (surfaceJobType === SurfaceJobType.REINFORCE) {\n                if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                    this.moveToTarget(this.job.getPosition())\n                } else {\n                    this.changeActivity(FulfillerActivity.REINFORCE, () => {\n                        this.job.onJobComplete()\n                        this.stopJob()\n                    }, 3)\n                }\n            } else if (surfaceJobType === SurfaceJobType.BLOW) {\n                const bj = this.job as DynamiteJob\n                if (this.carries !== bj.dynamite) {\n                    this.dropItem()\n                    if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                        this.moveToTarget(this.job.getPosition())\n                    } else {\n                        this.changeActivity(FulfillerActivity.PICKING, () => {\n                            this.pickupItem(bj.dynamite)\n                        })\n                    }\n                } else if (!this.carryTarget) {\n                    this.carryTarget = bj.surface.getDigPositions()[0]\n                } else if (this.getPosition().sub(this.carryTarget).length() > JOB_ACTION_RANGE) {\n                    this.moveToTarget(this.carryTarget)\n                } else {\n                    this.changeActivity(FulfillerActivity.DROPPING, () => {\n                        this.dropItem()\n                        this.job.onJobComplete()\n                        this.stopJob()\n                    })\n                }\n            }\n        } else if (this.job.type === JobType.CARRY) {\n            const carryJob = this.job as CollectJob\n            if (this.carries !== carryJob.item) {\n                this.dropItem()\n                if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                    this.moveToTarget(this.job.getPosition())\n                } else {\n                    this.changeActivity(FulfillerActivity.PICKING, () => {\n                        this.pickupItem(carryJob.item)\n                    })\n                }\n            } else if (!this.carryTarget) {\n                this.carryTarget = this.carries.getTargetPos() // TODO sleep 5 seconds, before retry\n            } else if (this.getPosition().sub(this.carryTarget).length() > JOB_ACTION_RANGE) {\n                this.moveToTarget(this.carryTarget)\n            } else {\n                this.changeActivity(FulfillerActivity.DROPPING, () => {\n                    this.dropItem()\n                    this.job.onJobComplete()\n                    this.stopJob()\n                })\n            }\n        } else if (this.job.type === JobType.MOVE) {\n            if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                this.moveToTarget(this.job.getPosition())\n            } else {\n                this.changeActivity(FulfillerActivity.STANDING, () => {\n                    this.job.onJobComplete()\n                    this.stopJob()\n                })\n            }\n        }\n    }\n\n    moveToTarget(target): boolean {\n        const result = super.moveToTarget(target)\n        if (!result) {\n            console.log('Entity could not move to job target, stopping job')\n            this.stopJob()\n        }\n        return result\n    }\n\n    dropItem() {\n        if (!this.carries) return\n        if (this.carryJoint) this.carryJoint.remove(this.carries.group)\n        this.carries.group.position.copy(this.group.position)\n        this.carries = null\n        this.carryTarget = null\n    }\n\n    pickupItem(item: Carryable) {\n        this.carries = item\n        if (this.carryJoint) this.carryJoint.add(this.carries.group)\n        this.carries.group.position.set(0, 0, 0)\n    }\n\n    setJob(job: Job) {\n        if (this.job !== job) this.stopJob()\n        if (job.type === JobType.SURFACE) this.dropItem()\n        this.job = job\n        if (this.job) this.job.assign(this)\n    }\n\n    stopJob() {\n        if (!this.job) return\n        this.job.unassign(this)\n        this.jobSubPos = null\n        this.carryTarget = null\n        this.job = null\n        this.changeActivity(FulfillerActivity.STANDING)\n    }\n\n    hasTools(toolnames: string[]) {\n        for (let c = 0; c < toolnames.length; c++) {\n            if (this.tools.indexOf(toolnames[c]) === -1) return false\n        }\n        return true\n    }\n\n    hasSkills(skillKeys: string[]) {\n        for (let c = 0; c < skillKeys.length; c++) {\n            if (this.skills.indexOf(skillKeys[c]) === -1) return false\n        }\n        return true\n    }\n\n    getSelectionType(): SelectionType {\n        return this.selectionType\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    select() {\n        this.selectionFrame.visible = true\n        if (!this.selected) {\n            this.selected = true\n            this.onSelect()\n            return this\n        }\n        return null\n    }\n\n    onSelect() {\n    }\n\n    abstract getSelectionCenter(): Vector3;\n\n}\n\nexport enum FulfillerActivity {\n\n    STANDING,\n    MOVING,\n    MOVING_RUBBLE,\n    DRILLING,\n    SHOVELING,\n    PICKING,\n    DROPPING,\n    REINFORCE,\n\n}\n","import { AnimEntity } from './anim/AnimEntity'\nimport { Vector3 } from 'three'\nimport { AnimationEntityType } from './anim/AnimationEntityType'\nimport { FulfillerActivity } from './FulfillerEntity'\n\nexport abstract class MovableEntity extends AnimEntity {\n\n    speed: number\n    pathToTarget: Vector3[] = null\n\n    constructor(entityType: AnimationEntityType, speed: number) {\n        super(entityType)\n        this.speed = speed\n    }\n\n    getPosition(): Vector3 {\n        return new Vector3().copy(this.group.position)\n    }\n\n    getSpeed() {\n        return this.speed\n    }\n\n    moveToTarget(target: Vector3): boolean {\n        if (!this.pathToTarget || !this.pathToTarget[this.pathToTarget.length - 1].equals(target)) {\n            this.pathToTarget = this.findPathToTarget(target)\n            if (!this.pathToTarget) return false\n        }\n        if (this.isOnRubble()) {\n            this.changeActivity(FulfillerActivity.MOVING_RUBBLE)\n        } else {\n            this.changeActivity(FulfillerActivity.MOVING)\n        }\n        this.group.position.add(this.determineStep())\n        this.group.position.y = this.worldMgr.getTerrainHeight(this.group.position.x, this.group.position.z)\n        this.group.lookAt(new Vector3(this.pathToTarget[0].x, this.group.position.y, this.pathToTarget[0].z))\n        return true\n    }\n\n    findPathToTarget(target: Vector3): Vector3[] {\n        return [target]\n    }\n\n    determineStep(): Vector3 {\n        const pathStepTarget = this.pathToTarget[0]\n        pathStepTarget.y = this.worldMgr.getTerrainHeight(pathStepTarget.x, pathStepTarget.z)\n        const step = new Vector3().copy(pathStepTarget).sub(this.getPosition())\n        if (step.length() > this.getSpeed()) {\n            step.setLength(this.getSpeed()) // TODO use average speed between current and target position\n        } else if (this.pathToTarget.length > 1) {\n            this.pathToTarget.shift()\n            return this.determineStep()\n        }\n        return step\n    }\n\n    isOnRubble(): boolean {\n        return false\n    }\n\n    changeActivity(activity: FulfillerActivity, onChangeDone = null, iterations = 1) {\n    }\n\n}\n","import { SelectionType } from '../../game/model/Selectable'\nimport { EventBus } from '../../event/EventBus'\nimport { RAIDER_SPEED } from '../../main'\nimport { RaiderSelected } from '../../event/LocalEvents'\nimport { FulfillerActivity, FulfillerEntity } from './FulfillerEntity'\nimport { GameState } from '../../game/model/GameState'\nimport { Vector3 } from 'three'\nimport { EntityAddedEvent, EntityType } from '../../event/WorldEvents'\n\nexport class Raider extends FulfillerEntity {\n\n    constructor() {\n        super(SelectionType.PILOT, 'mini-figures/pilot/pilot.ae', RAIDER_SPEED)\n        this.tools = ['drill', 'shovel', 'hammer']\n        this.skills = ['demolition']\n        this.pickSphereRadius = 10 // TODO read pick sphere size from cfg\n        this.selectionFrameSize = 10\n    }\n\n    getSpeed(): number {\n        let speed = super.getSpeed()\n        if (this.animation && !isNaN(this.animation.transcoef)) speed *= this.animation.transcoef\n        if (this.isOnPath()) speed *= 2 // TODO read from cfg\n        return speed\n    }\n\n    isOnRubble() {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).hasRubble()\n    }\n\n    isOnPath(): boolean {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).isPath()\n    }\n\n    findPathToTarget(target: Vector3): Vector3[] {\n        return this.worldMgr.sceneManager.terrain.findPath(this.getPosition(), target)\n    }\n\n    changeActivity(activity: FulfillerActivity, onChangeDone = null, iterations = 1) {\n        if (onChangeDone) onChangeDone.bind(this)\n        if (this.activity !== activity) {\n            this.activity = activity\n            switch (this.activity) {\n                case FulfillerActivity.STANDING:\n                    if (this.carries) {\n                        this.setActivity('StandCarry', onChangeDone, iterations)\n                    } else {\n                        this.setActivity('Stand', onChangeDone, iterations)\n                    }\n                    break\n                case FulfillerActivity.MOVING:\n                    if (this.carries) {\n                        this.setActivity('Carry', onChangeDone, iterations)\n                    } else {\n                        this.setActivity('Run', onChangeDone, iterations)\n                    }\n                    break\n                case FulfillerActivity.MOVING_RUBBLE:\n                    if (this.carries) {\n                        this.setActivity('Carryrubble', onChangeDone, iterations)\n                    } else {\n                        this.setActivity('Routerubble', onChangeDone, iterations)\n                    }\n                    break\n                case FulfillerActivity.DRILLING:\n                    // TODO adapt drilling time to material hardness\n                    this.setActivity('Drill', onChangeDone, iterations)\n                    break\n                case FulfillerActivity.SHOVELING:\n                    this.setActivity('ClearRubble', onChangeDone, iterations)\n                    break\n                case FulfillerActivity.PICKING:\n                    this.setActivity('Pickup', onChangeDone, iterations)\n                    break\n                case FulfillerActivity.DROPPING:\n                    this.setActivity('Place', onChangeDone, iterations)\n                    break\n                case FulfillerActivity.REINFORCE:\n                    this.setActivity('Reinforce', onChangeDone, iterations)\n                    break\n            }\n            this.animation.looping = true // TODO make all looping?\n        }\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        const index = GameState.raidersUndiscovered.indexOf(this)\n        if (index !== -1) GameState.raidersUndiscovered.splice(index, 1)\n        GameState.raiders.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, this))\n    }\n\n    onSelect() {\n        this.changeActivity(FulfillerActivity.STANDING)\n        EventBus.publishEvent(new RaiderSelected(this))\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { BuildingSelected } from '../../event/LocalEvents'\nimport { Building } from '../../game/model/entity/building/Building'\nimport { AnimEntity } from './anim/AnimEntity'\nimport { Selectable, SelectionType } from '../../game/model/Selectable'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { MathUtils, Vector3, Matrix4 } from 'three'\nimport { GameState } from '../../game/model/GameState'\nimport { CollectEvent, EntityAddedEvent, EntityType } from '../../event/WorldEvents'\nimport { Surface } from './map/Surface'\nimport { CollectableType } from './collect/CollectableEntity'\nimport degToRad = MathUtils.degToRad\n\nexport class BuildingEntity extends AnimEntity implements Selectable {\n\n    type: Building\n    selected: boolean\n    powerSwitch: boolean = true\n    powerLink: boolean = false\n    spawning: boolean = false\n    surfaces: Surface[] = []\n    upgrades: number = 0\n\n    constructor(buildingType: Building) {\n        super(ResourceManager.getAnimationEntityType(buildingType.aeFile))\n        this.type = buildingType\n        this.group.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        this.group.userData = {'selectable': this}\n        this.pickSphereRadius = 30 // TODO read pick sphere size from cfg\n        this.selectionFrameSize = 15\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.BUILDING\n    }\n\n    select() {\n        this.selectionFrame.visible = true\n        if (!this.selected) {\n            this.selected = true\n            EventBus.publishEvent(new BuildingSelected(this))\n            return this\n        }\n        return null\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    getDropPosition(): Vector3 {\n        const dropPos = this.getPosition().add(new Vector3(0, 0, this.type.dropPosDist)\n            .applyEuler(this.getRotation()).applyAxisAngle(new Vector3(0, 1, 0), degToRad(this.type.dropPosAngleDeg)))\n        dropPos.y = this.worldMgr.getTerrainHeight(dropPos.x, dropPos.z)\n        return dropPos\n    }\n\n    isPowered(): boolean {\n        return this.powerSwitch && (this.type.selfPowered || this.powerLink)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        const index = GameState.buildingsUndiscovered.indexOf(this)\n        if (index !== -1) GameState.buildingsUndiscovered.splice(index, 1)\n        GameState.buildings.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(EntityType.BUILDING, this))\n    }\n\n    hasMaxUpgrades(): boolean {\n        return this.upgrades >= this.type.maxUpgrades\n    }\n\n    upgrade() {\n        if (GameState.numOre < 5) return\n        GameState.numOre -= 5\n        this.upgrades++\n        EventBus.publishEvent(new CollectEvent(CollectableType.ORE))\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { TILESIZE } from '../main'\nimport { MathUtils, Vector3 } from 'three'\nimport { Raider } from './model/Raider'\nimport { GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { BuildingEntity } from './model/BuildingEntity'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { Crystal } from './model/collect/Crystal'\nimport { WorldManager } from './WorldManager'\nimport { EventBus } from '../event/EventBus'\nimport { EntityAddedEvent, EntityType } from '../event/WorldEvents'\nimport degToRad = MathUtils.degToRad\n\nexport class ObjectListLoader {\n\n    static loadObjectList(worldMgr: WorldManager, objectListConf) {\n        Object.values(objectListConf).forEach((olObject: any) => {\n            const lTypeName = olObject.type ? olObject.type.toLowerCase() : olObject.type\n            // all object positions are off by half a tile, because 0/0 is the top left corner of first tile\n            const worldX = (olObject.xPos - 1) * TILESIZE\n            const worldZ = (olObject.yPos - 1) * TILESIZE\n            const worldY = worldMgr.getTerrainHeight(worldX, worldZ)\n            const buildingType = ResourceManager.cfg('BuildingTypes', olObject.type)\n            const radHeading = degToRad(olObject.heading)\n            if (lTypeName === 'TVCamera'.toLowerCase()) {\n                const target = new Vector3(worldX, worldY, worldZ - TILESIZE / 2)\n                const offset = new Vector3(5 * TILESIZE, 0, 0).applyAxisAngle(new Vector3(0, 1, 0), radHeading - Math.PI / 16).add(target)\n                worldMgr.sceneManager.camera.position.copy(offset)\n                worldMgr.sceneManager.camera.position.y = 4.5 * TILESIZE\n                worldMgr.sceneManager.controls.target.copy(target)\n                worldMgr.sceneManager.controls.update()\n                worldMgr.setTorchPosition(target)\n            } else if (lTypeName === 'Pilot'.toLowerCase()) {\n                const raider = new Raider()\n                raider.worldMgr = worldMgr\n                raider.setActivity('Stand')\n                raider.createPickSphere()\n                raider.group.position.set(worldX, worldY, worldZ)\n                raider.group.rotateOnAxis(new Vector3(0, 1, 0), radHeading - Math.PI / 2)\n                raider.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(raider.group.position).discovered\n                if (raider.group.visible) {\n                    GameState.raiders.push(raider)\n                    EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, raider))\n                } else {\n                    GameState.raidersUndiscovered.push(raider)\n                }\n                worldMgr.sceneManager.scene.add(raider.group)\n            } else if (buildingType) {\n                const building = Building.getByName(buildingType)\n                const entity = new BuildingEntity(building)\n                entity.worldMgr = worldMgr\n                entity.setActivity('Stand')\n                entity.createPickSphere()\n                entity.group.position.set(worldX, worldY, worldZ)\n                entity.group.rotateOnAxis(new Vector3(0, 1, 0), -radHeading - Math.PI)\n                entity.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(entity.group.position).discovered\n                if (entity.group.visible) {\n                    GameState.buildings.push(entity)\n                    EventBus.publishEvent(new EntityAddedEvent(EntityType.BUILDING, entity))\n                } else {\n                    GameState.buildingsUndiscovered.push(entity)\n                }\n                // TODO rotate building with normal vector of surface\n                worldMgr.sceneManager.scene.add(entity.group)\n                const path1Surface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(entity.group.position)\n                path1Surface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                path1Surface.updateTexture()\n                entity.surfaces.push(path1Surface)\n                const pathOffset = new Vector3(0, 0, TILESIZE).applyAxisAngle(new Vector3(0, 1, 0), -radHeading - Math.PI)\n                pathOffset.add(entity.group.position)\n                const path2Surface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(pathOffset)\n                path2Surface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                path2Surface.updateTexture()\n                entity.surfaces.push(path2Surface)\n            } else if (lTypeName === 'PowerCrystal'.toLowerCase()) {\n                worldMgr.addCollectable(new Crystal(), worldX, worldZ)\n            } else {\n                // TODO implement remaining object types like: spider, drives and hovercraft\n                console.warn('Object type ' + olObject.type + ' not yet implemented')\n            }\n        })\n        // update path textures when all buildings are added\n        GameState.buildings.forEach((b) => b.surfaces.forEach((bSurf) => {\n            for (let x = -1; x <= 1; x++) {\n                for (let y = -1; y <= 1; y++) {\n                    worldMgr.sceneManager.terrain.getSurface(bSurf.x + x, bSurf.y + y).updateTexture()\n                }\n            }\n        }))\n    }\n\n}\n","/** Function documentation mostly copied from the following URLs\n *\n * https://kb.rockraidersunited.com/User:Jessietail/NERPs_reference\n * https://web.archive.org/web/20131206122442/http://rru-stuff.org/nerpfuncs.html\n * https://kb.rockraidersunited.com/NERPs_documentation#Labels\n *\n */\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\n\nexport class NerpRunner {\n\n    debug = false\n    onLevelComplete: () => any = null\n    nerpInterval: NodeJS.Timeout = null\n\n    registers = new Array(8).fill(0)\n    timers = new Array(4).fill(0)\n    scriptLines = [] // contains humand readable script strings\n    statements = [] // contains parsed statements for execution\n    macrosByName = {}\n    labelsByName = {}\n    halted = false\n    programCounter = 0\n    messages = []\n    // more state variables and switches\n    messagePermit = null\n\n    constructor(debug = false) {\n        this.debug = debug\n    }\n\n    startExecution() {\n        const that = this\n        this.nerpInterval = setInterval(() => {\n            that.execute()\n        }, 2000)\n    }\n\n    pauseExecution() {\n        if (this.nerpInterval) clearInterval(this.nerpInterval)\n        this.nerpInterval = null\n    }\n\n    /**\n     * Internally used to validate and parse a register number.\n     * @param register\n     * @return {number}\n     */\n    checkRegister(register) {\n        const num = parseInt(register)\n        if (isNaN(num) || num < 0 || num > this.registers.length) throw new Error('Invalid register (' + register + ') provided')\n        return num\n    }\n\n    /**\n     * Internally used to validate and parse a value before setting or adding it with a register.\n     * @param value\n     * @return {number}\n     */\n    checkRegisterValue(value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Invalid register value (' + value + ') provided')\n        return num\n    }\n\n    /**\n     * Gets the value currently stored in the given register, internally used to handle all registers with one method.\n     * @param register the register to read\n     * @return {number} returns the value currently stored in the register\n     */\n    getR(register) {\n        register = this.checkRegister(register)\n        return this.registers[register]\n    }\n\n    /**\n     * Sets the given value for the given register, internally used to handle all registers with one method.\n     * @param register the register to set\n     * @param value the value to set for the given register\n     */\n    setR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] = value\n    }\n\n    /**\n     * Adds the given value to the given register, internally used to handle all registers with one method.\n     * @param register the register to add to\n     * @param value the value to add to the given register\n     */\n    addR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] += value\n    }\n\n    /**\n     * Set the respective timer to the given numerical value. Units are in milliseconds.\n     * @param timer\n     * @param value\n     */\n    setTimer(timer, value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Can\\'t set timer to NaN value: ' + value)\n        this.timers[timer] = new Date().getTime() + num\n    }\n\n    /**\n     * Gets the value of the respective timer. Units are in milliseconds.\n     * @param timer\n     * @return {number}\n     */\n    getTimer(timer) {\n        return new Date().getTime() - this.timers[timer]\n    }\n\n    /**\n     * End the level successfully and show the score screen.\n     */\n    setLevelCompleted() {\n        this.halted = true\n        GameState.resultState = GameResultState.COMPLETE\n        this.onLevelComplete()\n    }\n\n    /**\n     * End the level as failure and show the score screen.\n     */\n    setLevelFail() {\n        this.halted = true\n        GameState.resultState = GameResultState.FAILED\n        this.onLevelComplete()\n    }\n\n    /**\n     * Sets tutorial flags\n     * @param value a bitmask to set flags with\n     */\n    setTutorialFlags(value) {\n        // TODO implement tutorial flags\n        // seems like value must be interpreted bitwise and sets a certain flag on each bit\n        // seen so far:\n        // 0 = 0x00 allow any click anywhere anytime\n        // 3 = 0x11 disallow invalid clicks\n        // 4095 = 0x111111111111 set all flags? (seen in Tutorial01 level)\n    }\n\n    /**\n     * This is used to make messages come up/not come up.\n     * @param messagesAllowed\n     */\n    setMessagePermit(messagesAllowed) {\n        this.messagePermit = !messagesAllowed\n    }\n\n    setBuildingsUpgradeLevel(typeName, level) {\n        GameState.buildings.filter(b => b.type === typeName).forEach(b => b.upgrades = level);\n    }\n\n    setToolStoreLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.TOOLSTATION, level)\n    }\n\n    setTeleportPadLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.TELEPORT_PAD, level)\n    }\n\n    setPowerStationLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.POWER_STATION, level)\n    }\n\n    setBarracksLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.SUPPORT, level)\n    }\n\n    /**\n     * Gets the number of tool stores currently built. NOT the total ever built.\n     * @return {number}\n     */\n    getToolStoresBuilt() {\n        return GameState.getBuildingsByType(Building.TOOLSTATION).length\n    }\n\n    /**\n     * Gets the number of minifigures on the level. TODO it is NOT tested if this ignores minifigures in hidden caverns\n     * @return {number}\n     */\n    getMinifiguresOnLevel() {\n        return GameState.raiders.length\n    }\n\n    /**\n     * Gets the number of crystals currently stored.\n     * @return {number}\n     */\n    getCrystalsCurrentlyStored() {\n        return GameState.numCrystal\n    }\n\n    getObjectiveSwitch() {\n        // TODO implement this\n        return 0\n    }\n\n    setMessageTimerValues(arg1, arg2, arg3) {\n        // TODO implement this\n    }\n\n    getMessageTimer() {\n        return 0 // TODO return remaining amount of time needed to fully play WAV message\n    }\n\n    cameraUnlock() {\n        // TODO implement this\n    }\n\n    setMessage(messageNumber, arrowDisabled) {\n        if (!this.messagePermit) {\n            return\n        }\n        const msg = this.messages[messageNumber]\n        // TODO show message to user\n        console.log(msg.txt)\n        // msg.snd resides in sounds/streamed/ which is currently not loaded :(\n    }\n\n    setCameraGotoTutorial(arg1) {\n        // TODO implement this\n    }\n\n    getTutorialBlockIsGround(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getTutorialBlockIsPath(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getUnitAtBlock(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getOxygenLevel() {\n        // TODO implement this\n        return 100\n    }\n\n    getObjectiveShowing() {\n        // TODO implement this\n        return false\n    }\n\n    addPoweredCrystals() {\n        // TODO implement this\n    }\n\n    disallowAll() {\n        // TODO implement this\n    }\n\n    getPoweredPowerStationsBuilt() {\n        return GameState.getBuildingsByType(Building.POWER_STATION).filter((b) => b.isPowered()).length\n    }\n\n    getPoweredBarracksBuilt() {\n        return GameState.getBuildingsByType(Building.SUPPORT).filter((b) => b.isPowered()).length\n    }\n\n    getRecordObjectAtTutorial() {\n        // TODO implement this\n    }\n\n    getHiddenObjectsFound() {\n        // TODO implement this\n        return 0\n    }\n\n    callMethod(methodName, methodArgs) {\n        if (methodName === 'Stop') {\n            throw 'Stop'\n        } else if (methodName === 'TRUE') {\n            return true\n        } else if (methodName === 'FALSE') {\n            return false\n        }\n        const setRegisterMatch = methodName.match(/^SetR([0-7])$/)\n        if (setRegisterMatch) {\n            return this.setR(setRegisterMatch[1], methodArgs[0])\n        }\n        const addRegisterMatch = methodName.match(/^AddR([0-7])$/)\n        if (addRegisterMatch) {\n            return this.addR(addRegisterMatch[1], methodArgs[0])\n        }\n        const getRegisterMatch = methodName.match(/^GetR([0-7])$/)\n        if (getRegisterMatch) {\n            return this.getR(getRegisterMatch[1])\n        }\n        const setTimerMatch = methodName.match(/^SetTimer([0-3])$/)\n        if (setTimerMatch) {\n            return this.setTimer(setTimerMatch[1], methodArgs[0])\n        }\n        const getTimerMatch = methodName.match(/^GetTimer([0-3])$/)\n        if (getTimerMatch) {\n            return this.getTimer(getTimerMatch[1])\n        }\n        const lMethodName = methodName.toLowerCase()\n        for (const memberName in this) {\n            // noinspection JSUnfilteredForInLoop\n            if (memberName.toLowerCase() === lMethodName) {\n                // @ts-ignore\n                // noinspection JSUnfilteredForInLoop\n                return this[memberName].apply(this, methodArgs)\n            }\n        }\n        throw new Error('Undefined method: ' + methodName)\n    }\n\n    conditional(left, right) {\n        const conditionResult = this.executeStatement(left)\n        if (this.debug) {\n            console.log('Condition evaluated to ' + conditionResult)\n        }\n        if (conditionResult) {\n            this.executeStatement(right)\n        }\n    }\n\n    executeStatement(expression) {\n        if (expression.invoke) {\n            const argValues = expression.invoke !== 'conditional' ? expression.args.map(e => this.executeStatement(e)) : expression.args\n            const result = this.callMethod(expression.invoke, argValues)\n            if (result !== undefined && this.debug) {\n                console.log('Method returned: ' + result)\n            }\n            return result\n        } else if (expression.comparator) {\n            const left = this.executeStatement(expression.left)\n            const right = this.executeStatement(expression.right)\n            if (expression.comparator === '=') {\n                return left === right\n            } else if (expression.comparator === '!=') {\n                return left !== right\n            } else if (expression.comparator === '<') {\n                return left < right\n            } else if (expression.comparator === '>') {\n                return left > right\n            } else {\n                console.log(expression)\n                throw new Error('Unknown comparator: ' + expression.comparator)\n            }\n        } else if (!isNaN(expression)) { // just a number\n            return expression\n        } else if (expression.jump) {\n            this.programCounter = this.labelsByName[expression.jump]\n            if (this.programCounter === undefined) {\n                throw new Error('Label \\'' + expression.jump + '\\' is unknown!')\n            }\n            if (this.debug) {\n                console.log('Jumping to label \\'' + expression.jump + '\\' in line ' + this.programCounter)\n            }\n        } else {\n            console.log(expression)\n            throw new Error('Unknown expression in line ' + this.programCounter + ': ' + expression)\n        }\n    }\n\n    execute(debug = false) {\n        this.debug = debug\n        if (this.halted) return\n        try {\n            if (this.debug) {\n                console.log('Executing following script\\n' + this.scriptLines.join('\\n'))\n                console.log('Registers: ' + this.registers)\n            }\n            for (this.programCounter = 0; this.programCounter < this.statements.length; this.programCounter++) {\n                const statement = this.statements[this.programCounter]\n                if (this.debug) {\n                    console.log(this.programCounter + ': ' + this.scriptLines[this.programCounter])\n                    console.log(statement)\n                }\n                if (!statement.label) { // do nothing for label markers\n                    this.executeStatement(statement)\n                }\n            }\n        } catch (e) {\n            if (e === 'Stop') {\n                return\n            }\n            console.error(e)\n            console.error('FATAL ERROR! Script execution failed! You can NOT win anymore!')\n            this.halted = true\n            debugger;\n        }\n    }\n\n}\n","import { NerpRunner } from './NerpRunner'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class NerpParser {\n\n    static parse(nerpScript: string): NerpRunner {\n        const nerpRunner = new NerpRunner()\n        const lines = nerpScript.split('\\n').map(l => l\n            .split('//')[0].trim() // before comment starts\n            .split(';')[0].trim() // before preprocessor comment starts\n            .replace(/_/g, '') // some preprocessor macros use this prefix\n            .replace(/\\bTRUE \\? /, '') // some weird requirement of the original language\n            .replace(/[{}]/g, ''), // duplicate limit for macros using labels too\n        )\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c]\n            if (line.length < 1) {\n                continue // ignore empty lines, but important for macro closure\n            }\n            if (line.startsWith('#include ')) { // include other nerp scripts/headers\n                const includeName = line.replace(/^#include /, '').trim().slice(1, -1)\n                if (includeName === 'nerpdef.h') {\n                    // trivial default header file, is applied by search and replace above\n                    // see https://github.com/jgrip/legorr/blob/master/nerpdef.h\n                    continue\n                }\n                const includedRunner = NerpParser.parse(ResourceManager.getResource('Levels/' + includeName))\n                if (!includedRunner || !includedRunner.scriptLines || includedRunner.scriptLines.length < 1) {\n                    throw 'Can\\'t include unknown nerp script: ' + line\n                }\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(includedRunner.scriptLines)\n                // copy macros from included file to current file\n                nerpRunner.macrosByName = Object.assign({}, nerpRunner.macrosByName, includedRunner.macrosByName)\n            } else if (line.startsWith('#define ')) { // parse C++ preprocessor macro\n                const firstLine = line.replace(/^#define /, '').split(' ')\n                const macroLines = [firstLine.splice(1).join(' ').replace(/\\\\$/, '').trim()]\n                let mLine = line\n                let append = false\n                while (mLine.endsWith('\\\\') && c < lines.length - 1) {\n                    c++\n                    mLine = lines[c].trim()\n                    const macroLine = mLine.replace(/\\\\$/, '').trim()\n                    if (macroLine.length > 0) {\n                        if (append) {\n                            append = false\n                            macroLines[macroLines.length - 1] += macroLine\n                        } else {\n                            macroLines.push(macroLine)\n                        }\n                    }\n                    if (mLine.match(/:\\\\$/)) {\n                        append = true\n                    }\n                }\n                const macroCall = firstLine[0].split('(')\n                nerpRunner.macrosByName[macroCall[0]] = {\n                    args: macroCall[1].replace(/\\)$/, '').split(','),\n                    lines: macroLines,\n                }\n            } else {\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(this.replaceMacros(nerpRunner.macrosByName, line))\n            }\n        }\n        // somewhat precompile the script and create syntax tree\n        // must be done in separate block to make sure the script is complete and we can refer/rely on line numbers for label jumps\n        for (let c = 0; c < nerpRunner.scriptLines.length; c++) {\n            const line = nerpRunner.scriptLines[c]\n            nerpRunner.statements[c] = line.replace(/\\(\\)/g, '') // now the macros are applied and obsolete empty \"()\" can be removed\n                .split(' ? ')\n            const labelMatch = line.match(/(\\S+):/)\n            if (nerpRunner.statements[c].length === 2) { // line contains condition (primary operator)\n                nerpRunner.statements[c] = {\n                    invoke: 'conditional',\n                    args: [this.preProcess(nerpRunner.statements[c][0]), this.preProcess(nerpRunner.statements[c][1])],\n                }\n            } else if (labelMatch) { // keep label line number for later usage\n                const labelName = labelMatch[1].toLowerCase()\n                nerpRunner.labelsByName[labelName] = c\n                nerpRunner.statements[c] = {label: labelName}\n            } else if (nerpRunner.statements[c].length === 1) { // just a call\n                nerpRunner.statements[c] = this.preProcess(nerpRunner.statements[c][0])\n            } else { // lines contains more than 1 condition statement\n                throw 'Can\\'t deal with line: ' + line\n            }\n        }\n        return nerpRunner\n    }\n\n    static replaceMacros(macrosByName, line): string[] {\n        // check if this line contains a macro\n        const split = line.split('(') // not a very stable check though...\n        const macro = macrosByName[split[0]]\n        if (macro) {\n            const argValues = split.splice(1).join('(').slice(0, -1).split(',')\n            if (argValues.length !== macro.args.length) {\n                throw 'Invalid number of args provided for macro in line ' + line\n            }\n            const macroLines = []\n            macro.lines.forEach((line) => {\n                for (let c = 0; c < argValues.length; c++) {\n                    line = line.replace(new RegExp('\\\\b' + macro.args[c] + '\\\\b'), argValues[c])\n                }\n                macroLines.push(...(this.replaceMacros(macrosByName, line)))\n            })\n            return macroLines\n        } else {\n            return [line]\n        }\n    }\n\n    static preProcess(expression) {\n        expression = expression.trim().replace(/^_/, '') // remove whitespace and leading underscore\n        const number = parseInt(expression)\n        if (!isNaN(number)) {\n            return number\n        }\n        const opSplit = expression.split(/ (=) | (!=) | (>) | (<) /).filter(e => e !== undefined)\n        const brackets = expression.match(/^(.+)\\((.+)\\)$/)\n        const spaceSplit = expression.split(' ')\n        const labelMatch = expression.match(/([^:]+):$/)\n        const jumpMatch = expression.match(/^:([^:]+)$/)\n        if (opSplit.length === 3) { // expression contains secondary operator\n            return {left: this.preProcess(opSplit[0]), comparator: opSplit[1], right: this.preProcess(opSplit[2])}\n        } else if (brackets) {\n            const args = brackets[2].split(',').map(a => this.preProcess(a))\n            return {invoke: brackets[1], args: args}\n        } else if (spaceSplit.length > 1) { // space split must be the very last since most expressions contain space\n            const args = spaceSplit.length === 2 ? [this.preProcess(spaceSplit[1])] : spaceSplit.splice(1).map(a => this.preProcess(a))\n            return {invoke: spaceSplit[0], args: args}\n        } else if (labelMatch) { // label definition\n            return {label: labelMatch[1]}\n        } else if (jumpMatch) { // jump to label\n            return {jump: jumpMatch[1].toLowerCase()}\n        } else { // function call without args\n            if (expression.match(/[ =?><!]/)) {\n                throw 'Invalid expression given, parsing must have failed before somewhere'\n            }\n            return {invoke: expression, args: []}\n        }\n    }\n\n}\n","import { SceneManager } from './SceneManager'\nimport { TerrainLoader } from './TerrainLoader'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MathUtils, Raycaster, Vector3 } from 'three'\nimport { getRandom } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EntityAddedEvent, EntityType, JobCreateEvent, RaiderRequested, SpawnDynamiteEvent, SpawnMaterialEvent } from '../event/WorldEvents'\nimport { Raider } from './model/Raider'\nimport { GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { CollectJob, MoveJob } from '../game/model/job/Job'\nimport { CollectableEntity } from './model/collect/CollectableEntity'\nimport { CHECK_SPANW_RAIDER_TIMER, TILESIZE } from '../main'\nimport { EntityDeselected } from '../event/LocalEvents'\nimport { ObjectListLoader } from './ObjectListLoader'\nimport { Dynamite } from './model/collect/Dynamite'\nimport { DynamiteJob } from '../game/model/job/SurfaceJob'\nimport { NerpParser } from '../core/NerpParser'\nimport { NerpRunner } from '../core/NerpRunner'\nimport { GameScreen } from '../screen/GameScreen'\nimport { LevelEntryCfg, LevelsCfg } from '../cfg/LevelsCfg'\nimport degToRad = MathUtils.degToRad\n\nexport class WorldManager {\n\n    sceneManager: SceneManager\n    spawnRaiderInterval = null\n    nerpRunner: NerpRunner = null\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.sceneManager = new SceneManager(canvas)\n        EventBus.registerEventListener(EntityDeselected.eventKey, () => GameState.selectEntities([]))\n        EventBus.registerEventListener(RaiderRequested.eventKey, (event: RaiderRequested) => {\n            GameState.requestedRaiders = event.numRequested\n            if (GameState.requestedRaiders > 0 && !this.spawnRaiderInterval) {\n                this.spawnRaiderInterval = setInterval(this.checkSpawnRaiders.bind(this), CHECK_SPANW_RAIDER_TIMER)\n            }\n        })\n        EventBus.registerEventListener(SpawnDynamiteEvent.eventKey, (event: SpawnDynamiteEvent) => {\n            const targetBuilding = GameState.getClosestBuildingByType(event.surface.getDigPositions()[0], Building.TOOLSTATION)\n            if (!targetBuilding) {\n                throw 'Could not find toolstation to spawn dynamite'\n            }\n            const pos = targetBuilding.getDropPosition() // TODO use ToolNullName from cfg\n            const dynamite = new Dynamite()\n            dynamite.targetSurface = event.surface\n            dynamite.worldMgr = this\n            dynamite.setActivity('Normal')\n            dynamite.group.position.copy(pos)\n            this.sceneManager.scene.add(dynamite.group)\n            EventBus.publishEvent(new JobCreateEvent(new DynamiteJob(event.surface, dynamite)))\n        })\n        EventBus.registerEventListener(SpawnMaterialEvent.eventKey, (event: SpawnMaterialEvent) => {\n            this.addCollectable(event.collectable, event.spawnPosition.x, event.spawnPosition.z)\n        })\n    }\n\n    setup(levelName: string, gameScreen: GameScreen) {\n        const levelsCfg: LevelsCfg = ResourceManager.getResource('Levels')\n        const levelConf: LevelEntryCfg = levelsCfg.levelsByName[levelName]\n        if (!levelConf) throw 'Could not find level configuration for \"' + levelName + '\"'\n        GameState.levelFullName = levelConf.fullName\n        console.log('Starting level ' + levelName + ' - ' + GameState.levelFullName)\n        GameState.totalCaverns = levelConf.reward?.quota?.caverns || 0\n        GameState.rewardConfig = levelConf.reward\n\n        this.sceneManager.setupScene()\n\n        // create terrain mesh and add it to the scene\n        this.sceneManager.terrain = TerrainLoader.loadTerrain(levelConf, this)\n        this.sceneManager.scene.add(this.sceneManager.terrain.floorGroup)\n\n        // load in non-space objects next\n        const objectListConf = ResourceManager.getResource(levelConf.oListFile)\n        ObjectListLoader.loadObjectList(this, objectListConf)\n\n        // load nerp script\n        this.nerpRunner = NerpParser.parse(ResourceManager.getResource(levelConf.nerpFile))\n        this.nerpRunner.messages.push(...(ResourceManager.getResource(levelConf.nerpMessageFile)))\n        this.nerpRunner.onLevelComplete = () => gameScreen.onLevelEnd()\n\n        // gather level start details for game result score calculation\n        GameState.totalDiggables = this.sceneManager.terrain.surfaces.filter((r) => r.forEach((s) => s.isDigable())).length\n        GameState.totalCrystals = 0\n        this.sceneManager.terrain.surfaces.forEach((r) => r.forEach((s) => GameState.totalCrystals += s.containedCrystals))\n        GameState.totalOres = 0\n        this.sceneManager.terrain.surfaces.forEach((r) => r.forEach((s) => GameState.totalOres += s.containedOres))\n    }\n\n    start() {\n        this.sceneManager.startScene()\n        this.nerpRunner?.startExecution()\n        GameState.levelStartTime = Date.now()\n    }\n\n    stop() {\n        GameState.levelStopTime = Date.now()\n        this.nerpRunner?.pauseExecution()\n        if (this.spawnRaiderInterval) clearInterval(this.spawnRaiderInterval)\n        this.spawnRaiderInterval = null\n        GameState.remainingDiggables = this.sceneManager?.terrain?.surfaces?.filter((r) => r.forEach((s) => s.isDigable())).length || 0\n        this.sceneManager.disposeScene()\n    }\n\n    resize(width: number, height: number) {\n        if (this.sceneManager) this.sceneManager.renderer.setSize(width, height)\n    }\n\n    getTerrainIntersectionPoint(rx: number, ry: number): Vector3 {\n        if (!this.sceneManager.terrain) return null\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.sceneManager.camera)\n        const intersects = raycaster.intersectObjects(this.sceneManager.terrain.floorGroup.children)\n        return intersects.length > 0 ? intersects[0].point : null\n    }\n\n    setTorchPosition(position: Vector3) {\n        this.sceneManager.cursorTorchlight.position.copy(position)\n        this.sceneManager.cursorTorchlight.position.y = this.getTerrainHeight(position.x, position.z) + 2 * TILESIZE\n    }\n\n    getTerrainHeight(worldX: number, worldZ: number): number {\n        const raycaster = new Raycaster(new Vector3(Number(worldX), 3 * TILESIZE, Number(worldZ)), new Vector3(0, -1, 0))\n        const intersect = raycaster.intersectObject(this.sceneManager.terrain.floorGroup, true)\n        if (intersect.length > 0) {\n            return intersect[0].point.y\n        } else {\n            console.warn('could not determine terrain height for ' + worldX + '/' + worldZ)\n            return 0\n        }\n    }\n\n    addCollectable(collectable: CollectableEntity, worldX: number, worldZ: number) {\n        const worldY = this.getTerrainHeight(worldX, worldZ)\n        collectable.worldMgr = this\n        collectable.group.position.set(worldX, worldY, worldZ)\n        collectable.group.visible = this.sceneManager.terrain.getSurfaceFromWorld(collectable.group.position).discovered\n        this.sceneManager.scene.add(collectable.group)\n        if (collectable.group.visible) {\n            GameState.collectables.push(collectable)\n            EventBus.publishEvent(new JobCreateEvent(new CollectJob(collectable)))\n        } else {\n            GameState.collectablesUndiscovered.push(collectable)\n        }\n    }\n\n    checkSpawnRaiders() {\n        if (GameState.requestedRaiders < 1) {\n            if (this.spawnRaiderInterval) clearInterval(this.spawnRaiderInterval)\n            this.spawnRaiderInterval = null\n            return\n        }\n        if (GameState.raiders.length >= GameState.getMaxRaiders()) return\n        const spawnBuildings = GameState.getBuildingsByType(Building.TOOLSTATION, Building.TELEPORT_PAD)\n            .filter((b) => b.isPowered() && !b.spawning)\n        for (let c = 0; c < spawnBuildings.length && GameState.requestedRaiders > 0; c++) {\n            GameState.requestedRaiders--\n            const station = spawnBuildings[c]\n            station.spawning = true\n            const raider = new Raider()\n            raider.worldMgr = this\n            raider.setActivity('TeleportIn', () => {\n                station.spawning = false\n                raider.setActivity('Stand')\n                raider.createPickSphere()\n                const walkOutPos = station.getPosition().add(new Vector3(0, 0, TILESIZE * 3 / 4 + getRandom(TILESIZE / 2))\n                    .applyEuler(station.getRotation()).applyAxisAngle(new Vector3(0, 1, 0), degToRad(-10 + getRandom(20))))\n                walkOutPos.y = this.getTerrainHeight(walkOutPos.x, walkOutPos.z)\n                raider.setJob(new MoveJob(walkOutPos))\n                GameState.raiders.push(raider)\n                EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, raider))\n            })\n            raider.group.position.copy(station.group.position).add(new Vector3(0, 0, TILESIZE / 2).applyEuler(station.group.rotation))\n            raider.group.rotation.copy(station.group.rotation)\n            this.sceneManager.scene.add(raider.group)\n        }\n    }\n\n}\n","import { ScreenLayer } from '../../screen/ScreenLayer'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventManager'\nimport { WorldManager } from '../../scene/WorldManager'\n\nexport class SelectionLayer extends ScreenLayer {\n\n    worldManager: WorldManager\n    selectStart: { x: number, y: number } = null\n\n    constructor() {\n        super(true)\n    }\n\n    setWorldManager(worldManager: WorldManager) {\n        this.worldManager = worldManager\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        if (eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.startSelection(cx, cy)\n        } else if (eventEnum === POINTER_EVENT.MOVE) {\n            return this.changeSelection(cx, cy)\n        } else if (eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.selectEntities(cx, cy)\n        }\n        return false\n    }\n\n    startSelection(screenX: number, screenY: number) {\n        this.selectStart = {x: screenX, y: screenY}\n        return true\n    }\n\n    changeSelection(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        this.context.strokeStyle = 'rgba(128, 192, 192, 0.5)'\n        this.context.lineWidth = 2\n        this.context.strokeRect(this.selectStart.x, this.selectStart.y, screenX - this.selectStart.x, screenY - this.selectStart.y)\n        return true\n    }\n\n    selectEntities(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        const r1x = (this.selectStart.x / this.canvas.width) * 2 - 1\n        const r1y = -(this.selectStart.y / this.canvas.height) * 2 + 1\n        const r2x = (screenX / this.canvas.width) * 2 - 1\n        const r2y = -(screenY / this.canvas.height) * 2 + 1\n        if (Math.abs(screenX - this.selectStart.x) < 5 && Math.abs(screenY - this.selectStart.y) < 5) {\n            const x = (this.selectStart.x + screenX) / this.canvas.width - 1\n            const y = -(this.selectStart.y + screenY) / this.canvas.height + 1\n            this.worldManager.sceneManager.selectEntitiesByRay(x, y)\n        } else {\n            this.worldManager.sceneManager.selectEntitiesInFrustum(r1x, r1y, r2x, r2y)\n        }\n        this.selectStart = null\n        return true\n    }\n\n}\n","import { ScreenLayer } from '../../screen/ScreenLayer'\nimport { WorldManager } from '../../scene/WorldManager'\nimport { SelectionType } from '../model/Selectable'\nimport { GameState } from '../model/GameState'\nimport { Raider } from '../../scene/model/Raider'\nimport { MoveJob } from '../model/job/Job'\nimport { EventBus } from '../../event/EventBus'\nimport { JobCreateEvent } from '../../event/WorldEvents'\nimport { Surface } from '../../scene/model/map/Surface'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { FulfillerEntity } from '../../scene/model/FulfillerEntity'\nimport { SurfaceJob, SurfaceJobType } from '../model/job/SurfaceJob'\nimport { KEY_EVENT, MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventManager'\n\nexport class GameLayer extends ScreenLayer {\n\n    private worldMgr: WorldManager\n\n    constructor() {\n        super(false, false)\n    }\n\n    setWorldManager(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (eventEnum === POINTER_EVENT.MOVE) {\n            const intersectionPoint = this.getTerrainPositionFromEvent(event)\n            if (intersectionPoint) this.worldMgr.setTorchPosition(intersectionPoint)\n        } else if (eventEnum === POINTER_EVENT.UP && event.button === MOUSE_BUTTON.SECONDARY) {\n            if (GameState.selectionType === SelectionType.PILOT || GameState.selectionType === SelectionType.GROUP) {\n                // TODO check for collectable entity first\n                const intersectionPoint = this.getTerrainPositionFromEvent(event)\n                if (intersectionPoint) {\n                    const surface = this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(intersectionPoint)\n                    if (surface) {\n                        if (surface.isDrillable()) {\n                            this.createSurfaceJob(SurfaceJobType.DRILL, surface)\n                        } else if (surface.hasRubble()) {\n                            this.createSurfaceJob(SurfaceJobType.CLEAR_RUBBLE, surface)\n                        } else if (surface.isWalkable()) {\n                            GameState.selectedEntities.forEach((raider: Raider) => raider.setJob(new MoveJob(intersectionPoint)))\n                            if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n                        }\n                    }\n                }\n            }\n        }\n        this.canvas.dispatchEvent(event)\n        return true\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        if (eventEnum === KEY_EVENT.UP) {\n            if (GameState.selectionType === SelectionType.SURFACE) {\n                GameState.selectedEntities.forEach((s: Surface) => {\n                    if (event.key === 'c') {\n                        if (!s.surfaceType.floor) s.collapse()\n                    } else if (event.key === 'f') {\n                        const t = s.terrain.findFallInTarget(s.x, s.y)\n                        if (!s.surfaceType.floor) s.createFallin(t[0], t[1])\n                    }\n                })\n                EventBus.publishEvent(new EntityDeselected())\n                return true\n            }\n        }\n        return false\n    }\n\n    createSurfaceJob(surfaceJobType: SurfaceJobType, surface: Surface) {\n        const surfJob = new SurfaceJob(surfaceJobType, surface)\n        GameState.selectedEntities.forEach((e: FulfillerEntity) => {\n            if (surfJob.isQualified(e)) e.setJob(surfJob)\n        })\n        EventBus.publishEvent(new JobCreateEvent(surfJob))\n        surface.updateJobColor()\n        if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n    }\n\n    getTerrainPositionFromEvent(event) {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        return this.worldMgr.getTerrainIntersectionPoint(rx, ry)\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        this.canvas.dispatchEvent(event)\n        return true\n    }\n\n}\n","export class BaseElement {\n\n    parent: BaseElement = null\n    x: number = 0\n    y: number = 0\n    relX: number = 0\n    relY: number = 0\n    width: number = 0\n    height: number = 0\n    children: BaseElement[] = []\n    hidden: boolean = false\n    disabled: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n\n    constructor(parent: BaseElement = null) {\n        this.parent = parent\n    }\n\n    addChild<T extends BaseElement>(child: T): T {\n        child.parent = this\n        this.children.push(child)\n        child.updatePosition()\n        return child\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n    }\n\n    drawTooltip(context: CanvasRenderingContext2D) {\n    }\n\n    onClick() {\n    }\n\n    isInactive(): boolean {\n        for (let parent = this.parent; !!parent; parent = parent.parent) if (parent.isInactive()) return true\n        return this.hidden || this.disabled\n    }\n\n    hide() {\n        this.hidden = true\n        this.children.forEach((child) => child.hide())\n    }\n\n    show() {\n        this.hidden = false\n        this.children.forEach((child) => child.show())\n    }\n\n    updatePosition() {\n        this.x = this.parent ? this.parent.x + this.relX : this.relX\n        this.y = this.parent ? this.parent.y + this.relY : this.relY\n        this.children.forEach((child) => child.updatePosition())\n    }\n\n    isInRect(cx, cy) {\n        return cx >= this.x && cy >= this.y && cx < this.x + this.width && cy < this.y + this.height\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = this.pressed && this.hover\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => updated = child.checkHover(cx, cy) || updated)\n        return updated\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = this.pressed !== inRect\n        this.pressed = inRect\n        this.children.forEach((child) => updated = child.checkClick(cx, cy) || updated)\n        return updated\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        if (inRect && this.pressed) this.onClick()\n        let updated = false\n        this.children.forEach((child) => updated = child.checkRelease(cx, cy) || updated)\n        updated = this.release() || updated\n        return updated\n    }\n\n    release(): boolean {\n        let updated = this.pressed || this.hover\n        this.pressed = false\n        this.hover = false\n        this.children.forEach((child) => updated = child.release() || updated)\n        return updated\n    }\n\n    notifyRedraw() {\n        if (this.parent) this.parent.notifyRedraw()\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { BaseElement } from '../BaseElement'\nimport { ButtonCfg } from './ButtonCfg'\n\nexport class Button extends BaseElement {\n\n    buttonType: string\n    imgNormal\n    imgHover\n    imgPressed\n    label: string\n    tooltip: string\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent)\n        this.buttonType = btnCfg.buttonType\n        this.imgNormal = ResourceManager.getImageOrNull(btnCfg.normalFile)\n        this.imgHover = ResourceManager.getImageOrNull(btnCfg.highlightFile)\n        this.imgPressed = ResourceManager.getImageOrNull(btnCfg.pressedFile)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width\n        this.height = btnCfg.height\n        this.tooltip = btnCfg.tooltip\n        this.updatePosition()\n    }\n\n    onClick() {\n        console.log('button pressed: ' + this.buttonType)\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgNormal\n        if (this.disabled || this.pressed) {\n            img = this.imgPressed\n        } else if (this.hover) {\n            img = this.imgHover\n        }\n        if (img) {\n            context.drawImage(img, this.x, this.y)\n        } else if (this.label) {\n            context.textAlign = 'center'\n            context.font = 'bold 10px Arial'\n            context.fillStyle = '#fff'\n            context.fillText(this.label, this.x + this.width / 2, this.y + this.height - 2)\n        }\n        super.onRedraw(context)\n    }\n\n}\n\n","export class ButtonCfg {\n\n    buttonType?: string\n    normalFile?: string\n    highlightFile?: string\n    pressedFile?: string\n    relX?: number\n    relY?: number\n    width?: number\n    height?: number\n    tooltip?: string\n\n    constructor(cfg: any) {\n        if (cfg.length === 9) {\n            [this.buttonType, this.normalFile, this.highlightFile, this.pressedFile, this.relX, this.relY, this.width, this.height, this.tooltip] = cfg\n        } else if (cfg.length === 5) {\n            [this.width, this.height, this.highlightFile, this.pressedFile, this.tooltip] = cfg\n        } else {\n            throw 'Invalid number of arguments (' + cfg.length + ') given for button configuration expected 9 or 5'\n        }\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { Button } from '../../base/button/Button'\nimport { BaseElement } from '../../base/BaseElement'\nimport { iGet } from '../../../../core/Util'\nimport { NATIVE_FRAMERATE, PANEL_ANIMATION_MULTIPLIER } from '../../../../main'\nimport { ButtonCfg } from '../../base/button/ButtonCfg'\n\nexport class Panel extends BaseElement {\n\n    name: string\n    img\n    xIn: number = 0\n    yIn: number = 0\n    xOut: number = 0\n    yOut: number = 0\n    buttons = {}\n    animationTimeout = null\n    movedIn: boolean = false\n\n    constructor(panelName: string = null, panelsCfg: {} = {}, buttonsCfg: {} = {}) {\n        super()\n        this.name = panelName\n        if (panelsCfg && panelName) {\n            let imgName;\n            [imgName, this.xOut, this.yOut, this.xIn, this.yIn] = iGet(panelsCfg, panelName)\n            this.img = ResourceManager.getImage(imgName)\n            this.relX = this.xIn\n            this.relY = this.yIn\n        }\n        if (buttonsCfg && panelName) {\n            let panelButtonsCfg = iGet(buttonsCfg, panelName)\n            if (panelButtonsCfg) {\n                if (panelName === 'Panel_Encyclopedia') { // TODO refactor cfg handling\n                    this.addButton(new Button(this, new ButtonCfg(panelButtonsCfg)))\n                } else {\n                    panelButtonsCfg.forEach((btnCfg) => this.addButton(new Button(this, new ButtonCfg(btnCfg))))\n                }\n            }\n        }\n    }\n\n    addButton<T extends Button>(button: T): T {\n        this.buttons[button.buttonType] = button\n        this.addChild(button)\n        return button\n    }\n\n    isInactive(): boolean {\n        return this.animationTimeout || super.isInactive()\n    }\n\n    updateAnimation(targetX: number, targetY: number, speed: number, onDone: () => any) {\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= speed && Math.abs(diffY) <= speed) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * speed)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * speed)\n            const panel = this\n            this.animationTimeout = setTimeout(() => panel.updateAnimation(targetX, targetY, speed, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    setMovedIn(movedIn: boolean, onDone: () => any = null) {\n        if (this.movedIn !== movedIn) {\n            this.toggleState(onDone)\n        } else if (onDone) {\n            onDone()\n        }\n    }\n\n    toggleState(onDone: () => any = null) {\n        if (this.animationTimeout) {\n            clearTimeout(this.animationTimeout)\n            this.animationTimeout = null\n        }\n        if (this.movedIn) {\n            this.movedIn = false\n            this.updateAnimation(this.xOut, this.yOut, PANEL_ANIMATION_MULTIPLIER, onDone)\n        } else {\n            this.movedIn = true\n            this.updateAnimation(this.xIn, this.yIn, PANEL_ANIMATION_MULTIPLIER, onDone)\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.img) context.drawImage(this.img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\nexport class TopPanel extends Panel {\n\n    btnPriorities: Button\n\n    constructor(panelName: string, panelsCfg: {}, buttonsCfg: {}) {\n        super(panelName, panelsCfg, buttonsCfg)\n        this.btnPriorities = iGet(this.buttons, 'PanelButton_TopPanel_Priorities')\n    }\n\n}\n\nexport class InfoDockPanel extends Panel {\n\n    btnGoto: Button\n    btnClose: Button\n\n    constructor(panelName: string, panelsCfg: {}, buttonsCfg: {}) {\n        super(panelName, panelsCfg, buttonsCfg)\n        this.btnGoto = iGet(this.buttons, 'PanelButton_InfoDock_Goto')\n        this.btnGoto.disabled = true\n        this.btnClose = iGet(this.buttons, 'PanelButton_InfoDock_Close')\n        this.btnClose.disabled = true\n    }\n\n}\n","import { Button } from '../../base/button/Button'\nimport { iGet } from '../../../../core/Util'\nimport { Panel } from './Panel'\n\nexport class RadarPanel extends Panel {\n\n    fill: Panel\n    overlay: Panel\n    btnToggle: Button\n    btnMap: Button\n    btnTagged: Button\n\n    constructor(panelName: string, panelsCfg: {}, buttonsCfg: {}) {\n        super(panelName, panelsCfg, buttonsCfg)\n        this.fill = this.addChild(new Panel('Panel_RadarFill', panelsCfg, buttonsCfg))\n        // fill cords given in abs, turn to rel (otherwise animation wont work)\n        this.fill.relX = this.relX - this.fill.relX\n        this.fill.relY = this.relY - this.fill.relY\n        this.overlay = this.addChild(new Panel('Panel_RadarOverlay', panelsCfg, buttonsCfg))\n        // this.overlay.hide();\n        this.btnToggle = iGet(this.buttons, 'PanelButton_Radar_Toggle')\n        this.btnToggle.onClick = () => this.toggleState()\n        this.btnMap = iGet(this.buttons, 'PanelButton_Radar_MapView')\n        this.btnMap.onClick = () => {\n            // this.fill.hide();\n            // this.overlay.hide();\n        }\n        this.btnTagged = iGet(this.buttons, 'PanelButton_Radar_TaggedObjectView')\n        this.btnTagged.onClick = () => {\n            // this.fill.show();\n            // this.overlay.show(); // TODO only show overlay, when entity selected\n        }\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { GameState } from '../../../model/GameState'\nimport { Panel } from './Panel'\n\nexport class MessagePanel extends Panel {\n\n    imgAir\n\n    constructor(panelName: string, panelsCfg: {}, buttonsCfg: {}) {\n        super(panelName, panelsCfg, buttonsCfg)\n        this.relX = this.xOut = this.xIn = 42\n        this.relY = this.yOut = this.yIn = 409\n        this.imgAir = ResourceManager.getImage('Interface/Airmeter/msgpanel_air_juice.bmp')\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (GameState.airlevel > 0) {\n            const width = Math.round(236 * GameState.airlevel)\n            context.drawImage(this.imgAir, this.x + 85, this.y + 6, width, 8)\n        }\n    }\n\n}\n","import { Button } from '../../base/button/Button'\nimport { iGet } from '../../../../core/Util'\nimport { GameState } from '../../../model/GameState'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { Panel } from './Panel'\nimport { EventBus } from '../../../../event/EventBus'\nimport { CollectEvent, SpawnMaterialEvent } from '../../../../event/WorldEvents'\nimport { CollectableType } from '../../../../scene/model/collect/CollectableEntity'\n\nexport class PanelCrystalSideBar extends Panel {\n\n    btnOre: Button\n    btnCrystal: Button\n    imgNoCrystal\n    imgSmallCrystal\n    imgUsedCrystal\n    imgOre\n\n    constructor(panelName: string, panelsCfg: {}, buttonsCfg: {}) {\n        super(panelName, panelsCfg, buttonsCfg)\n        this.btnOre = iGet(this.buttons, 'PanelButton_CrystalSideBar_Ore')\n        this.btnOre.label = GameState.numOre.toString()\n        this.btnCrystal = iGet(this.buttons, 'PanelButton_CrystalSideBar_Crystals')\n        this.btnCrystal.label = GameState.numCrystal.toString()\n        this.imgNoCrystal = ResourceManager.getImage('Interface/RightPanel/NoSmallCrystal.bmp')\n        this.imgSmallCrystal = ResourceManager.getImage('Interface/RightPanel/SmallCrystal.bmp')\n        this.imgUsedCrystal = ResourceManager.getImage('Interface/RightPanel/UsedCrystal.bmp')\n        this.imgOre = ResourceManager.getImage('Interface/RightPanel/CrystalSideBar_Ore.bmp')\n        EventBus.registerEventListener(CollectEvent.eventKey, (event: CollectEvent) => {\n            this.updateQuantities(event.collectType)\n        })\n        EventBus.registerEventListener(SpawnMaterialEvent.eventKey, (event: SpawnMaterialEvent) => {\n            this.updateQuantities(event.collectable.getCollectableType())\n        })\n    }\n\n    updateQuantities(type: CollectableType) {\n        if (type === CollectableType.CRYSTAL || type === CollectableType.ORE || type === CollectableType.BRICK) {\n            this.notifyRedraw() // TODO performance: only redraw this panel\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        this.btnOre.label = GameState.numOre.toString() // TODO include number of bricks\n        this.btnCrystal.label = GameState.numCrystal.toString()\n        super.onRedraw(context)\n        // draw crystals\n        let curX = this.x + this.img.width - 8\n        let curY = this.y + this.img.height - 34\n        for (let c = 0; (GameState.neededCrystals < 1 || c < Math.max(GameState.neededCrystals, GameState.numCrystal)) && curY >= Math.max(this.imgNoCrystal.height, this.imgSmallCrystal.height, this.imgUsedCrystal.height); c++) {\n            let imgCrystal = this.imgNoCrystal\n            if (GameState.usedCrystals > c) {\n                imgCrystal = this.imgUsedCrystal\n            } else if (GameState.numCrystal > c) {\n                imgCrystal = this.imgSmallCrystal\n            }\n            curY -= imgCrystal.height\n            context.drawImage(imgCrystal, curX - imgCrystal.width / 2, curY)\n        }\n        // draw ores\n        curX = this.x + this.img.width - 21\n        curY = this.y + this.img.height - 42\n        for (let i = 0; i < GameState.numOre && curY >= this.imgOre.height; ++i) {\n            curY -= this.imgOre.height\n            context.drawImage(this.imgOre, curX - this.imgOre.width / 2, curY)\n        }\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\nimport { Panel } from '../ingame/panel/Panel'\n\nexport class MenuItem extends BaseElement {\n\n    panel: Panel\n    itemKey: string\n    imgNormal\n    imgDisabled\n    imgPressed\n    tooltip: string\n    tooltipDisabled: string\n    hotkey: string\n\n    constructor(panel: Panel, menuItemGroup, itemKey) {\n        super()\n        this.panel = panel\n        this.itemKey = itemKey\n        this.relX = panel.img.width - 59\n        this.relY = 9\n        this.width = 40\n        this.height = 40\n        const menuItemCfg = ResourceManager.cfg(menuItemGroup, itemKey)\n        let normalFile, disabledFile, pressedFile\n        if (menuItemCfg) {\n            [normalFile, disabledFile, pressedFile, this.tooltip, this.tooltipDisabled, this.hotkey] = menuItemCfg\n        }\n        if (normalFile) this.imgNormal = ResourceManager.getImage(normalFile)\n        if (disabledFile) this.imgDisabled = ResourceManager.getImage(disabledFile)\n        if (pressedFile) this.imgPressed = ResourceManager.getImage(pressedFile)\n        this.disabled = true\n    }\n\n    onClick() {\n        console.log('menu item pressed: ' + this.itemKey)\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled\n        } else if (this.pressed) {\n            img = this.imgPressed\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n        super.drawHover(context)\n        if (!this.disabled && this.hover) {\n            context.strokeStyle = '#0f0'\n            context.lineWidth = 2\n            context.strokeRect(this.x - context.lineWidth / 2, this.y - context.lineWidth / 2, this.width + context.lineWidth - 1, this.height + context.lineWidth - 1)\n        }\n    }\n\n}\n","import { BaseElement } from '../BaseElement'\nimport { Button } from './Button'\nimport { ButtonCfg } from './ButtonCfg'\n\nexport class InterfaceBackButton extends Button {\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent, btnCfg)\n        this.relX = 4\n        this.relY = 14\n    }\n\n}\n","import { Button } from '../../base/button/Button'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { MenuItem } from '../../base/MenuItem'\nimport { Panel } from './Panel'\nimport { InterfaceBackButton } from '../../base/button/InterfaceBackButton'\nimport { ButtonCfg } from '../../base/button/ButtonCfg'\n\nexport class IconPanel extends Panel {\n\n    subPanels: IconSubPanel[] = []\n    mainPanel: IconSubPanel\n\n    constructor() {\n        super()\n        this.xOut = 640 + 95\n        this.relX = this.xIn = 640 - 16\n        this.relY = this.yIn = this.yOut = 9\n    }\n\n    addSubPanel(numOfItems: number) {\n        const childPanel = this.addChild(new IconSubPanel(numOfItems, this.mainPanel))\n        this.subPanels.push(childPanel)\n        return childPanel\n    }\n\n    selectSubPanel(targetPanel: IconSubPanel) {\n        this.subPanels.forEach((subPanel) => subPanel.setMovedIn(false))\n        targetPanel.setMovedIn(true)\n    }\n\n}\n\nexport class IconSubPanel extends Panel {\n\n    countMenuItems: number = 0\n    backBtn: Button = null\n\n    constructor(numOfItems, onBackPanel: Panel = null) {\n        super()\n        if (onBackPanel) {\n            const backBtnCfg = new ButtonCfg(ResourceManager.cfg('InterfaceBackButton'))\n            this.backBtn = this.addButton(new InterfaceBackButton(this, backBtnCfg))\n            const panel = this\n            this.backBtn.onClick = () => panel.toggleState(() => onBackPanel.toggleState())\n        }\n        const frameImgCfg = ResourceManager.cfg('InterfaceSurroundImages', numOfItems.toString())\n        const [imgName, val1, val2, val3, val4, imgNameWoBackName, woBack1, woBack2] = frameImgCfg\n        this.img = onBackPanel ? ResourceManager.getImage(imgName) : ResourceManager.getImage(imgNameWoBackName)\n        this.xIn = -this.img.width\n    }\n\n    addMenuItem(menuItemGroup, itemKey) {\n        const menuItem = this.addChild(new MenuItem(this, menuItemGroup, itemKey))\n        menuItem.relY += menuItem.height * this.countMenuItems\n        this.countMenuItems++\n        return menuItem\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { Surface } from './map/Surface'\nimport { CollectableEntity, CollectableType } from './collect/CollectableEntity'\nimport { EventBus } from '../../event/EventBus'\nimport { JobCreateEvent } from '../../event/WorldEvents'\nimport { CompletePowerPathJob } from '../../game/model/job/SurfaceJob'\nimport { GameState } from '../../game/model/GameState'\n\nexport class BuildingSite {\n\n    isPowerPath: boolean\n    surfaces: Surface[] = []\n    neededByType = {}\n    assignedByType = {}\n    onSiteByType = {}\n    complete: boolean = false\n\n    constructor(isPowerPath: boolean = false) {\n        this.isPowerPath = isPowerPath\n    }\n\n    getPosition(): Vector3 {\n        return this.surfaces[0].getCenterWorld()\n    }\n\n    needs(collectableType: CollectableType): boolean {\n        const needed = this.neededByType[collectableType] || 0\n        const assigned = (this.assignedByType[collectableType] || []).length\n        return needed > assigned\n    }\n\n    assign(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        this.assignedByType[collectableType] = this.assignedByType[collectableType] || []\n        this.assignedByType[collectableType].push(item)\n    }\n\n    unAssign(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        this.assignedByType[collectableType] = (this.assignedByType[collectableType] || []).filter((assigned) => assigned !== item)\n    }\n\n    addItem(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        const needed = this.neededByType[collectableType] || 0\n        this.onSiteByType[collectableType] = this.onSiteByType[collectableType] || []\n        if (this.onSiteByType[collectableType].length < needed) {\n            item.group.position.copy(item.getTargetPos())\n            item.worldMgr.sceneManager.scene.add(item.group)\n            this.onSiteByType[collectableType].push(item)\n            this.checkComplete()\n        } else {\n            item.resetTarget()\n            item.worldMgr.addCollectable(item, item.getTargetPos().x, item.getTargetPos().z)\n        }\n    }\n\n    checkComplete() {\n        if (this.complete) return\n        let complete = true\n        Object.keys(this.neededByType).some((neededType) => {\n            const needed = this.neededByType[neededType] || 0\n            const onSite = (this.onSiteByType[neededType] || []).length\n            if (onSite < needed) {\n                complete = false\n                return true\n            }\n        })\n        if (complete) {\n            this.complete = complete\n            GameState.buildingSites = GameState.buildingSites.filter((site) => site !== this)\n            const items = []\n            Object.keys(this.onSiteByType).forEach((collectableType) => items.push(...this.onSiteByType[collectableType]))\n            if (this.isPowerPath) {\n                EventBus.publishEvent(new JobCreateEvent(new CompletePowerPathJob(this.surfaces[0], items)))\n            } else {\n                // TODO implement building spawning\n                console.log('Building site is complete')\n            }\n        }\n    }\n\n}\n","import { IconPanel } from './IconPanel'\nimport { EventBus } from '../../../../event/EventBus'\nimport { BuildingSelected, EntityDeselected, RaiderSelected, SurfaceSelectedEvent, VehicleSelected } from '../../../../event/LocalEvents'\nimport { CollectEvent, EntityAddedEvent, EntityRemovedEvent, EntityType, JobCreateEvent, RaiderRequested, SpawnDynamiteEvent, SpawnMaterialEvent } from '../../../../event/WorldEvents'\nimport { GameState } from '../../../model/GameState'\nimport { Surface } from '../../../../scene/model/map/Surface'\nimport { Building } from '../../../model/entity/building/Building'\nimport { SurfaceJob, SurfaceJobType } from '../../../model/job/SurfaceJob'\nimport { SurfaceType } from '../../../../scene/model/map/SurfaceType'\nimport { CollectableType } from '../../../../scene/model/collect/CollectableEntity'\nimport { BuildingSite } from '../../../../scene/model/BuildingSite'\nimport { BuildingEntity } from '../../../../scene/model/BuildingEntity'\n\nexport class MainPanel extends IconPanel {\n\n    // TODO refactor menu item handling and classes\n\n    constructor() {\n        super()\n        this.mainPanel = this.addSubPanel(4)\n        EventBus.registerEventListener(EntityDeselected.eventKey, () => this.selectSubPanel(this.mainPanel))\n        const buildingPanel = this.addSubPanel(10)\n        const smallVehiclePanel = this.addSubPanel(6)\n        const largeVehiclePanel = this.addSubPanel(5)\n        const selectWallPanel = this.addSubPanel(4)\n        const selectFloorPanel = this.addSubPanel(3)\n        const selectRubblePanel = this.addSubPanel(2)\n        const selectBuildingPanel = this.addSubPanel(4)\n        const selectRaiderPanel = this.addSubPanel(10)\n        const selectVehiclePanel = this.addSubPanel(7)\n        const teleportRaider = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_TeleportMan')\n        teleportRaider.disabled = GameState.getBuildingsByType(Building.TOOLSTATION, Building.TELEPORT_PAD).length < 1\n        EventBus.registerEventListener(EntityAddedEvent.eventKey, (event: EntityAddedEvent) => {\n            if (event.type === EntityType.BUILDING || event.type === EntityType.RAIDER) {\n                teleportRaider.disabled = GameState.getBuildingsByType(Building.TOOLSTATION, Building.TELEPORT_PAD).length < 1\n                    || GameState.raiders.length >= GameState.getMaxRaiders()\n                this.notifyRedraw() // TODO performance: actually just the button needs to be redrawn\n            }\n        })\n        EventBus.registerEventListener(EntityRemovedEvent.eventKey, (event: EntityRemovedEvent) => {\n            if (event.type === EntityType.BUILDING || event.type === EntityType.RAIDER) {\n                teleportRaider.disabled = GameState.getBuildingsByType(Building.TOOLSTATION, Building.TELEPORT_PAD).length < 1\n                    || GameState.raiders.length >= GameState.getMaxRaiders()\n                this.notifyRedraw() // TODO performance: actually just the button needs to be redrawn\n            }\n        })\n        teleportRaider.onClick = () => EventBus.publishEvent(new RaiderRequested(GameState.requestedRaiders + 1))\n        // TODO add decrease requested raider spawn option\n        const buildingItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildBuilding')\n        buildingItem.disabled = false\n        buildingItem.onClick = () => this.mainPanel.toggleState(() => buildingPanel.toggleState())\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'Toolstation')\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'TeleportPad')\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'Docks')\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'Powerstation')\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'Barracks')\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'Upgrade')\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'Geo-dome')\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'OreRefinery')\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'Gunstation')\n        buildingPanel.addMenuItem('InterfaceBuildImages', 'TeleportBIG')\n        const smallVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildSmallVehicle')\n        smallVehicleItem.disabled = false\n        smallVehicleItem.onClick = () => this.mainPanel.toggleState(() => smallVehiclePanel.toggleState())\n        smallVehiclePanel.addMenuItem('InterfaceBuildImages', 'Hoverboard')\n        smallVehiclePanel.addMenuItem('InterfaceBuildImages', 'SmallDigger')\n        smallVehiclePanel.addMenuItem('InterfaceBuildImages', 'SmallTruck')\n        smallVehiclePanel.addMenuItem('InterfaceBuildImages', 'SmallCat')\n        smallVehiclePanel.addMenuItem('InterfaceBuildImages', 'SmallMLP')\n        smallVehiclePanel.addMenuItem('InterfaceBuildImages', 'SmallHeli')\n        const largeVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildLargeVehicle')\n        largeVehicleItem.disabled = false\n        largeVehicleItem.onClick = () => this.mainPanel.toggleState(() => largeVehiclePanel.toggleState())\n        largeVehiclePanel.addMenuItem('InterfaceBuildImages', 'BullDozer')\n        largeVehiclePanel.addMenuItem('InterfaceBuildImages', 'WalkerDigger')\n        largeVehiclePanel.addMenuItem('InterfaceBuildImages', 'LargeMLP')\n        largeVehiclePanel.addMenuItem('InterfaceBuildImages', 'LargeDigger')\n        largeVehiclePanel.addMenuItem('InterfaceBuildImages', 'LargeCat')\n        this.mainPanel.setMovedIn(true)\n        const itemDrill = selectWallPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_Dig')\n        itemDrill.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            if (!selectedSurface.hasJobType(SurfaceJobType.DRILL)) {\n                EventBus.publishEvent(new JobCreateEvent(new SurfaceJob(SurfaceJobType.DRILL, selectedSurface)))\n            }\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        const itemReinforce = selectWallPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_Reinforce')\n        itemReinforce.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            if (!selectedSurface.hasJobType(SurfaceJobType.REINFORCE)) {\n                EventBus.publishEvent(new JobCreateEvent(new SurfaceJob(SurfaceJobType.REINFORCE, selectedSurface)))\n            }\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        const itemDynamite = selectWallPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_Dynamite')\n        itemDynamite.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            if (!selectedSurface.hasJobType(SurfaceJobType.BLOW)) {\n                EventBus.publishEvent(new SpawnDynamiteEvent(selectedSurface))\n            }\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        const itemDeselect = selectWallPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeselectDig')\n        itemDeselect.disabled = false\n        itemDeselect.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.cancelJobs()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        selectWallPanel.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected())\n        selectFloorPanel.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected())\n        const pathItem = selectFloorPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_LayPath')\n        pathItem.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.surfaceType = SurfaceType.POWER_PATH_SITE\n            selectedSurface.updateTexture()\n            const targetBuilding = GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), Building.TOOLSTATION)\n            if (targetBuilding) {\n                const ores = GameState.dropMaterial(CollectableType.ORE, 2)\n                ores.forEach((ore) => {\n                    EventBus.publishEvent(new SpawnMaterialEvent(ore, targetBuilding.getDropPosition())) // TODO use ToolNullName from cfg\n                })\n            }\n            const site = new BuildingSite(true)\n            site.surfaces.push(selectedSurface)\n            site.neededByType[CollectableType.ORE] = 2\n            GameState.buildingSites.push(site)\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        selectFloorPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_RemovePath')\n        selectFloorPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        selectRubblePanel.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected())\n        const clearRubbleItem = selectRubblePanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_ClearRubble')\n        clearRubbleItem.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            EventBus.publishEvent(new JobCreateEvent(new SurfaceJob(SurfaceJobType.CLEAR_RUBBLE, selectedSurface)))\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        selectRubblePanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        EventBus.registerEventListener(SurfaceSelectedEvent.eventKey, (event: SurfaceSelectedEvent) => {\n            const surface = event.surface\n            if (surface.surfaceType.floor) {\n                if (surface.hasRubble()) {\n                    clearRubbleItem.disabled = !event.surface.hasRubble()\n                    this.selectSubPanel(selectRubblePanel)\n                } else {\n                    pathItem.disabled = event.surface.hasRubble()\n                    this.selectSubPanel(selectFloorPanel)\n                }\n            } else {\n                this.selectSubPanel(selectWallPanel)\n                itemDrill.disabled = !surface.isDrillable()\n                itemReinforce.disabled = !surface.isReinforcable()\n                itemDynamite.disabled = !surface.isExplodable()\n                this.notifyRedraw() // TODO performance: actually just the buttons need to be redrawn\n            }\n        })\n        EventBus.registerEventListener(BuildingSelected.eventKey, () => this.selectSubPanel(selectBuildingPanel))\n        selectBuildingPanel.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected())\n        selectBuildingPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_Repair')\n        selectBuildingPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_PowerOff') // TODO other option is Interface_MenuItem_PowerOn\n        const upgradeItem = selectBuildingPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeBuilding')\n        upgradeItem.disabled = false // TODO actually could use correct check, but state is not updated, when panel is moved in\n        EventBus.registerEventListener(CollectEvent.eventKey, (event: CollectEvent) => {\n            upgradeItem.disabled = GameState.numOre < 5 || GameState.selectedEntities.length < 1 || (GameState.selectedEntities[0] as BuildingEntity).hasMaxUpgrades()\n            this.notifyRedraw() // TODO performance: actually just the buttons need to be redrawn\n        })\n        EventBus.registerEventListener(SpawnMaterialEvent.eventKey, (event: SpawnMaterialEvent) => {\n            upgradeItem.disabled = GameState.numOre < 5 || GameState.selectedEntities.length < 1 || (GameState.selectedEntities[0] as BuildingEntity).hasMaxUpgrades()\n            this.notifyRedraw() // TODO performance: actually just the buttons need to be redrawn\n        })\n        upgradeItem.onClick = () => {\n            (GameState.selectedEntities[0] as BuildingEntity).upgrade()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        selectBuildingPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteBuilding')\n        EventBus.registerEventListener(RaiderSelected.eventKey, () => this.selectSubPanel(selectRaiderPanel))\n        selectRaiderPanel.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected())\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_GoFeed')\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_UnLoadMinifigure')\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_MinifigurePickUp')\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_GetTool')\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_DropBirdScarer')\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeMan')\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSkill')\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoFirstPerson')\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoSecondPerson')\n        selectRaiderPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteMan')\n        EventBus.registerEventListener(VehicleSelected.eventKey, () => this.selectSubPanel(selectVehiclePanel))\n        selectVehiclePanel.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected())\n    }\n\n}\n","import { ScaledLayer } from '../../screen/ScreenLayer'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { InfoDockPanel, Panel, TopPanel } from '../gui/ingame/panel/Panel'\nimport { BaseElement } from '../gui/base/BaseElement'\nimport { RadarPanel } from '../gui/ingame/panel/RadarPanel'\nimport { MessagePanel } from '../gui/ingame/panel/MessagePanel'\nimport { PanelCrystalSideBar } from '../gui/ingame/panel/PanelCrystalSideBar'\nimport { MainPanel } from '../gui/ingame/panel/MainPanel'\nimport { POINTER_EVENT } from '../../event/EventManager'\n\nexport class GuiLayer extends ScaledLayer {\n\n    rootElement: BaseElement = new BaseElement()\n    panelRadar: RadarPanel\n    panelMessages: MessagePanel\n    panelMessagesSide: Panel\n    panelCrystalSideBar: PanelCrystalSideBar\n    panelTopPanel: TopPanel\n    panelInformation: Panel\n    panelPriorityList: Panel\n    panelCameraControl: Panel\n    panelInfoDock: InfoDockPanel\n    panelEncyclopedia: Panel\n    panelMain: MainPanel\n\n    constructor() {\n        super()\n        const panelsCfg = ResourceManager.cfg('Panels640x480')\n        const buttonsCfg = ResourceManager.cfg('Buttons640x480')\n        const layer = this\n        this.rootElement.notifyRedraw = () => layer.redraw() // TODO performance only redraw updated parts\n        // created in reverse order compared to cfg, earlier in cfg means higher z-value // TODO add some z layering at least to panels\n        this.panelEncyclopedia = this.addPanel(new Panel('Panel_Encyclopedia', panelsCfg, buttonsCfg))\n        this.panelInfoDock = this.addPanel(new InfoDockPanel('Panel_InfoDock', panelsCfg, buttonsCfg))\n        this.panelCameraControl = this.addPanel(new Panel('Panel_CameraControl', panelsCfg, buttonsCfg))\n        this.panelPriorityList = this.addPanel(new Panel('Panel_PriorityList', panelsCfg, buttonsCfg))\n        this.panelInformation = this.addPanel(new Panel('Panel_Information', panelsCfg, buttonsCfg))\n        this.panelTopPanel = this.addPanel(new TopPanel('Panel_TopPanel', panelsCfg, buttonsCfg))\n        this.panelMain = this.addPanel(new MainPanel())\n        this.panelCrystalSideBar = this.addPanel(new PanelCrystalSideBar('Panel_CrystalSideBar', panelsCfg, buttonsCfg))\n        this.panelMessagesSide = this.addPanel(new Panel('Panel_MessagesSide', panelsCfg, buttonsCfg))\n        this.panelMessages = this.addPanel(new MessagePanel('Panel_Messages', panelsCfg, buttonsCfg))\n        this.panelRadar = this.addPanel(new RadarPanel('Panel_Radar', panelsCfg, buttonsCfg))\n        // link panels\n        this.panelTopPanel.btnPriorities.onClick = () => {\n            const pressed = this.panelTopPanel.btnPriorities.pressed // TODO this requires toggle buttons\n            // this.panelIcons.setMovedIn(!pressed, () => this.panelPriorityList.setMovedIn(pressed));\n        }\n        this.onRedraw = (context: CanvasRenderingContext2D) => {\n            context.clearRect(0, 0, context.canvas.width, context.canvas.height)\n            this.rootElement.onRedraw(context)\n        }\n    }\n\n    addPanel<T extends Panel>(panel: T): T {\n        return this.rootElement.addChild(panel)\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n        const hit = this.context && this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n        let needsRedraw = false\n        if (hit) {\n            event.preventDefault()\n            if (eventEnum === POINTER_EVENT.MOVE) {\n                needsRedraw = this.rootElement.checkHover(sx, sy) || needsRedraw\n            } else if (eventEnum === POINTER_EVENT.DOWN) {\n                needsRedraw = this.rootElement.checkClick(sx, sy) || needsRedraw\n            } else if (eventEnum === POINTER_EVENT.UP) {\n                needsRedraw = this.rootElement.checkRelease(sx, sy) || needsRedraw\n            }\n        } else if (eventEnum === POINTER_EVENT.MOVE) {\n            needsRedraw = this.rootElement.release() || needsRedraw\n        }\n        if (needsRedraw) this.redraw() // TODO performance: only redraw certain buttons/panels?\n        return hit\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        return !this.context || this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n    }\n\n}\n","import { EventBus } from '../event/EventBus'\nimport { JobCreateEvent, JobDeleteEvent } from '../event/WorldEvents'\nimport { Job, JobState } from './model/job/Job'\nimport { GameState } from './model/GameState'\nimport { Vector3 } from 'three'\nimport { Raider } from '../scene/model/Raider'\nimport { WorldManager } from '../scene/WorldManager'\nimport { JOB_SCHEDULE_INTERVAL } from '../main'\n\nexport class Supervisor {\n\n    worldMgr: WorldManager\n    jobs: Job[] = []\n    interval = null\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        EventBus.registerEventListener(JobCreateEvent.eventKey, (event: JobCreateEvent) => {\n            this.jobs.push(event.job)\n        })\n        EventBus.registerEventListener(JobDeleteEvent.eventKey, (event: JobDeleteEvent) => {\n            event.job.cancel()\n        })\n    }\n\n    start() {\n        stop()\n        this.interval = setInterval(this.scheduleJobs.bind(this), JOB_SCHEDULE_INTERVAL)\n    }\n\n    stop() {\n        if (this.interval) clearInterval(this.interval)\n        this.interval = null\n        GameState.raiders.forEach((r) => {\n            if (r.workInterval) clearInterval(r.workInterval)\n            r.workInterval = null\n        })\n        GameState.raidersUndiscovered.forEach((r) => {\n            if (r.workInterval) clearInterval(r.workInterval)\n            r.workInterval = null\n        })\n        GameState.vehicles.forEach((v) => {\n            if (v.workInterval) clearInterval(v.workInterval)\n            v.workInterval = null\n        })\n        GameState.vehiclesUndiscovered.forEach((v) => {\n            if (v.workInterval) clearInterval(v.workInterval)\n            v.workInterval = null\n        })\n    }\n\n    scheduleJobs() {\n        this.jobs = this.jobs.filter((j) => j.jobstate === JobState.OPEN)\n        this.jobs.filter((j) => j.fulfiller.length < 1).forEach((job) => { // TODO sort jobs by priority\n            // find closest, qualified, unemployed raider\n            let closestRaider: Raider = null\n            let minDistance = null\n            GameState.raiders.forEach((raider) => {\n                if (!raider.job && job.isQualified(raider)) {\n                    const dist = new Vector3().copy(job.getPosition()).sub(raider.getPosition()).lengthSq()\n                    if (minDistance === null || dist < minDistance) {\n                        closestRaider = raider\n                        minDistance = dist\n                    }\n                }\n            })\n            if (closestRaider) closestRaider.setJob(job)\n        })\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { WorldManager } from '../scene/WorldManager'\nimport { SelectionLayer } from '../game/layer/SelectionLayer'\nimport { GameLayer } from '../game/layer/GameLayer'\nimport { GuiLayer } from '../game/layer/GuiLayer'\nimport { Supervisor } from '../game/Supervisor'\n\nexport class GameScreen extends BaseScreen {\n\n    onLevelEnd: () => void\n    gameLayer: GameLayer\n    selectionLayer: SelectionLayer\n    guiLayer: GuiLayer\n    worldManager: WorldManager\n    jobSupervisor: Supervisor\n\n    constructor() {\n        super()\n        this.gameLayer = this.addLayer(new GameLayer(), 0)\n        this.selectionLayer = this.addLayer(new SelectionLayer(), 10)\n        this.guiLayer = this.addLayer(new GuiLayer(), 20)\n        this.worldManager = new WorldManager(this.gameLayer.canvas)\n        this.gameLayer.setWorldManager(this.worldManager)\n        this.selectionLayer.setWorldManager(this.worldManager)\n        this.jobSupervisor = new Supervisor(this.worldManager)\n    }\n\n    startLevel(levelName) {\n        this.worldManager.setup(levelName, this)\n        this.show()\n    }\n\n    show() {\n        super.show()\n        this.worldManager.start()\n        this.jobSupervisor.start()\n    }\n\n    hide() {\n        this.worldManager.stop()\n        this.jobSupervisor.stop()\n        super.hide()\n    }\n\n    resize(width: number, height: number) {\n        super.resize(width, height)\n        if (this.worldManager) this.worldManager.resize(width, height)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class RewardScreenButton extends MainMenuBaseItem {\n\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgPressed: HTMLCanvasElement\n    imgDisabled: HTMLCanvasElement\n    disabled: boolean = false\n    visible: boolean = true\n\n    constructor(conf: any) {\n        super()\n        let imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath;\n        [imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath, this.x, this.y] = conf\n        this.imgNormal = ResourceManager.getImage(imgNormalFilepath)\n        this.imgHover = ResourceManager.getImage(imgHoverFilepath)\n        this.imgPressed = ResourceManager.getImage(imgPressedFilepath)\n        this.imgDisabled = ResourceManager.getImage(imgDisabledFilepath)\n        this.width = this.imgNormal.width\n        this.height = this.imgNormal.height\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        if (!this.visible) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled\n        } else if (this.pressed) {\n            img = this.imgPressed\n        } else if (this.hover) {\n            img = this.imgHover\n        }\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from './ScreenLayer'\nimport { RewardCfg } from '../cfg/RewardCfg'\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { RewardScreenButton } from '../menu/RewardScreenButton'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventManager'\n\nexport class RewardScreen extends BaseScreen {\n\n    onAdvance: () => void\n    cfg: RewardCfg = null\n    titleFont: BitmapFont\n    resultsLayer: ScaledLayer\n    descriptionTextLayer: ScaledLayer\n    btnLayer: ScaledLayer\n    resultIndex: number = 0\n    resultLastIndex: number = 0\n    images: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    boxes: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    fonts = {}\n    texts: HTMLCanvasElement[] = []\n    uncoverTimeout = null\n    btnSave: RewardScreenButton\n    btnAdvance: RewardScreenButton\n\n    constructor() {\n        super()\n        this.cfg = ResourceManager.getResource('Reward')\n        this.titleFont = ResourceManager.getBitmapFont(this.cfg.titleFont)\n        const backgroundImg = ResourceManager.getImage(this.cfg.wallpaper)\n        const backgroundLayer = this.addLayer(new ScaledLayer())\n        backgroundLayer.onRedraw = (context) => context.drawImage(backgroundImg, 0, 0)\n        this.cfg.images.forEach((img) => {\n            this.images.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        this.cfg.boxImages.forEach((img) => {\n            this.boxes.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        Object.keys(this.cfg.fonts).forEach((fontKey, index) => {\n            const font = ResourceManager.getBitmapFont(this.cfg.fonts[fontKey])\n            this.fonts[fontKey.toLowerCase()] = font\n            const txt = this.cfg.texts[index]\n            const labelFont = index < 9 ? font : ResourceManager.getBitmapFont(this.cfg.backFont)\n            this.texts.push(labelFont.createTextImage(txt.text))\n        })\n        this.resultsLayer = this.addLayer(new ScaledLayer())\n        this.resultsLayer.handlePointerEvent = ((eventType) => {\n            if (eventType === POINTER_EVENT.UP) {\n                if (this.uncoverTimeout) clearTimeout(this.uncoverTimeout)\n                this.uncoverTimeout = null\n                this.resultIndex = this.resultLastIndex\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n                this.redraw()\n                return true\n            }\n            return false\n        })\n        this.descriptionTextLayer = this.addLayer(new ScaledLayer(), 20)\n        this.btnLayer = this.addLayer(new ScaledLayer(), 50)\n        this.btnSave = new RewardScreenButton(this.cfg.saveButton)\n        this.btnSave.disabled = true\n        this.btnAdvance = new RewardScreenButton(this.cfg.advanceButton)\n        this.btnLayer.handlePointerEvent = ((eventType, event) => {\n            if (eventType === POINTER_EVENT.MOVE) {\n                const [sx, sy] = this.btnLayer.toScaledCoords(event.clientX, event.clientY)\n                this.btnSave.checkHover(sx, sy)\n                this.btnAdvance.checkHover(sx, sy)\n            } else if (eventType === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    this.btnSave.checkSetPressed()\n                    this.btnAdvance.checkSetPressed()\n                }\n            } else if (eventType === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    if (this.btnSave.pressed) {\n                        this.btnSave.setReleased()\n                        // TODO switch to save screen\n                    } else if (this.btnAdvance.pressed) {\n                        this.btnAdvance.setReleased()\n                        this.hide()\n                        this.onAdvance()\n                    }\n                }\n            }\n            if (this.btnSave.needsRedraw || this.btnAdvance.needsRedraw) this.redraw()\n            return false\n        })\n        this.btnLayer.onRedraw = (context) => {\n            this.btnSave.draw(context)\n            this.btnAdvance.draw(context)\n        }\n    }\n\n    show() {\n        this.resultIndex = 0\n        this.btnSave.visible = false\n        this.btnAdvance.visible = false\n        this.uncoverResult()\n        const levelFullNameImg = this.titleFont.createTextImage(GameState.levelFullName)\n        let resultText = this.cfg.quitText\n        this.resultLastIndex = this.images.length - 2\n        if (GameState.resultState === GameResultState.COMPLETE) {\n            resultText = this.cfg.completeText\n            this.resultLastIndex = this.images.length - 1\n        } else if (GameState.resultState === GameResultState.FAILED) {\n            resultText = this.cfg.failedText\n        }\n        const resultValues = []\n        resultValues.push(this.fonts['crystals'].createTextImage(this.percentString(GameState.numCrystal, GameState.neededCrystals)))\n        resultValues.push(this.fonts['ore'].createTextImage(this.percentString(GameState.numOre, GameState.totalOres)))\n        resultValues.push(this.fonts['diggable'].createTextImage(this.percentString(GameState.remainingDiggables, GameState.totalDiggables, true)))\n        resultValues.push(this.fonts['constructions'].createTextImage(GameState.buildings.length.toString()))\n        resultValues.push(this.fonts['caverns'].createTextImage(this.percentString(GameState.discoveredCaverns, GameState.totalCaverns)))\n        resultValues.push(this.fonts['figures'].createTextImage(this.percentString(GameState.raiders.length, GameState.getMaxRaiders())))\n        resultValues.push(this.fonts['rockmonsters'].createTextImage(this.percentString(0))) // TODO show defence report\n        resultValues.push(this.fonts['oxygen'].createTextImage(this.percentString(GameState.airlevel)))\n        resultValues.push(this.fonts['timer'].createTextImage(this.timeString(GameState.gameTimeSeconds)))\n        resultValues.push(this.fonts['score'].createTextImage(this.percentString(GameState.score)))\n        const gameResultTextImg = this.titleFont.createTextImage(resultText)\n        this.resultsLayer.onRedraw = (context) => {\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const img = this.images[c]\n                if (img) context.drawImage(img.img, img.x, img.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const box = this.boxes[c]\n                if (box) context.drawImage(box.img, box.x, box.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const txt = this.cfg.texts[c]\n                const text = resultValues[c]\n                if (text) context.drawImage(text, txt.x - text.width / 2, txt.y)\n            }\n            context.drawImage(levelFullNameImg, this.resultsLayer.fixedWidth / 2 - levelFullNameImg.width / 2, this.cfg.vertSpacing - levelFullNameImg.height / 2)\n            context.drawImage(gameResultTextImg, this.resultsLayer.fixedWidth / 2 - gameResultTextImg.width / 2, this.cfg.vertSpacing + levelFullNameImg.height / 2)\n        }\n        this.descriptionTextLayer.onRedraw = (context) => {\n            const descriptionTextImg = this.texts[this.resultIndex]\n            context.clearRect(0, this.cfg.textPos[1], this.descriptionTextLayer.fixedWidth, this.descriptionTextLayer.fixedHeight - this.cfg.textPos[1])\n            const tx = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[0] : 305\n            const ty = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[1] : 195\n            context.drawImage(descriptionTextImg, tx - descriptionTextImg.width / 2, ty)\n        }\n        super.show()\n    }\n\n    percentString(actual, max = 1, lessIsMore: boolean = false) {\n        if (max === 0) max = 1\n        let value = Math.round(Math.max(Math.min(actual / max, 1), 0) * 100)\n        if (lessIsMore) value = 100 - value\n        return value.toString() + '%'\n    }\n\n    padLeft(value: string, padding = '0', length = 2) {\n        while (value.length < length) value = padding + value\n        return value\n    }\n\n    timeString(seconds: number) {\n        const ss = this.padLeft((seconds % 60).toString())\n        const minutes = Math.floor(seconds / 60)\n        const mm = this.padLeft(((minutes % 60).toString()))\n        const hh = this.padLeft((Math.floor(minutes / 60).toString()))\n        return hh + ':' + mm + ':' + ss\n    }\n\n    uncoverResult() {\n        this.uncoverTimeout = setTimeout(() => {\n            this.uncoverTimeout = null\n            this.resultIndex++\n            if (this.resultIndex < this.resultLastIndex) {\n                this.uncoverResult()\n            } else {\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n            }\n            this.redraw()\n        }, this.cfg.timer * 1000)\n    }\n\n}\n","import { ResourceManager } from './resource/ResourceManager'\nimport { LoadingScreen } from './screen/LoadingScreen'\nimport { MainMenuScreen } from './screen/MainMenuScreen'\nimport { GameScreen } from './screen/GameScreen'\nimport { RewardScreen } from './screen/RewardScreen'\nimport { GameState } from './game/model/GameState'\nimport { WadFileSelectionModal } from '../site/modal/WadFileSelectionModal'\n\n// define constants\n\nexport const JOB_SCHEDULE_INTERVAL = 1000 // milliseconds\nexport const JOB_ACTION_RANGE = 5\nexport const CHECK_SPANW_RAIDER_TIMER = 1000 // milliseconds\nexport const RAIDER_SPEED = 2.0\nexport const MAX_RAIDER_BASE = 12\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10\n\nexport const PANEL_ANIMATION_MULTIPLIER = 3\nexport const HEIGHT_MULTIPLER = 0.1\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640\nexport const SPRITE_RESOLUTION_HEIGHT = 480\nexport const TILESIZE = 40\nexport const NATIVE_FRAMERATE = 30\n\n// setup and link all components\n\nconst loadingScreen = new LoadingScreen()\nconst wadfileSelectModal = new WadFileSelectionModal('game-container')\n\nwadfileSelectModal.onStart = (wad0Url, wad1Url) => {\n    ResourceManager.startLoadingFromUrl(wad0Url, wad1Url)\n}\nResourceManager.onMessage = (msg: string) => {\n    loadingScreen.setLoadingMessage(msg)\n}\nResourceManager.onCacheMissed = () => {\n    wadfileSelectModal.show()\n}\nResourceManager.onInitialLoad = (totalResources: number) => {\n    wadfileSelectModal.hide()\n    loadingScreen.enableGraphicMode(totalResources)\n}\nResourceManager.onAssetLoaded = (assetIndex: number) => {\n    loadingScreen.setLoadingState(assetIndex)\n}\nResourceManager.onLoadDone = () => {\n    // complete setup\n    const mainMenuScreen = new MainMenuScreen()\n    const gameScreen = new GameScreen()\n    const rewardScreen = new RewardScreen()\n\n    mainMenuScreen.onLevelSelected = (levelName) => {\n        try {\n            gameScreen.startLevel(levelName)\n        } catch (e) {\n            console.error('Could not load level: ' + levelName, e)\n            gameScreen.hide()\n            mainMenuScreen.showLevelSelection()\n        }\n    }\n    gameScreen.onLevelEnd = () => {\n        gameScreen.hide()\n        rewardScreen.show()\n    }\n    rewardScreen.onAdvance = () => {\n        GameState.reset()\n        mainMenuScreen.showLevelSelection()\n    }\n\n    // setup complete\n    loadingScreen.hide()\n    mainMenuScreen.showMainMenu()\n    // mainMenuScreen.showLevelSelection()\n    // mainMenuScreen.selectLevel('') // UI Testmode\n    // mainMenuScreen.selectLevel('Level01')\n    // mainMenuScreen.selectLevel('Level05')\n    // mainMenuScreen.selectLevel('Level09')\n    // mainMenuScreen.selectLevel('Level25')\n    // rewardScreen.show();\n}\n\n// start the game engine with loading resources\n\nloadingScreen.show()\nResourceManager.startLoadingFromCache()\n"],"sourceRoot":""}