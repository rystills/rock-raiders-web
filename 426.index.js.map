{"version":3,"sources":["webpack://rock-raiders-web/./site/modal/WadFileSelectionModal.ts","webpack://rock-raiders-web/./src/event/EventKeyEnum.ts","webpack://rock-raiders-web/./src/event/EventBus.ts","webpack://rock-raiders-web/./src/event/WorldEvents.ts","webpack://rock-raiders-web/./src/event/GameEvent.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/params.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/resource/AnimatedMesh.ts","webpack://rock-raiders-web/./src/core/ImageHelper.js","webpack://rock-raiders-web/./src/game/model/anim/AnimationEntityType.ts","webpack://rock-raiders-web/./src/screen/Cursors.ts","webpack://rock-raiders-web/./src/screen/DebugHelper.ts","webpack://rock-raiders-web/./src/game/model/collect/BarrierLocation.ts","webpack://rock-raiders-web/./src/game/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/game/model/map/WallType.ts","webpack://rock-raiders-web/./src/game/model/map/SurfaceGeometry.ts","webpack://rock-raiders-web/./src/game/model/building/BuildPlacementMarkerMesh.ts","webpack://rock-raiders-web/./src/game/model/building/BuildPlacementMarker.ts","webpack://rock-raiders-web/./src/game/SceneManager.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimClip.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimSubObj.ts","webpack://rock-raiders-web/./src/resource/LWSCLoader.ts","webpack://rock-raiders-web/./src/resource/wadworker/WadUtil.ts","webpack://rock-raiders-web/./src/resource/AnimEntityLoader.ts","webpack://rock-raiders-web/./src/resource/wadworker/WorkerMessageType.ts","webpack://rock-raiders-web/./src/core/BitmapFont.ts","webpack://rock-raiders-web/./src/resource/ResourceCache.ts","webpack://rock-raiders-web/./src/resource/wadworker/InitLoadingMessage.ts","webpack://rock-raiders-web/./src/resource/ResourceManager.ts","webpack://rock-raiders-web/./src/resource/LWOLoader.ts","webpack://rock-raiders-web/./src/game/model/EntityType.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityIdentifier.ts","webpack://rock-raiders-web/./src/game/model/activities/BaseActivity.ts","webpack://rock-raiders-web/./src/game/model/job/JobState.ts","webpack://rock-raiders-web/./src/game/model/activities/AnimEntityActivity.ts","webpack://rock-raiders-web/./src/game/model/BaseEntity.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimEntity.ts","webpack://rock-raiders-web/./src/game/model/job/JobType.ts","webpack://rock-raiders-web/./src/game/model/job/Job.ts","webpack://rock-raiders-web/./src/game/model/Selectable.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/game/model/job/CarryJob.ts","webpack://rock-raiders-web/./src/game/model/activities/BuildingActivity.ts","webpack://rock-raiders-web/./src/game/model/PathTarget.ts","webpack://rock-raiders-web/./src/game/model/collect/CarryPathTarget.ts","webpack://rock-raiders-web/./src/game/model/collect/MaterialEntity.ts","webpack://rock-raiders-web/./src/game/model/collect/Crystal.ts","webpack://rock-raiders-web/./src/game/model/collect/Ore.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityList.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTraining.ts","webpack://rock-raiders-web/./src/game/model/MoveState.ts","webpack://rock-raiders-web/./src/game/model/job/GetToolJob.ts","webpack://rock-raiders-web/./src/core/Area.ts","webpack://rock-raiders-web/./src/game/model/activities/RaiderActivity.ts","webpack://rock-raiders-web/./src/game/model/job/TrainJob.ts","webpack://rock-raiders-web/./src/game/Supervisor.ts","webpack://rock-raiders-web/./src/core/NerpRunner.ts","webpack://rock-raiders-web/./src/core/NerpParser.ts","webpack://rock-raiders-web/./src/game/model/job/MoveJob.ts","webpack://rock-raiders-web/./src/event/WorldLocationEvent.ts","webpack://rock-raiders-web/./src/game/model/EntityStep.ts","webpack://rock-raiders-web/./src/game/model/map/TerrainPath.ts","webpack://rock-raiders-web/./src/game/model/MovableEntity.ts","webpack://rock-raiders-web/./src/game/model/FulfillerEntity.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTool.ts","webpack://rock-raiders-web/./src/game/model/raider/Raider.ts","webpack://rock-raiders-web/./src/game/model/building/BuildingEntity.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Barracks.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Docks.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Geodome.ts","webpack://rock-raiders-web/./src/game/model/building/entities/GunStation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/OreRefinery.ts","webpack://rock-raiders-web/./src/game/model/building/entities/PowerStation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/TeleportBig.ts","webpack://rock-raiders-web/./src/game/model/building/entities/TeleportPad.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Toolstation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Upgrade.ts","webpack://rock-raiders-web/./src/game/model/activities/MonsterActivity.ts","webpack://rock-raiders-web/./src/game/model/monster/Monster.ts","webpack://rock-raiders-web/./src/game/model/monster/Bat.ts","webpack://rock-raiders-web/./src/game/model/monster/SmallSpider.ts","webpack://rock-raiders-web/./src/game/ObjectListLoader.ts","webpack://rock-raiders-web/./src/game/model/map/astar.ts","webpack://rock-raiders-web/./src/game/TerrainLoader.ts","webpack://rock-raiders-web/./src/game/model/activities/DynamiteActivity.ts","webpack://rock-raiders-web/./src/game/model/job/surface/CarryDynamiteJob.ts","webpack://rock-raiders-web/./src/game/model/collect/Dynamite.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ClearRubbleJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/DrillJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ReinforceJob.ts","webpack://rock-raiders-web/./src/game/model/map/Surface.ts","webpack://rock-raiders-web/./src/game/model/map/Terrain.ts","webpack://rock-raiders-web/./src/event/EventTypeEnum.ts","webpack://rock-raiders-web/./src/game/WorldManager.ts","webpack://rock-raiders-web/./src/screen/layer/ScreenLayer.ts","webpack://rock-raiders-web/./src/event/GameKeyboardEvent.ts","webpack://rock-raiders-web/./src/event/GamePointerEvent.ts","webpack://rock-raiders-web/./src/event/GameWheelEvent.ts","webpack://rock-raiders-web/./src/event/EventManager.ts","webpack://rock-raiders-web/./src/screen/layer/CursorLayer.ts","webpack://rock-raiders-web/./src/screen/BaseScreen.ts","webpack://rock-raiders-web/./src/game/model/activities/BarrierActivity.ts","webpack://rock-raiders-web/./src/game/model/job/surface/CompletePowerPathJob.ts","webpack://rock-raiders-web/./src/game/model/building/BuildingSite.ts","webpack://rock-raiders-web/./src/game/model/collect/Barrier.ts","webpack://rock-raiders-web/./src/screen/layer/GameLayer.ts","webpack://rock-raiders-web/./src/cfg/BaseConfig.ts","webpack://rock-raiders-web/./src/cfg/BaseButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonCfg.ts","webpack://rock-raiders-web/./src/gui/infodock/ButtonInfoDockCfg.ts","webpack://rock-raiders-web/./src/gui/base/BaseElement.ts","webpack://rock-raiders-web/./src/gui/base/Button.ts","webpack://rock-raiders-web/./src/gui/base/Panel.ts","webpack://rock-raiders-web/./src/gui/radar/RadarPanel.ts","webpack://rock-raiders-web/./src/gui/sidebar/SideBarLabel.ts","webpack://rock-raiders-web/./src/gui/sidebar/PanelCrystalSideBar.ts","webpack://rock-raiders-web/./src/gui/toppanel/ButtonPriorityListCfg.ts","webpack://rock-raiders-web/./src/gui/toppanel/ButtonTopCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonCameraControlCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonInformationCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonsCfg.ts","webpack://rock-raiders-web/./src/cfg/PanelCfg.ts","webpack://rock-raiders-web/./src/cfg/PanelsCfg.ts","webpack://rock-raiders-web/./src/cfg/InfoButtonCfg.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoDockButton.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoDockPanel.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoMessagesEntryConfig.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoMessagesConfig.ts","webpack://rock-raiders-web/./src/gui/infodock/InformationPanel.ts","webpack://rock-raiders-web/./src/cfg/IconPanelBackButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/MenuItemCfg.ts","webpack://rock-raiders-web/./src/gui/main/IconPanelButton.ts","webpack://rock-raiders-web/./src/gui/main/IconSubPanel.ts","webpack://rock-raiders-web/./src/gui/main/BuildingPanel.ts","webpack://rock-raiders-web/./src/gui/main/GetToolPanel.ts","webpack://rock-raiders-web/./src/gui/main/IconPanelButtonLabel.ts","webpack://rock-raiders-web/./src/gui/main/LargeVehiclePanel.ts","webpack://rock-raiders-web/./src/gui/main/IconPanelToggleButton.ts","webpack://rock-raiders-web/./src/gui/main/SelectBasePanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectBuildingPanel.ts","webpack://rock-raiders-web/./src/game/model/job/CarryFenceJob.ts","webpack://rock-raiders-web/./src/game/model/collect/ElectricFence.ts","webpack://rock-raiders-web/./src/gui/main/SelectFloorPanel.ts","webpack://rock-raiders-web/./src/game/model/job/EatJob.ts","webpack://rock-raiders-web/./src/gui/main/SelectRaiderPanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectRubblePanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectVehiclePanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectWallPanel.ts","webpack://rock-raiders-web/./src/gui/main/SmallVehiclePanel.ts","webpack://rock-raiders-web/./src/gui/main/TrainRaiderPanel.ts","webpack://rock-raiders-web/./src/gui/main/MainPanel.ts","webpack://rock-raiders-web/./src/gui/messagepanel/TextInfoMessage.ts","webpack://rock-raiders-web/./src/gui/messagepanel/MessagePanel.ts","webpack://rock-raiders-web/./src/gui/messagepanel/TextInfoMessageEntryConfig.ts","webpack://rock-raiders-web/./src/gui/messagepanel/TextInfoMessageConfig.ts","webpack://rock-raiders-web/./src/gui/toppanel/PriorityButtonsConfig.ts","webpack://rock-raiders-web/./src/gui/toppanel/PriorityListPanel.ts","webpack://rock-raiders-web/./src/gui/toppanel/PriorityPositionsEntry.ts","webpack://rock-raiders-web/./src/gui/base/ToggleButton.ts","webpack://rock-raiders-web/./src/gui/toppanel/TopPanel.ts","webpack://rock-raiders-web/./src/screen/layer/GuiBaseLayer.ts","webpack://rock-raiders-web/./src/screen/layer/GuiMainLayer.ts","webpack://rock-raiders-web/./src/core/Rect.ts","webpack://rock-raiders-web/./src/cfg/DialogCfg.ts","webpack://rock-raiders-web/./src/gui/briefing/BriefingPanelCfg.ts","webpack://rock-raiders-web/./src/gui/briefing/BriefingPanel.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuCycleItem.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuLabelItem.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuSliderItem.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuLayer.ts","webpack://rock-raiders-web/./src/gui/overlay/MenuBasePanel.ts","webpack://rock-raiders-web/./src/gui/overlay/OptionsPanel.ts","webpack://rock-raiders-web/./src/gui/overlay/PausePanel.ts","webpack://rock-raiders-web/./src/screen/layer/OverlayLayer.ts","webpack://rock-raiders-web/./src/screen/layer/SelectionLayer.ts","webpack://rock-raiders-web/./src/screen/GameScreen.ts","webpack://rock-raiders-web/./src/screen/LoadingScreen.ts","webpack://rock-raiders-web/./src/menu/MainMenuBaseItem.ts","webpack://rock-raiders-web/./src/menu/MainMenuIconButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLabelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLayer.ts","webpack://rock-raiders-web/./src/menu/MainMenuLevelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuPanel.ts","webpack://rock-raiders-web/./src/menu/MainMenuWindow.ts","webpack://rock-raiders-web/./src/menu/LevelSelectLayer.ts","webpack://rock-raiders-web/./src/screen/MainMenuScreen.ts","webpack://rock-raiders-web/./src/menu/RewardScreenButton.ts","webpack://rock-raiders-web/./src/screen/RewardScreen.ts","webpack://rock-raiders-web/./src/main.ts"],"names":["parentId","onStart","rootElement","document","getElementById","appendChild","createElement","classList","add","tabIndex","setAttribute","modalDialog","modalContent","modalHeader","modalTitle","innerText","id","modalBody","navTabList","navFileBtn","WadFileSelectionModal","appendNavButton","navUrlBtn","navTabContent","this","appendNavFileTab","appendNavUrlTab","modal","backdrop","keyboard","parent","active","controlTarget","navBtn","type","String","labelledBy","navFileTab","appendNavTab","wad0File","appendWadFileGroup","wad1File","btnStartFile","addEventListener","disabled","wad0FileUrl","URL","createObjectURL","files","wad1FileUrl","filename","wadFileGroup","wadFileLabel","innerHTML","wadFileInput","required","navUrlTab","urlHint","wad0Url","appendWadUrlGroup","wad1Url","btnStartUrl","value","navTab","example","wadUrlGroup","wadUrlLabel","wadUrlInput","show","hide","EventKey","publishEvent","event","blockedEvents","includes","eventKey","isLocal","console","log","push","getListener","forEach","callback","remove","registerEventListener","eventListener","getOrUpdate","Map","GameEvent","LocalEvent","surface","SELECTED_SURFACE","SelectionEvent","building","SELECTED_BUILDING","raider","SELECTED_RAIDER","DESELECTED_ENTITY","SURFACE_CHANGED","AIR_LEVEL_CHANGED","CANCEL_BUILD_MODE","cursor","CHANGE_CURSOR","entityKey","job","WorldEvent","JOB_CREATE","JobEvent","JOB_DELETE","RAIDER_REQUESTED","entityType","MATERIAL_AMOUNT_CHANGED","entity","ENTITY_ADDED","superType","ENTITY_REMOVED","CAVERN_DISCOVERED","ORE_FOUND","BUILDING_UPGRADED","training","RAIDER_TRAINED","HEIGHT_MULTIPLER","TILESIZE","getFilename","url","strUrl","toString","replace","startsWith","substring","lastInd","lastIndexOf","iGet","obj","keys","keyname","Object","filter","key","toLowerCase","map","decodeString","data","TextDecoder","decode","decodeFilepath","getRandomInclusive","min","max","Math","ceil","floor","random","getRandom","getRandomSign","clearTimeoutSafe","timeout","clearTimeout","clearIntervalSafe","interval","clearInterval","Array","prototype","element","index","indexOf","splice","count","counter","e","updateCallback","get","undefined","set","mesh","textureSequences","dispose","s","geometry","isArray","material","mat","createContext","width","height","error","result","y","x","fillStyle","fillRect","createDummyContext","canvas","context","getContext","createDummyImgData","ImageData","px","py","setPixel","imgData","r","g","b","a","n","getPixel","Cursors","carryNullName","depositNullName","toolNullName","mediumPoly","highPoly","fPPoly","activities","Stats","stats","setMode","domElement","style","position","left","top","body","visibility","renderStart","begin","renderDone","end","location","surfaceCenter","heading","clone","sub","angle","PI","WALL_TYPE","options","shaping","matIndex","selectable","drillable","drillableHard","explodable","reinforcable","Pointer_Standard","assign","getByNum","typeNum","SurfaceType","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","GROUND","name","Pointer_SurfaceType_Immovable","Pointer_SurfaceType_Hard","Pointer_SurfaceType_Medium","Pointer_SurfaceType_Loose","Pointer_SurfaceType_OreSeam","Pointer_SurfaceType_CrystalSeam","Pointer_SurfaceType_RechargeSeam","POWER_PATH","POWER_PATH_SITE","create","wallType","topLeftVertex","bottomRightVertex","topRightVertex","bottomLeftVertex","topLeftHeight","topRightHeight","bottomRightHeight","bottomLeftHeight","uvOffset","INVERTED_CORNER","WALL","WEIRD_CREVICE","Boolean","uv","bufferVertices","bufferNormals","addFaceAndNormals","c","normal","subVectors","cross","normalize","uvIndexes","bufferVertexUvs","i","bufferGeometry","BufferAttribute","Float32Array","copyVector3sArray","copyVector2sArray","standardColor","BuildPlacementMarkerMesh","shininess","transparent","opacity","color","visible","updateState","primaryPosition","multiplyScalar","applyAxisAngle","markAsValid","isValid","setHex","SurfaceGeometry","group","markers","buildingMarkerPrimary","buildingMarkerSecondary","powerPathMarkerPrimary","powerPathMarkerSecondary","waterPathMarker","sdx","sdz","lastCheck","visibleSurfaces","primarySurface","secondarySurface","waterSurface","BuildPlacementMarker","buildingMarkerColor","pathMarkerColor","waterMarkerColor","addMarker","marker","update","terrain","worldPosition","GameState","buildModeSelection","updateAllMarker","hideAllMarker","buildMode","copy","worldMgr","getFloorPosition","sdxv","sdzv","z","abs","sign","atan2","secondaryBuildingPart","primaryPowerPath","secondaryPowerPath","waterPathSurface","getSurfaceFromWorld","every","surfaceType","some","neighbors","m","getBarrierLocations","barrierLocations","center","getCenterWorld2D","barrierOffset","secondary","dx","dy","BarrierLocation","maxFps","debugHelper","DebugHelper","renderer","antialias","setClearColor","camera","controls","mouseButtons","LEFT","MIDDLE","RIGHT","buildMarker","EventBus","selectEntitiesByRay","rx","ry","raycaster","setFromCamera","intersects","intersectObjects","raiders","pickSphere","length","buildings","floorGroup","children","selected","userData","object","hasOwnProperty","selectEntities","selectEntitiesInFrustum","r1x","r1y","r2x","r2y","startPoint","endPoint","Number","EPSILON","updateProjectionMatrix","updateMatrixWorld","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","setFromMatrixPosition","matrixWorld","unproject","vectemp1","vectemp2","vectemp3","deep","MAX_VALUE","frustum","planes","setFromCoplanarPoints","entities","containsPoint","getSelectionCenter","setupScene","ambientColor","scene","ambientLight","cursorTorchlight","distance","startScene","renderInterval","setInterval","animRequest","requestAnimationFrame","render","disposeScene","cancelAnimationFrame","SceneManager","meshRegistry","registerMesh","animatedMesh","looping","transcoef","firstFrame","lastFrame","framesPerSecond","bodies","degToRad","relPos","relRot","relScale","parentObjInd","model","radVec","degX","degY","degZ","setFrameAndFollowing","animationFrameIndex","infos","setOpacityAndFollowing","path","verbose","animationClip","AnimClip","lines","lineIndex","parse","content","split","l","trim","sceneFileVersion","parseInt","warn","line","parseFrameBlock","parseObjectBlock","parseLine","frameStep","subObj","AnimSubObj","slice","lwoBuffer","ResourceManager","getResource","LWOLoader","lenInfos","lenFrames","numOfInformationChannels","numOfKeyframes","frameNum","WorkerMessageType","loadModels","root","getPath","AnimationEntityType","polyname","polykey","activity","act","file","isLws","animation","LWSCLoader","fontImageData","cols","rows","letters","chars","maxCharWidth","getActualCharacterWidth","rowPixelIndex","colPixelIndex","charHeight","extractData","actualWidth","startX","startY","alpha","p","createTextImage","text","maxWidth","autoCenter","determineRows","row","rowX","round","rowY","letterX","letterImgData","charAt","img","putImageData","spaceWidth","rowText","rowWidth","word","wordWidth","letter","letterImg","cfg","configuration","resourceName","lName","resourceByName","getImageData","imageName","getImage","getImageOrNull","getBitmapFont","fontCache","BitmapFont","getDefaultFont","startLoadingFromCache","startLoading","startLoadingFromUrl","InitLoadingMessage","msg","worker","onmessage","ASSET","assetName","assetObj","alphaIndexMatch","match","onAssetLoaded","MSG","onMessage","CFG","onInitialLoad","totalResources","CACHE_MISS","onCacheMissed","DONE","loadingTimeSeconds","onLoadDone","postMessage","filterTextureSequenceNames","basename","lBasename","res","getTexture","textureName","lTextureName","lSharedTextureName","texture","needsUpdate","getAnimationEntityType","aeFilename","cfgRoot","AnimEntityLoader","Worker","ResourceCache","SURF_VTRN","getVector3AtOffset","view","offset","vector","getFloat32","EntityType","EntitySuperType","PriorityIdentifier","materials","vertices","indices","uvs","sequenceIntervals","parsePoints","chunkOffset","chunkSize","numVertices","vertexIndex","vertexOffset","parseSurfaceNames","buffer","surfaceNames","Uint8Array","new_material","side","parsePolygons","totalNumIndices","numIndices","getInt16","materialIndex","addGroup","currentIndex","Uint16Array","faceIndices","Int16Array","COUNTER_CLOCKWISE","parseSurface","getUint8","materialName","textureFlags","textureSize","textureCenter","subchunkOffset","subchunkType","getInt32","subchunkSize","colorArray","fromArray","join","flags","getUint16","blending","depthWrite","edgeTransparencyThreshold","luminosity","emissiveIntensity","diffuse","specular","reflection","reflectivity","transparency","vLuminosity","vDiffuse","vSpecular","toArray","textureTypeName","textureValue","textureColorArray","textureFilepath","sequenceTexture","endsWith","textureFilename","size","XAXIS_BIT","groups","start","uvIndex","u","v","planarMapUVS","DataView","getUint32","fileSize","byteLength","ID4_SIZE","chunkType","setIndex","computeVertexNormals","AnimatedMesh","magic","JobState","activityKey","Stand","AnimEntityActivity","BaseActivity","level","getPosition","getPosition2D","getHeading","rotation","onDiscover","removeFromScene","sceneManager","animationEntityType","poly","animationTimeout","selectionFrame","carryJoint","depositJoint","getToolJoint","radiusSq","beamUp","EntityDeselected","changeActivity","AnimEntity","moveUp","setTimeout","onAnimationDone","durationTimeMs","getDefaultActivity","lActivityKey","anim","bind","carries","polyModel","lBodyName","polyPart","parentInd","sphere","setFromObject","getBoundingSphere","radius","animate","frameIndex","scale","nextFrame","standardDurationTimeMs","timeoutTimeMs","createPickSphere","pickSphereDiameter","PickSphere","pickSphereRadius","pickSphereCenter","getPickSphereCenter","createSelectionFrame","getBoundingBoxCenter","getCenter","applyMatrix4","makeScale","selectionFrameTextureSize","ctx","strength","selectionFrameTexture","selectionMaterial","depthTest","selectionFrameSize","BaseEntity","JobType","fulfiller","jobstate","INCOMPLETE","unassign","cancel","CANCELED","stopJob","getRequiredTool","getRequiredTraining","isReadyToComplete","onJobComplete","COMPLETE","setActualWorkplace","target","getCarryItem","getWorkActivity","getWorkDuration","Job","SelectionType","GameResultState","item","CARRY","actualTarget","getWorkplaces","getCarryTargets","getPriorityIdentifier","setTargetSite","site","getDropAction","canGatherItem","targetLocation","f","lookAt","dropItem","gatherItem","PublicJob","Teleport","BuildingActivity","Deposit","Explode","Unpowered","isInArea","addItem","POWER_STATION","ORE_REFINERY","CarryPathTarget","addItemToStorage","CRYSTAL","numCrystal","MaterialAmountChanged","ORE","numOre","PathTarget","MATERIAL","targetBuildingTypes","priorityIdentifier","targets","targetSite","TOOLSTATION","updateTargets","resetTarget","sites","buildingSites","needs","getRandomDropPosition","getBuildingsByType","getTargetBuildingTypes","getDropPosition2D","t","complete","isPowered","materialsUndiscovered","JobCreateEvent","createCarryJob","unAssign","CarryJob","onAddToSite","resource2","mesh2","resource","emissive","aiPriorityCrystal","PowerCrystal","MaterialEntity","aiPriorityOre","Ore","levelDefault","current","setList","priorities","reset","toggle","enabled","upOne","tmp","entry","PriorityEntry","pushToTop","getPriority","priority","j","levelPriorityEntry","DRIVER","RaiderTraining","ENGINEER","GEOLOGIST","PILOT","SAILOR","DEMOLITION","MoveState","resultState","RUNNING","levelFullName","numBrick","usedCrystals","neededCrystals","airLevel","selectedEntities","selectionType","buildingsUndiscovered","raidersUndiscovered","requestedRaiders","spiders","spidersBySurface","bats","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","discoveredCaverns","levelStartTime","levelStopTime","rewardConfig","priorityList","PriorityList","oxygenRate","inBeam","buildingTypes","bt","getClosestBuildingByType","targetBuildings","closest","minDist","bPos","getDropPosition","dist","distanceToSquared","hasOneBuildingOf","hasBuildingWithUpgrades","upgrades","getTrainingSites","TrainDynamite","previouslySelected","stillSelected","deselect","selectionEvents","freshlySelected","selectionEvent","select","len","GROUP","getSelectionType","getMaxRaiders","BARRACKS","discoverSurface","minX","minZ","maxX","maxZ","discoverEntities","undiscovered","discovered","pos","dropMaterial","quantity","Crystal","quota","importance","scoreCrystals","crystals","Infinity","scoreTimer","gameTimeSeconds","timer","scoreCaverns","caverns","scoreConstructions","constructions","scoreOxygen","oxygen","scoreFigures","figures","SURFACE","BUILDING","RAIDER","getNearbySpiders","currentSurface","nearbySpiders","getSurface","tool","GET_TOOL","addTool","x0","y0","x1","y1","Route","RaiderActivity","RunPanic","Drill","Walk","Reinforce","Reverse","TurnLeft","TurnRight","CantDo","Collect","Clear","Carry","CarryTurnLeft","CarryTurnRight","CarryStand","Dynamite","Place","TeleportIn","Repair","rest","routeRubble","CarryRubble","Eat","FireLaser","GetUp","ThrownByRockMonster","Slip","Train","Recharge","Waiting1","Waiting2","Waiting3","Waiting4","Hoverboard","Standhoverboard","HitLefthoverboard","HitRighthoverboard","HitFronthoverboard","HitBackhoverboard","SMALLTRUCK","StandSMALLTRUCK","HitLeftSMALLTRUCK","HitRightSMALLTRUCK","HitFrontSMALLTRUCK","HitBackSMALLTRUCK","SMALLheli","StandSMALLheli","HitLeftSMALLheli","HitRightSMALLheli","HitFrontSMALLheli","HitBackSMALLheli","SMALLCAT","StandSMALLCAT","HitLeftSMALLCAT","HitRightSMALLCAT","HitFrontSMALLCAT","HitBackSMALLCAT","SMALLMLP","StandSMALLMLP","HitLeftSMALLMLP","HitRightSMALLMLP","HitFrontSMALLMLP","HitBackSMALLMLP","LARGECAT","StandLARGECAT","HitLeftLARGECAT","HitRightLARGECAT","HitFrontLARGECAT","HitBackLARGECAT","SMALLDIGGER","StandSMALLDIGGER","TRAIN","workplaces","TrainingPathTarget","addTraining","EntityTrained","targetArea","Area","jobs","assignInterval","checkRubbleInterval","stop","assignJobs","checkUnclearedRubble","resetWorkInterval","availableJobs","sort","right","unemployedRaider","closestRaider","closestRaiderIndex","minDistance","closestToolRaider","closestToolRaiderIndex","minToolDistance","closestToolstationPosition","closestNeededTool","closestTrainingRaider","closestTrainingRaiderIndex","minTrainingDistance","closestTrainingArea","closestNeededTraining","requiredTool","hasRequiredTool","hasTool","raiderTraining","hasTraining","raiderPosition","pathToJob","findPathToTarget","lengthSq","pathToTraining","getSurfaceFromWorld2D","targetPosition","pathToToolstation","setJob","GetToolJob","TrainJob","startSurface","rad","getSurfaceOrNull","hasRubble","clearRubbleJob","createClearRubbleJob","debug","onLevelComplete","nerpInterval","registers","fill","timers","scriptLines","statements","macrosByName","labelsByName","halted","programCounter","messages","messagePermit","startExecution","that","execute","pauseExecution","checkRegister","register","num","isNaN","Error","checkRegisterValue","getR","setR","addR","setTimer","Date","getTime","getTimer","setLevelCompleted","setLevelFail","FAILED","setTutorialFlags","setMessagePermit","messagesAllowed","setBuildingsUpgradeLevel","typeName","setToolStoreLevel","setTeleportPadLevel","TELEPORT_PAD","setPowerStationLevel","setBarracksLevel","getToolStoresBuilt","getMinifiguresOnLevel","getCrystalsCurrentlyStored","getObjectiveSwitch","setMessageTimerValues","arg1","arg2","arg3","getMessageTimer","cameraUnlock","setMessage","messageNumber","arrowDisabled","txt","setCameraGotoTutorial","getTutorialBlockIsGround","getTutorialBlockIsPath","getUnitAtBlock","getOxygenLevel","getObjectiveShowing","addPoweredCrystals","disallowAll","getPoweredPowerStationsBuilt","getPoweredBarracksBuilt","getRecordObjectAtTutorial","getHiddenObjectsFound","getLevel1PowerStationsBuilt","callMethod","methodName","methodArgs","setRegisterMatch","addRegisterMatch","getRegisterMatch","setTimerMatch","getTimerMatch","lMethodName","memberName","apply","conditional","conditionResult","executeStatement","expression","invoke","argValues","args","comparator","jump","statement","label","nerpScript","nerpRunner","NerpRunner","includeName","includedRunner","NerpParser","concat","firstLine","macroLines","mLine","append","macroLine","macroCall","replaceMacros","labelMatch","preProcess","labelName","macro","RegExp","number","opSplit","brackets","spaceSplit","jumpMatch","MOVE","LOCATION_DEATH","WorldLocationEvent","LOCATION_MONSTER","LOCATION_CRYSTAL_FOUND","LOCATION_UNDER_ATTACK","LOCATION_LANDSLIDE","LOCATION_POWER_DRAIN","LOCATION_SLUG_EMERGE","LOCATION_RAIDER_DISCOVERED","vec","targetReached","locations","addLocation","currentPath","floorOffset","getSpeed","RouteSpeed","isOnPath","PathCoef","moveToClosestTarget","equals","paths","TARGET_UNREACHABLE","nextLocation","firstLocation","step","determineStep","TARGET_REACHED","getRouteActivity","MOVED","TerrainPath","getEntityStep","stepLengthSq","entitySpeed","shift","JOB_ACTION_RANGE","setLength","targetWorld","EntityStep","isOnRubble","isPath","workInterval","followUpJob","jobWorkplaces","work","getWorldPosition","pickupItem","MovableEntity","DRILL","RaiderTool","HAMMER","SHOVEL","SPANNER","FREEZERGUN","LASER","PUSHERGUN","BIRDSCARER","tools","trainings","slipped","Pilot","findPath","EntityAddedEvent","RaiderDiscoveredEvent","RaiderSelected","isDriving","spider","slip","onDeath","moveToClosestWorkplace","drillTimeMs","getDrillTime","focusPoint","getCenterWorld","seamLevel","rotateAround","crystal","placeMaterial","CrystalFoundEvent","OreFoundEvent","completeJob","workActivity","HardDrillTime","LooseDrillTime","SoilDrillTime","SeamDrillTime","has","FulfillerEntity","blocksPathSurface","powerSwitch","spawning","primaryPathSurface","secondaryPathSurface","upgradeCostOre","upgradeCostBrick","crystalsInUse","turnOnPower","BuildingSelected","worldPos","SelfPowered","PowerBuilding","hasMaxLevel","Levels","upgrade","canUpgrade","BRICK","BuildingUpgraded","CostOre","getRandomPosition","CostCrystal","surfaces","setBuilding","updateTexture","spawnMaterials","hasPower","setHasPower","turnOffPower","addToScene","worldX","worldZ","radHeading","disableTeleportIn","rotateOnAxis","secondaryOffset","pathOffset","pathSurface","GEODOME","onAddToScene","resetGraphWalk","Barracks","BuildingEntity","DOCKS","Docks","Geodome","GUNSTATION","GunStation","OreRefinery","Powerstation","TELEPORT_BIG","TeleportBIG","TeleportPad","Toolstation","UPGRADE","Upgrade","MonsterActivity","MONSTER","onLevelEnd","moveTimeout","BAT","Bat","startRandomMove","onMove","bat","findTarget","currentCenter","targetX","targetZ","getSurfaceFromWorldXZ","Monster","SMALL_SPIDER","SmallSpider","startMoving","prevSurface","nextSurface","loadObjectList","objectListConf","disableStartTeleport","values","olObject","lTypeName","xPos","yPos","terrainY","getTerrainHeight","buildingType","setTorchPosition","Raider","createBuildingByName","typename","PowerStation","TeleportBig","pathTo","node","curr","unshift","PathMap","PredugMap","astar","search","graph","cleanDirty","heuristic","heuristics","manhattan","openHeap","BinaryHeap","closestNode","h","markDirty","currentNode","pop","closed","il","neighbor","isWall","gScore","getCost","beenVisited","visited","rescoreElement","pos0","pos1","diagonal","D2","sqrt","d1","d2","cleanNode","gridIn","nodes","grid","dirtyNodes","GridNode","init","ret","graphString","rowDebug","weight","fromNeighbor","scoreFunction","sinkDown","bubbleUp","parentN","elemScore","child2N","child1N","swap","child1Score","child1","child2","Normal","DynamiteActivity","TickDown","dynamite","ignite","DYNAMITE","targetSurface","aiPriorityDestruction","isExplodable","getDigPositions","collapse","CarryDynamiteJob","CLEAR_RUBBLE","rubblePositions","reduceRubble","aiPriorityClearing","REINFORCE","reinforce","aiPriorityReinforce","heightOffset","containedOres","containedCrystals","reinforced","drillJob","reinforceJob","dynamiteJob","surfaceRotation","fallinTimeout","fallinGrp","needsMeshUpdate","topLeftHeightOffset","topRightHeightOffset","bottomLeftHeightOffset","bottomRightHeightOffset","fence","discoverNeighbors","foundCave","surf","cancelJobs","CavernDiscovered","dropContainedOre","isSupported","updateSurfaceMeshes","updateWorldMatrix","dropAmount","Surface","safeRemoveJob","updateJobColor","JobDeleteEvent","SurfaceChanged","surfLeft","surfTopLeft","surfTop","surfTopRight","surfRight","surfBottomRight","surfBottom","surfBottomLeft","isHighGround","surf1","surf2","surf3","updateMesh","force","updateGeometry","cancelReinforceJobs","updateGraphWalk","getGraphWalkWeight","graphWalk","textureSet","texturebasename","updatePowerPathTexture","CORNER","accessMaterials","bottom","pathSum","avgHeight","sum","cnt","SurfaceSelectedEvent","isWalkable","isDrillable","isDrillableHard","isReinforcable","isDigable","digPosition","setFallinLevel","fallinLevel","originPos","targetPos","findFallInOrigin","findFallInTarget","scheduleFallin","targetY","createFallin","fallinPosition","LandslideEvent","makeRubble","getFloorHeight","sx","sy","dy0","interpolate","dy1","containedOre","state","recursive","canPlaceFence","createDrillJob","DrillJob","createReinforceJob","ReinforceJob","createDynamiteJob","targetBuilding","ClearRubbleJob","roofGroup","cachedPaths","forEachSurface","clear","gridStartX","gridStartY","gridEndX","gridEndY","cacheIdentifier","cachedPath","searchPath","startNode","endNode","worldPath","gridNodeToWorldPos","gridNode","leftSurface","topSurface","rightSurface","bottomSurface","leftSurface2","topSurface2","rightSurface2","bottomSurface2","each","loadTerrain","levelConf","tileSize","blockSize","Terrain","themeName","terrainMap","pathMap","surfaceMap","predugMap","cryOreMap","fallinMap","erodeMap","surfaceTypeNum","predugLevel","CAVERN_EXPOSED","SLUG_HOLE_EXPOSED","SLUG_HOLE_HIDDEN","CAVERN_HIDDEN","pathMapLevel","NONE","RUBBLE","currentCryOre","weights","col","w","Graph","MOUSE_BUTTON","POINTER_EVENT","KEY_EVENT","spawnRaiderInterval","oxygenUpdateInterval","checkSpawnRaiders","updateOxygen","setup","gameScreen","fullName","reward","ambientRgb","maxAmbRgb","normalizedRgb","TerrainLoader","oListFile","ObjectListLoader","nerpFile","nerpMessageFile","now","resize","setSize","getTerrainIntersectionPoint","point","world","floorY","intersect","intersectObject","spawnBuildings","station","RaiderRequested","walkOutPos","MoveJob","applyEuler","diff","OxygenCoef","reduce","AirLevelChanged","withContext","background","setZIndex","zIndex","compareZ","layerA","layerB","aIndex","bIndex","redraw","onRedraw","isActive","toCanvasCoords","windowX","windowY","clientRect","getBoundingClientRect","handlePointerEvent","handleKeyEvent","handleWheelEvent","fixedWidth","fixedHeight","updateScale","scaleX","scaleY","toScaledCoords","cx","cy","ScreenLayer","eventEnum","bubbles","clientX","clientY","pointerType","button","ctrlKey","metaKey","shiftKey","deltaX","deltaY","deltaZ","screen","gameCanvasContainer","isInRect","preventDefault","DOWN","UP","eventType","nonBubblingClone","GamePointerEvent","layers","GameKeyboardEvent","GameWheelEvent","changeCursor","pointersCfg","curUrl","revokeObjectURL","cursorFilename","curImg","toDataURL","ratio","focus","eventMgr","EventManager","window","onWindowResize","cursorLayer","addLayer","CursorLayer","layer","offsetWidth","maxHeight","offsetHeight","idealHeight","firstLayer","rect","Short","Expand","Long","placedItems","COMPLETE_POWER_PATH","placed","aiPriorityConstruction","neededByType","assignedByType","onSiteByType","needed","checkComplete","neededType","BARRIER","BarrierActivity","itemsOnSite","CompletePowerPathJob","rightDown","lastCursor","ChangeCursor","setWorldManager","intersectionPoint","getTerrainPositionFromEvent","updateCursor","MAIN","neededOre","BuildingSite","closestToolstation","Barrier","CancelBuildMode","SECONDARY","assignSurfaceJob","dispatchEvent","PointerEvent","determineCursor","Pointer_Selected","WheelEvent","setFromCfg","config","cfgObj","cfgKey","lCfgKeyName","objKey","assignValue","cfgValue","currentValue","currentIsArray","parsedValue","parseValue","parsedIsArray","buttonType","normalFile","highlightFile","pressedFile","disabledFile","relX","relY","tooltip","BaseButtonCfg","panelButtonInfoDockGoto","panelButtonInfoDockClose","BaseConfig","ButtonCfg","hidden","hover","pressed","addChild","child","updatePosition","drawHover","drawTooltip","onClick","isInactive","checkHover","inRect","stateChanged","checkClick","checkRelease","release","notifyRedraw","btnCfg","imgNormal","imgHover","imgPressed","imgDisabled","drawImage","BaseElement","panelCfg","xOut","yOut","xIn","yIn","movedIn","setMovedIn","onDone","toggleState","updateAnimation","speed","diffX","diffY","panelFillCfg","panelOverlayCfg","buttonsCfg","Panel","overlay","btnToggle","Button","panelButtonRadarToggle","btnMap","panelButtonRadarMapView","btnTagged","panelButtonRadarTaggedObjectView","panelButtonRadarZoomIn","panelButtonRadarZoomOut","textAlign","font","fillText","labelOre","SideBarLabel","panelButtonCrystalSideBarOre","totalOre","labelCrystal","panelButtonCrystalSideBarCrystals","imgNoCrystal","imgSmallCrystal","imgUsedCrystal","imgOre","updateQuantities","curX","curY","imgCrystal","panelButtonPriorityListDisable","panelButtonPriorityListUpOne","panelButtonPriorityListClose","panelButtonPriorityListReset","panelButtonTopPanelCallToArms","panelButtonTopPanelOptions","panelButtonTopPanelPriorities","panelButtonCameraControlZoomIn","panelButtonCameraControlZoomOut","panelButtonCameraControlCycleBuildings","panelButtonCameraControlRotate","panelButtonInformationToggle","panelButtonInformationFunction","panelRadar","panelCrystalSideBar","panelTopPanel","panelInformation","panelPriorityList","panelCameraControl","panelInfoDock","panelEncyclopedia","btnCfgValue","arr","ButtonRadarCfg","ButtonCrystalSideBarCfg","ButtonTopCfg","ButtonInformationCfg","ButtonPriorityListCfg","ButtonCameraControlCfg","ButtonInfoDockCfg","panelRadarFill","panelRadarOverlay","panelMessages","panelMessagesSide","PanelCfg","buttonImageFilename","infoMessagesEntryConfig","InfoButtonCfg","animationSpeedX","animationSpeedY","message","buttonClicked","showButton","slideToTarget","Promise","resolve","infoMessagesConfig","informationPanel","stackButtons","gotoLatestMessage","dropLatestMessage","InfoDockButton","infoGenericDeath","infoGenericMonster","infoCrystalFound","infoUnderAttack","infoLandslide","infoPowerDrain","infoSlugEmerge","infoFoundMinifigure","btn","slideStackIntoPosition","then","slideInButton","prev","cur","pushFirst","setText","promises","all","sfx","timing","flag","InfoMessagesEntryConfig","textImage","tooltipSfx","tooltipDisabled","tooltipDisabledSfx","hotkey","menuItemCfg","itemKey","parentWidth","menuIndex","isDisabled","autoRedraw","targetState","strokeStyle","lineWidth","strokeRect","numOfItems","onBackPanel","backBtn","iconPanelButtons","backBtnCfg","IconPanelBackButtonCfg","frameImgCfg","imgName","imgNameWoBackName","addMenuItem","menuItemGroup","MenuItemCfg","menuItem","IconPanelButton","addBuildMenuItem","factory","IconSubPanel","addGetToolItem","selectedRaiders","menuItemOffCfg","menuItemOnCfg","imgOnNormal","imgOnHover","imgOnPressed","imgOnDisabled","onToggleStateChange","powerSwitchItem","IconPanelToggleButton","upgradeItem","deleteBuildingItem","SelectBasePanel","ELECTRIC_FENCE","CarryFenceJob","pathItem","selectedSurface","removeItem","placeFenceItem","toolstation","ElectricFence","EAT","feedItem","EatJob","getToolItem","trainItem","deleteRaiderItem","clearRubbleItem","itemDrill","addWallMenuItem","itemReinforce","itemDynamite","itemDeselect","trainDynamite","subPanels","mainPanel","addSubPanel","buildingPanel","BuildingPanel","smallVehiclePanel","SmallVehiclePanel","largeVehiclePanel","LargeVehiclePanel","selectWallPanel","SelectWallPanel","selectFloorPanel","SelectFloorPanel","selectRubblePanel","SelectRubblePanel","selectBuildingPanel","SelectBuildingPanel","selectRaiderPanel","SelectRaiderPanel","trainRaiderPanel","TrainRaiderPanel","getToolPanel","GetToolPanel","selectVehiclePanel","SelectVehiclePanel","teleportRaider","IconPanelButtonLabel","buildingItem","smallVehicleItem","largeVehicleItem","onSelectedSurfaceChange","selectSubPanel","SELECTED_VEHICLE","childPanel","targetPanel","subPanel","infoMessageEntryConfig","infoImage","imageFilename","textInfoMessageConfig","imgAir","currentMessage","messageTimeout","crystalFound","TextInfoMessage","textCrystalFound","msgSpaceToContinue","textSpaceToContinue","cavernDiscovered","textCavernDiscovered","oreFound","textOreFound","msgAirSupplyLow","textAirSupplyLow","msgAirSupplyRunningOut","textAirSupplyRunningOut","msgGameCompleted","textGameCompleted","msgManTrained","textManTrained","msgUnitUpgraded","textUnitUpgraded","textInfoMessage","unsetMessage","txtX","infoX","sfxName","TextInfoMessageEntryConfig","aiPriorityTrain","aiPriorityGetIn","aiPriorityRepair","aiPriorityRecharge","prioPositions","prioByName","buttonCfg","resetList","updated","prioButton","isPressed","btnCallToArms","ToggleButton","btnOptions","btnPriorities","panels","clearRect","addPanel","panel","hit","ScaledLayer","onOptionsShow","panelsCfg","PanelsCfg","ButtonsCfg","InformationPanel","InfoDockPanel","InfoMessagesConfig","priorityButtonsConfig","PriorityButtonsConfig","priorityPositionsConfig","PriorityPositionsEntry","PriorityListPanel","TopPanel","panelMain","MainPanel","PanelCrystalSideBar","MessagePanel","TextInfoMessageConfig","RadarPanel","GuiBaseLayer","image","titleWindow","textWindow","okWindow","cancelWindow","contrastOverlay","Rect","titleFont","title","dialogCfg","DialogCfg","textFont","nextButtonCfg","backButtonCfg","imgTitle","titleRelX","titleRelY","btnNext","btnBack","imgBack","imgParagraph","paragraph","BriefingPanelCfg","nextParagraph","prevParagraph","setParagraph","objectiveText","objectiveBackImgCfg","messagePanel","itemCfg","labelX","imgTextNormal","loFont","description","imgTextHover","hiFont","imgLabelOffNormal","labelOff","imgLabelOffHover","imgLabelOnNormal","labelOn","imgLabelOnHover","imgLabel","loImg","hiImg","menuImage","sliderX","onValueChanged","imgLeft","imgOff","imgOn","imgRight","leftBtn","btnLeftNormal","btnLeftHover","rightBtn","btnRightNormal","btnRightHover","posX","dw","menuCfg","itemsTrigger","itemsNext","titleImage","menuFont","itemsLabel","MenuLabelItem","actionName","itemsCycle","MenuCycleItem","itemsSlider","MenuSliderItem","layersByKey","menus","MenuLayer","pausePanel","selectLayer","onRepeatBriefing","MenuBasePanel","onAbortGame","onRestartGame","panelPause","PausePanel","panelOptions","OptionsPanel","panelBriefing","BriefingPanel","setActivePanel","lEventKey","selectStart","worldManager","startSelection","changeSelection","screenX","screenY","gameLayer","GameLayer","selectionLayer","SelectionLayer","guiLayer","GuiMainLayer","overlayLayer","OverlayLayer","WorldManager","jobSupervisor","Supervisor","restartLevel","startLevel","levelName","levelsByName","setupAndStartLevel","objective","objectiveImage640x480","BaseScreen","assetIndex","setLoadingMessage","enableGraphicMode","imgBackground","imgProgress","imgLoading","loadingBarWidth","increaseLoadingState","scrollAffected","needsRedraw","targetIndex","onHoverChange","checkSetPressed","setReleased","draw","MainMenuBaseItem","labelImgLo","labelImgHi","items","scrollY","scrollSpeedY","scrollInterval","MainMenuLabelButton","MainMenuIconButton","displayTitle","setScrollY","absY","canScroll","scrollAreaHeight","setScrollSpeedY","showMainMenu","selectLevel","levelKey","pow","scrollYBefore","levelCfg","imgActive","imgInactive","imgCross","unlocked","frontEndX","frontEndY","menuBMP","frontEndOpen","area","imgFirstLine","imgSecondLine","setFirstLine","setSecondLine","modeLevel","levelsCfg","levelTextCfg","LevelTextCfg","MainMenuPanel","panelImgData","panelPos","levelTextWindow","MainMenuWindow","tutorial","levelButton","MainMenuLevelButton","MainMenuLayer","winCfg","onLevelSelected","LevelSelectLayer","showLevelSelection","conf","imgNormalFilepath","imgHoverFilepath","imgPressedFilepath","imgDisabledFilepath","resultIndex","resultLastIndex","images","boxes","fonts","texts","uncoverTimeout","backgroundImg","wallpaper","filePath","boxImages","fontKey","labelFont","backFont","resultsLayer","btnSave","btnAdvance","descriptionTextLayer","btnLayer","RewardScreenButton","saveButton","advanceButton","onAdvance","uncoverResult","levelFullNameImg","resultText","quitText","completeText","failedText","resultValues","percentString","timeString","score","gameResultTextImg","box","vertSpacing","descriptionTextImg","textPos","tx","ty","actual","lessIsMore","padLeft","padding","seconds","ss","minutes","mm","loadingScreen","LoadingScreen","wadFileSelectModal","mainMenuScreen","MainMenuScreen","GameScreen","rewardScreen","RewardScreen","URLSearchParams"],"mappings":"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","file":"426.index.js","sourcesContent":["import { Modal } from 'bootstrap'\n\nexport class WadFileSelectionModal {\n\n    public onStart: (wad0Url, wad1Url) => any = null\n\n    private readonly modal: Modal\n\n    constructor(parentId: string) {\n        const rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        rootElement.classList.add('modal')\n        rootElement.tabIndex = -1\n        rootElement.setAttribute('role', 'dialog')\n        rootElement.setAttribute('aria-hidden', 'true')\n\n        const modalDialog = rootElement.appendChild(document.createElement('div'))\n        modalDialog.classList.add('modal-dialog')\n        rootElement.setAttribute('role', 'document')\n\n        const modalContent = modalDialog.appendChild(document.createElement('div'))\n        modalContent.classList.add('modal-content')\n\n        const modalHeader = modalContent.appendChild(document.createElement('div'))\n        modalHeader.classList.add('modal-header')\n        const modalTitle = modalHeader.appendChild(document.createElement('h5'))\n        modalTitle.classList.add('modal-title')\n        modalTitle.innerText = 'Load .wad files'\n        modalTitle.id = 'wadfileSelectModalLabel'\n        rootElement.setAttribute('aria-labelledby', modalTitle.id)\n\n        const modalBody = modalContent.appendChild(document.createElement('div'))\n        modalBody.classList.add('modal-body')\n\n        const hint = modalBody.appendChild(document.createElement('p'))\n        hint.innerText = 'Assets not included! In order to play the game, please select the game files.'\n\n        const navTabs = modalBody.appendChild(document.createElement('nav'))\n        const navTabList = navTabs.appendChild(document.createElement('div'))\n        navTabList.id = 'nav-tab'\n        navTabList.classList.add('nav', 'nav-tabs')\n        navTabList.setAttribute('role', 'tablist')\n\n        const navFileBtn = WadFileSelectionModal.appendNavButton(navTabList, true, 'nav-file-tab', 'nav-file', 'Local files (recommended)')\n        const navUrlBtn = WadFileSelectionModal.appendNavButton(navTabList, false, 'nav-url-tab', 'nav-url', 'Online from URL')\n\n        const navTabContent = modalBody.appendChild(document.createElement('div'))\n        navTabContent.classList.add('tab-content')\n        this.appendNavFileTab(navTabContent, navFileBtn.id)\n        this.appendNavUrlTab(navTabContent, navUrlBtn.id)\n\n        // rootElement has to be a valid bootstrap HTML modal before we can instantiate it\n        this.modal = new Modal(rootElement, {backdrop: 'static', keyboard: false})\n    }\n\n    private static appendNavButton(parent: HTMLDivElement, active: boolean, id: string, controlTarget: string, innerText: string) {\n        const navBtn = parent.appendChild(document.createElement('button'))\n        navBtn.classList.add('nav-link')\n        if (active) navBtn.classList.add('active')\n        navBtn.id = id\n        navBtn.setAttribute('data-bs-toggle', 'tab')\n        navBtn.setAttribute('data-bs-target', '#' + controlTarget)\n        navBtn.type = 'button'\n        navBtn.setAttribute('role', 'tab')\n        navBtn.setAttribute('aria-controls', controlTarget)\n        navBtn.setAttribute('aria-selected', String(active))\n        navBtn.innerText = innerText\n        return navBtn\n    }\n\n    private appendNavFileTab(parent: HTMLDivElement, labelledBy: string) {\n        const navFileTab = WadFileSelectionModal.appendNavTab(parent, true, 'nav-file', labelledBy)\n\n        const wad0File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad0-file', 'LegoRR0.wad')\n        const wad1File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad1-file', 'LegoRR1.wad')\n\n        const btnStartFile = navFileTab.appendChild(document.createElement('button'))\n        btnStartFile.type = 'submit'\n        btnStartFile.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartFile.id = 'button-start-file'\n        btnStartFile.innerText = 'Start Game'\n        btnStartFile.addEventListener('click', () => {\n            btnStartFile.disabled = true\n            const wad0FileUrl = URL.createObjectURL(wad0File.files[0])\n            const wad1FileUrl = URL.createObjectURL(wad1File.files[0])\n            this.onStart(wad0FileUrl, wad1FileUrl)\n        })\n    }\n\n    private static appendWadFileGroup(parent: HTMLDivElement, id: string, filename: string) {\n        const wadFileGroup = parent.appendChild(document.createElement('div'))\n        wadFileGroup.classList.add('my-3')\n        const wadFileLabel = wadFileGroup.appendChild(document.createElement('label'))\n        wadFileLabel.setAttribute('for', id)\n        wadFileLabel.classList.add('form-label')\n        wadFileLabel.innerHTML = 'Select <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadFileInput = wadFileGroup.appendChild(document.createElement('input'))\n        wadFileInput.type = 'file'\n        wadFileInput.classList.add('form-control')\n        wadFileInput.id = id\n        wadFileInput.required = true\n        return wadFileInput\n    }\n\n    private appendNavUrlTab(parent: HTMLDivElement, labelledBy: string) {\n        const navUrlTab = WadFileSelectionModal.appendNavTab(parent, false, 'nav-url', labelledBy)\n\n        const urlHint = navUrlTab.appendChild(document.createElement('div'))\n        urlHint.classList.add('my-3')\n        urlHint.innerText = 'Direct links with correct Allow-Origin-CORS-Headers required here.'\n\n        const wad0Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad0-url', 'LegoRR0.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n        const wad1Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad1-url', 'LegoRR1.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n\n        const btnStartUrl = navUrlTab.appendChild(document.createElement('button'))\n        btnStartUrl.type = 'submit'\n        btnStartUrl.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartUrl.id = 'button-start-url'\n        btnStartUrl.innerText = 'Start Game'\n        btnStartUrl.addEventListener('click', () => {\n            btnStartUrl.disabled = true\n            // XXX show loading progress for WAD files\n            this.onStart(wad0Url.value, wad1Url.value)\n        })\n    }\n\n    private static appendNavTab(parent: HTMLDivElement, active: boolean, id: string, labelledBy: string) {\n        const navTab = parent.appendChild(document.createElement('div'))\n        navTab.classList.add('tab-pane', 'fade')\n        if (active) navTab.classList.add('show', 'active')\n        navTab.id = id\n        navTab.setAttribute('role', 'tabpanel')\n        navTab.setAttribute('aria-labelledby', labelledBy)\n        return navTab\n    }\n\n    private static appendWadUrlGroup(parent: HTMLDivElement, id: string, filename: string, example: string) {\n        const wadUrlGroup = parent.appendChild(document.createElement('div'))\n        wadUrlGroup.classList.add('my-3')\n        const wadUrlLabel = wadUrlGroup.appendChild(document.createElement('label'))\n        wadUrlLabel.setAttribute('for', id)\n        wadUrlLabel.classList.add('form-label')\n        wadUrlLabel.innerHTML = 'Enter url for <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadUrlInput = wadUrlGroup.appendChild(document.createElement('input'))\n        wadUrlInput.type = 'url'\n        wadUrlInput.classList.add('form-control')\n        wadUrlInput.id = id\n        wadUrlInput.required = true\n        wadUrlInput.value = example\n        return wadUrlInput\n    }\n\n    public show() {\n        this.modal.show()\n    }\n\n    public hide() {\n        this.modal.hide()\n    }\n\n}\n","export enum EventKey {\n\n    SELECTED_SURFACE,\n    SELECTED_BUILDING,\n    SELECTED_RAIDER,\n    SELECTED_VEHICLE,\n\n    DESELECTED_ENTITY,\n\n    JOB_CREATE,\n    JOB_DELETE,\n\n    RAIDER_REQUESTED,\n\n    MATERIAL_AMOUNT_CHANGED,\n\n    ENTITY_ADDED,\n    ENTITY_REMOVED,\n\n    CAVERN_DISCOVERED,\n\n    ORE_FOUND,\n\n    BUILDING_UPGRADED,\n\n    RAIDER_TRAINED,\n\n    LOCATION_DEATH,\n    LOCATION_MONSTER,\n    LOCATION_CRYSTAL_FOUND,\n    LOCATION_UNDER_ATTACK,\n    LOCATION_LANDSLIDE,\n    LOCATION_POWER_DRAIN,\n    LOCATION_SLUG_EMERGE,\n    LOCATION_RAIDER_DISCOVERED,\n\n    SURFACE_CHANGED,\n    AIR_LEVEL_CHANGED,\n    CANCEL_BUILD_MODE,\n    CHANGE_CURSOR,\n\n}\n","import { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class EventBus {\n\n    static eventListener = new Map<EventKey, ((event: GameEvent) => any)[]>()\n    static blockedEvents = []\n\n    static publishEvent(event: GameEvent) {\n        if (this.blockedEvents.includes(event.eventKey)) return // event is currently blocked from publishing\n        if (!event.isLocal) console.log('Event published: ' + EventKey[event.eventKey])\n        this.blockedEvents.push(event.eventKey)\n        this.getListener(event.eventKey).forEach((callback) => callback(event))\n        this.blockedEvents.remove(event.eventKey)\n    }\n\n    static registerEventListener(eventKey: EventKey, callback: (GameEvent) => any) {\n        this.getListener(eventKey).push(callback)\n    }\n\n    private static getListener(eventKey: EventKey) {\n        return this.eventListener.getOrUpdate(eventKey, () => [])\n    }\n\n    // TODO cleanup/unregister all event listener at level end?!\n\n}\n","import { BaseEntity } from '../game/model/BaseEntity'\nimport { BuildingEntity } from '../game/model/building/BuildingEntity'\nimport { EntitySuperType, EntityType } from '../game/model/EntityType'\nimport { FulfillerEntity } from '../game/model/FulfillerEntity'\nimport { PublicJob } from '../game/model/job/Job'\nimport { RaiderTraining } from '../game/model/raider/RaiderTraining'\nimport { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class WorldEvent extends GameEvent {\n\n    constructor(entityKey: EventKey) {\n        super(entityKey)\n        this.isLocal = false\n    }\n\n}\n\nexport class JobEvent extends WorldEvent {\n\n    job: PublicJob\n\n    constructor(eventKey: EventKey, job: PublicJob) {\n        super(eventKey)\n        this.job = job\n    }\n\n}\n\nexport class JobCreateEvent extends JobEvent {\n\n    constructor(job: PublicJob) {\n        super(EventKey.JOB_CREATE, job)\n    }\n\n}\n\nexport class JobDeleteEvent extends JobEvent {\n\n    constructor(job: PublicJob) {\n        super(EventKey.JOB_DELETE, job)\n    }\n\n}\n\nexport class RaiderRequested extends WorldEvent {\n\n    constructor() {\n        super(EventKey.RAIDER_REQUESTED)\n    }\n\n}\n\nexport class MaterialAmountChanged extends WorldEvent {\n\n    entityType: EntityType\n\n    constructor(entityType: EntityType) {\n        super(EventKey.MATERIAL_AMOUNT_CHANGED)\n        this.entityType = entityType\n    }\n\n}\n\nexport class EntityAddedEvent extends WorldEvent {\n\n    superType: EntitySuperType\n    entity: BaseEntity\n\n    constructor(entity: BaseEntity) {\n        super(EventKey.ENTITY_ADDED)\n        this.superType = entity.superType\n        this.entity = entity\n    }\n\n}\n\nexport class EntityRemovedEvent extends WorldEvent {\n\n    superType: EntitySuperType\n    entity: BaseEntity\n\n    constructor(entity: BaseEntity) {\n        super(EventKey.ENTITY_REMOVED)\n        this.superType = entity.superType\n        this.entity = entity\n    }\n\n}\n\nexport class CavernDiscovered extends WorldEvent {\n\n    constructor() {\n        super(EventKey.CAVERN_DISCOVERED)\n    }\n\n}\n\nexport class OreFoundEvent extends WorldEvent {\n\n    constructor() {\n        super(EventKey.ORE_FOUND)\n    }\n\n}\n\nexport class BuildingUpgraded extends WorldEvent {\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(EventKey.BUILDING_UPGRADED)\n        this.building = building\n    }\n\n}\n\nexport class EntityTrained extends WorldEvent {\n\n    entity: FulfillerEntity\n    training: RaiderTraining\n\n    constructor(entity: FulfillerEntity, training: RaiderTraining) {\n        super(EventKey.RAIDER_TRAINED)\n        this.entity = entity\n        this.training = training\n    }\n\n}\n","import { EventKey } from './EventKeyEnum'\n\nexport class GameEvent {\n\n    eventKey: EventKey\n    isLocal: boolean\n\n    constructor(eventKey: EventKey) {\n        this.eventKey = eventKey\n    }\n\n}\n","import { BuildingEntity } from '../game/model/building/BuildingEntity'\nimport { Surface } from '../game/model/map/Surface'\nimport { Raider } from '../game/model/raider/Raider'\nimport { Cursors } from '../screen/Cursors'\nimport { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n        this.isLocal = true\n    }\n\n}\n\nexport class SelectionEvent extends LocalEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n    }\n\n}\n\nexport class SurfaceSelectedEvent extends SelectionEvent {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(EventKey.SELECTED_SURFACE)\n        this.surface = surface\n    }\n\n}\n\nexport class BuildingSelected extends SelectionEvent {\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(EventKey.SELECTED_BUILDING)\n        this.building = building\n    }\n\n}\n\nexport class RaiderSelected extends SelectionEvent {\n\n    raider: Raider\n\n    constructor(raider: Raider) {\n        super(EventKey.SELECTED_RAIDER)\n        this.raider = raider\n    }\n\n}\n\nexport class EntityDeselected extends LocalEvent {\n\n    constructor() {\n        super(EventKey.DESELECTED_ENTITY)\n    }\n\n}\n\nexport class SurfaceChanged extends LocalEvent {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(EventKey.SURFACE_CHANGED)\n        this.surface = surface\n    }\n\n}\n\nexport class AirLevelChanged extends LocalEvent {\n\n    constructor() {\n        super(EventKey.AIR_LEVEL_CHANGED)\n    }\n\n}\n\nexport class CancelBuildMode extends LocalEvent {\n\n    constructor() {\n        super(EventKey.CANCEL_BUILD_MODE)\n    }\n\n}\n\nexport class ChangeCursor extends LocalEvent {\n\n    cursor: Cursors\n\n    constructor(cursor: Cursors) {\n        super(EventKey.CHANGE_CURSOR)\n        this.cursor = cursor\n    }\n\n}\n","export const DEV_MODE = process.env.WEBPACK_MODE === 'development'\nexport const JOB_SCHEDULE_INTERVAL = 1000 // milliseconds\nexport const CHECK_CLEARRUBBLE_INTERVAL = 5000 // milliseconds\nexport const JOB_ACTION_RANGE = 5\nexport const CHECK_SPANW_RAIDER_TIMER = 1000 // milliseconds\nexport const MAX_RAIDER_BASE = 12\nexport const MAX_RAIDER_REQUEST = 9\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10\nexport const UPDATE_OXYGEN_TIMER = 5000 // milliseconds\nexport const PANEL_ANIMATION_MULTIPLIER = 3\nexport const HEIGHT_MULTIPLER = 0.1\nexport const SEQUENCE_TEXTURE_FRAMERATE = 5\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640\nexport const SPRITE_RESOLUTION_HEIGHT = 480\nexport const TILESIZE = 40\nexport const NATIVE_FRAMERATE = 30\n","export function getFilename(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '')\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/')\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max)\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2\n}\n\nexport function clearTimeoutSafe(timeout: NodeJS.Timeout) {\n    if (timeout) clearTimeout(timeout)\n    return null\n}\n\nexport function clearIntervalSafe(interval: NodeJS.Timeout) {\n    if (interval) clearInterval(interval)\n    return null\n}\n\ndeclare global {\n\n    interface Array<T> {\n        remove(element: T): void\n\n        count(callback: (element: T) => boolean): number\n    }\n\n    interface Map<K, V> {\n        getOrUpdate(key: K, updateCallback: () => V): V\n    }\n\n}\n\nArray.prototype.remove = function <T>(element: T): void {\n    const index = this.indexOf(element)\n    if (index !== -1) this.splice(index, 1)\n}\n\nArray.prototype.count = function <T>(callback: (element: T) => boolean): number {\n    let counter = 0\n    this.forEach((e) => callback(e) && counter++)\n    return counter\n}\n\n// noinspection JSUnusedGlobalSymbols\nMap.prototype.getOrUpdate = function <K, V>(key: K, updateCallback: () => V): V {\n    let value = this.get(key)\n    if (value === undefined) {\n        value = updateCallback()\n        this.set(key, value)\n    }\n    return value\n}\n","import { Mesh } from 'three'\nimport { clearIntervalSafe } from '../core/Util'\n\nexport class AnimatedMesh {\n\n    mesh: Mesh = null\n    textureSequences = []\n\n    constructor(mesh: Mesh, textureSequences: any[]) {\n        this.mesh = mesh\n        this.textureSequences = textureSequences\n    }\n\n    dispose() {\n        this.textureSequences.forEach((s) => clearIntervalSafe(s))\n        this.mesh.geometry.dispose()\n        Array.isArray(this.mesh.material) ? this.mesh.material.forEach(mat => mat.dispose()) : this.mesh.material?.dispose()\n    }\n\n}\n","/**\n * creates a new context with the specified dimensions.\n * @param width: the desired width of the new context\n * @param height: the desired height of the new context\n * @returns RenderingContext the newly created canvas\n */\nexport function createContext(width, height) {\n    if (width < 1 || height < 1) {\n        console.error('Can\\'t create context with size ' + width + ' x ' + height);\n        return createDummyContext(64, 64);\n    }\n    const canvas = document.createElement('canvas');\n    canvas.setAttribute('width', width);\n    canvas.setAttribute('height', height);\n    const context = canvas.getContext('2d');\n    context.width = width;\n    context.height = height;\n    return context;\n}\n\n/**\n * This method is intended to increase stability by providing an (ugly) placeholder image in case the right one is missing\n * @param width: expected width of the original image\n * @param height: expected height of the original image\n */\nexport function createDummyContext(width, height) {\n    const result = createContext(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            if (x / 16 % 2 === y / 16 % 2) {\n                result.fillStyle = 'rgb(0,255,255)';\n            } else {\n                result.fillStyle = 'rgb(255,0,255)';\n            }\n            result.fillRect(x, y, 16, 16);\n        }\n    }\n    return result;\n}\n\nexport function createDummyImgData(width, height) {\n    const result = new ImageData(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            const e = x / 16 % 2 === y / 16 % 2;\n            for (let px = x; px < x + 16; px++) {\n                for (let py = y; py < y + 16; py++) {\n                    setPixel(result, px, py, e ? 0 : 255, e ? 255 : 0, 255);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport function setPixel(imgData, x, y, r, g, b, a = 255) {\n    const n = (y * imgData.width + x) * 4;\n    imgData.data[n] = r;\n    imgData.data[n + 1] = g;\n    imgData.data[n + 2] = b;\n    imgData.data[n + 3] = a;\n}\n\nexport function getPixel(imgData, x, y) {\n    const n = (y * imgData.width + x) * 4;\n    return {r: imgData.data[n], g: imgData.data[n + 1], b: imgData.data[n + 2], a: imgData.data[n + 3]};\n}\n\nexport function copyPixel(originData, targetData, x, y) {\n    const p = getPixel(originData);\n    setPixel(targetData, p.r, p.g, p.b, p.a);\n}\n","import { AnimClip } from './AnimClip'\n\nexport class AnimationEntityType {\n\n    carryNullName: string = ''\n    depositNullName: string = ''\n    toolNullName: string = ''\n    mediumPoly: {} = {}\n    highPoly: {} = {}\n    fPPoly: {} = {}\n    activities: Map<string, { file: string, transcoef: number, lwsfile: boolean, animation: AnimClip }> = new Map()\n\n}\n","export enum Cursors {\n\n    Pointer_Blank,\n    Pointer_Standard,\n    Pointer_Drill,\n    Pointer_CantDrill,\n    Pointer_Clear,\n    Pointer_Go,\n    Pointer_CantGo,\n    Pointer_Teleport,\n    Pointer_CantTeleport,\n    Pointer_Reinforce,\n    Pointer_CantReinforce,\n    Pointer_Selected,\n    Pointer_RadarPan,\n    Pointer_TrackObject,\n    Pointer_Zoom,\n    Pointer_CantZoom,\n    Pointer_Help,\n    Pointer_CantHelp,\n    Pointer_PutDown,\n    Pointer_GetIn,\n    Pointer_GetOut,\n    Pointer_Okay,\n    Pointer_NotOkay,\n    Pointer_CanBuild,\n    Pointer_CannotBuild,\n    Pointer_Dynamite,\n    Pointer_CantDynamite,\n    Pointer_PickUp,\n    Pointer_CantPickUp,\n    Pointer_PickUpOre,\n    Pointer_LegoManCantDig,\n    Pointer_VehicleCantDig,\n    Pointer_LegoManDig,\n    Pointer_VehicleDig,\n    Pointer_LegoManCantPickUp,\n    Pointer_VehicleCantPickUp,\n    Pointer_LegoManPickUp,\n    Pointer_VehiclePickUp,\n    Pointer_LegoManCantGo,\n    Pointer_VehicleCantGo,\n    Pointer_LegoManGo,\n    Pointer_VehicleGo,\n    Pointer_LegoManClear,\n    Pointer_VehicleClear,\n    Pointer_SurfaceType_Immovable,\n    Pointer_SurfaceType_Hard,\n    Pointer_SurfaceType_Medium,\n    Pointer_SurfaceType_Loose,\n    Pointer_SurfaceType_Soil,\n    Pointer_SurfaceType_OreSeam,\n    Pointer_SurfaceType_CrystalSeam,\n    Pointer_SurfaceType_RechargeSeam,\n\n}\n","const Stats = require('stats.js')\n\nexport class DebugHelper {\n\n    stats\n\n    constructor() {\n        this.stats = new Stats()\n        this.stats.setMode(0) // 0: fps, 1: ms\n\n        this.stats.domElement.style.position = 'absolute'\n        this.stats.domElement.style.left = '0px'\n        this.stats.domElement.style.top = '0px'\n\n        document.body.appendChild(this.stats.domElement)\n        this.hide()\n    }\n\n    show() {\n        this.stats.domElement.style.visibility = 'visible'\n    }\n\n    hide() {\n        this.stats.domElement.style.visibility = 'hidden'\n    }\n\n    renderStart() {\n        this.stats.begin()\n    }\n\n    renderDone() {\n        this.stats.end()\n    }\n\n}\n","import { Vector2 } from 'three'\n\nexport class BarrierLocation {\n\n    location: Vector2\n    heading: number\n\n    constructor(location: Vector2, surfaceCenter: Vector2) {\n        this.location = location\n        this.heading = location.clone().sub(surfaceCenter).angle()\n        if (location.y === surfaceCenter.y) {\n            this.heading -= Math.PI / 2\n        } else {\n            this.heading += Math.PI / 2\n        }\n    }\n\n}\n","import { Cursors } from '../../../screen/Cursors'\n\nexport class SurfaceType {\n\n    name: string // humand readable, maybe used as label lateron\n    shaping: boolean = false\n    matIndex: string = '00'\n    floor: boolean = false\n    selectable: boolean = false\n    drillable: boolean = false\n    drillableHard: boolean = false\n    explodable: boolean = false\n    reinforcable: boolean = false\n    cursor: Cursors = Cursors.Pointer_Standard\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options)\n    }\n\n    static readonly GROUND = new SurfaceType({name: 'ground', floor: true, selectable: true})\n    static readonly SOLID_ROCK = new SurfaceType({\n        name: 'solid rock',\n        shaping: true,\n        matIndex: '5',\n        cursor: Cursors.Pointer_SurfaceType_Immovable,\n    })\n    static readonly HARD_ROCK = new SurfaceType({\n        name: 'hard rock',\n        shaping: true,\n        matIndex: '4',\n        selectable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_Hard,\n    })\n    static readonly LOOSE_ROCK = new SurfaceType({\n        name: 'loose rock',\n        shaping: true,\n        matIndex: '3',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_Medium,\n    })\n    static readonly DIRT = new SurfaceType({\n        name: 'dirt',\n        shaping: true,\n        matIndex: '1',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_Loose,\n    })\n    static readonly SLUG_HOLE = new SurfaceType({name: 'slug hole', floor: true, matIndex: '30'})\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'})\n    static readonly ORE_SEAM = new SurfaceType({\n        name: 'ore seam',\n        matIndex: '40',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_OreSeam,\n    })\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45'})\n    static readonly CRYSTAL_SEAM = new SurfaceType({\n        name: 'energy crystal seam',\n        matIndex: '20',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_CrystalSeam,\n    })\n    static readonly RECHARGE_SEAM = new SurfaceType({\n        name: 'recharge seam',\n        matIndex: '67',\n        cursor: Cursors.Pointer_SurfaceType_RechargeSeam,\n    })\n    static readonly POWER_PATH = new SurfaceType({\n        name: 'power path all',\n        floor: true,\n        matIndex: '60',\n        selectable: true,\n    })\n    static readonly POWER_PATH_SITE = new SurfaceType({\n        name: 'power path site',\n        floor: true,\n        matIndex: '61',\n        selectable: true,\n    })\n    static readonly POWER_PATH_BUILDING = new SurfaceType({name: 'power path', floor: true, matIndex: '76'})\n    static readonly RUBBLE1 = new SurfaceType({\n        name: 'rubble 1',\n        floor: true,\n        matIndex: '13',\n        selectable: true,\n    })\n    static readonly RUBBLE2 = new SurfaceType({\n        name: 'rubble 2',\n        floor: true,\n        matIndex: '12',\n        selectable: true,\n    })\n    static readonly RUBBLE3 = new SurfaceType({\n        name: 'rubble 3',\n        floor: true,\n        matIndex: '11',\n        selectable: true,\n    })\n    static readonly RUBBLE4 = new SurfaceType({\n        name: 'rubble 4',\n        floor: true,\n        matIndex: '10',\n        selectable: true,\n    })\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING\n            case 1:\n                return SurfaceType.SOLID_ROCK\n            case 2:\n                return SurfaceType.HARD_ROCK\n            case 3:\n                return SurfaceType.LOOSE_ROCK\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT\n            case 6:\n                return SurfaceType.LAVA\n            case 8:\n                return SurfaceType.ORE_SEAM\n            case 9:\n                return SurfaceType.WATER\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM\n            case 11:\n                return SurfaceType.RECHARGE_SEAM\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE\n            case 100:\n                return SurfaceType.RUBBLE4\n            case 101:\n                return SurfaceType.RUBBLE3\n            case 102:\n                return SurfaceType.RUBBLE2\n            case 103:\n                return SurfaceType.RUBBLE1\n            default:\n                console.error('Unexpected surface type num: ' + typeNum)\n                return SurfaceType.SOLID_ROCK\n        }\n    }\n}\n","export enum WALL_TYPE {\n\n    CORNER = 1,\n    WALL = 2,\n    INVERTED_CORNER = 3,\n    WEIRD_CREVICE = 20,\n\n}\n","import { BufferGeometry, Vector2, Vector3 } from 'three'\nimport { BufferAttribute } from 'three/src/core/BufferAttribute'\nimport { WALL_TYPE } from './WallType'\n\nexport class SurfaceGeometry {\n\n    public static create(wallType: WALL_TYPE,\n                         topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3,\n                         topLeftHeight: number, topRightHeight: number, bottomRightHeight: number, bottomLeftHeight: number,\n    ) {\n        let uvOffset = 0\n\n        // not-rotated\n        // 1 ?\n        // ? 0\n        if (topLeftVertex.y && !bottomRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topRightVertex.y)))) {\n            uvOffset = 0\n        }\n\n        // 90 clock-wise\n        // ? 1\n        // 0 ?\n        if (topRightVertex.y && !bottomLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomRightVertex.y)))) {\n            uvOffset = 3\n        }\n\n        // 180 clock-wise\n        // 0 ?\n        // ? 1\n        if (bottomRightVertex.y && !topLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomLeftVertex.y)))) {\n            uvOffset = 2\n        }\n\n        // 270 clock-wise\n        // ? 0\n        // 1 ?\n        if (bottomLeftVertex.y && !topRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topLeftVertex.y)))) {\n            uvOffset = 1\n        }\n\n        if (wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) {\n            if (topLeftVertex.y && bottomRightVertex.y) {\n                uvOffset = 0\n            }\n            if (topRightVertex.y && bottomLeftVertex.y) {\n                uvOffset = 3\n            }\n        }\n\n        /*\n        //\t\t0---1                1         0---1\n        //\t\t|   |  becomes      /|   and   |  /\n        //\t\t|   |             /  |         |/\n        //\t\t3---2            3---2         3\n        //\n        //\t\tOR\n        //\n        //\t\t0---1            0             0---1\n        //\t\t|   |  becomes   |\\    \t and    \\  |\n        //\t\t|   |            |  \\             \\|\n        //\t\t3---2            3---2             2\n        //\n        //\t\tTriangles 0-1-3 and 0-3-2\n        //\t\tQuad 0-1-3-2\n        */\n\n        const uv = [\n            new Vector2(0, 1),\n            new Vector2(1, 1),\n            new Vector2(1, 0),\n            new Vector2(0, 0),\n        ]\n\n        const bufferVertices = []\n        const bufferNormals = []\n\n        function addFaceAndNormals(a, b, c) {\n            bufferVertices.push(a, b, c)\n            const normal = new Vector3().subVectors(c, b)\n            normal.cross(new Vector3().subVectors(a, b))\n            normal.normalize()\n            bufferNormals.push(normal, normal, normal)\n        }\n\n        const uvIndexes = []\n        if (topRightVertex.y !== bottomLeftVertex.y ||\n            ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) && !(topRightVertex.y && bottomLeftVertex.y))) {\n            uvIndexes.push(1, 3, 2)\n            uvIndexes.push(1, 0, 3)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topRightVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topRightVertex, topLeftVertex, bottomLeftVertex)\n        } else {\n            uvIndexes.push(0, 3, 2)\n            uvIndexes.push(0, 2, 1)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topLeftVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topLeftVertex, bottomRightVertex, topRightVertex)\n        }\n\n        const bufferVertexUvs = uvIndexes.map(i => uv[(i + uvOffset) % 4])\n\n        const bufferGeometry = new BufferGeometry()\n        bufferGeometry.setAttribute('position', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferVertices))\n        bufferGeometry.setAttribute('normal', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferNormals))\n        bufferGeometry.setAttribute('uv', new BufferAttribute(new Float32Array(12), 2).copyVector2sArray(bufferVertexUvs))\n        return bufferGeometry\n    }\n}\n","import { Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { TILESIZE } from '../../../params'\nimport { SurfaceGeometry } from '../map/SurfaceGeometry'\nimport { WALL_TYPE } from '../map/WallType'\n\nexport class BuildPlacementMarkerMesh extends Mesh {\n\n    static readonly geometry = SurfaceGeometry.create(WALL_TYPE.WALL,\n        new Vector3(0, 0, 0), new Vector3(TILESIZE, 0, TILESIZE),\n        new Vector3(TILESIZE, 0, 0), new Vector3(0, 0, TILESIZE),\n        1, 1, 1, 1,\n    )\n\n    standardColor: number\n\n    constructor(standardColor: number) {\n        super(BuildPlacementMarkerMesh.geometry, new MeshPhongMaterial({\n            shininess: 0,\n            transparent: true,\n            opacity: 0.4,\n            color: standardColor,\n        }))\n        this.standardColor = standardColor\n        this.visible = false\n    }\n\n    updateState(position: { x: number, y: number }, heading: number, primaryPosition: Vector3) {\n        this.visible = !!position\n        if (position) {\n            this.position.set(position.x, 0, position.y).multiplyScalar(TILESIZE)\n                .applyAxisAngle(new Vector3(0, 1, 0), -heading + Math.PI / 2)\n                .add(primaryPosition)\n        }\n    }\n\n    markAsValid(isValid: boolean) {\n        const color = isValid ? this.standardColor : 0x500000;\n        (this.material as MeshPhongMaterial).color.setHex(color)\n    }\n\n}\n","import { Group, Vector2 } from 'three'\nimport { TILESIZE } from '../../../params'\nimport { BarrierLocation } from '../collect/BarrierLocation'\nimport { GameState } from '../GameState'\nimport { Surface } from '../map/Surface'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { Terrain } from '../map/Terrain'\nimport { BuildPlacementMarkerMesh } from './BuildPlacementMarkerMesh'\n\nexport class BuildPlacementMarker {\n\n    static readonly buildingMarkerColor: number = 0x005000\n    static readonly pathMarkerColor: number = 0x505000\n    static readonly waterMarkerColor: number = 0x000050\n\n    group: Group = new Group()\n    markers: BuildPlacementMarkerMesh[] = []\n    buildingMarkerPrimary: BuildPlacementMarkerMesh = null\n    buildingMarkerSecondary: BuildPlacementMarkerMesh = null\n    powerPathMarkerPrimary: BuildPlacementMarkerMesh = null\n    powerPathMarkerSecondary: BuildPlacementMarkerMesh = null\n    waterPathMarker: BuildPlacementMarkerMesh = null\n    heading: number = 0\n    sdx: number = 0\n    sdz: number = 0\n    lastCheck: boolean = false\n    visibleSurfaces: Surface[] = []\n    primarySurface: Surface = null\n    secondarySurface: Surface = null\n    waterSurface: Surface = null\n\n    constructor() {\n        this.buildingMarkerPrimary = new BuildPlacementMarkerMesh(BuildPlacementMarker.buildingMarkerColor)\n        this.buildingMarkerSecondary = new BuildPlacementMarkerMesh(BuildPlacementMarker.buildingMarkerColor)\n        this.powerPathMarkerPrimary = new BuildPlacementMarkerMesh(BuildPlacementMarker.pathMarkerColor)\n        this.powerPathMarkerSecondary = new BuildPlacementMarkerMesh(BuildPlacementMarker.pathMarkerColor)\n        this.waterPathMarker = new BuildPlacementMarkerMesh(BuildPlacementMarker.waterMarkerColor)\n        this.addMarker(this.buildingMarkerPrimary)\n        this.addMarker(this.buildingMarkerSecondary)\n        this.addMarker(this.powerPathMarkerPrimary)\n        this.addMarker(this.powerPathMarkerSecondary)\n        this.addMarker(this.waterPathMarker)\n    }\n\n    private addMarker(marker: BuildPlacementMarkerMesh) {\n        this.group.add(marker)\n        this.markers.push(marker)\n    }\n\n    update(terrain: Terrain, worldPosition: Vector2) {\n        if (!worldPosition || !GameState.buildModeSelection) {\n            this.hideAllMarker()\n        } else {\n            const isValid = this.updateAllMarker(terrain, worldPosition)\n            this.markers.forEach((c) => c.markAsValid(isValid))\n        }\n    }\n\n    private updateAllMarker(terrain: Terrain, worldPosition: Vector2 = null): boolean {\n        // TODO use surface height offsets, refactor terrain map/data handling before\n        const buildMode = GameState.buildModeSelection\n        this.buildingMarkerPrimary.visible = true\n        this.buildingMarkerPrimary.position.copy(terrain.worldMgr.getFloorPosition(new Vector2(Math.floor(worldPosition.x / TILESIZE) * TILESIZE, Math.floor(worldPosition.y / TILESIZE) * TILESIZE)))\n        const sdxv = worldPosition.x - this.buildingMarkerPrimary.position.x - TILESIZE / 2\n        const sdzv = worldPosition.y - this.buildingMarkerPrimary.position.z - TILESIZE / 2\n        const sdx = Math.abs(sdxv) > Math.abs(sdzv) ? Math.sign(sdxv) : 0\n        const sdz = Math.abs(sdzv) > Math.abs(sdxv) ? Math.sign(sdzv) : 0\n        if (this.sdx === sdx && this.sdz === sdz) return this.lastCheck\n        this.sdx = sdx\n        this.sdz = sdz\n        this.heading = Math.atan2(sdz, sdx)\n        this.buildingMarkerSecondary.updateState(buildMode.secondaryBuildingPart, this.heading, this.buildingMarkerPrimary.position)\n        this.powerPathMarkerPrimary.updateState(buildMode.primaryPowerPath, this.heading, this.buildingMarkerPrimary.position)\n        this.powerPathMarkerSecondary.updateState(buildMode.secondaryPowerPath, this.heading, this.buildingMarkerPrimary.position)\n        this.waterPathMarker.updateState(buildMode.waterPathSurface, this.heading, this.buildingMarkerPrimary.position)\n        this.visibleSurfaces = [this.buildingMarkerPrimary, this.buildingMarkerSecondary, this.powerPathMarkerPrimary, this.powerPathMarkerSecondary]\n            .filter((c) => c.visible).map((c) => terrain.getSurfaceFromWorld(c.position))\n        this.primarySurface = this.visibleSurfaces[0]\n        this.secondarySurface = this.buildingMarkerSecondary.visible ? this.visibleSurfaces[1] : null\n        this.waterSurface = this.waterPathMarker.visible ? terrain.getSurfaceFromWorld(this.waterPathMarker.position) : null\n        this.lastCheck = this.visibleSurfaces.every((s) => s.surfaceType === SurfaceType.GROUND)\n            && ([this.powerPathMarkerPrimary, this.powerPathMarkerSecondary]\n                    .some((c) => c.visible && terrain.getSurfaceFromWorld(c.position).neighbors\n                        .some((n) => n.surfaceType === SurfaceType.POWER_PATH)) ||\n                !buildMode.primaryPowerPath && this.primarySurface.neighbors.some((n) => n.surfaceType === SurfaceType.POWER_PATH))\n            && (!this.waterPathMarker.visible || this.waterSurface.surfaceType === SurfaceType.WATER)\n        return this.lastCheck\n    }\n\n    hideAllMarker() {\n        this.markers.forEach((m) => m.visible = false)\n        this.lastCheck = false\n    }\n\n    getBarrierLocations(): BarrierLocation[] {\n        const barrierLocations: BarrierLocation[] = []\n        const center = this.primarySurface.getCenterWorld2D()\n        const barrierOffset = TILESIZE * 9 / 20\n        if (this.secondarySurface) {\n            const secondary = this.secondarySurface.getCenterWorld2D()\n            const dx = Math.sign(secondary.x - center.x)\n            const dy = Math.sign(secondary.y - center.y)\n            if (dx !== 0) {\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x - dx * barrierOffset, center.y), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y - barrierOffset), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y + barrierOffset), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x + dx * barrierOffset, center.y), secondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x, secondary.y - barrierOffset), secondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x, secondary.y + barrierOffset), secondary))\n            } else {\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y - dy * barrierOffset), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x - barrierOffset, center.y), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x + barrierOffset, center.y), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x, secondary.y + dy * barrierOffset), secondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x - barrierOffset, center.y), secondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x + barrierOffset, center.y), secondary))\n            }\n        } else {\n            barrierLocations.push(new BarrierLocation(new Vector2(center.x - barrierOffset, center.y), center))\n            barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y - barrierOffset), center))\n            barrierLocations.push(new BarrierLocation(new Vector2(center.x + barrierOffset, center.y), center))\n            barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y + barrierOffset), center))\n        }\n        return barrierLocations\n    }\n\n}\n","import { AmbientLight, Color, Frustum, Mesh, MOUSE, PerspectiveCamera, PointLight, Raycaster, Scene, Vector3, WebGLRenderer } from 'three'\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { clearIntervalSafe } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { TILESIZE } from '../params'\nimport { AnimatedMesh } from '../resource/AnimatedMesh'\nimport { DebugHelper } from '../screen/DebugHelper'\nimport { BuildPlacementMarker } from './model/building/BuildPlacementMarker'\nimport { GameState } from './model/GameState'\nimport { Terrain } from './model/map/Terrain'\nimport { Selectable } from './model/Selectable'\n\nexport class SceneManager {\n\n    static meshRegistry: AnimatedMesh[] = []\n\n    maxFps: number = 30 // most animations use 25 fps so this should be enough\n    renderer: WebGLRenderer\n    debugHelper: DebugHelper = new DebugHelper()\n    renderInterval\n    animRequest\n    scene: Scene\n    camera: PerspectiveCamera\n    ambientLight: AmbientLight\n    light: PointLight\n    terrain: Terrain\n    controls: MapControls\n    cursorTorchlight: PointLight\n    buildMarker: BuildPlacementMarker\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.renderer = new WebGLRenderer({antialias: true, canvas: canvas})\n        this.renderer.setClearColor(0x000000)\n\n        this.camera = new PerspectiveCamera(30, canvas.width / canvas.height, 0.1, 5000) // TODO make these params configurable\n\n        this.controls = new MapControls(this.camera, this.renderer.domElement)\n        this.controls.mouseButtons = {LEFT: null, MIDDLE: MOUSE.ROTATE, RIGHT: MOUSE.PAN}\n        // this.controls.maxPolarAngle = Math.PI * 0.45; // TODO dynamically adapt to terrain height at camera position\n\n        this.buildMarker = new BuildPlacementMarker()\n        EventBus.registerEventListener(EventKey.CANCEL_BUILD_MODE, () => {\n            GameState.buildModeSelection = null\n            this.buildMarker.hideAllMarker()\n        })\n    }\n\n    selectEntitiesByRay(rx: number, ry: number) {\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        let intersects = raycaster.intersectObjects(GameState.raiders.map((r) => r.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.buildings.map((b) => b.pickSphere))\n        if (intersects.length < 1 && this.terrain) intersects = raycaster.intersectObjects(this.terrain.floorGroup.children)\n        const selected = []\n        if (intersects.length > 0) {\n            const userData = intersects[0].object.userData\n            if (userData && userData.hasOwnProperty('selectable')) {\n                const selectable = userData['selectable']\n                if (selectable) selected.push(selectable)\n            }\n        }\n        GameState.selectEntities(selected)\n    }\n\n    selectEntitiesInFrustum(r1x: number, r1y: number, r2x: number, r2y: number) {\n        const startPoint = new Vector3(r1x, r1y, 0.5)\n        const endPoint = new Vector3(r2x, r2y, 0.5)\n        // Avoid invalid frustum\n        if (startPoint.x === endPoint.x) {\n            endPoint.x += Number.EPSILON\n        }\n        if (startPoint.y === endPoint.y) {\n            endPoint.y += Number.EPSILON\n        }\n        // update camera\n        this.camera.updateProjectionMatrix()\n        this.camera.updateMatrixWorld()\n        // update frustum\n        const tmpPoint = new Vector3()\n        tmpPoint.copy(startPoint)\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x)\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y)\n        endPoint.x = Math.max(startPoint.x, endPoint.x)\n        endPoint.y = Math.min(startPoint.y, endPoint.y)\n\n        const vecNear = new Vector3()\n        const vecTopLeft = new Vector3()\n        const vecTopRight = new Vector3()\n        const vecDownRight = new Vector3()\n        const vecDownLeft = new Vector3()\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld)\n        vecTopLeft.copy(tmpPoint)\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0)\n        vecDownRight.copy(endPoint)\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0)\n\n        vecTopLeft.unproject(this.camera)\n        vecTopRight.unproject(this.camera)\n        vecDownRight.unproject(this.camera)\n        vecDownLeft.unproject(this.camera)\n\n        const vectemp1 = new Vector3()\n        const vectemp2 = new Vector3()\n        const vectemp3 = new Vector3()\n        vectemp1.copy(vecTopLeft).sub(vecNear)\n        vectemp2.copy(vecTopRight).sub(vecNear)\n        vectemp3.copy(vecDownRight).sub(vecNear)\n        vectemp1.normalize()\n        vectemp2.normalize()\n        vectemp3.normalize()\n\n        const deep = Number.MAX_VALUE\n        vectemp1.multiplyScalar(deep)\n        vectemp2.multiplyScalar(deep)\n        vectemp3.multiplyScalar(deep)\n        vectemp1.add(vecNear)\n        vectemp2.add(vecNear)\n        vectemp3.add(vecNear)\n\n        const frustum = new Frustum()\n        const planes = frustum.planes\n\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight)\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight)\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear)\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear)\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft)\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1)\n        planes[5].normal.multiplyScalar(-1)\n\n        let entities: Selectable[] = GameState.raiders.filter((r) => frustum.containsPoint(r.getSelectionCenter()))\n        if (entities.length < 1) entities = GameState.buildings.filter((b) => frustum.containsPoint(b.getSelectionCenter()))\n        GameState.selectEntities(entities)\n    }\n\n    setupScene(ambientColor: Color) {\n        this.scene = new Scene()\n\n        this.ambientLight = new AmbientLight(ambientColor, 0.4)\n        this.scene.add(this.ambientLight)\n\n        this.cursorTorchlight = new PointLight(0xffffff, 1.5, 4, 1)\n        this.cursorTorchlight.distance *= TILESIZE\n        this.scene.add(this.cursorTorchlight)\n\n        this.scene.add(this.buildMarker.group)\n    }\n\n    startScene() {\n        this.debugHelper.show()\n        this.renderInterval = setInterval(() => {\n            this.animRequest = requestAnimationFrame(() => {\n                this.debugHelper.renderStart()\n                this.renderer.render(this.scene, this.camera)\n                this.debugHelper.renderDone()\n            })\n        }, 1000 / this.maxFps)\n    }\n\n    disposeScene() {\n        this.debugHelper.hide()\n        this.renderInterval = clearIntervalSafe(this.renderInterval)\n        if (this.animRequest) {\n            cancelAnimationFrame(this.animRequest)\n            this.animRequest = null\n        }\n        this.terrain?.dispose()\n        this.terrain = null\n        SceneManager.meshRegistry.forEach(mesh => mesh.dispose())\n        SceneManager.meshRegistry = []\n    }\n\n    static registerMesh(animatedMesh: AnimatedMesh): Mesh {\n        this.meshRegistry.push(animatedMesh)\n        return animatedMesh.mesh\n    }\n\n}\n","import { AnimSubObj } from './AnimSubObj'\n\nexport class AnimClip {\n\n    looping: boolean = false\n    transcoef: number = 1\n    firstFrame: number = null\n    lastFrame: number = null\n    framesPerSecond: number = null\n    bodies: AnimSubObj[] = []\n\n}\n","import { Euler, MathUtils, Object3D, Vector3 } from 'three'\nimport degToRad = MathUtils.degToRad\n\nexport class AnimSubObj {\n\n    name: string = ''\n    filename: string = ''\n    relPos: Vector3[] = []\n    relRot: Euler[] = []\n    relScale: Vector3[] = []\n    opacity: number[] = []\n    parentObjInd: number = null\n    model: Object3D = null\n\n    radVec(degX: number, degY: number, degZ: number) {\n        return new Euler(degToRad(degY), degToRad(degX), degToRad(degZ), 'YXZ')\n    }\n\n    setFrameAndFollowing(animationFrameIndex: number, lastFrame: number, infos: number[]) {\n        this.relPos[animationFrameIndex] = new Vector3(infos[0], infos[1], infos[2])\n        this.relRot[animationFrameIndex] = this.radVec(infos[3], infos[4], infos[5])\n        this.relScale[animationFrameIndex] = new Vector3(infos[6], infos[7], infos[8])\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.relPos[c] = this.relPos[animationFrameIndex]\n            this.relRot[c] = this.relRot[animationFrameIndex]\n            this.relScale[c] = this.relScale[animationFrameIndex]\n        }\n    }\n\n    setOpacityAndFollowing(animationFrameIndex: number, lastFrame: number, value: number) {\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.opacity[c] = value\n        }\n    }\n\n}\n","/**\n * @author Scarabol https://github.com/scarabol\n *\n * This loader loads LWSC files exported from LW\n *\n * File format description: http://www.martinreddy.net/gfx/3d/LWSC.txt\n */\n\nimport { Group } from 'three'\nimport { getFilename } from '../core/Util'\nimport { AnimClip } from '../game/model/anim/AnimClip'\nimport { AnimSubObj } from '../game/model/anim/AnimSubObj'\nimport { SceneManager } from '../game/SceneManager'\nimport { LWOLoader } from './LWOLoader'\nimport { ResourceManager } from './ResourceManager'\n\nexport class LWSCLoader {\n\n    path: string = ''\n    verbose: boolean = false\n    animationClip: AnimClip = new AnimClip()\n    lines: string[] = []\n    lineIndex: number = 0\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('Using verbose mode')\n    }\n\n    parse(content): AnimClip {\n        this.lines = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map(l => l.trim())\n\n        if (this.lines[0] !== 'LWSC') {\n            throw 'Invalid start of file! Expected \\'LWSC\\' in first line'\n        }\n\n        const sceneFileVersion = parseInt(this.lines[1], 10)\n        if (sceneFileVersion !== 1) {\n            console.warn('Unexpected scene file version: ' + sceneFileVersion)\n        }\n\n        for (this.lineIndex = 2; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) continue // empty line: object separator\n            const key = line.split(' ')[0]\n            if (key === 'FirstFrame') {\n                this.parseFrameBlock()\n            } else if (key === 'AddNullObject' || key === 'LoadObject') {\n                this.parseObjectBlock()\n                if (this.verbose) console.log(this.animationClip.bodies[this.animationClip.bodies.length - 1])\n            } else if (line.startsWith('PreviewFirstFrame ') || line.startsWith('PreviewLastFrame ') || line.startsWith('PreviewFrameStep ')) {\n                // only used in editor\n            } else {\n                // console.warn('Unexpected line: ' + line); // TODO analyze remaining entries\n            }\n        }\n\n        if (this.verbose) console.log(this.animationClip)\n        return this.animationClip\n    }\n\n    parseLine(line: string): string[] {\n        return line.split(' ').filter((l: string) => l !== '')\n    }\n\n    parseFrameBlock() {\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            const line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'FirstFrame') {\n                this.animationClip.firstFrame = parseInt(value)\n            } else if (key === 'LastFrame') {\n                this.animationClip.lastFrame = parseInt(value)\n            } else if (key === 'FrameStep') {\n                const frameStep = parseInt(value)\n                if (frameStep !== 1) console.error('Animation frameStep has unexpected value: ' + frameStep)\n            } else if (key === 'FramesPerSecond') {\n                this.animationClip.framesPerSecond = parseInt(value)\n            } else if (key === 'PreviewFirstFrame' || key === 'PreviewLastFrame' || key === 'PreviewFrameStep') {\n                // only used in editor\n            } else {\n                console.warn('Unexpected key in frame block')\n            }\n        }\n        console.error('Parsing block reached content end')\n    }\n\n    parseObjectBlock(): AnimSubObj {\n        const subObj = new AnimSubObj()\n        this.animationClip.bodies.push(subObj)\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'AddNullObject' || key === 'LoadObject') {\n                if (key === 'LoadObject') {\n                    const filename = getFilename(value)\n                    subObj.name = filename.slice(0, filename.length - '.lwo'.length)\n                    subObj.filename = this.path + filename\n                    const lwoBuffer = ResourceManager.getResource(subObj.filename)\n                    subObj.model = SceneManager.registerMesh(new LWOLoader(this.path).parse(lwoBuffer))\n                } else if (key === 'AddNullObject') {\n                    subObj.name = value\n                    subObj.model = new Group()\n                } else {\n                    throw 'Unexpected line: ' + line\n                }\n            } else if (key === 'ObjectMotion') {\n                let line = this.lines[++this.lineIndex]\n                const lenInfos = parseInt(line)\n                line = this.lines[++this.lineIndex]\n                const lenFrames = parseInt(line)\n                this.lineIndex++\n                for (let c = 0; c < lenFrames; c++) {\n                    let line = this.lines[this.lineIndex + c * 2]\n                    if (line.startsWith('EndBehavior')) break\n                    const infos = line.split(' ').map(Number)\n                    if (infos.length !== lenInfos) console.warn('Number of infos (' + infos.length + ') does not match if specified count (' + lenInfos + ')')\n                    line = this.lines[this.lineIndex + c * 2 + 1]\n                    const animationFrameIndex = parseInt(line.split(' ')[0]) // other entries in line should be zeros\n                    subObj.setFrameAndFollowing(animationFrameIndex, this.animationClip.lastFrame, infos)\n                }\n                this.lineIndex += lenFrames * 2\n            } else if (key === 'ParentObject') {\n                subObj.parentObjInd = Number(value) - 1 // index is 1 based\n                if (this.verbose) console.log('parent obj ind is: ' + subObj.parentObjInd)\n            } else if (key === 'ShowObject' || key === 'LockedChannels') {\n                // only used in editor\n            } else if (key === 'ShadowOptions') { // TODO implement shadow options (bitwise)\n                // 0 - Self Shadow\n                // 1 - Cast Shadow\n                // 2 - Receive Shadow\n            } else if (key === 'ObjDissolve') {\n                if (value == '(envelope)') {\n                    let line = this.lines[++this.lineIndex]\n                    const numOfInformationChannels = parseInt(line)\n                    if (numOfInformationChannels !== 1) console.error('Number of information channels for opacity is not 1, but: ' + numOfInformationChannels)\n                    line = this.lines[++this.lineIndex]\n                    const numOfKeyframes = parseInt(line)\n                    this.lineIndex++\n                    for (let c = 0; c < numOfKeyframes; c++) {\n                        let line = this.lines[this.lineIndex + c * 2]\n                        if (line.startsWith('EndBehavior')) break\n                        const opacity = 1 - Number(line)\n                        line = this.lines[this.lineIndex + c * 2 + 1]\n                        const frameNum = Number(line.split(' ')[0])\n                        subObj.setOpacityAndFollowing(frameNum, this.animationClip.lastFrame, opacity)\n                    }\n                    this.lineIndex += numOfKeyframes * 2\n                } else {\n                    const opacity = 1 - Number(value)\n                    subObj.setOpacityAndFollowing(0, this.animationClip.lastFrame, opacity)\n                }\n            } else {\n                // console.warn('Unhandled line in object block: ' + line + '; key: ' + key + '; value: ' + value) // TODO analyze unhandled lines\n            }\n        }\n        console.error('Parsing block reached content end')\n        return subObj\n    }\n\n}\n","export function getPath(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n","import { AnimationEntityType } from '../game/model/anim/AnimationEntityType'\nimport { AnimClip } from '../game/model/anim/AnimClip'\nimport { SceneManager } from '../game/SceneManager'\nimport { LWOLoader } from './LWOLoader'\nimport { LWSCLoader } from './LWSCLoader'\nimport { ResourceManager } from './ResourceManager'\nimport { getPath, iGet } from './wadworker/WadUtil'\n\nexport class AnimEntityLoader {\n\n    static loadModels(url, root): AnimationEntityType {\n        const path = getPath(url)\n\n        const entityType = new AnimationEntityType()\n\n        entityType.carryNullName = iGet(root, 'CarryNullName')\n        entityType.depositNullName = iGet(root, 'DepositNullName')\n        entityType.toolNullName = iGet(root, 'ToolNullName')\n\n        // TODO load other poly quality models (if available)\n        // let mediumPoly = iGet(root, 'MediumPoly');\n        // if (mediumPoly) {\n        //     Object.keys(mediumPoly).forEach((key) => {\n        //         const polyname = mediumPoly[key];\n        //         const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //         const polyfile = path + polyname + '.lwo';\n        //         console.log('polyfile');\n        //         console.log(polyfile);\n        //         // new LWOLoader().load(polyfile, (model) => {\n        //         //     mediumPoly[polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //         // }, undefined, () => {\n        //         //     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //         // });\n        //     });\n        //     Object.keys(mediumPoly).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete mediumPoly[polykey]);\n        // }\n\n        const highPoly = iGet(root, 'highpoly')\n        if (highPoly) {\n            entityType.highPoly = {}\n            Object.keys(highPoly).forEach((key) => {\n                const polyname = highPoly[key] + '.lwo'\n                const polykey = key.startsWith('!') ? key.slice(1) : key\n                const lwoBuffer = ResourceManager.getResource(path + polyname)\n                entityType.highPoly[polykey] = SceneManager.registerMesh(new LWOLoader(path).parse(lwoBuffer))\n            })\n        }\n\n        // let fPoly = (root)['fppoly'];\n        // if (fPoly) {\n        //     Object.keys(fPoly).forEach((camera) => {\n        //         Object.keys(fPoly[camera]).forEach((key) => {\n        //             const polyname = fPoly[camera][key];\n        //             const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //             if (polyname !== 'null') {\n        //                 const polyfile = path + polyname + '.lwo';\n        //                 new LWOLoader().load(polyfile, (model) => {\n        //                     fPoly[camera][polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //                 }, undefined, () => {\n        //                     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //                 });\n        //             } else {\n        //                 fPoly[camera][key] = {polyname: polyname, polyfile: null, model: new Group()};\n        //             }\n        //         });\n        //         Object.keys(fPoly[camera]).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete fPoly[polykey][camera]);\n        //     });\n        // }\n\n        const activities = iGet(root, 'Activities')\n        if (activities) {\n            Object.keys(activities).forEach((activity) => {\n                try {\n                    let keyname = iGet(activities, activity)\n                    const act: { file: string, transcoef: number, lwsfile: boolean, animation: AnimClip } = iGet(root, keyname)\n                    const file = iGet(act, 'FILE')\n                    const isLws = iGet(act, 'LWSFILE') === true\n                    const transcoef = iGet(act, 'TRANSCOEF')\n                    const looping = iGet(act, 'LOOPING') === true\n                    if (isLws) {\n                        const content = ResourceManager.getResource(path + file + '.lws')\n                        act.animation = new LWSCLoader(path).parse(content)\n                        act.animation.looping = looping\n                        act.animation.transcoef = transcoef ? Number(transcoef) : 1\n                        entityType.activities.set(activity.toLowerCase(), act)\n                    } else {\n                        console.error('Found activity which is not an LWS file')\n                    }\n                } catch (e) {\n                    console.error(e)\n                    console.log(root)\n                    console.log(activities)\n                    console.log(activity)\n                }\n            })\n        }\n\n        return entityType\n    }\n\n}\n","export enum WorkerMessageType {\n\n    MSG,\n    CFG,\n    CACHE_MISS,\n    SFX,\n    ASSET,\n    DONE,\n\n}\n","import { createContext, createDummyImgData, getPixel, setPixel } from './ImageHelper'\n\nexport class BitmapFont {\n\n    charHeight: number\n    letters: ImageData[] = []\n\n    constructor(fontImageData: ImageData, cols = 10, rows = 19) { // font images always consist of 10 columns and 19 rows with last row empty\n        // actually chars are font dependent and have to be externalized in future\n        // maybe CP850 was used... not sure, doesn't fit...\n        const chars = [' ', '!', '\"', '#', '$', '%', '⌵', '`', '(', ')',\n            '*', '+', ',', '-', '.', '/', '0', '1', '2', '3',\n            '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',\n            '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n            'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n            'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[',\n            '\\\\', ']', '^', '_', '\\'', 'a', 'b', 'c', 'd', 'e',\n            'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\n            'z', 'Ä', 'Å', 'Á', 'À', 'Â', 'Ã', 'Ą', 'ä', 'å',\n            'á', 'à', 'â', 'ã', 'ą', 'Ë', 'E̊', 'É', 'È', 'É',\n            'Ę', 'ë', 'e̊', 'é', 'è', 'e̊', 'ę̊', '', '', '',\n            '', '', '', '', '', 'Ö', '', '', '', '',\n            'ö', '', '', '', '', 'Ü', '', '', '', 'ü',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', 'ß', '', '', '', 'Ñ', '', 'ñ',\n            '',\n        ] // XXX complete this character list\n\n        const maxCharWidth = fontImageData.width / cols\n        this.charHeight = fontImageData.height / rows\n\n        function getActualCharacterWidth(imgData) {\n            for (let y = 0; y < imgData.height / rows; y++) { // find non-empty row first\n                let rowPixelIndex = y * 4 * imgData.width\n                if (imgData.data[rowPixelIndex] !== 255 && imgData.data[rowPixelIndex + 2] !== 255) { // red/blue pixels indicate end of character\n                    for (let x = 0; x < maxCharWidth; x++) {\n                        let colPixelIndex = x * 4\n                        if (imgData.data[colPixelIndex] === 255 || imgData.data[colPixelIndex + 2] === 255) { // red/blue pixels indicate end of character\n                            return x\n                        }\n                    }\n                    return maxCharWidth\n                }\n            }\n            return 0\n        }\n\n        for (let i = 0; i < chars.length; i++) {\n            let imgData = this.extractData(fontImageData, (i % 10) * maxCharWidth, Math.floor(i / 10) * this.charHeight, maxCharWidth, this.charHeight)\n            let actualWidth = getActualCharacterWidth(imgData)\n            if (actualWidth > 0) {\n                imgData = this.extractData(imgData, 0, 0, actualWidth, this.charHeight)\n            } else {\n                imgData = createDummyImgData(maxCharWidth, this.charHeight)\n            }\n            this.letters[chars[i]] = imgData\n        }\n    }\n\n    extractData(imgData, startX, startY, width, height): ImageData {\n        const alpha = getPixel(imgData, startX + width - 1, startY + height - 1)\n        const result = new ImageData(width, height)\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const p = getPixel(imgData, startX + x, startY + y)\n                if (p.r === alpha.r && p.g === alpha.g && p.b === alpha.b) p.a = 0 // apply alpha channel\n                setPixel(result, x, y, p.r, p.g, p.b, p.a)\n            }\n        }\n        return result\n    }\n\n    createTextImage(text: string, maxWidth?: number, autoCenter: boolean = true): HTMLCanvasElement {\n        if (text === undefined || text === null || text.length < 1) {\n            // empty text requested, context with width 0 is not allowed, but 1 with alpha is close enough\n            return createContext(1, 1).canvas\n        }\n        text = text.replace(/_/g, ' ')\n        const rows = this.determineRows(text, maxWidth)\n        const width = Math.max(...(rows.map(r => r.width)))\n        const result = new ImageData(width, this.charHeight * rows.length)\n        rows.forEach((row, index) => {\n            const rowX = autoCenter ? Math.round((width - row.width) / 2) : 0\n            const rowY = index * this.charHeight\n            let letterX = 0\n            for (let c = 0; c < row.text.length; c++) {\n                const letterImgData = this.letters[row.text.charAt(c)]\n                if (letterImgData) {\n                    for (let x = letterX; x < letterX + letterImgData.width; x++) {\n                        for (let y = 0; y < letterImgData.height; y++) {\n                            const p = getPixel(letterImgData, x - letterX, y)\n                            setPixel(result, rowX + x, rowY + y, p.r, p.g, p.b, p.a)\n                        }\n                    }\n                    letterX += letterImgData.width\n                } // missing letter issue already reported above\n            }\n        })\n        const img: CanvasRenderingContext2D = createContext(result.width, result.height)\n        img.putImageData(result, 0, 0)\n        return img.canvas\n    }\n\n    private determineRows(text: string, maxWidth?: number): { text: string, width: number }[] {\n        const spaceWidth = this.letters[' '].width\n        const rows: { text: string, width: number }[] = []\n        let rowText = ''\n        let rowWidth = 0\n        text.split(' ').map(word => {\n            let wordWidth = 0\n            for (let c = 0; c < word.length; c++) {\n                const letter = word.charAt(c)\n                const letterImg = this.letters[letter]\n                if (letterImg) {\n                    wordWidth += letterImg.width\n                } else {\n                    console.error('Letter \\'' + letter + '\\' not found in charset! Ignoring it')\n                }\n            }\n            if (rowWidth > 0) {\n                if (!maxWidth || rowWidth + spaceWidth + wordWidth < maxWidth) {\n                    rowText += ' ' + word\n                    rowWidth += spaceWidth + wordWidth\n                } else {\n                    rows.push({text: rowText, width: rowWidth})\n                    rowText = word\n                    rowWidth = wordWidth\n                }\n            } else {\n                rowText += word\n                rowWidth += wordWidth\n            }\n            return wordWidth\n        })\n        if (rowWidth > 0) rows.push({text: rowText, width: rowWidth})\n        return rows\n    }\n}\n","import { GameStatsCfg } from '../cfg/GameStatsCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { createContext, createDummyImgData } from '../core/ImageHelper'\nimport { iGet } from './wadworker/WadUtil'\n\nexport class ResourceCache {\n\n    static configuration: any = {}\n    static resourceByName: Map<string, any> = new Map()\n    static fontCache: Map<string, BitmapFont> = new Map()\n    static stats: GameStatsCfg\n\n    static cfg(...keys: string[]): any {\n        return iGet(this.configuration, ...keys)\n    }\n\n    static getResource(resourceName: string): any {\n        const lName = resourceName ? resourceName.toString().toLowerCase() : null\n        return this.resourceByName.get(lName) || null\n    }\n\n    static getImageData(imageName: string): ImageData {\n        if (!imageName) throw 'imageName must not be undefined, null or empty - was ' + imageName\n        return this.resourceByName.getOrUpdate((imageName.toLowerCase()), () => {\n            console.error('Image \\'' + imageName + '\\' unknown! Using placeholder image instead')\n            return createDummyImgData(64, 64)\n        })\n    }\n\n    static getImage(imageName: string): HTMLCanvasElement {\n        const imgData = this.getImageData(imageName)\n        const context: CanvasRenderingContext2D = createContext(imgData.width, imgData.height)\n        context.putImageData(imgData, 0, 0)\n        return context.canvas\n    }\n\n    static getImageOrNull(imageName: string): HTMLCanvasElement | null {\n        return imageName ? this.getImage(imageName) : null\n    }\n\n    static getBitmapFont(name: string): BitmapFont {\n        return this.fontCache.getOrUpdate(name, () => {\n            const fontImageData = this.getResource(name)\n            if (!fontImageData) throw 'Could not load font image data for: ' + name\n            return new BitmapFont(fontImageData)\n        })\n    }\n\n    static getDefaultFont() {\n        return this.getBitmapFont('Interface/Fonts/Font5_Hi.bmp')\n    }\n\n}\n","export class InitLoadingMessage {\n\n    wad0FileUrl: string\n    wad1FileUrl: string\n\n    constructor(wad0FileUrl: string, wad1FileUrl: string) {\n        this.wad0FileUrl = wad0FileUrl\n        this.wad1FileUrl = wad1FileUrl\n    }\n\n}\n","import { RepeatWrapping, Texture } from 'three'\nimport { createDummyImgData } from '../core/ImageHelper'\nimport { getFilename } from '../core/Util'\nimport { AnimationEntityType } from '../game/model/anim/AnimationEntityType'\nimport { AnimEntityLoader } from './AnimEntityLoader'\nimport { ResourceCache } from './ResourceCache'\nimport { InitLoadingMessage } from './wadworker/InitLoadingMessage'\nimport { WadWorkerMessage } from './wadworker/WadWorkerMessage'\nimport { WorkerMessageType } from './wadworker/WorkerMessageType'\n\nexport class ResourceManager extends ResourceCache {\n\n    static worker: Worker = new Worker(new URL('./wadworker/WadWorker', import.meta.url))\n\n    static startLoadingFromCache() {\n        return this.startLoading(null)\n    }\n\n    static startLoadingFromUrl(wad0Url: string, wad1Url: string) {\n        return this.startLoading(new InitLoadingMessage(wad0Url, wad1Url))\n    }\n\n    private static startLoading(msg: InitLoadingMessage) {\n        this.worker.onmessage = (event) => {\n            const msg: WadWorkerMessage = event.data\n            if (msg.type === WorkerMessageType.ASSET) {\n                this.resourceByName.set(msg.assetName.toLowerCase(), msg.assetObj)\n                const alphaIndexMatch = msg.assetName.toLowerCase().match(/(.*a)\\d\\d\\d(_.+)/)\n                if (alphaIndexMatch) this.resourceByName.set(alphaIndexMatch[1] + alphaIndexMatch[2], msg.assetObj)\n                this.onAssetLoaded()\n            } else if (msg.type === WorkerMessageType.MSG) {\n                this.onMessage(msg.text)\n            } else if (msg.type === WorkerMessageType.CFG) {\n                this.configuration = msg.cfg\n                this.stats = msg.stats\n                this.onInitialLoad(msg.totalResources)\n            } else if (msg.type === WorkerMessageType.CACHE_MISS) {\n                this.onCacheMissed()\n            } else if (msg.type === WorkerMessageType.DONE) {\n                console.log('Loading of about ' + msg.totalResources + ' assets complete! Total load time: ' + msg.loadingTimeSeconds + ' seconds.')\n                this.onLoadDone()\n            }\n        }\n        this.worker.postMessage(msg)\n    }\n\n    static onMessage: (msg: string) => any = (msg: string) => {\n        console.log(msg)\n    }\n\n    static onCacheMissed: () => any = () => {\n        console.log('Worker missed cache')\n    }\n\n    static onInitialLoad: (totalResources: number) => any = () => {\n        console.log('Initial loading done.')\n    }\n\n    static onAssetLoaded: () => any = () => {\n    }\n\n    static onLoadDone: () => any = () => {\n    }\n\n    static filterTextureSequenceNames(basename: string): string[] {\n        const lBasename = basename.toLowerCase()\n        const result = []\n        this.resourceByName.forEach((res, name) => {\n            if (name.startsWith(lBasename)) result.push(name)\n        })\n        if (result.length > 0) {\n            return result\n        } else if (!lBasename.startsWith('world/shared/')) {\n            return this.filterTextureSequenceNames('world/shared/' + getFilename(basename))\n        } else {\n            console.warn('Texture sequence not found: ' + basename)\n            return null\n        }\n    }\n\n    static getTexture(textureName): Texture {\n        if (!textureName || textureName.length === 0) {\n            throw 'textureName must not be undefined, null or empty - was ' + textureName\n        }\n        const lTextureName = textureName.toLowerCase()\n        const imgData = this.resourceByName.getOrUpdate(lTextureName, () => {\n            const lSharedTextureName = 'world/shared/' + getFilename(lTextureName)\n            return this.resourceByName.getOrUpdate(lSharedTextureName, () => {\n                console.warn('Texture \\'' + textureName + '\\' (' + lTextureName + ', ' + lSharedTextureName + ') unknown! Using placeholder texture instead')\n                return createDummyImgData(64, 64)\n            })\n        })\n        const texture = new Texture(imgData, Texture.DEFAULT_MAPPING, RepeatWrapping, RepeatWrapping)\n        texture.needsUpdate = true\n        return texture\n    }\n\n    static getAnimationEntityType(aeFilename: string): AnimationEntityType {\n        let cfgRoot = this.getResource(aeFilename)\n        if (!cfgRoot) throw 'Could not get animation entity type for: ' + aeFilename\n        return AnimEntityLoader.loadModels(aeFilename, cfgRoot)\n    }\n\n}\n","// noinspection JSUnusedLocalSymbols\n\n/**\n * @author Marcus-Bizal https://github.com/marcbizal\n * patched by Scarabol\n *\n * This loader loads LWOB files exported from LW6.\n *\n * Support\n *  -\n */\n\nimport { AdditiveBlending, BufferAttribute, BufferGeometry, Color, DoubleSide, Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { decodeFilepath, decodeString, getFilename } from '../core/Util'\nimport { SEQUENCE_TEXTURE_FRAMERATE } from '../params'\nimport { AnimatedMesh } from './AnimatedMesh'\nimport { ResourceManager } from './ResourceManager'\n\n// HEADER SPEC //\nconst LWO_MAGIC = 0x4C574F42 // \"LWOB\"\nconst OFF_MAGIC = 8\n\n/********************/\n/* TYPE SIZES START */\n/********************/\n\nconst ID4_SIZE = 4\nconst I1_SIZE = 1\nconst I2_SIZE = 2\nconst I4_SIZE = 4\nconst F4_SIZE = 4\n\nconst COL4_SIZE = 4\nconst VEC12_SIZE = 12\nconst IP2_SIZE = 2\nconst FP4_SIZE = 4\nconst DEG4_SIZE = 4\n\n/********************/\n/*  TYPE SIZES END  */\n/********************/\n\n/*********************/\n/* CHUNK TYPES START */\n/*********************/\n\nconst LWO_FORM = 0x464F524D\nconst LWO_PNTS = 0x504E5453\nconst LWO_SFRS = 0x53524653\nconst LWO_POLS = 0x504F4C53\nconst LWO_CRVS = 0x43525653\nconst LWO_PCHS = 0x50434853\nconst LWO_SURF = 0x53555246\n\nconst CHUNK_HEADER_SIZE = 8\nconst SUBCHUNK_HEADER_SIZE = 6\n\n/*********************/\n/*  CHUNK TYPES END  */\n/*********************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\nconst SURF_COLR = 0x434F4C52\nconst SURF_FLAG = 0x464C4147\n\n// Base Shading Values (Fixed Point)\nconst SURF_LUMI = 0x4C554D49\nconst SURF_DIFF = 0x44494646\nconst SURF_SPEC = 0x53504543\nconst SURF_REFL = 0x5245464C\nconst SURF_TRAN = 0x5452414E\n\n// Base Shading Values (Floating Point)\nconst SURF_VLUM = 0x564C554D\nconst SURF_VDIF = 0x56444946\nconst SURF_VSPC = 0x56535043\nconst SURF_VRFL = 0x5646524C\nconst SURF_VTRN = 0x5654524E\n\nconst SURF_GLOS = 0x474C4F53\nconst SURF_RFLT = 0x52464C54\nconst SURF_RIMG = 0x52494D47\nconst SURF_RIND = 0x52494E44\nconst SURF_EDGE = 0x45444745\nconst SURF_SMAN = 0x534D414E\n\n/**************************/\n/*  SURF DEFINITIONS END  */\n/**************************/\n\n/*****************************/\n/* TEXTURE DEFINITIONS START */\n/*****************************/\n\n// Start of Definition\nconst SURF_CTEX = 0x43544558\nconst SURF_DTEX = 0x44544558\nconst SURF_STEX = 0x53544558\nconst SURF_RTEX = 0x52544558\nconst SURF_TTEX = 0x54544558\nconst SURF_LTEX = 0x4C544558\nconst SURF_BTEX = 0x42544558\n\n// Flags\nconst SURF_TFLG = 0x54464C47\n\n// Location and Size\nconst SURF_TSIZ = 0x5453495A\nconst SURF_TCTR = 0x54435452\nconst SURF_TFAL = 0x5446414C\nconst SURF_TVEL = 0x5456454C\n\n// Color\nconst SURF_TCLR = 0x54434C52\n\n// Value\nconst SURF_TVAL = 0x54434C52\n\n// Bump Amplitude\nconst SURF_TAMP = 0x54414D50\n\n// Image Map\nconst SURF_TIMG = 0x54494D47\n\n// Image Alpha\nconst SURF_TALP = 0x54414C50\n\n// Image Wrap Options\nconst SURF_TWRP = 0x54575250\n\n// Antialiasing Strength\nconst SURF_TAAS = 0x54414153\n\n// Texture Opacity\nconst SURF_TOPC = 0x544F5043\n\n/*****************************/\n/*  TEXTURE DEFINITIONS END  */\n/*****************************/\n\n/*************************/\n/* FLAG DEFINITION START */\n/*************************/\n\nconst LUMINOUS_BIT = 1\nconst OUTLINE_BIT = 2\nconst SMOOTHING_BIT = 4\nconst COLORHIGHLIGHTS_BIT = 8\nconst COLORFILTER_BIT = 16\nconst OPAQUEEDGE_BIT = 32\nconst TRANSPARENTEDGE_BIT = 64\nconst SHARPTERMINATOR_BIT = 128\nconst DOUBLESIDED_BIT = 256\nconst ADDITIVE_BIT = 512\nconst SHADOWALPHA_BIT = 1024\n\n/*************************/\n/*  FLAG DEFINITION END  */\n/*************************/\n\n/*************************/\n/* TFLG DEFINITION START */\n/*************************/\n\nconst XAXIS_BIT = 1\nconst YAXIS_BIT = 2\nconst ZAXIS_BIT = 4\nconst WORLDCOORDS_BIT = 8\nconst NEGATIVEIMAGE_BIT = 16\nconst PIXELBLENDING_BIT = 32\nconst ANTIALIASING_BIT = 64\n\n/*************************/\n/*  TFLG DEFINITION END  */\n\n/*************************/\n\nfunction getVector3AtOffset(view, offset) {\n    let vector = new Vector3()\n    vector.x = view.getFloat32(offset)\n    vector.y = view.getFloat32(offset + F4_SIZE)\n    vector.z = view.getFloat32(offset + (F4_SIZE * 2))\n    return vector\n}\n\nfunction planarMapUVS(geometry, vertices, uvs, indices, materialIndex, size, center, flags) {\n    // Check to ensure that one of the flags is set, if not throw an error.\n    const mask = XAXIS_BIT | YAXIS_BIT | ZAXIS_BIT\n    if (flags & mask) {\n        for (let group of geometry.groups) {\n            if (group.materialIndex !== materialIndex) continue\n\n            for (let i = group.start; i < group.start + group.count; i++) {\n\n                let vertexIndex = indices[i] * 3\n                let x = vertices[vertexIndex] - center.x\n                let y = vertices[vertexIndex + 1] - center.y\n                let z = vertices[vertexIndex + 2] - center.z\n\n                let uvIndex = indices[i] * 2\n                let u = 0\n                let v = 0\n\n                if (flags & XAXIS_BIT) {\n                    u = z / size.z + 0.5\n                    v = y / size.y + 0.5\n                } else if (flags & YAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = z / size.z + 0.5\n                } else if (flags & ZAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = y / size.y + 0.5\n                }\n\n                uvs[uvIndex] = u\n                uvs[uvIndex + 1] = v\n            }\n        }\n    } else {\n        // console.warn(\"LWOLoader.planarMapUVS: No axis bit is set!\"); // XXX what is this about\n    }\n}\n\nexport class LWOLoader {\n\n    COUNTER_CLOCKWISE: false\n\n    path: string = ''\n    verbose: boolean = false\n    materials: MeshPhongMaterial[] = []\n    geometry: BufferGeometry = new BufferGeometry()\n    vertices: Float32Array = null\n    indices: Uint16Array = null\n    uvs: Float32Array = null\n    sequenceIntervals = []\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('LWO path: ' + this.path)\n    }\n\n    parsePoints(view, chunkOffset, chunkSize) {\n        if (chunkSize % VEC12_SIZE !== 0) {\n            console.error('LWOLoader.parse: F12 does not evenly divide into chunk size (' + chunkSize + '). Possible corruption.')\n            return\n        }\n\n        let numVertices = (chunkSize / F4_SIZE) / 3\n        this.vertices = new Float32Array(numVertices * 3)\n        this.uvs = new Float32Array(numVertices * 2)\n\n        for (let i = 0; i < numVertices; i++) {\n            let vertexIndex = i * 3\n            let vertexOffset = vertexIndex * F4_SIZE\n            this.vertices[vertexIndex] = view.getFloat32(chunkOffset + vertexOffset) \t\t\t\t// x\n            this.vertices[vertexIndex + 1] = view.getFloat32(chunkOffset + vertexOffset + F4_SIZE) \t// y\n            this.vertices[vertexIndex + 2] = view.getFloat32(chunkOffset + vertexOffset + (F4_SIZE * 2)) \t// z\n        }\n    }\n\n    parseSurfaceNames(buffer, chunkOffset, chunkSize) {\n        let textChunk = new TextDecoder().decode(new Uint8Array(buffer, chunkOffset, chunkSize))\n        let surfaceNames = textChunk.split('\\0').filter(function (s) {\n            return s !== ''\n        })\n\n        for (let i = 0; i < surfaceNames.length; i++) {\n            const new_material = new MeshPhongMaterial()\n            new_material.name = surfaceNames[i]\n            new_material.side = DoubleSide\n\n            this.materials.push(new_material)\n        }\n        if (this.verbose) console.log('LWO contains ' + this.materials.length + ' materials with following names: ' + surfaceNames)\n    }\n\n    parsePolygons(view, chunkOffset, chunkSize) {\n        // Gather some initial data so that we can get the proper size\n        let totalNumIndices = 0\n        let offset = 0\n        while (offset < chunkSize) {\n            const numIndices = view.getInt16(chunkOffset + offset)\n            const materialIndex = view.getInt16(chunkOffset + offset + 2 + (numIndices * 2))\n\n            this.geometry.addGroup(totalNumIndices, (numIndices - 2) * 3, materialIndex - 1)\n\n            totalNumIndices += (numIndices - 2) * 3\n            offset += 4 + (numIndices * 2)\n        }\n\n        offset = 0\n        let currentIndex = 0\n        this.indices = new Uint16Array(totalNumIndices)\n        while (offset < chunkSize) {\n            let numIndices = view.getInt16(chunkOffset + offset)\n\n            offset += 2\n\n            let faceIndices = new Int16Array(numIndices)\n            for (let i = 0; i <= numIndices; i++) {\n                faceIndices[i] = view.getInt16(chunkOffset + offset + (i * 2))\n            }\n\n            for (let i = 0; i < numIndices - 2; i++) {\n                if (this.COUNTER_CLOCKWISE) {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                } else {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                }\n            }\n\n            offset += 2 + (numIndices * 2)\n        }\n    }\n\n    parseSurface(view, buffer, chunkOffset, chunkSize) {\n        let offset = 0\n        while (view.getUint8(chunkOffset + offset) !== 0) offset++\n\n        let materialName = decodeString(new Uint8Array(buffer, chunkOffset, offset))\n        if (this.verbose) console.log('Parsing surface: ' + materialName)\n        let materialIndex = -1\n        let material: MeshPhongMaterial = null\n\n        let textureFlags = 0\n        let textureSize = new Vector3(0, 0, 0)\n        let textureCenter = new Vector3(0, 0, 0)\n        // let textureFalloff = new Vector3(0, 0, 0);\n        // let textureVelocity = new Vector3(0, 0, 0);\n\n        for (let i = 0; i < this.materials.length; i++) {\n            if (this.materials[i].name === materialName) {\n                materialIndex = i\n                material = this.materials[i]\n            }\n        }\n\n        if (!material) {\n            console.error('LWOLoader.parse: Surface in SURF chunk does not exist in SRFS')\n            return\n        }\n\n        material.shininess = 0\n\n        while (offset < chunkSize) {\n            const subchunkOffset = chunkOffset + offset\n            if (view.getUint8(subchunkOffset) === 0) {\n                offset++\n            } else {\n                const subchunkType = view.getInt32(subchunkOffset)\n                const subchunkSize = view.getInt16(subchunkOffset + ID4_SIZE)\n\n                if (this.verbose) console.log('Parsing subchunk ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n\n                switch (subchunkType) {\n                    case SURF_COLR:\n                        const colorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                        ]\n                        material.color = new Color().fromArray(colorArray)\n                        if (this.verbose) console.log('Material color (COLR): ' + colorArray.join(' '))\n                        break\n                    case SURF_FLAG:\n                        const flags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (FLAG): ' + flags.toString(2))\n                        // if (this.verbose && flags & LUMINOUS_BIT) console.warn('Flag is set but unhandled: luminous') // flag replaced with LUMI below\n                        if (this.verbose && flags & OUTLINE_BIT) console.warn('Flag is set but unhandled: outline')\n                        if (this.verbose && flags & SMOOTHING_BIT) console.warn('Flag is set but unhandled: smoothing')\n                        if (this.verbose && flags & COLORHIGHLIGHTS_BIT) console.warn('Flag is set but unhandled: colorHighlights')\n                        if (this.verbose && flags & COLORFILTER_BIT) console.warn('Flag is set but unhandled: colorFilter')\n                        if (this.verbose && flags & OPAQUEEDGE_BIT) console.warn('Flag is set but unhandled: opaqueEdge')\n                        if (this.verbose && flags & TRANSPARENTEDGE_BIT) console.warn('Flag is set but unhandled: transparentEdge')\n                        if (this.verbose && flags & SHARPTERMINATOR_BIT) console.warn('Flag is set but unhandled: sharpTerminator')\n                        if (flags & DOUBLESIDED_BIT) material.side = DoubleSide\n                        if (flags & ADDITIVE_BIT) {\n                            material.blending = AdditiveBlending\n                            material.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n                        }\n                        if (this.verbose && flags & SHADOWALPHA_BIT) console.warn('Flag is set but unhandled: shadowAlpha')\n                        break\n                    case SURF_EDGE:\n                        const edgeTransparencyThreshold = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Edge transparency threshold (0.0 to 1.0): ' + edgeTransparencyThreshold)\n                        break\n                    case SURF_LUMI:\n                        const luminosity = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.log('Luminosity (LUMI): ' + luminosity)\n                        material.emissiveIntensity = luminosity\n                        break\n                    case SURF_DIFF:\n                        const diffuse = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.log('Diffuse (DIFF): ' + diffuse)\n                        if (!diffuse) material.color = null\n                        break\n                    case SURF_SPEC:\n                        const specular = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        // material.specular = material.color.multiplyScalar(specular);\n                        if (this.verbose) console.warn('Specular (SPEC): ' + specular)\n                        break\n                    case SURF_REFL:\n                        let reflection = 0\n                        if (reflection === SURF_VRFL) {\n                            reflection = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            reflection = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        }\n                        material.reflectivity = reflection\n                        if (this.verbose) console.log('Reflectivity (REFL): ' + material.reflectivity)\n                        break\n                    case SURF_TRAN:\n                    case SURF_VTRN:\n                        let transparency = 0\n                        if (subchunkType === SURF_VTRN) {\n                            transparency = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            transparency = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        }\n                        material.opacity = 1 - transparency\n                        if (this.verbose) console.log('Opacity (TRAN/VTRN): ' + material.opacity)\n                        material.transparent = material.transparent || material.opacity < 1\n                        break\n                    case SURF_VLUM:\n                        const vLuminosity = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Luminosity (VLUM): ' + vLuminosity)\n                        material.emissiveIntensity = vLuminosity\n                        break\n                    case SURF_VDIF:\n                        let vDiffuse = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Diffuse (VDIF): ' + vDiffuse)\n                        // material.vertexColors = !!vDiffuse // XXX push vertex colors first\n                        break\n                    case SURF_VSPC:\n                        let vSpecular = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        // material.specular = material.color.multiplyScalar(vSpecular);\n                        if (this.verbose) console.warn('Specular (VSPC): ' + vSpecular)\n                        break\n                    case SURF_TFLG:\n                        textureFlags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (TFLG): ' + textureFlags.toString(2))\n                        if (this.verbose && textureFlags & XAXIS_BIT) console.warn('Flag is set but unhandled: X Axis')\n                        if (this.verbose && textureFlags & YAXIS_BIT) console.warn('Flag is set but unhandled: Y Axis')\n                        if (this.verbose && textureFlags & ZAXIS_BIT) console.warn('Flag is set but unhandled: Z Axis')\n                        if (this.verbose && textureFlags & WORLDCOORDS_BIT) console.warn('Flag is set but unhandled: World Coords')\n                        if (this.verbose && textureFlags & NEGATIVEIMAGE_BIT) console.warn('Flag is set but unhandled: Negative Image')\n                        if (this.verbose && textureFlags & PIXELBLENDING_BIT) console.warn('Flag is set but unhandled: Pixel Blending')\n                        if (this.verbose && textureFlags & ANTIALIASING_BIT) console.log('Flag is set: Antialiasing') // turned on by default\n                        break\n                    case SURF_TSIZ:\n                        textureSize = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Texture size (TSIZ): ' + textureSize.toArray().join(' '))\n                        break\n                    case SURF_TCTR:\n                        textureCenter = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Texture center (TCTR): ' + textureCenter.toArray().join(' '))\n                        break\n                    case SURF_CTEX:\n                    case SURF_DTEX:\n                    case SURF_STEX:\n                    case SURF_RTEX:\n                    case SURF_TTEX:\n                    case SURF_BTEX:\n                        const textureTypeName = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture typename: ' + textureTypeName)\n                        // XXX handle different texture types\n                        break\n                    case SURF_TVAL: // always 0 in the game\n                        const textureValue = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.warn('Texture value (TVAL): ' + textureValue)\n                        break\n                    case SURF_TCLR:\n                        const textureColorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        // const textureColor = new Color().fromArray(textureColorArray);\n                        // seems to be 0 0 0 anyway...\n                        if (this.verbose) console.log('Texture color (TCLR): ' + textureColorArray.join(' '))\n                        break\n                    case SURF_TIMG:\n                        let textureFilepath = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture filepath (TIMG): ' + textureFilepath)\n                        if (textureFilepath === '(none)') break\n                        let sequenceTexture = false\n                        if (textureFilepath.endsWith(' (sequence)')) {\n                            sequenceTexture = true\n                            textureFilepath = textureFilepath.substring(0, textureFilepath.length - ' (sequence)'.length)\n                        }\n                        let filename = getFilename(textureFilepath)\n                        material.transparent = material.transparent || !!filename.match(/^a\\d+.+.bmp/i)\n                        const textureFilename = this.path + filename\n                        if (sequenceTexture) {\n                            const match = textureFilename.match(/(.+\\D)0+(\\d+)\\..+/)\n                            const sequenceNames = ResourceManager.filterTextureSequenceNames(match[1])\n                            if (sequenceNames) {\n                                let seqNum = 0\n                                this.sequenceIntervals.push(setInterval(() => {\n                                    material.map = ResourceManager.getTexture(sequenceNames[seqNum])\n                                    material.color = null // no need for color, when color map (texture) in use\n                                    seqNum++\n                                    if (seqNum >= sequenceNames.length) seqNum = 0\n                                }, 1000 / SEQUENCE_TEXTURE_FRAMERATE))\n                            }\n                        }\n                        const lTextureName = textureFilename.toLowerCase()\n                        if (lTextureName === 'miscanims/barrier/a_side.bmp' // workaround (TODO actually never add unknown textures?)\n                            || lTextureName === 'miscanims/barrier/a_top.bmp'\n                            || lTextureName === 'world/shared/teofoilreflections.jpg'\n                            || lTextureName === 'buildings/barracks/wingbase3.bmp') {\n                            break\n                        }\n                        material.map = ResourceManager.getTexture(textureFilename)\n                        material.color = null // no need for color, when color map (texture) in use\n                        break\n                    default: // TODO implement all LWO features\n                        if (this.verbose) console.warn('Found unrecognised SURF subchunk type ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n                        break\n                }\n\n                offset += SUBCHUNK_HEADER_SIZE + subchunkSize\n            }\n        }\n\n        planarMapUVS(this.geometry, this.vertices, this.uvs, this.indices, materialIndex, textureSize, textureCenter, textureFlags)\n    }\n\n    parse(buffer: ArrayBuffer): AnimatedMesh {\n        const view = new DataView(buffer)\n\n        if (view.getUint32(0) !== LWO_FORM) {\n            console.error('LWOLoader.parse: Cannot find header.')\n            return\n        }\n\n        const fileSize = view.getUint32(ID4_SIZE)\n        if (fileSize + CHUNK_HEADER_SIZE !== view.byteLength) {\n            console.warn('LWOLoader.parse: Discrepancy between size in header (' + (fileSize + CHUNK_HEADER_SIZE) + ' bytes) and actual size (' + view.byteLength + ' bytes).')\n        }\n\n        let magicOffset = ID4_SIZE + I4_SIZE\n        if (view.getUint32(magicOffset) !== LWO_MAGIC) {\n            const magic = decodeString(new Uint8Array(buffer, magicOffset, ID4_SIZE))\n            console.error('LWOLoader.parse: Invalid magic ID (' + magic + ') in LWO header.')\n            return\n        }\n\n        let cursor = 12\n        while (cursor < view.byteLength) {\n            // Skip null byte padding\n            if (view.getUint8(cursor) === 0) {\n                cursor++\n            } else {\n                const chunkType = view.getInt32(cursor)\n                const chunkSize = view.getInt32(cursor + ID4_SIZE)\n\n                cursor += CHUNK_HEADER_SIZE\n\n                switch (chunkType) {\n                    case LWO_PNTS:\n                        this.parsePoints(view, cursor, chunkSize)\n                        break\n                    case LWO_SFRS:\n                        this.parseSurfaceNames(buffer, cursor, chunkSize)\n                        break\n                    case LWO_POLS:\n                        this.parsePolygons(view, cursor, chunkSize)\n                        break\n                    case LWO_SURF:\n                        this.parseSurface(view, buffer, cursor, chunkSize)\n                        break\n                    default:\n                        console.warn('Found unrecognised chunk type ' + decodeString(new Uint8Array(buffer, cursor - CHUNK_HEADER_SIZE, ID4_SIZE)) + ' at ' + cursor)\n                }\n\n                cursor += chunkSize\n            }\n\n        }\n\n        this.geometry.setAttribute('position', new BufferAttribute(this.vertices, 3))\n        this.geometry.setAttribute('uv', new BufferAttribute(this.uvs, 2))\n        this.geometry.setIndex(new BufferAttribute(this.indices, 1))\n        this.geometry.computeVertexNormals()\n\n        return new AnimatedMesh(new Mesh(this.geometry, this.materials), this.sequenceIntervals)\n    }\n}\n","export enum EntityType {\n\n    // RAIDER\n    PILOT,\n\n    // BUILDING\n    TOOLSTATION,\n    TELEPORT_PAD,\n    DOCKS,\n    POWER_STATION,\n    BARRACKS,\n    UPGRADE,\n    GEODOME,\n    ORE_REFINERY,\n    GUNSTATION,\n    TELEPORT_BIG,\n\n    // MONSTER\n    BAT,\n    SMALL_SPIDER,\n\n    // MATERIAL\n    DYNAMITE,\n    ELECTRIC_FENCE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n\n}\n\nexport enum EntitySuperType {\n\n    RAIDER,\n    BUILDING,\n    MONSTER,\n    MATERIAL,\n\n}\n","export enum PriorityIdentifier {\n\n    aiPriorityTrain,\n    aiPriorityGetIn,\n    aiPriorityCrystal,\n    aiPriorityOre,\n    aiPriorityRepair,\n    aiPriorityClearing,\n    aiPriorityDestruction,\n    aiPriorityConstruction,\n    aiPriorityReinforce,\n    aiPriorityRecharge,\n\n}\n","export class BaseActivity {\n\n    activityKey: string\n\n    constructor(activityKey: string) {\n        this.activityKey = activityKey\n    }\n\n}\n","export enum JobState {\n\n    INCOMPLETE,\n    COMPLETE,\n    CANCELED,\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class AnimEntityActivity extends BaseActivity {\n\n    static Stand = new AnimEntityActivity('Activity_Stand')\n\n}\n","import { Group, Vector2 } from 'three'\nimport { WorldManager } from '../WorldManager'\nimport { EntitySuperType, EntityType } from './EntityType'\nimport { Surface } from './map/Surface'\n\nexport abstract class BaseEntity {\n\n    worldMgr: WorldManager\n    group: Group = new Group()\n\n    superType: EntitySuperType = null\n    entityType: EntityType = null\n    level: number = 0\n\n    protected constructor(superType: EntitySuperType, entityType: EntityType) {\n        this.superType = superType\n        this.entityType = entityType\n    }\n\n    get stats() {\n        return null\n    }\n\n    getPosition() {\n        return this.group.position.clone()\n    }\n\n    getPosition2D() {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    getHeading(): number {\n        return this.group.rotation.y\n    }\n\n    onDiscover() {\n        this.group.visible = true\n    }\n\n    removeFromScene() {\n        this.worldMgr.sceneManager.scene.remove(this.group)\n    }\n\n    get surfaces(): Surface[] {\n        return [this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position)]\n    }\n\n}\n","import { Box3, CanvasTexture, Matrix4, Mesh, MeshBasicMaterial, MeshPhongMaterial, Object3D, Sphere, SphereGeometry, Sprite, SpriteMaterial, Vector3 } from 'three'\nimport { createContext } from '../../../core/ImageHelper'\nimport { clearTimeoutSafe, iGet } from '../../../core/Util'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { BaseActivity } from '../activities/BaseActivity'\nimport { BaseEntity } from '../BaseEntity'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { AnimationEntityType } from './AnimationEntityType'\nimport { AnimClip } from './AnimClip'\nimport { AnimSubObj } from './AnimSubObj'\n\nexport abstract class AnimEntity extends BaseEntity {\n\n    animationEntityType: AnimationEntityType = null\n    poly: Object3D[] = []\n    animation: AnimClip = null\n    animationTimeout: NodeJS.Timeout = null\n    selectionFrame: Sprite = null\n    pickSphere: Mesh = null\n    carryJoint: Object3D = null\n    depositJoint: Object3D = null\n    getToolJoint: Object3D = null\n    activity: BaseActivity = null\n    radiusSq: number = 0\n\n    protected constructor(superType: EntitySuperType, entityType: EntityType, aeFilename: string) {\n        super(superType, entityType)\n        if (aeFilename) this.animationEntityType = ResourceManager.getAnimationEntityType(aeFilename)\n    }\n\n    beamUp() {\n        // TODO avoid all further state changes and mark as unavailable here\n        // TODO publish event: check jobs with this target, update power state...\n        EventBus.publishEvent(new EntityDeselected())\n        this.changeActivity()\n        // TODO insert beam animation\n        AnimEntity.moveUp(this, 6 * TILESIZE)\n    }\n\n    private static moveUp(entity: AnimEntity, counter: number) {\n        if (counter > 0) {\n            counter--\n            entity.group.position.y += (TILESIZE / NATIVE_FRAMERATE) / 2\n            setTimeout(() => AnimEntity.moveUp(entity, counter), 1000 / NATIVE_FRAMERATE)\n        } else {\n            entity.removeFromScene()\n        }\n    }\n\n    changeActivity(activity: AnimEntityActivity = this.getDefaultActivity(), onAnimationDone: () => any = null, durationTimeMs: number = null) {\n        if (this.activity === activity || this.animationEntityType === null) return\n        this.activity = activity\n        let lActivityKey = activity.activityKey.toLowerCase()\n        let anim = this.animationEntityType.activities.get(lActivityKey)\n        if (!anim) { // find by prefix\n            this.animationEntityType.activities.forEach((a, key) => {\n                if (!anim && lActivityKey.startsWith(key)) anim = a\n            })\n        }\n        if (!anim?.animation) {\n            console.warn('Activity ' + activity.activityKey + ' unknown or has no animation defined')\n            console.log(this.animationEntityType.activities)\n            return\n        }\n        if (onAnimationDone) onAnimationDone.bind(this)\n        this.animation = anim.animation\n        this.animation.looping = true\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.group.remove(...this.poly)\n        this.poly = []\n        const carries = (this.carryJoint && this.carryJoint.children) || []\n        this.carryJoint = null\n        // bodies are defined in animation and second in high/medium/low poly groups\n        this.animation.bodies.forEach((body) => {\n            let model: Object3D = iGet(this.animationEntityType.highPoly, body.name)\n            if (!model) model = iGet(this.animationEntityType.mediumPoly, body.name)\n            if (!model) model = body.model\n            const polyModel = model.clone(true)\n            this.poly.push(polyModel)\n            if (body.name) {\n                const lBodyName = body.name.toLowerCase()\n                if (lBodyName === this.animationEntityType.carryNullName?.toLowerCase()) {\n                    this.carryJoint = polyModel\n                    if (carries.length > 0) this.carryJoint.add(...carries)\n                } else if (lBodyName === this.animationEntityType.depositNullName?.toLowerCase()) {\n                    this.depositJoint = polyModel\n                } else if (lBodyName === this.animationEntityType.toolNullName?.toLowerCase()) {\n                    this.getToolJoint = polyModel\n                }\n            }\n        })\n        this.animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = this.poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                this.poly[parentInd].add(polyPart)\n            } else {\n                this.group.add(polyPart)\n            }\n        })\n        const sphere = new Sphere()\n        new Box3().setFromObject(this.group).getBoundingSphere(sphere)\n        this.radiusSq = sphere.radius * sphere.radius\n        this.animate(0, onAnimationDone, durationTimeMs)\n    }\n\n    private animate(frameIndex: number, onAnimationDone: () => any, durationTimeMs: number) {\n        if (this.poly.length !== this.animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        this.animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = this.poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = mat.transparent || mat.opacity < 1\n                    })\n                }\n            }\n        })\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        let nextFrame = frameIndex + 1\n        if (nextFrame <= this.animation.lastFrame || !onAnimationDone || (durationTimeMs !== null && durationTimeMs > 0)) {\n            if (nextFrame > this.animation.lastFrame) {\n                nextFrame = this.animation.firstFrame\n            }\n            const standardDurationTimeMs = 1000 / this.animation.framesPerSecond * this.animation.transcoef\n            if (durationTimeMs !== null) durationTimeMs -= standardDurationTimeMs\n            const that = this\n            const timeoutTimeMs = durationTimeMs !== null ? Math.max(0, Math.min(durationTimeMs, standardDurationTimeMs)) : standardDurationTimeMs\n            this.animationTimeout = setTimeout(() => that.animate(nextFrame, onAnimationDone, durationTimeMs), timeoutTimeMs) // TODO get this in sync with threejs\n        } else if (onAnimationDone) {\n            onAnimationDone()\n        }\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return AnimEntityActivity.Stand\n    }\n\n    createPickSphere() {\n        if (this.pickSphere) return\n        const pickSphereDiameter = this.stats.PickSphere\n        const pickSphereRadius = pickSphereDiameter / 2\n        const geometry = new SphereGeometry(pickSphereRadius, pickSphereRadius, pickSphereRadius)\n        const material = new MeshBasicMaterial({color: 0xffff00, visible: false}) // change visible to true for debugging\n        this.pickSphere = new Mesh(geometry, material)\n        this.pickSphere.userData = {selectable: this}\n        const pickSphereCenter = this.getPickSphereCenter()\n        this.pickSphere.position.copy(pickSphereCenter)\n        this.group.add(this.pickSphere)\n        this.createSelectionFrame(pickSphereDiameter, pickSphereCenter)\n    }\n\n    getPickSphereCenter(): Vector3 {\n        return this.getBoundingBoxCenter()\n    }\n\n    getBoundingBoxCenter() {\n        const center = new Vector3()\n        new Box3().setFromObject(this.group).getCenter(center)\n        center.sub(this.group.position)\n        center.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        return center\n    }\n\n    private createSelectionFrame(pickSphereDiameter: number, pickSphereCenter: Vector3) {\n        const selectionFrameTextureSize = 128\n        const ctx = createContext(selectionFrameTextureSize, selectionFrameTextureSize)\n        ctx.fillStyle = '#0f0'\n        const strength = Math.round(50 / pickSphereDiameter)\n        const length = selectionFrameTextureSize / 6\n        ctx.fillRect(0, 0, length, strength)\n        ctx.fillRect(0, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, 0, length, strength)\n        ctx.fillRect(selectionFrameTextureSize - strength, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - strength, selectionFrameTextureSize - length, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - length, strength, length)\n        const selectionFrameTexture = new CanvasTexture(ctx.canvas)\n        const selectionMaterial = new SpriteMaterial({map: selectionFrameTexture, depthTest: false})\n        this.selectionFrame = new Sprite(selectionMaterial)\n        this.selectionFrame.position.copy(pickSphereCenter)\n        const selectionFrameSize = pickSphereDiameter\n        this.selectionFrame.scale.set(selectionFrameSize, selectionFrameSize, selectionFrameSize)\n        this.selectionFrame.visible = false\n        this.group.add(this.selectionFrame)\n    }\n\n}\n","export enum JobType {\n\n    DRILL,\n    REINFORCE,\n    CLEAR_RUBBLE,\n    CARRY,\n    MOVE,\n    TRAIN,\n    GET_TOOL,\n    EAT,\n    COMPLETE_POWER_PATH,\n\n}\n","import { RaiderActivity } from '../activities/RaiderActivity'\nimport { MaterialEntity } from '../collect/MaterialEntity'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { PathTarget } from '../PathTarget'\nimport { RaiderTool } from '../raider/RaiderTool'\nimport { RaiderTraining } from '../raider/RaiderTraining'\nimport { JobState } from './JobState'\nimport { JobType } from './JobType'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport abstract class Job {\n\n    type: JobType\n    jobstate: JobState\n    fulfiller: FulfillerEntity[] = []\n\n    protected constructor(type: JobType) {\n        this.type = type\n        this.jobstate = JobState.INCOMPLETE\n    }\n\n    assign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller)\n        if (fulfiller && index === -1) {\n            this.fulfiller.push(fulfiller)\n        }\n    }\n\n    unassign(fulfiller: FulfillerEntity) {\n        this.fulfiller.remove(fulfiller)\n    }\n\n    cancel() {\n        this.jobstate = JobState.CANCELED\n        const fulfiller = this.fulfiller // ensure consistency while processing\n        this.fulfiller = []\n        fulfiller.forEach((fulfiller) => fulfiller.stopJob())\n    }\n\n    getRequiredTool(): RaiderTool {\n        return null\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return null\n    }\n\n    isReadyToComplete(): boolean {\n        return true\n    }\n\n    onJobComplete() {\n        this.jobstate = JobState.COMPLETE\n    }\n\n    abstract getWorkplaces(): PathTarget[];\n\n    setActualWorkplace(target: PathTarget) {\n    }\n\n    getCarryItem(): MaterialEntity {\n        return null\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return null\n    }\n\n    getWorkDuration(): number {\n        return null\n    }\n\n}\n\nexport abstract class PublicJob extends Job {\n\n    abstract getPriorityIdentifier(): PriorityIdentifier\n\n}\n","import { Vector3 } from 'three'\nimport { SelectionEvent } from '../../event/LocalEvents'\n\nexport interface Selectable {\n\n    getSelectionType(): SelectionType;\n\n    select(): SelectionEvent;\n\n    deselect(): any;\n\n    getSelectionCenter(): Vector3;\n\n}\n\nexport enum SelectionType {\n\n    SURFACE,\n    RAIDER,\n    BUILDING,\n    VEHICLE,\n    GROUP,\n\n}\n","import { Vector3 } from 'three'\nimport { LevelRewardConfig } from '../../cfg/LevelsCfg'\nimport { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../../params'\nimport { BaseEntity } from './BaseEntity'\nimport { BuildingEntity } from './building/BuildingEntity'\nimport { BuildingSite } from './building/BuildingSite'\nimport { Crystal } from './collect/Crystal'\nimport { MaterialEntity } from './collect/MaterialEntity'\nimport { Ore } from './collect/Ore'\nimport { EntityType } from './EntityType'\nimport { PriorityList } from './job/PriorityList'\nimport { Surface } from './map/Surface'\nimport { Bat } from './monster/Bat'\nimport { SmallSpider } from './monster/SmallSpider'\nimport { Raider } from './raider/Raider'\nimport { RaiderTraining } from './raider/RaiderTraining'\nimport { Selectable, SelectionType } from './Selectable'\n\nexport enum GameResultState {\n\n    RUNNING,\n    COMPLETE,\n    FAILED,\n\n}\n\nexport class GameState {\n\n    static resultState: GameResultState = GameResultState.RUNNING\n    static levelFullName: string = ''\n    static numCrystal: number = 0\n    static numOre: number = 0\n    static numBrick: number = 0\n    static usedCrystals: number = 0\n    static neededCrystals: number = 0\n    static airLevel: number = 1 // air level in percent from 0 to 1.0\n    static selectedEntities: Selectable[] = []\n    static selectionType: SelectionType = null\n    static buildings: BuildingEntity[] = []\n    static buildingsUndiscovered: BuildingEntity[] = []\n    static raiders: Raider[] = []\n    static raidersUndiscovered: Raider[] = []\n    static requestedRaiders: number = 0\n    static materials: MaterialEntity[] = []\n    static materialsUndiscovered: MaterialEntity[] = []\n    static buildingSites: BuildingSite[] = []\n    static spiders: SmallSpider[] = []\n    static spidersBySurface: Map<Surface, SmallSpider[]> = new Map()\n    static bats: Bat[] = []\n    static totalCrystals: number = 0\n    static totalOres: number = 0\n    static totalDiggables: number = 0\n    static remainingDiggables: number = 0\n    static totalCaverns: number = 0\n    static discoveredCaverns: number = 0\n    static levelStartTime: number = 0\n    static levelStopTime: number = 0\n    static rewardConfig: LevelRewardConfig = null\n    static priorityList: PriorityList = new PriorityList()\n    static oxygenRate: number = 0\n    static buildModeSelection: BuildingEntity = null\n\n    static reset() {\n        this.resultState = GameResultState.RUNNING\n        this.levelFullName = ''\n        this.numCrystal = 0\n        this.numOre = 0\n        this.numBrick = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.airLevel = 1\n        this.selectedEntities = []\n        this.selectionType = null\n        this.buildings = []\n        this.buildingsUndiscovered = []\n        this.raiders = []\n        this.raidersUndiscovered = []\n        this.requestedRaiders = 0\n        this.materials = []\n        this.materialsUndiscovered = []\n        this.buildingSites = []\n        this.spiders = []\n        this.spidersBySurface = new Map()\n        this.bats = []\n        this.totalCrystals = 0\n        this.totalOres = 0\n        this.totalDiggables = 0\n        this.remainingDiggables = 0\n        this.totalCaverns = 0\n        this.discoveredCaverns = 0\n        this.levelStartTime = 0\n        this.levelStopTime = 0\n        this.rewardConfig = null\n        this.priorityList = new PriorityList()\n        this.oxygenRate = 0\n        this.buildModeSelection = null\n    }\n\n    static getBuildingsByType(...buildingTypes: EntityType[]): BuildingEntity[] {\n        return this.buildings.filter(b => !b.inBeam && b.isPowered() && buildingTypes.some(bt => b.entityType === bt))\n    }\n\n    static getClosestBuildingByType(position: Vector3, ...buildingTypes: EntityType[]): BuildingEntity {\n        const targetBuildings = GameState.getBuildingsByType(...buildingTypes)\n        let closest = null, minDist = null\n        targetBuildings.forEach((b) => {\n            const bPos = b.getDropPosition()\n            const dist = position.distanceToSquared(bPos) // TODO better use pathfinding\n            if (closest === null || dist < minDist) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static hasOneBuildingOf(...buildings: EntityType[]): boolean {\n        return this.buildings.some((b) => buildings.some((type) => b.entityType === type) && b.isPowered())\n    }\n\n    static hasBuildingWithUpgrades(building: EntityType, upgrades: number = 0): boolean {\n        return this.buildings.some((b) => b.entityType === building && b.level >= upgrades && b.isPowered())\n    }\n\n    static getTrainingSites(position: Vector3, training: RaiderTraining): BuildingEntity[] {\n        if (training === RaiderTraining.DEMOLITION) {\n            return this.buildings.filter((b) => {\n                return b.stats.TrainDynamite && b.stats.TrainDynamite[b.level]\n            })\n        }\n        return []\n    }\n\n    static selectEntities(entities: Selectable[]) {\n        this.selectedEntities = this.selectedEntities.filter((previouslySelected) => {\n            const stillSelected = entities.indexOf(previouslySelected) !== -1\n            if (!stillSelected) previouslySelected.deselect()\n            return stillSelected\n        })\n        // add new entities that are selectable\n        const selectionEvents = []\n        entities.forEach((freshlySelected) => {\n            const selectionEvent = freshlySelected.select()\n            if (selectionEvent) {\n                this.selectedEntities.push(freshlySelected)\n                selectionEvents.push(selectionEvent)\n            }\n        })\n        // determine and set next selection type\n        const len = this.selectedEntities.length\n        if (len > 1) {\n            this.selectionType = SelectionType.GROUP\n        } else if (len === 1) {\n            this.selectionType = this.selectedEntities[0].getSelectionType()\n        } else if (this.selectionType !== null) {\n            this.selectionType = null\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        // AFTER updating selected entities and selection type, publish all events\n        selectionEvents.forEach((event) => EventBus.publishEvent(event))\n    }\n\n    static getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + GameState.buildings.count((b) => b.isPowered() && b.entityType === EntityType.BARRACKS) * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    static discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE\n        this.discoverEntities(this.raidersUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.buildingsUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.materialsUndiscovered, minX, maxX, minZ, maxZ)\n    }\n\n    static discoverEntities(undiscovered: BaseEntity[], minX, maxX, minZ, maxZ) {\n        const discovered = []\n        undiscovered.forEach((e) => {\n            const pos = e.getPosition()\n            if (pos.x >= minX && pos.x < maxX && pos.z >= minZ && pos.z < maxZ) {\n                e.onDiscover()\n                discovered.push(e)\n            }\n        })\n        discovered.forEach((r) => undiscovered.remove(r))\n    }\n\n    static dropMaterial(type: EntityType, quantity: number): MaterialEntity[] {\n        const result = []\n        if (type === EntityType.CRYSTAL) {\n            while (GameState.numCrystal > 0 && result.length < quantity) {\n                GameState.numCrystal--\n                result.push(new Crystal())\n            }\n        } else if (type === EntityType.ORE) {\n            while (GameState.numOre > 0 && result.length < quantity) {\n                GameState.numOre--\n                result.push(new Ore())\n            }\n        } else {\n            console.error('Material drop not implemented for: ' + type)\n        }\n        if (result.length > 0) EventBus.publishEvent(new MaterialAmountChanged(type))\n        return result\n    }\n\n    static get gameTimeSeconds() {\n        return Math.round((GameState.levelStopTime - GameState.levelStartTime) / 1000)\n    }\n\n    static get score() {\n        if (!GameState.rewardConfig) return 0\n        let quota = GameState.rewardConfig.quota\n        let importance = GameState.rewardConfig.importance\n        const scoreCrystals = GameState.numCrystal >= (quota.crystals || Infinity) ? importance.crystals : 0\n        const scoreTimer = GameState.gameTimeSeconds <= (quota.timer || 0) ? importance.timer : 0\n        const scoreCaverns = quota.caverns ? Math.min(1, GameState.discoveredCaverns / quota.caverns) * importance.caverns : 0\n        const scoreConstructions = quota.constructions ? Math.min(1, GameState.buildings.length / quota.constructions * importance.constructions) : 0\n        const scoreOxygen = GameState.airLevel * importance.oxygen\n        const scoreFigures = GameState.raiders.length >= MAX_RAIDER_BASE ? importance.figures : 0\n        return Math.round(scoreCrystals + scoreTimer + scoreCaverns + scoreConstructions + scoreOxygen + scoreFigures) / 100\n    }\n\n    static get selectedSurface(): Surface {\n        return this.selectionType === SelectionType.SURFACE && this.selectedEntities.length > 0 ? this.selectedEntities[0] as Surface : null\n    }\n\n    static get selectedBuilding(): BuildingEntity {\n        return this.selectionType === SelectionType.BUILDING && this.selectedEntities.length > 0 ? this.selectedEntities[0] as BuildingEntity : null\n    }\n\n    static get selectedRaiders(): Raider[] {\n        return (this.selectionType === SelectionType.RAIDER || this.selectionType === SelectionType.GROUP) && this.selectedEntities.length > 0 ? this.selectedEntities as Raider[] : []\n    }\n\n    static get totalOre(): number {\n        return this.numOre + this.numBrick * 5\n    }\n\n    static getNearbySpiders(entity: BaseEntity): SmallSpider[] {\n        const terrain = entity.worldMgr.sceneManager.terrain\n        const currentSurface = terrain.getSurfaceFromWorld(entity.getPosition())\n        const nearbySpiders: SmallSpider[] = []\n        for (let x = currentSurface.x; x <= currentSurface.x + 1; x++) {\n            for (let y = currentSurface.y; y <= currentSurface.y + 1; y++) {\n                const surface = terrain.getSurface(x, y)\n                nearbySpiders.push(...(GameState.spidersBySurface.get(surface) || []))\n            }\n        }\n        return nearbySpiders\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { CarryPathTarget } from '../collect/CarryPathTarget'\nimport { MaterialEntity } from '../collect/MaterialEntity'\nimport { PublicJob } from './Job'\nimport { JobType } from './JobType'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport class CarryJob<I extends MaterialEntity> extends PublicJob {\n\n    item: I\n    actualTarget: CarryPathTarget = null\n\n    constructor(item: I) {\n        super(JobType.CARRY)\n        this.item = item\n    }\n\n    getWorkplaces(): CarryPathTarget[] {\n        return this.item.getCarryTargets()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return this.item.getPriorityIdentifier()\n    }\n\n    setActualWorkplace(target: CarryPathTarget) {\n        this.item.setTargetSite(target.site)\n        this.actualTarget = target\n    }\n\n    getCarryItem(): I {\n        return this.item\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return this.actualTarget.getDropAction()\n    }\n\n    isReadyToComplete(): boolean {\n        return this.actualTarget.canGatherItem()\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        const targetLocation = this.actualTarget.targetLocation\n        this.fulfiller.forEach((f) => {\n            f.group.lookAt(new Vector3(targetLocation.x, f.group.position.y, targetLocation.y))\n            f.dropItem()\n        })\n        this.actualTarget.gatherItem(this.item)\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class BuildingActivity extends AnimEntityActivity {\n\n    static Teleport = new BuildingActivity('Activity_Teleport')\n    static Deposit = new BuildingActivity('Activity_Deposit')\n    static Explode = new BuildingActivity('Activity_Explode')\n    static Unpowered = new BuildingActivity('Activity_Unpowered')\n\n}\n","import { Vector2 } from 'three'\n\nexport class PathTarget {\n\n    targetLocation: Vector2\n\n    constructor(location: Vector2) {\n        this.targetLocation = location\n    }\n\n    isInArea(position: Vector2): boolean {\n        return false\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { MaterialAmountChanged } from '../../../event/WorldEvents'\nimport { BuildingActivity } from '../activities/BuildingActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { BuildingEntity } from '../building/BuildingEntity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { PathTarget } from '../PathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class CarryPathTarget extends PathTarget {\n\n    site: BuildingSite\n    building: BuildingEntity\n\n    constructor(location: Vector2, site: BuildingSite, building: BuildingEntity) {\n        super(location)\n        this.site = site\n        this.building = building\n    }\n\n    canGatherItem(): boolean {\n        if (this.building) {\n            return this.building.activity.activityKey === this.building.getDefaultActivity().activityKey\n        }\n        return true\n    }\n\n    gatherItem(item: MaterialEntity) {\n        if (this.site) {\n            this.site.addItem(item)\n        } else if (this.building) {\n            if (this.building.entityType === EntityType.POWER_STATION || this.building.entityType === EntityType.ORE_REFINERY) {\n                if (this.building.carryJoint) {\n                    this.building.carryJoint.add(item.group)\n                    item.group.position.set(0, 0, 0)\n                }\n                this.building.changeActivity(BuildingActivity.Deposit, () => {\n                    this.building.changeActivity()\n                    if (this.building.carryJoint) this.building.carryJoint.remove(item.group)\n                    CarryPathTarget.addItemToStorage(item)\n                    // TODO dispose item\n                })\n            } else {\n                item.removeFromScene()\n                CarryPathTarget.addItemToStorage(item)\n            }\n        } else {\n            item.worldMgr.sceneManager.scene.add(item.group)\n        }\n    }\n\n    private static addItemToStorage(item: MaterialEntity) {\n        switch (item.entityType) {\n            case EntityType.CRYSTAL:\n                GameState.numCrystal++\n                EventBus.publishEvent(new MaterialAmountChanged(item.entityType))\n                break\n            case EntityType.ORE:\n                GameState.numOre++\n                EventBus.publishEvent(new MaterialAmountChanged(item.entityType))\n                break\n        }\n    }\n\n    getDropAction(): RaiderActivity {\n        return (this.building || this.site).getDropAction()\n    }\n\n}\n","import { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { AnimEntity } from '../anim/AnimEntity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CarryJob } from '../job/CarryJob'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { CarryPathTarget } from './CarryPathTarget'\n\nexport abstract class MaterialEntity extends AnimEntity {\n\n    targetBuildingTypes: EntityType[] = []\n    priorityIdentifier: PriorityIdentifier = null\n    targets: CarryPathTarget[] = []\n    targetSite: BuildingSite = null\n\n    protected constructor(entityType: EntityType, aeFilename: string = null) {\n        super(EntitySuperType.MATERIAL, entityType, aeFilename)\n        this.targetBuildingTypes = [EntityType.TOOLSTATION]\n    }\n\n    getCarryTargets(): CarryPathTarget[] {\n        return this.updateTargets()\n    }\n\n    resetTarget() {\n        this.targets = []\n        this.targetSite = null\n        this.updateTargets()\n    }\n\n    protected updateTargets(): CarryPathTarget[] {\n        if (this.targets.length < 1) {\n            const sites = GameState.buildingSites.filter((b) => b.needs(this.entityType))\n            if (sites.length > 0) {\n                this.targets = sites.map((s) => new CarryPathTarget(s.getRandomDropPosition(), s, null))\n            } else {\n                const buildings = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                if (buildings.length > 0) {\n                    this.targets = buildings.map((b) => new CarryPathTarget(b.getDropPosition2D(), null, b))\n                }\n            }\n        } else if (this.targets.some((t) => t.site && t.site.complete)) {\n            this.resetTarget()\n        } else if (this.targets.some((t) => t.building && !t.building.isPowered())) {\n            this.resetTarget()\n        }\n        return this.targets\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.materialsUndiscovered.remove(this)\n        GameState.materials.push(this)\n        EventBus.publishEvent(new JobCreateEvent(this.createCarryJob()))\n    }\n\n    setTargetSite(site: BuildingSite) {\n        if (this.targetSite === site) return\n        this.targetSite?.unAssign(this)\n        this.targetSite = site\n        this.targetSite?.assign(this)\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return this.priorityIdentifier\n    }\n\n    getTargetBuildingTypes(): EntityType[] {\n        return this.targetBuildingTypes\n    }\n\n    createCarryJob(): CarryJob<MaterialEntity> {\n        return new CarryJob(this)\n    }\n\n    onAddToSite() {\n        this.worldMgr.sceneManager.scene.add(this.group)\n    }\n\n}\n","import { AdditiveBlending, Color, Material, MeshPhongMaterial } from 'three'\nimport { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Crystal extends MaterialEntity {\n\n    constructor() {\n        super(EntityType.CRYSTAL)\n        const resource2 = ResourceManager.getResource('MiscAnims/Crystal/vlp_greencrystal.lwo')\n        const mesh2 = SceneManager.registerMesh(new LWOLoader('MiscAnims/Crystal/').parse(resource2));\n        (mesh2.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.blending = AdditiveBlending\n            mat.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n            mat.opacity = 0.5 // XXX read from LWO file?\n            mat.transparent = mat.opacity < 1\n        })\n        mesh2.scale.set(1.75, 1.75, 1.75) // XXX derive from texture scale?\n        this.group.add(mesh2)\n        const resource = ResourceManager.getResource('World/Shared/Crystal.lwo') // high poly version\n        const mesh = SceneManager.registerMesh(new LWOLoader('World/Shared/').parse(resource));\n        (mesh.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.emissive = new Color(0, 8, 0) // XXX read from LWO file?\n            mat.color = new Color(0, 0, 0) // XXX read from LWO file?\n            mat.opacity = 0.9 // XXX read from LWO file?\n            mat.transparent = mat.opacity < 1\n        })\n        this.group.add(mesh)\n        this.targetBuildingTypes = [EntityType.POWER_STATION, EntityType.TOOLSTATION]\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityCrystal\n    }\n\n    get stats() {\n        return ResourceManager.stats.PowerCrystal\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Ore extends MaterialEntity {\n\n    constructor() {\n        super(EntityType.ORE)\n        const resource = ResourceManager.getResource('MiscAnims/Ore/Ore1st.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('MiscAnims/Ore/').parse(resource))\n        this.group.add(mesh)\n        this.targetBuildingTypes = [EntityType.ORE_REFINERY, EntityType.TOOLSTATION]\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityOre\n    }\n\n    get stats() {\n        return ResourceManager.stats.Ore\n    }\n\n}\n","import { LevelPrioritiesEntryConfig } from '../../../cfg/LevelsCfg'\nimport { PublicJob } from './Job'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport class PriorityList {\n\n    levelDefault: PriorityEntry[] = []\n    current: PriorityEntry[] = []\n\n    setList(priorities: LevelPrioritiesEntryConfig[]) {\n        this.levelDefault = priorities\n        this.reset()\n    }\n\n    toggle(index: number) {\n        this.current[index].enabled = !this.current[index].enabled\n    }\n\n    upOne(index: number) {\n        const tmp = this.current[index]\n        this.current[index] = this.current[index + 1]\n        this.current[index + 1] = tmp\n    }\n\n    reset() {\n        this.current = this.levelDefault.map(entry => new PriorityEntry(entry)) // use deep copy to avoid interference\n    }\n\n    pushToTop(index: number) {\n        const element = this.current[index]\n        for (let c = index; c > 0; c--) {\n            this.current[c] = this.current[c - 1]\n        }\n        this.current[0] = element\n    }\n\n    getPriority(job: PublicJob) {\n        let priority = 0\n        this.current.some((j, index) => {\n            if (j.key === job.getPriorityIdentifier()) {\n                priority = index\n                return true\n            }\n        })\n        return priority\n    }\n\n}\n\nexport class PriorityEntry {\n\n    key: PriorityIdentifier\n    enabled: boolean\n\n    constructor(levelPriorityEntry: LevelPrioritiesEntryConfig) {\n        this.key = levelPriorityEntry.key\n        this.enabled = levelPriorityEntry.enabled\n    }\n\n}\n","export class RaiderTraining {\n\n    static DRIVER = new RaiderTraining('driver')\n    static ENGINEER = new RaiderTraining('engineer')\n    static GEOLOGIST = new RaiderTraining('geologist')\n    static PILOT = new RaiderTraining('pilot')\n    static SAILOR = new RaiderTraining('sailor')\n    static DEMOLITION = new RaiderTraining('demolition')\n\n    name: string\n\n    constructor(name: string) {\n        this.name = name\n    }\n\n}\n","export enum MoveState {\n\n    MOVED,\n    TARGET_REACHED,\n    TARGET_UNREACHABLE,\n\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\nimport { RaiderTool } from '../raider/RaiderTool'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class GetToolJob extends Job {\n\n    target: PathTarget[]\n    tool: RaiderTool\n\n    constructor(target: Vector2, tool: RaiderTool) {\n        super(JobType.GET_TOOL)\n        this.target = [new PathTarget(target)]\n        this.tool = tool\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.target\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.fulfiller.forEach((f) => f.addTool(this.tool))\n    }\n\n}\n","import { Vector2 } from 'three'\n\nexport class Area {\n\n    x0: number = 0\n    y0: number = 0\n    x1: number = 0\n    y1: number = 0\n    center: Vector2 = null\n\n    constructor(x0: number, y0: number, x1: number, y1: number) {\n        this.x0 = x0\n        this.y0 = y0\n        this.x1 = x1\n        this.y1 = y1\n        this.center = new Vector2((this.x0 + this.x1) / 2, (this.y0 + this.y1) / 2)\n    }\n\n    getCenter(): Vector2 {\n        return this.center.clone()\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class RaiderActivity extends AnimEntityActivity {\n\n    static Route = new RaiderActivity('Activity_Route')\n    static RunPanic = new RaiderActivity('Activity_RunPanic')\n    static Drill = new RaiderActivity('Activity_Drill')\n    static Walk = new RaiderActivity('!Activity_Walk')\n    static Reinforce = new RaiderActivity('Activity_Reinforce')\n    static Reverse = new RaiderActivity('!Activity_Reverse')\n    static TurnLeft = new RaiderActivity('!Activity_TurnLeft')\n    static TurnRight = new RaiderActivity('!Activity_TurnRight')\n    static CantDo = new RaiderActivity('!Activity_CantDo')\n    static Collect = new RaiderActivity('Activity_Collect')\n    static Clear = new RaiderActivity('Activity_Clear')\n    static Carry = new RaiderActivity('Activity_Carry')\n    static CarryTurnLeft = new RaiderActivity('!Activity_CarryTurnLeft')\n    static CarryTurnRight = new RaiderActivity('!Activity_CarryTurnRight')\n    static CarryStand = new RaiderActivity('Activity_CarryStand')\n    static Dynamite = new RaiderActivity('Activity_Dynamite')\n    static Place = new RaiderActivity('Activity_Place')\n    static Deposit = new RaiderActivity('!Activity_Deposit')\n    static TeleportIn = new RaiderActivity('Activity_TeleportIn')\n    static Repair = new RaiderActivity('Activity_Repair')\n    static rest = new RaiderActivity('Activity_rest')\n    static routeRubble = new RaiderActivity('!Activity_routeRubble')\n    static CarryRubble = new RaiderActivity('!Activity_CarryRubble')\n    static Eat = new RaiderActivity('Activity_Eat')\n    static FireLaser = new RaiderActivity('Activity_FireLaser')\n    static GetUp = new RaiderActivity('!Activity_GetUp')\n    static ThrownByRockMonster = new RaiderActivity('Activity_ThrownByRockMonster')\n    static Slip = new RaiderActivity('Activity_Slip')\n    static Train = new RaiderActivity('Activity_Train')\n    static Recharge = new RaiderActivity('!Activity_Recharge')\n\n    static Waiting1 = new RaiderActivity('Activity_Waiting1')\n    static Waiting2 = new RaiderActivity('Activity_Waiting2')\n    static Waiting3 = new RaiderActivity('Activity_Waiting3')\n    static Waiting4 = new RaiderActivity('Activity_Waiting4')\n\n    static Hoverboard = new RaiderActivity('Activity_Hoverboard')\n    static Standhoverboard = new RaiderActivity('Activity_Standhoverboard')\n    static HitLefthoverboard = new RaiderActivity('!Activity_HitLefthoverboard')\n    static HitRighthoverboard = new RaiderActivity('!Activity_HitRighthoverboard')\n    static HitFronthoverboard = new RaiderActivity('!Activity_HitFronthoverboard')\n    static HitBackhoverboard = new RaiderActivity('!Activity_HitBackhoverboard')\n\n    static SMALLTRUCK = new RaiderActivity('Activity_SMALLTRUCK')\n    static StandSMALLTRUCK = new RaiderActivity('Activity_StandSMALLTRUCK')\n    static HitLeftSMALLTRUCK = new RaiderActivity('!Activity_HitLeftSMALLTRUCK')\n    static HitRightSMALLTRUCK = new RaiderActivity('!Activity_HitRightSMALLTRUCK')\n    static HitFrontSMALLTRUCK = new RaiderActivity('!Activity_HitFrontSMALLTRUCK')\n    static HitBackSMALLTRUCK = new RaiderActivity('!Activity_HitBackSMALLTRUCK')\n\n    static SMALLheli = new RaiderActivity('Activity_SMALLheli')\n    static StandSMALLheli = new RaiderActivity('Activity_StandSMALLheli')\n    static HitLeftSMALLheli = new RaiderActivity('!Activity_HitLeftSMALLheli')\n    static HitRightSMALLheli = new RaiderActivity('!Activity_HitRightSMALLheli')\n    static HitFrontSMALLheli = new RaiderActivity('!Activity_HitFrontSMALLheli')\n    static HitBackSMALLheli = new RaiderActivity('!Activity_HitBackSMALLheli')\n\n    static SMALLCAT = new RaiderActivity('Activity_SMALLCAT')\n    static StandSMALLCAT = new RaiderActivity('Activity_StandSMALLCAT')\n    static HitLeftSMALLCAT = new RaiderActivity('!Activity_HitLeftSMALLCAT')\n    static HitRightSMALLCAT = new RaiderActivity('!Activity_HitRightSMALLCAT')\n    static HitFrontSMALLCAT = new RaiderActivity('!Activity_HitFrontSMALLCAT')\n    static HitBackSMALLCAT = new RaiderActivity('!Activity_HitBackSMALLCAT')\n\n    static SMALLMLP = new RaiderActivity('Activity_SMALLMLP')\n    static StandSMALLMLP = new RaiderActivity('Activity_StandSMALLMLP')\n    static HitLeftSMALLMLP = new RaiderActivity('!Activity_HitLeftSMALLMLP')\n    static HitRightSMALLMLP = new RaiderActivity('!Activity_HitRightSMALLMLP')\n    static HitFrontSMALLMLP = new RaiderActivity('!Activity_HitFrontSMALLMLP')\n    static HitBackSMALLMLP = new RaiderActivity('!Activity_HitBackSMALLMLP')\n\n    static LARGECAT = new RaiderActivity('Activity_LARGECAT')\n    static StandLARGECAT = new RaiderActivity('Activity_StandLARGECAT')\n    static HitLeftLARGECAT = new RaiderActivity('!Activity_HitLeftLARGECAT')\n    static HitRightLARGECAT = new RaiderActivity('!Activity_HitRightLARGECAT')\n    static HitFrontLARGECAT = new RaiderActivity('!Activity_HitFrontLARGECAT')\n    static HitBackLARGECAT = new RaiderActivity('!Activity_HitBackLARGECAT')\n\n    static SMALLDIGGER = new RaiderActivity('Activity_SMALLDIGGER')\n    static StandSMALLDIGGER = new RaiderActivity('Activity_StandSMALLDIGGER')\n\n}\n","import { Vector2 } from 'three'\nimport { Area } from '../../../core/Area'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityTrained } from '../../../event/WorldEvents'\nimport { JOB_ACTION_RANGE, TILESIZE } from '../../../params'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { Surface } from '../map/Surface'\nimport { PathTarget } from '../PathTarget'\nimport { RaiderTraining } from '../raider/RaiderTraining'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class TrainJob extends Job {\n\n    workplaces: TrainingPathTarget[]\n    training: RaiderTraining\n\n    constructor(surface: Surface, training: RaiderTraining) {\n        super(JobType.TRAIN)\n        this.workplaces = [new TrainingPathTarget(surface)]\n        this.training = training\n    }\n\n    getWorkplaces(): TrainingPathTarget[] {\n        return this.workplaces\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.fulfiller.forEach((f) => {\n            f.addTraining(this.training)\n            EventBus.publishEvent(new EntityTrained(f, this.training))\n        })\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Train\n    }\n\n    getWorkDuration(): number {\n        return 10000 // XXX adjust training time\n    }\n\n}\n\nexport class TrainingPathTarget extends PathTarget {\n\n    targetArea: Area\n\n    constructor(surface: Surface) {\n        super(surface.getCenterWorld2D())\n        this.targetArea = new Area(surface.x * TILESIZE - JOB_ACTION_RANGE, surface.y * TILESIZE - JOB_ACTION_RANGE,\n            (surface.x + 1) * TILESIZE + JOB_ACTION_RANGE, (surface.y + 1) * TILESIZE + JOB_ACTION_RANGE)\n    }\n\n    isInArea(position: Vector2): boolean {\n        return position.x >= this.targetArea.x0 && position.x < this.targetArea.x1\n            && position.y >= this.targetArea.y0 && position.y < this.targetArea.y1\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { clearIntervalSafe } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { JobCreateEvent, JobDeleteEvent } from '../event/WorldEvents'\nimport { CHECK_CLEARRUBBLE_INTERVAL, JOB_SCHEDULE_INTERVAL } from '../params'\nimport { EntityType } from './model/EntityType'\nimport { GameState } from './model/GameState'\nimport { GetToolJob } from './model/job/GetToolJob'\nimport { PublicJob } from './model/job/Job'\nimport { JobState } from './model/job/JobState'\nimport { TrainJob } from './model/job/TrainJob'\nimport { Surface } from './model/map/Surface'\nimport { PathTarget } from './model/PathTarget'\nimport { Raider } from './model/raider/Raider'\nimport { RaiderTool } from './model/raider/RaiderTool'\nimport { RaiderTraining } from './model/raider/RaiderTraining'\nimport { WorldManager } from './WorldManager'\n\nexport class Supervisor {\n\n    worldMgr: WorldManager\n    jobs: PublicJob[] = []\n    assignInterval = null\n    checkRubbleInterval = null\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        EventBus.registerEventListener(EventKey.JOB_CREATE, (event: JobCreateEvent) => {\n            this.jobs.push(event.job)\n        })\n        EventBus.registerEventListener(EventKey.JOB_DELETE, (event: JobDeleteEvent) => {\n            event.job.cancel()\n        })\n    }\n\n    start() {\n        stop()\n        this.assignInterval = setInterval(this.assignJobs.bind(this), JOB_SCHEDULE_INTERVAL)\n        this.checkRubbleInterval = setInterval(this.checkUnclearedRubble.bind(this), CHECK_CLEARRUBBLE_INTERVAL)\n    }\n\n    stop() {\n        this.assignInterval = clearIntervalSafe(this.assignInterval)\n        this.checkRubbleInterval = clearIntervalSafe(this.checkRubbleInterval)\n        GameState.raiders.forEach((r) => r.resetWorkInterval())\n        GameState.raidersUndiscovered.forEach((r) => r.resetWorkInterval())\n    }\n\n    assignJobs() {\n        const availableJobs: PublicJob[] = []\n        this.jobs = this.jobs.filter((j) => {\n            const result = j.jobstate === JobState.INCOMPLETE\n            if (result && j.fulfiller.length < 1) availableJobs.push(j)\n            return result\n        })\n        availableJobs.sort((left, right) => {\n            return Math.sign(GameState.priorityList.getPriority(left) - GameState.priorityList.getPriority(right))\n        })\n        const unemployedRaider = GameState.raiders.filter((r) => !r.job)\n        availableJobs.forEach((job) => { // XXX better use estimated time to complete job as metric\n                let closestRaider: Raider = null\n                let closestRaiderIndex: number = null\n                let minDistance: number = null\n                let closestToolRaider: Raider = null\n                let closestToolRaiderIndex: number = null\n                let minToolDistance: number = null\n                let closestToolstationPosition: Vector2 = null\n                let closestNeededTool: RaiderTool = null\n                let closestTrainingRaider: Raider = null\n                let closestTrainingRaiderIndex: number = null\n                let minTrainingDistance: number = null\n                let closestTrainingArea: Surface = null\n                let closestNeededTraining: RaiderTraining = null\n                unemployedRaider.forEach((raider, index) => {\n                    const requiredTool = job.getRequiredTool()\n                    const hasRequiredTool = raider.hasTool(requiredTool)\n                    const raiderTraining = job.getRequiredTraining()\n                    const hasTraining = raider.hasTraining(raiderTraining)\n                    const raiderPosition = raider.getPosition()\n                    if (hasRequiredTool && hasTraining) {\n                        const pathToJob = job.getWorkplaces().map((b) => raider.findPathToTarget(b))\n                            .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                        if (pathToJob) {\n                            const dist = pathToJob.lengthSq // TODO use precalculated path to job\n                            if (minDistance === null || dist < minDistance) {\n                                closestRaider = raider\n                                closestRaiderIndex = index\n                                minDistance = dist\n                            }\n                        }\n                    } else if (!hasRequiredTool) {\n                        const pathToToolstation = GameState.getBuildingsByType(EntityType.TOOLSTATION)\n                            .map((b) => raider.findPathToTarget(new PathTarget(b.getPosition2D())))\n                            .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                        if (pathToToolstation) {\n                            const dist = pathToToolstation.lengthSq\n                            if (minToolDistance === null || dist < minToolDistance) {\n                                closestToolRaider = raider\n                                closestToolRaiderIndex = index\n                                minToolDistance = dist\n                                closestToolstationPosition = pathToToolstation.targetPosition // TODO use precalculated path to toolstation\n                                closestNeededTool = requiredTool\n                            }\n                        }\n                    } else {\n                        const pathToTraining = GameState.getTrainingSites(raiderPosition, raiderTraining)\n                            .map((site) => raider.findPathToTarget(new PathTarget(site.getPosition2D())))\n                            .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                        if (pathToTraining) {\n                            const dist = pathToTraining.lengthSq\n                            if (minTrainingDistance === null || dist < minTrainingDistance) {\n                                closestTrainingRaider = raider\n                                closestTrainingRaiderIndex = index\n                                minTrainingDistance = dist\n                                closestTrainingArea = raider.worldMgr.sceneManager.terrain.getSurfaceFromWorld2D(pathToTraining.targetPosition) // TODO use precalculated path to training\n                                closestNeededTraining = raiderTraining\n                            }\n                        }\n                    }\n                })\n                if (closestRaider) {\n                    closestRaider.setJob(job)\n                    unemployedRaider.splice(closestRaiderIndex, 1)\n                } else if (closestToolRaider) {\n                    closestToolRaider.setJob(new GetToolJob(closestToolstationPosition, closestNeededTool), job)\n                    unemployedRaider.splice(closestToolRaiderIndex, 1)\n                } else if (closestTrainingRaider) {\n                    closestTrainingRaider.setJob(new TrainJob(closestTrainingArea, closestNeededTraining), job)\n                    unemployedRaider.splice(closestTrainingRaiderIndex, 1)\n                }\n            },\n        )\n    }\n\n    checkUnclearedRubble() {\n        GameState.raiders.forEach((raider) => {\n            if (raider.job) return\n            const startSurface = raider.worldMgr.sceneManager.terrain.getSurfaceFromWorld(raider.getPosition())\n            for (let rad = 0; rad < 10; rad++) {\n                for (let x = startSurface.x - rad; x <= startSurface.x + rad; x++) {\n                    for (let y = startSurface.y - rad; y <= startSurface.y + rad; y++) {\n                        const surface = raider.worldMgr.sceneManager.terrain.getSurfaceOrNull(x, y)\n                        if (!(surface?.hasRubble()) || !surface?.discovered) continue\n                        const clearRubbleJob = surface.createClearRubbleJob()\n                        if (!clearRubbleJob) continue\n                        const requiredTool = clearRubbleJob.getRequiredTool()\n                        if (raider.hasTool(requiredTool)) {\n                            raider.setJob(clearRubbleJob)\n                        } else {\n                            const pathToToolstation = GameState.getBuildingsByType(EntityType.TOOLSTATION)\n                                .map((b) => raider.findPathToTarget(new PathTarget(b.getPosition2D())))\n                                .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                            if (pathToToolstation) {\n                                raider.setJob(new GetToolJob(pathToToolstation.targetPosition, requiredTool), clearRubbleJob) // TODO use precalculated path to toolstation\n                            }\n                        }\n                    }\n                }\n            }\n        })\n    }\n\n}\n","/** Function documentation mostly copied from the following URLs\n *\n * https://kb.rockraidersunited.com/User:Jessietail/NERPs_reference\n * https://web.archive.org/web/20131206122442/http://rru-stuff.org/nerpfuncs.html\n * https://kb.rockraidersunited.com/NERPs_documentation#Labels\n *\n */\nimport { EntityType } from '../game/model/EntityType'\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { clearIntervalSafe } from './Util'\n\nexport class NerpRunner {\n\n    debug = false\n    onLevelComplete: () => any = null\n    nerpInterval: NodeJS.Timeout = null\n\n    registers = new Array(8).fill(0)\n    timers = new Array(4).fill(0)\n    scriptLines = [] // contains humand readable script strings\n    statements = [] // contains parsed statements for execution\n    macrosByName = {}\n    labelsByName = {}\n    halted = false\n    programCounter = 0\n    messages = []\n    // more state variables and switches\n    messagePermit = null\n\n    constructor(debug = false) {\n        this.debug = debug\n    }\n\n    startExecution() {\n        const that = this\n        this.nerpInterval = setInterval(() => {\n            that.execute()\n        }, 2000)\n    }\n\n    pauseExecution() {\n        this.nerpInterval = clearIntervalSafe(this.nerpInterval)\n    }\n\n    /**\n     * Internally used to validate and parse a register number.\n     * @param register\n     * @return {number}\n     */\n    checkRegister(register) {\n        const num = parseInt(register)\n        if (isNaN(num) || num < 0 || num > this.registers.length) throw new Error('Invalid register (' + register + ') provided')\n        return num\n    }\n\n    /**\n     * Internally used to validate and parse a value before setting or adding it with a register.\n     * @param value\n     * @return {number}\n     */\n    checkRegisterValue(value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Invalid register value (' + value + ') provided')\n        return num\n    }\n\n    /**\n     * Gets the value currently stored in the given register, internally used to handle all registers with one method.\n     * @param register the register to read\n     * @return {number} returns the value currently stored in the register\n     */\n    getR(register) {\n        register = this.checkRegister(register)\n        return this.registers[register]\n    }\n\n    /**\n     * Sets the given value for the given register, internally used to handle all registers with one method.\n     * @param register the register to set\n     * @param value the value to set for the given register\n     */\n    setR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] = value\n    }\n\n    /**\n     * Adds the given value to the given register, internally used to handle all registers with one method.\n     * @param register the register to add to\n     * @param value the value to add to the given register\n     */\n    addR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] += value\n    }\n\n    /**\n     * Set the respective timer to the given numerical value. Units are in milliseconds.\n     * @param timer\n     * @param value\n     */\n    setTimer(timer, value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Can\\'t set timer to NaN value: ' + value)\n        this.timers[timer] = new Date().getTime() + num\n    }\n\n    /**\n     * Gets the value of the respective timer. Units are in milliseconds.\n     * @param timer\n     * @return {number}\n     */\n    getTimer(timer) {\n        return new Date().getTime() - this.timers[timer]\n    }\n\n    /**\n     * End the level successfully and show the score screen.\n     */\n    setLevelCompleted() {\n        console.log('Nerp runner marks level as complete')\n        this.halted = true\n        GameState.resultState = GameResultState.COMPLETE\n        this.onLevelComplete()\n    }\n\n    /**\n     * End the level as failure and show the score screen.\n     */\n    setLevelFail() {\n        console.log('NerpRunner marks level as failed')\n        this.halted = true\n        GameState.resultState = GameResultState.FAILED\n        this.onLevelComplete()\n    }\n\n    /**\n     * Sets tutorial flags\n     * @param value a bitmask to set flags with\n     */\n    setTutorialFlags(value) {\n        // TODO implement tutorial flags\n        // seems like value must be interpreted bitwise and sets a certain flag on each bit\n        // seen so far:\n        // 0 = 0x00 allow any click anywhere anytime\n        // 3 = 0x11 disallow invalid clicks\n        // 4095 = 0x111111111111 set all flags? (seen in Tutorial01 level)\n    }\n\n    /**\n     * This is used to make messages come up/not come up.\n     * @param messagesAllowed\n     */\n    setMessagePermit(messagesAllowed) {\n        this.messagePermit = !messagesAllowed\n    }\n\n    setBuildingsUpgradeLevel(typeName: EntityType, level: number) {\n        GameState.buildings.forEach(b => {\n            if (b.entityType === typeName) b.level = level\n        })\n    }\n\n    setToolStoreLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.TOOLSTATION, level)\n    }\n\n    setTeleportPadLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.TELEPORT_PAD, level)\n    }\n\n    setPowerStationLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.POWER_STATION, level)\n    }\n\n    setBarracksLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.BARRACKS, level)\n    }\n\n    /**\n     * Gets the number of tool stores currently built. NOT the total ever built.\n     * @return {number}\n     */\n    getToolStoresBuilt() {\n        return GameState.buildings.count((b) => b.entityType === EntityType.TOOLSTATION)\n    }\n\n    /**\n     * Gets the number of minifigures on the level. TODO it is NOT tested if this ignores minifigures in hidden caverns\n     * @return {number}\n     */\n    getMinifiguresOnLevel() {\n        return GameState.raiders.length\n    }\n\n    /**\n     * Gets the number of crystals currently stored.\n     * @return {number}\n     */\n    getCrystalsCurrentlyStored() {\n        return GameState.numCrystal\n    }\n\n    getObjectiveSwitch() {\n        // TODO implement this\n        return 0\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    setMessageTimerValues(arg1, arg2, arg3) {\n        // TODO implement this\n    }\n\n    getMessageTimer() {\n        return 0 // TODO return remaining amount of time needed to fully play WAV message\n    }\n\n    cameraUnlock() {\n        // TODO implement this\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    setMessage(messageNumber, arrowDisabled) {\n        if (!this.messagePermit) return\n        if (messageNumber === 0) return // TODO messages start at 1\n        const msg = this.messages[messageNumber]\n        console.log(msg.txt) // TODO show message to user\n        // msg.snd resides in sounds/streamed/ which is currently not loaded :(\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    setCameraGotoTutorial(arg1) {\n        // TODO implement this\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    getTutorialBlockIsGround(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    getTutorialBlockIsPath(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    getUnitAtBlock(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getOxygenLevel() {\n        // TODO implement this\n        return 100\n    }\n\n    getObjectiveShowing() {\n        // TODO implement this\n        return false\n    }\n\n    addPoweredCrystals() {\n        // TODO implement this\n    }\n\n    disallowAll() {\n        // TODO implement this\n    }\n\n    getPoweredPowerStationsBuilt() {\n        return GameState.buildings.count((b) => b.isPowered() && b.entityType === EntityType.POWER_STATION)\n    }\n\n    getPoweredBarracksBuilt() {\n        return GameState.buildings.count((b) => b.isPowered() && b.entityType === EntityType.BARRACKS)\n    }\n\n    getRecordObjectAtTutorial() {\n        // TODO implement this\n    }\n\n    getHiddenObjectsFound() {\n        // TODO implement this\n        return 0\n    }\n\n    getLevel1PowerStationsBuilt() {\n        // TODO implement this\n        return 0\n    }\n\n    callMethod(methodName, methodArgs) {\n        if (methodName === 'Stop') {\n            throw 'Stop'\n        } else if (methodName === 'TRUE') {\n            return true\n        } else if (methodName === 'FALSE') {\n            return false\n        }\n        const setRegisterMatch = methodName.match(/^SetR([0-7])$/)\n        if (setRegisterMatch) {\n            return this.setR(setRegisterMatch[1], methodArgs[0])\n        }\n        const addRegisterMatch = methodName.match(/^AddR([0-7])$/)\n        if (addRegisterMatch) {\n            return this.addR(addRegisterMatch[1], methodArgs[0])\n        }\n        const getRegisterMatch = methodName.match(/^GetR([0-7])$/)\n        if (getRegisterMatch) {\n            return this.getR(getRegisterMatch[1])\n        }\n        const setTimerMatch = methodName.match(/^SetTimer([0-3])$/)\n        if (setTimerMatch) {\n            return this.setTimer(setTimerMatch[1], methodArgs[0])\n        }\n        const getTimerMatch = methodName.match(/^GetTimer([0-3])$/)\n        if (getTimerMatch) {\n            return this.getTimer(getTimerMatch[1])\n        }\n        const lMethodName = methodName.toLowerCase()\n        for (const memberName in this) {\n            // noinspection JSUnfilteredForInLoop\n            if (memberName.toLowerCase() === lMethodName) {\n                // @ts-ignore\n                // noinspection JSUnfilteredForInLoop\n                return this[memberName].apply(this, methodArgs)\n            }\n        }\n        throw new Error('Undefined method: ' + methodName)\n    }\n\n    conditional(left, right) {\n        const conditionResult = this.executeStatement(left)\n        if (this.debug) {\n            console.log('Condition evaluated to ' + conditionResult)\n        }\n        if (conditionResult) {\n            this.executeStatement(right)\n        }\n    }\n\n    executeStatement(expression) {\n        if (expression.invoke) {\n            const argValues = expression.invoke !== 'conditional' ? expression.args.map(e => this.executeStatement(e)) : expression.args\n            const result = this.callMethod(expression.invoke, argValues)\n            if (result !== undefined && this.debug) {\n                console.log('Method returned: ' + result)\n            }\n            return result\n        } else if (expression.comparator) {\n            const left = this.executeStatement(expression.left)\n            const right = this.executeStatement(expression.right)\n            if (expression.comparator === '=') {\n                return left === right\n            } else if (expression.comparator === '!=') {\n                return left !== right\n            } else if (expression.comparator === '<') {\n                return left < right\n            } else if (expression.comparator === '>') {\n                return left > right\n            } else {\n                console.log(expression)\n                throw new Error('Unknown comparator: ' + expression.comparator)\n            }\n        } else if (!isNaN(expression)) { // just a number\n            return expression\n        } else if (expression.jump) {\n            this.programCounter = this.labelsByName[expression.jump]\n            if (this.programCounter === undefined) {\n                throw new Error('Label \\'' + expression.jump + '\\' is unknown!')\n            }\n            if (this.debug) {\n                console.log('Jumping to label \\'' + expression.jump + '\\' in line ' + this.programCounter)\n            }\n        } else {\n            console.log(expression)\n            throw new Error('Unknown expression in line ' + this.programCounter + ': ' + expression)\n        }\n    }\n\n    execute(debug = false) {\n        this.debug = debug\n        if (this.halted) return\n        try {\n            if (this.debug) {\n                console.log('Executing following script\\n' + this.scriptLines.join('\\n'))\n                console.log('Registers: ' + this.registers)\n            }\n            for (this.programCounter = 0; this.programCounter < this.statements.length; this.programCounter++) {\n                const statement = this.statements[this.programCounter]\n                if (this.debug) {\n                    console.log(this.programCounter + ': ' + this.scriptLines[this.programCounter])\n                    console.log(statement)\n                }\n                if (!statement.label) { // do nothing for label markers\n                    this.executeStatement(statement)\n                }\n            }\n        } catch (e) {\n            if (e === 'Stop') {\n                return\n            }\n            console.error(e)\n            console.error('FATAL ERROR! Script execution failed! You can NOT win anymore!')\n            this.halted = true\n            debugger;\n        }\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { NerpRunner } from './NerpRunner'\n\nexport class NerpParser {\n\n    static parse(nerpScript: string): NerpRunner {\n        const nerpRunner = new NerpRunner()\n        const lines = nerpScript.split('\\n').map(l => l\n            .split('//')[0].trim() // before comment starts\n            .split(';')[0].trim() // before preprocessor comment starts\n            .replace(/_/g, '') // some preprocessor macros use this prefix\n            .replace(/\\bTRUE \\? /, '') // some weird requirement of the original language\n            .replace(/[{}]/g, ''), // duplicate limit for macros using labels too\n        )\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c]\n            if (line.length < 1) {\n                continue // ignore empty lines, but important for macro closure\n            }\n            if (line.startsWith('#include ')) { // include other nerp scripts/headers\n                const includeName = line.replace(/^#include /, '').trim().slice(1, -1)\n                if (includeName === 'nerpdef.h') {\n                    // trivial default header file, is applied by search and replace above\n                    // see https://github.com/jgrip/legorr/blob/master/nerpdef.h\n                    continue\n                }\n                const includedRunner = NerpParser.parse(ResourceManager.getResource('Levels/' + includeName))\n                if (!includedRunner || !includedRunner.scriptLines || includedRunner.scriptLines.length < 1) {\n                    throw 'Can\\'t include unknown nerp script: ' + line\n                }\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(includedRunner.scriptLines)\n                // copy macros from included file to current file\n                nerpRunner.macrosByName = Object.assign({}, nerpRunner.macrosByName, includedRunner.macrosByName)\n            } else if (line.startsWith('#define ')) { // parse C++ preprocessor macro\n                const firstLine = line.replace(/^#define /, '').split(' ')\n                const macroLines = [firstLine.splice(1).join(' ').replace(/\\\\$/, '').trim()]\n                let mLine = line\n                let append = false\n                while (mLine.endsWith('\\\\') && c < lines.length - 1) {\n                    c++\n                    mLine = lines[c].trim()\n                    const macroLine = mLine.replace(/\\\\$/, '').trim()\n                    if (macroLine.length > 0) {\n                        if (append) {\n                            append = false\n                            macroLines[macroLines.length - 1] += macroLine\n                        } else {\n                            macroLines.push(macroLine)\n                        }\n                    }\n                    if (mLine.match(/:\\\\$/)) {\n                        append = true\n                    }\n                }\n                const macroCall = firstLine[0].split('(')\n                nerpRunner.macrosByName[macroCall[0]] = {\n                    args: macroCall[1].replace(/\\)$/, '').split(','),\n                    lines: macroLines,\n                }\n            } else {\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(this.replaceMacros(nerpRunner.macrosByName, line))\n            }\n        }\n        // somewhat precompile the script and create syntax tree\n        // must be done in separate block to make sure the script is complete and we can refer/rely on line numbers for label jumps\n        for (let c = 0; c < nerpRunner.scriptLines.length; c++) {\n            const line = nerpRunner.scriptLines[c]\n            nerpRunner.statements[c] = line.replace(/\\(\\)/g, '') // now the macros are applied and obsolete empty \"()\" can be removed\n                .split(' ? ')\n            const labelMatch = line.match(/(\\S+):/)\n            if (nerpRunner.statements[c].length === 2) { // line contains condition (primary operator)\n                nerpRunner.statements[c] = {\n                    invoke: 'conditional',\n                    args: [this.preProcess(nerpRunner.statements[c][0]), this.preProcess(nerpRunner.statements[c][1])],\n                }\n            } else if (labelMatch) { // keep label line number for later usage\n                const labelName = labelMatch[1].toLowerCase()\n                nerpRunner.labelsByName[labelName] = c\n                nerpRunner.statements[c] = {label: labelName}\n            } else if (nerpRunner.statements[c].length === 1) { // just a call\n                nerpRunner.statements[c] = this.preProcess(nerpRunner.statements[c][0])\n            } else { // lines contains more than 1 condition statement\n                throw 'Can\\'t deal with line: ' + line\n            }\n        }\n        return nerpRunner\n    }\n\n    static replaceMacros(macrosByName, line): string[] {\n        // check if this line contains a macro\n        const split = line.split('(') // not a very stable check though...\n        const macro = macrosByName[split[0]]\n        if (macro) {\n            const argValues = split.splice(1).join('(').slice(0, -1).split(',')\n            if (argValues.length !== macro.args.length) {\n                throw 'Invalid number of args provided for macro in line ' + line\n            }\n            const macroLines = []\n            macro.lines.forEach((line) => {\n                for (let c = 0; c < argValues.length; c++) {\n                    line = line.replace(new RegExp('\\\\b' + macro.args[c] + '\\\\b'), argValues[c])\n                }\n                macroLines.push(...(this.replaceMacros(macrosByName, line)))\n            })\n            return macroLines\n        } else {\n            return [line]\n        }\n    }\n\n    static preProcess(expression) {\n        expression = expression.trim().replace(/^_/, '') // remove whitespace and leading underscore\n        const number = parseInt(expression)\n        if (!isNaN(number)) {\n            return number\n        }\n        const opSplit = expression.split(/ (=) | (!=) | (>) | (<) /).filter(e => e !== undefined)\n        const brackets = expression.match(/^(.+)\\((.+)\\)$/)\n        const spaceSplit = expression.split(' ')\n        const labelMatch = expression.match(/([^:]+):$/)\n        const jumpMatch = expression.match(/^:([^:]+)$/)\n        if (opSplit.length === 3) { // expression contains secondary operator\n            return {left: this.preProcess(opSplit[0]), comparator: opSplit[1], right: this.preProcess(opSplit[2])}\n        } else if (brackets) {\n            const args = brackets[2].split(',').map(a => this.preProcess(a))\n            return {invoke: brackets[1], args: args}\n        } else if (spaceSplit.length > 1) { // space split must be the very last since most expressions contain space\n            const args = spaceSplit.length === 2 ? [this.preProcess(spaceSplit[1])] : spaceSplit.splice(1).map(a => this.preProcess(a))\n            return {invoke: spaceSplit[0], args: args}\n        } else if (labelMatch) { // label definition\n            return {label: labelMatch[1]}\n        } else if (jumpMatch) { // jump to label\n            return {jump: jumpMatch[1].toLowerCase()}\n        } else { // function call without args\n            if (expression.match(/[ =?><!]/)) {\n                throw 'Invalid expression given, parsing must have failed before somewhere'\n            }\n            return {invoke: expression, args: []}\n        }\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class MoveJob extends Job {\n\n    target: PathTarget[]\n\n    constructor(target: Vector2) {\n        super(JobType.MOVE)\n        this.target = [new PathTarget(target)]\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.target\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { EventKey } from './EventKeyEnum'\nimport { WorldEvent } from './WorldEvents'\n\nexport class WorldLocationEvent extends WorldEvent {\n\n    location: Vector3\n\n    constructor(entityKey: EventKey, location: Vector3) {\n        super(entityKey)\n        this.location = location\n    }\n\n}\n\nexport class GenericDeathEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_DEATH, location)\n    }\n\n}\n\nexport class GenericMonsterEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_MONSTER, location)\n    }\n\n}\n\nexport class CrystalFoundEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_CRYSTAL_FOUND, location)\n    }\n\n}\n\nexport class UnderAttackEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_UNDER_ATTACK, location)\n    }\n\n}\n\nexport class LandslideEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_LANDSLIDE, location)\n    }\n\n}\n\nexport class PowerDrainEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_POWER_DRAIN, location)\n    }\n\n}\n\nexport class SlugEmergeEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_SLUG_EMERGE, location)\n    }\n\n}\n\nexport class RaiderDiscoveredEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_RAIDER_DISCOVERED, location)\n    }\n\n}\n","import { Vector3 } from 'three'\n\nexport class EntityStep {\n\n    vec: Vector3 = null\n    targetReached: boolean = false\n\n    constructor(vec: Vector3) {\n        this.vec = vec\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\n\nexport class TerrainPath {\n\n    target: PathTarget = null\n    locations: Vector2[] = []\n    lengthSq: number = 0\n\n    constructor(target: PathTarget, locations: Vector2[] | Vector2) {\n        this.target = target\n        this.locations = Array.isArray(locations) ? locations : [locations]\n        for (let c = 0; c < this.locations.length - 1; c++) {\n            const start = this.locations[c]\n            const end = this.locations[c + 1]\n            this.lengthSq += start.distanceToSquared(end)\n        }\n    }\n\n    addLocation(location: Vector2): TerrainPath {\n        this.locations.push(location)\n        if (this.locations.length > 1) {\n            this.lengthSq += this.locations[this.locations.length - 2].distanceToSquared(location)\n        }\n        return this\n    }\n\n    get targetPosition(): Vector2 {\n        return this.locations[this.locations.length - 1] || null\n    }\n\n    get firstLocation(): Vector2 {\n        return this.locations[0] || null\n    }\n\n}\n","import { Vector2, Vector3 } from 'three'\nimport { MovableEntityStats } from '../../cfg/MovableEntityStats'\nimport { JOB_ACTION_RANGE } from '../../params'\nimport { AnimEntityActivity } from './activities/AnimEntityActivity'\nimport { AnimEntity } from './anim/AnimEntity'\nimport { EntityStep } from './EntityStep'\nimport { EntitySuperType, EntityType } from './EntityType'\nimport { TerrainPath } from './map/TerrainPath'\nimport { MoveState } from './MoveState'\nimport { PathTarget } from './PathTarget'\n\nexport abstract class MovableEntity extends AnimEntity {\n\n    currentPath: TerrainPath = null\n    floorOffset: number = 0\n\n    protected constructor(superType: EntitySuperType, entityType: EntityType, aeFilename: string) {\n        super(superType, entityType, aeFilename)\n    }\n\n    abstract get stats(): MovableEntityStats\n\n    getPosition(): Vector3 {\n        return new Vector3(this.group.position.x, this.group.position.y, this.group.position.z)\n    }\n\n    getPosition2D(): Vector2 {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    getSpeed(): number {\n        return this.stats.RouteSpeed[this.level] * (this.animation?.transcoef || 1) * (this.isOnPath() ? this.stats.PathCoef : 1)\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        if (target.length < 1) console.warn('No targets given')\n        if (!this.currentPath || !target.some((t) => t.targetLocation.equals(this.currentPath.target.targetLocation))) {\n            const paths = target.map((t) => this.findPathToTarget(t))\n                .sort((l, r) => l.lengthSq - r.lengthSq)\n            this.currentPath = paths.length > 0 ? paths[0] : null\n            if (!this.currentPath) return MoveState.TARGET_UNREACHABLE\n        }\n        const nextLocation = this.currentPath.firstLocation\n        this.group.lookAt(new Vector3(nextLocation.x, this.group.position.y, nextLocation.y))\n        const step = this.determineStep()\n        if (step.targetReached || this.currentPath.target.isInArea(this.getPosition2D())) {\n            return MoveState.TARGET_REACHED\n        } else {\n            this.group.position.add(step.vec)\n            this.changeActivity(this.getRouteActivity()) // only change when actually moving\n            return MoveState.MOVED\n        }\n    }\n\n    abstract getRouteActivity(): AnimEntityActivity\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return new TerrainPath(target, target.targetLocation)\n    }\n\n    determineStep(): EntityStep {\n        const step = this.getEntityStep(this.currentPath.firstLocation)\n        const stepLengthSq = step.vec.lengthSq()\n        const entitySpeed = this.getSpeed() // TODO use average speed between current and target position\n        if (this.currentPath.locations.length > 1) {\n            if (stepLengthSq < entitySpeed * entitySpeed) {\n                this.currentPath.locations.shift()\n                return this.determineStep()\n            }\n        } else if (stepLengthSq < JOB_ACTION_RANGE * JOB_ACTION_RANGE) {\n            step.targetReached = true\n        }\n        step.vec.setLength(Math.min(entitySpeed, JOB_ACTION_RANGE))\n        return step\n    }\n\n    getEntityStep(target: Vector2): EntityStep {\n        const targetWorld = this.worldMgr.getFloorPosition(target)\n        targetWorld.y += this.floorOffset\n        return new EntityStep(targetWorld.sub(this.group.position))\n    }\n\n    isOnRubble() {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).hasRubble()\n    }\n\n    isOnPath(): boolean {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).isPath()\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { clearIntervalSafe } from '../../core/Util'\nimport { SelectionEvent } from '../../event/LocalEvents'\nimport { NATIVE_FRAMERATE } from '../../params'\nimport { MaterialEntity } from './collect/MaterialEntity'\nimport { EntitySuperType, EntityType } from './EntityType'\nimport { Job } from './job/Job'\nimport { MovableEntity } from './MovableEntity'\nimport { PathTarget } from './PathTarget'\nimport { RaiderTool } from './raider/RaiderTool'\nimport { RaiderTraining } from './raider/RaiderTraining'\nimport { Selectable, SelectionType } from './Selectable'\n\nexport abstract class FulfillerEntity extends MovableEntity implements Selectable {\n\n    selectionType: SelectionType\n    selected: boolean\n    workInterval = null\n    job: Job = null\n    followUpJob: Job = null\n    carries: MaterialEntity = null\n    jobWorkplaces: PathTarget[] = []\n\n    protected constructor(superType: EntitySuperType, entityType: EntityType, aeFilename: string, selectionType: SelectionType) {\n        super(superType, entityType, aeFilename)\n        this.selectionType = selectionType\n        this.group.userData = {'selectable': this}\n        this.workInterval = setInterval(this.work.bind(this), 1000 / NATIVE_FRAMERATE) // TODO do not use interval, make work trigger itself (with timeout/interval) until work is done\n    }\n\n    resetWorkInterval() {\n        this.workInterval = clearIntervalSafe(this.workInterval)\n    }\n\n    abstract work()\n\n    dropItem() {\n        if (!this.carries) return\n        if (this.carryJoint) {\n            this.carryJoint.remove(this.carries.group)\n            this.carryJoint.getWorldPosition(this.carries.group.position)\n        } else {\n            this.carries.group.position.copy(this.worldMgr.getFloorPosition(this.getPosition2D()))\n        }\n        this.carries.worldMgr.sceneManager.scene.add(this.carries.group)\n        this.carries = null\n    }\n\n    pickupItem(item: MaterialEntity) {\n        this.carries = item\n        if (this.carryJoint) this.carryJoint.add(this.carries.group)\n        this.carries.group.position.set(0, 0, 0)\n    }\n\n    setJob(job: Job, followUpJob: Job = null) {\n        if (this.job !== job) this.stopJob()\n        this.job = job\n        if (this.job) this.job.assign(this)\n        this.followUpJob = followUpJob\n        if (this.followUpJob) this.followUpJob.assign(this)\n        this.jobWorkplaces = this.job.getWorkplaces()\n    }\n\n    stopJob() {\n        this.dropItem()\n        if (!this.job) return\n        this.job.unassign(this)\n        if (this.followUpJob) this.followUpJob.unassign(this)\n        this.job = null\n        this.followUpJob = null\n        this.jobWorkplaces = []\n        this.changeActivity()\n    }\n\n    abstract hasTool(tool: RaiderTool)\n\n    abstract hasTraining(training: RaiderTraining)\n\n    getSelectionType(): SelectionType {\n        return this.selectionType\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    abstract select(): SelectionEvent;\n\n    abstract getSelectionCenter(): Vector3;\n\n    abstract addTool(tool: RaiderTool)\n\n    abstract addTraining(skill: RaiderTraining)\n\n}\n","export class RaiderTool {\n\n    static DRILL = new RaiderTool('drill')\n    static HAMMER = new RaiderTool('hammer')\n    static SHOVEL = new RaiderTool('shovel')\n    static SPANNER = new RaiderTool('spanner')\n    static FREEZERGUN = new RaiderTool('freezergun')\n    static LASER = new RaiderTool('laser')\n    static PUSHERGUN = new RaiderTool('pushergun')\n    static BIRDSCARER = new RaiderTool('birdscarer')\n\n    name: string\n\n    constructor(name: string) {\n        this.name = name\n    }\n\n}\n","import { MathUtils, Vector2, Vector3 } from 'three'\nimport { getRandom, getRandomInclusive } from '../../../core/Util'\nimport { EventBus } from '../../../event/EventBus'\nimport { RaiderSelected, SelectionEvent } from '../../../event/LocalEvents'\nimport { EntityAddedEvent, OreFoundEvent } from '../../../event/WorldEvents'\nimport { CrystalFoundEvent, RaiderDiscoveredEvent } from '../../../event/WorldLocationEvent'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseActivity } from '../activities/BaseActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { Crystal } from '../collect/Crystal'\nimport { Ore } from '../collect/Ore'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { GameState } from '../GameState'\nimport { JobState } from '../job/JobState'\nimport { JobType } from '../job/JobType'\nimport { DrillJob } from '../job/surface/DrillJob'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { TerrainPath } from '../map/TerrainPath'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { SelectionType } from '../Selectable'\nimport { RaiderTool } from './RaiderTool'\nimport { RaiderTraining } from './RaiderTraining'\nimport degToRad = MathUtils.degToRad\n\nexport class Raider extends FulfillerEntity {\n\n    tools: Map<RaiderTool, boolean> = new Map()\n    trainings: Map<RaiderTraining, boolean> = new Map()\n    slipped: boolean = false\n\n    constructor() {\n        super(EntitySuperType.RAIDER, EntityType.PILOT, 'mini-figures/pilot/pilot.ae', SelectionType.RAIDER)\n        this.tools.set(RaiderTool.DRILL, true)\n    }\n\n    get stats() {\n        return ResourceManager.stats.Pilot\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.worldMgr.sceneManager.terrain.findPath(this.getPosition2D(), target)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.raidersUndiscovered.remove(this)\n        GameState.raiders.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(this))\n        EventBus.publishEvent(new RaiderDiscoveredEvent(this.getPosition()))\n    }\n\n    select(): SelectionEvent {\n        this.selectionFrame.visible = !this.slipped\n        if (this.selected || this.slipped) return null\n        this.selected = true\n        this.changeActivity()\n        return new RaiderSelected(this)\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    isDriving(): boolean {\n        return false // TODO implement vehicles\n    }\n\n    getRouteActivity(): BaseActivity {\n        if (this.isOnRubble()) {\n            return !!this.carries ? RaiderActivity.CarryRubble : RaiderActivity.routeRubble\n        } else {\n            return !!this.carries ? RaiderActivity.Carry : RaiderActivity.Route\n        }\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        const result = super.moveToClosestTarget(target)\n        this.job.setActualWorkplace(this.currentPath?.target)\n        if (result === MoveState.MOVED) {\n            GameState.getNearbySpiders(this).some((spider) => {\n                if (this.group.position.distanceToSquared(spider.group.position) < this.radiusSq + spider.radiusSq) {\n                    this.slip()\n                    spider.onDeath()\n                    return true\n                }\n            })\n        } else if (result === MoveState.TARGET_UNREACHABLE) {\n            console.log('Entity could not move to job target, stopping job')\n            this.stopJob()\n        }\n        return result\n    }\n\n    slip() {\n        if (getRandomInclusive(0, 100) < 10) this.stopJob()\n        this.dropItem()\n        this.slipped = true\n        this.changeActivity(RaiderActivity.Slip, () => {\n            this.slipped = false\n        })\n    }\n\n    moveToClosestWorkplace(): boolean {\n        return this.moveToClosestTarget(this.jobWorkplaces) === MoveState.TARGET_REACHED\n    }\n\n    work() {\n        if (!this.job || this.selected || this.slipped) return\n        if (this.job.jobstate !== JobState.INCOMPLETE) {\n            this.stopJob()\n            return\n        }\n        if (this.job.type === JobType.DRILL) {\n            if (this.moveToClosestWorkplace()) {\n                const surfJob = this.job as DrillJob\n                let drillTimeMs = this.getDrillTime(surfJob.surface.surfaceType)\n                const focusPoint = surfJob.surface.getCenterWorld()\n                focusPoint.y = this.group.position.y\n                this.group.lookAt(focusPoint)\n                this.changeActivity(RaiderActivity.Drill, () => {\n                    if (surfJob.surface.seamLevel > 0) {\n                        surfJob.surface.seamLevel--\n                        const vec = new Vector2().copy(this.getPosition2D()).sub(surfJob.surface.getCenterWorld2D())\n                            .multiplyScalar(0.3 + getRandom(3) / 10)\n                            .rotateAround(new Vector2(0, 0), degToRad(-10 + getRandom(20)))\n                            .add(this.getPosition2D())\n                        if (surfJob.surface.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                            const crystal = this.worldMgr.placeMaterial(new Crystal(), vec)\n                            EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n                        } else if (surfJob.surface.surfaceType === SurfaceType.ORE_SEAM) {\n                            this.worldMgr.placeMaterial(new Ore(), vec)\n                            EventBus.publishEvent(new OreFoundEvent())\n                        }\n                        this.changeActivity()\n                    } else {\n                        this.completeJob()\n                    }\n                }, drillTimeMs)\n            }\n        } else {\n            const carryItem = this.job.getCarryItem()\n            if (carryItem && this.carries !== carryItem) {\n                this.dropItem()\n                if (this.moveToClosestTarget([new PathTarget(carryItem.getPosition2D())])) { // XXX cache item path target\n                    this.changeActivity(RaiderActivity.Collect, () => {\n                        this.pickupItem(carryItem)\n                    })\n                }\n            } else if (this.moveToClosestWorkplace()) {\n                if (this.job.isReadyToComplete()) {\n                    const workActivity = this.job.getWorkActivity() || this.getDefaultActivity()\n                    this.changeActivity(workActivity, () => {\n                        this.completeJob()\n                    }, this.job.getWorkDuration())\n                } else {\n                    this.changeActivity()\n                }\n            }\n        }\n    }\n\n    private getDrillTime(surfaceType: SurfaceType) {\n        let drillTimeMs = null\n        if (surfaceType === SurfaceType.HARD_ROCK) {\n            drillTimeMs = this.stats.HardDrillTime[this.level] * 1000\n        } else if (surfaceType === SurfaceType.LOOSE_ROCK) {\n            drillTimeMs = this.stats.LooseDrillTime[this.level] * 1000\n        } else if (surfaceType === SurfaceType.DIRT) {\n            drillTimeMs = this.stats.SoilDrillTime[this.level] * 1000\n        } else if (surfaceType === SurfaceType.ORE_SEAM ||\n            surfaceType === SurfaceType.CRYSTAL_SEAM) {\n            drillTimeMs = this.stats.SeamDrillTime[this.level] * 1000\n        }\n        drillTimeMs = drillTimeMs || 0\n        if (!drillTimeMs) console.warn('According to cfg this entity cannot drill this material')\n        return drillTimeMs\n    }\n\n    private completeJob() {\n        this.job?.onJobComplete()\n        if (this.job?.jobstate === JobState.INCOMPLETE) return\n        if (this.job) this.job.unassign(this)\n        this.job = this.followUpJob\n        this.followUpJob = null\n        this.jobWorkplaces = this.job?.getWorkplaces() || []\n        this.changeActivity()\n    }\n\n    getDefaultActivity(): BaseActivity {\n        return this.carries ? RaiderActivity.CarryStand : super.getDefaultActivity()\n    }\n\n    beamUp() {\n        this.stopJob()\n        super.beamUp()\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        GameState.raiders.remove(this)\n    }\n\n    hasTool(tool: RaiderTool) {\n        return !tool || this.tools.has(tool)\n    }\n\n    hasTraining(training: RaiderTraining) {\n        return !training || this.trainings.has(training)\n    }\n\n    addTool(tool: RaiderTool) {\n        this.tools.set(tool, true)\n    }\n\n    addTraining(training: RaiderTraining) {\n        this.trainings.set(training, true)\n    }\n\n}\n","import { Matrix4, Vector2, Vector3 } from 'three'\nimport { BuildingEntityStats } from '../../../cfg/BuildingEntityStats'\nimport { EventBus } from '../../../event/EventBus'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { BuildingSelected, EntityDeselected, SelectionEvent } from '../../../event/LocalEvents'\nimport { BuildingUpgraded, EntityAddedEvent, MaterialAmountChanged } from '../../../event/WorldEvents'\nimport { TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { WorldManager } from '../../WorldManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { BuildingActivity } from '../activities/BuildingActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { AnimEntity } from '../anim/AnimEntity'\nimport { Crystal } from '../collect/Crystal'\nimport { MaterialEntity } from '../collect/MaterialEntity'\nimport { Ore } from '../collect/Ore'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { Surface } from '../map/Surface'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { Selectable, SelectionType } from '../Selectable'\n\nexport abstract class BuildingEntity extends AnimEntity implements Selectable {\n\n    blocksPathSurface: boolean = true\n    secondaryBuildingPart: { x: number, y: number } = null\n    primaryPowerPath: { x: number, y: number } = {x: 0, y: 1}\n    secondaryPowerPath: { x: number, y: number } = null\n    waterPathSurface: { x: number, y: number } = null\n\n    selected: boolean\n    powerSwitch: boolean = true\n    spawning: boolean = false\n    primarySurface: Surface = null\n    secondarySurface: Surface = null\n    primaryPathSurface: Surface = null\n    secondaryPathSurface: Surface = null\n    upgradeCostOre: number = 0\n    upgradeCostBrick: number = 0\n    crystalsInUse: number = 0\n    inBeam: boolean = false\n\n    protected constructor(entityType: EntityType, aeFilename: string) {\n        super(EntitySuperType.BUILDING, entityType, aeFilename)\n        this.group.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        this.group.userData = {'selectable': this}\n        this.upgradeCostOre = ResourceManager.cfg('Main', 'BuildingUpgradeCostOre')\n        this.upgradeCostBrick = ResourceManager.cfg('Main', 'BuildingUpgradeCostStuds')\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, (event: MaterialAmountChanged) => {\n            if (event.entityType === EntityType.CRYSTAL && this.powerSwitch) {\n                this.turnOnPower()\n            }\n        })\n    }\n\n    abstract get stats(): BuildingEntityStats\n\n    getSelectionType(): SelectionType {\n        return SelectionType.BUILDING\n    }\n\n    select(): SelectionEvent {\n        if (this.inBeam) return null\n        this.selectionFrame.visible = true\n        if (!this.selected) {\n            this.selected = true\n            return new BuildingSelected(this)\n        }\n        return null\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    getPickSphereCenter(): Vector3 {\n        return new Vector3(0, this.stats.PickSphere / 4, 0)\n    }\n\n    getDropPosition2D(): Vector2 {\n        if (this.getToolJoint) {\n            const worldPos = new Vector3()\n            this.getToolJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else if (this.depositJoint) {\n            const worldPos = new Vector3()\n            this.depositJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else {\n            return this.getPosition2D()\n        }\n    }\n\n    getDropPosition(): Vector3 {\n        return this.worldMgr.getFloorPosition(this.getDropPosition2D())\n    }\n\n    isPowered(): boolean {\n        return this.powerSwitch && (this.stats.SelfPowered || this.stats.PowerBuilding || this.crystalsInUse > 0)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.buildingsUndiscovered.remove(this)\n        GameState.buildings.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(this))\n    }\n\n    hasMaxLevel(): boolean {\n        return this.level >= this.stats.Levels - 1\n    }\n\n    upgrade() {\n        if (!this.canUpgrade()) return\n        if (GameState.numBrick >= this.upgradeCostBrick) {\n            GameState.numBrick -= this.upgradeCostBrick\n            EventBus.publishEvent(new MaterialAmountChanged(EntityType.BRICK))\n        } else {\n            GameState.numOre -= this.upgradeCostOre\n            EventBus.publishEvent(new MaterialAmountChanged(EntityType.ORE))\n        }\n        this.level++\n        EventBus.publishEvent(new EntityDeselected())\n        EventBus.publishEvent(new BuildingUpgraded(this))\n        // TODO add sparkly upgrade animation\n    }\n\n    getDefaultActivity(): BuildingActivity {\n        return !this.isPowered() ? BuildingActivity.Unpowered : AnimEntityActivity.Stand\n    }\n\n    beamUp() {\n        GameState.usedCrystals -= this.crystalsInUse\n        this.crystalsInUse = 0\n        this.inBeam = true\n        for (let c = 0; c < this.stats.CostOre; c++) {\n            this.worldMgr.placeMaterial(new Ore(), this.primarySurface.getRandomPosition())\n        }\n        for (let c = 0; c < this.stats.CostCrystal; c++) {\n            this.worldMgr.placeMaterial(new Crystal(), this.primarySurface.getRandomPosition())\n        }\n        this.surfaces.forEach((s) => {\n            s.surfaceType = SurfaceType.GROUND\n            s.setBuilding(null)\n            s.updateTexture()\n            s.neighbors.forEach((n) => n.updateTexture())\n        })\n        super.beamUp()\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        GameState.buildings.remove(this)\n    }\n\n    canUpgrade() {\n        return !this.hasMaxLevel() && (GameState.numOre >= this.upgradeCostOre || GameState.numBrick >= this.upgradeCostBrick)\n    }\n\n    spawnMaterials(materials: MaterialEntity[]) {\n        materials.forEach((m) => this.worldMgr.placeMaterial(m, this.getDropPosition2D()))\n    }\n\n    turnOnPower() {\n        if (this.crystalsInUse > 0 || GameState.usedCrystals >= GameState.numCrystal || (this.entityType !== EntityType.POWER_STATION && !this.surfaces.some((s) => s.neighbors.some((n) => n.hasPower)))) return\n        this.crystalsInUse = 1\n        GameState.usedCrystals += this.crystalsInUse\n        this.surfaces.forEach((s) => s.setHasPower(true, true))\n        this.changeActivity()\n    }\n\n    turnOffPower() {\n        if (this.crystalsInUse < 1) return\n        GameState.usedCrystals -= this.crystalsInUse\n        this.crystalsInUse = 0\n        this.surfaces.forEach((s) => s.setHasPower(false, false))\n        this.changeActivity()\n    }\n\n    get surfaces(): Surface[] {\n        const result = []\n        if (this.primarySurface) result.push(this.primarySurface)\n        if (this.secondarySurface) result.push(this.secondarySurface)\n        if (this.primaryPathSurface) result.push(this.primaryPathSurface)\n        if (this.secondaryPathSurface) result.push(this.secondaryPathSurface)\n        return result\n    }\n\n    addToScene(worldMgr: WorldManager, worldX: number, worldZ: number, radHeading: number, disableTeleportIn: boolean) {\n        this.worldMgr = worldMgr\n        this.group.position.copy(worldMgr.getFloorPosition(new Vector2(worldX, worldZ)))\n        this.group.rotateOnAxis(new Vector3(0, 1, 0), radHeading) // TODO rotate building with normal vector of surface too\n        this.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).discovered\n        worldMgr.sceneManager.scene.add(this.group)\n        this.createPickSphere()\n        const primaryPathSurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position)\n        primaryPathSurface.setBuilding(this)\n        primaryPathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n        primaryPathSurface.updateTexture()\n        this.primarySurface = primaryPathSurface\n        if (this.secondaryBuildingPart) {\n            const secondaryOffset = new Vector3(TILESIZE * this.secondaryBuildingPart.x, 0, TILESIZE * this.secondaryBuildingPart.y)\n                .applyAxisAngle(new Vector3(0, 1, 0), radHeading).add(this.group.position)\n            const secondarySurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(secondaryOffset)\n            secondarySurface.setBuilding(this)\n            secondarySurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n            secondarySurface.updateTexture()\n            this.secondarySurface = secondarySurface\n        }\n        if (this.primaryPowerPath) {\n            const pathOffset = new Vector3(this.primaryPowerPath.x, 0, this.primaryPowerPath.y).multiplyScalar(TILESIZE)\n                .applyAxisAngle(new Vector3(0, 1, 0), radHeading).add(this.group.position)\n            const pathSurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(pathOffset)\n            if (this.entityType === EntityType.GEODOME) pathSurface.building = this\n            pathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n            pathSurface.updateTexture()\n            this.primaryPathSurface = pathSurface\n        }\n        if (this.group.visible) {\n            GameState.buildings.push(this)\n        } else {\n            GameState.buildingsUndiscovered.push(this)\n        }\n        if (this.group.visible && !disableTeleportIn) {\n            this.inBeam = true\n            this.changeActivity(BuildingActivity.Teleport, () => this.onAddToScene())\n        } else {\n            this.onAddToScene()\n        }\n        worldMgr.sceneManager.terrain.resetGraphWalk()\n    }\n\n    private onAddToScene() {\n        this.inBeam = false\n        this.changeActivity()\n        EventBus.publishEvent(new EntityAddedEvent(this))\n        this.turnOnPower()\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Barracks extends BuildingEntity {\n\n    constructor() {\n        super(EntityType.BARRACKS, 'Buildings/Barracks/Barracks.ae')\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Barracks\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Docks extends BuildingEntity {\n\n    constructor() {\n        super(EntityType.DOCKS, 'Buildings/Docks/Docks.ae')\n        this.waterPathSurface = {x: 0, y: 1}\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Docks\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Geodome extends BuildingEntity {\n\n    constructor() {\n        super(EntityType.GEODOME, 'Buildings/Geo-dome/Geo-dome.ae')\n        this.primaryPowerPath = null\n        this.secondaryBuildingPart = {x: 0, y: 1}\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Geodome\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { BuildingActivity } from '../../activities/BuildingActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class GunStation extends BuildingEntity {\n\n    constructor() {\n        super(EntityType.GUNSTATION, 'Buildings/gunstation/gunstation.ae')\n        this.primaryPowerPath = null\n    }\n\n    getDefaultActivity(): BuildingActivity {\n        return BuildingActivity.Stand\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.GunStation\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class OreRefinery extends BuildingEntity {\n\n    constructor() {\n        super(EntityType.ORE_REFINERY, 'Buildings/OreRefinery/OreRefinery.ae')\n        this.primaryPowerPath = {x: 0, y: 2}\n        this.secondaryBuildingPart = {x: 0, y: 1}\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.OreRefinery\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Deposit\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class PowerStation extends BuildingEntity {\n\n    constructor() {\n        super(EntityType.POWER_STATION, 'Buildings/Powerstation/Powerstation.ae')\n        this.secondaryBuildingPart = {x: -1, y: 0}\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Powerstation\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Deposit\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class TeleportBig extends BuildingEntity {\n\n    constructor() {\n        super(EntityType.TELEPORT_BIG, 'Buildings/BIGTeleport/BIGTeleport.ae')\n        this.secondaryBuildingPart = {x: 1, y: 0}\n        this.secondaryPowerPath = {x: 1, y: 1}\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.TeleportBIG\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class TeleportPad extends BuildingEntity {\n\n    constructor() {\n        super(EntityType.TELEPORT_PAD, 'Buildings/Teleports/Teleports.ae')\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.TeleportPad\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Toolstation extends BuildingEntity {\n\n    constructor() {\n        super(EntityType.TOOLSTATION, 'Buildings/Toolstation/Toolstation.ae')\n        this.blocksPathSurface = false\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Toolstation\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Upgrade extends BuildingEntity {\n\n    constructor() {\n        super(EntityType.UPGRADE, 'Buildings/Upgrade/Upgrade.ae')\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Upgrade\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class MonsterActivity extends AnimEntityActivity {\n\n    static Route = new MonsterActivity('Activity_Route')\n\n}\n","import { clearTimeoutSafe } from '../../../core/Util'\nimport { MonsterActivity } from '../activities/MonsterActivity'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { MovableEntity } from '../MovableEntity'\nimport { PathTarget } from '../PathTarget'\n\nexport abstract class Monster extends MovableEntity {\n\n    moveTimeout: NodeJS.Timeout\n    target: PathTarget[] = []\n\n    protected constructor(entityType: EntityType, aeFilename: string) {\n        super(EntitySuperType.MONSTER, entityType, aeFilename)\n    }\n\n    onLevelEnd() {\n        this.moveTimeout = clearTimeoutSafe(this.moveTimeout)\n        this.removeFromScene()\n    }\n\n    getRouteActivity(): MonsterActivity {\n        return MonsterActivity.Route\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { getRandomInclusive } from '../../../core/Util'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { Monster } from './Monster'\n\nexport class Bat extends Monster {\n\n    constructor() {\n        super(EntityType.BAT, 'Creatures/bat/bat.ae')\n        this.floorOffset = TILESIZE / 2\n    }\n\n    get stats() {\n        return ResourceManager.stats.Bat\n    }\n\n    startRandomMove() {\n        Bat.onMove(this)\n    }\n\n    private static onMove(bat: Bat) {\n        if (bat.target.length < 1 || bat.moveToClosestTarget(bat.target) === MoveState.TARGET_REACHED) {\n            bat.target = [bat.findTarget()]\n        }\n        bat.moveTimeout = setTimeout(() => Bat.onMove(bat), 1000 / NATIVE_FRAMERATE)\n    }\n\n    private findTarget(): PathTarget { // TODO move to nearby drilling noise, explosions or sonic blasters\n        const terrain = this.worldMgr.sceneManager.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            if (terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType.floor) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a target')\n        return null\n    }\n\n    onDeath() {\n        this.onLevelEnd()\n        GameState.bats.remove(this)\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { getRandom, getRandomInclusive } from '../../../core/Util'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { Surface } from '../map/Surface'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { Monster } from './Monster'\n\nexport class SmallSpider extends Monster {\n\n    currentSurface: Surface = null\n\n    constructor() {\n        super(EntityType.SMALL_SPIDER, 'Creatures/SpiderSB/SpiderSB.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallSpider\n    }\n\n    startMoving() {\n        SmallSpider.onMove(this)\n    }\n\n    private static onMove(spider: SmallSpider) {\n        const prevSurface = spider.currentSurface || spider.worldMgr.sceneManager.terrain.getSurfaceFromWorld(spider.group.position)\n        if (spider.target.length > 0 && spider.moveToClosestTarget(spider.target) === MoveState.MOVED) {\n            const nextSurface = spider.worldMgr.sceneManager.terrain.getSurfaceFromWorld(spider.group.position)\n            if (prevSurface !== nextSurface) {\n                (GameState.spidersBySurface.get(prevSurface) || []).remove(spider)\n                GameState.spidersBySurface.getOrUpdate(nextSurface, () => []).push(spider)\n            }\n            if (!spider.worldMgr.sceneManager.terrain.getSurfaceFromWorld(spider.getPosition()).surfaceType.floor) {\n                spider.onDeath()\n            } else {\n                spider.moveTimeout = setTimeout(() => SmallSpider.onMove(spider), 1000 / NATIVE_FRAMERATE)\n            }\n        } else {\n            spider.changeActivity()\n            spider.moveTimeout = setTimeout(() => {\n                spider.target = [spider.findTarget()]\n                SmallSpider.onMove(spider)\n            }, 1000 + getRandom(9000))\n        }\n    }\n\n    private findTarget(): PathTarget {\n        const terrain = this.worldMgr.sceneManager.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            const surfaceType = terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType\n            if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a target')\n        return null\n    }\n\n    onDeath() {\n        this.onLevelEnd()\n        GameState.spiders.remove(this)\n        GameState.spidersBySurface.getOrUpdate(this.currentSurface, () => []).remove(this)\n    }\n\n}\n","import { MathUtils, Vector2, Vector3 } from 'three'\nimport { EventBus } from '../event/EventBus'\nimport { EntityAddedEvent } from '../event/WorldEvents'\nimport { TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { Barracks } from './model/building/entities/Barracks'\nimport { Docks } from './model/building/entities/Docks'\nimport { Geodome } from './model/building/entities/Geodome'\nimport { GunStation } from './model/building/entities/GunStation'\nimport { OreRefinery } from './model/building/entities/OreRefinery'\nimport { PowerStation } from './model/building/entities/PowerStation'\nimport { TeleportBig } from './model/building/entities/TeleportBig'\nimport { TeleportPad } from './model/building/entities/TeleportPad'\nimport { Toolstation } from './model/building/entities/Toolstation'\nimport { Upgrade } from './model/building/entities/Upgrade'\nimport { Crystal } from './model/collect/Crystal'\nimport { GameState } from './model/GameState'\nimport { Bat } from './model/monster/Bat'\nimport { SmallSpider } from './model/monster/SmallSpider'\nimport { Raider } from './model/raider/Raider'\nimport { WorldManager } from './WorldManager'\nimport degToRad = MathUtils.degToRad\n\nexport class ObjectListLoader {\n\n    static loadObjectList(worldMgr: WorldManager, objectListConf, disableStartTeleport: boolean) {\n        Object.values(objectListConf).forEach((olObject: any) => {\n            const lTypeName = olObject.type ? olObject.type.toLowerCase() : olObject.type\n            // all object positions are off by half a tile, because 0/0 is the top left corner of first tile\n            const worldX = (olObject.xPos - 1) * TILESIZE\n            const worldZ = (olObject.yPos - 1) * TILESIZE\n            const terrainY = worldMgr.getTerrainHeight(worldX, worldZ)\n            const buildingType: string = ResourceManager.cfg('BuildingTypes', olObject.type)\n            const radHeading = degToRad(olObject.heading)\n            if (lTypeName === 'TVCamera'.toLowerCase()) {\n                const offset = new Vector3(5 * TILESIZE, 0, 0).applyAxisAngle(new Vector3(0, 1, 0), radHeading - Math.PI / 16).add(new Vector3(worldX, terrainY, worldZ - TILESIZE / 2))\n                worldMgr.sceneManager.camera.position.copy(offset)\n                worldMgr.sceneManager.camera.position.y = 4.5 * TILESIZE\n                worldMgr.sceneManager.controls.target.copy(new Vector3(worldX, terrainY, worldZ - TILESIZE / 2))\n                worldMgr.sceneManager.controls.update()\n                worldMgr.setTorchPosition(new Vector2(worldX, worldZ - TILESIZE / 2))\n            } else if (lTypeName === 'Pilot'.toLowerCase()) {\n                const raider = new Raider()\n                raider.worldMgr = worldMgr\n                raider.changeActivity()\n                raider.createPickSphere()\n                raider.group.position.set(worldX, terrainY, worldZ)\n                raider.group.rotateOnAxis(new Vector3(0, 1, 0), radHeading - Math.PI / 2)\n                raider.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(raider.group.position).discovered\n                if (raider.group.visible) {\n                    GameState.raiders.push(raider)\n                    EventBus.publishEvent(new EntityAddedEvent(raider))\n                } else {\n                    GameState.raidersUndiscovered.push(raider)\n                }\n                worldMgr.sceneManager.scene.add(raider.group)\n            } else if (buildingType) {\n                const entity = this.createBuildingByName(buildingType)\n                entity.addToScene(worldMgr, worldX, worldZ, -radHeading - Math.PI, disableStartTeleport)\n            } else if (lTypeName === 'PowerCrystal'.toLowerCase()) {\n                worldMgr.placeMaterial(new Crystal(), new Vector2(worldX, worldZ))\n            } else if (lTypeName === 'SmallSpider'.toLowerCase()) {\n                const spider = new SmallSpider()\n                spider.worldMgr = worldMgr\n                spider.changeActivity()\n                spider.group.position.set(worldX, terrainY, worldZ)\n                const currentSurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(spider.group.position)\n                spider.group.visible = currentSurface.discovered\n                worldMgr.sceneManager.scene.add(spider.group)\n                GameState.spiders.push(spider)\n                GameState.spidersBySurface.getOrUpdate(currentSurface, () => []).push(spider)\n                spider.startMoving()\n            } else if (lTypeName === 'Bat'.toLowerCase()) {\n                const bat = new Bat()\n                bat.worldMgr = worldMgr\n                bat.changeActivity()\n                bat.group.position.set(worldX, bat.floorOffset, worldZ)\n                bat.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(bat.group.position).discovered\n                worldMgr.sceneManager.scene.add(bat.group)\n                GameState.bats.push(bat)\n                bat.startRandomMove()\n            } else {\n                // TODO implement remaining object types\n                console.warn('Object type ' + olObject.type + ' not yet implemented')\n            }\n        })\n        // update path textures when all buildings are added\n        GameState.buildings.forEach((b) => b.surfaces.forEach((s) => s.neighbors.forEach((n) => n.updateTexture())))\n    }\n\n    private static createBuildingByName(buildingType: string) {\n        const typename = buildingType.slice(buildingType.lastIndexOf('/') + 1).toLowerCase()\n        if (typename === 'toolstation') {\n            return new Toolstation()\n        } else if (typename === 'teleports') {\n            return new TeleportPad()\n        } else if (typename === 'docks') {\n            return new Docks()\n        } else if (typename === 'powerstation') {\n            return new PowerStation()\n        } else if (typename === 'barracks') {\n            return new Barracks()\n        } else if (typename === 'upgrade') {\n            return new Upgrade()\n        } else if (typename === 'geo-dome') {\n            return new Geodome()\n        } else if (typename === 'orerefinery') {\n            return new OreRefinery()\n        } else if (typename === 'gunstation') {\n            return new GunStation()\n        } else if (typename === 'teleportbig') {\n            return new TeleportBig()\n        } else {\n            throw 'Unknown building type: ' + typename\n        }\n    }\n\n}\n","// javascript-astar 0.4.1 (converted to typescript by Scarabol)\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n\nfunction pathTo(node) {\n    let curr = node\n    const path = []\n    while (curr.parent) {\n        path.unshift(curr)\n        curr = curr.parent\n    }\n    return path\n}\n\nfunction getHeap() {\n    return new BinaryHeap(function (node) {\n        return node.f\n    })\n}\n\nexport const astar = {\n\n    /**\n     * Perform an A* Search on a graph given a start and end node.\n     * @param {Graph} graph\n     * @param {GridNode} start\n     * @param {GridNode} end\n     * @param {Object} [options]\n     * @param {boolean} [options.closest] Specifies whether to return the\n     path to the closest node if the target is unreachable.\n     * @param {Function} [options.heuristic] Heuristic function (see\n     *          astar.heuristics).\n     */\n    search(graph: Graph, start: GridNode, end: GridNode, options = null): GridNode[] {\n        graph.cleanDirty()\n        options = options || {}\n        const heuristic = options.heuristic || astar.heuristics.manhattan\n        const closest = options.closest || false\n\n        const openHeap = getHeap()\n        let closestNode = start  // set the start node to be the closest if required\n\n        start.h = heuristic(start, end)\n        graph.markDirty(start)\n\n        openHeap.push(start)\n\n        while (openHeap.size() > 0) {\n\n            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n            const currentNode = openHeap.pop()\n\n            // End case -- result has been found, return the traced path.\n            if (currentNode === end) {\n                return pathTo(currentNode)\n            }\n\n            // Normal case -- move currentNode from open to closed, process each of its neighbors.\n            currentNode.closed = true\n\n            // Find all neighbors for the current node.\n            const neighbors = graph.neighbors(currentNode)\n\n            let i = 0\n            const il = neighbors.length\n            for (; i < il; ++i) {\n                const neighbor = neighbors[i]\n\n                if (neighbor.closed || neighbor.isWall()) {\n                    // Not a valid node to process, skip to next neighbor.\n                    continue\n                }\n\n                // The g score is the shortest distance from start to current node.\n                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n                const gScore = currentNode.g + neighbor.getCost(currentNode)\n                const beenVisited = neighbor.visited\n\n                if (!beenVisited || gScore < neighbor.g) {\n\n                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n                    neighbor.visited = true\n                    neighbor.parent = currentNode\n                    neighbor.h = neighbor.h || heuristic(neighbor, end)\n                    neighbor.g = gScore\n                    neighbor.f = neighbor.g + neighbor.h\n                    graph.markDirty(neighbor)\n                    if (closest) {\n                        // If the neighbour is closer than the current closestNode or if it's equally close but has\n                        // a cheaper path than the current closest node then it becomes the closest node\n                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n                            closestNode = neighbor\n                        }\n                    }\n\n                    if (!beenVisited) {\n                        // Pushing to heap will put it in proper place based on the 'f' value.\n                        openHeap.push(neighbor)\n                    } else {\n                        // Already seen the node, but since it has been rescored we need to reorder it in the heap\n                        openHeap.rescoreElement(neighbor)\n                    }\n                }\n            }\n        }\n\n        if (closest) {\n            return pathTo(closestNode)\n        }\n\n        // No result was found - empty array signifies failure to find path.\n        return []\n    },\n\n    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n    heuristics: {\n        manhattan(pos0, pos1) {\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return d1 + d2\n        },\n\n        diagonal(pos0, pos1) {\n            const D = 1\n            const D2 = Math.sqrt(2)\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2))\n        },\n    },\n\n    cleanNode(node) {\n        node.f = 0\n        node.g = 0\n        node.h = 0\n        node.visited = false\n        node.closed = false\n        node.parent = null\n    },\n}\n\nexport class Graph {\n\n    readonly nodes: GridNode[] = []\n    readonly diagonal: boolean\n    readonly grid: GridNode[][] = []\n    dirtyNodes: GridNode[] = []\n\n    /**\n     * A graph memory structure\n     * @param {Array} gridIn 2D array of input weights\n     * @param {Object} [options]\n     * @param {boolean} [options.diagonal] Specifies whether diagonal moves are allowed\n     */\n    constructor(gridIn: number[][], options = null) {\n        options = options || {}\n        this.diagonal = !!options.diagonal\n        for (let x = 0; x < gridIn.length; x++) {\n            this.grid[x] = []\n\n            let y = 0\n            const row = gridIn[x]\n            for (; y < row.length; y++) {\n                const node = new GridNode(x, y, row[y])\n                this.grid[x][y] = node\n                this.nodes.push(node)\n            }\n        }\n        this.init()\n    }\n\n    init() {\n        this.dirtyNodes = []\n        for (let i = 0; i < this.nodes.length; i++) {\n            astar.cleanNode(this.nodes[i])\n        }\n    }\n\n    cleanDirty() {\n        for (let i = 0; i < this.dirtyNodes.length; i++) {\n            astar.cleanNode(this.dirtyNodes[i])\n        }\n        this.dirtyNodes = []\n    }\n\n    markDirty(node) {\n        this.dirtyNodes.push(node)\n    }\n\n    neighbors(node: GridNode) {\n        const ret: GridNode[] = []\n        const x = node.x\n        const y = node.y\n        const grid = this.grid\n\n        // West\n        if (grid[x - 1] && grid[x - 1][y]) {\n            ret.push(grid[x - 1][y])\n        }\n\n        // East\n        if (grid[x + 1] && grid[x + 1][y]) {\n            ret.push(grid[x + 1][y])\n        }\n\n        // South\n        if (grid[x] && grid[x][y - 1]) {\n            ret.push(grid[x][y - 1])\n        }\n\n        // North\n        if (grid[x] && grid[x][y + 1]) {\n            ret.push(grid[x][y + 1])\n        }\n\n        if (this.diagonal) {\n            // Southwest\n            if (grid[x - 1] && grid[x - 1][y - 1]) {\n                ret.push(grid[x - 1][y - 1])\n            }\n\n            // Southeast\n            if (grid[x + 1] && grid[x + 1][y - 1]) {\n                ret.push(grid[x + 1][y - 1])\n            }\n\n            // Northwest\n            if (grid[x - 1] && grid[x - 1][y + 1]) {\n                ret.push(grid[x - 1][y + 1])\n            }\n\n            // Northeast\n            if (grid[x + 1] && grid[x + 1][y + 1]) {\n                ret.push(grid[x + 1][y + 1])\n            }\n        }\n\n        return ret\n    }\n\n    toString() {\n        const graphString = []\n        const nodes = this.grid\n        for (let x = 0; x < nodes.length; x++) {\n            const rowDebug = []\n            const row = nodes[x]\n            for (let y = 0; y < row.length; y++) {\n                rowDebug.push(row[y].weight)\n            }\n            graphString.push(rowDebug.join(' '))\n        }\n        return graphString.join('\\n')\n    }\n}\n\nclass GridNode {\n\n    x: number\n    y: number\n    weight: number\n    h: number\n    closed: boolean\n    visited: boolean\n    g: number\n    parent: GridNode\n    f: number\n\n    constructor(x, y, weight) {\n        this.x = x\n        this.y = y\n        this.weight = weight\n    }\n\n    toString() {\n        return '[' + this.x + ' ' + this.y + ']'\n    }\n\n    getCost(fromNeighbor: GridNode) {\n        // Take diagonal weight into consideration.\n        if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n            return this.weight * 1.41421\n        }\n        return this.weight\n    }\n\n    isWall() {\n        return this.weight === 0\n    }\n}\n\nclass BinaryHeap {\n\n    content = []\n    scoreFunction\n\n    constructor(scoreFunction) {\n        this.content = []\n        this.scoreFunction = scoreFunction\n    }\n\n    push(element) {\n        // Add the new element to the end of the array.\n        this.content.push(element)\n\n        // Allow it to sink down.\n        this.sinkDown(this.content.length - 1)\n    }\n\n    pop() {\n        // Store the first element so we can return it later.\n        const result = this.content[0]\n        // Get the element at the end of the array.\n        const end = this.content.pop()\n        // If there are any elements left, put the end element at the\n        // start, and let it bubble up.\n        if (this.content.length > 0) {\n            this.content[0] = end\n            this.bubbleUp(0)\n        }\n        return result\n    }\n\n    remove(node) {\n        const i = this.content.indexOf(node)\n\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        const end = this.content.pop()\n\n        if (i !== this.content.length - 1) {\n            this.content[i] = end\n\n            if (this.scoreFunction(end) < this.scoreFunction(node)) {\n                this.sinkDown(i)\n            } else {\n                this.bubbleUp(i)\n            }\n        }\n    }\n\n    size() {\n        return this.content.length\n    }\n\n    rescoreElement(node) {\n        this.sinkDown(this.content.indexOf(node))\n    }\n\n    sinkDown(n) {\n        // Fetch the element that has to be sunk.\n        const element = this.content[n]\n\n        // When at 0, an element can not sink any further.\n        while (n > 0) {\n\n            // Compute the parent element's index, and fetch it.\n            const parentN = ((n + 1) >> 1) - 1\n            const parent = this.content[parentN]\n            // Swap the elements if the parent is greater.\n            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n                this.content[parentN] = element\n                this.content[n] = parent\n                // Update 'n' to continue at the new position.\n                n = parentN\n            }\n            // Found a parent that is less, no need to sink any further.\n            else {\n                break\n            }\n        }\n    }\n\n    bubbleUp(n) {\n        // Look up the target element and its score.\n        const length = this.content.length\n        const element = this.content[n]\n        const elemScore = this.scoreFunction(element)\n\n        while (true) {\n            // Compute the indices of the child elements.\n            const child2N = (n + 1) << 1\n            const child1N = child2N - 1\n            // This is used to store the new position of the element, if any.\n            let swap = null\n            let child1Score\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                const child1 = this.content[child1N]\n                child1Score = this.scoreFunction(child1)\n\n                // If the score is less than our element's, we need to swap.\n                if (child1Score < elemScore) {\n                    swap = child1N\n                }\n            }\n\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                const child2 = this.content[child2N]\n                const child2Score = this.scoreFunction(child2)\n                if (child2Score < (swap === null ? elemScore : child1Score)) {\n                    swap = child2N\n                }\n            }\n\n            // If the element needs to be moved, swap it, and continue.\n            if (swap !== null) {\n                this.content[n] = this.content[swap]\n                this.content[swap] = element\n                n = swap\n            }\n            // Otherwise, we are done.\n            else {\n                break\n            }\n        }\n    }\n}\n","import { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { Graph } from './model/map/astar'\nimport { Surface } from './model/map/Surface'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { Terrain } from './model/map/Terrain'\nimport { WorldManager } from './WorldManager'\n\nexport class TerrainLoader {\n\n    static loadTerrain(levelConf: LevelEntryCfg, worldMgr: WorldManager): Terrain {\n        const tileSize = levelConf.blockSize\n        if (tileSize !== TILESIZE) console.error('Unexpected tile size in level configuration: ' + tileSize)\n        const terrain = new Terrain(worldMgr)\n\n        const themeName = levelConf.textureSet[1]\n        terrain.textureSet = ResourceManager.cfg('Textures', themeName)\n        // console.log(terrain.textureSet);\n\n        const terrainMap = ResourceManager.getResource(levelConf.terrainMap)\n        terrain.width = terrainMap.width\n        terrain.height = terrainMap.height\n        const pathMap = ResourceManager.getResource(levelConf.pathMap)?.level\n        const surfaceMap = ResourceManager.getResource(levelConf.surfaceMap)?.level\n        const predugMap = ResourceManager.getResource(levelConf.predugMap)?.level\n        const cryOreMap = ResourceManager.getResource(levelConf.cryOreMap)?.level\n        const fallinMap = ResourceManager.getResource(levelConf.fallinMap)?.level\n        const erodeMap = ResourceManager.getResource(levelConf.erodeMap)?.level\n\n        // maps parsed from WAD are row-wise saved, which means y (row) comes first and x (column) second\n        for (let r = 0; r < terrainMap.level.length; r++) {\n            for (let c = 0; c < (terrainMap.level)[r].length; c++) {\n                (terrain.surfaces)[c] = (terrain.surfaces)[c] || []\n                const surfaceTypeNum = (terrainMap.level)[r][c]\n                let surfaceType = SurfaceType.getByNum(surfaceTypeNum)\n                const predugLevel = predugMap[r][c]\n                if (predugLevel === PredugMap.CAVERN_EXPOSED) {\n                    if (surfaceType === SurfaceType.GROUND || surfaceType === SurfaceType.DIRT) {\n                        surfaceType = SurfaceType.GROUND\n                    } else if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) {\n                        console.warn('Unexpected cavern surface type: ' + surfaceType.name)\n                    }\n                } else if (predugLevel === PredugMap.SLUG_HOLE_EXPOSED || predugLevel === PredugMap.SLUG_HOLE_HIDDEN) {\n                    surfaceType = SurfaceType.SLUG_HOLE\n                } else if (predugLevel !== PredugMap.WALL && predugLevel !== PredugMap.CAVERN_HIDDEN) {\n                    console.warn('Unexpected predug level: ' + predugLevel)\n                }\n                // give the path map the highest priority, if it exists\n                const pathMapLevel = pathMap && surfaceType.floor ? pathMap[r][c] : PathMap.NONE\n                if (pathMapLevel === PathMap.RUBBLE) {\n                    surfaceType = SurfaceType.RUBBLE4\n                } else if (pathMapLevel === PathMap.POWER_PATH) {\n                    surfaceType = SurfaceType.POWER_PATH\n                } else if (pathMapLevel !== PathMap.NONE) {\n                    console.warn('Unexpected path map level: ' + pathMapLevel)\n                }\n\n                const surface = new Surface(terrain, surfaceType, c, r, surfaceMap[r][c])\n                if (cryOreMap) {\n                    const currentCryOre = cryOreMap[r][c]\n                    if (currentCryOre % 2 === 1) {\n                        surface.containedCrystals = (currentCryOre + 1) / 2\n                    } else {\n                        surface.containedOres = currentCryOre / 2\n                    }\n                }\n\n                (terrain.surfaces)[c].push(surface)\n            }\n        }\n\n        // exlpore predug surfaces\n        terrain.forEachSurface((s) => {\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_EXPOSED || predugMap[s.y][s.x] === PredugMap.SLUG_HOLE_EXPOSED) { // map are rows (y) first, columns (x) second\n                for (let x = s.x - 1; x <= s.x + 1; x++) {\n                    for (let y = s.y - 1; y <= s.y + 1; y++) {\n                        terrain.getSurfaceOrNull(x, y).discovered = true\n                    }\n                }\n            }\n        })\n\n        // create hidden caverns\n        terrain.forEachSurface((s) => {\n            const surface = terrain.getSurfaceOrNull(s.x, s.y)\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_HIDDEN && !surface.discovered) {\n                surface.surfaceType = SurfaceType.GROUND\n            }\n        })\n\n        const weights: number[][] = []\n        for (let x = 0; x < terrain.width; x++) {\n            const col: number[] = []\n            for (let y = 0; y < terrain.height; y++) {\n                const w = terrain.getSurfaceOrNull(x, y).getGraphWalkWeight()\n                col.push(w, w, w)\n            }\n            weights.push(col, col, col)\n        }\n        terrain.graphWalk = new Graph(weights)\n\n        // crumble unsupported walls\n        terrain.forEachSurface((s) => {\n            if (!s.isSupported()) s.collapse()\n        })\n\n        terrain.updateSurfaceMeshes(true)\n\n        if (fallinMap) {\n            for (let x = 0; x < terrain.width; x++) {\n                for (let y = 0; y < terrain.height; y++) {\n                    terrain.getSurface(x, y).setFallinLevel(fallinMap[y][x]) // rows (y) before columns (x) used in maps\n                }\n            }\n        }\n\n        if (erodeMap) { // TODO implement lava erosion\n            console.warn('Lucky you! Lava erosion not yet implemented')\n        }\n\n        return terrain\n    }\n\n}\n\nenum PathMap {\n\n    NONE = 0,\n    RUBBLE = 1,\n    POWER_PATH = 2,\n\n}\n\nenum PredugMap {\n\n    WALL = 0,\n    CAVERN_EXPOSED = 1,\n    CAVERN_HIDDEN = 2,\n    SLUG_HOLE_EXPOSED = 3,\n    SLUG_HOLE_HIDDEN = 4,\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class DynamiteActivity extends BaseActivity {\n\n    static Normal = new DynamiteActivity('Normal')\n    static TickDown = new DynamiteActivity('TickDown')\n\n}\n","import { Dynamite } from '../../collect/Dynamite'\nimport { RaiderTraining } from '../../raider/RaiderTraining'\nimport { CarryJob } from '../CarryJob'\n\nexport class CarryDynamiteJob extends CarryJob<Dynamite> {\n\n    color: number = 0xa06060\n\n    constructor(dynamite: Dynamite) {\n        super(dynamite)\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return RaiderTraining.DEMOLITION\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.item.ignite()\n    }\n\n}\n","import { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { DynamiteActivity } from '../activities/DynamiteActivity'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CarryJob } from '../job/CarryJob'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { CarryDynamiteJob } from '../job/surface/CarryDynamiteJob'\nimport { Surface } from '../map/Surface'\nimport { CarryPathTarget } from './CarryPathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Dynamite extends MaterialEntity {\n\n    targetSurface: Surface\n\n    constructor(surface: Surface) {\n        super(EntityType.DYNAMITE, 'MiscAnims/Dynamite/Dynamite.ae')\n        this.targetSurface = surface\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityDestruction\n        this.changeActivity()\n    }\n\n    getCarryTargets(): CarryPathTarget[] {\n        if (this.targetSurface && this.targetSurface.isExplodable()) {\n            return this.targetSurface.getDigPositions().map((p) => new CarryPathTarget(p, null, null))\n        } else {\n            return GameState.getBuildingsByType(EntityType.TOOLSTATION).map((b) => b.getDropPosition2D())\n                .map((p) => new CarryPathTarget(p, null, null))\n        }\n    }\n\n    ignite() {\n        // TODO add as explosive and scare em all!\n        this.worldMgr.sceneManager.scene.add(this.group)\n        const center = this.targetSurface.getCenterWorld()\n        center.y = this.group.position.y\n        this.group.lookAt(center)\n        this.changeActivity(DynamiteActivity.TickDown, () => {\n            this.removeFromScene()\n            this.targetSurface.collapse()\n            // TODO add explosion animation\n            // TODO damage raider, vehicle, buildings\n        })\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return DynamiteActivity.Normal\n    }\n\n    createCarryJob(): CarryJob<Dynamite> {\n        return new CarryDynamiteJob(this)\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PublicJob } from '../Job'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class ClearRubbleJob extends PublicJob {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(JobType.CLEAR_RUBBLE)\n        this.surface = surface\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.SHOVEL\n    }\n\n    getWorkplaces(): PathTarget[] {\n        const rubblePositions = this.surface.rubblePositions\n        return rubblePositions.length > 0 ? [new PathTarget(rubblePositions[0])] : [] // use first (no need to optimize)\n    }\n\n    onJobComplete() {\n        this.fulfiller.forEach((f) => f.changeActivity())\n        this.surface.reduceRubble()\n        this.fulfiller.forEach((f) => f.jobWorkplaces = this.getWorkplaces())\n        if (!this.surface.hasRubble()) {\n            super.onJobComplete()\n        }\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityClearing\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Clear\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PublicJob } from '../Job'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class DrillJob extends PublicJob {\n\n    color: number = 0xa0a0a0\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(JobType.DRILL)\n        this.surface = surface\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.DRILL\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.surface.getDigPositions().map((p) => new PathTarget(p))\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.collapse()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityDestruction\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Drill\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { PublicJob } from '../Job'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class ReinforceJob extends PublicJob {\n\n    color: number = 0x60a060\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(JobType.REINFORCE)\n        this.surface = surface\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.surface.getDigPositions().map((p) => new PathTarget(p))\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.reinforce()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityReinforce\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Reinforce\n    }\n\n    getWorkDuration(): number {\n        return 2700\n    }\n\n}\n","import { Group, Mesh, MeshPhongMaterial, Vector2, Vector3 } from 'three'\nimport { clearTimeoutSafe, getRandom, getRandomSign } from '../../../core/Util'\nimport { EventBus } from '../../../event/EventBus'\nimport { SelectionEvent, SurfaceChanged, SurfaceSelectedEvent } from '../../../event/LocalEvents'\nimport { CavernDiscovered, JobCreateEvent, JobDeleteEvent, OreFoundEvent } from '../../../event/WorldEvents'\nimport { CrystalFoundEvent, LandslideEvent } from '../../../event/WorldLocationEvent'\nimport { HEIGHT_MULTIPLER, TILESIZE } from '../../../params'\nimport { LWSCLoader } from '../../../resource/LWSCLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { AnimSubObj } from '../anim/AnimSubObj'\nimport { BuildingEntity } from '../building/BuildingEntity'\nimport { Crystal } from '../collect/Crystal'\nimport { Dynamite } from '../collect/Dynamite'\nimport { ElectricFence } from '../collect/ElectricFence'\nimport { Ore } from '../collect/Ore'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CarryDynamiteJob } from '../job/surface/CarryDynamiteJob'\nimport { ClearRubbleJob } from '../job/surface/ClearRubbleJob'\nimport { DrillJob } from '../job/surface/DrillJob'\nimport { ReinforceJob } from '../job/surface/ReinforceJob'\nimport { Selectable, SelectionType } from '../Selectable'\nimport { SurfaceGeometry } from './SurfaceGeometry'\nimport { SurfaceType } from './SurfaceType'\nimport { Terrain } from './Terrain'\nimport { WALL_TYPE } from './WallType'\n\nexport class Surface implements Selectable {\n\n    terrain: Terrain\n    surfaceType: SurfaceType\n    x: number\n    y: number\n    containedOres: number = 0\n    containedCrystals: number = 0\n    heightOffset: number = null\n    discovered: boolean = false\n    selected: boolean = false\n    reinforced: boolean = false\n    drillJob: DrillJob = null\n    reinforceJob: ReinforceJob = null\n    dynamiteJob: CarryDynamiteJob = null\n    clearRubbleJob: ClearRubbleJob = null\n    surfaceRotation: number = 0\n    seamLevel: number = 0\n    fallinTimeout = null\n\n    fallinGrp: Group = null\n    animationTimeout = null\n\n    wallType: WALL_TYPE = null\n    mesh: Mesh = null\n    needsMeshUpdate: boolean = false\n\n    topLeftHeightOffset: number = 0\n    topRightHeightOffset: number = 0\n    bottomLeftHeightOffset: number = 0\n    bottomRightHeightOffset: number = 0\n\n    rubblePositions: Vector2[] = []\n\n    building: BuildingEntity = null\n    fence: ElectricFence = null\n    hasPower: boolean = false\n\n    constructor(terrain: Terrain, surfaceType: SurfaceType, x: number, y: number, heightOffset: number) {\n        this.terrain = terrain\n        this.surfaceType = surfaceType\n        if (surfaceType === SurfaceType.CRYSTAL_SEAM || surfaceType === SurfaceType.ORE_SEAM) this.seamLevel = 4\n        this.x = x\n        this.y = y\n        this.heightOffset = heightOffset\n    }\n\n    /**\n     * @return {boolean} Returns true, if a new cave has been discovered\n     */\n    discoverNeighbors(): boolean {\n        if (!this.discovered) GameState.discoverSurface(this)\n        this.discovered = true\n        this.needsMeshUpdate = true\n        let foundCave = false\n        if (this.surfaceType.floor) {\n            for (let x = this.x - 1; x <= this.x + 1; x++) {\n                for (let y = this.y - 1; y <= this.y + 1; y++) {\n                    if (x !== this.x || y !== this.y) {\n                        const surf = this.terrain.getSurfaceOrNull(x, y)\n                        if (surf && !surf.discovered) {\n                            foundCave = surf.discoverNeighbors() || surf.surfaceType.floor\n                            surf.needsMeshUpdate = true\n                        }\n                    }\n                }\n            }\n        }\n        return foundCave\n    }\n\n    collapse() {\n        this.cancelJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += 4\n        this.needsMeshUpdate = true\n        // discover surface and all neighbors\n        const foundCave = this.discoverNeighbors()\n        if (foundCave) EventBus.publishEvent(new CavernDiscovered())\n        // drop contained ores and crystals\n        this.dropContainedOre(this.containedOres - 4)\n        for (let c = 0; c < this.containedCrystals; c++) {\n            const crystal = this.terrain.worldMgr.placeMaterial(new Crystal(), this.getRandomPosition())\n            EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n        }\n        // check for unsupported neighbors\n        for (let x = this.x - 1; x <= this.x + 1; x++) {\n            for (let y = this.y - 1; y <= this.y + 1; y++) {\n                if (x !== this.x || y !== this.y) {\n                    const surf = this.terrain.getSurface(x, y)\n                    surf.needsMeshUpdate = true\n                    if (!surf.isSupported()) surf.collapse()\n                }\n            }\n        }\n        // update meshes\n        this.terrain.updateSurfaceMeshes()\n        this.terrain.floorGroup.updateWorldMatrix(true, true)\n    }\n\n    private dropContainedOre(dropAmount: number) {\n        for (let c = 0; c < dropAmount && this.containedOres > 0; c++) {\n            this.containedOres--\n            this.terrain.worldMgr.placeMaterial(new Ore(), this.getRandomPosition())\n            EventBus.publishEvent(new OreFoundEvent())\n        }\n    }\n\n    getRandomPosition(): Vector2 {\n        return new Vector2(this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4),\n            this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4))\n    }\n\n    cancelJobs() {\n        this.drillJob = Surface.safeRemoveJob(this.drillJob)\n        this.reinforceJob = Surface.safeRemoveJob(this.reinforceJob)\n        this.dynamiteJob = Surface.safeRemoveJob(this.dynamiteJob)\n        this.clearRubbleJob = Surface.safeRemoveJob(this.clearRubbleJob)\n        this.updateJobColor()\n    }\n\n    private static safeRemoveJob(job: DrillJob | ReinforceJob | CarryDynamiteJob | ClearRubbleJob) {\n        if (job) EventBus.publishEvent(new JobDeleteEvent(job))\n        return null\n    }\n\n    reduceRubble() {\n        this.rubblePositions.shift()\n        if (this.surfaceType === SurfaceType.RUBBLE4) this.surfaceType = SurfaceType.RUBBLE3\n        else if (this.surfaceType === SurfaceType.RUBBLE3) this.surfaceType = SurfaceType.RUBBLE2\n        else if (this.surfaceType === SurfaceType.RUBBLE2) this.surfaceType = SurfaceType.RUBBLE1\n        else if (this.surfaceType === SurfaceType.RUBBLE1) this.surfaceType = SurfaceType.GROUND\n        this.dropContainedOre(this.containedOres - this.rubblePositions.length)\n        this.updateTexture()\n        EventBus.publishEvent(new SurfaceChanged(this))\n    }\n\n    isSupported(): boolean {\n        if (this.surfaceType.floor) return true\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        return isHighGround(surfLeft, surfTopLeft, surfTop)\n            || isHighGround(surfTop, surfTopRight, surfRight)\n            || isHighGround(surfRight, surfBottomRight, surfBottom)\n            || isHighGround(surfBottom, surfBottomLeft, surfLeft)\n    }\n\n    updateMesh(force: boolean = true) {\n        if (!force && !this.needsMeshUpdate) return\n        this.needsMeshUpdate = false\n\n        const topLeftVertex = new Vector3(this.x, 0, this.y)\n        const topRightVertex = new Vector3(this.x + 1, 0, this.y)\n        const bottomLeftVertex = new Vector3(this.x, 0, this.y + 1)\n        const bottomRightVertex = new Vector3(this.x + 1, 0, this.y + 1)\n\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        if (!this.discovered) {\n            topLeftVertex.y = 1\n            topRightVertex.y = 1\n            bottomRightVertex.y = 1\n            bottomLeftVertex.y = 1\n        } else if (!this.surfaceType.floor) {\n            if (isHighGround(surfLeft, surfTopLeft, surfTop)) topLeftVertex.y = 1\n            if (isHighGround(surfTop, surfTopRight, surfRight)) topRightVertex.y = 1\n            if (isHighGround(surfRight, surfBottomRight, surfBottom)) bottomRightVertex.y = 1\n            if (isHighGround(surfBottom, surfBottomLeft, surfLeft)) bottomLeftVertex.y = 1\n        }\n\n        // update mesh (geometry), if wall type changed\n        let wallType = topLeftVertex.y + topRightVertex.y + bottomRightVertex.y + bottomLeftVertex.y\n        if (wallType === WALL_TYPE.WALL && topLeftVertex.y === bottomRightVertex.y) wallType = WALL_TYPE.WEIRD_CREVICE\n\n        if (this.wallType !== wallType) {\n            this.wallType = wallType\n            this.updateGeometry(topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex, surfTopLeft, surfTop, surfLeft, surfTopRight, surfRight, surfBottomRight, surfBottom, surfBottomLeft)\n            if (this.wallType !== WALL_TYPE.WALL) this.cancelReinforceJobs()\n        }\n\n        this.updateTexture()\n        this.updateJobColor()\n        this.updateGraphWalk()\n    }\n\n    private updateGraphWalk() {\n        const weight = this.getGraphWalkWeight()\n        for (let x = 0; x < 3; x++) {\n            for (let y = 0; y < 3; y++) {\n                this.terrain.graphWalk.grid[this.x * 3 + x][this.y * 3 + y].weight = weight\n            }\n        }\n    }\n\n    cancelReinforceJobs() {\n        this.reinforceJob = Surface.safeRemoveJob(this.reinforceJob)\n        this.updateJobColor()\n    }\n\n    updateTexture() {\n        let textureName = this.terrain.textureSet.texturebasename\n        if (!this.discovered) {\n            textureName += '70'\n        } else if (this.surfaceType === SurfaceType.POWER_PATH) {\n            textureName += this.updatePowerPathTexture()\n        } else if (!this.surfaceType.shaping) {\n            if (this.surfaceType === SurfaceType.POWER_PATH_BUILDING && this.hasPower) {\n                textureName += '66'\n            } else {\n                textureName += this.surfaceType.matIndex.toString()\n            }\n        } else if (this.wallType === WALL_TYPE.WEIRD_CREVICE) {\n            textureName += '77'\n        } else {\n            if (this.wallType === WALL_TYPE.CORNER) {\n                textureName += '5'\n            } else if (this.wallType === WALL_TYPE.INVERTED_CORNER) {\n                textureName += '3'\n            } else if (this.reinforced) {\n                textureName += '2'\n            } else {\n                textureName += '0'\n            }\n            textureName += this.surfaceType.matIndex\n        }\n        textureName += '.bmp'\n\n        const texture = ResourceManager.getTexture(textureName)\n        texture.center.set(0.5, 0.5)\n        texture.rotation = this.surfaceRotation\n\n        this.accessMaterials().forEach((mat) => mat.map = texture)\n    }\n\n    private updatePowerPathTexture(): string {\n        this.surfaceRotation = 0\n        const left = this.terrain.getSurface(this.x - 1, this.y).isPath()\n        const top = this.terrain.getSurface(this.x, this.y - 1).isPath()\n        const right = this.terrain.getSurface(this.x + 1, this.y).isPath()\n        const bottom = this.terrain.getSurface(this.x, this.y + 1).isPath()\n        const pathSum = (left ? 1 : 0) + (top ? 1 : 0) + (right ? 1 : 0) + (bottom ? 1 : 0)\n        if (pathSum === 0 || pathSum === 1) {\n            if (left) this.surfaceRotation = -Math.PI / 2\n            if (top) this.surfaceRotation = Math.PI\n            if (right) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '75' : '65'\n        } else if (pathSum === 2) {\n            if (left === right) {\n                this.surfaceRotation = left ? Math.PI / 2 : 0\n                return this.hasPower ? '72' : '62'\n            } else {\n                if (left && bottom) this.surfaceRotation = -Math.PI / 2\n                if (left && top) this.surfaceRotation = Math.PI\n                if (top && right) this.surfaceRotation = Math.PI / 2\n                return this.hasPower ? '73' : '63'\n            }\n        } else if (pathSum === 3) {\n            if (!top) this.surfaceRotation = -Math.PI / 2\n            if (!right) this.surfaceRotation = Math.PI\n            if (!bottom) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '74' : '64'\n        } else {\n            return this.hasPower ? '71' : '60'\n        }\n    }\n\n    accessMaterials(): MeshPhongMaterial[] {\n        if (!this.mesh || !this.mesh.material) return []\n        if (Array.isArray(this.mesh.material)) {\n            return this.mesh.material as MeshPhongMaterial[]\n        } else {\n            return [this.mesh.material as MeshPhongMaterial]\n        }\n    }\n\n    updateGeometry(topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3, surfTopLeft: Surface, surfTop: Surface, surfLeft: Surface, surfTopRight: Surface, surfRight: Surface, surfBottomRight: Surface, surfBottom: Surface, surfBottomLeft: Surface) {\n        if (this.mesh) this.terrain.floorGroup.remove(this.mesh)\n        this.mesh?.geometry?.dispose()\n\n        function avgHeight(...args: Surface[]) {\n            let sum = 0, cnt = 0\n            args.map(s => s.heightOffset).filter(Boolean).forEach(h => {\n                sum += h\n                cnt++\n            })\n            return sum / cnt\n        }\n\n        this.topLeftHeightOffset = avgHeight(surfTopLeft, surfTop, this, surfLeft) * HEIGHT_MULTIPLER\n        this.topRightHeightOffset = avgHeight(surfTop, surfTopRight, surfRight, this) * HEIGHT_MULTIPLER\n        this.bottomRightHeightOffset = avgHeight(this, surfRight, surfBottomRight, surfBottom) * HEIGHT_MULTIPLER\n        this.bottomLeftHeightOffset = avgHeight(surfLeft, this, surfBottom, surfBottomLeft) * HEIGHT_MULTIPLER\n        const geometry = SurfaceGeometry.create(this.wallType, topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex,\n            topLeftVertex.y + this.topLeftHeightOffset,\n            topRightVertex.y + this.topRightHeightOffset,\n            bottomRightVertex.y + this.bottomRightHeightOffset,\n            bottomLeftVertex.y + this.bottomLeftHeightOffset,\n        )\n\n        this.mesh = new Mesh(geometry, new MeshPhongMaterial({shininess: 0}))\n        this.mesh.userData = {selectable: this, surface: this}\n\n        this.terrain.floorGroup.add(this.mesh)\n        this.terrain.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.SURFACE\n    }\n\n    select(): SelectionEvent {\n        if (this.surfaceType.selectable && (this.wallType !== WALL_TYPE.INVERTED_CORNER && this.wallType !== WALL_TYPE.WEIRD_CREVICE) && !this.selected) {\n            this.selected = true\n            this.accessMaterials().forEach((mat) => mat.color.setHex(0x6060a0))\n            return new SurfaceSelectedEvent(this)\n        }\n        return null\n    }\n\n    deselect(): any {\n        if (this.selected) {\n            this.selected = false\n            this.updateJobColor()\n        }\n    }\n\n    getSelectionCenter(): Vector3 {\n        return null // not used\n    }\n\n    updateJobColor() {\n        const color = this.dynamiteJob?.color || this.reinforceJob?.color || this.drillJob?.color || 0xffffff\n        this.accessMaterials().forEach((mat) => mat.color.setHex(color))\n    }\n\n    hasRubble(): boolean {\n        return this.rubblePositions.length > 0\n    }\n\n    isPath(): boolean {\n        return this.surfaceType === SurfaceType.POWER_PATH || this.surfaceType === SurfaceType.POWER_PATH_BUILDING\n    }\n\n    isWalkable(): boolean {\n        return this.surfaceType.floor && this.discovered && this.surfaceType !== SurfaceType.LAVA && this.surfaceType !== SurfaceType.WATER && !this.building?.blocksPathSurface\n    }\n\n    isDrillable(): boolean {\n        return this.surfaceType.drillable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDrillableHard(): boolean {\n        return this.surfaceType.drillableHard && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isReinforcable(): boolean {\n        return this.surfaceType.reinforcable && this.discovered && this.wallType === WALL_TYPE.WALL && !this.reinforced\n    }\n\n    isExplodable(): boolean {\n        return this.surfaceType.explodable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDigable(): boolean {\n        return this.isDrillable() || this.isExplodable()\n    }\n\n    getDigPositions(): Vector2[] {\n        const digPosition = []\n        if (this.terrain.getSurface(this.x - 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE - 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y - 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE - 1))\n        if (this.terrain.getSurface(this.x + 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE + 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y + 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE + TILESIZE + 1))\n        return digPosition\n    }\n\n    reinforce() {\n        this.reinforced = true\n        this.cancelReinforceJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.updateTexture()\n    }\n\n    getCenterWorld2D(): Vector2 {\n        return new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE + TILESIZE / 2)\n    }\n\n    getCenterWorld(): Vector3 {\n        const center = this.getCenterWorld2D()\n        return new Vector3(center.x, this.terrain.worldMgr.getTerrainHeight(center.x, center.y), center.y)\n    }\n\n    setFallinLevel(fallinLevel: number) {\n        if (fallinLevel < 1) return\n        let originPos\n        let targetPos\n        if (this.surfaceType.floor) {\n            originPos = this.terrain.findFallInOrigin(this.x, this.y)\n            targetPos = [this.x, this.y]\n        } else {\n            originPos = [this.x, this.y]\n            targetPos = this.terrain.findFallInTarget(this.x, this.y)\n        }\n        if (originPos && targetPos) {\n            this.terrain.getSurface(originPos[0], originPos[1]).scheduleFallin(targetPos[0], targetPos[1])\n        }\n    }\n\n    scheduleFallin(targetX: number, targetY: number) {\n        this.fallinTimeout = setTimeout(() => {\n            this.createFallin(targetX, targetY)\n            this.scheduleFallin(targetX, targetY)\n        }, (30 + getRandom(60)) * 1000) // TODO adapt timer to level multiplier and fallin value\n    }\n\n    createFallin(targetX: number, targetY: number) {\n        const fallinPosition = this.terrain.getSurface(targetX, targetY).getCenterWorld()\n        EventBus.publishEvent(new LandslideEvent(fallinPosition))\n\n        // TODO refactor mesh and animation handling\n        const content = ResourceManager.getResource('MiscAnims/RockFall/Rock3Sides.lws')\n        const animation = new LWSCLoader('MiscAnims/RockFall/').parse(content)\n        this.fallinGrp = new Group()\n        this.fallinGrp.position.copy(fallinPosition)\n        const dx = this.x - targetX, dy = targetY - this.y\n        this.fallinGrp.rotateOnAxis(new Vector3(0, 1, 0), Math.atan2(dy, dx) + Math.PI / 2)\n        this.terrain.worldMgr.sceneManager.scene.add(this.fallinGrp)\n        const poly = []\n        animation.bodies.forEach((body) => {\n            const polyModel = body.model.clone(true)\n            poly.push(polyModel)\n        })\n        animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                poly[parentInd].add(polyPart)\n            } else {\n                this.fallinGrp.add(polyPart)\n            }\n        })\n        this.animate(poly, animation, 0)\n\n        this.terrain.getSurface(targetX, targetY).makeRubble()\n    }\n\n    animate(poly, animation, frameIndex) {\n        if (poly.length !== animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = mat.transparent || mat.opacity < 1\n                    })\n                }\n            }\n        })\n        this.animationTimeout = null\n        if (!(frameIndex + 1 > animation.lastFrame) || animation.looping) {\n            let nextFrame = frameIndex + 1\n            if (nextFrame > animation.lastFrame) {\n                nextFrame = animation.firstFrame\n            }\n            const that = this\n            this.animationTimeout = setTimeout(() => that.animate(poly, animation, nextFrame), 1000 / animation.framesPerSecond * animation.transcoef)\n        } else {\n            this.terrain.worldMgr.sceneManager.scene.remove(this.fallinGrp)\n            this.fallinGrp = null\n        }\n    }\n\n    dispose() {\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.accessMaterials().forEach(m => m.dispose())\n        this.mesh?.geometry?.dispose()\n    }\n\n    getFloorHeight(worldX: number, worldZ: number) {\n        const sx = worldX / TILESIZE - this.x\n        const sy = worldZ / TILESIZE - this.y\n        const dy0 = Surface.interpolate(this.topLeftHeightOffset, this.topRightHeightOffset, sx)\n        const dy1 = Surface.interpolate(this.bottomLeftHeightOffset, this.bottomRightHeightOffset, sx)\n        return Surface.interpolate(dy0, dy1, sy) * TILESIZE\n    }\n\n    private static interpolate(y0: number, y1: number, x: number): number {\n        return y0 + x * (y1 - y0)\n    }\n\n    get neighbors(): Surface[] {\n        return [this.terrain.getSurface(this.x - 1, this.y), this.terrain.getSurface(this.x, this.y - 1),\n            this.terrain.getSurface(this.x + 1, this.y), this.terrain.getSurface(this.x, this.y + 1)]\n    }\n\n    makeRubble(containedOre: number = 0) {\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += containedOre\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.updateTexture()\n    }\n\n    setBuilding(building: BuildingEntity) {\n        this.building = building\n        this.updateGraphWalk()\n    }\n\n    getGraphWalkWeight(): number {\n        return this.isWalkable() ? this.hasRubble() ? 4 : 1 : 0\n    }\n\n    setHasPower(state: boolean, recursive: boolean) {\n        if (this.hasPower === state) return\n        this.hasPower = state\n        this.updateTexture()\n        if (recursive) this.neighbors.forEach((n) => n.isPath() && n.setHasPower(state, recursive))\n    }\n\n    canPlaceFence(): boolean { // TODO performance this can be cached\n        return (this.surfaceType === SurfaceType.GROUND || this.isPath()) && !this.building && !this.fence &&\n            [1, 2].some((n) => {\n                return !!this.terrain.getSurface(this.x - n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y - n).building ||\n                    !!this.terrain.getSurface(this.x + n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y + n).building ||\n                    !!this.terrain.getSurface(this.x - n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y - n).fence ||\n                    !!this.terrain.getSurface(this.x + n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y + n).fence\n            })\n    }\n\n    createDrillJob(): DrillJob {\n        if (!this.drillJob) {\n            this.drillJob = new DrillJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.drillJob))\n        }\n        return this.drillJob\n    }\n\n    createReinforceJob(): ReinforceJob {\n        if (!this.reinforceJob) {\n            this.reinforceJob = new ReinforceJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.reinforceJob))\n        }\n        return this.reinforceJob\n    }\n\n    createDynamiteJob(): CarryDynamiteJob {\n        if (!this.dynamiteJob) {\n            const targetBuilding = GameState.getClosestBuildingByType(this.getCenterWorld(), EntityType.TOOLSTATION) // XXX performance cache this\n            if (!targetBuilding) throw 'Could not find toolstation to spawn dynamite'\n            const dynamite = new Dynamite(this)\n            dynamite.worldMgr = this.terrain.worldMgr\n            dynamite.group.position.copy(targetBuilding.getDropPosition())\n            dynamite.worldMgr.sceneManager.scene.add(dynamite.group)\n            this.dynamiteJob = new CarryDynamiteJob(dynamite)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.dynamiteJob))\n        }\n        return this.dynamiteJob\n    }\n\n    createClearRubbleJob(): ClearRubbleJob {\n        if (!this.clearRubbleJob) {\n            this.clearRubbleJob = new ClearRubbleJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.clearRubbleJob))\n        }\n        return this.clearRubbleJob\n    }\n\n}\n\n","import { Group, Vector2, Vector3 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { EntityAddedEvent } from '../../../event/WorldEvents'\nimport { TILESIZE } from '../../../params'\nimport { WorldManager } from '../../WorldManager'\nimport { EntitySuperType } from '../EntityType'\nimport { PathTarget } from '../PathTarget'\nimport { astar, Graph } from './astar'\nimport { Surface } from './Surface'\nimport { SurfaceType } from './SurfaceType'\nimport { TerrainPath } from './TerrainPath'\n\nexport class Terrain {\n\n    worldMgr: WorldManager\n    textureSet: any = {}\n    width: number = 0\n    height: number = 0\n    surfaces: Surface[][] = []\n    floorGroup: Group = new Group()\n    roofGroup: Group = new Group()\n    graphWalk: Graph = null\n    cachedPaths = new Map<string, TerrainPath>()\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        this.floorGroup.scale.set(TILESIZE, TILESIZE, TILESIZE)\n        this.roofGroup.visible = false // keep roof hidden unless switched to other camera\n        EventBus.registerEventListener(EventKey.ENTITY_ADDED, (event: EntityAddedEvent) => {\n            if (event.superType !== EntitySuperType.BUILDING) return\n            event.entity.surfaces.forEach((s) => s.neighbors.forEach((n) => n.updateTexture()))\n        })\n    }\n\n    getSurfaceFromWorld(worldPosition: Vector3): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.z)\n    }\n\n    getSurfaceFromWorld2D(worldPosition: Vector2): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.y)\n    }\n\n    getSurfaceFromWorldXZ(worldX: number, worldZ: number): Surface | null {\n        return this.getSurface(worldX / TILESIZE, worldZ / TILESIZE)\n    }\n\n    getSurface(x, y): Surface {\n        x = Math.floor(x)\n        y = Math.floor(y)\n        return this.getSurfaceOrNull(x, y) || new Surface(this, SurfaceType.SOLID_ROCK, x, y, 0)\n    }\n\n    getSurfaceOrNull(x, y): Surface | null {\n        if (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n            return this.surfaces[x][y]\n        } else {\n            return null\n        }\n    }\n\n    updateSurfaceMeshes(force: boolean = false) {\n        this.forEachSurface((s) => s.updateMesh(force))\n        this.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n        this.resetGraphWalk()\n    }\n\n    resetGraphWalk() {\n        this.graphWalk.init()\n        this.cachedPaths.clear()\n        console.log('Cached paths cleared')\n    }\n\n    findPath(start: Vector2, target: PathTarget): TerrainPath {\n        const end = target.targetLocation\n        const gridStartX = Math.floor(start.x * 3 / TILESIZE)\n        const gridStartY = Math.floor(start.y * 3 / TILESIZE)\n        const gridEndX = Math.floor(end.x * 3 / TILESIZE)\n        const gridEndY = Math.floor(end.y * 3 / TILESIZE)\n        if (gridStartX === gridEndX && gridStartY === gridEndY) {\n            return new TerrainPath(target, end)\n        }\n        const cacheIdentifier = gridStartX + '/' + gridStartY + ' -> ' + gridEndX + '/' + gridEndY\n        const cachedPath = this.cachedPaths.get(cacheIdentifier)\n        if (cachedPath) {\n            return cachedPath.addLocation(end)\n        } else {\n            return this.searchPath(gridStartX, gridStartY, gridEndX, gridEndY, target, cacheIdentifier)\n        }\n    }\n\n    private searchPath(gridStartX: number, gridStartY: number, gridEndX: number, gridEndY: number, target: PathTarget, cacheIdentifier: string): TerrainPath {\n        const startNode = this.graphWalk.grid[gridStartX][gridStartY]\n        const endNode = this.graphWalk.grid[gridEndX][gridEndY]\n        const worldPath = astar.search(this.graphWalk, startNode, endNode).map((n) => this.gridNodeToWorldPos(n))\n        if (worldPath.length < 1) return null // no path found\n        // replace last surface center with actual target position\n        worldPath.pop()\n        worldPath.push(target.targetLocation)\n        this.cachedPaths.set(cacheIdentifier, new TerrainPath(target, worldPath.slice(0, -1))) // cache shallow copy to avoid interference\n        return new TerrainPath(target, worldPath)\n    }\n\n    gridNodeToWorldPos(gridNode) {\n        return new Vector2((gridNode.x + 0.25 + Math.random() / 2) * TILESIZE / 3, (gridNode.y + 0.25 + Math.random() / 2) * TILESIZE / 3)\n    }\n\n    findFallInOrigin(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isReinforcable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isReinforcable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isReinforcable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isReinforcable()) return [bottomSurface.x, bottomSurface.y]\n        const leftSurface2 = this.getSurface(x - 1, y)\n        if (leftSurface2.isDigable()) return [leftSurface2.x, leftSurface2.y]\n        const topSurface2 = this.getSurface(x, y - 1)\n        if (topSurface2.isDigable()) return [topSurface2.x, topSurface2.y]\n        const rightSurface2 = this.getSurface(x + 1, y)\n        if (rightSurface2.isDigable()) return [rightSurface2.x, rightSurface2.y]\n        const bottomSurface2 = this.getSurface(x, y + 1)\n        if (bottomSurface2.isDigable()) return [bottomSurface2.x, bottomSurface2.y]\n        return null\n    }\n\n    findFallInTarget(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isWalkable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isWalkable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isWalkable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isWalkable()) return [bottomSurface.x, bottomSurface.y]\n        return null\n    }\n\n    dispose() {\n        this.forEachSurface(s => s.dispose())\n    }\n\n    forEachSurface(each: (surface: Surface) => any) {\n        this.surfaces?.forEach((r) => r.forEach((s) => each(s)))\n    }\n\n}\n","// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n}\n\nexport enum POINTER_EVENT {\n    MOVE,\n    DOWN,\n    UP,\n}\n\nexport enum KEY_EVENT {\n    DOWN,\n    UP,\n}\n","import { Color, MathUtils, Raycaster, Vector2, Vector3 } from 'three'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { NerpParser } from '../core/NerpParser'\nimport { NerpRunner } from '../core/NerpRunner'\nimport { clearIntervalSafe, getRandom } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { AirLevelChanged } from '../event/LocalEvents'\nimport { EntityAddedEvent, JobCreateEvent, RaiderRequested } from '../event/WorldEvents'\nimport { CHECK_SPANW_RAIDER_TIMER, TILESIZE, UPDATE_OXYGEN_TIMER } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { GameScreen } from '../screen/GameScreen'\nimport { RaiderActivity } from './model/activities/RaiderActivity'\nimport { MaterialEntity } from './model/collect/MaterialEntity'\nimport { EntityType } from './model/EntityType'\nimport { GameState } from './model/GameState'\nimport { MoveJob } from './model/job/MoveJob'\nimport { Raider } from './model/raider/Raider'\nimport { ObjectListLoader } from './ObjectListLoader'\nimport { SceneManager } from './SceneManager'\nimport { TerrainLoader } from './TerrainLoader'\nimport degToRad = MathUtils.degToRad\n\nexport class WorldManager {\n\n    sceneManager: SceneManager = null\n    spawnRaiderInterval = null\n    nerpRunner: NerpRunner = null\n    oxygenUpdateInterval = null\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.sceneManager = new SceneManager(canvas)\n        EventBus.registerEventListener(EventKey.DESELECTED_ENTITY, () => GameState.selectEntities([]))\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => {\n            if (GameState.requestedRaiders > 0 && !this.spawnRaiderInterval) {\n                this.spawnRaiderInterval = setInterval(this.checkSpawnRaiders.bind(this), CHECK_SPANW_RAIDER_TIMER)\n            }\n        })\n        EventBus.registerEventListener(EventKey.CAVERN_DISCOVERED, () => {\n            GameState.discoveredCaverns++\n        })\n        this.oxygenUpdateInterval = setInterval(this.updateOxygen.bind(this), UPDATE_OXYGEN_TIMER)\n    }\n\n    setup(levelConf: LevelEntryCfg, gameScreen: GameScreen) {\n        GameState.levelFullName = levelConf.fullName\n        GameState.totalCaverns = levelConf.reward?.quota?.caverns || 0\n        GameState.rewardConfig = levelConf.reward\n        GameState.priorityList.setList(levelConf.priorities)\n        GameState.oxygenRate = levelConf.oxygenRate\n\n        const ambientRgb = ResourceManager.cfg('Main', 'AmbientRGB') || [10, 10, 10]\n        const maxAmbRgb = Math.min(255, Math.max(0, ...ambientRgb))\n        const normalizedRgb = ambientRgb.map(v => v / (maxAmbRgb ? maxAmbRgb : 1))\n        const ambientColor = new Color(normalizedRgb[0], normalizedRgb[1], normalizedRgb[2])\n        this.sceneManager.setupScene(ambientColor)\n\n        // create terrain mesh and add it to the scene\n        this.sceneManager.terrain = TerrainLoader.loadTerrain(levelConf, this)\n        this.sceneManager.scene.add(this.sceneManager.terrain.floorGroup)\n\n        // load in non-space objects next\n        const objectListConf = ResourceManager.getResource(levelConf.oListFile)\n        ObjectListLoader.loadObjectList(this, objectListConf, levelConf.disableStartTeleport)\n\n        // load nerp script\n        this.nerpRunner = NerpParser.parse(ResourceManager.getResource(levelConf.nerpFile))\n        this.nerpRunner.messages.push(...(ResourceManager.getResource(levelConf.nerpMessageFile)))\n        this.nerpRunner.onLevelComplete = () => gameScreen.onLevelEnd()\n\n        // gather level start details for game result score calculation\n        GameState.totalDiggables = 0\n        this.sceneManager.terrain.forEachSurface((s) => GameState.totalDiggables += s.isDigable() ? 1 : 0)\n        GameState.totalCrystals = 0\n        this.sceneManager.terrain.forEachSurface((s) => GameState.totalCrystals += s.containedCrystals)\n        GameState.totalOres = 0\n        this.sceneManager.terrain.forEachSurface((s) => GameState.totalOres += s.containedOres)\n    }\n\n    start() {\n        this.sceneManager.startScene()\n        this.nerpRunner?.startExecution()\n        GameState.levelStartTime = Date.now()\n    }\n\n    stop() {\n        GameState.levelStopTime = Date.now()\n        this.nerpRunner?.pauseExecution()\n        this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n        GameState.spiders.forEach((m) => m.onLevelEnd())\n        GameState.bats.forEach((b) => b.onLevelEnd())\n        GameState.remainingDiggables = 0\n        this.sceneManager?.terrain?.forEachSurface((s) => GameState.remainingDiggables += s.isDigable() ? 1 : 0)\n        this.sceneManager.disposeScene()\n    }\n\n    resize(width: number, height: number) {\n        if (this.sceneManager) this.sceneManager.renderer.setSize(width, height)\n    }\n\n    getTerrainIntersectionPoint(rx: number, ry: number): Vector3 {\n        if (!this.sceneManager.terrain) return null\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.sceneManager.camera)\n        const intersects = raycaster.intersectObjects(this.sceneManager.terrain.floorGroup.children)\n        return intersects.length > 0 ? intersects[0].point : null\n    }\n\n    setTorchPosition(position: Vector2) {\n        this.sceneManager.cursorTorchlight.position.x = position.x\n        this.sceneManager.cursorTorchlight.position.y = this.sceneManager.terrain.getSurfaceFromWorldXZ(position.x, position.y).getFloorHeight(position.x, position.y) + 2 * TILESIZE\n        this.sceneManager.cursorTorchlight.position.z = position.y\n    }\n\n    getFloorPosition(world: Vector2) {\n        const floorY = this.sceneManager.terrain.getSurfaceFromWorldXZ(world.x, world.y).getFloorHeight(world.x, world.y)\n        return new Vector3(world.x, floorY, world.y)\n    }\n\n    getTerrainHeight(worldX: number, worldZ: number): number {\n        const raycaster = new Raycaster(new Vector3(Number(worldX), 3 * TILESIZE, Number(worldZ)), new Vector3(0, -1, 0))\n        const intersect = raycaster.intersectObject(this.sceneManager.terrain.floorGroup, true)\n        if (intersect.length > 0) {\n            return intersect[0].point.y\n        } else {\n            console.warn('could not determine terrain height for ' + worldX + '/' + worldZ)\n            return 0\n        }\n    }\n\n    placeMaterial(item: MaterialEntity, world: Vector2) {\n        item.worldMgr = this\n        item.group.position.copy(this.getFloorPosition(world))\n        item.group.visible = this.sceneManager.terrain.getSurfaceFromWorld(item.group.position).discovered\n        this.sceneManager.scene.add(item.group)\n        if (item.group.visible) {\n            GameState.materials.push(item)\n            EventBus.publishEvent(new JobCreateEvent(item.createCarryJob()))\n        } else {\n            GameState.materialsUndiscovered.push(item)\n        }\n        return item\n    }\n\n    checkSpawnRaiders() {\n        if (GameState.requestedRaiders < 1) {\n            this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n            return\n        }\n        if (GameState.raiders.length >= GameState.getMaxRaiders()) return\n        const spawnBuildings = GameState.getBuildingsByType(EntityType.TOOLSTATION, EntityType.TELEPORT_PAD)\n        for (let c = 0; c < spawnBuildings.length && GameState.requestedRaiders > 0; c++) {\n            const station = spawnBuildings[c]\n            if (station.spawning) continue\n            GameState.requestedRaiders--\n            EventBus.publishEvent(new RaiderRequested())\n            station.spawning = true\n            const raider = new Raider()\n            raider.worldMgr = this\n            raider.changeActivity(RaiderActivity.TeleportIn, () => {\n                station.spawning = false\n                raider.changeActivity()\n                raider.createPickSphere()\n                const walkOutPos = station.getPosition2D().add(new Vector2(0, TILESIZE * 3 / 4 + getRandom(TILESIZE / 2))\n                    .rotateAround(new Vector2(0, 0), station.getHeading() + degToRad(-10 + getRandom(20))))\n                raider.setJob(new MoveJob(walkOutPos))\n                GameState.raiders.push(raider)\n                EventBus.publishEvent(new EntityAddedEvent(raider))\n            })\n            raider.group.position.copy(station.group.position).add(new Vector3(0, 0, TILESIZE / 2).applyEuler(station.group.rotation))\n            raider.group.rotation.copy(station.group.rotation)\n            this.sceneManager.scene.add(raider.group)\n        }\n    }\n\n    updateOxygen() {\n        const sum = GameState.raiders.map((r) => r.stats.OxygenCoef).reduce((l, r) => l + r, 0) +\n            GameState.buildings.map((b) => b.isPowered() ? b.stats.OxygenCoef : 0).reduce((l, r) => l + r, 0)\n        const rateMultiplier = 0.001\n        const valuePerSecond = 1 / 25\n        const msToSeconds = 0.001\n        const diff = sum * GameState.oxygenRate * rateMultiplier * valuePerSecond * UPDATE_OXYGEN_TIMER * msToSeconds / 10\n        if (diff) {\n            GameState.airLevel = Math.min(1, Math.max(0, GameState.airLevel + diff))\n            EventBus.publishEvent(new AirLevelChanged())\n        }\n    }\n\n}\n","import { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../../params'\n\nexport class ScreenLayer {\n\n    canvas: HTMLCanvasElement\n    context: CanvasRenderingContext2D\n    onRedraw: (context: CanvasRenderingContext2D) => any\n    active: boolean = true\n\n    constructor(alpha: boolean = false, withContext: boolean = true) {\n        this.canvas = document.createElement('canvas')\n        if (!alpha) this.canvas.style.background = '#f0f'\n        if (withContext) this.context = this.canvas.getContext('2d', {alpha: alpha})\n        this.hide()\n    }\n\n    reset() {\n    }\n\n    setZIndex(zIndex: number) {\n        this.canvas.style.zIndex = String(zIndex)\n    }\n\n    static compareZ(layerA: ScreenLayer, layerB: ScreenLayer) {\n        let aIndex = layerA?.canvas?.style?.zIndex || 0\n        const bIndex = layerB?.canvas?.style?.zIndex || 0\n        return aIndex === bIndex ? 0 : aIndex > bIndex ? -1 : 1\n    }\n\n    resize(width, height) {\n        this.canvas.width = width\n        this.canvas.height = height\n    }\n\n    redraw() {\n        const callback = this.onRedraw\n        if (this.isActive() && callback) {\n            const context = this.context\n            requestAnimationFrame(() => callback(context))\n        }\n    }\n\n    show() {\n        this.reset()\n        this.active = true\n        this.canvas.style.visibility = 'visible'\n        this.redraw()\n    }\n\n    hide() {\n        this.active = false\n        this.canvas.style.visibility = 'hidden'\n    }\n\n    isActive() {\n        return this.active\n    }\n\n    toCanvasCoords(windowX: number, windowY: number) {\n        const clientRect = this.canvas.getBoundingClientRect()\n        return [windowX - clientRect.left, windowY - clientRect.top]\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        return false\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): boolean {\n        return false\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        return false\n    }\n\n}\n\nexport class ScaledLayer extends ScreenLayer {\n\n    fixedWidth: number = SPRITE_RESOLUTION_WIDTH\n    fixedHeight: number = SPRITE_RESOLUTION_HEIGHT\n    scaleX: number\n    scaleY: number\n\n    constructor() {\n        super(true)\n        this.updateScale()\n    }\n\n    private updateScale() {\n        this.scaleX = this.canvas.width / this.fixedWidth\n        this.scaleY = this.canvas.height / this.fixedHeight\n    }\n\n    toScaledCoords(windowX: number, windowY: number) {\n        const [cx, cy] = this.toCanvasCoords(windowX, windowY)\n        return [cx / this.scaleX, cy / this.scaleY].map((c) => Math.round(c))\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        this.updateScale()\n        this.context.scale(this.scaleX, this.scaleY)\n    }\n\n}\n","import { KEY_EVENT } from './EventTypeEnum'\n\nexport class GameKeyboardEvent {\n\n    eventEnum: KEY_EVENT\n    type: string\n    bubbles: boolean\n    key: string\n\n    constructor(eventEnum: KEY_EVENT, event: KeyboardEvent) {\n        this.eventEnum = eventEnum\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        this.key = event.key\n    }\n\n}\n","import { POINTER_EVENT } from './EventTypeEnum'\n\nexport class GamePointerEvent implements PointerEventInit {\n\n    type: string\n    eventEnum: POINTER_EVENT\n    bubbles: boolean\n    clientX: number\n    clientY: number\n    pointerType: string\n    button: number\n    ctrlKey: boolean\n    metaKey: boolean\n    shiftKey: boolean\n\n    constructor(eventEnum: POINTER_EVENT, event: PointerEvent) {\n        this.eventEnum = eventEnum\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        // all event attributes used by three.js controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n        this.clientX = event.clientX\n        this.clientY = event.clientY\n        this.pointerType = event.pointerType\n        this.button = event.button\n        this.ctrlKey = event.ctrlKey\n        this.metaKey = event.metaKey\n        this.shiftKey = event.shiftKey\n    }\n\n}\n","export class GameWheelEvent {\n\n    type: string\n    bubbles: boolean\n    clientX: number\n    clientY: number\n    deltaX: number\n    deltaY: number\n    deltaZ: number\n    button: number\n    ctrlKey: boolean\n    metaKey: boolean\n    shiftKey: boolean\n\n    constructor(event: WheelEvent) {\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        // all event attributes used by three.js controls: clientX, clientY, deltaY, keyCode, touches, button, ctrlKey, metaKey, shiftKey\n        this.clientX = event.clientX\n        this.clientY = event.clientY\n        this.deltaX = event.deltaX\n        this.deltaY = event.deltaY\n        this.deltaZ = event.deltaZ\n        this.button = event.button\n        this.ctrlKey = event.ctrlKey\n        this.metaKey = event.metaKey\n        this.shiftKey = event.shiftKey\n    }\n\n}\n","import { DEV_MODE } from '../params'\nimport { BaseScreen } from '../screen/BaseScreen'\nimport { ScreenLayer } from '../screen/layer/ScreenLayer'\nimport { KEY_EVENT, POINTER_EVENT } from './EventTypeEnum'\nimport { GameKeyboardEvent } from './GameKeyboardEvent'\nimport { GamePointerEvent } from './GamePointerEvent'\nimport { GameWheelEvent } from './GameWheelEvent'\n\nexport class EventManager {\n\n    constructor(screen: BaseScreen) {\n        screen.gameCanvasContainer.addEventListener('contextmenu', (event: MouseEvent) => {\n            if (screen.isInRect(event)) event.preventDefault()\n        })\n        new Map<string, POINTER_EVENT>([\n            ['pointermove', POINTER_EVENT.MOVE],\n            ['pointerdown', POINTER_EVENT.DOWN],\n            ['pointerup', POINTER_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: PointerEvent) => {\n                if (!screen.isInRect(event)) return\n                event.preventDefault()\n                const nonBubblingClone = new GamePointerEvent(eventEnum, event)\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handlePointerEvent(nonBubblingClone))\n            })\n        })\n        new Map<string, KEY_EVENT>([\n            ['keydown', KEY_EVENT.DOWN],\n            ['keyup', KEY_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: KeyboardEvent) => {\n                if (!DEV_MODE) event.preventDefault()\n                const nonBubblingClone = new GameKeyboardEvent(eventEnum, event)\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handleKeyEvent(nonBubblingClone))\n            })\n        })\n        screen.gameCanvasContainer.addEventListener('wheel', (event: WheelEvent) => {\n            if (!screen.isInRect(event)) return\n            const nonBubblingClone = new GameWheelEvent(event)\n            screen.layers.filter(l => l.isActive())\n                .sort((a, b) => ScreenLayer.compareZ(a, b))\n                .some(l => l.handleWheelEvent(nonBubblingClone))\n        })\n    }\n\n}\n","import { iGet } from '../../core/Util'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { ChangeCursor } from '../../event/LocalEvents'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Cursors } from '../Cursors'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class CursorLayer extends ScreenLayer {\n\n    pointersCfg\n    curUrl\n\n    constructor() {\n        super(true, false)\n        EventBus.registerEventListener(EventKey.CHANGE_CURSOR, (event: ChangeCursor) => {\n            this.changeCursor(event.cursor)\n        })\n    }\n\n    show() {\n        super.show()\n        this.pointersCfg = ResourceManager.cfg('Pointers')\n        this.changeCursor(Cursors.Pointer_Standard)\n    }\n\n    hide() {\n        super.hide()\n        this.canvas.style.cursor = null\n    }\n\n    private changeCursor(cursor: Cursors) {\n        if (this.curUrl) URL.revokeObjectURL(this.curUrl)\n        if (!this.pointersCfg) return\n        const cursorFilename = iGet(this.pointersCfg, Cursors[cursor])\n        const curImg = ResourceManager.getImage(cursorFilename)\n        this.curUrl = curImg.toDataURL()\n        // no resized possible; Chrome limits cursor size to 32x32 anyway\n        this.canvas.style.cursor = 'url(' + this.curUrl + '), auto'\n    }\n\n}\n","import { EventManager } from '../event/EventManager'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../params'\nimport { CursorLayer } from './layer/CursorLayer'\nimport { ScreenLayer } from './layer/ScreenLayer'\n\nexport class BaseScreen {\n\n    gameCanvasContainer: HTMLElement\n    eventMgr: EventManager\n    layers: ScreenLayer[] = []\n    width: number = SPRITE_RESOLUTION_WIDTH\n    height: number = SPRITE_RESOLUTION_HEIGHT\n    ratio: number = SPRITE_RESOLUTION_WIDTH / SPRITE_RESOLUTION_HEIGHT\n    cursorLayer: CursorLayer\n\n    constructor() {\n        this.gameCanvasContainer = document.getElementById('game-canvas-container')\n        this.gameCanvasContainer.focus()\n        this.eventMgr = new EventManager(this)\n        if (!this.gameCanvasContainer) throw 'Fatal error: game canvas container not found!'\n        window.addEventListener('resize', () => this.onWindowResize())\n        this.onWindowResize()\n        this.cursorLayer = this.addLayer(new CursorLayer(), 1000)\n    }\n\n    addLayer<T extends ScreenLayer>(layer: T, zIndex: number = 0): T {\n        layer.resize(this.width, this.height)\n        layer.setZIndex(zIndex)\n        this.layers.push(layer)\n        this.gameCanvasContainer.appendChild(layer.canvas)\n        return layer\n    }\n\n    redraw() {\n        this.layers.forEach((layer) => layer.redraw())\n    }\n\n    show() {\n        this.layers.forEach((layer) => layer.show())\n        this.redraw()\n    }\n\n    hide() {\n        this.layers.forEach((layer) => layer.hide())\n    }\n\n    onWindowResize() {\n        const maxWidth = this.gameCanvasContainer.offsetWidth, maxHeight = this.gameCanvasContainer.offsetHeight\n        const idealHeight = Math.round(maxWidth / this.ratio)\n        if (idealHeight > maxHeight) {\n            this.resize(Math.round(maxHeight * this.ratio), maxHeight)\n        } else {\n            this.resize(maxWidth, idealHeight)\n        }\n    }\n\n    resize(width: number, height: number) {\n        this.width = width\n        this.height = height\n        this.layers.forEach((layer) => layer.resize(width, height))\n        this.redraw()\n    }\n\n    isInRect(event: MouseEvent | WheelEvent) {\n        if (this.layers.length < 1) return false\n        const firstLayer = this.layers[0] // all layers have same state and size\n        if (!firstLayer.isActive() || !firstLayer.canvas) return false\n        const rect = firstLayer.canvas.getBoundingClientRect()\n        const clientX = event.clientX, clientY = event.clientY\n        return clientX >= rect.left && clientX < rect.right && clientY >= rect.top && clientY < rect.bottom\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class BarrierActivity extends AnimEntityActivity {\n\n    static Short = new AnimEntityActivity('Short')\n    static Expand = new AnimEntityActivity('Expand')\n    static Long = new AnimEntityActivity('Long')\n    static Teleport = new AnimEntityActivity('Teleport')\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { MaterialEntity } from '../../collect/MaterialEntity'\nimport { Surface } from '../../map/Surface'\nimport { SurfaceType } from '../../map/SurfaceType'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PublicJob } from '../Job'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class CompletePowerPathJob extends PublicJob {\n\n    surface: Surface\n    placedItems: MaterialEntity[]\n    workplaces: PathTarget[]\n\n    constructor(surface: Surface, placedItems: MaterialEntity[]) {\n        super(JobType.COMPLETE_POWER_PATH)\n        this.surface = surface\n        this.placedItems = placedItems\n        this.workplaces = [new PathTarget(surface.getRandomPosition())]\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.placedItems.forEach((placed) => placed.removeFromScene())\n        this.surface.surfaceType = SurfaceType.POWER_PATH\n        this.surface.updateTexture()\n        this.surface.neighbors.forEach((s) => s.updateTexture())\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.SHOVEL\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityConstruction\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.workplaces\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Clear\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { BarrierActivity } from '../activities/BarrierActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { Barrier } from '../collect/Barrier'\nimport { Crystal } from '../collect/Crystal'\nimport { MaterialEntity } from '../collect/MaterialEntity'\nimport { Ore } from '../collect/Ore'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CompletePowerPathJob } from '../job/surface/CompletePowerPathJob'\nimport { Surface } from '../map/Surface'\nimport { BuildingEntity } from './BuildingEntity'\n\nexport class BuildingSite {\n\n    primarySurface: Surface = null\n    secondarySurface: Surface = null\n    building: BuildingEntity\n    heading: number = 0\n    neededByType: Map<EntityType, number> = new Map()\n    assignedByType: Map<EntityType, MaterialEntity[]> = new Map()\n    onSiteByType: Map<EntityType, MaterialEntity[]> = new Map()\n    complete: boolean = false\n\n    constructor(primarySurface: Surface, secondarySurface: Surface = null, building: BuildingEntity = null) {\n        this.primarySurface = primarySurface\n        this.secondarySurface = secondarySurface\n        this.building = building\n    }\n\n    getRandomDropPosition(): Vector2 {\n        return this.primarySurface.getRandomPosition()\n    }\n\n    needs(EntityType: EntityType): boolean {\n        const needed = this.neededByType.getOrUpdate(EntityType, () => 0)\n        const assigned = this.assignedByType.getOrUpdate(EntityType, () => []).length\n        return needed > assigned\n    }\n\n    assign(item: MaterialEntity) {\n        this.assignedByType.getOrUpdate(item.entityType, () => []).push(item)\n    }\n\n    unAssign(item: MaterialEntity) {\n        this.assignedByType.getOrUpdate(item.entityType, () => []).remove(item)\n    }\n\n    addItem(item: MaterialEntity) {\n        const needed = this.neededByType.getOrUpdate(item.entityType, () => 0)\n        if (this.onSiteByType.getOrUpdate(item.entityType, () => []).length < needed) {\n            item.onAddToSite()\n            this.onSiteByType.getOrUpdate(item.entityType, () => []).push(item)\n            this.checkComplete()\n        } else {\n            item.resetTarget()\n        }\n    }\n\n    checkComplete() {\n        if (this.complete) return\n        this.complete = true\n        this.neededByType.forEach((needed, neededType) => {\n            this.complete = this.complete && this.onSiteByType.getOrUpdate(neededType, () => []).length >= needed\n        })\n        if (!this.complete) return\n        GameState.buildingSites.remove(this)\n        if (!this.building) {\n            const items = []\n            this.onSiteByType.forEach((itemsOnSite) => items.push(...itemsOnSite))\n            EventBus.publishEvent(new JobCreateEvent(new CompletePowerPathJob(this.primarySurface, items)))\n        } else {\n            this.onSiteByType.getOrUpdate(EntityType.BARRIER, () => []).forEach((item: Barrier) => {\n                item.changeActivity(BarrierActivity.Teleport, () => item.removeFromScene())\n            })\n            this.onSiteByType.getOrUpdate(EntityType.CRYSTAL, () => []).forEach((item: Crystal) => {\n                item.removeFromScene()\n            })\n            this.onSiteByType.getOrUpdate(EntityType.ORE, () => []).forEach((item: Ore) => {\n                item.removeFromScene()\n            })\n            const world = this.primarySurface.getCenterWorld2D()\n            this.building.addToScene(this.primarySurface.terrain.worldMgr, world.x, world.y, -this.heading + Math.PI / 2, false)\n        }\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n}\n","import { BarrierActivity } from '../activities/BarrierActivity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntityType } from '../EntityType'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { BarrierLocation } from './BarrierLocation'\nimport { CarryPathTarget } from './CarryPathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Barrier extends MaterialEntity {\n\n    heading: number\n\n    constructor(location: BarrierLocation, site: BuildingSite) {\n        super(EntityType.BARRIER, 'MiscAnims/Barrier/Barrier.ae')\n        this.heading = location.heading\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityConstruction\n        this.changeActivity()\n        this.targets = [new CarryPathTarget(location.location, site, null)]\n    }\n\n    protected updateTargets(): CarryPathTarget[] {\n        return this.targets // TODO check target site still requires barrier, otherwise choose toolstation\n    }\n\n    getDefaultActivity(): BarrierActivity {\n        return BarrierActivity.Short\n    }\n\n    onAddToSite() {\n        super.onAddToSite()\n        this.group.rotation.y = this.heading\n        this.changeActivity(BarrierActivity.Expand, () => this.changeActivity(BarrierActivity.Long))\n    }\n\n}\n","import { Raycaster, Vector2 } from 'three'\nimport { EventBus } from '../../event/EventBus'\nimport { KEY_EVENT, MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { CancelBuildMode, ChangeCursor, EntityDeselected } from '../../event/LocalEvents'\nimport { BuildingSite } from '../../game/model/building/BuildingSite'\nimport { Barrier } from '../../game/model/collect/Barrier'\nimport { EntityType } from '../../game/model/EntityType'\nimport { FulfillerEntity } from '../../game/model/FulfillerEntity'\nimport { GameState } from '../../game/model/GameState'\nimport { Job } from '../../game/model/job/Job'\nimport { MoveJob } from '../../game/model/job/MoveJob'\nimport { Surface } from '../../game/model/map/Surface'\nimport { SurfaceType } from '../../game/model/map/SurfaceType'\nimport { Raider } from '../../game/model/raider/Raider'\nimport { SelectionType } from '../../game/model/Selectable'\nimport { WorldManager } from '../../game/WorldManager'\nimport { DEV_MODE } from '../../params'\nimport { Cursors } from '../Cursors'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class GameLayer extends ScreenLayer {\n\n    private worldMgr: WorldManager\n    private rightDown: { x: number, y: number } = {x: 0, y: 0}\n    private lastCursor: Cursors = Cursors.Pointer_Standard\n\n    constructor() {\n        super(false, false)\n    }\n\n    reset() {\n        super.reset()\n        this.rightDown = {x: 0, y: 0}\n        this.lastCursor = Cursors.Pointer_Standard\n    }\n\n    hide() {\n        super.hide()\n        EventBus.publishEvent(new ChangeCursor(Cursors.Pointer_Standard))\n    }\n\n    setWorldManager(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        const buildMarker = this.worldMgr.sceneManager.buildMarker\n        if (event.eventEnum === POINTER_EVENT.MOVE) {\n            const intersectionPoint = this.getTerrainPositionFromEvent(event)\n            if (intersectionPoint) this.worldMgr.setTorchPosition(intersectionPoint)\n            buildMarker.update(this.worldMgr.sceneManager.terrain, intersectionPoint)\n            this.updateCursor(event)\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                if (GameState.buildModeSelection && buildMarker.lastCheck) {\n                    buildMarker.visibleSurfaces.forEach((s) => {\n                        s.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                        s.updateTexture()\n                        s.neighbors.forEach((n) => n.updateTexture())\n                    })\n                    const barrierLocations = buildMarker.getBarrierLocations()\n                    const stats = GameState.buildModeSelection.stats\n                    const neededCrystals = stats?.CostCrystal || 0\n                    const neededOre = stats?.CostOre || 0\n                    const site = new BuildingSite(buildMarker.primarySurface, buildMarker.secondarySurface, GameState.buildModeSelection)\n                    site.heading = buildMarker.heading\n                    site.neededByType.set(EntityType.BARRIER, barrierLocations.length)\n                    site.neededByType.set(EntityType.CRYSTAL, neededCrystals)\n                    site.neededByType.set(EntityType.ORE, neededOre)\n                    GameState.buildingSites.push(site)\n                    const closestToolstation = GameState.getClosestBuildingByType(buildMarker.primarySurface.getCenterWorld(), EntityType.TOOLSTATION)\n                    if (closestToolstation) {\n                        closestToolstation.spawnMaterials(barrierLocations.map((t) => new Barrier(t, site)))\n                        closestToolstation.spawnMaterials(GameState.dropMaterial(EntityType.CRYSTAL, neededCrystals))\n                        closestToolstation.spawnMaterials(GameState.dropMaterial(EntityType.ORE, neededOre))\n                    }\n                    EventBus.publishEvent(new EntityDeselected())\n                    EventBus.publishEvent(new CancelBuildMode())\n                }\n            } else if (event.button === MOUSE_BUTTON.SECONDARY) {\n                const downUpDistance = Math.abs(event.clientX - this.rightDown.x) + Math.abs(event.clientY - this.rightDown.y)\n                if (downUpDistance < 3 && (GameState.selectionType === SelectionType.RAIDER || GameState.selectionType === SelectionType.GROUP)) {\n                    // TODO check for collectable entity first\n                    const intersectionPoint = this.getTerrainPositionFromEvent(event)\n                    if (intersectionPoint) {\n                        const surface = this.worldMgr.sceneManager.terrain.getSurfaceFromWorldXZ(intersectionPoint.x, intersectionPoint.y)\n                        if (surface) {\n                            if (surface.isDrillable()) {\n                                this.assignSurfaceJob(surface.createDrillJob(), surface, intersectionPoint)\n                            } else if (surface.hasRubble()) {\n                                this.assignSurfaceJob(surface.createClearRubbleJob(), surface, intersectionPoint)\n                            } else if (surface.isWalkable()) {\n                                GameState.selectedEntities.forEach((raider: Raider) => raider.setJob(new MoveJob(intersectionPoint)))\n                                if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n                            }\n                        }\n                    }\n                } else {\n                    GameState.buildModeSelection = null\n                    buildMarker.hideAllMarker()\n                }\n            }\n        } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.SECONDARY) {\n                this.rightDown.x = event.clientX\n                this.rightDown.y = event.clientY\n            }\n        }\n        this.canvas.dispatchEvent(new PointerEvent(event.type, event))\n        return true\n    }\n\n    updateCursor(event) {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.worldMgr.sceneManager.camera)\n        const cursor = this.determineCursor(raycaster)\n        if (cursor !== this.lastCursor) {\n            this.lastCursor = cursor\n            EventBus.publishEvent(new ChangeCursor(cursor))\n        }\n    }\n\n    determineCursor(raycaster: Raycaster): Cursors {\n        let intersects = raycaster.intersectObjects(GameState.raiders.map((r) => r.pickSphere))\n        if (intersects.length > 0) {\n            return Cursors.Pointer_Selected\n        } else {\n            let intersects = raycaster.intersectObjects(GameState.buildings.map((b) => b.pickSphere))\n            if (intersects.length > 0) {\n                return Cursors.Pointer_Selected\n            } else {\n                intersects = raycaster.intersectObjects(this.worldMgr.sceneManager.terrain.floorGroup.children)\n                if (intersects.length > 0) {\n                    const userData = intersects[0].object.userData\n                    if (userData && userData.hasOwnProperty('surface')) {\n                        const surface = userData['surface'] as Surface\n                        if (surface) {\n                            return surface.surfaceType.cursor\n                        }\n                    }\n                }\n            }\n        }\n        return Cursors.Pointer_Standard\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): boolean {\n        if (DEV_MODE && event.eventEnum === KEY_EVENT.UP) {\n            if (GameState.selectionType === SelectionType.SURFACE) {\n                GameState.selectedEntities.forEach((s: Surface) => {\n                    if (event.key === 'c') {\n                        if (!s.surfaceType.floor) s.collapse()\n                    } else if (event.key === 'f') {\n                        const t = s.terrain.findFallInTarget(s.x, s.y)\n                        if (!s.surfaceType.floor) s.createFallin(t[0], t[1])\n                    }\n                })\n                EventBus.publishEvent(new EntityDeselected())\n                return true\n            }\n        }\n        return false\n    }\n\n    assignSurfaceJob(job: Job, surface: Surface, intersectionPoint: Vector2) {\n        if (!job) return\n        GameState.selectedEntities.forEach((e: FulfillerEntity) => {\n            if (e.hasTool(job.getRequiredTool()) && e.hasTraining(job.getRequiredTraining())) {\n                e.setJob(job)\n            } else if (surface.isWalkable()) {\n                e.setJob(new MoveJob(intersectionPoint))\n            }\n        })\n        if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n    }\n\n    getTerrainPositionFromEvent(event): Vector2 {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        const intersectionPoint = this.worldMgr.getTerrainIntersectionPoint(rx, ry)\n        return intersectionPoint ? new Vector2(intersectionPoint.x, intersectionPoint.z) : null\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        this.canvas.dispatchEvent(new WheelEvent(event.type, event))\n        return true\n    }\n\n}\n","export class BaseConfig {\n\n    static setFromCfg(config: BaseConfig, cfgObj: any) {\n        Object.keys(cfgObj).forEach((cfgKey) => {\n            const lCfgKeyName = (cfgKey.startsWith('!') ? cfgKey.substring(1) : cfgKey)\n                .toLowerCase()\n                .replace(/_/g, '') // Activity_Stand\n                .replace(/-/g, '') // Geo-dome\n            const found = Object.keys(config).some((objKey) => {\n                return config.assignValue(objKey, lCfgKeyName, cfgObj[cfgKey])\n            })\n            if (!found) {\n                console.warn('cfg key does not exist: ' + cfgKey)\n            }\n        })\n        return config\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            const currentValue = this[objKey]\n            const currentIsArray = Array.isArray(currentValue)\n            let parsedValue = this.parseValue(lCfgKeyName, cfgValue)\n            const parsedIsArray = Array.isArray(parsedValue)\n            if (currentValue && currentIsArray !== parsedIsArray) {\n                if (currentIsArray) {\n                    parsedValue = [parsedValue]\n                    // } else {\n                    //     console.warn('Array overwrite conflict for key ' + objKey + ' with existing value (' + currentValue + ') and new value (' + parsedValue + ')')\n                }\n            }\n            this[objKey] = parsedValue\n            return true\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return cfgValue\n    }\n\n}\n","export class BaseButtonCfg {\n\n    buttonType?: string = null\n    normalFile?: string = null\n    highlightFile?: string = null\n    pressedFile?: string = null\n    disabledFile?: string = null\n    relX?: number = 0\n    relY?: number = 0\n    width?: number = 0\n    height?: number = 0\n    tooltip?: string = null\n}\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class ButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 9) {\n            [this.buttonType, this.normalFile, this.highlightFile, this.pressedFile, this.relX, this.relY, this.width, this.height, this.tooltip] = cfgValue\n        } else {\n            throw 'Invalid number of arguments (' + cfgValue.length + ') given for button configuration expected 9 or 5'\n        }\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class ButtonInfoDockCfg extends BaseConfig {\n\n    panelButtonInfoDockGoto: ButtonCfg = null\n    panelButtonInfoDockClose: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","export class BaseElement {\n\n    parent: BaseElement = null\n    x: number = 0\n    y: number = 0\n    relX: number = 0\n    relY: number = 0\n    width: number = 0\n    height: number = 0\n    children: BaseElement[] = []\n    hidden: boolean = false\n    disabled: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n\n    constructor(parent: BaseElement = null) {\n        this.parent = parent\n    }\n\n    reset() {\n        this.hidden = false\n        this.disabled = false\n        this.hover = false\n        this.pressed = false\n        this.children.forEach((c) => c.reset())\n    }\n\n    addChild<T extends BaseElement>(child: T): T {\n        child.parent = this\n        this.children.push(child)\n        child.updatePosition()\n        return child\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n    }\n\n    drawTooltip(context: CanvasRenderingContext2D) {\n    }\n\n    onClick() {\n    }\n\n    isInactive(): boolean {\n        for (let parent = this.parent; !!parent; parent = parent.parent) if (parent.isInactive()) return true\n        return this.hidden || this.disabled\n    }\n\n    hide() {\n        this.hidden = true\n        this.children.forEach((child) => child.hide())\n    }\n\n    show() {\n        this.hidden = false\n        this.children.forEach((child) => child.show())\n    }\n\n    updatePosition() {\n        this.x = this.parent ? this.parent.x + this.relX : this.relX\n        this.y = this.parent ? this.parent.y + this.relY : this.relY\n        this.children.forEach((child) => child.updatePosition())\n    }\n\n    isInRect(cx, cy) {\n        return cx >= this.x && cy >= this.y && cx < this.x + this.width && cy < this.y + this.height\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = this.pressed && this.hover\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => stateChanged = child.checkHover(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.pressed !== inRect\n        this.pressed = inRect\n        this.children.forEach((child) => stateChanged = child.checkClick(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        if (inRect && this.pressed) this.onClick()\n        let stateChanged = false\n        this.children.forEach((child) => stateChanged = child.checkRelease(cx, cy) || stateChanged)\n        stateChanged = this.pressed || stateChanged\n        this.pressed = false\n        return stateChanged\n    }\n\n    release(): boolean {\n        let stateChanged = this.pressed || this.hover\n        this.pressed = false\n        this.hover = false\n        this.children.forEach((child) => stateChanged = child.release() || stateChanged)\n        return stateChanged\n    }\n\n    notifyRedraw() {\n        if (this.parent) this.parent.notifyRedraw()\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\n\nexport class Button extends BaseElement {\n\n    buttonType: string = null\n    imgNormal: HTMLCanvasElement = null\n    imgHover: HTMLCanvasElement = null\n    imgPressed: HTMLCanvasElement = null\n    imgDisabled: HTMLCanvasElement = null\n    tooltip: string = null\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent)\n        this.buttonType = btnCfg.buttonType\n        this.imgNormal = ResourceManager.getImageOrNull(btnCfg.normalFile)\n        this.imgHover = ResourceManager.getImageOrNull(btnCfg.highlightFile)\n        this.imgPressed = ResourceManager.getImageOrNull(btnCfg.pressedFile)\n        this.imgDisabled = ResourceManager.getImageOrNull(btnCfg.disabledFile)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width || this.imgNormal?.width || this.imgPressed?.width\n        this.height = btnCfg.height || this.imgNormal?.height || this.imgPressed?.height\n        this.tooltip = btnCfg.tooltip?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.updatePosition()\n    }\n\n    onClick() {\n        console.log('button pressed: ' + this.buttonType)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled || this.imgPressed || this.imgNormal\n        } else if (this.pressed) {\n            img = this.imgPressed || this.imgNormal\n        } else if (this.hover) {\n            img = this.imgHover || this.imgNormal\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { NATIVE_FRAMERATE, PANEL_ANIMATION_MULTIPLIER } from '../../params'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\n\nexport class Panel extends BaseElement {\n\n    img: HTMLCanvasElement = null\n    xOut: number = 0\n    yOut: number = 0\n    xIn: number = 0\n    yIn: number = 0\n    animationTimeout = null\n    movedIn: boolean = true // xIn, yIn is the collapsed position out of screen\n\n    constructor(panelCfg?: PanelCfg) {\n        super()\n        if (panelCfg) {\n            this.img = ResourceManager.getImage(panelCfg.filename)\n            this.xOut = panelCfg.xOut\n            this.yOut = panelCfg.yOut\n            this.xIn = panelCfg.xIn\n            this.yIn = panelCfg.yIn\n            this.relX = this.xIn\n            this.relY = this.yIn\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.relX = this.xIn\n        this.relY = this.yIn\n        this.movedIn = true\n        this.updatePosition()\n    }\n\n    isInactive(): boolean {\n        return this.animationTimeout || super.isInactive()\n    }\n\n    setMovedIn(movedIn: boolean, onDone: () => any = null) {\n        if (this.movedIn !== movedIn) {\n            this.toggleState(onDone)\n        } else if (onDone) {\n            onDone()\n        }\n    }\n\n    toggleState(onDone: () => any = null) {\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        if (this.movedIn) {\n            this.movedIn = false\n            this.updateAnimation(this.xOut, this.yOut, PANEL_ANIMATION_MULTIPLIER, onDone)\n        } else {\n            this.movedIn = true\n            this.updateAnimation(this.xIn, this.yIn, PANEL_ANIMATION_MULTIPLIER, onDone)\n        }\n    }\n\n    protected updateAnimation(targetX: number, targetY: number, speed: number, onDone: () => any) {\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= speed && Math.abs(diffY) <= speed) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * speed)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * speed)\n            const panel = this\n            this.animationTimeout = setTimeout(() => panel.updateAnimation(targetX, targetY, speed, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.img) context.drawImage(this.img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { PanelCfg } from '../../cfg/PanelCfg'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\n\nexport class RadarPanel extends Panel {\n\n    fill: Panel\n    overlay: Panel\n    btnToggle: Button\n    btnMap: Button\n    btnTagged: Button\n\n    constructor(panelCfg: PanelCfg, panelFillCfg: PanelCfg, panelOverlayCfg: PanelCfg, buttonsCfg: ButtonRadarCfg) {\n        super(panelCfg)\n        this.fill = this.addChild(new Panel(panelFillCfg))\n        // fill cords given in abs, turn to rel (otherwise animation wont work)\n        this.fill.relX = this.relX - this.fill.relX\n        this.fill.relY = this.relY - this.fill.relY\n        this.overlay = this.addChild(new Panel(panelOverlayCfg))\n        // this.overlay.hide();\n        this.btnToggle = this.addChild(new Button(this, buttonsCfg.panelButtonRadarToggle))\n        this.btnToggle.onClick = () => this.toggleState()\n        this.btnMap = this.addChild(new Button(this, buttonsCfg.panelButtonRadarMapView))\n        this.btnMap.onClick = () => {\n            // this.fill.hide();\n            // this.overlay.hide();\n        }\n        this.btnTagged = this.addChild(new Button(this, buttonsCfg.panelButtonRadarTaggedObjectView))\n        this.btnTagged.onClick = () => {\n            // this.fill.show();\n            // this.overlay.show(); // TODO only show overlay, when entity selected\n        }\n    }\n\n}\n\nexport class ButtonRadarCfg extends BaseConfig {\n\n    panelButtonRadarToggle: ButtonCfg = null\n    panelButtonRadarTaggedObjectView: ButtonCfg = null\n    panelButtonRadarZoomIn: ButtonCfg = null\n    panelButtonRadarZoomOut: ButtonCfg = null\n    panelButtonRadarMapView: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { BaseElement } from '../base/BaseElement'\n\nexport class SideBarLabel extends BaseElement {\n\n    tooltip: string\n    label: string\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg, label: string) {\n        super(parent)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width\n        this.height = btnCfg.height\n        this.tooltip = btnCfg.tooltip\n        this.label = label\n        this.updatePosition()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.textAlign = 'center'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.label, this.x + this.width / 2, this.y + this.height - 2)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { PanelCfg } from '../../cfg/PanelCfg'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\nimport { SideBarLabel } from './SideBarLabel'\n\nexport class PanelCrystalSideBar extends Panel {\n\n    labelOre: SideBarLabel\n    labelCrystal: SideBarLabel\n    imgNoCrystal: HTMLCanvasElement\n    imgSmallCrystal: HTMLCanvasElement\n    imgUsedCrystal: HTMLCanvasElement\n    imgOre: HTMLCanvasElement\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonCrystalSideBarCfg) {\n        super(panelCfg)\n        this.labelOre = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarOre, GameState.totalOre.toString()))\n        this.labelCrystal = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarCrystals, GameState.numCrystal.toString()))\n        this.imgNoCrystal = ResourceManager.getImage('Interface/RightPanel/NoSmallCrystal.bmp')\n        this.imgSmallCrystal = ResourceManager.getImage('Interface/RightPanel/SmallCrystal.bmp')\n        this.imgUsedCrystal = ResourceManager.getImage('Interface/RightPanel/UsedCrystal.bmp')\n        this.imgOre = ResourceManager.getImage('Interface/RightPanel/CrystalSideBar_Ore.bmp')\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, (event: MaterialAmountChanged) => {\n            this.updateQuantities(event.entityType)\n        })\n    }\n\n    updateQuantities(type: EntityType) {\n        if (type === EntityType.CRYSTAL || type === EntityType.ORE || type === EntityType.BRICK) {\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        this.labelOre.label = GameState.totalOre.toString()\n        this.labelCrystal.label = GameState.numCrystal.toString()\n        super.onRedraw(context)\n        // draw crystals\n        let curX = this.x + this.img.width - 8\n        let curY = this.y + this.img.height - 34\n        for (let c = 0; (GameState.neededCrystals < 1 || c < Math.max(GameState.neededCrystals, GameState.numCrystal)) && curY >= Math.max(this.imgNoCrystal.height, this.imgSmallCrystal.height, this.imgUsedCrystal.height); c++) {\n            let imgCrystal = this.imgNoCrystal\n            if (GameState.usedCrystals > c) {\n                imgCrystal = this.imgUsedCrystal\n            } else if (GameState.numCrystal > c) {\n                imgCrystal = this.imgSmallCrystal\n            }\n            curY -= imgCrystal.height\n            context.drawImage(imgCrystal, curX - imgCrystal.width / 2, curY)\n        }\n        // draw ores\n        curX = this.x + this.img.width - 21\n        curY = this.y + this.img.height - 42\n        for (let i = 0; i < GameState.numOre && curY >= this.imgOre.height; ++i) {\n            curY -= this.imgOre.height\n            context.drawImage(this.imgOre, curX - this.imgOre.width / 2, curY)\n        }\n    }\n\n}\n\nexport class ButtonCrystalSideBarCfg extends BaseConfig {\n\n    panelButtonCrystalSideBarOre: ButtonCfg = null\n    panelButtonCrystalSideBarCrystals: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class ButtonPriorityListCfg extends BaseConfig {\n\n    panelButtonPriorityListDisable: ButtonCfg[] = []\n    panelButtonPriorityListUpOne: ButtonCfg[] = []\n    panelButtonPriorityListClose: ButtonCfg = null // not used in the game\n    panelButtonPriorityListReset: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName.match(/panelButtonPriorityListDisable\\d+/i)) {\n            this.panelButtonPriorityListDisable.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else if (lCfgKeyName.match(/panelButtonPriorityListUpOne\\d+/i)) {\n            this.panelButtonPriorityListUpOne.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else {\n            return super.assignValue(objKey, lCfgKeyName, cfgValue)\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class ButtonTopCfg extends BaseConfig {\n\n    panelButtonTopPanelCallToArms: ButtonCfg = null\n    panelButtonTopPanelOptions: ButtonCfg = null\n    panelButtonTopPanelPriorities: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ButtonCfg } from './ButtonCfg'\n\nexport class ButtonCameraControlCfg extends BaseConfig {\n\n    panelButtonCameraControlZoomIn: ButtonCfg = null\n    panelButtonCameraControlZoomOut: ButtonCfg = null\n    panelButtonCameraControlCycleBuildings: ButtonCfg = null\n    panelButtonCameraControlRotate: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ButtonCfg } from './ButtonCfg'\n\nexport class ButtonInformationCfg extends BaseConfig {\n\n    panelButtonInformationToggle: ButtonCfg = null\n    panelButtonInformationFunction: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { ButtonInfoDockCfg } from '../gui/infodock/ButtonInfoDockCfg'\nimport { ButtonRadarCfg } from '../gui/radar/RadarPanel'\nimport { ButtonCrystalSideBarCfg } from '../gui/sidebar/PanelCrystalSideBar'\nimport { ButtonPriorityListCfg } from '../gui/toppanel/ButtonPriorityListCfg'\nimport { ButtonTopCfg } from '../gui/toppanel/ButtonTopCfg'\nimport { BaseConfig } from './BaseConfig'\nimport { ButtonCameraControlCfg } from './ButtonCameraControlCfg'\nimport { ButtonInformationCfg } from './ButtonInformationCfg'\n\nexport class ButtonsCfg extends BaseConfig {\n\n    panelRadar: ButtonRadarCfg = null\n    panelCrystalSideBar: ButtonCrystalSideBarCfg = null\n    panelTopPanel: ButtonTopCfg = null\n    panelInformation: ButtonInformationCfg = null\n    panelPriorityList: ButtonPriorityListCfg = null\n    panelCameraControl: ButtonCameraControlCfg = null\n    panelInfoDock: ButtonInfoDockCfg = null\n    panelEncyclopedia: any = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        const btnCfgValue = {}\n        cfgValue.forEach(arr => btnCfgValue[arr[0]] = arr)\n        if (lCfgKeyName === 'panelRadar'.toLowerCase()) {\n            return new ButtonRadarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCrystalSideBar'.toLowerCase()) {\n            return new ButtonCrystalSideBarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelTopPanel'.toLowerCase()) {\n            return new ButtonTopCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInformation'.toLowerCase()) {\n            return new ButtonInformationCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelPriorityList'.toLowerCase()) {\n            return new ButtonPriorityListCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCameraControl'.toLowerCase()) {\n            return new ButtonCameraControlCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInfoDock'.toLowerCase()) {\n            return new ButtonInfoDockCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelEncyclopedia'.toLowerCase()) {\n            return null // not used in the game\n        } else {\n            return btnCfgValue\n        }\n    }\n\n}\n","export class PanelCfg {\n\n    filename: string\n    xOut: number\n    yOut: number\n    xIn: number\n    yIn: number\n\n    constructor(cfgValue: any) {\n        [this.filename, this.xOut, this.yOut, this.xIn, this.yIn] = cfgValue\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { PanelCfg } from './PanelCfg'\n\nexport class PanelsCfg extends BaseConfig {\n\n    panelRadar: PanelCfg = null\n    panelRadarFill: PanelCfg = null\n    panelRadarOverlay: PanelCfg = null\n    panelMessages: PanelCfg = null\n    panelMessagesSide: PanelCfg = null\n    panelCrystalSideBar: PanelCfg = null\n    panelTopPanel: PanelCfg = null\n    panelInformation: PanelCfg = null\n    panelPriorityList: PanelCfg = null\n    panelCameraControl: PanelCfg = null\n    panelInfoDock: PanelCfg = null\n    panelEncyclopedia: PanelCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new PanelCfg(cfgValue)\n    }\n}\n\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class InfoButtonCfg extends BaseButtonCfg {\n\n    constructor(buttonImageFilename: string) {\n        super()\n        this.normalFile = buttonImageFilename\n        this.highlightFile = buttonImageFilename\n        this.pressedFile = buttonImageFilename\n        this.disabledFile = buttonImageFilename\n        this.relX = 0\n        this.relY = 0\n    }\n\n}\n","import { InfoButtonCfg } from '../../cfg/InfoButtonCfg'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { WorldEvent } from '../../event/WorldEvents'\nimport { WorldLocationEvent } from '../../event/WorldLocationEvent'\nimport { NATIVE_FRAMERATE } from '../../params'\nimport { Button } from '../base/Button'\nimport { InfoDockPanel } from './InfoDockPanel'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\n\nexport class InfoDockButton extends Button {\n\n    messages: WorldEvent[] = [] // newest message first\n    text: string = null\n    animationTimeout = null\n    animationSpeedX = 0.5\n    animationSpeedY = 1\n\n    constructor(parent: InfoDockPanel, infoMessagesEntryConfig: InfoMessagesEntryConfig, eventKey: EventKey) {\n        super(parent, new InfoButtonCfg(infoMessagesEntryConfig.buttonImageFilename))\n        this.text = infoMessagesEntryConfig.message\n        this.hidden = true\n\n        this.onClick = () => {\n            if (this.messages.length < 1) return\n            parent.buttonClicked(this)\n        }\n\n        EventBus.registerEventListener(eventKey, (event: WorldLocationEvent) => {\n            this.hidden = false\n            while (this.messages.length >= 9) this.messages.pop()\n            this.messages.unshift(event)\n            parent.showButton(this)\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.text = null\n        this.hidden = true\n        this.messages = []\n    }\n\n    slideToTarget(targetX: number, targetY: number): Promise<void> {\n        return new Promise<void>((resolve) => this.updateAnimation(targetX, targetY, resolve))\n    }\n\n    private updateAnimation(targetX: number, targetY: number, onDone: () => any) { // TODO refactor: almost equal with code for Panel\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= this.animationSpeedX && Math.abs(diffY) <= this.animationSpeedY) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * this.animationSpeedX)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * this.animationSpeedY)\n            const that = this\n            this.animationTimeout = setTimeout(() => that.updateAnimation(targetX, targetY, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.hidden) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.messages.length.toString(), this.x + 2, this.y + this.height / 2 + 2)\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { LandslideEvent } from '../../event/WorldLocationEvent'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { ButtonInfoDockCfg } from './ButtonInfoDockCfg'\nimport { InfoDockButton } from './InfoDockButton'\nimport { InfoMessagesConfig } from './InfoMessagesConfig'\nimport { InformationPanel } from './InformationPanel'\n\nexport class InfoDockPanel extends Panel {\n\n    stackButtons: InfoDockButton[] = []\n    informationPanel: InformationPanel = null\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonInfoDockCfg, infoMessagesConfig: InfoMessagesConfig, informationPanel: InformationPanel) {\n        super(panelCfg)\n        this.informationPanel = informationPanel\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockGoto)).onClick = () => this.gotoLatestMessage()\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockClose)).onClick = () => this.dropLatestMessage()\n\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericDeath, EventKey.LOCATION_DEATH))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericMonster, EventKey.LOCATION_MONSTER))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoCrystalFound, EventKey.LOCATION_CRYSTAL_FOUND))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoUnderAttack, EventKey.LOCATION_UNDER_ATTACK))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoLandslide, EventKey.LOCATION_LANDSLIDE))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoPowerDrain, EventKey.LOCATION_POWER_DRAIN))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoSlugEmerge, EventKey.LOCATION_SLUG_EMERGE))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoFoundMinifigure, EventKey.LOCATION_RAIDER_DISCOVERED))\n    }\n\n    reset() {\n        super.reset()\n        this.stackButtons = []\n    }\n\n    private gotoLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const btn = this.stackButtons[0]\n        if (btn.messages.length < 1) return\n        const msg = btn.messages[0] as LandslideEvent\n        console.log('TODO force move camera to: ' + msg.location.toArray()) // TODO force move camera\n    }\n\n    private dropLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const button = this.stackButtons[0]\n        if (button.messages.length < 1) return\n        button.messages.shift()\n        if (button.messages.length < 1) {\n            button.hidden = true\n            this.informationPanel.setMovedIn(true)\n            this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n            this.slideStackIntoPosition().then()\n        }\n        button.notifyRedraw()\n    }\n\n    showButton(button: InfoDockButton) {\n        if (this.stackButtons.includes(button)) {\n            button.notifyRedraw()\n        } else {\n            this.slideInButton(button)\n        }\n    }\n\n    private slideInButton(button: InfoDockButton) {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        const targetY = -this.stackButtons.map(b => b.height).reduce((prev, cur) => prev + cur, 0)\n        this.stackButtons.push(button)\n        button.relX = -button.width\n        button.relY = targetY - button.height\n        button.updatePosition()\n        button.slideToTarget(0, targetY).then(() => this.stackButtons.forEach(btn => btn.disabled = false))\n    }\n\n    buttonClicked(button: InfoDockButton) {\n        if (button !== this.stackButtons[0]) {\n            this.pushFirst(button)\n        } else {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.toggleState()\n        }\n    }\n\n    private pushFirst(button: InfoDockButton) {\n        this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n        this.stackButtons.unshift(button)\n        this.slideStackIntoPosition().then(() => {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.setMovedIn(false)\n        })\n    }\n\n    private slideStackIntoPosition() {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        let relY = 0\n        const promises = this.stackButtons.map(btn => {\n            const p = btn.slideToTarget(0, relY)\n            relY -= btn.height\n            return p\n        })\n        return new Promise<void>((resolve) => {\n            Promise.all(promises).then(() => {\n                this.stackButtons.forEach(btn => btn.disabled = false)\n                resolve()\n            })\n        })\n    }\n\n}\n\n","export class InfoMessagesEntryConfig {\n\n    message: string = null\n    buttonImageFilename: string = null\n    sfx: string = null\n    timing: string = null\n    flag: string = null\n\n    constructor(cfgValue: any) {\n        [this.message, this.buttonImageFilename, this.sfx, this.timing, this.flag] = cfgValue\n        this.message = this.message.replace(/_/g, ' ')\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\n\nexport class InfoMessagesConfig extends BaseConfig {\n\n    infoGenericDeath: InfoMessagesEntryConfig = null\n    infoGenericMonster: InfoMessagesEntryConfig = null\n    infoCrystalFound: InfoMessagesEntryConfig = null\n    infoUnderAttack: InfoMessagesEntryConfig = null\n    infoLandslide: InfoMessagesEntryConfig = null\n    infoPowerDrain: InfoMessagesEntryConfig = null\n    infoSlugEmerge: InfoMessagesEntryConfig = null\n    infoFoundMinifigure: InfoMessagesEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new InfoMessagesEntryConfig(cfgValue)\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { BitmapFont } from '../../core/BitmapFont'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\n\nexport class InformationPanel extends Panel {\n\n    font: BitmapFont = null\n    textImage = null\n\n    constructor(panelCfg: PanelCfg) {\n        super(panelCfg)\n        this.font = ResourceManager.getDefaultFont()\n    }\n\n    setText(text?: string) {\n        this.textImage = text ? this.font.createTextImage(text, this.img.width - 80) : null\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.textImage) context.drawImage(this.textImage, this.x + (this.img.width - this.textImage.width) / 2, this.y + 12)\n    }\n\n}\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class IconPanelBackButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super();\n        [this.width, this.height, this.highlightFile, this.pressedFile, this.tooltip] = cfgValue // Interface back button\n        this.relX = 4\n        this.relY = 14\n    }\n\n}\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class MenuItemCfg extends BaseButtonCfg {\n\n    tooltipSfx: string = null\n    tooltipDisabled: string = null\n    tooltipDisabledSfx: string = null\n    hotkey: string = null\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 4) {\n            [this.normalFile, this.disabledFile, this.pressedFile, this.hotkey] = cfgValue\n        } else if (cfgValue.length === 6 || cfgValue.length === 7) { // XXX 7th element is boolean, but usage unknown\n            let tooltip, tooltipDisabled\n            [this.normalFile, this.disabledFile, this.pressedFile, tooltip, tooltipDisabled, this.hotkey] = cfgValue\n            if (tooltip) {\n                if (Array.isArray(tooltip)) {\n                    [this.tooltip, this.tooltipSfx] = tooltip\n                } else {\n                    this.tooltip = tooltip\n                }\n            }\n            if (tooltipDisabled) {\n                if (Array.isArray(tooltipDisabled)) {\n                    [this.tooltipDisabled, this.tooltipDisabledSfx] = tooltipDisabled\n                } else {\n                    this.tooltipDisabled = tooltipDisabled\n                }\n            }\n        } else {\n            console.error('Unexpected menu item cfg value length: ' + cfgValue.length)\n        }\n        this.tooltip?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.tooltipDisabled?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.width = 40\n        this.height = 40\n    }\n\n}\n","import { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\n\nexport class IconPanelButton extends Button {\n\n    tooltipSfx: string = null\n    tooltipDisabled: string = null\n    tooltipDisabledSfx: string = null\n    hotkey: string = null\n    isDisabled: () => boolean = () => this.disabled\n\n    constructor(parent: BaseElement, menuItemCfg: MenuItemCfg, itemKey: string, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemCfg)\n        this.buttonType = itemKey\n        this.relX = parentWidth - 59\n        this.relY = 9 + this.height * menuIndex\n        this.tooltipSfx = menuItemCfg.tooltipSfx\n        this.tooltipDisabled = menuItemCfg.tooltipDisabled\n        this.tooltipDisabledSfx = menuItemCfg.tooltipDisabledSfx\n        this.hotkey = menuItemCfg.hotkey\n        this.disabled = true\n    }\n\n    reset() {\n        super.reset()\n        this.disabled = true\n        this.updateState(false)\n    }\n\n    onClick() {\n        console.log('menu item pressed: ' + this.buttonType)\n    }\n\n    updateState(autoRedraw: boolean = true) {\n        const targetState = !!this.isDisabled()\n        const stateChanged = this.disabled !== targetState\n        this.disabled = targetState\n        if (stateChanged && autoRedraw) this.notifyRedraw()\n        return stateChanged\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n        super.drawHover(context)\n        if (!this.disabled && this.hover) {\n            context.strokeStyle = '#0f0'\n            context.lineWidth = 2\n            context.strokeRect(this.x - context.lineWidth / 2, this.y - context.lineWidth / 2, this.width + context.lineWidth - 1, this.height + context.lineWidth - 1)\n        }\n    }\n\n}\n","import { IconPanelBackButtonCfg } from '../../cfg/IconPanelBackButtonCfg'\nimport { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class IconSubPanel extends Panel {\n\n    backBtn: Button = null\n    iconPanelButtons: IconPanelButton[] = []\n\n    constructor(numOfItems, onBackPanel: Panel = null) {\n        super()\n        if (onBackPanel) {\n            const backBtnCfg = new IconPanelBackButtonCfg(ResourceManager.cfg('InterfaceBackButton'))\n            this.backBtn = this.addChild(new Button(this, backBtnCfg))\n            this.backBtn.onClick = () => this.toggleState(() => onBackPanel.toggleState())\n        }\n        const frameImgCfg = ResourceManager.cfg('InterfaceSurroundImages', numOfItems.toString())\n        // noinspection JSUnusedLocalSymbols\n        const [imgName, val1, val2, val3, val4, imgNameWoBackName, woBack1, woBack2] = frameImgCfg\n        this.img = onBackPanel ? ResourceManager.getImage(imgName) : ResourceManager.getImage(imgNameWoBackName)\n        this.xOut = -this.img.width\n    }\n\n    addMenuItem(menuItemGroup: string, itemKey: string) {\n        const menuItemCfg = new MenuItemCfg(ResourceManager.cfg(menuItemGroup, itemKey))\n        const menuItem = this.addChild(new IconPanelButton(this, menuItemCfg, itemKey, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(menuItem)\n        return menuItem\n    }\n\n    toggleState(onDone: () => any = null) {\n        super.toggleState(onDone)\n        if (!this.movedIn) this.iconPanelButtons.forEach((button) => button.updateState())\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { CancelBuildMode } from '../../event/LocalEvents'\nimport { BuildingEntity } from '../../game/model/building/BuildingEntity'\nimport { Barracks } from '../../game/model/building/entities/Barracks'\nimport { Docks } from '../../game/model/building/entities/Docks'\nimport { Geodome } from '../../game/model/building/entities/Geodome'\nimport { GunStation } from '../../game/model/building/entities/GunStation'\nimport { OreRefinery } from '../../game/model/building/entities/OreRefinery'\nimport { PowerStation } from '../../game/model/building/entities/PowerStation'\nimport { TeleportBig } from '../../game/model/building/entities/TeleportBig'\nimport { TeleportPad } from '../../game/model/building/entities/TeleportPad'\nimport { Toolstation } from '../../game/model/building/entities/Toolstation'\nimport { Upgrade } from '../../game/model/building/entities/Upgrade'\nimport { GameState } from '../../game/model/GameState'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class BuildingPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        this.backBtn.onClick = () => {\n            EventBus.publishEvent(new CancelBuildMode())\n            this.toggleState(() => onBackPanel.toggleState())\n        }\n        this.addBuildMenuItem('InterfaceBuildImages', 'Toolstation', () => new Toolstation())\n        this.addBuildMenuItem('InterfaceBuildImages', 'TeleportPad', () => new TeleportPad())\n        this.addBuildMenuItem('InterfaceBuildImages', 'Docks', () => new Docks())\n        this.addBuildMenuItem('InterfaceBuildImages', 'Powerstation', () => new PowerStation())\n        this.addBuildMenuItem('InterfaceBuildImages', 'Barracks', () => new Barracks())\n        this.addBuildMenuItem('InterfaceBuildImages', 'Upgrade', () => new Upgrade())\n        this.addBuildMenuItem('InterfaceBuildImages', 'Geo-dome', () => new Geodome())\n        this.addBuildMenuItem('InterfaceBuildImages', 'OreRefinery', () => new OreRefinery())\n        this.addBuildMenuItem('InterfaceBuildImages', 'Gunstation', () => new GunStation())\n        this.addBuildMenuItem('InterfaceBuildImages', 'TeleportBIG', () => new TeleportBig())\n    }\n\n    addBuildMenuItem(menuItemGroup: string, itemKey: string, factory: () => BuildingEntity) {\n        const item = this.addMenuItem(menuItemGroup, itemKey)\n        item.isDisabled = () => false // TODO check Dependencies from config\n        item.onClick = () => GameState.buildModeSelection = factory()\n        return item\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { GetToolJob } from '../../game/model/job/GetToolJob'\nimport { PathTarget } from '../../game/model/PathTarget'\nimport { RaiderTool } from '../../game/model/raider/RaiderTool'\nimport { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class GetToolPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(8, onBackPanel)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetDrill', RaiderTool.DRILL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpade', RaiderTool.SHOVEL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetHammer', RaiderTool.HAMMER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpanner', RaiderTool.SPANNER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetFreezerGun', RaiderTool.FREEZERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetLaser', RaiderTool.LASER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetPusherGun', RaiderTool.PUSHERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetBirdScarer', RaiderTool.BIRDSCARER)\n    }\n\n    addGetToolItem(menuItemGroup: string, itemKey: string, tool: RaiderTool): IconPanelButton {\n        const menuItem = super.addMenuItem(menuItemGroup, itemKey)\n        menuItem.isDisabled = () => !GameState.hasOneBuildingOf(EntityType.TOOLSTATION) ||\n            GameState.selectedRaiders.every((r) => r.hasTool(tool))\n        menuItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => {\n                if (!r.hasTool(tool)) {\n                    const pathToToolstation = GameState.getBuildingsByType(EntityType.TOOLSTATION)\n                        .map((b) => r.findPathToTarget(new PathTarget(b.getPosition2D())))\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToToolstation) {\n                        r.setJob(new GetToolJob(pathToToolstation.targetPosition, tool)) // TODO use precalculated path to toolstation\n                    }\n                }\n            })\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        return menuItem\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { GameState } from '../../game/model/GameState'\nimport { BaseElement } from '../base/BaseElement'\n\nexport class IconPanelButtonLabel extends BaseElement {\n\n    constructor(parent: BaseElement) {\n        super(parent)\n        this.relX = 4\n        this.relY = 11\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => this.notifyRedraw())\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        const requestedRaiders = GameState.requestedRaiders\n        if (!requestedRaiders) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = this.disabled || (this.parent && this.parent.disabled) ? '#444' : '#fff'\n        context.fillText(requestedRaiders.toString(), this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class LargeVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(5, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'BullDozer')\n        this.addMenuItem('InterfaceBuildImages', 'WalkerDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeMLP')\n        this.addMenuItem('InterfaceBuildImages', 'LargeDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeCat')\n    }\n\n}\n","import { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { BaseElement } from '../base/BaseElement'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class IconPanelToggleButton extends IconPanelButton {\n\n    toggleState: boolean = false\n    imgOnNormal: HTMLCanvasElement\n    imgOnHover: HTMLCanvasElement\n    imgOnPressed: HTMLCanvasElement\n    imgOnDisabled: HTMLCanvasElement\n\n    constructor(parent: BaseElement, menuItemOffCfg: MenuItemCfg, menuItemOnCfg: MenuItemCfg, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemOffCfg, null, parentWidth, menuIndex)\n        this.imgOnNormal = ResourceManager.getImageOrNull(menuItemOnCfg.normalFile)\n        this.imgOnHover = ResourceManager.getImageOrNull(menuItemOnCfg.highlightFile)\n        this.imgOnPressed = ResourceManager.getImageOrNull(menuItemOnCfg.pressedFile)\n        this.imgOnDisabled = ResourceManager.getImageOrNull(menuItemOnCfg.disabledFile)\n    }\n\n    onClick() {\n        this.toggleState = !this.toggleState\n        this.onToggleStateChange()\n    }\n\n    onToggleStateChange() {\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.toggleState ? this.imgOnNormal : this.imgNormal\n        if (this.disabled) {\n            if (this.toggleState) {\n                img = this.imgOnDisabled || this.imgOnPressed || this.imgOnNormal\n            } else {\n                img = this.imgDisabled || this.imgPressed || this.imgNormal\n            }\n        } else if (this.pressed) {\n            if (this.toggleState) {\n                img = this.imgOnPressed || this.imgOnNormal\n            } else {\n                img = this.imgPressed || this.imgNormal\n            }\n        } else if (this.hover) {\n            if (this.toggleState) {\n                img = this.imgOnHover || this.imgOnNormal\n            } else {\n                img = this.imgHover || this.imgNormal\n            }\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class SelectBasePanel extends IconSubPanel {\n\n    constructor(numOfItems, onBackPanel: Panel) {\n        super(numOfItems, onBackPanel)\n        this.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected())\n    }\n\n}\n","import { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { GameState } from '../../game/model/GameState'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\nimport { IconPanelToggleButton } from './IconPanelToggleButton'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectBuildingPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Repair')\n\n        const menuItemOffCfg = new MenuItemCfg(ResourceManager.cfg('InterfaceImages', 'Interface_MenuItem_PowerOff'))\n        const menuItemOnCfg = new MenuItemCfg(ResourceManager.cfg('InterfaceImages', 'Interface_MenuItem_PowerOn'))\n        const powerSwitchItem = this.addChild(new IconPanelToggleButton(this, menuItemOffCfg, menuItemOnCfg, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(powerSwitchItem)\n        powerSwitchItem.isDisabled = () => GameState.usedCrystals >= GameState.numCrystal || GameState.selectedBuilding?.stats?.SelfPowered || GameState.selectedBuilding?.stats?.PowerBuilding\n        powerSwitchItem.onToggleStateChange = () => {\n            if (powerSwitchItem.toggleState) {\n                GameState.selectedBuilding?.turnOffPower()\n            } else {\n                GameState.selectedBuilding?.turnOnPower()\n            }\n        }\n        const upgradeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeBuilding')\n        upgradeItem.isDisabled = () => !GameState.selectedBuilding?.canUpgrade()\n        upgradeItem.onClick = () => GameState.selectedBuilding?.upgrade()\n        const deleteBuildingItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteBuilding')\n        deleteBuildingItem.isDisabled = () => false\n        deleteBuildingItem.onClick = () => GameState.selectedBuilding?.beamUp()\n        EventBus.registerEventListener(EventKey.SELECTED_BUILDING, () => {\n            powerSwitchItem.updateState()\n            upgradeItem.updateState()\n        })\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, () => {\n            powerSwitchItem.updateState()\n            upgradeItem.updateState()\n        })\n    }\n\n}\n","import { ElectricFence } from '../collect/ElectricFence'\nimport { CarryJob } from './CarryJob'\n\nexport class CarryFenceJob extends CarryJob<ElectricFence> {\n\n    onJobComplete() {\n        super.onJobComplete()\n        if (this.item.targetSurface.canPlaceFence()) {\n            this.item.worldMgr.sceneManager.scene.add(this.item.group)\n            this.item.targetSurface.fence = this.item\n        } // TODO else dispose item entity with mesh\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CarryFenceJob } from '../job/CarryFenceJob'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { Surface } from '../map/Surface'\nimport { CarryPathTarget } from './CarryPathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class ElectricFence extends MaterialEntity {\n\n    targetSurface: Surface\n\n    constructor(surface: Surface) {\n        super(EntityType.ELECTRIC_FENCE)\n        const resource = ResourceManager.getResource('Buildings/E-Fence/E-Fence4.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('Buildings/E-Fence/').parse(resource))\n        this.group.add(mesh)\n        this.targetSurface = surface\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityConstruction\n    }\n\n    protected updateTargets(): CarryPathTarget[] {\n        if (this.targets.length < 1) {\n            if (this.targetSurface.canPlaceFence()) {\n                this.targets = [new CarryPathTarget(this.targetSurface.getCenterWorld2D(), null, null)]\n            } else {\n                this.targets = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                    .map((b) => new CarryPathTarget(b.getDropPosition2D(), null, b))\n            }\n        } else if (!this.targetSurface.canPlaceFence() && !this.targets[0].building) {\n            this.targets = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                .map((b) => new CarryPathTarget(b.getDropPosition2D(), null, b))\n        }\n        return this.targets\n    }\n\n    createCarryJob(): CarryFenceJob {\n        return new CarryFenceJob(this)\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { BuildingSite } from '../../game/model/building/BuildingSite'\nimport { ElectricFence } from '../../game/model/collect/ElectricFence'\nimport { EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { Surface } from '../../game/model/map/Surface'\nimport { SurfaceType } from '../../game/model/map/SurfaceType'\nimport { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectFloorPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(3, onBackPanel)\n        const pathItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_LayPath')\n        pathItem.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.surfaceType = SurfaceType.POWER_PATH_SITE\n            selectedSurface.updateTexture()\n            const targetBuilding = GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), EntityType.TOOLSTATION)\n            if (targetBuilding) targetBuilding.spawnMaterials(GameState.dropMaterial(EntityType.ORE, 2))\n            const site = new BuildingSite(selectedSurface)\n            site.neededByType.set(EntityType.ORE, 2)\n            GameState.buildingSites.push(site)\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        pathItem.isDisabled = () => GameState.selectedSurface?.surfaceType !== SurfaceType.GROUND\n        const removeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_RemovePath')\n        removeItem.onClick = () => {\n            GameState.selectedSurface?.makeRubble(2)\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        removeItem.isDisabled = () => GameState.selectedSurface?.surfaceType !== SurfaceType.POWER_PATH\n        const placeFenceItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        placeFenceItem.isDisabled = () => {\n            return !GameState.hasOneBuildingOf(EntityType.POWER_STATION) || !GameState.selectedSurface?.canPlaceFence()\n        }\n        placeFenceItem.onClick = () => {\n            const selectedSurface = GameState.selectedSurface\n            if (selectedSurface) {\n                const toolstation = GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), EntityType.TOOLSTATION)\n                if (toolstation) {\n                    toolstation?.spawnMaterials([new ElectricFence(selectedSurface)])\n                }\n            }\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => {\n            pathItem.updateState()\n            removeItem.updateState()\n            placeFenceItem.updateState()\n        })\n    }\n\n}\n","import { RaiderActivity } from '../activities/RaiderActivity'\nimport { PathTarget } from '../PathTarget'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class EatJob extends Job {\n\n    constructor() {\n        super(JobType.EAT)\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.fulfiller.map((f) => new PathTarget(f.getPosition2D()))\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        // TODO implement endurance, fill eat level here\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Eat\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { GameState } from '../../game/model/GameState'\nimport { EatJob } from '../../game/model/job/EatJob'\nimport { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectRaiderPanel extends SelectBasePanel {\n\n    getToolItem: IconPanelButton\n    trainItem: IconPanelButton\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        const feedItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GoFeed')\n        feedItem.isDisabled = () => false\n        feedItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => !r.isDriving() && r.setJob(new EatJob()))\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UnLoadMinifigure')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_MinifigurePickUp')\n        this.getToolItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GetTool')\n        this.getToolItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DropBirdScarer')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeMan')\n        this.trainItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSkill')\n        this.trainItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoFirstPerson')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoSecondPerson')\n        const deleteRaiderItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteMan')\n        deleteRaiderItem.isDisabled = () => false\n        deleteRaiderItem.onClick = () => GameState.selectedRaiders.forEach((r) => r.beamUp())\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { GameState } from '../../game/model/GameState'\nimport { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectRubblePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(2, onBackPanel)\n        const clearRubbleItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_ClearRubble')\n        clearRubbleItem.onClick = () => {\n            GameState.selectedSurface?.createClearRubbleJob()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        clearRubbleItem.isDisabled = () => !GameState.selectedSurface?.hasRubble()\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => clearRubbleItem.updateState())\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectVehiclePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(7, onBackPanel)\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { Surface } from '../../game/model/map/Surface'\nimport { RaiderTraining } from '../../game/model/raider/RaiderTraining'\nimport { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectWallPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        const itemDrill = this.addWallMenuItem('Interface_MenuItem_Dig', () => GameState.selectedSurface?.createDrillJob())\n        itemDrill.isDisabled = () => !(GameState.selectedSurface?.isDrillable()) &&\n            !(GameState.selectedSurface?.isDrillableHard()) // TODO implement vehicle check for drill hard skill\n        const itemReinforce = this.addWallMenuItem('Interface_MenuItem_Reinforce', () => GameState.selectedSurface?.createReinforceJob())\n        itemReinforce.isDisabled = () => !(GameState.selectedSurface?.isReinforcable())\n        const itemDynamite = this.addWallMenuItem('Interface_MenuItem_Dynamite', () => GameState.selectedSurface?.createDynamiteJob())\n        itemDynamite.isDisabled = () => !GameState.hasBuildingWithUpgrades(EntityType.TOOLSTATION, 2) &&\n            !GameState.raiders.some((r) => r.hasTraining(RaiderTraining.DEMOLITION))\n        const itemDeselect = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeselectDig')\n        itemDeselect.isDisabled = () => false\n        itemDeselect.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.cancelJobs()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => {\n            itemDrill.updateState(false)\n            itemReinforce.updateState(false)\n            itemDynamite.updateState(false)\n            this.notifyRedraw()\n        })\n    }\n\n    addWallMenuItem(itemKey: string, callback: () => any): IconPanelButton {\n        const item = this.addMenuItem('InterfaceImages', itemKey)\n        item.onClick = () => {\n            callback()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        return item\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class SmallVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Hoverboard')\n        this.addMenuItem('InterfaceBuildImages', 'SmallDigger')\n        this.addMenuItem('InterfaceBuildImages', 'SmallTruck')\n        this.addMenuItem('InterfaceBuildImages', 'SmallCat')\n        this.addMenuItem('InterfaceBuildImages', 'SmallMLP')\n        this.addMenuItem('InterfaceBuildImages', 'SmallHeli')\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { TrainJob } from '../../game/model/job/TrainJob'\nimport { RaiderTraining } from '../../game/model/raider/RaiderTraining'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class TrainRaiderPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainDriver')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainEngineer')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainGeologist')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainPilot')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSailor')\n        const trainDynamite = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainDynamite')\n        trainDynamite.isDisabled = () => !GameState.getBuildingsByType(EntityType.TOOLSTATION).some((b) => b.stats.TrainDynamite[b.level]) ||\n            GameState.selectedRaiders.every((r) => r.hasTraining(RaiderTraining.DEMOLITION))\n        trainDynamite.onClick = () => {\n            GameState.getBuildingsByType(EntityType.TOOLSTATION).some((b) => {\n                if (b.stats.TrainDynamite[b.level]) {\n                    GameState.selectedRaiders.forEach((r) => !r.hasTraining(RaiderTraining.DEMOLITION) && r.setJob(new TrainJob(b.primarySurface, RaiderTraining.DEMOLITION)))\n                    EventBus.publishEvent(new EntityDeselected())\n                    return true\n                }\n            })\n        }\n        EventBus.registerEventListener(EventKey.BUILDING_UPGRADED, () => trainDynamite.updateState())\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { SurfaceChanged, SurfaceSelectedEvent } from '../../event/LocalEvents'\nimport { EntityAddedEvent, EntityRemovedEvent, RaiderRequested } from '../../event/WorldEvents'\nimport { EntitySuperType, EntityType } from '../../game/model/EntityType'\nimport { GameState } from '../../game/model/GameState'\nimport { Surface } from '../../game/model/map/Surface'\nimport { MAX_RAIDER_REQUEST } from '../../params'\nimport { Panel } from '../base/Panel'\nimport { BuildingPanel } from './BuildingPanel'\nimport { GetToolPanel } from './GetToolPanel'\nimport { IconPanelButtonLabel } from './IconPanelButtonLabel'\nimport { IconSubPanel } from './IconSubPanel'\nimport { LargeVehiclePanel } from './LargeVehiclePanel'\nimport { SelectBuildingPanel } from './SelectBuildingPanel'\nimport { SelectFloorPanel } from './SelectFloorPanel'\nimport { SelectRaiderPanel } from './SelectRaiderPanel'\nimport { SelectRubblePanel } from './SelectRubblePanel'\nimport { SelectVehiclePanel } from './SelectVehiclePanel'\nimport { SelectWallPanel } from './SelectWallPanel'\nimport { SmallVehiclePanel } from './SmallVehiclePanel'\nimport { TrainRaiderPanel } from './TrainRaiderPanel'\n\nexport class MainPanel extends Panel {\n\n    subPanels: IconSubPanel[] = []\n    mainPanel: IconSubPanel // don't use root itself, since sub panel must be decoupled from (animated) main panel position\n    selectWallPanel: SelectWallPanel\n    selectFloorPanel: SelectFloorPanel\n    selectRubblePanel: SelectRubblePanel\n\n    constructor() {\n        super()\n        this.relX = this.xOut = 640 - 16\n        this.xIn = 640 + 95\n        this.relY = this.yOut = this.yIn = 9\n        this.movedIn = false\n        this.mainPanel = this.addSubPanel(new IconSubPanel(4))\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n\n        const buildingPanel = this.addSubPanel(new BuildingPanel(this.mainPanel))\n        const smallVehiclePanel = this.addSubPanel(new SmallVehiclePanel(this.mainPanel))\n        const largeVehiclePanel = this.addSubPanel(new LargeVehiclePanel(this.mainPanel))\n        this.selectWallPanel = this.addSubPanel(new SelectWallPanel(this.mainPanel))\n        this.selectFloorPanel = this.addSubPanel(new SelectFloorPanel(this.mainPanel))\n        this.selectRubblePanel = this.addSubPanel(new SelectRubblePanel(this.mainPanel))\n        const selectBuildingPanel = this.addSubPanel(new SelectBuildingPanel(this.mainPanel))\n        const selectRaiderPanel = this.addSubPanel(new SelectRaiderPanel(this.mainPanel))\n        const trainRaiderPanel = this.addSubPanel(new TrainRaiderPanel(selectRaiderPanel))\n        selectRaiderPanel.trainItem.onClick = () => selectRaiderPanel.toggleState(() => trainRaiderPanel.toggleState())\n        const getToolPanel = this.addSubPanel(new GetToolPanel(selectRaiderPanel))\n        selectRaiderPanel.getToolItem.onClick = () => selectRaiderPanel.toggleState(() => getToolPanel.toggleState())\n        const selectVehiclePanel = this.addSubPanel(new SelectVehiclePanel(this.mainPanel))\n        const teleportRaider = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_TeleportMan')\n        teleportRaider.isDisabled = () => GameState.raiders.length >= GameState.getMaxRaiders() || GameState.requestedRaiders >= MAX_RAIDER_REQUEST ||\n            !GameState.hasOneBuildingOf(EntityType.TOOLSTATION, EntityType.TELEPORT_PAD)\n        teleportRaider.updateState()\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => teleportRaider.updateState())\n        EventBus.registerEventListener(EventKey.ENTITY_ADDED, (event: EntityAddedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.superType === EntitySuperType.BUILDING || event.superType === EntitySuperType.RAIDER) teleportRaider.updateState()\n        })\n        EventBus.registerEventListener(EventKey.ENTITY_REMOVED, (event: EntityRemovedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.superType === EntitySuperType.BUILDING || event.superType === EntitySuperType.RAIDER) teleportRaider.updateState()\n        })\n        teleportRaider.onClick = () => {\n            GameState.requestedRaiders++\n            EventBus.publishEvent(new RaiderRequested())\n        }\n        // TODO add decrease requested raider spawn option (needs right click for gui elements)\n        teleportRaider.addChild(new IconPanelButtonLabel(teleportRaider))\n        const buildingItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildBuilding')\n        buildingItem.isDisabled = () => false\n        buildingItem.onClick = () => this.mainPanel.toggleState(() => buildingPanel.toggleState())\n        const smallVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildSmallVehicle')\n        smallVehicleItem.isDisabled = () => false\n        smallVehicleItem.onClick = () => this.mainPanel.toggleState(() => smallVehiclePanel.toggleState())\n        const largeVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildLargeVehicle')\n        largeVehicleItem.isDisabled = () => false\n        largeVehicleItem.onClick = () => this.mainPanel.toggleState(() => largeVehiclePanel.toggleState())\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, (event: SurfaceSelectedEvent) => {\n            this.onSelectedSurfaceChange(event.surface)\n        })\n        EventBus.registerEventListener(EventKey.SURFACE_CHANGED, (event: SurfaceChanged) => {\n            if (GameState.selectedSurface === event.surface) this.onSelectedSurfaceChange(event.surface)\n        })\n        EventBus.registerEventListener(EventKey.DESELECTED_ENTITY, () => this.selectSubPanel(this.mainPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_BUILDING, () => this.selectSubPanel(selectBuildingPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_RAIDER, () => this.selectSubPanel(selectRaiderPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_VEHICLE, () => this.selectSubPanel(selectVehiclePanel))\n    }\n\n    reset() {\n        super.reset()\n        this.relX = this.xOut\n        this.relY = this.yOut\n        this.movedIn = false\n        this.updatePosition()\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n        this.mainPanel.updatePosition()\n    }\n\n    addSubPanel<T extends IconSubPanel>(childPanel: T): T {\n        this.addChild(childPanel)\n        this.subPanels.push(childPanel)\n        return childPanel\n    }\n\n    selectSubPanel(targetPanel: IconSubPanel) {\n        this.subPanels.forEach((subPanel) => subPanel !== targetPanel && subPanel.setMovedIn(true))\n        targetPanel.setMovedIn(false)\n    }\n\n    onSelectedSurfaceChange(surface: Surface) {\n        if (surface.surfaceType.floor) {\n            if (surface.hasRubble()) {\n                this.selectSubPanel(this.selectRubblePanel)\n            } else {\n                this.selectSubPanel(this.selectFloorPanel)\n            }\n        } else {\n            this.selectSubPanel(this.selectWallPanel)\n        }\n    }\n\n}\n","import { BitmapFont } from '../../core/BitmapFont'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\n\nexport class TextInfoMessage {\n\n    infoImage\n    textImage\n\n    constructor(font: BitmapFont, infoMessageEntryConfig: TextInfoMessageEntryConfig, maxWidth: number) {\n        this.textImage = font.createTextImage(infoMessageEntryConfig.text, maxWidth)\n        this.infoImage = ResourceManager.getImageOrNull(infoMessageEntryConfig.imageFilename)\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { GameState } from '../../game/model/GameState'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\nimport { TextInfoMessage } from './TextInfoMessage'\nimport { TextInfoMessageConfig } from './TextInfoMessageConfig'\n\nexport class MessagePanel extends Panel {\n\n    imgAir: HTMLCanvasElement = null\n    currentMessage: TextInfoMessage = null\n    messageTimeout = null\n\n    msgSpaceToContinue: TextInfoMessage\n    msgAirSupplyLow: TextInfoMessage\n    msgAirSupplyRunningOut: TextInfoMessage\n    msgGameCompleted: TextInfoMessage\n    msgManTrained: TextInfoMessage\n    msgUnitUpgraded: TextInfoMessage\n\n    constructor(panelCfg: PanelCfg, textInfoMessageConfig: TextInfoMessageConfig) {\n        super(panelCfg)\n        this.relX = this.xOut = this.xIn = 42\n        this.relY = this.yOut = this.yIn = 409\n        this.imgAir = ResourceManager.getImage('Interface/Airmeter/msgpanel_air_juice.bmp')\n\n        const font = ResourceManager.getDefaultFont()\n        const crystalFound = new TextInfoMessage(font, textInfoMessageConfig.textCrystalFound, this.img.width)\n        EventBus.registerEventListener(EventKey.LOCATION_CRYSTAL_FOUND, () => this.setMessage(crystalFound))\n        this.msgSpaceToContinue = new TextInfoMessage(font, textInfoMessageConfig.textSpaceToContinue, this.img.width)\n        const cavernDiscovered = new TextInfoMessage(font, textInfoMessageConfig.textCavernDiscovered, this.img.width)\n        EventBus.registerEventListener(EventKey.CAVERN_DISCOVERED, () => this.setMessage(cavernDiscovered))\n        const oreFound = new TextInfoMessage(font, textInfoMessageConfig.textOreFound, this.img.width)\n        EventBus.registerEventListener(EventKey.ORE_FOUND, () => this.setMessage(oreFound))\n        this.msgAirSupplyLow = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyLow, this.img.width)\n        this.msgAirSupplyRunningOut = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyRunningOut, this.img.width)\n        this.msgGameCompleted = new TextInfoMessage(font, textInfoMessageConfig.textGameCompleted, this.img.width)\n        this.msgManTrained = new TextInfoMessage(font, textInfoMessageConfig.textManTrained, this.img.width)\n        EventBus.registerEventListener(EventKey.RAIDER_TRAINED, () => this.setMessage(this.msgManTrained))\n        this.msgUnitUpgraded = new TextInfoMessage(font, textInfoMessageConfig.textUnitUpgraded, this.img.width)\n        EventBus.registerEventListener(EventKey.AIR_LEVEL_CHANGED, () => this.notifyRedraw())\n    }\n\n    setMessage(textInfoMessage: TextInfoMessage, timeout: number = 3000) {\n        this.messageTimeout = clearTimeoutSafe(this.messageTimeout)\n        this.currentMessage = textInfoMessage\n        this.notifyRedraw()\n        if (timeout) {\n            const that = this\n            this.messageTimeout = setTimeout(() => {\n                that.currentMessage = null\n                that.notifyRedraw()\n            }, timeout)\n        }\n    }\n\n    unsetMessage(textInfoMessage: TextInfoMessage) {\n        if (this.currentMessage === textInfoMessage) {\n            this.currentMessage = null\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (GameState.airLevel > 0) {\n            const width = Math.round(236 * Math.min(1, GameState.airLevel))\n            context.drawImage(this.imgAir, this.x + 85, this.y + 6, width, 8)\n        }\n        const textImage = this.currentMessage?.textImage\n        const infoImage = this.currentMessage?.infoImage\n        if (textImage) {\n            const txtX = this.x + (this.img.width - textImage.width - (infoImage ? infoImage.width : 0)) / 2\n            context.drawImage(textImage, txtX, this.y + 26)\n        }\n        if (infoImage) {\n            const infoX = this.x + this.img.width - infoImage.width\n            context.drawImage(infoImage, infoX, this.y + 16)\n        }\n    }\n\n}\n","export class TextInfoMessageEntryConfig {\n\n    text: string\n    imageFilename: string\n    sfxName: string\n\n    textImage\n    infoImage\n\n    constructor(cfgValue: any) {\n        [this.text, this.imageFilename, this.sfxName] = cfgValue\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\n\nexport class TextInfoMessageConfig extends BaseConfig {\n\n    textCrystalFound: TextInfoMessageEntryConfig = null\n    textSpaceToContinue: TextInfoMessageEntryConfig = null\n    textCavernDiscovered: TextInfoMessageEntryConfig = null\n    textOreFound: TextInfoMessageEntryConfig = null\n    textAirSupplyLow: TextInfoMessageEntryConfig = null\n    textAirSupplyRunningOut: TextInfoMessageEntryConfig = null\n    textGameCompleted: TextInfoMessageEntryConfig = null\n    textManTrained: TextInfoMessageEntryConfig = null\n    textUnitUpgraded: TextInfoMessageEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new TextInfoMessageEntryConfig(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class PriorityButtonsConfig extends BaseConfig {\n\n    aiPriorityTrain: ButtonCfg = null\n    aiPriorityGetIn: ButtonCfg = null\n    aiPriorityCrystal: ButtonCfg = null\n    aiPriorityOre: ButtonCfg = null\n    aiPriorityRepair: ButtonCfg = null\n    aiPriorityClearing: ButtonCfg = null\n    aiPriorityDestruction: ButtonCfg = null\n    aiPriorityConstruction: ButtonCfg = null\n    aiPriorityReinforce: ButtonCfg = null\n    aiPriorityRecharge: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): ButtonCfg {\n        return {\n            buttonType: cfgValue[0],\n            normalFile: cfgValue[1],\n            highlightFile: cfgValue[1],\n            pressedFile: cfgValue[2],\n            disabledFile: cfgValue[3],\n        }\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { GameState } from '../../game/model/GameState'\nimport { PriorityIdentifier } from '../../game/model/job/PriorityIdentifier'\nimport { PriorityEntry } from '../../game/model/job/PriorityList'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { ButtonPriorityListCfg } from './ButtonPriorityListCfg'\nimport { PriorityButtonsConfig } from './PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from './PriorityPositionsEntry'\n\nexport class PriorityListPanel extends Panel {\n\n    prioPositions: PriorityPositionsEntry[] = []\n    prioByName: Map<PriorityIdentifier, Button> = new Map()\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonPriorityListCfg, pos: PriorityPositionsEntry[], cfg: PriorityButtonsConfig) {\n        super(panelCfg)\n        buttonsCfg.panelButtonPriorityListDisable.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.toggle(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        buttonsCfg.panelButtonPriorityListUpOne.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.upOne(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        this.addChild(new Button(this, buttonsCfg.panelButtonPriorityListReset)).onClick = () => this.resetList()\n\n        this.prioPositions = pos\n        this.prioByName.set(PriorityIdentifier.aiPriorityTrain, this.addChild(new Button(this, cfg.aiPriorityTrain)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityGetIn, this.addChild(new Button(this, cfg.aiPriorityGetIn)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityCrystal, this.addChild(new Button(this, cfg.aiPriorityCrystal)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityOre, this.addChild(new Button(this, cfg.aiPriorityOre)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityRepair, this.addChild(new Button(this, cfg.aiPriorityRepair)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityClearing, this.addChild(new Button(this, cfg.aiPriorityClearing)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityDestruction, this.addChild(new Button(this, cfg.aiPriorityDestruction)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityConstruction, this.addChild(new Button(this, cfg.aiPriorityConstruction)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityReinforce, this.addChild(new Button(this, cfg.aiPriorityReinforce)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityRecharge, this.addChild(new Button(this, cfg.aiPriorityRecharge)))\n    }\n\n    reset() {\n        super.reset()\n        this.resetList()\n    }\n\n    resetList() {\n        GameState.priorityList.reset()\n        this.setList(GameState.priorityList.current)\n    }\n\n    private setList(priorityList: PriorityEntry[]) {\n        this.prioByName.forEach((btn) => btn.hidden = true)\n        let index = 0\n        let updated = false\n        priorityList.forEach(cfg => {\n            const prioButton: Button = this.prioByName.get(cfg.key)\n            if (prioButton) {\n                updated = updated || prioButton.hidden || prioButton.disabled !== !cfg.enabled\n                prioButton.hidden = false\n                prioButton.disabled = !cfg.enabled\n                prioButton.relX = this.prioPositions[index].x\n                prioButton.relY = this.prioPositions[index].y\n                prioButton.updatePosition()\n                const btnIndex = index\n                prioButton.onClick = () => {\n                    GameState.priorityList.pushToTop(btnIndex)\n                    this.setList(GameState.priorityList.current)\n                }\n                index++\n            }\n        })\n        if (updated) this.notifyRedraw()\n    }\n\n}\n\n","export class PriorityPositionsEntry {\n\n    x: number\n    y: number\n\n    constructor(cfgValue: any) {\n        [this.x, this.y] = cfgValue\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { BaseElement } from './BaseElement'\nimport { Button } from './Button'\n\nexport class ToggleButton extends Button {\n\n    toggleState: boolean = false\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent, btnCfg)\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = (this.pressed && this.hover) || this.toggleState\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => updated = child.checkHover(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const isPressed = this.isInRect(cx, cy) || this.toggleState\n        let updated = this.pressed !== isPressed\n        this.pressed = isPressed\n        this.children.forEach((child) => updated = child.checkClick(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = inRect && this.pressed\n        if (updated) {\n            this.toggleState = !this.toggleState\n            this.onClick()\n            this.pressed = updated && this.toggleState\n            this.hover = inRect\n        }\n        this.children.forEach((child) => updated = child.checkRelease(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    release(): boolean {\n        return false\n    }\n\n}\n\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { ToggleButton } from '../base/ToggleButton'\nimport { ButtonTopCfg } from './ButtonTopCfg'\n\nexport class TopPanel extends Panel {\n\n    btnCallToArms: ToggleButton\n    btnOptions: Button\n    btnPriorities: ToggleButton\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonTopCfg) {\n        super(panelCfg)\n        this.btnCallToArms = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelCallToArms))\n        this.btnOptions = this.addChild(new Button(this, buttonsCfg.panelButtonTopPanelOptions))\n        this.btnPriorities = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelPriorities))\n    }\n\n}\n\n","import { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { BaseElement } from '../../gui/base/BaseElement'\nimport { Panel } from '../../gui/base/Panel'\nimport { ScaledLayer } from './ScreenLayer'\n\nexport class GuiBaseLayer extends ScaledLayer {\n\n    rootElement: BaseElement = new BaseElement()\n    panels: Panel[] = []\n\n    constructor() {\n        super()\n        this.rootElement.notifyRedraw = () => this.redraw()\n        this.onRedraw = (context: CanvasRenderingContext2D) => {\n            context.clearRect(0, 0, context.canvas.width, context.canvas.height)\n            this.rootElement.onRedraw(context)\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.panels.forEach((p) => p.reset())\n    }\n\n    addPanel<T extends Panel>(panel: T): T {\n        this.rootElement.addChild(panel)\n        this.panels.push(panel)\n        return panel\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n        const hit = this.context && this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n        if (hit) {\n            if (event.eventEnum === POINTER_EVENT.MOVE) {\n                this.rootElement.checkHover(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) this.rootElement.checkClick(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) this.rootElement.checkRelease(sx, sy)\n            }\n        } else if (event.eventEnum === POINTER_EVENT.MOVE) {\n            this.rootElement.release()\n        }\n        return hit\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        return !this.context || this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n    }\n\n}\n","import { ButtonsCfg } from '../../cfg/ButtonsCfg'\nimport { PanelsCfg } from '../../cfg/PanelsCfg'\nimport { Panel } from '../../gui/base/Panel'\nimport { InfoDockPanel } from '../../gui/infodock/InfoDockPanel'\nimport { InfoMessagesConfig } from '../../gui/infodock/InfoMessagesConfig'\nimport { InformationPanel } from '../../gui/infodock/InformationPanel'\nimport { MainPanel } from '../../gui/main/MainPanel'\nimport { MessagePanel } from '../../gui/messagepanel/MessagePanel'\nimport { TextInfoMessageConfig } from '../../gui/messagepanel/TextInfoMessageConfig'\nimport { RadarPanel } from '../../gui/radar/RadarPanel'\nimport { PanelCrystalSideBar } from '../../gui/sidebar/PanelCrystalSideBar'\nimport { PriorityButtonsConfig } from '../../gui/toppanel/PriorityButtonsConfig'\nimport { PriorityListPanel } from '../../gui/toppanel/PriorityListPanel'\nimport { PriorityPositionsEntry } from '../../gui/toppanel/PriorityPositionsEntry'\nimport { TopPanel } from '../../gui/toppanel/TopPanel'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { GuiBaseLayer } from './GuiBaseLayer'\n\nexport class GuiMainLayer extends GuiBaseLayer {\n\n    panelRadar: RadarPanel\n    panelMessages: MessagePanel\n    panelMessagesSide: Panel\n    panelCrystalSideBar: PanelCrystalSideBar\n    panelMain: MainPanel\n    panelTopPanel: TopPanel\n    panelInformation: InformationPanel\n    panelPriorityList: PriorityListPanel\n    panelCameraControl: Panel\n    panelInfoDock: InfoDockPanel\n    panelEncyclopedia: Panel\n    onOptionsShow: () => any = () => console.log('show options triggered')\n\n    constructor() {\n        super()\n        const panelsCfg = new PanelsCfg(ResourceManager.cfg('Panels640x480'))\n        const buttonsCfg = new ButtonsCfg(ResourceManager.cfg('Buttons640x480'))\n        // created in reverse order compared to cfg, earlier in cfg means higher z-value // TODO add some z layering at least to panels\n        this.panelEncyclopedia = this.addPanel(new Panel(panelsCfg.panelEncyclopedia))\n        this.panelInformation = this.addPanel(new InformationPanel(panelsCfg.panelInformation))\n        this.panelInfoDock = this.addPanel(new InfoDockPanel(panelsCfg.panelInfoDock, buttonsCfg.panelInfoDock, new InfoMessagesConfig(ResourceManager.cfg('InfoMessages')), this.panelInformation))\n        this.panelCameraControl = this.addPanel(new Panel(panelsCfg.panelCameraControl))\n        const priorityButtonsConfig = new PriorityButtonsConfig(ResourceManager.cfg('PriorityImages'))\n        const priorityPositionsConfig = Object.values(ResourceManager.cfg('PrioritiesImagePositions')).map(cfgValue => new PriorityPositionsEntry(cfgValue))\n        this.panelPriorityList = this.addPanel(new PriorityListPanel(panelsCfg.panelPriorityList, buttonsCfg.panelPriorityList, priorityPositionsConfig, priorityButtonsConfig))\n        this.panelTopPanel = this.addPanel(new TopPanel(panelsCfg.panelTopPanel, buttonsCfg.panelTopPanel))\n        this.panelMain = this.addPanel(new MainPanel())\n        this.panelCrystalSideBar = this.addPanel(new PanelCrystalSideBar(panelsCfg.panelCrystalSideBar, buttonsCfg.panelCrystalSideBar))\n        this.panelMessagesSide = this.addPanel(new Panel(panelsCfg.panelMessagesSide))\n        this.panelMessages = this.addPanel(new MessagePanel(panelsCfg.panelMessages, new TextInfoMessageConfig(ResourceManager.cfg('TextMessagesWithImages'))))\n        this.panelRadar = this.addPanel(new RadarPanel(panelsCfg.panelRadar, panelsCfg.panelRadarFill, panelsCfg.panelRadarOverlay, buttonsCfg.panelRadar))\n        // link panels\n        this.panelTopPanel.btnOptions.onClick = () => this.onOptionsShow()\n        this.panelTopPanel.btnPriorities.onClick = () => {\n            if (this.panelTopPanel.btnPriorities.toggleState) {\n                this.panelMain.setMovedIn(true, () => this.panelPriorityList.setMovedIn(false))\n            } else {\n                this.panelPriorityList.setMovedIn(true, () => this.panelMain.setMovedIn(false))\n            }\n        }\n    }\n\n}\n","export class Rect {\n\n    x: number = 0\n    y: number = 0\n    w: number = 0\n    h: number = 0\n\n    constructor(arr: number[]) {\n        [this.x, this.y, this.w, this.h] = arr\n    }\n\n}\n","import { Rect } from '../core/Rect'\nimport { BaseConfig } from './BaseConfig'\n\nexport class DialogCfg extends BaseConfig {\n\n    image: string = null\n    titleWindow: Rect = null\n    textWindow: Rect = null\n    okWindow: Rect = null\n    cancelWindow: Rect = null\n    contrastOverlay: string = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        if (lCfgKeyName.endsWith('window')) {\n            return new Rect(cfgValue)\n        }\n        return super.parseValue(lCfgKeyName, cfgValue)\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { DialogCfg } from '../../cfg/DialogCfg'\nimport { PanelCfg } from '../../cfg/PanelCfg'\nimport { BitmapFont } from '../../core/BitmapFont'\nimport { Rect } from '../../core/Rect'\nimport { ResourceManager } from '../../resource/ResourceManager'\n\nexport class BriefingPanelCfg extends PanelCfg {\n\n    // XXX find config values for this class\n\n    titleFont: BitmapFont\n    title: string\n    titleWindow: Rect\n    textFont: BitmapFont\n    textWindow: Rect\n    nextButtonCfg: ButtonCfg\n    backButtonCfg: ButtonCfg\n\n    constructor() {\n        super([])\n        this.titleFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont2.bmp')\n        this.title = ResourceManager.cfg('Main', 'MissionBriefingText')\n        const dialogCfg = new DialogCfg(ResourceManager.cfg('Dialog'))\n        this.titleWindow = dialogCfg.titleWindow\n        this.textFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont.bmp')\n        this.textWindow = dialogCfg.textWindow\n        this.nextButtonCfg = {\n            buttonType: 'Next briefing paragraph',\n            relX: 394,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'NextButton640x480'),\n        }\n        this.backButtonCfg = {\n            buttonType: 'Previous briefing paragraph',\n            relX: 54,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'BackArrow'),\n        }\n    }\n\n}\n","import { ObjectiveImageCfg } from '../../cfg/ObjectiveImageCfg'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { MessagePanel } from '../messagepanel/MessagePanel'\nimport { BriefingPanelCfg } from './BriefingPanelCfg'\n\nexport class BriefingPanel extends Panel {\n\n    messagePanel: MessagePanel\n    cfg: BriefingPanelCfg = null\n    imgTitle: HTMLCanvasElement = null\n    titleRelX: number = 0\n    titleRelY: number = 0\n    btnNext: Button = null\n    btnBack: Button = null\n    imgBack: HTMLCanvasElement = null\n    imgParagraph: HTMLCanvasElement[] = []\n    paragraph: number = 0\n\n    constructor() {\n        super()\n        this.cfg = new BriefingPanelCfg()\n        this.imgTitle = this.cfg.titleFont.createTextImage(this.cfg.title)\n        this.titleRelX = this.cfg.titleWindow.x + (this.cfg.titleWindow.w - this.imgTitle.width) / 2\n        this.titleRelY = this.cfg.titleWindow.y\n        this.btnNext = this.addChild(new Button(this, this.cfg.nextButtonCfg))\n        this.btnNext.onClick = () => this.nextParagraph()\n        this.btnBack = this.addChild(new Button(this, this.cfg.backButtonCfg))\n        this.btnBack.onClick = () => this.prevParagraph()\n        this.hidden = true\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n        this.setParagraph(0)\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.imgBack = ResourceManager.getImageOrNull(objectiveBackImgCfg.filename)\n        this.xIn = objectiveBackImgCfg.x\n        this.yIn = objectiveBackImgCfg.y\n        this.width = this.imgBack.width\n        this.height = this.imgBack.height\n        this.updatePosition()\n        this.imgParagraph = objectiveText.split('\\\\a').map(txt => this.cfg.textFont.createTextImage(txt, this.cfg.textWindow.w, false))\n    }\n\n    setParagraph(paragraph: number) {\n        if (paragraph < 0) return\n        if (paragraph > this.imgParagraph.length - 1) {\n            this.hide()\n            this.notifyRedraw()\n            return\n        }\n        this.paragraph = paragraph\n        this.btnNext.hidden = this.paragraph >= this.imgParagraph.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.notifyRedraw()\n    }\n\n    nextParagraph() {\n        this.setParagraph(this.paragraph + 1)\n    }\n\n    prevParagraph() {\n        this.setParagraph(this.paragraph - 1)\n    }\n\n    show() {\n        super.show()\n        this.setParagraph(0)\n        this.btnNext.hidden = this.paragraph >= this.imgParagraph.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.messagePanel?.setMessage(this.messagePanel.msgSpaceToContinue, 0)\n    }\n\n    hide() {\n        super.hide()\n        this.messagePanel?.unsetMessage(this.messagePanel.msgSpaceToContinue)\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.imgBack) context.drawImage(this.imgBack, this.x, this.y)\n        if (this.imgTitle) context.drawImage(this.imgTitle, this.x + this.titleRelX, this.y + this.titleRelY)\n        if (this.imgParagraph && this.imgParagraph[this.paragraph]) context.drawImage(this.imgParagraph[this.paragraph], this.x + this.cfg.textWindow.x, this.y + this.cfg.textWindow.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuCycleItemCfg } from '../../cfg/MenuCycleItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuCycleItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLabelOnNormal: HTMLCanvasElement // TODO only toggle state with clicks on label\n    imgLabelOffNormal: HTMLCanvasElement // TODO use button?\n    imgLabelOnHover: HTMLCanvasElement\n    imgLabelOffHover: HTMLCanvasElement\n\n    labelX: number = 0\n    state: boolean = false\n\n    constructor(parent: MenuLayer, itemCfg: MenuCycleItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.labelX = itemCfg.width\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.imgLabelOffNormal = parent.loFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOffHover = parent.hiFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOnNormal = parent.loFont.createTextImage(itemCfg.labelOn)\n        this.imgLabelOnHover = parent.hiFont.createTextImage(itemCfg.labelOn)\n        this.width = itemCfg.width + Math.max(this.imgLabelOnHover.width, this.imgLabelOffHover.width)\n        this.height = this.imgTextNormal.height\n    }\n\n    onClick() {\n        this.state = !this.state\n        console.log('TODO: cycle item clicked; state: ' + this.state)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        let imgLabel = this.state ? this.imgLabelOnNormal : this.imgLabelOffNormal\n        if (this.hover) {\n            img = this.imgTextHover\n            imgLabel = this.state ? this.imgLabelOnHover : this.imgLabelOffHover\n        }\n        context.drawImage(img, this.x, this.y)\n        context.drawImage(imgLabel, this.x + this.labelX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuLabelItemCfg } from '../../cfg/MenuLabelItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuLabelItem extends BaseElement {\n\n    target: string\n    loImg: HTMLCanvasElement\n    hiImg: HTMLCanvasElement\n\n    constructor(parent: MenuLayer, itemCfg: MenuLabelItemCfg, autoCenter: boolean) {\n        super(parent)\n        this.target = itemCfg.target\n        this.loImg = parent.loFont.createTextImage(itemCfg.label)\n        this.hiImg = parent.hiFont.createTextImage(itemCfg.label)\n        this.width = this.loImg.width\n        this.height = this.loImg.height\n        this.relX = autoCenter ? -parent.relX + (parent.menuImage.width - this.width) / 2 : itemCfg.x\n        this.relY = itemCfg.y\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.hover) {\n            context.drawImage(this.hiImg, this.x, this.y)\n        } else {\n            context.drawImage(this.loImg, this.x, this.y)\n        }\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseButtonCfg } from '../../cfg/BaseButtonCfg'\nimport { MenuSliderItemCfg } from '../../cfg/MenuSliderItemCfg'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuSliderItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLeft: HTMLCanvasElement\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgRight: HTMLCanvasElement\n    sliderX: number = 0\n    min: number = 0\n    max: number = 1\n    value: number = 0\n    onValueChanged: (value: number) => any = (value) => console.log('value changed to: ' + value)\n\n    constructor(parent: MenuLayer, itemCfg: MenuSliderItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.sliderX = itemCfg.width\n        this.imgLeft = ResourceManager.getImage(itemCfg.imgLeft)\n        this.imgNormal = ResourceManager.getImage(itemCfg.imgOff)\n        this.imgHover = ResourceManager.getImage(itemCfg.imgOn)\n        this.imgRight = ResourceManager.getImage(itemCfg.imgRight)\n        const leftBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        leftBtn.imgNormal = ResourceManager.getImage(itemCfg.btnLeftNormal)\n        leftBtn.imgHover = ResourceManager.getImage(itemCfg.btnLeftHover)\n        leftBtn.relX = this.sliderX - this.imgLeft.width - leftBtn.imgHover.width\n        leftBtn.width = leftBtn.imgHover.width\n        leftBtn.height = leftBtn.imgHover.height\n        leftBtn.updatePosition()\n        leftBtn.onClick = () => {\n            if (this.value > this.min) {\n                this.value--\n                this.onValueChanged(this.value)\n            }\n        }\n        const rightBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        rightBtn.imgNormal = ResourceManager.getImage(itemCfg.btnRightNormal)\n        rightBtn.imgHover = ResourceManager.getImage(itemCfg.btnRightHover)\n        rightBtn.relX = this.sliderX + this.imgNormal.width + this.imgRight.width * 2\n        rightBtn.width = rightBtn.imgHover.width\n        rightBtn.height = rightBtn.imgHover.height\n        rightBtn.updatePosition()\n        rightBtn.onClick = () => {\n            if (this.value < this.max) {\n                this.value++\n                this.onValueChanged(this.value)\n            }\n        }\n        this.width = itemCfg.width + leftBtn.imgHover.width + this.imgLeft.width + this.imgNormal.width + this.imgRight.width * 2 + rightBtn.imgHover.width\n        this.min = itemCfg.min\n        this.max = itemCfg.max || 1\n        this.value = this.min // TODO set default value\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.height = this.imgTextNormal.height\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        if (this.hover) {\n            img = this.imgTextHover\n        }\n        context.drawImage(img, this.x, this.y)\n        let posX = this.x + this.sliderX\n        context.drawImage(this.imgLeft, posX, this.y)\n        context.drawImage(this.imgNormal, posX, this.y)\n        const dw = Math.round(this.value / this.max * this.imgHover.width)\n        context.drawImage(this.imgHover, 0, 0, dw, this.imgHover.height, posX, this.y, dw, this.imgHover.height)\n        posX += this.imgNormal.width\n        context.drawImage(this.imgRight, posX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuEntryCfg } from '../../cfg/MenuEntryCfg'\nimport { BitmapFont } from '../../core/BitmapFont'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuCycleItem } from './MenuCycleItem'\nimport { MenuLabelItem } from './MenuLabelItem'\nimport { MenuSliderItem } from './MenuSliderItem'\n\nexport class MenuLayer extends BaseElement {\n\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    itemsTrigger: MenuLabelItem[] = []\n    itemsNext: MenuLabelItem[] = []\n\n    constructor(parent: BaseElement, menuCfg: MenuEntryCfg) {\n        super(parent)\n        this.relX = menuCfg.position[0]\n        this.relY = menuCfg.position[1]\n        this.menuImage = ResourceManager.getImageOrNull(menuCfg.menuImage[0]) // menuImage has 4 parameter here\n        this.titleImage = ResourceManager.getBitmapFont(menuCfg.menuFont).createTextImage(menuCfg.fullName)\n        this.loFont = ResourceManager.getBitmapFont(menuCfg.loFont)\n        this.hiFont = ResourceManager.getBitmapFont(menuCfg.hiFont)\n        menuCfg.itemsLabel.forEach((itemCfg) => {\n            const item = this.addChild(new MenuLabelItem(this, itemCfg, menuCfg.autoCenter))\n            if (itemCfg.actionName.toLowerCase() === 'trigger') {\n                this.itemsTrigger.push(item)\n            } else {\n                this.itemsNext.push(item)\n            }\n        })\n        menuCfg.itemsCycle.forEach((itemCfg) => this.addChild(new MenuCycleItem(this, itemCfg)))\n        menuCfg.itemsSlider.forEach((itemCfg) => this.addChild(new MenuSliderItem(this, itemCfg)))\n        this.hidden = true\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.drawImage(this.menuImage, (this.parent.width - this.menuImage.width) / 2, (this.parent.height - this.menuImage.height) / 2)\n        context.drawImage(this.titleImage, (this.parent.width - this.titleImage.width) / 2, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuCfg } from '../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../screen/layer/ScreenLayer'\nimport { Panel } from '../base/Panel'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuBasePanel extends Panel {\n\n    layersByKey: Map<string, MenuLayer> = new Map()\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super()\n        this.width = layer.fixedWidth\n        this.height = layer.fixedHeight\n        this.hidden = true\n        cfg.menus.forEach((menuCfg, index) => this.layersByKey.set('menu' + (index + 1), this.addChild(new MenuLayer(this, menuCfg))))\n        const pausePanel = this\n        this.layersByKey.forEach((layer) => layer.itemsNext.forEach((item) => item.onClick = () => pausePanel.selectLayer(item.target)))\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n    }\n\n    show() {\n        this.hidden = false\n        this.selectLayer('menu1')\n    }\n\n    hide() {\n        super.hide()\n        this.notifyRedraw()\n    }\n\n    selectLayer(key: string) {\n        const layer = this.layersByKey.get(key.toLowerCase())\n        this.layersByKey.forEach(l => l !== layer && l.hide())\n        layer.show()\n        this.notifyRedraw()\n    }\n\n}\n","import { MenuCfg } from '../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../screen/layer/ScreenLayer'\nimport { MenuBasePanel } from './MenuBasePanel'\n\nexport class OptionsPanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const panel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => panel.onRepeatBriefing()\n        this.layersByKey.get('menu1').itemsTrigger[1].onClick = () => panel.hide()\n    }\n\n}\n","import { MenuCfg } from '../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../screen/layer/ScreenLayer'\nimport { MenuBasePanel } from './MenuBasePanel'\n\nexport class PausePanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n    onAbortGame: () => any = () => console.log('abort mission')\n    onRestartGame: () => any = () => console.log('restart mission')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const pausePanel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => pausePanel.hide() // Pause\n        this.layersByKey.get('menu2').itemsTrigger[0].onClick = () => pausePanel.onRepeatBriefing() // Options\n        this.layersByKey.get('menu3').itemsTrigger[0].onClick = () => pausePanel.onAbortGame() // Quit\n        this.layersByKey.get('menu4').itemsTrigger[0].onClick = () => pausePanel.onRestartGame() // Restart\n    }\n\n}\n","import { MenuCfg } from '../../cfg/MenuCfg'\nimport { ObjectiveImageCfg } from '../../cfg/ObjectiveImageCfg'\nimport { EventBus } from '../../event/EventBus'\nimport { KEY_EVENT } from '../../event/EventTypeEnum'\nimport { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { ChangeCursor } from '../../event/LocalEvents'\nimport { Panel } from '../../gui/base/Panel'\nimport { BriefingPanel } from '../../gui/briefing/BriefingPanel'\nimport { OptionsPanel } from '../../gui/overlay/OptionsPanel'\nimport { PausePanel } from '../../gui/overlay/PausePanel'\nimport { DEV_MODE } from '../../params'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Cursors } from '../Cursors'\nimport { GuiBaseLayer } from './GuiBaseLayer'\n\nexport class OverlayLayer extends GuiBaseLayer {\n\n    panelBriefing: BriefingPanel\n    panelOptions: OptionsPanel\n    panelPause: PausePanel\n\n    constructor() {\n        super()\n        this.panelPause = this.addPanel(new PausePanel(this, ResourceManager.getResource('PausedMenu') as MenuCfg))\n        this.panelOptions = this.addPanel(new OptionsPanel(this, ResourceManager.getResource('OptionsMenu') as MenuCfg))\n        this.panelBriefing = this.addPanel(new BriefingPanel())\n        // link items\n        this.panelPause.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n        this.panelOptions.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n    }\n\n    reset() {\n        super.reset()\n        if (!DEV_MODE) this.setActivePanel(this.panelBriefing)\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.panelBriefing.setup(objectiveText, objectiveBackImgCfg)\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        if (this.panels.every(p => p.hidden)) return false\n        return super.handlePointerEvent(event) || true // catch em all\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): boolean {\n        let result = false\n        const lEventKey = event.key.toLowerCase()\n        if (event.eventEnum === KEY_EVENT.UP) {\n            if (lEventKey === 'escape') {\n                if (this.panelBriefing.hidden && this.panelOptions.hidden) {\n                    if (this.panelPause.hidden) {\n                        // TODO actually pause the game\n                        this.setActivePanel(this.panelPause)\n                    } else {\n                        // TODO actually unpause the game\n                        this.panelPause.hide()\n                    }\n                    result = true\n                }\n            } else if (lEventKey === ' ') { // space\n                if (!this.panelBriefing.hidden) {\n                    this.panelBriefing.nextParagraph()\n                    result = true\n                }\n            }\n        }\n        return result\n    }\n\n    setActivePanel(panel: Panel) {\n        EventBus.publishEvent(new ChangeCursor(Cursors.Pointer_Standard))\n        this.panels.forEach(p => p !== panel && p.hide())\n        panel.show()\n        this.redraw()\n    }\n\n}\n","import { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameState } from '../../game/model/GameState'\nimport { WorldManager } from '../../game/WorldManager'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class SelectionLayer extends ScreenLayer {\n\n    worldManager: WorldManager\n    selectStart: { x: number, y: number } = null\n\n    constructor() {\n        super(true)\n    }\n\n    reset() {\n        super.reset()\n        this.selectStart = null\n    }\n\n    setWorldManager(worldManager: WorldManager) {\n        this.worldManager = worldManager\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        if (GameState.buildModeSelection) return\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.startSelection(cx, cy)\n        } else if (event.eventEnum === POINTER_EVENT.MOVE) {\n            return this.changeSelection(cx, cy)\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.selectEntities(cx, cy)\n        }\n        return false\n    }\n\n    startSelection(screenX: number, screenY: number) {\n        this.selectStart = {x: screenX, y: screenY}\n        return true\n    }\n\n    changeSelection(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        this.context.strokeStyle = 'rgba(128, 192, 192, 0.5)'\n        this.context.lineWidth = 2\n        this.context.strokeRect(this.selectStart.x, this.selectStart.y, screenX - this.selectStart.x, screenY - this.selectStart.y)\n        return true\n    }\n\n    selectEntities(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        const r1x = (this.selectStart.x / this.canvas.width) * 2 - 1\n        const r1y = -(this.selectStart.y / this.canvas.height) * 2 + 1\n        const r2x = (screenX / this.canvas.width) * 2 - 1\n        const r2y = -(screenY / this.canvas.height) * 2 + 1\n        if (Math.abs(screenX - this.selectStart.x) < 5 && Math.abs(screenY - this.selectStart.y) < 5) {\n            const x = (this.selectStart.x + screenX) / this.canvas.width - 1\n            const y = -(this.selectStart.y + screenY) / this.canvas.height + 1\n            this.worldManager.sceneManager.selectEntitiesByRay(x, y)\n        } else {\n            this.worldManager.sceneManager.selectEntitiesInFrustum(r1x, r1y, r2x, r2y)\n        }\n        this.selectStart = null\n        return true\n    }\n\n}\n","import { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { iGet } from '../core/Util'\nimport { GameState } from '../game/model/GameState'\nimport { Supervisor } from '../game/Supervisor'\nimport { WorldManager } from '../game/WorldManager'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { LevelObjectiveTextEntry } from '../resource/wadworker/ObjectiveTextParser'\nimport { BaseScreen } from './BaseScreen'\nimport { GameLayer } from './layer/GameLayer'\nimport { GuiMainLayer } from './layer/GuiMainLayer'\nimport { OverlayLayer } from './layer/OverlayLayer'\nimport { SelectionLayer } from './layer/SelectionLayer'\n\nexport class GameScreen extends BaseScreen {\n\n    onLevelEnd: () => void = () => console.log('Level aborted')\n    gameLayer: GameLayer\n    selectionLayer: SelectionLayer\n    guiLayer: GuiMainLayer\n    overlayLayer: OverlayLayer\n    worldManager: WorldManager\n    jobSupervisor: Supervisor\n    levelName: string\n    levelConf: LevelEntryCfg\n\n    constructor() {\n        super()\n        this.gameLayer = this.addLayer(new GameLayer(), 0)\n        this.selectionLayer = this.addLayer(new SelectionLayer(), 10)\n        this.guiLayer = this.addLayer(new GuiMainLayer(), 20)\n        this.overlayLayer = this.addLayer(new OverlayLayer(), 30)\n        this.worldManager = new WorldManager(this.gameLayer.canvas)\n        this.gameLayer.setWorldManager(this.worldManager)\n        this.selectionLayer.setWorldManager(this.worldManager)\n        this.jobSupervisor = new Supervisor(this.worldManager)\n        // link layer\n        this.guiLayer.onOptionsShow = () => this.overlayLayer.panelOptions.show()\n        this.overlayLayer.panelBriefing.messagePanel = this.guiLayer.panelMessages\n        this.overlayLayer.panelPause.onAbortGame = () => this.onLevelEnd()\n        this.overlayLayer.panelPause.onRestartGame = () => this.restartLevel()\n    }\n\n    startLevel(levelName) {\n        this.levelName = levelName\n        this.levelConf = ResourceManager.getResource('Levels').levelsByName[this.levelName]\n        if (!this.levelConf) throw 'Could not find level configuration for \"' + this.levelName + '\"'\n        this.setupAndStartLevel()\n    }\n\n    restartLevel() {\n        this.hide()\n        GameState.reset()\n        this.setupAndStartLevel()\n    }\n\n    private setupAndStartLevel() {\n        console.log('Starting level ' + this.levelName + ' - ' + this.levelConf.fullName)\n        this.worldManager.setup(this.levelConf, this)\n        const objectiveText: LevelObjectiveTextEntry = iGet(ResourceManager.getResource(this.levelConf.objectiveText), this.levelName)\n        this.guiLayer.reset()\n        this.overlayLayer.setup(objectiveText.objective, this.levelConf.objectiveImage640x480)\n        this.show()\n    }\n\n    show() {\n        super.show()\n        this.worldManager.start()\n        this.jobSupervisor.start()\n    }\n\n    hide() {\n        this.worldManager.stop()\n        this.jobSupervisor.stop()\n        super.hide()\n    }\n\n    resize(width: number, height: number) {\n        super.resize(width, height)\n        if (this.worldManager) this.worldManager.resize(width, height)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\nimport { ScaledLayer } from './layer/ScreenLayer'\n\nexport class LoadingScreen extends BaseScreen {\n\n    layer: ScaledLayer\n    assetIndex: number = 0\n\n    constructor() {\n        super()\n        this.layer = this.addLayer(new ScaledLayer())\n    }\n\n    show() {\n        this.layers.forEach((layer) => {\n            if (layer !== this.cursorLayer) layer.show()\n        })\n        this.setLoadingMessage('Loading...')\n    }\n\n    setLoadingMessage(text) {\n        this.layer.onRedraw = (context) => {\n            // clear the screen to black\n            context.fillStyle = 'black'\n            context.fillRect(0, 0, this.layer.fixedWidth, this.layer.fixedHeight)\n            // draw the loading title\n            context.font = '24px Arial'\n            context.fillStyle = 'white'\n            context.fillText('Loading Rock Raiders', 20, this.layer.fixedHeight - 50)\n            // hard-code the first loading message\n            context.font = '18px Arial'\n            context.fillStyle = 'white'\n            context.fillText(text, 20, this.layer.fixedHeight - 20)\n        }\n        this.redraw()\n    }\n\n    enableGraphicMode(totalResources: number) {\n        const imgBackground = ResourceManager.getImage(ResourceManager.cfg('Main', 'LoadScreen'))\n        const imgProgress = ResourceManager.getImage(ResourceManager.cfg('Main', 'ProgressBar'))\n        const imgLoading = ResourceManager.getDefaultFont().createTextImage(ResourceManager.cfg('Main', 'LoadingText'))\n        this.layer.onRedraw = (context => {\n            context.drawImage(imgBackground, 0, 0)\n            const loadingBarWidth = 353 * (this.assetIndex < totalResources ? Math.round(this.assetIndex / totalResources) : 1)\n            context.drawImage(imgProgress, 142, 450, loadingBarWidth, 9)\n            context.drawImage(imgLoading, Math.round(320 - imgLoading.width / 2), Math.round(456 - imgLoading.height / 2))\n        })\n        this.cursorLayer.show()\n        this.redraw()\n    }\n\n    increaseLoadingState() {\n        this.assetIndex++\n        this.redraw()\n    }\n\n}\n","export class MainMenuBaseItem {\n\n    x: number = 0\n    y: number = 0\n    width: number = 0\n    height: number = 0\n    zIndex: number = 100\n    scrollAffected = false\n    needsRedraw: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n    actionName: string = ''\n    targetIndex: number = 0\n\n    static compareZ(left: MainMenuBaseItem, right: MainMenuBaseItem) {\n        return left.zIndex === right.zIndex ? 0 : left.zIndex > right.zIndex ? -1 : 1\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const hover = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        if (this.hover !== hover) {\n            this.hover = hover\n            this.needsRedraw = true\n            this.onHoverChange()\n        }\n        if (!this.hover) this.pressed = false\n        return this.hover\n    }\n\n    onHoverChange() {\n    }\n\n    checkSetPressed() {\n        if (!this.hover) return\n        if (!this.pressed) this.needsRedraw = true\n        this.pressed = true\n    }\n\n    setReleased() {\n        if (this.pressed) this.needsRedraw = true\n        this.pressed = false\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        this.needsRedraw = false\n    }\n\n}\n","import { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuIconButton extends MainMenuBaseItem {\n\n    imgNormal = null\n    imgHover = null\n    imgPressed = null\n    tooltip = ''\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.imgNormal = ResourceManager.getImage(cfg.imgNormal)\n        this.imgHover = ResourceManager.getImage(cfg.imgHover)\n        this.imgPressed = ResourceManager.getImage(cfg.imgPressed)\n        this.tooltip = (cfg.tooltip || '').replace(/_/g, ' ')\n        this.width = Math.max(this.imgNormal.width, this.imgHover.width, this.imgPressed.width)\n        this.height = Math.max(this.imgNormal.height, this.imgHover.height, this.imgPressed.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgNormal\n        if (this.hover) img = this.imgHover\n        if (this.pressed) img = this.imgPressed\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuLabelButton extends MainMenuBaseItem {\n\n    labelImgLo = null\n    labelImgHi = null\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.labelImgLo = layer.loFont.createTextImage(cfg.label)\n        this.labelImgHi = layer.hiFont.createTextImage(cfg.label)\n        this.width = Math.max(this.labelImgLo.width, this.labelImgHi.width)\n        this.height = Math.max(this.labelImgLo.height, this.labelImgHi.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const img = this.hover && !this.pressed ? this.labelImgHi : this.labelImgLo\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { clearIntervalSafe } from '../core/Util'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { GamePointerEvent } from '../event/GamePointerEvent'\nimport { GameWheelEvent } from '../event/GameWheelEvent'\nimport { NATIVE_FRAMERATE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from '../screen/layer/ScreenLayer'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuIconButton } from './MainMenuIconButton'\nimport { MainMenuLabelButton } from './MainMenuLabelButton'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\n\nexport class MainMenuLayer extends ScaledLayer {\n\n    screen: MainMenuScreen\n    cfg: MenuEntryCfg\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    items: MainMenuBaseItem[] = []\n    scrollY: number = 0\n    scrollSpeedY: number = 0\n    scrollInterval = null\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg) {\n        super()\n        this.screen = screen\n        this.cfg = menuCfg\n        this.loFont = menuCfg.loFont ? ResourceManager.getBitmapFont(menuCfg.loFont) : null\n        this.hiFont = menuCfg.hiFont ? ResourceManager.getBitmapFont(menuCfg.hiFont) : null\n        this.menuImage = menuCfg.menuImage ? ResourceManager.getImage(menuCfg.menuImage) : null\n        this.titleImage = this.loFont.createTextImage(menuCfg.fullName)\n\n        menuCfg.itemsLabel.forEach((item) => {\n            if (item.label) {\n                this.items.push(new MainMenuLabelButton(this, item))\n            } else {\n                this.items.push(new MainMenuIconButton(this, item))\n            }\n        })\n\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n\n        this.onRedraw = (context) => {\n            context.drawImage(this.menuImage, 0, -this.scrollY)\n            if (menuCfg.displayTitle) context.drawImage(this.titleImage, (this.fixedWidth - this.titleImage.width) / 2, this.cfg.position[1])\n            this.items.forEach((item, index) => (this.items[this.items.length - 1 - index]).draw(context))\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.scrollY = 0\n        this.scrollSpeedY = 0\n    }\n\n    show() {\n        super.show()\n        const that = this\n        this.scrollInterval = setInterval(() => {\n            if (that.scrollSpeedY === 0) return\n            that.setScrollY(that.scrollSpeedY)\n        }, 1000 / NATIVE_FRAMERATE)\n    }\n\n    hide() {\n        this.scrollInterval = clearIntervalSafe(this.scrollInterval)\n        super.hide()\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        if (event.eventEnum === POINTER_EVENT.MOVE) {\n            const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n            let hovered = false\n            this.items.forEach((item) => {\n                if (!hovered) {\n                    const absY = sy + (item.scrollAffected ? this.scrollY : 0)\n                    hovered = item.checkHover(sx, absY)\n                } else {\n                    if (item.hover) item.needsRedraw = true\n                    item.hover = false\n                    item.setReleased()\n                }\n            })\n            if (this.cfg.canScroll) {\n                const scrollAreaHeight = 100\n                if (sy < scrollAreaHeight) {\n                    this.setScrollSpeedY(-(scrollAreaHeight - sy))\n                } else if (sy > this.fixedHeight - scrollAreaHeight) {\n                    this.setScrollSpeedY(sy - (this.fixedHeight - scrollAreaHeight))\n                } else {\n                    this.setScrollSpeedY(0)\n                }\n            }\n        } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => item.checkSetPressed())\n            }\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => {\n                    if (item.pressed) {\n                        item.setReleased()\n                        if (item.actionName.toLowerCase() === 'next') {\n                            this.screen.showMainMenu(item.targetIndex)\n                        } else if (item.actionName.toLowerCase() === 'selectlevel') {\n                            this.screen.selectLevel((item as MainMenuLevelButton).levelKey)\n                        } else if (item.actionName) {\n                            console.warn('not implemented: ' + item.actionName + ' - ' + item.targetIndex)\n                        }\n                    }\n                })\n            }\n        }\n        if (this.needsRedraw()) this.redraw()\n        return false\n    }\n\n    private setScrollSpeedY(deltaY: number) {\n        this.scrollSpeedY = Math.sign(deltaY) * Math.pow(Math.round(deltaY / 20), 2)\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        if (!this.cfg.canScroll) return false\n        this.setScrollY(event.deltaY)\n        return true\n    }\n\n    private setScrollY(deltaY: number) {\n        const scrollYBefore = this.scrollY\n        this.scrollY = Math.min(Math.max(this.scrollY + deltaY, 0), this.menuImage.height - this.fixedHeight)\n        if (scrollYBefore !== this.scrollY) this.redraw()\n    }\n\n    needsRedraw(): boolean {\n        return this.items.some((item) => item.needsRedraw)\n    }\n\n}\n","import { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuLevelButton extends MainMenuBaseItem {\n\n    layer: MainMenuLayer\n    imgActive = null\n    imgInactive = null\n    imgCross = null\n    unlocked: boolean = false\n    levelKey: string = ''\n\n    constructor(layer: MainMenuLayer, levelKey: string, levelCfg: LevelEntryCfg) {\n        super()\n        this.layer = layer\n        this.actionName = 'selectlevel'\n        this.levelKey = levelKey\n        this.x = levelCfg.frontEndX\n        this.y = levelCfg.frontEndY\n        this.zIndex = 10\n        this.scrollAffected = true\n        const [imgActive, imgInactive, imgCross] = levelCfg.menuBMP\n        this.imgActive = ResourceManager.getImage(imgActive)\n        this.imgInactive = ResourceManager.getImage(imgInactive)\n        this.imgCross = ResourceManager.getImage(imgCross)\n        this.width = Math.max(this.imgActive.width, this.imgInactive.width, this.imgCross.width)\n        this.height = Math.max(this.imgActive.height, this.imgInactive.height, this.imgCross.height)\n        this.unlocked = levelCfg.frontEndOpen\n        this.unlocked = true // TODO don't unlock everything by default\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgCross\n        if (this.unlocked) img = this.hover ? this.imgActive : this.imgInactive\n        context.drawImage(img, this.x, this.y - this.layer.scrollY)\n    }\n\n}\n","import { createContext } from '../core/ImageHelper'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class MainMenuPanel extends MainMenuBaseItem {\n\n    context: CanvasRenderingContext2D\n\n    constructor(imgData: ImageData, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.zIndex = 50\n        this.context = createContext(imgData.width, imgData.height)\n        this.context.putImageData(imgData, 0, 0)\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const inRect = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        const hover = inRect && this.context.getImageData(sx, sy, 1, 1).data[3] > 0\n        if (this.hover !== hover) this.needsRedraw = true\n        this.hover = hover\n        return this.hover\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        context.drawImage(this.context.canvas, this.x, this.y, this.width, this.height)\n    }\n\n}\n","import { BitmapFont } from '../core/BitmapFont'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class MainMenuWindow extends MainMenuBaseItem {\n\n    font: BitmapFont\n    imgFirstLine = null\n    imgSecondLine = null\n\n    constructor(font: BitmapFont, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.font = font\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    setFirstLine(text: string) {\n        this.imgFirstLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    setSecondLine(text: string) {\n        this.imgSecondLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const cx = this.x + this.width / 2, cy = this.y + this.height / 2\n        if (this.imgFirstLine) context.drawImage(this.imgFirstLine, cx - this.imgFirstLine.width / 2, cy - this.imgFirstLine.height)\n        if (this.imgSecondLine) context.drawImage(this.imgSecondLine, cx - this.imgSecondLine.width / 2, cy)\n    }\n\n}\n","import { LevelEntryCfg, LevelsCfg } from '../cfg/LevelsCfg'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { iGet } from '../core/Util'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { MainMenuPanel } from './MainMenuPanel'\nimport { MainMenuWindow } from './MainMenuWindow'\n\nexport class LevelSelectLayer extends MainMenuLayer {\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg, modeLevel: boolean) {\n        super(screen, menuCfg)\n        const levelsCfg: LevelsCfg = ResourceManager.getResource('Levels')\n        const levelTextCfg = new LevelTextCfg()\n        this.items.push(new MainMenuPanel(levelTextCfg.panelImgData, levelTextCfg.panelPos))\n        const levelTextWindow = new MainMenuWindow(ResourceManager.getDefaultFont(), levelTextCfg.window)\n        levelTextWindow.setFirstLine(modeLevel ? levelTextCfg.level : levelTextCfg.tutorial)\n        this.items.push(levelTextWindow)\n        Object.keys(levelsCfg.levelsByName).forEach((levelKey) => {\n            const level: LevelEntryCfg = levelsCfg.levelsByName[levelKey]\n            const levelButton = new MainMenuLevelButton(this, levelKey, level)\n            levelButton.onHoverChange = () => levelTextWindow.setSecondLine(levelButton.hover ? level.fullName : '')\n            this.items.push(levelButton)\n        })\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n    }\n\n}\n\nclass LevelTextCfg {\n\n    window = {x: 0, y: 0, w: 0, h: 0}\n    panelImgData: ImageData\n    panelPos = {x: 0, y: 0, w: 0, h: 0}\n    level: string = ''\n    tutorial: string = ''\n\n    constructor() {\n        const cfg = ResourceManager.cfg('Menu', 'LevelText')\n        const winCfg = iGet(cfg, 'Window')\n        this.window = {x: winCfg[0], y: winCfg[1], w: winCfg[2], h: winCfg[3]}\n        const panelCfg = iGet(cfg, 'Panel')\n        this.panelImgData = ResourceManager.getImageData(panelCfg[0])\n        this.panelPos = {x: panelCfg[1], y: panelCfg[2], w: panelCfg[3], h: panelCfg[4]}\n        this.level = iGet(cfg, 'Level').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n        this.tutorial = iGet(cfg, 'Tutorial').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n    }\n\n}\n","import { MenuCfg } from '../cfg/MenuCfg'\nimport { LevelSelectLayer } from '../menu/LevelSelectLayer'\nimport { MainMenuLayer } from '../menu/MainMenuLayer'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\n\nexport class MainMenuScreen extends BaseScreen {\n\n    onLevelSelected: (levelName: string) => void = null\n    menus: MainMenuLayer[] = []\n\n    constructor() {\n        super()\n        const mainMenuFullCfg = ResourceManager.getResource('MainMenuFull') as MenuCfg\n        mainMenuFullCfg.menus.forEach((menuCfg) => {\n            let layer\n            if (menuCfg.title === 'Levels') {\n                layer = new LevelSelectLayer(this, menuCfg, true)\n            } else if (menuCfg.title === 'Tutorials') {\n                layer = new LevelSelectLayer(this, menuCfg, false)\n            } else {\n                layer = new MainMenuLayer(this, menuCfg)\n            }\n            this.menus.push(layer)\n            this.addLayer(layer)\n        })\n    }\n\n    showMainMenu(index: number = 0) {\n        this.hide()\n        this.menus[index].show()\n        this.cursorLayer.show()\n    }\n\n    showLevelSelection() {\n        this.showMainMenu(1)\n    }\n\n    selectLevel(levelName) {\n        this.hide()\n        this.onLevelSelected(levelName)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class RewardScreenButton extends MainMenuBaseItem {\n\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgPressed: HTMLCanvasElement\n    imgDisabled: HTMLCanvasElement\n    disabled: boolean = false\n    visible: boolean = true\n\n    constructor(conf: any) {\n        super()\n        let imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath;\n        [imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath, this.x, this.y] = conf\n        this.imgNormal = ResourceManager.getImage(imgNormalFilepath)\n        this.imgHover = ResourceManager.getImage(imgHoverFilepath)\n        this.imgPressed = ResourceManager.getImage(imgPressedFilepath)\n        this.imgDisabled = ResourceManager.getImage(imgDisabledFilepath)\n        this.width = this.imgNormal.width\n        this.height = this.imgNormal.height\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        if (!this.visible) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled\n        } else if (this.pressed) {\n            img = this.imgPressed\n        } else if (this.hover) {\n            img = this.imgHover\n        }\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { RewardCfg } from '../cfg/RewardCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { clearTimeoutSafe } from '../core/Util'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { RewardScreenButton } from '../menu/RewardScreenButton'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\nimport { ScaledLayer } from './layer/ScreenLayer'\n\nexport class RewardScreen extends BaseScreen {\n\n    onAdvance: () => void\n    cfg: RewardCfg = null\n    titleFont: BitmapFont\n    resultsLayer: ScaledLayer\n    descriptionTextLayer: ScaledLayer\n    btnLayer: ScaledLayer\n    resultIndex: number = 0\n    resultLastIndex: number = 0\n    images: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    boxes: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    fonts = {}\n    texts: HTMLCanvasElement[] = []\n    uncoverTimeout = null\n    btnSave: RewardScreenButton\n    btnAdvance: RewardScreenButton\n\n    constructor() {\n        super()\n        this.cfg = ResourceManager.getResource('Reward')\n        this.titleFont = ResourceManager.getBitmapFont(this.cfg.titleFont)\n        const backgroundImg = ResourceManager.getImage(this.cfg.wallpaper)\n        const backgroundLayer = this.addLayer(new ScaledLayer())\n        backgroundLayer.onRedraw = (context) => context.drawImage(backgroundImg, 0, 0)\n        this.cfg.images.forEach((img) => {\n            this.images.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        this.cfg.boxImages.forEach((img) => {\n            this.boxes.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        Object.keys(this.cfg.fonts).forEach((fontKey, index) => {\n            const font = ResourceManager.getBitmapFont(this.cfg.fonts[fontKey])\n            this.fonts[fontKey.toLowerCase()] = font\n            const txt = this.cfg.texts[index]\n            const labelFont = index < 9 ? font : ResourceManager.getBitmapFont(this.cfg.backFont)\n            this.texts.push(labelFont.createTextImage(txt.text))\n        })\n        this.resultsLayer = this.addLayer(new ScaledLayer())\n        this.resultsLayer.handlePointerEvent = ((event) => {\n            if (event.eventEnum === POINTER_EVENT.UP) {\n                this.uncoverTimeout = clearTimeoutSafe(this.uncoverTimeout)\n                this.uncoverTimeout = null\n                this.resultIndex = this.resultLastIndex\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n                this.redraw()\n                return true\n            }\n            return false\n        })\n        this.descriptionTextLayer = this.addLayer(new ScaledLayer(), 20)\n        this.btnLayer = this.addLayer(new ScaledLayer(), 50)\n        this.btnSave = new RewardScreenButton(this.cfg.saveButton)\n        this.btnSave.disabled = true\n        this.btnAdvance = new RewardScreenButton(this.cfg.advanceButton)\n        this.btnLayer.handlePointerEvent = ((event) => {\n            if (event.eventEnum === POINTER_EVENT.MOVE) {\n                const [sx, sy] = this.btnLayer.toScaledCoords(event.clientX, event.clientY)\n                this.btnSave.checkHover(sx, sy)\n                this.btnAdvance.checkHover(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    this.btnSave.checkSetPressed()\n                    this.btnAdvance.checkSetPressed()\n                }\n            } else if (event.eventEnum === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    if (this.btnSave.pressed) {\n                        this.btnSave.setReleased()\n                        // TODO switch to save screen\n                    } else if (this.btnAdvance.pressed) {\n                        this.btnAdvance.setReleased()\n                        this.hide()\n                        this.onAdvance()\n                    }\n                }\n            }\n            if (this.btnSave.needsRedraw || this.btnAdvance.needsRedraw) this.redraw()\n            return false\n        })\n        this.btnLayer.onRedraw = (context) => {\n            this.btnSave.draw(context)\n            this.btnAdvance.draw(context)\n        }\n    }\n\n    show() {\n        this.resultIndex = 0\n        this.btnSave.visible = false\n        this.btnAdvance.visible = false\n        this.uncoverResult()\n        const levelFullNameImg = this.titleFont.createTextImage(GameState.levelFullName)\n        let resultText = this.cfg.quitText\n        this.resultLastIndex = this.images.length - 2\n        if (GameState.resultState === GameResultState.COMPLETE) {\n            resultText = this.cfg.completeText\n            this.resultLastIndex = this.images.length - 1\n        } else if (GameState.resultState === GameResultState.FAILED) {\n            resultText = this.cfg.failedText\n        }\n        const resultValues = []\n        resultValues.push(this.fonts['crystals'].createTextImage(this.percentString(GameState.numCrystal, GameState.neededCrystals)))\n        resultValues.push(this.fonts['ore'].createTextImage(this.percentString(GameState.numOre, GameState.totalOres)))\n        resultValues.push(this.fonts['diggable'].createTextImage(this.percentString(GameState.remainingDiggables, GameState.totalDiggables, true)))\n        resultValues.push(this.fonts['constructions'].createTextImage(GameState.buildings.length.toString()))\n        resultValues.push(this.fonts['caverns'].createTextImage(this.percentString(GameState.discoveredCaverns, GameState.totalCaverns)))\n        resultValues.push(this.fonts['figures'].createTextImage(this.percentString(GameState.raiders.length, GameState.getMaxRaiders())))\n        resultValues.push(this.fonts['rockmonsters'].createTextImage(this.percentString(0))) // TODO show defence report, is either 0% or 100%\n        resultValues.push(this.fonts['oxygen'].createTextImage(this.percentString(GameState.airLevel)))\n        resultValues.push(this.fonts['timer'].createTextImage(this.timeString(GameState.gameTimeSeconds)))\n        resultValues.push(this.fonts['score'].createTextImage(this.percentString(GameState.score)))\n        const gameResultTextImg = this.titleFont.createTextImage(resultText)\n        this.resultsLayer.onRedraw = (context) => {\n            context.clearRect(0, 0, this.resultsLayer.fixedWidth, this.resultsLayer.fixedHeight)\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const img = this.images[c]\n                if (img) context.drawImage(img.img, img.x, img.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const box = this.boxes[c]\n                if (box) context.drawImage(box.img, box.x, box.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const txt = this.cfg.texts[c]\n                const text = resultValues[c]\n                if (text) context.drawImage(text, txt.x - text.width / 2, txt.y)\n            }\n            context.drawImage(levelFullNameImg, this.resultsLayer.fixedWidth / 2 - levelFullNameImg.width / 2, this.cfg.vertSpacing - levelFullNameImg.height / 2)\n            context.drawImage(gameResultTextImg, this.resultsLayer.fixedWidth / 2 - gameResultTextImg.width / 2, this.cfg.vertSpacing + levelFullNameImg.height / 2)\n        }\n        this.descriptionTextLayer.onRedraw = (context) => {\n            const descriptionTextImg = this.texts[this.resultIndex]\n            context.clearRect(0, this.cfg.textPos[1], this.descriptionTextLayer.fixedWidth, this.descriptionTextLayer.fixedHeight - this.cfg.textPos[1])\n            const tx = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[0] : 305\n            const ty = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[1] : 195\n            context.drawImage(descriptionTextImg, tx - descriptionTextImg.width / 2, ty)\n        }\n        super.show()\n    }\n\n    percentString(actual, max = 1, lessIsMore: boolean = false) {\n        if (max === 0) max = 1\n        let value = Math.round(Math.max(Math.min(actual / max, 1), 0) * 100)\n        if (lessIsMore) value = 100 - value\n        return value.toString() + '%'\n    }\n\n    padLeft(value: string, padding = '0', length = 2) {\n        while (value.length < length) value = padding + value\n        return value\n    }\n\n    timeString(seconds: number) {\n        const ss = this.padLeft((seconds % 60).toString())\n        const minutes = Math.floor(seconds / 60)\n        const mm = this.padLeft(((minutes % 60).toString()))\n        const hh = this.padLeft((Math.floor(minutes / 60).toString()))\n        return hh + ':' + mm + ':' + ss\n    }\n\n    uncoverResult() {\n        this.uncoverTimeout = setTimeout(() => {\n            this.uncoverTimeout = null\n            this.resultIndex++\n            if (this.resultIndex < this.resultLastIndex) {\n                this.uncoverResult()\n            } else {\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n            }\n            this.redraw()\n        }, this.cfg.timer * 1000)\n    }\n\n}\n","import { WadFileSelectionModal } from '../site/modal/WadFileSelectionModal'\nimport { GameState } from './game/model/GameState'\nimport { DEV_MODE } from './params'\nimport { ResourceManager } from './resource/ResourceManager'\nimport { GameScreen } from './screen/GameScreen'\nimport { LoadingScreen } from './screen/LoadingScreen'\nimport { MainMenuScreen } from './screen/MainMenuScreen'\nimport { RewardScreen } from './screen/RewardScreen'\n\nif (DEV_MODE) console.warn('DEV MODE ACTIVE')\n\n// setup and link all components\n\nconst loadingScreen = new LoadingScreen()\nconst wadFileSelectModal = new WadFileSelectionModal('game-container')\n\nwadFileSelectModal.onStart = (wad0Url, wad1Url) => {\n    ResourceManager.startLoadingFromUrl(wad0Url, wad1Url)\n}\nResourceManager.onMessage = (msg: string) => {\n    loadingScreen.setLoadingMessage(msg)\n}\nResourceManager.onCacheMissed = () => {\n    wadFileSelectModal.show()\n}\nResourceManager.onInitialLoad = (totalResources: number) => {\n    wadFileSelectModal.hide()\n    loadingScreen.enableGraphicMode(totalResources)\n}\nResourceManager.onAssetLoaded = () => {\n    loadingScreen.increaseLoadingState()\n}\nResourceManager.onLoadDone = () => {\n    // complete setup\n    const mainMenuScreen = new MainMenuScreen()\n    const gameScreen = new GameScreen()\n    const rewardScreen = new RewardScreen()\n\n    mainMenuScreen.onLevelSelected = (levelName) => {\n        try {\n            gameScreen.startLevel(levelName)\n        } catch (e) {\n            console.error('Could not load level: ' + levelName, e)\n            gameScreen.hide()\n            mainMenuScreen.showLevelSelection()\n        }\n    }\n    gameScreen.onLevelEnd = () => {\n        gameScreen.hide()\n        rewardScreen.show()\n    }\n    rewardScreen.onAdvance = () => {\n        GameState.reset()\n        mainMenuScreen.showLevelSelection()\n    }\n\n    // setup complete\n    loadingScreen.hide()\n    const params = new URLSearchParams(window.location.search)\n    const entry = params.get('entry')\n    if (DEV_MODE && entry) {\n        GameState.numOre = Number(params.get('numOre')) || 0\n        GameState.numCrystal = Number(params.get('numCrystal')) || 0\n        if (entry === 'level') mainMenuScreen.showLevelSelection()\n        else if (entry === 'reward') rewardScreen.show()\n        else if (entry) mainMenuScreen.selectLevel(entry)\n    } else {\n        mainMenuScreen.showMainMenu()\n    }\n}\n\n// start the game engine with loading resources\n\nloadingScreen.show()\nResourceManager.startLoadingFromCache()\n"],"sourceRoot":""}