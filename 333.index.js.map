{"version":3,"sources":["webpack://rock-raiders-web/./site/modal/WadFileSelectionModal.ts","webpack://rock-raiders-web/./src/resource/wadworker/Resources.ts","webpack://rock-raiders-web/./src/resource/wadworker/InitLoadingMessage.ts","webpack://rock-raiders-web/./src/core/ImageHelper.js","webpack://rock-raiders-web/./src/resource/wadworker/WadUtil.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimationEntityType.ts","webpack://rock-raiders-web/./src/resource/LWOLoader.ts","webpack://rock-raiders-web/./src/game/model/Selectable.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimClip.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimSubObj.ts","webpack://rock-raiders-web/./src/resource/LWSCLoader.ts","webpack://rock-raiders-web/./src/scene/DebugHelper.ts","webpack://rock-raiders-web/./src/cfg/BaseConfig.ts","webpack://rock-raiders-web/./src/cfg/BuildingStatsCfg.ts","webpack://rock-raiders-web/./src/game/model/entity/building/Building.ts","webpack://rock-raiders-web/./src/event/WorldEvents.ts","webpack://rock-raiders-web/./src/cfg/EntityStatsCfg.ts","webpack://rock-raiders-web/./src/scene/model/BaseEntity.ts","webpack://rock-raiders-web/./src/event/EventBus.ts","webpack://rock-raiders-web/./src/game/model/job/Job.ts","webpack://rock-raiders-web/./src/scene/model/collect/CollectableEntity.ts","webpack://rock-raiders-web/./src/game/model/job/CollectJob.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimEntity.ts","webpack://rock-raiders-web/./src/scene/model/collect/Dynamite.ts","webpack://rock-raiders-web/./src/scene/model/collect/Crystal.ts","webpack://rock-raiders-web/./src/scene/model/collect/Ore.ts","webpack://rock-raiders-web/./src/resource/wadworker/WorkerMessage.ts","webpack://rock-raiders-web/./src/scene/SceneManager.ts","webpack://rock-raiders-web/./src/resource/AnimEntityLoader.ts","webpack://rock-raiders-web/./src/core/BitmapFont.ts","webpack://rock-raiders-web/./src/event/EventManager.ts","webpack://rock-raiders-web/./src/resource/ResourceManager.ts","webpack://rock-raiders-web/./src/screen/ScreenLayer.ts","webpack://rock-raiders-web/./src/scene/model/map/Surface.ts","webpack://rock-raiders-web/./src/screen/BaseScreen.ts","webpack://rock-raiders-web/./src/screen/LoadingScreen.ts","webpack://rock-raiders-web/./src/menu/MainMenuBaseItem.ts","webpack://rock-raiders-web/./src/menu/MainMenuLabelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuIconButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLayer.ts","webpack://rock-raiders-web/./src/menu/MainMenuLevelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuPanel.ts","webpack://rock-raiders-web/./src/menu/MainMenuWindow.ts","webpack://rock-raiders-web/./src/menu/LevelSelectLayer.ts","webpack://rock-raiders-web/./src/screen/MainMenuScreen.ts","webpack://rock-raiders-web/./src/scene/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/scene/model/MovableEntity.ts","webpack://rock-raiders-web/./src/event/WorldLocationEvent.ts","webpack://rock-raiders-web/./src/scene/model/FulfillerEntity.ts","webpack://rock-raiders-web/./src/scene/model/Raider.ts","webpack://rock-raiders-web/./src/game/model/job/SurfaceJob.ts","webpack://rock-raiders-web/./src/scene/model/map/SurfaceGeometry.ts","webpack://rock-raiders-web/./src/scene/model/map/astar.ts","webpack://rock-raiders-web/./src/scene/TerrainLoader.ts","webpack://rock-raiders-web/./src/scene/model/map/Terrain.ts","webpack://rock-raiders-web/./src/scene/model/BuildingEntity.ts","webpack://rock-raiders-web/./src/scene/ObjectListLoader.ts","webpack://rock-raiders-web/./src/core/NerpRunner.ts","webpack://rock-raiders-web/./src/core/NerpParser.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityList.ts","webpack://rock-raiders-web/./src/game/model/job/MoveJob.ts","webpack://rock-raiders-web/./src/scene/WorldManager.ts","webpack://rock-raiders-web/./src/game/layer/SelectionLayer.ts","webpack://rock-raiders-web/./src/game/layer/GameLayer.ts","webpack://rock-raiders-web/./src/game/gui/base/BaseElement.ts","webpack://rock-raiders-web/./src/game/gui/base/Panel.ts","webpack://rock-raiders-web/./src/game/gui/base/Button.ts","webpack://rock-raiders-web/./src/game/gui/sidebar/SideBarLabel.ts","webpack://rock-raiders-web/./src/game/gui/sidebar/PanelCrystalSideBar.ts","webpack://rock-raiders-web/./src/game/gui/infodock/ButtonInfoDockCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/ButtonPriorityListCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/ButtonTopCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonsCfg.ts","webpack://rock-raiders-web/./src/game/gui/radar/RadarPanel.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessage.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/MessagePanel.ts","webpack://rock-raiders-web/./src/cfg/IconPanelBackButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/MenuItemCfg.ts","webpack://rock-raiders-web/./src/game/gui/main/IconPanelButton.ts","webpack://rock-raiders-web/./src/game/gui/main/IconSubPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/BuildingPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SmallVehiclePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/LargeVehiclePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectBasePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectWallPanel.ts","webpack://rock-raiders-web/./src/scene/model/BuildingSite.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectFloorPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectRubblePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectBuildingPanel.ts","webpack://rock-raiders-web/./src/game/model/job/EatJob.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectRaiderPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectVehiclePanel.ts","webpack://rock-raiders-web/./src/game/model/job/TrainJob.ts","webpack://rock-raiders-web/./src/game/gui/main/TrainRaiderPanel.ts","webpack://rock-raiders-web/./src/game/model/job/GetToolJob.ts","webpack://rock-raiders-web/./src/game/gui/main/GetToolPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/IconPanelButtonLabel.ts","webpack://rock-raiders-web/./src/game/gui/main/MainPanel.ts","webpack://rock-raiders-web/./src/game/gui/base/ToggleButton.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/TopPanel.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoDockButton.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoDockPanel.ts","webpack://rock-raiders-web/./src/cfg/PanelsCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityListPanel.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoMessagesEntryConfig.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoMessagesConfig.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InformationPanel.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityButtonsConfig.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityPositionsEntry.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessageEntryConfig.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessageConfig.ts","webpack://rock-raiders-web/./src/game/layer/GuiBaseLayer.ts","webpack://rock-raiders-web/./src/game/layer/GuiMainLayer.ts","webpack://rock-raiders-web/./src/game/Supervisor.ts","webpack://rock-raiders-web/./src/game/gui/briefing/BriefingPanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuCycleItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuSliderItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuLabelItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuLayer.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuBasePanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/OptionsPanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/PausePanel.ts","webpack://rock-raiders-web/./src/core/Rect.ts","webpack://rock-raiders-web/./src/cfg/DialogCfg.ts","webpack://rock-raiders-web/./src/cfg/BriefingPanelCfg.ts","webpack://rock-raiders-web/./src/game/layer/OverlayLayer.ts","webpack://rock-raiders-web/./src/screen/GameScreen.ts","webpack://rock-raiders-web/./src/menu/RewardScreenButton.ts","webpack://rock-raiders-web/./src/screen/RewardScreen.ts","webpack://rock-raiders-web/./src/main.ts"],"names":["parentId","onStart","rootElement","document","getElementById","appendChild","createElement","classList","add","tabIndex","setAttribute","modalDialog","modalContent","modalHeader","modalTitle","innerText","id","modalBody","navTabList","navFileBtn","WadFileSelectionModal","appendNavButton","navUrlBtn","navTabContent","this","appendNavFileTab","appendNavUrlTab","modal","backdrop","keyboard","parent","active","controlTarget","navBtn","type","String","labelledBy","navFileTab","appendNavTab","wad0File","appendWadFileGroup","wad1File","btnStartFile","addEventListener","disabled","wad0FileUrl","URL","createObjectURL","files","wad1FileUrl","filename","wadFileGroup","wadFileLabel","innerHTML","wadFileInput","required","navUrlTab","urlHint","wad0Url","appendWadUrlGroup","wad1Url","btnStartUrl","value","navTab","example","wadUrlGroup","wadUrlLabel","wadUrlInput","show","hide","Worker_fn","Worker","createContext","width","height","console","error","result","y","x","fillStyle","fillRect","createDummyContext","canvas","context","getContext","createDummyImgData","ImageData","e","px","py","setPixel","imgData","r","g","b","a","n","data","getPixel","iGet","obj","keys","forEach","keyname","Object","filter","key","toLowerCase","map","url","strUrl","toString","replace","startsWith","substring","lastInd","lastIndexOf","decodeString","TextDecoder","decode","decodeFilepath","getRandomInclusive","min","max","Math","ceil","floor","random","getRandom","getRandomSign","carryNullName","mediumPoly","highPoly","fPPoly","activities","SURF_VTRN","getVector3AtOffset","view","offset","vector","getFloat32","z","SelectionType","path","verbose","materials","geometry","vertices","indices","uvs","log","parsePoints","chunkOffset","chunkSize","numVertices","Float32Array","i","vertexIndex","vertexOffset","parseSurfaceNames","buffer","surfaceNames","Uint8Array","split","s","length","new_material","name","side","push","parsePolygons","totalNumIndices","numIndices","getInt16","materialIndex","addGroup","currentIndex","Uint16Array","faceIndices","Int16Array","COUNTER_CLOCKWISE","parseSurface","getUint8","materialName","material","textureFlags","textureSize","textureCenter","subchunkOffset","subchunkType","getInt32","subchunkSize","colorArray","color","fromArray","join","flags","getUint16","luminosity","diffuse","specular","reflection","reflectivity","transparency","opacity","transparent","luminosity2","diffuse2","specular2","toArray","textureTypeName","textureColorArray","textureFilepath","sequenceTexture","endsWith","textureFilename","match","ResourceManager","filterTextureSequenceNames","setInterval","getTexture","alphaTest","warn","size","center","XAXIS_BIT","groups","group","start","count","uvIndex","u","v","planarMapUVS","parse","DataView","getUint32","fileSize","byteLength","ID4_SIZE","cursor","chunkType","setIndex","computeVertexNormals","magic","looping","transcoef","firstFrame","lastFrame","framesPerSecond","bodies","degToRad","relPos","relRot","relScale","parentObjInd","model","radVec","degX","degY","degZ","setFrameAndFollowing","animationFrameIndex","infos","c","setOpacityAndFollowing","animationClip","AnimClip","lines","lineIndex","content","l","trim","numOfModels","parseInt","line","parseFrameBlock","parseObjectBlock","parseLine","frameStep","subObj","AnimSubObj","slice","lwoBuffer","getResource","LWOLoader","lenInfos","lenFrames","Number","numOfInformationChannels","numOfKeyframes","frameNum","Stats","stats","setMode","domElement","style","position","left","top","body","visibility","renderStart","begin","renderDone","end","setFromCfg","config","cfgObj","cfgKey","lCfgKeyName","some","objKey","assignValue","cfgValue","parseValue","levels","surveyRadius","trackDist","smallTeleporter","manTeleporter","processCrystal","collHeight","collRadius","pickSphere","costOre","costRefinedOre","costCrystal","toolStore","storeObjects","selfPowered","powerBuilding","snaxULike","crystalDrain","damageCausesCallToArms","trainDriver","trainScanner","trainPilot","trainDynamite","functionCoef","oxygenCoef","engineSound","showHealthBar","BaseConfig","folder","dropPosAngleDeg","dropPosDist","aeFile","getByName","buildingType","TOOLSTATION","TELEPORT_PAD","DOCKS","POWER_STATION","BARRACKS","UPGRADE","GEODOME","ORE_REFINERY","GUNSTATION","TELEPORT_BIG","statsCache","BuildingStatsCfg","cfg","Building","EntityType","routeSpeed","soilDrillTime","looseDrillTime","medDrillTime","hardDrillTime","seamDrillTime","upgradeTime","singleWidthDig","repairValue","drillsound","drillfadesound","restPercent","energyDecayRate","canClearRubble","numOfToolsCanCarry","crossLand","rubbleCoef","pathCoef","routeAvoidance","useLegoManTeleporter","awarenessRange","canStrafe","enterToolStore","Array","isArray","sequenceIntervals","level","EntityStatsCfg","getPosition","copy","getRotation","rotation","onDiscover","visible","publishEvent","event","blockedEvents","includes","eventKey","isLocal","eventListener","callback","index","indexOf","splice","registerEventListener","entityKey","GameEvent","job","WorldEvent","JobCreateEvent","JobEvent","JobDeleteEvent","numRequested","RaiderRequested","collectType","CollectEvent","surface","SpawnDynamiteEvent","collectable","spawnPosition","SpawnMaterialEvent","entity","EntityAddedEvent","EntityRemovedEvent","JobType","JobState","CavernDiscovered","OreFoundEvent","building","BuildingUpgraded","raider","skill","RaiderTrained","CollectableType","CollectTargetType","fulfiller","jobstate","OPEN","assign","unassign","cancel","CANCELED","stopJob","isQualified","isQualifiedWithTool","isQualifiedWithTraining","onJobComplete","COMPLETE","Job","item","CARRY","isInArea","distanceTo","JOB_ACTION_RANGE","carries","getTargetPos","getTargetType","getCollectableType","CRYSTAL","GameState","numCrystal","EventBus","ORE","numOre","BUILDING_SITE","targetSite","addItem","getPriorityIdentifier","PublicJob","collectableType","targetPos","complete","resetTarget","targetBuilding","site","getClosestSiteThatRequires","targetType","getClosestBuildingByType","getTargetBuildingTypes","getDropPosition","unAssign","collectablesUndiscovered","collectables","CollectJob","BaseEntity","GameResultState","eventSuffix","SelectionEvent","LocalEvent","SurfaceSelectedEvent","BuildingSelected","RaiderSelected","vehicle","VehicleSelected","EntityDeselected","entityType","poly","animation","animationTimeout","selectionFrame","pickSphereRadius","carryJoint","setActivity","onAnimationDone","durationTimeMs","clearTimeout","activity","remove","children","polyModel","clone","polyPart","parentInd","animate","frameIndex","p","scale","hasOwnProperty","undefined","mat","nextFrame","standardDurationTimeMs","timeoutTimeMs","setTimeout","createPickSphere","pickSphereCenter","getPickSphereCenter","userData","selectable","createSelectionFrame","getBoundingBoxCenter","setFromObject","getCenter","sub","applyMatrix4","makeScale","selectionFrameTextureSize","ctx","strength","round","selectionFrameTexture","selectionMaterial","depthTest","selectionFrameSize","set","getAnimationEntityType","targetSurface","isExplodable","getDigPositions","DYNAMITE","ignite","worldMgr","sceneManager","scene","getCenterWorld","lookAt","collapse","AnimEntity","resource2","mesh2","SceneManager","registerMesh","emissive","depthWrite","resource","mesh","interval","clearInterval","CollectableEntity","WorkerMessageType","reset","resultState","RUNNING","levelFullName","numBrick","usedCrystals","neededCrystals","airlevel","selectedEntities","selectionType","buildings","buildingsUndiscovered","raiders","raidersUndiscovered","requestedRaiders","vehicles","vehiclesUndiscovered","buildingSites","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","discoveredCaverns","levelStartTime","levelStopTime","rewardConfig","priorityList","getBuildingsByType","isPowered","buildingTypes","bt","targetBuildings","closest","minDist","bPos","dist","distanceToSquared","needs","hasBuildingWithUpgrades","upgrades","hasVehicleWithSkill","skillName","getClosestTrainingSite","training","selectEntities","entities","previouslySelected","stillSelected","deselect","selectionEvents","freshlySelected","selectionEvent","select","len","GROUP","getSelectionType","getMaxRaiders","MAX_RAIDER_BASE","ADDITIONAL_RAIDER_PER_SUPPORT","discoverSurface","minX","TILESIZE","minZ","maxX","maxZ","discoverEntities","undiscovered","discovered","pos","dropMaterial","quantity","Dynamite","Crystal","Ore","quota","importance","scoreCrystals","crystals","Infinity","scoreTimer","gameTimeSeconds","timer","scoreCaverns","caverns","scoreConstructions","constructions","scoreOxygen","oxygen","scoreFigures","figures","SURFACE","BUILDING","PILOT","maxFps","debugHelper","DebugHelper","renderer","antialias","setClearColor","camera","controls","mouseButtons","LEFT","MIDDLE","RIGHT","selectEntitiesByRay","rx","ry","raycaster","setFromCamera","intersects","intersectObjects","terrain","floorGroup","selected","object","selectEntitiesInFrustum","r1x","r1y","r2x","r2y","startPoint","endPoint","EPSILON","updateProjectionMatrix","updateMatrixWorld","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","setFromMatrixPosition","matrixWorld","unproject","vectemp1","vectemp2","vectemp3","normalize","deep","MAX_VALUE","multiplyScalar","frustum","planes","setFromCoplanarPoints","normal","containsPoint","getSelectionCenter","setupScene","amb","cursorTorchlight","distance","startScene","renderInterval","animRequest","requestAnimationFrame","render","disposeScene","cancelAnimationFrame","dispose","meshRegistry","loadModels","root","getPath","AnimationEntityType","polyname","polykey","act","file","isLws","LWSCLoader","fontImageData","cols","rows","letters","chars","maxCharWidth","getActualCharacterWidth","rowPixelIndex","colPixelIndex","charHeight","extractData","actualWidth","startX","startY","alpha","createTextImage","text","maxWidth","autoCenter","determineRows","row","rowX","rowY","letterX","letterImgData","charAt","img","putImageData","spaceWidth","rowText","rowWidth","word","wordWidth","letter","letterImg","createTextMessage","msg","MSG","createCfgLoaded","totalResources","CFG","createAssetLoaded","assetIndex","assetName","assetObj","ASSET","createLoadDone","loadingTimeSeconds","DONE","MOUSE_BUTTON","POINTER_EVENT","KEY_EVENT","startLoadingFromCache","startLoading","startLoadingFromUrl","InitLoadingMessage","worker","onmessage","resourceByName","onAssetLoaded","onMessage","configuration","onInitialLoad","CACHE_MISS","onCacheMissed","onLoadDone","postMessage","basename","lBasename","resourceName","lName","getImageData","imageName","lImageName","getImage","getImageOrNull","textureName","lTextureName","lSharedTextureName","texture","needsUpdate","getMap","aeFilename","cfgRoot","AnimEntityLoader","getBitmapFont","fontCache","BitmapFont","withContext","background","setZIndex","zIndex","compareZ","layerA","layerB","aIndex","bIndex","resize","redraw","onRedraw","isActive","toCanvasCoords","windowX","windowY","clientRect","getBoundingClientRect","handlePointerEvent","eventEnum","handleKeyEvent","handleWheelEvent","fixedWidth","SPRITE_RESOLUTION_WIDTH","fixedHeight","SPRITE_RESOLUTION_HEIGHT","toScaledCoords","cx","cy","scaleX","scaleY","ScreenLayer","cursorName","createCursor","curUrl","revokeObjectURL","curImg","toDataURL","ScaledLayer","WALL_TYPE","screen","gameCanvasContainer","isInRect","preventDefault","Map","MOVE","DOWN","UP","eventType","nonBubblingClone","PointerEvent","bubbles","clientX","clientY","pointerType","button","ctrlKey","metaKey","shiftKey","layers","sort","WheelEvent","deltaX","deltaY","deltaZ","ratio","focus","eventMgr","EventManager","window","onWindowResize","cursorLayer","addLayer","CursorLayer","layer","offsetWidth","maxHeight","offsetHeight","idealHeight","firstLayer","rect","right","bottom","font","fillText","setLoadingMessage","enableGraphicMode","imgBackground","imgProgress","screenZoom","loadingBarWidth","drawImage","setLoadingState","BaseScreen","scrollAffected","needsRedraw","hover","pressed","actionName","targetIndex","checkHover","sx","sy","onHoverChange","checkSetPressed","setReleased","draw","labelImgLo","labelImgHi","loFont","label","hiFont","target","MainMenuBaseItem","imgNormal","imgHover","imgPressed","tooltip","menuCfg","items","scrollY","menuImage","titleImage","fullName","itemsLabel","MainMenuLabelButton","MainMenuIconButton","displayTitle","absY","MAIN","showMainMenu","selectLevel","levelKey","canScroll","levelCfg","imgActive","imgInactive","imgCross","unlocked","frontEndX","frontEndY","menuBMP","frontEndOpen","area","w","h","imgFirstLine","imgSecondLine","setFirstLine","setSecondLine","modeLevel","levelsCfg","levelTextCfg","LevelTextCfg","MainMenuPanel","panelImgData","panelPos","levelTextWindow","MainMenuWindow","tutorial","levelsByName","levelButton","MainMenuLevelButton","MainMenuLayer","winCfg","panelCfg","onLevelSelected","menus","title","LevelSelectLayer","showLevelSelection","levelName","options","shaping","matIndex","drillable","drillableHard","explodable","reinforcable","getByNum","typeNum","SurfaceType","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","GROUND","POWER_PATH","POWER_PATH_SITE","pathToTarget","getSpeed","speed","isOnRubble","isOnPath","moveToTarget","equals","findPathToTarget","changeActivity","FulfillerActivity","MOVING_RUBBLE","MOVING","determineStep","getTerrainHeight","pathStepTarget","step","setLength","shift","getSurfaceFromWorld","hasRubble","isPath","onChangeDone","location","GenericDeathEvent","WorldLocationEvent","GenericMonsterEvent","CrystalFoundEvent","UnderAttackEvent","LandslideEvent","PowerDrainEvent","SlugEmergeEvent","RaiderDiscoveredEvent","workInterval","followUpJob","jobSubPos","tools","skills","carryTarget","work","bind","NATIVE_FRAMERATE","resetWorkInterval","surfaceJobType","workType","SurfaceJobType","DRILL","drillTimeMs","surfaceType","DRILLING","seamLevel","vec","applyAxisAngle","addCollectable","STANDING","completeJob","CLEAR_RUBBLE","jobPos","SHOVELING","REINFORCE","BLOW","dynamite","dropItem","PICKING","pickupItem","DROPPING","TRAIN","TRAINING","GET_TOOL","tool","EAT","EATING","setJob","hasTool","toolname","hasSkill","skillKey","MovableEntity","carryValue","getValue","DRIVER","ENGINEER","GEOLOGIST","SAILOR","DEMOLITION","HAMMER","SHOVEL","SPANNER","FREEZERGUN","LASER","PUSHERGUN","BIRDSCARER","RaiderTools","isNaN","findPath","RAIDER","isDriving","FulfillerEntity","requiredTools","requiredSkills","requiredTool","requiredSkill","RaiderSkills","digPos","reinforce","reduceRubble","SurfaceJob","placedItems","placed","updateTexture","create","wallType","topLeftVertex","bottomRightVertex","topRightVertex","bottomLeftVertex","topLeftHeight","topRightHeight","bottomRightHeight","bottomLeftHeight","uvOffset","INVERTED_CORNER","WALL","WEIRD_CREVICE","Boolean","uv","bufferVertices","bufferNormals","addFaceAndNormals","subVectors","cross","uvIndexes","bufferVertexUvs","bufferGeometry","BufferAttribute","copyVector3sArray","copyVector2sArray","heightOffset","containedOres","containedCrystals","reinforced","jobs","surfaceRotation","fallinTimeout","fallinGrp","needsMeshUpdate","surfaceJob","hasJobType","discoverNeighbors","foundCave","surf","getSurfaceOrNull","cancelJobs","getSurface","isSupported","updateSurfaceMeshes","updateWorldMatrix","crystal","dropContainedOre","dropAmount","updateJobColor","surfLeft","surfTopLeft","surfTop","surfTopRight","surfRight","surfBottomRight","surfBottom","surfBottomLeft","isHighGround","surf1","surf2","surf3","updateMesh","force","updateGeometry","cancelReinforceJobs","otherJobs","textureSet","texturebasename","updatePowerPathTexture","CORNER","accessMaterials","pathSum","PI","avgHeight","sum","cnt","args","SurfaceGeometry","HEIGHT_MULTIPLER","shininess","setHex","isWalkable","isDrillable","isDrillableHard","isReinforcable","isDigable","digPosition","setFallinLevel","fallinLevel","originPos","findFallInOrigin","findFallInTarget","scheduleFallin","targetX","targetY","createFallin","fallinPosition","dx","dy","rotateOnAxis","atan2","m","pathTo","node","curr","unshift","PathMap","PredugMap","astar","search","graph","cleanDirty","heuristic","heuristics","manhattan","openHeap","BinaryHeap","f","closestNode","markDirty","currentNode","pop","closed","neighbors","il","neighbor","isWall","gScore","getCost","beenVisited","visited","rescoreElement","pos0","pos1","abs","diagonal","D2","sqrt","d1","d2","cleanNode","gridIn","nodes","grid","dirtyNodes","GridNode","init","ret","graphString","rowDebug","weight","fromNeighbor","scoreFunction","element","sinkDown","bubbleUp","parentN","elemScore","child2N","child1N","swap","child1Score","child1","child2","surfaces","roofGroup","graphWalk","cachedPaths","bSurf","worldPosition","Surface","Graph","clear","canFly","canSwim","startSurface","endSurface","cacheIdentifier","cachedPath","get","searchPath","startNode","endNode","worldPath","leftSurface","topSurface","rightSurface","bottomSurface","leftSurface2","topSurface2","rightSurface2","bottomSurface2","loadTerrain","levelConf","tileSize","blockSize","Terrain","themeName","terrainMap","pathMap","surfaceMap","predugMap","cryOreMap","fallinMap","erodeMap","surfaceTypeNum","predugLevel","CAVERN_EXPOSED","SLUG_HOLE_EXPOSED","SLUG_HOLE_HIDDEN","CAVERN_HIDDEN","pathMapLevel","NONE","RUBBLE","currentCryOre","powerSwitch","powerLink","spawning","dropPos","applyEuler","hasMaxLevel","upgrade","loadObjectList","objectListConf","values","olObject","lTypeName","worldX","xPos","worldZ","yPos","worldY","radHeading","heading","update","setTorchPosition","Raider","BuildingEntity","primaryPathSurface","secondaryOffset","secondarySurface","pathOffset","pathSurface","debug","onLevelComplete","nerpInterval","registers","fill","timers","scriptLines","statements","macrosByName","labelsByName","halted","programCounter","messages","messagePermit","startExecution","that","execute","pauseExecution","checkRegister","register","num","Error","checkRegisterValue","getR","setR","addR","setTimer","Date","getTime","getTimer","setLevelCompleted","setLevelFail","FAILED","setTutorialFlags","setMessagePermit","messagesAllowed","setBuildingsUpgradeLevel","typeName","setToolStoreLevel","setTeleportPadLevel","setPowerStationLevel","setBarracksLevel","getToolStoresBuilt","getMinifiguresOnLevel","getCrystalsCurrentlyStored","getObjectiveSwitch","setMessageTimerValues","arg1","arg2","arg3","getMessageTimer","cameraUnlock","setMessage","messageNumber","arrowDisabled","txt","setCameraGotoTutorial","getTutorialBlockIsGround","getTutorialBlockIsPath","getUnitAtBlock","getOxygenLevel","getObjectiveShowing","addPoweredCrystals","disallowAll","getPoweredPowerStationsBuilt","getPoweredBarracksBuilt","getRecordObjectAtTutorial","getHiddenObjectsFound","callMethod","methodName","methodArgs","setRegisterMatch","addRegisterMatch","getRegisterMatch","setTimerMatch","getTimerMatch","lMethodName","memberName","apply","conditional","conditionResult","executeStatement","expression","invoke","argValues","comparator","jump","statement","nerpScript","nerpRunner","NerpRunner","includeName","includedRunner","NerpParser","concat","firstLine","macroLines","mLine","append","macroLine","macroCall","replaceMacros","labelMatch","preProcess","labelName","macro","RegExp","number","opSplit","brackets","spaceSplit","jumpMatch","priorities","levelDefault","current","toggle","enabled","upOne","tmp","entry","PriorityEntry","pushToTop","getPriority","levelPriorityEntry","pow","spawnRaiderInterval","checkSpawnRaiders","CHECK_SPANW_RAIDER_TIMER","DynamiteJob","setup","gameScreen","reward","PriorityList","TerrainLoader","oListFile","ObjectListLoader","nerpFile","nerpMessageFile","onLevelEnd","now","stop","setSize","getTerrainIntersectionPoint","point","intersect","intersectObject","spawnBuildings","station","walkOutPos","MoveJob","selectStart","setWorldManager","worldManager","startSelection","changeSelection","screenX","screenY","clearRect","strokeStyle","lineWidth","strokeRect","rightDown","intersectionPoint","getTerrainPositionFromEvent","SECONDARY","createSurfaceJob","dispatchEvent","DEV_MODE","t","surfJob","relX","relY","hidden","addChild","child","updatePosition","drawHover","drawTooltip","onClick","isInactive","inRect","stateChanged","checkClick","checkRelease","release","notifyRedraw","xOut","yOut","xIn","yIn","movedIn","updateAnimation","onDone","diffX","diffY","sign","setMovedIn","toggleState","PANEL_ANIMATION_MULTIPLIER","BaseElement","btnCfg","buttonType","imgDisabled","normalFile","highlightFile","pressedFile","disabledFile","textAlign","buttonsCfg","labelOre","SideBarLabel","panelButtonCrystalSideBarOre","labelCrystal","panelButtonCrystalSideBarCrystals","imgNoCrystal","imgSmallCrystal","imgUsedCrystal","imgOre","updateQuantities","BRICK","curX","curY","imgCrystal","Panel","ButtonCfg","panelButtonInfoDockGoto","panelButtonInfoDockClose","panelButtonPriorityListDisable","panelButtonPriorityListUpOne","panelButtonPriorityListClose","panelButtonPriorityListReset","panelButtonTopPanelCallToArms","panelButtonTopPanelOptions","panelButtonTopPanelPriorities","panelRadar","panelCrystalSideBar","panelTopPanel","panelInformation","panelPriorityList","panelCameraControl","panelInfoDock","panelEncyclopedia","btnCfgValue","arr","ButtonRadarCfg","ButtonCrystalSideBarCfg","ButtonTopCfg","ButtonInformationCfg","ButtonPriorityListCfg","ButtonCameraControlCfg","ButtonInfoDockCfg","panelButtonInformationToggle","panelButtonInformationFunction","panelButtonCameraControlZoomIn","panelButtonCameraControlZoomOut","panelButtonCameraControlCycleBuildings","panelButtonCameraControlRotate","BaseButtonCfg","buttonImageFilename","panelFillCfg","panelOverlayCfg","overlay","btnToggle","Button","panelButtonRadarToggle","btnMap","panelButtonRadarMapView","btnTagged","panelButtonRadarTaggedObjectView","panelButtonRadarZoomIn","panelButtonRadarZoomOut","infoMessageEntryConfig","textImage","infoImage","imageFilename","textInfoMessageConfig","imgAir","currentMessage","messageTimeout","crystalFound","TextInfoMessage","textCrystalFound","msgSpaceToContinue","textSpaceToContinue","cavernDiscovered","textCavernDiscovered","oreFound","textOreFound","msgAirSupplyLow","textAirSupplyLow","msgAirSupplyRunningOut","textAirSupplyRunningOut","msgGameCompleted","textGameCompleted","msgManTrained","textManTrained","msgUnitUpgraded","textUnitUpgraded","textInfoMessage","timeout","unsetMessage","txtX","infoX","tooltipDisabled","hotkey","menuItemCfg","itemKey","parentWidth","menuIndex","isDisabled","updateState","autoRedraw","targetState","numOfItems","onBackPanel","backBtn","iconPanelButtons","backBtnCfg","IconPanelBackButtonCfg","frameImgCfg","imgName","imgNameWoBackName","addMenuItem","menuItemGroup","MenuItemCfg","menuItem","IconPanelButton","IconSubPanel","itemDrill","addWallMenuItem","itemReinforce","itemDynamite","jobType","selectedSurface","SelectBasePanel","isPowerPath","neededByType","assignedByType","onSiteByType","needed","checkComplete","neededType","CompletePowerPathJob","pathItem","ore","BuildingSite","clearRubbleItem","upgradeItem","feedItem","selectedRaiders","EatJob","getToolItem","trainItem","every","TrainJob","addGetToolItem","toolstation","GetToolJob","subPanels","mainPanel","addSubPanel","buildingPanel","BuildingPanel","smallVehiclePanel","SmallVehiclePanel","largeVehiclePanel","LargeVehiclePanel","selectWallPanel","SelectWallPanel","selectFloorPanel","SelectFloorPanel","selectRubblePanel","SelectRubblePanel","selectBuildingPanel","SelectBuildingPanel","selectRaiderPanel","SelectRaiderPanel","trainRaiderPanel","TrainRaiderPanel","getToolPanel","GetToolPanel","selectVehiclePanel","SelectVehiclePanel","teleportRaider","IconPanelButtonLabel","buildingItem","smallVehicleItem","largeVehicleItem","selectSubPanel","childPanel","targetPanel","subPanel","updated","isPressed","btnCallToArms","ToggleButton","btnOptions","btnPriorities","infoMessagesEntryConfig","InfoButtonCfg","animationSpeedX","animationSpeedY","message","buttonClicked","showButton","slideToTarget","Promise","resolve","infoMessagesConfig","informationPanel","stackButtons","gotoLatestMessage","dropLatestMessage","InfoDockButton","infoGenericDeath","infoGenericMonster","infoCrystalFound","infoUnderAttack","infoLandslide","infoPowerDrain","infoSlugEmerge","infoFoundMinifigure","btn","slideStackIntoPosition","then","slideInButton","reduce","prev","cur","pushFirst","setText","promises","all","panelRadarFill","panelRadarOverlay","panelMessages","panelMessagesSide","PanelCfg","prioPositions","prioByName","buttonCfg","setList","aiPriorityTrain","aiPriorityGetIn","aiPriorityCrystal","aiPriorityOre","aiPriorityRepair","aiPriorityClearing","aiPriorityDestruction","aiPriorityConstruction","aiPriorityReinforce","aiPriorityRecharge","prioButton","sfx","timing","flag","InfoMessagesEntryConfig","sfxName","TextInfoMessageEntryConfig","panels","addPanel","panel","hit","onOptionsShow","panelsCfg","PanelsCfg","ButtonsCfg","InformationPanel","InfoDockPanel","InfoMessagesConfig","priorityButtonsConfig","PriorityButtonsConfig","priorityPositionsConfig","PriorityPositionsEntry","PriorityListPanel","TopPanel","panelMain","MainPanel","PanelCrystalSideBar","MessagePanel","TextInfoMessageConfig","RadarPanel","GuiBaseLayer","assignInterval","assignJobs","JOB_SCHEDULE_INTERVAL","availableJobs","j","unemployedRaider","closestRaider","closestRaiderIndex","minDistance","closestToolRaider","closestToolRaiderIndex","minToolDistance","closestToolstationPosition","closestNeededTool","closestTrainingRaider","closestTrainingRaiderIndex","minTrainingDistance","closestTrainingLocation","closestNeededTraining","raiderPosition","neededTool","closestToolstation","toolstationPosition","neededTraining","trainingLocation","imgTitle","titleRelX","titleRelY","btnNext","btnBack","imgBack","imgParagraph","paragraph","titleFont","titleWindow","nextButtonCfg","nextParagraph","backButtonCfg","prevParagraph","objectiveText","objectiveBackImgCfg","textFont","textWindow","setParagraph","messagePanel","itemCfg","labelX","state","imgTextNormal","description","imgTextHover","imgLabelOffNormal","labelOff","imgLabelOffHover","imgLabelOnNormal","labelOn","imgLabelOnHover","imgLabel","sliderX","onValueChanged","imgLeft","imgOff","imgOn","imgRight","leftBtn","btnLeftNormal","btnLeftHover","rightBtn","btnRightNormal","btnRightHover","posX","dw","loImg","hiImg","itemsTrigger","itemsNext","menuFont","MenuLabelItem","itemsCycle","MenuCycleItem","itemsSlider","MenuSliderItem","layersByKey","MenuLayer","pausePanel","selectLayer","onRepeatBriefing","MenuBasePanel","onAbortGame","onRestartGame","image","okWindow","cancelWindow","contrastOverlay","Rect","dialogCfg","DialogCfg","panelPause","PausePanel","panelOptions","OptionsPanel","panelBriefing","BriefingPanel","BriefingPanelCfg","setActivePanel","lEventKey","gameLayer","GameLayer","selectionLayer","SelectionLayer","guiLayer","GuiMainLayer","overlayLayer","OverlayLayer","WorldManager","jobSupervisor","Supervisor","restartLevel","startLevel","setupAndStartLevel","objective","objectiveImage640x480","conf","imgNormalFilepath","imgHoverFilepath","imgPressedFilepath","imgDisabledFilepath","resultIndex","resultLastIndex","images","boxes","fonts","texts","uncoverTimeout","backgroundImg","wallpaper","filePath","boxImages","fontKey","labelFont","backFont","resultsLayer","btnSave","btnAdvance","descriptionTextLayer","btnLayer","RewardScreenButton","saveButton","advanceButton","onAdvance","uncoverResult","levelFullNameImg","resultText","quitText","completeText","failedText","resultValues","percentString","timeString","score","gameResultTextImg","box","vertSpacing","descriptionTextImg","textPos","tx","ty","actual","lessIsMore","padLeft","padding","seconds","ss","minutes","mm","loadingScreen","LoadingScreen","wadfileSelectModal","mainMenuScreen","MainMenuScreen","GameScreen","rewardScreen","RewardScreen","params","URLSearchParams"],"mappings":"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","file":"333.index.js","sourcesContent":["import { Modal } from 'bootstrap'\n\nexport class WadFileSelectionModal {\n\n    public onStart: (wad0Url, wad1Url) => any = null\n\n    private readonly modal: Modal\n\n    constructor(parentId: string) {\n        const rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        rootElement.classList.add('modal')\n        rootElement.tabIndex = -1\n        rootElement.setAttribute('role', 'dialog')\n        rootElement.setAttribute('aria-hidden', 'true')\n\n        const modalDialog = rootElement.appendChild(document.createElement('div'))\n        modalDialog.classList.add('modal-dialog')\n        rootElement.setAttribute('role', 'document')\n\n        const modalContent = modalDialog.appendChild(document.createElement('div'))\n        modalContent.classList.add('modal-content')\n\n        const modalHeader = modalContent.appendChild(document.createElement('div'))\n        modalHeader.classList.add('modal-header')\n        const modalTitle = modalHeader.appendChild(document.createElement('h5'))\n        modalTitle.classList.add('modal-title')\n        modalTitle.innerText = 'Load .wad files'\n        modalTitle.id = 'wadfileSelectModalLabel'\n        rootElement.setAttribute('aria-labelledby', modalTitle.id)\n\n        const modalBody = modalContent.appendChild(document.createElement('div'))\n        modalBody.classList.add('modal-body')\n\n        const hint = modalBody.appendChild(document.createElement('p'))\n        hint.innerText = 'Assets not included! In order to play the game, please select the game files.'\n\n        const navTabs = modalBody.appendChild(document.createElement('nav'))\n        const navTabList = navTabs.appendChild(document.createElement('div'))\n        navTabList.id = 'nav-tab'\n        navTabList.classList.add('nav', 'nav-tabs')\n        navTabList.setAttribute('role', 'tablist')\n\n        const navFileBtn = WadFileSelectionModal.appendNavButton(navTabList, true, 'nav-file-tab', 'nav-file', 'Local files (recommended)')\n        const navUrlBtn = WadFileSelectionModal.appendNavButton(navTabList, false, 'nav-url-tab', 'nav-url', 'Online from URL')\n\n        const navTabContent = modalBody.appendChild(document.createElement('div'))\n        navTabContent.classList.add('tab-content')\n        this.appendNavFileTab(navTabContent, navFileBtn.id)\n        this.appendNavUrlTab(navTabContent, navUrlBtn.id)\n\n        // rootElement has to be a valid bootstrap HTML modal before we can instantiate it\n        this.modal = new Modal(rootElement, {backdrop: 'static', keyboard: false})\n    }\n\n    private static appendNavButton(parent: HTMLDivElement, active: boolean, id: string, controlTarget: string, innerText: string) {\n        const navBtn = parent.appendChild(document.createElement('button'))\n        navBtn.classList.add('nav-link')\n        if (active) navBtn.classList.add('active')\n        navBtn.id = id\n        navBtn.setAttribute('data-bs-toggle', 'tab')\n        navBtn.setAttribute('data-bs-target', '#' + controlTarget)\n        navBtn.type = 'button'\n        navBtn.setAttribute('role', 'tab')\n        navBtn.setAttribute('aria-controls', controlTarget)\n        navBtn.setAttribute('aria-selected', String(active))\n        navBtn.innerText = innerText\n        return navBtn\n    }\n\n    private appendNavFileTab(parent: HTMLDivElement, labelledBy: string) {\n        const navFileTab = WadFileSelectionModal.appendNavTab(parent, true, 'nav-file', labelledBy)\n\n        const wad0File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad0-file', 'LegoRR0.wad')\n        const wad1File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad1-file', 'LegoRR1.wad')\n\n        const btnStartFile = navFileTab.appendChild(document.createElement('button'))\n        btnStartFile.type = 'submit'\n        btnStartFile.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartFile.id = 'button-start-file'\n        btnStartFile.innerText = 'Start Game'\n        btnStartFile.addEventListener('click', () => {\n            btnStartFile.disabled = true\n            const wad0FileUrl = URL.createObjectURL(wad0File.files[0])\n            const wad1FileUrl = URL.createObjectURL(wad1File.files[0])\n            this.onStart(wad0FileUrl, wad1FileUrl)\n        })\n    }\n\n    private static appendWadFileGroup(parent: HTMLDivElement, id: string, filename: string) {\n        const wadFileGroup = parent.appendChild(document.createElement('div'))\n        wadFileGroup.classList.add('my-3')\n        const wadFileLabel = wadFileGroup.appendChild(document.createElement('label'))\n        wadFileLabel.setAttribute('for', id)\n        wadFileLabel.classList.add('form-label')\n        wadFileLabel.innerHTML = 'Select <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadFileInput = wadFileGroup.appendChild(document.createElement('input'))\n        wadFileInput.type = 'file'\n        wadFileInput.classList.add('form-control')\n        wadFileInput.id = id\n        wadFileInput.required = true\n        return wadFileInput\n    }\n\n    private appendNavUrlTab(parent: HTMLDivElement, labelledBy: string) {\n        const navUrlTab = WadFileSelectionModal.appendNavTab(parent, false, 'nav-url', labelledBy)\n\n        const urlHint = navUrlTab.appendChild(document.createElement('div'))\n        urlHint.classList.add('my-3')\n        urlHint.innerText = 'Direct links with correct Allow-Origin-CORS-Headers required here.'\n\n        const wad0Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad0-url', 'LegoRR0.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n        const wad1Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad1-url', 'LegoRR1.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n\n        const btnStartUrl = navUrlTab.appendChild(document.createElement('button'))\n        btnStartUrl.type = 'submit'\n        btnStartUrl.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartUrl.id = 'button-start-url'\n        btnStartUrl.innerText = 'Start Game'\n        btnStartUrl.addEventListener('click', () => {\n            btnStartUrl.disabled = true\n            // TODO show loading progress for WAD files\n            this.onStart(wad0Url.value, wad1Url.value)\n        })\n    }\n\n    private static appendNavTab(parent: HTMLDivElement, active: boolean, id: string, labelledBy: string) {\n        const navTab = parent.appendChild(document.createElement('div'))\n        navTab.classList.add('tab-pane', 'fade')\n        if (active) navTab.classList.add('show', 'active')\n        navTab.id = id\n        navTab.setAttribute('role', 'tabpanel')\n        navTab.setAttribute('aria-labelledby', labelledBy)\n        return navTab\n    }\n\n    private static appendWadUrlGroup(parent: HTMLDivElement, id: string, filename: string, example: string) {\n        const wadUrlGroup = parent.appendChild(document.createElement('div'))\n        wadUrlGroup.classList.add('my-3')\n        const wadUrlLabel = wadUrlGroup.appendChild(document.createElement('label'))\n        wadUrlLabel.setAttribute('for', id)\n        wadUrlLabel.classList.add('form-label')\n        wadUrlLabel.innerHTML = 'Enter url for <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadUrlInput = wadUrlGroup.appendChild(document.createElement('input'))\n        wadUrlInput.type = 'url'\n        wadUrlInput.classList.add('form-control')\n        wadUrlInput.id = id\n        wadUrlInput.required = true\n        wadUrlInput.value = example\n        return wadUrlInput\n    }\n\n    public show() {\n        this.modal.show()\n    }\n\n    public hide() {\n        this.modal.hide()\n    }\n\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"index.worker.js\");\n}\n","export class InitLoadingMessage {\n\n    wad0FileUrl: string\n    wad1FileUrl: string\n\n    constructor(wad0FileUrl: string, wad1FileUrl: string) {\n        this.wad0FileUrl = wad0FileUrl\n        this.wad1FileUrl = wad1FileUrl\n    }\n\n}\n","/**\n * creates a new context with the specified dimensions.\n * @param width: the desired width of the new context\n * @param height: the desired height of the new context\n * @returns RenderingContext the newly created canvas\n */\nexport function createContext(width, height) {\n    if (width < 1 || height < 1) {\n        console.error('Can\\'t create context with size ' + width + ' x ' + height);\n        return createDummyContext(64, 64);\n    }\n    const canvas = document.createElement('canvas');\n    canvas.setAttribute('width', width);\n    canvas.setAttribute('height', height);\n    const context = canvas.getContext('2d');\n    context.width = width;\n    context.height = height;\n    return context;\n}\n\n/**\n * This method is intended to increase stability by providing an (ugly) placeholder image in case the right one is missing\n * @param width: expected width of the original image\n * @param height: expected height of the original image\n */\nexport function createDummyContext(width, height) {\n    const result = createContext(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            if (x / 16 % 2 === y / 16 % 2) {\n                result.fillStyle = 'rgb(0,255,255)';\n            } else {\n                result.fillStyle = 'rgb(255,0,255)';\n            }\n            result.fillRect(x, y, 16, 16);\n        }\n    }\n    return result;\n}\n\nexport function createDummyImgData(width, height) {\n    const result = new ImageData(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            const e = x / 16 % 2 === y / 16 % 2;\n            for (let px = x; px < x + 16; px++) {\n                for (let py = y; py < y + 16; py++) {\n                    setPixel(result, px, py, e ? 0 : 255, e ? 255 : 0, 255);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport function setPixel(imgData, x, y, r, g, b, a = 255) {\n    const n = (y * imgData.width + x) * 4;\n    imgData.data[n] = r;\n    imgData.data[n + 1] = g;\n    imgData.data[n + 2] = b;\n    imgData.data[n + 3] = a;\n}\n\nexport function getPixel(imgData, x, y) {\n    const n = (y * imgData.width + x) * 4;\n    return {r: imgData.data[n], g: imgData.data[n + 1], b: imgData.data[n + 2], a: imgData.data[n + 3]};\n}\n\nexport function copyPixel(originData, targetData, x, y) {\n    const p = getPixel(originData);\n    setPixel(targetData, p.r, p.g, p.b, p.a);\n}\n","export function getPath(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n","export function getFilename(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '')\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/')\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max)\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2\n}\n","export class AnimationEntityType {\n\n    carryNullName: string = ''\n    mediumPoly: {} = {}\n    highPoly: {} = {}\n    fPPoly: {} = {}\n    activities = {}\n\n}\n","/**\n * @author Marcus-Bizal https://github.com/marcbizal\n * patched by Scarabol\n *\n * This loader loads LWOB files exported from LW6.\n *\n * Support\n *  -\n */\n\nimport { BufferAttribute, BufferGeometry, Color, DoubleSide, Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { decodeFilepath, decodeString, getFilename } from '../core/Util'\nimport { ResourceManager } from './ResourceManager'\n\n// HEADER SPEC //\nconst LWO_MAGIC = 0x4C574F42 // \"LWOB\"\nconst OFF_MAGIC = 8\n\n/********************/\n/* TYPE SIZES START */\n/********************/\n\nconst ID4_SIZE = 4\nconst I1_SIZE = 1\nconst I2_SIZE = 2\nconst I4_SIZE = 4\nconst F4_SIZE = 4\n\nconst COL4_SIZE = 4\nconst VEC12_SIZE = 12\nconst IP2_SIZE = 2\nconst FP4_SIZE = 4\nconst DEG4_SIZE = 4\n\n/********************/\n/*  TYPE SIZES END  */\n/********************/\n\n/*********************/\n/* CHUNK TYPES START */\n/*********************/\n\nconst LWO_FORM = 0x464F524D\nconst LWO_PNTS = 0x504E5453\nconst LWO_SFRS = 0x53524653\nconst LWO_POLS = 0x504F4C53\nconst LWO_CRVS = 0x43525653\nconst LWO_PCHS = 0x50434853\nconst LWO_SURF = 0x53555246\n\nconst CHUNK_HEADER_SIZE = 8\nconst SUBCHUNK_HEADER_SIZE = 6\n\n/*********************/\n/*  CHUNK TYPES END  */\n/*********************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\nconst SURF_COLR = 0x434F4C52\nconst SURF_FLAG = 0x464C4147\n\n// Base Shading Values (Fixed Point)\nconst SURF_LUMI = 0x4C554D49\nconst SURF_DIFF = 0x44494646\nconst SURF_SPEC = 0x53504543\nconst SURF_REFL = 0x5245464C\nconst SURF_TRAN = 0x5452414E\n\n// Base Shading Values (Floating Point)\nconst SURF_VLUM = 0x564C554D\nconst SURF_VDIF = 0x56444946\nconst SURF_VSPC = 0x56535043\nconst SURF_VRFL = 0x5646524C\nconst SURF_VTRN = 0x5654524E\n\nconst SURF_GLOS = 0x474C4F53\nconst SURF_RFLT = 0x52464C54\nconst SURF_RIMG = 0x52494D47\nconst SURF_RIND = 0x52494E44\nconst SURF_EDGE = 0x45444745\nconst SURF_SMAN = 0x534D414E\n\n/**************************/\n/*  SURF DEFINITIONS END  */\n/**************************/\n\n/*****************************/\n/* TEXTURE DEFINITIONS START */\n/*****************************/\n\n// Start of Definition\nconst SURF_CTEX = 0x43544558\nconst SURF_DTEX = 0x44544558\nconst SURF_STEX = 0x53544558\nconst SURF_RTEX = 0x52544558\nconst SURF_TTEX = 0x54544558\nconst SURF_LTEX = 0x4C544558\nconst SURF_BTEX = 0x42544558\n\n// Flags\nconst SURF_TFLG = 0x54464C47\n\n// Location and Size\nconst SURF_TSIZ = 0x5453495A\nconst SURF_TCTR = 0x54435452\nconst SURF_TFAL = 0x5446414C\nconst SURF_TVEL = 0x5456454C\n\n// Color\nconst SURF_TCLR = 0x54434C52\n\n// Value\nconst SURF_TVAL = 0x54434C52\n\n// Bump Amplitude\nconst SURF_TAMP = 0x54414D50\n\n// Image Map\nconst SURF_TIMG = 0x54494D47\n\n// Image Alpha\nconst SURF_TALP = 0x54414C50\n\n// Image Wrap Options\nconst SURF_TWRP = 0x54575250\n\n// Antialiasing Strength\nconst SURF_TAAS = 0x54414153\n\n// Texture Opacity\nconst SURF_TOPC = 0x544F5043\n\n/*****************************/\n/*  TEXTURE DEFINITIONS END  */\n/*****************************/\n\n/*************************/\n/* FLAG DEFINITION START */\n/*************************/\n\nconst LUMINOUS_BIT = 1\nconst OUTLINE_BIT = 2\nconst SMOOTHING_BIT = 4\nconst COLORHIGHLIGHTS_BIT = 8\nconst COLORFILTER_BIT = 16\nconst OPAQUEEDGE_BIT = 32\nconst TRANSPARENTEDGE_BIT = 64\nconst SHARPTERMINATOR_BIT = 128\nconst DOUBLESIDED_BIT = 256\nconst ADDITIVE_BIT = 512\nconst SHADOWALPHA_BIT = 1024\n\n/*************************/\n/*  FLAG DEFINITION END  */\n/*************************/\n\n/*************************/\n/* TFLG DEFINITION START */\n/*************************/\n\nconst XAXIS_BIT = 1\nconst YAXIS_BIT = 2\nconst ZAXIS_BIT = 4\nconst WORLDCOORDS_BIT = 8\nconst NEGATIVEIMAGE_BIT = 16\nconst PIXELBLENDING_BIT = 32\nconst ANTIALIASING_BIT = 64\n\n/*************************/\n/*  TFLG DEFINITION END  */\n\n/*************************/\n\nfunction getVector3AtOffset(view, offset) {\n    let vector = new Vector3()\n    vector.x = view.getFloat32(offset)\n    vector.y = view.getFloat32(offset + F4_SIZE)\n    vector.z = view.getFloat32(offset + (F4_SIZE * 2))\n    return vector\n}\n\nfunction planarMapUVS(geometry, vertices, uvs, indices, materialIndex, size, center, flags) {\n    // Check to ensure that one of the flags is set, if not throw an error.\n    const mask = XAXIS_BIT | YAXIS_BIT | ZAXIS_BIT\n    if (flags & mask) {\n        for (let group of geometry.groups) {\n            if (group.materialIndex !== materialIndex) continue\n\n            for (let i = group.start; i < group.start + group.count; i++) {\n\n                let vertexIndex = indices[i] * 3\n                let x = vertices[vertexIndex] - center.x\n                let y = vertices[vertexIndex + 1] - center.y\n                let z = vertices[vertexIndex + 2] - center.z\n\n                let uvIndex = indices[i] * 2\n                let u = 0\n                let v = 0\n\n                if (flags & XAXIS_BIT) {\n                    u = z / size.z + 0.5\n                    v = y / size.y + 0.5\n                } else if (flags & YAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = z / size.z + 0.5\n                } else if (flags & ZAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = y / size.y + 0.5\n                }\n\n                uvs[uvIndex] = u\n                uvs[uvIndex + 1] = v\n            }\n        }\n    } else {\n        // console.warn(\"LWOLoader.planarMapUVS: No axis bit is set!\"); // TODO what is this about\n    }\n}\n\nexport class LWOLoader {\n\n    COUNTER_CLOCKWISE: false\n\n    path: string = ''\n    verbose: boolean = false\n    materials: MeshPhongMaterial[] = []\n    geometry: BufferGeometry = new BufferGeometry()\n    vertices: Float32Array = null\n    indices: Uint16Array = null\n    uvs: Float32Array = null\n\n    constructor(path: string, verbose: boolean = false) {\n        this.verbose = verbose\n        this.path = path\n        if (this.verbose) console.log('LWO path: ' + this.path)\n    }\n\n    parsePoints(view, chunkOffset, chunkSize) {\n        if (chunkSize % VEC12_SIZE !== 0) {\n            console.error('LWOLoader.parse: F12 does not evenly divide into chunk size (' + chunkSize + '). Possible corruption.')\n            return\n        }\n\n        let numVertices = (chunkSize / F4_SIZE) / 3\n        this.vertices = new Float32Array(numVertices * 3)\n        this.uvs = new Float32Array(numVertices * 2)\n\n        for (let i = 0; i < numVertices; i++) {\n            let vertexIndex = i * 3\n            let vertexOffset = vertexIndex * F4_SIZE\n            this.vertices[vertexIndex] = view.getFloat32(chunkOffset + vertexOffset) \t\t\t\t// x\n            this.vertices[vertexIndex + 1] = view.getFloat32(chunkOffset + vertexOffset + F4_SIZE) \t// y\n            this.vertices[vertexIndex + 2] = view.getFloat32(chunkOffset + vertexOffset + (F4_SIZE * 2)) \t// z\n        }\n    }\n\n    parseSurfaceNames(buffer, chunkOffset, chunkSize) {\n        let textChunk = new TextDecoder().decode(new Uint8Array(buffer, chunkOffset, chunkSize))\n        let surfaceNames = textChunk.split('\\0').filter(function (s) {\n            return s !== ''\n        })\n\n        for (let i = 0; i < surfaceNames.length; i++) {\n            const new_material = new MeshPhongMaterial()\n            new_material.name = surfaceNames[i]\n            new_material.side = DoubleSide\n\n            this.materials.push(new_material)\n        }\n        if (this.verbose) console.log('LWO contains ' + this.materials.length + ' materials with following names: ' + surfaceNames)\n    }\n\n    parsePolygons(view, chunkOffset, chunkSize) {\n        // Gather some initial data so that we can get the proper size\n        let totalNumIndices = 0\n        let offset = 0\n        while (offset < chunkSize) {\n            const numIndices = view.getInt16(chunkOffset + offset)\n            const materialIndex = view.getInt16(chunkOffset + offset + 2 + (numIndices * 2))\n\n            this.geometry.addGroup(totalNumIndices, (numIndices - 2) * 3, materialIndex - 1)\n\n            totalNumIndices += (numIndices - 2) * 3\n            offset += 4 + (numIndices * 2)\n        }\n\n        offset = 0\n        let currentIndex = 0\n        this.indices = new Uint16Array(totalNumIndices)\n        while (offset < chunkSize) {\n            let numIndices = view.getInt16(chunkOffset + offset)\n\n            offset += 2\n\n            let faceIndices = new Int16Array(numIndices)\n            for (let i = 0; i <= numIndices; i++) {\n                faceIndices[i] = view.getInt16(chunkOffset + offset + (i * 2))\n            }\n\n            for (let i = 0; i < numIndices - 2; i++) {\n                if (this.COUNTER_CLOCKWISE) {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                } else {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                }\n            }\n\n            offset += 2 + (numIndices * 2)\n        }\n    }\n\n    parseSurface(view, buffer, chunkOffset, chunkSize) {\n        let offset = 0\n        while (view.getUint8(chunkOffset + offset) !== 0) offset++\n\n        let materialName = decodeString(new Uint8Array(buffer, chunkOffset, offset))\n        if (this.verbose) console.log('Parsing surface: ' + materialName)\n        let materialIndex = -1\n        let material: MeshPhongMaterial = null\n\n        let textureFlags = 0\n        let textureSize = new Vector3(0, 0, 0)\n        let textureCenter = new Vector3(0, 0, 0)\n        // let textureFalloff = new Vector3(0, 0, 0);\n        // let textureVelocity = new Vector3(0, 0, 0);\n\n        for (let i = 0; i < this.materials.length; i++) {\n            if (this.materials[i].name === materialName) {\n                materialIndex = i\n                material = this.materials[i]\n            }\n        }\n\n        if (!material) {\n            console.error('LWOLoader.parse: Surface in SURF chunk does not exist in SRFS')\n            return\n        }\n\n        while (offset < chunkSize) {\n            const subchunkOffset = chunkOffset + offset\n            if (view.getUint8(subchunkOffset) === 0) {\n                offset++\n            } else {\n                const subchunkType = view.getInt32(subchunkOffset)\n                const subchunkSize = view.getInt16(subchunkOffset + ID4_SIZE)\n\n                if (this.verbose) console.log('Parsing subchunk ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n\n                switch (subchunkType) {\n                    case SURF_COLR:\n                        const colorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        material.color = new Color().fromArray(colorArray)\n                        if (this.verbose) console.log('Material color (COLR): ' + colorArray.join(' '))\n                        break\n                    case SURF_FLAG:\n                        const flags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (FLAG): ' + flags.toString(2))\n                        break\n                    case SURF_LUMI:\n                        const luminosity = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        if (this.verbose) console.log('Luminosity (LUMI): ' + luminosity)\n                        break\n                    case SURF_DIFF:\n                        const diffuse = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        if (this.verbose) console.log('Diffuse (DIFF): ' + diffuse)\n                        break\n                    case SURF_SPEC:\n                        const specular = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        // material.specular = material.color.multiplyScalar(specular);\n                        if (this.verbose) console.log('Specular (SPEC): ' + specular)\n                        break\n                    case SURF_REFL:\n                        let reflection = 0\n                        if (reflection === SURF_VRFL) {\n                            reflection = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            reflection = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        }\n                        material.reflectivity = reflection\n                        if (this.verbose) console.log('Reflectivity (REFL): ' + material.reflectivity)\n                        break\n                    case SURF_TRAN:\n                    case SURF_VTRN:\n                        let transparency = 0\n                        if (subchunkType === SURF_VTRN) {\n                            transparency = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            transparency = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        }\n                        material.opacity = 1 - transparency\n                        if (this.verbose) console.log('Opacity (TRAN/VTRN): ' + material.opacity)\n                        if (transparency > 0) material.transparent = true\n                        break\n                    case SURF_VLUM:\n                        const luminosity2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Luminosity (VLUM): ' + luminosity2)\n                        break\n                    case SURF_VDIF:\n                        let diffuse2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Diffuse (VDIF): ' + diffuse2)\n                        break\n                    case SURF_VSPC:\n                        let specular2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        // material.specular = material.color.multiplyScalar(specular2);\n                        if (this.verbose) console.log('Specular (VSPC): ' + specular2)\n                        break\n                    case SURF_TFLG:\n                        textureFlags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (TFLG): ' + textureFlags.toString(2))\n                        break\n                    case SURF_TSIZ:\n                        textureSize = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Texture size (TSIZ): ' + textureSize.toArray().join(' '))\n                        break\n                    case SURF_TCTR:\n                        textureCenter = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Texture center (TCTR): ' + textureCenter.toArray().join(' '))\n                        break\n                    case SURF_CTEX:\n                    case SURF_DTEX:\n                    case SURF_STEX:\n                    case SURF_RTEX:\n                    case SURF_TTEX:\n                    case SURF_BTEX:\n                        const textureTypeName = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture typename: ' + textureTypeName)\n                        break\n                    case SURF_TCLR:\n                        const textureColorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        // const textureColor = new Color().fromArray(textureColorArray);\n                        // seems to be 0 0 0 anyway...\n                        if (this.verbose) console.log('Texture color (TCLR): ' + textureColorArray.join(' '))\n                        break\n                    case SURF_TIMG:\n                        let textureFilepath = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture filepath (TIMG): ' + textureFilepath)\n                        if (textureFilepath === '(none)') break\n                        let sequenceTexture = false\n                        if (textureFilepath.endsWith(' (sequence)')) {\n                            sequenceTexture = true\n                            textureFilepath = textureFilepath.substring(0, textureFilepath.length - ' (sequence)'.length)\n                        }\n                        let filename = getFilename(textureFilepath)\n                        const textureFilename = this.path + filename\n                        if (sequenceTexture) {\n                            const match = textureFilename.match(/(.+\\D)0+(\\d+)\\..+/)\n                            const sequenceNames = ResourceManager.filterTextureSequenceNames(match[1])\n                            if (sequenceNames) {\n                                let seqNum = 0\n                                setInterval(() => { // TODO need to keep track on these intervals?\n                                    material.map = ResourceManager.getTexture(sequenceNames[seqNum])\n                                    seqNum++\n                                    if (seqNum >= sequenceNames.length) seqNum = 0\n                                }, 1000 / 5) // TODO 5? FPS for texture animations?\n                                material.transparent = true\n                            }\n                        }\n                        material.map = ResourceManager.getTexture(textureFilename)\n                        material.alphaTest = material.transparent ? 0 : 0.5\n                        material.color = null // no need for color, when color map (texture) in use\n                        break\n                    default: // TODO implement all LWO features\n                        if (this.verbose) console.warn('Found unrecognised SURF subchunk type ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n                        break\n                }\n\n                offset += SUBCHUNK_HEADER_SIZE + subchunkSize\n            }\n        }\n\n        planarMapUVS(this.geometry, this.vertices, this.uvs, this.indices, materialIndex, textureSize, textureCenter, textureFlags)\n    }\n\n    parse(buffer: ArrayBuffer): Mesh {\n        const view = new DataView(buffer)\n\n        if (view.getUint32(0) !== LWO_FORM) {\n            console.error('LWOLoader.parse: Cannot find header.')\n            return\n        }\n\n        const fileSize = view.getUint32(ID4_SIZE)\n        if (fileSize + CHUNK_HEADER_SIZE !== view.byteLength) {\n            console.warn('LWOLoader.parse: Discrepancy between size in header (' + (fileSize + CHUNK_HEADER_SIZE) + ' bytes) and actual size (' + view.byteLength + ' bytes).')\n        }\n\n        let magicOffset = ID4_SIZE + I4_SIZE\n        if (view.getUint32(magicOffset) !== LWO_MAGIC) {\n            const magic = decodeString(new Uint8Array(buffer, magicOffset, ID4_SIZE))\n            console.error('LWOLoader.parse: Invalid magic ID (' + magic + ') in LWO header.')\n            return\n        }\n\n        let cursor = 12\n        while (cursor < view.byteLength) {\n            // Skip null byte padding\n            if (view.getUint8(cursor) === 0) {\n                cursor++\n            } else {\n                const chunkType = view.getInt32(cursor)\n                const chunkSize = view.getInt32(cursor + ID4_SIZE)\n\n                cursor += CHUNK_HEADER_SIZE\n\n                switch (chunkType) {\n                    case LWO_PNTS:\n                        this.parsePoints(view, cursor, chunkSize)\n                        break\n                    case LWO_SFRS:\n                        this.parseSurfaceNames(buffer, cursor, chunkSize)\n                        break\n                    case LWO_POLS:\n                        this.parsePolygons(view, cursor, chunkSize)\n                        break\n                    case LWO_SURF:\n                        this.parseSurface(view, buffer, cursor, chunkSize)\n                        break\n                    default:\n                        console.warn('Found unrecognised chunk type ' + decodeString(new Uint8Array(buffer, cursor - CHUNK_HEADER_SIZE, ID4_SIZE)) + ' at ' + cursor)\n                }\n\n                cursor += chunkSize\n            }\n\n        }\n\n        this.geometry.setAttribute('position', new BufferAttribute(this.vertices, 3))\n        this.geometry.setAttribute('uv', new BufferAttribute(this.uvs, 2))\n        this.geometry.setIndex(new BufferAttribute(this.indices, 1))\n        this.geometry.computeVertexNormals()\n\n        return new Mesh(this.geometry, this.materials)\n    }\n}\n","import { Vector3 } from 'three'\nimport { SelectionEvent } from '../../event/LocalEvents'\n\nexport interface Selectable {\n\n    getSelectionType(): SelectionType;\n\n    select(): SelectionEvent;\n\n    deselect(): any;\n\n    getSelectionCenter(): Vector3;\n\n}\n\nexport enum SelectionType {\n\n    SURFACE,\n    PILOT,\n    BUILDING,\n    VEHICLE,\n    GROUP,\n\n}\n","import { AnimSubObj } from './AnimSubObj'\n\nexport class AnimClip {\n\n    looping: boolean = false\n    transcoef: number = 1\n    firstFrame: number = null\n    lastFrame: number = null\n    framesPerSecond: number = null\n    bodies: AnimSubObj[] = []\n\n}\n","import { Euler, MathUtils, Object3D, Vector3 } from 'three'\nimport degToRad = MathUtils.degToRad\n\nexport class AnimSubObj {\n\n    name: string = ''\n    filename: string = ''\n    relPos: Vector3[] = []\n    relRot: Euler[] = []\n    relScale: Vector3[] = []\n    opacity: number[] = []\n    parentObjInd: number = null\n    model: Object3D = null\n\n    radVec(degX: number, degY: number, degZ: number) {\n        return new Euler(degToRad(degY), degToRad(degX), degToRad(degZ), 'YXZ')\n    }\n\n    setFrameAndFollowing(animationFrameIndex: number, lastFrame: number, infos: number[]) {\n        this.relPos[animationFrameIndex] = new Vector3(infos[0], infos[1], infos[2])\n        this.relRot[animationFrameIndex] = this.radVec(infos[3], infos[4], infos[5])\n        this.relScale[animationFrameIndex] = new Vector3(infos[6], infos[7], infos[8])\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.relPos[c] = this.relPos[animationFrameIndex]\n            this.relRot[c] = this.relRot[animationFrameIndex]\n            this.relScale[c] = this.relScale[animationFrameIndex]\n        }\n    }\n\n    setOpacityAndFollowing(animationFrameIndex: number, lastFrame: number, value: number) {\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.opacity[c] = value\n        }\n    }\n\n}\n","/**\n * @author Scarabol https://github.com/scarabol\n *\n * This loader loads LWSC files exported from LW\n *\n * File format description: http://www.martinreddy.net/gfx/3d/LWSC.txt\n */\n\nimport { AnimClip } from '../scene/model/anim/AnimClip'\nimport { AnimSubObj } from '../scene/model/anim/AnimSubObj'\nimport { Group } from 'three'\nimport { getFilename } from '../core/Util'\nimport { ResourceManager } from './ResourceManager'\nimport { LWOLoader } from './LWOLoader'\n\nexport class LWSCLoader {\n\n    path: string = ''\n    verbose: boolean = false\n    animationClip: AnimClip = new AnimClip()\n    lines: string[] = []\n    lineIndex: number = 0\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('Using verbose mode')\n    }\n\n    parse(content): AnimClip {\n        this.lines = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map(l => l.trim())\n\n        if (this.lines[0] !== 'LWSC') {\n            throw 'Invalid start of file! Expected \\'LWSC\\' in first line'\n        }\n\n        const numOfModels = parseInt(this.lines[1], 10) // TODO is this correct? May be something else\n        if (numOfModels !== 1) {\n            console.warn('Number of models has unexpected value: ' + numOfModels)\n        }\n\n        for (this.lineIndex = 2; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) continue // empty line: object separator\n            const key = line.split(' ')[0]\n            if (key === 'FirstFrame') {\n                this.parseFrameBlock()\n            } else if (key === 'AddNullObject' || key === 'LoadObject') {\n                this.parseObjectBlock()\n                if (this.verbose) console.log(this.animationClip.bodies[this.animationClip.bodies.length - 1])\n            } else if (line.startsWith('PreviewFirstFrame ') || line.startsWith('PreviewLastFrame ') || line.startsWith('PreviewFrameStep ')) {\n                // only used in editor\n            } else {\n                // console.warn('Unexpected line: ' + line); // TODO debug logging, analyze remaining entries\n            }\n        }\n\n        if (this.verbose) console.log(this.animationClip)\n        return this.animationClip\n    }\n\n    parseLine(line: string): string[] {\n        return line.split(' ').filter((l: string) => l !== '')\n    }\n\n    parseFrameBlock() {\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            const line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'FirstFrame') {\n                this.animationClip.firstFrame = parseInt(value)\n            } else if (key === 'LastFrame') {\n                this.animationClip.lastFrame = parseInt(value)\n            } else if (key === 'FrameStep') {\n                const frameStep = parseInt(value)\n                if (frameStep !== 1) console.error('Animation frameStep has unexpected value: ' + frameStep)\n            } else if (key === 'FramesPerSecond') {\n                this.animationClip.framesPerSecond = parseInt(value)\n            } else if (key === 'PreviewFirstFrame' || key === 'PreviewLastFrame' || key === 'PreviewFrameStep') {\n                // only used in editor\n            } else {\n                console.warn('Unexpected key in frame block')\n            }\n        }\n        console.error('Parsing block reached content end')\n    }\n\n    parseObjectBlock(): AnimSubObj {\n        const subObj = new AnimSubObj()\n        this.animationClip.bodies.push(subObj)\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'AddNullObject' || key === 'LoadObject') {\n                if (key === 'LoadObject') {\n                    const filename = getFilename(value)\n                    subObj.name = filename.slice(0, filename.length - '.lwo'.length)\n                    subObj.filename = this.path + filename\n                    // TODO do not parse twice, read from cache first\n                    const lwoBuffer = ResourceManager.getResource(subObj.filename)\n                    subObj.model = new LWOLoader(this.path).parse(lwoBuffer)\n                } else if (key === 'AddNullObject') {\n                    subObj.name = value\n                    subObj.model = new Group()\n                } else {\n                    throw 'Unexpected line: ' + line\n                }\n            } else if (key === 'ObjectMotion') {\n                let line = this.lines[++this.lineIndex]\n                const lenInfos = parseInt(line)\n                line = this.lines[++this.lineIndex]\n                const lenFrames = parseInt(line)\n                this.lineIndex++\n                for (let c = 0; c < lenFrames; c++) {\n                    let line = this.lines[this.lineIndex + c * 2]\n                    if (line.startsWith('EndBehavior')) break\n                    const infos = line.split(' ').map(Number)\n                    if (infos.length !== lenInfos) console.warn('Number of infos (' + infos.length + ') does not match if specified count (' + lenInfos + ')')\n                    line = this.lines[this.lineIndex + c * 2 + 1]\n                    const animationFrameIndex = parseInt(line.split(' ')[0]) // other entries in line should be zeros\n                    subObj.setFrameAndFollowing(animationFrameIndex, this.animationClip.lastFrame, infos)\n                }\n                this.lineIndex += lenFrames * 2\n            } else if (key === 'ParentObject') {\n                subObj.parentObjInd = Number(value) - 1 // index is 1 based\n                if (this.verbose) console.log('parent obj ind is: ' + subObj.parentObjInd)\n            } else if (key === 'ShowObject ' || key === 'LockedChannels') {\n                // only used in editor\n            } else if (key === 'ShadowOptions') { // TODO implement shadow options (bitwise)\n                // 0 - Self Shadow\n                // 1 - Cast Shadow\n                // 2 - Receive Shadow\n            } else if (key === 'ObjDissolve') {\n                if (value == '(envelope)') {\n                    let line = this.lines[++this.lineIndex]\n                    const numOfInformationChannels = parseInt(line)\n                    if (numOfInformationChannels !== 1) console.error('Number of information channels for opacity is not 1, but: ' + numOfInformationChannels)\n                    line = this.lines[++this.lineIndex]\n                    const numOfKeyframes = parseInt(line)\n                    this.lineIndex++\n                    for (let c = 0; c < numOfKeyframes; c++) {\n                        let line = this.lines[this.lineIndex + c * 2]\n                        if (line.startsWith('EndBehavior')) break\n                        const opacity = 1 - Number(line)\n                        line = this.lines[this.lineIndex + c * 2 + 1]\n                        const frameNum = Number(line.split(' ')[0])\n                        subObj.setOpacityAndFollowing(frameNum, this.animationClip.lastFrame, opacity)\n                    }\n                    this.lineIndex += numOfKeyframes * 2\n                } else {\n                    const opacity = 1 - Number(value)\n                    subObj.setOpacityAndFollowing(0, this.animationClip.lastFrame, opacity)\n                }\n            } else {\n                // console.log('Unhandled line in object block: ' + line); // TODO debug logging\n            }\n        }\n        console.error('Parsing block reached content end')\n        return subObj\n    }\n\n}\n","const Stats = require('stats.js')\n\nexport class DebugHelper {\n\n    stats\n\n    constructor() {\n        this.stats = new Stats()\n        this.stats.setMode(0) // 0: fps, 1: ms\n\n        this.stats.domElement.style.position = 'absolute'\n        this.stats.domElement.style.left = '0px'\n        this.stats.domElement.style.top = '0px'\n\n        document.body.appendChild(this.stats.domElement)\n        this.hide()\n    }\n\n    show() {\n        this.stats.domElement.style.visibility = 'visible'\n    }\n\n    hide() {\n        this.stats.domElement.style.visibility = 'hidden'\n    }\n\n    renderStart() {\n        this.stats.begin()\n    }\n\n    renderDone() {\n        this.stats.end()\n    }\n\n}\n","export class BaseConfig {\n\n    static setFromCfg(config: BaseConfig, cfgObj: any) {\n        Object.keys(cfgObj).forEach((cfgKey) => {\n            const lCfgKeyName = (cfgKey.startsWith('!') ? cfgKey.substring(1) : cfgKey).toLowerCase().replace(/_/g, '')\n            const found = Object.keys(config).some((objKey) => {\n                return config.assignValue(objKey, lCfgKeyName, cfgObj[cfgKey])\n            })\n            if (!found) {\n                console.warn('cfg key does not exist: ' + cfgKey)\n            }\n        })\n        return config\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            this[objKey] = this.parseValue(lCfgKeyName, cfgValue)\n            return true\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return cfgValue\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\n\nexport class BuildingStatsCfg extends BaseConfig {\n\n    levels: number = 0\n    surveyRadius: number[] = null\n    trackDist: number = 0\n    smallTeleporter: boolean = false\n    manTeleporter: boolean = false\n    processCrystal: boolean = false\n    collHeight: number = 0\n    collRadius: number = 0\n    pickSphere: number = 0\n    costOre: number = 0\n    costRefinedOre: number = 0\n    costCrystal: number = 0\n    toolStore: boolean = false\n    storeObjects: boolean = false\n    selfPowered: boolean = false\n    powerBuilding: boolean = false\n    snaxULike: boolean = false\n    crystalDrain: number[] = null\n    damageCausesCallToArms: boolean = true\n    trainDriver: boolean[] = null\n    trainScanner: boolean[] = null\n    trainPilot: boolean[] = null\n    trainDynamite: boolean[] = null\n    functionCoef: number[] = null\n    oxygenCoef: number = 0\n    engineSound: string = null\n    showHealthBar: boolean = false\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n}\n","import { BuildingStatsCfg } from '../../../../cfg/BuildingStatsCfg'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\n\nexport class Building {\n\n    // TODO read building types from cfg at BuildingTypes\n    static readonly TOOLSTATION = new Building('Toolstation', 'Buildings/Toolstation', 130, 10)\n    static readonly TELEPORT_PAD = new Building('TeleportPad', 'Buildings/Teleports')\n    static readonly DOCKS = new Building('Docks', 'Buildings/Docks')\n    static readonly POWER_STATION = new Building('Powerstation', 'Buildings/Powerstation')\n    static readonly BARRACKS = new Building('Barracks', 'Buildings/Barracks')\n    static readonly UPGRADE = new Building('Upgrade', 'Buildings/Upgrade')\n    static readonly GEODOME = new Building('Geo-dome', 'Buildings/Geo-dome')\n    static readonly ORE_REFINERY = new Building('OreRefinery', 'Buildings/OreRefinery')\n    static readonly GUNSTATION = new Building('Gunstation', 'Buildings/gunstation')\n    static readonly TELEPORT_BIG = new Building('TeleportBIG', 'Buildings/BIGTeleport')\n\n    name: string\n    aeFile: string\n    dropPosAngleDeg: number = 0\n    dropPosDist: number = 0\n    statsCache: BuildingStatsCfg\n\n    constructor(name: string, folder: string, dropPosAngleDeg: number = 0, dropPosDist: number = 0) {\n        this.name = name\n        this.aeFile = folder + '/' + folder.slice(folder.lastIndexOf('/') + 1) + '.ae'\n        this.dropPosAngleDeg = dropPosAngleDeg\n        this.dropPosDist = dropPosDist\n    }\n\n    static getByName(buildingType: string) {\n        const typename = buildingType.slice(buildingType.lastIndexOf('/') + 1).toLowerCase()\n        switch (typename) {\n            case 'toolstation':\n                return this.TOOLSTATION\n            case 'teleports':\n                return this.TELEPORT_PAD\n            case 'docks':\n                return this.DOCKS\n            case 'powerstation':\n                return this.POWER_STATION\n            case 'barracks':\n                return this.BARRACKS\n            case 'upgrade':\n                return this.UPGRADE\n            case 'geo-dome':\n                return this.GEODOME\n            case 'orerefinery':\n                return this.ORE_REFINERY\n            case 'gunstation':\n                return this.GUNSTATION\n            case 'teleportbig':\n                return this.TELEPORT_BIG\n            default:\n                throw 'Unknown building type: ' + buildingType\n        }\n    }\n\n    get stats(): BuildingStatsCfg {\n        this.statsCache = this.statsCache || new BuildingStatsCfg(ResourceManager.cfg('Stats', this.name))\n        return this.statsCache\n    }\n\n}\n","import { GameEvent } from './EventBus'\nimport { PublicJob } from '../game/model/job/Job'\nimport { CollectableEntity, CollectableType } from '../scene/model/collect/CollectableEntity'\nimport { AnimEntity } from '../scene/model/anim/AnimEntity'\nimport { Vector3 } from 'three'\nimport { Surface } from '../scene/model/map/Surface'\nimport { BuildingEntity } from '../scene/model/BuildingEntity'\nimport { FulfillerEntity } from '../scene/model/FulfillerEntity'\n\nexport class WorldEvent extends GameEvent {\n\n    constructor(entityKey: string) {\n        super(entityKey)\n        this.isLocal = false\n    }\n\n}\n\nexport class JobEvent extends WorldEvent {\n\n    job: PublicJob\n\n    constructor(eventKey: string, job: PublicJob) {\n        super(eventKey)\n        this.job = job\n    }\n\n}\n\nexport class JobCreateEvent extends JobEvent {\n\n    static eventKey = 'job.create'\n\n    constructor(job: PublicJob) {\n        super(JobCreateEvent.eventKey, job)\n    }\n\n}\n\nexport class JobDeleteEvent extends JobEvent {\n\n    static eventKey = 'job.delete'\n\n    constructor(job: PublicJob) {\n        super(JobDeleteEvent.eventKey, job)\n    }\n\n}\n\nexport class RaiderRequested extends WorldEvent {\n\n    static eventKey = 'raider.request'\n\n    numRequested: number = 0\n\n    constructor(numRequested: number) {\n        super(RaiderRequested.eventKey)\n        this.numRequested = numRequested\n    }\n\n}\n\nexport class CollectEvent extends WorldEvent {\n\n    static eventKey = 'item.collected'\n\n    collectType: CollectableType\n\n    constructor(collectType: CollectableType) {\n        super(CollectEvent.eventKey)\n        this.collectType = collectType\n    }\n\n}\n\nexport class SpawnDynamiteEvent extends WorldEvent {\n\n    static eventKey = 'spawn.dynamite'\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(SpawnDynamiteEvent.eventKey)\n        this.surface = surface\n    }\n\n}\n\nexport class SpawnMaterialEvent extends WorldEvent {\n\n    static eventKey = 'spawn.material'\n\n    collectable: CollectableEntity\n    spawnPosition: Vector3\n\n    constructor(collectable: CollectableEntity, spawnPosition: Vector3) {\n        super(SpawnMaterialEvent.eventKey)\n        this.collectable = collectable\n        this.spawnPosition = spawnPosition\n    }\n\n}\n\nexport class EntityAddedEvent extends WorldEvent {\n\n    static eventKey = 'added.entity'\n\n    type: EntityType\n    entity: AnimEntity\n\n    constructor(type: EntityType, entity: AnimEntity) {\n        super(EntityAddedEvent.eventKey)\n        this.type = type\n        this.entity = entity\n    }\n\n}\n\nexport class EntityRemovedEvent extends WorldEvent {\n\n    static eventKey = 'remove.entity'\n\n    type: EntityType\n    entity: AnimEntity\n\n    constructor(type: EntityType, entity: AnimEntity) {\n        super(EntityRemovedEvent.eventKey)\n        this.type = type\n        this.entity = entity\n    }\n\n}\n\nexport enum EntityType {\n\n    RAIDER,\n    VEHICLE,\n    BUILDING,\n\n}\n\nexport class CavernDiscovered extends WorldEvent {\n\n    static eventKey = 'cavern.discovered'\n\n    constructor() {\n        super(CavernDiscovered.eventKey)\n    }\n\n}\n\nexport class OreFoundEvent extends WorldEvent {\n\n    static eventKey = 'ore.found'\n\n    constructor() {\n        super(OreFoundEvent.eventKey)\n    }\n\n}\n\nexport class BuildingUpgraded extends WorldEvent {\n\n    static eventKey = 'upgraded.building'\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(BuildingUpgraded.eventKey)\n        this.building = building\n    }\n\n}\n\nexport class RaiderTrained extends WorldEvent {\n\n    static eventKey = 'trained.raider'\n\n    entity: FulfillerEntity\n    skill: string\n\n    constructor(raider: FulfillerEntity, skill: string) {\n        super(RaiderTrained.eventKey)\n        this.entity = raider\n        this.skill = skill\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\n\nexport class EntityStatsCfg extends BaseConfig {\n\n    levels: number = null\n    routeSpeed: number[] = null\n    soilDrillTime: number[] = null\n    looseDrillTime: number[] = null\n    medDrillTime: number[] = null\n    hardDrillTime: number[] = null\n    seamDrillTime: number[] = null\n    upgradeTime: number[] = null\n    collRadius: number = null\n    collHeight: number = null\n    trackDist: number = null\n    singleWidthDig: boolean = null\n    pickSphere: number = null\n    repairValue: number[] = null\n    surveyRadius: number[] = null\n    drillsound: string = null\n    drillfadesound: string = null\n    restPercent: number = null\n    energyDecayRate: number = null\n    canClearRubble: boolean = null\n    numOfToolsCanCarry: number[] = null\n    crossLand: boolean = null\n    rubbleCoef: number = 1\n    pathCoef: number = 1\n    routeAvoidance: boolean = null\n    useLegoManTeleporter: boolean = null\n    awarenessRange: number = null\n    oxygenCoef: number = 0\n    canStrafe: boolean = null\n    enterToolStore: boolean = null\n    showHealthBar: boolean = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        if (lCfgKeyName === 'routeSpeed' ||\n            lCfgKeyName === 'soilDrillTime' ||\n            lCfgKeyName === 'looseDrillTime' ||\n            lCfgKeyName === 'medDrillTime' ||\n            lCfgKeyName === 'hardDrillTime' ||\n            lCfgKeyName === 'seamDrillTime' ||\n            lCfgKeyName === 'upgradeTime' ||\n            lCfgKeyName === 'repairValue' ||\n            lCfgKeyName === 'surveyRadius' ||\n            lCfgKeyName === 'numOfToolsCanCarry') {\n            return Array.isArray(cfgValue) ? cfgValue : [cfgValue]\n        }\n        return super.parseValue(lCfgKeyName, cfgValue)\n    }\n\n}\n","import { WorldManager } from '../WorldManager'\nimport { Euler, Group, Vector3 } from 'three'\nimport { EntityStatsCfg } from '../../cfg/EntityStatsCfg'\nimport { ResourceManager } from '../../resource/ResourceManager'\n\nexport class BaseEntity {\n\n    worldMgr: WorldManager\n    group: Group = new Group()\n    sequenceIntervals = []\n    level: number = 0\n    stats: EntityStatsCfg\n\n    constructor() {\n        this.stats = new EntityStatsCfg(ResourceManager.cfg('Stats', 'Pilot') || {}) // TODO group all stats in single class\n    }\n\n    getPosition() {\n        return new Vector3().copy(this.group.position)\n    }\n\n    getRotation() {\n        return new Euler().copy(this.group.rotation)\n    }\n\n    onDiscover() {\n        this.group.visible = true\n    }\n\n}\n","export class EventBus {\n\n    static eventListener = {} // TODO use map\n    static blockedEvents = []\n\n    static publishEvent(event: GameEvent) {\n        if (this.blockedEvents.includes(event.eventKey)) return // event is currently blocked from publishing\n        if (!event.isLocal) console.log('Event published: ' + event.eventKey)\n        this.blockedEvents.push(event.eventKey);\n        (this.eventListener[event.eventKey] || []).forEach((callback) => callback(event)) // TODO add inheritance match by prefix\n        const index = this.blockedEvents.indexOf(event.eventKey)\n        if (index > -1) this.blockedEvents.splice(index, 1)\n    }\n\n    static registerEventListener(eventKey: string, callback: (GameEvent) => any) {\n        this.eventListener[eventKey] = this.eventListener[eventKey] || []\n        this.eventListener[eventKey].push(callback)\n    }\n\n}\n\nexport class GameEvent {\n\n    eventKey: string\n    isLocal: boolean\n\n    constructor(eventKey: string) {\n        this.eventKey = eventKey\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { FulfillerEntity } from '../../../scene/model/FulfillerEntity'\n\nexport enum JobType {\n\n    SURFACE,\n    CARRY,\n    MOVE,\n    TRAIN,\n    GET_TOOL,\n    EAT,\n\n}\n\nexport enum JobState {\n\n    OPEN,\n    COMPLETE,\n    CANCELED,\n\n}\n\nexport abstract class Job {\n\n    type: JobType\n    jobstate: JobState\n    fulfiller: FulfillerEntity[] = []\n\n    protected constructor(type: JobType) {\n        this.type = type\n        this.jobstate = JobState.OPEN\n    }\n\n    assign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller)\n        if (fulfiller && index === -1) {\n            this.fulfiller.push(fulfiller)\n        }\n    }\n\n    unassign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller)\n        if (index > -1) this.fulfiller.splice(index, 1)\n    }\n\n    cancel() {\n        this.jobstate = JobState.CANCELED\n        const fulfiller = this.fulfiller // ensure consistency while processing\n        this.fulfiller = []\n        fulfiller.forEach((fulfiller) => fulfiller.stopJob())\n    }\n\n    isQualified(fulfiller: FulfillerEntity): boolean {\n        return true\n    }\n\n    isQualifiedWithTool(fulfiller: FulfillerEntity): string {\n        return null\n    }\n\n    isQualifiedWithTraining(fulfiller: FulfillerEntity): string {\n        return null\n    }\n\n    onJobComplete() {\n        this.jobstate = JobState.COMPLETE\n    }\n\n    abstract getPosition(): Vector3; // TODO job system in 2d should be sufficient and decouple from three for deps and worker reasons\n\n    abstract isInArea(x: number, z: number): boolean;\n\n}\n\nexport abstract class PublicJob extends Job {\n\n    abstract getPriorityIdentifier(): string\n\n}\n\n","import { BaseEntity } from '../BaseEntity'\nimport { GameState } from '../../../game/model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { Carryable } from './Carryable'\nimport { Vector3 } from 'three'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { BuildingSite } from '../BuildingSite'\nimport { CollectJob } from '../../../game/model/job/CollectJob'\n\nexport abstract class CollectableEntity extends BaseEntity implements Carryable {\n\n    collectableType: CollectableType\n    targetSite: BuildingSite\n    targetBuilding: BuildingEntity\n    targetPos: Vector3 = null\n    targetType: CollectTargetType | Building\n\n    protected constructor(collectableType: CollectableType) {\n        super()\n        this.collectableType = collectableType\n    }\n\n    abstract getTargetBuildingTypes(): Building[];\n\n    getTargetPos(): Vector3 {\n        if (!this.targetPos) {\n            const site = GameState.getClosestSiteThatRequires(this.getPosition(), this.getCollectableType())\n            if (site) {\n                this.targetSite = site\n                this.targetPos = site.getPosition()\n                this.targetType = CollectTargetType.BUILDING_SITE\n                site.assign(this)\n            } else {\n                const targetBuilding = GameState.getClosestBuildingByType(this.getPosition(), ...this.getTargetBuildingTypes())\n                if (targetBuilding) {\n                    this.targetBuilding = targetBuilding\n                    this.targetPos = targetBuilding.getDropPosition()\n                    this.targetType = targetBuilding.type\n                }\n            }\n        } else if (this.targetSite) {\n            if (this.targetSite.complete) this.resetTarget()\n        } else if (this.targetBuilding) {\n            // TODO check if building has been teleported away or turned off\n        }\n        return this.targetPos\n    }\n\n    getTargetType(): CollectTargetType | Building {\n        return this.targetType\n    }\n\n    resetTarget() {\n        if (this.targetSite) this.targetSite.unAssign(this)\n        this.targetSite = null\n        this.targetBuilding = null\n        this.targetPos = null\n        this.targetType = null\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        const index = GameState.collectablesUndiscovered.indexOf(this)\n        if (index !== -1) GameState.collectablesUndiscovered.splice(index, 1)\n        GameState.collectables.push(this)\n        EventBus.publishEvent(new JobCreateEvent(new CollectJob(this)))\n    }\n\n    getCollectableType(): CollectableType {\n        return this.collectableType\n    }\n\n}\n\nexport enum CollectableType {\n\n    DYNAMITE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n\n}\n\nexport enum CollectTargetType {\n\n    SURFACE,\n    BUILDING_SITE,\n\n}\n","import { CollectableEntity, CollectableType, CollectTargetType } from '../../../scene/model/collect/CollectableEntity'\nimport { Vector3 } from 'three'\nimport { JOB_ACTION_RANGE } from '../../../main'\nimport { FulfillerEntity } from '../../../scene/model/FulfillerEntity'\nimport { Building } from '../entity/building/Building'\nimport { GameState } from '../GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { CollectEvent } from '../../../event/WorldEvents'\nimport { JobType, PublicJob } from './Job'\n\nexport class CollectJob extends PublicJob {\n\n    item: CollectableEntity\n\n    constructor(item: CollectableEntity) {\n        super(JobType.CARRY)\n        this.item = item\n    }\n\n    getPosition(): Vector3 {\n        return this.item.getPosition()\n    }\n\n    isInArea(x: number, z: number): boolean {\n        return this.getPosition().distanceTo(new Vector3(x, this.getPosition().y, z)) < JOB_ACTION_RANGE\n    }\n\n    isQualified(fulfiller: FulfillerEntity) {\n        return fulfiller.carries === null && !!this.item.getTargetPos()\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        if (this.item.getTargetType() === Building.TOOLSTATION) {\n            switch (this.item.getCollectableType()) {\n                case CollectableType.CRYSTAL:\n                    GameState.numCrystal++\n                    EventBus.publishEvent(new CollectEvent(this.item.getCollectableType()))\n                    break\n                case CollectableType.ORE:\n                    GameState.numOre++\n                    EventBus.publishEvent(new CollectEvent(this.item.getCollectableType()))\n                    break\n            }\n        } else if (this.item.getTargetType() === CollectTargetType.BUILDING_SITE) {\n            this.item.targetSite.addItem(this.item)\n        } else {\n            console.error('target type not yet implemented: ' + this.item.getTargetType())\n        }\n    }\n\n    getPriorityIdentifier(): string {\n        return this.item.getCollectableType() === CollectableType.CRYSTAL ? 'aiPriorityCrystal' : 'aiPriorityOre'\n    }\n\n}\n","import { BuildingEntity } from '../../scene/model/BuildingEntity'\nimport { Building } from './entity/building/Building'\nimport { Selectable, SelectionType } from './Selectable'\nimport { Raider } from '../../scene/model/Raider'\nimport { VehicleEntity } from '../../scene/model/VehicleEntity'\nimport { CollectableEntity, CollectableType } from '../../scene/model/collect/CollectableEntity'\nimport { Vector3 } from 'three'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../../main'\nimport { Surface } from '../../scene/model/map/Surface'\nimport { BaseEntity } from '../../scene/model/BaseEntity'\nimport { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { BuildingSite } from '../../scene/model/BuildingSite'\nimport { Dynamite } from '../../scene/model/collect/Dynamite'\nimport { Crystal } from '../../scene/model/collect/Crystal'\nimport { Ore } from '../../scene/model/collect/Ore'\nimport { LevelRewardConfig } from '../../cfg/LevelsCfg'\nimport { PriorityList } from './job/PriorityList'\n\nexport enum GameResultState {\n\n    RUNNING,\n    COMPLETE,\n    FAILED,\n\n}\n\nexport class GameState {\n\n    static resultState: GameResultState = GameResultState.RUNNING\n    static levelFullName: string = ''\n    static numCrystal: number = 0\n    static numOre: number = 0\n    static numBrick: number = 0\n    static usedCrystals: number = 0\n    static neededCrystals: number = 0\n    static airlevel: number = 1 // airlevel in percent from 0 to 1.0\n    static selectedEntities: Selectable[] = []\n    static selectionType: SelectionType = null\n    static buildings: BuildingEntity[] = []\n    static buildingsUndiscovered: BuildingEntity[] = []\n    static raiders: Raider[] = []\n    static raidersUndiscovered: Raider[] = []\n    static requestedRaiders: number = 0\n    static vehicles: VehicleEntity[] = []\n    static vehiclesUndiscovered: VehicleEntity[] = []\n    static collectables: CollectableEntity[] = []\n    static collectablesUndiscovered: CollectableEntity[] = []\n    static buildingSites: BuildingSite[] = []\n    static totalCrystals: number = 0\n    static totalOres: number = 0\n    static totalDiggables: number = 0\n    static remainingDiggables: number = 0\n    static totalCaverns: number = 0\n    static discoveredCaverns: number = 0\n    static levelStartTime: number = 0\n    static levelStopTime: number = 0\n    static rewardConfig: LevelRewardConfig = null\n    static priorityList: PriorityList = null\n\n    static reset() {\n        this.resultState = GameResultState.RUNNING\n        this.levelFullName = ''\n        this.numCrystal = 0\n        this.numOre = 0\n        this.numBrick = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.airlevel = 1\n        this.selectedEntities = []\n        this.selectionType = null\n        this.buildings = []\n        this.buildingsUndiscovered = []\n        this.raiders = []\n        this.raidersUndiscovered = []\n        this.requestedRaiders = 0\n        this.vehicles = []\n        this.vehiclesUndiscovered = []\n        this.collectables = []\n        this.collectablesUndiscovered = []\n        this.buildingSites = []\n        this.totalCrystals = 0\n        this.totalOres = 0\n        this.totalDiggables = 0\n        this.remainingDiggables = 0\n        this.totalCaverns = 0\n        this.discoveredCaverns = 0\n        this.levelStartTime = 0\n        this.levelStopTime = 0\n        this.rewardConfig = null\n        this.priorityList = null\n    }\n\n    static getBuildingsByType(...buildingTypes: Building[]): BuildingEntity[] {\n        return this.buildings.filter(b => b.isPowered() && buildingTypes.some(bt => b.type === bt))\n    }\n\n    static getClosestBuildingByType(position: Vector3, ...buildingTypes: Building[]): BuildingEntity {\n        const targetBuildings = GameState.getBuildingsByType(...buildingTypes)\n        let closest = null, minDist = null\n        targetBuildings.forEach((b) => {\n            const bPos = b.getDropPosition()\n            const dist = position.distanceToSquared(bPos) // TODO better use pathfinding\n            if (closest === null || dist < minDist) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static getClosestSiteThatRequires(position: Vector3, collectableType: CollectableType): BuildingSite {\n        let closest = null, minDist = null\n        this.buildingSites.forEach((b) => {\n            const bPos = b.getPosition()\n            const dist = position.distanceToSquared(bPos)\n            if ((closest === null || dist < minDist) && b.needs(collectableType)) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static hasBuildingWithUpgrades(building: Building, upgrades: number): boolean {\n        return this.buildings.some((b) => b.type === building && b.level >= upgrades)\n    }\n\n    static hasVehicleWithSkill(skillName: string): boolean {\n        return false // TODO implement vehicles\n    }\n\n    static getClosestTrainingSite(position: Vector3, training: string): BuildingEntity {\n        if (training === 'demolition') { // TODO refactor this\n            const targetBuildings = this.buildings.filter((b) => {\n                return b.type.stats.trainDynamite && b.type.stats.trainDynamite[b.level]\n            })\n            let closest = null, minDist = null\n            targetBuildings.forEach((b) => {\n                const bPos = b.getDropPosition()\n                const dist = position.distanceToSquared(bPos) // TODO better use pathfinding\n                if (closest === null || dist < minDist) {\n                    closest = b\n                    minDist = dist\n                }\n            })\n            return closest\n        }\n        return null\n    }\n\n    static selectEntities(entities: Selectable[]) {\n        this.selectedEntities = this.selectedEntities.filter((previouslySelected) => {\n            const stillSelected = entities.indexOf(previouslySelected) !== -1\n            if (!stillSelected) previouslySelected.deselect()\n            return stillSelected\n        })\n        // add new entities that are selectable\n        const selectionEvents = []\n        entities.forEach((freshlySelected) => {\n            const selectionEvent = freshlySelected.select()\n            if (selectionEvent) {\n                this.selectedEntities.push(freshlySelected)\n                selectionEvents.push(selectionEvent)\n            }\n        })\n        // determine and set next selection type\n        const len = this.selectedEntities.length\n        if (len > 1) {\n            this.selectionType = SelectionType.GROUP\n        } else if (len === 1) {\n            this.selectionType = this.selectedEntities[0].getSelectionType()\n        } else if (this.selectionType !== null) {\n            this.selectionType = null\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        // AFTER updating selected entities and selection type, publish all events\n        selectionEvents.forEach((event) => EventBus.publishEvent(event))\n    }\n\n    static getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + this.getBuildingsByType(Building.BARRACKS).length * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    static discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE\n        this.discoverEntities(this.raidersUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.buildingsUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.vehiclesUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.collectablesUndiscovered, minX, maxX, minZ, maxZ)\n    }\n\n    static discoverEntities(undiscovered: BaseEntity[], minX, maxX, minZ, maxZ) {\n        const discovered = []\n        undiscovered.forEach((e) => {\n            const pos = e.getPosition()\n            if (pos.x >= minX && pos.x < maxX && pos.z >= minZ && pos.z < maxZ) {\n                e.onDiscover()\n                discovered.push(e)\n            }\n        })\n        discovered.forEach((r) => {\n            const index = undiscovered.indexOf(r)\n            if (index !== -1) undiscovered.splice(index, 1)\n        })\n    }\n\n    static dropMaterial(type: CollectableType, quantity: number): CollectableEntity[] {\n        const result = []\n        if (type === CollectableType.DYNAMITE) {\n            for (let c = 0; c < quantity; c++) result.push(new Dynamite())\n        } else if (type === CollectableType.CRYSTAL) {\n            while (GameState.numCrystal > 0 && result.length < quantity) {\n                GameState.numCrystal--\n                result.push(new Crystal())\n            }\n        } else if (type === CollectableType.ORE) {\n            while (GameState.numOre > 0 && result.length < quantity) {\n                GameState.numOre--\n                result.push(new Ore())\n            }\n        } else {\n            console.error('Material drop not yet implemented: ' + type)\n        }\n        return result\n    }\n\n    static get gameTimeSeconds() {\n        return Math.round((GameState.levelStopTime - GameState.levelStartTime) / 1000)\n    }\n\n    static get score() {\n        if (!GameState.rewardConfig) return 0\n        let quota = GameState.rewardConfig.quota\n        let importance = GameState.rewardConfig.importance\n        const scoreCrystals = GameState.numCrystal >= (quota.crystals || Infinity) ? importance.crystals : 0\n        const scoreTimer = GameState.gameTimeSeconds <= (quota.timer || 0) ? importance.timer : 0\n        const scoreCaverns = quota.caverns ? Math.min(1, GameState.discoveredCaverns / quota.caverns) * importance.caverns : 0\n        const scoreConstructions = quota.constructions ? Math.min(1, GameState.buildings.length / quota.constructions * importance.constructions) : 0\n        const scoreOxygen = GameState.airlevel * importance.oxygen\n        const scoreFigures = GameState.raiders.length >= MAX_RAIDER_BASE ? importance.figures : 0\n        return Math.round(scoreCrystals + scoreTimer + scoreCaverns + scoreConstructions + scoreOxygen + scoreFigures) / 100\n    }\n\n    static get selectedSurface(): Surface {\n        return this.selectionType === SelectionType.SURFACE && this.selectedEntities.length > 0 ? this.selectedEntities[0] as Surface : null\n    }\n\n    static get selectedBuilding(): BuildingEntity {\n        return this.selectionType === SelectionType.BUILDING && this.selectedEntities.length > 0 ? this.selectedEntities[0] as BuildingEntity : null\n    }\n\n    static get selectedRaiders(): Raider[] {\n        return (this.selectionType === SelectionType.PILOT || this.selectionType === SelectionType.GROUP) && this.selectedEntities.length > 0 ? this.selectedEntities as Raider[] : []\n    }\n\n}\n","import { GameEvent } from './EventBus'\nimport { BuildingEntity } from '../scene/model/BuildingEntity'\nimport { Surface } from '../scene/model/map/Surface'\nimport { Raider } from '../scene/model/Raider'\nimport { VehicleEntity } from '../scene/model/VehicleEntity'\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: string) {\n        super(eventKey)\n        this.isLocal = true\n    }\n\n}\n\nexport class SelectionEvent extends LocalEvent {\n\n    static eventKey = 'selected'\n\n    constructor(eventSuffix: string) {\n        super(SelectionEvent.eventKey + '.' + eventSuffix)\n    }\n\n}\n\nexport class SurfaceSelectedEvent extends SelectionEvent {\n\n    static eventSuffix = 'surface'\n    static eventKey = SelectionEvent.eventKey + '.' + SurfaceSelectedEvent.eventSuffix\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(SurfaceSelectedEvent.eventSuffix)\n        this.surface = surface\n    }\n\n}\n\nexport class BuildingSelected extends SelectionEvent {\n\n    static eventSuffix = 'building'\n    static eventKey = SelectionEvent.eventKey + '.' + BuildingSelected.eventSuffix\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(BuildingSelected.eventSuffix)\n        this.building = building\n    }\n\n}\n\nexport class RaiderSelected extends SelectionEvent {\n\n    static eventSuffix = 'raider'\n    static eventKey = SelectionEvent.eventKey + '.' + RaiderSelected.eventSuffix\n\n    raider: Raider\n\n    constructor(raider: Raider) {\n        super(RaiderSelected.eventSuffix)\n        this.raider = raider\n    }\n\n}\n\nexport class VehicleSelected extends SelectionEvent {\n\n    static eventSuffix = 'vehicle'\n    static eventKey = SelectionEvent.eventKey + '.' + VehicleSelected.eventSuffix\n\n    vehicle: VehicleEntity\n\n    constructor(vehicle: VehicleEntity) {\n        super(VehicleSelected.eventSuffix)\n        this.vehicle = vehicle\n    }\n\n}\n\nexport class EntityDeselected extends LocalEvent {\n\n    static eventKey = 'deselected.entity'\n\n    constructor() {\n        super(EntityDeselected.eventKey)\n    }\n\n}\n","import { Box3, CanvasTexture, Matrix4, Mesh, MeshBasicMaterial, MeshPhongMaterial, Object3D, SphereGeometry, Sprite, SpriteMaterial, Vector3 } from 'three'\nimport { AnimClip } from './AnimClip'\nimport { iGet } from '../../../core/Util'\nimport { AnimationEntityType } from './AnimationEntityType'\nimport { BaseEntity } from '../BaseEntity'\nimport { AnimSubObj } from './AnimSubObj'\nimport { createContext } from '../../../core/ImageHelper'\n\nexport abstract class AnimEntity extends BaseEntity {\n\n    entityType: AnimationEntityType = null\n    poly: Object3D[] = []\n    animation: AnimClip = null\n    animationTimeout: NodeJS.Timeout = null\n    selectionFrame: Sprite = null\n    pickSphere: Mesh = null\n    pickSphereRadius: number = 10 / 2\n    carryJoint: Object3D = null\n\n    protected constructor(entityType: AnimationEntityType) {\n        super()\n        this.entityType = entityType\n    }\n\n    setActivity(keyname, onAnimationDone = null, durationTimeMs = null) {\n        if (this.animationTimeout) {\n            clearTimeout(this.animationTimeout)\n            this.animationTimeout = null\n        }\n        const activity = iGet(this.entityType.activities, keyname)\n        if (!activity) {\n            console.error('Activity \\'' + keyname + '\\' unknown')\n            console.log(this.entityType.activities)\n            return\n        }\n        if (activity.animation) {\n            this.animation = activity.animation\n            this.group.remove(...this.poly)\n            this.poly = []\n            const carries = (this.carryJoint && this.carryJoint.children) || []\n            this.carryJoint = null\n            // bodies are defined in animation and second in high/medium/low poly groups\n            this.animation.bodies.forEach((body) => {\n                let model: Object3D = iGet(this.entityType.highPoly, body.name)\n                if (!model) model = iGet(this.entityType.mediumPoly, body.name)\n                if (!model) model = body.model\n                const polyModel = model.clone(true)\n                this.poly.push(polyModel)\n                if (this.entityType.carryNullName && body.name && this.entityType.carryNullName.toLowerCase() === body.name.toLowerCase()) {\n                    this.carryJoint = polyModel\n                    if (carries.length > 0) this.carryJoint.add(...carries)\n                }\n            })\n            this.animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n                const polyPart = this.poly[index]\n                const parentInd = body.parentObjInd\n                if (parentInd !== undefined && parentInd !== null) { // can be 0\n                    this.poly[parentInd].add(polyPart)\n                } else {\n                    this.group.add(polyPart)\n                }\n            })\n            this.animate(0, onAnimationDone, durationTimeMs)\n        } else {\n            console.warn('Activity ' + keyname + ' has no animation defined yet')\n        }\n    }\n\n    animate(frameIndex, onAnimationDone, durationTimeMs) {\n        if (this.poly.length !== this.animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        this.animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = this.poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = true\n                        mat.alphaTest = 0\n                    })\n                }\n            }\n        })\n        if (this.animationTimeout) clearTimeout(this.animationTimeout)\n        this.animationTimeout = null\n        let nextFrame = frameIndex + 1\n        if (nextFrame <= this.animation.lastFrame || (!onAnimationDone || (durationTimeMs !== null && durationTimeMs > 0))) {\n            if (nextFrame > this.animation.lastFrame) {\n                nextFrame = this.animation.firstFrame\n            }\n            const standardDurationTimeMs = 1000 / this.animation.framesPerSecond * this.animation.transcoef\n            if (durationTimeMs !== null) durationTimeMs -= standardDurationTimeMs\n            const that = this\n            const timeoutTimeMs = durationTimeMs !== null ? Math.max(0, Math.min(durationTimeMs, standardDurationTimeMs)) : standardDurationTimeMs\n            this.animationTimeout = setTimeout(() => that.animate(nextFrame, onAnimationDone, durationTimeMs), timeoutTimeMs) // TODO get this in sync with threejs\n        } else if (onAnimationDone) {\n            onAnimationDone()\n        }\n    }\n\n    createPickSphere() {\n        if (this.pickSphere) return\n        const pickSphereCenter = this.getPickSphereCenter()\n        const geometry = new SphereGeometry(this.pickSphereRadius, this.pickSphereRadius, this.pickSphereRadius)\n        const material = new MeshBasicMaterial({color: 0xffff00, visible: false}) // change visible to true for debugging\n        this.pickSphere = new Mesh(geometry, material)\n        this.pickSphere.userData = {selectable: this}\n        this.pickSphere.position.copy(pickSphereCenter)\n        this.group.add(this.pickSphere)\n        this.createSelectionFrame(pickSphereCenter)\n    }\n\n    getPickSphereCenter(): Vector3 {\n        return this.getBoundingBoxCenter()\n    }\n\n    getBoundingBoxCenter() {\n        const center = new Vector3()\n        new Box3().setFromObject(this.group).getCenter(center)\n        center.sub(this.group.position)\n        center.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        return center\n    }\n\n    private createSelectionFrame(pickSphereCenter: Vector3) {\n        const selectionFrameTextureSize = 128\n        const ctx = createContext(selectionFrameTextureSize, selectionFrameTextureSize)\n        ctx.fillStyle = '#0f0'\n        const strength = Math.round(25 / this.pickSphereRadius)\n        const length = selectionFrameTextureSize / 6\n        ctx.fillRect(0, 0, length, strength)\n        ctx.fillRect(0, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, 0, length, strength)\n        ctx.fillRect(selectionFrameTextureSize - strength, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - strength, selectionFrameTextureSize - length, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - length, strength, length)\n        const selectionFrameTexture = new CanvasTexture(ctx.canvas)\n        const selectionMaterial = new SpriteMaterial({map: selectionFrameTexture, depthTest: false})\n        this.selectionFrame = new Sprite(selectionMaterial)\n        this.selectionFrame.position.copy(pickSphereCenter)\n        const selectionFrameSize = this.pickSphereRadius * 2\n        this.selectionFrame.scale.set(selectionFrameSize, selectionFrameSize, selectionFrameSize)\n        this.selectionFrame.visible = false\n        this.group.add(this.selectionFrame)\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { AnimEntity } from '../anim/AnimEntity'\nimport { Carryable } from './Carryable'\nimport { Surface } from '../map/Surface'\nimport { Vector3 } from 'three'\nimport { GameState } from '../../../game/model/GameState'\n\nexport class Dynamite extends AnimEntity implements Carryable {\n\n    targetSurface: Surface\n\n    constructor() {\n        super(ResourceManager.getAnimationEntityType('MiscAnims/Dynamite/Dynamite.ae'))\n    }\n\n    getTargetPos(): Vector3 {\n        if (this.targetSurface && this.targetSurface.isExplodable()) {\n            return this.targetSurface.getDigPositions()[0] // TODO find closest dig position\n        } else {\n            return GameState.getClosestBuildingByType(this.getPosition(), Building.TOOLSTATION).getDropPosition()\n        }\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.DYNAMITE\n    }\n\n    ignite() {\n        this.worldMgr.sceneManager.scene.add(this.group) // TODO add as explosive and scare em all!\n        const center = this.targetSurface.getCenterWorld()\n        center.y = this.group.position.y\n        this.group.lookAt(center)\n        this.setActivity('TickDown', () => {\n            this.worldMgr.sceneManager.scene.remove(this.group)\n            this.targetSurface.collapse()\n            // TODO add explosion animation\n            // TODO damage raider, vehicle, buildings\n        })\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Color, Material, MeshPhongMaterial } from 'three'\nimport { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { SceneManager } from '../../SceneManager'\n\nexport class Crystal extends CollectableEntity {\n\n    constructor() {\n        super(CollectableType.CRYSTAL)\n        const resource2 = ResourceManager.getResource('MiscAnims/Crystal/vlp_greencrystal.lwo')\n        const mesh2 = SceneManager.registerMesh(new LWOLoader('MiscAnims/Crystal/').parse(resource2));\n        (mesh2.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.color = new Color(0, 0, 0) // TODO read from LWO file?\n            mat.emissive = new Color(0, 255, 0) // TODO should be luminosity color from mesh file?\n            mat.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n            mat.opacity = 0.5 // TODO read from LWO file?\n            mat.transparent = true\n        })\n        mesh2.scale.set(1.75, 1.75, 1.75) // TODO derive from texture scale?\n        this.group.add(mesh2)\n        const resource = ResourceManager.getResource('World/Shared/Crystal.lwo') // highpoly version\n        const mesh = SceneManager.registerMesh(new LWOLoader('World/Shared/').parse(resource));\n        (mesh.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.emissive = new Color(0, 8, 0) // TODO read from LWO file?\n            mat.color = new Color(0, 0, 0) // TODO read from LWO file?\n            mat.transparent = true\n            mat.opacity = 0.4 // TODO read from LWO file?\n        })\n        this.group.add(mesh)\n        this.sequenceIntervals.forEach((interval) => clearInterval(interval)) // TODO looks better without sequence, maybe just slow it down or merge it?\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.POWER_STATION, Building.TOOLSTATION]\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        console.log('An energy crystal has been discovered')\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { SceneManager } from '../../SceneManager'\n\nexport class Ore extends CollectableEntity {\n\n    constructor() {\n        super(CollectableType.ORE)\n        const resource = ResourceManager.getResource('MiscAnims/Ore/Ore1st.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('MiscAnims/Ore/').parse(resource))\n        this.group.add(mesh)\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.ORE_REFINERY, Building.TOOLSTATION]\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        console.log('Ore has been discovered')\n    }\n\n}\n","export class WorkerMessage {\n\n    type: WorkerMessageType = null\n    text?: string\n    cfg?: any\n    totalResources?: number\n    assetName?: string\n    assetObj?: any\n    assetIndex?: number\n    loadingTimeSeconds?: string\n\n    constructor(type: WorkerMessageType) {\n        this.type = type\n    }\n\n    static createTextMessage(msg: string): WorkerMessage {\n        return {type: WorkerMessageType.MSG, text: msg}\n    }\n\n    static createCfgLoaded(cfg: any, totalResources: number): WorkerMessage {\n        return {type: WorkerMessageType.CFG, cfg: cfg, totalResources: totalResources}\n    }\n\n    static createAssetLoaded(assetIndex: number, assetName: string, assetObj: any) {\n        return {type: WorkerMessageType.ASSET, assetIndex: assetIndex, assetName: assetName, assetObj: assetObj}\n    }\n\n    static createLoadDone(totalResources: number, loadingTimeSeconds: string) {\n        return {type: WorkerMessageType.DONE, totalResources: totalResources, loadingTimeSeconds: loadingTimeSeconds}\n    }\n\n}\n\nexport enum WorkerMessageType {\n\n    MSG,\n    CFG,\n    CACHE_MISS,\n    SFX,\n    ASSET,\n    DONE,\n\n}\n","import { AmbientLight, Frustum, Mesh, MOUSE, PerspectiveCamera, PointLight, Raycaster, Scene, Vector3, WebGLRenderer } from 'three'\nimport { DebugHelper } from './DebugHelper'\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { GameState } from '../game/model/GameState'\nimport { Selectable } from '../game/model/Selectable'\nimport { Terrain } from './model/map/Terrain'\nimport { TILESIZE } from '../main'\n\nexport class SceneManager {\n\n    static meshRegistry = []\n\n    maxFps: number = 30 // most animations use 25 fps so this should be enough\n    renderer: WebGLRenderer\n    debugHelper: DebugHelper = new DebugHelper()\n    renderInterval\n    animRequest\n    scene: Scene\n    camera: PerspectiveCamera\n    amb: AmbientLight\n    light: PointLight\n    terrain: Terrain\n    controls: MapControls\n    cursorTorchlight: PointLight\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.renderer = new WebGLRenderer({antialias: true, canvas: canvas})\n        this.renderer.setClearColor(0x000000)\n\n        this.camera = new PerspectiveCamera(30, canvas.width / canvas.height, 0.1, 5000) // TODO make these params configurable\n\n        this.controls = new MapControls(this.camera, this.renderer.domElement)\n        this.controls.mouseButtons = {LEFT: null, MIDDLE: MOUSE.ROTATE, RIGHT: MOUSE.PAN}\n        // this.controls.maxPolarAngle = Math.PI * 0.45; // TODO dynamically adapt to terrain height at camera position\n    }\n\n    selectEntitiesByRay(rx: number, ry: number) {\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        let intersects = raycaster.intersectObjects(GameState.raiders.map((r) => r.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.vehicles.map((v) => v.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.buildings.map((b) => b.pickSphere))\n        if (intersects.length < 1 && this.terrain) intersects = raycaster.intersectObjects(this.terrain.floorGroup.children)\n        const selected = []\n        if (intersects.length > 0) {\n            const userData = intersects[0].object.userData\n            if (userData && userData.hasOwnProperty('selectable')) {\n                const selectable = userData['selectable']\n                if (selectable) selected.push(selectable)\n            }\n        }\n        GameState.selectEntities(selected)\n    }\n\n    selectEntitiesInFrustum(r1x: number, r1y: number, r2x: number, r2y: number) {\n        const startPoint = new Vector3(r1x, r1y, 0.5)\n        const endPoint = new Vector3(r2x, r2y, 0.5)\n        // Avoid invalid frustum\n        if (startPoint.x === endPoint.x) {\n            endPoint.x += Number.EPSILON\n        }\n        if (startPoint.y === endPoint.y) {\n            endPoint.y += Number.EPSILON\n        }\n        // update camera\n        this.camera.updateProjectionMatrix()\n        this.camera.updateMatrixWorld()\n        // update frustum\n        const tmpPoint = new Vector3()\n        tmpPoint.copy(startPoint)\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x)\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y)\n        endPoint.x = Math.max(startPoint.x, endPoint.x)\n        endPoint.y = Math.min(startPoint.y, endPoint.y)\n\n        const vecNear = new Vector3()\n        const vecTopLeft = new Vector3()\n        const vecTopRight = new Vector3()\n        const vecDownRight = new Vector3()\n        const vecDownLeft = new Vector3()\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld)\n        vecTopLeft.copy(tmpPoint)\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0)\n        vecDownRight.copy(endPoint)\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0)\n\n        vecTopLeft.unproject(this.camera)\n        vecTopRight.unproject(this.camera)\n        vecDownRight.unproject(this.camera)\n        vecDownLeft.unproject(this.camera)\n\n        const vectemp1 = new Vector3()\n        const vectemp2 = new Vector3()\n        const vectemp3 = new Vector3()\n        vectemp1.copy(vecTopLeft).sub(vecNear)\n        vectemp2.copy(vecTopRight).sub(vecNear)\n        vectemp3.copy(vecDownRight).sub(vecNear)\n        vectemp1.normalize()\n        vectemp2.normalize()\n        vectemp3.normalize()\n\n        const deep = Number.MAX_VALUE\n        vectemp1.multiplyScalar(deep)\n        vectemp2.multiplyScalar(deep)\n        vectemp3.multiplyScalar(deep)\n        vectemp1.add(vecNear)\n        vectemp2.add(vecNear)\n        vectemp3.add(vecNear)\n\n        const frustum = new Frustum()\n        const planes = frustum.planes\n\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight)\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight)\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear)\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear)\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft)\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1)\n        planes[5].normal.multiplyScalar(-1)\n\n        let entities: Selectable[] = GameState.raiders.filter((r) => frustum.containsPoint(r.getSelectionCenter()))\n        entities.push(...(GameState.vehicles.filter((v) => frustum.containsPoint(v.getSelectionCenter()))))\n        if (entities.length < 1) entities = GameState.buildings.filter((b) => frustum.containsPoint(b.getSelectionCenter()))\n        GameState.selectEntities(entities)\n    }\n\n    setupScene() {\n        this.scene = new Scene()\n        // this.scene.fog = new FogExp2(0x6e6e9b, 0.05); // TODO derive from level config\n\n        this.amb = new AmbientLight(0x808080) // TODO use \"cave\" light setup\n        this.scene.add(this.amb)\n\n        this.cursorTorchlight = new PointLight(0xffffff, 1, 7, 2)\n        this.cursorTorchlight.distance *= TILESIZE\n        this.scene.add(this.cursorTorchlight)\n    }\n\n    startScene() {\n        this.debugHelper.show()\n        this.renderInterval = setInterval(() => {\n            this.animRequest = requestAnimationFrame(() => {\n                this.debugHelper.renderStart()\n                this.renderer.render(this.scene, this.camera)\n                this.debugHelper.renderDone()\n            })\n        }, 1000 / this.maxFps)\n    }\n\n    disposeScene() {\n        this.debugHelper.hide()\n        if (this.renderInterval) {\n            clearInterval(this.renderInterval)\n            this.renderInterval = null\n        }\n        if (this.animRequest) {\n            cancelAnimationFrame(this.animRequest)\n            this.animRequest = null\n        }\n        this.terrain?.dispose()\n        this.terrain = null\n        SceneManager.meshRegistry.forEach(mesh => {\n            // TODO stop animation intervals/timeouts\n            mesh.geometry.dispose() // TODO refactor better handle on entity level\n            Array.isArray(mesh.material) ? mesh.material.forEach(mat => mat.dispose()) : mesh.material?.dispose()\n        })\n        SceneManager.meshRegistry = []\n    }\n\n    static registerMesh(mesh: Mesh): Mesh {\n        this.meshRegistry.push(mesh)\n        return mesh\n    }\n\n}\n","import { AnimationEntityType } from '../scene/model/anim/AnimationEntityType'\nimport { getPath, iGet } from './wadworker/WadUtil'\nimport { ResourceManager } from './ResourceManager'\nimport { LWOLoader } from './LWOLoader'\nimport { LWSCLoader } from './LWSCLoader'\nimport { SceneManager } from '../scene/SceneManager'\n\nexport class AnimEntityLoader {\n\n    static loadModels(url, root): AnimationEntityType {\n        const path = getPath(url)\n\n        const entityType = new AnimationEntityType()\n\n        entityType.carryNullName = iGet(root, 'CarryNullName')\n\n        // TODO load other poly quality models (if available)\n        // let mediumPoly = iGet(root, 'MediumPoly');\n        // if (mediumPoly) {\n        //     Object.keys(mediumPoly).forEach((key) => {\n        //         const polyname = mediumPoly[key];\n        //         const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //         const polyfile = path + polyname + '.lwo';\n        //         console.log('polyfile');\n        //         console.log(polyfile);\n        //         // new LWOLoader().load(polyfile, (model) => {\n        //         //     mediumPoly[polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //         // }, undefined, () => {\n        //         //     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //         // });\n        //     });\n        //     Object.keys(mediumPoly).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete mediumPoly[polykey]);\n        // }\n\n        const highPoly = iGet(root, 'highpoly')\n        if (highPoly) {\n            entityType.highPoly = {}\n            Object.keys(highPoly).forEach((key) => {\n                const polyname = highPoly[key] + '.lwo'\n                const polykey = key.startsWith('!') ? key.slice(1) : key\n                // console.log(path + polyname);\n                // TODO do not parse twice, read from cache first\n                const lwoBuffer = ResourceManager.getResource(path + polyname)\n                entityType.highPoly[polykey] = SceneManager.registerMesh(new LWOLoader(path).parse(lwoBuffer))\n            })\n        }\n\n        // let fPoly = (root)['fppoly'];\n        // if (fPoly) {\n        //     Object.keys(fPoly).forEach((camera) => {\n        //         Object.keys(fPoly[camera]).forEach((key) => {\n        //             const polyname = fPoly[camera][key];\n        //             const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //             if (polyname !== 'null') {\n        //                 const polyfile = path + polyname + '.lwo';\n        //                 new LWOLoader().load(polyfile, (model) => {\n        //                     fPoly[camera][polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //                 }, undefined, () => {\n        //                     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //                 });\n        //             } else {\n        //                 fPoly[camera][key] = {polyname: polyname, polyfile: null, model: new Group()};\n        //             }\n        //         });\n        //         Object.keys(fPoly[camera]).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete fPoly[polykey][camera]);\n        //     });\n        // }\n\n        const activities = iGet(root, 'Activities')\n        if (activities) {\n            Object.keys(activities).forEach((activity) => {\n                try {\n                    let keyname = iGet(activities, activity)\n                    const act = iGet(root, keyname)\n                    const file = iGet(act, 'FILE')\n                    const isLws = iGet(act, 'LWSFILE') === true\n                    const transcoef = iGet(act, 'TRANSCOEF')\n                    const looping = iGet(act, 'LOOPING') === true\n                    if (isLws) {\n                        const content = ResourceManager.getResource(path + file + '.lws')\n                        act.animation = new LWSCLoader(path).parse(content)\n                        act.animation.looping = looping\n                        act.animation.transcoef = transcoef ? Number(transcoef) : 1;\n                        (entityType.activities)[keyname] = act\n                    } else {\n                        console.error('Found activity which is not an LWS file')\n                    }\n                } catch (e) {\n                    console.error(e)\n                    console.log(root)\n                    console.log(activities)\n                    console.log(activity)\n                }\n            })\n        }\n\n        return entityType\n    }\n\n}\n","import { createContext, createDummyImgData, getPixel, setPixel } from './ImageHelper'\n\nexport class BitmapFont {\n\n    charHeight: number\n    letters: ImageData[] = []\n\n    constructor(fontImageData: ImageData, cols = 10, rows = 19) { // font images always consist of 10 columns and 19 rows with last row empty\n        // actually chars are font dependent and have to be externalized in future\n        // maybe CP850 was used... not sure, doesn't fit...\n        const chars = [' ', '!', '\"', '#', '$', '%', '⌵', '`', '(', ')',\n            '*', '+', ',', '-', '.', '/', '0', '1', '2', '3',\n            '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',\n            '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n            'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n            'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[',\n            '\\\\', ']', '^', '_', '\\'', 'a', 'b', 'c', 'd', 'e',\n            'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\n            'z', 'Ä', 'Å', 'Á', 'À', 'Â', 'Ã', 'Ą', 'ä', 'å',\n            'á', 'à', 'â', 'ã', 'ą', 'Ë', 'E̊', 'É', 'È', 'É',\n            'Ę', 'ë', 'e̊', 'é', 'è', 'e̊', 'ę̊', '', '', '',\n            '', '', '', '', '', 'Ö', '', '', '', '',\n            'ö', '', '', '', '', 'Ü', '', '', '', 'ü',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', 'ß', '', '', '', 'Ñ', '', 'ñ',\n            '',\n        ] // TODO complete this character list\n\n        const maxCharWidth = fontImageData.width / cols\n        this.charHeight = fontImageData.height / rows\n\n        function getActualCharacterWidth(imgData) {\n            for (let y = 0; y < imgData.height / rows; y++) { // find non-empty row first\n                let rowPixelIndex = y * 4 * imgData.width\n                if (imgData.data[rowPixelIndex] !== 255 && imgData.data[rowPixelIndex + 2] !== 255) { // red/blue pixels indicate end of character\n                    for (let x = 0; x < maxCharWidth; x++) {\n                        let colPixelIndex = x * 4\n                        if (imgData.data[colPixelIndex] === 255 || imgData.data[colPixelIndex + 2] === 255) { // red/blue pixels indicate end of character\n                            return x\n                        }\n                    }\n                    return maxCharWidth\n                }\n            }\n            return 0\n        }\n\n        for (let i = 0; i < chars.length; i++) {\n            let imgData = this.extractData(fontImageData, (i % 10) * maxCharWidth, Math.floor(i / 10) * this.charHeight, maxCharWidth, this.charHeight)\n            let actualWidth = getActualCharacterWidth(imgData)\n            if (actualWidth > 0) {\n                imgData = this.extractData(imgData, 0, 0, actualWidth, this.charHeight)\n            } else {\n                imgData = createDummyImgData(maxCharWidth, this.charHeight)\n            }\n            this.letters[chars[i]] = imgData\n        }\n    }\n\n    extractData(imgData, startX, startY, width, height): ImageData {\n        const alpha = getPixel(imgData, startX + width - 1, startY + height - 1)\n        const result = new ImageData(width, height)\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const p = getPixel(imgData, startX + x, startY + y)\n                if (p.r === alpha.r && p.g === alpha.g && p.b === alpha.b) p.a = 0 // apply alpha channel\n                setPixel(result, x, y, p.r, p.g, p.b, p.a)\n            }\n        }\n        return result\n    }\n\n    createTextImage(text: string, maxWidth?: number, autoCenter: boolean = true): HTMLCanvasElement {\n        if (text === undefined || text === null || text.length < 1) {\n            // empty text requested, context with width 0 is not allowed, but 1 with alpha is close enough\n            return createContext(1, 1).canvas\n        }\n        text = text.replace(/_/g, ' ')\n        const rows = this.determineRows(text, maxWidth)\n        const width = Math.max(...(rows.map(r => r.width)))\n        const result = new ImageData(width, this.charHeight * rows.length)\n        rows.forEach((row, index) => {\n            const rowX = autoCenter ? Math.round((width - row.width) / 2) : 0\n            const rowY = index * this.charHeight\n            let letterX = 0\n            for (let c = 0; c < row.text.length; c++) {\n                const letterImgData = this.letters[row.text.charAt(c)]\n                if (letterImgData) {\n                    for (let x = letterX; x < letterX + letterImgData.width; x++) {\n                        for (let y = 0; y < letterImgData.height; y++) {\n                            const p = getPixel(letterImgData, x - letterX, y)\n                            setPixel(result, rowX + x, rowY + y, p.r, p.g, p.b, p.a)\n                        }\n                    }\n                    letterX += letterImgData.width\n                } // missing letter issue already reported above\n            }\n        })\n        const img: CanvasRenderingContext2D = createContext(result.width, result.height)\n        img.putImageData(result, 0, 0)\n        return img.canvas\n    }\n\n    private determineRows(text: string, maxWidth?: number): { text: string, width: number }[] {\n        const spaceWidth = this.letters[' '].width\n        const rows: { text: string, width: number }[] = []\n        let rowText = ''\n        let rowWidth = 0\n        text.split(' ').map(word => {\n            let wordWidth = 0\n            for (let c = 0; c < word.length; c++) {\n                const letter = word.charAt(c)\n                const letterImg = this.letters[letter]\n                if (letterImg) {\n                    wordWidth += letterImg.width\n                } else {\n                    console.error('Letter \\'' + letter + '\\' not found in charset! Ignoring it')\n                }\n            }\n            if (rowWidth > 0) {\n                if (!maxWidth || rowWidth + spaceWidth + wordWidth < maxWidth) {\n                    rowText += ' ' + word\n                    rowWidth += spaceWidth + wordWidth\n                } else {\n                    rows.push({text: rowText, width: rowWidth})\n                    rowText = word\n                    rowWidth = wordWidth\n                }\n            } else {\n                rowText += word\n                rowWidth += wordWidth\n            }\n            return wordWidth\n        })\n        if (rowWidth > 0) rows.push({text: rowText, width: rowWidth})\n        return rows\n    }\n}\n","import { ScreenLayer } from '../screen/ScreenLayer'\nimport { BaseScreen } from '../screen/BaseScreen'\n\n// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n}\n\nexport enum POINTER_EVENT {\n    MOVE,\n    DOWN,\n    UP,\n}\n\nexport enum KEY_EVENT {\n    DOWN,\n    UP,\n}\n\nexport class EventManager {\n\n    constructor(screen: BaseScreen) {\n        screen.gameCanvasContainer.addEventListener('contextmenu', (event: MouseEvent) => {\n            if (screen.isInRect(event)) event.preventDefault()\n        })\n        new Map<string, POINTER_EVENT>([\n            ['pointermove', POINTER_EVENT.MOVE],\n            ['pointerdown', POINTER_EVENT.DOWN],\n            ['pointerup', POINTER_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: PointerEvent) => {\n                if (!screen.isInRect(event)) return\n                event.preventDefault()\n                // all event attibutes used by controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n                const nonBubblingClone = new PointerEvent(event.type, {\n                    bubbles: false, // disable bubbling otherwise we'll trigger this same event handler again\n                    clientX: event.clientX,\n                    clientY: event.clientY,\n                    pointerType: event.pointerType,\n                    button: event.button,\n                    ctrlKey: event.ctrlKey,\n                    metaKey: event.metaKey,\n                    shiftKey: event.shiftKey,\n                })\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handlePointerEvent(eventEnum, nonBubblingClone))\n            })\n        })\n        new Map<string, KEY_EVENT>([\n            ['keydown', KEY_EVENT.DOWN],\n            ['keyup', KEY_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: KeyboardEvent) => {\n                // event.preventDefault(); // otherwise page reload with F5 stops working (may be intended in future)\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handleKeyEvent(eventEnum, event))\n            })\n        })\n        screen.gameCanvasContainer.addEventListener('wheel', (event: WheelEvent) => {\n            if (!screen.isInRect(event)) return\n            // all event attibutes used by controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n            const nonBubblingClone = new WheelEvent(event.type, {\n                bubbles: false, // disable bubbling otherwise we'll trigger this same event handler again\n                clientX: event.clientX,\n                clientY: event.clientY,\n                deltaX: event.deltaX,\n                deltaY: event.deltaY,\n                deltaZ: event.deltaZ,\n                button: event.button,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey,\n                shiftKey: event.shiftKey,\n            })\n            screen.layers.filter(l => l.isActive())\n                .sort((a, b) => ScreenLayer.compareZ(a, b))\n                .some(l => l.handleWheelEvent(nonBubblingClone))\n        })\n    }\n\n}\n","import ResourceWorker from 'worker-loader!./wadworker/Resources'\nimport { RepeatWrapping, Texture } from 'three'\nimport { AnimationEntityType } from '../scene/model/anim/AnimationEntityType'\nimport { InitLoadingMessage } from './wadworker/InitLoadingMessage'\nimport { createContext, createDummyImgData } from '../core/ImageHelper'\nimport { iGet } from './wadworker/WadUtil'\nimport { getFilename } from '../core/Util'\nimport { AnimEntityLoader } from './AnimEntityLoader'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { WorkerMessage, WorkerMessageType } from './wadworker/WorkerMessage'\n\nexport class ResourceManager {\n\n    static worker: ResourceWorker = new ResourceWorker()\n    static configuration: any = {}\n    static resourceByName: {} = {}\n    static fontCache = {}\n\n    static startLoadingFromCache() {\n        return this.startLoading(null)\n    }\n\n    static startLoadingFromUrl(wad0Url: string, wad1Url: string) {\n        return this.startLoading(new InitLoadingMessage(wad0Url, wad1Url))\n    }\n\n    private static startLoading(msg: InitLoadingMessage) {\n        this.worker.onmessage = (event) => {\n            const msg: WorkerMessage = event.data\n            if (msg.type === WorkerMessageType.ASSET) {\n                this.resourceByName[msg.assetName.toLowerCase()] = msg.assetObj\n                this.onAssetLoaded(msg.assetIndex)\n            } else if (msg.type === WorkerMessageType.MSG) {\n                this.onMessage(msg.text)\n            } else if (msg.type === WorkerMessageType.CFG) {\n                this.configuration = msg.cfg\n                this.onInitialLoad(msg.totalResources)\n            } else if (msg.type === WorkerMessageType.CACHE_MISS) {\n                this.onCacheMissed()\n            } else if (msg.type === WorkerMessageType.DONE) {\n                console.log('Loading of about ' + msg.totalResources + ' assets complete! Total load time: ' + msg.loadingTimeSeconds + ' seconds.')\n                this.onLoadDone()\n            }\n        }\n        this.worker.postMessage(msg)\n    }\n\n    static onMessage: (msg: string) => any = (msg: string) => {\n        console.log(msg)\n    }\n\n    static onCacheMissed: () => any = () => {\n        console.log('Worker missed cache')\n    }\n\n    static onInitialLoad: (totalResources: number) => any = () => {\n        console.log('Initial loading done.')\n    }\n\n    static onAssetLoaded: (assetIndex: number) => any = () => {\n    }\n\n    static onLoadDone: () => any = () => {\n    }\n\n    static cfg(...keys: string[]): any {\n        return iGet(ResourceManager.configuration, ...keys)\n    }\n\n    static filterTextureSequenceNames(basename: string): string[] {\n        const lBasename = basename.toLowerCase()\n        const result = Object.keys(this.resourceByName).filter((name) => name.startsWith(lBasename))\n        if (result.length > 0) {\n            return result\n        } else if (!lBasename.startsWith('world/shared/')) {\n            return ResourceManager.filterTextureSequenceNames('world/shared/' + getFilename(basename))\n        } else {\n            console.warn('Texture sequence not found: ' + basename)\n            return null\n        }\n    }\n\n    static getResource(resourceName: string): any {\n        const lName = resourceName ? resourceName.toString().toLowerCase() : null\n        if (lName && this.resourceByName.hasOwnProperty(lName)) {\n            return this.resourceByName[lName]\n        }\n        return null\n    }\n\n    static getImageData(imageName): ImageData {\n        if (!imageName || imageName.length === 0) {\n            throw 'imageName must not be undefined, null or empty - was ' + imageName\n        }\n        const lImageName = imageName.toLowerCase()\n        let imgData = this.getResource(lImageName)\n        if (!imgData) {\n            console.error('Image \\'' + imageName + '\\' unknown! Using placeholder image instead')\n            ResourceManager.resourceByName[lImageName] = createDummyImgData(64, 64)\n        }\n        return ResourceManager.resourceByName[lImageName]\n    }\n\n    static getImage(imageName: string): HTMLCanvasElement {\n        const imgData = this.getImageData(imageName)\n        const context: CanvasRenderingContext2D = createContext(imgData.width, imgData.height)\n        context.putImageData(imgData, 0, 0)\n        return context.canvas\n    }\n\n    static getImageOrNull(imageName: string): HTMLCanvasElement | null {\n        if (!imageName) return null\n        return this.getImage(imageName)\n    }\n\n    static getTexture(textureName): Texture {\n        if (!textureName || textureName.length === 0) {\n            throw 'textureName must not be undefined, null or empty - was ' + textureName\n        }\n        const lTextureName = textureName.toLowerCase()\n        const lSharedTextureName = 'world/shared/' + getFilename(lTextureName)\n        let imgData = this.getResource(lTextureName) || this.getResource(lSharedTextureName)\n        if (!imgData) {\n            if (lTextureName !== 'buildings/geo-dome/a_walkie.bmp' && lTextureName !== 'world/shared/teofoilreflections.jpg') { // known issues\n                console.warn('Texture \\'' + textureName + '\\' (' + lTextureName + ', ' + lSharedTextureName + ') unknown! Using placeholder texture instead')\n            }\n            ResourceManager.resourceByName[lTextureName] = imgData = createDummyImgData(64, 64)\n        }\n        const texture = new Texture(imgData, Texture.DEFAULT_MAPPING, RepeatWrapping, RepeatWrapping)\n        texture.needsUpdate = true\n        return texture\n    }\n\n    static getMap(name: string) {\n        return name ? this.getResource(name) : null\n    }\n\n    static getAnimationEntityType(aeFilename: string): AnimationEntityType {\n        let cfgRoot = this.getResource(aeFilename)\n        if (!cfgRoot) throw 'Could not get animation entity type for: ' + aeFilename\n        return AnimEntityLoader.loadModels(aeFilename, cfgRoot)\n    }\n\n    static getBitmapFont(name: string): BitmapFont {\n        ResourceManager.fontCache[name] = ResourceManager.fontCache[name] || new BitmapFont(this.getResource(name))\n        return ResourceManager.fontCache[name]\n    }\n\n}\n","import { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../main'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { KEY_EVENT, POINTER_EVENT } from '../event/EventManager'\n\nexport class ScreenLayer {\n\n    canvas: HTMLCanvasElement\n    context: CanvasRenderingContext2D\n    onRedraw: (context: CanvasRenderingContext2D) => any\n\n    constructor(alpha: boolean = false, withContext: boolean = true) {\n        this.canvas = document.createElement('canvas')\n        if (!alpha) this.canvas.style.background = '#f0f'\n        if (withContext) this.context = this.canvas.getContext('2d', {alpha: alpha})\n        this.hide()\n    }\n\n    setZIndex(zIndex: number) {\n        this.canvas.style.zIndex = String(zIndex)\n    }\n\n    static compareZ(layerA: ScreenLayer, layerB: ScreenLayer) {\n        let aIndex = layerA?.canvas?.style?.zIndex || 0\n        const bIndex = layerB?.canvas?.style?.zIndex || 0\n        return aIndex === bIndex ? 0 : aIndex > bIndex ? -1 : 1\n    }\n\n    resize(width, height) {\n        this.canvas.width = width\n        this.canvas.height = height\n    }\n\n    redraw() {\n        const callback = this.onRedraw\n        if (this.isActive() && callback) {\n            const context = this.context\n            requestAnimationFrame(() => callback(context))\n        }\n    }\n\n    show() {\n        this.canvas.style.visibility = 'visible'\n        this.redraw()\n    }\n\n    hide() {\n        this.canvas.style.visibility = 'hidden'\n    }\n\n    isActive() {\n        return this.canvas.style.visibility === 'visible'\n    }\n\n    toCanvasCoords(windowX: number, windowY: number) {\n        const clientRect = this.canvas.getBoundingClientRect()\n        return [windowX - clientRect.left, windowY - clientRect.top]\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        return false\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        return false\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        return false\n    }\n\n}\n\nexport class ScaledLayer extends ScreenLayer {\n\n    fixedWidth: number\n    fixedHeight: number\n\n    constructor() {\n        super(true)\n        this.fixedWidth = SPRITE_RESOLUTION_WIDTH\n        this.fixedHeight = SPRITE_RESOLUTION_HEIGHT\n    }\n\n    toScaledCoords(windowX: number, windowY: number) {\n        const [cx, cy] = this.toCanvasCoords(windowX, windowY)\n        return [cx / this.scaleX(), cy / this.scaleY()]\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        this.context.scale(this.scaleX(), this.scaleY())\n    }\n\n    scaleX() {\n        return this.canvas.width / this.fixedWidth\n    }\n\n    scaleY() {\n        return this.canvas.height / this.fixedHeight\n    }\n\n}\n\nexport class CursorLayer extends ScaledLayer {\n\n    curUrl\n    cursorName: string = 'Aclosed'\n\n    show() {\n        super.show()\n        this.createCursor()\n    }\n\n    hide() {\n        super.hide()\n        this.canvas.style.cursor = null\n    }\n\n    createCursor() {\n        if (this.curUrl) URL.revokeObjectURL(this.curUrl)\n        const curImg = ResourceManager.getImage('Interface/Pointers/' + this.cursorName + '.bmp')\n        this.curUrl = curImg.toDataURL()\n        // Chrome limits cursor size to 32x32 anyway...\n        // const context: CanvasRenderingContext2D = createContext(curImg.width * this.scaleX(), curImg.height * this.scaleY());\n        // context.scale(this.scaleX(), this.scaleY());\n        // context.drawImage(curImg, 0, 0);\n        // this.curUrl = context.canvas.toDataURL();\n        this.canvas.style.cursor = 'url(' + this.curUrl + '), auto'\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        if (this.isActive()) this.createCursor()\n    }\n\n}\n","import { Group, Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { Terrain } from './Terrain'\nimport { SurfaceType } from './SurfaceType'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Selectable, SelectionType } from '../../../game/model/Selectable'\nimport { EventBus } from '../../../event/EventBus'\nimport { SelectionEvent, SurfaceSelectedEvent } from '../../../event/LocalEvents'\nimport { JobType } from '../../../game/model/job/Job'\nimport { CavernDiscovered, JobCreateEvent, JobDeleteEvent, OreFoundEvent } from '../../../event/WorldEvents'\nimport { getRandom, getRandomSign } from '../../../core/Util'\nimport { Crystal } from '../collect/Crystal'\nimport { Ore } from '../collect/Ore'\nimport { HEIGHT_MULTIPLER, TILESIZE } from '../../../main'\nimport { GameState } from '../../../game/model/GameState'\nimport { SurfaceJob, SurfaceJobType } from '../../../game/model/job/SurfaceJob'\nimport { LWSCLoader } from '../../../resource/LWSCLoader'\nimport { AnimSubObj } from '../anim/AnimSubObj'\nimport { SurfaceGeometry } from './SurfaceGeometry'\nimport { CrystalFoundEvent, LandslideEvent } from '../../../event/WorldLocationEvent'\n\nexport class Surface implements Selectable {\n\n    terrain: Terrain\n    surfaceType: SurfaceType\n    x: number\n    y: number\n    containedOres: number = 0\n    containedCrystals: number = 0\n    heightOffset: number = null\n    discovered: boolean = false\n    selected: boolean = false\n    reinforced: boolean = false\n    jobs: SurfaceJob[] = []\n    surfaceRotation: number = 0\n    seamLevel: number = 0\n    fallinTimeout = null\n\n    fallinGrp: Group = null\n    animationTimeout = null\n\n    wallType: WALL_TYPE = null\n    mesh: Mesh = null\n    needsMeshUpdate: boolean = false\n\n    constructor(terrain: Terrain, surfaceType: SurfaceType, x: number, y: number, heightOffset: number) {\n        this.terrain = terrain\n        this.surfaceType = surfaceType\n        if (surfaceType === SurfaceType.CRYSTAL_SEAM || surfaceType === SurfaceType.ORE_SEAM) this.seamLevel = 4\n        this.x = x\n        this.y = y\n        this.heightOffset = heightOffset\n        EventBus.registerEventListener(JobCreateEvent.eventKey, (event: JobCreateEvent) => {\n            const jobType = event.job.type\n            if (jobType === JobType.SURFACE) {\n                const surfaceJob = event.job as SurfaceJob\n                if (surfaceJob.surface === this) this.jobs.push(surfaceJob)\n            }\n        })\n    }\n\n    hasJobType(type: SurfaceJobType) {\n        return this.jobs.some((job) => job.workType === type)\n    }\n\n    /**\n     * @return {boolean} Returns true, if a new cave has been discovered\n     */\n    discoverNeighbors(): boolean {\n        if (!this.discovered) GameState.discoverSurface(this)\n        this.discovered = true\n        this.needsMeshUpdate = true\n        let foundCave = false\n        if (this.surfaceType.floor) {\n            for (let x = this.x - 1; x <= this.x + 1; x++) {\n                for (let y = this.y - 1; y <= this.y + 1; y++) {\n                    if (x !== this.x || y !== this.y) {\n                        const surf = this.terrain.getSurfaceOrNull(x, y)\n                        if (surf && !surf.discovered) {\n                            foundCave = surf.discoverNeighbors() || surf.surfaceType.floor\n                            surf.needsMeshUpdate = true\n                        }\n                    }\n                }\n            }\n        }\n        return foundCave\n    }\n\n    collapse() {\n        this.cancelJobs()\n        if (this.fallinTimeout) clearTimeout(this.fallinTimeout)\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.containedOres += 4\n        this.needsMeshUpdate = true\n        // discover surface and all neighbors\n        const foundCave = this.discoverNeighbors()\n        if (foundCave) EventBus.publishEvent(new CavernDiscovered())\n        // check for unsupported neighbors\n        for (let x = this.x - 1; x <= this.x + 1; x++) {\n            for (let y = this.y - 1; y <= this.y + 1; y++) {\n                if (x !== this.x || y !== this.y) {\n                    const surf = this.terrain.getSurface(x, y)\n                    surf.needsMeshUpdate = true\n                    if (!surf.isSupported()) surf.collapse()\n                }\n            }\n        }\n        // update meshes\n        this.terrain.updateSurfaceMeshes()\n        this.terrain.floorGroup.updateWorldMatrix(true, true)\n        // drop contained crystals and ores\n        for (let c = 0; c < this.containedCrystals; c++) {\n            const x = this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4)\n            const z = this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4)\n            const crystal = this.terrain.worldMgr.addCollectable(new Crystal(), x, z)\n            EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n        }\n        this.dropContainedOre(this.containedOres - 4)\n        // TODO workaround until buildings can be placed without terrain ray intersection\n        GameState.buildings.forEach((b) => b.group.position.y = this.terrain.worldMgr.getTerrainHeight(b.group.position.x, b.group.position.z))\n    }\n\n    private dropContainedOre(dropAmount: number) {\n        for (let c = 0; c < dropAmount && this.containedOres > 0; c++) {\n            this.containedOres--\n            const x = this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4)\n            const z = this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4)\n            this.terrain.worldMgr.addCollectable(new Ore(), x, z)\n            EventBus.publishEvent(new OreFoundEvent())\n        }\n    }\n\n    cancelJobs() {\n        const jobs = this.jobs // ensure consistency while processing\n        this.jobs = []\n        jobs.forEach((job) => EventBus.publishEvent(new JobDeleteEvent(job)))\n        this.updateJobColor()\n    }\n\n    reduceRubble() {\n        if (this.surfaceType === SurfaceType.RUBBLE4) this.surfaceType = SurfaceType.RUBBLE3\n        else if (this.surfaceType === SurfaceType.RUBBLE3) this.surfaceType = SurfaceType.RUBBLE2\n        else if (this.surfaceType === SurfaceType.RUBBLE2) this.surfaceType = SurfaceType.RUBBLE1\n        else if (this.surfaceType === SurfaceType.RUBBLE1) this.surfaceType = SurfaceType.GROUND\n        this.dropContainedOre(1)\n        this.updateTexture()\n    }\n\n    isSupported(): boolean {\n        if (this.surfaceType.floor) return true\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        return isHighGround(surfLeft, surfTopLeft, surfTop)\n            || isHighGround(surfTop, surfTopRight, surfRight)\n            || isHighGround(surfRight, surfBottomRight, surfBottom)\n            || isHighGround(surfBottom, surfBottomLeft, surfLeft)\n    }\n\n    updateMesh(force: boolean = true) {\n        if (!force && !this.needsMeshUpdate) return\n        this.needsMeshUpdate = false\n\n        const topLeftVertex = new Vector3(this.x, 0, this.y)\n        const topRightVertex = new Vector3(this.x + 1, 0, this.y)\n        const bottomLeftVertex = new Vector3(this.x, 0, this.y + 1)\n        const bottomRightVertex = new Vector3(this.x + 1, 0, this.y + 1)\n\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        if (!this.discovered) {\n            topLeftVertex.y = 1\n            topRightVertex.y = 1\n            bottomRightVertex.y = 1\n            bottomLeftVertex.y = 1\n        } else if (!this.surfaceType.floor) {\n            if (isHighGround(surfLeft, surfTopLeft, surfTop)) topLeftVertex.y = 1\n            if (isHighGround(surfTop, surfTopRight, surfRight)) topRightVertex.y = 1\n            if (isHighGround(surfRight, surfBottomRight, surfBottom)) bottomRightVertex.y = 1\n            if (isHighGround(surfBottom, surfBottomLeft, surfLeft)) bottomLeftVertex.y = 1\n        }\n\n        // update mesh (geometry), if wall type changed\n        let wallType = topLeftVertex.y + topRightVertex.y + bottomRightVertex.y + bottomLeftVertex.y\n        if (wallType === WALL_TYPE.WALL && topLeftVertex.y === bottomRightVertex.y) wallType = WALL_TYPE.WEIRD_CREVICE\n\n        if (this.wallType !== wallType) {\n            this.wallType = wallType\n            this.updateGeometry(topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex, surfTopLeft, surfTop, surfLeft, surfTopRight, surfRight, surfBottomRight, surfBottom, surfBottomLeft)\n            if (this.wallType !== WALL_TYPE.WALL) this.cancelReinforceJobs()\n            // TODO if wall was reinforced remove it (same for fallin)\n        }\n\n        this.updateTexture()\n        this.updateJobColor()\n    }\n\n    cancelReinforceJobs() {\n        const otherJobs = []\n        this.jobs.forEach((job) => {\n            if (job.workType === SurfaceJobType.REINFORCE) {\n                EventBus.publishEvent(new JobDeleteEvent(job))\n            } else {\n                otherJobs.push(job)\n            }\n        })\n        this.jobs = otherJobs\n        this.updateJobColor()\n    }\n\n    updateTexture() {\n        let textureName = this.terrain.textureSet.texturebasename\n        if (!this.discovered) {\n            textureName += '70'\n        } else if (this.surfaceType === SurfaceType.POWER_PATH) {\n            textureName += this.updatePowerPathTexture()\n        } else if (!this.surfaceType.shaping) {\n            textureName += this.surfaceType.matIndex.toString()\n        } else if (this.wallType === WALL_TYPE.WEIRD_CREVICE) {\n            textureName += '77'\n        } else {\n            if (this.wallType === WALL_TYPE.CORNER) {\n                textureName += '5'\n            } else if (this.wallType === WALL_TYPE.INVERTED_CORNER) {\n                textureName += '3'\n            } else if (this.reinforced) {\n                textureName += '2'\n            } else {\n                textureName += '0'\n            }\n            textureName += this.surfaceType.matIndex\n        }\n        textureName += '.bmp'\n\n        const texture = ResourceManager.getTexture(textureName)\n        texture.center.set(0.5, 0.5)\n        texture.rotation = this.surfaceRotation\n\n        this.accessMaterials().forEach((mat) => mat.map = texture)\n    }\n\n    updatePowerPathTexture(): string {\n        this.surfaceRotation = 0\n        const left = this.terrain.getSurface(this.x - 1, this.y).isPath()\n        const top = this.terrain.getSurface(this.x, this.y - 1).isPath()\n        const right = this.terrain.getSurface(this.x + 1, this.y).isPath()\n        const bottom = this.terrain.getSurface(this.x, this.y + 1).isPath()\n        const pathSum = (left ? 1 : 0) + (top ? 1 : 0) + (right ? 1 : 0) + (bottom ? 1 : 0)\n        if (pathSum === 0 || pathSum === 1) {\n            if (left) this.surfaceRotation = Math.PI / 2\n            if (top) this.surfaceRotation = Math.PI\n            if (right) this.surfaceRotation = -Math.PI / 2\n            return '65'\n        } else if (pathSum === 2) {\n            if (left === right) {\n                this.surfaceRotation = left ? Math.PI / 2 : 0\n                return '62'\n            } else {\n                if (left && bottom) this.surfaceRotation = Math.PI / 2\n                if (left && top) this.surfaceRotation = Math.PI\n                if (top && right) this.surfaceRotation = -Math.PI / 2\n                return '63'\n            }\n        } else if (pathSum === 3) {\n            if (!top) this.surfaceRotation = Math.PI / 2\n            if (!right) this.surfaceRotation = Math.PI\n            if (!bottom) this.surfaceRotation = -Math.PI / 2\n            return '64'\n        } else {\n            return '60'\n        }\n    }\n\n    accessMaterials(): MeshPhongMaterial[] {\n        if (!this.mesh || !this.mesh.material) return []\n        if (Array.isArray(this.mesh.material)) {\n            return this.mesh.material as MeshPhongMaterial[]\n        } else {\n            return [this.mesh.material as MeshPhongMaterial]\n        }\n    }\n\n    updateGeometry(topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3, surfTopLeft: Surface, surfTop: Surface, surfLeft: Surface, surfTopRight: Surface, surfRight: Surface, surfBottomRight: Surface, surfBottom: Surface, surfBottomLeft: Surface) {\n        if (this.mesh) this.terrain.floorGroup.remove(this.mesh)\n        this.mesh?.geometry?.dispose()\n\n        function avgHeight(...args: Surface[]) {\n            let sum = 0, cnt = 0\n            args.map(s => s.heightOffset).filter(Boolean).forEach(h => {\n                sum += h\n                cnt++\n            })\n            return sum / cnt\n        }\n\n        const geometry = SurfaceGeometry.create(this.wallType, topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex,\n            topLeftVertex.y + avgHeight(surfTopLeft, surfTop, this, surfLeft) * HEIGHT_MULTIPLER,\n            topRightVertex.y + avgHeight(surfTop, surfTopRight, surfRight, this) * HEIGHT_MULTIPLER,\n            bottomRightVertex.y + avgHeight(this, surfRight, surfBottomRight, surfBottom) * HEIGHT_MULTIPLER,\n            bottomLeftVertex.y + avgHeight(surfLeft, this, surfBottom, surfBottomLeft) * HEIGHT_MULTIPLER,\n        )\n\n        this.mesh = new Mesh(geometry, new MeshPhongMaterial({shininess: 0}))\n        this.mesh.userData = {selectable: this}\n\n        this.terrain.floorGroup.add(this.mesh)\n        this.terrain.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.SURFACE\n    }\n\n    select(): SelectionEvent {\n        if (this.surfaceType.selectable && (this.wallType !== WALL_TYPE.INVERTED_CORNER && this.wallType !== WALL_TYPE.WEIRD_CREVICE) && !this.selected) {\n            this.selected = true\n            this.accessMaterials().forEach((mat) => mat.color.setHex(0x6060a0))\n            return new SurfaceSelectedEvent(this)\n        }\n        return null\n    }\n\n    deselect(): any {\n        if (this.selected) {\n            this.selected = false\n            this.updateJobColor()\n        }\n    }\n\n    getSelectionCenter(): Vector3 {\n        return null // not used\n    }\n\n    updateJobColor() {\n        let color = 0xffffff\n        this.jobs.forEach((job) => color = job.workType.color) // TODO prioritize colors?\n        this.accessMaterials().forEach((mat) => mat.color.setHex(color))\n    }\n\n    hasRubble(): boolean { // TODO performance: use boolean on surfacetype\n        return this.surfaceType === SurfaceType.RUBBLE1\n            || this.surfaceType === SurfaceType.RUBBLE2\n            || this.surfaceType === SurfaceType.RUBBLE3\n            || this.surfaceType === SurfaceType.RUBBLE4\n    }\n\n    isPath(): boolean {\n        return this.surfaceType === SurfaceType.POWER_PATH || this.surfaceType === SurfaceType.POWER_PATH_BUILDING\n    }\n\n    isWalkable(): boolean {\n        return this.surfaceType.floor && this.discovered && this.surfaceType !== SurfaceType.LAVA && this.surfaceType !== SurfaceType.WATER\n    }\n\n    isDrillable(): boolean {\n        return this.surfaceType.drillable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDrillableHard(): boolean {\n        return this.surfaceType.drillableHard && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isReinforcable(): boolean {\n        return this.surfaceType.reinforcable && this.discovered && this.wallType === WALL_TYPE.WALL && !this.reinforced\n    }\n\n    isExplodable(): boolean {\n        return this.surfaceType.explodable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDigable(): boolean {\n        return this.isDrillable() || this.isExplodable()\n    }\n\n    getDigPositions(): Vector3[] {\n        const digPosition = []\n        if (this.terrain.getSurface(this.x - 1, this.y).isWalkable()) digPosition.push(new Vector3(this.x * TILESIZE - 1, 0, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y - 1).isWalkable()) digPosition.push(new Vector3(this.x * TILESIZE + TILESIZE / 2, 0, this.y * TILESIZE - 1))\n        if (this.terrain.getSurface(this.x + 1, this.y).isWalkable()) digPosition.push(new Vector3(this.x * TILESIZE + TILESIZE + 1, 0, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y + 1).isWalkable()) digPosition.push(new Vector3(this.x * TILESIZE + TILESIZE / 2, 0, this.y * TILESIZE + TILESIZE + 1))\n        return digPosition\n    }\n\n    reinforce() {\n        this.reinforced = true\n        this.cancelReinforceJobs()\n        if (this.fallinTimeout) clearTimeout(this.fallinTimeout)\n        this.updateTexture()\n    }\n\n    getCenterWorld(): Vector3 {\n        const center = new Vector3(this.x * TILESIZE + TILESIZE / 2, 0, this.y * TILESIZE + TILESIZE / 2)\n        center.y = this.terrain.worldMgr.getTerrainHeight(center.x, center.z)\n        return center\n    }\n\n    setFallinLevel(fallinLevel: number) {\n        if (fallinLevel < 1) return\n        let originPos\n        let targetPos\n        if (this.surfaceType.floor) {\n            originPos = this.terrain.findFallInOrigin(this.x, this.y)\n            targetPos = [this.x, this.y]\n        } else {\n            originPos = [this.x, this.y]\n            targetPos = this.terrain.findFallInTarget(this.x, this.y)\n        }\n        if (originPos && targetPos) {\n            this.terrain.getSurface(originPos[0], originPos[1]).scheduleFallin(targetPos[0], targetPos[1])\n        }\n    }\n\n    scheduleFallin(targetX: number, targetY: number) {\n        this.fallinTimeout = setTimeout(() => {\n            this.createFallin(targetX, targetY)\n            this.scheduleFallin(targetX, targetY)\n        }, (30 + getRandom(60)) * 1000) // TODO adapt timer to level multiplier and fallin value\n    }\n\n    createFallin(targetX: number, targetY: number) {\n        const fallinPosition = this.terrain.getSurface(targetX, targetY).getCenterWorld()\n        EventBus.publishEvent(new LandslideEvent(fallinPosition))\n\n        // FIXME refactor animation handling\n        const content = ResourceManager.getResource('MiscAnims/RockFall/Rock3Sides.lws')\n        const animation = new LWSCLoader('MiscAnims/RockFall/').parse(content)\n        this.fallinGrp = new Group()\n        this.fallinGrp.position.copy(fallinPosition)\n        const dx = this.x - targetX, dy = targetY - this.y\n        this.fallinGrp.rotateOnAxis(new Vector3(0, 1, 0), Math.atan2(dy, dx) + Math.PI / 2)\n        this.terrain.worldMgr.sceneManager.scene.add(this.fallinGrp)\n        const poly = []\n        animation.bodies.forEach((body) => {\n            const polyModel = body.model.clone(true)\n            poly.push(polyModel)\n        })\n        animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                poly[parentInd].add(polyPart)\n            } else {\n                this.fallinGrp.add(polyPart)\n            }\n        })\n        this.animate(poly, animation, 0)\n\n        const targetSurface = this.terrain.getSurface(targetX, targetY)\n        targetSurface.surfaceType = SurfaceType.RUBBLE4\n        targetSurface.updateTexture()\n    }\n\n    animate(poly, animation, frameIndex) { // FIXME refactor animation handling\n        if (poly.length !== animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = true\n                        mat.alphaTest = 0\n                    })\n                }\n            }\n        })\n        this.animationTimeout = null\n        if (!(frameIndex + 1 > animation.lastFrame) || animation.looping) {\n            let nextFrame = frameIndex + 1\n            if (nextFrame > animation.lastFrame) {\n                nextFrame = animation.firstFrame\n            }\n            const that = this\n            this.animationTimeout = setTimeout(() => that.animate(poly, animation, nextFrame), 1000 / animation.framesPerSecond * animation.transcoef)\n        } else {\n            this.terrain.worldMgr.sceneManager.scene.remove(this.fallinGrp)\n            this.fallinGrp = null\n        }\n    }\n\n    dispose() {\n        this.mesh.geometry.dispose()\n        this.accessMaterials().forEach(m => m.dispose())\n    }\n\n}\n\nexport enum WALL_TYPE {\n\n    CORNER = 1,\n    WALL = 2,\n    INVERTED_CORNER = 3,\n    WEIRD_CREVICE = 20,\n\n}\n","import { CursorLayer, ScreenLayer } from './ScreenLayer'\nimport { EventManager } from '../event/EventManager'\n\nexport class BaseScreen {\n\n    gameCanvasContainer: HTMLElement\n    eventMgr: EventManager\n    layers: ScreenLayer[] = []\n    width: number = 800\n    height: number = 600\n    ratio: number = 800 / 600\n    cursorLayer: CursorLayer\n\n    constructor() {\n        this.gameCanvasContainer = document.getElementById('game-canvas-container')\n        this.gameCanvasContainer.focus()\n        this.eventMgr = new EventManager(this)\n        if (!this.gameCanvasContainer) throw 'Fatal error: game canvas container not found!'\n        window.addEventListener('resize', () => this.onWindowResize())\n        this.cursorLayer = this.addLayer(new CursorLayer(), 1000)\n        this.onWindowResize()\n    }\n\n    addLayer<T extends ScreenLayer>(layer: T, zIndex: number = 0): T {\n        layer.resize(this.width, this.height)\n        layer.setZIndex(zIndex)\n        this.layers.push(layer)\n        this.gameCanvasContainer.appendChild(layer.canvas)\n        return layer\n    }\n\n    redraw() {\n        this.layers.forEach((layer) => {\n            if (layer.isActive()) layer.redraw()\n        })\n    }\n\n    show() {\n        this.layers.forEach((layer) => layer.show())\n        this.redraw()\n    }\n\n    hide() {\n        this.layers.forEach((layer) => layer.hide())\n    }\n\n    onWindowResize() {\n        const maxWidth = this.gameCanvasContainer.offsetWidth, maxHeight = this.gameCanvasContainer.offsetHeight\n        const idealHeight = Math.round(maxWidth / this.ratio)\n        if (idealHeight > maxHeight) {\n            this.resize(Math.round(maxHeight * this.ratio), maxHeight)\n        } else {\n            this.resize(maxWidth, idealHeight)\n        }\n    }\n\n    resize(width: number, height: number) {\n        this.width = width\n        this.height = height\n        this.layers.forEach((layer) => layer.resize(width, height))\n        this.redraw()\n    }\n\n    isInRect(event: MouseEvent | WheelEvent) {\n        if (this.layers.length < 1) return false\n        const firstLayer = this.layers[0] // all layers have same state and size\n        if (!firstLayer.isActive() && !firstLayer.canvas) return false\n        const rect = firstLayer.canvas.getBoundingClientRect()\n        const clientX = event.clientX, clientY = event.clientY\n        return clientX >= rect.left && clientX < rect.right && clientY >= rect.top && clientY < rect.bottom\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class LoadingScreen extends BaseScreen {\n\n    layer: ScreenLayer\n    assetIndex: number = 0\n    totalResources: number = 0\n\n    constructor() {\n        super()\n        this.layer = this.addLayer(new ScreenLayer())\n        this.layer.onRedraw = (context) => {\n            // clear the screen to black\n            context.fillStyle = 'black'\n            context.fillRect(0, 0, this.width, this.height)\n            // draw the loading title\n            context.font = '48px Arial'\n            context.fillStyle = 'white'\n            context.fillText('Loading Rock Raiders', 5, this.height - 80)\n            // hard-code the first loading message\n            context.font = '30px Arial'\n            context.fillStyle = 'white'\n            context.fillText('Loading...', 20, this.height - 30)\n        }\n    }\n\n    show() {\n        this.layers.forEach((layer) => {\n            if (layer !== this.cursorLayer) layer.show()\n        })\n        this.redraw()\n    }\n\n    setLoadingMessage(text) {\n        this.layer.onRedraw = (context) => {\n            // wipe old message text\n            context.fillStyle = 'black'\n            context.fillRect(0, this.height - 60, this.width, 60)\n            // write new message text\n            context.font = '30px Arial'\n            context.fillStyle = 'white'\n            context.fillText(text, 20, this.height - 30)\n        }\n        this.redraw()\n    }\n\n    enableGraphicMode(totalResources: number) {\n        this.totalResources = totalResources\n        const imgBackground = ResourceManager.getImage(ResourceManager.cfg('Main', 'LoadScreen'))\n        const imgProgress = ResourceManager.getImage(ResourceManager.cfg('Main', 'ProgressBar'))\n        this.layer.onRedraw = (context => {\n            const screenZoom = this.width / imgBackground.width\n            const loadingBarWidth = 353 * this.assetIndex / this.totalResources * screenZoom\n            context.drawImage(imgBackground, 0, 0, this.width, this.height)\n            context.drawImage(imgProgress, 142 * screenZoom, 450 * screenZoom, loadingBarWidth, 9 * screenZoom)\n            // TODO show LoadingText from cfg\n        })\n        this.cursorLayer.show()\n        this.redraw()\n    }\n\n    setLoadingState(assetIndex) {\n        if (this.assetIndex === assetIndex) return\n        this.assetIndex = assetIndex\n        this.redraw()\n    }\n\n}\n","export class MainMenuBaseItem {\n\n    x: number = 0\n    y: number = 0\n    width: number = 0\n    height: number = 0\n    zIndex: number = 100\n    scrollAffected = false\n    needsRedraw: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n    actionName: string = ''\n    targetIndex: number = 0\n\n    static compareZ(left: MainMenuBaseItem, right: MainMenuBaseItem) {\n        return left.zIndex === right.zIndex ? 0 : left.zIndex > right.zIndex ? -1 : 1\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const hover = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        if (this.hover !== hover) {\n            this.hover = hover\n            this.needsRedraw = true\n            this.onHoverChange()\n        }\n        if (!this.hover) this.pressed = false\n        return this.hover\n    }\n\n    onHoverChange() {\n    }\n\n    checkSetPressed() {\n        if (!this.hover) return\n        if (!this.pressed) this.needsRedraw = true\n        this.pressed = true\n    }\n\n    setReleased() {\n        if (this.pressed) this.needsRedraw = true\n        this.pressed = false\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        this.needsRedraw = false\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\n\nexport class MainMenuLabelButton extends MainMenuBaseItem {\n\n    labelImgLo = null\n    labelImgHi = null\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.labelImgLo = layer.loFont.createTextImage(cfg.label)\n        this.labelImgHi = layer.hiFont.createTextImage(cfg.label)\n        this.width = Math.max(this.labelImgLo.width, this.labelImgHi.width)\n        this.height = Math.max(this.labelImgLo.height, this.labelImgHi.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const img = this.hover && !this.pressed ? this.labelImgHi : this.labelImgLo\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\n\nexport class MainMenuIconButton extends MainMenuBaseItem {\n\n    imgNormal = null\n    imgHover = null\n    imgPressed = null\n    tooltip = ''\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.imgNormal = ResourceManager.getImage(cfg.imgNormal)\n        this.imgHover = ResourceManager.getImage(cfg.imgHover)\n        this.imgPressed = ResourceManager.getImage(cfg.imgPressed)\n        this.tooltip = (cfg.tooltip || '').replace(/_/g, ' ')\n        this.width = Math.max(this.imgNormal.width, this.imgHover.width, this.imgPressed.width)\n        this.height = Math.max(this.imgNormal.height, this.imgHover.height, this.imgPressed.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgNormal\n        if (this.hover) img = this.imgHover\n        if (this.pressed) img = this.imgPressed\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuLabelButton } from './MainMenuLabelButton'\nimport { ScaledLayer } from '../screen/ScreenLayer'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventManager'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuIconButton } from './MainMenuIconButton'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\n\nexport class MainMenuLayer extends ScaledLayer {\n\n    screen: MainMenuScreen\n    cfg: MenuEntryCfg\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    items: MainMenuBaseItem[] = []\n    scrollY: number = 0\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg) {\n        super()\n        this.screen = screen\n        this.cfg = menuCfg\n        this.loFont = menuCfg.loFont ? ResourceManager.getBitmapFont(menuCfg.loFont) : null\n        this.hiFont = menuCfg.hiFont ? ResourceManager.getBitmapFont(menuCfg.hiFont) : null\n        this.menuImage = menuCfg.menuImage ? ResourceManager.getImage(menuCfg.menuImage) : null\n        this.titleImage = this.loFont.createTextImage(menuCfg.fullName)\n\n        menuCfg.itemsLabel.forEach((item) => {\n            if (item.label) {\n                this.items.push(new MainMenuLabelButton(this, item))\n            } else {\n                this.items.push(new MainMenuIconButton(this, item))\n            }\n        })\n        // TODO implement other elements like itemsTrigger\n\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n\n        this.onRedraw = (context) => {\n            context.drawImage(this.menuImage, 0, -this.scrollY)\n            if (menuCfg.displayTitle) context.drawImage(this.titleImage, (this.fixedWidth - this.titleImage.width) / 2, this.cfg.position[1])\n            this.items.forEach((item, index) => (this.items[this.items.length - 1 - index]).draw(context))\n        }\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (eventEnum === POINTER_EVENT.MOVE) { // TODO scroll when close to menu top/bottom border\n            const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n            let hovered = false\n            this.items.forEach((item) => {\n                if (!hovered) {\n                    const absY = sy + (item.scrollAffected ? this.scrollY : 0)\n                    hovered = item.checkHover(sx, absY)\n                } else {\n                    if (item.hover) item.needsRedraw = true\n                    item.hover = false\n                    item.setReleased()\n                }\n            })\n        } else if (eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => item.checkSetPressed())\n            }\n        } else if (eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => {\n                    if (item.pressed) {\n                        item.setReleased()\n                        if (item.actionName.toLowerCase() === 'next') {\n                            this.screen.showMainMenu(item.targetIndex)\n                        } else if (item.actionName.toLowerCase() === 'selectlevel') {\n                            this.screen.selectLevel((item as MainMenuLevelButton).levelKey)\n                        } else if (item.actionName) {\n                            console.warn('not implemented: ' + item.actionName + ' - ' + item.targetIndex)\n                        }\n                    }\n                })\n            }\n        }\n        if (this.needsRedraw()) this.redraw()\n        return false\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        if (!this.cfg.canScroll) return false\n        this.scrollY = Math.min(Math.max(this.scrollY + event.deltaY, 0), this.menuImage.height - this.fixedHeight)\n        this.redraw()\n        return true\n    }\n\n    needsRedraw(): boolean {\n        return this.items.some((item) => item.needsRedraw)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class MainMenuLevelButton extends MainMenuBaseItem {\n\n    layer: MainMenuLayer\n    imgActive = null\n    imgInactive = null\n    imgCross = null\n    unlocked: boolean = false\n    levelKey: string = ''\n\n    constructor(layer: MainMenuLayer, levelKey: string, levelCfg: LevelEntryCfg) {\n        super()\n        this.layer = layer\n        this.actionName = 'selectlevel'\n        this.levelKey = levelKey\n        this.x = levelCfg.frontEndX\n        this.y = levelCfg.frontEndY\n        this.zIndex = 10\n        this.scrollAffected = true\n        const [imgActive, imgInactive, imgCross] = levelCfg.menuBMP\n        this.imgActive = ResourceManager.getImage(imgActive)\n        this.imgInactive = ResourceManager.getImage(imgInactive)\n        this.imgCross = ResourceManager.getImage(imgCross)\n        this.width = Math.max(this.imgActive.width, this.imgInactive.width, this.imgCross.width)\n        this.height = Math.max(this.imgActive.height, this.imgInactive.height, this.imgCross.height)\n        this.unlocked = levelCfg.frontEndOpen\n        this.unlocked = true // TODO don't unlock everything by default\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgCross\n        if (this.unlocked) img = this.hover ? this.imgActive : this.imgInactive\n        context.drawImage(img, this.x, this.y - this.layer.scrollY)\n    }\n\n}\n","import { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { createContext } from '../core/ImageHelper'\n\nexport class MainMenuPanel extends MainMenuBaseItem {\n\n    context: CanvasRenderingContext2D\n\n    constructor(imgData: ImageData, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.zIndex = 50\n        this.context = createContext(imgData.width, imgData.height)\n        this.context.putImageData(imgData, 0, 0)\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const inRect = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        const hover = inRect && this.context.getImageData(sx, sy, 1, 1).data[3] > 0\n        if (this.hover !== hover) this.needsRedraw = true\n        this.hover = hover\n        return this.hover\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        context.drawImage(this.context.canvas, this.x, this.y, this.width, this.height)\n    }\n\n}\n","import { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { BitmapFont } from '../core/BitmapFont'\n\nexport class MainMenuWindow extends MainMenuBaseItem {\n\n    font: BitmapFont\n    imgFirstLine = null\n    imgSecondLine = null\n\n    constructor(font: BitmapFont, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.font = font\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    setFirstLine(text: string) {\n        this.imgFirstLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    setSecondLine(text: string) {\n        this.imgSecondLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const cx = this.x + this.width / 2, cy = this.y + this.height / 2\n        if (this.imgFirstLine) context.drawImage(this.imgFirstLine, cx - this.imgFirstLine.width / 2, cy - this.imgFirstLine.height)\n        if (this.imgSecondLine) context.drawImage(this.imgSecondLine, cx - this.imgSecondLine.width / 2, cy)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { LevelEntryCfg, LevelsCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { iGet } from '../core/Util'\nimport { MainMenuPanel } from './MainMenuPanel'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuWindow } from './MainMenuWindow'\n\nexport class LevelSelectLayer extends MainMenuLayer {\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg, modeLevel: boolean) {\n        super(screen, menuCfg)\n        const levelsCfg: LevelsCfg = ResourceManager.getResource('Levels')\n        const levelTextCfg = new LevelTextCfg()\n        this.items.push(new MainMenuPanel(levelTextCfg.panelImgData, levelTextCfg.panelPos))\n        const levelTextWindow = new MainMenuWindow(ResourceManager.getBitmapFont('Interface/Fonts/Font5_Hi.bmp'), levelTextCfg.window)\n        levelTextWindow.setFirstLine(modeLevel ? levelTextCfg.level : levelTextCfg.tutorial)\n        this.items.push(levelTextWindow)\n        Object.keys(levelsCfg.levelsByName).forEach((levelKey) => {\n            const level: LevelEntryCfg = levelsCfg.levelsByName[levelKey]\n            const levelButton = new MainMenuLevelButton(this, levelKey, level)\n            levelButton.onHoverChange = () => levelTextWindow.setSecondLine(levelButton.hover ? level.fullName : '')\n            this.items.push(levelButton)\n        })\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n    }\n\n    show() {\n        this.scrollY = 0\n        super.show()\n    }\n\n}\n\nclass LevelTextCfg {\n\n    window = {x: 0, y: 0, w: 0, h: 0}\n    panelImgData: ImageData\n    panelPos = {x: 0, y: 0, w: 0, h: 0}\n    level: string = ''\n    tutorial: string = ''\n\n    constructor() {\n        const cfg = ResourceManager.cfg('Menu', 'LevelText')\n        const winCfg = iGet(cfg, 'Window')\n        this.window = {x: winCfg[0], y: winCfg[1], w: winCfg[2], h: winCfg[3]}\n        const panelCfg = iGet(cfg, 'Panel')\n        this.panelImgData = ResourceManager.getImageData(panelCfg[0])\n        this.panelPos = {x: panelCfg[1], y: panelCfg[2], w: panelCfg[3], h: panelCfg[4]}\n        this.level = iGet(cfg, 'Level').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n        this.tutorial = iGet(cfg, 'Tutorial').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MenuCfg } from '../cfg/MenuCfg'\nimport { MainMenuLayer } from '../menu/MainMenuLayer'\nimport { LevelSelectLayer } from '../menu/LevelSelectLayer'\n\nexport class MainMenuScreen extends BaseScreen {\n\n    onLevelSelected: (levelName: string) => void = null\n    menus: MainMenuLayer[] = []\n\n    constructor() {\n        super()\n        const mainMenuFullCfg = ResourceManager.getResource('MainMenuFull') as MenuCfg\n        mainMenuFullCfg.menus.forEach((menuCfg) => {\n            let layer\n            if (menuCfg.title === 'Levels') {\n                layer = new LevelSelectLayer(this, menuCfg, true)\n            } else if (menuCfg.title === 'Tutorials') {\n                layer = new LevelSelectLayer(this, menuCfg, false)\n            } else {\n                layer = new MainMenuLayer(this, menuCfg)\n            }\n            this.menus.push(layer)\n            this.addLayer(layer)\n        })\n    }\n\n    showMainMenu(index: number = 0) {\n        this.hide()\n        this.menus[index].show()\n        this.cursorLayer.show()\n    }\n\n    showLevelSelection() {\n        this.showMainMenu(1)\n    }\n\n    selectLevel(levelName) {\n        this.hide()\n        this.onLevelSelected(levelName)\n    }\n\n}\n","export class SurfaceType {\n\n    name: string // humand readable, maybe used as label lateron\n    shaping: boolean = false\n    matIndex: string = '00'\n    floor: boolean = false\n    selectable: boolean = false\n    drillable: boolean = false\n    drillableHard: boolean = false\n    explodable: boolean = false\n    reinforcable: boolean = false\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options)\n    }\n\n    static readonly GROUND = new SurfaceType({name: 'ground', floor: true, selectable: true})\n    static readonly SOLID_ROCK = new SurfaceType({name: 'solid rock', shaping: true, matIndex: '5'})\n    static readonly HARD_ROCK = new SurfaceType({\n        name: 'hard rock',\n        shaping: true,\n        matIndex: '4',\n        selectable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly LOOSE_ROCK = new SurfaceType({\n        name: 'loose rock',\n        shaping: true,\n        matIndex: '3',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly DIRT = new SurfaceType({\n        name: 'dirt',\n        shaping: true,\n        matIndex: '1',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly SLUG_HOLE = new SurfaceType({name: 'slug hole', floor: true, matIndex: '30'})\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'})\n    static readonly ORE_SEAM = new SurfaceType({\n        name: 'ore seam',\n        matIndex: '40',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45'})\n    static readonly CRYSTAL_SEAM = new SurfaceType({\n        name: 'energy crystal seam',\n        matIndex: '20',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly RECHARGE_SEAM = new SurfaceType({name: 'recharge seam', matIndex: '67'})\n    static readonly POWER_PATH = new SurfaceType({\n        name: 'power path all',\n        floor: true,\n        matIndex: '60',\n        selectable: true,\n    })\n    static readonly POWER_PATH_SITE = new SurfaceType({\n        name: 'power path site',\n        floor: true,\n        matIndex: '61',\n        selectable: true,\n    })\n    static readonly POWER_PATH_BUILDING = new SurfaceType({name: 'power path', floor: true, matIndex: '76'})\n    static readonly RUBBLE1 = new SurfaceType({name: 'rubble 1', floor: true, matIndex: '13', selectable: true})\n    static readonly RUBBLE2 = new SurfaceType({name: 'rubble 2', floor: true, matIndex: '12', selectable: true})\n    static readonly RUBBLE3 = new SurfaceType({name: 'rubble 3', floor: true, matIndex: '11', selectable: true})\n    static readonly RUBBLE4 = new SurfaceType({name: 'rubble 4', floor: true, matIndex: '10', selectable: true})\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING\n            case 1:\n                return SurfaceType.SOLID_ROCK\n            case 2:\n                return SurfaceType.HARD_ROCK\n            case 3:\n                return SurfaceType.LOOSE_ROCK\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT\n            case 6:\n                return SurfaceType.LAVA\n            case 8:\n                return SurfaceType.ORE_SEAM\n            case 9:\n                return SurfaceType.WATER\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM\n            case 11:\n                return SurfaceType.RECHARGE_SEAM\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE\n            case 100:\n                return SurfaceType.RUBBLE4\n            case 101:\n                return SurfaceType.RUBBLE3\n            case 102:\n                return SurfaceType.RUBBLE2\n            case 103:\n                return SurfaceType.RUBBLE1\n            default:\n                console.error('Unexpected surface type num: ' + typeNum)\n                return SurfaceType.SOLID_ROCK\n        }\n    }\n}\n","import { AnimEntity } from './anim/AnimEntity'\nimport { Vector3 } from 'three'\nimport { AnimationEntityType } from './anim/AnimationEntityType'\nimport { FulfillerActivity } from './FulfillerEntity'\n\nexport abstract class MovableEntity extends AnimEntity {\n\n    pathToTarget: Vector3[] = null\n\n    constructor(entityType: AnimationEntityType) {\n        super(entityType)\n    }\n\n    getPosition(): Vector3 {\n        return new Vector3().copy(this.group.position)\n    }\n\n    getSpeed(): number {\n        let speed = this.stats.routeSpeed[this.level]\n        if (this.isOnRubble()) {\n            speed *= this.stats.rubbleCoef\n        } else if (this.isOnPath()) {\n            speed *= this.stats.pathCoef\n        }\n        return speed\n    }\n\n    moveToTarget(target: Vector3): boolean {\n        if (!this.pathToTarget || !this.pathToTarget[this.pathToTarget.length - 1].equals(target)) {\n            this.pathToTarget = this.findPathToTarget(target)\n            if (!this.pathToTarget) return false\n        }\n        if (this.isOnRubble()) {\n            this.changeActivity(FulfillerActivity.MOVING_RUBBLE)\n        } else {\n            this.changeActivity(FulfillerActivity.MOVING)\n        }\n        this.group.position.add(this.determineStep())\n        this.group.position.y = this.worldMgr.getTerrainHeight(this.group.position.x, this.group.position.z)\n        this.group.lookAt(new Vector3(this.pathToTarget[0].x, this.group.position.y, this.pathToTarget[0].z))\n        return true\n    }\n\n    findPathToTarget(target: Vector3): Vector3[] {\n        return [target]\n    }\n\n    determineStep(): Vector3 {\n        const pathStepTarget = this.pathToTarget[0]\n        pathStepTarget.y = this.worldMgr.getTerrainHeight(pathStepTarget.x, pathStepTarget.z)\n        const step = new Vector3().copy(pathStepTarget).sub(this.getPosition())\n        if (step.length() > this.getSpeed()) {\n            step.setLength(this.getSpeed()) // TODO use average speed between current and target position\n        } else if (this.pathToTarget.length > 1) {\n            this.pathToTarget.shift()\n            return this.determineStep()\n        }\n        return step\n    }\n\n    isOnRubble() {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).hasRubble()\n    }\n\n    isOnPath(): boolean {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).isPath()\n    }\n\n    changeActivity(activity: FulfillerActivity, onChangeDone = null, durationTimeMs: number = null) {\n    }\n\n}\n","import { WorldEvent } from './WorldEvents'\nimport { Vector3 } from 'three'\n\nexport class WorldLocationEvent extends WorldEvent {\n\n    location: Vector3\n\n    constructor(entityKey: string, location: Vector3) {\n        super(entityKey)\n        this.location = location\n    }\n\n}\n\nexport class GenericDeathEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.death'\n\n    constructor(location: Vector3) {\n        super(GenericDeathEvent.eventKey, location)\n    }\n\n}\n\nexport class GenericMonsterEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.monster'\n\n    constructor(location: Vector3) {\n        super(GenericMonsterEvent.eventKey, location)\n    }\n\n}\n\nexport class CrystalFoundEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.crystal_found'\n\n    constructor(location: Vector3) {\n        super(CrystalFoundEvent.eventKey, location)\n    }\n\n}\n\nexport class UnderAttackEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.under_attack'\n\n    constructor(location: Vector3) {\n        super(UnderAttackEvent.eventKey, location)\n    }\n\n}\n\nexport class LandslideEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.landslide'\n\n    constructor(location: Vector3) {\n        super(LandslideEvent.eventKey, location)\n    }\n\n}\n\nexport class PowerDrainEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.power_drain'\n\n    constructor(location: Vector3) {\n        super(PowerDrainEvent.eventKey, location)\n    }\n\n}\n\nexport class SlugEmergeEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.slug_emerge'\n\n    constructor(location: Vector3) {\n        super(SlugEmergeEvent.eventKey, location)\n    }\n\n}\n\nexport class RaiderDiscoveredEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.raider_discovered'\n\n    constructor(location: Vector3) {\n        super(RaiderDiscoveredEvent.eventKey, location)\n    }\n\n}\n","import { MovableEntity } from './MovableEntity'\nimport { Selectable, SelectionType } from '../../game/model/Selectable'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Job, JobType } from '../../game/model/job/Job'\nimport { MathUtils, Vector3 } from 'three'\nimport { JOB_ACTION_RANGE, NATIVE_FRAMERATE } from '../../main'\nimport { getRandom, getRandomSign } from '../../core/Util'\nimport { Carryable } from './collect/Carryable'\nimport { DynamiteJob, SurfaceJob, SurfaceJobType } from '../../game/model/job/SurfaceJob'\nimport { SurfaceType } from './map/SurfaceType'\nimport { Crystal } from './collect/Crystal'\nimport { Ore } from './collect/Ore'\nimport { EventBus } from '../../event/EventBus'\nimport { CrystalFoundEvent } from '../../event/WorldLocationEvent'\nimport { OreFoundEvent, RaiderTrained } from '../../event/WorldEvents'\nimport { SelectionEvent } from '../../event/LocalEvents'\nimport { CollectJob } from '../../game/model/job/CollectJob'\nimport { TrainJob } from '../../game/model/job/TrainJob'\nimport { GetToolJob } from '../../game/model/job/GetToolJob'\nimport degToRad = MathUtils.degToRad\n\nexport abstract class FulfillerEntity extends MovableEntity implements Selectable {\n\n    selectionType: SelectionType\n    selected: boolean\n    workInterval = null\n    job: Job = null\n    followUpJob: Job = null\n    activity: FulfillerActivity = null\n    jobSubPos: Vector3 = null\n    tools: string[] = []\n    skills: string[] = []\n    carries: Carryable = null // TODO implement multi carry for vehicles\n    carryTarget: Vector3 = null\n\n    protected constructor(selectionType: SelectionType, aeFilename: string) {\n        super(ResourceManager.getAnimationEntityType(aeFilename))\n        this.selectionType = selectionType\n        this.group.userData = {'selectable': this}\n        this.workInterval = setInterval(this.work.bind(this), 1000 / NATIVE_FRAMERATE) // TODO do not use interval, make work trigger itself (with timeout/interval) until work is done\n    }\n\n    resetWorkInterval() {\n        if (!this.workInterval) return\n        clearInterval(this.workInterval)\n        this.workInterval = null\n    }\n\n    work() {\n        if (!this.job || this.selected) return\n        if (this.job.type === JobType.SURFACE) {\n            const surfJob = this.job as SurfaceJob\n            const surfaceJobType = surfJob.workType\n            if (surfaceJobType === SurfaceJobType.DRILL) {\n                if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                    this.moveToTarget(this.job.getPosition())\n                } else {\n                    let drillTimeMs = null\n                    if (surfJob.surface.surfaceType === SurfaceType.HARD_ROCK) {\n                        drillTimeMs = this.stats.hardDrillTime[this.level] * 1000\n                    } else if (surfJob.surface.surfaceType === SurfaceType.LOOSE_ROCK) {\n                        drillTimeMs = this.stats.looseDrillTime[this.level] * 1000\n                    } else if (surfJob.surface.surfaceType === SurfaceType.DIRT) {\n                        drillTimeMs = this.stats.soilDrillTime[this.level] * 1000\n                    } else if (surfJob.surface.surfaceType === SurfaceType.ORE_SEAM ||\n                        surfJob.surface.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                        drillTimeMs = this.stats.seamDrillTime[this.level] * 1000\n                    }\n                    if (drillTimeMs === 0) console.warn('According to cfg this entity cannot drill this material')\n                    this.changeActivity(FulfillerActivity.DRILLING, () => {\n                        if (surfJob.surface.seamLevel > 0) {\n                            surfJob.surface.seamLevel--\n                            const vec = new Vector3().copy(this.getPosition()).sub(surfJob.surface.getCenterWorld())\n                                .multiplyScalar(0.3 + getRandom(3) / 10)\n                                .applyAxisAngle(new Vector3(0, 1, 0), degToRad(-10 + getRandom(20)))\n                                .add(this.getPosition()) // TODO set y to terrain height at this position?\n                            if (surfJob.surface.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                                this.worldMgr.addCollectable(new Crystal(), vec.x, vec.z)\n                                EventBus.publishEvent(new CrystalFoundEvent(vec))\n                            } else if (surfJob.surface.surfaceType === SurfaceType.ORE_SEAM) {\n                                this.worldMgr.addCollectable(new Ore(), vec.x, vec.z)\n                                EventBus.publishEvent(new OreFoundEvent())\n                            }\n                            this.changeActivity(FulfillerActivity.STANDING)\n                        } else {\n                            this.completeJob()\n                        }\n                    }, drillTimeMs)\n                }\n            } else if (surfaceJobType === SurfaceJobType.CLEAR_RUBBLE) {\n                if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                    this.moveToTarget(this.job.getPosition())\n                } else {\n                    if (!this.jobSubPos) {\n                        const jobPos = this.job.getPosition()\n                        this.jobSubPos = new Vector3(jobPos.x + getRandomSign() * getRandom(10), 0, jobPos.z + getRandomSign() * getRandom(10))\n                        this.jobSubPos.y = this.worldMgr.getTerrainHeight(this.jobSubPos.x, this.jobSubPos.z)\n                    }\n                    if (this.jobSubPos.distanceTo(this.getPosition()) > this.getSpeed()) {\n                        this.moveToTarget(this.jobSubPos)\n                    } else {\n                        this.changeActivity(FulfillerActivity.SHOVELING, () => {\n                            this.job.onJobComplete()\n                            if (surfJob.surface.hasRubble()) {\n                                this.jobSubPos = null\n                            } else {\n                                this.stopJob()\n                            }\n                        })\n                    }\n                }\n            } else if (surfaceJobType === SurfaceJobType.REINFORCE) {\n                if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                    this.moveToTarget(this.job.getPosition())\n                } else {\n                    this.changeActivity(FulfillerActivity.REINFORCE, () => {\n                        this.completeJob()\n                    }, 2700)\n                }\n            } else if (surfaceJobType === SurfaceJobType.BLOW) {\n                const bj = this.job as DynamiteJob\n                if (this.carries !== bj.dynamite) {\n                    this.dropItem()\n                    if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                        this.moveToTarget(this.job.getPosition())\n                    } else {\n                        this.changeActivity(FulfillerActivity.PICKING, () => {\n                            this.pickupItem(bj.dynamite)\n                        })\n                    }\n                } else if (!this.carryTarget) {\n                    this.carryTarget = bj.surface.getDigPositions()[0]\n                } else if (this.getPosition().distanceTo(this.carryTarget) > JOB_ACTION_RANGE) {\n                    this.moveToTarget(this.carryTarget)\n                } else {\n                    this.changeActivity(FulfillerActivity.DROPPING, () => {\n                        this.dropItem()\n                        this.completeJob()\n                    })\n                }\n            }\n        } else if (this.job.type === JobType.CARRY) {\n            const carryJob = this.job as CollectJob\n            if (this.carries !== carryJob.item) {\n                this.dropItem()\n                if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                    this.moveToTarget(this.job.getPosition())\n                } else {\n                    this.changeActivity(FulfillerActivity.PICKING, () => {\n                        this.pickupItem(carryJob.item)\n                    })\n                }\n            } else if (!this.carryTarget) {\n                this.carryTarget = this.carries.getTargetPos() // TODO sleep 5 seconds, before retry\n                // TODO better stop job if no carry target can be found?\n            } else if (this.getPosition().distanceTo(this.carryTarget) > JOB_ACTION_RANGE) {\n                this.moveToTarget(this.carryTarget)\n            } else {\n                this.changeActivity(FulfillerActivity.DROPPING, () => {\n                    this.dropItem()\n                    this.completeJob()\n                })\n            }\n        } else if (this.job.type === JobType.MOVE) {\n            if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                this.moveToTarget(this.job.getPosition())\n            } else {\n                this.changeActivity(FulfillerActivity.STANDING, () => {\n                    this.completeJob()\n                })\n            }\n        } else if (this.job.type === JobType.TRAIN) {\n            if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                this.moveToTarget(this.job.getPosition())\n            } else {\n                const trainJob = this.job as TrainJob\n                this.changeActivity(FulfillerActivity.TRAINING, () => { // TODO change to time based training instead of animation length\n                    this.skills.push(trainJob.skill)\n                    EventBus.publishEvent(new RaiderTrained(this, trainJob.skill))\n                    this.completeJob()\n                })\n            }\n        } else if (this.job.type === JobType.GET_TOOL) {\n            if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                this.moveToTarget(this.job.getPosition())\n            } else {\n                this.tools.push((this.job as GetToolJob).tool)\n                this.completeJob()\n            }\n        } else if (this.job.type === JobType.EAT) {\n            this.changeActivity(FulfillerActivity.EATING, () => {\n                // TODO implement endurance fill eat level\n                this.completeJob()\n            })\n        }\n    }\n\n    moveToTarget(target): boolean {\n        const result = super.moveToTarget(target)\n        if (!result) {\n            console.log('Entity could not move to job target, stopping job')\n            this.stopJob() // TODO what about other targets for the same purpose that may be reachable?\n        }\n        return result\n    }\n\n    dropItem() {\n        if (!this.carries) return\n        if (this.carryJoint) this.carryJoint.remove(this.carries.group)\n        this.carries.group.position.copy(this.group.position)\n        this.carries = null\n        this.carryTarget = null\n    }\n\n    pickupItem(item: Carryable) {\n        this.carries = item\n        if (this.carryJoint) this.carryJoint.add(this.carries.group)\n        this.carries.group.position.set(0, 0, 0)\n    }\n\n    setJob(job: Job, followUpJob: Job = null) {\n        if (this.job !== job) this.stopJob()\n        if (job.type === JobType.SURFACE) this.dropItem()\n        this.job = job\n        if (this.job) this.job.assign(this)\n        this.followUpJob = followUpJob\n        if (this.followUpJob) this.followUpJob.assign(this)\n    }\n\n    private completeJob() {\n        this.job.onJobComplete()\n        this.job.unassign(this)\n        this.jobSubPos = null\n        this.carryTarget = null\n        this.job = this.followUpJob\n        this.followUpJob = null\n        this.changeActivity(FulfillerActivity.STANDING)\n    }\n\n    stopJob() {\n        if (!this.job) return\n        this.job.unassign(this)\n        if (this.followUpJob) this.followUpJob.unassign(this)\n        this.jobSubPos = null\n        this.carryTarget = null\n        this.job = null\n        this.followUpJob = null\n        this.changeActivity(FulfillerActivity.STANDING)\n    }\n\n    hasTool(toolname: string) {\n        return this.tools.indexOf(toolname) !== -1\n    }\n\n    hasSkill(skillKey: string) {\n        return this.skills.indexOf(skillKey) !== -1\n    }\n\n    getSelectionType(): SelectionType {\n        return this.selectionType\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    abstract select(): SelectionEvent;\n\n    abstract getSelectionCenter(): Vector3;\n\n}\n\nexport class FulfillerActivity {\n\n    static STANDING = new FulfillerActivity('Stand', 'StandCarry')\n    static MOVING = new FulfillerActivity('Run', 'Carry')\n    static MOVING_RUBBLE = new FulfillerActivity('Routerubble', 'Carryrubble')\n    static DRILLING = new FulfillerActivity('Drill')\n    static SHOVELING = new FulfillerActivity('ClearRubble')\n    static PICKING = new FulfillerActivity('Pickup')\n    static DROPPING = new FulfillerActivity('Place')\n    static REINFORCE = new FulfillerActivity('Reinforce')\n    static TRAINING = new FulfillerActivity('train')\n    static EATING = new FulfillerActivity('eat')\n\n    value: string\n    carryValue: string\n\n    constructor(value: string, carryValue: string = null) {\n        this.value = value\n        this.carryValue = carryValue\n    }\n\n    getValue(carries: boolean) {\n        return carries ? (this.carryValue || this.value) : this.value\n    }\n\n}\n","import { SelectionType } from '../../game/model/Selectable'\nimport { EventBus } from '../../event/EventBus'\nimport { RaiderSelected, SelectionEvent } from '../../event/LocalEvents'\nimport { FulfillerActivity, FulfillerEntity } from './FulfillerEntity'\nimport { GameState } from '../../game/model/GameState'\nimport { Vector3 } from 'three'\nimport { EntityAddedEvent, EntityType } from '../../event/WorldEvents'\nimport { RaiderDiscoveredEvent } from '../../event/WorldLocationEvent'\n\nexport class RaiderSkills {\n\n    static DRIVER = 'driver'\n    static ENGINEER = 'engineer'\n    static GEOLOGIST = 'geologist'\n    static PILOT = 'pilot'\n    static SAILOR = 'sailor'\n    static DEMOLITION = 'demolition'\n\n}\n\nexport class RaiderTools {\n\n    static DRILL = 'drill'\n    static HAMMER = 'hammer'\n    static SHOVEL = 'shovel'\n    static SPANNER = 'SPANNER'\n    static FREEZERGUN = 'freezergun'\n    static LASER = 'laser'\n    static PUSHERGUN = 'pushergun'\n    static BIRDSCARER = 'birdscarer'\n\n}\n\nexport class Raider extends FulfillerEntity {\n\n    constructor() {\n        super(SelectionType.PILOT, 'mini-figures/pilot/pilot.ae')\n        this.tools = [RaiderTools.DRILL]\n        this.skills = []\n        this.pickSphereRadius = this.stats.pickSphere / 2\n    }\n\n    getSpeed(): number {\n        let speed = super.getSpeed()\n        if (this.animation && !isNaN(this.animation.transcoef)) speed *= this.animation.transcoef\n        return speed\n    }\n\n    findPathToTarget(target: Vector3): Vector3[] {\n        return this.worldMgr.sceneManager.terrain.findPath(this.getPosition(), target)\n    }\n\n    changeActivity(activity: FulfillerActivity, onChangeDone = null, durationTimeMs: number = null) {\n        if (onChangeDone) onChangeDone.bind(this)\n        if (this.activity !== activity) {\n            this.activity = activity\n            this.setActivity(this.activity.getValue(!!this.carries), onChangeDone, durationTimeMs)\n            this.animation.looping = true\n        }\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        const index = GameState.raidersUndiscovered.indexOf(this)\n        if (index !== -1) GameState.raidersUndiscovered.splice(index, 1)\n        GameState.raiders.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, this))\n        EventBus.publishEvent(new RaiderDiscoveredEvent(this.getPosition()))\n    }\n\n    select(): SelectionEvent {\n        this.selectionFrame.visible = true\n        if (!this.selected) {\n            this.selected = true\n            this.changeActivity(FulfillerActivity.STANDING)\n            return new RaiderSelected(this)\n        }\n        return null\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    isDriving(): boolean {\n        return false // TODO implement vehicles\n    }\n\n}\n","import { Surface } from '../../../scene/model/map/Surface'\nimport { FulfillerEntity } from '../../../scene/model/FulfillerEntity'\nimport { Vector3 } from 'three'\nimport { JOB_ACTION_RANGE, TILESIZE } from '../../../main'\nimport { Dynamite } from '../../../scene/model/collect/Dynamite'\nimport { JobType, PublicJob } from './Job'\nimport { SurfaceType } from '../../../scene/model/map/SurfaceType'\nimport { CollectableEntity } from '../../../scene/model/collect/CollectableEntity'\nimport { RaiderSkills, RaiderTools } from '../../../scene/model/Raider'\n\nexport class SurfaceJobType {\n\n    color: number\n    requiredTool: string\n    requiredSkill: string\n\n    constructor(color: number, requiredTools: string, requiredSkills: string) {\n        this.color = color\n        this.requiredTool = requiredTools\n        this.requiredSkill = requiredSkills\n    }\n\n    static readonly DRILL = new SurfaceJobType(0xa0a0a0, RaiderTools.DRILL, null)\n    static readonly REINFORCE = new SurfaceJobType(0x60a060, RaiderTools.HAMMER, null)\n    static readonly BLOW = new SurfaceJobType(0xa06060, null, RaiderSkills.DEMOLITION)\n    static readonly CLEAR_RUBBLE = new SurfaceJobType(0xffffff, RaiderTools.SHOVEL, null)\n\n}\n\nexport class SurfaceJob extends PublicJob {\n\n    surface: Surface\n    workType: SurfaceJobType\n\n    constructor(workType: SurfaceJobType, surface: Surface) {\n        super(JobType.SURFACE)\n        this.surface = surface\n        this.workType = workType\n    }\n\n    isQualified(fulfiller: FulfillerEntity) {\n        return (!this.workType.requiredTool || fulfiller.hasTool(this.workType.requiredTool))\n            && (!this.workType.requiredSkill || fulfiller.hasSkill(this.workType.requiredSkill))\n    }\n\n    isQualifiedWithTool(fulfiller: FulfillerEntity): string {\n        return this.workType.requiredTool\n    }\n\n    isQualifiedWithTraining(fulfiller: FulfillerEntity): string {\n        return this.workType.requiredSkill\n    }\n\n    getPosition(): Vector3 {\n        if (this.workType === SurfaceJobType.CLEAR_RUBBLE) {\n            return this.surface.getCenterWorld()\n        } else {\n            const digPos = this.surface.getDigPositions()[0]\n            digPos.y = this.surface.terrain.worldMgr.getTerrainHeight(digPos.x, digPos.z)\n            return digPos\n        }\n    }\n\n    isInArea(x: number, z: number): boolean {\n        if (this.workType === SurfaceJobType.CLEAR_RUBBLE) {\n            return x >= this.surface.x * TILESIZE + 5 && x < this.surface.x * TILESIZE + TILESIZE + 5\n                && z >= this.surface.y * TILESIZE + 5 && z < this.surface.y * TILESIZE + TILESIZE + 5\n        } else {\n            return this.getPosition().distanceTo(new Vector3(x, this.getPosition().y, z)) < JOB_ACTION_RANGE\n        }\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        switch (this.workType) {\n            case SurfaceJobType.DRILL:\n                this.surface.collapse()\n                break\n            case SurfaceJobType.REINFORCE:\n                this.surface.reinforce()\n                break\n            case SurfaceJobType.CLEAR_RUBBLE:\n                this.surface.reduceRubble()\n                break\n        }\n    }\n\n    getPriorityIdentifier(): string {\n        if (this.workType === SurfaceJobType.DRILL) return 'aiPriorityDestruction'\n        else if (this.workType === SurfaceJobType.BLOW) return 'aiPriorityDestruction'\n        else if (this.workType === SurfaceJobType.CLEAR_RUBBLE) return 'aiPriorityClearing'\n        else if (this.workType === SurfaceJobType.REINFORCE) return 'aiPriorityReinforce'\n        console.warn('Unexpected work type: ' + this.workType)\n        return ''\n    }\n\n}\n\nexport class DynamiteJob extends SurfaceJob {\n\n    dynamite: Dynamite\n\n    constructor(surface: Surface, dynamite: Dynamite) {\n        super(SurfaceJobType.BLOW, surface)\n        this.dynamite = dynamite\n    }\n\n    getPosition(): Vector3 {\n        return this.dynamite.getPosition()\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.dynamite.ignite()\n    }\n\n}\n\nexport class CompletePowerPathJob extends SurfaceJob {\n\n    placedItems: CollectableEntity[]\n\n    constructor(surface: Surface, placedItems: CollectableEntity[]) {\n        super(SurfaceJobType.CLEAR_RUBBLE, surface)\n        this.placedItems = placedItems\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.placedItems.forEach((placed) => placed.worldMgr.sceneManager.scene.remove(placed.group))\n        this.surface.surfaceType = SurfaceType.POWER_PATH\n        this.surface.updateTexture()\n    }\n\n    getPriorityIdentifier(): string {\n        return 'aiPriorityConstruction'\n    }\n\n}\n","import { BufferGeometry, Vector2, Vector3 } from 'three'\nimport { WALL_TYPE } from './Surface'\nimport { BufferAttribute } from 'three/src/core/BufferAttribute'\n\nexport class SurfaceGeometry {\n\n    public static create(wallType: WALL_TYPE,\n                         topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3,\n                         topLeftHeight: number, topRightHeight: number, bottomRightHeight: number, bottomLeftHeight: number,\n    ) {\n        let uvOffset = 0\n\n        // not-rotated\n        // 1 ?\n        // ? 0\n        if (topLeftVertex.y && !bottomRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topRightVertex.y)))) {\n            uvOffset = 0\n        }\n\n        // 90 clock-wise\n        // ? 1\n        // 0 ?\n        if (topRightVertex.y && !bottomLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomRightVertex.y)))) {\n            uvOffset = 3\n        }\n\n        // 180 clock-wise\n        // 0 ?\n        // ? 1\n        if (bottomRightVertex.y && !topLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomLeftVertex.y)))) {\n            uvOffset = 2\n        }\n\n        // 270 clock-wise\n        // ? 0\n        // 1 ?\n        if (bottomLeftVertex.y && !topRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topLeftVertex.y)))) {\n            uvOffset = 1\n        }\n\n        if (wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) {\n            if (topLeftVertex.y && bottomRightVertex.y) {\n                uvOffset = 0\n            }\n            if (topRightVertex.y && bottomLeftVertex.y) {\n                uvOffset = 3\n            }\n        }\n\n        /*\n        //\t\t0---1                1         0---1\n        //\t\t|   |  becomes      /|   and   |  /\n        //\t\t|   |             /  |         |/\n        //\t\t3---2            3---2         3\n        //\n        //\t\tOR\n        //\n        //\t\t0---1            0             0---1\n        //\t\t|   |  becomes   |\\    \t and    \\  |\n        //\t\t|   |            |  \\             \\|\n        //\t\t3---2            3---2             2\n        //\n        //\t\tTriangles 0-1-3 and 0-3-2\n        //\t\tQuad 0-1-3-2\n        */\n\n        const uv = [\n            new Vector2(0, 1),\n            new Vector2(1, 1),\n            new Vector2(1, 0),\n            new Vector2(0, 0),\n        ]\n\n        const bufferVertices = []\n        const bufferNormals = []\n\n        function addFaceAndNormals(a, b, c) {\n            bufferVertices.push(a, b, c)\n            const normal = new Vector3().subVectors(c, b)\n            normal.cross(new Vector3().subVectors(a, b))\n            normal.normalize()\n            bufferNormals.push(normal, normal, normal)\n        }\n\n        const uvIndexes = []\n        if (topRightVertex.y !== bottomLeftVertex.y ||\n            ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) && !(topRightVertex.y && bottomLeftVertex.y))) {\n            uvIndexes.push(1, 3, 2)\n            uvIndexes.push(1, 0, 3)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topRightVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topRightVertex, topLeftVertex, bottomLeftVertex)\n        } else {\n            uvIndexes.push(0, 3, 2)\n            uvIndexes.push(0, 2, 1)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topLeftVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topLeftVertex, bottomRightVertex, topRightVertex)\n        }\n\n        const bufferVertexUvs = uvIndexes.map(i => uv[(i + uvOffset) % 4])\n\n        const bufferGeometry = new BufferGeometry()\n        bufferGeometry.setAttribute('position', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferVertices))\n        bufferGeometry.setAttribute('normal', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferNormals))\n        bufferGeometry.setAttribute('uv', new BufferAttribute(new Float32Array(12), 2).copyVector2sArray(bufferVertexUvs))\n        return bufferGeometry\n    }\n}\n","// javascript-astar 0.4.1 (converted to typescript by Scarabol)\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n\nfunction pathTo(node) {\n    let curr = node\n    const path = []\n    while (curr.parent) {\n        path.unshift(curr)\n        curr = curr.parent\n    }\n    return path\n}\n\nfunction getHeap() {\n    return new BinaryHeap(function (node) {\n        return node.f\n    })\n}\n\nexport const astar = {\n\n    /**\n     * Perform an A* Search on a graph given a start and end node.\n     * @param {Graph} graph\n     * @param {GridNode} start\n     * @param {GridNode} end\n     * @param {Object} [options]\n     * @param {boolean} [options.closest] Specifies whether to return the\n     path to the closest node if the target is unreachable.\n     * @param {Function} [options.heuristic] Heuristic function (see\n     *          astar.heuristics).\n     */\n    search(graph: Graph, start: GridNode, end: GridNode, options = null): GridNode[] {\n        graph.cleanDirty()\n        options = options || {}\n        const heuristic = options.heuristic || astar.heuristics.manhattan\n        const closest = options.closest || false\n\n        const openHeap = getHeap()\n        let closestNode = start  // set the start node to be the closest if required\n\n        start.h = heuristic(start, end)\n        graph.markDirty(start)\n\n        openHeap.push(start)\n\n        while (openHeap.size() > 0) {\n\n            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n            const currentNode = openHeap.pop()\n\n            // End case -- result has been found, return the traced path.\n            if (currentNode === end) {\n                return pathTo(currentNode)\n            }\n\n            // Normal case -- move currentNode from open to closed, process each of its neighbors.\n            currentNode.closed = true\n\n            // Find all neighbors for the current node.\n            const neighbors = graph.neighbors(currentNode)\n\n            let i = 0\n            const il = neighbors.length\n            for (; i < il; ++i) {\n                const neighbor = neighbors[i]\n\n                if (neighbor.closed || neighbor.isWall()) {\n                    // Not a valid node to process, skip to next neighbor.\n                    continue\n                }\n\n                // The g score is the shortest distance from start to current node.\n                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n                const gScore = currentNode.g + neighbor.getCost(currentNode)\n                const beenVisited = neighbor.visited\n\n                if (!beenVisited || gScore < neighbor.g) {\n\n                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n                    neighbor.visited = true\n                    neighbor.parent = currentNode\n                    neighbor.h = neighbor.h || heuristic(neighbor, end)\n                    neighbor.g = gScore\n                    neighbor.f = neighbor.g + neighbor.h\n                    graph.markDirty(neighbor)\n                    if (closest) {\n                        // If the neighbour is closer than the current closestNode or if it's equally close but has\n                        // a cheaper path than the current closest node then it becomes the closest node\n                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n                            closestNode = neighbor\n                        }\n                    }\n\n                    if (!beenVisited) {\n                        // Pushing to heap will put it in proper place based on the 'f' value.\n                        openHeap.push(neighbor)\n                    } else {\n                        // Already seen the node, but since it has been rescored we need to reorder it in the heap\n                        openHeap.rescoreElement(neighbor)\n                    }\n                }\n            }\n        }\n\n        if (closest) {\n            return pathTo(closestNode)\n        }\n\n        // No result was found - empty array signifies failure to find path.\n        return []\n    },\n\n    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n    heuristics: {\n        manhattan(pos0, pos1) {\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return d1 + d2\n        },\n\n        diagonal(pos0, pos1) {\n            const D = 1\n            const D2 = Math.sqrt(2)\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2))\n        },\n    },\n\n    cleanNode(node) {\n        node.f = 0\n        node.g = 0\n        node.h = 0\n        node.visited = false\n        node.closed = false\n        node.parent = null\n    },\n}\n\nexport class Graph {\n\n    readonly nodes: GridNode[] = []\n    readonly diagonal: boolean\n    readonly grid: GridNode[][] = []\n    dirtyNodes: GridNode[] = []\n\n    /**\n     * A graph memory structure\n     * @param {Array} gridIn 2D array of input weights\n     * @param {Object} [options]\n     * @param {boolean} [options.diagonal] Specifies whether diagonal moves are allowed\n     */\n    constructor(gridIn: number[][], options = null) {\n        options = options || {}\n        this.diagonal = !!options.diagonal\n        for (let x = 0; x < gridIn.length; x++) {\n            this.grid[x] = []\n\n            let y = 0\n            const row = gridIn[x]\n            for (; y < row.length; y++) {\n                const node = new GridNode(x, y, row[y])\n                this.grid[x][y] = node\n                this.nodes.push(node)\n            }\n        }\n        this.init()\n    }\n\n    init() {\n        this.dirtyNodes = []\n        for (let i = 0; i < this.nodes.length; i++) {\n            astar.cleanNode(this.nodes[i])\n        }\n    }\n\n    cleanDirty() {\n        for (let i = 0; i < this.dirtyNodes.length; i++) {\n            astar.cleanNode(this.dirtyNodes[i])\n        }\n        this.dirtyNodes = []\n    }\n\n    markDirty(node) {\n        this.dirtyNodes.push(node)\n    }\n\n    neighbors(node: GridNode) {\n        const ret: GridNode[] = []\n        const x = node.x\n        const y = node.y\n        const grid = this.grid\n\n        // West\n        if (grid[x - 1] && grid[x - 1][y]) {\n            ret.push(grid[x - 1][y])\n        }\n\n        // East\n        if (grid[x + 1] && grid[x + 1][y]) {\n            ret.push(grid[x + 1][y])\n        }\n\n        // South\n        if (grid[x] && grid[x][y - 1]) {\n            ret.push(grid[x][y - 1])\n        }\n\n        // North\n        if (grid[x] && grid[x][y + 1]) {\n            ret.push(grid[x][y + 1])\n        }\n\n        if (this.diagonal) {\n            // Southwest\n            if (grid[x - 1] && grid[x - 1][y - 1]) {\n                ret.push(grid[x - 1][y - 1])\n            }\n\n            // Southeast\n            if (grid[x + 1] && grid[x + 1][y - 1]) {\n                ret.push(grid[x + 1][y - 1])\n            }\n\n            // Northwest\n            if (grid[x - 1] && grid[x - 1][y + 1]) {\n                ret.push(grid[x - 1][y + 1])\n            }\n\n            // Northeast\n            if (grid[x + 1] && grid[x + 1][y + 1]) {\n                ret.push(grid[x + 1][y + 1])\n            }\n        }\n\n        return ret\n    }\n\n    toString() {\n        const graphString = []\n        const nodes = this.grid\n        for (let x = 0; x < nodes.length; x++) {\n            const rowDebug = []\n            const row = nodes[x]\n            for (let y = 0; y < row.length; y++) {\n                rowDebug.push(row[y].weight)\n            }\n            graphString.push(rowDebug.join(' '))\n        }\n        return graphString.join('\\n')\n    }\n}\n\nclass GridNode {\n\n    x: number\n    y: number\n    weight: number\n    h: number\n    closed: boolean\n    visited: boolean\n    g: number\n    parent: GridNode\n    f: number\n\n    constructor(x, y, weight) {\n        this.x = x\n        this.y = y\n        this.weight = weight\n    }\n\n    toString() {\n        return '[' + this.x + ' ' + this.y + ']'\n    }\n\n    getCost(fromNeighbor: GridNode) {\n        // Take diagonal weight into consideration.\n        if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n            return this.weight * 1.41421\n        }\n        return this.weight\n    }\n\n    isWall() {\n        return this.weight === 0\n    }\n}\n\nclass BinaryHeap {\n\n    content = []\n    scoreFunction\n\n    constructor(scoreFunction) {\n        this.content = []\n        this.scoreFunction = scoreFunction\n    }\n\n    push(element) {\n        // Add the new element to the end of the array.\n        this.content.push(element)\n\n        // Allow it to sink down.\n        this.sinkDown(this.content.length - 1)\n    }\n\n    pop() {\n        // Store the first element so we can return it later.\n        const result = this.content[0]\n        // Get the element at the end of the array.\n        const end = this.content.pop()\n        // If there are any elements left, put the end element at the\n        // start, and let it bubble up.\n        if (this.content.length > 0) {\n            this.content[0] = end\n            this.bubbleUp(0)\n        }\n        return result\n    }\n\n    remove(node) {\n        const i = this.content.indexOf(node)\n\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        const end = this.content.pop()\n\n        if (i !== this.content.length - 1) {\n            this.content[i] = end\n\n            if (this.scoreFunction(end) < this.scoreFunction(node)) {\n                this.sinkDown(i)\n            } else {\n                this.bubbleUp(i)\n            }\n        }\n    }\n\n    size() {\n        return this.content.length\n    }\n\n    rescoreElement(node) {\n        this.sinkDown(this.content.indexOf(node))\n    }\n\n    sinkDown(n) {\n        // Fetch the element that has to be sunk.\n        const element = this.content[n]\n\n        // When at 0, an element can not sink any further.\n        while (n > 0) {\n\n            // Compute the parent element's index, and fetch it.\n            const parentN = ((n + 1) >> 1) - 1\n            const parent = this.content[parentN]\n            // Swap the elements if the parent is greater.\n            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n                this.content[parentN] = element\n                this.content[n] = parent\n                // Update 'n' to continue at the new position.\n                n = parentN\n            }\n            // Found a parent that is less, no need to sink any further.\n            else {\n                break\n            }\n        }\n    }\n\n    bubbleUp(n) {\n        // Look up the target element and its score.\n        const length = this.content.length\n        const element = this.content[n]\n        const elemScore = this.scoreFunction(element)\n\n        while (true) {\n            // Compute the indices of the child elements.\n            const child2N = (n + 1) << 1\n            const child1N = child2N - 1\n            // This is used to store the new position of the element, if any.\n            let swap = null\n            let child1Score\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                const child1 = this.content[child1N]\n                child1Score = this.scoreFunction(child1)\n\n                // If the score is less than our element's, we need to swap.\n                if (child1Score < elemScore) {\n                    swap = child1N\n                }\n            }\n\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                const child2 = this.content[child2N]\n                const child2Score = this.scoreFunction(child2)\n                if (child2Score < (swap === null ? elemScore : child1Score)) {\n                    swap = child2N\n                }\n            }\n\n            // If the element needs to be moved, swap it, and continue.\n            if (swap !== null) {\n                this.content[n] = this.content[swap]\n                this.content[swap] = element\n                n = swap\n            }\n            // Otherwise, we are done.\n            else {\n                break\n            }\n        }\n    }\n}\n","import { Surface } from './model/map/Surface'\nimport { Terrain } from './model/map/Terrain'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { WorldManager } from './WorldManager'\nimport { TILESIZE } from '../main'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\n\nexport class TerrainLoader {\n\n    static loadTerrain(levelConf: LevelEntryCfg, worldMgr: WorldManager): Terrain {\n        const tileSize = levelConf.blockSize\n        if (tileSize !== TILESIZE) console.error('Unexpected tile size in level configuration: ' + tileSize)\n        const terrain = new Terrain(worldMgr)\n\n        const themeName = levelConf.textureSet[1]\n        terrain.textureSet = ResourceManager.cfg('Textures', themeName)\n        // console.log(terrain.textureSet);\n\n        const terrainMap = ResourceManager.getMap(levelConf.terrainMap)\n        terrain.width = terrainMap.width\n        terrain.height = terrainMap.height\n        const pathMap = ResourceManager.getMap(levelConf.pathMap)?.level\n        const surfaceMap = ResourceManager.getMap(levelConf.surfaceMap)?.level\n        const predugMap = ResourceManager.getMap(levelConf.predugMap)?.level\n        const cryOreMap = ResourceManager.getMap(levelConf.cryOreMap)?.level\n        const fallinMap = ResourceManager.getMap(levelConf.fallinMap)?.level\n        const erodeMap = ResourceManager.getMap(levelConf.erodeMap)?.level\n\n        // maps parsed from WAD are row-wise saved, which means y (row) comes first and x (column) second\n        for (let r = 0; r < terrainMap.level.length; r++) {\n            for (let c = 0; c < (terrainMap.level)[r].length; c++) {\n                (terrain.surfaces)[c] = (terrain.surfaces)[c] || []\n                const surfaceTypeNum = (terrainMap.level)[r][c]\n                let surfaceType = SurfaceType.getByNum(surfaceTypeNum)\n                const predugLevel = predugMap[r][c]\n                if (predugLevel === PredugMap.CAVERN_EXPOSED) {\n                    if (surfaceType === SurfaceType.GROUND || surfaceType === SurfaceType.DIRT) {\n                        surfaceType = SurfaceType.GROUND\n                    } else if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) {\n                        console.warn('Unexpected cavern surface type: ' + surfaceType.name)\n                    }\n                } else if (predugLevel === PredugMap.SLUG_HOLE_EXPOSED || predugLevel === PredugMap.SLUG_HOLE_HIDDEN) {\n                    surfaceType = SurfaceType.SLUG_HOLE\n                } else if (predugLevel !== PredugMap.WALL && predugLevel !== PredugMap.CAVERN_HIDDEN) {\n                    console.warn('Unexpected predug level: ' + predugLevel)\n                }\n                // give the path map the highest priority, if it exists\n                const pathMapLevel = pathMap && surfaceType.floor ? pathMap[r][c] : PathMap.NONE\n                if (pathMapLevel === PathMap.RUBBLE) {\n                    surfaceType = SurfaceType.RUBBLE4\n                } else if (pathMapLevel === PathMap.POWER_PATH) {\n                    surfaceType = SurfaceType.POWER_PATH\n                } else if (pathMapLevel !== PathMap.NONE) {\n                    console.warn('Unexpected path map level: ' + pathMapLevel)\n                }\n\n                const surface = new Surface(terrain, surfaceType, c, r, surfaceMap[r][c])\n                if (cryOreMap) {\n                    const currentCryOre = cryOreMap[r][c]\n                    if (currentCryOre % 2 === 1) {\n                        surface.containedCrystals = (currentCryOre + 1) / 2\n                    } else {\n                        surface.containedOres = currentCryOre / 2\n                    }\n                }\n\n                (terrain.surfaces)[c].push(surface)\n            }\n        }\n\n        // exlpore predug surfaces\n        terrain.surfaces.forEach(c => c.forEach(s => {\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_EXPOSED || predugMap[s.y][s.x] === PredugMap.SLUG_HOLE_EXPOSED) { // map are rows (y) first, columns (x) second\n                for (let x = s.x - 1; x <= s.x + 1; x++) {\n                    for (let y = s.y - 1; y <= s.y + 1; y++) {\n                        terrain.getSurfaceOrNull(x, y).discovered = true\n                    }\n                }\n            }\n        }))\n\n        // create hidden caverns\n        terrain.surfaces.forEach(c => c.forEach(s => {\n            const surface = terrain.getSurfaceOrNull(s.x, s.y)\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_HIDDEN && !surface.discovered) {\n                surface.surfaceType = SurfaceType.GROUND\n            }\n        }))\n\n        // crumble unsupported walls\n        terrain.surfaces.forEach((c) => c.forEach((s) => {\n            if (!s.isSupported()) s.collapse()\n        }))\n\n        terrain.updateSurfaceMeshes(true)\n\n        if (fallinMap) {\n            for (let x = 0; x < terrain.width; x++) {\n                for (let y = 0; y < terrain.height; y++) {\n                    terrain.getSurface(x, y).setFallinLevel(fallinMap[y][x]) // rows (y) before columns (x) used in maps\n                }\n            }\n        }\n\n        if (erodeMap) { // TODO implement lava erosion\n            console.warn('Lucky you! Lava erosion not yet implemented')\n        }\n\n        return terrain\n    }\n\n}\n\nenum PathMap {\n\n    NONE = 0,\n    RUBBLE = 1,\n    POWER_PATH = 2,\n\n}\n\nenum PredugMap {\n\n    WALL = 0,\n    CAVERN_EXPOSED = 1,\n    CAVERN_HIDDEN = 2,\n    SLUG_HOLE_EXPOSED = 3,\n    SLUG_HOLE_HIDDEN = 4,\n}\n","import { Group, Vector3 } from 'three'\nimport { Surface } from './Surface'\nimport { WorldManager } from '../../WorldManager'\nimport { SurfaceType } from './SurfaceType'\nimport { TILESIZE } from '../../../main'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityAddedEvent, EntityType } from '../../../event/WorldEvents'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { astar, Graph } from './astar'\n\nexport class Terrain {\n\n    worldMgr: WorldManager\n    textureSet: any = {}\n    width: number = 0\n    height: number = 0\n    surfaces: Surface[][] = []\n    floorGroup: Group = new Group()\n    roofGroup: Group = new Group()\n    graphWalk: Graph = null\n    cachedPaths = new Map()\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        this.floorGroup.scale.set(TILESIZE, TILESIZE, TILESIZE)\n        this.roofGroup.visible = false // keep roof hidden unless switched to other camera\n        EventBus.registerEventListener(EntityAddedEvent.eventKey, (event: EntityAddedEvent) => {\n            if (event.type !== EntityType.BUILDING) return;\n            (event.entity as BuildingEntity).surfaces.forEach((bSurf) => {\n                for (let x = -1; x <= 1; x++) {\n                    for (let y = -1; y <= 1; y++) {\n                        this.getSurface(bSurf.x + x, bSurf.y + y).updateTexture()\n                    }\n                }\n            })\n        })\n    }\n\n    getSurfaceFromWorld(worldPosition: Vector3): Surface | null {\n        return this.getSurface(worldPosition.x / TILESIZE, worldPosition.z / TILESIZE)\n    }\n\n    getSurface(x, y): Surface {\n        x = Math.floor(x)\n        y = Math.floor(y)\n        return this.getSurfaceOrNull(x, y) || new Surface(this, SurfaceType.SOLID_ROCK, x, y, 0)\n    }\n\n    getSurfaceOrNull(x, y): Surface | null {\n        if (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n            return this.surfaces[x][y]\n        } else {\n            return null\n        }\n    }\n\n    updateSurfaceMeshes(force: boolean = false) {\n        this.surfaces.forEach((r) => r.forEach((s) => s.updateMesh(force)))\n        this.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n\n        // TODO performance: update specific graph entry, when surface type changes\n        this.graphWalk = new Graph(this.surfaces.map(c => c.map(s => s.isWalkable() ? s.hasRubble() ? 4 : 1 : 0)))\n        console.log('Cached paths cleared')\n        this.cachedPaths.clear()\n    }\n\n    findPath(start: Vector3, end: Vector3, canFly = false, canSwim = false): Vector3[] {\n        const startSurface = this.getSurfaceFromWorld(start)\n        const endSurface = this.getSurfaceFromWorld(end)\n        if (startSurface.x === endSurface.x && startSurface.y === endSurface.y) {\n            return [end]\n        }\n        const cacheIdentifier = startSurface.x + '/' + startSurface.y + ' -> ' + endSurface.x + '/' + endSurface.y\n        const cachedPath = this.cachedPaths.get(cacheIdentifier)\n        if (cachedPath) {\n            return [...cachedPath, end]\n        } else {\n            return this.searchPath(startSurface, endSurface, end, cacheIdentifier)\n        }\n    }\n\n    private searchPath(startSurface: Surface, endSurface: Surface, end, cacheIdentifier: string) {\n        const startNode = this.graphWalk.grid[startSurface.x][startSurface.y]\n        const endNode = this.graphWalk.grid[endSurface.x][endSurface.y]\n        const worldPath = astar.search(this.graphWalk, startNode, endNode).map(p => this.getSurface(p.x, p.y).getCenterWorld())\n        if (worldPath.length < 1) return null // no path found\n        // replace last surface center with actual target position\n        worldPath.pop()\n        worldPath.push(end)\n        this.cachedPaths.set(cacheIdentifier, worldPath.slice(0, -1)) // cache shallow copy to avoid interference\n        return worldPath\n    }\n\n    findFallInOrigin(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isReinforcable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isReinforcable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isReinforcable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isReinforcable()) return [bottomSurface.x, bottomSurface.y]\n        const leftSurface2 = this.getSurface(x - 1, y)\n        if (leftSurface2.isDigable()) return [leftSurface2.x, leftSurface2.y]\n        const topSurface2 = this.getSurface(x, y - 1)\n        if (topSurface2.isDigable()) return [topSurface2.x, topSurface2.y]\n        const rightSurface2 = this.getSurface(x + 1, y)\n        if (rightSurface2.isDigable()) return [rightSurface2.x, rightSurface2.y]\n        const bottomSurface2 = this.getSurface(x, y + 1)\n        if (bottomSurface2.isDigable()) return [bottomSurface2.x, bottomSurface2.y]\n        return null\n    }\n\n    findFallInTarget(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isWalkable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isWalkable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isWalkable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isWalkable()) return [bottomSurface.x, bottomSurface.y]\n        return null\n    }\n\n    dispose() {\n        this.surfaces.forEach(c => c.forEach(s => s.dispose()))\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { BuildingSelected, EntityDeselected, SelectionEvent } from '../../event/LocalEvents'\nimport { Building } from '../../game/model/entity/building/Building'\nimport { AnimEntity } from './anim/AnimEntity'\nimport { Selectable, SelectionType } from '../../game/model/Selectable'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { MathUtils, Vector3, Matrix4 } from 'three'\nimport { GameState } from '../../game/model/GameState'\nimport { BuildingUpgraded, CollectEvent, EntityAddedEvent, EntityType } from '../../event/WorldEvents'\nimport { Surface } from './map/Surface'\nimport { CollectableType } from './collect/CollectableEntity'\nimport degToRad = MathUtils.degToRad\n\nexport class BuildingEntity extends AnimEntity implements Selectable {\n\n    type: Building\n    selected: boolean\n    powerSwitch: boolean = true\n    powerLink: boolean = false\n    spawning: boolean = false\n    surfaces: Surface[] = []\n\n    constructor(buildingType: Building) {\n        super(ResourceManager.getAnimationEntityType(buildingType.aeFile))\n        this.type = buildingType\n        this.group.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        this.group.userData = {'selectable': this}\n        this.pickSphereRadius = this.type.stats.pickSphere / 2\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.BUILDING\n    }\n\n    select(): SelectionEvent {\n        this.selectionFrame.visible = true\n        if (!this.selected) {\n            this.selected = true\n            return new BuildingSelected(this)\n        }\n        return null\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    getPickSphereCenter() {\n        const pickSphereCenter = this.getPosition()\n        pickSphereCenter.y += this.pickSphereRadius / 2\n        return pickSphereCenter\n    }\n\n    getDropPosition(): Vector3 {\n        const dropPos = this.getPosition().add(new Vector3(0, 0, this.type.dropPosDist)\n            .applyEuler(this.getRotation()).applyAxisAngle(new Vector3(0, 1, 0), degToRad(this.type.dropPosAngleDeg)))\n        dropPos.y = this.worldMgr.getTerrainHeight(dropPos.x, dropPos.z)\n        return dropPos\n    }\n\n    isPowered(): boolean {\n        return this.powerSwitch && (this.type.stats.selfPowered || this.powerLink)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        const index = GameState.buildingsUndiscovered.indexOf(this)\n        if (index !== -1) GameState.buildingsUndiscovered.splice(index, 1)\n        GameState.buildings.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(EntityType.BUILDING, this))\n    }\n\n    hasMaxLevel(): boolean {\n        return this.level >= this.type.stats.levels - 1\n    }\n\n    upgrade() {\n        const costOre = ResourceManager.cfg('Main', 'BuildingUpgradeCostOre') || 5 // TODO implement bricks use BuildingUpgradeCostStuds\n        if (GameState.numOre < costOre || this.hasMaxLevel()) return\n        GameState.numOre -= costOre\n        this.level++\n        EventBus.publishEvent(new CollectEvent(CollectableType.ORE))\n        EventBus.publishEvent(new EntityDeselected())\n        EventBus.publishEvent(new BuildingUpgraded(this))\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { TILESIZE } from '../main'\nimport { MathUtils, Vector3 } from 'three'\nimport { Raider } from './model/Raider'\nimport { GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { BuildingEntity } from './model/BuildingEntity'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { Crystal } from './model/collect/Crystal'\nimport { WorldManager } from './WorldManager'\nimport { EventBus } from '../event/EventBus'\nimport { EntityAddedEvent, EntityType } from '../event/WorldEvents'\nimport degToRad = MathUtils.degToRad\n\nexport class ObjectListLoader {\n\n    static loadObjectList(worldMgr: WorldManager, objectListConf) {\n        Object.values(objectListConf).forEach((olObject: any) => {\n            const lTypeName = olObject.type ? olObject.type.toLowerCase() : olObject.type\n            // all object positions are off by half a tile, because 0/0 is the top left corner of first tile\n            const worldX = (olObject.xPos - 1) * TILESIZE\n            const worldZ = (olObject.yPos - 1) * TILESIZE\n            const worldY = worldMgr.getTerrainHeight(worldX, worldZ)\n            const buildingType = ResourceManager.cfg('BuildingTypes', olObject.type)\n            const radHeading = degToRad(olObject.heading)\n            if (lTypeName === 'TVCamera'.toLowerCase()) {\n                const target = new Vector3(worldX, worldY, worldZ - TILESIZE / 2)\n                const offset = new Vector3(5 * TILESIZE, 0, 0).applyAxisAngle(new Vector3(0, 1, 0), radHeading - Math.PI / 16).add(target)\n                worldMgr.sceneManager.camera.position.copy(offset)\n                worldMgr.sceneManager.camera.position.y = 4.5 * TILESIZE\n                worldMgr.sceneManager.controls.target.copy(target)\n                worldMgr.sceneManager.controls.update()\n                worldMgr.setTorchPosition(target)\n            } else if (lTypeName === 'Pilot'.toLowerCase()) {\n                const raider = new Raider()\n                raider.worldMgr = worldMgr\n                raider.setActivity('Stand')\n                raider.createPickSphere()\n                raider.group.position.set(worldX, worldY, worldZ)\n                raider.group.rotateOnAxis(new Vector3(0, 1, 0), radHeading - Math.PI / 2)\n                raider.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(raider.group.position).discovered\n                if (raider.group.visible) {\n                    GameState.raiders.push(raider)\n                    EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, raider))\n                } else {\n                    GameState.raidersUndiscovered.push(raider)\n                }\n                worldMgr.sceneManager.scene.add(raider.group)\n            } else if (buildingType) {\n                const building = Building.getByName(buildingType)\n                const entity = new BuildingEntity(building)\n                entity.worldMgr = worldMgr\n                entity.setActivity('Stand')\n                entity.createPickSphere()\n                entity.group.position.set(worldX, worldY, worldZ)\n                entity.group.rotateOnAxis(new Vector3(0, 1, 0), -radHeading - Math.PI)\n                entity.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(entity.group.position).discovered\n                if (entity.group.visible) {\n                    GameState.buildings.push(entity)\n                    EventBus.publishEvent(new EntityAddedEvent(EntityType.BUILDING, entity))\n                } else {\n                    GameState.buildingsUndiscovered.push(entity)\n                }\n                // TODO rotate building with normal vector of surface\n                worldMgr.sceneManager.scene.add(entity.group)\n                const primaryPathSurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(entity.group.position)\n                primaryPathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                primaryPathSurface.updateTexture()\n                entity.surfaces.push(primaryPathSurface)\n                if (building === Building.POWER_STATION) {\n                    const secondaryOffset = new Vector3(0, 0, TILESIZE).applyAxisAngle(new Vector3(0, 1, 0), -radHeading + Math.PI / 2)\n                    secondaryOffset.add(entity.group.position)\n                    const secondarySurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(secondaryOffset)\n                    secondarySurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                    secondarySurface.updateTexture()\n                    entity.surfaces.push(secondarySurface)\n                }\n                const pathOffset = new Vector3(0, 0, TILESIZE).applyAxisAngle(new Vector3(0, 1, 0), -radHeading - Math.PI)\n                pathOffset.add(entity.group.position)\n                const pathSurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(pathOffset)\n                pathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                pathSurface.updateTexture()\n                entity.surfaces.push(pathSurface)\n            } else if (lTypeName === 'PowerCrystal'.toLowerCase()) {\n                worldMgr.addCollectable(new Crystal(), worldX, worldZ)\n            } else {\n                // TODO implement remaining object types like: spider, drives and hovercraft\n                console.warn('Object type ' + olObject.type + ' not yet implemented')\n            }\n        })\n        // update path textures when all buildings are added\n        GameState.buildings.forEach((b) => b.surfaces.forEach((bSurf) => {\n            for (let x = -1; x <= 1; x++) {\n                for (let y = -1; y <= 1; y++) {\n                    worldMgr.sceneManager.terrain.getSurface(bSurf.x + x, bSurf.y + y).updateTexture()\n                }\n            }\n        }))\n    }\n\n}\n","/** Function documentation mostly copied from the following URLs\n *\n * https://kb.rockraidersunited.com/User:Jessietail/NERPs_reference\n * https://web.archive.org/web/20131206122442/http://rru-stuff.org/nerpfuncs.html\n * https://kb.rockraidersunited.com/NERPs_documentation#Labels\n *\n */\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\n\nexport class NerpRunner {\n\n    debug = false\n    onLevelComplete: () => any = null\n    nerpInterval: NodeJS.Timeout = null\n\n    registers = new Array(8).fill(0)\n    timers = new Array(4).fill(0)\n    scriptLines = [] // contains humand readable script strings\n    statements = [] // contains parsed statements for execution\n    macrosByName = {}\n    labelsByName = {}\n    halted = false\n    programCounter = 0\n    messages = []\n    // more state variables and switches\n    messagePermit = null\n\n    constructor(debug = false) {\n        this.debug = debug\n    }\n\n    startExecution() {\n        const that = this\n        this.nerpInterval = setInterval(() => {\n            that.execute()\n        }, 2000)\n    }\n\n    pauseExecution() {\n        if (this.nerpInterval) clearInterval(this.nerpInterval)\n        this.nerpInterval = null\n    }\n\n    /**\n     * Internally used to validate and parse a register number.\n     * @param register\n     * @return {number}\n     */\n    checkRegister(register) {\n        const num = parseInt(register)\n        if (isNaN(num) || num < 0 || num > this.registers.length) throw new Error('Invalid register (' + register + ') provided')\n        return num\n    }\n\n    /**\n     * Internally used to validate and parse a value before setting or adding it with a register.\n     * @param value\n     * @return {number}\n     */\n    checkRegisterValue(value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Invalid register value (' + value + ') provided')\n        return num\n    }\n\n    /**\n     * Gets the value currently stored in the given register, internally used to handle all registers with one method.\n     * @param register the register to read\n     * @return {number} returns the value currently stored in the register\n     */\n    getR(register) {\n        register = this.checkRegister(register)\n        return this.registers[register]\n    }\n\n    /**\n     * Sets the given value for the given register, internally used to handle all registers with one method.\n     * @param register the register to set\n     * @param value the value to set for the given register\n     */\n    setR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] = value\n    }\n\n    /**\n     * Adds the given value to the given register, internally used to handle all registers with one method.\n     * @param register the register to add to\n     * @param value the value to add to the given register\n     */\n    addR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] += value\n    }\n\n    /**\n     * Set the respective timer to the given numerical value. Units are in milliseconds.\n     * @param timer\n     * @param value\n     */\n    setTimer(timer, value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Can\\'t set timer to NaN value: ' + value)\n        this.timers[timer] = new Date().getTime() + num\n    }\n\n    /**\n     * Gets the value of the respective timer. Units are in milliseconds.\n     * @param timer\n     * @return {number}\n     */\n    getTimer(timer) {\n        return new Date().getTime() - this.timers[timer]\n    }\n\n    /**\n     * End the level successfully and show the score screen.\n     */\n    setLevelCompleted() {\n        this.halted = true\n        GameState.resultState = GameResultState.COMPLETE\n        this.onLevelComplete()\n    }\n\n    /**\n     * End the level as failure and show the score screen.\n     */\n    setLevelFail() {\n        this.halted = true\n        GameState.resultState = GameResultState.FAILED\n        this.onLevelComplete()\n    }\n\n    /**\n     * Sets tutorial flags\n     * @param value a bitmask to set flags with\n     */\n    setTutorialFlags(value) {\n        // TODO implement tutorial flags\n        // seems like value must be interpreted bitwise and sets a certain flag on each bit\n        // seen so far:\n        // 0 = 0x00 allow any click anywhere anytime\n        // 3 = 0x11 disallow invalid clicks\n        // 4095 = 0x111111111111 set all flags? (seen in Tutorial01 level)\n    }\n\n    /**\n     * This is used to make messages come up/not come up.\n     * @param messagesAllowed\n     */\n    setMessagePermit(messagesAllowed) {\n        this.messagePermit = !messagesAllowed\n    }\n\n    setBuildingsUpgradeLevel(typeName, level) {\n        GameState.buildings.forEach(b => {\n            if (b.type === typeName) b.level = level\n        })\n    }\n\n    setToolStoreLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.TOOLSTATION, level)\n    }\n\n    setTeleportPadLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.TELEPORT_PAD, level)\n    }\n\n    setPowerStationLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.POWER_STATION, level)\n    }\n\n    setBarracksLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.BARRACKS, level)\n    }\n\n    /**\n     * Gets the number of tool stores currently built. NOT the total ever built.\n     * @return {number}\n     */\n    getToolStoresBuilt() {\n        return GameState.getBuildingsByType(Building.TOOLSTATION).length\n    }\n\n    /**\n     * Gets the number of minifigures on the level. TODO it is NOT tested if this ignores minifigures in hidden caverns\n     * @return {number}\n     */\n    getMinifiguresOnLevel() {\n        return GameState.raiders.length\n    }\n\n    /**\n     * Gets the number of crystals currently stored.\n     * @return {number}\n     */\n    getCrystalsCurrentlyStored() {\n        return GameState.numCrystal\n    }\n\n    getObjectiveSwitch() {\n        // TODO implement this\n        return 0\n    }\n\n    setMessageTimerValues(arg1, arg2, arg3) {\n        // TODO implement this\n    }\n\n    getMessageTimer() {\n        return 0 // TODO return remaining amount of time needed to fully play WAV message\n    }\n\n    cameraUnlock() {\n        // TODO implement this\n    }\n\n    setMessage(messageNumber, arrowDisabled) {\n        if (!this.messagePermit) {\n            return\n        }\n        const msg = this.messages[messageNumber]\n        // TODO show message to user\n        console.log(msg.txt)\n        // msg.snd resides in sounds/streamed/ which is currently not loaded :(\n    }\n\n    setCameraGotoTutorial(arg1) {\n        // TODO implement this\n    }\n\n    getTutorialBlockIsGround(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getTutorialBlockIsPath(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getUnitAtBlock(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getOxygenLevel() {\n        // TODO implement this\n        return 100\n    }\n\n    getObjectiveShowing() {\n        // TODO implement this\n        return false\n    }\n\n    addPoweredCrystals() {\n        // TODO implement this\n    }\n\n    disallowAll() {\n        // TODO implement this\n    }\n\n    getPoweredPowerStationsBuilt() {\n        return GameState.getBuildingsByType(Building.POWER_STATION).length\n    }\n\n    getPoweredBarracksBuilt() {\n        return GameState.getBuildingsByType(Building.BARRACKS).length\n    }\n\n    getRecordObjectAtTutorial() {\n        // TODO implement this\n    }\n\n    getHiddenObjectsFound() {\n        // TODO implement this\n        return 0\n    }\n\n    callMethod(methodName, methodArgs) {\n        if (methodName === 'Stop') {\n            throw 'Stop'\n        } else if (methodName === 'TRUE') {\n            return true\n        } else if (methodName === 'FALSE') {\n            return false\n        }\n        const setRegisterMatch = methodName.match(/^SetR([0-7])$/)\n        if (setRegisterMatch) {\n            return this.setR(setRegisterMatch[1], methodArgs[0])\n        }\n        const addRegisterMatch = methodName.match(/^AddR([0-7])$/)\n        if (addRegisterMatch) {\n            return this.addR(addRegisterMatch[1], methodArgs[0])\n        }\n        const getRegisterMatch = methodName.match(/^GetR([0-7])$/)\n        if (getRegisterMatch) {\n            return this.getR(getRegisterMatch[1])\n        }\n        const setTimerMatch = methodName.match(/^SetTimer([0-3])$/)\n        if (setTimerMatch) {\n            return this.setTimer(setTimerMatch[1], methodArgs[0])\n        }\n        const getTimerMatch = methodName.match(/^GetTimer([0-3])$/)\n        if (getTimerMatch) {\n            return this.getTimer(getTimerMatch[1])\n        }\n        const lMethodName = methodName.toLowerCase()\n        for (const memberName in this) {\n            // noinspection JSUnfilteredForInLoop\n            if (memberName.toLowerCase() === lMethodName) {\n                // @ts-ignore\n                // noinspection JSUnfilteredForInLoop\n                return this[memberName].apply(this, methodArgs)\n            }\n        }\n        throw new Error('Undefined method: ' + methodName)\n    }\n\n    conditional(left, right) {\n        const conditionResult = this.executeStatement(left)\n        if (this.debug) {\n            console.log('Condition evaluated to ' + conditionResult)\n        }\n        if (conditionResult) {\n            this.executeStatement(right)\n        }\n    }\n\n    executeStatement(expression) {\n        if (expression.invoke) {\n            const argValues = expression.invoke !== 'conditional' ? expression.args.map(e => this.executeStatement(e)) : expression.args\n            const result = this.callMethod(expression.invoke, argValues)\n            if (result !== undefined && this.debug) {\n                console.log('Method returned: ' + result)\n            }\n            return result\n        } else if (expression.comparator) {\n            const left = this.executeStatement(expression.left)\n            const right = this.executeStatement(expression.right)\n            if (expression.comparator === '=') {\n                return left === right\n            } else if (expression.comparator === '!=') {\n                return left !== right\n            } else if (expression.comparator === '<') {\n                return left < right\n            } else if (expression.comparator === '>') {\n                return left > right\n            } else {\n                console.log(expression)\n                throw new Error('Unknown comparator: ' + expression.comparator)\n            }\n        } else if (!isNaN(expression)) { // just a number\n            return expression\n        } else if (expression.jump) {\n            this.programCounter = this.labelsByName[expression.jump]\n            if (this.programCounter === undefined) {\n                throw new Error('Label \\'' + expression.jump + '\\' is unknown!')\n            }\n            if (this.debug) {\n                console.log('Jumping to label \\'' + expression.jump + '\\' in line ' + this.programCounter)\n            }\n        } else {\n            console.log(expression)\n            throw new Error('Unknown expression in line ' + this.programCounter + ': ' + expression)\n        }\n    }\n\n    execute(debug = false) {\n        this.debug = debug\n        if (this.halted) return\n        try {\n            if (this.debug) {\n                console.log('Executing following script\\n' + this.scriptLines.join('\\n'))\n                console.log('Registers: ' + this.registers)\n            }\n            for (this.programCounter = 0; this.programCounter < this.statements.length; this.programCounter++) {\n                const statement = this.statements[this.programCounter]\n                if (this.debug) {\n                    console.log(this.programCounter + ': ' + this.scriptLines[this.programCounter])\n                    console.log(statement)\n                }\n                if (!statement.label) { // do nothing for label markers\n                    this.executeStatement(statement)\n                }\n            }\n        } catch (e) {\n            if (e === 'Stop') {\n                return\n            }\n            console.error(e)\n            console.error('FATAL ERROR! Script execution failed! You can NOT win anymore!')\n            this.halted = true\n            debugger;\n        }\n    }\n\n}\n","import { NerpRunner } from './NerpRunner'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class NerpParser {\n\n    static parse(nerpScript: string): NerpRunner {\n        const nerpRunner = new NerpRunner()\n        const lines = nerpScript.split('\\n').map(l => l\n            .split('//')[0].trim() // before comment starts\n            .split(';')[0].trim() // before preprocessor comment starts\n            .replace(/_/g, '') // some preprocessor macros use this prefix\n            .replace(/\\bTRUE \\? /, '') // some weird requirement of the original language\n            .replace(/[{}]/g, ''), // duplicate limit for macros using labels too\n        )\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c]\n            if (line.length < 1) {\n                continue // ignore empty lines, but important for macro closure\n            }\n            if (line.startsWith('#include ')) { // include other nerp scripts/headers\n                const includeName = line.replace(/^#include /, '').trim().slice(1, -1)\n                if (includeName === 'nerpdef.h') {\n                    // trivial default header file, is applied by search and replace above\n                    // see https://github.com/jgrip/legorr/blob/master/nerpdef.h\n                    continue\n                }\n                const includedRunner = NerpParser.parse(ResourceManager.getResource('Levels/' + includeName))\n                if (!includedRunner || !includedRunner.scriptLines || includedRunner.scriptLines.length < 1) {\n                    throw 'Can\\'t include unknown nerp script: ' + line\n                }\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(includedRunner.scriptLines)\n                // copy macros from included file to current file\n                nerpRunner.macrosByName = Object.assign({}, nerpRunner.macrosByName, includedRunner.macrosByName)\n            } else if (line.startsWith('#define ')) { // parse C++ preprocessor macro\n                const firstLine = line.replace(/^#define /, '').split(' ')\n                const macroLines = [firstLine.splice(1).join(' ').replace(/\\\\$/, '').trim()]\n                let mLine = line\n                let append = false\n                while (mLine.endsWith('\\\\') && c < lines.length - 1) {\n                    c++\n                    mLine = lines[c].trim()\n                    const macroLine = mLine.replace(/\\\\$/, '').trim()\n                    if (macroLine.length > 0) {\n                        if (append) {\n                            append = false\n                            macroLines[macroLines.length - 1] += macroLine\n                        } else {\n                            macroLines.push(macroLine)\n                        }\n                    }\n                    if (mLine.match(/:\\\\$/)) {\n                        append = true\n                    }\n                }\n                const macroCall = firstLine[0].split('(')\n                nerpRunner.macrosByName[macroCall[0]] = {\n                    args: macroCall[1].replace(/\\)$/, '').split(','),\n                    lines: macroLines,\n                }\n            } else {\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(this.replaceMacros(nerpRunner.macrosByName, line))\n            }\n        }\n        // somewhat precompile the script and create syntax tree\n        // must be done in separate block to make sure the script is complete and we can refer/rely on line numbers for label jumps\n        for (let c = 0; c < nerpRunner.scriptLines.length; c++) {\n            const line = nerpRunner.scriptLines[c]\n            nerpRunner.statements[c] = line.replace(/\\(\\)/g, '') // now the macros are applied and obsolete empty \"()\" can be removed\n                .split(' ? ')\n            const labelMatch = line.match(/(\\S+):/)\n            if (nerpRunner.statements[c].length === 2) { // line contains condition (primary operator)\n                nerpRunner.statements[c] = {\n                    invoke: 'conditional',\n                    args: [this.preProcess(nerpRunner.statements[c][0]), this.preProcess(nerpRunner.statements[c][1])],\n                }\n            } else if (labelMatch) { // keep label line number for later usage\n                const labelName = labelMatch[1].toLowerCase()\n                nerpRunner.labelsByName[labelName] = c\n                nerpRunner.statements[c] = {label: labelName}\n            } else if (nerpRunner.statements[c].length === 1) { // just a call\n                nerpRunner.statements[c] = this.preProcess(nerpRunner.statements[c][0])\n            } else { // lines contains more than 1 condition statement\n                throw 'Can\\'t deal with line: ' + line\n            }\n        }\n        return nerpRunner\n    }\n\n    static replaceMacros(macrosByName, line): string[] {\n        // check if this line contains a macro\n        const split = line.split('(') // not a very stable check though...\n        const macro = macrosByName[split[0]]\n        if (macro) {\n            const argValues = split.splice(1).join('(').slice(0, -1).split(',')\n            if (argValues.length !== macro.args.length) {\n                throw 'Invalid number of args provided for macro in line ' + line\n            }\n            const macroLines = []\n            macro.lines.forEach((line) => {\n                for (let c = 0; c < argValues.length; c++) {\n                    line = line.replace(new RegExp('\\\\b' + macro.args[c] + '\\\\b'), argValues[c])\n                }\n                macroLines.push(...(this.replaceMacros(macrosByName, line)))\n            })\n            return macroLines\n        } else {\n            return [line]\n        }\n    }\n\n    static preProcess(expression) {\n        expression = expression.trim().replace(/^_/, '') // remove whitespace and leading underscore\n        const number = parseInt(expression)\n        if (!isNaN(number)) {\n            return number\n        }\n        const opSplit = expression.split(/ (=) | (!=) | (>) | (<) /).filter(e => e !== undefined)\n        const brackets = expression.match(/^(.+)\\((.+)\\)$/)\n        const spaceSplit = expression.split(' ')\n        const labelMatch = expression.match(/([^:]+):$/)\n        const jumpMatch = expression.match(/^:([^:]+)$/)\n        if (opSplit.length === 3) { // expression contains secondary operator\n            return {left: this.preProcess(opSplit[0]), comparator: opSplit[1], right: this.preProcess(opSplit[2])}\n        } else if (brackets) {\n            const args = brackets[2].split(',').map(a => this.preProcess(a))\n            return {invoke: brackets[1], args: args}\n        } else if (spaceSplit.length > 1) { // space split must be the very last since most expressions contain space\n            const args = spaceSplit.length === 2 ? [this.preProcess(spaceSplit[1])] : spaceSplit.splice(1).map(a => this.preProcess(a))\n            return {invoke: spaceSplit[0], args: args}\n        } else if (labelMatch) { // label definition\n            return {label: labelMatch[1]}\n        } else if (jumpMatch) { // jump to label\n            return {jump: jumpMatch[1].toLowerCase()}\n        } else { // function call without args\n            if (expression.match(/[ =?><!]/)) {\n                throw 'Invalid expression given, parsing must have failed before somewhere'\n            }\n            return {invoke: expression, args: []}\n        }\n    }\n\n}\n","import { LevelPrioritiesEntryConfig } from '../../../cfg/LevelsCfg'\nimport { PublicJob } from './Job'\n\nexport class PriorityList {\n\n    levelDefault: PriorityEntry[] = []\n    current: PriorityEntry[] = []\n\n    constructor(priorities: LevelPrioritiesEntryConfig[]) {\n        this.levelDefault = priorities\n        this.reset()\n    }\n\n    toggle(index: number) {\n        this.current[index].enabled = !this.current[index].enabled\n    }\n\n    upOne(index: number) {\n        const tmp = this.current[index]\n        this.current[index] = this.current[index + 1]\n        this.current[index + 1] = tmp\n    }\n\n    reset() {\n        this.current = this.levelDefault.map(entry => new PriorityEntry(entry)) // deep copy required\n    }\n\n    pushToTop(index: number) {\n        const element = this.current[index]\n        for (let c = index; c > 0; c--) {\n            this.current[c] = this.current[c - 1]\n        }\n        this.current[0] = element\n    }\n\n    getPriority(job: PublicJob) {\n        return this.current[job.getPriorityIdentifier()] || 0\n    }\n\n}\n\nexport class PriorityEntry {\n\n    key: string\n    enabled: boolean\n\n    constructor(levelPriorityEntry: LevelPrioritiesEntryConfig) {\n        this.key = levelPriorityEntry.key\n        this.enabled = levelPriorityEntry.enabled\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { Job, JobType } from './Job'\n\nexport class MoveJob extends Job {\n\n    target: Vector3\n\n    constructor(target: Vector3) {\n        super(JobType.MOVE)\n        this.target = target\n    }\n\n    getPosition(): Vector3 {\n        return new Vector3().copy(this.target)\n    }\n\n    isInArea(x: number, z: number): boolean {\n        return this.getPosition().distanceToSquared(new Vector3(x, this.target.y, z)) < Math.pow(this.fulfiller[0].getSpeed(), 2)\n    }\n\n}\n","import { SceneManager } from './SceneManager'\nimport { TerrainLoader } from './TerrainLoader'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MathUtils, Raycaster, Vector3 } from 'three'\nimport { getRandom } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { CavernDiscovered, EntityAddedEvent, EntityType, JobCreateEvent, RaiderRequested, SpawnDynamiteEvent, SpawnMaterialEvent } from '../event/WorldEvents'\nimport { Raider } from './model/Raider'\nimport { GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { CollectableEntity } from './model/collect/CollectableEntity'\nimport { CHECK_SPANW_RAIDER_TIMER, TILESIZE } from '../main'\nimport { EntityDeselected } from '../event/LocalEvents'\nimport { ObjectListLoader } from './ObjectListLoader'\nimport { Dynamite } from './model/collect/Dynamite'\nimport { DynamiteJob } from '../game/model/job/SurfaceJob'\nimport { NerpParser } from '../core/NerpParser'\nimport { NerpRunner } from '../core/NerpRunner'\nimport { GameScreen } from '../screen/GameScreen'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { PriorityList } from '../game/model/job/PriorityList'\nimport degToRad = MathUtils.degToRad\nimport { CollectJob } from '../game/model/job/CollectJob'\nimport { MoveJob } from '../game/model/job/MoveJob'\n\nexport class WorldManager {\n\n    sceneManager: SceneManager\n    spawnRaiderInterval = null\n    nerpRunner: NerpRunner = null\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.sceneManager = new SceneManager(canvas)\n        EventBus.registerEventListener(EntityDeselected.eventKey, () => GameState.selectEntities([]))\n        EventBus.registerEventListener(RaiderRequested.eventKey, (event: RaiderRequested) => {\n            GameState.requestedRaiders = event.numRequested\n            if (GameState.requestedRaiders > 0 && !this.spawnRaiderInterval) {\n                this.spawnRaiderInterval = setInterval(this.checkSpawnRaiders.bind(this), CHECK_SPANW_RAIDER_TIMER)\n            }\n        })\n        EventBus.registerEventListener(SpawnDynamiteEvent.eventKey, (event: SpawnDynamiteEvent) => {\n            const targetBuilding = GameState.getClosestBuildingByType(event.surface.getDigPositions()[0], Building.TOOLSTATION)\n            if (!targetBuilding) {\n                throw 'Could not find toolstation to spawn dynamite'\n            }\n            const pos = targetBuilding.getDropPosition() // TODO use ToolNullName from cfg\n            const dynamite = new Dynamite()\n            dynamite.targetSurface = event.surface\n            dynamite.worldMgr = this\n            dynamite.setActivity('Normal')\n            dynamite.group.position.copy(pos)\n            this.sceneManager.scene.add(dynamite.group)\n            EventBus.publishEvent(new JobCreateEvent(new DynamiteJob(event.surface, dynamite)))\n        })\n        EventBus.registerEventListener(SpawnMaterialEvent.eventKey, (event: SpawnMaterialEvent) => {\n            this.addCollectable(event.collectable, event.spawnPosition.x, event.spawnPosition.z)\n        })\n        EventBus.registerEventListener(CavernDiscovered.eventKey, () => {\n            GameState.discoveredCaverns++\n        })\n    }\n\n    setup(levelConf: LevelEntryCfg, gameScreen: GameScreen) {\n        GameState.levelFullName = levelConf.fullName\n        GameState.totalCaverns = levelConf.reward?.quota?.caverns || 0\n        GameState.rewardConfig = levelConf.reward\n        GameState.priorityList = new PriorityList(levelConf.priorities)\n\n        this.sceneManager.setupScene()\n\n        // create terrain mesh and add it to the scene\n        this.sceneManager.terrain = TerrainLoader.loadTerrain(levelConf, this)\n        this.sceneManager.scene.add(this.sceneManager.terrain.floorGroup)\n\n        // load in non-space objects next\n        const objectListConf = ResourceManager.getResource(levelConf.oListFile)\n        ObjectListLoader.loadObjectList(this, objectListConf)\n\n        // load nerp script\n        this.nerpRunner = NerpParser.parse(ResourceManager.getResource(levelConf.nerpFile))\n        this.nerpRunner.messages.push(...(ResourceManager.getResource(levelConf.nerpMessageFile)))\n        this.nerpRunner.onLevelComplete = () => gameScreen.onLevelEnd()\n\n        // gather level start details for game result score calculation\n        GameState.totalDiggables = this.sceneManager.terrain.surfaces.filter((r) => r.forEach((s) => s.isDigable())).length\n        GameState.totalCrystals = 0\n        this.sceneManager.terrain.surfaces.forEach((r) => r.forEach((s) => GameState.totalCrystals += s.containedCrystals))\n        GameState.totalOres = 0\n        this.sceneManager.terrain.surfaces.forEach((r) => r.forEach((s) => GameState.totalOres += s.containedOres))\n    }\n\n    start() {\n        this.sceneManager.startScene()\n        this.nerpRunner?.startExecution()\n        GameState.levelStartTime = Date.now()\n    }\n\n    stop() {\n        GameState.levelStopTime = Date.now()\n        this.nerpRunner?.pauseExecution()\n        if (this.spawnRaiderInterval) clearInterval(this.spawnRaiderInterval)\n        this.spawnRaiderInterval = null\n        GameState.remainingDiggables = 0\n        this.sceneManager?.terrain?.surfaces?.forEach((r) => r.forEach((s) => GameState.remainingDiggables += s.isDigable() ? 1 : 0))\n        this.sceneManager.disposeScene()\n    }\n\n    resize(width: number, height: number) {\n        if (this.sceneManager) this.sceneManager.renderer.setSize(width, height)\n    }\n\n    getTerrainIntersectionPoint(rx: number, ry: number): Vector3 {\n        if (!this.sceneManager.terrain) return null\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.sceneManager.camera)\n        const intersects = raycaster.intersectObjects(this.sceneManager.terrain.floorGroup.children)\n        return intersects.length > 0 ? intersects[0].point : null\n    }\n\n    setTorchPosition(position: Vector3) {\n        this.sceneManager.cursorTorchlight.position.copy(position)\n        this.sceneManager.cursorTorchlight.position.y = this.getTerrainHeight(position.x, position.z) + 2 * TILESIZE\n    }\n\n    getTerrainHeight(worldX: number, worldZ: number): number {\n        const raycaster = new Raycaster(new Vector3(Number(worldX), 3 * TILESIZE, Number(worldZ)), new Vector3(0, -1, 0))\n        const intersect = raycaster.intersectObject(this.sceneManager.terrain.floorGroup, true)\n        if (intersect.length > 0) {\n            return intersect[0].point.y\n        } else {\n            console.warn('could not determine terrain height for ' + worldX + '/' + worldZ)\n            return 0\n        }\n    }\n\n    addCollectable(collectable: CollectableEntity, worldX: number, worldZ: number) {\n        const worldY = this.getTerrainHeight(worldX, worldZ)\n        collectable.worldMgr = this\n        collectable.group.position.set(worldX, worldY, worldZ)\n        collectable.group.visible = this.sceneManager.terrain.getSurfaceFromWorld(collectable.group.position).discovered\n        this.sceneManager.scene.add(collectable.group)\n        if (collectable.group.visible) {\n            GameState.collectables.push(collectable)\n            EventBus.publishEvent(new JobCreateEvent(new CollectJob(collectable)))\n        } else {\n            GameState.collectablesUndiscovered.push(collectable)\n        }\n        return collectable\n    }\n\n    checkSpawnRaiders() {\n        if (GameState.requestedRaiders < 1) {\n            if (this.spawnRaiderInterval) clearInterval(this.spawnRaiderInterval)\n            this.spawnRaiderInterval = null\n            return\n        }\n        if (GameState.raiders.length >= GameState.getMaxRaiders()) return\n        const spawnBuildings = GameState.getBuildingsByType(Building.TOOLSTATION, Building.TELEPORT_PAD).filter((b) => !b.spawning)\n        for (let c = 0; c < spawnBuildings.length && GameState.requestedRaiders > 0; c++) {\n            EventBus.publishEvent(new RaiderRequested(GameState.requestedRaiders - 1))\n            const station = spawnBuildings[c]\n            station.spawning = true\n            const raider = new Raider()\n            raider.worldMgr = this\n            raider.setActivity('TeleportIn', () => {\n                station.spawning = false\n                raider.setActivity('Stand')\n                raider.createPickSphere()\n                const walkOutPos = station.getPosition().add(new Vector3(0, 0, TILESIZE * 3 / 4 + getRandom(TILESIZE / 2))\n                    .applyEuler(station.getRotation()).applyAxisAngle(new Vector3(0, 1, 0), degToRad(-10 + getRandom(20))))\n                walkOutPos.y = this.getTerrainHeight(walkOutPos.x, walkOutPos.z)\n                raider.setJob(new MoveJob(walkOutPos))\n                GameState.raiders.push(raider)\n                EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, raider))\n            })\n            raider.group.position.copy(station.group.position).add(new Vector3(0, 0, TILESIZE / 2).applyEuler(station.group.rotation))\n            raider.group.rotation.copy(station.group.rotation)\n            this.sceneManager.scene.add(raider.group)\n        }\n    }\n\n}\n","import { ScreenLayer } from '../../screen/ScreenLayer'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventManager'\nimport { WorldManager } from '../../scene/WorldManager'\n\nexport class SelectionLayer extends ScreenLayer {\n\n    worldManager: WorldManager\n    selectStart: { x: number, y: number } = null\n\n    constructor() {\n        super(true)\n    }\n\n    setWorldManager(worldManager: WorldManager) {\n        this.worldManager = worldManager\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        if (eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.startSelection(cx, cy)\n        } else if (eventEnum === POINTER_EVENT.MOVE) {\n            return this.changeSelection(cx, cy)\n        } else if (eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.selectEntities(cx, cy)\n        }\n        return false\n    }\n\n    startSelection(screenX: number, screenY: number) {\n        this.selectStart = {x: screenX, y: screenY}\n        return true\n    }\n\n    changeSelection(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        this.context.strokeStyle = 'rgba(128, 192, 192, 0.5)'\n        this.context.lineWidth = 2\n        this.context.strokeRect(this.selectStart.x, this.selectStart.y, screenX - this.selectStart.x, screenY - this.selectStart.y)\n        return true\n    }\n\n    selectEntities(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        const r1x = (this.selectStart.x / this.canvas.width) * 2 - 1\n        const r1y = -(this.selectStart.y / this.canvas.height) * 2 + 1\n        const r2x = (screenX / this.canvas.width) * 2 - 1\n        const r2y = -(screenY / this.canvas.height) * 2 + 1\n        if (Math.abs(screenX - this.selectStart.x) < 5 && Math.abs(screenY - this.selectStart.y) < 5) {\n            const x = (this.selectStart.x + screenX) / this.canvas.width - 1\n            const y = -(this.selectStart.y + screenY) / this.canvas.height + 1\n            this.worldManager.sceneManager.selectEntitiesByRay(x, y)\n        } else {\n            this.worldManager.sceneManager.selectEntitiesInFrustum(r1x, r1y, r2x, r2y)\n        }\n        this.selectStart = null\n        return true\n    }\n\n}\n","import { ScreenLayer } from '../../screen/ScreenLayer'\nimport { WorldManager } from '../../scene/WorldManager'\nimport { SelectionType } from '../model/Selectable'\nimport { GameState } from '../model/GameState'\nimport { Raider } from '../../scene/model/Raider'\nimport { EventBus } from '../../event/EventBus'\nimport { JobCreateEvent } from '../../event/WorldEvents'\nimport { Surface } from '../../scene/model/map/Surface'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { FulfillerEntity } from '../../scene/model/FulfillerEntity'\nimport { SurfaceJob, SurfaceJobType } from '../model/job/SurfaceJob'\nimport { KEY_EVENT, MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventManager'\nimport { DEV_MODE } from '../../main'\nimport { MoveJob } from '../model/job/MoveJob'\nimport { Vector3 } from 'three'\n\nexport class GameLayer extends ScreenLayer {\n\n    private worldMgr: WorldManager\n    private rightDown: { x: number, y: number } = {x: 0, y: 0}\n\n    constructor() {\n        super(false, false)\n    }\n\n    setWorldManager(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (eventEnum === POINTER_EVENT.MOVE) {\n            const intersectionPoint = this.getTerrainPositionFromEvent(event)\n            if (intersectionPoint) this.worldMgr.setTorchPosition(intersectionPoint)\n        } else if (eventEnum === POINTER_EVENT.UP && event.button === MOUSE_BUTTON.SECONDARY) {\n            const downUpDistance = Math.abs(event.x - this.rightDown.x) + Math.abs(event.y - this.rightDown.y)\n            if (downUpDistance < 3 && (GameState.selectionType === SelectionType.PILOT || GameState.selectionType === SelectionType.GROUP)) {\n                // TODO check for collectable entity first\n                const intersectionPoint = this.getTerrainPositionFromEvent(event)\n                if (intersectionPoint) {\n                    const surface = this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(intersectionPoint)\n                    if (surface) {\n                        if (surface.isDrillable()) {\n                            this.createSurfaceJob(SurfaceJobType.DRILL, surface, intersectionPoint)\n                        } else if (surface.hasRubble()) {\n                            this.createSurfaceJob(SurfaceJobType.CLEAR_RUBBLE, surface, intersectionPoint)\n                        } else if (surface.isWalkable()) {\n                            GameState.selectedEntities.forEach((raider: Raider) => raider.setJob(new MoveJob(intersectionPoint)))\n                            if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n                        }\n                    }\n                }\n            }\n        } else if (eventEnum === POINTER_EVENT.DOWN && event.button === MOUSE_BUTTON.SECONDARY) {\n            this.rightDown.x = event.x\n            this.rightDown.y = event.y\n        }\n        this.canvas.dispatchEvent(event)\n        return true\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        if (DEV_MODE && eventEnum === KEY_EVENT.UP) {\n            if (GameState.selectionType === SelectionType.SURFACE) {\n                GameState.selectedEntities.forEach((s: Surface) => {\n                    if (event.key === 'c') {\n                        if (!s.surfaceType.floor) s.collapse()\n                    } else if (event.key === 'f') {\n                        const t = s.terrain.findFallInTarget(s.x, s.y)\n                        if (!s.surfaceType.floor) s.createFallin(t[0], t[1])\n                    }\n                })\n                EventBus.publishEvent(new EntityDeselected())\n                return true\n            }\n        }\n        return false\n    }\n\n    createSurfaceJob(surfaceJobType: SurfaceJobType, surface: Surface, intersectionPoint: Vector3) {\n        const surfJob = new SurfaceJob(surfaceJobType, surface)\n        GameState.selectedEntities.forEach((e: FulfillerEntity) => {\n            if (surfJob.isQualified(e)) {\n                e.setJob(surfJob)\n            } else if (surface.isWalkable()) {\n                e.setJob(new MoveJob(intersectionPoint))\n            }\n        })\n        EventBus.publishEvent(new JobCreateEvent(surfJob))\n        surface.updateJobColor()\n        if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n    }\n\n    getTerrainPositionFromEvent(event) {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        return this.worldMgr.getTerrainIntersectionPoint(rx, ry)\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        this.canvas.dispatchEvent(event)\n        return true\n    }\n\n}\n","export class BaseElement {\n\n    parent: BaseElement = null\n    x: number = 0\n    y: number = 0\n    relX: number = 0\n    relY: number = 0\n    width: number = 0\n    height: number = 0\n    children: BaseElement[] = []\n    hidden: boolean = false\n    disabled: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n\n    constructor(parent: BaseElement = null) {\n        this.parent = parent\n    }\n\n    addChild<T extends BaseElement>(child: T): T {\n        child.parent = this\n        this.children.push(child)\n        child.updatePosition()\n        return child\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n    }\n\n    drawTooltip(context: CanvasRenderingContext2D) {\n    }\n\n    onClick() {\n    }\n\n    isInactive(): boolean {\n        for (let parent = this.parent; !!parent; parent = parent.parent) if (parent.isInactive()) return true\n        return this.hidden || this.disabled\n    }\n\n    hide() {\n        this.hidden = true\n        this.children.forEach((child) => child.hide())\n    }\n\n    show() {\n        this.hidden = false\n        this.children.forEach((child) => child.show())\n    }\n\n    updatePosition() {\n        this.x = this.parent ? this.parent.x + this.relX : this.relX\n        this.y = this.parent ? this.parent.y + this.relY : this.relY\n        this.children.forEach((child) => child.updatePosition())\n    }\n\n    isInRect(cx, cy) {\n        return cx >= this.x && cy >= this.y && cx < this.x + this.width && cy < this.y + this.height\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = this.pressed && this.hover\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => stateChanged = child.checkHover(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.pressed !== inRect\n        this.pressed = inRect\n        this.children.forEach((child) => stateChanged = child.checkClick(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        if (inRect && this.pressed) this.onClick()\n        let stateChanged = false\n        this.children.forEach((child) => stateChanged = child.checkRelease(cx, cy) || stateChanged)\n        stateChanged = this.pressed || stateChanged\n        this.pressed = false\n        return stateChanged\n    }\n\n    release(): boolean {\n        let stateChanged = this.pressed || this.hover\n        this.pressed = false\n        this.hover = false\n        this.children.forEach((child) => stateChanged = child.release() || stateChanged)\n        return stateChanged\n    }\n\n    notifyRedraw() {\n        if (this.parent) this.parent.notifyRedraw()\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\nimport { NATIVE_FRAMERATE, PANEL_ANIMATION_MULTIPLIER } from '../../../main'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\n\nexport class Panel extends BaseElement {\n\n    img: HTMLCanvasElement = null\n    xOut: number = 0\n    yOut: number = 0\n    xIn: number = 0\n    yIn: number = 0\n    animationTimeout = null\n    movedIn: boolean = true // xIn, yIn is the collapsed position out of screen\n\n    constructor(panelCfg?: PanelCfg) {\n        super()\n        if (panelCfg) {\n            this.img = ResourceManager.getImage(panelCfg.filename)\n            this.xOut = panelCfg.xOut\n            this.yOut = panelCfg.yOut\n            this.xIn = panelCfg.xIn\n            this.yIn = panelCfg.yIn\n            this.relX = this.xIn\n            this.relY = this.yIn\n        }\n    }\n\n    isInactive(): boolean {\n        return this.animationTimeout || super.isInactive()\n    }\n\n    updateAnimation(targetX: number, targetY: number, speed: number, onDone: () => any) {\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= speed && Math.abs(diffY) <= speed) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * speed)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * speed)\n            const panel = this\n            this.animationTimeout = setTimeout(() => panel.updateAnimation(targetX, targetY, speed, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    setMovedIn(movedIn: boolean, onDone: () => any = null) {\n        if (this.movedIn !== movedIn) {\n            this.toggleState(onDone)\n        } else if (onDone) {\n            onDone()\n        }\n    }\n\n    toggleState(onDone: () => any = null) {\n        if (this.animationTimeout) {\n            clearTimeout(this.animationTimeout)\n            this.animationTimeout = null\n        }\n        if (this.movedIn) {\n            this.movedIn = false\n            this.updateAnimation(this.xOut, this.yOut, PANEL_ANIMATION_MULTIPLIER, onDone)\n        } else {\n            this.movedIn = true\n            this.updateAnimation(this.xIn, this.yIn, PANEL_ANIMATION_MULTIPLIER, onDone)\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.img) context.drawImage(this.img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class Button extends BaseElement {\n\n    buttonType: string = null\n    imgNormal: HTMLCanvasElement = null\n    imgHover: HTMLCanvasElement = null\n    imgPressed: HTMLCanvasElement = null\n    imgDisabled: HTMLCanvasElement = null\n    tooltip: string = null\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent)\n        this.buttonType = btnCfg.buttonType\n        this.imgNormal = ResourceManager.getImageOrNull(btnCfg.normalFile)\n        this.imgHover = ResourceManager.getImageOrNull(btnCfg.highlightFile)\n        this.imgPressed = ResourceManager.getImageOrNull(btnCfg.pressedFile)\n        this.imgDisabled = ResourceManager.getImageOrNull(btnCfg.disabledFile)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width || this.imgNormal?.width || this.imgPressed?.width\n        this.height = btnCfg.height || this.imgNormal?.height || this.imgPressed?.height\n        this.tooltip = btnCfg.tooltip\n        this.updatePosition()\n    }\n\n    onClick() {\n        console.log('button pressed: ' + this.buttonType)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled || this.imgPressed || this.imgNormal\n        } else if (this.pressed) {\n            img = this.imgPressed || this.imgNormal\n        } else if (this.hover) {\n            img = this.imgHover || this.imgNormal\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { BaseElement } from '../base/BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class SideBarLabel extends BaseElement {\n\n    tooltip: string\n    label: string\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg, label: string) {\n        super(parent)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width\n        this.height = btnCfg.height\n        this.tooltip = btnCfg.tooltip\n        this.label = label\n        this.updatePosition()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.textAlign = 'center'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.label, this.x + this.width / 2, this.y + this.height - 2)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { GameState } from '../../model/GameState'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { CollectEvent, SpawnMaterialEvent } from '../../../event/WorldEvents'\nimport { CollectableType } from '../../../scene/model/collect/CollectableEntity'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { SideBarLabel } from './SideBarLabel'\n\nexport class PanelCrystalSideBar extends Panel {\n\n    labelOre: SideBarLabel\n    labelCrystal: SideBarLabel\n    imgNoCrystal: HTMLCanvasElement\n    imgSmallCrystal: HTMLCanvasElement\n    imgUsedCrystal: HTMLCanvasElement\n    imgOre: HTMLCanvasElement\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonCrystalSideBarCfg) {\n        super(panelCfg)\n        this.labelOre = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarOre, GameState.numOre.toString())) // TODO include number of bricks\n        this.labelCrystal = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarCrystals, GameState.numCrystal.toString()))\n        this.imgNoCrystal = ResourceManager.getImage('Interface/RightPanel/NoSmallCrystal.bmp')\n        this.imgSmallCrystal = ResourceManager.getImage('Interface/RightPanel/SmallCrystal.bmp')\n        this.imgUsedCrystal = ResourceManager.getImage('Interface/RightPanel/UsedCrystal.bmp')\n        this.imgOre = ResourceManager.getImage('Interface/RightPanel/CrystalSideBar_Ore.bmp')\n        EventBus.registerEventListener(CollectEvent.eventKey, (event: CollectEvent) => {\n            this.updateQuantities(event.collectType)\n        })\n        EventBus.registerEventListener(SpawnMaterialEvent.eventKey, (event: SpawnMaterialEvent) => {\n            this.updateQuantities(event.collectable.getCollectableType())\n        })\n    }\n\n    updateQuantities(type: CollectableType) {\n        if (type === CollectableType.CRYSTAL || type === CollectableType.ORE || type === CollectableType.BRICK) {\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        this.labelOre.label = GameState.numOre.toString() // TODO include number of bricks\n        this.labelCrystal.label = GameState.numCrystal.toString()\n        super.onRedraw(context)\n        // draw crystals\n        let curX = this.x + this.img.width - 8\n        let curY = this.y + this.img.height - 34\n        for (let c = 0; (GameState.neededCrystals < 1 || c < Math.max(GameState.neededCrystals, GameState.numCrystal)) && curY >= Math.max(this.imgNoCrystal.height, this.imgSmallCrystal.height, this.imgUsedCrystal.height); c++) {\n            let imgCrystal = this.imgNoCrystal\n            if (GameState.usedCrystals > c) {\n                imgCrystal = this.imgUsedCrystal\n            } else if (GameState.numCrystal > c) {\n                imgCrystal = this.imgSmallCrystal\n            }\n            curY -= imgCrystal.height\n            context.drawImage(imgCrystal, curX - imgCrystal.width / 2, curY)\n        }\n        // draw ores\n        curX = this.x + this.img.width - 21\n        curY = this.y + this.img.height - 42\n        for (let i = 0; i < GameState.numOre && curY >= this.imgOre.height; ++i) {\n            curY -= this.imgOre.height\n            context.drawImage(this.imgOre, curX - this.imgOre.width / 2, curY)\n        }\n    }\n\n}\n\nexport class ButtonCrystalSideBarCfg extends BaseConfig {\n\n    panelButtonCrystalSideBarOre: ButtonCfg = null\n    panelButtonCrystalSideBarCrystals: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonInfoDockCfg extends BaseConfig {\n\n    panelButtonInfoDockGoto: ButtonCfg = null\n    panelButtonInfoDockClose: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonPriorityListCfg extends BaseConfig {\n\n    panelButtonPriorityListDisable: ButtonCfg[] = []\n    panelButtonPriorityListUpOne: ButtonCfg[] = []\n    panelButtonPriorityListClose: ButtonCfg = null // not used in the game\n    panelButtonPriorityListReset: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName.match(/panelButtonPriorityListDisable\\d+/i)) {\n            this.panelButtonPriorityListDisable.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else if (lCfgKeyName.match(/panelButtonPriorityListUpOne\\d+/i)) {\n            this.panelButtonPriorityListUpOne.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else {\n            return super.assignValue(objKey, lCfgKeyName, cfgValue)\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonTopCfg extends BaseConfig {\n\n    panelButtonTopPanelCallToArms: ButtonCfg = null\n    panelButtonTopPanelOptions: ButtonCfg = null\n    panelButtonTopPanelPriorities: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ButtonRadarCfg } from '../game/gui/radar/RadarPanel'\nimport { ButtonCrystalSideBarCfg } from '../game/gui/sidebar/PanelCrystalSideBar'\nimport { ButtonInfoDockCfg } from '../game/gui/infodock/ButtonInfoDockCfg'\nimport { ButtonPriorityListCfg } from '../game/gui/toppanel/ButtonPriorityListCfg'\nimport { ButtonTopCfg } from '../game/gui/toppanel/ButtonTopCfg'\n\nexport class ButtonsCfg extends BaseConfig {\n\n    panelRadar: ButtonRadarCfg = null\n    panelCrystalSideBar: ButtonCrystalSideBarCfg = null\n    panelTopPanel: ButtonTopCfg = null\n    panelInformation: ButtonInformationCfg = null\n    panelPriorityList: ButtonPriorityListCfg = null\n    panelCameraControl: ButtonCameraControlCfg = null\n    panelInfoDock: ButtonInfoDockCfg = null\n    panelEncyclopedia: any = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        const btnCfgValue = {}\n        cfgValue.forEach(arr => btnCfgValue[arr[0]] = arr)\n        if (lCfgKeyName === 'panelRadar'.toLowerCase()) {\n            return new ButtonRadarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCrystalSideBar'.toLowerCase()) {\n            return new ButtonCrystalSideBarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelTopPanel'.toLowerCase()) {\n            return new ButtonTopCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInformation'.toLowerCase()) {\n            return new ButtonInformationCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelPriorityList'.toLowerCase()) {\n            return new ButtonPriorityListCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCameraControl'.toLowerCase()) {\n            return new ButtonCameraControlCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInfoDock'.toLowerCase()) {\n            return new ButtonInfoDockCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelEncyclopedia'.toLowerCase()) {\n            return null // not used in the game\n        } else {\n            return btnCfgValue\n        }\n    }\n\n}\n\nexport class ButtonInformationCfg extends BaseConfig {\n\n    panelButtonInformationToggle: ButtonCfg = null\n    panelButtonInformationFunction: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n\nexport class ButtonCameraControlCfg extends BaseConfig {\n\n    panelButtonCameraControlZoomIn: ButtonCfg = null\n    panelButtonCameraControlZoomOut: ButtonCfg = null\n    panelButtonCameraControlCycleBuildings: ButtonCfg = null\n    panelButtonCameraControlRotate: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n\nexport class BaseButtonCfg {\n\n    buttonType?: string = null\n    normalFile?: string = null\n    highlightFile?: string = null\n    pressedFile?: string = null\n    disabledFile?: string = null\n    relX?: number = 0\n    relY?: number = 0\n    width?: number = 0\n    height?: number = 0\n    tooltip?: string = null\n}\n\nexport class ButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 9) {\n            [this.buttonType, this.normalFile, this.highlightFile, this.pressedFile, this.relX, this.relY, this.width, this.height, this.tooltip] = cfgValue\n        } else {\n            throw 'Invalid number of arguments (' + cfgValue.length + ') given for button configuration expected 9 or 5'\n        }\n    }\n\n}\n\nexport class InfoButtonCfg extends BaseButtonCfg {\n\n    constructor(buttonImageFilename: string) {\n        super()\n        this.normalFile = buttonImageFilename\n        this.highlightFile = buttonImageFilename\n        this.pressedFile = buttonImageFilename\n        this.disabledFile = buttonImageFilename\n        this.relX = 0\n        this.relY = 0\n    }\n\n}\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { BaseConfig } from '../../../cfg/BaseConfig'\n\nexport class RadarPanel extends Panel {\n\n    fill: Panel\n    overlay: Panel\n    btnToggle: Button\n    btnMap: Button\n    btnTagged: Button\n\n    constructor(panelCfg: PanelCfg, panelFillCfg: PanelCfg, panelOverlayCfg: PanelCfg, buttonsCfg: ButtonRadarCfg) {\n        super(panelCfg)\n        this.fill = this.addChild(new Panel(panelFillCfg))\n        // fill cords given in abs, turn to rel (otherwise animation wont work)\n        this.fill.relX = this.relX - this.fill.relX\n        this.fill.relY = this.relY - this.fill.relY\n        this.overlay = this.addChild(new Panel(panelOverlayCfg))\n        // this.overlay.hide();\n        this.btnToggle = this.addChild(new Button(this, buttonsCfg.panelButtonRadarToggle))\n        this.btnToggle.onClick = () => this.toggleState()\n        this.btnMap = this.addChild(new Button(this, buttonsCfg.panelButtonRadarMapView))\n        this.btnMap.onClick = () => {\n            // this.fill.hide();\n            // this.overlay.hide();\n        }\n        this.btnTagged = this.addChild(new Button(this, buttonsCfg.panelButtonRadarTaggedObjectView))\n        this.btnTagged.onClick = () => {\n            // this.fill.show();\n            // this.overlay.show(); // TODO only show overlay, when entity selected\n        }\n    }\n\n}\n\nexport class ButtonRadarCfg extends BaseConfig {\n\n    panelButtonRadarToggle: ButtonCfg = null\n    panelButtonRadarTaggedObjectView: ButtonCfg = null\n    panelButtonRadarZoomIn: ButtonCfg = null\n    panelButtonRadarZoomOut: ButtonCfg = null\n    panelButtonRadarMapView: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class TextInfoMessage {\n\n    infoImage\n    textImage\n\n    constructor(font: BitmapFont, infoMessageEntryConfig: TextInfoMessageEntryConfig, maxWidth: number) {\n        this.textImage = font.createTextImage(infoMessageEntryConfig.text, maxWidth)\n        this.infoImage = ResourceManager.getImageOrNull(infoMessageEntryConfig.imageFilename)\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { GameState } from '../../model/GameState'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { TextInfoMessageConfig } from './TextInfoMessageConfig'\nimport { EventBus } from '../../../event/EventBus'\nimport { CrystalFoundEvent } from '../../../event/WorldLocationEvent'\nimport { TextInfoMessage } from './TextInfoMessage'\nimport { CavernDiscovered, OreFoundEvent, RaiderTrained } from '../../../event/WorldEvents'\n\nexport class MessagePanel extends Panel {\n\n    imgAir: HTMLCanvasElement = null\n    currentMessage: TextInfoMessage = null\n    messageTimeout = null\n\n    msgSpaceToContinue: TextInfoMessage\n    msgAirSupplyLow: TextInfoMessage\n    msgAirSupplyRunningOut: TextInfoMessage\n    msgGameCompleted: TextInfoMessage\n    msgManTrained: TextInfoMessage\n    msgUnitUpgraded: TextInfoMessage\n\n    constructor(panelCfg: PanelCfg, textInfoMessageConfig: TextInfoMessageConfig) {\n        super(panelCfg)\n        this.relX = this.xOut = this.xIn = 42\n        this.relY = this.yOut = this.yIn = 409\n        this.imgAir = ResourceManager.getImage('Interface/Airmeter/msgpanel_air_juice.bmp')\n\n        const font = ResourceManager.getBitmapFont('Interface/Fonts/Font5_Hi.bmp')\n        const crystalFound = new TextInfoMessage(font, textInfoMessageConfig.textCrystalFound, this.img.width)\n        EventBus.registerEventListener(CrystalFoundEvent.eventKey, () => this.setMessage(crystalFound))\n        this.msgSpaceToContinue = new TextInfoMessage(font, textInfoMessageConfig.textSpaceToContinue, this.img.width)\n        const cavernDiscovered = new TextInfoMessage(font, textInfoMessageConfig.textCavernDiscovered, this.img.width)\n        EventBus.registerEventListener(CavernDiscovered.eventKey, () => this.setMessage(cavernDiscovered))\n        const oreFound = new TextInfoMessage(font, textInfoMessageConfig.textOreFound, this.img.width)\n        EventBus.registerEventListener(OreFoundEvent.eventKey, () => this.setMessage(oreFound))\n        this.msgAirSupplyLow = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyLow, this.img.width)\n        this.msgAirSupplyRunningOut = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyRunningOut, this.img.width)\n        this.msgGameCompleted = new TextInfoMessage(font, textInfoMessageConfig.textGameCompleted, this.img.width)\n        this.msgManTrained = new TextInfoMessage(font, textInfoMessageConfig.textManTrained, this.img.width)\n        EventBus.registerEventListener(RaiderTrained.eventKey, () => this.setMessage(this.msgManTrained))\n        this.msgUnitUpgraded = new TextInfoMessage(font, textInfoMessageConfig.textUnitUpgraded, this.img.width)\n    }\n\n    setMessage(textInfoMessage: TextInfoMessage, timeout: number = 3000) {\n        if (this.messageTimeout) clearTimeout(this.messageTimeout)\n        this.currentMessage = textInfoMessage\n        this.notifyRedraw()\n        if (timeout) {\n            const that = this\n            this.messageTimeout = setTimeout(() => {\n                that.currentMessage = null\n                that.notifyRedraw()\n            }, timeout)\n        }\n    }\n\n    unsetMessage(textInfoMessage: TextInfoMessage) {\n        if (this.currentMessage === textInfoMessage) {\n            this.currentMessage = null\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (GameState.airlevel > 0) {\n            const width = Math.round(236 * Math.min(1, GameState.airlevel))\n            context.drawImage(this.imgAir, this.x + 85, this.y + 6, width, 8)\n        }\n        const textImage = this.currentMessage?.textImage\n        const infoImage = this.currentMessage?.infoImage\n        if (textImage) {\n            const txtX = this.x + (this.img.width - textImage.width - (infoImage ? infoImage.width : 0)) / 2\n            context.drawImage(textImage, txtX, this.y + 26)\n        }\n        if (infoImage) {\n            const infoX = this.x + this.img.width - infoImage.width\n            context.drawImage(infoImage, infoX, this.y + 16)\n        }\n    }\n\n}\n","import { BaseButtonCfg } from './ButtonsCfg'\n\nexport class IconPanelBackButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super();\n        [this.width, this.height, this.highlightFile, this.pressedFile, this.tooltip] = cfgValue // Interface back button\n        this.relX = 4\n        this.relY = 14\n    }\n\n}\n","import { BaseButtonCfg } from './ButtonsCfg'\n\nexport class MenuItemCfg extends BaseButtonCfg {\n\n    tooltipDisabled: string\n    hotkey: string\n\n    constructor(cfgValue: any) {\n        super();\n        [this.normalFile, this.disabledFile, this.pressedFile, this.tooltip, this.tooltipDisabled, this.hotkey] = cfgValue\n        this.width = 40\n        this.height = 40\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\n\nexport class IconPanelButton extends Button {\n\n    tooltipDisabled: string\n    hotkey: string\n    isDisabled: () => boolean = () => this.disabled\n\n    constructor(parent: BaseElement, menuItemCfg: MenuItemCfg, itemKey: string, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemCfg)\n        this.buttonType = itemKey\n        this.relX = parentWidth - 59\n        this.relY = 9 + this.height * menuIndex\n        this.tooltipDisabled = menuItemCfg.tooltipDisabled\n        this.hotkey = menuItemCfg.hotkey\n        this.disabled = true\n    }\n\n    onClick() {\n        console.log('menu item pressed: ' + this.buttonType)\n    }\n\n    updateState(autoRedraw: boolean = true) {\n        const targetState = !!this.isDisabled()\n        const stateChanged = this.disabled !== targetState\n        this.disabled = targetState\n        if (stateChanged && autoRedraw) this.notifyRedraw()\n        return stateChanged\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n        super.drawHover(context)\n        if (!this.disabled && this.hover) {\n            context.strokeStyle = '#0f0'\n            context.lineWidth = 2\n            context.strokeRect(this.x - context.lineWidth / 2, this.y - context.lineWidth / 2, this.width + context.lineWidth - 1, this.height + context.lineWidth - 1)\n        }\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { Button } from '../base/Button'\nimport { IconPanelBackButtonCfg } from '../../../cfg/IconPanelBackButtonCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class IconSubPanel extends Panel {\n\n    backBtn: Button = null\n    iconPanelButtons: IconPanelButton[] = []\n\n    constructor(numOfItems, onBackPanel: Panel = null) {\n        super()\n        if (onBackPanel) {\n            const backBtnCfg = new IconPanelBackButtonCfg(ResourceManager.cfg('InterfaceBackButton'))\n            this.backBtn = this.addChild(new Button(this, backBtnCfg))\n            const panel = this\n            this.backBtn.onClick = () => panel.toggleState(() => onBackPanel.toggleState())\n        }\n        const frameImgCfg = ResourceManager.cfg('InterfaceSurroundImages', numOfItems.toString())\n        const [imgName, val1, val2, val3, val4, imgNameWoBackName, woBack1, woBack2] = frameImgCfg\n        this.img = onBackPanel ? ResourceManager.getImage(imgName) : ResourceManager.getImage(imgNameWoBackName)\n        this.xOut = -this.img.width\n    }\n\n    addMenuItem(menuItemGroup: string, itemKey: string) {\n        const menuItemCfg = new MenuItemCfg(ResourceManager.cfg(menuItemGroup, itemKey))\n        const menuItem = this.addChild(new IconPanelButton(this, menuItemCfg, itemKey, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(menuItem)\n        return menuItem\n    }\n\n    toggleState(onDone: () => any = null) {\n        super.toggleState(onDone)\n        if (!this.movedIn) this.iconPanelButtons.forEach((button) => button.updateState())\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\n\nexport class BuildingPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Toolstation')\n        this.addMenuItem('InterfaceBuildImages', 'TeleportPad')\n        this.addMenuItem('InterfaceBuildImages', 'Docks')\n        this.addMenuItem('InterfaceBuildImages', 'Powerstation')\n        this.addMenuItem('InterfaceBuildImages', 'Barracks')\n        this.addMenuItem('InterfaceBuildImages', 'Upgrade')\n        this.addMenuItem('InterfaceBuildImages', 'Geo-dome')\n        this.addMenuItem('InterfaceBuildImages', 'OreRefinery')\n        this.addMenuItem('InterfaceBuildImages', 'Gunstation')\n        this.addMenuItem('InterfaceBuildImages', 'TeleportBIG')\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class SmallVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Hoverboard')\n        this.addMenuItem('InterfaceBuildImages', 'SmallDigger')\n        this.addMenuItem('InterfaceBuildImages', 'SmallTruck')\n        this.addMenuItem('InterfaceBuildImages', 'SmallCat')\n        this.addMenuItem('InterfaceBuildImages', 'SmallMLP')\n        this.addMenuItem('InterfaceBuildImages', 'SmallHeli')\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\n\nexport class LargeVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(5, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'BullDozer')\n        this.addMenuItem('InterfaceBuildImages', 'WalkerDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeMLP')\n        this.addMenuItem('InterfaceBuildImages', 'LargeDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeCat')\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\n\nexport class SelectBasePanel extends IconSubPanel {\n\n    constructor(numOfItems, onBackPanel: Panel) {\n        super(numOfItems, onBackPanel)\n        this.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected())\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { SurfaceJob, SurfaceJobType } from '../../model/job/SurfaceJob'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent, SpawnDynamiteEvent } from '../../../event/WorldEvents'\nimport { EntityDeselected, SurfaceSelectedEvent } from '../../../event/LocalEvents'\nimport { IconPanelButton } from './IconPanelButton'\nimport { Building } from '../../model/entity/building/Building'\nimport { RaiderSkills } from '../../../scene/model/Raider'\n\nexport class SelectWallPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        const itemDrill = this.addWallMenuItem('Interface_MenuItem_Dig', SurfaceJobType.DRILL)\n        itemDrill.isDisabled = () => !(GameState.selectedSurface?.isDrillable()) &&\n            !(GameState.selectedSurface?.isDrillableHard() && GameState.hasVehicleWithSkill('drillHard'))\n        const itemReinforce = this.addWallMenuItem('Interface_MenuItem_Reinforce', SurfaceJobType.REINFORCE)\n        itemReinforce.isDisabled = () => !(GameState.selectedSurface?.isReinforcable())\n        const itemDynamite = this.addWallMenuItem('Interface_MenuItem_Dynamite', SurfaceJobType.BLOW)\n        itemDynamite.isDisabled = () => !GameState.hasBuildingWithUpgrades(Building.TOOLSTATION, 2) &&\n                !GameState.raiders.some((r) => r.hasSkill(RaiderSkills.DEMOLITION))\n        const itemDeselect = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeselectDig')\n        itemDeselect.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.cancelJobs()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        EventBus.registerEventListener(SurfaceSelectedEvent.eventKey, () => {\n            itemDrill.updateState(false)\n            itemReinforce.updateState(false)\n            itemDynamite.updateState(false)\n            this.notifyRedraw()\n        })\n    }\n\n    addWallMenuItem(itemKey: string, jobType: SurfaceJobType): IconPanelButton {\n        const item = this.addMenuItem('InterfaceImages', itemKey)\n        item.onClick = () => {\n            const selectedSurface = GameState.selectedSurface\n            if (selectedSurface) {\n                if (jobType === SurfaceJobType.BLOW) {\n                    EventBus.publishEvent(new SpawnDynamiteEvent(selectedSurface))\n                } else if (!selectedSurface.hasJobType(jobType)) {\n                    EventBus.publishEvent(new JobCreateEvent(new SurfaceJob(jobType, selectedSurface)))\n                }\n                EventBus.publishEvent(new EntityDeselected())\n            }\n        }\n        return item\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { Surface } from './map/Surface'\nimport { CollectableEntity, CollectableType } from './collect/CollectableEntity'\nimport { EventBus } from '../../event/EventBus'\nimport { JobCreateEvent } from '../../event/WorldEvents'\nimport { CompletePowerPathJob } from '../../game/model/job/SurfaceJob'\nimport { GameState } from '../../game/model/GameState'\n\nexport class BuildingSite {\n\n    isPowerPath: boolean\n    surfaces: Surface[] = []\n    neededByType = {}\n    assignedByType = {}\n    onSiteByType = {}\n    complete: boolean = false\n\n    constructor(isPowerPath: boolean = false) {\n        this.isPowerPath = isPowerPath\n    }\n\n    getPosition(): Vector3 {\n        return this.surfaces[0].getCenterWorld()\n    }\n\n    needs(collectableType: CollectableType): boolean {\n        const needed = this.neededByType[collectableType] || 0\n        const assigned = (this.assignedByType[collectableType] || []).length\n        return needed > assigned\n    }\n\n    assign(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        this.assignedByType[collectableType] = this.assignedByType[collectableType] || []\n        this.assignedByType[collectableType].push(item)\n    }\n\n    unAssign(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        this.assignedByType[collectableType] = (this.assignedByType[collectableType] || [])\n        this.assignedByType[collectableType].splice(this.assignedByType[collectableType].indexOf(item), 1)\n    }\n\n    addItem(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        const needed = this.neededByType[collectableType] || 0\n        this.onSiteByType[collectableType] = this.onSiteByType[collectableType] || []\n        if (this.onSiteByType[collectableType].length < needed) {\n            item.group.position.copy(item.getTargetPos())\n            item.worldMgr.sceneManager.scene.add(item.group)\n            this.onSiteByType[collectableType].push(item)\n            this.checkComplete()\n        } else {\n            item.resetTarget()\n            item.worldMgr.addCollectable(item, item.getTargetPos().x, item.getTargetPos().z)\n        }\n    }\n\n    checkComplete() {\n        if (this.complete) return\n        let complete = true\n        Object.keys(this.neededByType).some((neededType) => {\n            const needed = this.neededByType[neededType] || 0\n            const onSite = (this.onSiteByType[neededType] || []).length\n            if (onSite < needed) {\n                complete = false\n                return true\n            }\n        })\n        if (complete) {\n            this.complete = complete\n            GameState.buildingSites.splice(GameState.buildingSites.indexOf(this), 1)\n            const items = []\n            Object.keys(this.onSiteByType).forEach((collectableType) => items.push(...this.onSiteByType[collectableType]))\n            if (this.isPowerPath) {\n                EventBus.publishEvent(new JobCreateEvent(new CompletePowerPathJob(this.surfaces[0], items)))\n            } else {\n                // TODO implement building spawning\n                console.log('Building site is complete')\n            }\n        }\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { SurfaceType } from '../../../scene/model/map/SurfaceType'\nimport { Building } from '../../model/entity/building/Building'\nimport { CollectableType } from '../../../scene/model/collect/CollectableEntity'\nimport { EventBus } from '../../../event/EventBus'\nimport { SpawnMaterialEvent } from '../../../event/WorldEvents'\nimport { BuildingSite } from '../../../scene/model/BuildingSite'\nimport { EntityDeselected, SurfaceSelectedEvent } from '../../../event/LocalEvents'\n\nexport class SelectFloorPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(3, onBackPanel)\n        const pathItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_LayPath')\n        pathItem.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.surfaceType = SurfaceType.POWER_PATH_SITE\n            selectedSurface.updateTexture()\n            const targetBuilding = GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), Building.TOOLSTATION)\n            if (targetBuilding) {\n                const ores = GameState.dropMaterial(CollectableType.ORE, 2)\n                ores.forEach((ore) => {\n                    EventBus.publishEvent(new SpawnMaterialEvent(ore, targetBuilding.getDropPosition())) // TODO use ToolNullName from cfg\n                })\n            }\n            const site = new BuildingSite(true)\n            site.surfaces.push(selectedSurface)\n            site.neededByType[CollectableType.ORE] = 2\n            GameState.buildingSites.push(site)\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        pathItem.isDisabled = () => GameState.selectedSurface?.hasRubble() // TODO introduce GameState getselected surface\n        EventBus.registerEventListener(SurfaceSelectedEvent.eventKey, () => pathItem.updateState())\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_RemovePath')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { SurfaceJob, SurfaceJobType } from '../../model/job/SurfaceJob'\nimport { EntityDeselected, SurfaceSelectedEvent } from '../../../event/LocalEvents'\n\nexport class SelectRubblePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(2, onBackPanel)\n        const clearRubbleItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_ClearRubble')\n        clearRubbleItem.onClick = () => {\n            EventBus.publishEvent(new JobCreateEvent(new SurfaceJob(SurfaceJobType.CLEAR_RUBBLE, GameState.selectedSurface)))\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        clearRubbleItem.isDisabled = () => !GameState.selectedSurface?.hasRubble()\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        EventBus.registerEventListener(SurfaceSelectedEvent.eventKey, () => clearRubbleItem.updateState())\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { EventBus } from '../../../event/EventBus'\nimport { CollectEvent, SpawnMaterialEvent } from '../../../event/WorldEvents'\nimport { GameState } from '../../model/GameState'\nimport { BuildingSelected } from '../../../event/LocalEvents'\n\nexport class SelectBuildingPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Repair')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PowerOff') // TODO other option is Interface_MenuItem_PowerOn\n        const upgradeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeBuilding')\n        upgradeItem.isDisabled = () => GameState.numOre < 5 || GameState.selectedBuilding?.hasMaxLevel()\n        upgradeItem.updateState() // TODO auto trigger update state when panel is shown\n        upgradeItem.onClick = () => GameState.selectedBuilding?.upgrade()\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteBuilding')\n        EventBus.registerEventListener(BuildingSelected.eventKey, () => upgradeItem.updateState())\n        EventBus.registerEventListener(CollectEvent.eventKey, () => upgradeItem.updateState())\n        EventBus.registerEventListener(SpawnMaterialEvent.eventKey, () => upgradeItem.updateState())\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { Job, JobType } from './Job'\n\nexport class EatJob extends Job {\n\n    constructor() {\n        super(JobType.EAT)\n    }\n\n    getPosition(): Vector3 {\n        return null\n    }\n\n    isInArea(x: number, z: number): boolean {\n        return true\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { EatJob } from '../../model/job/EatJob'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\n\nexport class SelectRaiderPanel extends SelectBasePanel {\n\n    getToolItem: IconPanelButton\n    trainItem: IconPanelButton\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        const feedItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GoFeed')\n        feedItem.isDisabled = () => false\n        feedItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => !r.isDriving() && r.setJob(new EatJob()))\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UnLoadMinifigure')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_MinifigurePickUp')\n        this.getToolItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GetTool')\n        this.getToolItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DropBirdScarer')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeMan')\n        this.trainItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSkill')\n        this.trainItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoFirstPerson')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoSecondPerson')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteMan')\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectVehiclePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(7, onBackPanel)\n    }\n\n}\n","import { Job, JobType } from './Job'\nimport { Vector3 } from 'three'\nimport { TILESIZE } from '../../../main'\n\nexport class TrainJob extends Job {\n\n    target: Vector3\n    skill: string\n\n    constructor(target: Vector3, skill: string) {\n        super(JobType.TRAIN)\n        this.target = target\n        this.skill = skill\n    }\n\n    getPosition(): Vector3 {\n        return new Vector3().copy(this.target)\n    }\n\n    isInArea(x: number, z: number): boolean {\n        return this.getPosition().distanceToSquared(new Vector3(x, this.target.y, z)) < Math.pow(TILESIZE / 2, 2)\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { BuildingUpgraded } from '../../../event/WorldEvents'\nimport { GameState } from '../../model/GameState'\nimport { Building } from '../../model/entity/building/Building'\nimport { TrainJob } from '../../model/job/TrainJob'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { RaiderSkills } from '../../../scene/model/Raider'\n\nexport class TrainRaiderPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainDriver')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainEngineer')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainGeologist')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainPilot')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSailor')\n        const trainDynamite = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainDynamite')\n        trainDynamite.isDisabled = () => !GameState.getBuildingsByType(Building.TOOLSTATION).some((b) => b.type.stats.trainDynamite[b.level]) ||\n            GameState.selectedRaiders.every((r) => r.hasSkill(RaiderSkills.DEMOLITION))\n        trainDynamite.onClick = () => {\n            GameState.getBuildingsByType(Building.TOOLSTATION).some((b) => { // TODO find closest with pathfinding for every raider\n                if (b.type.stats.trainDynamite[b.level]) {\n                    GameState.selectedRaiders.forEach((r) => !r.hasSkill(RaiderSkills.DEMOLITION) && r.setJob(new TrainJob(b.getPosition(), RaiderSkills.DEMOLITION)))\n                    EventBus.publishEvent(new EntityDeselected())\n                    return true\n                }\n            })\n        }\n        EventBus.registerEventListener(BuildingUpgraded.eventKey, () => trainDynamite.updateState())\n    }\n\n}\n","import { Job, JobType } from './Job'\nimport { Vector3 } from 'three'\nimport { JOB_ACTION_RANGE } from '../../../main'\n\nexport class GetToolJob extends Job {\n\n    target: Vector3\n    tool: string\n\n    constructor(target: Vector3, tool: string) {\n        super(JobType.GET_TOOL)\n        this.target = target\n        this.tool = tool\n    }\n\n    getPosition(): Vector3 {\n        return new Vector3().copy(this.target)\n    }\n\n    isInArea(x: number, z: number): boolean {\n        return this.getPosition().distanceToSquared(new Vector3(x, this.target.y, z)) < JOB_ACTION_RANGE\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { GameState } from '../../model/GameState'\nimport { RaiderTools } from '../../../scene/model/Raider'\nimport { IconPanelButton } from './IconPanelButton'\nimport { Building } from '../../model/entity/building/Building'\nimport { GetToolJob } from '../../model/job/GetToolJob'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\n\nexport class GetToolPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(8, onBackPanel)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetDrill', RaiderTools.DRILL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpade', RaiderTools.SHOVEL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetHammer', RaiderTools.HAMMER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpanner', RaiderTools.SPANNER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetFreezerGun', RaiderTools.FREEZERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetLaser', RaiderTools.LASER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetPusherGun', RaiderTools.PUSHERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetBirdScarer', RaiderTools.BIRDSCARER)\n    }\n\n    addGetToolItem(menuItemGroup: string, itemKey: string, tool: string): IconPanelButton {\n        const menuItem = super.addMenuItem(menuItemGroup, itemKey)\n        menuItem.isDisabled = () => GameState.hasBuildingWithUpgrades(Building.TOOLSTATION, 0) &&\n            GameState.selectedRaiders.every((r) => r.hasTool(tool))\n        menuItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => {\n                if (!r.hasTool(tool)) {\n                    const toolstation = GameState.getClosestBuildingByType(r.getPosition(), Building.TOOLSTATION)\n                    r.setJob(new GetToolJob(toolstation.getDropPosition(), tool))\n                }\n            })\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        return menuItem\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { GameState } from '../../model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { RaiderRequested } from '../../../event/WorldEvents'\n\nexport class IconPanelButtonLabel extends BaseElement {\n\n    constructor(parent: BaseElement) {\n        super(parent)\n        this.relX = 4\n        this.relY = 11\n        EventBus.registerEventListener(RaiderRequested.eventKey, () => this.notifyRedraw())\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        const requestedRaiders = GameState.requestedRaiders\n        if (!requestedRaiders) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(requestedRaiders.toString(), this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { EventBus } from '../../../event/EventBus'\nimport { BuildingSelected, EntityDeselected, RaiderSelected, SurfaceSelectedEvent, VehicleSelected } from '../../../event/LocalEvents'\nimport { EntityAddedEvent, EntityRemovedEvent, EntityType, RaiderRequested } from '../../../event/WorldEvents'\nimport { GameState } from '../../model/GameState'\nimport { Building } from '../../model/entity/building/Building'\nimport { BuildingPanel } from './BuildingPanel'\nimport { SmallVehiclePanel } from './SmallVehiclePanel'\nimport { LargeVehiclePanel } from './LargeVehiclePanel'\nimport { SelectWallPanel } from './SelectWallPanel'\nimport { SelectFloorPanel } from './SelectFloorPanel'\nimport { SelectRubblePanel } from './SelectRubblePanel'\nimport { SelectBuildingPanel } from './SelectBuildingPanel'\nimport { SelectRaiderPanel } from './SelectRaiderPanel'\nimport { SelectVehiclePanel } from './SelectVehiclePanel'\nimport { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { TrainRaiderPanel } from './TrainRaiderPanel'\nimport { GetToolPanel } from './GetToolPanel'\nimport { IconPanelButtonLabel } from './IconPanelButtonLabel'\n\nexport class MainPanel extends Panel {\n\n    subPanels: IconSubPanel[] = []\n    mainPanel: IconSubPanel // don't use root itself, since sub panel must be decoupled from (animated) main panel position\n\n    constructor() {\n        super()\n        this.relX = this.xOut = 640 - 16\n        this.xIn = 640 + 95\n        this.relY = this.yOut = this.yIn = 9\n        this.movedIn = false\n        this.mainPanel = this.addSubPanel(new IconSubPanel(4))\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n\n        const buildingPanel = this.addSubPanel(new BuildingPanel(this.mainPanel))\n        const smallVehiclePanel = this.addSubPanel(new SmallVehiclePanel(this.mainPanel))\n        const largeVehiclePanel = this.addSubPanel(new LargeVehiclePanel(this.mainPanel))\n        const selectWallPanel = this.addSubPanel(new SelectWallPanel(this.mainPanel))\n        const selectFloorPanel = this.addSubPanel(new SelectFloorPanel(this.mainPanel))\n        const selectRubblePanel = this.addSubPanel(new SelectRubblePanel(this.mainPanel))\n        const selectBuildingPanel = this.addSubPanel(new SelectBuildingPanel(this.mainPanel))\n        const selectRaiderPanel = this.addSubPanel(new SelectRaiderPanel(this.mainPanel))\n        const trainRaiderPanel = this.addSubPanel(new TrainRaiderPanel(selectRaiderPanel))\n        selectRaiderPanel.trainItem.onClick = () => selectRaiderPanel.toggleState(() => trainRaiderPanel.toggleState())\n        const getToolPanel = this.addSubPanel(new GetToolPanel(selectRaiderPanel))\n        selectRaiderPanel.getToolItem.onClick = () => selectRaiderPanel.toggleState(() => getToolPanel.toggleState())\n        const selectVehiclePanel = this.addSubPanel(new SelectVehiclePanel(this.mainPanel))\n        const teleportRaider = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_TeleportMan')\n        teleportRaider.isDisabled = () => GameState.getBuildingsByType(Building.TOOLSTATION, Building.TELEPORT_PAD).length < 1\n            || GameState.raiders.length >= GameState.getMaxRaiders()\n        teleportRaider.updateState() // TODO auto call this for each button, when icon panel is shown\n        EventBus.registerEventListener(EntityAddedEvent.eventKey, (event: EntityAddedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.type === EntityType.BUILDING || event.type === EntityType.RAIDER) teleportRaider.updateState()\n        })\n        EventBus.registerEventListener(EntityRemovedEvent.eventKey, (event: EntityRemovedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.type === EntityType.BUILDING || event.type === EntityType.RAIDER) teleportRaider.updateState()\n        })\n        teleportRaider.onClick = () => EventBus.publishEvent(new RaiderRequested(GameState.requestedRaiders + 1))\n        // TODO add decrease requested raider spawn option (needs right click for gui elements)\n        teleportRaider.addChild(new IconPanelButtonLabel(teleportRaider))\n        const buildingItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildBuilding')\n        buildingItem.disabled = false\n        buildingItem.onClick = () => this.mainPanel.toggleState(() => buildingPanel.toggleState())\n        const smallVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildSmallVehicle')\n        smallVehicleItem.disabled = false\n        smallVehicleItem.onClick = () => this.mainPanel.toggleState(() => smallVehiclePanel.toggleState())\n        const largeVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildLargeVehicle')\n        largeVehicleItem.disabled = false\n        largeVehicleItem.onClick = () => this.mainPanel.toggleState(() => largeVehiclePanel.toggleState())\n        EventBus.registerEventListener(SurfaceSelectedEvent.eventKey, (event: SurfaceSelectedEvent) => {\n            const surface = event.surface\n            if (surface.surfaceType.floor) {\n                if (surface.hasRubble()) {\n                    this.selectSubPanel(selectRubblePanel)\n                } else {\n                    this.selectSubPanel(selectFloorPanel)\n                }\n            } else {\n                this.selectSubPanel(selectWallPanel)\n            }\n        })\n        EventBus.registerEventListener(EntityDeselected.eventKey, () => this.selectSubPanel(this.mainPanel))\n        EventBus.registerEventListener(BuildingSelected.eventKey, () => this.selectSubPanel(selectBuildingPanel))\n        EventBus.registerEventListener(RaiderSelected.eventKey, () => this.selectSubPanel(selectRaiderPanel))\n        EventBus.registerEventListener(VehicleSelected.eventKey, () => this.selectSubPanel(selectVehiclePanel))\n    }\n\n    addSubPanel<T extends IconSubPanel>(childPanel: T): T {\n        this.addChild(childPanel)\n        this.subPanels.push(childPanel)\n        return childPanel\n    }\n\n    selectSubPanel(targetPanel: IconSubPanel) {\n        this.subPanels.forEach((subPanel) => subPanel !== targetPanel && subPanel.setMovedIn(true))\n        targetPanel.setMovedIn(false)\n    }\n\n}\n","import { BaseElement } from './BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { Button } from './Button'\n\nexport class ToggleButton extends Button {\n\n    toggleState: boolean = false\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent, btnCfg)\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = (this.pressed && this.hover) || this.toggleState\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => updated = child.checkHover(cx, cy) || updated)\n        return updated\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const isPressed = this.isInRect(cx, cy) || this.toggleState\n        let updated = this.pressed !== isPressed\n        this.pressed = isPressed\n        this.children.forEach((child) => updated = child.checkClick(cx, cy) || updated)\n        return updated\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = inRect && this.pressed\n        if (updated) {\n            this.toggleState = !this.toggleState\n            this.onClick()\n            this.pressed = updated && this.toggleState\n            this.hover = inRect\n        }\n        this.children.forEach((child) => updated = child.checkRelease(cx, cy) || updated)\n        return updated\n    }\n\n    release(): boolean {\n        return false\n    }\n\n}\n\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ToggleButton } from '../base/ToggleButton'\nimport { ButtonTopCfg } from './ButtonTopCfg'\n\nexport class TopPanel extends Panel {\n\n    btnCallToArms: ToggleButton\n    btnOptions: Button\n    btnPriorities: ToggleButton\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonTopCfg) {\n        super(panelCfg)\n        this.btnCallToArms = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelCallToArms))\n        this.btnOptions = this.addChild(new Button(this, buttonsCfg.panelButtonTopPanelOptions))\n        this.btnPriorities = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelPriorities))\n    }\n\n}\n\n","import { Button } from '../base/Button'\nimport { WorldEvent } from '../../../event/WorldEvents'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\nimport { InfoButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { InfoDockPanel } from './InfoDockPanel'\nimport { EventBus } from '../../../event/EventBus'\nimport { WorldLocationEvent } from '../../../event/WorldLocationEvent'\nimport { NATIVE_FRAMERATE } from '../../../main'\n\nexport class InfoDockButton extends Button {\n\n    messages: WorldEvent[] = [] // newest message first\n    text: string = null\n    animationTimeout = null\n    animationSpeedX = 0.5\n    animationSpeedY = 1\n\n    constructor(parent: InfoDockPanel, infoMessagesEntryConfig: InfoMessagesEntryConfig, eventKey: string) {\n        super(parent, new InfoButtonCfg(infoMessagesEntryConfig.buttonImageFilename))\n        this.text = infoMessagesEntryConfig.message\n        this.hidden = true\n\n        this.onClick = () => {\n            if (this.messages.length < 1) return\n            parent.buttonClicked(this)\n        }\n\n        EventBus.registerEventListener(eventKey, (event: WorldLocationEvent) => {\n            this.hidden = false\n            while (this.messages.length >= 9) this.messages.pop()\n            this.messages.unshift(event)\n            parent.showButton(this)\n        })\n    }\n\n    slideToTarget(targetX: number, targetY: number): Promise<void> {\n        return new Promise<void>((resolve) => this.updateAnimation(targetX, targetY, resolve))\n    }\n\n    private updateAnimation(targetX: number, targetY: number, onDone: () => any) { // TODO refactor: almost equal with code for Panel\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= this.animationSpeedX && Math.abs(diffY) <= this.animationSpeedY) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * this.animationSpeedX)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * this.animationSpeedY)\n            const that = this\n            this.animationTimeout = setTimeout(() => that.updateAnimation(targetX, targetY, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw() // FIXME performance: sync redraw for all animations on this layer (if hasAnimation, use requestAnimationFrame)\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.hidden) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.messages.length.toString(), this.x + 2, this.y + this.height / 2 + 2)\n    }\n\n}\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ButtonInfoDockCfg } from './ButtonInfoDockCfg'\nimport { InfoMessagesConfig } from './InfoMessagesConfig'\nimport { GenericDeathEvent, GenericMonsterEvent, LandslideEvent, PowerDrainEvent, RaiderDiscoveredEvent, SlugEmergeEvent, UnderAttackEvent } from '../../../event/WorldLocationEvent'\nimport { InfoDockButton } from './InfoDockButton'\nimport { InformationPanel } from './InformationPanel'\n\nexport class InfoDockPanel extends Panel {\n\n    stackButtons: InfoDockButton[] = []\n    informationPanel: InformationPanel = null\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonInfoDockCfg, infoMessagesConfig: InfoMessagesConfig, informationPanel: InformationPanel) {\n        super(panelCfg)\n        this.informationPanel = informationPanel\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockGoto)).onClick = () => this.gotoLatestMessage()\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockClose)).onClick = () => this.dropLatestMessage()\n\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericDeath, GenericDeathEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericMonster, GenericMonsterEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoCrystalFound, UnderAttackEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoUnderAttack, UnderAttackEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoLandslide, LandslideEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoPowerDrain, PowerDrainEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoSlugEmerge, SlugEmergeEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoFoundMinifigure, RaiderDiscoveredEvent.eventKey))\n    }\n\n    private gotoLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const btn = this.stackButtons[0]\n        if (btn.messages.length < 1) return\n        const msg = btn.messages[0] as LandslideEvent\n        console.log('TODO force move camera to: ' + msg.location.toArray()) // TODO force move camera\n    }\n\n    private dropLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const button = this.stackButtons[0]\n        if (button.messages.length < 1) return\n        button.messages.shift()\n        if (button.messages.length < 1) {\n            button.hidden = true\n            this.informationPanel.setMovedIn(true)\n            this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n            this.slideStackIntoPosition().then()\n        }\n        button.notifyRedraw()\n    }\n\n    showButton(button: InfoDockButton) {\n        if (this.stackButtons.includes(button)) {\n            button.notifyRedraw()\n        } else {\n            this.slideInButton(button)\n        }\n    }\n\n    private slideInButton(button: InfoDockButton) {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        const targetY = -this.stackButtons.map(b => b.height).reduce((prev, cur) => prev + cur, 0)\n        this.stackButtons.push(button)\n        button.relX = -button.width\n        button.relY = targetY - button.height\n        button.updatePosition()\n        button.slideToTarget(0, targetY).then(() => this.stackButtons.forEach(btn => btn.disabled = false))\n    }\n\n    buttonClicked(button: InfoDockButton) {\n        if (button !== this.stackButtons[0]) {\n            this.pushFirst(button)\n        } else {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.toggleState()\n        }\n    }\n\n    private pushFirst(button: InfoDockButton) {\n        this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n        this.stackButtons.unshift(button)\n        this.slideStackIntoPosition().then(() => {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.setMovedIn(false)\n        })\n    }\n\n    private slideStackIntoPosition() {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        let relY = 0\n        const promises = this.stackButtons.map(btn => {\n            const p = btn.slideToTarget(0, relY)\n            relY -= btn.height\n            return p\n        })\n        return new Promise<void>((resolve) => {\n            Promise.all(promises).then(() => {\n                this.stackButtons.forEach(btn => btn.disabled = false)\n                resolve()\n            })\n        })\n    }\n\n}\n\n","import { BaseConfig } from './BaseConfig'\n\nexport class PanelsCfg extends BaseConfig {\n\n    panelRadar: PanelCfg = null\n    panelRadarFill: PanelCfg = null\n    panelRadarOverlay: PanelCfg = null\n    panelMessages: PanelCfg = null\n    panelMessagesSide: PanelCfg = null\n    panelCrystalSideBar: PanelCfg = null\n    panelTopPanel: PanelCfg = null\n    panelInformation: PanelCfg = null\n    panelPriorityList: PanelCfg = null\n    panelCameraControl: PanelCfg = null\n    panelInfoDock: PanelCfg = null\n    panelEncyclopedia: PanelCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new PanelCfg(cfgValue)\n    }\n}\n\nexport class PanelCfg {\n\n    filename: string\n    xOut: number\n    yOut: number\n    xIn: number\n    yIn: number\n\n    constructor(cfgValue: any) {\n        [this.filename, this.xOut, this.yOut, this.xIn, this.yIn] = cfgValue\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { Button } from '../base/Button'\nimport { GameState } from '../../model/GameState'\nimport { LevelPrioritiesEntryConfig } from '../../../cfg/LevelsCfg'\nimport { ButtonPriorityListCfg } from './ButtonPriorityListCfg'\nimport { PriorityButtonsConfig } from './PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from './PriorityPositionsEntry'\n\nexport class PriorityListPanel extends Panel {\n\n    prioPositions: PriorityPositionsEntry[] = []\n    prioByName: Map<string, Button> = new Map()\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonPriorityListCfg, pos: PriorityPositionsEntry[], cfg: PriorityButtonsConfig) {\n        super(panelCfg)\n        buttonsCfg.panelButtonPriorityListDisable.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.toggle(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        buttonsCfg.panelButtonPriorityListUpOne.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.upOne(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        this.addChild(new Button(this, buttonsCfg.panelButtonPriorityListReset)).onClick = () => this.reset()\n\n        this.prioPositions = pos\n        this.prioByName.set('aiPriorityTrain'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityTrain)))\n        this.prioByName.set('aiPriorityGetIn'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityGetIn)))\n        this.prioByName.set('aiPriorityCrystal'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityCrystal)))\n        this.prioByName.set('aiPriorityOre'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityOre)))\n        this.prioByName.set('aiPriorityRepair'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityRepair)))\n        this.prioByName.set('aiPriorityClearing'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityClearing)))\n        this.prioByName.set('aiPriorityDestruction'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityDestruction)))\n        this.prioByName.set('aiPriorityConstruction'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityConstruction)))\n        this.prioByName.set('aiPriorityReinforce'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityReinforce)))\n        this.prioByName.set('aiPriorityRecharge'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityRecharge)))\n    }\n\n    reset() {\n        GameState.priorityList.reset()\n        this.setList(GameState.priorityList.current)\n    }\n\n    private setList(priorityList: LevelPrioritiesEntryConfig[]) {\n        this.prioByName.forEach((btn) => btn.hidden = true)\n        let index = 0\n        let updated = false\n        priorityList.forEach(cfg => {\n            const prioButton: Button = this.prioByName.get(cfg.key.toLowerCase())\n            if (prioButton) {\n                updated = updated || prioButton.hidden || prioButton.disabled !== !cfg.enabled\n                prioButton.hidden = false\n                prioButton.disabled = !cfg.enabled\n                prioButton.relX = this.prioPositions[index].x\n                prioButton.relY = this.prioPositions[index].y\n                prioButton.updatePosition()\n                const btnIndex = index\n                prioButton.onClick = () => {\n                    GameState.priorityList.pushToTop(btnIndex)\n                    this.setList(GameState.priorityList.current)\n                }\n                index++\n            }\n        })\n        if (updated) this.notifyRedraw()\n    }\n\n}\n\n","export class InfoMessagesEntryConfig {\n\n    message: string = null\n    buttonImageFilename: string = null\n    sfx: string = null\n    timing: string = null\n    flag: string = null\n\n    constructor(cfgValue: any) {\n        [this.message, this.buttonImageFilename, this.sfx, this.timing, this.flag] = cfgValue\n        this.message = this.message.replace(/_/g, ' ')\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\n\nexport class InfoMessagesConfig extends BaseConfig {\n\n    infoGenericDeath: InfoMessagesEntryConfig = null\n    infoGenericMonster: InfoMessagesEntryConfig = null\n    infoCrystalFound: InfoMessagesEntryConfig = null\n    infoUnderAttack: InfoMessagesEntryConfig = null\n    infoLandslide: InfoMessagesEntryConfig = null\n    infoPowerDrain: InfoMessagesEntryConfig = null\n    infoSlugEmerge: InfoMessagesEntryConfig = null\n    infoFoundMinifigure: InfoMessagesEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new InfoMessagesEntryConfig(cfgValue)\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class InformationPanel extends Panel {\n\n    font: BitmapFont = null\n    textImage = null\n\n    constructor(panelCfg: PanelCfg) {\n        super(panelCfg)\n        this.font = ResourceManager.getBitmapFont('Interface/Fonts/Font5_Hi.bmp')\n    }\n\n    setText(text?: string) {\n        this.textImage = text ? this.font.createTextImage(text, this.img.width - 80) : null\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.textImage) context.drawImage(this.textImage, this.x + (this.img.width - this.textImage.width) / 2, this.y + 12)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class PriorityButtonsConfig extends BaseConfig {\n\n    aiPriorityTrain: ButtonCfg = null\n    aiPriorityGetIn: ButtonCfg = null\n    aiPriorityCrystal: ButtonCfg = null\n    aiPriorityOre: ButtonCfg = null\n    aiPriorityRepair: ButtonCfg = null\n    aiPriorityClearing: ButtonCfg = null\n    aiPriorityDestruction: ButtonCfg = null\n    aiPriorityConstruction: ButtonCfg = null\n    aiPriorityReinforce: ButtonCfg = null\n    aiPriorityRecharge: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): ButtonCfg {\n        return {\n            buttonType: cfgValue[0],\n            normalFile: cfgValue[1],\n            highlightFile: cfgValue[1],\n            pressedFile: cfgValue[2],\n            disabledFile: cfgValue[3],\n        }\n    }\n\n}\n","export class PriorityPositionsEntry {\n\n    x: number\n    y: number\n\n    constructor(cfgValue: any) {\n        [this.x, this.y] = cfgValue\n    }\n\n}\n","export class TextInfoMessageEntryConfig {\n\n    text: string\n    imageFilename: string\n    sfxName: string\n\n    textImage\n    infoImage\n\n    constructor(cfgValue: any) {\n        [this.text, this.imageFilename, this.sfxName] = cfgValue\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\n\nexport class TextInfoMessageConfig extends BaseConfig {\n\n    textCrystalFound: TextInfoMessageEntryConfig = null\n    textSpaceToContinue: TextInfoMessageEntryConfig = null\n    textCavernDiscovered: TextInfoMessageEntryConfig = null\n    textOreFound: TextInfoMessageEntryConfig = null\n    textAirSupplyLow: TextInfoMessageEntryConfig = null\n    textAirSupplyRunningOut: TextInfoMessageEntryConfig = null\n    textGameCompleted: TextInfoMessageEntryConfig = null\n    textManTrained: TextInfoMessageEntryConfig = null\n    textUnitUpgraded: TextInfoMessageEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new TextInfoMessageEntryConfig(cfgValue)\n    }\n\n}\n","import { ScaledLayer } from '../../screen/ScreenLayer'\nimport { Panel } from '../gui/base/Panel'\nimport { BaseElement } from '../gui/base/BaseElement'\nimport { POINTER_EVENT } from '../../event/EventManager'\n\nexport class GuiBaseLayer extends ScaledLayer {\n\n    rootElement: BaseElement = new BaseElement()\n    panels: Panel[] = []\n\n    constructor() {\n        super()\n        this.rootElement.notifyRedraw = () => this.redraw()\n        this.onRedraw = (context: CanvasRenderingContext2D) => {\n            context.clearRect(0, 0, context.canvas.width, context.canvas.height)\n            this.rootElement.onRedraw(context)\n        }\n    }\n\n    addPanel<T extends Panel>(panel: T): T {\n        this.rootElement.addChild(panel)\n        this.panels.push(panel)\n        return panel\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n        const hit = this.context && this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n        if (hit) {\n            event.preventDefault()\n            if (eventEnum === POINTER_EVENT.MOVE) {\n                this.rootElement.checkHover(sx, sy)\n            } else if (eventEnum === POINTER_EVENT.DOWN) {\n                this.rootElement.checkClick(sx, sy)\n            } else if (eventEnum === POINTER_EVENT.UP) {\n                this.rootElement.checkRelease(sx, sy)\n            }\n        } else if (eventEnum === POINTER_EVENT.MOVE) {\n            this.rootElement.release()\n        }\n        return hit\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        return !this.context || this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n    }\n\n}\n","import { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../gui/base/Panel'\nimport { RadarPanel } from '../gui/radar/RadarPanel'\nimport { MessagePanel } from '../gui/messagepanel/MessagePanel'\nimport { PanelCrystalSideBar } from '../gui/sidebar/PanelCrystalSideBar'\nimport { MainPanel } from '../gui/main/MainPanel'\nimport { TopPanel } from '../gui/toppanel/TopPanel'\nimport { InfoDockPanel } from '../gui/infodock/InfoDockPanel'\nimport { PanelsCfg } from '../../cfg/PanelsCfg'\nimport { ButtonsCfg } from '../../cfg/ButtonsCfg'\nimport { PriorityListPanel } from '../gui/toppanel/PriorityListPanel'\nimport { InfoMessagesConfig } from '../gui/infodock/InfoMessagesConfig'\nimport { InformationPanel } from '../gui/infodock/InformationPanel'\nimport { PriorityButtonsConfig } from '../gui/toppanel/PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from '../gui/toppanel/PriorityPositionsEntry'\nimport { TextInfoMessageConfig } from '../gui/messagepanel/TextInfoMessageConfig'\nimport { GuiBaseLayer } from './GuiBaseLayer'\n\nexport class GuiMainLayer extends GuiBaseLayer {\n\n    panelRadar: RadarPanel\n    panelMessages: MessagePanel\n    panelMessagesSide: Panel\n    panelCrystalSideBar: PanelCrystalSideBar\n    panelMain: MainPanel\n    panelTopPanel: TopPanel\n    panelInformation: InformationPanel\n    panelPriorityList: PriorityListPanel\n    panelCameraControl: Panel\n    panelInfoDock: InfoDockPanel\n    panelEncyclopedia: Panel\n    onOptionsShow: () => any = () => console.log('show options triggered')\n\n    constructor() {\n        super()\n        const panelsCfg = new PanelsCfg(ResourceManager.cfg('Panels640x480'))\n        const buttonsCfg = new ButtonsCfg(ResourceManager.cfg('Buttons640x480'))\n        // created in reverse order compared to cfg, earlier in cfg means higher z-value // TODO add some z layering at least to panels\n        this.panelEncyclopedia = this.addPanel(new Panel(panelsCfg.panelEncyclopedia))\n        this.panelInformation = this.addPanel(new InformationPanel(panelsCfg.panelInformation))\n        this.panelInfoDock = this.addPanel(new InfoDockPanel(panelsCfg.panelInfoDock, buttonsCfg.panelInfoDock, new InfoMessagesConfig(ResourceManager.cfg('InfoMessages')), this.panelInformation))\n        this.panelCameraControl = this.addPanel(new Panel(panelsCfg.panelCameraControl))\n        const priorityButtonsConfig = new PriorityButtonsConfig(ResourceManager.cfg('PriorityImages'))\n        const priorityPositionsConfig = Object.values(ResourceManager.cfg('PrioritiesImagePositions')).map(cfgValue => new PriorityPositionsEntry(cfgValue))\n        this.panelPriorityList = this.addPanel(new PriorityListPanel(panelsCfg.panelPriorityList, buttonsCfg.panelPriorityList, priorityPositionsConfig, priorityButtonsConfig))\n        this.panelTopPanel = this.addPanel(new TopPanel(panelsCfg.panelTopPanel, buttonsCfg.panelTopPanel))\n        this.panelMain = this.addPanel(new MainPanel())\n        this.panelCrystalSideBar = this.addPanel(new PanelCrystalSideBar(panelsCfg.panelCrystalSideBar, buttonsCfg.panelCrystalSideBar))\n        this.panelMessagesSide = this.addPanel(new Panel(panelsCfg.panelMessagesSide))\n        this.panelMessages = this.addPanel(new MessagePanel(panelsCfg.panelMessages, new TextInfoMessageConfig(ResourceManager.cfg('TextMessagesWithImages'))))\n        this.panelRadar = this.addPanel(new RadarPanel(panelsCfg.panelRadar, panelsCfg.panelRadarFill, panelsCfg.panelRadarOverlay, buttonsCfg.panelRadar))\n        // link panels\n        this.panelTopPanel.btnOptions.onClick = () => this.onOptionsShow()\n        this.panelTopPanel.btnPriorities.onClick = () => {\n            if (this.panelTopPanel.btnPriorities.toggleState) {\n                this.panelMain.setMovedIn(true, () => this.panelPriorityList.setMovedIn(false))\n            } else {\n                this.panelPriorityList.setMovedIn(true, () => this.panelMain.setMovedIn(false))\n            }\n        }\n    }\n\n    reset() {\n        // FIXME reset GUI including all panels\n        this.panelPriorityList.reset()\n    }\n\n}\n","import { EventBus } from '../event/EventBus'\nimport { JobCreateEvent, JobDeleteEvent } from '../event/WorldEvents'\nimport { JobState, PublicJob } from './model/job/Job'\nimport { GameState } from './model/GameState'\nimport { Vector3 } from 'three'\nimport { Raider } from '../scene/model/Raider'\nimport { WorldManager } from '../scene/WorldManager'\nimport { JOB_SCHEDULE_INTERVAL } from '../main'\nimport { Building } from './model/entity/building/Building'\nimport { GetToolJob } from './model/job/GetToolJob'\nimport { TrainJob } from './model/job/TrainJob'\n\nexport class Supervisor {\n\n    worldMgr: WorldManager\n    jobs: PublicJob[] = []\n    assignInterval = null\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        EventBus.registerEventListener(JobCreateEvent.eventKey, (event: JobCreateEvent) => {\n            this.jobs.push(event.job)\n        })\n        EventBus.registerEventListener(JobDeleteEvent.eventKey, (event: JobDeleteEvent) => {\n            event.job.cancel()\n        })\n    }\n\n    start() {\n        stop()\n        this.assignInterval = setInterval(this.assignJobs.bind(this), JOB_SCHEDULE_INTERVAL)\n    }\n\n    stop() {\n        if (this.assignInterval) clearInterval(this.assignInterval)\n        this.assignInterval = null\n        GameState.raiders.forEach((r) => r.resetWorkInterval())\n        GameState.raidersUndiscovered.forEach((r) => r.resetWorkInterval())\n        GameState.vehicles.forEach((v) => v.resetWorkInterval())\n        GameState.vehiclesUndiscovered.forEach((v) => v.resetWorkInterval())\n    }\n\n    assignJobs() {\n        const availableJobs: PublicJob[] = []\n        this.jobs = this.jobs.filter((j) => {\n            const result = j.jobstate === JobState.OPEN\n            if (result && j.fulfiller.length < 1) availableJobs.push(j)\n            return result\n        })\n        if (availableJobs.length < 1) return\n        availableJobs.sort((left, right) => {\n            return Math.sign(GameState.priorityList.getPriority(left) - GameState.priorityList.getPriority(right))\n        })\n        const unemployedRaider = GameState.raiders.filter((r) => !r.job)\n        availableJobs.forEach((job) => { // TODO refactor: better use estimated time to complete as metric\n            let closestRaider: Raider = null\n            let closestRaiderIndex: number = null\n            let minDistance: number = null\n            let closestToolRaider: Raider = null\n            let closestToolRaiderIndex: number = null\n            let minToolDistance: number = null\n            let closestToolstationPosition: Vector3 = null\n            let closestNeededTool: string = null\n            let closestTrainingRaider: Raider = null\n            let closestTrainingRaiderIndex: number = null\n            let minTrainingDistance: number = null\n            let closestTrainingLocation: Vector3 = null\n            let closestNeededTraining: string = null\n            unemployedRaider.forEach((raider, index) => {\n                const raiderPosition = raider.getPosition()\n                if (job.isQualified(raider)) {\n                    const dist = job.getPosition().distanceToSquared(raiderPosition)\n                    if (minDistance === null || dist < minDistance) {\n                        closestRaider = raider\n                        closestRaiderIndex = index\n                        minDistance = dist\n                    }\n                } else {\n                    const neededTool = job.isQualifiedWithTool(raider)\n                    if (neededTool) {\n                        const closestToolstation = GameState.getClosestBuildingByType(raiderPosition, Building.TOOLSTATION)\n                        if (closestToolstation) {\n                            const toolstationPosition = closestToolstation.getPosition()\n                            const dist = toolstationPosition.distanceToSquared(raiderPosition)\n                            if (minToolDistance === null || dist < minToolDistance) {\n                                closestToolRaider = raider\n                                closestToolRaiderIndex = index\n                                minToolDistance = dist\n                                closestToolstationPosition = toolstationPosition\n                                closestNeededTool = neededTool\n                            }\n                        }\n                    } else {\n                        const neededTraining = job.isQualifiedWithTraining(raider)\n                        if (neededTraining) {\n                            const trainingLocation = GameState.getClosestTrainingSite(raiderPosition, neededTraining).getPosition()\n                            if (trainingLocation) {\n                                const dist = trainingLocation.distanceToSquared(raiderPosition)\n                                if (minTrainingDistance === null || dist < minTrainingDistance) {\n                                    closestTrainingRaider = raider\n                                    closestTrainingRaiderIndex = index\n                                    minTrainingDistance = dist\n                                    closestTrainingLocation = trainingLocation\n                                    closestNeededTraining = neededTraining\n                                }\n                            }\n                        }\n                    }\n                }\n            })\n            if (closestRaider) {\n                closestRaider.setJob(job)\n                unemployedRaider.splice(closestRaiderIndex, 1)\n            } else if (closestToolRaider) {\n                closestToolRaider.setJob(new GetToolJob(closestToolstationPosition, closestNeededTool), job)\n                unemployedRaider.splice(closestToolRaiderIndex, 1)\n            } else if (closestTrainingRaider) {\n                closestTrainingRaider.setJob(new TrainJob(closestTrainingLocation, closestNeededTraining), job)\n                unemployedRaider.splice(closestTrainingRaiderIndex, 1)\n            }\n        })\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { BriefingPanelCfg } from '../../../cfg/BriefingPanelCfg'\nimport { MessagePanel } from '../messagepanel/MessagePanel'\nimport { ObjectiveImageCfg } from '../../../cfg/ObjectiveImageCfg'\n\nexport class BriefingPanel extends Panel {\n\n    messagePanel: MessagePanel\n    cfg: BriefingPanelCfg = null\n    imgTitle: HTMLCanvasElement = null\n    titleRelX: number = 0\n    titleRelY: number = 0\n    btnNext: Button = null\n    btnBack: Button = null\n    imgBack: HTMLCanvasElement = null\n    imgParagraph: HTMLCanvasElement[] = []\n    paragraph: number = 0\n\n    constructor(cfg: BriefingPanelCfg) {\n        super()\n        this.cfg = cfg\n        this.imgTitle = cfg.titleFont.createTextImage(cfg.title)\n        this.titleRelX = cfg.titleWindow.x + (cfg.titleWindow.w - this.imgTitle.width) / 2\n        this.titleRelY = cfg.titleWindow.y\n        this.btnNext = this.addChild(new Button(this, cfg.nextButtonCfg))\n        this.btnNext.onClick = () => this.nextParagraph()\n        this.btnBack = this.addChild(new Button(this, cfg.backButtonCfg))\n        this.btnBack.onClick = () => this.prevParagraph()\n        this.hidden = true\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.imgBack = ResourceManager.getImageOrNull(objectiveBackImgCfg.filename)\n        this.relX = objectiveBackImgCfg.x\n        this.relY = objectiveBackImgCfg.y\n        this.width = this.imgBack.width\n        this.height = this.imgBack.height\n        this.updatePosition()\n        this.imgParagraph = objectiveText.split('\\\\a').map(txt => this.cfg.textFont.createTextImage(txt, this.cfg.textWindow.w, false))\n    }\n\n    setParagraph(paragraph: number) {\n        if (paragraph < 0) return\n        if (paragraph > this.imgParagraph.length - 1) {\n            this.hide()\n            this.notifyRedraw()\n            return\n        }\n        this.paragraph = paragraph\n        this.btnNext.hidden = this.paragraph >= this.imgParagraph.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.notifyRedraw()\n    }\n\n    nextParagraph() {\n        this.setParagraph(this.paragraph + 1)\n    }\n\n    prevParagraph() {\n        this.setParagraph(this.paragraph - 1)\n    }\n\n    show() {\n        super.show()\n        this.setParagraph(0)\n        this.btnNext.hidden = this.paragraph >= this.imgParagraph.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.messagePanel?.setMessage(this.messagePanel.msgSpaceToContinue, 0)\n    }\n\n    hide() {\n        super.hide()\n        this.messagePanel?.unsetMessage(this.messagePanel.msgSpaceToContinue)\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.imgBack) context.drawImage(this.imgBack, this.x, this.y)\n        if (this.imgTitle) context.drawImage(this.imgTitle, this.x + this.titleRelX, this.y + this.titleRelY)\n        if (this.imgParagraph && this.imgParagraph[this.paragraph]) context.drawImage(this.imgParagraph[this.paragraph], this.x + this.cfg.textWindow.x, this.y + this.cfg.textWindow.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuCycleItemCfg } from '../../../cfg/MenuCycleItemCfg'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuCycleItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLabelOnNormal: HTMLCanvasElement // TODO only toggle state with clicks on label\n    imgLabelOffNormal: HTMLCanvasElement // TODO use button?\n    imgLabelOnHover: HTMLCanvasElement\n    imgLabelOffHover: HTMLCanvasElement\n\n    labelX: number = 0\n    state: boolean = false\n\n    constructor(parent: MenuLayer, itemCfg: MenuCycleItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.labelX = itemCfg.width\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.imgLabelOffNormal = parent.loFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOffHover = parent.hiFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOnNormal = parent.loFont.createTextImage(itemCfg.labelOn)\n        this.imgLabelOnHover = parent.hiFont.createTextImage(itemCfg.labelOn)\n        this.width = itemCfg.width + Math.max(this.imgLabelOnHover.width, this.imgLabelOffHover.width)\n        this.height = this.imgTextNormal.height\n    }\n\n    onClick() {\n        this.state = !this.state\n        console.log('TODO: cycle item clicked; state: ' + this.state)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        let imgLabel = this.state ? this.imgLabelOnNormal : this.imgLabelOffNormal\n        if (this.hover) {\n            img = this.imgTextHover\n            imgLabel = this.state ? this.imgLabelOnHover : this.imgLabelOffHover\n        }\n        context.drawImage(img, this.x, this.y)\n        context.drawImage(imgLabel, this.x + this.labelX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuSliderItemCfg } from '../../../cfg/MenuSliderItemCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { BaseButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuSliderItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLeft: HTMLCanvasElement\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgRight: HTMLCanvasElement\n    sliderX: number = 0\n    min: number = 0\n    max: number = 1\n    value: number = 0\n    onValueChanged: (value: number) => any = (value) => console.log('value changed to: ' + value)\n\n    constructor(parent: MenuLayer, itemCfg: MenuSliderItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.sliderX = itemCfg.width\n        this.imgLeft = ResourceManager.getImage(itemCfg.imgLeft)\n        this.imgNormal = ResourceManager.getImage(itemCfg.imgOff)\n        this.imgHover = ResourceManager.getImage(itemCfg.imgOn)\n        this.imgRight = ResourceManager.getImage(itemCfg.imgRight)\n        const leftBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        leftBtn.imgNormal = ResourceManager.getImage(itemCfg.btnLeftNormal)\n        leftBtn.imgHover = ResourceManager.getImage(itemCfg.btnLeftHover)\n        leftBtn.relX = this.sliderX - this.imgLeft.width - leftBtn.imgHover.width\n        leftBtn.width = leftBtn.imgHover.width\n        leftBtn.height = leftBtn.imgHover.height\n        leftBtn.updatePosition()\n        leftBtn.onClick = () => {\n            if (this.value > this.min) {\n                this.value--\n                this.onValueChanged(this.value)\n            }\n        }\n        const rightBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        rightBtn.imgNormal = ResourceManager.getImage(itemCfg.btnRightNormal)\n        rightBtn.imgHover = ResourceManager.getImage(itemCfg.btnRightHover)\n        rightBtn.relX = this.sliderX + this.imgNormal.width + this.imgRight.width * 2\n        rightBtn.width = rightBtn.imgHover.width\n        rightBtn.height = rightBtn.imgHover.height\n        rightBtn.updatePosition()\n        rightBtn.onClick = () => {\n            if (this.value < this.max) {\n                this.value++\n                this.onValueChanged(this.value)\n            }\n        }\n        this.width = itemCfg.width + leftBtn.imgHover.width + this.imgLeft.width + this.imgNormal.width + this.imgRight.width * 2 + rightBtn.imgHover.width\n        this.min = itemCfg.min\n        this.max = itemCfg.max || 1\n        this.value = this.min // TODO set default value\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.height = this.imgTextNormal.height\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        if (this.hover) {\n            img = this.imgTextHover\n        }\n        context.drawImage(img, this.x, this.y)\n        let posX = this.x + this.sliderX\n        context.drawImage(this.imgLeft, posX, this.y)\n        context.drawImage(this.imgNormal, posX, this.y)\n        const dw = Math.round(this.value / this.max * this.imgHover.width)\n        context.drawImage(this.imgHover, 0, 0, dw, this.imgHover.height, posX, this.y, dw, this.imgHover.height)\n        posX += this.imgNormal.width\n        context.drawImage(this.imgRight, posX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuLayer } from './MenuLayer'\nimport { MenuLabelItemCfg } from '../../../cfg/MenuLabelItemCfg'\n\nexport class MenuLabelItem extends BaseElement {\n\n    target: string\n    loImg: HTMLCanvasElement\n    hiImg: HTMLCanvasElement\n\n    constructor(parent: MenuLayer, itemCfg: MenuLabelItemCfg, autoCenter: boolean) {\n        super(parent)\n        this.target = itemCfg.target\n        this.loImg = parent.loFont.createTextImage(itemCfg.label)\n        this.hiImg = parent.hiFont.createTextImage(itemCfg.label)\n        this.width = this.loImg.width\n        this.height = this.loImg.height\n        this.relX = autoCenter ? -parent.relX + (parent.menuImage.width - this.width) / 2 : itemCfg.x\n        this.relY = itemCfg.y\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.hover) {\n            context.drawImage(this.hiImg, this.x, this.y)\n        } else {\n            context.drawImage(this.loImg, this.x, this.y)\n        }\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuEntryCfg } from '../../../cfg/MenuEntryCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuCycleItem } from './MenuCycleItem'\nimport { MenuSliderItem } from './MenuSliderItem'\nimport { MenuLabelItem } from './MenuLabelItem'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class MenuLayer extends BaseElement {\n\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    itemsTrigger: MenuLabelItem[] = []\n    itemsNext: MenuLabelItem[] = []\n\n    constructor(parent: BaseElement, menuCfg: MenuEntryCfg) {\n        super(parent)\n        this.relX = menuCfg.position[0]\n        this.relY = menuCfg.position[1]\n        this.menuImage = ResourceManager.getImageOrNull(menuCfg.menuImage[0]) // menuImage has 4 parameter here\n        this.titleImage = ResourceManager.getBitmapFont(menuCfg.menuFont).createTextImage(menuCfg.fullName)\n        this.loFont = ResourceManager.getBitmapFont(menuCfg.loFont)\n        this.hiFont = ResourceManager.getBitmapFont(menuCfg.hiFont)\n        menuCfg.itemsLabel.forEach((itemCfg) => {\n            const item = this.addChild(new MenuLabelItem(this, itemCfg, menuCfg.autoCenter))\n            if (itemCfg.actionName.toLowerCase() === 'trigger') {\n                this.itemsTrigger.push(item)\n            } else {\n                this.itemsNext.push(item)\n            }\n        })\n        menuCfg.itemsCycle.forEach((itemCfg) => this.addChild(new MenuCycleItem(this, itemCfg)))\n        menuCfg.itemsSlider.forEach((itemCfg) => this.addChild(new MenuSliderItem(this, itemCfg)))\n        this.hidden = true\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.drawImage(this.menuImage, (this.parent.width - this.menuImage.width) / 2, (this.parent.height - this.menuImage.height) / 2)\n        context.drawImage(this.titleImage, (this.parent.width - this.titleImage.width) / 2, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { MenuLayer } from './MenuLayer'\nimport { MenuCfg } from '../../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\n\nexport class MenuBasePanel extends Panel {\n\n    layersByKey: Map<string, MenuLayer> = new Map()\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super()\n        this.width = layer.fixedWidth\n        this.height = layer.fixedHeight\n        this.hidden = true\n        cfg.menus.forEach((menuCfg, index) => this.layersByKey.set('menu' + (index + 1), this.addChild(new MenuLayer(this, menuCfg))))\n        const pausePanel = this\n        this.layersByKey.forEach((layer) => layer.itemsNext.forEach((item) => item.onClick = () => pausePanel.selectLayer(item.target)))\n    }\n\n    show() {\n        this.hidden = false\n        this.selectLayer('menu1')\n    }\n\n    hide() {\n        super.hide()\n        this.notifyRedraw()\n    }\n\n    selectLayer(key: string) {\n        const layer = this.layersByKey.get(key.toLowerCase())\n        this.layersByKey.forEach(l => l !== layer && l.hide())\n        layer.show()\n        this.notifyRedraw()\n    }\n\n}\n","import { MenuCfg } from '../../../cfg/MenuCfg'\nimport { MenuBasePanel } from './MenuBasePanel'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\n\nexport class OptionsPanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const panel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => panel.onRepeatBriefing()\n        this.layersByKey.get('menu1').itemsTrigger[1].onClick = () => panel.hide()\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { MenuCfg } from '../../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\nimport { MenuBasePanel } from './MenuBasePanel'\n\nexport class PausePanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n    onAbortGame: () => any = () => console.log('abort mission')\n    onRestartGame: () => any = () => console.log('restart mission')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const pausePanel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => pausePanel.hide() // Pause\n        this.layersByKey.get('menu2').itemsTrigger[0].onClick = () => pausePanel.onRepeatBriefing() // Options\n        this.layersByKey.get('menu3').itemsTrigger[0].onClick = () => pausePanel.onAbortGame() // Quit\n        this.layersByKey.get('menu4').itemsTrigger[0].onClick = () => pausePanel.onRestartGame() // Restart\n    }\n\n}\n","export class Rect {\n\n    x: number = 0\n    y: number = 0\n    w: number = 0\n    h: number = 0\n\n    constructor(arr: number[]) {\n        [this.x, this.y, this.w, this.h] = arr\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { Rect } from '../core/Rect'\n\nexport class DialogCfg extends BaseConfig {\n\n    image: string = null\n    titleWindow: Rect = null\n    textWindow: Rect = null\n    okWindow: Rect = null\n    cancelWindow: Rect = null\n    contrastOverlay: string = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        if (lCfgKeyName.endsWith('window')) {\n            return new Rect(cfgValue)\n        }\n        return super.parseValue(lCfgKeyName, cfgValue)\n    }\n\n}\n","import { PanelCfg } from './PanelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { DialogCfg } from './DialogCfg'\nimport { Rect } from '../core/Rect'\nimport { ButtonCfg } from './ButtonsCfg'\n\nexport class BriefingPanelCfg extends PanelCfg {\n\n    // TODO find config values for this class\n\n    titleFont: BitmapFont\n    title: string\n    titleWindow: Rect\n    textFont: BitmapFont\n    textWindow: Rect\n    nextButtonCfg: ButtonCfg\n    backButtonCfg: ButtonCfg\n\n    constructor() {\n        super([])\n        this.titleFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont2.bmp')\n        this.title = ResourceManager.cfg('Main', 'MissionBriefingText')\n        const dialogCfg = new DialogCfg(ResourceManager.cfg('Dialog'))\n        this.titleWindow = dialogCfg.titleWindow\n        this.textFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont.bmp')\n        this.textWindow = dialogCfg.textWindow\n        this.nextButtonCfg = {\n            buttonType: 'Next briefing paragraph',\n            relX: 394,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'NextButton640x480'),\n        }\n        this.backButtonCfg = {\n            buttonType: 'Previous briefing paragraph',\n            relX: 54,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'BackArrow'),\n        }\n    }\n\n}\n","import { BriefingPanel } from '../gui/briefing/BriefingPanel'\nimport { OptionsPanel } from '../gui/overlay/OptionsPanel'\nimport { PausePanel } from '../gui/overlay/PausePanel'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { MenuCfg } from '../../cfg/MenuCfg'\nimport { BriefingPanelCfg } from '../../cfg/BriefingPanelCfg'\nimport { KEY_EVENT, POINTER_EVENT } from '../../event/EventManager'\nimport { Panel } from '../gui/base/Panel'\nimport { GuiBaseLayer } from './GuiBaseLayer'\nimport { ObjectiveImageCfg } from '../../cfg/ObjectiveImageCfg'\nimport { DEV_MODE } from '../../main'\n\nexport class OverlayLayer extends GuiBaseLayer {\n\n    panelBriefing: BriefingPanel\n    panelOptions: OptionsPanel\n    panelPause: PausePanel\n\n    constructor() {\n        super()\n        this.panelPause = this.addPanel(new PausePanel(this, ResourceManager.getResource('PausedMenu') as MenuCfg))\n        this.panelOptions = this.addPanel(new OptionsPanel(this, ResourceManager.getResource('OptionsMenu') as MenuCfg))\n        this.panelBriefing = this.addPanel(new BriefingPanel(new BriefingPanelCfg()))\n        // link items\n        this.panelPause.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n        this.panelPause.onAbortGame = () => {\n            console.log('TODO abort game here') // TODO abort game\n        }\n        this.panelPause.onRestartGame = () => {\n            console.log('TODO restart game here') // TODO restart game\n        }\n        this.panelOptions.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n    }\n\n    setActivePanel(panel: Panel) {\n        this.panels.forEach(p => p !== panel && p.hide())\n        panel.show()\n        this.redraw()\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.panelBriefing.setup(objectiveText, objectiveBackImgCfg)\n        if (!DEV_MODE) this.setActivePanel(this.panelBriefing)\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (this.panels.every(p => p.hidden)) return false\n        return super.handlePointerEvent(eventEnum, event) || this.isActive() // catch em all\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        let result = false\n        const lEventKey = event.key.toLowerCase()\n        if (eventEnum === KEY_EVENT.UP) {\n            if (lEventKey === 'escape') {\n                if (this.panelBriefing.hidden && this.panelOptions.hidden) {\n                    if (this.panelPause.hidden) {\n                        // TODO actually pause the game\n                        this.setActivePanel(this.panelPause)\n                    } else {\n                        // TODO actually unpause the game\n                        this.panelPause.hide()\n                    }\n                    result = true\n                }\n            } else if (lEventKey === ' ') { // space\n                if (!this.panelBriefing.hidden) {\n                    this.panelBriefing.nextParagraph()\n                    result = true\n                }\n            }\n        }\n        return result || this.isActive() // catch em all\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { WorldManager } from '../scene/WorldManager'\nimport { SelectionLayer } from '../game/layer/SelectionLayer'\nimport { GameLayer } from '../game/layer/GameLayer'\nimport { GuiMainLayer } from '../game/layer/GuiMainLayer'\nimport { Supervisor } from '../game/Supervisor'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { iGet } from '../core/Util'\nimport { LevelObjectiveTextEntry } from '../resource/wadworker/ObjectiveTextParser'\nimport { OverlayLayer } from '../game/layer/OverlayLayer'\nimport { GameState } from '../game/model/GameState'\n\nexport class GameScreen extends BaseScreen {\n\n    onLevelEnd: () => void\n    gameLayer: GameLayer\n    selectionLayer: SelectionLayer\n    guiLayer: GuiMainLayer\n    overlayLayer: OverlayLayer\n    worldManager: WorldManager\n    jobSupervisor: Supervisor\n    levelName: string\n    levelConf: LevelEntryCfg\n\n    constructor() {\n        super()\n        this.gameLayer = this.addLayer(new GameLayer(), 0)\n        this.selectionLayer = this.addLayer(new SelectionLayer(), 10)\n        this.guiLayer = this.addLayer(new GuiMainLayer(), 20)\n        this.overlayLayer = this.addLayer(new OverlayLayer(), 30)\n        this.worldManager = new WorldManager(this.gameLayer.canvas)\n        this.gameLayer.setWorldManager(this.worldManager)\n        this.selectionLayer.setWorldManager(this.worldManager)\n        this.jobSupervisor = new Supervisor(this.worldManager)\n        // link layer\n        this.guiLayer.onOptionsShow = () => this.overlayLayer.panelOptions.show()\n        this.overlayLayer.panelBriefing.messagePanel = this.guiLayer.panelMessages\n        this.overlayLayer.panelPause.onAbortGame = () => this.onLevelEnd && this.onLevelEnd()\n        this.overlayLayer.panelPause.onRestartGame = () => this.restartLevel()\n    }\n\n    startLevel(levelName) {\n        this.levelName = levelName\n        this.levelConf = ResourceManager.getResource('Levels').levelsByName[this.levelName]\n        if (!this.levelConf) throw 'Could not find level configuration for \"' + this.levelName + '\"'\n        this.setupAndStartLevel()\n    }\n\n    restartLevel() {\n        this.hide()\n        GameState.reset()\n        this.setupAndStartLevel()\n    }\n\n    private setupAndStartLevel() {\n        console.log('Starting level ' + this.levelName + ' - ' + this.levelConf.fullName)\n        this.worldManager.setup(this.levelConf, this)\n        const objectiveText: LevelObjectiveTextEntry = iGet(ResourceManager.getResource(this.levelConf.objectiveText), this.levelName)\n        this.guiLayer.reset()\n        this.overlayLayer.setup(objectiveText.objective, this.levelConf.objectiveImage640x480)\n        this.show()\n    }\n\n    show() {\n        super.show()\n        this.worldManager.start()\n        this.jobSupervisor.start()\n    }\n\n    hide() {\n        this.worldManager.stop()\n        this.jobSupervisor.stop()\n        super.hide()\n    }\n\n    resize(width: number, height: number) {\n        super.resize(width, height)\n        if (this.worldManager) this.worldManager.resize(width, height)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class RewardScreenButton extends MainMenuBaseItem {\n\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgPressed: HTMLCanvasElement\n    imgDisabled: HTMLCanvasElement\n    disabled: boolean = false\n    visible: boolean = true\n\n    constructor(conf: any) {\n        super()\n        let imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath;\n        [imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath, this.x, this.y] = conf\n        this.imgNormal = ResourceManager.getImage(imgNormalFilepath)\n        this.imgHover = ResourceManager.getImage(imgHoverFilepath)\n        this.imgPressed = ResourceManager.getImage(imgPressedFilepath)\n        this.imgDisabled = ResourceManager.getImage(imgDisabledFilepath)\n        this.width = this.imgNormal.width\n        this.height = this.imgNormal.height\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        if (!this.visible) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled\n        } else if (this.pressed) {\n            img = this.imgPressed\n        } else if (this.hover) {\n            img = this.imgHover\n        }\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from './ScreenLayer'\nimport { RewardCfg } from '../cfg/RewardCfg'\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { RewardScreenButton } from '../menu/RewardScreenButton'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventManager'\n\nexport class RewardScreen extends BaseScreen {\n\n    onAdvance: () => void\n    cfg: RewardCfg = null\n    titleFont: BitmapFont\n    resultsLayer: ScaledLayer\n    descriptionTextLayer: ScaledLayer\n    btnLayer: ScaledLayer\n    resultIndex: number = 0\n    resultLastIndex: number = 0\n    images: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    boxes: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    fonts = {}\n    texts: HTMLCanvasElement[] = []\n    uncoverTimeout = null\n    btnSave: RewardScreenButton\n    btnAdvance: RewardScreenButton\n\n    constructor() {\n        super()\n        this.cfg = ResourceManager.getResource('Reward')\n        this.titleFont = ResourceManager.getBitmapFont(this.cfg.titleFont)\n        const backgroundImg = ResourceManager.getImage(this.cfg.wallpaper)\n        const backgroundLayer = this.addLayer(new ScaledLayer())\n        backgroundLayer.onRedraw = (context) => context.drawImage(backgroundImg, 0, 0)\n        this.cfg.images.forEach((img) => {\n            this.images.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        this.cfg.boxImages.forEach((img) => {\n            this.boxes.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        Object.keys(this.cfg.fonts).forEach((fontKey, index) => {\n            const font = ResourceManager.getBitmapFont(this.cfg.fonts[fontKey])\n            this.fonts[fontKey.toLowerCase()] = font\n            const txt = this.cfg.texts[index]\n            const labelFont = index < 9 ? font : ResourceManager.getBitmapFont(this.cfg.backFont)\n            this.texts.push(labelFont.createTextImage(txt.text))\n        })\n        this.resultsLayer = this.addLayer(new ScaledLayer())\n        this.resultsLayer.handlePointerEvent = ((eventType) => {\n            if (eventType === POINTER_EVENT.UP) {\n                if (this.uncoverTimeout) clearTimeout(this.uncoverTimeout)\n                this.uncoverTimeout = null\n                this.resultIndex = this.resultLastIndex\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n                this.redraw()\n                return true\n            }\n            return false\n        })\n        this.descriptionTextLayer = this.addLayer(new ScaledLayer(), 20)\n        this.btnLayer = this.addLayer(new ScaledLayer(), 50)\n        this.btnSave = new RewardScreenButton(this.cfg.saveButton)\n        this.btnSave.disabled = true\n        this.btnAdvance = new RewardScreenButton(this.cfg.advanceButton)\n        this.btnLayer.handlePointerEvent = ((eventType, event) => {\n            if (eventType === POINTER_EVENT.MOVE) {\n                const [sx, sy] = this.btnLayer.toScaledCoords(event.clientX, event.clientY)\n                this.btnSave.checkHover(sx, sy)\n                this.btnAdvance.checkHover(sx, sy)\n            } else if (eventType === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    this.btnSave.checkSetPressed()\n                    this.btnAdvance.checkSetPressed()\n                }\n            } else if (eventType === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    if (this.btnSave.pressed) {\n                        this.btnSave.setReleased()\n                        // TODO switch to save screen\n                    } else if (this.btnAdvance.pressed) {\n                        this.btnAdvance.setReleased()\n                        this.hide()\n                        this.onAdvance()\n                    }\n                }\n            }\n            if (this.btnSave.needsRedraw || this.btnAdvance.needsRedraw) this.redraw()\n            return false\n        })\n        this.btnLayer.onRedraw = (context) => {\n            this.btnSave.draw(context)\n            this.btnAdvance.draw(context)\n        }\n    }\n\n    show() {\n        this.resultIndex = 0\n        this.btnSave.visible = false\n        this.btnAdvance.visible = false\n        this.uncoverResult()\n        const levelFullNameImg = this.titleFont.createTextImage(GameState.levelFullName)\n        let resultText = this.cfg.quitText\n        this.resultLastIndex = this.images.length - 2\n        if (GameState.resultState === GameResultState.COMPLETE) {\n            resultText = this.cfg.completeText\n            this.resultLastIndex = this.images.length - 1\n        } else if (GameState.resultState === GameResultState.FAILED) {\n            resultText = this.cfg.failedText\n        }\n        const resultValues = []\n        resultValues.push(this.fonts['crystals'].createTextImage(this.percentString(GameState.numCrystal, GameState.neededCrystals)))\n        resultValues.push(this.fonts['ore'].createTextImage(this.percentString(GameState.numOre, GameState.totalOres)))\n        resultValues.push(this.fonts['diggable'].createTextImage(this.percentString(GameState.remainingDiggables, GameState.totalDiggables, true)))\n        resultValues.push(this.fonts['constructions'].createTextImage(GameState.buildings.length.toString()))\n        resultValues.push(this.fonts['caverns'].createTextImage(this.percentString(GameState.discoveredCaverns, GameState.totalCaverns)))\n        resultValues.push(this.fonts['figures'].createTextImage(this.percentString(GameState.raiders.length, GameState.getMaxRaiders())))\n        resultValues.push(this.fonts['rockmonsters'].createTextImage(this.percentString(0))) // TODO show defence report\n        resultValues.push(this.fonts['oxygen'].createTextImage(this.percentString(GameState.airlevel)))\n        resultValues.push(this.fonts['timer'].createTextImage(this.timeString(GameState.gameTimeSeconds)))\n        resultValues.push(this.fonts['score'].createTextImage(this.percentString(GameState.score)))\n        const gameResultTextImg = this.titleFont.createTextImage(resultText)\n        this.resultsLayer.onRedraw = (context) => {\n            context.clearRect(0, 0, this.resultsLayer.fixedWidth, this.resultsLayer.fixedHeight)\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const img = this.images[c]\n                if (img) context.drawImage(img.img, img.x, img.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const box = this.boxes[c]\n                if (box) context.drawImage(box.img, box.x, box.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const txt = this.cfg.texts[c]\n                const text = resultValues[c]\n                if (text) context.drawImage(text, txt.x - text.width / 2, txt.y)\n            }\n            context.drawImage(levelFullNameImg, this.resultsLayer.fixedWidth / 2 - levelFullNameImg.width / 2, this.cfg.vertSpacing - levelFullNameImg.height / 2)\n            context.drawImage(gameResultTextImg, this.resultsLayer.fixedWidth / 2 - gameResultTextImg.width / 2, this.cfg.vertSpacing + levelFullNameImg.height / 2)\n        }\n        this.descriptionTextLayer.onRedraw = (context) => {\n            const descriptionTextImg = this.texts[this.resultIndex]\n            context.clearRect(0, this.cfg.textPos[1], this.descriptionTextLayer.fixedWidth, this.descriptionTextLayer.fixedHeight - this.cfg.textPos[1])\n            const tx = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[0] : 305\n            const ty = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[1] : 195\n            context.drawImage(descriptionTextImg, tx - descriptionTextImg.width / 2, ty)\n        }\n        super.show()\n    }\n\n    percentString(actual, max = 1, lessIsMore: boolean = false) {\n        if (max === 0) max = 1\n        let value = Math.round(Math.max(Math.min(actual / max, 1), 0) * 100)\n        if (lessIsMore) value = 100 - value\n        return value.toString() + '%'\n    }\n\n    padLeft(value: string, padding = '0', length = 2) {\n        while (value.length < length) value = padding + value\n        return value\n    }\n\n    timeString(seconds: number) {\n        const ss = this.padLeft((seconds % 60).toString())\n        const minutes = Math.floor(seconds / 60)\n        const mm = this.padLeft(((minutes % 60).toString()))\n        const hh = this.padLeft((Math.floor(minutes / 60).toString()))\n        return hh + ':' + mm + ':' + ss\n    }\n\n    uncoverResult() {\n        this.uncoverTimeout = setTimeout(() => {\n            this.uncoverTimeout = null\n            this.resultIndex++\n            if (this.resultIndex < this.resultLastIndex) {\n                this.uncoverResult()\n            } else {\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n            }\n            this.redraw()\n        }, this.cfg.timer * 1000)\n    }\n\n}\n","import { ResourceManager } from './resource/ResourceManager'\nimport { LoadingScreen } from './screen/LoadingScreen'\nimport { MainMenuScreen } from './screen/MainMenuScreen'\nimport { GameScreen } from './screen/GameScreen'\nimport { RewardScreen } from './screen/RewardScreen'\nimport { GameState } from './game/model/GameState'\nimport { WadFileSelectionModal } from '../site/modal/WadFileSelectionModal'\n\n// define constants\n\nexport const DEV_MODE = process.env.WEBPACK_MODE === 'development'\nif (DEV_MODE) console.warn('DEV MODE ACTIVE')\n\nexport const JOB_SCHEDULE_INTERVAL = 1000 // milliseconds\nexport const JOB_ACTION_RANGE = 5\nexport const CHECK_SPANW_RAIDER_TIMER = 1000 // milliseconds\nexport const MAX_RAIDER_BASE = 12\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10\n\nexport const PANEL_ANIMATION_MULTIPLIER = 3\nexport const HEIGHT_MULTIPLER = 0.1\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640\nexport const SPRITE_RESOLUTION_HEIGHT = 480\nexport const TILESIZE = 40\nexport const NATIVE_FRAMERATE = 30\n\n// setup and link all components\n\nconst loadingScreen = new LoadingScreen()\nconst wadfileSelectModal = new WadFileSelectionModal('game-container')\n\nwadfileSelectModal.onStart = (wad0Url, wad1Url) => {\n    ResourceManager.startLoadingFromUrl(wad0Url, wad1Url)\n}\nResourceManager.onMessage = (msg: string) => {\n    loadingScreen.setLoadingMessage(msg)\n}\nResourceManager.onCacheMissed = () => {\n    wadfileSelectModal.show()\n}\nResourceManager.onInitialLoad = (totalResources: number) => {\n    wadfileSelectModal.hide()\n    loadingScreen.enableGraphicMode(totalResources)\n}\nResourceManager.onAssetLoaded = (assetIndex: number) => {\n    loadingScreen.setLoadingState(assetIndex)\n}\nResourceManager.onLoadDone = () => {\n    // complete setup\n    const mainMenuScreen = new MainMenuScreen()\n    const gameScreen = new GameScreen()\n    const rewardScreen = new RewardScreen()\n\n    mainMenuScreen.onLevelSelected = (levelName) => {\n        try {\n            gameScreen.startLevel(levelName)\n        } catch (e) {\n            console.error('Could not load level: ' + levelName, e)\n            gameScreen.hide()\n            mainMenuScreen.showLevelSelection()\n        }\n    }\n    gameScreen.onLevelEnd = () => {\n        gameScreen.hide()\n        rewardScreen.show()\n    }\n    rewardScreen.onAdvance = () => {\n        GameState.reset()\n        mainMenuScreen.showLevelSelection()\n    }\n\n    // setup complete\n    loadingScreen.hide()\n    const params = new URLSearchParams(window.location.search)\n    const entry = params.get('entry')\n    if (DEV_MODE && entry) {\n        GameState.numOre = Number(params.get('numOre')) || 0\n        GameState.numCrystal = Number(params.get('numCrystal')) || 0\n        if (entry === 'level') mainMenuScreen.showLevelSelection()\n        else if (entry === 'reward') rewardScreen.show()\n        else if (entry) mainMenuScreen.selectLevel(entry)\n    } else {\n        mainMenuScreen.showMainMenu()\n    }\n}\n\n// start the game engine with loading resources\n\nloadingScreen.show()\nResourceManager.startLoadingFromCache()\n"],"sourceRoot":""}