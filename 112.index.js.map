{"version":3,"sources":["webpack://rock-raiders-web/./site/clearcache/clearCacheButton.css","webpack://rock-raiders-web/./site/github/github.css","webpack://rock-raiders-web/./site/clearcache/clearCacheButton.css?9693","webpack://rock-raiders-web/./site/clearcache/ClearCacheButton.ts","webpack://rock-raiders-web/./site/github/github.css?bbb3","webpack://rock-raiders-web/./site/github/github-box.ts","webpack://rock-raiders-web/./site/modal/WadFileSelectionModal.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimationEntityType.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimationEntityUpgrade.ts","webpack://rock-raiders-web/./src/game/model/Updateable.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimClip.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimSubObj.ts","webpack://rock-raiders-web/./src/screen/DebugHelper.ts","webpack://rock-raiders-web/./src/game/model/EntityType.ts","webpack://rock-raiders-web/./src/event/EventBus.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTool.ts","webpack://rock-raiders-web/./src/game/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTraining.ts","webpack://rock-raiders-web/./src/gui/radar/MapSurfaceRect.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityIdentifier.ts","webpack://rock-raiders-web/./src/game/model/job/JobState.ts","webpack://rock-raiders-web/./src/event/GuiCommand.ts","webpack://rock-raiders-web/./src/game/model/material/BarrierLocation.ts","webpack://rock-raiders-web/./src/event/WorldEvents.ts","webpack://rock-raiders-web/./src/game/model/activities/BaseActivity.ts","webpack://rock-raiders-web/./src/game/model/activities/AnimEntityActivity.ts","webpack://rock-raiders-web/./src/game/model/activities/BarrierActivity.ts","webpack://rock-raiders-web/./src/game/model/activities/RaiderActivity.ts","webpack://rock-raiders-web/./src/game/model/PathTarget.ts","webpack://rock-raiders-web/./src/game/model/job/Job.ts","webpack://rock-raiders-web/./src/game/model/job/ShareableJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/CompletePowerPathJob.ts","webpack://rock-raiders-web/./src/game/model/building/BuildingSite.ts","webpack://rock-raiders-web/./src/game/model/map/WallType.ts","webpack://rock-raiders-web/./src/game/model/map/SurfaceGeometry.ts","webpack://rock-raiders-web/./src/game/model/building/BuildPlacementMarkerMesh.ts","webpack://rock-raiders-web/./src/game/model/building/BuildPlacementMarker.ts","webpack://rock-raiders-web/./src/game/model/job/raider/GetToolPathTarget.ts","webpack://rock-raiders-web/./src/game/model/job/raider/RaiderJob.ts","webpack://rock-raiders-web/./src/game/model/job/raider/GetToolJob.ts","webpack://rock-raiders-web/./src/game/model/job/raider/MoveJob.ts","webpack://rock-raiders-web/./src/game/model/GameSelection.ts","webpack://rock-raiders-web/./src/game/model/map/astar.ts","webpack://rock-raiders-web/./src/event/WorldLocationEvent.ts","webpack://rock-raiders-web/./src/game/model/activities/DynamiteActivity.ts","webpack://rock-raiders-web/./src/game/model/job/carry/CarryJob.ts","webpack://rock-raiders-web/./src/game/model/job/carry/CarryDynamiteJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ClearRubbleJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/SurfacePathTarget.ts","webpack://rock-raiders-web/./src/game/model/job/surface/DrillJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ReinforceJob.ts","webpack://rock-raiders-web/./src/scene/SceneEntity.ts","webpack://rock-raiders-web/./src/scene/entities/CrystalSceneEntity.ts","webpack://rock-raiders-web/./src/game/model/activities/BuildingActivity.ts","webpack://rock-raiders-web/./src/game/model/job/carry/CarryPathTarget.ts","webpack://rock-raiders-web/./src/game/model/job/carry/BuildingCarryPathTarget.ts","webpack://rock-raiders-web/./src/game/model/job/carry/SiteCarryPathTarget.ts","webpack://rock-raiders-web/./src/game/model/material/MaterialEntity.ts","webpack://rock-raiders-web/./src/game/model/material/Crystal.ts","webpack://rock-raiders-web/./src/scene/AnimatedSceneEntity.ts","webpack://rock-raiders-web/./src/scene/entities/DynamiteSceneEntity.ts","webpack://rock-raiders-web/./src/game/model/material/Dynamite.ts","webpack://rock-raiders-web/./src/scene/entities/OreSceneEntity.ts","webpack://rock-raiders-web/./src/game/model/material/Ore.ts","webpack://rock-raiders-web/./src/game/model/map/Surface.ts","webpack://rock-raiders-web/./src/game/TerrainLoader.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimationGroup.ts","webpack://rock-raiders-web/./src/game/model/map/FallIn.ts","webpack://rock-raiders-web/./src/game/model/map/TerrainPath.ts","webpack://rock-raiders-web/./src/game/model/map/Terrain.ts","webpack://rock-raiders-web/./src/game/SceneManager.ts","webpack://rock-raiders-web/./src/scene/SceneMesh.ts","webpack://rock-raiders-web/./src/resource/LWSCLoader.ts","webpack://rock-raiders-web/./src/resource/AnimEntityLoader.ts","webpack://rock-raiders-web/./src/scene/SequenceTextureMaterial.ts","webpack://rock-raiders-web/./src/resource/LWOLoader.ts","webpack://rock-raiders-web/./src/resource/wadworker/InitLoadingMessage.ts","webpack://rock-raiders-web/./src/game/model/MoveState.ts","webpack://rock-raiders-web/./src/game/model/GameResult.ts","webpack://rock-raiders-web/./src/resource/ResourceManager.ts","webpack://rock-raiders-web/./src/game/EntityManager.ts","webpack://rock-raiders-web/./src/game/BeamUpAnimator.ts","webpack://rock-raiders-web/./src/scene/entities/BarrierSceneEntity.ts","webpack://rock-raiders-web/./src/game/model/material/Barrier.ts","webpack://rock-raiders-web/./src/scene/entities/ElectricFenceSceneEntity.ts","webpack://rock-raiders-web/./src/game/model/job/carry/CarryFenceJob.ts","webpack://rock-raiders-web/./src/game/model/material/ElectricFence.ts","webpack://rock-raiders-web/./src/game/model/building/BuildingPathTarget.ts","webpack://rock-raiders-web/./src/game/model/building/BuildingEntity.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Barracks.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Docks.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Geodome.ts","webpack://rock-raiders-web/./src/game/model/building/entities/GunStation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/OreRefinery.ts","webpack://rock-raiders-web/./src/game/model/building/entities/PowerStation.ts","webpack://rock-raiders-web/./src/game/model/building/Teleport.ts","webpack://rock-raiders-web/./src/game/model/building/entities/TeleportBig.ts","webpack://rock-raiders-web/./src/game/model/building/entities/TeleportPad.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Toolstation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Upgrade.ts","webpack://rock-raiders-web/./src/game/model/building/BuildingFactory.ts","webpack://rock-raiders-web/./src/game/model/building/PowerPathBuildingSite.ts","webpack://rock-raiders-web/./src/game/model/job/raider/EatJob.ts","webpack://rock-raiders-web/./src/game/model/job/raider/TrainRaiderJob.ts","webpack://rock-raiders-web/./src/game/model/job/raider/UpgradeRaiderJob.ts","webpack://rock-raiders-web/./src/game/model/job/VehicleCallManJob.ts","webpack://rock-raiders-web/./src/game/model/vehicle/VehicleActivity.ts","webpack://rock-raiders-web/./src/scene/entities/FulfillerSceneEntity.ts","webpack://rock-raiders-web/./src/game/model/EntityStep.ts","webpack://rock-raiders-web/./src/game/model/MovableEntity.ts","webpack://rock-raiders-web/./src/game/model/FulfillerEntity.ts","webpack://rock-raiders-web/./src/game/model/vehicle/VehicleEntity.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/BullDozer.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/Hoverboard.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/LargeCat.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/LargeDigger.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/LargeMlp.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/SmallCat.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/SmallDigger.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/SmallHeli.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/SmallMlp.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/SmallTruck.ts","webpack://rock-raiders-web/./src/game/model/vehicle/entities/WalkerDigger.ts","webpack://rock-raiders-web/./src/game/GuiManager.ts","webpack://rock-raiders-web/./src/game/model/vehicle/VehicleFactory.ts","webpack://rock-raiders-web/./src/game/model/activities/MonsterActivity.ts","webpack://rock-raiders-web/./src/game/model/activities/RockMonsterActivity.ts","webpack://rock-raiders-web/./src/game/model/monster/Monster.ts","webpack://rock-raiders-web/./src/game/model/monster/Bat.ts","webpack://rock-raiders-web/./src/game/model/monster/IceMonster.ts","webpack://rock-raiders-web/./src/game/model/monster/LavaMonster.ts","webpack://rock-raiders-web/./src/game/model/monster/RockMonster.ts","webpack://rock-raiders-web/./src/game/model/monster/SmallSpider.ts","webpack://rock-raiders-web/./src/game/model/raider/Raider.ts","webpack://rock-raiders-web/./src/game/ObjectListLoader.ts","webpack://rock-raiders-web/./src/event/EventTypeEnum.ts","webpack://rock-raiders-web/./src/game/Supervisor.ts","webpack://rock-raiders-web/./src/core/NerpRunner.ts","webpack://rock-raiders-web/./src/core/NerpParser.ts","webpack://rock-raiders-web/./src/game/WorldManager.ts","webpack://rock-raiders-web/./src/screen/layer/ScreenLayer.ts","webpack://rock-raiders-web/./src/event/GameKeyboardEvent.ts","webpack://rock-raiders-web/./src/event/GamePointerEvent.ts","webpack://rock-raiders-web/./src/event/GameWheelEvent.ts","webpack://rock-raiders-web/./src/event/EventManager.ts","webpack://rock-raiders-web/./src/screen/layer/CursorLayer.ts","webpack://rock-raiders-web/./src/screen/BaseScreen.ts","webpack://rock-raiders-web/./src/screen/layer/GameLayer.ts","webpack://rock-raiders-web/./src/screen/layer/OffscreenLayer.ts","webpack://rock-raiders-web/./src/screen/layer/GuiMainLayer.ts","webpack://rock-raiders-web/./src/screen/layer/OverlayLayer.ts","webpack://rock-raiders-web/./src/screen/layer/SelectionLayer.ts","webpack://rock-raiders-web/./src/screen/GameScreen.ts","webpack://rock-raiders-web/./src/cfg/CfgHelper.ts","webpack://rock-raiders-web/./src/menu/MainMenuBaseItem.ts","webpack://rock-raiders-web/./src/menu/MainMenuIconButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLabelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLayer.ts","webpack://rock-raiders-web/./src/menu/MainMenuLevelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuPanel.ts","webpack://rock-raiders-web/./src/menu/MainMenuWindow.ts","webpack://rock-raiders-web/./src/menu/LevelSelectLayer.ts","webpack://rock-raiders-web/./src/screen/MainMenuScreen.ts","webpack://rock-raiders-web/./src/menu/RewardScreenButton.ts","webpack://rock-raiders-web/./src/screen/RewardScreen.ts","webpack://rock-raiders-web/./src/main.ts","webpack://rock-raiders-web/./src/screen/LoadingScreen.ts","webpack://rock-raiders-web/./src/params.ts"],"names":["___CSS_LOADER_EXPORT___","push","module","id","ClearCacheButton","parentId","this","rootElement","document","getElementById","appendChild","createElement","classList","add","button","innerText","onclick","indexedDB","deleteDatabase","location","reload","style","visibility","GithubBox","link","href","img","src","alt","textContent","WadFileSelectionModal","onStart","tabIndex","setAttribute","modalDialog","modalContent","modalHeader","modalTitle","modalBody","navTabList","navFileBtn","appendNavButton","navUrlBtn","navTabContent","appendNavFileTab","appendNavUrlTab","modal","backdrop","keyboard","parent","active","controlTarget","navBtn","type","String","labelledBy","navFileTab","appendNavTab","wad0File","appendWadFileGroup","wad1File","btnStartFile","addEventListener","disabled","wad0FileUrl","URL","createObjectURL","files","wad1FileUrl","filename","wadFileGroup","wadFileLabel","innerHTML","wadFileInput","required","navUrlTab","urlHint","wad0Url","appendWadUrlGroup","wad1Url","btnStartUrl","value","navTab","example","wadUrlGroup","wadUrlLabel","wadUrlInput","show","hide","getPath","url","strUrl","toString","replace","startsWith","substring","lastInd","lastIndexOf","getFilename","iGet","obj","keys","forEach","keyname","Object","filter","key","toLowerCase","map","decodeString","data","TextDecoder","decode","decodeFilepath","getRandomInclusive","min","max","Math","ceil","floor","random","getRandom","getRandomSign","clearTimeoutSafe","timeout","clearTimeout","clearIntervalSafe","interval","clearInterval","Array","prototype","element","indexOf","remove","index","splice","removeLast","lastIndex","last","length","undefined","count","callback","counter","e","partition","left","right","a","Map","getOrUpdate","updateCallback","get","set","equalsIgnoreCase","other","GameState","numCrystal","numOre","numBrick","usedCrystals","neededCrystals","airLevel","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","discoveredCaverns","AnimationEntityType","scale","carryNullName","carryNullFrames","depositNullName","toolNullName","wheelMesh","wheelRadius","wheelNullName","drillNullName","driverNullName","cameraNullName","cameraNullFrames","mediumPolyBodies","highPolyBodies","fPPolyBodies","animations","upgradesByLevel","AnimationEntityUpgrade","upgradeFilepath","upgradeNullName","upgradeNullIndex","updateSafe","updatable","elapsedMs","update","console","error","AnimClip","looping","transcoef","firstFrame","lastFrame","framesPerSecond","bodies","polyList","carryJoint","depositJoint","getToolJoint","wheelJoints","drillJoint","driverJoint","nullJoints","polyModel","sfxAudioByFrame","timer","currentFrame","onAnimationDone","durationTimeMs","updateBodiesAnimationFrame","m","msPerFrame","skippedFrames","nextFrame","stopAudio","body","p","position","copy","relPos","sub","pivot","rotation","relRot","relScale","hasOwnProperty","material","opacity","isArray","mat","setOpacity","playAudio","isPlaying","stop","play","f","degToRad","AnimSubObj","lowerName","parentObjInd","model","isNull","sfxName","sfxFrames","degX","degY","degZ","animationFrameIndex","infos","radVec","c","Stats","DebugHelper","stats","setMode","domElement","top","begin","end","EntityType","EventBus","event","blockedEvents","includes","eventKey","isLocal","log","workerListener","getListener","eventListener","RaiderTool","SurfaceType","options","shaping","matIndex","selectable","digable","reinforcable","cursor","Cursor","C","cursorFulfiller","statsDrillName","canCarryFence","connectsPath","mapSurfaceColor","assign","typeNum","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","GROUND","name","POWER_PATH","POWER_PATH_BUILDING_SITE","POWER_PATH_CONSTRUCTION","AllRaiderTools","DRILL","HAMMER","SHOVEL","SPANNER","FREEZERGUN","LASER","PUSHERGUN","BIRDSCARER","RaiderTraining","AllRaiderTrainings","DRIVER","ENGINEER","GEOLOGIST","PILOT","SAILOR","DEMOLITION","RaiderTrainingSites","BARRACKS","UPGRADE","GEODOME","TELEPORT_PAD","DOCKS","TOOLSTATION","RaiderTrainingStatsProperty","MapSurfaceRect","surface","x","y","surfaceColor","surfaceType","borderColor","reinforced","SelectPanelType","PriorityIdentifier","JobState","LocalEvent","GameEvent","super","SelectionChanged","entityMgr","selectPanelType","NONE","canDoTraining","everyHasTool","selection","getSelectPanelType","isGround","isPowerPath","isFloor","isSite","hasRubble","isDrillable","isDigable","isReinforcable","canPlaceFence","buildings","some","b","entityType","POWER_STATION","isUsable","someCarries","raiders","r","carries","everyHasMaxLevel","every","level","Levels","training","getTrainingSites","hasTraining","tool","hasTool","buildingCanUpgrade","building","canUpgrade","buildingCanSwitchPower","SelfPowered","PowerBuilding","vehicleHasCallManJob","vehicles","v","callManJob","allVehicleEmpty","driver","DeselectAll","AirLevelChanged","SetupPriorityList","priorityList","BuildingsChangedEvent","usableBuildingsByTypeAndLevel","perLevel","minLevel","result","RaidersChangedEvent","numRaiders","VehiclesChangedEvent","UpdateRadarTerrain","terrain","mapFocus","surfaces","forEachSurface","s","discovered","tileX","tileY","z","UpdateRadarSurface","surfaceRect","UpdatePriorities","GuiCommand","CancelBuildMode","BarrierLocation","surfaceCenter","heading","clone","angle","PI","WorldEvent","entityKey","JobEvent","job","guiForward","JobCreateEvent","JobDeleteEvent","RequestedRaidersChanged","numRequested","MaterialAmountChanged","usedCrystal","neededCrystal","totalOre","CavernDiscovered","OreFoundEvent","BaseActivity","activityKey","AnimEntityActivity","Stand","BarrierActivity","Short","Expand","Long","Teleport","RaiderActivity","Route","RunPanic","Drill","Walk","Reinforce","Reverse","TurnLeft","TurnRight","CantDo","Collect","Clear","Carry","CarryTurnLeft","CarryTurnRight","CarryStand","Dynamite","Place","Deposit","TeleportIn","Repair","rest","routeRubble","CarryRubble","Eat","FireLaser","GetUp","ThrownByRockMonster","Slip","Train","Recharge","Waiting1","Waiting2","Waiting3","Waiting4","Hoverboard","Standhoverboard","HitLefthoverboard","HitRighthoverboard","HitFronthoverboard","HitBackhoverboard","SMALLTRUCK","StandSMALLTRUCK","HitLeftSMALLTRUCK","HitRightSMALLTRUCK","HitFrontSMALLTRUCK","HitBackSMALLTRUCK","SMALLheli","StandSMALLheli","HitLeftSMALLheli","HitRightSMALLheli","HitFrontSMALLheli","HitBackSMALLheli","SMALLCAT","StandSMALLCAT","HitLeftSMALLCAT","HitRightSMALLCAT","HitFrontSMALLCAT","HitBackSMALLCAT","SMALLMLP","StandSMALLMLP","HitLeftSMALLMLP","HitRightSMALLMLP","HitFrontSMALLMLP","HitBackSMALLMLP","LARGECAT","StandLARGECAT","HitLeftLARGECAT","HitRightLARGECAT","HitFrontLARGECAT","HitBackLARGECAT","SMALLDIGGER","StandSMALLDIGGER","PathTarget","radiusSq","targetLocation","item","sceneEntity","addToScene","Job","jobState","INCOMPLETE","COMPLETE","target","fulfiller","ShareableJob","CANCELED","stopJob","CompletePowerPathJob","placedItems","workplaces","getRandomPosition","onJobComplete","placed","removeFromScene","setSurfaceType","aiPriorityConstruction","BuildingSite","primarySurface","secondarySurface","primaryPathSurface","secondaryPathSurface","neededByType","assignedByType","onSiteByType","complete","canceled","setSite","checkComplete","needed","neededType","buildingSites","BARRIER","changeActivity","CRYSTAL","ORE","world","getCenterWorld2D","placeDown","items","itemsOnSite","publishEvent","materials","placeMaterial","position2D","clear","neighbors","find","n","site","isWalkable","WALL_TYPE","SurfaceGeometry","wallType","topLeftVertex","topRightVertex","bottomRightVertex","bottomLeftVertex","topLeftHeight","topRightHeight","bottomRightHeight","bottomLeftHeight","uvOffset","INVERTED_CORNER","WALL","WEIRD_CREVICE","Boolean","uv","bufferVertices","bufferNormals","addFaceAndNormals","normal","subVectors","cross","normalize","uvIndexes","bufferVertexUvs","i","bufferGeometry","BufferAttribute","Float32Array","copyVector3sArray","copyVector2sArray","BuildPlacementMarkerMesh","sceneMgr","standardColor","geometry","shininess","transparent","color","visible","primaryPosition","multiplyScalar","applyAxisAngle","isValid","setHex","getSurfaceFromWorld","create","BuildPlacementMarker","worldMgr","group","markers","buildingMarkerPrimary","buildingMarkerSecondary","powerPathMarkerPrimary","powerPathMarkerSecondary","waterPathMarker","sdx","sdz","lastCheck","buildModeSelection","buildingMarkerColor","pathMarkerColor","waterMarkerColor","addMarker","marker","worldPosition","updateAllMarker","markAsValid","hideAllMarker","getFloorPosition","sdxv","sdzv","abs","sign","atan2","updateState","secondaryBuildingPart","primaryPowerPath","secondaryPowerPath","waterPathSurface","allSurfacesAreGround","barrierLocations","getBarrierLocations","CostCrystal","neededOre","CostOre","closestToolstation","getClosestBuildingByType","getCenterWorld","spawnBarriers","spawnMaterials","centerPrimary","barrierOffset","centerSecondary","dx","dy","GetToolPathTarget","RaiderJob","raider","GetToolJob","toolstation","getPathTarget","getBuildingsByType","addTool","MoveJob","GameSelection","added","syncSelection","deselect","isInSelection","select","SoundManager","Sample","before","after","RAIDER","VEHICLE","BUILDING","SURFACE","isPrepared","setJob","getRequiredTool","raiderGridSize","raiderTarget","divideScalar","addScalar","vehicleGridSize","vehicleTarget","pathTo","node","curr","path","unshift","astar","graph","start","cleanDirty","heuristic","heuristics","manhattan","closest","openHeap","BinaryHeap","closestNode","h","markDirty","size","currentNode","pop","closed","il","neighbor","isWall","gScore","g","getCost","beenVisited","visited","rescoreElement","pos0","pos1","D2","sqrt","d1","d2","Graph","gridIn","nodes","grid","dirtyNodes","diagonal","row","GridNode","init","cleanNode","ret","weight","graphString","rowDebug","join","fromNeighbor","scoreFunction","content","sinkDown","bubbleUp","parentN","elemScore","child2N","child1N","child1Score","swap","child1","child2","WorldLocationEvent","CrystalFoundEvent","LandslideEvent","RaiderDiscoveredEvent","DynamiteActivity","Normal","TickDown","CarryJob","targets","actualTarget","isInvalid","findCarryTargets","getPriorityIdentifier","unAssign","getDropAction","canGatherItem","headTowards","dropItem","gatherItem","CarryDynamiteJob","dynamite","targetSurface","collapse","ClearRubbleJob","lastRubblePositions","rubblePositions","surfaceRubblePositions","d","equals","reduceRubble","clearRubbleJob","aiPriorityClearing","SurfacePathTarget","DrillJob","digPositions","getDigPositions","surfaceDigPositions","onDrillComplete","aiPriorityDestruction","drillTimeInMsPerType","drillTime","drillTimeEntry","drillTimeMs","warn","ReinforceJob","reinforce","aiPriorityReinforce","SceneEntity","floorOffset","pickSphere","selectionFrame","boundingSphere","state","setFromObject","getBoundingSphere","radius","lookAt","applyMatrix4","makeScale","pickSphereDiameter","pickSphereHeightOffset","getBoundingSphereCenter","pickSphereRadius","userData","createSelectionFrame","center","getCenter","pickSphereCenter","selectionFrameTextureSize","ctx","fillStyle","strength","round","fillRect","selectionFrameTexture","canvas","selectionMaterial","depthTest","selectionFrameSize","loop","audio","listener","setRefDistance","then","audioBuffer","setBuffer","onEnded","catch","radHeading","setHeading","scene","activity","getDefaultActivity","CrystalSceneEntity","mesh2","ResourceManager","getLwoModel","getMaterials","blending","depthWrite","mesh","emissive","BuildingActivity","Explode","Unpowered","CarryPathTarget","BuildingCarryPathTarget","getDropPosition2D","ORE_REFINERY","animation","addItemToStorage","SiteCarryPathTarget","headingOnSite","addItem","MaterialEntity","positionAsPathTargets","Crystal","sites","needs","getRandomDropPosition","powerStations","PowerCrystal","aiPriorityCrystal","AnimatedSceneEntity","aeFilename","animationEntityType","getAnimationEntityType","lActivityKey","carriedChildren","children","DynamiteSceneEntity","DYNAMITE","OreSceneEntity","Ore","oreRefineries","aiPriorityOre","PathMap","PredugMap","Surface","heightOffset","containedOres","containedCrystals","selected","drillJob","reinforceJob","dynamiteJob","surfaceRotation","seamLevel","needsMeshUpdate","topLeftHeightOffset","topRightHeightOffset","bottomRightHeightOffset","bottomLeftHeightOffset","fence","hasPower","setDiscovered","floors","others","getSurface","caveFound","shift","o","isSupported","discoverSurface","drillPosition","vec","rotateAround","crystal","cancelJobs","removeFallInOrigin","discover","dropContainedOre","surf","updateSurfaceMeshes","playPositionalSample","dropAmount","safeRemoveJob","updateJobColor","updateTexture","surfLeft","surfTopLeft","surfTop","surfTopRight","surfRight","surfBottomRight","surfBottom","surfBottomLeft","isHighGround","surf1","surf2","surf3","force","surf0","avgHeight","args","reduce","l","updateGeometry","cancelReinforceJobs","updatePathfinding","getPathfindingWalkWeight","graphWalk","graphDrive","getPathfindingDriveWeight","graphFly","getPathFindingFlyWeight","graphSwim","getPathFindingSwimWeight","textureName","textureSet","texturebasename","updatePowerPathTexture","CORNER","forEachMaterial","dispose","texture","getTexture","isPath","bottom","pathSum","floorGroup","isSelectable","blocksPathSurface","digPosition","intersect","intersectObject","terrainHeight","point","worldX","worldZ","sx","sy","dy0","interpolate","dy1","y0","y1","containedOre","oldSurfaceType","recursive","setHasPower","targetBuilding","getHeading","sample","AnimationGroup","lwsFilepath","audioListener","getResource","LWSCLoader","parse","frame","polyPart","parentInd","FallIn","source","restartTimeout","fallinTimeout","createFallIn","TerrainPath","locations","lengthSq","distanceToSquared","Terrain","width","height","roofGroup","cachedWalkPaths","cachedDrivePaths","cachedFlyPaths","cachedSwimPaths","fallIns","fallInGroups","setScalar","getSurfaceFromWorldXZ","getSurfaceOrNull","updateMesh","updateWorldMatrix","resetGraphWalk","findPath","cachedPaths","gridSize","maxRandomOffset","gridStart","gridEnd","cacheIdentifier","resultPath","startNode","endNode","freshPath","search","each","fallinLevel","originPos","targetPos","findFallInOrigin","findFallInTarget","fallinPosition","fallinGrp","rotateOnAxis","startAnimation","makeRubble","SceneManager","maxFps","debugHelper","renderer","antialias","setClearColor","camera","controls","mouseButtons","LEFT","MIDDLE","RIGHT","listenToKeyEvents","keyPanSpeed","rx","ry","raycaster","setFromCamera","getSelection","intersectObjects","isEmpty","intersects","object","vehicle","getEntity","r1x","r1y","r2x","r2y","startPoint","endPoint","Number","EPSILON","updateProjectionMatrix","updateMatrixWorld","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","setFromMatrixPosition","matrixWorld","unproject","vectemp1","vectemp2","vectemp3","deep","MAX_VALUE","frustum","planes","setFromCoplanarPoints","isInFrustum","selectionCenter","getWorldPosition","containsPoint","levelConf","ambientRgb","cfg","maxAmbRgb","normalizedRgb","ambientColor","ambientLight","cursorTorchlight","distance","buildMarker","setBuildModeSelection","tileSize","blockSize","themeName","terrainMap","pathMap","surfaceMap","predugMap","cryOreMap","fallinMap","erodeMap","blockPointersMap","surfaceTypeNum","getByNum","predugLevel","CAVERN_EXPOSED","SLUG_HOLE_EXPOSED","SLUG_HOLE_HIDDEN","CAVERN_HIDDEN","pathMapLevel","RUBBLE","currentCryOre","weightsWalk","weightsDrive","weightsFly","weightsSwim","colWalk","colDrive","colFly","colSwim","w","setFallinLevel","loadTerrain","countDiggables","countCrystals","countOres","renderInterval","setInterval","animRequest","requestAnimationFrame","renderStart","render","renderDone","cancelAnimationFrame","meshRegistry","setSize","floorY","getFloorHeight","SceneMesh","registerMesh","verbose","animationClip","lines","lineIndex","split","trim","sceneFileVersion","parseInt","line","parseFrameBlock","subObj","parseObjectBlock","lineParts","parseLine","frameStep","slice","nameParts","lenInfos","lenFrames","setFrameAndFollowing","numOfInformationChannels","numOfKeyframes","frameNum","setOpacityAndFollowing","fromArray","AnimEntityLoader","cfgRoot","knownAnimations","rootKey","lwoFilename","polyKey","parseAnimations","parseUpgrades","match","parseActivity","finalizeAnimations","activityName","keyName","act","lActivityName","file","isLws","substr","levelKey","upgradeValue","upgradeName","resolveAnimationBodies","joint","applyDefaultUpgrades","upgrades0000","upgrade","lwoModel","SequenceTextureMaterial","side","alphaToCoverage","textures","seqNum","setTextures","addedSeqNum","SURF_VTRN","getVector3AtOffset","view","offset","vector","getFloat32","LWOLoader","meshPath","entityPath","vertices","indices","uvs","chunkOffset","chunkSize","numVertices","vertexIndex","vertexOffset","buffer","textChunk","Uint8Array","totalNumIndices","numIndices","getInt16","materialIndex","addGroup","currentIndex","Uint16Array","faceIndices","Int16Array","COUNTER_CLOCKWISE","getUint8","materialName","textureFlags","textureSize","textureCenter","subChunkOffset","subChunkType","getInt32","subChunkSize","currentOffset","colorArray","flags","getUint16","refractiveIndex","refractionRatio","edgeTransparencyThreshold","maxSmoothAngle","luminosity","emissiveIntensity","diffuse","specular","reflection","reflectivity","transparency","vLuminosity","vDiffuse","vSpecular","textureTypeName","toArray","textureColorArray","textureValue","textureFilepath","lTextureFilename","hasSequence","endsWith","sequenceBaseFilepath","getTexturesBySequenceName","getMeshTexture","horizontalWrappingMode","parseWrappingMode","verticalWrappingMode","t","wrapS","wrapT","XAXIS_BIT","groups","uvIndex","u","planarMapUVS","DataView","getUint32","fileSize","byteLength","ID4_SIZE","magic","chunkType","parsePoints","parseSurfaceNames","parsePolygons","parseSurface","setIndex","computeVertexNormals","wrap","InitLoadingMessage","MoveState","GameResultState","ResourceCache","startLoading","msg","worker","onmessage","WorkerMessageType","assetNames","assetName","resourceByName","assetObj","sfxKeys","sfxKey","sfxByKey","onAssetLoaded","onMessage","text","configuration","loadDefaultCursor","onInitialLoad","totalResources","onCacheMissed","loadAllCursor","loadingTimeSeconds","onLoadDone","postMessage","basename","lBasename","res","textureFilename","lMeshFilepath","imgData","lEntityFilepath","getImgDataFromSharedPaths","needsUpdate","ugSharedFilename","worldSharedFilename","loadModels","lwoFilepath","lwoCache","lwoBuffer","Worker","EntityManager","buildingsUndiscovered","raidersUndiscovered","raidersInBeam","materialsUndiscovered","spiders","bats","rockMonsters","vehiclesUndiscovered","registerEventListener","deselectAll","buildingTypes","bt","getClosestBuilding","isTrainingSite","minDist","bPos","dist","minX","minZ","maxX","maxZ","numRaidersUndiscovered","removeInRect","createCarryJob","listing","onRemove","pos","OxygenCoef","getMaxRaiders","canTeleportIn","BeamUpAnimator","entity","animGroup","BarrierSceneEntity","Barrier","ElectricFenceSceneEntity","CarryFenceJob","ElectricFence","ELECTRIC_FENCE","BuildingPathTarget","BuildingEntity","teleport","powerSwitch","upgradeCostOre","upgradeCostBrick","crystalsInUse","inBeam","beamUpAnimator","pathTarget","flipXAxis","updatePowerState","worldPos","isPowered","setBuilding","hasMaxLevel","quantity","turnPowerOn","turnPowerOff","powered","EngineSound","engineSound","playPositionalAudio","disableTeleportIn","getSurfaceFromWorld2D","secondaryOffset","pathOffset","createPickSphere","PickSphere","onPlaceDown","Barracks","Docks","Geodome","GunStation","GUNSTATION","OreRefinery","PowerStation","Powerstation","operating","beamListing","walkOutPos","RaiderOnlyTeleport","SmallTeleport","isSmall","HOVERBOARD","SMALL_TRUCK","SMALL_CAT","SMALL_DIGGER","SMALL_MLP","SMALL_HELI","LargeTeleport","isLarge","BULLDOZER","WALKER_DIGGER","LARGE_MLP","LARGE_DIGGER","LARGE_CAT","TeleportBig","TELEPORT_BIG","TeleportBIG","TeleportPad","Toolstation","Upgrade","BuildingFactory","PowerPathBuildingSite","EatJob","hungerLevel","TrainRaiderJob","getWorkplaces","getTrainingTargets","addTraining","UpgradeRaiderJob","VehicleCallManJob","addDriver","getRequiredTraining","aiPriorityGetIn","VehicleActivity","FulfillerSceneEntity","carriedEntity","dropEntity","EntityStep","targetReached","MovableEntity","currentPath","TARGET_UNREACHABLE","paths","findPathToTarget","sort","step","determineStep","getFocusPoint","TARGET_REACHED","firstLocation","getRouteActivity","MOVED","targetWorld","stepLengthSq","entitySpeed","getSpeed","entitySpeedSq","clampLength","FulfillerEntity","followUpJob","pickupEntity","workAudio","moveToClosestTarget","setActualWorkplace","work","carryItem","getCarryItem","getPositionAsPathTargets","pickupItem","isReadyToComplete","workActivity","getWorkActivity","completeJob","getWorkDuration","VehicleEntity","findDrivePath","dropDriver","beamUp","getDriverActivity","BullDozer","Bulldozer","LargeCat","findSwimPath","LargeDigger","LargeMlp","LargeMLP","SmallCat","SmallDigger","SmallHeli","findFlyPath","SmallMlp","Smallmlp","SmallTruck","WalkerDigger","walkerLegs","GuiManager","gameLayerCanvas","buildingCycleIndex","spawnFence","increase","requestedRaiders","createDrillJob","createReinforceJob","createDynamiteJob","createClearRubbleJob","setPowerSwitch","isDriving","createBuildingFromType","cancelSite","pads","teleportPad","createVehicleFromType","zoom","zoomInEvent","WheelEvent","deltaY","dispatchEvent","ownerDocument","cycleBuilding","offsetTargetToCamera","rotationIndex","GameResult","numBuildings","numMaxRaiders","gameTimeSeconds","elapsedGameTimeMs","MonsterActivity","RockMonsterActivity","Emerge","Enter","Gather","Throw","Crumble","Stamp","Rest","ThrowMan","HitHard","WakeUp","Monster","Bat","BAT","findTarget","currentCenter","targetX","targetZ","IceMonster","ICE_MONSTER","LavaMonster","LAVA_MONSTER","RockMonster","ROCK_MONSTER","SmallSpider","SMALL_SPIDER","idleTimer","onDeath","Raider","tools","trainings","slipped","Pilot","findWalkPath","RouteSpeed","isOnPath","PathCoef","isOnRubble","spider","slip","has","canDrill","MOUSE_BUTTON","POINTER_EVENT","KEY_EVENT","Supervisor","jobs","priorityIndexList","assignJobsTimer","checkClearRubbleTimer","cancel","assignJobs","checkUnclearedRubble","availableJobs","j","isEnabled","getPriority","unemployedRaider","closestRaider","closestRaiderIndex","minDistance","closestToolRaider","closestToolRaiderIndex","minToolDistance","requiredTool","closestTrainingRaider","closestTrainingRaiderIndex","minTrainingDistance","closestTrainingArea","requiredTraining","hasRequiredTool","pathToJob","pathToTrainingSite","pathToToolstation","getWalkOutSurface","startSurface","rad","priorityIdentifier","enabled","NerpRunner","debug","onLevelEnd","registers","fill","timers","scriptLines","statements","macrosByName","labelsByName","halted","programCounter","messages","messagePermit","execute","register","num","isNaN","Error","checkRegister","checkRegisterValue","Date","getTime","FAILED","messagesAllowed","typeName","setLevel","setBuildingsUpgradeLevel","arg1","arg2","arg3","messageNumber","arrowDisabled","txt","blockNum","methodName","methodArgs","setRegisterMatch","setR","addRegisterMatch","addR","getRegisterMatch","getR","setTimerMatch","setTimer","getTimerMatch","getTimer","lMethodName","memberName","getOwnPropertyNames","apply","conditionResult","executeStatement","expression","invoke","argValues","callMethod","comparator","jump","statement","label","NerpParser","nerpScript","nerpRunner","includeName","includedRunner","concat","firstLine","macroLines","mLine","append","macroLine","macroCall","replaceMacros","labelMatch","preProcess","labelName","macro","RegExp","number","opSplit","brackets","spaceSplit","jumpMatch","WorldManager","jobSupervisor","masterTimeout","oxygenRate","spawnRaiderTimer","pause","unPause","reward","quota","caverns","nerpFile","nerpMessageFile","setTimeout","startUpdate","window","performance","now","updateOxygen","checkSpawnRaiders","updateDurationMs","sleepForMs","sum","getOxygenSum","rateMultiplier","valuePerSecond","msToSeconds","diff","hasMaxRaiders","teleportBuilding","findTeleportBuilding","teleportIn","ScreenLayer","alpha","withContext","background","context","getContext","zIndex","layerA","layerB","aIndex","bIndex","onRedraw","isActive","bind","reset","redraw","windowX","windowY","clientRect","getBoundingClientRect","Promise","resolve","ScaledLayer","fixedWidth","fixedHeight","updateScale","scaleX","scaleY","cx","cy","toCanvasCoords","resize","GameKeyboardEvent","eventEnum","bubbles","code","GamePointerEvent","clientX","clientY","pointerType","ctrlKey","metaKey","shiftKey","GameWheelEvent","deltaX","deltaZ","EventManager","screen","gameCanvasContainer","isInRect","preventDefault","MOVE","DOWN","UP","eventType","nonBubblingClone","activeLayers","layers","compareZ","publishPointerEvent","publishKeyEvent","publishWheelEvent","handlePointerEvent","consumed","handleKeyEvent","handleWheelEvent","CursorLayer","currentCursor","timedCursor","cursorTimeout","activeCursor","changeCursor","disableAnimation","determineCursor","hasBuildModeSelection","setCursor","that","getCursor","enableAnimation","BaseScreen","ratio","focus","eventMgr","onWindowResize","cursorLayer","addLayer","layer","setZIndex","maxWidth","offsetWidth","maxHeight","offsetHeight","idealHeight","oldCanvas","removeChild","firstLayer","rect","GameLayer","rightDown","terrainIntersectionPoint","getTerrainIntersectionPoint","setTorchPosition","MAIN","createBuildingSite","SECONDARY","handleSecondaryClickForSelection","PointerEvent","getFirstByRay","selectedRaiders","manVehicleJob","closestTrainingSite","getClosestTrainingSite","assignSurfaceJob","clearJob","assignMoveJob","KeyboardEvent","generateUUID","OffscreenLayer","resolveCallbackByEventId","sendMessage","response","eventResponse","eventId","eventConsumed","delete","gameEvent","registerWorkerListener","message","transfer","transferControlToOffscreen","canvasX","canvasY","sendEventMessage","inputEvent","GuiMainLayer","onOptionsShow","messageState","OverlayLayer","onSetSpaceToContinue","onAbortGame","onRestartGame","objectiveText","objectiveBackImgCfg","SelectionLayer","selectStart","startSelection","changeSelection","selectEntities","screenX","screenY","clearRect","strokeStyle","lineWidth","strokeRect","entities","getSelectionByRay","getEntitiesInFrustum","GameScreen","gameLayer","selectionLayer","guiLayer","overlayLayer","guiMgr","showOptions","setSpaceToContinue","QUIT","restartLevel","levelName","setupAndStartLevel","fullName","setup","setupScene","objective","objectiveImage640x480","priorities","objectListConf","oListFile","values","olObject","BRICK","TV_CAMERA","xPos","yPos","buildingType","cameraOffset","cameraPos","disableStartTeleport","bat","smallDigger","rockMonster","loadObjectList","startScene","disposeScene","parseLabel","MainMenuBaseItem","scrollAffected","needsRedraw","hover","pressed","actionName","targetIndex","onHoverChange","MainMenuIconButton","imgNormal","imgHover","imgPressed","tooltip","getImage","autoCenter","draw","drawImage","MainMenuLabelButton","labelImgLo","labelImgHi","loFont","createTextImage","hiFont","MainMenuLayer","menuCfg","scrollY","scrollSpeedY","scrollInterval","getBitmapFont","menuImage","titleImage","itemsLabel","displayTitle","setScrollY","toScaledCoords","hovered","setReleased","absY","checkHover","canScroll","scrollAreaHeight","setScrollSpeedY","checkSetPressed","showMainMenu","selectLevel","pow","scrollYBefore","MainMenuLevelButton","levelCfg","imgActive","imgInactive","imgCross","unlocked","frontEndX","frontEndY","menuBMP","frontEndOpen","MainMenuPanel","area","putImageData","getImageData","MainMenuWindow","font","imgFirstLine","imgSecondLine","LevelSelectLayer","modeLevel","levelsCfg","levelTextCfg","LevelTextCfg","panelImgData","panelPos","levelTextWindow","getDefaultFont","setFirstLine","tutorial","levelsByName","levelButton","setSecondLine","winCfg","panelCfg","MainMenuScreen","onLevelSelected","menus","title","menu","RewardScreenButton","conf","imgNormalFilepath","imgHoverFilepath","imgPressedFilepath","imgDisabledFilepath","imgDisabled","RewardScreen","resultIndex","resultLastIndex","images","boxes","fonts","texts","uncoverTimeout","resultValues","titleFont","backgroundImg","wallpaper","filePath","boxImages","fontKey","labelFont","backFont","resultsLayer","btnSave","btnAdvance","descriptionTextLayer","btnLayer","saveButton","advanceButton","onAdvance","resultText","quitText","completeText","failedText","percentString","timeString","calcScore","rewardConfig","importance","scoreCrystals","crystals","Infinity","scoreTimer","scoreCaverns","scoreConstructions","constructions","scoreOxygen","oxygen","scoreFigures","figures","uncoverResult","gameResultTextImg","box","levelFullNameImg","vertSpacing","descriptionTextImg","textPos","tx","ty","actual","lessIsMore","padding","seconds","ss","padLeft","minutes","mm","levelFullName","loadingScreen","assetIndex","setLoadingMessage","fillText","imgBackground","imgProgress","imgLoading","loadingBarWidth","wadFileSelectModal","githubBox","clearCacheButton","startLoadingFromUrl","enableGraphicMode","increaseLoadingState","mainMenuScreen","gameScreen","rewardScreen","startLevel","showLevelSelection","setGameResult","params","URLSearchParams","entry","startLoadingFromCache","DEV_MODE","WAD_CACHE_DB_NAME","JOB_SCHEDULE_INTERVAL","CHECK_CLEAR_RUBBLE_INTERVAL","CHECK_SPAWN_RAIDER_TIMER","MAX_RAIDER_BASE","ADDITIONAL_RAIDER_PER_SUPPORT","HEIGHT_MULTIPLIER","SEQUENCE_TEXTURE_INTERVAL_MS","KEY_PAN_SPEED","SPIDER_SLIP_RANGE_SQ","ITEM_ACTION_RANGE_SQ","UPDATE_INTERVAL_MS","SPRITE_RESOLUTION_WIDTH","SPRITE_RESOLUTION_HEIGHT","TILESIZE","NATIVE_FRAMERATE","NATIVE_UPDATE_INTERVAL"],"mappings":"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","file":"112.index.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".clear-cache-box {\\n    z-index: 2000;\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./site/clearcache/clearCacheButton.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;IACb,kBAAkB;IAClB,OAAO;IACP,MAAM;AACV\",\"sourcesContent\":[\".clear-cache-box {\\n    z-index: 2000;\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".github-box {\\n    z-index: 2000;\\n    padding: 16px;\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    background-color: rgba(0, 0, 0, 0.6);\\n    color: #fff;\\n}\\n\\n.github-box a {\\n    color: #fff;\\n    text-decoration: none;\\n    padding: 8px;\\n}\\n\\n.github-box a:hover {\\n    color: #fff;\\n    text-decoration: underline;\\n}\\n\\n.github-logo {\\n    width: 16px;\\n    height: 16px;\\n    margin-right: 8px;\\n    vertical-align: middle;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./site/github/github.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;IACb,aAAa;IACb,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,oCAAoC;IACpC,WAAW;AACf;;AAEA;IACI,WAAW;IACX,qBAAqB;IACrB,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,0BAA0B;AAC9B;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,sBAAsB;AAC1B\",\"sourcesContent\":[\".github-box {\\n    z-index: 2000;\\n    padding: 16px;\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    background-color: rgba(0, 0, 0, 0.6);\\n    color: #fff;\\n}\\n\\n.github-box a {\\n    color: #fff;\\n    text-decoration: none;\\n    padding: 8px;\\n}\\n\\n.github-box a:hover {\\n    color: #fff;\\n    text-decoration: underline;\\n}\\n\\n.github-logo {\\n    width: 16px;\\n    height: 16px;\\n    margin-right: 8px;\\n    vertical-align: middle;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!./clearCacheButton.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { WAD_CACHE_DB_NAME } from '../../src/params'\nimport './clearCacheButton.css'\n\nexport class ClearCacheButton {\n\n    rootElement: HTMLDivElement\n\n    constructor(parentId: string) {\n        this.rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        this.rootElement.classList.add('clear-cache-box')\n\n        const button = this.rootElement.appendChild(document.createElement('button'))\n        button.classList.add('btn', 'btn-info')\n        button.innerText = 'Clear cached wad files and restart'\n        button.onclick = () => {\n            indexedDB.deleteDatabase(WAD_CACHE_DB_NAME)\n            location.reload()\n        }\n    }\n\n    hide() {\n        this.rootElement.style.visibility = 'hidden'\n    }\n\n}\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!./github.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import './github.css'\nimport GithubIcon from './github.png'\n\nexport class GithubBox {\n\n    rootElement: HTMLDivElement\n\n    constructor(parentId: string) {\n        this.rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        this.rootElement.classList.add('github-box')\n\n        const link = this.rootElement.appendChild(document.createElement('a'))\n        link.href = 'https://github.com/scarabol/rock-raiders-web'\n\n        const img = link.appendChild(document.createElement('img'))\n        img.src = GithubIcon\n        img.classList.add('github-logo')\n        img.alt = 'Fork on GitHub'\n\n        const txt = link.appendChild(document.createElement('span'))\n        txt.textContent = img.alt\n    }\n\n    hide() {\n        this.rootElement.style.visibility = 'hidden'\n    }\n\n}\n","import { Modal } from 'bootstrap'\n\nexport class WadFileSelectionModal {\n\n    public onStart: (wad0Url, wad1Url) => any = null\n\n    private readonly modal: Modal\n\n    constructor(parentId: string) {\n        const rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        rootElement.classList.add('modal')\n        rootElement.tabIndex = -1\n        rootElement.setAttribute('role', 'dialog')\n        rootElement.setAttribute('aria-hidden', 'true')\n\n        const modalDialog = rootElement.appendChild(document.createElement('div'))\n        modalDialog.classList.add('modal-dialog')\n        rootElement.setAttribute('role', 'document')\n\n        const modalContent = modalDialog.appendChild(document.createElement('div'))\n        modalContent.classList.add('modal-content')\n\n        const modalHeader = modalContent.appendChild(document.createElement('div'))\n        modalHeader.classList.add('modal-header')\n        const modalTitle = modalHeader.appendChild(document.createElement('h5'))\n        modalTitle.classList.add('modal-title')\n        modalTitle.innerText = 'Load .wad files'\n        modalTitle.id = 'wadfileSelectModalLabel'\n        rootElement.setAttribute('aria-labelledby', modalTitle.id)\n\n        const modalBody = modalContent.appendChild(document.createElement('div'))\n        modalBody.classList.add('modal-body')\n\n        const hint = modalBody.appendChild(document.createElement('p'))\n        hint.innerText = 'Assets not included! In order to play the game, please select the game files.'\n\n        const navTabs = modalBody.appendChild(document.createElement('nav'))\n        const navTabList = navTabs.appendChild(document.createElement('div'))\n        navTabList.id = 'nav-tab'\n        navTabList.classList.add('nav', 'nav-tabs')\n        navTabList.setAttribute('role', 'tablist')\n\n        const navFileBtn = WadFileSelectionModal.appendNavButton(navTabList, true, 'nav-file-tab', 'nav-file', 'Local files (recommended)')\n        const navUrlBtn = WadFileSelectionModal.appendNavButton(navTabList, false, 'nav-url-tab', 'nav-url', 'Online from URL')\n\n        const navTabContent = modalBody.appendChild(document.createElement('div'))\n        navTabContent.classList.add('tab-content')\n        this.appendNavFileTab(navTabContent, navFileBtn.id)\n        this.appendNavUrlTab(navTabContent, navUrlBtn.id)\n\n        // rootElement has to be a valid bootstrap HTML modal before we can instantiate it\n        this.modal = new Modal(rootElement, {backdrop: 'static', keyboard: false})\n    }\n\n    private static appendNavButton(parent: HTMLDivElement, active: boolean, id: string, controlTarget: string, innerText: string) {\n        const navBtn = parent.appendChild(document.createElement('button'))\n        navBtn.classList.add('nav-link')\n        if (active) navBtn.classList.add('active')\n        navBtn.id = id\n        navBtn.setAttribute('data-bs-toggle', 'tab')\n        navBtn.setAttribute('data-bs-target', '#' + controlTarget)\n        navBtn.type = 'button'\n        navBtn.setAttribute('role', 'tab')\n        navBtn.setAttribute('aria-controls', controlTarget)\n        navBtn.setAttribute('aria-selected', String(active))\n        navBtn.innerText = innerText\n        return navBtn\n    }\n\n    private appendNavFileTab(parent: HTMLDivElement, labelledBy: string) {\n        const navFileTab = WadFileSelectionModal.appendNavTab(parent, true, 'nav-file', labelledBy)\n\n        const wad0File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad0-file', 'LegoRR0.wad')\n        const wad1File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad1-file', 'LegoRR1.wad')\n\n        const btnStartFile = navFileTab.appendChild(document.createElement('button'))\n        btnStartFile.type = 'submit'\n        btnStartFile.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartFile.id = 'button-start-file'\n        btnStartFile.innerText = 'Start Game'\n        btnStartFile.addEventListener('click', () => {\n            btnStartFile.disabled = true\n            const wad0FileUrl = URL.createObjectURL(wad0File.files[0])\n            const wad1FileUrl = URL.createObjectURL(wad1File.files[0])\n            this.onStart(wad0FileUrl, wad1FileUrl)\n        })\n    }\n\n    private static appendWadFileGroup(parent: HTMLDivElement, id: string, filename: string) {\n        const wadFileGroup = parent.appendChild(document.createElement('div'))\n        wadFileGroup.classList.add('my-3')\n        const wadFileLabel = wadFileGroup.appendChild(document.createElement('label'))\n        wadFileLabel.setAttribute('for', id)\n        wadFileLabel.classList.add('form-label')\n        wadFileLabel.innerHTML = 'Select <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadFileInput = wadFileGroup.appendChild(document.createElement('input'))\n        wadFileInput.type = 'file'\n        wadFileInput.classList.add('form-control')\n        wadFileInput.id = id\n        wadFileInput.required = true\n        return wadFileInput\n    }\n\n    private appendNavUrlTab(parent: HTMLDivElement, labelledBy: string) {\n        const navUrlTab = WadFileSelectionModal.appendNavTab(parent, false, 'nav-url', labelledBy)\n\n        const urlHint = navUrlTab.appendChild(document.createElement('div'))\n        urlHint.classList.add('my-3')\n        urlHint.innerText = 'Direct links with correct Allow-Origin-CORS-Headers required here.'\n\n        const wad0Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad0-url', 'LegoRR0.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n        const wad1Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad1-url', 'LegoRR1.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n\n        const btnStartUrl = navUrlTab.appendChild(document.createElement('button'))\n        btnStartUrl.type = 'submit'\n        btnStartUrl.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartUrl.id = 'button-start-url'\n        btnStartUrl.innerText = 'Start Game'\n        btnStartUrl.addEventListener('click', () => {\n            btnStartUrl.disabled = true\n            // XXX show loading progress for WAD files\n            this.onStart(wad0Url.value, wad1Url.value)\n        })\n    }\n\n    private static appendNavTab(parent: HTMLDivElement, active: boolean, id: string, labelledBy: string) {\n        const navTab = parent.appendChild(document.createElement('div'))\n        navTab.classList.add('tab-pane', 'fade')\n        if (active) navTab.classList.add('show', 'active')\n        navTab.id = id\n        navTab.setAttribute('role', 'tabpanel')\n        navTab.setAttribute('aria-labelledby', labelledBy)\n        return navTab\n    }\n\n    private static appendWadUrlGroup(parent: HTMLDivElement, id: string, filename: string, example: string) {\n        const wadUrlGroup = parent.appendChild(document.createElement('div'))\n        wadUrlGroup.classList.add('my-3')\n        const wadUrlLabel = wadUrlGroup.appendChild(document.createElement('label'))\n        wadUrlLabel.setAttribute('for', id)\n        wadUrlLabel.classList.add('form-label')\n        wadUrlLabel.innerHTML = 'Enter url for <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadUrlInput = wadUrlGroup.appendChild(document.createElement('input'))\n        wadUrlInput.type = 'url'\n        wadUrlInput.classList.add('form-control')\n        wadUrlInput.id = id\n        wadUrlInput.required = true\n        wadUrlInput.value = example\n        return wadUrlInput\n    }\n\n    public show() {\n        this.modal.show()\n    }\n\n    public hide() {\n        this.modal.hide()\n    }\n\n}\n","export function getPath(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '')\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/')\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max)\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2\n}\n\nexport function clearTimeoutSafe(timeout: NodeJS.Timeout) {\n    if (timeout) clearTimeout(timeout)\n    return null\n}\n\nexport function clearIntervalSafe(interval: NodeJS.Timeout) {\n    if (interval) clearInterval(interval)\n    return null\n}\n\ndeclare global {\n\n    interface Array<T> {\n        add(element: T): void\n\n        remove(element: T): void\n\n        removeLast(element: T): void\n\n        last(): T\n\n        count(callback: (element: T) => boolean): number\n\n        partition(filter: (element: T) => boolean): [T[], T[]]\n\n        random(): T\n    }\n\n    interface Map<K, V> {\n        getOrUpdate(key: K, updateCallback: () => V): V\n    }\n\n    interface String {\n        equalsIgnoreCase(other: string): boolean\n    }\n\n}\n\nArray.prototype.add = function <T>(element: T): void {\n    const index = this.indexOf(element)\n    if (index === -1) this.push(element)\n}\n\nArray.prototype.remove = function <T>(element: T): void {\n    const index = this.indexOf(element)\n    if (index !== -1) this.splice(index, 1)\n}\n\nArray.prototype.removeLast = function <T>(element: T): void {\n    const lastIndex = this.indexOf(element)\n    if (lastIndex !== -1) this.splice(lastIndex, 1)\n}\n\nArray.prototype.last = function <T>(): T {\n    return this.length > 0 ? this[this.length - 1] : undefined\n}\n\nArray.prototype.count = function <T>(callback: (element: T) => boolean): number {\n    let counter = 0\n    this.forEach((e) => callback(e) && counter++)\n    return counter\n}\n\nArray.prototype.partition = function <T>(filter: (element: T) => boolean): [T[], T[]] {\n    const left: T[] = [], right: T[] = []\n    this.forEach((a) => filter(a) ? left.push(a) : right.push(a))\n    return [left, right]\n}\n\nArray.prototype.random = function <T>(): T {\n    if (!this.length) return undefined\n    return this[getRandom(this.length - 1)]\n}\n\n// noinspection JSUnusedGlobalSymbols\nMap.prototype.getOrUpdate = function <K, V>(key: K, updateCallback: () => V): V {\n    let value = this.get(key)\n    if (value === undefined) {\n        value = updateCallback()\n        this.set(key, value)\n    }\n    return value\n}\n\nString.prototype.equalsIgnoreCase = function (other: string): boolean {\n    return this.toLowerCase() === other?.toLowerCase()\n}\n","export class GameState {\n\n    static numCrystal: number = 0\n    static numOre: number = 0\n    static numBrick: number = 0\n    static usedCrystals: number = 0\n    static neededCrystals: number = 0\n    static airLevel: number = 1 // air level in percent from 0 to 1.0\n    static totalCrystals: number = 0\n    static totalOres: number = 0\n    static totalDiggables: number = 0\n    static remainingDiggables: number = 0\n    static totalCaverns: number = 0\n    static discoveredCaverns: number = 0\n\n    static reset() {\n        this.numCrystal = 0\n        this.numOre = 0\n        this.numBrick = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.airLevel = 1\n        this.totalCrystals = 0\n        this.totalOres = 0\n        this.totalDiggables = 0\n        this.remainingDiggables = 0\n        this.totalCaverns = 0\n        this.discoveredCaverns = 0\n    }\n\n}\n","import { Mesh } from 'three'\nimport { SceneMesh } from '../../../scene/SceneMesh'\nimport { AnimationEntityUpgrade } from './AnimationEntityUpgrade'\nimport { AnimClip } from './AnimClip'\n\nexport class AnimationEntityType {\n\n    scale: number = 1\n    carryNullName: string = ''\n    carryNullFrames: number = 0\n    depositNullName: string = ''\n    toolNullName: string = ''\n    wheelMesh: Mesh = null\n    wheelRadius: number = 1\n    wheelNullName: string = null\n    drillNullName: string = null\n    driverNullName: string = null\n    cameraNullName: string = null\n    cameraNullFrames: number = null\n    mediumPolyBodies: Map<string, SceneMesh> = new Map()\n    highPolyBodies: Map<string, SceneMesh> = new Map()\n    fPPolyBodies: Map<string, SceneMesh> = new Map()\n    animations: Map<string, AnimClip> = new Map()\n    upgradesByLevel: Map<string, AnimationEntityUpgrade[]> = new Map()\n\n}\n","export class AnimationEntityUpgrade {\n\n    upgradeFilepath: string\n    upgradeNullName: string\n    upgradeNullIndex: number\n\n    constructor(upgradeFilepath: string, upgradeNullName: string, upgradeNullIndex: number) {\n        this.upgradeFilepath = upgradeFilepath\n        this.upgradeNullName = upgradeNullName\n        this.upgradeNullIndex = upgradeNullIndex\n    }\n}\n","export interface Updatable {\n\n    update(elapsedMs: number)\n\n}\n\nexport function updateSafe(updatable: Updatable, elapsedMs: number) {\n    try {\n        updatable.update(elapsedMs)\n    } catch (e) {\n        console.error(e)\n    }\n}\n","import { Group, PositionalAudio } from 'three'\nimport { SceneMesh } from '../../../scene/SceneMesh'\nimport { SequenceTextureMaterial } from '../../../scene/SequenceTextureMaterial'\nimport { updateSafe } from '../Updateable'\nimport { AnimSubObj } from './AnimSubObj'\n\nexport class AnimClip {\n\n    looping: boolean = false\n    transcoef: number = 1\n    firstFrame: number = null\n    lastFrame: number = null\n    framesPerSecond: number = null\n    bodies: AnimSubObj[] = []\n    polyList: SceneMesh[] = []\n    carryJoint: SceneMesh = null\n    depositJoint: SceneMesh = null\n    getToolJoint: SceneMesh = null\n    wheelJoints: SceneMesh[] = []\n    drillJoint: SceneMesh = null\n    driverJoint: SceneMesh = null\n    nullJoints: Map<string, SceneMesh[]> = new Map()\n    polyModel: Group = new Group()\n    sfxAudioByFrame: Map<number, PositionalAudio[]> = new Map()\n\n    timer: number = 0\n    currentFrame: number = null\n    onAnimationDone: () => any = null\n    durationTimeMs: number = null\n\n    start(onAnimationDone: () => any, durationTimeMs: number) {\n        this.timer = 0\n        this.currentFrame = this.firstFrame\n        this.onAnimationDone = onAnimationDone\n        this.durationTimeMs = durationTimeMs\n        this.updateBodiesAnimationFrame()\n    }\n\n    update(elapsedMs: number) {\n        this.polyList.forEach((m) => updateSafe(m, elapsedMs))\n        this.timer += elapsedMs\n        const msPerFrame = 1000 / this.framesPerSecond * (this.transcoef || 1)\n        const skippedFrames = Math.floor(this.timer / msPerFrame)\n        this.timer -= skippedFrames * msPerFrame\n        if (skippedFrames === 0) return\n        let nextFrame = this.currentFrame + skippedFrames\n        if (nextFrame <= this.lastFrame || !this.onAnimationDone || (this.durationTimeMs !== null && this.durationTimeMs > 0)) {\n            if (nextFrame > this.lastFrame) nextFrame = this.firstFrame\n            if (this.currentFrame === nextFrame) return\n            this.currentFrame = nextFrame\n            if (this.durationTimeMs !== null) this.durationTimeMs -= elapsedMs\n            this.updateBodiesAnimationFrame()\n        } else if (this.onAnimationDone) {\n            this.stopAudio()\n            this.onAnimationDone()\n        }\n    }\n\n    private updateBodiesAnimationFrame() {\n        if (this.polyList.length !== this.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        this.bodies.forEach((body: AnimSubObj, index) => {\n            const p = this.polyList[index]\n            p.position.copy(body.relPos[this.currentFrame]).sub(body.pivot)\n            p.rotation.copy(body.relRot[this.currentFrame])\n            p.scale.copy(body.relScale[this.currentFrame])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[this.currentFrame]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: SequenceTextureMaterial) => mat.setOpacity(opacity))\n                }\n            }\n        })\n        this.playAudio()\n    }\n\n    stop() {\n        this.stopAudio()\n    }\n\n    private playAudio() {\n        this.sfxAudioByFrame.getOrUpdate(this.currentFrame, () => []).forEach((a) => {\n            if (a.isPlaying) a.stop()\n            a.play()\n        })\n    }\n\n    private stopAudio() {\n        this.sfxAudioByFrame.forEach((f) => f.forEach((a) => a.isPlaying && a.stop()))\n    }\n\n}\n","import { Euler, MathUtils, Vector3 } from 'three'\nimport { SceneMesh } from '../../../scene/SceneMesh'\nimport degToRad = MathUtils.degToRad\n\nexport class AnimSubObj {\n\n    lowerName: string = ''\n    filename: string = ''\n    pivot: Vector3 = new Vector3(0, 0, 0)\n    relPos: Vector3[] = []\n    relRot: Euler[] = []\n    relScale: Vector3[] = []\n    opacity: number[] = []\n    parentObjInd: number = null\n    model: SceneMesh = null\n    isNull: boolean = false\n    sfxName: string = null\n    sfxFrames: number[] = []\n\n    radVec(degX: number, degY: number, degZ: number) {\n        return new Euler(degToRad(degY), degToRad(degX), degToRad(degZ), 'YXZ')\n    }\n\n    setFrameAndFollowing(animationFrameIndex: number, lastFrame: number, infos: number[]) {\n        this.relPos[animationFrameIndex] = new Vector3(infos[0], infos[1], infos[2])\n        this.relRot[animationFrameIndex] = this.radVec(infos[3], infos[4], infos[5])\n        this.relScale[animationFrameIndex] = new Vector3(infos[6], infos[7], infos[8])\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.relPos[c] = this.relPos[animationFrameIndex]\n            this.relRot[c] = this.relRot[animationFrameIndex]\n            this.relScale[c] = this.relScale[animationFrameIndex]\n        }\n    }\n\n    setOpacityAndFollowing(animationFrameIndex: number, lastFrame: number, value: number) {\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.opacity[c] = value\n        }\n    }\n\n}\n","const Stats = require('stats.js')\n\nexport class DebugHelper {\n\n    stats\n\n    constructor() {\n        this.stats = new Stats()\n        this.stats.setMode(0) // 0: fps, 1: ms\n\n        this.stats.domElement.style.position = 'absolute'\n        this.stats.domElement.style.left = '0px'\n        this.stats.domElement.style.top = '0px'\n\n        document.body.appendChild(this.stats.domElement)\n        this.hide()\n    }\n\n    show() {\n        this.stats.domElement.style.visibility = 'visible'\n    }\n\n    hide() {\n        this.stats.domElement.style.visibility = 'hidden'\n    }\n\n    renderStart() {\n        this.stats.begin()\n    }\n\n    renderDone() {\n        this.stats.end()\n    }\n\n}\n","export enum EntityType {\n\n    // RAIDER\n    PILOT,\n\n    // BUILDING\n    TOOLSTATION,\n    TELEPORT_PAD,\n    DOCKS,\n    POWER_STATION,\n    BARRACKS,\n    UPGRADE,\n    GEODOME,\n    ORE_REFINERY,\n    GUNSTATION,\n    TELEPORT_BIG,\n\n    // MONSTER\n    BAT,\n    SMALL_SPIDER,\n    ROCK_MONSTER,\n    ICE_MONSTER,\n    LAVA_MONSTER,\n\n    // MATERIAL\n    DYNAMITE,\n    ELECTRIC_FENCE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n\n    // VEHICLE\n    HOVERBOARD,\n    SMALL_DIGGER,\n    SMALL_TRUCK,\n    SMALL_CAT,\n    SMALL_MLP,\n    SMALL_HELI,\n    BULLDOZER,\n    WALKER_DIGGER,\n    LARGE_MLP,\n    LARGE_DIGGER,\n    LARGE_CAT,\n\n    // OTHERS\n    TV_CAMERA,\n\n}\n\nexport function getEntityTypeByName(type: string): EntityType {\n    if ('Pilot'.equalsIgnoreCase(type)) {\n        return EntityType.PILOT\n    } else if ('Toolstation'.equalsIgnoreCase(type)) {\n        return EntityType.TOOLSTATION\n    } else if ('TeleportPad'.equalsIgnoreCase(type)) {\n        return EntityType.TELEPORT_PAD\n    } else if ('Docks'.equalsIgnoreCase(type)) {\n        return EntityType.DOCKS\n    } else if ('PowerStation'.equalsIgnoreCase(type)) {\n        return EntityType.POWER_STATION\n    } else if ('Barracks'.equalsIgnoreCase(type)) {\n        return EntityType.BARRACKS\n    } else if ('Upgrade'.equalsIgnoreCase(type)) {\n        return EntityType.UPGRADE\n    } else if ('GEO-Dome'.equalsIgnoreCase(type)) {\n        return EntityType.GEODOME\n    } else if ('OreRefinery'.equalsIgnoreCase(type)) {\n        return EntityType.ORE_REFINERY\n    } else if ('GunStation'.equalsIgnoreCase(type)) {\n        return EntityType.GUNSTATION\n    } else if ('TeleportBIG'.equalsIgnoreCase(type)) {\n        return EntityType.TELEPORT_BIG\n    } else if ('Bat'.equalsIgnoreCase(type)) {\n        return EntityType.BAT\n    } else if ('SmallSpider'.equalsIgnoreCase(type)) {\n        return EntityType.SMALL_SPIDER\n    } else if ('RockMonster'.equalsIgnoreCase(type)) {\n        return EntityType.ROCK_MONSTER\n    } else if ('IceMonster'.equalsIgnoreCase(type)) {\n        return EntityType.ICE_MONSTER\n    } else if ('LavaMonster'.equalsIgnoreCase(type)) {\n        return EntityType.LAVA_MONSTER\n    } else if ('Dynamite'.equalsIgnoreCase(type)) {\n        return EntityType.DYNAMITE\n    } else if ('EletricFence'.equalsIgnoreCase(type)) {\n        return EntityType.ELECTRIC_FENCE\n    } else if ('PowerCrystal'.equalsIgnoreCase(type)) {\n        return EntityType.CRYSTAL\n    } else if ('Ore'.equalsIgnoreCase(type)) {\n        return EntityType.ORE\n    } else if ('Brick'.equalsIgnoreCase(type)) {\n        return EntityType.BRICK\n    } else if ('Barrier'.equalsIgnoreCase(type)) {\n        return EntityType.BARRIER\n    } else if ('Hoverboard'.equalsIgnoreCase(type)) {\n        return EntityType.HOVERBOARD\n    } else if ('SmallDigger'.equalsIgnoreCase(type)) {\n        return EntityType.SMALL_DIGGER\n    } else if ('SamllTruck'.equalsIgnoreCase(type)) {\n        return EntityType.SMALL_TRUCK\n    } else if ('SmallCat'.equalsIgnoreCase(type)) {\n        return EntityType.SMALL_CAT\n    } else if ('SmallMLP'.equalsIgnoreCase(type)) {\n        return EntityType.SMALL_MLP\n    } else if ('SmallHeli'.equalsIgnoreCase(type)) {\n        return EntityType.SMALL_HELI\n    } else if ('Bulldozer'.equalsIgnoreCase(type)) {\n        return EntityType.BULLDOZER\n    } else if ('WalkerDigger'.equalsIgnoreCase(type)) {\n        return EntityType.WALKER_DIGGER\n    } else if ('LargeMLP'.equalsIgnoreCase(type)) {\n        return EntityType.LARGE_MLP\n    } else if ('LargeDigger'.equalsIgnoreCase(type)) {\n        return EntityType.LARGE_DIGGER\n    } else if ('LargeCat'.equalsIgnoreCase(type)) {\n        return EntityType.LARGE_CAT\n    } else if ('TVCamera'.equalsIgnoreCase(type)) {\n        return EntityType.TV_CAMERA\n    } else {\n        console.error('Could not identify entity type from string: ' + type)\n        return null\n    }\n}\n","import { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class EventBus {\n\n    static eventListener = new Map<EventKey, ((event: GameEvent) => any)[]>()\n    static workerListener: ((event: GameEvent) => any)[] = []\n    static blockedEvents = []\n\n    static publishEvent(event: GameEvent) {\n        if (this.blockedEvents.includes(event.eventKey)) return // event is currently blocked from publishing\n        if (!event.isLocal) console.log('Event published: ' + EventKey[event.eventKey])\n        this.blockedEvents.push(event.eventKey)\n        this.workerListener.forEach((callback) => callback(event))\n        this.getListener(event.eventKey).forEach((callback) => callback(event))\n        this.blockedEvents.remove(event.eventKey)\n    }\n\n    static registerEventListener(eventKey: EventKey, callback: (GameEvent) => any) {\n        this.getListener(eventKey).push(callback)\n    }\n\n    private static getListener(eventKey: EventKey) {\n        return this.eventListener.getOrUpdate(eventKey, () => [])\n    }\n\n    static registerWorkerListener(callback: (GameEvent) => any) {\n        this.workerListener.push(callback)\n    }\n\n    // TODO cleanup/unregister all event listener at level end?!\n\n}\n","export enum RaiderTool {\n    NONE,\n    DRILL,\n    HAMMER,\n    SHOVEL,\n    SPANNER,\n    FREEZERGUN,\n    LASER,\n    PUSHERGUN,\n    BIRDSCARER,\n}\n\nexport const AllRaiderTools: RaiderTool[] = [\n    RaiderTool.DRILL,\n    RaiderTool.HAMMER,\n    RaiderTool.SHOVEL,\n    RaiderTool.SPANNER,\n    RaiderTool.FREEZERGUN,\n    RaiderTool.LASER,\n    RaiderTool.PUSHERGUN,\n    RaiderTool.BIRDSCARER,\n]\n","import { Cursor } from '../../../screen/Cursor'\n\nexport class SurfaceType {\n\n    name: string // human readable, maybe used as label later on\n    shaping: boolean = false\n    matIndex: string = '00'\n    floor: boolean = false\n    selectable: boolean = false\n    digable: boolean = false\n    reinforcable: boolean = false\n    cursor: Cursor = Cursor.Pointer_Standard\n    cursorFulfiller: Cursor = Cursor.Pointer_Standard\n    statsDrillName: string = null\n    canCarryFence: boolean = false\n    connectsPath: boolean = false\n    mapSurfaceColor: string = '#00FFFF'\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options)\n    }\n\n    static readonly GROUND = new SurfaceType({\n        name: 'ground',\n        floor: true,\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_LegoManGo,\n        mapSurfaceColor: '#280048',\n    })\n    static readonly SOLID_ROCK = new SurfaceType({\n        name: 'solid rock',\n        shaping: true,\n        matIndex: '5',\n        cursor: Cursor.Pointer_SurfaceType_Immovable,\n        mapSurfaceColor: '#500090',\n    })\n    static readonly HARD_ROCK = new SurfaceType({\n        name: 'hard rock',\n        shaping: true,\n        matIndex: '4',\n        selectable: true,\n        digable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_Hard,\n        statsDrillName: 'HardDrillTime',\n        mapSurfaceColor: '#7000B0',\n    })\n    static readonly LOOSE_ROCK = new SurfaceType({\n        name: 'loose rock',\n        shaping: true,\n        matIndex: '3',\n        selectable: true,\n        digable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_Medium,\n        statsDrillName: 'LooseDrillTime',\n        mapSurfaceColor: '#9000D0',\n    })\n    static readonly DIRT = new SurfaceType({\n        name: 'dirt',\n        shaping: true,\n        matIndex: '2',\n        selectable: true,\n        digable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_Loose,\n        statsDrillName: 'SoilDrillTime',\n        mapSurfaceColor: '#B000F0',\n    })\n    static readonly SLUG_HOLE = new SurfaceType({\n        name: 'slug hole',\n        floor: true,\n        matIndex: '30',\n        mapSurfaceColor: '#280048',\n    })\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'})\n    static readonly ORE_SEAM = new SurfaceType({\n        name: 'ore seam',\n        matIndex: '40',\n        selectable: true,\n        digable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_OreSeam,\n        statsDrillName: 'SeamDrillTime',\n    })\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45', mapSurfaceColor: '#000080'})\n    static readonly CRYSTAL_SEAM = new SurfaceType({\n        name: 'energy crystal seam',\n        matIndex: '20',\n        selectable: true,\n        digable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_CrystalSeam,\n        statsDrillName: 'SeamDrillTime',\n    })\n    static readonly RECHARGE_SEAM = new SurfaceType({\n        name: 'recharge seam',\n        matIndex: '67',\n        cursor: Cursor.Pointer_SurfaceType_RechargeSeam,\n    })\n    static readonly POWER_PATH = new SurfaceType({\n        name: 'power path all',\n        floor: true,\n        matIndex: '60',\n        selectable: true,\n        canCarryFence: true,\n        connectsPath: true,\n        mapSurfaceColor: '#FFFF00',\n    })\n    static readonly POWER_PATH_BUILDING_SITE = new SurfaceType({\n        name: 'power path building site',\n        floor: true,\n        matIndex: '61',\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly POWER_PATH_BUILDING = new SurfaceType({\n        name: 'power path building',\n        floor: true,\n        matIndex: '76',\n        connectsPath: true,\n        mapSurfaceColor: '#B8BBB8',\n    })\n    static readonly POWER_PATH_CONSTRUCTION = new SurfaceType({\n        name: 'power path construction',\n        floor: true,\n        matIndex: '76',\n        selectable: true,\n        connectsPath: true,\n        mapSurfaceColor: '#B8BBB8',\n    })\n    static readonly RUBBLE1 = new SurfaceType({\n        name: 'rubble 1',\n        floor: true,\n        matIndex: '13',\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_Clear,\n        mapSurfaceColor: '#280048',\n    })\n    static readonly RUBBLE2 = new SurfaceType({\n        name: 'rubble 2',\n        floor: true,\n        matIndex: '12',\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_Clear,\n        mapSurfaceColor: '#280048',\n    })\n    static readonly RUBBLE3 = new SurfaceType({\n        name: 'rubble 3',\n        floor: true,\n        matIndex: '11',\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_Clear,\n        mapSurfaceColor: '#280048',\n    })\n    static readonly RUBBLE4 = new SurfaceType({\n        name: 'rubble 4',\n        floor: true,\n        matIndex: '10',\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_Clear,\n        mapSurfaceColor: '#280048',\n    })\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING\n            case 1:\n                return SurfaceType.SOLID_ROCK\n            case 2:\n                return SurfaceType.HARD_ROCK\n            case 3:\n                return SurfaceType.LOOSE_ROCK\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT\n            case 6:\n                return SurfaceType.LAVA\n            case 8:\n                return SurfaceType.ORE_SEAM\n            case 9:\n                return SurfaceType.WATER\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM\n            case 11:\n                return SurfaceType.RECHARGE_SEAM\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE\n            case 100:\n                return SurfaceType.RUBBLE4\n            case 101:\n                return SurfaceType.RUBBLE3\n            case 102:\n                return SurfaceType.RUBBLE2\n            case 103:\n                return SurfaceType.RUBBLE1\n            default:\n                console.error('Unexpected surface type num: ' + typeNum)\n                return SurfaceType.SOLID_ROCK\n        }\n    }\n}\n","import { EntityType } from '../EntityType'\n\nexport enum RaiderTraining {\n    NONE,\n    DRIVER,\n    ENGINEER,\n    GEOLOGIST,\n    PILOT,\n    SAILOR,\n    DEMOLITION,\n}\n\nexport const AllRaiderTrainings: RaiderTraining[] = [\n    RaiderTraining.DRIVER,\n    RaiderTraining.ENGINEER,\n    RaiderTraining.GEOLOGIST,\n    RaiderTraining.PILOT,\n    RaiderTraining.SAILOR,\n    RaiderTraining.DEMOLITION,\n]\n\nexport const RaiderTrainingSites: EntityType[] = []\nRaiderTrainingSites[RaiderTraining.DRIVER] = EntityType.BARRACKS\nRaiderTrainingSites[RaiderTraining.DRIVER] = EntityType.BARRACKS\nRaiderTrainingSites[RaiderTraining.ENGINEER] = EntityType.UPGRADE\nRaiderTrainingSites[RaiderTraining.GEOLOGIST] = EntityType.GEODOME\nRaiderTrainingSites[RaiderTraining.PILOT] = EntityType.TELEPORT_PAD\nRaiderTrainingSites[RaiderTraining.SAILOR] = EntityType.DOCKS\nRaiderTrainingSites[RaiderTraining.DEMOLITION] = EntityType.TOOLSTATION\n\nexport const RaiderTrainingStatsProperty: string[] = []\nRaiderTrainingStatsProperty[RaiderTraining.DRIVER] = 'TrainDriver'\nRaiderTrainingStatsProperty[RaiderTraining.ENGINEER] = 'TrainRepair'\nRaiderTrainingStatsProperty[RaiderTraining.GEOLOGIST] = 'TrainScanner'\nRaiderTrainingStatsProperty[RaiderTraining.PILOT] = 'TrainPilot'\nRaiderTrainingStatsProperty[RaiderTraining.SAILOR] = 'TrainSailor'\nRaiderTrainingStatsProperty[RaiderTraining.DEMOLITION] = 'TrainDynamite'\n","import { Surface } from '../../game/model/map/Surface'\n\nexport class MapSurfaceRect {\n\n    x: number\n    y: number\n    surfaceColor: string\n    borderColor: string\n\n    constructor(surface: Surface) {\n        this.x = surface.x\n        this.y = surface.y\n        this.surfaceColor = surface.surfaceType.mapSurfaceColor\n        this.borderColor = surface.reinforced ? '#FFFF00' : null\n    }\n}\n","import { Vector3 } from 'three'\nimport { Sample } from '../audio/Sample'\nimport { EntityManager } from '../game/EntityManager'\nimport { EntityType } from '../game/model/EntityType'\nimport { PriorityEntry } from '../game/model/job/PriorityEntry'\nimport { Surface } from '../game/model/map/Surface'\nimport { SurfaceType } from '../game/model/map/SurfaceType'\nimport { Terrain } from '../game/model/map/Terrain'\nimport { AllRaiderTools, RaiderTool } from '../game/model/raider/RaiderTool'\nimport { AllRaiderTrainings, RaiderTraining } from '../game/model/raider/RaiderTraining'\nimport { MapSurfaceRect } from '../gui/radar/MapSurfaceRect'\nimport { TILESIZE } from '../params'\nimport { Cursor } from '../screen/Cursor'\nimport { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n        this.isLocal = true\n    }\n\n}\n\nexport enum SelectPanelType {\n\n    NONE,\n    RAIDER,\n    VEHICLE,\n    BUILDING,\n    SURFACE,\n\n}\n\nexport class SelectionChanged extends LocalEvent {\n\n    selectPanelType: SelectPanelType = SelectPanelType.NONE\n    isGround: boolean\n    isPowerPath: boolean\n    canPlaceFence: boolean\n    isFloor: boolean\n    isSite: boolean\n    hasRubble: boolean\n    isDrillable: boolean\n    isReinforcable: boolean\n    someCarries: boolean\n    everyHasMaxLevel: boolean\n    canDoTraining: Map<RaiderTraining, boolean> = new Map()\n    everyHasTool: Map<RaiderTool, boolean> = new Map()\n    buildingCanUpgrade: boolean\n    buildingCanSwitchPower: boolean\n    vehicleHasCallManJob: boolean\n    allVehicleEmpty: boolean\n\n    constructor(entityMgr: EntityManager) {\n        super(EventKey.SELECTION_CHANGED)\n        if (!entityMgr) return\n        this.selectPanelType = entityMgr.selection.getSelectPanelType()\n        this.isGround = entityMgr.selection.surface?.surfaceType === SurfaceType.GROUND\n        this.isPowerPath = entityMgr.selection.surface?.surfaceType === SurfaceType.POWER_PATH\n        this.isFloor = entityMgr.selection.surface?.surfaceType.floor\n        this.isSite = entityMgr.selection.surface?.surfaceType === SurfaceType.POWER_PATH_CONSTRUCTION || entityMgr.selection.surface?.surfaceType === SurfaceType.POWER_PATH_BUILDING_SITE\n        this.hasRubble = entityMgr.selection.surface?.hasRubble()\n        this.isDrillable = entityMgr.selection.surface?.isDigable()\n        this.isReinforcable = entityMgr.selection.surface?.isReinforcable()\n        this.canPlaceFence = entityMgr.selection.surface?.canPlaceFence() && entityMgr && entityMgr.buildings.some((b) => b.entityType === EntityType.POWER_STATION && b.isUsable())\n        this.someCarries = !!entityMgr.selection.raiders.some((r) => !!r.carries)\n        this.everyHasMaxLevel = !!entityMgr.selection.raiders.every((r) => r.level >= r.stats.Levels)\n        AllRaiderTrainings.forEach((training) => this.canDoTraining.set(training, entityMgr && entityMgr.getTrainingSites(training).length > 0 && entityMgr.selection.raiders.some((r) => !r.hasTraining(training))))\n        AllRaiderTools.forEach((tool) => this.everyHasTool.set(tool, !!entityMgr.selection.raiders.every((r) => r.hasTool(tool))))\n        this.buildingCanUpgrade = entityMgr.selection.building?.canUpgrade()\n        this.buildingCanSwitchPower = !entityMgr.selection.building?.stats.SelfPowered && !entityMgr.selection.building?.stats.PowerBuilding\n        this.vehicleHasCallManJob = entityMgr.selection.vehicles.every((v) => !!v.callManJob)\n        this.allVehicleEmpty = entityMgr.selection.vehicles.every((v) => !v.driver)\n    }\n\n}\n\nexport class DeselectAll extends SelectionChanged {\n\n    constructor() {\n        super(null)\n    }\n\n}\n\nexport class AirLevelChanged extends LocalEvent {\n\n    airLevel: number\n\n    constructor(airLevel: number) {\n        super(EventKey.AIR_LEVEL_CHANGED)\n        this.airLevel = airLevel\n    }\n\n}\n\nexport class ChangeCursor extends LocalEvent {\n\n    cursor: Cursor\n    timeout: number\n\n    constructor(cursor: Cursor, timeout: number = null) {\n        super(EventKey.CHANGE_CURSOR)\n        this.cursor = cursor\n        this.timeout = timeout\n    }\n\n}\n\nexport class SetupPriorityList extends LocalEvent {\n\n    priorityList: PriorityEntry[]\n\n    constructor(priorityList: PriorityEntry[]) {\n        super(EventKey.SETUP_PRIORITY_LIST)\n        this.priorityList = priorityList\n    }\n\n}\n\nexport class BuildingsChangedEvent extends LocalEvent {\n\n    usableBuildingsByTypeAndLevel: Map<EntityType, Map<number, number>> = new Map()\n\n    constructor(entityMgr: EntityManager) {\n        super(EventKey.BUILDINGS_CHANGED)\n        entityMgr.buildings.forEach((b) => {\n            if (b.isUsable()) {\n                const perLevel = this.usableBuildingsByTypeAndLevel.getOrUpdate(b.entityType, () => new Map())\n                perLevel.set(b.level, perLevel.getOrUpdate(b.level, () => 0) + 1)\n            }\n        })\n    }\n\n    static countUsable(event: BuildingsChangedEvent, building: EntityType, minLevel: number = 0) {\n        let result = 0\n        event.usableBuildingsByTypeAndLevel.getOrUpdate(building, () => new Map()).forEach((count, level) => {\n            if (level >= minLevel) result += count\n        })\n        return result\n    }\n\n}\n\nexport class RaidersChangedEvent extends LocalEvent {\n\n    numRaiders: number\n    training: RaiderTraining\n\n    constructor(entityMgr: EntityManager, training: RaiderTraining = null) {\n        super(EventKey.RAIDERS_CHANGED)\n        this.numRaiders = entityMgr.raiders.length\n        this.training = training\n    }\n\n}\n\nexport class VehiclesChangedEvent extends LocalEvent {\n\n    constructor() {\n        super(EventKey.VEHICLES_CHANGED)\n    }\n\n}\n\nexport class PlaySoundEvent extends LocalEvent {\n\n    sample: Sample\n\n    constructor(sample: Sample) {\n        super(EventKey.PLAY_SOUND)\n        this.sample = sample\n    }\n\n}\n\nexport class UpdateRadarTerrain extends LocalEvent {\n\n    surfaces: MapSurfaceRect[] = []\n    tileX: number\n    tileY: number\n\n    constructor(terrain: Terrain, mapFocus: Vector3) {\n        super(EventKey.UPDATE_RADAR_TERRAIN)\n        terrain.forEachSurface((s) => {\n            if (s.discovered) {\n                this.surfaces.push(new MapSurfaceRect(s))\n            }\n        })\n        this.tileX = Math.floor(mapFocus.x / TILESIZE)\n        this.tileY = Math.floor(mapFocus.z / TILESIZE)\n    }\n\n}\n\nexport class UpdateRadarSurface extends LocalEvent {\n\n    surfaceRect: MapSurfaceRect\n\n    constructor(surface: Surface) {\n        super(EventKey.UPDATE_RADAR_SURFACE)\n        this.surfaceRect = new MapSurfaceRect(surface)\n    }\n\n}\n\nexport class UpdatePriorities extends LocalEvent {\n\n    priorityList: PriorityEntry[]\n\n    constructor(priorityList: PriorityEntry[]) {\n        super(EventKey.UPDATE_PRIORITIES)\n        this.priorityList = priorityList\n    }\n\n}\n","export enum PriorityIdentifier {\n\n    aiPriorityTrain,\n    aiPriorityGetIn,\n    aiPriorityCrystal,\n    aiPriorityOre,\n    aiPriorityRepair,\n    aiPriorityClearing,\n    aiPriorityDestruction,\n    aiPriorityConstruction,\n    aiPriorityReinforce,\n    aiPriorityRecharge,\n\n}\n","export enum JobState {\n\n    INCOMPLETE,\n    COMPLETE,\n    CANCELED,\n\n}\n","import { EntityType } from '../game/model/EntityType'\nimport { PriorityEntry } from '../game/model/job/PriorityEntry'\nimport { RaiderTool } from '../game/model/raider/RaiderTool'\nimport { RaiderTraining } from '../game/model/raider/RaiderTraining'\nimport { EventKey } from './EventKeyEnum'\nimport { LocalEvent } from './LocalEvents'\n\nexport class GuiCommand extends LocalEvent {\n}\n\nexport class CancelBuildMode extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CANCEL_BUILD_MODE)\n    }\n\n}\n\nexport class SelectBuildMode extends GuiCommand {\n\n    entityType: EntityType\n\n    constructor(entityType: EntityType) {\n        super(EventKey.COMMAND_SELECT_BUILD_MODE)\n        this.entityType = entityType\n    }\n\n}\n\nexport class SelectedRaiderPickTool extends GuiCommand {\n\n    tool: RaiderTool\n\n    constructor(tool: RaiderTool) {\n        super(EventKey.COMMAND_PICK_TOOL)\n        this.tool = tool\n    }\n\n}\n\nexport class CreatePowerPath extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_POWER_PATH)\n    }\n\n}\n\nexport class PlaceFence extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_PLACE_FENCE)\n    }\n\n}\n\nexport class MakeRubble extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_MAKE_RUBBLE)\n    }\n\n}\n\nexport class ChangeRaiderSpawnRequest extends GuiCommand {\n\n    increase: boolean\n\n    constructor(increase: boolean) {\n        super(EventKey.COMMAND_CHANGE_RAIDER_SPAWN_REQUEST)\n        this.increase = increase\n    }\n\n}\n\nexport class CreateClearRubbleJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_CLEAR_RUBBLE_JOB)\n    }\n\n}\n\nexport class UpgradeBuilding extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_UPGRADE_BUILDING)\n    }\n\n}\n\nexport class BeamUpBuilding extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_BUILDING_BEAMUP)\n    }\n\n}\n\nexport class ChangePriorityList extends GuiCommand {\n\n    priorityList: PriorityEntry[]\n\n    constructor(priorityList: PriorityEntry[]) {\n        super(EventKey.COMMAND_CHANGE_PRIORITY_LIST)\n        this.priorityList = priorityList\n    }\n\n}\n\nexport class ChangeBuildingPowerState extends GuiCommand {\n\n    state: boolean\n\n    constructor(state: boolean) {\n        super(EventKey.COMMAND_CHANGE_BUILDING_POWER_STATE)\n        this.state = state\n    }\n\n}\n\nexport class CreateDrillJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_DRILL_JOB)\n    }\n\n}\n\nexport class CreateReinforceJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_REINFORCE_JOB)\n    }\n\n}\n\nexport class CreateDynamiteJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_DYNAMITE_JOB)\n    }\n\n}\n\nexport class CancelSurfaceJobs extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CANCEL_SURFACE_JOBS)\n    }\n\n}\n\nexport class RaiderEat extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_EAT)\n    }\n\n}\n\nexport class RaiderDrop extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_DROP)\n    }\n\n}\n\nexport class RaiderUpgrade extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_UPGRADE)\n    }\n\n}\n\nexport class RaiderBeamUp extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_BEAMUP)\n    }\n\n}\n\nexport class TrainRaider extends GuiCommand {\n\n    training: RaiderTraining\n\n    constructor(training: RaiderTraining) {\n        super(EventKey.COMMAND_TRAIN_RAIDER)\n        this.training = training\n    }\n\n}\n\nexport class CancelBuilding extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CANCEL_CONSTRUCTION)\n    }\n\n}\n\nexport class RequestVehicleSpawn extends GuiCommand {\n\n    vehicle: EntityType\n\n    constructor(vehicle: EntityType) {\n        super(EventKey.COMMAND_REQUEST_VEHICLE_SPAWN)\n        this.vehicle = vehicle\n    }\n\n}\n\nexport class VehicleCallMan extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_VEHICLE_GET_MAN)\n    }\n\n}\n\nexport class VehicleBeamUp extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_VEHICLE_BEAMUP)\n    }\n\n}\n\nexport class VehicleDriverGetOut extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_VEHICLE_DRIVER_GET_OUT)\n    }\n\n}\n\nexport class CameraControl extends GuiCommand {\n\n    zoom: number\n    cycleBuilding: boolean\n    rotationIndex: number\n\n    constructor(zoom: number, cycleBuilding: boolean, rotationIndex: number) {\n        super(EventKey.COMMAND_CAMERA_CONTROL)\n        this.zoom = zoom\n        this.cycleBuilding = cycleBuilding\n        this.rotationIndex = rotationIndex\n    }\n\n}\n","import { Vector2 } from 'three'\n\nexport class BarrierLocation {\n\n    position: Vector2\n    heading: number\n\n    constructor(position: Vector2, surfaceCenter: Vector2) {\n        this.position = position\n        this.heading = position.clone().sub(surfaceCenter).angle()\n        if (position.y === surfaceCenter.y) {\n            this.heading -= Math.PI / 2\n        } else {\n            this.heading += Math.PI / 2\n        }\n    }\n\n}\n","import { GameState } from '../game/model/GameState'\nimport { ShareableJob } from '../game/model/job/ShareableJob'\nimport { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class WorldEvent extends GameEvent {\n\n    constructor(entityKey: EventKey) {\n        super(entityKey)\n        this.isLocal = false\n    }\n\n}\n\nexport abstract class JobEvent extends WorldEvent {\n\n    job: ShareableJob\n\n    protected constructor(eventKey: EventKey, job: ShareableJob) {\n        super(eventKey)\n        this.guiForward = false\n        this.job = job\n    }\n\n}\n\nexport class JobCreateEvent extends JobEvent {\n\n    constructor(job: ShareableJob) {\n        super(EventKey.JOB_CREATE, job)\n    }\n\n}\n\nexport class JobDeleteEvent extends JobEvent {\n\n    constructor(job: ShareableJob) {\n        super(EventKey.JOB_DELETE, job)\n    }\n\n}\n\nexport class RequestedRaidersChanged extends WorldEvent {\n\n    numRequested: number\n\n    constructor(numRequested: number) {\n        super(EventKey.REQUESTED_RAIDERS_CHANGED)\n        this.numRequested = numRequested\n    }\n\n}\n\nexport class MaterialAmountChanged extends WorldEvent {\n\n    numCrystal: number\n    usedCrystal: number\n    neededCrystal: number\n    totalOre: number\n\n    constructor() {\n        super(EventKey.MATERIAL_AMOUNT_CHANGED)\n        this.numCrystal = GameState.numCrystal\n        this.usedCrystal = GameState.usedCrystals\n        this.neededCrystal = GameState.neededCrystals\n        this.totalOre = GameState.numOre + GameState.numBrick * 5\n    }\n\n}\n\nexport class CavernDiscovered extends WorldEvent {\n\n    constructor() {\n        super(EventKey.CAVERN_DISCOVERED)\n    }\n\n}\n\nexport class OreFoundEvent extends WorldEvent {\n\n    constructor() {\n        super(EventKey.ORE_FOUND)\n    }\n\n}\n","export class BaseActivity {\n\n    activityKey: string\n\n    constructor(activityKey: string) {\n        this.activityKey = activityKey\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class AnimEntityActivity extends BaseActivity {\n\n    static Stand = new AnimEntityActivity('Activity_Stand')\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class BarrierActivity extends AnimEntityActivity {\n\n    static Short = new AnimEntityActivity('Short')\n    static Expand = new AnimEntityActivity('Expand')\n    static Long = new AnimEntityActivity('Long')\n    static Teleport = new AnimEntityActivity('Teleport')\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\n// noinspection JSUnusedGlobalSymbols\nexport class RaiderActivity extends AnimEntityActivity {\n\n    static Route = new RaiderActivity('Activity_Route')\n    static RunPanic = new RaiderActivity('Activity_RunPanic')\n    static Drill = new RaiderActivity('Activity_Drill')\n    static Walk = new RaiderActivity('Activity_Walk')\n    static Reinforce = new RaiderActivity('Activity_Reinforce')\n    static Reverse = new RaiderActivity('Activity_Reverse')\n    static TurnLeft = new RaiderActivity('Activity_TurnLeft')\n    static TurnRight = new RaiderActivity('Activity_TurnRight')\n    static CantDo = new RaiderActivity('Activity_CantDo')\n    static Collect = new RaiderActivity('Activity_Collect')\n    static Clear = new RaiderActivity('Activity_Clear')\n    static Carry = new RaiderActivity('Activity_Carry')\n    static CarryTurnLeft = new RaiderActivity('Activity_CarryTurnLeft')\n    static CarryTurnRight = new RaiderActivity('Activity_CarryTurnRight')\n    static CarryStand = new RaiderActivity('Activity_CarryStand')\n    static Dynamite = new RaiderActivity('Activity_Dynamite')\n    static Place = new RaiderActivity('Activity_Place')\n    static Deposit = new RaiderActivity('Activity_Deposit')\n    static TeleportIn = new RaiderActivity('Activity_TeleportIn')\n    static Repair = new RaiderActivity('Activity_Repair')\n    static rest = new RaiderActivity('Activity_rest')\n    static routeRubble = new RaiderActivity('Activity_routeRubble')\n    static CarryRubble = new RaiderActivity('Activity_CarryRubble')\n    static Eat = new RaiderActivity('Activity_Eat')\n    static FireLaser = new RaiderActivity('Activity_FireLaser')\n    static GetUp = new RaiderActivity('Activity_GetUp')\n    static ThrownByRockMonster = new RaiderActivity('Activity_ThrownByRockMonster')\n    static Slip = new RaiderActivity('Activity_Slip')\n    static Train = new RaiderActivity('Activity_Train')\n    static Recharge = new RaiderActivity('Activity_Recharge')\n\n    static Waiting1 = new RaiderActivity('Activity_Waiting1')\n    static Waiting2 = new RaiderActivity('Activity_Waiting2')\n    static Waiting3 = new RaiderActivity('Activity_Waiting3')\n    static Waiting4 = new RaiderActivity('Activity_Waiting4')\n\n    static Hoverboard = new RaiderActivity('Activity_Hoverboard')\n    static Standhoverboard = new RaiderActivity('Activity_Standhoverboard')\n    static HitLefthoverboard = new RaiderActivity('Activity_HitLefthoverboard')\n    static HitRighthoverboard = new RaiderActivity('Activity_HitRighthoverboard')\n    static HitFronthoverboard = new RaiderActivity('Activity_HitFronthoverboard')\n    static HitBackhoverboard = new RaiderActivity('Activity_HitBackhoverboard')\n\n    static SMALLTRUCK = new RaiderActivity('Activity_SMALLTRUCK')\n    static StandSMALLTRUCK = new RaiderActivity('Activity_StandSMALLTRUCK')\n    static HitLeftSMALLTRUCK = new RaiderActivity('Activity_HitLeftSMALLTRUCK')\n    static HitRightSMALLTRUCK = new RaiderActivity('Activity_HitRightSMALLTRUCK')\n    static HitFrontSMALLTRUCK = new RaiderActivity('Activity_HitFrontSMALLTRUCK')\n    static HitBackSMALLTRUCK = new RaiderActivity('Activity_HitBackSMALLTRUCK')\n\n    static SMALLheli = new RaiderActivity('Activity_SMALLheli')\n    static StandSMALLheli = new RaiderActivity('Activity_StandSMALLheli')\n    static HitLeftSMALLheli = new RaiderActivity('Activity_HitLeftSMALLheli')\n    static HitRightSMALLheli = new RaiderActivity('Activity_HitRightSMALLheli')\n    static HitFrontSMALLheli = new RaiderActivity('Activity_HitFrontSMALLheli')\n    static HitBackSMALLheli = new RaiderActivity('Activity_HitBackSMALLheli')\n\n    static SMALLCAT = new RaiderActivity('Activity_SMALLCAT')\n    static StandSMALLCAT = new RaiderActivity('Activity_StandSMALLCAT')\n    static HitLeftSMALLCAT = new RaiderActivity('Activity_HitLeftSMALLCAT')\n    static HitRightSMALLCAT = new RaiderActivity('Activity_HitRightSMALLCAT')\n    static HitFrontSMALLCAT = new RaiderActivity('Activity_HitFrontSMALLCAT')\n    static HitBackSMALLCAT = new RaiderActivity('Activity_HitBackSMALLCAT')\n\n    static SMALLMLP = new RaiderActivity('Activity_SMALLMLP')\n    static StandSMALLMLP = new RaiderActivity('Activity_StandSMALLMLP')\n    static HitLeftSMALLMLP = new RaiderActivity('Activity_HitLeftSMALLMLP')\n    static HitRightSMALLMLP = new RaiderActivity('Activity_HitRightSMALLMLP')\n    static HitFrontSMALLMLP = new RaiderActivity('Activity_HitFrontSMALLMLP')\n    static HitBackSMALLMLP = new RaiderActivity('Activity_HitBackSMALLMLP')\n\n    static LARGECAT = new RaiderActivity('Activity_LARGECAT')\n    static StandLARGECAT = new RaiderActivity('Activity_StandLARGECAT')\n    static HitLeftLARGECAT = new RaiderActivity('Activity_HitLeftLARGECAT')\n    static HitRightLARGECAT = new RaiderActivity('Activity_HitRightLARGECAT')\n    static HitFrontLARGECAT = new RaiderActivity('Activity_HitFrontLARGECAT')\n    static HitBackLARGECAT = new RaiderActivity('Activity_HitBackLARGECAT')\n\n    static SMALLDIGGER = new RaiderActivity('Activity_SMALLDIGGER')\n    static StandSMALLDIGGER = new RaiderActivity('Activity_StandSMALLDIGGER')\n\n}\n","import { Vector2 } from 'three'\nimport { RaiderActivity } from './activities/RaiderActivity'\nimport { MaterialEntity } from './material/MaterialEntity'\n\nexport class PathTarget {\n\n    targetLocation: Vector2\n    radiusSq: number\n\n    constructor(location: Vector2, radiusSq: number = 0) {\n        this.targetLocation = location\n        this.radiusSq = radiusSq\n    }\n\n    getFocusPoint(): Vector2 {\n        return this.targetLocation\n    }\n\n    canGatherItem(): boolean {\n        return false\n    }\n\n    gatherItem(item: MaterialEntity) {\n        item.sceneEntity.addToScene(null, null)\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n    isInvalid(): boolean {\n        return false\n    }\n\n}\n","import { RaiderActivity } from '../activities/RaiderActivity'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { MaterialEntity } from '../material/MaterialEntity'\nimport { PathTarget } from '../PathTarget'\nimport { RaiderTool } from '../raider/RaiderTool'\nimport { RaiderTraining } from '../raider/RaiderTraining'\nimport { JobState } from './JobState'\n\nexport abstract class Job {\n\n    jobState: JobState\n\n    constructor() {\n        this.jobState = JobState.INCOMPLETE\n    }\n\n    abstract assign(fulfiller: FulfillerEntity)\n\n    abstract unAssign(fulfiller: FulfillerEntity)\n\n    abstract cancel()\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.NONE\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return RaiderTraining.NONE\n    }\n\n    isReadyToComplete(): boolean {\n        return true\n    }\n\n    onJobComplete() {\n        this.jobState = JobState.COMPLETE\n    }\n\n    abstract getWorkplaces(): PathTarget[];\n\n    setActualWorkplace(target: PathTarget) {\n    }\n\n    getCarryItem(): MaterialEntity {\n        return null\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return null\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        return null\n    }\n\n}\n\n","import { FulfillerEntity } from '../FulfillerEntity'\nimport { Job } from './Job'\nimport { JobState } from './JobState'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport abstract class ShareableJob extends Job {\n\n    fulfiller: FulfillerEntity[] = []\n\n    abstract getPriorityIdentifier(): PriorityIdentifier\n\n    assign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller)\n        if (fulfiller && index === -1) {\n            this.fulfiller.push(fulfiller)\n        }\n    }\n\n    unAssign(fulfiller: FulfillerEntity) {\n        this.fulfiller.remove(fulfiller)\n    }\n\n    cancel() {\n        this.jobState = JobState.CANCELED\n        const fulfiller = this.fulfiller // ensure consistency while processing\n        this.fulfiller = []\n        fulfiller.forEach((fulfiller) => fulfiller.stopJob())\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { Surface } from '../../map/Surface'\nimport { SurfaceType } from '../../map/SurfaceType'\nimport { MaterialEntity } from '../../material/MaterialEntity'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { ShareableJob } from '../ShareableJob'\n\nexport class CompletePowerPathJob extends ShareableJob {\n\n    surface: Surface\n    placedItems: MaterialEntity[]\n    workplaces: PathTarget[]\n\n    constructor(surface: Surface, placedItems: MaterialEntity[]) {\n        super()\n        this.surface = surface\n        this.placedItems = placedItems\n        this.workplaces = [new PathTarget(surface.getRandomPosition())]\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.placedItems.forEach((placed) => placed.sceneEntity.removeFromScene())\n        this.surface.setSurfaceType(SurfaceType.POWER_PATH)\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.SHOVEL\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityConstruction\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.workplaces\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Clear\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { DeselectAll } from '../../../event/LocalEvents'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { EntityManager } from '../../EntityManager'\nimport { BarrierActivity } from '../activities/BarrierActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { EntityType } from '../EntityType'\nimport { CompletePowerPathJob } from '../job/surface/CompletePowerPathJob'\nimport { Surface } from '../map/Surface'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { Barrier } from '../material/Barrier'\nimport { Crystal } from '../material/Crystal'\nimport { MaterialEntity } from '../material/MaterialEntity'\nimport { Ore } from '../material/Ore'\nimport { BuildingEntity } from './BuildingEntity'\n\nexport class BuildingSite {\n\n    entityMgr: EntityManager\n    primarySurface: Surface = null\n    secondarySurface: Surface = null\n    primaryPathSurface: Surface = null\n    surfaces: Surface[] = []\n    building: BuildingEntity\n    heading: number = 0\n    neededByType: Map<EntityType, number> = new Map()\n    assignedByType: Map<EntityType, MaterialEntity[]> = new Map()\n    onSiteByType: Map<EntityType, MaterialEntity[]> = new Map()\n    complete: boolean = false\n    canceled: boolean = false\n\n    constructor(entityMgr: EntityManager, primarySurface: Surface, secondarySurface: Surface, primaryPathSurface: Surface, secondaryPathSurface: Surface, building: BuildingEntity) {\n        this.entityMgr = entityMgr\n        this.primarySurface = primarySurface\n        this.primarySurface.setSite(this)\n        this.surfaces.push(this.primarySurface)\n        this.secondarySurface = secondarySurface\n        if (this.secondarySurface) {\n            this.secondarySurface.setSite(this)\n            this.surfaces.push(this.secondarySurface)\n        }\n        this.primaryPathSurface = primaryPathSurface\n        this.primaryPathSurface.setSurfaceType(SurfaceType.POWER_PATH_BUILDING)\n        this.surfaces.push(this.primaryPathSurface)\n        if (secondaryPathSurface) {\n            secondaryPathSurface.setSurfaceType(SurfaceType.POWER_PATH_BUILDING)\n            this.surfaces.push(secondaryPathSurface)\n        }\n        this.building = building\n    }\n\n    getRandomDropPosition(): Vector2 {\n        return this.primarySurface.getRandomPosition()\n    }\n\n    needs(EntityType: EntityType): boolean {\n        const needed = this.neededByType.getOrUpdate(EntityType, () => 0)\n        const assigned = this.assignedByType.getOrUpdate(EntityType, () => []).length\n        return needed > assigned\n    }\n\n    assign(item: MaterialEntity) {\n        this.assignedByType.getOrUpdate(item.entityType, () => []).push(item)\n    }\n\n    unAssign(item: MaterialEntity) {\n        this.assignedByType.getOrUpdate(item.entityType, () => []).remove(item)\n    }\n\n    addItem(item: MaterialEntity) {\n        this.onSiteByType.getOrUpdate(item.entityType, () => []).push(item)\n        this.checkComplete()\n    }\n\n    checkComplete() {\n        if (this.complete || this.canceled) return\n        this.complete = true\n        this.neededByType.forEach((needed, neededType) => {\n            this.complete = this.complete && this.onSiteByType.getOrUpdate(neededType, () => []).length >= needed\n        })\n        if (!this.complete) return\n        this.entityMgr.buildingSites.remove(this)\n        if (!this.building) {\n            const items = []\n            this.onSiteByType.forEach((itemsOnSite) => items.push(...itemsOnSite))\n            EventBus.publishEvent(new JobCreateEvent(new CompletePowerPathJob(this.primarySurface, items)))\n        } else {\n            this.onSiteByType.getOrUpdate(EntityType.BARRIER, () => []).forEach((item: Barrier) => {\n                item.sceneEntity.changeActivity(BarrierActivity.Teleport, () => item.sceneEntity.removeFromScene())\n            })\n            this.onSiteByType.getOrUpdate(EntityType.CRYSTAL, () => []).forEach((item: Crystal) => {\n                item.sceneEntity.removeFromScene()\n            })\n            this.onSiteByType.getOrUpdate(EntityType.ORE, () => []).forEach((item: Ore) => {\n                item.sceneEntity.removeFromScene()\n            })\n            const world = this.primarySurface.getCenterWorld2D()\n            this.building.placeDown(world, -this.heading + Math.PI / 2, false)\n        }\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n    cancelSite() {\n        this.entityMgr.buildingSites.remove(this)\n        this.canceled = true\n        this.surfaces.forEach((s) => s?.setSite(null))\n        this.onSiteByType.forEach((materials) => materials.forEach((item) => {\n            this.entityMgr.placeMaterial(item, item.sceneEntity.position2D.clone())\n        }))\n        this.onSiteByType.clear()\n        this.assignedByType.clear()\n        EventBus.publishEvent(new DeselectAll())\n    }\n\n    getWalkOutSurface(): Surface {\n        return this.primaryPathSurface || this.primarySurface.neighbors.find((n) => !n.site && n.isWalkable()) ||\n            this.secondarySurface?.neighbors.find((n) => !n.site && n.isWalkable())\n    }\n\n}\n","export enum WALL_TYPE {\n\n    CORNER = 1,\n    WALL = 2,\n    INVERTED_CORNER = 3,\n    WEIRD_CREVICE = 20,\n\n}\n","import { BufferGeometry, Vector2, Vector3 } from 'three'\nimport { BufferAttribute } from 'three/src/core/BufferAttribute'\nimport { WALL_TYPE } from './WallType'\n\nexport class SurfaceGeometry {\n\n    public static create(wallType: WALL_TYPE,\n                         topLeftVertex: Vector3, topRightVertex: Vector3, bottomRightVertex: Vector3, bottomLeftVertex: Vector3,\n                         topLeftHeight: number, topRightHeight: number, bottomRightHeight: number, bottomLeftHeight: number,\n    ) {\n        let uvOffset = 0\n\n        // not-rotated\n        // 1 ?\n        // ? 0\n        if (topLeftVertex.y && !bottomRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topRightVertex.y)))) {\n            uvOffset = 0\n        }\n\n        // 90 clock-wise\n        // ? 1\n        // 0 ?\n        if (topRightVertex.y && !bottomLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomRightVertex.y)))) {\n            uvOffset = 3\n        }\n\n        // 180 clock-wise\n        // 0 ?\n        // ? 1\n        if (bottomRightVertex.y && !topLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomLeftVertex.y)))) {\n            uvOffset = 2\n        }\n\n        // 270 clock-wise\n        // ? 0\n        // 1 ?\n        if (bottomLeftVertex.y && !topRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topLeftVertex.y)))) {\n            uvOffset = 1\n        }\n\n        if (wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) {\n            if (topLeftVertex.y && bottomRightVertex.y) {\n                uvOffset = 0\n            }\n            if (topRightVertex.y && bottomLeftVertex.y) {\n                uvOffset = 3\n            }\n        }\n\n        /*\n        //\t\t0---1                1         0---1\n        //\t\t|   |  becomes      /|   and   |  /\n        //\t\t|   |             /  |         |/\n        //\t\t3---2            3---2         3\n        //\n        //\t\tOR\n        //\n        //\t\t0---1            0             0---1\n        //\t\t|   |  becomes   |\\    \t and    \\  |\n        //\t\t|   |            |  \\             \\|\n        //\t\t3---2            3---2             2\n        //\n        //\t\tTriangles 0-1-3 and 0-3-2\n        //\t\tQuad 0-1-3-2\n        */\n\n        const uv = [\n            new Vector2(0, 1),\n            new Vector2(1, 1),\n            new Vector2(1, 0),\n            new Vector2(0, 0),\n        ]\n\n        const bufferVertices = []\n        const bufferNormals = []\n\n        function addFaceAndNormals(a, b, c) {\n            bufferVertices.push(a, b, c)\n            const normal = new Vector3().subVectors(c, b)\n            normal.cross(new Vector3().subVectors(a, b))\n            normal.normalize()\n            bufferNormals.push(normal, normal, normal)\n        }\n\n        const uvIndexes = []\n        if (topRightVertex.y !== bottomLeftVertex.y ||\n            ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) && !(topRightVertex.y && bottomLeftVertex.y))) {\n            uvIndexes.push(1, 3, 2)\n            uvIndexes.push(1, 0, 3)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topRightVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topRightVertex, topLeftVertex, bottomLeftVertex)\n        } else {\n            uvIndexes.push(0, 3, 2)\n            uvIndexes.push(0, 2, 1)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topLeftVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topLeftVertex, bottomRightVertex, topRightVertex)\n        }\n\n        const bufferVertexUvs = uvIndexes.map(i => uv[(i + uvOffset) % 4])\n\n        const bufferGeometry = new BufferGeometry()\n        bufferGeometry.setAttribute('position', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferVertices))\n        bufferGeometry.setAttribute('normal', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferNormals))\n        bufferGeometry.setAttribute('uv', new BufferAttribute(new Float32Array(12), 2).copyVector2sArray(bufferVertexUvs))\n        return bufferGeometry\n    }\n}\n","import { Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { TILESIZE } from '../../../params'\nimport { SequenceTextureMaterial } from '../../../scene/SequenceTextureMaterial'\nimport { SceneManager } from '../../SceneManager'\nimport { Surface } from '../map/Surface'\nimport { SurfaceGeometry } from '../map/SurfaceGeometry'\nimport { WALL_TYPE } from '../map/WallType'\n\nexport class BuildPlacementMarkerMesh extends Mesh {\n\n    static readonly geometry = SurfaceGeometry.create(WALL_TYPE.WALL,\n        new Vector3(0, 0, 0), new Vector3(TILESIZE, 0, 0),\n        new Vector3(TILESIZE, 0, TILESIZE), new Vector3(0, 0, TILESIZE),\n        1, 1, 1, 1,\n    )\n\n    sceneMgr: SceneManager\n    standardColor: number\n\n    constructor(sceneMgr: SceneManager, standardColor: number) {\n        super(BuildPlacementMarkerMesh.geometry, new MeshPhongMaterial({\n            shininess: 0,\n            transparent: true,\n            opacity: 0.4,\n            color: standardColor,\n        }))\n        this.sceneMgr = sceneMgr\n        this.standardColor = standardColor\n        this.visible = false\n    }\n\n    updateState(position: { x: number, y: number }, heading: number, primaryPosition: Vector3) {\n        this.visible = !!position\n        if (position) {\n            this.position.set(position.x, 0, position.y).multiplyScalar(TILESIZE)\n                .applyAxisAngle(new Vector3(0, 1, 0), -heading + Math.PI / 2)\n                .add(primaryPosition)\n        }\n    }\n\n    markAsValid(isValid: boolean) {\n        const color = isValid ? this.standardColor : 0x500000;\n        (this.material as SequenceTextureMaterial).color.setHex(color)\n    }\n\n    get surface(): Surface {\n        return this.visible ? this.sceneMgr.terrain.getSurfaceFromWorld(this.position) : null\n    }\n\n}\n","import { Group, Vector2 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { CancelBuildMode } from '../../../event/GuiCommand'\nimport { DeselectAll } from '../../../event/LocalEvents'\nimport { TILESIZE } from '../../../params'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { BarrierLocation } from '../material/BarrierLocation'\nimport { BuildingEntity } from './BuildingEntity'\nimport { BuildingSite } from './BuildingSite'\nimport { BuildPlacementMarkerMesh } from './BuildPlacementMarkerMesh'\n\nexport class BuildPlacementMarker {\n\n    static readonly buildingMarkerColor: number = 0x005000\n    static readonly pathMarkerColor: number = 0x505000\n    static readonly waterMarkerColor: number = 0x000050\n\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    group: Group = new Group()\n    markers: BuildPlacementMarkerMesh[] = []\n    buildingMarkerPrimary: BuildPlacementMarkerMesh = null\n    buildingMarkerSecondary: BuildPlacementMarkerMesh = null\n    powerPathMarkerPrimary: BuildPlacementMarkerMesh = null\n    powerPathMarkerSecondary: BuildPlacementMarkerMesh = null\n    waterPathMarker: BuildPlacementMarkerMesh = null\n    heading: number = 0\n    sdx: number = 0\n    sdz: number = 0\n    lastCheck: boolean = false\n    buildModeSelection: BuildingEntity = null\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager, entityMgr: EntityManager) {\n        this.worldMgr = worldMgr\n        this.sceneMgr = sceneMgr\n        this.entityMgr = entityMgr\n        this.buildingMarkerPrimary = new BuildPlacementMarkerMesh(this.sceneMgr, BuildPlacementMarker.buildingMarkerColor)\n        this.buildingMarkerSecondary = new BuildPlacementMarkerMesh(this.sceneMgr, BuildPlacementMarker.buildingMarkerColor)\n        this.powerPathMarkerPrimary = new BuildPlacementMarkerMesh(this.sceneMgr, BuildPlacementMarker.pathMarkerColor)\n        this.powerPathMarkerSecondary = new BuildPlacementMarkerMesh(this.sceneMgr, BuildPlacementMarker.pathMarkerColor)\n        this.waterPathMarker = new BuildPlacementMarkerMesh(this.sceneMgr, BuildPlacementMarker.waterMarkerColor)\n        this.addMarker(this.buildingMarkerPrimary)\n        this.addMarker(this.buildingMarkerSecondary)\n        this.addMarker(this.powerPathMarkerPrimary)\n        this.addMarker(this.powerPathMarkerSecondary)\n        this.addMarker(this.waterPathMarker)\n    }\n\n    private addMarker(marker: BuildPlacementMarkerMesh) {\n        this.group.add(marker)\n        this.markers.push(marker)\n    }\n\n    update(worldPosition: Vector2) {\n        if (!worldPosition || !this.buildModeSelection) {\n            this.hideAllMarker()\n        } else {\n            const isValid = this.updateAllMarker(worldPosition)\n            this.markers.forEach((c) => c.markAsValid(isValid))\n        }\n    }\n\n    private updateAllMarker(worldPosition: Vector2 = null): boolean {\n        // TODO use surface height offsets, refactor terrain map/data handling before\n        this.buildingMarkerPrimary.visible = true\n        this.buildingMarkerPrimary.position.copy(this.sceneMgr.getFloorPosition(new Vector2(Math.floor(worldPosition.x / TILESIZE) * TILESIZE, Math.floor(worldPosition.y / TILESIZE) * TILESIZE)))\n        const sdxv = worldPosition.x - this.buildingMarkerPrimary.position.x - TILESIZE / 2\n        const sdzv = worldPosition.y - this.buildingMarkerPrimary.position.z - TILESIZE / 2\n        const sdx = Math.abs(sdxv) > Math.abs(sdzv) ? Math.sign(sdxv) : 0\n        const sdz = Math.abs(sdzv) > Math.abs(sdxv) ? Math.sign(sdzv) : 0\n        if (this.sdx === sdx && this.sdz === sdz) return this.lastCheck\n        this.sdx = sdx\n        this.sdz = sdz\n        this.heading = Math.atan2(sdz, sdx)\n        this.buildingMarkerSecondary.updateState(this.buildModeSelection.secondaryBuildingPart, this.heading, this.buildingMarkerPrimary.position)\n        this.powerPathMarkerPrimary.updateState(this.buildModeSelection.primaryPowerPath, this.heading, this.buildingMarkerPrimary.position)\n        this.powerPathMarkerSecondary.updateState(this.buildModeSelection.secondaryPowerPath, this.heading, this.buildingMarkerPrimary.position)\n        this.waterPathMarker.updateState(this.buildModeSelection.waterPathSurface, this.heading, this.buildingMarkerPrimary.position)\n        const allSurfacesAreGround = [this.buildingMarkerPrimary, this.buildingMarkerSecondary, this.powerPathMarkerPrimary, this.powerPathMarkerSecondary]\n            .filter((c) => c.visible).map((c) => this.sceneMgr.terrain.getSurfaceFromWorld(c.position)).every((s) => s.surfaceType === SurfaceType.GROUND)\n        this.lastCheck = allSurfacesAreGround && (\n            [this.powerPathMarkerPrimary, this.powerPathMarkerSecondary].some((c) => c.visible && c.surface.neighbors.some((n) => n.surfaceType === SurfaceType.POWER_PATH)) ||\n            (!this.buildModeSelection.primaryPowerPath && (this.buildingMarkerPrimary.surface.neighbors.some((n) => n.surfaceType === SurfaceType.POWER_PATH ||\n                (this.buildingMarkerSecondary.visible && this.buildingMarkerSecondary.surface.neighbors.some((n) => n.surfaceType === SurfaceType.POWER_PATH)))))\n        ) && (!this.waterPathMarker.visible || this.waterPathMarker.surface.surfaceType === SurfaceType.WATER)\n        return this.lastCheck\n    }\n\n    hideAllMarker() {\n        this.markers.forEach((m) => m.visible = false)\n        this.lastCheck = false\n    }\n\n    createBuildingSite() {\n        if (!this.buildModeSelection || !this.lastCheck) return\n        const barrierLocations = this.getBarrierLocations()\n        const stats = this.buildModeSelection.stats\n        const neededCrystals = stats?.CostCrystal || 0\n        const neededOre = stats?.CostOre || 0\n        const primarySurface = this.buildingMarkerPrimary.surface\n        const site = new BuildingSite(this.entityMgr, primarySurface, this.buildingMarkerSecondary.surface, this.powerPathMarkerPrimary.surface, this.powerPathMarkerSecondary.surface, this.buildModeSelection)\n        site.heading = this.heading\n        site.neededByType.set(EntityType.BARRIER, barrierLocations.length)\n        site.neededByType.set(EntityType.CRYSTAL, neededCrystals)\n        site.neededByType.set(EntityType.ORE, neededOre)\n        this.entityMgr.buildingSites.push(site)\n        const closestToolstation = this.entityMgr.getClosestBuildingByType(primarySurface.getCenterWorld(), EntityType.TOOLSTATION)\n        if (closestToolstation) {\n            closestToolstation.spawnBarriers(barrierLocations, site)\n            closestToolstation.spawnMaterials(EntityType.CRYSTAL, neededCrystals)\n            closestToolstation.spawnMaterials(EntityType.ORE, neededOre)\n        }\n        EventBus.publishEvent(new DeselectAll())\n        EventBus.publishEvent(new CancelBuildMode())\n    }\n\n    getBarrierLocations(): BarrierLocation[] {\n        const barrierLocations: BarrierLocation[] = []\n        const centerPrimary = this.buildingMarkerPrimary.surface.getCenterWorld2D()\n        const barrierOffset = TILESIZE * 9 / 20\n        if (this.buildingMarkerSecondary.visible) {\n            const centerSecondary = this.buildingMarkerSecondary.surface.getCenterWorld2D()\n            const dx = Math.sign(centerSecondary.x - centerPrimary.x)\n            const dy = Math.sign(centerSecondary.y - centerPrimary.y)\n            if (dx !== 0) {\n                barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x - dx * barrierOffset, centerPrimary.y), centerPrimary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x, centerPrimary.y - barrierOffset), centerPrimary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x, centerPrimary.y + barrierOffset), centerPrimary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerSecondary.x + dx * barrierOffset, centerSecondary.y), centerSecondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerSecondary.x, centerSecondary.y - barrierOffset), centerSecondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerSecondary.x, centerSecondary.y + barrierOffset), centerSecondary))\n            } else {\n                barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x, centerPrimary.y - dy * barrierOffset), centerPrimary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x - barrierOffset, centerPrimary.y), centerPrimary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x + barrierOffset, centerPrimary.y), centerPrimary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerSecondary.x, centerSecondary.y + dy * barrierOffset), centerSecondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerSecondary.x - barrierOffset, centerSecondary.y), centerSecondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(centerSecondary.x + barrierOffset, centerSecondary.y), centerSecondary))\n            }\n        } else {\n            barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x - barrierOffset, centerPrimary.y), centerPrimary))\n            barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x, centerPrimary.y - barrierOffset), centerPrimary))\n            barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x + barrierOffset, centerPrimary.y), centerPrimary))\n            barrierLocations.push(new BarrierLocation(new Vector2(centerPrimary.x, centerPrimary.y + barrierOffset), centerPrimary))\n        }\n        return barrierLocations\n    }\n\n}\n","import { BuildingEntity } from '../../building/BuildingEntity'\nimport { PathTarget } from '../../PathTarget'\n\nexport class GetToolPathTarget extends PathTarget {\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(building.sceneEntity.position2D.clone())\n        this.building = building\n    }\n\n    isInvalid(): boolean {\n        return !this.building.isUsable()\n    }\n\n}\n","import { PathTarget } from '../../PathTarget'\nimport { Raider } from '../../raider/Raider'\nimport { Job } from '../Job'\nimport { JobState } from '../JobState'\n\nexport abstract class RaiderJob extends Job {\n\n    raider: Raider\n\n    abstract getWorkplaces(): PathTarget[]\n\n    assign(raider: Raider) {\n        if (this.raider === raider) return\n        if (this.raider) throw 'Job already assigned'\n        this.raider = raider\n    }\n\n    unAssign(raider: Raider) {\n        if (this.raider !== raider) return\n        this.raider = null\n    }\n\n    cancel() {\n        this.jobState = JobState.CANCELED\n        this.raider?.stopJob()\n    }\n\n}\n","import { EntityManager } from '../../../EntityManager'\nimport { BuildingEntity } from '../../building/BuildingEntity'\nimport { EntityType } from '../../EntityType'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { GetToolPathTarget } from './GetToolPathTarget'\nimport { RaiderJob } from './RaiderJob'\n\nexport class GetToolJob extends RaiderJob {\n\n    entityMgr: EntityManager\n    tool: RaiderTool\n    workplaces: GetToolPathTarget[]\n\n    constructor(entityMgr: EntityManager, tool: RaiderTool, toolstation: BuildingEntity) {\n        super()\n        this.entityMgr = entityMgr\n        this.tool = tool\n        this.workplaces = toolstation ? [toolstation.getPathTarget()] : this.entityMgr.getBuildingsByType(EntityType.TOOLSTATION).map((b) => new GetToolPathTarget(b))\n    }\n\n    getWorkplaces(): GetToolPathTarget[] {\n        if (this.workplaces.some((b) => !b.building.isUsable())) {\n            this.workplaces = this.entityMgr.getBuildingsByType(EntityType.TOOLSTATION).map((b) => new GetToolPathTarget(b))\n        }\n        return this.workplaces\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.raider.addTool(this.tool)\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderJob } from './RaiderJob'\n\nexport class MoveJob extends RaiderJob {\n\n    target: PathTarget[]\n\n    constructor(target: Vector2) {\n        super()\n        this.target = [new PathTarget(target)]\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.target\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { Sample } from '../../audio/Sample'\nimport { SoundManager } from '../../audio/SoundManager'\nimport { SelectPanelType } from '../../event/LocalEvents'\nimport { TILESIZE } from '../../params'\nimport { BuildingEntity } from './building/BuildingEntity'\nimport { EntityType } from './EntityType'\nimport { Job } from './job/Job'\nimport { GetToolJob } from './job/raider/GetToolJob'\nimport { MoveJob } from './job/raider/MoveJob'\nimport { Surface } from './map/Surface'\nimport { Raider } from './raider/Raider'\nimport { Selectable } from './Selectable'\nimport { VehicleEntity } from './vehicle/VehicleEntity'\n\nexport class GameSelection {\n\n    surface: Surface = null\n    building: BuildingEntity = null\n    raiders: Raider[] = []\n    vehicles: VehicleEntity[] = []\n\n    isEmpty(): boolean {\n        return !this.surface && !this.building && this.raiders.length < 1 && this.vehicles.length < 1\n    }\n\n    set(selection: GameSelection) {\n        let added = false\n        added = GameSelection.syncSelection(this.raiders, selection.raiders) || added\n        added = GameSelection.syncSelection(this.vehicles, selection.vehicles) || added\n        if (this.building !== selection.building) {\n            this.building?.deselect()\n            if (selection.building?.isInSelection()) {\n                this.building = selection.building\n                if (this.building.select()) added = true\n            } else {\n                this.building = null\n            }\n        }\n        if (this.surface !== selection.surface) {\n            this.surface?.deselect()\n            if (selection.surface?.isInSelection()) {\n                this.surface = selection.surface\n                if (this.surface.select()) added = true\n            } else {\n                this.surface = null\n            }\n        }\n        if (added) SoundManager.playSample(Sample.SFX_Okay)\n    }\n\n    private static syncSelection(before: Selectable[], after: Selectable[]): boolean {\n        let added = false\n        before.forEach((r) => {\n            if (after.indexOf(r) === -1) {\n                before.remove(r)\n                r.deselect()\n            }\n        })\n        after.forEach((r) => {\n            if (before.indexOf(r) === -1) {\n                if (r.select()) {\n                    before.push(r)\n                    added = true\n                }\n            }\n        })\n        return added\n    }\n\n    getSelectPanelType(): SelectPanelType {\n        if (this.raiders.length > 0) {\n            return SelectPanelType.RAIDER\n        } else if (this.vehicles.length > 0) {\n            return SelectPanelType.VEHICLE\n        } else if (this.building) {\n            return SelectPanelType.BUILDING\n        } else if (this.surface) {\n            return SelectPanelType.SURFACE\n        }\n    }\n\n    assignSurfaceJob(job: Job) {\n        if (!job) return\n        this.raiders.forEach((r) => {\n            if (r.isPrepared(job)) {\n                r.setJob(job)\n            } else {\n                r.setJob(new GetToolJob(r.entityMgr, job.getRequiredTool(), r.entityMgr.getClosestBuildingByType(r.sceneEntity.position.clone(), EntityType.TOOLSTATION)), job)\n            }\n        })\n        this.vehicles.forEach((v) => {\n            if (v.isPrepared(job)) {\n                v.setJob(job)\n            } // do not auto upgrade vehicles\n        })\n    }\n\n    assignMoveJob(target: Vector2) {\n        if (!target) return\n        const raiderGridSize = TILESIZE / 3\n        const raiderTarget = target.divideScalar(raiderGridSize).floor().addScalar(0.5).multiplyScalar(raiderGridSize)\n        this.raiders.forEach((r) => r.setJob(new MoveJob(raiderTarget)))\n        const vehicleGridSize = TILESIZE\n        const vehicleTarget = target.divideScalar(vehicleGridSize).floor().addScalar(0.5).multiplyScalar(vehicleGridSize)\n        this.vehicles.forEach((v) => v.setJob(new MoveJob(vehicleTarget)))\n    }\n\n    deselectAll() {\n        this.raiders.forEach((r) => r.deselect())\n        this.raiders = []\n        this.vehicles.forEach((v) => v.deselect())\n        this.vehicles = []\n        this.building?.deselect()\n        this.building = null\n        this.surface?.deselect()\n        this.surface = null\n    }\n\n}\n","// javascript-astar 0.4.1 (converted to typescript by Scarabol)\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n\nfunction pathTo(node) {\n    let curr = node\n    const path = []\n    while (curr.parent) {\n        path.unshift(curr)\n        curr = curr.parent\n    }\n    return path\n}\n\nfunction getHeap() {\n    return new BinaryHeap(function (node) {\n        return node.f\n    })\n}\n\nexport const astar = {\n\n    /**\n     * Perform an A* Search on a graph given a start and end node.\n     * @param {Graph} graph\n     * @param {GridNode} start\n     * @param {GridNode} end\n     * @param {Object} [options]\n     * @param {boolean} [options.closest] Specifies whether to return the\n     path to the closest node if the target is unreachable.\n     * @param {Function} [options.heuristic] Heuristic function (see\n     *          astar.heuristics).\n     */\n    search(graph: Graph, start: GridNode, end: GridNode, options = null): GridNode[] {\n        graph.cleanDirty()\n        options = options || {}\n        const heuristic = options.heuristic || astar.heuristics.manhattan\n        const closest = options.closest || false\n\n        const openHeap = getHeap()\n        let closestNode = start  // set the start node to be the closest if required\n\n        start.h = heuristic(start, end)\n        graph.markDirty(start)\n\n        openHeap.push(start)\n\n        while (openHeap.size() > 0) {\n\n            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n            const currentNode = openHeap.pop()\n\n            // End case -- result has been found, return the traced path.\n            if (currentNode === end) {\n                return pathTo(currentNode)\n            }\n\n            // Normal case -- move currentNode from open to closed, process each of its neighbors.\n            currentNode.closed = true\n\n            // Find all neighbors for the current node.\n            const neighbors = graph.neighbors(currentNode)\n\n            let i = 0\n            const il = neighbors.length\n            for (; i < il; ++i) {\n                const neighbor = neighbors[i]\n\n                if (neighbor.closed || neighbor.isWall()) {\n                    // Not a valid node to process, skip to next neighbor.\n                    continue\n                }\n\n                // The g score is the shortest distance from start to current node.\n                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n                const gScore = currentNode.g + neighbor.getCost(currentNode)\n                const beenVisited = neighbor.visited\n\n                if (!beenVisited || gScore < neighbor.g) {\n\n                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n                    neighbor.visited = true\n                    neighbor.parent = currentNode\n                    neighbor.h = neighbor.h || heuristic(neighbor, end)\n                    neighbor.g = gScore\n                    neighbor.f = neighbor.g + neighbor.h\n                    graph.markDirty(neighbor)\n                    if (closest) {\n                        // If the neighbour is closer than the current closestNode or if it's equally close but has\n                        // a cheaper path than the current closest node then it becomes the closest node\n                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n                            closestNode = neighbor\n                        }\n                    }\n\n                    if (!beenVisited) {\n                        // Pushing to heap will put it in proper place based on the 'f' value.\n                        openHeap.push(neighbor)\n                    } else {\n                        // Already seen the node, but since it has been rescored we need to reorder it in the heap\n                        openHeap.rescoreElement(neighbor)\n                    }\n                }\n            }\n        }\n\n        if (closest) {\n            return pathTo(closestNode)\n        }\n\n        // No result was found - empty array signifies failure to find path.\n        return []\n    },\n\n    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n    heuristics: {\n        manhattan(pos0, pos1) {\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return d1 + d2\n        },\n\n        diagonal(pos0, pos1) {\n            const D = 1\n            const D2 = Math.sqrt(2)\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2))\n        },\n    },\n\n    cleanNode(node) {\n        node.f = 0\n        node.g = 0\n        node.h = 0\n        node.visited = false\n        node.closed = false\n        node.parent = null\n    },\n}\n\nexport class Graph {\n\n    readonly nodes: GridNode[] = []\n    readonly diagonal: boolean\n    readonly grid: GridNode[][] = []\n    dirtyNodes: GridNode[] = []\n\n    /**\n     * A graph memory structure\n     * @param {Array} gridIn 2D array of input weights\n     * @param {Object} [options]\n     * @param {boolean} [options.diagonal] Specifies whether diagonal moves are allowed\n     */\n    constructor(gridIn: number[][], options = null) {\n        options = options || {}\n        this.diagonal = !!options.diagonal\n        for (let x = 0; x < gridIn.length; x++) {\n            this.grid[x] = []\n\n            let y = 0\n            const row = gridIn[x]\n            for (; y < row.length; y++) {\n                const node = new GridNode(x, y, row[y])\n                this.grid[x][y] = node\n                this.nodes.push(node)\n            }\n        }\n        this.init()\n    }\n\n    init() {\n        this.dirtyNodes = []\n        for (let i = 0; i < this.nodes.length; i++) {\n            astar.cleanNode(this.nodes[i])\n        }\n    }\n\n    cleanDirty() {\n        for (let i = 0; i < this.dirtyNodes.length; i++) {\n            astar.cleanNode(this.dirtyNodes[i])\n        }\n        this.dirtyNodes = []\n    }\n\n    markDirty(node) {\n        this.dirtyNodes.push(node)\n    }\n\n    neighbors(node: GridNode) {\n        const ret: GridNode[] = []\n        const x = node.x\n        const y = node.y\n        const grid = this.grid\n\n        // West\n        if (grid[x - 1] && grid[x - 1][y]) {\n            ret.push(grid[x - 1][y])\n        }\n\n        // East\n        if (grid[x + 1] && grid[x + 1][y]) {\n            ret.push(grid[x + 1][y])\n        }\n\n        // South\n        if (grid[x] && grid[x][y - 1]) {\n            ret.push(grid[x][y - 1])\n        }\n\n        // North\n        if (grid[x] && grid[x][y + 1]) {\n            ret.push(grid[x][y + 1])\n        }\n\n        if (this.diagonal) {\n            // Southwest\n            if (grid[x - 1] && grid[x - 1][y - 1]\n                && grid[x] && grid[x][y - 1]?.weight // South\n                && grid[x - 1] && grid[x - 1][y]?.weight // West\n            ) {\n                ret.push(grid[x - 1][y - 1])\n            }\n\n            // Southeast\n            if (grid[x + 1] && grid[x + 1][y - 1]\n                && grid[x] && grid[x][y - 1]?.weight // South\n                && grid[x + 1] && grid[x + 1][y]?.weight // East\n            ) {\n                ret.push(grid[x + 1][y - 1])\n            }\n\n            // Northwest\n            if (grid[x - 1] && grid[x - 1][y + 1]\n                && grid[x] && grid[x][y + 1]?.weight // North\n                && grid[x - 1] && grid[x - 1][y]?.weight // West\n            ) {\n                ret.push(grid[x - 1][y + 1])\n            }\n\n            // Northeast\n            if (grid[x + 1] && grid[x + 1][y + 1]\n                && grid[x] && grid[x][y + 1]?.weight // North\n                && grid[x + 1] && grid[x + 1][y]?.weight // East\n            ) {\n                ret.push(grid[x + 1][y + 1])\n            }\n        }\n\n        return ret\n    }\n\n    toString() {\n        const graphString = []\n        const nodes = this.grid\n        for (let x = 0; x < nodes.length; x++) {\n            const rowDebug = []\n            const row = nodes[x]\n            for (let y = 0; y < row.length; y++) {\n                rowDebug.push(row[y].weight)\n            }\n            graphString.push(rowDebug.join(' '))\n        }\n        return graphString.join('\\n')\n    }\n}\n\nclass GridNode {\n\n    x: number\n    y: number\n    weight: number\n    h: number\n    closed: boolean\n    visited: boolean\n    g: number\n    parent: GridNode\n    f: number\n\n    constructor(x, y, weight) {\n        this.x = x\n        this.y = y\n        this.weight = weight\n    }\n\n    toString() {\n        return '[' + this.x + ' ' + this.y + ']'\n    }\n\n    getCost(fromNeighbor: GridNode) {\n        // Take diagonal weight into consideration.\n        if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n            return this.weight * 1.41421\n        }\n        return this.weight\n    }\n\n    isWall() {\n        return this.weight === 0\n    }\n}\n\nclass BinaryHeap {\n\n    content = []\n    scoreFunction\n\n    constructor(scoreFunction) {\n        this.content = []\n        this.scoreFunction = scoreFunction\n    }\n\n    push(element) {\n        // Add the new element to the end of the array.\n        this.content.push(element)\n\n        // Allow it to sink down.\n        this.sinkDown(this.content.length - 1)\n    }\n\n    pop() {\n        // Store the first element so we can return it later.\n        const result = this.content[0]\n        // Get the element at the end of the array.\n        const end = this.content.pop()\n        // If there are any elements left, put the end element at the\n        // start, and let it bubble up.\n        if (this.content.length > 0) {\n            this.content[0] = end\n            this.bubbleUp(0)\n        }\n        return result\n    }\n\n    remove(node) {\n        const i = this.content.indexOf(node)\n\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        const end = this.content.pop()\n\n        if (i !== this.content.length - 1) {\n            this.content[i] = end\n\n            if (this.scoreFunction(end) < this.scoreFunction(node)) {\n                this.sinkDown(i)\n            } else {\n                this.bubbleUp(i)\n            }\n        }\n    }\n\n    size() {\n        return this.content.length\n    }\n\n    rescoreElement(node) {\n        this.sinkDown(this.content.indexOf(node))\n    }\n\n    sinkDown(n) {\n        // Fetch the element that has to be sunk.\n        const element = this.content[n]\n\n        // When at 0, an element can not sink any further.\n        while (n > 0) {\n\n            // Compute the parent element's index, and fetch it.\n            const parentN = ((n + 1) >> 1) - 1\n            const parent = this.content[parentN]\n            // Swap the elements if the parent is greater.\n            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n                this.content[parentN] = element\n                this.content[n] = parent\n                // Update 'n' to continue at the new position.\n                n = parentN\n            }\n            // Found a parent that is less, no need to sink any further.\n            else {\n                break\n            }\n        }\n    }\n\n    bubbleUp(n) {\n        // Look up the target element and its score.\n        const length = this.content.length\n        const element = this.content[n]\n        const elemScore = this.scoreFunction(element)\n\n        while (true) {\n            // Compute the indices of the child elements.\n            const child2N = (n + 1) << 1\n            const child1N = child2N - 1\n            // This is used to store the new position of the element, if any.\n            let swap = null\n            let child1Score\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                const child1 = this.content[child1N]\n                child1Score = this.scoreFunction(child1)\n\n                // If the score is less than our element's, we need to swap.\n                if (child1Score < elemScore) {\n                    swap = child1N\n                }\n            }\n\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                const child2 = this.content[child2N]\n                const child2Score = this.scoreFunction(child2)\n                if (child2Score < (swap === null ? elemScore : child1Score)) {\n                    swap = child2N\n                }\n            }\n\n            // If the element needs to be moved, swap it, and continue.\n            if (swap !== null) {\n                this.content[n] = this.content[swap]\n                this.content[swap] = element\n                n = swap\n            }\n            // Otherwise, we are done.\n            else {\n                break\n            }\n        }\n    }\n}\n","import { Vector3 } from 'three'\nimport { EventKey } from './EventKeyEnum'\nimport { WorldEvent } from './WorldEvents'\n\nexport class WorldLocationEvent extends WorldEvent {\n\n    location: Vector3\n\n    constructor(entityKey: EventKey, location: Vector3) {\n        super(entityKey)\n        this.location = location\n    }\n\n}\n\nexport class GenericDeathEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_DEATH, location)\n    }\n\n}\n\nexport class GenericMonsterEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_MONSTER, location)\n    }\n\n}\n\nexport class CrystalFoundEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_CRYSTAL_FOUND, location)\n    }\n\n}\n\nexport class UnderAttackEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_UNDER_ATTACK, location)\n    }\n\n}\n\nexport class LandslideEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_LANDSLIDE, location)\n    }\n\n}\n\nexport class PowerDrainEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_POWER_DRAIN, location)\n    }\n\n}\n\nexport class SlugEmergeEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_SLUG_EMERGE, location)\n    }\n\n}\n\nexport class RaiderDiscoveredEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_RAIDER_DISCOVERED, location)\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class DynamiteActivity extends BaseActivity {\n\n    static Normal = new DynamiteActivity('Normal')\n    static TickDown = new DynamiteActivity('TickDown')\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { MaterialEntity } from '../../material/MaterialEntity'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { ShareableJob } from '../ShareableJob'\nimport { CarryPathTarget } from './CarryPathTarget'\nimport { SiteCarryPathTarget } from './SiteCarryPathTarget'\n\nexport class CarryJob<I extends MaterialEntity> extends ShareableJob {\n\n    item: I\n    targets: CarryPathTarget[] = []\n    actualTarget: CarryPathTarget = null\n\n    constructor(item: I) {\n        super()\n        this.item = item\n    }\n\n    getWorkplaces(): CarryPathTarget[] {\n        if (this.targets.length < 1 || this.actualTarget?.isInvalid()) {\n            this.targets = this.item.findCarryTargets()\n        }\n        return this.targets\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return this.item.getPriorityIdentifier()\n    }\n\n    setActualWorkplace(target: CarryPathTarget) {\n        if (this.actualTarget === target) return\n        (this.actualTarget as SiteCarryPathTarget)?.site?.unAssign(this.item)\n        this.actualTarget = target;\n        (this.actualTarget as SiteCarryPathTarget)?.site?.assign(this.item)\n    }\n\n    getCarryItem(): I {\n        return this.item\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return this.actualTarget.getDropAction()\n    }\n\n    isReadyToComplete(): boolean {\n        return this.actualTarget.canGatherItem()\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.fulfiller.forEach((f) => {\n            f.sceneEntity.headTowards(this.actualTarget.targetLocation)\n            f.dropItem()\n            this.item.sceneEntity.position.copy(this.item.sceneMgr.getFloorPosition(this.actualTarget.targetLocation))\n        })\n        this.actualTarget.gatherItem(this.item)\n    }\n\n}\n","import { DynamiteActivity } from '../../activities/DynamiteActivity'\nimport { Dynamite } from '../../material/Dynamite'\nimport { RaiderTraining } from '../../raider/RaiderTraining'\nimport { CarryJob } from './CarryJob'\n\nexport class CarryDynamiteJob extends CarryJob<Dynamite> {\n\n    color: number = 0xa06060\n\n    constructor(dynamite: Dynamite) {\n        super(dynamite)\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return RaiderTraining.DEMOLITION\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        // TODO add as explosive and scare em all!\n        this.item.sceneEntity.headTowards(this.item.targetSurface.getCenterWorld2D())\n        this.item.sceneEntity.changeActivity(DynamiteActivity.TickDown, () => {\n            this.item.sceneEntity.removeFromScene()\n            this.item.targetSurface.collapse()\n            // TODO add explosion animation\n            // TODO damage raider, vehicle, buildings\n        })\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { ShareableJob } from '../ShareableJob'\n\nexport class ClearRubbleJob extends ShareableJob {\n\n    surface: Surface\n    lastRubblePositions: PathTarget[]\n\n    constructor(surface: Surface) {\n        super()\n        this.surface = surface\n        this.lastRubblePositions = this.surface.rubblePositions.map((p) => new PathTarget(p))\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.SHOVEL\n    }\n\n    getWorkplaces(): PathTarget[] { // TODO optimize performance and code duplication\n        const surfaceRubblePositions = this.surface.rubblePositions\n        if (!this.lastRubblePositions.every((d) => surfaceRubblePositions.some((p) => p.equals(d.targetLocation))) ||\n            !surfaceRubblePositions.every((p) => this.lastRubblePositions.some((d) => p.equals(d.targetLocation)))) {\n            this.lastRubblePositions = surfaceRubblePositions.map((p) => new PathTarget(p))\n        }\n        return this.lastRubblePositions\n    }\n\n    onJobComplete() {\n        this.surface.reduceRubble()\n        if (!this.surface.hasRubble()) {\n            this.surface.clearRubbleJob = null\n            super.onJobComplete()\n        }\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityClearing\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Clear\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\n\nexport class SurfacePathTarget extends PathTarget {\n\n    surface: Surface\n\n    constructor(location: Vector2, surface: Surface) {\n        super(location)\n        this.surface = surface\n    }\n\n    getFocusPoint(): Vector2 {\n        return this.surface.getCenterWorld2D()\n    }\n\n    isInvalid(): boolean {\n        return !this.surface.isDigable()\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { FulfillerEntity } from '../../FulfillerEntity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { ShareableJob } from '../ShareableJob'\nimport { SurfacePathTarget } from './SurfacePathTarget'\n\nexport class DrillJob extends ShareableJob {\n\n    color: number = 0xa0a0a0\n    surface: Surface\n    digPositions: PathTarget[]\n\n    constructor(surface: Surface) {\n        super()\n        this.surface = surface\n        this.digPositions = this.surface.getDigPositions().map((p) => new SurfacePathTarget(p, this.surface))\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.DRILL\n    }\n\n    getWorkplaces(): PathTarget[] { // TODO optimize performance and code duplication\n        const surfaceDigPositions = this.surface.getDigPositions()\n        if (!this.digPositions.every((d) => surfaceDigPositions.some((p) => p.equals(d.targetLocation))) ||\n            !surfaceDigPositions.every((p) => this.digPositions.some((d) => p.equals(d.targetLocation)))) {\n            this.digPositions = surfaceDigPositions.map((p) => new SurfacePathTarget(p, this.surface))\n        }\n        return this.digPositions\n    }\n\n    onJobComplete() {\n        if (this.surface.onDrillComplete(this.fulfiller.last().sceneEntity.position2D.clone())) super.onJobComplete()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityDestruction\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Drill\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number { // TODO refactor this with surface \"health\" or \"stability\", which is reduced by drilling\n        const drillTimeInMsPerType: Map<EntityType, { drillTime: number, count: number }> = new Map()\n        this.fulfiller.forEach((f) => {\n            drillTimeInMsPerType.getOrUpdate(f.entityType, () => {\n                return {drillTime: f.stats[this.surface.surfaceType.statsDrillName][f.level] * 1000, count: 0}\n            }).count++\n        })\n        const drillTimeEntry = drillTimeInMsPerType.get(fulfiller.entityType)\n        const drillTimeMs = drillTimeEntry?.drillTime / (drillTimeEntry?.count || 1) || null\n        if (!drillTimeMs) console.warn('According to cfg this entity cannot drill this material')\n        return drillTimeMs\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { FulfillerEntity } from '../../FulfillerEntity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { ShareableJob } from '../ShareableJob'\nimport { SurfacePathTarget } from './SurfacePathTarget'\n\nexport class ReinforceJob extends ShareableJob {\n\n    color: number = 0x60a060\n    surface: Surface\n    digPositions: PathTarget[]\n\n    constructor(surface: Surface) {\n        super()\n        this.surface = surface\n        this.digPositions = this.surface.getDigPositions().map((p) => new SurfacePathTarget(p, this.surface))\n    }\n\n    getWorkplaces(): PathTarget[] { // TODO optimize performance and code duplication\n        const surfaceDigPositions = this.surface.getDigPositions()\n        if (!this.digPositions.every((d) => surfaceDigPositions.some((p) => p.equals(d.targetLocation))) ||\n            !surfaceDigPositions.every((p) => this.digPositions.some((d) => p.equals(d.targetLocation)))) {\n            this.digPositions = surfaceDigPositions.map((p) => new SurfacePathTarget(p, this.surface))\n        }\n        return this.digPositions\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.reinforce()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityReinforce\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Reinforce\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        return 2700\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.HAMMER\n    }\n\n}\n","import { Box3, CanvasTexture, Group, Matrix4, Mesh, MeshBasicMaterial, Object3D, PositionalAudio, Sphere, SphereGeometry, Sprite, SpriteMaterial, Vector2, Vector3 } from 'three'\nimport { SoundManager } from '../audio/SoundManager'\nimport { createContext } from '../core/ImageHelper'\nimport { AnimEntityActivity } from '../game/model/activities/AnimEntityActivity'\nimport { Surface } from '../game/model/map/Surface'\nimport { Selectable } from '../game/model/Selectable'\nimport { SceneManager } from '../game/SceneManager'\nimport { TILESIZE } from '../params'\n\nexport class SceneEntity {\n\n    floorOffset: number = 0.1\n\n    sceneMgr: SceneManager\n    group: Group = new Group()\n    pickSphere: Mesh = null\n    selectionFrame: Sprite = null\n    boundingSphere: Sphere = new Sphere()\n\n    constructor(sceneMgr: SceneManager) {\n        this.sceneMgr = sceneMgr\n    }\n\n    set visible(state: boolean) {\n        this.group.visible = state\n    }\n\n    get visible(): boolean {\n        return this.group.visible\n    }\n\n    get position(): Vector3 {\n        return this.group.position\n    }\n\n    set position(position: Vector3) {\n        this.group.position.copy(position)\n    }\n\n    get position2D(): Vector2 {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    add(other: Object3D) {\n        this.group.add(other)\n    }\n\n    remove(other: Object3D) {\n        this.group.remove(other)\n    }\n\n    getRadiusSquare(): number {\n        new Box3().setFromObject(this.group).getBoundingSphere(this.boundingSphere)\n        return this.boundingSphere.radius * this.boundingSphere.radius\n    }\n\n    getHeading(): number {\n        return this.group.rotation.y\n    }\n\n    setHeading(heading: number) {\n        this.group.rotation.y = heading\n    }\n\n    lookAt(target: Vector3) {\n        this.group.lookAt(target)\n    }\n\n    flipXAxis() {\n        this.group.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n    }\n\n    createPickSphere(pickSphereDiameter: number, selectable: Selectable, pickSphereHeightOffset: number = this.getBoundingSphereCenter().y - this.position.y) {\n        if (this.pickSphere) return\n        const pickSphereRadius = pickSphereDiameter / 2\n        const geometry = new SphereGeometry(pickSphereRadius, pickSphereRadius, pickSphereRadius)\n        const material = new MeshBasicMaterial({color: 0xffff00, visible: false}) // change visible to true for debugging\n        this.pickSphere = new Mesh(geometry, material)\n        this.pickSphere.userData = {selectable: selectable}\n        this.pickSphere.position.y = pickSphereHeightOffset\n        this.add(this.pickSphere)\n        this.createSelectionFrame(pickSphereDiameter, this.pickSphere.position)\n    }\n\n    getBoundingSphereCenter(): Vector3 {\n        const center = new Vector3()\n        new Box3().setFromObject(this.group).getCenter(center)\n        return center\n    }\n\n    private createSelectionFrame(pickSphereDiameter: number, pickSphereCenter: Vector3) {\n        const selectionFrameTextureSize = 128\n        const ctx = createContext(selectionFrameTextureSize, selectionFrameTextureSize)\n        ctx.fillStyle = '#0f0'\n        const strength = Math.round(50 / pickSphereDiameter)\n        const length = selectionFrameTextureSize / 6\n        ctx.fillRect(0, 0, length, strength)\n        ctx.fillRect(0, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, 0, length, strength)\n        ctx.fillRect(selectionFrameTextureSize - strength, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - strength, selectionFrameTextureSize - length, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - length, strength, length)\n        const selectionFrameTexture = new CanvasTexture(ctx.canvas as HTMLCanvasElement)\n        const selectionMaterial = new SpriteMaterial({map: selectionFrameTexture, depthTest: false})\n        this.selectionFrame = new Sprite(selectionMaterial)\n        this.selectionFrame.position.copy(pickSphereCenter)\n        const selectionFrameSize = pickSphereDiameter * 3 / 4\n        this.selectionFrame.scale.set(selectionFrameSize, selectionFrameSize, selectionFrameSize)\n        this.selectionFrame.visible = false\n        this.add(this.selectionFrame)\n    }\n\n    get surfaces(): Surface[] {\n        return [this.sceneMgr.terrain.getSurfaceFromWorld(this.group.position)]\n    }\n\n    playPositionalAudio(sfxName: string, loop: boolean): PositionalAudio {\n        const audio = new PositionalAudio(this.sceneMgr.listener)\n        audio.setRefDistance(TILESIZE * 2)\n        audio.loop = loop\n        this.add(audio)\n        SoundManager.getSoundBuffer(sfxName).then((audioBuffer) => {\n            audio.setBuffer(audioBuffer).play() // TODO retry playing sound for looped ones, when audio context fails\n            if (!audio.loop) audio.onEnded = () => this.remove(audio)\n        }).catch(() => {\n            this.remove(audio)\n        })\n        return audio\n    }\n\n    addToScene(worldPosition: Vector2, radHeading: number) {\n        if (worldPosition) {\n            this.position.copy(this.sceneMgr.getFloorPosition(worldPosition))\n            this.position.y += this.floorOffset\n        }\n        if (radHeading !== undefined && radHeading !== null) {\n            this.setHeading(radHeading)\n        }\n        this.visible = this.surfaces.some((s) => s.discovered)\n        this.sceneMgr.scene.add(this.group)\n    }\n\n    removeFromScene() {\n        this.sceneMgr.scene.remove(this.group)\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return AnimEntityActivity.Stand\n    }\n\n    changeActivity(activity: AnimEntityActivity = this.getDefaultActivity(), onAnimationDone: () => any = null, durationTimeMs: number = null) {\n    }\n\n    headTowards(location: Vector2) {\n        this.lookAt(new Vector3(location.x, this.group.position.y, location.y))\n    }\n\n}\n","import { AdditiveBlending, Color } from 'three'\nimport { SceneManager } from '../../game/SceneManager'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { SceneEntity } from '../SceneEntity'\nimport { SequenceTextureMaterial } from '../SequenceTextureMaterial'\n\nexport class CrystalSceneEntity extends SceneEntity {\n\n    constructor(sceneMgr: SceneManager) {\n        super(sceneMgr)\n        const mesh2 = ResourceManager.getLwoModel('MiscAnims/Crystal/vlp_greencrystal.lwo')\n        mesh2.getMaterials().forEach((mat: SequenceTextureMaterial) => {\n            mat.blending = AdditiveBlending\n            mat.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n            mat.setOpacity(0.5) // XXX read from LWO file?\n        })\n        mesh2.scale.set(1.75, 1.75, 1.75) // XXX derive from texture scale?\n        this.add(mesh2)\n        const mesh = ResourceManager.getLwoModel('World/Shared/Crystal.lwo') // high poly version\n        mesh.getMaterials().forEach((mat: SequenceTextureMaterial) => {\n            mat.emissive = new Color(0, 8, 0) // XXX read from LWO file?\n            mat.color = new Color(0, 0, 0) // XXX read from LWO file?\n            mat.setOpacity(0.9) // XXX read from LWO file?\n        })\n        this.add(mesh)\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class BuildingActivity extends AnimEntityActivity {\n\n    static Teleport = new BuildingActivity('Activity_Teleport')\n    static Deposit = new BuildingActivity('Activity_Deposit')\n    static Explode = new BuildingActivity('Activity_Explode')\n    static Unpowered = new BuildingActivity('Activity_Unpowered')\n\n}\n","import { Vector2 } from 'three'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { MaterialEntity } from '../../material/MaterialEntity'\nimport { PathTarget } from '../../PathTarget'\n\nexport class CarryPathTarget extends PathTarget {\n\n    constructor(location: Vector2, radiusSq: number = 0) {\n        super(location, radiusSq)\n    }\n\n    canGatherItem(): boolean {\n        return true\n    }\n\n    gatherItem(item: MaterialEntity) {\n        item.sceneEntity.addToScene(null, null)\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { EventBus } from '../../../../event/EventBus'\nimport { MaterialAmountChanged } from '../../../../event/WorldEvents'\nimport { BuildingActivity } from '../../activities/BuildingActivity'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { BuildingEntity } from '../../building/BuildingEntity'\nimport { EntityType } from '../../EntityType'\nimport { GameState } from '../../GameState'\nimport { MaterialEntity } from '../../material/MaterialEntity'\nimport { CarryPathTarget } from './CarryPathTarget'\n\nexport class BuildingCarryPathTarget extends CarryPathTarget {\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(building.getDropPosition2D())\n        this.building = building\n    }\n\n    getFocusPoint(): Vector2 {\n        return this.building.sceneEntity.position2D\n    }\n\n    canGatherItem(): boolean {\n        return this.building.sceneEntity.activity.activityKey === this.building.getDefaultActivity().activityKey\n    }\n\n    gatherItem(item: MaterialEntity) {\n        if (this.building.entityType === EntityType.POWER_STATION || this.building.entityType === EntityType.ORE_REFINERY) {\n            if (this.building.sceneEntity.animation?.carryJoint) {\n                this.building.sceneEntity.animation.carryJoint.add(item.sceneEntity.group)\n                item.sceneEntity.position.set(0, 0, 0)\n            }\n            this.building.sceneEntity.changeActivity(BuildingActivity.Deposit, () => {\n                this.building.sceneEntity.changeActivity()\n                if (this.building.sceneEntity.animation?.carryJoint) this.building.sceneEntity.animation.carryJoint.remove(item.sceneEntity.group)\n                BuildingCarryPathTarget.addItemToStorage(item)\n            })\n        } else {\n            BuildingCarryPathTarget.addItemToStorage(item)\n        }\n    }\n\n    private static addItemToStorage(item: MaterialEntity) {\n        switch (item.entityType) {\n            case EntityType.CRYSTAL:\n                GameState.numCrystal++\n                break\n            case EntityType.ORE:\n                GameState.numOre++\n                break\n        }\n        EventBus.publishEvent(new MaterialAmountChanged())\n        item.sceneEntity.removeFromScene()\n    }\n\n    getDropAction(): RaiderActivity {\n        return this.building.getDropAction()\n    }\n\n    isInvalid(): boolean {\n        return !this.building.isUsable()\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { ITEM_ACTION_RANGE_SQ } from '../../../../params'\nimport { BarrierActivity } from '../../activities/BarrierActivity'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { BuildingSite } from '../../building/BuildingSite'\nimport { EntityType } from '../../EntityType'\nimport { MaterialEntity } from '../../material/MaterialEntity'\nimport { CarryPathTarget } from './CarryPathTarget'\n\nexport class SiteCarryPathTarget extends CarryPathTarget {\n\n    site: BuildingSite\n    headingOnSite: number\n\n    constructor(site: BuildingSite, location: Vector2, headingOnSite: number = null) {\n        super(location, ITEM_ACTION_RANGE_SQ)\n        this.site = site\n        this.headingOnSite = headingOnSite\n    }\n\n    gatherItem(item: MaterialEntity) {\n        item.sceneEntity.addToScene(this.targetLocation, this.headingOnSite)\n        if (item.entityType === EntityType.BARRIER) {\n            item.sceneEntity.changeActivity(BarrierActivity.Expand, () => item.sceneEntity.changeActivity(BarrierActivity.Long))\n        }\n        this.site.addItem(item)\n    }\n\n    getDropAction(): RaiderActivity {\n        return this.site.getDropAction()\n    }\n\n    isInvalid(): boolean {\n        return this.site.complete || this.site.canceled\n    }\n\n}\n","import { ITEM_ACTION_RANGE_SQ } from '../../../params'\nimport { SceneEntity } from '../../../scene/SceneEntity'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { CarryJob } from '../job/carry/CarryJob'\nimport { CarryPathTarget } from '../job/carry/CarryPathTarget'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { PathTarget } from '../PathTarget'\n\nexport abstract class MaterialEntity {\n\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    entityType: EntityType\n    sceneEntity: SceneEntity = null\n    positionAsPathTargets: PathTarget[] = []\n\n    protected constructor(sceneMgr: SceneManager, entityMgr: EntityManager, entityType: EntityType) {\n        this.sceneMgr = sceneMgr\n        this.entityMgr = entityMgr\n        this.entityType = entityType\n    }\n\n    abstract findCarryTargets(): CarryPathTarget[]\n\n    abstract getPriorityIdentifier(): PriorityIdentifier\n\n    createCarryJob(): CarryJob<MaterialEntity> {\n        return new CarryJob(this) // TODO better create only one job per item?\n    }\n\n    getPositionAsPathTargets(): PathTarget[] {\n        const position = this.sceneEntity.position2D\n        if (this.positionAsPathTargets.length < 1 || !this.positionAsPathTargets[0].targetLocation.equals(position)) {\n            this.positionAsPathTargets = [new PathTarget(position, ITEM_ACTION_RANGE_SQ)] // XXX becomes obsolete when using setter to change position\n        }\n        return this.positionAsPathTargets\n    }\n\n    removeFromScene() {\n        this.sceneEntity.removeFromScene()\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { CrystalSceneEntity } from '../../../scene/entities/CrystalSceneEntity'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { BuildingCarryPathTarget } from '../job/carry/BuildingCarryPathTarget'\nimport { CarryPathTarget } from '../job/carry/CarryPathTarget'\nimport { SiteCarryPathTarget } from '../job/carry/SiteCarryPathTarget'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Crystal extends MaterialEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.CRYSTAL)\n        this.sceneEntity = new CrystalSceneEntity(sceneMgr)\n    }\n\n    findCarryTargets(): CarryPathTarget[] {\n        const sites = this.entityMgr.buildingSites.filter((b) => b.needs(this.entityType))\n        if (sites.length > 0) return sites.map((s) => new SiteCarryPathTarget(s, s.getRandomDropPosition()))\n        const powerStations = this.entityMgr.getBuildingsByType(EntityType.POWER_STATION)\n        if (powerStations.length > 0) return powerStations.map((b) => new BuildingCarryPathTarget(b))\n        const toolStations = this.entityMgr.getBuildingsByType(EntityType.TOOLSTATION)\n        return toolStations.map((b) => new BuildingCarryPathTarget(b))\n    }\n\n    get stats() {\n        return ResourceManager.stats.PowerCrystal\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityCrystal\n    }\n\n}\n","import { AnimEntityActivity } from '../game/model/activities/AnimEntityActivity'\nimport { BaseActivity } from '../game/model/activities/BaseActivity'\nimport { AnimationEntityType } from '../game/model/anim/AnimationEntityType'\nimport { AnimClip } from '../game/model/anim/AnimClip'\nimport { SceneManager } from '../game/SceneManager'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { SceneEntity } from './SceneEntity'\n\nexport class AnimatedSceneEntity extends SceneEntity {\n\n    animationEntityType: AnimationEntityType = null\n    animation: AnimClip = null\n    activity: BaseActivity = null\n\n    constructor(sceneMgr: SceneManager, aeFilename: string) {\n        super(sceneMgr)\n        this.animationEntityType = ResourceManager.getAnimationEntityType(aeFilename, this.sceneMgr.listener)\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        this.animation?.stop()\n    }\n\n    changeActivity(activity: AnimEntityActivity = this.getDefaultActivity(), onAnimationDone: () => any = null, durationTimeMs: number = null) {\n        if (this.activity === activity || this.animationEntityType === null) return\n        this.activity = activity\n        const lActivityKey = activity.activityKey.toLowerCase()\n        let animation = this.animationEntityType.animations.get(lActivityKey)\n        if (!animation) { // find by prefix\n            this.animationEntityType.animations.forEach((a, key) => {\n                if (!animation && lActivityKey.startsWith(key)) animation = a\n            })\n        }\n        if (!animation) {\n            console.warn('Activity ' + activity.activityKey + ' unknown or has no animation defined')\n            console.log(this.animationEntityType.animations)\n            return\n        }\n        if (this.animation) {\n            this.remove(this.animation.polyModel)\n            this.animation.stop()\n        }\n        const carriedChildren = this.animation?.carryJoint?.children\n        if (carriedChildren && carriedChildren.length > 0 && animation.carryJoint) {\n            animation.carryJoint.add(...carriedChildren) // keep carried children\n        }\n        this.animation = animation\n        this.add(this.animation.polyModel)\n        this.animation.start(onAnimationDone, durationTimeMs)\n    }\n\n    update(elapsedMs: number) {\n        this.animation?.update(elapsedMs)\n    }\n\n}\n","import { AnimEntityActivity } from '../../game/model/activities/AnimEntityActivity'\nimport { DynamiteActivity } from '../../game/model/activities/DynamiteActivity'\nimport { SceneManager } from '../../game/SceneManager'\nimport { AnimatedSceneEntity } from '../AnimatedSceneEntity'\n\nexport class DynamiteSceneEntity extends AnimatedSceneEntity {\n\n    constructor(sceneMgr: SceneManager) {\n        super(sceneMgr, 'MiscAnims/Dynamite/Dynamite.ae')\n        this.changeActivity()\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return DynamiteActivity.Normal\n    }\n\n}\n","import { DynamiteSceneEntity } from '../../../scene/entities/DynamiteSceneEntity'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { CarryDynamiteJob } from '../job/carry/CarryDynamiteJob'\nimport { CarryJob } from '../job/carry/CarryJob'\nimport { CarryPathTarget } from '../job/carry/CarryPathTarget'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { Surface } from '../map/Surface'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Dynamite extends MaterialEntity {\n\n    targetSurface: Surface\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager, surface: Surface) {\n        super(sceneMgr, entityMgr, EntityType.DYNAMITE)\n        this.sceneEntity = new DynamiteSceneEntity(sceneMgr)\n        this.targetSurface = surface\n    }\n\n    findCarryTargets(): CarryPathTarget[] {\n        if (this.targetSurface?.isDigable()) {\n            return this.targetSurface.getDigPositions().map((p) => new CarryPathTarget(p))\n        } else {\n            return this.entityMgr.getBuildingsByType(EntityType.TOOLSTATION).map((b) => b.getDropPosition2D())\n                .map((p) => new CarryPathTarget(p))\n        }\n    }\n\n    createCarryJob(): CarryJob<Dynamite> {\n        return new CarryDynamiteJob(this)\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityDestruction\n    }\n\n}\n","import { SceneManager } from '../../game/SceneManager'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { SceneEntity } from '../SceneEntity'\n\nexport class OreSceneEntity extends SceneEntity {\n\n    constructor(sceneMgr: SceneManager) {\n        super(sceneMgr)\n        this.add(ResourceManager.getLwoModel('MiscAnims/Ore/Ore1st.lwo'))\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { OreSceneEntity } from '../../../scene/entities/OreSceneEntity'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { BuildingCarryPathTarget } from '../job/carry/BuildingCarryPathTarget'\nimport { CarryPathTarget } from '../job/carry/CarryPathTarget'\nimport { SiteCarryPathTarget } from '../job/carry/SiteCarryPathTarget'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Ore extends MaterialEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.ORE)\n        this.sceneEntity = new OreSceneEntity(sceneMgr)\n    }\n\n    findCarryTargets(): CarryPathTarget[] {\n        const sites = this.entityMgr.buildingSites.filter((b) => b.needs(this.entityType))\n        if (sites.length > 0) return sites.map((s) => new SiteCarryPathTarget(s, s.getRandomDropPosition()))\n        const oreRefineries = this.entityMgr.getBuildingsByType(EntityType.ORE_REFINERY)\n        if (oreRefineries.length > 0) return oreRefineries.map((b) => new BuildingCarryPathTarget(b))\n        const toolStations = this.entityMgr.getBuildingsByType(EntityType.TOOLSTATION)\n        return toolStations.map((b) => new BuildingCarryPathTarget(b))\n    }\n\n    get stats() {\n        return ResourceManager.stats.Ore\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityOre\n    }\n\n}\n","import { MathUtils, Mesh, MeshPhongMaterial, PositionalAudio, Raycaster, Vector2, Vector3 } from 'three'\nimport { Sample } from '../../../audio/Sample'\nimport { SoundManager } from '../../../audio/SoundManager'\nimport { getRandom, getRandomSign } from '../../../core/Util'\nimport { EventBus } from '../../../event/EventBus'\nimport { SelectionChanged, UpdateRadarSurface } from '../../../event/LocalEvents'\nimport { CavernDiscovered, JobCreateEvent, JobDeleteEvent, OreFoundEvent } from '../../../event/WorldEvents'\nimport { CrystalFoundEvent } from '../../../event/WorldLocationEvent'\nimport { HEIGHT_MULTIPLIER, TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { BuildingEntity } from '../building/BuildingEntity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntityType } from '../EntityType'\nimport { CarryDynamiteJob } from '../job/carry/CarryDynamiteJob'\nimport { ClearRubbleJob } from '../job/surface/ClearRubbleJob'\nimport { DrillJob } from '../job/surface/DrillJob'\nimport { ReinforceJob } from '../job/surface/ReinforceJob'\nimport { Crystal } from '../material/Crystal'\nimport { Dynamite } from '../material/Dynamite'\nimport { ElectricFence } from '../material/ElectricFence'\nimport { Ore } from '../material/Ore'\nimport { Selectable } from '../Selectable'\nimport { SurfaceGeometry } from './SurfaceGeometry'\nimport { SurfaceType } from './SurfaceType'\nimport { Terrain } from './Terrain'\nimport { WALL_TYPE } from './WallType'\nimport degToRad = MathUtils.degToRad\n\nexport class Surface implements Selectable {\n\n    terrain: Terrain\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    surfaceType: SurfaceType\n    x: number\n    y: number\n    containedOres: number = 0\n    containedCrystals: number = 0\n    heightOffset: number = null\n    discovered: boolean = false\n    selected: boolean = false\n    reinforced: boolean = false\n    drillJob: DrillJob = null\n    reinforceJob: ReinforceJob = null\n    dynamiteJob: CarryDynamiteJob = null\n    clearRubbleJob: ClearRubbleJob = null\n    surfaceRotation: number = 0\n    seamLevel: number = 0\n\n    wallType: WALL_TYPE = null\n    mesh: Mesh = null\n    needsMeshUpdate: boolean = false\n\n    topLeftVertex: Vector3 = null\n    topRightVertex: Vector3 = null\n    bottomRightVertex: Vector3 = null\n    bottomLeftVertex: Vector3 = null\n    topLeftHeightOffset: number = null\n    topRightHeightOffset: number = null\n    bottomRightHeightOffset: number = null\n    bottomLeftHeightOffset: number = null\n\n    rubblePositions: Vector2[] = []\n\n    building: BuildingEntity = null\n    site: BuildingSite = null\n    fence: ElectricFence = null\n    hasPower: boolean = false\n\n    constructor(terrain: Terrain, surfaceType: SurfaceType, x: number, y: number, heightOffset: number) {\n        this.terrain = terrain\n        this.sceneMgr = this.terrain.sceneMgr\n        this.entityMgr = this.terrain.entityMgr\n        this.surfaceType = surfaceType\n        if (surfaceType === SurfaceType.CRYSTAL_SEAM || surfaceType === SurfaceType.ORE_SEAM) this.seamLevel = 4\n        this.x = x\n        this.y = y\n        this.heightOffset = heightOffset\n        if (surfaceType === SurfaceType.RUBBLE4 || surfaceType === SurfaceType.RUBBLE3 || surfaceType === SurfaceType.RUBBLE2 || surfaceType === SurfaceType.RUBBLE1) {\n            this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        }\n    }\n\n    /**\n     * @return {boolean} Returns true, if a new cave has been discovered\n     */\n    discover(): boolean { // TODO improve performance then test with level 20\n        this.setDiscovered()\n        this.needsMeshUpdate = true\n        if (!this.surfaceType.floor) return false\n        const floors: Surface[] = []\n        const others: Surface[] = []\n        for (let x = -1; x <= 1; x++) {\n            for (let y = -1; y <= 1; y++) {\n                if (x === 0 && y === 0) continue\n                const n = this.terrain.getSurface(this.x + x, this.y + y)\n                if ((x === 0 || y === 0) && n.surfaceType.floor) {\n                    floors.push(n)\n                } else {\n                    others.push(n)\n                }\n            }\n        }\n        let caveFound = false\n        let counter = 0\n        while (floors.length > 0) {\n            counter++\n            const neighbor = floors.shift()\n            neighbor.setDiscovered()\n            for (let x = -1; x <= 1; x++) {\n                for (let y = -1; y <= 1; y++) {\n                    if (x === 0 && y === 0) continue\n                    const n = neighbor.terrain.getSurface(neighbor.x + x, neighbor.y + y)\n                    if ((x === 0 || y === 0) && n.surfaceType.floor && !n.discovered) {\n                        floors.push(n)\n                        caveFound = true\n                    } else {\n                        others.push(n)\n                    }\n                }\n            }\n        }\n        others.forEach((o) => {\n            o.setDiscovered()\n            if (!o.isSupported()) {\n                o.collapse()\n            }\n        })\n        console.log('surface discover handled ' + counter + ' floors and ' + others.length + ' others')\n        return caveFound\n    }\n\n    private setDiscovered() {\n        if (!this.discovered) this.entityMgr.discoverSurface(this)\n        this.discovered = true\n        this.needsMeshUpdate = true\n        EventBus.publishEvent(new UpdateRadarSurface(this))\n    }\n\n    onDrillComplete(drillPosition: Vector2): boolean {\n        if (this.seamLevel > 0) {\n            this.seamLevel--\n            const vec = new Vector2().copy(drillPosition).sub(this.getCenterWorld2D())\n                .multiplyScalar(0.3 + getRandom(3) / 10)\n                .rotateAround(new Vector2(0, 0), degToRad(-10 + getRandom(20)))\n                .add(drillPosition)\n            if (this.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                const crystal = this.entityMgr.placeMaterial(new Crystal(this.sceneMgr, this.entityMgr), vec)\n                EventBus.publishEvent(new CrystalFoundEvent(crystal.sceneEntity.position.clone()))\n            } else if (this.surfaceType === SurfaceType.ORE_SEAM) {\n                this.entityMgr.placeMaterial(new Ore(this.sceneMgr, this.entityMgr), vec)\n                EventBus.publishEvent(new OreFoundEvent())\n            }\n        }\n        if (this.seamLevel > 0) {\n            return false\n        } else {\n            this.collapse()\n            return true\n        }\n    }\n\n    collapse() {\n        this.cancelJobs()\n        this.terrain.removeFallInOrigin(this)\n        this.surfaceType = SurfaceType.RUBBLE4\n        EventBus.publishEvent(new UpdateRadarSurface(this))\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += 4\n        this.needsMeshUpdate = true\n        const foundCave = this.discover()\n        if (foundCave) EventBus.publishEvent(new CavernDiscovered())\n        // drop contained ores and crystals\n        this.dropContainedOre(this.containedOres - 4)\n        for (let c = 0; c < this.containedCrystals; c++) {\n            const crystal = this.entityMgr.placeMaterial(new Crystal(this.sceneMgr, this.entityMgr), this.getRandomPosition())\n            EventBus.publishEvent(new CrystalFoundEvent(crystal.sceneEntity.position.clone()))\n        }\n        // check for unsupported neighbors\n        for (let x = this.x - 1; x <= this.x + 1; x++) {\n            for (let y = this.y - 1; y <= this.y + 1; y++) {\n                if (x !== this.x || y !== this.y) {\n                    const surf = this.terrain.getSurface(x, y)\n                    surf.needsMeshUpdate = true\n                    if (!surf.isSupported()) surf.collapse()\n                }\n            }\n        }\n        // update meshes\n        this.terrain.updateSurfaceMeshes()\n        this.playPositionalSample(Sample.SFX_RockBreak)\n    }\n\n    private dropContainedOre(dropAmount: number) {\n        for (let c = 0; c < dropAmount && this.containedOres > 0; c++) {\n            this.containedOres--\n            this.entityMgr.placeMaterial(new Ore(this.sceneMgr, this.entityMgr), this.getRandomPosition())\n            EventBus.publishEvent(new OreFoundEvent())\n        }\n    }\n\n    getRandomPosition(): Vector2 {\n        return new Vector2(this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4),\n            this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4))\n    }\n\n    cancelJobs() {\n        this.drillJob = Surface.safeRemoveJob(this.drillJob)\n        this.reinforceJob = Surface.safeRemoveJob(this.reinforceJob)\n        this.dynamiteJob = Surface.safeRemoveJob(this.dynamiteJob)\n        this.clearRubbleJob = Surface.safeRemoveJob(this.clearRubbleJob)\n        this.updateJobColor()\n    }\n\n    private static safeRemoveJob(job: DrillJob | ReinforceJob | CarryDynamiteJob | ClearRubbleJob) {\n        if (job) EventBus.publishEvent(new JobDeleteEvent(job))\n        return null\n    }\n\n    reduceRubble() {\n        this.rubblePositions.shift()\n        if (this.surfaceType === SurfaceType.RUBBLE4) this.surfaceType = SurfaceType.RUBBLE3\n        else if (this.surfaceType === SurfaceType.RUBBLE3) this.surfaceType = SurfaceType.RUBBLE2\n        else if (this.surfaceType === SurfaceType.RUBBLE2) this.surfaceType = SurfaceType.RUBBLE1\n        else if (this.surfaceType === SurfaceType.RUBBLE1) this.surfaceType = SurfaceType.GROUND\n        EventBus.publishEvent(new UpdateRadarSurface(this))\n        this.dropContainedOre(this.containedOres - this.rubblePositions.length)\n        this.updateTexture()\n        if (this.selected) EventBus.publishEvent(new SelectionChanged(this.entityMgr))\n    }\n\n    isSupported(): boolean {\n        if (this.surfaceType.floor) return true\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        return isHighGround(surfLeft, surfTopLeft, surfTop)\n            || isHighGround(surfTop, surfTopRight, surfRight)\n            || isHighGround(surfRight, surfBottomRight, surfBottom)\n            || isHighGround(surfBottom, surfBottomLeft, surfLeft)\n    }\n\n    updateMesh(force: boolean = true) {\n        if (!force && !this.needsMeshUpdate) return\n        this.needsMeshUpdate = false\n\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf0: Surface, surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf0.discovered || (\n                (!surf0.surfaceType.floor || !surf0.neighbors.some((n) => n.surfaceType.floor && n.discovered)) &&\n                (!surf1.discovered || !surf2.discovered || !surf3.discovered || (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor))\n            )\n        }\n\n        const topLeftVertex = new Vector3(this.x, 0, this.y)\n        const topRightVertex = new Vector3(this.x + 1, 0, this.y)\n        const bottomLeftVertex = new Vector3(this.x, 0, this.y + 1)\n        const bottomRightVertex = new Vector3(this.x + 1, 0, this.y + 1)\n\n        if (isHighGround(this, surfLeft, surfTopLeft, surfTop)) topLeftVertex.y = 1\n        if (isHighGround(this, surfTop, surfTopRight, surfRight)) topRightVertex.y = 1\n        if (isHighGround(this, surfRight, surfBottomRight, surfBottom)) bottomRightVertex.y = 1\n        if (isHighGround(this, surfBottom, surfBottomLeft, surfLeft)) bottomLeftVertex.y = 1\n\n        // update mesh (geometry), if wall type changed\n        let wallType = topLeftVertex.y + topRightVertex.y + bottomRightVertex.y + bottomLeftVertex.y\n        if (wallType === WALL_TYPE.WALL && topLeftVertex.y === bottomRightVertex.y) wallType = WALL_TYPE.WEIRD_CREVICE\n\n        if (this.wallType !== wallType) {\n            this.wallType = wallType\n\n            function avgHeight(...args: Surface[]) {\n                return args.map((s) => s.heightOffset)\n                    .reduce((l, r) => (l || 0) + (r || 0), 0) / (args.length || 1)\n            }\n\n            this.topLeftVertex = topLeftVertex.clone()\n            this.topRightVertex = topRightVertex.clone()\n            this.bottomRightVertex = bottomRightVertex.clone()\n            this.bottomLeftVertex = bottomLeftVertex.clone()\n            this.topLeftHeightOffset = avgHeight(surfTopLeft, surfTop, this, surfLeft) * HEIGHT_MULTIPLIER\n            this.topRightHeightOffset = avgHeight(surfTop, surfTopRight, surfRight, this) * HEIGHT_MULTIPLIER\n            this.bottomRightHeightOffset = avgHeight(this, surfRight, surfBottomRight, surfBottom) * HEIGHT_MULTIPLIER\n            this.bottomLeftHeightOffset = avgHeight(surfLeft, this, surfBottom, surfBottomLeft) * HEIGHT_MULTIPLIER\n            this.topLeftVertex.y += this.topLeftHeightOffset\n            this.topRightVertex.y += this.topRightHeightOffset\n            this.bottomRightVertex.y += this.bottomRightHeightOffset\n            this.bottomLeftVertex.y += this.bottomLeftHeightOffset\n\n            this.updateGeometry(topLeftVertex, topRightVertex, bottomRightVertex, bottomLeftVertex)\n            if (this.wallType !== WALL_TYPE.WALL) this.cancelReinforceJobs()\n        }\n\n        this.updateTexture()\n        this.updateJobColor()\n        this.updatePathfinding()\n    }\n\n    private updatePathfinding() {\n        const weight = this.getPathfindingWalkWeight()\n        for (let x = 0; x < 3; x++) {\n            for (let y = 0; y < 3; y++) {\n                this.terrain.graphWalk.grid[this.x * 3 + x][this.y * 3 + y].weight = weight\n            }\n        }\n        this.terrain.graphDrive.grid[this.x][this.y].weight = this.getPathfindingDriveWeight()\n        this.terrain.graphFly.grid[this.x][this.y].weight = this.getPathFindingFlyWeight()\n        this.terrain.graphSwim.grid[this.x][this.y].weight = this.getPathFindingSwimWeight()\n    }\n\n    cancelReinforceJobs() {\n        this.reinforceJob = Surface.safeRemoveJob(this.reinforceJob)\n        this.updateJobColor()\n    }\n\n    updateTexture() {\n        let textureName = this.terrain.textureSet.texturebasename\n        if (!this.discovered) {\n            textureName += '70'\n        } else if (this.surfaceType === SurfaceType.POWER_PATH) {\n            textureName += this.updatePowerPathTexture()\n        } else if (!this.surfaceType.shaping && this.neighbors.some((n) => n.discovered && n.surfaceType.floor)) {\n            if (this.surfaceType === SurfaceType.POWER_PATH_BUILDING && this.hasPower) {\n                textureName += '66'\n            } else {\n                textureName += this.surfaceType.matIndex.toString()\n            }\n        } else if (this.wallType === WALL_TYPE.WEIRD_CREVICE) {\n            textureName += '77'\n        } else {\n            if (this.wallType === WALL_TYPE.CORNER) {\n                textureName += '5'\n            } else if (this.wallType === WALL_TYPE.INVERTED_CORNER) {\n                textureName += '3'\n            } else if (this.reinforced) {\n                textureName += '2'\n            } else {\n                textureName += '0'\n            }\n            textureName += this.surfaceType.shaping ? this.surfaceType.matIndex : SurfaceType.SOLID_ROCK.matIndex\n        }\n        textureName += '.bmp'\n\n        this.forEachMaterial((mat) => mat.map?.dispose())\n        const texture = ResourceManager.getTexture(textureName)\n        texture.center.set(0.5, 0.5)\n        texture.rotation = this.surfaceRotation\n\n        this.forEachMaterial((mat) => mat.map = texture)\n    }\n\n    private updatePowerPathTexture(): string {\n        this.surfaceRotation = 0\n        const left = this.terrain.getSurface(this.x - 1, this.y).isPath()\n        const top = this.terrain.getSurface(this.x, this.y - 1).isPath()\n        const right = this.terrain.getSurface(this.x + 1, this.y).isPath()\n        const bottom = this.terrain.getSurface(this.x, this.y + 1).isPath()\n        const pathSum = (left ? 1 : 0) + (top ? 1 : 0) + (right ? 1 : 0) + (bottom ? 1 : 0)\n        if (pathSum === 0 || pathSum === 1) {\n            if (left) this.surfaceRotation = -Math.PI / 2\n            if (top) this.surfaceRotation = Math.PI\n            if (right) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '75' : '65'\n        } else if (pathSum === 2) {\n            if (left === right) {\n                this.surfaceRotation = left ? Math.PI / 2 : 0\n                return this.hasPower ? '72' : '62'\n            } else {\n                if (left && bottom) this.surfaceRotation = -Math.PI / 2\n                if (left && top) this.surfaceRotation = Math.PI\n                if (top && right) this.surfaceRotation = Math.PI / 2\n                return this.hasPower ? '73' : '63'\n            }\n        } else if (pathSum === 3) {\n            if (!top) this.surfaceRotation = -Math.PI / 2\n            if (!right) this.surfaceRotation = Math.PI\n            if (!bottom) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '74' : '64'\n        } else {\n            return this.hasPower ? '71' : '60'\n        }\n    }\n\n    forEachMaterial(callback: (mat: MeshPhongMaterial) => void): void {\n        if (!this.mesh?.material) return;\n        (Array.isArray(this.mesh.material) ? this.mesh.material : [this.mesh.material]).forEach((m) => callback(m as MeshPhongMaterial))\n    }\n\n    updateGeometry(topLeftVertex: Vector3, topRightVertex: Vector3, bottomRightVertex: Vector3, bottomLeftVertex: Vector3) {\n        if (this.mesh) this.terrain.floorGroup.remove(this.mesh)\n        this.mesh?.geometry?.dispose()\n        this.forEachMaterial((m) => m.dispose())\n\n        const geometry = SurfaceGeometry.create(this.wallType, topLeftVertex, topRightVertex, bottomRightVertex, bottomLeftVertex,\n            this.topLeftVertex.y, this.topRightVertex.y, this.bottomRightVertex.y, this.bottomLeftVertex.y)\n\n        this.mesh = new Mesh(geometry, new MeshPhongMaterial({shininess: 0}))\n        this.mesh.userData = {selectable: this, surface: this}\n\n        this.terrain.floorGroup.add(this.mesh)\n    }\n\n    isSelectable(): boolean {\n        return this.surfaceType.selectable && (this.wallType !== WALL_TYPE.INVERTED_CORNER && this.wallType !== WALL_TYPE.WEIRD_CREVICE) && !this.selected && this.discovered\n    }\n\n    isInSelection(): boolean {\n        return this.isSelectable() || this.selected\n    }\n\n    select(): boolean {\n        if (!this.isSelectable()) return false\n        this.selected = true\n        this.forEachMaterial((mat) => mat.color.setHex(0x6060a0))\n        if (this.surfaceType.floor) SoundManager.playSample(Sample.SFX_Floor)\n        if (this.surfaceType.shaping) SoundManager.playSample(Sample.SFX_Wall)\n        console.log('Surface selected at ' + this.x + '/' + this.y)\n        return true\n    }\n\n    deselect(): any {\n        if (this.selected) {\n            this.selected = false\n            this.updateJobColor()\n        }\n    }\n\n    updateJobColor() {\n        const color = this.dynamiteJob?.color || this.reinforceJob?.color || this.drillJob?.color || 0xffffff\n        this.forEachMaterial((mat) => mat.color.setHex(color))\n    }\n\n    hasRubble(): boolean {\n        return this.rubblePositions.length > 0\n    }\n\n    isPath(): boolean {\n        return this.surfaceType === SurfaceType.POWER_PATH || this.surfaceType === SurfaceType.POWER_PATH_BUILDING\n    }\n\n    isWalkable(): boolean {\n        return this.surfaceType.floor && this.discovered && this.surfaceType !== SurfaceType.LAVA && this.surfaceType !== SurfaceType.WATER && !this.building?.blocksPathSurface\n    }\n\n    isDigable(): boolean {\n        return this.surfaceType.digable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isReinforcable(): boolean {\n        return this.surfaceType.reinforcable && this.discovered && this.wallType === WALL_TYPE.WALL && !this.reinforced\n    }\n\n    getDigPositions(): Vector2[] {\n        const digPosition = []\n        if (this.terrain.getSurface(this.x - 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE - 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y - 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE - 1))\n        if (this.terrain.getSurface(this.x + 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE + 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y + 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE + TILESIZE + 1))\n        return digPosition\n    }\n\n    reinforce() {\n        this.reinforced = true\n        this.cancelReinforceJobs()\n        this.terrain.removeFallInOrigin(this)\n        this.updateTexture()\n        EventBus.publishEvent(new UpdateRadarSurface(this))\n    }\n\n    getCenterWorld2D(): Vector2 {\n        return new Vector2(this.x, this.y).addScalar(0.5).multiplyScalar(TILESIZE)\n    }\n\n    getCenterWorld(): Vector3 {\n        const center = this.getCenterWorld2D()\n        const raycaster = new Raycaster(new Vector3(center.x, 3 * TILESIZE, center.y), new Vector3(0, -1, 0))\n        const intersect = raycaster.intersectObject(this.mesh, true)\n        if (intersect.length < 1) console.warn('could not determine terrain height for ' + center.x + '/' + center.y)\n        const terrainHeight = intersect[0]?.point?.y || 0\n        return new Vector3(center.x, terrainHeight, center.y)\n    }\n\n    dispose() {\n        this.forEachMaterial(m => m.dispose())\n        this.mesh?.geometry?.dispose()\n    }\n\n    getFloorHeight(worldX: number, worldZ: number) {\n        const sx = worldX / TILESIZE - this.x\n        const sy = worldZ / TILESIZE - this.y\n        const dy0 = Surface.interpolate(this.topLeftHeightOffset, this.topRightHeightOffset, sx)\n        const dy1 = Surface.interpolate(this.bottomLeftHeightOffset, this.bottomRightHeightOffset, sx)\n        return Surface.interpolate(dy0, dy1, sy) * TILESIZE\n    }\n\n    private static interpolate(y0: number, y1: number, x: number): number {\n        return y0 + x * (y1 - y0)\n    }\n\n    get neighbors(): Surface[] {\n        return [this.terrain.getSurface(this.x - 1, this.y), this.terrain.getSurface(this.x, this.y - 1),\n            this.terrain.getSurface(this.x + 1, this.y), this.terrain.getSurface(this.x, this.y + 1)]\n    }\n\n    makeRubble(containedOre: number = 0) {\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += containedOre\n        this.setSurfaceType(SurfaceType.RUBBLE4)\n    }\n\n    setBuilding(building: BuildingEntity) {\n        this.building = building\n        this.updatePathfinding()\n        this.setSurfaceType(this.building ? SurfaceType.POWER_PATH_BUILDING : SurfaceType.GROUND)\n    }\n\n    setSurfaceType(surfaceType: SurfaceType) {\n        if (surfaceType === this.surfaceType) return\n        const oldSurfaceType = this.surfaceType\n        this.surfaceType = surfaceType\n        this.updateTexture()\n        if (oldSurfaceType.connectsPath || this.surfaceType.connectsPath) this.neighbors.forEach((n) => n.updateTexture())\n        EventBus.publishEvent(new UpdateRadarSurface(this))\n    }\n\n    getPathfindingWalkWeight(): number {\n        return this.isWalkable() ? this.hasRubble() ? 4 : 1 : 0\n    }\n\n    getPathfindingDriveWeight(): number {\n        return this.isWalkable() ? 1 : 0\n    }\n\n    getPathFindingFlyWeight(): number {\n        return this.surfaceType.floor && !this.building?.blocksPathSurface ? 1 : 0\n    }\n\n    getPathFindingSwimWeight(): number {\n        return this.surfaceType === SurfaceType.WATER ? 1 : 0\n    }\n\n    setHasPower(state: boolean, recursive: boolean) {\n        if (this.hasPower === state) return\n        this.hasPower = state\n        this.updateTexture()\n        if (recursive) this.neighbors.forEach((n) => n.isPath() && n.setHasPower(state, recursive))\n    }\n\n    canPlaceFence(): boolean { // TODO performance this can be cached\n        return this.surfaceType.canCarryFence && !this.building && !this.fence &&\n            [1, 2].some((n) => {\n                return !!this.terrain.getSurface(this.x - n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y - n).building ||\n                    !!this.terrain.getSurface(this.x + n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y + n).building ||\n                    !!this.terrain.getSurface(this.x - n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y - n).fence ||\n                    !!this.terrain.getSurface(this.x + n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y + n).fence\n            })\n    }\n\n    createDrillJob(): DrillJob {\n        if (!this.isDigable()) return null\n        if (!this.drillJob) {\n            this.drillJob = new DrillJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.drillJob))\n        }\n        return this.drillJob\n    }\n\n    createReinforceJob(): ReinforceJob {\n        if (!this.isReinforcable()) return null\n        if (!this.reinforceJob) {\n            this.reinforceJob = new ReinforceJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.reinforceJob))\n        }\n        return this.reinforceJob\n    }\n\n    createDynamiteJob(): CarryDynamiteJob {\n        if (!this.isDigable()) return null\n        if (!this.dynamiteJob) {\n            const targetBuilding = this.entityMgr.getClosestBuildingByType(this.getCenterWorld(), EntityType.TOOLSTATION) // XXX performance cache this\n            if (!targetBuilding) throw 'Could not find toolstation to spawn dynamite'\n            const dynamite = new Dynamite(this.sceneMgr, this.entityMgr, this)\n            dynamite.sceneEntity.addToScene(targetBuilding.getDropPosition2D(), targetBuilding.sceneEntity.getHeading())\n            this.dynamiteJob = new CarryDynamiteJob(dynamite)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.dynamiteJob))\n        }\n        return this.dynamiteJob\n    }\n\n    createClearRubbleJob(): ClearRubbleJob {\n        if (!this.hasRubble()) return null\n        if (!this.clearRubbleJob) {\n            this.clearRubbleJob = new ClearRubbleJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.clearRubbleJob))\n        }\n        return this.clearRubbleJob\n    }\n\n    setSite(site: BuildingSite) {\n        this.site = site\n        this.setSurfaceType(this.site ? SurfaceType.POWER_PATH_CONSTRUCTION : SurfaceType.GROUND)\n    }\n\n    playPositionalSample(sample: Sample): PositionalAudio { // TODO merge with AnimEntity code (at least in SceneEntity maybe)\n        const audio = new PositionalAudio(this.sceneMgr.listener)\n        audio.setRefDistance(TILESIZE * 6)\n        this.mesh.add(audio)\n        SoundManager.getSoundBuffer(Sample[sample]).then((audioBuffer) => {\n            audio.setBuffer(audioBuffer)\n            audio.play()\n        })\n        return audio\n    }\n\n}\n","import { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { EntityManager } from './EntityManager'\nimport { Graph } from './model/map/astar'\nimport { Surface } from './model/map/Surface'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { Terrain } from './model/map/Terrain'\nimport { SceneManager } from './SceneManager'\n\nexport class TerrainLoader {\n\n    static loadTerrain(levelConf: LevelEntryCfg, sceneMgr: SceneManager, entityMgr: EntityManager): Terrain {\n        const tileSize = levelConf.blockSize\n        if (tileSize !== TILESIZE) console.error('Unexpected tile size in level configuration: ' + tileSize)\n        const terrain = new Terrain(sceneMgr, entityMgr)\n\n        const themeName = levelConf.textureSet[1]\n        terrain.textureSet = ResourceManager.cfg('Textures', themeName)\n        // console.log(terrain.textureSet);\n\n        const terrainMap = ResourceManager.getResource(levelConf.terrainMap)\n        terrain.width = terrainMap.width\n        terrain.height = terrainMap.height\n        const pathMap = ResourceManager.getResource(levelConf.pathMap)?.level\n        const surfaceMap = ResourceManager.getResource(levelConf.surfaceMap)?.level\n        const predugMap = ResourceManager.getResource(levelConf.predugMap)?.level\n        const cryOreMap = ResourceManager.getResource(levelConf.cryOreMap)?.level\n        const fallinMap = ResourceManager.getResource(levelConf.fallinMap)?.level\n        const erodeMap = ResourceManager.getResource(levelConf.erodeMap)?.level\n        const blockMap = ResourceManager.getResource(levelConf.blockPointersMap)?.level\n\n        // maps parsed from WAD are row-wise saved, which means y (row) comes first and x (column) second\n        for (let r = 0; r < terrainMap.level.length; r++) {\n            for (let c = 0; c < (terrainMap.level)[r].length; c++) {\n                (terrain.surfaces)[c] = (terrain.surfaces)[c] || []\n                const surfaceTypeNum = (terrainMap.level)[r][c]\n                let surfaceType = SurfaceType.getByNum(surfaceTypeNum)\n                const predugLevel = predugMap[r][c]\n                if (predugLevel === PredugMap.CAVERN_EXPOSED) {\n                    if (surfaceType === SurfaceType.GROUND || surfaceType === SurfaceType.DIRT\n                        || surfaceType === SurfaceType.POWER_PATH_BUILDING) { // used by mods\n                        surfaceType = SurfaceType.GROUND\n                    } else if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) {\n                        console.warn('Unexpected cavern surface type: ' + surfaceType.name)\n                    }\n                } else if (predugLevel === PredugMap.SLUG_HOLE_EXPOSED || predugLevel === PredugMap.SLUG_HOLE_HIDDEN) {\n                    surfaceType = SurfaceType.SLUG_HOLE\n                } else if (predugLevel !== PredugMap.WALL && predugLevel !== PredugMap.CAVERN_HIDDEN) {\n                    console.warn('Unexpected predug level: ' + predugLevel)\n                }\n                // give the path map the highest priority, if it exists\n                const pathMapLevel = pathMap && surfaceType.floor ? pathMap[r][c] : PathMap.NONE\n                if (pathMapLevel === PathMap.RUBBLE) {\n                    surfaceType = SurfaceType.RUBBLE4\n                } else if (pathMapLevel === PathMap.POWER_PATH) {\n                    surfaceType = SurfaceType.POWER_PATH\n                } else if (pathMapLevel !== PathMap.NONE) {\n                    console.warn('Unexpected path map level: ' + pathMapLevel)\n                }\n\n                const surface = new Surface(terrain, surfaceType, c, r, surfaceMap[r][c])\n                if (cryOreMap) {\n                    const currentCryOre = cryOreMap[r][c]\n                    if (currentCryOre % 2 === 1) {\n                        surface.containedCrystals = (currentCryOre + 1) / 2\n                    } else {\n                        surface.containedOres = currentCryOre / 2\n                    }\n                }\n\n                (terrain.surfaces)[c].push(surface)\n            }\n        }\n\n        // exlpore predug surfaces\n        terrain.forEachSurface((s) => {\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_EXPOSED || predugMap[s.y][s.x] === PredugMap.SLUG_HOLE_EXPOSED) { // map are rows (y) first, columns (x) second\n                for (let x = s.x - 1; x <= s.x + 1; x++) {\n                    for (let y = s.y - 1; y <= s.y + 1; y++) {\n                        terrain.getSurfaceOrNull(x, y).discovered = true\n                    }\n                }\n            }\n        })\n\n        // create hidden caverns\n        terrain.forEachSurface((s) => {\n            const surface = terrain.getSurfaceOrNull(s.x, s.y)\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_HIDDEN && !surface.discovered) {\n                surface.surfaceType = SurfaceType.GROUND\n            }\n        })\n\n        // generate path finding weights\n        const weightsWalk: number[][] = []\n        const weightsDrive: number[][] = []\n        const weightsFly: number[][] = []\n        const weightsSwim: number[][] = []\n        for (let x = 0; x < terrain.width; x++) {\n            const colWalk: number[] = []\n            const colDrive: number[] = []\n            const colFly: number[] = []\n            const colSwim: number[] = []\n            for (let y = 0; y < terrain.height; y++) {\n                const surface = terrain.getSurfaceOrNull(x, y)\n                const w = surface.getPathfindingWalkWeight()\n                colWalk.push(w, w, w)\n                colDrive.push(surface.getPathfindingDriveWeight())\n                colFly.push(surface.getPathFindingFlyWeight())\n                colSwim.push(surface.getPathFindingSwimWeight())\n            }\n            weightsWalk.push(colWalk, colWalk, colWalk)\n            weightsDrive.push(colDrive)\n            weightsFly.push(colFly)\n            weightsSwim.push(colSwim)\n        }\n        terrain.graphWalk = new Graph(weightsWalk, {diagonal: true})\n        terrain.graphDrive = new Graph(weightsDrive, {diagonal: true})\n        terrain.graphFly = new Graph(weightsFly, {diagonal: true})\n        terrain.graphSwim = new Graph(weightsSwim, {diagonal: true})\n\n        // crumble unsupported walls\n        terrain.forEachSurface((s) => {\n            if (!s.isSupported()) s.collapse()\n        })\n\n        terrain.updateSurfaceMeshes(true)\n\n        if (fallinMap) {\n            for (let x = 0; x < terrain.width; x++) {\n                for (let y = 0; y < terrain.height; y++) {\n                    terrain.setFallinLevel(x, y, fallinMap[y][x]) // rows (y) before columns (x) used in maps\n                }\n            }\n        }\n\n        if (erodeMap) { // TODO implement lava erosion\n            console.warn('Lucky you! Lava erosion not yet implemented')\n        }\n\n        if (blockMap) { // TODO implement tutorial blocks map\n            // console.log(blockMap)\n        }\n\n        return terrain\n    }\n\n}\n\nenum PathMap {\n\n    NONE = 0,\n    RUBBLE = 1,\n    POWER_PATH = 2,\n\n}\n\nenum PredugMap {\n\n    WALL = 0,\n    CAVERN_EXPOSED = 1,\n    CAVERN_HIDDEN = 2,\n    SLUG_HOLE_EXPOSED = 3,\n    SLUG_HOLE_HIDDEN = 4,\n}\n","import { AudioListener, Group, PositionalAudio } from 'three'\nimport { SoundManager } from '../../../audio/SoundManager'\nimport { getPath } from '../../../core/Util'\nimport { TILESIZE } from '../../../params'\nimport { LWSCLoader } from '../../../resource/LWSCLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { AnimClip } from './AnimClip'\n\nexport class AnimationGroup extends Group {\n\n    animation: AnimClip\n\n    constructor(lwsFilepath: string, audioListener: AudioListener) {\n        super()\n        const content = ResourceManager.getResource(lwsFilepath)\n        this.animation = new LWSCLoader(getPath(lwsFilepath), false).parse(content)\n        this.animation.bodies.forEach((body) => {\n            const polyModel = body.model.clone()\n            this.animation.polyList.push(polyModel)\n            if (body.lowerName && body.isNull) {\n                this.animation.nullJoints.getOrUpdate(body.lowerName.toLowerCase(), () => []).push(polyModel)\n            }\n            if (body.sfxName) {\n                const audio = new PositionalAudio(audioListener)\n                audio.setRefDistance(TILESIZE * 6) // TODO optimize ref distance for SFX sounds\n                audio.loop = false\n                polyModel.add(audio)\n                SoundManager.getSoundBuffer(body.sfxName).then((audioBuffer) => audio.setBuffer(audioBuffer))\n                body.sfxFrames.forEach((frame) => this.animation.sfxAudioByFrame.getOrUpdate(frame, () => []).push(audio))\n            }\n        })\n\n        this.animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = this.animation.polyList[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                this.animation.polyList[parentInd].add(polyPart)\n            } else {\n                this.animation.polyModel.add(polyPart)\n            }\n        })\n\n        this.add(this.animation.polyModel)\n    }\n\n    startAnimation(onAnimationDone) {\n        this.animation.start(onAnimationDone, null)\n    }\n\n    update(elapsedMs: number) {\n        this.animation.update(elapsedMs)\n    }\n\n}\n","import { getRandom } from '../../../core/Util'\nimport { Surface } from './Surface'\nimport { Terrain } from './Terrain'\n\nexport class FallIn {\n\n    terrain: Terrain\n    source: Surface\n    target: Surface\n    fallinTimeout: number\n    timer: number = 0\n\n    constructor(terrain: Terrain, source: Surface, target: Surface) {\n        this.terrain = terrain\n        this.source = source\n        this.target = target\n        this.restartTimeout()\n    }\n\n    update(elapsedMs: number) {\n        this.timer += elapsedMs\n        if (this.timer < this.fallinTimeout) return\n        this.terrain.createFallIn(this.source, this.target)\n        this.timer -= this.fallinTimeout\n        this.restartTimeout()\n    }\n\n    private restartTimeout() {\n        this.fallinTimeout = (30 + getRandom(60)) * 1000 // TODO adapt timer to level multiplier and fallin value\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\n\nexport class TerrainPath {\n\n    target: PathTarget = null\n    locations: Vector2[] = []\n    lengthSq: number = 0\n\n    constructor(target: PathTarget, locations: Vector2[] | Vector2) {\n        this.target = target\n        this.locations = Array.isArray(locations) ? locations : [locations]\n        for (let c = 0; c < this.locations.length - 1; c++) {\n            const start = this.locations[c]\n            const end = this.locations[c + 1]\n            this.lengthSq += start.distanceToSquared(end)\n        }\n    }\n\n    get firstLocation(): Vector2 {\n        return this.locations[0] || null\n    }\n\n}\n","import { AxesHelper, Group, Vector2, Vector3 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { LandslideEvent } from '../../../event/WorldLocationEvent'\nimport { DEV_MODE, TILESIZE } from '../../../params'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { AnimationGroup } from '../anim/AnimationGroup'\nimport { PathTarget } from '../PathTarget'\nimport { updateSafe } from '../Updateable'\nimport { astar, Graph } from './astar'\nimport { FallIn } from './FallIn'\nimport { Surface } from './Surface'\nimport { SurfaceType } from './SurfaceType'\nimport { TerrainPath } from './TerrainPath'\n\nexport class Terrain {\n\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    textureSet: any = {}\n    width: number = 0\n    height: number = 0\n    surfaces: Surface[][] = []\n    floorGroup: Group = new Group()\n    roofGroup: Group = new Group()\n    graphWalk: Graph = null\n    graphDrive: Graph = null\n    graphFly: Graph = null\n    graphSwim: Graph = null\n    cachedWalkPaths = new Map<string, Vector2[]>()\n    cachedDrivePaths = new Map<string, Vector2[]>()\n    cachedFlyPaths = new Map<string, Vector2[]>()\n    cachedSwimPaths = new Map<string, Vector2[]>()\n    fallIns: FallIn[] = []\n    fallInGroups: AnimationGroup[] = []\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        this.sceneMgr = sceneMgr\n        this.entityMgr = entityMgr\n        this.floorGroup.scale.setScalar(TILESIZE)\n        this.roofGroup.scale.setScalar(TILESIZE)\n        this.roofGroup.visible = false // keep roof hidden unless switched to other camera\n        if (DEV_MODE) this.floorGroup.add(new AxesHelper())\n    }\n\n    getSurfaceFromWorld(worldPosition: Vector3): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.z)\n    }\n\n    getSurfaceFromWorld2D(worldPosition: Vector2): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.y)\n    }\n\n    getSurfaceFromWorldXZ(worldX: number, worldZ: number): Surface | null {\n        return this.getSurface(worldX / TILESIZE, worldZ / TILESIZE)\n    }\n\n    getSurface(x, y): Surface {\n        x = Math.floor(x)\n        y = Math.floor(y)\n        return this.getSurfaceOrNull(x, y) || new Surface(this, SurfaceType.SOLID_ROCK, x, y, 0)\n    }\n\n    getSurfaceOrNull(x, y): Surface | null {\n        if (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n            return this.surfaces[x][y]\n        } else {\n            return null\n        }\n    }\n\n    updateSurfaceMeshes(force: boolean = false) {\n        this.forEachSurface((s) => s.updateMesh(force))\n        this.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n        this.resetGraphWalk()\n    }\n\n    resetGraphWalk() {\n        this.graphWalk.init()\n        this.graphDrive.init()\n        this.graphFly.init()\n        this.graphSwim.init()\n        this.cachedWalkPaths.clear()\n        this.cachedDrivePaths.clear()\n        this.cachedFlyPaths.clear()\n        this.cachedSwimPaths.clear()\n        console.log('Cached paths cleared')\n    }\n\n    findWalkPath(start: Vector2, target: PathTarget): TerrainPath {\n        return Terrain.findPath(start, target, this.cachedWalkPaths, this.graphWalk, TILESIZE / 3, 0.25)\n    }\n\n    findDrivePath(start: Vector2, target: PathTarget): TerrainPath {\n        return Terrain.findPath(start, target, this.cachedDrivePaths, this.graphDrive, TILESIZE, 0)\n    }\n\n    findFlyPath(start: Vector2, target: PathTarget): TerrainPath {\n        return Terrain.findPath(start, target, this.cachedFlyPaths, this.graphFly, TILESIZE, 0)\n    }\n\n    findSwimPath(start: Vector2, target: PathTarget): TerrainPath {\n        return Terrain.findPath(start, target, this.cachedSwimPaths, this.graphSwim, TILESIZE, 0)\n    }\n\n    private static findPath(start: Vector2, target: PathTarget, cachedPaths: Map<string, Vector2[]>, graph: Graph, gridSize: number, maxRandomOffset: number): TerrainPath {\n        const gridStart = start.clone().divideScalar(gridSize).floor()\n        const gridEnd = target.targetLocation.clone().divideScalar(gridSize).floor()\n        if (gridStart.x === gridEnd.x && gridStart.y === gridEnd.y) return new TerrainPath(target, target.targetLocation)\n        const cacheIdentifier = gridStart.x + '/' + gridStart.y + ' -> ' + gridEnd.x + '/' + gridEnd.y\n        const resultPath = cachedPaths.getOrUpdate(cacheIdentifier, () => {\n            const startNode = graph.grid[gridStart.x][gridStart.y]\n            const endNode = graph.grid[gridEnd.x][gridEnd.y]\n            const freshPath = astar.search(graph, startNode, endNode).map((n) =>\n                new Vector2(n.x + 0.5, n.y + 0.5).add(new Vector2().random().multiplyScalar(maxRandomOffset)).multiplyScalar(gridSize))\n            if (freshPath.length < 1) return null // no path found\n            freshPath.pop() // last node is replaced with actual target position\n            return freshPath\n        })\n        if (!resultPath) return null\n        return new TerrainPath(target, [...resultPath, target.targetLocation]) // return shallow copy to avoid interference\n    }\n\n    dispose() {\n        this.forEachSurface(s => s.dispose())\n    }\n\n    forEachSurface(each: (surface: Surface) => any) {\n        this.surfaces?.forEach((r) => r.forEach((s) => each(s)))\n    }\n\n    countDiggables(): number {\n        let totalDiggables = 0\n        this.forEachSurface((s) => totalDiggables += s.isDigable() ? 1 : 0)\n        return totalDiggables\n    }\n\n    countCrystals(): number {\n        let totalCrystals = 0\n        this.forEachSurface((s) => totalCrystals += s.containedCrystals)\n        return totalCrystals\n    }\n\n    countOres(): number {\n        let totalOres = 0\n        this.forEachSurface((s) => totalOres += s.containedOres)\n        return totalOres\n    }\n\n    setFallinLevel(x: number, y: number, fallinLevel: number) {\n        if (fallinLevel < 1) return\n        const surface = this.getSurface(x, y)\n        let originPos: Surface = null\n        let targetPos: Surface = null\n        if (surface.surfaceType.floor) {\n            originPos = this.findFallInOrigin(surface)\n            targetPos = surface\n        } else if (surface.isReinforcable()) {\n            originPos = surface\n            targetPos = this.findFallInTarget(surface)\n        }\n        if (originPos && targetPos) {\n            this.fallIns.push(new FallIn(this, originPos, targetPos))\n        }\n    }\n\n    findFallInOrigin(target: Surface): Surface {\n        const s = target.neighbors.find((n) => n.isReinforcable())\n        if (!s) return null\n        return s\n    }\n\n    findFallInTarget(source: Surface): Surface {\n        const s = source.neighbors.find((n) => n.isWalkable()) // TODO don't target surfaces with lava erosion\n        if (!s) return null\n        return s\n    }\n\n    createFallIn(source: Surface, target: Surface) {\n        const fallinPosition = target.getCenterWorld()\n        EventBus.publishEvent(new LandslideEvent(fallinPosition))\n        const fallinGrp = new AnimationGroup('MiscAnims/RockFall/Rock3Sides.lws', this.sceneMgr.listener)\n        this.fallInGroups.push(fallinGrp)\n        fallinGrp.position.copy(fallinPosition)\n        const dx = source.x - target.x, dy = target.y - source.y\n        fallinGrp.rotateOnAxis(new Vector3(0, 1, 0), Math.atan2(dy, dx) + Math.PI / 2)\n        this.sceneMgr.scene.add(fallinGrp)\n        fallinGrp.startAnimation(() => {\n            this.sceneMgr.scene.remove(fallinGrp)\n            this.fallInGroups.remove(fallinGrp)\n        })\n        target.makeRubble() // TODO do not turn building power paths into rubble\n    }\n\n    removeFallInOrigin(surface: Surface) {\n        this.fallIns = this.fallIns.filter((f) => f.source !== surface)\n    }\n\n    update(elapsedMs: number) {\n        this.fallIns.forEach((f) => updateSafe(f, elapsedMs))\n        this.fallInGroups.forEach((g) => updateSafe(g, elapsedMs))\n    }\n\n}\n","import { AmbientLight, AudioListener, Color, Frustum, Intersection, Mesh, MOUSE, PerspectiveCamera, PointLight, Raycaster, Scene, Vector2, Vector3, WebGLRenderer } from 'three'\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { clearIntervalSafe } from '../core/Util'\nimport { KEY_PAN_SPEED, TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { SceneMesh } from '../scene/SceneMesh'\nimport { DebugHelper } from '../screen/DebugHelper'\nimport { EntityManager } from './EntityManager'\nimport { BuildingEntity } from './model/building/BuildingEntity'\nimport { BuildPlacementMarker } from './model/building/BuildPlacementMarker'\nimport { GameSelection } from './model/GameSelection'\nimport { GameState } from './model/GameState'\nimport { Surface } from './model/map/Surface'\nimport { Terrain } from './model/map/Terrain'\nimport { MaterialEntity } from './model/material/MaterialEntity'\nimport { Selectable } from './model/Selectable'\nimport { VehicleEntity } from './model/vehicle/VehicleEntity'\nimport { TerrainLoader } from './TerrainLoader'\nimport { WorldManager } from './WorldManager'\n\nexport class SceneManager {\n\n    static meshRegistry: SceneMesh[] = []\n\n    worldMgr: WorldManager\n    entityMgr: EntityManager\n    maxFps: number = 30 // most animations use 25 fps so this should be enough\n    renderer: WebGLRenderer\n    debugHelper: DebugHelper = new DebugHelper()\n    renderInterval\n    animRequest\n    scene: Scene\n    listener: AudioListener\n    camera: PerspectiveCamera\n    ambientLight: AmbientLight\n    light: PointLight\n    terrain: Terrain\n    controls: MapControls\n    cursorTorchlight: PointLight\n    buildMarker: BuildPlacementMarker\n\n    constructor(canvas: SpriteImage) {\n        this.renderer = new WebGLRenderer({antialias: true, canvas: canvas})\n        this.renderer.setClearColor(0x000000)\n\n        this.listener = new AudioListener()\n\n        this.camera = new PerspectiveCamera(30, canvas.width / canvas.height, 0.1, 5000) // TODO make these params configurable\n        this.camera.add(this.listener)\n\n        this.controls = new MapControls(this.camera, this.renderer.domElement)\n        this.controls.mouseButtons = {LEFT: null, MIDDLE: MOUSE.ROTATE, RIGHT: MOUSE.PAN}\n        // this.controls.maxPolarAngle = Math.PI * 0.45; // TODO dynamically adapt to terrain height at camera position\n        this.controls.listenToKeyEvents(this.renderer.domElement)\n        this.controls.keyPanSpeed = this.controls.keyPanSpeed * KEY_PAN_SPEED\n    }\n\n    getSelectionByRay(rx: number, ry: number): GameSelection {\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        const selection = new GameSelection()\n        selection.raiders.push(...SceneManager.getSelection(raycaster.intersectObjects(this.entityMgr.raiders.map((r) => r.sceneEntity.pickSphere))))\n        if (selection.isEmpty()) selection.vehicles.push(...SceneManager.getSelection(raycaster.intersectObjects(this.entityMgr.vehicles.map((v) => v.sceneEntity.pickSphere))))\n        if (selection.isEmpty()) selection.building = SceneManager.getSelection(raycaster.intersectObjects(this.entityMgr.buildings.map((b) => b.sceneEntity.pickSphere)))[0]\n        if (selection.isEmpty() && this.terrain) selection.surface = SceneManager.getSelection(raycaster.intersectObjects(this.terrain.floorGroup.children))[0]\n        return selection\n    }\n\n    private static getSelection(intersects: Intersection[]): any[] {\n        if (intersects.length < 1) return []\n        const selection = []\n        const userData = intersects[0].object.userData\n        if (userData && userData.hasOwnProperty('selectable')) {\n            const selectable = userData['selectable'] as Selectable\n            if (selectable?.isInSelection()) selection.push(selectable)\n        }\n        return selection\n    }\n\n    getFirstByRay(rx: number, ry: number): { vehicle?: VehicleEntity, material?: MaterialEntity, surface?: Surface } {\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        const vehicle = SceneManager.getEntity(raycaster.intersectObjects(this.entityMgr.vehicles.map((v) => v.sceneEntity.pickSphere)))\n        if (vehicle) return {vehicle: vehicle}\n        // TODO materials don't have pick spheres yet\n        // const material = SceneManager.getEntity(raycaster.intersectObjects(this.entityMgr.materials.map((m) => m.sceneEntity.pickSphere)))\n        // if (material) return {material: material}\n        if (this.terrain) {\n            const surface = SceneManager.getEntity(raycaster.intersectObjects(this.terrain.floorGroup.children))\n            if (surface) return {surface: surface}\n        }\n        return null\n    }\n\n    private static getEntity(intersects: Intersection[]) {\n        return (intersects[0]?.object?.userData?.['selectable']) || null\n    }\n\n    getEntitiesInFrustum(r1x: number, r1y: number, r2x: number, r2y: number): GameSelection {\n        const startPoint = new Vector3(r1x, r1y, 0.5)\n        const endPoint = new Vector3(r2x, r2y, 0.5)\n        // Avoid invalid frustum\n        if (startPoint.x === endPoint.x) {\n            endPoint.x += Number.EPSILON\n        }\n        if (startPoint.y === endPoint.y) {\n            endPoint.y += Number.EPSILON\n        }\n        // update camera\n        this.camera.updateProjectionMatrix()\n        this.camera.updateMatrixWorld()\n        // update frustum\n        const tmpPoint = new Vector3()\n        tmpPoint.copy(startPoint)\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x)\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y)\n        endPoint.x = Math.max(startPoint.x, endPoint.x)\n        endPoint.y = Math.min(startPoint.y, endPoint.y)\n\n        const vecNear = new Vector3()\n        const vecTopLeft = new Vector3()\n        const vecTopRight = new Vector3()\n        const vecDownRight = new Vector3()\n        const vecDownLeft = new Vector3()\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld)\n        vecTopLeft.copy(tmpPoint)\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0)\n        vecDownRight.copy(endPoint)\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0)\n\n        vecTopLeft.unproject(this.camera)\n        vecTopRight.unproject(this.camera)\n        vecDownRight.unproject(this.camera)\n        vecDownLeft.unproject(this.camera)\n\n        const vectemp1 = new Vector3()\n        const vectemp2 = new Vector3()\n        const vectemp3 = new Vector3()\n        vectemp1.copy(vecTopLeft).sub(vecNear)\n        vectemp2.copy(vecTopRight).sub(vecNear)\n        vectemp3.copy(vecDownRight).sub(vecNear)\n        vectemp1.normalize()\n        vectemp2.normalize()\n        vectemp3.normalize()\n\n        const deep = Number.MAX_VALUE\n        vectemp1.multiplyScalar(deep)\n        vectemp2.multiplyScalar(deep)\n        vectemp3.multiplyScalar(deep)\n        vectemp1.add(vecNear)\n        vectemp2.add(vecNear)\n        vectemp3.add(vecNear)\n\n        const frustum = new Frustum()\n        const planes = frustum.planes\n\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight)\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight)\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear)\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear)\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft)\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1)\n        planes[5].normal.multiplyScalar(-1)\n\n        const selection = new GameSelection()\n        selection.raiders.push(...this.entityMgr.raiders.filter((r) => r.isInSelection() && SceneManager.isInFrustum(r.sceneEntity.pickSphere, frustum)))\n        selection.vehicles.push(...this.entityMgr.vehicles.filter((v) => v.isInSelection() && SceneManager.isInFrustum(v.sceneEntity.pickSphere, frustum)))\n        if (selection.isEmpty()) selection.building = this.entityMgr.buildings.find((b) => SceneManager.isInFrustum(b.sceneEntity.pickSphere, frustum))\n        return selection\n    }\n\n    private static isInFrustum(pickSphere: Mesh, frustum: Frustum) {\n        if (!pickSphere) return false\n        const selectionCenter = new Vector3()\n        pickSphere.getWorldPosition(selectionCenter)\n        return frustum.containsPoint(selectionCenter)\n    }\n\n    setupScene(levelConf: LevelEntryCfg) {\n        this.scene = new Scene()\n\n        const ambientRgb = ResourceManager.cfg('Main', 'AmbientRGB') || [10, 10, 10]\n        const maxAmbRgb = Math.min(255, Math.max(0, ...ambientRgb))\n        const normalizedRgb = ambientRgb.map(v => v / (maxAmbRgb ? maxAmbRgb : 1))\n        const ambientColor = new Color(normalizedRgb[0], normalizedRgb[1], normalizedRgb[2])\n        this.ambientLight = new AmbientLight(ambientColor, 0.4)\n        this.scene.add(this.ambientLight)\n\n        this.cursorTorchlight = new PointLight(0xffffff, 1.5, 4, 1)\n        this.cursorTorchlight.distance *= TILESIZE\n        this.scene.add(this.cursorTorchlight)\n\n        this.buildMarker = new BuildPlacementMarker(this.worldMgr, this, this.entityMgr)\n        this.scene.add(this.buildMarker.group)\n        this.setBuildModeSelection(null)\n\n        // create terrain mesh and add it to the scene\n        this.terrain = TerrainLoader.loadTerrain(levelConf, this, this.entityMgr)\n        this.scene.add(this.terrain.floorGroup)\n\n        // gather level start details for game result score calculation\n        GameState.totalDiggables = this.terrain.countDiggables()\n        GameState.totalCrystals = this.terrain.countCrystals()\n        GameState.totalOres = this.terrain.countOres()\n    }\n\n    startScene() {\n        this.debugHelper.show()\n        this.renderInterval = setInterval(() => {\n            this.animRequest = requestAnimationFrame(() => {\n                this.debugHelper.renderStart()\n                this.renderer.render(this.scene, this.camera)\n                this.debugHelper.renderDone()\n            })\n        }, 1000 / this.maxFps)\n    }\n\n    disposeScene() {\n        this.debugHelper.hide()\n        this.renderInterval = clearIntervalSafe(this.renderInterval)\n        if (this.animRequest) {\n            cancelAnimationFrame(this.animRequest)\n            this.animRequest = null\n        }\n        GameState.remainingDiggables = this.terrain?.countDiggables() || 0\n        this.terrain?.dispose()\n        this.terrain = null\n        SceneManager.meshRegistry.forEach(mesh => mesh.dispose())\n        SceneManager.meshRegistry = []\n    }\n\n    static registerMesh(mesh: SceneMesh): SceneMesh {\n        this.meshRegistry.push(mesh)\n        return mesh\n    }\n\n    resize(width: number, height: number) {\n        this.renderer.setSize(width, height)\n    }\n\n    getTerrainIntersectionPoint(rx: number, ry: number): Vector2 {\n        if (!this.terrain) return null\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        const intersects = raycaster.intersectObjects(this.terrain.floorGroup.children)\n        return intersects.length > 0 ? new Vector2(intersects[0].point.x, intersects[0].point.z) : null\n    }\n\n    setTorchPosition(position: Vector2) {\n        this.cursorTorchlight.position.copy(this.getFloorPosition(position))\n        this.cursorTorchlight.position.y += 2 * TILESIZE\n    }\n\n    getFloorPosition(world: Vector2) {\n        const floorY = this.terrain.getSurfaceFromWorldXZ(world.x, world.y).getFloorHeight(world.x, world.y)\n        return new Vector3(world.x, floorY, world.y)\n    }\n\n    hasBuildModeSelection(): boolean {\n        return !!this.buildMarker?.buildModeSelection\n    }\n\n    setBuildModeSelection(building: BuildingEntity) {\n        this.buildMarker.buildModeSelection?.removeFromScene()\n        this.buildMarker.buildModeSelection = building\n        if (!building) this.buildMarker.hideAllMarker()\n    }\n\n}\n","import { BufferGeometry, Mesh } from 'three'\nimport { SceneManager } from '../game/SceneManager'\nimport { SequenceTextureMaterial } from './SequenceTextureMaterial'\n\nexport class SceneMesh extends Mesh {\n\n    constructor(geometry?: BufferGeometry, materials?: SequenceTextureMaterial[]) {\n        super(geometry, materials)\n        SceneManager.registerMesh(this)\n    }\n\n    clone(): this {\n        const clone = super.clone(true)\n        clone.material = this.getMaterials().map((m) => m.clone())\n        return clone\n    }\n\n    dispose() {\n        this.geometry?.dispose()\n        this.getMaterials().forEach((m) => m.dispose())\n        this.material = null\n    }\n\n    getMaterials(): SequenceTextureMaterial[] {\n        const mat = this.material\n        if (!mat) return []\n        return (Array.isArray(mat) ? mat : [mat]) as SequenceTextureMaterial[]\n    }\n\n    update(elapsedMs: number) {\n        this.getMaterials().forEach((m) => m.type === 'MeshPhongMaterial' && m.update(elapsedMs)) // TODO why is there a MeshBasicMaterial in this list???\n    }\n\n}\n","/**\n * @author Scarabol https://github.com/scarabol\n *\n * This loader loads LWSC files exported from LW\n *\n * File format description: http://www.martinreddy.net/gfx/3d/LWSC.txt\n */\n\nimport { Vector3 } from 'three'\nimport { Sample } from '../audio/Sample'\nimport { getFilename } from '../core/Util'\nimport { AnimClip } from '../game/model/anim/AnimClip'\nimport { AnimSubObj } from '../game/model/anim/AnimSubObj'\nimport { SceneMesh } from '../scene/SceneMesh'\nimport { ResourceManager } from './ResourceManager'\n\nexport class LWSCLoader {\n\n    path: string = ''\n    verbose: boolean = false\n    animationClip: AnimClip = new AnimClip()\n    lines: string[] = []\n    lineIndex: number = 0\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('Using verbose mode')\n    }\n\n    parse(content): AnimClip {\n        if (!content) throw 'Cannot parse LWS, no content given'\n        this.lines = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map(l => l.trim())\n\n        if (this.lines[0] !== 'LWSC') {\n            throw 'Invalid start of file! Expected \\'LWSC\\' in first line'\n        }\n\n        const sceneFileVersion = parseInt(this.lines[1], 10)\n        if (sceneFileVersion !== 1) {\n            console.warn('Unexpected scene file version: ' + sceneFileVersion)\n        }\n\n        for (this.lineIndex = 2; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) continue // empty line: object separator\n            const key = line.split(' ')[0]\n            if (key === 'FirstFrame') {\n                this.parseFrameBlock()\n            } else if (key === 'AddNullObject' || key === 'LoadObject') {\n                const subObj = this.parseObjectBlock()\n                if (this.verbose) console.log(subObj)\n            } else if (line.startsWith('PreviewFirstFrame ') || line.startsWith('PreviewLastFrame ') || line.startsWith('PreviewFrameStep ')) {\n                // only used in editor\n            } else {\n                // console.warn('Unexpected line: ' + line); // TODO analyze remaining entries\n            }\n        }\n\n        if (this.verbose) console.log(this.animationClip)\n        return this.animationClip\n    }\n\n    parseLine(line: string): string[] {\n        const lineParts = line.split(' ').filter((l: string) => l !== '')\n        const key = lineParts.shift()\n        const value = lineParts.join(' ')\n        return [key, value]\n    }\n\n    parseFrameBlock() {\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            const line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'FirstFrame') {\n                this.animationClip.firstFrame = parseInt(value)\n            } else if (key === 'LastFrame') {\n                this.animationClip.lastFrame = parseInt(value)\n            } else if (key === 'FrameStep') {\n                const frameStep = parseInt(value)\n                if (frameStep !== 1) console.error('Animation frameStep has unexpected value: ' + frameStep)\n            } else if (key === 'FramesPerSecond') {\n                this.animationClip.framesPerSecond = parseInt(value)\n            } else if (key === 'PreviewFirstFrame' || key === 'PreviewLastFrame' || key === 'PreviewFrameStep') {\n                // only used in editor\n            } else {\n                console.warn('Unexpected key in frame block')\n            }\n        }\n        console.error('Parsing block reached content end')\n    }\n\n    parseObjectBlock(): AnimSubObj {\n        const subObj = new AnimSubObj()\n        this.animationClip.bodies.push(subObj)\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) return subObj\n            const [key, value] = this.parseLine(line)\n            if (key === 'AddNullObject' || key === 'LoadObject') {\n                if (key === 'LoadObject') {\n                    const filename = getFilename(value)\n                    subObj.lowerName = filename.slice(0, filename.length - '.lwo'.length).toLowerCase()\n                    subObj.filename = this.path + filename\n                    subObj.model = ResourceManager.getLwoModel(subObj.filename)\n                } else if (key === 'AddNullObject') {\n                    const nameParts = value.split(',')\n                    subObj.lowerName = nameParts[0].toLowerCase()\n                    if (subObj.lowerName === 'sfx') {\n                        subObj.sfxName = nameParts[1] || null\n                        subObj.sfxFrames = nameParts.slice(2).map((n) => Number(n))\n                    } else if (subObj.lowerName === 'snd' && nameParts[1].equalsIgnoreCase('SFX_LANDSLIDE')) {\n                        subObj.sfxName = Sample[Sample.SFX_FallIn]\n                        subObj.sfxFrames = nameParts.slice(2).map((n) => Number(n))\n                    }\n                    subObj.model = new SceneMesh()\n                    subObj.isNull = true\n                } else {\n                    throw 'Unexpected line: ' + line\n                }\n            } else if (key === 'ObjectMotion') {\n                let line = this.lines[++this.lineIndex]\n                const lenInfos = parseInt(line)\n                line = this.lines[++this.lineIndex]\n                const lenFrames = parseInt(line)\n                this.lineIndex++\n                for (let c = 0; c < lenFrames; c++) {\n                    let line = this.lines[this.lineIndex + c * 2]\n                    if (line.startsWith('EndBehavior')) break\n                    const infos = line.split(' ').map(Number)\n                    if (infos.length !== lenInfos) console.warn('Number of infos (' + infos.length + ') does not match if specified count (' + lenInfos + ')')\n                    line = this.lines[this.lineIndex + c * 2 + 1]\n                    const animationFrameIndex = parseInt(line.split(' ')[0]) // other entries in line should be zeros\n                    subObj.setFrameAndFollowing(animationFrameIndex, this.animationClip.lastFrame, infos)\n                }\n                this.lineIndex += lenFrames * 2\n            } else if (key === 'ParentObject') {\n                subObj.parentObjInd = Number(value) - 1 // index is 1 based\n                if (this.verbose) console.log('parent obj ind is: ' + subObj.parentObjInd)\n            } else if (key === 'ShowObject' || key === 'LockedChannels') {\n                // only used in editor\n            } else if (key === 'ShadowOptions') { // TODO implement shadow options (bitwise)\n                // 0 - Self Shadow\n                // 1 - Cast Shadow\n                // 2 - Receive Shadow\n            } else if (key === 'ObjDissolve') {\n                if (value == '(envelope)') {\n                    let line = this.lines[++this.lineIndex]\n                    const numOfInformationChannels = parseInt(line)\n                    if (numOfInformationChannels !== 1) console.error('Number of information channels for opacity is not 1, but: ' + numOfInformationChannels)\n                    line = this.lines[++this.lineIndex]\n                    const numOfKeyframes = parseInt(line)\n                    this.lineIndex++\n                    for (let c = 0; c < numOfKeyframes; c++) {\n                        let line = this.lines[this.lineIndex + c * 2]\n                        if (line.startsWith('EndBehavior')) break\n                        const opacity = 1 - Number(line)\n                        line = this.lines[this.lineIndex + c * 2 + 1]\n                        const frameNum = Number(line.split(' ')[0])\n                        subObj.setOpacityAndFollowing(frameNum, this.animationClip.lastFrame, opacity)\n                    }\n                    this.lineIndex += numOfKeyframes * 2\n                } else {\n                    const opacity = 1 - Number(value)\n                    subObj.setOpacityAndFollowing(0, this.animationClip.lastFrame, opacity)\n                }\n            } else if (key === 'PivotPoint') {\n                subObj.pivot = new Vector3().fromArray(value.split(' ').map((n) => Number(n)))\n            } else if (this.verbose) {\n                console.warn('Unhandled line in object block: ' + line + '; key: ' + key + '; value: ' + value) // TODO analyze unhandled lines\n            }\n        }\n        console.error('Parsing block reached content end')\n        return subObj\n    }\n\n}\n","import { AudioListener, PositionalAudio } from 'three'\nimport { SoundManager } from '../audio/SoundManager'\nimport { getPath, iGet } from '../core/Util'\nimport { AnimationEntityType } from '../game/model/anim/AnimationEntityType'\nimport { AnimationEntityUpgrade } from '../game/model/anim/AnimationEntityUpgrade'\nimport { AnimClip } from '../game/model/anim/AnimClip'\nimport { TILESIZE } from '../params'\nimport { LWSCLoader } from './LWSCLoader'\nimport { ResourceManager } from './ResourceManager'\n\nexport class AnimEntityLoader {\n\n    aeFilename: string\n    path: string\n    cfgRoot: any\n    audioListener: AudioListener\n    verbose: boolean\n    entityType: AnimationEntityType = new AnimationEntityType()\n    knownAnimations: string[] = []\n\n    constructor(aeFilename: string, cfgRoot: any, audioListener: AudioListener, verbose: boolean = false) {\n        this.aeFilename = aeFilename\n        this.path = getPath(aeFilename)\n        this.cfgRoot = cfgRoot\n        this.audioListener = audioListener\n        this.verbose = verbose\n    }\n\n    loadModels(): AnimationEntityType {\n        Object.keys(this.cfgRoot).forEach((rootKey: string) => {\n            const value = this.cfgRoot[rootKey]\n            if (rootKey.equalsIgnoreCase('Scale')) {\n                this.entityType.scale = Number(value)\n            } else if (rootKey.equalsIgnoreCase('CarryNullName')) {\n                this.entityType.carryNullName = value\n            } else if (rootKey.equalsIgnoreCase('CarryNullFrames')) {\n                this.entityType.carryNullFrames = Number(value)\n            } else if (rootKey.equalsIgnoreCase('Shape')) {\n                if (this.verbose) console.warn('TODO Derive buildings shape from this value') // XXX derive buildings surfaces shape from this value\n            } else if (rootKey.equalsIgnoreCase('DepositNullName')) {\n                this.entityType.depositNullName = value\n            } else if (rootKey.equalsIgnoreCase('ToolNullName')) {\n                this.entityType.toolNullName = value\n            } else if (rootKey.equalsIgnoreCase('WheelMesh')) {\n                if (!'NULL_OBJECT'.equalsIgnoreCase(value)) {\n                    const lwoFilename = this.path + value + '.lwo'\n                    this.entityType.wheelMesh = ResourceManager.getLwoModel(lwoFilename)\n                    if (!this.entityType.wheelMesh) console.error('Could not load wheel mesh from: ' + lwoFilename)\n                }\n            } else if (rootKey.equalsIgnoreCase('WheelRadius')) {\n                this.entityType.wheelRadius = Number(value)\n            } else if (rootKey.equalsIgnoreCase('WheelNullName')) {\n                this.entityType.wheelNullName = value\n            } else if (rootKey.equalsIgnoreCase('DrillNullName')) {\n                this.entityType.drillNullName = value\n            } else if (rootKey.equalsIgnoreCase('DriverNullName')) {\n                this.entityType.driverNullName = value\n            } else if (rootKey.equalsIgnoreCase('CameraNullName')) {\n                this.entityType.cameraNullName = value\n            } else if (rootKey.equalsIgnoreCase('CameraNullFrames')) {\n                this.entityType.cameraNullFrames = Number(value)\n            } else if (rootKey.equalsIgnoreCase('CameraFlipDir')) {\n                // XXX what is this? flip upside down when hanging from rm?\n            } else if (rootKey.equalsIgnoreCase('HighPoly')) {\n                Object.keys(value).forEach((key) => {\n                    const polyKey = key.startsWith('!') ? key.slice(1) : key\n                    const mesh = ResourceManager.getLwoModel(this.path + value[key] + '.lwo')\n                    this.entityType.highPolyBodies.set(polyKey.toLowerCase(), mesh)\n                })\n            } else if (rootKey.equalsIgnoreCase('MediumPoly')) {\n                // TODO implement medium poly parsing\n            } else if (rootKey.equalsIgnoreCase('LowPoly')) {\n                // TODO implement low poly parsing\n            } else if (rootKey.equalsIgnoreCase('FPPoly')) {\n                // TODO implement first person poly parsing\n            } else if (rootKey.equalsIgnoreCase('Activities')) {\n                this.parseAnimations(value)\n            } else if (rootKey.equalsIgnoreCase('Upgrades')) {\n                this.parseUpgrades(value)\n            } else if (rootKey.match(/level\\d\\d\\d\\d/i)) {\n                // TODO geo dome has upgrade defined at root level without Upgrades group\n            } else if (value['lwsfile'] && !this.knownAnimations.includes(rootKey)) {\n                // some activities are not listed in the Activities section... try parse them anyway\n                try {\n                    this.parseActivity(value, 'activity_' + rootKey)\n                } catch (e) {\n                    if (this.verbose) console.warn('Could not parse unlisted activity: ' + rootKey, value, e)\n                }\n            } else if (this.verbose) {\n                console.warn('Unhandled animated entity key found: ' + rootKey, value)\n            }\n        })\n\n        this.finalizeAnimations()\n\n        return this.entityType\n    }\n\n    private parseAnimations(value) {\n        Object.keys(value).forEach((activityName) => {\n            try {\n                let keyName = iGet(value, activityName)\n                this.knownAnimations.push(keyName.toLowerCase())\n                const act = iGet(this.cfgRoot, keyName)\n                this.parseActivity(act, activityName.toLowerCase())\n            } catch (e) {\n                console.error(e)\n                console.log(this.cfgRoot)\n                console.log(value)\n                console.log(activityName)\n            }\n        })\n    }\n\n    private parseActivity(act: any, lActivityName: string) {\n        const file = iGet(act, 'FILE')\n        const isLws = iGet(act, 'LWSFILE') === true\n        const transcoef = iGet(act, 'TRANSCOEF')\n        const looping = iGet(act, 'LOOPING') === true\n        if (isLws) {\n            const content = ResourceManager.getResource(this.path + file + '.lws')\n            const animation = new LWSCLoader(this.path, this.verbose).parse(content)\n            animation.looping = looping\n            animation.transcoef = transcoef ? Number(transcoef) : 1\n            if (lActivityName.startsWith('!')) lActivityName = lActivityName.substr(1) // XXX Whats the meaning of leading ! for activities???\n            this.entityType.animations.set(lActivityName, animation)\n        } else {\n            console.error('Found activity which is not an LWS file')\n        }\n    }\n\n    private parseUpgrades(value) {\n        Object.keys(value).forEach((levelKey: string) => {\n            const match = levelKey.match(/level(\\d\\d\\d\\d)/i) // [carry] [scan] [speed] [drill]\n            if (match) {\n                const upgradeValue = value[levelKey]\n                this.entityType.upgradesByLevel.set(match[1], Object.keys(upgradeValue).map((upgradeName: string) => {\n                    const upgradeFilepath = ResourceManager.cfg('UpgradeTypes', upgradeName)\n                    const upgradeNullName = upgradeValue[upgradeName][0][0]\n                    const upgradeNullIndex = Number(upgradeValue[upgradeName][1][0]) - 1\n                    return new AnimationEntityUpgrade(upgradeFilepath, upgradeNullName, upgradeNullIndex)\n                }))\n            } else {\n                console.warn('Unexpected upgrade level key: ' + levelKey)\n            }\n        })\n    }\n\n    private finalizeAnimations() {\n        this.entityType.animations.forEach((animation) => {\n            this.resolveAnimationBodies(animation)\n\n            if (this.entityType.wheelMesh) {\n                animation.wheelJoints.forEach((joint) => {\n                    joint.add(this.entityType.wheelMesh.clone(true))\n                })\n            }\n\n            this.applyDefaultUpgrades(animation)\n\n            animation.polyModel.scale.setScalar(this.entityType.scale)\n            animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n                const polyPart = animation.polyList[index]\n                const parentInd = body.parentObjInd\n                if (parentInd !== undefined && parentInd !== null) { // can be 0\n                    animation.polyList[parentInd].add(polyPart)\n                } else {\n                    animation.polyModel.add(polyPart)\n                }\n            })\n        })\n    }\n\n    private resolveAnimationBodies(animation: AnimClip) {\n        animation.bodies.forEach((body) => {\n            let model = this.entityType.highPolyBodies.get(body.lowerName)\n            if (!model) model = this.entityType.mediumPolyBodies.get(body.lowerName)\n            if (!model) model = body.model\n            const polyModel = model.clone()\n            animation.polyList.push(polyModel)\n            if (body.lowerName) {\n                if (body.lowerName.equalsIgnoreCase(this.entityType.carryNullName)) {\n                    animation.carryJoint = polyModel\n                } else if (body.lowerName.equalsIgnoreCase(this.entityType.depositNullName)) {\n                    animation.depositJoint = polyModel\n                } else if (body.lowerName.equalsIgnoreCase(this.entityType.toolNullName)) {\n                    animation.getToolJoint = polyModel\n                } else if (body.lowerName.equalsIgnoreCase(this.entityType.wheelNullName)) {\n                    animation.wheelJoints.push(polyModel)\n                } else if (body.lowerName.equalsIgnoreCase(this.entityType.drillNullName)) {\n                    animation.drillJoint = polyModel\n                } else if (body.lowerName.equalsIgnoreCase(this.entityType.driverNullName)) {\n                    animation.driverJoint = polyModel\n                } else if (body.isNull) {\n                    animation.nullJoints.getOrUpdate(body.lowerName.toLowerCase(), () => []).push(polyModel)\n                }\n            }\n            if (body.sfxName) {\n                const audio = new PositionalAudio(this.audioListener)\n                audio.setRefDistance(TILESIZE * 6) // TODO optimize ref distance for SFX sounds\n                audio.loop = false\n                polyModel.add(audio)\n                if (!body.sfxName.equalsIgnoreCase('snd_music')) {\n                    SoundManager.getSoundBuffer(body.sfxName)?.then((audioBuffer) => {\n                        audio.setBuffer(audioBuffer)\n                    })\n                    body.sfxFrames.forEach((frame) => animation.sfxAudioByFrame.getOrUpdate(frame, () => []).push(audio))\n                }\n            }\n        })\n    }\n\n    private applyDefaultUpgrades(animation: AnimClip) {\n        const upgrades0000 = this.entityType.upgradesByLevel.get('0000')\n        if (upgrades0000) { // TODO check for other upgrade levels\n            upgrades0000.forEach((upgrade) => {\n                const joint = animation.nullJoints.get(upgrade.upgradeNullName.toLowerCase())?.[upgrade.upgradeNullIndex]\n                if (joint) {\n                    const lwoModel = ResourceManager.getLwoModel(upgrade.upgradeFilepath + '.lwo')\n                    if (lwoModel) {\n                        joint.add(lwoModel)\n                    } else {\n                        const upgradeModels = ResourceManager.getAnimationEntityType(upgrade.upgradeFilepath + '/' + upgrade.upgradeFilepath.split('/').last() + '.ae', this.audioListener)\n                        upgradeModels.animations.get('activity_stand')?.bodies.forEach((b) => joint.add(b.model.clone()))\n                    }\n                }\n            })\n        }\n    }\n\n}\n","import { DoubleSide, MeshPhongMaterial, Texture } from 'three'\nimport { SEQUENCE_TEXTURE_INTERVAL_MS } from '../params'\n\nexport class SequenceTextureMaterial extends MeshPhongMaterial {\n\n    textures: Texture[] = []\n    timer: number = 0\n    seqNum: number = 0\n\n    constructor(name: string) {\n        super({\n            side: DoubleSide,\n            alphaToCoverage: true,\n            shininess: 0,\n        })\n        this.name = name\n    }\n\n    clone(): this {\n        const clone = super.clone() as this\n        clone.setTextures(this.textures)\n        return clone\n    }\n\n    setTextures(textures: Texture[]) {\n        this.textures = textures\n        if (this.textures.length < 1) return\n        this.map = this.textures[0]\n        this.color.set(0xFFFFFF) // overwrite color, when color map (texture) in use\n    }\n\n    update(elapsedMs: number) {\n        if (this.textures.length < 1) return\n        this.timer += elapsedMs\n        const addedSeqNum = Math.floor(this.timer / SEQUENCE_TEXTURE_INTERVAL_MS)\n        this.timer -= addedSeqNum * SEQUENCE_TEXTURE_INTERVAL_MS\n        this.seqNum = (this.seqNum + addedSeqNum) % this.textures.length\n        this.map = this.textures[this.seqNum]\n    }\n\n    setOpacity(opacity: number) {\n        this.opacity = opacity\n        this.transparent = this.transparent || this.opacity < 1\n    }\n\n}\n","// noinspection JSUnusedLocalSymbols,JSBitwiseOperatorUsage\n\n/**\n * @author Marcus-Bizal https://github.com/marcbizal\n * patched by Scarabol\n *\n * This loader loads LWOB files exported from LW6.\n *\n * Support\n *  -\n */\n\nimport { AdditiveBlending, BufferAttribute, BufferGeometry, ClampToEdgeWrapping, Color, DoubleSide, MirroredRepeatWrapping, RepeatWrapping, Texture, Vector3 } from 'three'\nimport { decodeFilepath, decodeString, getFilename } from '../core/Util'\nimport { SceneMesh } from '../scene/SceneMesh'\nimport { SequenceTextureMaterial } from '../scene/SequenceTextureMaterial'\nimport { ResourceManager } from './ResourceManager'\n\n// HEADER SPEC //\nconst LWO_MAGIC = 0x4C574F42 // \"LWOB\"\nconst OFF_MAGIC = 8\n\n/********************/\n/* TYPE SIZES START */\n/********************/\n\nconst ID4_SIZE = 4\nconst I1_SIZE = 1\nconst I2_SIZE = 2\nconst I4_SIZE = 4\nconst F4_SIZE = 4\n\nconst COL4_SIZE = 4\nconst VEC12_SIZE = 12\nconst IP2_SIZE = 2\nconst FP4_SIZE = 4\nconst DEG4_SIZE = 4\n\n/********************/\n/*  TYPE SIZES END  */\n/********************/\n\n/*********************/\n/* CHUNK TYPES START */\n/*********************/\n\nconst LWO_FORM = 0x464F524D\nconst LWO_PNTS = 0x504E5453\nconst LWO_SFRS = 0x53524653\nconst LWO_POLS = 0x504F4C53\nconst LWO_CRVS = 0x43525653\nconst LWO_PCHS = 0x50434853\nconst LWO_SURF = 0x53555246\n\nconst CHUNK_HEADER_SIZE = 8\nconst SUBCHUNK_HEADER_SIZE = 6\n\n/*********************/\n/*  CHUNK TYPES END  */\n/*********************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\nconst SURF_COLR = 0x434F4C52\nconst SURF_FLAG = 0x464C4147\n\n// Base Shading Values (Fixed Point)\nconst SURF_LUMI = 0x4C554D49\nconst SURF_DIFF = 0x44494646\nconst SURF_SPEC = 0x53504543\nconst SURF_REFL = 0x5245464C\nconst SURF_TRAN = 0x5452414E\n\n// Base Shading Values (Floating Point)\nconst SURF_VLUM = 0x564C554D\nconst SURF_VDIF = 0x56444946\nconst SURF_VSPC = 0x56535043\nconst SURF_VRFL = 0x5646524C\nconst SURF_VTRN = 0x5654524E\n\nconst SURF_GLOS = 0x474C4F53\nconst SURF_RFLT = 0x52464C54\nconst SURF_RIMG = 0x52494D47\nconst SURF_RIND = 0x52494E44\nconst SURF_EDGE = 0x45444745\nconst SURF_SMAN = 0x534D414E\n\n/**************************/\n/*  SURF DEFINITIONS END  */\n/**************************/\n\n/*****************************/\n/* TEXTURE DEFINITIONS START */\n/*****************************/\n\n// Start of Definition\nconst SURF_CTEX = 0x43544558\nconst SURF_DTEX = 0x44544558\nconst SURF_STEX = 0x53544558\nconst SURF_RTEX = 0x52544558\nconst SURF_TTEX = 0x54544558\nconst SURF_LTEX = 0x4C544558\nconst SURF_BTEX = 0x42544558\n\n// Flags\nconst SURF_TFLG = 0x54464C47\n\n// Location and Size\nconst SURF_TSIZ = 0x5453495A\nconst SURF_TCTR = 0x54435452\nconst SURF_TFAL = 0x5446414C\nconst SURF_TVEL = 0x5456454C\n\n// Color\nconst SURF_TCLR = 0x54434C52\n\n// Value\nconst SURF_TVAL = 0x5456414C\n\n// Bump Amplitude\nconst SURF_TAMP = 0x54414D50\n\n// Image Map\nconst SURF_TIMG = 0x54494D47\n\n// Image Alpha\nconst SURF_TALP = 0x54414C50\n\n// Image Wrap Options\nconst SURF_TWRP = 0x54575250\n\n// Antialiasing Strength\nconst SURF_TAAS = 0x54414153\n\n// Texture Opacity\nconst SURF_TOPC = 0x544F5043\n\n/*****************************/\n/*  TEXTURE DEFINITIONS END  */\n/*****************************/\n\n/*************************/\n/* FLAG DEFINITION START */\n/*************************/\n\nconst LUMINOUS_BIT = 1\nconst OUTLINE_BIT = 2\nconst SMOOTHING_BIT = 4\nconst COLORHIGHLIGHTS_BIT = 8\nconst COLORFILTER_BIT = 16\nconst OPAQUEEDGE_BIT = 32\nconst TRANSPARENTEDGE_BIT = 64\nconst SHARPTERMINATOR_BIT = 128\nconst DOUBLESIDED_BIT = 256\nconst ADDITIVE_BIT = 512\nconst SHADOWALPHA_BIT = 1024\n\n/*************************/\n/*  FLAG DEFINITION END  */\n/*************************/\n\n/*************************/\n/* TFLG DEFINITION START */\n/*************************/\n\nconst XAXIS_BIT = 1\nconst YAXIS_BIT = 2\nconst ZAXIS_BIT = 4\nconst WORLDCOORDS_BIT = 8\nconst NEGATIVEIMAGE_BIT = 16\nconst PIXELBLENDING_BIT = 32\nconst ANTIALIASING_BIT = 64\n\n/*************************/\n/*  TFLG DEFINITION END  */\n\n/*************************/\n\nfunction getVector3AtOffset(view, offset) {\n    let vector = new Vector3()\n    vector.x = view.getFloat32(offset)\n    vector.y = view.getFloat32(offset + F4_SIZE)\n    vector.z = view.getFloat32(offset + (F4_SIZE * 2))\n    return vector\n}\n\nfunction planarMapUVS(geometry, vertices, uvs, indices, materialIndex, size, center, flags) {\n    // Check to ensure that one of the flags is set, if not throw an error.\n    const mask = XAXIS_BIT | YAXIS_BIT | ZAXIS_BIT\n    if (flags & mask) {\n        for (let group of geometry.groups) {\n            if (group.materialIndex !== materialIndex) continue\n\n            for (let i = group.start; i < group.start + group.count; i++) {\n\n                let vertexIndex = indices[i] * 3\n                let x = vertices[vertexIndex] - center.x\n                let y = vertices[vertexIndex + 1] - center.y\n                let z = vertices[vertexIndex + 2] - center.z\n\n                let uvIndex = indices[i] * 2\n                let u = 0\n                let v = 0\n\n                if (flags & XAXIS_BIT) {\n                    u = z / size.z + 0.5\n                    v = y / size.y + 0.5\n                } else if (flags & YAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = z / size.z + 0.5\n                } else if (flags & ZAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = y / size.y + 0.5\n                }\n\n                uvs[uvIndex] = u\n                uvs[uvIndex + 1] = v\n            }\n        }\n    } else {\n        // console.warn(\"LWOLoader.planarMapUVS: No axis bit is set!\"); // XXX what is this about\n    }\n}\n\nexport class LWOLoader {\n\n    COUNTER_CLOCKWISE: false\n\n    meshPath: string\n    entityPath: string\n    verbose: boolean = false\n    materials: SequenceTextureMaterial[] = []\n    geometry: BufferGeometry = new BufferGeometry()\n    vertices: Float32Array = null\n    indices: Uint16Array = null\n    uvs: Float32Array = null\n\n    constructor(meshPath: string, entityPath: string = null, verbose: boolean = false) {\n        this.verbose = verbose\n        this.meshPath = meshPath\n        this.entityPath = entityPath\n    }\n\n    parsePoints(view, chunkOffset, chunkSize) {\n        if (chunkSize % VEC12_SIZE !== 0) {\n            console.error('LWOLoader.parse: F12 does not evenly divide into chunk size (' + chunkSize + '). Possible corruption.')\n            return\n        }\n\n        let numVertices = (chunkSize / F4_SIZE) / 3\n        this.vertices = new Float32Array(numVertices * 3)\n        this.uvs = new Float32Array(numVertices * 2)\n\n        for (let i = 0; i < numVertices; i++) {\n            let vertexIndex = i * 3\n            let vertexOffset = vertexIndex * F4_SIZE\n            this.vertices[vertexIndex] = view.getFloat32(chunkOffset + vertexOffset) \t\t\t\t// x\n            this.vertices[vertexIndex + 1] = view.getFloat32(chunkOffset + vertexOffset + F4_SIZE) \t// y\n            this.vertices[vertexIndex + 2] = view.getFloat32(chunkOffset + vertexOffset + (F4_SIZE * 2)) \t// z\n        }\n    }\n\n    parseSurfaceNames(buffer, chunkOffset, chunkSize) {\n        let textChunk = new TextDecoder().decode(new Uint8Array(buffer, chunkOffset, chunkSize))\n        this.materials = textChunk.split('\\0').filter((s) => !!s).map((name) => new SequenceTextureMaterial(name))\n        if (this.verbose) console.log('LWO contains ' + this.materials.length + ' materials with following names: ' + this.materials.map((m) => m.name))\n    }\n\n    parsePolygons(view, chunkOffset, chunkSize) {\n        // Gather some initial data so that we can get the proper size\n        let totalNumIndices = 0\n        let offset = 0\n        while (offset < chunkSize) {\n            const numIndices = view.getInt16(chunkOffset + offset)\n            const materialIndex = view.getInt16(chunkOffset + offset + 2 + (numIndices * 2))\n\n            this.geometry.addGroup(totalNumIndices, (numIndices - 2) * 3, materialIndex - 1)\n\n            totalNumIndices += (numIndices - 2) * 3\n            offset += 4 + (numIndices * 2)\n        }\n\n        offset = 0\n        let currentIndex = 0\n        this.indices = new Uint16Array(totalNumIndices)\n        while (offset < chunkSize) {\n            let numIndices = view.getInt16(chunkOffset + offset)\n\n            offset += 2\n\n            let faceIndices = new Int16Array(numIndices)\n            for (let i = 0; i <= numIndices; i++) {\n                faceIndices[i] = view.getInt16(chunkOffset + offset + (i * 2))\n            }\n\n            for (let i = 0; i < numIndices - 2; i++) {\n                if (this.COUNTER_CLOCKWISE) {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                } else {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                }\n            }\n\n            offset += 2 + (numIndices * 2)\n        }\n    }\n\n    parseSurface(view, buffer, chunkOffset, chunkSize) {\n        let offset = 0\n        while (view.getUint8(chunkOffset + offset) !== 0) offset++\n\n        let materialName = decodeString(new Uint8Array(buffer, chunkOffset, offset))\n        if (this.verbose) console.log('Start parsing surface: ' + materialName)\n        let materialIndex = -1\n        let material: SequenceTextureMaterial = null\n        for (let i = 0; i < this.materials.length; i++) {\n            if (this.materials[i].name === materialName) {\n                materialIndex = i\n                material = this.materials[i]\n            }\n        }\n        if (!material) {\n            console.error('LWOLoader.parse: Surface in SURF chunk does not exist in SRFS')\n            return\n        }\n\n        let textureFlags = 0\n        let textureSize = new Vector3(0, 0, 0)\n        let textureCenter = new Vector3(0, 0, 0)\n        // let textureFalloff = new Vector3(0, 0, 0);\n        // let textureVelocity = new Vector3(0, 0, 0);\n\n        while (offset < chunkSize) {\n            const subChunkOffset = chunkOffset + offset\n            if (view.getUint8(subChunkOffset) === 0) {\n                offset++\n            } else {\n                const subChunkType = view.getInt32(subChunkOffset)\n                const subChunkSize = view.getInt16(subChunkOffset + ID4_SIZE)\n\n                if (this.verbose) console.log('Parsing sub-chunk ' + new TextDecoder().decode(new Uint8Array(buffer, subChunkOffset, ID4_SIZE)) + ' at ' + subChunkOffset + '; length ' + subChunkSize)\n\n                const currentOffset = subChunkOffset + SUBCHUNK_HEADER_SIZE\n                switch (subChunkType) {\n                    case SURF_COLR:\n                        const colorArray = [\n                            view.getUint8(currentOffset + 0) / 255,\n                            view.getUint8(currentOffset + 1) / 255,\n                            view.getUint8(currentOffset + 2) / 255,\n                        ]\n                        material.color = new Color().fromArray(colorArray)\n                        if (this.verbose) console.log('Material color (COLR): ' + colorArray.join(' '))\n                        break\n                    case SURF_FLAG:\n                        const flags = view.getUint16(currentOffset)\n                        if (this.verbose) console.log('Flags (FLAG): ' + flags.toString(2))\n                        // if (this.verbose && flags & LUMINOUS_BIT) console.warn('Flag is set but unhandled: luminous') // flag replaced with LUMI below\n                        if (this.verbose && flags & OUTLINE_BIT) console.warn('Flag is set but unhandled: outline')\n                        if (this.verbose && flags & SMOOTHING_BIT) console.warn('Flag is set but unhandled: smoothing')\n                        if (this.verbose && flags & COLORHIGHLIGHTS_BIT) console.warn('Flag is set but unhandled: colorHighlights')\n                        if (this.verbose && flags & COLORFILTER_BIT) console.warn('Flag is set but unhandled: colorFilter')\n                        if (this.verbose && flags & OPAQUEEDGE_BIT) console.warn('Flag is set but unhandled: opaqueEdge')\n                        if (this.verbose && flags & TRANSPARENTEDGE_BIT) console.warn('Flag is set but unhandled: transparentEdge')\n                        if (this.verbose && flags & SHARPTERMINATOR_BIT) console.warn('Flag is set but unhandled: sharpTerminator')\n                        if (flags & DOUBLESIDED_BIT) material.side = DoubleSide\n                        if (flags & ADDITIVE_BIT) {\n                            material.blending = AdditiveBlending\n                            material.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n                        }\n                        if (this.verbose && flags & SHADOWALPHA_BIT) console.warn('Flag is set but unhandled: shadowAlpha')\n                        break\n                    case SURF_RIND:\n                        const refractiveIndex = view.getFloat32(currentOffset)\n                        material.refractionRatio = 1 / refractiveIndex\n                        break\n                    case SURF_EDGE:\n                        const edgeTransparencyThreshold = view.getFloat32(currentOffset)\n                        if (this.verbose) console.warn('Edge transparency threshold (0.0 to 1.0): ' + edgeTransparencyThreshold)\n                        break\n                    case SURF_SMAN:\n                        const maxSmoothAngle = view.getFloat32(currentOffset)\n                        if (this.verbose) console.warn('Implement maximum angle between two adjacent polygons that can be smooth shaded: ' + maxSmoothAngle)\n                        break\n                    case SURF_LUMI:\n                        const luminosity = view.getInt16(currentOffset) / 256\n                        if (this.verbose) console.log('Luminosity (LUMI): ' + luminosity)\n                        material.emissiveIntensity = luminosity\n                        break\n                    case SURF_DIFF:\n                        const diffuse = view.getInt16(currentOffset) / 256\n                        if (this.verbose) console.log('Diffuse (DIFF): ' + diffuse)\n                        if (!diffuse) material.color = null\n                        break\n                    case SURF_SPEC:\n                        const specular = view.getInt16(currentOffset) / 256\n                        // material.specular = material.color.multiplyScalar(specular);\n                        if (this.verbose) console.warn('Specular (SPEC): ' + specular)\n                        break\n                    case SURF_REFL:\n                        let reflection = 0\n                        if (reflection === SURF_VRFL) {\n                            reflection = view.getFloat32(currentOffset)\n                        } else {\n                            reflection = view.getInt16(currentOffset) / 256\n                        }\n                        material.reflectivity = reflection\n                        if (this.verbose) console.log('Reflectivity (REFL): ' + material.reflectivity)\n                        break\n                    case SURF_TRAN:\n                    case SURF_VTRN:\n                        let transparency = 0\n                        if (subChunkType === SURF_VTRN) {\n                            transparency = view.getFloat32(currentOffset)\n                        } else {\n                            transparency = view.getInt16(currentOffset) / 256\n                        }\n                        material.setOpacity(1 - transparency)\n                        if (this.verbose) console.log('Opacity (TRAN/VTRN): ' + material.opacity)\n                        break\n                    case SURF_VLUM:\n                        const vLuminosity = view.getFloat32(currentOffset)\n                        if (this.verbose) console.log('Luminosity (VLUM): ' + vLuminosity)\n                        material.emissiveIntensity = vLuminosity\n                        break\n                    case SURF_VDIF:\n                        let vDiffuse = view.getFloat32(currentOffset)\n                        if (this.verbose) console.log('Diffuse (VDIF): ' + vDiffuse)\n                        // material.vertexColors = !!vDiffuse // XXX push vertex colors first\n                        break\n                    case SURF_VSPC:\n                        let vSpecular = view.getFloat32(currentOffset)\n                        // material.specular = material.color.multiplyScalar(vSpecular);\n                        if (this.verbose) console.warn('Specular (VSPC): ' + vSpecular)\n                        break\n                    case SURF_CTEX: // start of new texture sub-chunk\n                    case SURF_DTEX:\n                    case SURF_STEX:\n                    case SURF_RTEX:\n                    case SURF_TTEX:\n                    case SURF_BTEX:\n                        const textureTypeName = decodeFilepath(new Uint8Array(buffer, currentOffset, subChunkSize))\n                        if (this.verbose) console.warn('Unhandled texture typename: ' + textureTypeName)\n                        // XXX handle different texture types\n                        break\n                    case SURF_TFLG:\n                        textureFlags = view.getUint16(currentOffset)\n                        if (this.verbose) console.log('Flags (TFLG): ' + textureFlags.toString(2))\n                        if (this.verbose && textureFlags & XAXIS_BIT) console.warn('Flag is set but unhandled: X Axis')\n                        if (this.verbose && textureFlags & YAXIS_BIT) console.warn('Flag is set but unhandled: Y Axis')\n                        if (this.verbose && textureFlags & ZAXIS_BIT) console.warn('Flag is set but unhandled: Z Axis')\n                        if (this.verbose && textureFlags & WORLDCOORDS_BIT) console.warn('Flag is set but unhandled: World Coords')\n                        if (this.verbose && textureFlags & NEGATIVEIMAGE_BIT) console.warn('Flag is set but unhandled: Negative Image')\n                        if (this.verbose && textureFlags & PIXELBLENDING_BIT) console.warn('Flag is set but unhandled: Pixel Blending')\n                        if (this.verbose && textureFlags & ANTIALIASING_BIT) console.log('Flag is set: Antialiasing') // turned on by default\n                        break\n                    case SURF_TSIZ:\n                        textureSize = getVector3AtOffset(view, currentOffset)\n                        if (this.verbose) console.log('Texture size (TSIZ): ' + textureSize.toArray().join(' '))\n                        break\n                    case SURF_TCTR:\n                        textureCenter = getVector3AtOffset(view, currentOffset)\n                        if (this.verbose) console.warn('Unhandled texture center (TCTR): ' + textureCenter.toArray().join(' '))\n                        break\n                    case SURF_TCLR:\n                        const textureColorArray = [\n                            view.getUint8(currentOffset + 0) / 255,\n                            view.getUint8(currentOffset + 1) / 255,\n                            view.getUint8(currentOffset + 2) / 255,\n                            view.getUint8(currentOffset + 3) / 255,\n                        ]\n                        // const textureColor = new Color().fromArray(textureColorArray);\n                        // seems to be 0 0 0 anyway...\n                        if (this.verbose) console.log('Unhandled texture color (TCLR): ' + textureColorArray.join(' '))\n                        break\n                    case SURF_TVAL:\n                        const textureValue = view.getUint16(currentOffset) / 256\n                        if (this.verbose) console.warn('Unhandled texture value (TVAL): ' + textureValue)\n                        break\n                    case SURF_TIMG:\n                        const textureFilepath = decodeFilepath(new Uint8Array(buffer, currentOffset, subChunkSize))\n                        if (this.verbose) console.log('Texture filepath (TIMG): ' + textureFilepath)\n                        const lTextureFilename = getFilename(textureFilepath)?.toLowerCase()\n                        if (!lTextureFilename || lTextureFilename === '(none)') break\n                        material.transparent = material.transparent || !!lTextureFilename.match(/a\\d\\d\\d\\D.*bmp/i)\n                        const hasSequence = lTextureFilename.endsWith('(sequence)')\n                        const sequenceBaseFilepath = lTextureFilename.substring(0, lTextureFilename.length - '(sequence)'.length).trim()\n                        let textures: Texture[] = []\n                        if (hasSequence) {\n                            const match = sequenceBaseFilepath.match(/(.+\\D)0+(\\d+)\\..+/i)\n                            textures = ResourceManager.getTexturesBySequenceName(this.meshPath + match[1])\n                        } else {\n                            const texture = ResourceManager.getMeshTexture(lTextureFilename, this.meshPath, this.entityPath)\n                            textures = texture ? [texture] : []\n                        }\n                        material.setTextures(textures)\n                        break\n                    case SURF_TWRP:\n                        const horizontalWrappingMode = this.parseWrappingMode(view.getUint16(currentOffset))\n                        const verticalWrappingMode = this.parseWrappingMode(view.getUint16(currentOffset + 2))\n                        material.textures.forEach((t) => {\n                            t.wrapS = horizontalWrappingMode\n                            t.wrapT = verticalWrappingMode\n                        })\n                        break\n                    case SURF_TAAS: // not supported by threejs\n                        // const antialiasingStrength = view.getFloat32(currentOffset)\n                        // if (this.verbose) console.log('Antialiasing strength: ' + antialiasingStrength)\n                        break\n                    default: // TODO implement all LWO features\n                        if (this.verbose) console.warn('Found unrecognised SURF sub-chunk type ' + new TextDecoder().decode(new Uint8Array(buffer, subChunkOffset, ID4_SIZE)) + ' (' + subChunkType + ') at ' + subChunkOffset + '; length ' + subChunkSize)\n                        break\n                }\n\n                offset += SUBCHUNK_HEADER_SIZE + subChunkSize\n            }\n        }\n\n        planarMapUVS(this.geometry, this.vertices, this.uvs, this.indices, materialIndex, textureSize, textureCenter, textureFlags)\n\n        if (this.verbose) console.log('Done parsing surface: ' + materialName)\n    }\n\n    parse(buffer: ArrayBuffer): SceneMesh {\n        const view = new DataView(buffer)\n\n        if (view.getUint32(0) !== LWO_FORM) {\n            console.error('LWOLoader.parse: Cannot find header.')\n            return\n        }\n\n        const fileSize = view.getUint32(ID4_SIZE)\n        if (fileSize + CHUNK_HEADER_SIZE !== view.byteLength) {\n            console.warn('LWOLoader.parse: Discrepancy between size in header (' + (fileSize + CHUNK_HEADER_SIZE) + ' bytes) and actual size (' + view.byteLength + ' bytes).')\n        }\n\n        let magicOffset = ID4_SIZE + I4_SIZE\n        if (view.getUint32(magicOffset) !== LWO_MAGIC) {\n            const magic = decodeString(new Uint8Array(buffer, magicOffset, ID4_SIZE))\n            console.error('LWOLoader.parse: Invalid magic ID (' + magic + ') in LWO header.')\n            return\n        }\n\n        let cursor = 12\n        while (cursor < view.byteLength) {\n            // Skip null byte padding\n            if (view.getUint8(cursor) === 0) {\n                cursor++\n            } else {\n                const chunkType = view.getInt32(cursor)\n                const chunkSize = view.getInt32(cursor + ID4_SIZE)\n\n                cursor += CHUNK_HEADER_SIZE\n\n                switch (chunkType) {\n                    case LWO_PNTS:\n                        this.parsePoints(view, cursor, chunkSize)\n                        break\n                    case LWO_SFRS:\n                        this.parseSurfaceNames(buffer, cursor, chunkSize)\n                        break\n                    case LWO_POLS:\n                        this.parsePolygons(view, cursor, chunkSize)\n                        break\n                    case LWO_SURF:\n                        this.parseSurface(view, buffer, cursor, chunkSize)\n                        break\n                    default:\n                        console.warn('Found unrecognised chunk type ' + decodeString(new Uint8Array(buffer, cursor - CHUNK_HEADER_SIZE, ID4_SIZE)) + ' at ' + cursor)\n                }\n\n                cursor += chunkSize\n            }\n\n        }\n\n        this.geometry.setAttribute('position', new BufferAttribute(this.vertices, 3))\n        this.geometry.setAttribute('uv', new BufferAttribute(this.uvs, 2))\n        this.geometry.setIndex(new BufferAttribute(this.indices, 1))\n        this.geometry.computeVertexNormals()\n\n        return new SceneMesh(this.geometry, this.materials)\n    }\n\n    /**\n     * Documentation: https://www.sandbox.de/osg/lightwave.htm\n     */\n    parseWrappingMode(wrap: number) {\n        if (wrap === 0) { // Unsupported texture wrapping mode with black color outside of texture image\n            return ClampToEdgeWrapping\n        } else if (wrap === 1) {\n            return ClampToEdgeWrapping\n        } else if (wrap === 2) {\n            return RepeatWrapping\n        } else if (wrap === 3) {\n            return MirroredRepeatWrapping\n        } else {\n            console.warn('Unexpected texture wrapping mode given: ' + wrap)\n            return RepeatWrapping\n        }\n    }\n}\n","export class InitLoadingMessage {\n\n    wad0FileUrl: string\n    wad1FileUrl: string\n\n    constructor(wad0FileUrl: string, wad1FileUrl: string) {\n        this.wad0FileUrl = wad0FileUrl\n        this.wad1FileUrl = wad1FileUrl\n    }\n\n}\n","export enum MoveState {\n\n    MOVED,\n    TARGET_REACHED,\n    TARGET_UNREACHABLE,\n\n}\n","import { EntityManager } from '../EntityManager'\nimport { WorldManager } from '../WorldManager'\n\nexport enum GameResultState {\n\n    QUIT,\n    COMPLETE,\n    FAILED,\n\n}\n\nexport class GameResult {\n\n    state: GameResultState\n    numBuildings: number\n    numRaiders: number\n    numMaxRaiders: number\n    gameTimeSeconds: number\n\n    constructor(state: GameResultState, entityMgr: EntityManager, worldMgr: WorldManager) {\n        this.state = state\n        this.numBuildings = entityMgr.buildings.length\n        this.numRaiders = entityMgr.raiders.length\n        this.numMaxRaiders = entityMgr.getMaxRaiders()\n        this.gameTimeSeconds = Math.round(worldMgr.elapsedGameTimeMs / 1000)\n    }\n\n}\n","import { AudioListener, RepeatWrapping, Texture } from 'three'\nimport { createDummyImgData } from '../core/ImageHelper'\nimport { getFilename, getPath } from '../core/Util'\nimport { AnimationEntityType } from '../game/model/anim/AnimationEntityType'\nimport { SceneMesh } from '../scene/SceneMesh'\nimport { AnimEntityLoader } from './AnimEntityLoader'\nimport { LWOLoader } from './LWOLoader'\nimport { ResourceCache } from './ResourceCache'\nimport { InitLoadingMessage } from './wadworker/InitLoadingMessage'\nimport { WadWorkerMessage } from './wadworker/WadWorkerMessage'\nimport { WorkerMessageType } from './wadworker/WorkerMessageType'\n\nexport class ResourceManager extends ResourceCache {\n\n    static worker: Worker = new Worker(new URL('./wadworker/WadWorker', import.meta.url))\n\n    static lwoCache: Map<string, SceneMesh> = new Map()\n\n    static startLoadingFromCache() {\n        return this.startLoading(null)\n    }\n\n    static startLoadingFromUrl(wad0Url: string, wad1Url: string) {\n        return this.startLoading(new InitLoadingMessage(wad0Url, wad1Url))\n    }\n\n    private static startLoading(msg: InitLoadingMessage) {\n        this.worker.onmessage = (event) => {\n            const msg: WadWorkerMessage = event.data\n            if (msg.type === WorkerMessageType.ASSET) {\n                msg.assetNames.forEach((assetName) => this.resourceByName.set(assetName.toLowerCase(), msg.assetObj))\n                msg.sfxKeys?.forEach((sfxKey) => this.sfxByKey.set(sfxKey, msg.assetObj))\n                this.onAssetLoaded()\n            } else if (msg.type === WorkerMessageType.MSG) {\n                this.onMessage(msg.text)\n            } else if (msg.type === WorkerMessageType.CFG) {\n                this.configuration = msg.cfg\n                this.stats = msg.stats\n                this.loadDefaultCursor()\n                this.onInitialLoad(msg.totalResources)\n            } else if (msg.type === WorkerMessageType.CACHE_MISS) {\n                this.onCacheMissed()\n            } else if (msg.type === WorkerMessageType.DONE) {\n                this.loadAllCursor()\n                console.log('Loading of about ' + msg.totalResources + ' assets complete! Total load time: ' + msg.loadingTimeSeconds + ' seconds.')\n                this.onLoadDone()\n            }\n        }\n        this.worker.postMessage(msg)\n    }\n\n    static onMessage: (msg: string) => any = (msg: string) => {\n        console.log(msg)\n    }\n\n    static onCacheMissed: () => any = () => {\n        console.log('Worker missed cache')\n    }\n\n    static onInitialLoad: (totalResources: number) => any = () => {\n        console.log('Initial loading done.')\n    }\n\n    static onAssetLoaded: () => any = () => {\n    }\n\n    static onLoadDone: () => any = () => {\n    }\n\n    static getTexturesBySequenceName(basename: string): Texture[] {\n        const lBasename = basename?.toLowerCase()\n        const result = []\n        this.resourceByName.forEach((res, name) => {\n            if (name.startsWith(lBasename)) result.push(name)\n        })\n        if (result.length > 0) {\n            return result.map((textureFilepath) => this.getTexture(textureFilepath))\n        } else if (!lBasename.startsWith('world/shared/')) {\n            return this.getTexturesBySequenceName('world/shared/' + getFilename(lBasename))\n        } else {\n            console.warn('Texture sequence not found: ' + lBasename)\n            return []\n        }\n    }\n\n    static getMeshTexture(textureFilename: string, meshPath: string, entityPath: string): Texture {\n        const lTextureFilename = textureFilename?.toLowerCase()\n        const lMeshFilepath = meshPath?.toLowerCase() + lTextureFilename\n        const imgData = this.resourceByName.getOrUpdate(lMeshFilepath, () => {\n            const lEntityFilepath = entityPath ? entityPath.toLowerCase() + lTextureFilename : null\n            if (entityPath) {\n                return this.resourceByName.getOrUpdate(lEntityFilepath, () => {\n                    return this.getImgDataFromSharedPaths(lTextureFilename, textureFilename, lMeshFilepath, lEntityFilepath)\n                })\n            } else {\n                return this.getImgDataFromSharedPaths(lTextureFilename, textureFilename, lMeshFilepath, lEntityFilepath)\n            }\n        })\n        if (!imgData) return null\n        // without repeat wrapping some entities are not fully textured\n        const texture = new Texture(imgData, Texture.DEFAULT_MAPPING, RepeatWrapping, RepeatWrapping)\n        texture.needsUpdate = true // without everything is just dark\n        return texture\n    }\n\n    private static getImgDataFromSharedPaths(lTextureFilename: string, textureFilename: string, lMeshFilepath: string, lEntityFilepath: string): ImageData {\n        const ugSharedFilename = 'vehicles/sharedug/' + lTextureFilename\n        return this.resourceByName.getOrUpdate(ugSharedFilename, () => {\n            const worldSharedFilename = 'world/shared/' + lTextureFilename\n            return this.resourceByName.getOrUpdate(worldSharedFilename, () => {\n                if (lTextureFilename !== 'teofoilreflections.jpg' && lTextureFilename !== 'wingbase3.bmp' &&\n                    lTextureFilename !== 'a_side.bmp' && lTextureFilename !== 'a_top.bmp') {\n                    console.warn('Texture \\'' + textureFilename + '\\' (' + lMeshFilepath + ', ' + lEntityFilepath + ', ' + worldSharedFilename + ') unknown! Using placeholder texture instead')\n                    return createDummyImgData(64, 64)\n                }\n                return null\n            })\n        })\n    }\n\n    static getTexture(textureFilepath): Texture | null {\n        if (!textureFilepath) {\n            throw 'textureFilepath must not be undefined, null or empty - was ' + textureFilepath\n        }\n        const imgData = this.resourceByName.get(textureFilepath.toLowerCase())\n        if (!imgData) return null\n        // without repeat wrapping some entities are not fully textured\n        const texture = new Texture(imgData, Texture.DEFAULT_MAPPING, RepeatWrapping, RepeatWrapping)\n        texture.needsUpdate = true // without everything is just dark\n        return texture\n    }\n\n    static getAnimationEntityType(aeFilename: string, audioListener: AudioListener): AnimationEntityType {\n        let cfgRoot = this.getResource(aeFilename)\n        if (!cfgRoot) throw 'Could not get animation entity type for: ' + aeFilename\n        return new AnimEntityLoader(aeFilename, cfgRoot, audioListener).loadModels()\n    }\n\n    static getLwoModel(lwoFilepath: string, entityPath: string = null): SceneMesh {\n        return this.lwoCache.getOrUpdate(lwoFilepath.toLowerCase(), () => {\n            const lwoBuffer = ResourceManager.getResource(lwoFilepath)\n            if (!lwoBuffer) return null\n            return new LWOLoader(getPath(lwoFilepath), entityPath).parse(lwoBuffer)\n        })?.clone()\n    }\n\n}\n","import { Vector2, Vector3 } from 'three'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { BuildingsChangedEvent, RaidersChangedEvent, SelectionChanged, SelectPanelType } from '../event/LocalEvents'\nimport { JobCreateEvent } from '../event/WorldEvents'\nimport { RaiderDiscoveredEvent } from '../event/WorldLocationEvent'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../params'\nimport { BuildingEntity } from './model/building/BuildingEntity'\nimport { BuildingSite } from './model/building/BuildingSite'\nimport { EntityType } from './model/EntityType'\nimport { GameSelection } from './model/GameSelection'\nimport { Surface } from './model/map/Surface'\nimport { MaterialEntity } from './model/material/MaterialEntity'\nimport { Bat } from './model/monster/Bat'\nimport { RockMonster } from './model/monster/RockMonster'\nimport { SmallSpider } from './model/monster/SmallSpider'\nimport { Raider } from './model/raider/Raider'\nimport { RaiderTraining } from './model/raider/RaiderTraining'\nimport { updateSafe } from './model/Updateable'\nimport { VehicleEntity } from './model/vehicle/VehicleEntity'\n\nexport class EntityManager {\n\n    selection: GameSelection = new GameSelection()\n    buildings: BuildingEntity[] = []\n    buildingsUndiscovered: BuildingEntity[] = []\n    raiders: Raider[] = []\n    raidersUndiscovered: Raider[] = []\n    raidersInBeam: Raider[] = []\n    materials: MaterialEntity[] = []\n    materialsUndiscovered: MaterialEntity[] = []\n    buildingSites: BuildingSite[] = []\n    spiders: SmallSpider[] = []\n    bats: Bat[] = []\n    rockMonsters: RockMonster[] = []\n    vehicles: VehicleEntity[] = []\n    vehiclesUndiscovered: VehicleEntity[] = []\n\n    constructor() {\n        // event handler must be placed here, because only this class knows the \"actual\" selection instance\n        EventBus.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            if (event.selectPanelType === SelectPanelType.NONE) this.selection.deselectAll()\n        })\n    }\n\n    reset() {\n        this.selection = new GameSelection()\n        this.buildings = []\n        this.buildingsUndiscovered = []\n        this.raiders = []\n        this.raidersUndiscovered = []\n        this.raidersInBeam = []\n        this.materials = []\n        this.materialsUndiscovered = []\n        this.buildingSites = []\n        this.spiders = []\n        this.bats = []\n        this.rockMonsters = []\n        this.vehicles = []\n        this.vehiclesUndiscovered = []\n    }\n\n    start() {\n    }\n\n    update(elapsedMs: number) {\n        this.raiders.forEach((r) => updateSafe(r, elapsedMs))\n        this.raidersInBeam.forEach((r) => updateSafe(r, elapsedMs))\n        this.buildings.forEach((b) => updateSafe(b, elapsedMs))\n        this.raiders.forEach((r) => updateSafe(r, elapsedMs))\n        this.spiders.forEach((s) => updateSafe(s, elapsedMs))\n        this.bats.forEach((b) => updateSafe(b, elapsedMs))\n    }\n\n    stop() {\n        this.buildings.forEach((b) => b.removeFromScene())\n        this.buildingsUndiscovered.forEach((b) => b.removeFromScene())\n        this.raiders.forEach((r) => r.removeFromScene())\n        this.raidersUndiscovered.forEach((r) => r.removeFromScene())\n        this.materials.forEach((m) => m.removeFromScene())\n        this.materialsUndiscovered.forEach((m) => m.removeFromScene())\n        this.spiders.forEach((m) => m.removeFromScene())\n        this.bats.forEach((b) => b.removeFromScene())\n    }\n\n    getBuildingsByType(...buildingTypes: EntityType[]): BuildingEntity[] {\n        return this.buildings.filter(b => b.isUsable() && buildingTypes.some(bt => b.entityType === bt))\n    }\n\n    getClosestBuildingByType(position: Vector3, ...buildingTypes: EntityType[]): BuildingEntity {\n        return EntityManager.getClosestBuilding(this.getBuildingsByType(...buildingTypes), position)\n    }\n\n    getTrainingSites(training: RaiderTraining): BuildingEntity[] {\n        return this.buildings.filter((b) => b.isTrainingSite(training))\n    }\n\n    getClosestTrainingSite(position: Vector3, training: RaiderTraining) {\n        return EntityManager.getClosestBuilding(this.getTrainingSites(training), position)\n    }\n\n    private static getClosestBuilding(buildings: BuildingEntity[], position: Vector3) {\n        let closest = null, minDist = null\n        buildings.forEach((b) => {\n            const bPos = b.sceneEntity.position.clone()\n            const dist = position.distanceToSquared(bPos) // TODO better use pathfinding\n            if (closest === null || dist < minDist) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest // TODO when using path finding, return path instead\n    }\n\n    getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + this.buildings.count((b) => b.isUsable() && b.entityType === EntityType.BARRACKS) * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE\n        const numRaidersUndiscovered = this.raidersUndiscovered.length\n        this.raidersUndiscovered = EntityManager.removeInRect(this.raidersUndiscovered, minX, maxX, minZ, maxZ, (r) => {\n            r.entityMgr.raiders.push(r)\n            EventBus.publishEvent(new RaiderDiscoveredEvent(r.sceneEntity.position.clone()))\n        })\n        if (numRaidersUndiscovered !== this.raidersUndiscovered.length) EventBus.publishEvent(new RaidersChangedEvent(this))\n        this.buildingsUndiscovered = EntityManager.removeInRect(this.buildingsUndiscovered, minX, maxX, minZ, maxZ, (b) => {\n            b.entityMgr.buildings.push(b)\n            EventBus.publishEvent(new BuildingsChangedEvent(b.entityMgr))\n        })\n        this.materialsUndiscovered = EntityManager.removeInRect(this.materialsUndiscovered, minX, maxX, minZ, maxZ, (m) => {\n            m.entityMgr.materials.push(m)\n            EventBus.publishEvent(new JobCreateEvent(m.createCarryJob()))\n        })\n    }\n\n    private static removeInRect<T extends Raider | BuildingEntity | MaterialEntity>(listing: T[], minX: number, maxX: number, minZ: number, maxZ: number, onRemove: (e: T) => any) {\n        return listing.filter((e) => {\n            const pos = e.sceneEntity.position2D.clone()\n            const discovered = pos.x >= minX && pos.x < maxX && pos.y >= minZ && pos.y < maxZ\n            if (discovered) {\n                e.sceneEntity.visible = true\n                onRemove(e)\n            }\n        })\n    }\n\n    placeMaterial(item: MaterialEntity, worldPosition: Vector2) {\n        item.sceneEntity.addToScene(worldPosition, 0)\n        if (item.sceneEntity.visible) {\n            this.materials.push(item)\n            EventBus.publishEvent(new JobCreateEvent(item.createCarryJob()))\n        } else {\n            this.materialsUndiscovered.push(item)\n        }\n        return item\n    }\n\n    getOxygenSum(): number {\n        return this.raiders.map((r) => r.stats.OxygenCoef).reduce((l, r) => l + r, 0) +\n            this.buildings.map((b) => b.isUsable() ? b.stats.OxygenCoef : 0).reduce((l, r) => l + r, 0)\n    }\n\n    hasMaxRaiders(): boolean {\n        return this.raiders.length >= this.getMaxRaiders()\n    }\n\n    findTeleportBuilding(entityType: EntityType): BuildingEntity {\n        return this.buildings.find((b) => b.canTeleportIn(entityType))\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { EventBus } from '../event/EventBus'\nimport { DeselectAll } from '../event/LocalEvents'\nimport { NATIVE_FRAMERATE, NATIVE_UPDATE_INTERVAL, TILESIZE } from '../params'\nimport { AnimationGroup } from './model/anim/AnimationGroup'\nimport { BuildingEntity } from './model/building/BuildingEntity'\nimport { FulfillerEntity } from './model/FulfillerEntity'\n\ntype BeamUpEntity = BuildingEntity | FulfillerEntity\n\nexport class BeamUpAnimator {\n\n    entity: BeamUpEntity\n    counter: number\n\n    constructor(entity: BeamUpEntity) {\n        this.entity = entity\n        this.counter = 6 * TILESIZE\n        EventBus.publishEvent(new DeselectAll())\n        const animGroup = new AnimationGroup('Mini-Figures/Pilot/VLP_TelepUp.lws', this.entity.sceneMgr.listener)\n        animGroup.position.copy(this.entity.sceneEntity.position.clone())\n        animGroup.rotateOnAxis(new Vector3(0, 1, 0), this.entity.sceneEntity.getHeading())\n        this.entity.sceneMgr.scene.add(animGroup)\n        animGroup.startAnimation(() => {\n            this.entity.removeFromScene()\n            this.entity.sceneMgr.scene.remove(animGroup)\n        })\n    }\n\n    update(elapsedMs: number) {\n        if (this.counter > 0) {\n            this.counter--\n            this.entity.sceneEntity.position.y += (TILESIZE / NATIVE_FRAMERATE) / 2 * (elapsedMs / NATIVE_UPDATE_INTERVAL)\n        }\n    }\n\n}\n","import { BarrierActivity } from '../../game/model/activities/BarrierActivity'\nimport { SceneManager } from '../../game/SceneManager'\nimport { AnimatedSceneEntity } from '../AnimatedSceneEntity'\n\nexport class BarrierSceneEntity extends AnimatedSceneEntity {\n\n    constructor(sceneMgr: SceneManager) {\n        super(sceneMgr, 'MiscAnims/Barrier/Barrier.ae')\n        this.changeActivity()\n    }\n\n    getDefaultActivity(): BarrierActivity {\n        return BarrierActivity.Short\n    }\n\n}\n","import { BarrierSceneEntity } from '../../../scene/entities/BarrierSceneEntity'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntityType } from '../EntityType'\nimport { BuildingCarryPathTarget } from '../job/carry/BuildingCarryPathTarget'\nimport { CarryPathTarget } from '../job/carry/CarryPathTarget'\nimport { SiteCarryPathTarget } from '../job/carry/SiteCarryPathTarget'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { BarrierLocation } from './BarrierLocation'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Barrier extends MaterialEntity {\n\n    targets: SiteCarryPathTarget[]\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager, location: BarrierLocation, site: BuildingSite) {\n        super(sceneMgr, entityMgr, EntityType.BARRIER)\n        this.sceneEntity = new BarrierSceneEntity(sceneMgr)\n        this.targets = [new SiteCarryPathTarget(site, location.position, location.heading)]\n    }\n\n    findCarryTargets(): CarryPathTarget[] {\n        if (this.targets.every((t) => t.isInvalid())) {\n            return this.entityMgr.getBuildingsByType(EntityType.TOOLSTATION).map((b) => new BuildingCarryPathTarget(b))\n        } else {\n            return this.targets\n        }\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityConstruction\n    }\n\n}\n","import { SceneManager } from '../../game/SceneManager'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { SceneEntity } from '../SceneEntity'\n\nexport class ElectricFenceSceneEntity extends SceneEntity {\n\n    constructor(sceneMgr: SceneManager) {\n        super(sceneMgr)\n        this.add(ResourceManager.getLwoModel('Buildings/E-Fence/E-Fence4.lwo'))\n    }\n\n}\n","import { ElectricFence } from '../../material/ElectricFence'\nimport { CarryJob } from './CarryJob'\n\nexport class CarryFenceJob extends CarryJob<ElectricFence> {\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.item.sceneEntity.addToScene(null, null)\n        this.item.targetSurface.fence = this.item\n    }\n\n}\n","import { ElectricFenceSceneEntity } from '../../../scene/entities/ElectricFenceSceneEntity'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { BuildingCarryPathTarget } from '../job/carry/BuildingCarryPathTarget'\nimport { CarryFenceJob } from '../job/carry/CarryFenceJob'\nimport { CarryPathTarget } from '../job/carry/CarryPathTarget'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { Surface } from '../map/Surface'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class ElectricFence extends MaterialEntity {\n\n    targetSurface: Surface\n    target: CarryPathTarget[]\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager, targetSurface: Surface) {\n        super(sceneMgr, entityMgr, EntityType.ELECTRIC_FENCE)\n        this.sceneEntity = new ElectricFenceSceneEntity(sceneMgr)\n        this.targetSurface = targetSurface\n        this.target = [new CarryPathTarget(targetSurface.getCenterWorld2D())]\n    }\n\n    findCarryTargets(): CarryPathTarget[] {\n        if (this.target.every((t) => t.isInvalid())) {\n            return this.entityMgr.getBuildingsByType(EntityType.TOOLSTATION).map((b) => new BuildingCarryPathTarget(b))\n        } else {\n            return this.target\n        }\n    }\n\n    createCarryJob(): CarryFenceJob {\n        return new CarryFenceJob(this)\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityConstruction\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\nimport { BuildingEntity } from './BuildingEntity'\n\nexport class BuildingPathTarget extends PathTarget {\n\n    building: BuildingEntity\n\n    constructor(location: Vector2, building: BuildingEntity) {\n        super(location)\n        this.building = building\n    }\n\n    getFocusPoint(): Vector2 {\n        return this.building.primarySurface.getCenterWorld2D()\n    }\n\n    isInvalid(): boolean {\n        return !this.building.isUsable()\n    }\n\n}\n","import { PositionalAudio, Vector2, Vector3 } from 'three'\nimport { BuildingEntityStats } from '../../../cfg/BuildingEntityStats'\nimport { EventBus } from '../../../event/EventBus'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { BuildingsChangedEvent, DeselectAll } from '../../../event/LocalEvents'\nimport { MaterialAmountChanged } from '../../../event/WorldEvents'\nimport { TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { AnimatedSceneEntity } from '../../../scene/AnimatedSceneEntity'\nimport { BeamUpAnimator } from '../../BeamUpAnimator'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { BuildingActivity } from '../activities/BuildingActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { GetToolPathTarget } from '../job/raider/GetToolPathTarget'\nimport { Surface } from '../map/Surface'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { Barrier } from '../material/Barrier'\nimport { BarrierLocation } from '../material/BarrierLocation'\nimport { Crystal } from '../material/Crystal'\nimport { ElectricFence } from '../material/ElectricFence'\nimport { Ore } from '../material/Ore'\nimport { RaiderTraining, RaiderTrainingSites, RaiderTrainingStatsProperty } from '../raider/RaiderTraining'\nimport { Selectable } from '../Selectable'\nimport { BuildingPathTarget } from './BuildingPathTarget'\nimport { BuildingSite } from './BuildingSite'\nimport { Teleport } from './Teleport'\n\nexport abstract class BuildingEntity implements Selectable {\n\n    blocksPathSurface: boolean = true\n    secondaryBuildingPart: Vector2 = null\n    primaryPowerPath: Vector2 = new Vector2(0, 1)\n    secondaryPowerPath: Vector2 = null\n    waterPathSurface: Vector2 = null\n    teleport: Teleport = null\n\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    entityType: EntityType = null\n    sceneEntity: AnimatedSceneEntity\n    level: number = 0\n    selected: boolean\n    powerSwitch: boolean = true\n    primarySurface: Surface = null\n    secondarySurface: Surface = null\n    primaryPathSurface: Surface = null\n    secondaryPathSurface: Surface = null\n    upgradeCostOre: number = 0\n    upgradeCostBrick: number = 0\n    crystalsInUse: number = 0\n    inBeam: boolean = false\n    beamUpAnimator: BeamUpAnimator = null\n    pathTarget: GetToolPathTarget = null\n    engineSound: PositionalAudio\n    surfaces: Surface[] = []\n\n    protected constructor(sceneMgr: SceneManager, entityMgr: EntityManager, entityType: EntityType, aeFilename: string) {\n        this.sceneMgr = sceneMgr\n        this.entityMgr = entityMgr\n        this.entityType = entityType\n        this.sceneEntity = new AnimatedSceneEntity(this.sceneMgr, aeFilename)\n        this.sceneEntity.flipXAxis()\n        this.upgradeCostOre = ResourceManager.cfg('Main', 'BuildingUpgradeCostOre')\n        this.upgradeCostBrick = ResourceManager.cfg('Main', 'BuildingUpgradeCostStuds')\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, () => {\n            this.updatePowerState()\n        })\n    }\n\n    abstract get stats(): BuildingEntityStats\n\n    isSelectable(): boolean {\n        return !this.selected && !this.inBeam\n    }\n\n    isInSelection(): boolean {\n        return this.isSelectable() || this.selected\n    }\n\n    select(): boolean {\n        if (!this.isSelectable()) return false\n        this.sceneEntity.selectionFrame.visible = true\n        this.selected = true\n        return true\n    }\n\n    deselect() {\n        this.sceneEntity.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    getDropPosition2D(): Vector2 {\n        if (this.sceneEntity.animation?.getToolJoint) {\n            const worldPos = new Vector3()\n            this.sceneEntity.animation.getToolJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else if (this.sceneEntity.animation?.depositJoint) {\n            const worldPos = new Vector3()\n            this.sceneEntity.animation.depositJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else {\n            return this.sceneEntity.position2D.clone()\n        }\n    }\n\n    isUsable(): boolean {\n        return !this.inBeam && this.powerSwitch && (this.isPowered() || this.stats.PowerBuilding) && this.sceneEntity.visible\n    }\n\n    isPowered(): boolean {\n        return this.stats.SelfPowered || this.crystalsInUse > 0\n    }\n\n    hasMaxLevel(): boolean {\n        return this.level >= this.stats.Levels - 1\n    }\n\n    upgrade() {\n        if (!this.canUpgrade()) return\n        if (GameState.numBrick >= this.upgradeCostBrick) {\n            GameState.numBrick -= this.upgradeCostBrick\n        } else {\n            GameState.numOre -= this.upgradeCostOre\n        }\n        EventBus.publishEvent(new MaterialAmountChanged())\n        this.level++\n        EventBus.publishEvent(new DeselectAll())\n        EventBus.publishEvent(new BuildingsChangedEvent(this.entityMgr))\n        // TODO add sparkly upgrade animation\n    }\n\n    setLevel(level: number) {\n        this.level = level\n        EventBus.publishEvent(new BuildingsChangedEvent(this.entityMgr))\n    }\n\n    getDefaultActivity(): BuildingActivity {\n        return !this.isPowered() ? BuildingActivity.Unpowered : AnimEntityActivity.Stand\n    }\n\n    beamUp() {\n        this.inBeam = true\n        this.updatePowerState()\n        for (let c = 0; c < this.stats.CostOre; c++) {\n            this.entityMgr.placeMaterial(new Ore(this.sceneMgr, this.entityMgr), this.primarySurface.getRandomPosition())\n        }\n        for (let c = 0; c < this.stats.CostCrystal; c++) {\n            this.entityMgr.placeMaterial(new Crystal(this.sceneMgr, this.entityMgr), this.primarySurface.getRandomPosition())\n        }\n        this.surfaces.forEach((s) => s.setBuilding(null))\n        this.pathTarget = null\n        this.beamUpAnimator = new BeamUpAnimator(this)\n        EventBus.publishEvent(new BuildingsChangedEvent(this.entityMgr))\n    }\n\n    removeFromScene() {\n        this.entityMgr.buildings.remove(this)\n    }\n\n    canUpgrade() {\n        return !this.hasMaxLevel() && (GameState.numOre >= this.upgradeCostOre || GameState.numBrick >= this.upgradeCostBrick)\n    }\n\n    spawnMaterials(type: EntityType, quantity: number) {\n        const material = []\n        if (type === EntityType.CRYSTAL) {\n            while (GameState.numCrystal > 0 && material.length < quantity) {\n                GameState.numCrystal--\n                material.push(new Crystal(this.sceneMgr, this.entityMgr))\n            }\n        } else if (type === EntityType.ORE) {\n            while (GameState.numOre > 0 && material.length < quantity) {\n                GameState.numOre--\n                material.push(new Ore(this.sceneMgr, this.entityMgr))\n            }\n        } else {\n            console.error('Material drop not implemented for: ' + type)\n        }\n        if (material.length > 0) EventBus.publishEvent(new MaterialAmountChanged())\n        material.forEach((m) => this.entityMgr.placeMaterial(m, this.getDropPosition2D()))\n    }\n\n    spawnBarriers(barrierLocations: BarrierLocation[], site: BuildingSite) {\n        barrierLocations.map((l) => new Barrier(this.sceneMgr, this.entityMgr, l, site)).forEach((b) => this.entityMgr.placeMaterial(b, this.getDropPosition2D()))\n    }\n\n    spawnFence(targetSurface: Surface) {\n        this.entityMgr.placeMaterial(new ElectricFence(this.sceneMgr, this.entityMgr, targetSurface), this.getDropPosition2D())\n    }\n\n    setPowerSwitch(state: boolean) {\n        this.powerSwitch = state\n        this.updatePowerState()\n    }\n\n    updatePowerState() {\n        if (this.powerSwitch && !this.inBeam) {\n            this.turnPowerOn()\n        } else {\n            this.turnPowerOff()\n        }\n        if (this.teleport) this.teleport.powered = this.isPowered()\n    }\n\n    turnPowerOn() {\n        if (this.crystalsInUse > 0 || this.stats.SelfPowered || GameState.usedCrystals >= GameState.numCrystal || (this.entityType !== EntityType.POWER_STATION && !this.surfaces.some((s) => s.neighbors.some((n) => n.hasPower)))) return\n        this.crystalsInUse = 1\n        GameState.usedCrystals += this.crystalsInUse\n        this.surfaces.forEach((s) => s.setHasPower(true, true))\n        this.sceneEntity.changeActivity()\n        EventBus.publishEvent(new BuildingsChangedEvent(this.entityMgr))\n        if (this.stats.EngineSound) this.engineSound = this.sceneEntity.playPositionalAudio(this.stats.EngineSound, true)\n    }\n\n    turnPowerOff() {\n        if (this.crystalsInUse < 1) return\n        GameState.usedCrystals -= this.crystalsInUse\n        this.crystalsInUse = 0\n        this.surfaces.forEach((s) => s.setHasPower(false, false))\n        this.sceneEntity.changeActivity()\n        EventBus.publishEvent(new BuildingsChangedEvent(this.entityMgr))\n        this.engineSound?.stop()\n        this.engineSound = null\n    }\n\n    placeDown(worldPosition: Vector2, radHeading: number, disableTeleportIn: boolean) {\n        this.primarySurface = this.sceneMgr.terrain.getSurfaceFromWorld2D(worldPosition)\n        this.primarySurface.setBuilding(this)\n        this.surfaces.push(this.primarySurface)\n        if (this.secondaryBuildingPart) {\n            const secondaryOffset = new Vector2(TILESIZE * this.secondaryBuildingPart.x, TILESIZE * this.secondaryBuildingPart.y)\n                .rotateAround(new Vector2(0, 0), -radHeading).add(worldPosition)\n            this.secondarySurface = this.sceneMgr.terrain.getSurfaceFromWorld2D(secondaryOffset)\n            this.secondarySurface.setBuilding(this)\n            this.surfaces.push(this.secondarySurface)\n        }\n        if (this.primaryPowerPath) {\n            const pathOffset = new Vector2(this.primaryPowerPath.x, this.primaryPowerPath.y).multiplyScalar(TILESIZE)\n                .rotateAround(new Vector2(0, 0), -radHeading).add(worldPosition)\n            this.primaryPathSurface = this.sceneMgr.terrain.getSurfaceFromWorld2D(pathOffset)\n            this.primaryPathSurface.setSurfaceType(SurfaceType.POWER_PATH_BUILDING)\n            this.surfaces.push(this.primaryPathSurface)\n        }\n        if (this.secondaryPowerPath) {\n            const pathOffset = new Vector2(this.secondaryPowerPath.x, this.secondaryPowerPath.y).multiplyScalar(TILESIZE)\n                .rotateAround(new Vector2(0, 0), -radHeading).add(worldPosition)\n            this.secondaryPathSurface = this.sceneMgr.terrain.getSurfaceFromWorld2D(pathOffset)\n            this.secondaryPathSurface.setSurfaceType(SurfaceType.POWER_PATH_BUILDING)\n            this.surfaces.push(this.secondaryPathSurface)\n        }\n        this.addToScene(worldPosition, radHeading)\n        this.sceneEntity.createPickSphere(this.stats.PickSphere, this, this.stats.PickSphere / 4)\n        if (this.sceneEntity.visible) {\n            this.entityMgr.buildings.push(this)\n        } else {\n            this.entityMgr.buildingsUndiscovered.push(this)\n        }\n        if (this.sceneEntity.visible && !disableTeleportIn) {\n            this.inBeam = true\n            this.sceneEntity.changeActivity(BuildingActivity.Teleport, () => {\n                this.inBeam = false\n                this.onPlaceDown()\n            })\n        } else {\n            this.onPlaceDown()\n        }\n        this.sceneMgr.terrain.resetGraphWalk()\n    }\n\n    private onPlaceDown() {\n        this.sceneEntity.changeActivity()\n        this.updatePowerState()\n        EventBus.publishEvent(new BuildingsChangedEvent(this.entityMgr))\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n    getTrainingTargets() {\n        return [new Vector2(-1, 0), new Vector2(0, 1), new Vector2(1, 0), new Vector2(0, -1)]\n            .map((v) => {\n                const location = v.multiplyScalar(TILESIZE / 2).add(this.primarySurface.getCenterWorld2D())\n                return new BuildingPathTarget(location, this)\n            })\n    }\n\n    addToScene(worldPosition: Vector2, radHeading: number) {\n        this.sceneEntity.addToScene(worldPosition, radHeading)\n        this.pathTarget = new GetToolPathTarget(this)\n    }\n\n    getPathTarget(): GetToolPathTarget {\n        return this.pathTarget\n    }\n\n    isTrainingSite(training: RaiderTraining): boolean {\n        return this.entityType === RaiderTrainingSites[training] && this.isUsable() && this.stats[RaiderTrainingStatsProperty[training]][this.level]\n    }\n\n    canTeleportIn(entityType: EntityType): boolean {\n        return this.teleport?.canTeleportIn(entityType)\n    }\n\n    update(elapsedMs: number) {\n        this.sceneEntity.update(elapsedMs)\n        this.beamUpAnimator?.update(elapsedMs)\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Barracks extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.BARRACKS, 'Buildings/Barracks/Barracks.ae')\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Barracks\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Docks extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.DOCKS, 'Buildings/Docks/Docks.ae')\n        this.primaryPowerPath = new Vector2(0, -1)\n        this.waterPathSurface = new Vector2(0, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Docks\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Geodome extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.GEODOME, 'Buildings/Geo-dome/Geo-dome.ae')\n        this.primaryPowerPath = null\n        this.secondaryBuildingPart = new Vector2(0, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Geodome\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { BuildingActivity } from '../../activities/BuildingActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class GunStation extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.GUNSTATION, 'Buildings/gunstation/gunstation.ae')\n        this.primaryPowerPath = null\n    }\n\n    getDefaultActivity(): BuildingActivity {\n        return BuildingActivity.Stand\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.GunStation\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class OreRefinery extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.ORE_REFINERY, 'Buildings/OreRefinery/OreRefinery.ae')\n        this.primaryPowerPath = new Vector2(0, 2)\n        this.secondaryBuildingPart = new Vector2(0, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.OreRefinery\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Deposit\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class PowerStation extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.POWER_STATION, 'Buildings/Powerstation/Powerstation.ae')\n        this.secondaryBuildingPart = new Vector2(-1, 0)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Powerstation\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Deposit\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { Sample } from '../../../audio/Sample'\nimport { EventBus } from '../../../event/EventBus'\nimport { RaidersChangedEvent } from '../../../event/LocalEvents'\nimport { TILESIZE } from '../../../params'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { EntityType } from '../EntityType'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { MoveJob } from '../job/raider/MoveJob'\nimport { BuildingEntity } from './BuildingEntity'\n\nexport abstract class Teleport {\n\n    building: BuildingEntity // TODO instead hook in setter for position and heading\n    operating: boolean\n    powered: boolean\n\n    constructor(building: BuildingEntity) {\n        this.building = building\n    }\n\n    canTeleportIn(entityType: EntityType): boolean {\n        return this.powered && !this.operating\n    }\n\n    teleportIn<T extends FulfillerEntity>(entity: T, listing: T[], beamListing: T[]) {\n        this.operating = true\n        const heading = this.building.sceneEntity.getHeading()\n        entity.sceneEntity.addToScene(new Vector2(0, TILESIZE / 2).rotateAround(new Vector2(0, 0), -heading).add(this.building.sceneEntity.position2D.clone()), heading)\n        entity.sceneEntity.playPositionalAudio(Sample[Sample.SND_teleport], false)\n        entity.sceneEntity.changeActivity(RaiderActivity.TeleportIn, () => {\n            this.operating = false\n            entity.sceneEntity.changeActivity()\n            entity.sceneEntity.createPickSphere(entity.stats.PickSphere, entity)\n            const walkOutPos = this.building.primaryPathSurface.getRandomPosition()\n            entity.setJob(new MoveJob(walkOutPos))\n            beamListing.remove(entity)\n            listing.push(entity)\n            EventBus.publishEvent(new RaidersChangedEvent(entity.entityMgr))\n        })\n    }\n\n}\n\nexport class RaiderOnlyTeleport extends Teleport {\n\n    canTeleportIn(entityType: EntityType): boolean {\n        return super.canTeleportIn(entityType) && entityType === EntityType.PILOT\n    }\n\n}\n\nexport class SmallTeleport extends Teleport {\n\n    canTeleportIn(entityType: EntityType): boolean {\n        return super.canTeleportIn(entityType) && SmallTeleport.isSmall(entityType)\n    }\n\n    private static isSmall(entityType: EntityType) { // TODO evaluate stats UseSmallTeleporter\n        return entityType === EntityType.PILOT ||\n            entityType === EntityType.HOVERBOARD ||\n            entityType === EntityType.SMALL_TRUCK ||\n            entityType === EntityType.SMALL_CAT ||\n            entityType === EntityType.SMALL_DIGGER ||\n            entityType === EntityType.SMALL_MLP ||\n            entityType === EntityType.SMALL_HELI\n    }\n\n}\n\nexport class LargeTeleport extends Teleport {\n\n    canTeleportIn(entityType: EntityType): boolean {\n        return super.canTeleportIn(entityType) && LargeTeleport.isLarge(entityType)\n    }\n\n    private static isLarge(entityType: EntityType) { // TODO evaluate stats UseLargeTeleporter\n        return entityType === EntityType.BULLDOZER ||\n            entityType === EntityType.WALKER_DIGGER ||\n            entityType === EntityType.LARGE_MLP ||\n            entityType === EntityType.LARGE_DIGGER ||\n            entityType === EntityType.LARGE_CAT\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { LargeTeleport } from '../Teleport'\n\nexport class TeleportBig extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.TELEPORT_BIG, 'Buildings/BIGTeleport/BIGTeleport.ae')\n        this.secondaryBuildingPart = new Vector2(0, 1)\n        this.primaryPowerPath = new Vector2(-1, 0)\n        this.secondaryPowerPath = new Vector2(-1, 1)\n        this.teleport = new LargeTeleport(this)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.TeleportBIG\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { SmallTeleport } from '../Teleport'\n\nexport class TeleportPad extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.TELEPORT_PAD, 'Buildings/Teleports/Teleports.ae')\n        this.teleport = new SmallTeleport(this)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.TeleportPad\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { RaiderOnlyTeleport } from '../Teleport'\n\nexport class Toolstation extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.TOOLSTATION, 'Buildings/Toolstation/Toolstation.ae')\n        this.blocksPathSurface = false\n        this.teleport = new RaiderOnlyTeleport(this)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Toolstation\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Upgrade extends BuildingEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.UPGRADE, null)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Upgrade\n    }\n\n}\n","import { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { BuildingEntity } from './BuildingEntity'\nimport { Barracks } from './entities/Barracks'\nimport { Docks } from './entities/Docks'\nimport { Geodome } from './entities/Geodome'\nimport { GunStation } from './entities/GunStation'\nimport { OreRefinery } from './entities/OreRefinery'\nimport { PowerStation } from './entities/PowerStation'\nimport { TeleportBig } from './entities/TeleportBig'\nimport { TeleportPad } from './entities/TeleportPad'\nimport { Toolstation } from './entities/Toolstation'\nimport { Upgrade } from './entities/Upgrade'\n\nexport class BuildingFactory {\n\n    static createBuildingFromType(entityType: EntityType, sceneMgr: SceneManager, entityMgr: EntityManager): BuildingEntity {\n        switch (entityType) {\n            case EntityType.TOOLSTATION:\n                return new Toolstation(sceneMgr, entityMgr)\n            case EntityType.TELEPORT_PAD:\n                return new TeleportPad(sceneMgr, entityMgr)\n            case EntityType.DOCKS:\n                return new Docks(sceneMgr, entityMgr)\n            case EntityType.POWER_STATION:\n                return new PowerStation(sceneMgr, entityMgr)\n            case EntityType.BARRACKS:\n                return new Barracks(sceneMgr, entityMgr)\n            case EntityType.UPGRADE:\n                return new Upgrade(sceneMgr, entityMgr)\n            case EntityType.GEODOME:\n                return new Geodome(sceneMgr, entityMgr)\n            case EntityType.ORE_REFINERY:\n                return new OreRefinery(sceneMgr, entityMgr)\n            case EntityType.GUNSTATION:\n                return new GunStation(sceneMgr, entityMgr)\n            case EntityType.TELEPORT_BIG:\n                return new TeleportBig(sceneMgr, entityMgr)\n            default:\n                throw 'Unexpected building type: ' + EntityType[entityType]\n        }\n    }\n\n}\n","import { EventBus } from '../../../event/EventBus'\nimport { DeselectAll } from '../../../event/LocalEvents'\nimport { EntityManager } from '../../EntityManager'\nimport { EntityType } from '../EntityType'\nimport { Surface } from '../map/Surface'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { BuildingSite } from './BuildingSite'\n\nexport class PowerPathBuildingSite extends BuildingSite {\n\n    constructor(entityMgr: EntityManager, surface: Surface) {\n        super(entityMgr, surface, null, surface, null, null)\n        surface.setSurfaceType(SurfaceType.POWER_PATH_BUILDING_SITE)\n        entityMgr.getClosestBuildingByType(surface.getCenterWorld(), EntityType.TOOLSTATION)?.spawnMaterials(EntityType.ORE, 2)\n        this.neededByType.set(EntityType.ORE, 2)\n        entityMgr.buildingSites.push(this)\n        EventBus.publishEvent(new DeselectAll())\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderJob } from './RaiderJob'\n\nexport class EatJob extends RaiderJob {\n\n    target: PathTarget[] = []\n\n    getWorkplaces(): PathTarget[] {\n        if (this.target.length < 1) this.target = [new PathTarget(this.raider.sceneEntity.position2D.clone())]\n        return this.target\n    }\n\n    onJobComplete() {\n        this.raider.hungerLevel = 1\n        super.onJobComplete()\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Eat\n    }\n\n}\n","import { EventBus } from '../../../../event/EventBus'\nimport { RaidersChangedEvent } from '../../../../event/LocalEvents'\nimport { EntityManager } from '../../../EntityManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { BuildingEntity } from '../../building/BuildingEntity'\nimport { FulfillerEntity } from '../../FulfillerEntity'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTraining } from '../../raider/RaiderTraining'\nimport { RaiderJob } from './RaiderJob'\n\nexport class TrainRaiderJob extends RaiderJob {\n\n    entityMgr: EntityManager\n    training: RaiderTraining\n    building: BuildingEntity\n    workplaces: PathTarget[]\n\n    constructor(entityMgr: EntityManager, training: RaiderTraining, building: BuildingEntity) {\n        super()\n        this.entityMgr = entityMgr\n        this.training = training\n        this.building = building\n        this.workplaces = this.getWorkplaces()\n    }\n\n    getWorkplaces(): PathTarget[] {\n        if (!this.building?.isUsable()) {\n            this.workplaces = []\n            this.entityMgr.getTrainingSites(this.training).map((s) => s.getTrainingTargets().forEach((t) => this.workplaces.push(t)))\n        }\n        return this.workplaces\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.raider.addTraining(this.training)\n        EventBus.publishEvent(new RaidersChangedEvent(this.entityMgr, this.training))\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Train\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        return 10000 // XXX adjust training time\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { BuildingEntity } from '../../building/BuildingEntity'\nimport { FulfillerEntity } from '../../FulfillerEntity'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderJob } from './RaiderJob'\n\nexport class UpgradeRaiderJob extends RaiderJob {\n\n    building: BuildingEntity\n    workplaces: PathTarget[]\n\n    constructor(building: BuildingEntity) {\n        super()\n        this.building = building\n        this.workplaces = building.getTrainingTargets()\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.building.isUsable() ? this.workplaces : []\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        if (this.raider.level < this.raider.stats.Levels) this.raider.level++\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Train\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        return 30000 // XXX adjust upgrade time\n    }\n\n}\n","import { PathTarget } from '../PathTarget'\nimport { Raider } from '../raider/Raider'\nimport { RaiderTraining } from '../raider/RaiderTraining'\nimport { VehicleEntity } from '../vehicle/VehicleEntity'\nimport { JobState } from './JobState'\nimport { PriorityIdentifier } from './PriorityIdentifier'\nimport { ShareableJob } from './ShareableJob'\n\nexport class VehicleCallManJob extends ShareableJob {\n\n    // TODO vehicles: add range check, which places raider in vehicle when nearby\n\n    vehicle: VehicleEntity\n    workplaces: PathTarget[]\n\n    constructor(vehicle: VehicleEntity) {\n        super()\n        this.vehicle = vehicle\n        this.vehicle.callManJob = this\n        this.workplaces = [new PathTarget(this.vehicle.sceneEntity.position2D.clone())]\n    }\n\n    getWorkplaces(): PathTarget[] {\n        if (this.vehicle.inBeam) {\n            this.jobState = JobState.INCOMPLETE\n            return []\n        } else if (this.vehicle.driver) {\n            this.jobState = JobState.COMPLETE\n            return []\n        }\n        return this.workplaces\n    }\n\n    onJobComplete() {\n        this.vehicle.addDriver(this.fulfiller[0] as Raider) // TODO vehicles: this should only consider the one near the vehicle\n        this.vehicle.callManJob = null\n        super.onJobComplete()\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return this.vehicle.getRequiredTraining()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityGetIn\n    }\n\n}\n","import { AnimEntityActivity } from '../activities/AnimEntityActivity'\n\nexport class VehicleActivity extends AnimEntityActivity {\n\n    static Route = new AnimEntityActivity('Activity_Route')\n    static TeleportIn = new AnimEntityActivity('Activity_TeleportIN')\n\n}\n","import { Vector2 } from 'three'\nimport { BaseActivity } from '../../game/model/activities/BaseActivity'\nimport { RaiderActivity } from '../../game/model/activities/RaiderActivity'\nimport { AnimatedSceneEntity } from '../AnimatedSceneEntity'\nimport { SceneEntity } from '../SceneEntity'\n\nexport class FulfillerSceneEntity extends AnimatedSceneEntity {\n\n    carriedEntity: SceneEntity\n\n    pickupEntity(entity: SceneEntity) {\n        if (this.carriedEntity === entity) return\n        this.dropEntity()\n        this.carriedEntity = entity;\n        (this.animation?.carryJoint || this).add(this.carriedEntity.group)\n        this.carriedEntity.position.set(0, 0, 0)\n    }\n\n    dropEntity() {\n        if (!this.carriedEntity) return\n        const position = this.position.clone()\n        if (this.animation?.carryJoint) {\n            this.animation.carryJoint.remove(this.carriedEntity.group)\n            this.animation.carryJoint.getWorldPosition(position)\n        }\n        this.carriedEntity.addToScene(new Vector2(position.x, position.z), null)\n        this.carriedEntity = null\n    }\n\n    getDefaultActivity(): BaseActivity {\n        return this.carriedEntity ? RaiderActivity.CarryStand : super.getDefaultActivity()\n    }\n\n}\n","import { Vector3 } from 'three'\n\nexport class EntityStep {\n\n    vec: Vector3 = null\n    targetReached: boolean = false\n\n    constructor(vec: Vector3) {\n        this.vec = vec\n    }\n\n}\n","import { NATIVE_UPDATE_INTERVAL } from '../../params'\nimport { AnimatedSceneEntity } from '../../scene/AnimatedSceneEntity'\nimport { EntityManager } from '../EntityManager'\nimport { SceneManager } from '../SceneManager'\nimport { AnimEntityActivity } from './activities/AnimEntityActivity'\nimport { EntityStep } from './EntityStep'\nimport { EntityType } from './EntityType'\nimport { TerrainPath } from './map/TerrainPath'\nimport { MoveState } from './MoveState'\nimport { PathTarget } from './PathTarget'\n\nexport abstract class MovableEntity {\n\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    entityType: EntityType = null\n    currentPath: TerrainPath = null\n\n    protected constructor(sceneMgr: SceneManager, entityMgr: EntityManager, entityType: EntityType) {\n        this.sceneMgr = sceneMgr\n        this.entityMgr = entityMgr\n        this.entityType = entityType\n    }\n\n    abstract get sceneEntity(): AnimatedSceneEntity\n\n    moveToClosestTarget(target: PathTarget[], elapsedMs: number): MoveState {\n        if (!target || target.length < 1) return MoveState.TARGET_UNREACHABLE\n        if (!this.currentPath || !target.some((t) => t.targetLocation.equals(this.currentPath.target.targetLocation))) {\n            const paths = target.map((t) => this.findPathToTarget(t)).filter((p) => !!p)\n                .sort((l, r) => l.lengthSq - r.lengthSq)\n            this.currentPath = paths.length > 0 ? paths[0] : null\n            if (!this.currentPath) return MoveState.TARGET_UNREACHABLE\n        }\n        const step = this.determineStep(elapsedMs)\n        if (step.targetReached) {\n            this.sceneEntity.headTowards(this.currentPath.target.getFocusPoint())\n            return MoveState.TARGET_REACHED\n        } else {\n            this.sceneEntity.headTowards(this.currentPath.firstLocation)\n            this.sceneEntity.position.add(step.vec)\n            this.sceneEntity.changeActivity(this.getRouteActivity()) // only change when actually moving\n            return MoveState.MOVED\n        }\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return new TerrainPath(target, target.targetLocation)\n    }\n\n    private determineStep(elapsedMs: number): EntityStep {\n        const targetWorld = this.sceneMgr.getFloorPosition(this.currentPath.firstLocation)\n        targetWorld.y += this.sceneEntity.floorOffset\n        const step = new EntityStep(targetWorld.sub(this.sceneEntity.position))\n        const stepLengthSq = step.vec.lengthSq()\n        const entitySpeed = this.getSpeed() * elapsedMs / NATIVE_UPDATE_INTERVAL // TODO use average speed between current and target position\n        const entitySpeedSq = entitySpeed * entitySpeed\n        if (this.currentPath.locations.length > 1) {\n            if (stepLengthSq <= entitySpeedSq) {\n                this.currentPath.locations.shift()\n                return this.determineStep(elapsedMs)\n            }\n        } else if (stepLengthSq <= entitySpeedSq + this.currentPath.target.radiusSq) {\n            step.targetReached = true\n        }\n        step.vec.clampLength(0, entitySpeed)\n        return step\n    }\n\n    abstract getRouteActivity(): AnimEntityActivity\n\n    getSpeed(): number {\n        return this.sceneEntity.animation?.transcoef || 1\n    }\n\n}\n","import { PositionalAudio } from 'three'\nimport { Sample } from '../../audio/Sample'\nimport { FulfillerSceneEntity } from '../../scene/entities/FulfillerSceneEntity'\nimport { BeamUpAnimator } from '../BeamUpAnimator'\nimport { EntityManager } from '../EntityManager'\nimport { SceneManager } from '../SceneManager'\nimport { RaiderActivity } from './activities/RaiderActivity'\nimport { EntityType } from './EntityType'\nimport { Job } from './job/Job'\nimport { JobState } from './job/JobState'\nimport { Surface } from './map/Surface'\nimport { MaterialEntity } from './material/MaterialEntity'\nimport { MovableEntity } from './MovableEntity'\nimport { MoveState } from './MoveState'\nimport { PathTarget } from './PathTarget'\nimport { Selectable } from './Selectable'\n\nexport abstract class FulfillerEntity extends MovableEntity implements Selectable {\n\n    sceneEntity: FulfillerSceneEntity\n    level: number = 0\n    selected: boolean\n    job: Job = null\n    followUpJob: Job = null\n    carries: MaterialEntity = null\n    inBeam: boolean = false\n    beamUpAnimator: BeamUpAnimator = null\n    workAudio: PositionalAudio\n\n    protected constructor(sceneMgr: SceneManager, entityMgr: EntityManager, entityType: EntityType) {\n        super(sceneMgr, entityMgr, entityType)\n    }\n\n    abstract get stats()\n\n    abstract isPrepared(job: Job): boolean\n\n    pickupItem(item: MaterialEntity) {\n        this.carries = item\n        this.sceneEntity.pickupEntity(item.sceneEntity)\n    }\n\n    dropItem() {\n        if (!this.carries) return\n        this.sceneEntity.dropEntity()\n        this.carries = null\n    }\n\n    setJob(job: Job, followUpJob: Job = null) {\n        if (this.job !== job) this.stopJob()\n        this.job = job\n        if (this.job) this.job.assign(this)\n        this.followUpJob = followUpJob\n        if (this.followUpJob) this.followUpJob.assign(this)\n    }\n\n    stopJob() {\n        this.workAudio?.stop()\n        this.workAudio = null\n        this.dropItem()\n        if (!this.job) return\n        this.job.unAssign(this)\n        if (this.followUpJob) this.followUpJob.unAssign(this)\n        this.job = null\n        this.followUpJob = null\n        this.sceneEntity.changeActivity()\n    }\n\n    deselect() {\n        this.sceneEntity.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    isSelectable(): boolean {\n        return !this.selected && !this.inBeam\n    }\n\n    isInSelection(): boolean {\n        return this.isSelectable() || this.selected\n    }\n\n    select(): boolean {\n        if (!this.isSelectable()) return false\n        this.sceneEntity.selectionFrame.visible = true\n        this.selected = true\n        this.sceneEntity.changeActivity()\n        return true\n    }\n\n    removeFromScene() {\n        this.sceneEntity.removeFromScene()\n    }\n\n    beamUp() {\n        this.stopJob()\n        this.inBeam = true\n        this.beamUpAnimator = new BeamUpAnimator(this)\n    }\n\n    moveToClosestTarget(target: PathTarget[], elapsedMs: number): MoveState {\n        const result = super.moveToClosestTarget(target, elapsedMs)\n        this.job.setActualWorkplace(this.currentPath?.target)\n        if (result === MoveState.TARGET_UNREACHABLE) {\n            console.log('Entity could not move to job target, stopping job')\n            this.stopJob()\n        }\n        return result\n    }\n\n    update(elapsedMs: number) {\n        this.work(elapsedMs)\n        this.sceneEntity.update(elapsedMs)\n        this.beamUpAnimator?.update(elapsedMs)\n    }\n\n    work(elapsedMs: number) {\n        if (!this.job || this.selected || this.inBeam) return\n        if (this.job.jobState !== JobState.INCOMPLETE) {\n            this.stopJob()\n        } else {\n            const carryItem = this.job.getCarryItem()\n            if (carryItem && this.carries !== carryItem) {\n                this.dropItem()\n                if (this.moveToClosestTarget(carryItem.getPositionAsPathTargets(), elapsedMs)) {\n                    this.sceneEntity.changeActivity(RaiderActivity.Collect, () => {\n                        this.pickupItem(carryItem)\n                    })\n                }\n            } else if (this.moveToClosestTarget(this.job.getWorkplaces(), elapsedMs) === MoveState.TARGET_REACHED) {\n                if (this.job.isReadyToComplete()) {\n                    const workActivity = this.job.getWorkActivity() || this.sceneEntity.getDefaultActivity()\n                    if (!this.workAudio && workActivity === RaiderActivity.Drill) { // TODO implement work audio\n                        this.workAudio = this.sceneEntity.playPositionalAudio(Sample[Sample.SFX_Drill], true)\n                    }\n                    this.sceneEntity.changeActivity(workActivity, () => {\n                        this.completeJob()\n                    }, this.job.getWorkDuration(this))\n                } else {\n                    this.sceneEntity.changeActivity()\n                }\n            }\n        }\n    }\n\n    private completeJob() {\n        this.workAudio?.stop()\n        this.workAudio = null\n        this.job?.onJobComplete()\n        this.sceneEntity.changeActivity()\n        if (this.job?.jobState === JobState.INCOMPLETE) return\n        if (this.job) this.job.unAssign(this)\n        this.job = this.followUpJob\n        this.followUpJob = null\n    }\n\n    canDrill(surface: Surface): boolean {\n        return (this.stats[surface.surfaceType.statsDrillName]?.[this.level] || 0) > 0\n    }\n\n}\n","import { PositionalAudio } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { SelectionChanged, VehiclesChangedEvent } from '../../../event/LocalEvents'\nimport { FulfillerSceneEntity } from '../../../scene/entities/FulfillerSceneEntity'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { EntityType } from '../EntityType'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { Job } from '../job/Job'\nimport { VehicleCallManJob } from '../job/VehicleCallManJob'\nimport { TerrainPath } from '../map/TerrainPath'\nimport { Crystal } from '../material/Crystal'\nimport { Ore } from '../material/Ore'\nimport { PathTarget } from '../PathTarget'\nimport { Raider } from '../raider/Raider'\nimport { RaiderTraining } from '../raider/RaiderTraining'\nimport { VehicleActivity } from './VehicleActivity'\n\nexport abstract class VehicleEntity extends FulfillerEntity {\n\n    driver: Raider = null\n    callManJob: VehicleCallManJob = null\n    engineSound: PositionalAudio\n\n    protected constructor(sceneMgr: SceneManager, entityMgr: EntityManager, entityType: EntityType, aeFilename: string) {\n        super(sceneMgr, entityMgr, entityType)\n        this.sceneEntity = new FulfillerSceneEntity(sceneMgr, aeFilename)\n        this.sceneEntity.flipXAxis()\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.sceneMgr.terrain.findDrivePath(this.sceneEntity.position2D.clone(), target)\n    }\n\n    beamUp() {\n        this.dropDriver()\n        super.beamUp()\n        const surface = this.sceneEntity.surfaces[0]\n        for (let c = 0; c < this.stats.CostOre; c++) {\n            this.entityMgr.placeMaterial(new Ore(this.sceneMgr, this.entityMgr), surface.getRandomPosition())\n        }\n        for (let c = 0; c < this.stats.CostCrystal; c++) {\n            this.entityMgr.placeMaterial(new Crystal(this.sceneMgr, this.entityMgr), surface.getRandomPosition())\n        }\n        EventBus.publishEvent(new VehiclesChangedEvent())\n    }\n\n    setJob(job: Job, followUpJob: Job = null) {\n        if (!this.driver) return\n        super.setJob(job, followUpJob)\n    }\n\n    addDriver(driver: Raider) {\n        this.driver = driver\n        this.driver.vehicle = this\n        this.driver.sceneEntity.position.set(0, 0, 0)\n        this.driver.sceneEntity.setHeading(0)\n        this.driver.sceneEntity.changeActivity(this.getDriverActivity());\n        (this.sceneEntity.animation.driverJoint || this.sceneEntity.group).add(this.driver.sceneEntity.group)\n        if (this.stats.EngineSound && !this.engineSound) this.engineSound = this.sceneEntity.playPositionalAudio(this.stats.EngineSound, true)\n        if (this.selected) EventBus.publishEvent(new SelectionChanged(this.entityMgr))\n    }\n\n    dropDriver() {\n        this.stopJob()\n        if (!this.driver) return\n        (this.sceneEntity.animation.driverJoint || this.sceneEntity.group).remove(this.driver.sceneEntity.group)\n        this.driver.vehicle = null\n        this.driver.sceneEntity.position.copy(this.sceneEntity.position)\n        this.driver.sceneEntity.setHeading(this.sceneEntity.getHeading())\n        this.driver.sceneMgr.scene.add(this.driver.sceneEntity.group)\n        this.driver.sceneEntity.changeActivity()\n        this.driver = null\n        this.engineSound?.stop()\n        this.engineSound = null\n        if (this.selected) EventBus.publishEvent(new SelectionChanged(this.entityMgr))\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return RaiderTraining.DRIVER\n    }\n\n    getDriverActivity(): RaiderActivity {\n        return RaiderActivity.Stand\n    }\n\n    getRouteActivity(): VehicleActivity {\n        return AnimEntityActivity.Stand\n    }\n\n    isPrepared(job: Job): boolean {\n        return false // TODO vehicles: get vehicles to work\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class BullDozer extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.BULLDOZER, 'Vehicles/Bulldozer/Bulldozer.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.Bulldozer\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class Hoverboard extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.HOVERBOARD, 'Vehicles/Hoverboard/Hoverboard.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.Hoverboard\n    }\n\n    getDriverActivity(): RaiderActivity {\n        return RaiderActivity.Hoverboard\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { TerrainPath } from '../../map/TerrainPath'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTraining } from '../../raider/RaiderTraining'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class LargeCat extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.LARGE_CAT, 'Vehicles/LargeCat/LargeCat.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.LargeCat\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return RaiderTraining.SAILOR\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.sceneMgr.terrain.findSwimPath(this.sceneEntity.position2D.clone(), target)\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class LargeDigger extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.LARGE_DIGGER, 'Vehicles/LargeDigger/LargeDigger.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.LargeDigger\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class LargeMlp extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.LARGE_MLP, 'Vehicles/LMLP/LMLP.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.LargeMLP\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { TerrainPath } from '../../map/TerrainPath'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTraining } from '../../raider/RaiderTraining'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class SmallCat extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.SMALL_CAT, 'Vehicles/SmallCat/SmallCat.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallCat\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return RaiderTraining.SAILOR\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.sceneMgr.terrain.findSwimPath(this.sceneEntity.position2D.clone(), target)\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class SmallDigger extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.SMALL_DIGGER, 'Vehicles/SmallDigger/SmallDigger.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallDigger\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { TerrainPath } from '../../map/TerrainPath'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTraining } from '../../raider/RaiderTraining'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class SmallHeli extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.SMALL_HELI, 'Vehicles/SmallHeli/SmallHeli.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallHeli\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return RaiderTraining.PILOT\n    }\n\n    getDriverActivity(): RaiderActivity {\n        return RaiderActivity.SMALLheli\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.sceneMgr.terrain.findFlyPath(this.sceneEntity.position2D.clone(), target)\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { EntityType } from '../../EntityType'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class SmallMlp extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.SMALL_MLP, 'Vehicles/SMLP/SMLP.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.Smallmlp\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class SmallTruck extends VehicleEntity {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.SMALL_TRUCK, 'Vehicles/SmallTruck/SmallTruck.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallTruck\n    }\n\n    getDriverActivity(): RaiderActivity {\n        return RaiderActivity.SMALLTRUCK\n    }\n\n}\n","import { ResourceManager } from '../../../../resource/ResourceManager'\nimport { EntityManager } from '../../../EntityManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { AnimEntityActivity } from '../../activities/AnimEntityActivity'\nimport { AnimationEntityType } from '../../anim/AnimationEntityType'\nimport { EntityType } from '../../EntityType'\nimport { VehicleActivity } from '../VehicleActivity'\nimport { VehicleEntity } from '../VehicleEntity'\n\nexport class WalkerDigger extends VehicleEntity {\n\n    walkerLegs: AnimationEntityType\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.WALKER_DIGGER, 'Vehicles/WalkerBody/WalkerBody.ae')\n        this.walkerLegs = ResourceManager.getAnimationEntityType('Vehicles/WalkerLegs/WalkerLegs.ae', sceneMgr.listener)\n    }\n\n    get stats() {\n        return ResourceManager.stats.WalkerDigger\n    }\n\n    changeActivity(activity: AnimEntityActivity = this.getDefaultActivity(), onAnimationDone: () => any = null, durationTimeMs: number = null) {\n        this.sceneEntity.changeActivity(activity, onAnimationDone, durationTimeMs)\n        // TODO set animation for legs too\n        // TODO legs have activity stand which is not listed in the activities list\n    }\n\n    getDefaultActivity(): VehicleActivity {\n        return VehicleActivity.Route\n    }\n\n}\n","import { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { CameraControl, ChangeBuildingPowerState, ChangePriorityList, ChangeRaiderSpawnRequest, RequestVehicleSpawn, SelectBuildMode, SelectedRaiderPickTool, TrainRaider } from '../event/GuiCommand'\nimport { DeselectAll, UpdatePriorities } from '../event/LocalEvents'\nimport { JobCreateEvent, RequestedRaidersChanged } from '../event/WorldEvents'\nimport { EntityManager } from './EntityManager'\nimport { BuildingFactory } from './model/building/BuildingFactory'\nimport { PowerPathBuildingSite } from './model/building/PowerPathBuildingSite'\nimport { EntityType } from './model/EntityType'\nimport { EatJob } from './model/job/raider/EatJob'\nimport { GetToolJob } from './model/job/raider/GetToolJob'\nimport { TrainRaiderJob } from './model/job/raider/TrainRaiderJob'\nimport { UpgradeRaiderJob } from './model/job/raider/UpgradeRaiderJob'\nimport { VehicleCallManJob } from './model/job/VehicleCallManJob'\nimport { VehicleActivity } from './model/vehicle/VehicleActivity'\nimport { VehicleFactory } from './model/vehicle/VehicleFactory'\nimport { SceneManager } from './SceneManager'\nimport { WorldManager } from './WorldManager'\n\nexport class GuiManager {\n\n    buildingCycleIndex: number = 0\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager, entityMgr: EntityManager, gameLayerCanvas: HTMLCanvasElement) {\n        EventBus.registerEventListener(EventKey.COMMAND_PICK_TOOL, (event: SelectedRaiderPickTool) => {\n            entityMgr.selection.raiders.forEach((r) => {\n                if (!r.hasTool(event.tool)) {\n                    r.setJob(new GetToolJob(entityMgr, event.tool, null))\n                }\n            })\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CREATE_POWER_PATH, () => {\n            new PowerPathBuildingSite(entityMgr, entityMgr.selection.surface)\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_MAKE_RUBBLE, () => {\n            entityMgr.selection.surface?.makeRubble(2)\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_PLACE_FENCE, () => {\n            const s = entityMgr.selection.surface\n            if (s) entityMgr.getClosestBuildingByType(s.getCenterWorld(), EntityType.TOOLSTATION)?.spawnFence(s)\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CHANGE_RAIDER_SPAWN_REQUEST, (event: ChangeRaiderSpawnRequest) => {\n            if (event.increase) {\n                worldMgr.requestedRaiders++\n            } else {\n                worldMgr.requestedRaiders--\n            }\n            EventBus.publishEvent(new RequestedRaidersChanged(worldMgr.requestedRaiders))\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CREATE_DRILL_JOB, () => {\n            entityMgr.selection.surface?.createDrillJob()\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CREATE_REINFORCE_JOB, () => {\n            entityMgr.selection.surface?.createReinforceJob()\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CREATE_DYNAMITE_JOB, () => {\n            entityMgr.selection.surface?.createDynamiteJob()\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CANCEL_SURFACE_JOBS, () => {\n            entityMgr.selection.surface?.cancelJobs()\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CREATE_CLEAR_RUBBLE_JOB, () => {\n            entityMgr.selection.surface?.createClearRubbleJob()\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_UPGRADE_BUILDING, () => {\n            entityMgr.selection.building?.upgrade()\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_BUILDING_BEAMUP, () => {\n            entityMgr.selection.building?.beamUp()\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CHANGE_BUILDING_POWER_STATE, (event: ChangeBuildingPowerState) => {\n            entityMgr.selection.building?.setPowerSwitch(event.state)\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_RAIDER_EAT, () => {\n            entityMgr.selection.raiders.forEach((r) => !r.isDriving() && r.setJob(new EatJob()))\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_RAIDER_UPGRADE, () => {\n            entityMgr.selection.raiders.forEach((r) => {\n                const closestToolstation = entityMgr.getClosestBuildingByType(r.sceneEntity.position.clone(), EntityType.TOOLSTATION)\n                if (closestToolstation && r.level < r.stats.Levels) {\n                    r.setJob(new UpgradeRaiderJob(closestToolstation))\n                }\n            })\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_RAIDER_BEAMUP, () => {\n            entityMgr.selection.raiders.forEach((r) => r.beamUp())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_TRAIN_RAIDER, (event: TrainRaider) => {\n            entityMgr.selection.raiders.forEach((r) => !r.hasTraining(event.training) && r.setJob(new TrainRaiderJob(entityMgr, event.training, null)))\n            EventBus.publishEvent(new DeselectAll())\n            return true\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_RAIDER_DROP, () => {\n            entityMgr.selection.raiders.forEach((r) => r.dropItem())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_SELECT_BUILD_MODE, (event: SelectBuildMode) => {\n            sceneMgr.setBuildModeSelection(BuildingFactory.createBuildingFromType(event.entityType, sceneMgr, entityMgr))\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CANCEL_BUILD_MODE, () => {\n            sceneMgr.setBuildModeSelection(null)\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CANCEL_CONSTRUCTION, () => {\n            entityMgr.selection.surface.site?.cancelSite()\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_REQUEST_VEHICLE_SPAWN, (event: RequestVehicleSpawn) => {\n            console.log('Vehicle spawn requested for: ' + EntityType[event.vehicle])\n            // TODO vehicles: manage amount of requested vehicles per type in entity manager\n            const pads = entityMgr.getBuildingsByType(EntityType.TELEPORT_PAD).filter((b) => !b.teleport.operating) // TODO check for \"correct\" teleport station\n            if (pads.length > 0) {\n                const teleportPad = pads.random()\n                const vehicle = VehicleFactory.createVehicleFromType(event.vehicle, sceneMgr, entityMgr)\n                vehicle.sceneEntity.addToScene(teleportPad.primaryPathSurface.getCenterWorld2D(), teleportPad.sceneEntity.getHeading())\n                vehicle.sceneEntity.changeActivity(VehicleActivity.TeleportIn, () => {\n                    vehicle.sceneEntity.changeActivity()\n                    vehicle.sceneEntity.createPickSphere(vehicle.stats.PickSphere, vehicle)\n                    entityMgr.vehicles.push(vehicle)\n                })\n            }\n            // TODO check for crystals amount and reduce it\n            // TODO otherwise start a check interval?\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_VEHICLE_GET_MAN, () => {\n            entityMgr.selection.vehicles.forEach((v) => {\n                if (!v.callManJob && !v.driver) EventBus.publishEvent(new JobCreateEvent(new VehicleCallManJob(v)))\n            })\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_VEHICLE_BEAMUP, () => {\n            entityMgr.selection.vehicles.forEach((v) => v.beamUp())\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_VEHICLE_DRIVER_GET_OUT, () => {\n            entityMgr.selection.vehicles.forEach((v) => v.dropDriver())\n            EventBus.publishEvent(new DeselectAll())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CHANGE_PRIORITY_LIST, (event: ChangePriorityList) => {\n            EventBus.publishEvent(new UpdatePriorities(event.priorityList))\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CAMERA_CONTROL, (event: CameraControl) => {\n            if (event.zoom) { // TODO implement custom camera controls, that is better remotely controllable\n                const zoomInEvent = new WheelEvent('wheel', {deltaY: 5 * event.zoom})\n                gameLayerCanvas.dispatchEvent(zoomInEvent)\n                gameLayerCanvas.ownerDocument.dispatchEvent(zoomInEvent)\n            }\n            if (event.cycleBuilding) {\n                this.buildingCycleIndex = (this.buildingCycleIndex + 1) % entityMgr.buildings.length\n                const target = entityMgr.buildings[this.buildingCycleIndex].primarySurface.getCenterWorld()\n                const offsetTargetToCamera = sceneMgr.camera.position.clone().sub(sceneMgr.controls.target)\n                sceneMgr.camera.position.copy(target.clone().add(offsetTargetToCamera))\n                sceneMgr.controls.target.copy(target)\n                sceneMgr.controls.update()\n            }\n            if (event.rotationIndex >= 0) { // TODO implement custom camera controls, that is better remotely controllable\n                console.log('TODO implement rotate camera: ' + (['left', 'up', 'right', 'down'][event.rotationIndex]))\n            }\n        })\n    }\n\n}\n","import { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { BullDozer } from './entities/BullDozer'\nimport { Hoverboard } from './entities/Hoverboard'\nimport { LargeCat } from './entities/LargeCat'\nimport { LargeDigger } from './entities/LargeDigger'\nimport { LargeMlp } from './entities/LargeMlp'\nimport { SmallCat } from './entities/SmallCat'\nimport { SmallDigger } from './entities/SmallDigger'\nimport { SmallHeli } from './entities/SmallHeli'\nimport { SmallMlp } from './entities/SmallMlp'\nimport { SmallTruck } from './entities/SmallTruck'\nimport { WalkerDigger } from './entities/WalkerDigger'\nimport { VehicleEntity } from './VehicleEntity'\n\nexport class VehicleFactory {\n\n    static createVehicleFromType(entityType: EntityType, sceneMgr: SceneManager, entityMgr: EntityManager): VehicleEntity {\n        switch (entityType) {\n            case EntityType.HOVERBOARD:\n                return new Hoverboard(sceneMgr, entityMgr)\n            case EntityType.SMALL_DIGGER:\n                return new SmallDigger(sceneMgr, entityMgr)\n            case EntityType.SMALL_TRUCK:\n                return new SmallTruck(sceneMgr, entityMgr)\n            case EntityType.SMALL_CAT:\n                return new SmallCat(sceneMgr, entityMgr)\n            case EntityType.SMALL_MLP:\n                return new SmallMlp(sceneMgr, entityMgr)\n            case EntityType.SMALL_HELI:\n                return new SmallHeli(sceneMgr, entityMgr)\n            case EntityType.BULLDOZER:\n                return new BullDozer(sceneMgr, entityMgr)\n            case EntityType.WALKER_DIGGER:\n                return new WalkerDigger(sceneMgr, entityMgr)\n            case EntityType.LARGE_MLP:\n                return new LargeMlp(sceneMgr, entityMgr)\n            case EntityType.LARGE_DIGGER:\n                return new LargeDigger(sceneMgr, entityMgr)\n            case EntityType.LARGE_CAT:\n                return new LargeCat(sceneMgr, entityMgr)\n            default:\n                throw 'Unexpected vehicle type: ' + EntityType[entityType]\n        }\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class MonsterActivity extends AnimEntityActivity {\n\n    static Route = new MonsterActivity('Activity_Route')\n\n}\n","import { MonsterActivity } from './MonsterActivity'\n\nexport class RockMonsterActivity extends MonsterActivity {\n\n    static TurnLeft = new RockMonsterActivity('Activity_TurnLeft')\n    static TurnRight = new RockMonsterActivity('Activity_TurnRight')\n    static Emerge = new RockMonsterActivity('Activity_Emerge')\n    static Enter = new RockMonsterActivity('Activity_Enter')\n    static Gather = new RockMonsterActivity('Activity_Gather')\n    static Carry = new RockMonsterActivity('Activity_Carry')\n    static Throw = new RockMonsterActivity('Activity_Throw')\n    static CarryTurnLeft = new RockMonsterActivity('Activity_CarryTurnLeft')\n    static CarryTurnRight = new RockMonsterActivity('Activity_CarryTurnRight')\n    static CarryStand = new RockMonsterActivity('Activity_CarryStand')\n    static Repair = new RockMonsterActivity('Activity_Repair')\n    static Crumble = new RockMonsterActivity('Activity_Crumble')\n    static Stamp = new RockMonsterActivity('Activity_Stamp')\n    static Rest = new RockMonsterActivity('Activity_Rest')\n    static ThrowMan = new RockMonsterActivity('Activity_ThrowMan')\n    static Eat = new RockMonsterActivity('Activity_Eat')\n    static HitHard = new RockMonsterActivity('Activity_HitHard')\n    static Unpowered = new RockMonsterActivity('Activity_Unpowered')\n    static WakeUp = new RockMonsterActivity('Activity_WakeUp')\n\n}\n","import { AnimatedSceneEntity } from '../../../scene/AnimatedSceneEntity'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { MonsterActivity } from '../activities/MonsterActivity'\nimport { EntityType } from '../EntityType'\nimport { MovableEntity } from '../MovableEntity'\nimport { PathTarget } from '../PathTarget'\n\nexport abstract class Monster extends MovableEntity {\n\n    sceneEntity: AnimatedSceneEntity\n    target: PathTarget[] = []\n\n    protected constructor(sceneMgr: SceneManager, entityMgr: EntityManager, entityType: EntityType, aeFilename: string) {\n        super(sceneMgr, entityMgr, entityType)\n        this.sceneEntity = new AnimatedSceneEntity(sceneMgr, aeFilename)\n    }\n\n    removeFromScene() {\n        this.sceneEntity.removeFromScene()\n    }\n\n    getRouteActivity(): MonsterActivity {\n        return MonsterActivity.Route\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { getRandomInclusive } from '../../../core/Util'\nimport { TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { Monster } from './Monster'\n\nexport class Bat extends Monster {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.BAT, 'Creatures/bat/bat.ae')\n        this.sceneEntity.floorOffset = TILESIZE / 2\n    }\n\n    get stats() {\n        return ResourceManager.stats.Bat\n    }\n\n    update(elapsedMs: number) {\n        this.sceneEntity.update(elapsedMs)\n        if (this.target.length < 1 || this.moveToClosestTarget(this.target, elapsedMs) === MoveState.TARGET_REACHED) {\n            this.target = [this.findTarget()]\n        }\n    }\n\n    private findTarget(): PathTarget { // TODO move to nearby drilling noise, explosions or sonic blasters\n        const terrain = this.sceneMgr.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.sceneEntity.position.clone()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            if (terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType.floor) {\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a target')\n        return null\n    }\n\n    onDeath() {\n        this.removeFromScene()\n        this.entityMgr.bats.remove(this)\n    }\n\n}\n","import { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { Monster } from './Monster'\n\nexport class IceMonster extends Monster {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.ICE_MONSTER, 'Creatures/IceMonster/IceMonster.ae')\n    }\n\n}\n","import { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { Monster } from './Monster'\n\nexport class LavaMonster extends Monster {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.LAVA_MONSTER, 'Creatures/LavaMonster/LavaMonster.ae')\n    }\n\n}\n","import { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { Monster } from './Monster'\n\nexport class RockMonster extends Monster {\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.ROCK_MONSTER, 'Creatures/RMonster/RMonster.ae')\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { getRandom, getRandomInclusive } from '../../../core/Util'\nimport { TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { EntityType } from '../EntityType'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { Monster } from './Monster'\n\nexport class SmallSpider extends Monster {\n\n    idleTimer: number = 0\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.SMALL_SPIDER, 'Creatures/SpiderSB/SpiderSB.ae')\n        this.sceneEntity.floorOffset = 1 // TODO rotate spider according to surface normal vector\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallSpider\n    }\n\n    update(elapsedMs: number) {\n        this.sceneEntity.update(elapsedMs)\n        this.idleTimer -= elapsedMs\n        if (this.idleTimer > 0) return\n        if (this.target.length > 0 && this.moveToClosestTarget(this.target, elapsedMs) === MoveState.MOVED) { // TODO consider elapsed time when moving\n            if (!this.sceneMgr.terrain.getSurfaceFromWorld(this.sceneEntity.position).surfaceType.floor) {\n                this.onDeath()\n            }\n        } else {\n            this.sceneEntity.changeActivity()\n            this.target = [this.findTarget()]\n            this.idleTimer = 1000 + getRandom(9000)\n        }\n    }\n\n    private findTarget(): PathTarget {\n        const terrain = this.sceneMgr.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.sceneEntity.position.clone()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            const surfaceType = terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType\n            if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a target')\n        return null\n    }\n\n    onDeath() {\n        this.removeFromScene()\n        this.entityMgr.spiders.remove(this)\n    }\n\n}\n","import { getRandomInclusive } from '../../../core/Util'\nimport { EventBus } from '../../../event/EventBus'\nimport { RaidersChangedEvent } from '../../../event/LocalEvents'\nimport { SPIDER_SLIP_RANGE_SQ } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { FulfillerSceneEntity } from '../../../scene/entities/FulfillerSceneEntity'\nimport { EntityManager } from '../../EntityManager'\nimport { SceneManager } from '../../SceneManager'\nimport { BaseActivity } from '../activities/BaseActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { EntityType } from '../EntityType'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { Job } from '../job/Job'\nimport { Surface } from '../map/Surface'\nimport { TerrainPath } from '../map/TerrainPath'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { VehicleEntity } from '../vehicle/VehicleEntity'\nimport { RaiderTool } from './RaiderTool'\nimport { RaiderTraining } from './RaiderTraining'\n\nexport class Raider extends FulfillerEntity {\n\n    tools: Map<RaiderTool, boolean> = new Map()\n    trainings: Map<RaiderTraining, boolean> = new Map()\n    slipped: boolean = false\n    hungerLevel: number = 1\n    vehicle: VehicleEntity = null\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        super(sceneMgr, entityMgr, EntityType.PILOT)\n        this.tools.set(RaiderTool.DRILL, true)\n        this.sceneEntity = new FulfillerSceneEntity(sceneMgr, 'mini-figures/pilot/pilot.ae')\n    }\n\n    get stats() {\n        return ResourceManager.stats.Pilot\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.sceneMgr.terrain.findWalkPath(this.sceneEntity.position2D.clone(), target)\n    }\n\n    isSelectable(): boolean {\n        return super.isSelectable() && !this.slipped && !this.vehicle\n    }\n\n    isDriving(): boolean {\n        return !!this.vehicle\n    }\n\n    getSpeed(): number {\n        return super.getSpeed() * this.stats.RouteSpeed[this.level] * (this.isOnPath() ? this.stats.PathCoef : 1)\n    }\n\n    isOnPath(): boolean {\n        return this.sceneMgr.terrain.getSurfaceFromWorld(this.sceneEntity.position).isPath()\n    }\n\n    isOnRubble() {\n        return this.sceneMgr.terrain.getSurfaceFromWorld(this.sceneEntity.position).hasRubble()\n    }\n\n    getRouteActivity(): BaseActivity {\n        if (this.isOnRubble()) {\n            return !!this.carries ? RaiderActivity.CarryRubble : RaiderActivity.routeRubble\n        } else {\n            return !!this.carries ? RaiderActivity.Carry : RaiderActivity.Route\n        }\n    }\n\n    moveToClosestTarget(target: PathTarget[], elapsedMs: number): MoveState {\n        const result = super.moveToClosestTarget(target, elapsedMs)\n        if (result === MoveState.MOVED) {\n            this.entityMgr.spiders.some((spider) => { // TODO optimize this with a quad tree or similar\n                if (this.sceneEntity.position.distanceToSquared(spider.sceneEntity.position) < SPIDER_SLIP_RANGE_SQ) {\n                    this.slip()\n                    spider.onDeath()\n                    return true\n                }\n            })\n        }\n        return result\n    }\n\n    slip() {\n        if (getRandomInclusive(0, 100) < 10) this.stopJob()\n        this.dropItem()\n        this.slipped = true\n        this.sceneEntity.changeActivity(RaiderActivity.Slip, () => {\n            this.slipped = false\n        })\n    }\n\n    work(elapsedMs: number) {\n        if (this.slipped) return\n        super.work(elapsedMs)\n    }\n\n    beamUp() {\n        super.beamUp()\n        EventBus.publishEvent(new RaidersChangedEvent(this.entityMgr))\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        this.entityMgr.raiders.remove(this)\n    }\n\n    hasTool(tool: RaiderTool) {\n        return !tool || this.tools.has(tool)\n    }\n\n    hasTraining(training: RaiderTraining) {\n        return !training || this.trainings.has(training)\n    }\n\n    addTool(tool: RaiderTool) {\n        this.tools.set(tool, true)\n    }\n\n    addTraining(training: RaiderTraining) {\n        this.trainings.set(training, true)\n    }\n\n    isPrepared(job: Job): boolean {\n        return this.hasTool(job.getRequiredTool()) && this.hasTraining(job.getRequiredTraining())\n    }\n\n    canDrill(surface: Surface): boolean {\n        return super.canDrill(surface) && this.hasTool(RaiderTool.DRILL)\n    }\n\n}\n","import { MathUtils, Vector2 } from 'three'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { EventBus } from '../event/EventBus'\nimport { RaidersChangedEvent } from '../event/LocalEvents'\nimport { TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { EntityManager } from './EntityManager'\nimport { RockMonsterActivity } from './model/activities/RockMonsterActivity'\nimport { BuildingFactory } from './model/building/BuildingFactory'\nimport { EntityType, getEntityTypeByName } from './model/EntityType'\nimport { Crystal } from './model/material/Crystal'\nimport { Bat } from './model/monster/Bat'\nimport { IceMonster } from './model/monster/IceMonster'\nimport { LavaMonster } from './model/monster/LavaMonster'\nimport { RockMonster } from './model/monster/RockMonster'\nimport { SmallSpider } from './model/monster/SmallSpider'\nimport { Raider } from './model/raider/Raider'\nimport { SmallDigger } from './model/vehicle/entities/SmallDigger'\nimport { SceneManager } from './SceneManager'\nimport { WorldManager } from './WorldManager'\nimport degToRad = MathUtils.degToRad\n\nexport class ObjectListLoader {\n\n    static loadObjectList(levelConf: LevelEntryCfg, worldMgr: WorldManager, sceneMgr: SceneManager, entityMgr: EntityManager) {\n        const objectListConf = ResourceManager.getResource(levelConf.oListFile)\n        Object.values(objectListConf).forEach((olObject: any) => {\n            const entityType = getEntityTypeByName(olObject.type ? olObject.type.toLowerCase() : olObject.type)\n            // all object positions are off by one tile, because they start at 1 not 0\n            const worldPos = new Vector2(olObject.xPos, olObject.yPos).addScalar(-1).multiplyScalar(TILESIZE) // TODO assert that world pos is over terrain otherwise drop item\n            const buildingType: string = ResourceManager.cfg('BuildingTypes', olObject.type)\n            const radHeading = degToRad(olObject.heading)\n            if (entityType === EntityType.TV_CAMERA) {\n                const cameraOffset = new Vector2(6, 0).rotateAround(new Vector2(0, 0), radHeading + Math.PI / 2)\n                const cameraPos = sceneMgr.getFloorPosition(cameraOffset.multiplyScalar(TILESIZE).add(worldPos))\n                cameraPos.y += 4 * TILESIZE\n                sceneMgr.camera.position.copy(cameraPos)\n                sceneMgr.controls.target.copy(sceneMgr.getFloorPosition(worldPos))\n                sceneMgr.controls.update()\n                sceneMgr.setTorchPosition(new Vector2(worldPos.x, worldPos.y - TILESIZE / 2))\n            } else if (entityType === EntityType.PILOT) {\n                const raider = new Raider(sceneMgr, entityMgr)\n                raider.sceneEntity.changeActivity()\n                raider.sceneEntity.createPickSphere(raider.stats.PickSphere, raider)\n                raider.sceneEntity.addToScene(worldPos, radHeading - Math.PI / 2)\n                if (raider.sceneEntity.visible) {\n                    entityMgr.raiders.push(raider)\n                    EventBus.publishEvent(new RaidersChangedEvent(entityMgr))\n                } else {\n                    entityMgr.raidersUndiscovered.push(raider)\n                }\n            } else if (buildingType) {\n                console.log(olObject.type + ' heading: ' + Math.round(olObject.heading % 360))\n                const entity = BuildingFactory.createBuildingFromType(entityType, sceneMgr, entityMgr)\n                entity.placeDown(worldPos, -radHeading - Math.PI, levelConf.disableStartTeleport)\n            } else if (entityType === EntityType.CRYSTAL) {\n                entityMgr.placeMaterial(new Crystal(sceneMgr, entityMgr), worldPos)\n            } else if (entityType === EntityType.SMALL_SPIDER) {\n                const spider = new SmallSpider(sceneMgr, entityMgr)\n                spider.sceneEntity.changeActivity()\n                spider.sceneEntity.addToScene(worldPos, radHeading)\n                entityMgr.spiders.push(spider)\n            } else if (entityType === EntityType.BAT) {\n                const bat = new Bat(sceneMgr, entityMgr)\n                bat.sceneEntity.changeActivity()\n                bat.sceneEntity.addToScene(worldPos, radHeading)\n                entityMgr.bats.push(bat)\n            } else if (entityType === EntityType.SMALL_DIGGER) {\n                const smallDigger = new SmallDigger(sceneMgr, entityMgr)\n                smallDigger.sceneEntity.changeActivity()\n                smallDigger.sceneEntity.createPickSphere(smallDigger.stats.PickSphere, smallDigger)\n                smallDigger.sceneEntity.addToScene(worldPos, radHeading + Math.PI)\n                if (smallDigger.sceneEntity.visible) {\n                    entityMgr.vehicles.push(smallDigger)\n                } else {\n                    entityMgr.vehiclesUndiscovered.push(smallDigger)\n                }\n            } else if (entityType === EntityType.ICE_MONSTER) {\n                const rockMonster = new IceMonster(sceneMgr, entityMgr)\n                rockMonster.sceneEntity.changeActivity(RockMonsterActivity.Unpowered)\n                rockMonster.sceneEntity.addToScene(worldPos, radHeading - Math.PI / 2)\n                entityMgr.rockMonsters.push(rockMonster)\n            } else if (entityType === EntityType.LAVA_MONSTER) {\n                const rockMonster = new LavaMonster(sceneMgr, entityMgr)\n                rockMonster.sceneEntity.changeActivity(RockMonsterActivity.Unpowered)\n                rockMonster.sceneEntity.addToScene(worldPos, radHeading - Math.PI / 2)\n                entityMgr.rockMonsters.push(rockMonster)\n            } else if (entityType === EntityType.ROCK_MONSTER) {\n                const rockMonster = new RockMonster(sceneMgr, entityMgr)\n                rockMonster.sceneEntity.changeActivity(RockMonsterActivity.Unpowered)\n                rockMonster.sceneEntity.addToScene(worldPos, radHeading - Math.PI / 2)\n                entityMgr.rockMonsters.push(rockMonster)\n            } else {\n                // TODO implement remaining object types\n                console.warn('Object type ' + olObject.type + ' not yet implemented')\n            }\n        })\n    }\n\n}\n","// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n}\n\nexport enum POINTER_EVENT {\n    MOVE,\n    DOWN,\n    UP,\n}\n\nexport enum KEY_EVENT {\n    DOWN,\n    UP,\n}\n","import { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { UpdatePriorities } from '../event/LocalEvents'\nimport { JobCreateEvent, JobDeleteEvent } from '../event/WorldEvents'\nimport { CHECK_CLEAR_RUBBLE_INTERVAL, JOB_SCHEDULE_INTERVAL } from '../params'\nimport { EntityManager } from './EntityManager'\nimport { BuildingEntity } from './model/building/BuildingEntity'\nimport { EntityType } from './model/EntityType'\nimport { JobState } from './model/job/JobState'\nimport { PriorityEntry } from './model/job/PriorityEntry'\nimport { PriorityIdentifier } from './model/job/PriorityIdentifier'\nimport { GetToolJob } from './model/job/raider/GetToolJob'\nimport { GetToolPathTarget } from './model/job/raider/GetToolPathTarget'\nimport { MoveJob } from './model/job/raider/MoveJob'\nimport { TrainRaiderJob } from './model/job/raider/TrainRaiderJob'\nimport { ShareableJob } from './model/job/ShareableJob'\nimport { Raider } from './model/raider/Raider'\nimport { SceneManager } from './SceneManager'\n\nexport class Supervisor {\n\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    jobs: ShareableJob[] = []\n    priorityIndexList: PriorityIdentifier[] = []\n    priorityList: PriorityEntry[] = []\n    assignJobsTimer: number = 0\n    checkClearRubbleTimer: number = 0\n\n    constructor(sceneMgr: SceneManager, entityMgr: EntityManager) {\n        this.sceneMgr = sceneMgr\n        this.entityMgr = entityMgr\n        EventBus.registerEventListener(EventKey.JOB_CREATE, (event: JobCreateEvent) => {\n            this.jobs.push(event.job)\n        })\n        EventBus.registerEventListener(EventKey.JOB_DELETE, (event: JobDeleteEvent) => {\n            event.job.cancel()\n        })\n        EventBus.registerEventListener(EventKey.UPDATE_PRIORITIES, (event: UpdatePriorities) => {\n            this.priorityList = [...event.priorityList]\n            this.priorityIndexList = this.priorityList.map((p) => p.key)\n        })\n    }\n\n    update(elapsedMs: number) {\n        this.assignJobs(elapsedMs)\n        this.checkUnclearedRubble(elapsedMs)\n    }\n\n    assignJobs(elapsedMs: number) {\n        this.assignJobsTimer += elapsedMs\n        if (this.assignJobsTimer < JOB_SCHEDULE_INTERVAL) return\n        this.assignJobsTimer %= JOB_SCHEDULE_INTERVAL\n        const availableJobs: ShareableJob[] = []\n        this.jobs = this.jobs.filter((j) => {\n            const result = j.jobState === JobState.INCOMPLETE\n            if (result && j.fulfiller.length < 1 && this.isEnabled(j.getPriorityIdentifier())) { // TODO don't assign jobs on hidden surfaces\n                availableJobs.push(j)\n            }\n            return result\n        })\n        availableJobs.sort((left, right) => {\n            return Math.sign(this.getPriority(left) - this.getPriority(right))\n        })\n        const unemployedRaider = this.entityMgr.raiders.filter((r) => !r.job && !r.inBeam)\n        availableJobs.forEach((job) => { // XXX better use estimated time to complete job as metric\n            let closestRaider: Raider = null\n            let closestRaiderIndex: number = null\n            let minDistance: number = null\n            let closestToolRaider: Raider = null\n            let closestToolRaiderIndex: number = null\n            let minToolDistance: number = null\n            let closestToolstation: BuildingEntity = null\n            const requiredTool = job.getRequiredTool()\n            let closestTrainingRaider: Raider = null\n            let closestTrainingRaiderIndex: number = null\n            let minTrainingDistance: number = null\n            let closestTrainingArea: BuildingEntity = null\n            const requiredTraining = job.getRequiredTraining()\n            unemployedRaider.forEach((raider, index) => {\n                const hasRequiredTool = raider.hasTool(requiredTool)\n                const hasTraining = raider.hasTraining(requiredTraining)\n                if (hasRequiredTool && hasTraining) {\n                    const pathToJob = job.getWorkplaces().map((b) => raider.findPathToTarget(b))\n                        .filter((t) => !!t)\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToJob) {\n                        const dist = pathToJob.lengthSq // TODO use precalculated path to job\n                        if (minDistance === null || dist < minDistance) {\n                            closestRaider = raider\n                            closestRaiderIndex = index\n                            minDistance = dist\n                        }\n                    }\n                } else if (!hasRequiredTool) {\n                    const pathToToolstation = this.entityMgr.getBuildingsByType(EntityType.TOOLSTATION)\n                        .map((b) => raider.findPathToTarget(b.getPathTarget()))\n                        .filter((p) => !!p)\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToToolstation) {\n                        const dist = pathToToolstation.lengthSq\n                        if (minToolDistance === null || dist < minToolDistance) {\n                            closestToolRaider = raider\n                            closestToolRaiderIndex = index\n                            minToolDistance = dist\n                            closestToolstation = (pathToToolstation.target as GetToolPathTarget).building\n                        }\n                    }\n                } else {\n                    const pathToTrainingSite = this.entityMgr.getTrainingSites(requiredTraining)\n                        .map((b) => raider.findPathToTarget(b.getPathTarget()))\n                        .filter((p) => !!p)\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToTrainingSite) {\n                        const dist = pathToTrainingSite.lengthSq\n                        if (minTrainingDistance === null || dist < minTrainingDistance) {\n                            closestTrainingRaider = raider\n                            closestTrainingRaiderIndex = index\n                            minTrainingDistance = dist\n                            closestTrainingArea = (pathToTrainingSite.target as GetToolPathTarget).building\n                        }\n                    }\n                }\n            })\n            if (closestRaider) {\n                closestRaider.setJob(job)\n                unemployedRaider.splice(closestRaiderIndex, 1)\n            } else if (closestToolRaider) {\n                closestToolRaider.setJob(new GetToolJob(this.entityMgr, requiredTool, closestToolstation), job)\n                unemployedRaider.splice(closestToolRaiderIndex, 1)\n            } else if (closestTrainingRaider) {\n                closestTrainingRaider.setJob(new TrainRaiderJob(this.entityMgr, requiredTraining, closestTrainingArea), job)\n                unemployedRaider.splice(closestTrainingRaiderIndex, 1)\n            }\n        })\n        unemployedRaider.forEach((raider) => {\n            const sites = raider.sceneEntity.surfaces.map((s) => s.site).filter(s => !!s)\n            if (sites.length > 0) raider.setJob(new MoveJob(sites[0].getWalkOutSurface().getRandomPosition()))\n        })\n    }\n\n    checkUnclearedRubble(elapsedMs: number) {\n        this.checkClearRubbleTimer += elapsedMs\n        if (this.checkClearRubbleTimer < CHECK_CLEAR_RUBBLE_INTERVAL) return\n        this.checkClearRubbleTimer %= CHECK_CLEAR_RUBBLE_INTERVAL\n        if (!this.isEnabled(PriorityIdentifier.aiPriorityClearing)) return\n        this.entityMgr.raiders.forEach((raider) => {\n            if (raider.job) return\n            const startSurface = raider.sceneEntity.surfaces[0]\n            for (let rad = 0; rad < 10; rad++) {\n                for (let x = startSurface.x - rad; x <= startSurface.x + rad; x++) {\n                    for (let y = startSurface.y - rad; y <= startSurface.y + rad; y++) {\n                        const surface = this.sceneMgr.terrain.getSurfaceOrNull(x, y)\n                        if (!(surface?.hasRubble()) || !surface?.discovered) continue\n                        const clearRubbleJob = surface.createClearRubbleJob()\n                        if (!clearRubbleJob || clearRubbleJob.fulfiller.length > 0) continue\n                        const requiredTool = clearRubbleJob.getRequiredTool()\n                        if (raider.hasTool(requiredTool)) {\n                            raider.setJob(clearRubbleJob)\n                            return\n                        } else {\n                            const pathToToolstation = this.entityMgr.getBuildingsByType(EntityType.TOOLSTATION)\n                                .map((b) => raider.findPathToTarget(b.getPathTarget()))\n                                .filter((p) => !!p)\n                                .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                            if (pathToToolstation) {\n                                raider.setJob(new GetToolJob(this.entityMgr, requiredTool, (pathToToolstation.target as GetToolPathTarget).building), clearRubbleJob)\n                                return\n                            }\n                        }\n                    }\n                }\n            }\n        })\n    }\n\n    getPriority(job: ShareableJob) {\n        return this.priorityIndexList.indexOf(job.getPriorityIdentifier())\n    }\n\n    isEnabled(priorityIdentifier: PriorityIdentifier): boolean {\n        return !!this.priorityList.find((p) => p.key === priorityIdentifier)?.enabled\n    }\n\n}\n","/** Function documentation mostly copied from the following URLs\n *\n * https://kb.rockraidersunited.com/User:Jessietail/NERPs_reference\n * https://web.archive.org/web/20131206122442/http://rru-stuff.org/nerpfuncs.html\n * https://kb.rockraidersunited.com/NERPs_documentation#Labels\n *\n */\nimport { EntityManager } from '../game/EntityManager'\nimport { EntityType } from '../game/model/EntityType'\nimport { GameResultState } from '../game/model/GameResult'\nimport { GameState } from '../game/model/GameState'\nimport { getRandom } from './Util'\n\n// noinspection JSUnusedGlobalSymbols,JSUnusedLocalSymbols\nexport class NerpRunner {\n\n    entityMgr: EntityManager\n    debug = false\n    onLevelEnd: (state: GameResultState) => any = null\n\n    timer: number = 0\n    registers = new Array(8).fill(0)\n    timers = new Array(4).fill(0)\n    scriptLines = [] // contains humand readable script strings\n    statements = [] // contains parsed statements for execution\n    macrosByName = {}\n    labelsByName = {}\n    halted = false\n    programCounter = 0\n    messages = []\n    // more state variables and switches\n    messagePermit = null\n\n    constructor(entityMgr: EntityManager, debug = false) {\n        this.entityMgr = entityMgr\n        this.debug = debug\n    }\n\n    update(elapsedMs: number) {\n        for (this.timer += elapsedMs; this.timer >= 2000; this.timer -= 2000) {\n            this.execute()\n        }\n    }\n\n    /**\n     * Internally used to validate and parse a register number.\n     * @param register\n     * @return {number}\n     */\n    checkRegister(register) {\n        const num = parseInt(register)\n        if (isNaN(num) || num < 0 || num > this.registers.length) throw new Error('Invalid register (' + register + ') provided')\n        return num\n    }\n\n    /**\n     * Internally used to validate and parse a value before setting or adding it with a register.\n     * @param value\n     * @return {number}\n     */\n    checkRegisterValue(value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Invalid register value (' + value + ') provided')\n        return num\n    }\n\n    /**\n     * Gets the value currently stored in the given register, internally used to handle all registers with one method.\n     * @param register the register to read\n     * @return {number} returns the value currently stored in the register\n     */\n    getR(register) {\n        register = this.checkRegister(register)\n        return this.registers[register]\n    }\n\n    /**\n     * Sets the given value for the given register, internally used to handle all registers with one method.\n     * @param register the register to set\n     * @param value the value to set for the given register\n     */\n    setR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] = value\n    }\n\n    /**\n     * Adds the given value to the given register, internally used to handle all registers with one method.\n     * @param register the register to add to\n     * @param value the value to add to the given register\n     */\n    addR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] += value\n    }\n\n    /**\n     * Set the respective timer to the given numerical value. Units are in milliseconds.\n     * @param timer\n     * @param value\n     */\n    setTimer(timer, value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Can\\'t set timer to NaN value: ' + value)\n        this.timers[timer] = new Date().getTime() + num\n    }\n\n    /**\n     * Gets the value of the respective timer. Units are in milliseconds.\n     * @param timer\n     * @return {number}\n     */\n    getTimer(timer) {\n        return new Date().getTime() - this.timers[timer]\n    }\n\n    /**\n     * End the level successfully and show the score screen.\n     */\n    setLevelCompleted() {\n        console.log('Nerp runner marks level as complete')\n        this.halted = true\n        this.onLevelEnd(GameResultState.COMPLETE)\n    }\n\n    /**\n     * End the level as failure and show the score screen.\n     */\n    setLevelFail() {\n        console.log('NerpRunner marks level as failed; at line: ' + this.scriptLines[this.programCounter])\n        this.halted = true\n        this.onLevelEnd(GameResultState.FAILED)\n    }\n\n    /**\n     * Sets tutorial flags\n     * @param value a bitmask to set flags with\n     */\n    setTutorialFlags(value) {\n        // seems like value must be interpreted bitwise and sets a certain flag on each bit\n        // seen so far:\n        // 0 = 0x00 allow any click anywhere anytime\n        // 3 = 0x11 disallow invalid clicks\n        // 4095 = 0x111111111111 set all flags? (seen in Tutorial01 level)\n        if (value !== 0) { // holds for all known levels\n            console.warn('NERP: setTutorialFlags not yet implemented', value)\n        }\n    }\n\n    /**\n     * This is used to make messages come up/not come up.\n     * @param messagesAllowed\n     */\n    setMessagePermit(messagesAllowed) {\n        this.messagePermit = !messagesAllowed\n    }\n\n    setBuildingsUpgradeLevel(typeName: EntityType, level: number) {\n        this.entityMgr.buildings.forEach(b => {\n            if (b.entityType === typeName) b.setLevel(level)\n        })\n    }\n\n    setToolStoreLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.TOOLSTATION, level)\n    }\n\n    setTeleportPadLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.TELEPORT_PAD, level)\n    }\n\n    setPowerStationLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.POWER_STATION, level)\n    }\n\n    setBarracksLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.BARRACKS, level)\n    }\n\n    /**\n     * Gets the number of tool stores currently built. NOT the total ever built.\n     * @return {number}\n     */\n    getToolStoresBuilt() {\n        return this.entityMgr.buildings.count((b) => b.entityType === EntityType.TOOLSTATION)\n    }\n\n    /**\n     * Gets the number of minifigures on the level. XXX it is NOT tested if this ignores minifigures in hidden caverns\n     * @return {number}\n     */\n    getMinifiguresOnLevel() {\n        return this.entityMgr.raiders.length\n    }\n\n    /**\n     * Gets the number of crystals currently stored.\n     * @return {number}\n     */\n    getCrystalsCurrentlyStored() {\n        return GameState.numCrystal\n    }\n\n    getObjectiveSwitch() {\n        // TODO implement this\n        return false\n    }\n\n    setMessageTimerValues(arg1, arg2, arg3) {\n        // TODO implement this\n    }\n\n    getMessageTimer() {\n        return 0 // TODO return remaining amount of time needed to fully play WAV message\n    }\n\n    cameraUnlock() {\n        // TODO implement this\n    }\n\n    setMessage(messageNumber, arrowDisabled) {\n        if (!this.messagePermit) return\n        if (messageNumber === 0) return // TODO messages start at 1\n        const msg = this.messages[messageNumber]\n        console.log(msg.txt) // TODO show message to user\n        // msg.snd resides in sounds/streamed/ which is currently not loaded :(\n    }\n\n    setCameraGotoTutorial(arg1) {\n        // TODO implement this\n    }\n\n    getTutorialBlockIsGround(blockNum) {\n        return 0 // TODO return true if given block is ground\n    }\n\n    getTutorialBlockIsPath(blockNum) {\n        return 0 // TODO return true if given block is a path\n    }\n\n    getUnitAtBlock(blockNum) {\n        return 0 // TODO return number of units on given block\n    }\n\n    getOxygenLevel() {\n        return GameState.airLevel * 100\n    }\n\n    getObjectiveShowing() {\n        // TODO implement this\n        return false\n    }\n\n    addPoweredCrystals() {\n        // TODO implement this\n    }\n\n    disallowAll() {\n        // TODO implement this\n    }\n\n    getPoweredPowerStationsBuilt() {\n        return this.entityMgr.buildings.count((b) => b.isUsable() && b.entityType === EntityType.POWER_STATION)\n    }\n\n    getPoweredBarracksBuilt() {\n        return this.entityMgr.buildings.count((b) => b.isUsable() && b.entityType === EntityType.BARRACKS)\n    }\n\n    getRecordObjectAtTutorial() {\n        // TODO implement this\n    }\n\n    getHiddenObjectsFound() {\n        // TODO implement this\n        return 0\n    }\n\n    getLevel1PowerStationsBuilt() {\n        return this.entityMgr.buildings.count((b) => b.entityType === EntityType.POWER_STATION && b.level >= 1)\n    }\n\n    getRandom100(): number {\n        return getRandom(100)\n    }\n\n    getSlugsOnLevel(): number {\n        return 0 // TODO implement slugs\n    }\n\n    generateSlug() {\n        console.warn('Slugs not yet implemented') // TODO implement slugs\n    }\n\n    callMethod(methodName, methodArgs) {\n        if (methodName === 'Stop') {\n            throw 'Stop'\n        } else if (methodName === 'TRUE') {\n            return true\n        } else if (methodName === 'FALSE') {\n            return false\n        }\n        const setRegisterMatch = methodName.match(/^SetR([0-7])$/)\n        if (setRegisterMatch) {\n            return this.setR(setRegisterMatch[1], methodArgs[0])\n        }\n        const addRegisterMatch = methodName.match(/^AddR([0-7])$/)\n        if (addRegisterMatch) {\n            return this.addR(addRegisterMatch[1], methodArgs[0])\n        }\n        const getRegisterMatch = methodName.match(/^GetR([0-7])$/)\n        if (getRegisterMatch) {\n            return this.getR(getRegisterMatch[1])\n        }\n        const setTimerMatch = methodName.match(/^SetTimer([0-3])$/)\n        if (setTimerMatch) {\n            return this.setTimer(setTimerMatch[1], methodArgs[0])\n        }\n        const getTimerMatch = methodName.match(/^GetTimer([0-3])$/)\n        if (getTimerMatch) {\n            return this.getTimer(getTimerMatch[1])\n        }\n        const lMethodName = methodName.toLowerCase()\n        const memberName = Object.getOwnPropertyNames(NerpRunner.prototype).find((name) => name.toLowerCase() === lMethodName)\n        if (memberName) return this[memberName].apply(this, methodArgs)\n        throw new Error('Undefined method: ' + methodName)\n    }\n\n    conditional(left, right) {\n        const conditionResult = this.executeStatement(left)\n        if (this.debug) {\n            console.log('Condition evaluated to ' + conditionResult)\n        }\n        if (conditionResult) {\n            this.executeStatement(right)\n        }\n    }\n\n    executeStatement(expression) {\n        if (expression.invoke) {\n            const argValues = expression.invoke !== 'conditional' ? expression.args.map(e => this.executeStatement(e)) : expression.args\n            const result = this.callMethod(expression.invoke, argValues)\n            if (result !== undefined && this.debug) {\n                console.log('Method returned: ' + result)\n            }\n            return result\n        } else if (expression.comparator) {\n            const left = this.executeStatement(expression.left)\n            const right = this.executeStatement(expression.right)\n            if (expression.comparator === '=') {\n                return left === right\n            } else if (expression.comparator === '!=') {\n                return left !== right\n            } else if (expression.comparator === '<') {\n                return left < right\n            } else if (expression.comparator === '>') {\n                return left > right\n            } else {\n                console.log(expression)\n                throw new Error('Unknown comparator: ' + expression.comparator)\n            }\n        } else if (!isNaN(expression)) { // just a number\n            return expression\n        } else if (expression.jump) {\n            this.programCounter = this.labelsByName[expression.jump]\n            if (this.programCounter === undefined) {\n                throw new Error('Label \\'' + expression.jump + '\\' is unknown!')\n            }\n            if (this.debug) {\n                console.log('Jumping to label \\'' + expression.jump + '\\' in line ' + this.programCounter)\n            }\n        } else {\n            console.log(expression)\n            throw new Error('Unknown expression in line ' + this.programCounter + ': ' + expression)\n        }\n    }\n\n    execute(debug = false) {\n        this.debug = debug\n        if (this.halted) return\n        try {\n            if (this.debug) {\n                console.log('Executing following script\\n' + this.scriptLines.join('\\n'))\n                console.log('Registers: ' + this.registers)\n            }\n            for (this.programCounter = 0; this.programCounter < this.statements.length; this.programCounter++) {\n                const statement = this.statements[this.programCounter]\n                if (this.debug) {\n                    console.log(this.programCounter + ': ' + this.scriptLines[this.programCounter])\n                    console.log(statement)\n                }\n                if (!statement.label) { // do nothing for label markers\n                    this.executeStatement(statement)\n                }\n            }\n        } catch (e) {\n            if (e === 'Stop') {\n                return\n            }\n            console.error(e)\n            console.error('FATAL ERROR! Script execution failed! You can NOT win anymore!')\n            this.halted = true\n        }\n    }\n\n}\n","import { EntityManager } from '../game/EntityManager'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { NerpRunner } from './NerpRunner'\n\nexport class NerpParser {\n\n    static parse(entityMgr: EntityManager, nerpScript: string): NerpRunner {\n        const nerpRunner = new NerpRunner(entityMgr)\n        const lines = nerpScript.split('\\n').map(l => l\n            .split('//')[0].trim() // before comment starts\n            .split(';')[0].trim() // before preprocessor comment starts\n            .replace(/_/g, '') // some preprocessor macros use this prefix\n            .replace(/\\bTRUE \\? /, '') // some weird requirement of the original language\n            .replace(/[{}]/g, ''), // duplicate limit for macros using labels too\n        )\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c]\n            if (line.length < 1) {\n                continue // ignore empty lines, but important for macro closure\n            }\n            if (line.startsWith('#include ')) { // include other nerp scripts/headers\n                const includeName = line.replace(/^#include /, '').trim().slice(1, -1)\n                if (includeName === 'nerpdef.h') {\n                    // trivial default header file, is applied by search and replace above\n                    // see https://github.com/jgrip/legorr/blob/master/nerpdef.h\n                    continue\n                }\n                const includedRunner = NerpParser.parse(entityMgr, ResourceManager.getResource('Levels/' + includeName))\n                if (!includedRunner || !includedRunner.scriptLines || includedRunner.scriptLines.length < 1) {\n                    throw 'Can\\'t include unknown nerp script: ' + line\n                }\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(includedRunner.scriptLines)\n                // copy macros from included file to current file\n                nerpRunner.macrosByName = Object.assign({}, nerpRunner.macrosByName, includedRunner.macrosByName)\n            } else if (line.startsWith('#define ')) { // parse C++ preprocessor macro\n                const firstLine = line.replace(/^#define /, '').split(' ')\n                const macroLines = [firstLine.splice(1).join(' ').replace(/\\\\$/, '').trim()]\n                let mLine = line\n                let append = false\n                while (mLine.endsWith('\\\\') && c < lines.length - 1) {\n                    c++\n                    mLine = lines[c].trim()\n                    const macroLine = mLine.replace(/\\\\$/, '').trim()\n                    if (macroLine.length > 0) {\n                        if (append) {\n                            append = false\n                            macroLines[macroLines.length - 1] += macroLine\n                        } else {\n                            macroLines.push(macroLine)\n                        }\n                    }\n                    if (mLine.match(/:\\\\$/)) {\n                        append = true\n                    }\n                }\n                const macroCall = firstLine[0].split('(')\n                nerpRunner.macrosByName[macroCall[0]] = {\n                    args: macroCall[1].replace(/\\)$/, '').split(','),\n                    lines: macroLines,\n                }\n            } else {\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(this.replaceMacros(nerpRunner.macrosByName, line))\n            }\n        }\n        // somewhat precompile the script and create syntax tree\n        // must be done in separate block to make sure the script is complete and we can refer/rely on line numbers for label jumps\n        for (let c = 0; c < nerpRunner.scriptLines.length; c++) {\n            const line = nerpRunner.scriptLines[c]\n            nerpRunner.statements[c] = line.replace(/\\(\\)/g, '') // now the macros are applied and obsolete empty \"()\" can be removed\n                .split(' ? ')\n            const labelMatch = line.match(/(\\S+):/)\n            if (nerpRunner.statements[c].length === 2) { // line contains condition (primary operator)\n                nerpRunner.statements[c] = {\n                    invoke: 'conditional',\n                    args: [this.preProcess(nerpRunner.statements[c][0]), this.preProcess(nerpRunner.statements[c][1])],\n                }\n            } else if (labelMatch) { // keep label line number for later usage\n                const labelName = labelMatch[1].toLowerCase()\n                nerpRunner.labelsByName[labelName] = c\n                nerpRunner.statements[c] = {label: labelName}\n            } else if (nerpRunner.statements[c].length === 1) { // just a call\n                nerpRunner.statements[c] = this.preProcess(nerpRunner.statements[c][0])\n            } else { // lines contains more than 1 condition statement\n                throw 'Can\\'t deal with line: ' + line\n            }\n        }\n        return nerpRunner\n    }\n\n    static replaceMacros(macrosByName, line): string[] {\n        // check if this line contains a macro\n        const split = line.split('(') // not a very stable check though...\n        const macro = macrosByName[split[0]]\n        if (macro) {\n            const argValues = split.splice(1).join('(').slice(0, -1).split(',')\n            if (argValues.length !== macro.args.length) {\n                throw 'Invalid number of args provided for macro in line ' + line\n            }\n            const macroLines = []\n            macro.lines.forEach((line) => {\n                for (let c = 0; c < argValues.length; c++) {\n                    line = line.replace(new RegExp('\\\\b' + macro.args[c] + '\\\\b'), argValues[c])\n                }\n                macroLines.push(...(this.replaceMacros(macrosByName, line)))\n            })\n            return macroLines\n        } else {\n            return [line]\n        }\n    }\n\n    static preProcess(expression) {\n        expression = expression.trim().replace(/^_/, '') // remove whitespace and leading underscore\n        const number = parseInt(expression)\n        if (!isNaN(number)) {\n            return number\n        }\n        const opSplit = expression.split(/ (=) | (!=) | (>) | (<) /).filter(e => e !== undefined)\n        const brackets = expression.match(/^(.+)\\((.+)\\)$/)\n        const spaceSplit = expression.split(' ')\n        const labelMatch = expression.match(/([^:]+):$/)\n        const jumpMatch = expression.match(/^:([^:]+)$/)\n        if (opSplit.length === 3) { // expression contains secondary operator\n            return {left: this.preProcess(opSplit[0]), comparator: opSplit[1], right: this.preProcess(opSplit[2])}\n        } else if (brackets) {\n            const args = brackets[2].split(',').map(a => this.preProcess(a))\n            return {invoke: brackets[1], args: args}\n        } else if (spaceSplit.length > 1) { // space split must be the very last since most expressions contain space\n            const args = spaceSplit.length === 2 ? [this.preProcess(spaceSplit[1])] : spaceSplit.splice(1).map(a => this.preProcess(a))\n            return {invoke: spaceSplit[0], args: args}\n        } else if (labelMatch) { // label definition\n            return {label: labelMatch[1]}\n        } else if (jumpMatch) { // jump to label\n            return {jump: jumpMatch[1].toLowerCase()}\n        } else { // function call without args\n            if (expression.match(/[ =?><!]/)) {\n                throw 'Invalid expression given, parsing must have failed before somewhere'\n            }\n            return {invoke: expression, args: []}\n        }\n    }\n\n}\n","import { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { NerpParser } from '../core/NerpParser'\nimport { NerpRunner } from '../core/NerpRunner'\nimport { clearTimeoutSafe } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { AirLevelChanged } from '../event/LocalEvents'\nimport { RequestedRaidersChanged } from '../event/WorldEvents'\nimport { CHECK_SPAWN_RAIDER_TIMER, UPDATE_INTERVAL_MS } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { EntityManager } from './EntityManager'\nimport { EntityType } from './model/EntityType'\nimport { GameResultState } from './model/GameResult'\nimport { GameState } from './model/GameState'\nimport { Raider } from './model/raider/Raider'\nimport { updateSafe } from './model/Updateable'\nimport { SceneManager } from './SceneManager'\nimport { Supervisor } from './Supervisor'\n\nexport class WorldManager {\n\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    nerpRunner: NerpRunner = null\n    jobSupervisor: Supervisor = null\n    masterTimeout = null\n    oxygenRate: number = 0\n    elapsedGameTimeMs: number = 0\n    requestedRaiders: number = 0\n    spawnRaiderTimer: number = 0\n\n    constructor() {\n        EventBus.registerEventListener(EventKey.CAVERN_DISCOVERED, () => GameState.discoveredCaverns++)\n        EventBus.registerEventListener(EventKey.PAUSE_GAME, () => this.pause())\n        EventBus.registerEventListener(EventKey.UNPAUSE_GAME, () => this.unPause())\n    }\n\n    setup(levelConf: LevelEntryCfg, onLevelEnd: (state: GameResultState) => any) {\n        GameState.totalCaverns = levelConf.reward?.quota?.caverns || 0\n        this.oxygenRate = levelConf.oxygenRate\n        this.elapsedGameTimeMs = 0\n        this.requestedRaiders = 0\n        this.spawnRaiderTimer = 0\n        // load nerp script\n        this.nerpRunner = NerpParser.parse(this.entityMgr, ResourceManager.getResource(levelConf.nerpFile))\n        this.nerpRunner.messages.push(...(ResourceManager.getResource(levelConf.nerpMessageFile)))\n        this.nerpRunner.onLevelEnd = onLevelEnd\n    }\n\n    pause() {\n        this.masterTimeout = clearTimeoutSafe(this.masterTimeout)\n    }\n\n    unPause() {\n        this.masterTimeout = clearTimeoutSafe(this.masterTimeout)\n        this.masterTimeout = setTimeout(() => this.update(UPDATE_INTERVAL_MS), UPDATE_INTERVAL_MS)\n    }\n\n    update(elapsedMs: number) {\n        const startUpdate = window.performance.now()\n        this.elapsedGameTimeMs += UPDATE_INTERVAL_MS\n        this.updateOxygen(elapsedMs)\n        this.checkSpawnRaiders(elapsedMs)\n        updateSafe(this.entityMgr, elapsedMs)\n        updateSafe(this.sceneMgr.terrain, elapsedMs)\n        updateSafe(this.jobSupervisor, elapsedMs)\n        updateSafe(this.nerpRunner, elapsedMs)\n        const endUpdate = window.performance.now()\n        const updateDurationMs = endUpdate - startUpdate\n        const sleepForMs = UPDATE_INTERVAL_MS - Math.round(updateDurationMs)\n        this.masterTimeout = clearTimeoutSafe(this.masterTimeout)\n        this.masterTimeout = setTimeout(() => this.update(UPDATE_INTERVAL_MS), sleepForMs)\n    }\n\n    updateOxygen(elapsedMs: number) {\n        try {\n            const sum = this.entityMgr.getOxygenSum()\n            const rateMultiplier = 0.001\n            const valuePerSecond = 1 / 25\n            const msToSeconds = 0.001\n            const diff = sum * this.oxygenRate * rateMultiplier * valuePerSecond * elapsedMs * msToSeconds / 10\n            const airLevel = Math.min(1, Math.max(0, GameState.airLevel + diff))\n            if (GameState.airLevel !== airLevel) {\n                GameState.airLevel = airLevel\n                EventBus.publishEvent(new AirLevelChanged(GameState.airLevel))\n            }\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    checkSpawnRaiders(elapsedMs: number) {\n        try {\n            for (this.spawnRaiderTimer += elapsedMs; this.spawnRaiderTimer >= CHECK_SPAWN_RAIDER_TIMER; this.spawnRaiderTimer -= CHECK_SPAWN_RAIDER_TIMER) {\n                if (this.requestedRaiders > 0 && !this.entityMgr.hasMaxRaiders()) {\n                    const teleportBuilding = this.entityMgr.findTeleportBuilding(EntityType.PILOT)\n                    if (teleportBuilding) { // TODO only spawn in, when primary surface is free\n                        this.requestedRaiders--\n                        EventBus.publishEvent(new RequestedRaidersChanged(this.requestedRaiders))\n                        const raider = new Raider(this.sceneMgr, this.entityMgr)\n                        this.entityMgr.raidersInBeam.push(raider)\n                        teleportBuilding.teleport.teleportIn(raider, this.entityMgr.raiders, this.entityMgr.raidersInBeam)\n                    }\n                }\n            }\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n}\n","import { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../../params'\n\nexport class ScreenLayer {\n\n    canvas: HTMLCanvasElement\n    context: CanvasRenderingContext2D\n    onRedraw: (context: SpriteContext) => any\n    active: boolean = true\n\n    constructor(alpha: boolean, withContext: boolean) {\n        this.canvas = document.createElement('canvas')\n        if (!alpha) this.canvas.style.background = '#f0f'\n        if (withContext) this.context = this.canvas.getContext('2d', {alpha: alpha})\n        this.hide()\n    }\n\n    reset() {\n    }\n\n    setZIndex(zIndex: number) {\n        this.canvas.style.zIndex = String(zIndex)\n    }\n\n    static compareZ(layerA: ScreenLayer, layerB: ScreenLayer) {\n        let aIndex = layerA?.canvas?.style?.zIndex || 0\n        const bIndex = layerB?.canvas?.style?.zIndex || 0\n        return aIndex === bIndex ? 0 : aIndex > bIndex ? -1 : 1\n    }\n\n    resize(width, height) {\n        this.canvas.width = width\n        this.canvas.height = height\n    }\n\n    redraw() {\n        if (this.onRedraw && this.isActive()) requestAnimationFrame(this.onRedraw.bind(this, this.context))\n    }\n\n    show() {\n        this.reset()\n        this.active = true\n        this.canvas.style.visibility = 'visible'\n        this.redraw()\n    }\n\n    hide() {\n        this.active = false\n        this.canvas.style.visibility = 'hidden'\n    }\n\n    isActive() {\n        return this.active\n    }\n\n    toCanvasCoords(windowX: number, windowY: number) {\n        const clientRect = this.canvas.getBoundingClientRect()\n        return [windowX - clientRect.left, windowY - clientRect.top]\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        return new Promise((resolve) => resolve(false))\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): Promise<boolean> {\n        return new Promise((resolve) => resolve(false))\n    }\n\n    handleWheelEvent(event: GameWheelEvent): Promise<boolean> {\n        return new Promise((resolve) => resolve(false))\n    }\n\n}\n\nexport class ScaledLayer extends ScreenLayer {\n\n    fixedWidth: number = SPRITE_RESOLUTION_WIDTH\n    fixedHeight: number = SPRITE_RESOLUTION_HEIGHT\n    scaleX: number\n    scaleY: number\n\n    constructor(alpha: boolean = true, withContext: boolean = true) {\n        super(alpha, withContext)\n        this.updateScale()\n    }\n\n    private updateScale() {\n        this.scaleX = this.canvas.width / this.fixedWidth\n        this.scaleY = this.canvas.height / this.fixedHeight\n    }\n\n    toScaledCoords(windowX: number, windowY: number) {\n        const [cx, cy] = this.toCanvasCoords(windowX, windowY)\n        return [cx / this.scaleX, cy / this.scaleY].map((c) => Math.round(c))\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        this.updateScale()\n        this.context.scale(this.scaleX, this.scaleY)\n    }\n\n}\n","import { KEY_EVENT } from './EventTypeEnum'\n\nexport class GameKeyboardEvent {\n\n    eventEnum: KEY_EVENT\n    type: string\n    bubbles: boolean\n    key: string\n    code: string\n\n    constructor(eventEnum: KEY_EVENT, event: KeyboardEvent) {\n        this.eventEnum = eventEnum\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        this.key = event.key\n        this.code = event.code\n    }\n\n}\n","import { MOUSE_BUTTON, POINTER_EVENT } from './EventTypeEnum'\n\nexport class GamePointerEvent implements PointerEventInit {\n\n    type: string\n    eventEnum: POINTER_EVENT\n    bubbles: boolean\n    clientX: number\n    clientY: number\n    pointerType: string\n    button: MOUSE_BUTTON\n    ctrlKey: boolean\n    metaKey: boolean\n    shiftKey: boolean\n    canvasX: number\n    canvasY: number\n\n    constructor(eventEnum: POINTER_EVENT, event: PointerEvent) {\n        this.eventEnum = eventEnum\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        // all event attributes used by three.js controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n        this.clientX = event.clientX\n        this.clientY = event.clientY\n        this.pointerType = event.pointerType\n        this.button = event.button\n        this.ctrlKey = event.ctrlKey\n        this.metaKey = event.metaKey\n        this.shiftKey = event.shiftKey\n    }\n\n}\n","export class GameWheelEvent {\n\n    type: string\n    bubbles: boolean\n    clientX: number\n    clientY: number\n    deltaX: number\n    deltaY: number\n    deltaZ: number\n    button: number\n    ctrlKey: boolean\n    metaKey: boolean\n    shiftKey: boolean\n    canvasX: number\n    canvasY: number\n\n    constructor(event: WheelEvent) {\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        // all event attributes used by three.js controls: clientX, clientY, deltaY, keyCode, touches, button, ctrlKey, metaKey, shiftKey\n        this.clientX = event.clientX\n        this.clientY = event.clientY\n        this.deltaX = event.deltaX\n        this.deltaY = event.deltaY\n        this.deltaZ = event.deltaZ\n        this.button = event.button\n        this.ctrlKey = event.ctrlKey\n        this.metaKey = event.metaKey\n        this.shiftKey = event.shiftKey\n    }\n\n}\n","import { DEV_MODE } from '../params'\nimport { BaseScreen } from '../screen/BaseScreen'\nimport { ScreenLayer } from '../screen/layer/ScreenLayer'\nimport { KEY_EVENT, POINTER_EVENT } from './EventTypeEnum'\nimport { GameKeyboardEvent } from './GameKeyboardEvent'\nimport { GamePointerEvent } from './GamePointerEvent'\nimport { GameWheelEvent } from './GameWheelEvent'\n\nexport class EventManager {\n\n    constructor(screen: BaseScreen) {\n        screen.gameCanvasContainer.addEventListener('contextmenu', (event: MouseEvent) => {\n            if (screen.isInRect(event)) event.preventDefault()\n        })\n        new Map<string, POINTER_EVENT>([\n            ['pointermove', POINTER_EVENT.MOVE],\n            ['pointerdown', POINTER_EVENT.DOWN],\n            ['pointerup', POINTER_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: PointerEvent) => {\n                if (!screen.isInRect(event)) return\n                event.preventDefault()\n                const nonBubblingClone = new GamePointerEvent(eventEnum, event)\n                const activeLayers = screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                EventManager.publishPointerEvent(activeLayers, nonBubblingClone)\n            })\n        })\n        new Map<string, KEY_EVENT>([\n            ['keydown', KEY_EVENT.DOWN],\n            ['keyup', KEY_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: KeyboardEvent) => {\n                if (!DEV_MODE) event.preventDefault()\n                const nonBubblingClone = new GameKeyboardEvent(eventEnum, event)\n                const activeLayers = screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                EventManager.publishKeyEvent(activeLayers, nonBubblingClone)\n            })\n        })\n        screen.gameCanvasContainer.addEventListener('wheel', (event: WheelEvent) => {\n            if (!screen.isInRect(event)) return\n            const nonBubblingClone = new GameWheelEvent(event)\n            const activeLayers = screen.layers.filter(l => l.isActive())\n                .sort((a, b) => ScreenLayer.compareZ(a, b))\n            EventManager.publishWheelEvent(activeLayers, nonBubblingClone)\n        })\n    }\n\n    private static publishPointerEvent(activeLayers: ScreenLayer[], event: GamePointerEvent) {\n        activeLayers.shift()?.handlePointerEvent(event).then((consumed) => {\n            if (!consumed) this.publishPointerEvent(activeLayers, event)\n        })\n    }\n\n    private static publishKeyEvent(activeLayers: ScreenLayer[], event: GameKeyboardEvent) {\n        activeLayers.shift()?.handleKeyEvent(event).then((consumed) => {\n            if (!consumed) this.publishKeyEvent(activeLayers, event)\n        })\n    }\n\n    private static publishWheelEvent(activeLayers: ScreenLayer[], event: GameWheelEvent) {\n        activeLayers.shift()?.handleWheelEvent(event).then((consumed) => {\n            if (!consumed) this.publishWheelEvent(activeLayers, event)\n        })\n    }\n\n}\n","import { Raycaster } from 'three'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { IEventHandler } from '../../event/IEventHandler'\nimport { ChangeCursor } from '../../event/LocalEvents'\nimport { EntityManager } from '../../game/EntityManager'\nimport { Surface } from '../../game/model/map/Surface'\nimport { VehicleEntity } from '../../game/model/vehicle/VehicleEntity'\nimport { SceneManager } from '../../game/SceneManager'\nimport { WorldManager } from '../../game/WorldManager'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { AnimatedCursor } from '../AnimatedCursor'\nimport { Cursor } from '../Cursor'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class CursorLayer extends ScreenLayer {\n\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    currentCursor: Cursor = null\n    timedCursor: Cursor = null\n    cursorTimeout = null\n    activeCursor: AnimatedCursor = null\n\n    constructor(parent: IEventHandler) {\n        super(true, false)\n        parent.registerEventListener(EventKey.CHANGE_CURSOR, (event: ChangeCursor) => {\n            if (this.active) this.changeCursor(event.cursor, event.timeout)\n        })\n    }\n\n    reset() {\n        this.changeCursor(Cursor.Pointer_Standard)\n    }\n\n    hide() {\n        super.hide()\n        this.canvas.style.cursor = null\n        this.currentCursor = null\n        this.timedCursor = null\n        this.cursorTimeout = clearTimeoutSafe(this.cursorTimeout)\n        this.activeCursor?.disableAnimation()\n        this.activeCursor = null\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        if (event.eventEnum === POINTER_EVENT.MOVE && this.sceneMgr) {\n            const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n            const rx = (cx / this.canvas.width) * 2 - 1\n            const ry = -(cy / this.canvas.height) * 2 + 1\n            const raycaster = new Raycaster()\n            raycaster.setFromCamera({x: rx, y: ry}, this.sceneMgr.camera)\n            this.changeCursor(this.determineCursor(raycaster))\n        }\n        return super.handlePointerEvent(event)\n    }\n\n    determineCursor(raycaster: Raycaster): Cursor {\n        if (this.sceneMgr.hasBuildModeSelection()) {\n            return this.sceneMgr.buildMarker.lastCheck ? Cursor.Pointer_CanBuild : Cursor.Pointer_CannotBuild\n        }\n        let intersects = raycaster.intersectObjects(this.entityMgr.raiders.map((r) => r.sceneEntity.pickSphere))\n        if (intersects.length > 0) return Cursor.Pointer_Selected\n        intersects = raycaster.intersectObjects(this.entityMgr.vehicles.map((v) => v.sceneEntity.pickSphere))\n        if (intersects.length > 0) {\n            const userData = intersects[0].object.userData\n            if (userData && userData.hasOwnProperty('selectable')) {\n                const vehicle = userData['selectable'] as VehicleEntity\n                if (!vehicle?.driver && this.entityMgr.selection.raiders.length > 0) {\n                    return Cursor.Pointer_GetIn\n                }\n            }\n            return Cursor.Pointer_Selected\n        }\n        intersects = raycaster.intersectObjects(this.entityMgr.buildings.map((b) => b.sceneEntity.pickSphere))\n        if (intersects.length > 0) return Cursor.Pointer_Selected\n        intersects = raycaster.intersectObjects(this.sceneMgr.terrain.floorGroup.children)\n        if (intersects.length > 0) {\n            const userData = intersects[0].object.userData\n            if (userData && userData.hasOwnProperty('surface')) {\n                const surface = userData['surface'] as Surface\n                if (surface) {\n                    if (this.entityMgr.selection.raiders.some((r) => r.canDrill(surface)) || this.entityMgr.selection.vehicles.some((v) => v.canDrill(surface))) {\n                        return surface.surfaceType.cursorFulfiller\n                    } else {\n                        return surface.surfaceType.cursor\n                    }\n                }\n            }\n        }\n        return Cursor.Pointer_Standard\n    }\n\n    private changeCursor(cursor: Cursor, timeout: number = null) {\n        if (timeout) {\n            this.cursorTimeout = clearTimeoutSafe(this.cursorTimeout)\n            if (this.timedCursor !== cursor) this.setCursor(cursor)\n            const that = this\n            this.cursorTimeout = setTimeout(() => {\n                that.cursorTimeout = null\n                that.setCursor(that.currentCursor)\n            }, timeout)\n        } else if (this.currentCursor !== cursor) {\n            this.currentCursor = cursor\n            if (this.cursorTimeout) return\n            this.setCursor(cursor)\n        }\n    }\n\n    private setCursor(cursor: Cursor) {\n        this.activeCursor?.disableAnimation()\n        this.activeCursor = ResourceManager.getCursor(cursor)\n        this.activeCursor.enableAnimation(this.canvas.style)\n    }\n\n}\n","import { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { EventManager } from '../event/EventManager'\nimport { GameEvent } from '../event/GameEvent'\nimport { IEventHandler } from '../event/IEventHandler'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../params'\nimport { CursorLayer } from './layer/CursorLayer'\nimport { ScreenLayer } from './layer/ScreenLayer'\n\nexport class BaseScreen implements IEventHandler {\n\n    gameCanvasContainer: HTMLElement\n    eventMgr: EventManager\n    layers: ScreenLayer[] = []\n    width: number = SPRITE_RESOLUTION_WIDTH\n    height: number = SPRITE_RESOLUTION_HEIGHT\n    ratio: number = SPRITE_RESOLUTION_WIDTH / SPRITE_RESOLUTION_HEIGHT\n    cursorLayer: CursorLayer\n\n    constructor() {\n        this.gameCanvasContainer = document.getElementById('game-canvas-container')\n        this.gameCanvasContainer.focus()\n        this.eventMgr = new EventManager(this)\n        if (!this.gameCanvasContainer) throw 'Fatal error: game canvas container not found!'\n        window.addEventListener('resize', () => this.onWindowResize())\n        this.onWindowResize()\n        this.cursorLayer = this.addLayer(new CursorLayer(this), 1000) // TODO turn cursor layer into singleton?\n    }\n\n    addLayer<T extends ScreenLayer>(layer: T, zIndex: number = 0): T {\n        layer.resize(this.width, this.height)\n        layer.setZIndex(zIndex)\n        this.layers.push(layer)\n        this.gameCanvasContainer.appendChild(layer.canvas)\n        return layer\n    }\n\n    redraw() {\n        this.layers.forEach((layer) => layer.redraw())\n    }\n\n    show() {\n        this.layers.forEach((layer) => layer.show())\n        this.redraw()\n    }\n\n    hide() {\n        this.layers.forEach((layer) => layer.hide())\n    }\n\n    onWindowResize() {\n        const maxWidth = this.gameCanvasContainer.offsetWidth, maxHeight = this.gameCanvasContainer.offsetHeight\n        const idealHeight = Math.round(maxWidth / this.ratio)\n        if (idealHeight > maxHeight) {\n            this.resize(Math.round(maxHeight * this.ratio), maxHeight)\n        } else {\n            this.resize(maxWidth, idealHeight)\n        }\n    }\n\n    resize(width: number, height: number) {\n        this.width = width\n        this.height = height\n        this.layers.forEach((layer) => {\n            const oldCanvas = layer.canvas\n            layer.resize(width, height)\n            if (oldCanvas !== layer.canvas) { // TODO refactor this\n                this.gameCanvasContainer.removeChild(oldCanvas)\n                this.gameCanvasContainer.appendChild(layer.canvas)\n            }\n        })\n        this.redraw()\n    }\n\n    isInRect(event: MouseEvent | WheelEvent) {\n        if (this.layers.length < 1) return false\n        const firstLayer = this.layers[0] // all layers have same state and size\n        if (!firstLayer.isActive() || !firstLayer.canvas) return false\n        const rect = firstLayer.canvas.getBoundingClientRect()\n        const clientX = event.clientX, clientY = event.clientY\n        return clientX >= rect.left && clientX < rect.right && clientY >= rect.top && clientY < rect.bottom\n    }\n\n    publishEvent(event: GameEvent): void {\n        EventBus.publishEvent(event)\n    }\n\n    registerEventListener(eventKey: EventKey, callback: (GameEvent) => any): void {\n        EventBus.registerEventListener(eventKey, callback)\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { KEY_EVENT, MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GameEvent } from '../../event/GameEvent'\nimport { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { IEventHandler } from '../../event/IEventHandler'\nimport { DeselectAll } from '../../event/LocalEvents'\nimport { JobCreateEvent } from '../../event/WorldEvents'\nimport { EntityManager } from '../../game/EntityManager'\nimport { TrainRaiderJob } from '../../game/model/job/raider/TrainRaiderJob'\nimport { VehicleCallManJob } from '../../game/model/job/VehicleCallManJob'\nimport { SceneManager } from '../../game/SceneManager'\nimport { WorldManager } from '../../game/WorldManager'\nimport { DEV_MODE } from '../../params'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class GameLayer extends ScreenLayer implements IEventHandler {\n\n    parent: IEventHandler\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    private rightDown: { x: number, y: number } = {x: 0, y: 0}\n\n    constructor(parent: IEventHandler) {\n        super(false, false)\n        this.parent = parent\n    }\n\n    reset() {\n        super.reset()\n        this.rightDown = {x: 0, y: 0}\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        const terrainIntersectionPoint = this.sceneMgr.getTerrainIntersectionPoint(rx, ry)\n        const buildMarker = this.sceneMgr.buildMarker\n        if (event.eventEnum === POINTER_EVENT.MOVE) {\n            if (terrainIntersectionPoint) this.sceneMgr.setTorchPosition(terrainIntersectionPoint)\n            buildMarker.update(terrainIntersectionPoint)\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                buildMarker.createBuildingSite()\n            } else if (event.button === MOUSE_BUTTON.SECONDARY) {\n                const downUpDistance = Math.abs(event.clientX - this.rightDown.x) + Math.abs(event.clientY - this.rightDown.y)\n                if (downUpDistance < 3) {\n                    if (this.sceneMgr.hasBuildModeSelection()) {\n                        this.sceneMgr.setBuildModeSelection(null)\n                    } else if (this.entityMgr.selection.raiders.length > 0 || this.entityMgr.selection.vehicles.length > 0) {\n                        this.handleSecondaryClickForSelection(rx, ry, terrainIntersectionPoint)\n                    }\n                }\n            }\n        } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.SECONDARY) {\n                this.rightDown.x = event.clientX\n                this.rightDown.y = event.clientY\n            }\n        }\n        this.canvas.dispatchEvent(new PointerEvent(event.type, event))\n        this.canvas.ownerDocument.dispatchEvent(new PointerEvent(event.type, event))\n        return new Promise((resolve) => resolve(true))\n    }\n\n    handleSecondaryClickForSelection(rx: number, ry: number, terrainIntersectionPoint: Vector2) {\n        const selection = this.sceneMgr.getFirstByRay(rx, ry)\n        if (selection.vehicle) {\n            const selectedRaiders = this.entityMgr.selection.raiders\n            if (selectedRaiders.length > 0) {\n                const manVehicleJob = new VehicleCallManJob(selection.vehicle)\n                selectedRaiders.some((r) => {\n                    if (r.isPrepared(manVehicleJob)) {\n                        r.setJob(manVehicleJob)\n                    } else {\n                        const requiredTraining = manVehicleJob.getRequiredTraining()\n                        const closestTrainingSite = r.entityMgr.getClosestTrainingSite(r.sceneEntity.position.clone(), requiredTraining)\n                        if (!closestTrainingSite) return false\n                        r.setJob(new TrainRaiderJob(r.entityMgr, requiredTraining, closestTrainingSite), manVehicleJob)\n                    }\n                    EventBus.publishEvent(new DeselectAll())\n                    return true\n                })\n                EventBus.publishEvent(new JobCreateEvent(manVehicleJob))\n            }\n        } else if (selection.material) {\n            // this.entityMgr.selection.assignCarryJob() // TODO assign carry job to the closest fulfiller with capacity // TODO add capacity to raider and vehicles\n        } else if (selection.surface) {\n            const drillJob = selection.surface.createDrillJob()\n            this.entityMgr.selection.assignSurfaceJob(drillJob)\n            const clearJob = selection.surface.createClearRubbleJob()\n            this.entityMgr.selection.assignSurfaceJob(clearJob)\n            if (!drillJob && !clearJob && selection.surface.isWalkable()) {\n                this.entityMgr.selection.assignMoveJob(terrainIntersectionPoint)\n            }\n            if (!this.entityMgr.selection.isEmpty()) this.publishEvent(new DeselectAll())\n        }\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): Promise<boolean> {\n        if (DEV_MODE && event.eventEnum === KEY_EVENT.UP) {\n            if (this.entityMgr.selection.surface) {\n                if (event.code === 'KeyC') {\n                    this.entityMgr.selection.surface.collapse()\n                    this.publishEvent(new DeselectAll())\n                } else if (event.code === 'KeyF') {\n                    const surface = this.entityMgr.selection.surface\n                    if (!surface.surfaceType.floor) {\n                        this.sceneMgr.terrain.createFallIn(surface, this.sceneMgr.terrain.findFallInTarget(surface))\n                    }\n                    this.publishEvent(new DeselectAll())\n                }\n            }\n        }\n        this.canvas.dispatchEvent(new KeyboardEvent(event.type, event))\n        return new Promise((resolve) => resolve(true))\n    }\n\n    handleWheelEvent(event: GameWheelEvent): Promise<boolean> {\n        this.canvas.dispatchEvent(new WheelEvent(event.type, event))\n        return new Promise((resolve) => resolve(true))\n    }\n\n    publishEvent(event: GameEvent): void {\n        this.parent?.publishEvent(event)\n    }\n\n    registerEventListener(eventKey: EventKey, callback: (GameEvent) => any): void {\n        this.parent.registerEventListener(eventKey, callback)\n    }\n\n}\n","import { MathUtils } from 'three'\nimport { SoundManager } from '../../audio/SoundManager'\nimport { EventBus } from '../../event/EventBus'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { GameEvent } from '../../event/GameEvent'\nimport { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { BuildingsChangedEvent, PlaySoundEvent, RaidersChangedEvent } from '../../event/LocalEvents'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\nimport { EntityManager } from '../../game/EntityManager'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { WorkerMessageType } from '../../resource/wadworker/WorkerMessageType'\nimport { OffscreenWorkerMessage } from '../../worker/OffscreenWorkerMessage'\nimport { WorkerEventResponse } from '../../worker/WorkerEventResponse'\nimport { WorkerPublishEvent } from '../../worker/WorkerPublishEvent'\nimport { WorkerResponse } from '../../worker/WorkerResponse'\nimport { ScreenLayer } from './ScreenLayer'\nimport generateUUID = MathUtils.generateUUID\n\nexport abstract class OffscreenLayer extends ScreenLayer {\n\n    private worker: Worker\n    entityMgr: EntityManager\n    resolveCallbackByEventId: Map<string, ((consumed: boolean) => any)> = new Map()\n\n    protected constructor(worker: Worker) {\n        super(true, false)\n        this.worker = worker\n        this.sendMessage({\n            type: WorkerMessageType.INIT,\n            resourceByName: ResourceManager.resourceByName,\n            cfg: ResourceManager.configuration,\n            stats: ResourceManager.stats,\n        })\n        this.worker.onmessage = (event) => {\n            const response = event.data as WorkerResponse\n            if (response.type === WorkerMessageType.RESPONSE_EVENT) {\n                const eventResponse = response as WorkerEventResponse\n                const resolve = this.resolveCallbackByEventId.get(eventResponse.eventId)\n                resolve(eventResponse.eventConsumed)\n                this.resolveCallbackByEventId.delete(eventResponse.eventId)\n            } else if (response.type === WorkerMessageType.GAME_EVENT) {\n                const event = (response as WorkerPublishEvent).gameEvent\n                if (event.eventKey === EventKey.PLAY_SOUND) {\n                    SoundManager.playSample((event as PlaySoundEvent).sample)\n                }\n                EventBus.publishEvent(event)\n            } else if (!this.onMessage(response)) {\n                console.warn('Offscreen layer ignored message: ' + WorkerMessageType[response.type])\n            }\n        }\n        EventBus.registerWorkerListener((event: GameEvent) => {\n            if (!event.guiForward) return\n            try {\n                this.sendMessage({type: WorkerMessageType.GAME_EVENT, gameEvent: event})\n            } catch (e) {\n                console.warn('Could not send event to GUI worker: ', e, event)\n            }\n        })\n    }\n\n    abstract onMessage(msg): boolean\n\n    protected sendMessage(message: OffscreenWorkerMessage, transfer?: Transferable[]) {\n        this.worker.postMessage(message, transfer)\n    }\n\n    reset() {\n        this.sendMessage({type: WorkerMessageType.RESET})\n        this.sendMessage({type: WorkerMessageType.GAME_EVENT, gameEvent: new BuildingsChangedEvent(this.entityMgr)})\n        this.sendMessage({type: WorkerMessageType.GAME_EVENT, gameEvent: new RaidersChangedEvent(this.entityMgr)})\n        this.sendMessage({type: WorkerMessageType.GAME_EVENT, gameEvent: new MaterialAmountChanged()})\n    }\n\n    resize(width, height) {\n        const zIndex = Number(this.canvas.style.zIndex) || 0\n        this.canvas = document.createElement('canvas')\n        if (!this.active) this.canvas.style.visibility = 'hidden'\n        super.resize(width, height)\n        this.setZIndex(zIndex)\n        const canvas = this.canvas.transferControlToOffscreen()\n        this.sendMessage({\n            type: WorkerMessageType.CANVAS,\n            canvas: canvas,\n        }, [canvas])\n    }\n\n    redraw() {\n        if (this.isActive()) this.sendMessage({type: WorkerMessageType.REDRAW})\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        [event.canvasX, event.canvasY] = this.toCanvasCoords(event.clientX, event.clientY)\n        return this.sendEventMessage(WorkerMessageType.EVENT_POINTER, event)\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): Promise<boolean> {\n        return this.sendEventMessage(WorkerMessageType.EVENT_KEY, event)\n    }\n\n    handleWheelEvent(event: GameWheelEvent): Promise<boolean> {\n        [event.canvasX, event.canvasY] = this.toCanvasCoords(event.clientX, event.clientY)\n        return this.sendEventMessage(WorkerMessageType.EVENT_POINTER, event)\n    }\n\n    private sendEventMessage(type: WorkerMessageType, event: GamePointerEvent | GameKeyboardEvent | GameWheelEvent): Promise<boolean> {\n        const eventId = generateUUID()\n        this.sendMessage({\n            type: type,\n            eventId: eventId,\n            inputEvent: event,\n        })\n        return new Promise((resolve) => this.resolveCallbackByEventId.set(eventId, resolve))\n    }\n\n}\n","import { WorkerMessageType } from '../../resource/wadworker/WorkerMessageType'\nimport { OffscreenLayer } from './OffscreenLayer'\n\nexport class GuiMainLayer extends OffscreenLayer {\n\n    onOptionsShow: () => any = () => console.log('Show options triggered')\n\n    constructor() {\n        super(new Worker(new URL('../../gui/GuiMainWorker', import.meta.url))) // webpack does not allow to extract the URL\n    }\n\n    onMessage(msg): boolean {\n        if (msg.type === WorkerMessageType.SHOW_OPTIONS) {\n            this.onOptionsShow()\n        } else {\n            return false\n        }\n        return true\n    }\n\n    setSpaceToContinue(state: boolean) {\n        this.sendMessage({type: WorkerMessageType.SPACE_TO_CONINUE, messageState: state})\n    }\n\n}\n","import { ObjectiveImageCfg } from '../../cfg/ObjectiveImageCfg'\nimport { GuiWorkerMessage } from '../../gui/GuiWorkerMessage'\nimport { WorkerMessageType } from '../../resource/wadworker/WorkerMessageType'\nimport { WorkerResponse } from '../../worker/WorkerResponse'\nimport { OffscreenLayer } from './OffscreenLayer'\n\nexport class OverlayLayer extends OffscreenLayer {\n\n    onSetSpaceToContinue: (state: boolean) => any = (state: boolean) => console.log('set space to continue: ' + state)\n    onAbortGame: () => any = () => console.log('abort the game')\n    onRestartGame: () => any = () => console.log('restart the game')\n\n    constructor() {\n        super(new Worker(new URL('../../gui/OverlayWorker', import.meta.url))) // webpack does not allow to extract the URL\n    }\n\n    onMessage(msg: WorkerResponse): boolean {\n        if (msg.type === WorkerMessageType.SPACE_TO_CONINUE) {\n            this.onSetSpaceToContinue(msg.messageState)\n        } else if (msg.type === WorkerMessageType.GAME_ABORT) {\n            this.onAbortGame()\n        } else if (msg.type === WorkerMessageType.GAME_RESTART) {\n            this.onRestartGame()\n        } else {\n            return false\n        }\n        return true\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.sendMessage({\n            type: WorkerMessageType.OVERLAY_SETUP,\n            objectiveText: objectiveText,\n            objectiveBackImgCfg: objectiveBackImgCfg,\n        })\n    }\n\n    protected sendMessage(message: GuiWorkerMessage, transfer?: Transferable[]) {\n        super.sendMessage(message, transfer)\n    }\n\n    showOptions() {\n        this.sendMessage({type: WorkerMessageType.SHOW_OPTIONS})\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { DeselectAll, SelectionChanged } from '../../event/LocalEvents'\nimport { EntityManager } from '../../game/EntityManager'\nimport { GameSelection } from '../../game/model/GameSelection'\nimport { SceneManager } from '../../game/SceneManager'\nimport { WorldManager } from '../../game/WorldManager'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class SelectionLayer extends ScreenLayer {\n\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    selectStart: { x: number, y: number } = null\n\n    constructor() {\n        super(true, true)\n    }\n\n    reset() {\n        super.reset()\n        this.selectStart = null\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        if (this.sceneMgr.hasBuildModeSelection()) return new Promise((resolve) => resolve(false))\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) return new Promise((resolve) => resolve(this.startSelection(cx, cy)))\n        } else if (event.eventEnum === POINTER_EVENT.MOVE) {\n            return new Promise((resolve) => resolve(this.changeSelection(cx, cy)))\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) return new Promise((resolve) => resolve(this.selectEntities(cx, cy)))\n        }\n        return new Promise((resolve) => resolve(false))\n    }\n\n    private startSelection(screenX: number, screenY: number) {\n        this.selectStart = {x: screenX, y: screenY}\n        return true\n    }\n\n    private changeSelection(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        this.context.strokeStyle = 'rgba(128, 192, 192, 0.5)'\n        this.context.lineWidth = 2\n        this.context.strokeRect(this.selectStart.x, this.selectStart.y, screenX - this.selectStart.x, screenY - this.selectStart.y)\n        return true\n    }\n\n    private selectEntities(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        let entities: GameSelection\n        if (Math.abs(screenX - this.selectStart.x) < 5 && Math.abs(screenY - this.selectStart.y) < 5) {\n            const x = (this.selectStart.x + screenX) / this.canvas.width - 1\n            const y = -(this.selectStart.y + screenY) / this.canvas.height + 1\n            entities = this.sceneMgr.getSelectionByRay(x, y)\n        } else {\n            const r1x = (this.selectStart.x / this.canvas.width) * 2 - 1\n            const r1y = -(this.selectStart.y / this.canvas.height) * 2 + 1\n            const r2x = (screenX / this.canvas.width) * 2 - 1\n            const r2y = -(screenY / this.canvas.height) * 2 + 1\n            entities = this.sceneMgr.getEntitiesInFrustum(r1x, r1y, r2x, r2y)\n        }\n        this.entityMgr.selection.set(entities)\n        EventBus.publishEvent(this.entityMgr.selection.isEmpty() ? new DeselectAll() : new SelectionChanged(this.entityMgr))\n        this.selectStart = null\n        return true\n    }\n\n}\n","import { LevelObjectiveTextEntry } from '../cfg/LevelObjectiveTextEntry'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { iGet } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { SetupPriorityList, UpdateRadarTerrain } from '../event/LocalEvents'\nimport { EntityManager } from '../game/EntityManager'\nimport { GuiManager } from '../game/GuiManager'\nimport { GameResult, GameResultState } from '../game/model/GameResult'\nimport { GameState } from '../game/model/GameState'\nimport { ObjectListLoader } from '../game/ObjectListLoader'\nimport { SceneManager } from '../game/SceneManager'\nimport { Supervisor } from '../game/Supervisor'\nimport { WorldManager } from '../game/WorldManager'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\nimport { GameLayer } from './layer/GameLayer'\nimport { GuiMainLayer } from './layer/GuiMainLayer'\nimport { OverlayLayer } from './layer/OverlayLayer'\nimport { SelectionLayer } from './layer/SelectionLayer'\n\nexport class GameScreen extends BaseScreen {\n\n    onLevelEnd: (result: GameResult) => any = () => console.log('Level aborted')\n    gameLayer: GameLayer\n    selectionLayer: SelectionLayer\n    guiLayer: GuiMainLayer\n    overlayLayer: OverlayLayer\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    entityMgr: EntityManager\n    guiMgr: GuiManager\n    levelName: string\n    levelConf: LevelEntryCfg\n\n    constructor() {\n        super()\n        this.gameLayer = this.addLayer(new GameLayer(this), 0)\n        this.selectionLayer = this.addLayer(new SelectionLayer(), 10)\n        this.guiLayer = this.addLayer(new GuiMainLayer(), 20)\n        this.overlayLayer = this.addLayer(new OverlayLayer(), 30)\n        this.entityMgr = new EntityManager()\n        this.worldMgr = new WorldManager()\n        this.sceneMgr = new SceneManager(this.gameLayer.canvas)\n        this.sceneMgr.worldMgr = this.worldMgr\n        this.sceneMgr.entityMgr = this.entityMgr\n        this.worldMgr.sceneMgr = this.sceneMgr\n        this.worldMgr.entityMgr = this.entityMgr\n        this.worldMgr.jobSupervisor = new Supervisor(this.worldMgr.sceneMgr, this.worldMgr.entityMgr)\n        this.cursorLayer.worldMgr = this.worldMgr\n        this.cursorLayer.sceneMgr = this.sceneMgr\n        this.cursorLayer.entityMgr = this.entityMgr\n        this.gameLayer.worldMgr = this.worldMgr\n        this.gameLayer.sceneMgr = this.sceneMgr\n        this.gameLayer.entityMgr = this.entityMgr\n        this.selectionLayer.worldMgr = this.worldMgr\n        this.selectionLayer.sceneMgr = this.sceneMgr\n        this.selectionLayer.entityMgr = this.entityMgr\n        this.guiLayer.entityMgr = this.entityMgr\n        this.overlayLayer.entityMgr = this.entityMgr\n        this.guiMgr = new GuiManager(this.worldMgr, this.sceneMgr, this.entityMgr, this.gameLayer.canvas)\n        // link layer\n        this.guiLayer.onOptionsShow = () => this.overlayLayer.showOptions()\n        this.overlayLayer.onSetSpaceToContinue = (state: boolean) => this.guiLayer.setSpaceToContinue(state)\n        this.overlayLayer.onAbortGame = () => this.onLevelEnd(new GameResult(GameResultState.QUIT, this.entityMgr, this.worldMgr))\n        this.overlayLayer.onRestartGame = () => this.restartLevel()\n    }\n\n    startLevel(levelName: string, levelConf: LevelEntryCfg) {\n        this.levelName = levelName\n        this.levelConf = levelConf\n        this.setupAndStartLevel()\n    }\n\n    restartLevel() {\n        this.hide()\n        GameState.reset()\n        this.setupAndStartLevel()\n    }\n\n    private setupAndStartLevel() {\n        this.entityMgr.reset()\n        console.log('Starting level ' + this.levelName + ' - ' + this.levelConf.fullName)\n        this.worldMgr.setup(this.levelConf, (state) => this.onLevelEnd(new GameResult(state, this.entityMgr, this.worldMgr)))\n        this.sceneMgr.setupScene(this.levelConf)\n        // setup GUI\n        this.guiMgr.buildingCycleIndex = 0\n        this.guiLayer.reset()\n        const objectiveText: LevelObjectiveTextEntry = iGet(ResourceManager.getResource(this.levelConf.objectiveText), this.levelName)\n        this.overlayLayer.setup(objectiveText.objective, this.levelConf.objectiveImage640x480)\n        EventBus.publishEvent(new SetupPriorityList(this.levelConf.priorities))\n        // load in non-space objects next\n        ObjectListLoader.loadObjectList(this.levelConf, this.worldMgr, this.sceneMgr, this.entityMgr)\n        // finally generate initial radar panel map\n        EventBus.publishEvent(new UpdateRadarTerrain(this.sceneMgr.terrain, this.sceneMgr.controls.target.clone()))\n        this.show()\n    }\n\n    show() {\n        super.show()\n        this.sceneMgr.startScene()\n        this.worldMgr.unPause()\n        this.entityMgr.start()\n    }\n\n    hide() {\n        this.entityMgr.stop()\n        this.worldMgr.pause()\n        this.sceneMgr.disposeScene()\n        super.hide()\n    }\n\n    resize(width: number, height: number) {\n        super.resize(width, height)\n        this.sceneMgr?.resize(width, height)\n    }\n\n}\n","export function parseLabel(label: string[] | string): string {\n    const result = Array.isArray(label) ? label.join(',') : label // cfg parser does split(',')\n    return result?.replace(/_/g, ' ')\n}\n","export class MainMenuBaseItem {\n\n    x: number = 0\n    y: number = 0\n    width: number = 0\n    height: number = 0\n    zIndex: number = 100\n    scrollAffected = false\n    needsRedraw: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n    actionName: string = ''\n    targetIndex: number = 0\n\n    static compareZ(left: MainMenuBaseItem, right: MainMenuBaseItem) {\n        return left.zIndex === right.zIndex ? 0 : left.zIndex > right.zIndex ? -1 : 1\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const hover = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        if (this.hover !== hover) {\n            this.hover = hover\n            this.needsRedraw = true\n            this.onHoverChange()\n        }\n        if (!this.hover) this.pressed = false\n        return this.hover\n    }\n\n    onHoverChange() {\n    }\n\n    checkSetPressed() {\n        if (!this.hover) return\n        if (!this.pressed) this.needsRedraw = true\n        this.pressed = true\n    }\n\n    setReleased() {\n        if (this.pressed) this.needsRedraw = true\n        this.pressed = false\n    }\n\n    draw(context: SpriteContext) {\n        this.needsRedraw = false\n    }\n\n}\n","import { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuIconButton extends MainMenuBaseItem {\n\n    imgNormal = null\n    imgHover = null\n    imgPressed = null\n    tooltip = ''\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.imgNormal = ResourceManager.getImage(cfg.imgNormal)\n        this.imgHover = ResourceManager.getImage(cfg.imgHover)\n        this.imgPressed = ResourceManager.getImage(cfg.imgPressed)\n        this.tooltip = (cfg.tooltip || '').replace(/_/g, ' ')\n        this.width = Math.max(this.imgNormal.width, this.imgHover.width, this.imgPressed.width)\n        this.height = Math.max(this.imgNormal.height, this.imgHover.height, this.imgPressed.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: SpriteContext) {\n        super.draw(context)\n        let img = this.imgNormal\n        if (this.hover) img = this.imgHover\n        if (this.pressed) img = this.imgPressed\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuLabelButton extends MainMenuBaseItem {\n\n    labelImgLo = null\n    labelImgHi = null\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.labelImgLo = layer.loFont.createTextImage(cfg.label)\n        this.labelImgHi = layer.hiFont.createTextImage(cfg.label)\n        this.width = Math.max(this.labelImgLo.width, this.labelImgHi.width)\n        this.height = Math.max(this.labelImgLo.height, this.labelImgHi.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: SpriteContext) {\n        super.draw(context)\n        const img = this.hover && !this.pressed ? this.labelImgHi : this.labelImgLo\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { clearIntervalSafe } from '../core/Util'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { GamePointerEvent } from '../event/GamePointerEvent'\nimport { GameWheelEvent } from '../event/GameWheelEvent'\nimport { NATIVE_FRAMERATE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from '../screen/layer/ScreenLayer'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuIconButton } from './MainMenuIconButton'\nimport { MainMenuLabelButton } from './MainMenuLabelButton'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\n\nexport class MainMenuLayer extends ScaledLayer {\n\n    screen: MainMenuScreen\n    cfg: MenuEntryCfg\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    menuImage: SpriteImage\n    titleImage: SpriteImage\n    items: MainMenuBaseItem[] = []\n    scrollY: number = 0\n    scrollSpeedY: number = 0\n    scrollInterval = null\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg) {\n        super()\n        this.screen = screen\n        this.cfg = menuCfg\n        this.loFont = menuCfg.loFont ? ResourceManager.getBitmapFont(menuCfg.loFont) : null\n        this.hiFont = menuCfg.hiFont ? ResourceManager.getBitmapFont(menuCfg.hiFont) : null\n        this.menuImage = menuCfg.menuImage ? ResourceManager.getImage(menuCfg.menuImage) : null\n        this.titleImage = this.loFont.createTextImage(menuCfg.fullName)\n\n        menuCfg.itemsLabel.forEach((item) => {\n            if (item.label) {\n                this.items.push(new MainMenuLabelButton(this, item))\n            } else {\n                this.items.push(new MainMenuIconButton(this, item))\n            }\n        })\n\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n\n        this.onRedraw = (context) => {\n            context.drawImage(this.menuImage, 0, -this.scrollY)\n            if (menuCfg.displayTitle) context.drawImage(this.titleImage, (this.fixedWidth - this.titleImage.width) / 2, this.cfg.position[1])\n            this.items.forEach((item, index) => (this.items[this.items.length - 1 - index]).draw(context))\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.scrollY = 0\n        this.scrollSpeedY = 0\n    }\n\n    show() {\n        super.show()\n        const that = this\n        this.scrollInterval = setInterval(() => {\n            if (that.scrollSpeedY === 0) return\n            that.setScrollY(that.scrollSpeedY)\n        }, 1000 / NATIVE_FRAMERATE)\n    }\n\n    hide() {\n        this.scrollInterval = clearIntervalSafe(this.scrollInterval)\n        super.hide()\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        if (event.eventEnum === POINTER_EVENT.MOVE) {\n            const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n            let hovered = false\n            this.items.forEach((item) => {\n                if (!hovered) {\n                    const absY = sy + (item.scrollAffected ? this.scrollY : 0)\n                    hovered = item.checkHover(sx, absY)\n                } else {\n                    if (item.hover) item.needsRedraw = true\n                    item.hover = false\n                    item.setReleased()\n                }\n            })\n            if (this.cfg.canScroll) {\n                const scrollAreaHeight = 100\n                if (sy < scrollAreaHeight) {\n                    this.setScrollSpeedY(-(scrollAreaHeight - sy))\n                } else if (sy > this.fixedHeight - scrollAreaHeight) {\n                    this.setScrollSpeedY(sy - (this.fixedHeight - scrollAreaHeight))\n                } else {\n                    this.setScrollSpeedY(0)\n                }\n            }\n        } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => item.checkSetPressed())\n            }\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => {\n                    if (item.pressed) {\n                        item.setReleased()\n                        if (item.actionName.toLowerCase() === 'next') {\n                            this.screen.showMainMenu(item.targetIndex)\n                        } else if (item.actionName.toLowerCase() === 'selectlevel') {\n                            this.screen.selectLevel((item as MainMenuLevelButton).levelKey)\n                        } else if (item.actionName) {\n                            console.warn('not implemented: ' + item.actionName + ' - ' + item.targetIndex)\n                        }\n                    }\n                })\n            }\n        }\n        if (this.needsRedraw()) this.redraw()\n        return new Promise((resolve) => resolve(false))\n    }\n\n    private setScrollSpeedY(deltaY: number) {\n        this.scrollSpeedY = Math.sign(deltaY) * Math.pow(Math.round(deltaY / 20), 2)\n    }\n\n    handleWheelEvent(event: GameWheelEvent): Promise<boolean> {\n        if (!this.cfg.canScroll) return new Promise((resolve) => resolve(false))\n        this.setScrollY(event.deltaY)\n        return new Promise((resolve) => resolve(true))\n    }\n\n    private setScrollY(deltaY: number) {\n        const scrollYBefore = this.scrollY\n        this.scrollY = Math.min(Math.max(this.scrollY + deltaY, 0), this.menuImage.height - this.fixedHeight)\n        if (scrollYBefore !== this.scrollY) this.redraw()\n    }\n\n    needsRedraw(): boolean {\n        return this.items.some((item) => item.needsRedraw)\n    }\n\n}\n","import { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuLevelButton extends MainMenuBaseItem {\n\n    layer: MainMenuLayer\n    imgActive = null\n    imgInactive = null\n    imgCross = null\n    unlocked: boolean = false\n    levelKey: string = ''\n\n    constructor(layer: MainMenuLayer, levelKey: string, levelCfg: LevelEntryCfg) {\n        super()\n        this.layer = layer\n        this.actionName = 'selectlevel'\n        this.levelKey = levelKey\n        this.x = levelCfg.frontEndX\n        this.y = levelCfg.frontEndY\n        this.zIndex = 10\n        this.scrollAffected = true\n        const [imgActive, imgInactive, imgCross] = levelCfg.menuBMP\n        this.imgActive = ResourceManager.getImage(imgActive)\n        this.imgInactive = ResourceManager.getImage(imgInactive)\n        this.imgCross = ResourceManager.getImage(imgCross)\n        this.width = Math.max(this.imgActive.width, this.imgInactive.width, this.imgCross.width)\n        this.height = Math.max(this.imgActive.height, this.imgInactive.height, this.imgCross.height)\n        this.unlocked = levelCfg.frontEndOpen\n        this.unlocked = true // XXX don't unlock all levels by default\n    }\n\n    draw(context: SpriteContext) {\n        super.draw(context)\n        let img = this.imgCross\n        if (this.unlocked) img = this.hover ? this.imgActive : this.imgInactive\n        context.drawImage(img, this.x, this.y - this.layer.scrollY)\n    }\n\n}\n","import { createContext } from '../core/ImageHelper'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class MainMenuPanel extends MainMenuBaseItem {\n\n    context: SpriteContext\n\n    constructor(imgData: ImageData, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.zIndex = 50\n        this.context = createContext(imgData.width, imgData.height)\n        this.context.putImageData(imgData, 0, 0)\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const inRect = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        const hover = inRect && this.context.getImageData(sx, sy, 1, 1).data[3] > 0\n        if (this.hover !== hover) this.needsRedraw = true\n        this.hover = hover\n        return this.hover\n    }\n\n    draw(context: SpriteContext) {\n        super.draw(context)\n        context.drawImage(this.context.canvas, this.x, this.y, this.width, this.height)\n    }\n\n}\n","import { BitmapFont } from '../core/BitmapFont'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class MainMenuWindow extends MainMenuBaseItem {\n\n    font: BitmapFont\n    imgFirstLine = null\n    imgSecondLine = null\n\n    constructor(font: BitmapFont, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.font = font\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    setFirstLine(text: string) {\n        this.imgFirstLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    setSecondLine(text: string) {\n        this.imgSecondLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    draw(context: SpriteContext) {\n        super.draw(context)\n        const cx = this.x + this.width / 2, cy = this.y + this.height / 2\n        if (this.imgFirstLine) context.drawImage(this.imgFirstLine, cx - this.imgFirstLine.width / 2, cy - this.imgFirstLine.height)\n        if (this.imgSecondLine) context.drawImage(this.imgSecondLine, cx - this.imgSecondLine.width / 2, cy)\n    }\n\n}\n","import { parseLabel } from '../cfg/CfgHelper'\nimport { LevelEntryCfg, LevelsCfg } from '../cfg/LevelsCfg'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { iGet } from '../core/Util'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { MainMenuPanel } from './MainMenuPanel'\nimport { MainMenuWindow } from './MainMenuWindow'\n\nexport class LevelSelectLayer extends MainMenuLayer {\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg, modeLevel: boolean) {\n        super(screen, menuCfg)\n        const levelsCfg: LevelsCfg = ResourceManager.getResource('Levels')\n        const levelTextCfg = new LevelTextCfg()\n        this.items.push(new MainMenuPanel(levelTextCfg.panelImgData, levelTextCfg.panelPos))\n        const levelTextWindow = new MainMenuWindow(ResourceManager.getDefaultFont(), levelTextCfg.window)\n        levelTextWindow.setFirstLine(modeLevel ? levelTextCfg.level : levelTextCfg.tutorial)\n        this.items.push(levelTextWindow)\n        Object.keys(levelsCfg.levelsByName).forEach((levelKey) => {\n            const level: LevelEntryCfg = levelsCfg.levelsByName[levelKey]\n            const levelButton = new MainMenuLevelButton(this, levelKey, level)\n            levelButton.onHoverChange = () => levelTextWindow.setSecondLine(levelButton.hover ? level.fullName : '')\n            this.items.push(levelButton)\n        })\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n    }\n\n}\n\nclass LevelTextCfg {\n\n    window = {x: 0, y: 0, w: 0, h: 0}\n    panelImgData: ImageData\n    panelPos = {x: 0, y: 0, w: 0, h: 0}\n    level: string = ''\n    tutorial: string = ''\n\n    constructor() {\n        const cfg = ResourceManager.cfg('Menu', 'LevelText')\n        const winCfg = iGet(cfg, 'Window')\n        this.window = {x: winCfg[0], y: winCfg[1], w: winCfg[2], h: winCfg[3]}\n        const panelCfg = iGet(cfg, 'Panel')\n        this.panelImgData = ResourceManager.getImageData(panelCfg[0])\n        this.panelPos = {x: panelCfg[1], y: panelCfg[2], w: panelCfg[3], h: panelCfg[4]}\n        this.level = parseLabel(iGet(cfg, 'Level'))\n        this.tutorial = parseLabel(iGet(cfg, 'Tutorial'))\n    }\n\n}\n","import { MenuCfg } from '../cfg/MenuCfg'\nimport { LevelSelectLayer } from '../menu/LevelSelectLayer'\nimport { MainMenuLayer } from '../menu/MainMenuLayer'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\n\nexport class MainMenuScreen extends BaseScreen {\n\n    onLevelSelected: (levelName: string) => void = null\n    menus: MainMenuLayer[] = []\n\n    constructor() {\n        super()\n        const mainMenuFullCfg = ResourceManager.getResource('MainMenuFull') as MenuCfg\n        mainMenuFullCfg.menus.forEach((menuCfg) => {\n            let layer\n            if (menuCfg.title === 'Levels') {\n                layer = new LevelSelectLayer(this, menuCfg, true)\n            } else if (menuCfg.title === 'Tutorials') {\n                layer = new LevelSelectLayer(this, menuCfg, false)\n            } else {\n                layer = new MainMenuLayer(this, menuCfg)\n            }\n            this.menus.push(layer)\n            this.addLayer(layer)\n        })\n    }\n\n    showMainMenu(index: number = 0) {\n        this.menus.forEach((menu, i) => i === index ? menu.show() : menu.hide())\n        this.cursorLayer.show()\n    }\n\n    showLevelSelection() {\n        this.showMainMenu(1)\n    }\n\n    selectLevel(levelName) {\n        this.hide()\n        this.onLevelSelected(levelName)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class RewardScreenButton extends MainMenuBaseItem {\n\n    imgNormal: SpriteImage\n    imgHover: SpriteImage\n    imgPressed: SpriteImage\n    imgDisabled: SpriteImage\n    disabled: boolean = false\n    visible: boolean = true\n\n    constructor(conf: any) {\n        super()\n        let imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath;\n        [imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath, this.x, this.y] = conf\n        this.imgNormal = ResourceManager.getImage(imgNormalFilepath)\n        this.imgHover = ResourceManager.getImage(imgHoverFilepath)\n        this.imgPressed = ResourceManager.getImage(imgPressedFilepath)\n        this.imgDisabled = ResourceManager.getImage(imgDisabledFilepath)\n        this.width = this.imgNormal.width\n        this.height = this.imgNormal.height\n    }\n\n    draw(context: SpriteContext) {\n        super.draw(context)\n        if (!this.visible) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled\n        } else if (this.pressed) {\n            img = this.imgPressed\n        } else if (this.hover) {\n            img = this.imgHover\n        }\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { LevelRewardConfig } from '../cfg/LevelsCfg'\nimport { RewardCfg } from '../cfg/RewardCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { clearTimeoutSafe } from '../core/Util'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { GameResult, GameResultState } from '../game/model/GameResult'\nimport { GameState } from '../game/model/GameState'\nimport { RewardScreenButton } from '../menu/RewardScreenButton'\nimport { MAX_RAIDER_BASE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\nimport { ScaledLayer } from './layer/ScreenLayer'\n\nexport class RewardScreen extends BaseScreen {\n\n    onAdvance: () => void\n    cfg: RewardCfg = null\n    titleFont: BitmapFont\n    resultsLayer: ScaledLayer\n    descriptionTextLayer: ScaledLayer\n    btnLayer: ScaledLayer\n    resultIndex: number = 0\n    resultLastIndex: number = 0\n    images: { img: SpriteImage, x: number, y: number }[] = []\n    boxes: { img: SpriteImage, x: number, y: number }[] = []\n    fonts = {}\n    texts: SpriteImage[] = []\n    uncoverTimeout = null\n    btnSave: RewardScreenButton\n    btnAdvance: RewardScreenButton\n    levelFullNameImg: SpriteImage\n    rewardConfig: LevelRewardConfig\n    resultText: string\n    resultValues: SpriteImage[] = []\n\n    constructor() {\n        super()\n        this.cfg = ResourceManager.getResource('Reward')\n        this.titleFont = ResourceManager.getBitmapFont(this.cfg.titleFont)\n        const backgroundImg = ResourceManager.getImage(this.cfg.wallpaper)\n        const backgroundLayer = this.addLayer(new ScaledLayer())\n        backgroundLayer.onRedraw = (context) => context.drawImage(backgroundImg, 0, 0)\n        this.cfg.images.forEach((img) => {\n            this.images.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        this.cfg.boxImages.forEach((img) => {\n            this.boxes.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        Object.keys(this.cfg.fonts).forEach((fontKey, index) => {\n            const font = ResourceManager.getBitmapFont(this.cfg.fonts[fontKey])\n            this.fonts[fontKey.toLowerCase()] = font\n            const txt = this.cfg.texts[index]\n            const labelFont = index < 9 ? font : ResourceManager.getBitmapFont(this.cfg.backFont)\n            this.texts.push(labelFont.createTextImage(txt.text))\n        })\n        this.resultsLayer = this.addLayer(new ScaledLayer())\n        this.resultsLayer.handlePointerEvent = ((event) => {\n            if (event.eventEnum === POINTER_EVENT.UP) {\n                this.uncoverTimeout = clearTimeoutSafe(this.uncoverTimeout)\n                this.uncoverTimeout = null\n                this.resultIndex = this.resultLastIndex\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n                this.redraw()\n                return new Promise((resolve) => resolve(true))\n            }\n            return new Promise((resolve) => resolve(false))\n        })\n        this.descriptionTextLayer = this.addLayer(new ScaledLayer(), 20)\n        this.btnLayer = this.addLayer(new ScaledLayer(), 50)\n        this.btnSave = new RewardScreenButton(this.cfg.saveButton)\n        this.btnSave.disabled = true\n        this.btnAdvance = new RewardScreenButton(this.cfg.advanceButton)\n        this.btnLayer.handlePointerEvent = ((event) => {\n            if (event.eventEnum === POINTER_EVENT.MOVE) {\n                const [sx, sy] = this.btnLayer.toScaledCoords(event.clientX, event.clientY)\n                this.btnSave.checkHover(sx, sy)\n                this.btnAdvance.checkHover(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    this.btnSave.checkSetPressed()\n                    this.btnAdvance.checkSetPressed()\n                }\n            } else if (event.eventEnum === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    if (this.btnSave.pressed) {\n                        this.btnSave.setReleased()\n                        // TODO switch to save screen\n                    } else if (this.btnAdvance.pressed) {\n                        this.btnAdvance.setReleased()\n                        this.hide()\n                        this.onAdvance()\n                    }\n                }\n            }\n            if (this.btnSave.needsRedraw || this.btnAdvance.needsRedraw) this.redraw()\n            return new Promise((resolve) => resolve(false))\n        })\n        this.btnLayer.onRedraw = (context) => {\n            this.btnSave.draw(context)\n            this.btnAdvance.draw(context)\n        }\n    }\n\n    setGameResult(result: GameResult) {\n        this.resultText = this.cfg.quitText\n        this.resultLastIndex = this.images.length - 2\n        if (result.state === GameResultState.COMPLETE) {\n            this.resultText = this.cfg.completeText\n            this.resultLastIndex = this.images.length - 1\n        } else if (result.state === GameResultState.FAILED) {\n            this.resultText = this.cfg.failedText\n        }\n        this.resultValues = []\n        this.resultValues.push(this.fonts['crystals'].createTextImage(this.percentString(GameState.numCrystal, GameState.neededCrystals)))\n        this.resultValues.push(this.fonts['ore'].createTextImage(this.percentString(GameState.numOre, GameState.totalOres)))\n        this.resultValues.push(this.fonts['diggable'].createTextImage(this.percentString(GameState.remainingDiggables, GameState.totalDiggables, true)))\n        this.resultValues.push(this.fonts['constructions'].createTextImage(result.numBuildings.toString()))\n        this.resultValues.push(this.fonts['caverns'].createTextImage(this.percentString(GameState.discoveredCaverns, GameState.totalCaverns)))\n        this.resultValues.push(this.fonts['figures'].createTextImage(this.percentString(result.numRaiders, result.numMaxRaiders)))\n        this.resultValues.push(this.fonts['rockmonsters'].createTextImage(this.percentString(0))) // TODO show defence report, is either 0% or 100%\n        this.resultValues.push(this.fonts['oxygen'].createTextImage(this.percentString(GameState.airLevel)))\n        this.resultValues.push(this.fonts['timer'].createTextImage(this.timeString(result.gameTimeSeconds)))\n        this.resultValues.push(this.fonts['score'].createTextImage(this.percentString(this.calcScore(result))))\n    }\n\n    calcScore(result: GameResult): number {\n        if (!this.rewardConfig) return 0\n        let quota = this.rewardConfig.quota\n        let importance = this.rewardConfig.importance\n        const scoreCrystals = GameState.numCrystal >= (quota.crystals || Infinity) ? importance.crystals : 0\n        const scoreTimer = result.gameTimeSeconds <= (quota.timer || 0) ? importance.timer : 0\n        const scoreCaverns = quota.caverns ? Math.min(1, GameState.discoveredCaverns / quota.caverns) * importance.caverns : 0\n        const scoreConstructions = quota.constructions ? Math.min(1, result.numBuildings / quota.constructions * importance.constructions) : 0\n        const scoreOxygen = GameState.airLevel * importance.oxygen\n        const scoreFigures = result.numRaiders >= MAX_RAIDER_BASE ? importance.figures : 0\n        return Math.max(0, Math.min(100, Math.round(scoreCrystals + scoreTimer + scoreCaverns + scoreConstructions + scoreOxygen + scoreFigures) / 100))\n    }\n\n    show() {\n        this.resultIndex = 0\n        this.btnSave.visible = false\n        this.btnAdvance.visible = false\n        this.uncoverResult()\n        const gameResultTextImg = this.titleFont.createTextImage(this.resultText)\n        this.resultsLayer.onRedraw = (context) => {\n            context.clearRect(0, 0, this.resultsLayer.fixedWidth, this.resultsLayer.fixedHeight)\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const img = this.images[c]\n                if (img) context.drawImage(img.img, img.x, img.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const box = this.boxes[c]\n                if (box) context.drawImage(box.img, box.x, box.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const txt = this.cfg.texts[c]\n                const text = this.resultValues[c]\n                if (text) context.drawImage(text, txt.x - text.width / 2, txt.y)\n            }\n            context.drawImage(this.levelFullNameImg, this.resultsLayer.fixedWidth / 2 - this.levelFullNameImg.width / 2, this.cfg.vertSpacing - this.levelFullNameImg.height / 2)\n            context.drawImage(gameResultTextImg, this.resultsLayer.fixedWidth / 2 - gameResultTextImg.width / 2, this.cfg.vertSpacing + this.levelFullNameImg.height / 2)\n        }\n        this.descriptionTextLayer.onRedraw = (context) => {\n            const descriptionTextImg = this.texts[this.resultIndex]\n            context.clearRect(0, this.cfg.textPos[1], this.descriptionTextLayer.fixedWidth, this.descriptionTextLayer.fixedHeight - this.cfg.textPos[1])\n            const tx = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[0] : 305\n            const ty = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[1] : 195\n            context.drawImage(descriptionTextImg, tx - descriptionTextImg.width / 2, ty)\n        }\n        super.show()\n    }\n\n    percentString(actual, max = 1, lessIsMore: boolean = false) {\n        if (max === 0) max = 1\n        let value = Math.round(Math.max(Math.min(actual / max, 1), 0) * 100)\n        if (lessIsMore) value = 100 - value\n        return value.toString() + '%'\n    }\n\n    padLeft(value: string, padding = '0', length = 2) {\n        while (value.length < length) value = padding + value\n        return value\n    }\n\n    timeString(seconds: number) {\n        const ss = this.padLeft((seconds % 60).toString())\n        const minutes = Math.floor(seconds / 60)\n        const mm = this.padLeft(((minutes % 60).toString()))\n        const hh = this.padLeft((Math.floor(minutes / 60).toString()))\n        return hh + ':' + mm + ':' + ss\n    }\n\n    uncoverResult() {\n        this.uncoverTimeout = setTimeout(() => {\n            this.uncoverTimeout = null\n            this.resultIndex++\n            if (this.resultIndex < this.resultLastIndex) {\n                this.uncoverResult()\n            } else {\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n            }\n            this.redraw()\n        }, this.cfg.timer * 1000)\n    }\n\n    setup(levelFullName: string, rewardConfig: LevelRewardConfig) {\n        this.levelFullNameImg = this.titleFont.createTextImage(levelFullName)\n        this.rewardConfig = rewardConfig\n    }\n\n}\n","import { ClearCacheButton } from '../site/clearcache/ClearCacheButton'\nimport { GithubBox } from '../site/github/github-box'\nimport { WadFileSelectionModal } from '../site/modal/WadFileSelectionModal'\nimport { LevelEntryCfg } from './cfg/LevelsCfg'\nimport { getRandomInclusive } from './core/Util'\nimport { GameState } from './game/model/GameState'\nimport { DEV_MODE } from './params'\nimport { ResourceManager } from './resource/ResourceManager'\nimport { GameScreen } from './screen/GameScreen'\nimport { LoadingScreen } from './screen/LoadingScreen'\nimport { MainMenuScreen } from './screen/MainMenuScreen'\nimport { RewardScreen } from './screen/RewardScreen'\n\nif (DEV_MODE) console.warn('DEV MODE ACTIVE')\n\n// setup and link all components\n\nconst loadingScreen = new LoadingScreen()\nconst wadFileSelectModal = new WadFileSelectionModal('game-container')\nconst githubBox = new GithubBox('game-container')\nconst clearCacheButton = new ClearCacheButton('game-container')\n\nwadFileSelectModal.onStart = (wad0Url, wad1Url) => {\n    ResourceManager.startLoadingFromUrl(wad0Url, wad1Url)\n}\nResourceManager.onMessage = (msg: string) => {\n    loadingScreen.setLoadingMessage(msg)\n}\nResourceManager.onCacheMissed = () => {\n    wadFileSelectModal.show()\n}\nResourceManager.onInitialLoad = (totalResources: number) => {\n    wadFileSelectModal.hide()\n    loadingScreen.enableGraphicMode(totalResources)\n}\nResourceManager.onAssetLoaded = () => {\n    loadingScreen.increaseLoadingState()\n}\nResourceManager.onLoadDone = () => {\n    // complete setup\n    const mainMenuScreen = new MainMenuScreen()\n    const gameScreen = new GameScreen()\n    const rewardScreen = new RewardScreen()\n\n    mainMenuScreen.onLevelSelected = (levelName) => {\n        let levelConf: LevelEntryCfg = null\n        try {\n            levelConf = ResourceManager.getResource('Levels').levelsByName[levelName]\n            if (levelConf) {\n                rewardScreen.setup(levelConf.fullName, levelConf.reward)\n                gameScreen.startLevel(levelName, levelConf)\n            }\n        } catch (e) {\n            console.error('Could not load level: ' + levelName, e)\n        } finally {\n            if (!levelConf) {\n                console.error('Could not find level configuration for \"' + levelName + '\"')\n                gameScreen.hide()\n                mainMenuScreen.showLevelSelection()\n            }\n        }\n    }\n    gameScreen.onLevelEnd = (result) => {\n        gameScreen.hide()\n        rewardScreen.setGameResult(result)\n        rewardScreen.show()\n    }\n    rewardScreen.onAdvance = () => {\n        GameState.reset()\n        mainMenuScreen.showLevelSelection()\n    }\n\n    // setup complete\n    loadingScreen.hide()\n    githubBox.hide()\n    clearCacheButton.hide()\n    const params = new URLSearchParams(window.location.search)\n    const entry = params.get('entry')\n    if (DEV_MODE && entry) {\n        GameState.numOre = Number(params.get('numOre')) || 0\n        GameState.numCrystal = Number(params.get('numCrystal')) || 0\n        if (entry === 'level') mainMenuScreen.showLevelSelection()\n        else if (entry === 'reward') rewardScreen.show()\n        else if (entry === 'random') mainMenuScreen.selectLevel('Level' + (('00' + getRandomInclusive(1, 25)).substr(-2)))\n        else if (entry) mainMenuScreen.selectLevel(entry)\n    } else {\n        mainMenuScreen.showMainMenu()\n    }\n}\n\n// start the game engine with loading resources\n\nloadingScreen.show()\nResourceManager.startLoadingFromCache()\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\nimport { ScaledLayer } from './layer/ScreenLayer'\n\nexport class LoadingScreen extends BaseScreen {\n\n    layer: ScaledLayer\n    assetIndex: number = 0\n\n    constructor() {\n        super()\n        this.layer = this.addLayer(new ScaledLayer())\n    }\n\n    show() {\n        this.layers.forEach((layer) => {\n            if (layer !== this.cursorLayer) layer.show()\n        })\n        this.setLoadingMessage('Loading...')\n    }\n\n    setLoadingMessage(text) {\n        this.layer.onRedraw = (context) => {\n            // clear the screen to black\n            context.fillStyle = 'black'\n            context.fillRect(0, 0, this.layer.fixedWidth, this.layer.fixedHeight)\n            // draw the loading title\n            context.font = '24px Arial'\n            context.fillStyle = 'white'\n            context.fillText('Loading Rock Raiders', 20, this.layer.fixedHeight - 50)\n            // hard-code the first loading message\n            context.font = '18px Arial'\n            context.fillStyle = 'white'\n            context.fillText(text, 20, this.layer.fixedHeight - 20)\n        }\n        this.redraw()\n    }\n\n    enableGraphicMode(totalResources: number) {\n        const imgBackground = ResourceManager.getImage(ResourceManager.cfg('Main', 'LoadScreen'))\n        const imgProgress = ResourceManager.getImage(ResourceManager.cfg('Main', 'ProgressBar'))\n        const imgLoading = ResourceManager.getDefaultFont().createTextImage(ResourceManager.cfg('Main', 'LoadingText'))\n        this.layer.onRedraw = (context => {\n            context.drawImage(imgBackground, 0, 0)\n            const loadingBarWidth = 353 * (this.assetIndex < totalResources ? Math.round(this.assetIndex / totalResources) : 1)\n            context.drawImage(imgProgress, 142, 450, loadingBarWidth, 9)\n            context.drawImage(imgLoading, Math.round(320 - imgLoading.width / 2), Math.round(456 - imgLoading.height / 2))\n        })\n        this.cursorLayer.show()\n        this.redraw()\n    }\n\n    increaseLoadingState() {\n        this.assetIndex++\n        this.redraw()\n    }\n\n}\n","export const DEV_MODE = process.env.WEBPACK_MODE === 'development'\nexport const WAD_CACHE_DB_NAME = 'RockRaidersWeb'\nexport const JOB_SCHEDULE_INTERVAL = 1000 // milliseconds\nexport const CHECK_CLEAR_RUBBLE_INTERVAL = 5000 // milliseconds\nexport const CHECK_SPAWN_RAIDER_TIMER = 1000 // milliseconds\nexport const MAX_RAIDER_BASE = 12\nexport const MAX_RAIDER_REQUEST = 9\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10\nexport const PANEL_ANIMATION_MULTIPLIER = 3\nexport const HEIGHT_MULTIPLIER = 0.1\nexport const SEQUENCE_TEXTURE_INTERVAL_MS = 1000 / 5\nexport const KEY_PAN_SPEED = 20\nexport const SPIDER_SLIP_RANGE_SQ = 49\nexport const ITEM_ACTION_RANGE_SQ = 49\nexport const UPDATE_INTERVAL_MS = Math.round(1000 / 30)\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640\nexport const SPRITE_RESOLUTION_HEIGHT = 480\nexport const TILESIZE = 40\nexport const NATIVE_FRAMERATE = 30\nexport const NATIVE_UPDATE_INTERVAL = 1000 / NATIVE_FRAMERATE\n"],"sourceRoot":""}