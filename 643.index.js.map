{"version":3,"sources":["webpack://rock-raiders-web/./site/clearcache/clearCacheButton.css","webpack://rock-raiders-web/./site/github/github.css","webpack://rock-raiders-web/./site/clearcache/clearCacheButton.css?9693","webpack://rock-raiders-web/./site/clearcache/ClearCacheButton.ts","webpack://rock-raiders-web/./site/github/github.css?bbb3","webpack://rock-raiders-web/./site/github/github-box.ts","webpack://rock-raiders-web/./site/modal/WadFileSelectionModal.ts","webpack://rock-raiders-web/./src/event/EventKeyEnum.ts","webpack://rock-raiders-web/./src/game/model/EntityType.ts","webpack://rock-raiders-web/./src/screen/Cursors.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTool.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/event/EventBus.ts","webpack://rock-raiders-web/./src/game/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTraining.ts","webpack://rock-raiders-web/./src/game/model/Selectable.ts","webpack://rock-raiders-web/./src/event/GameEvent.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityList.ts","webpack://rock-raiders-web/./src/core/ImageHelper.js","webpack://rock-raiders-web/./src/game/model/anim/AnimationEntityType.ts","webpack://rock-raiders-web/./src/screen/DebugHelper.ts","webpack://rock-raiders-web/./src/game/model/collect/BarrierLocation.ts","webpack://rock-raiders-web/./src/game/model/map/WallType.ts","webpack://rock-raiders-web/./src/game/model/map/SurfaceGeometry.ts","webpack://rock-raiders-web/./src/game/model/building/BuildPlacementMarkerMesh.ts","webpack://rock-raiders-web/./src/game/model/building/BuildPlacementMarker.ts","webpack://rock-raiders-web/./src/game/model/map/astar.ts","webpack://rock-raiders-web/./src/event/WorldEvents.ts","webpack://rock-raiders-web/./src/event/WorldLocationEvent.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimClip.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimSubObj.ts","webpack://rock-raiders-web/./src/resource/AnimatedMesh.ts","webpack://rock-raiders-web/./src/resource/LWOLoader.ts","webpack://rock-raiders-web/./src/resource/LWSCLoader.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityIdentifier.ts","webpack://rock-raiders-web/./src/game/model/job/JobState.ts","webpack://rock-raiders-web/./src/game/model/job/JobType.ts","webpack://rock-raiders-web/./src/game/model/activities/BaseActivity.ts","webpack://rock-raiders-web/./src/game/model/activities/AnimEntityActivity.ts","webpack://rock-raiders-web/./src/game/model/anim/AnimEntity.ts","webpack://rock-raiders-web/./src/game/model/BaseEntity.ts","webpack://rock-raiders-web/./src/game/model/job/Job.ts","webpack://rock-raiders-web/./src/game/model/job/CarryJob.ts","webpack://rock-raiders-web/./src/game/model/activities/RaiderActivity.ts","webpack://rock-raiders-web/./src/game/model/PathTarget.ts","webpack://rock-raiders-web/./src/game/model/activities/BuildingActivity.ts","webpack://rock-raiders-web/./src/game/model/collect/CarryPathTarget.ts","webpack://rock-raiders-web/./src/game/model/collect/MaterialEntity.ts","webpack://rock-raiders-web/./src/game/model/collect/Crystal.ts","webpack://rock-raiders-web/./src/game/model/activities/DynamiteActivity.ts","webpack://rock-raiders-web/./src/game/model/job/surface/CarryDynamiteJob.ts","webpack://rock-raiders-web/./src/game/model/collect/Dynamite.ts","webpack://rock-raiders-web/./src/game/model/collect/Ore.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ClearRubbleJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/DrillJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ReinforceJob.ts","webpack://rock-raiders-web/./src/game/model/map/Surface.ts","webpack://rock-raiders-web/./src/game/TerrainLoader.ts","webpack://rock-raiders-web/./src/resource/wadworker/WorkerMessageType.ts","webpack://rock-raiders-web/./src/game/model/MoveState.ts","webpack://rock-raiders-web/./src/game/model/map/TerrainPath.ts","webpack://rock-raiders-web/./src/game/model/map/Terrain.ts","webpack://rock-raiders-web/./src/game/SceneManager.ts","webpack://rock-raiders-web/./src/core/BitmapFont.ts","webpack://rock-raiders-web/./src/resource/ResourceCache.ts","webpack://rock-raiders-web/./src/resource/wadworker/InitLoadingMessage.ts","webpack://rock-raiders-web/./src/resource/ResourceManager.ts","webpack://rock-raiders-web/./src/resource/AnimEntityLoader.ts","webpack://rock-raiders-web/./src/game/model/activities/BarrierActivity.ts","webpack://rock-raiders-web/./src/game/model/job/surface/CompletePowerPathJob.ts","webpack://rock-raiders-web/./src/game/model/building/BuildingSite.ts","webpack://rock-raiders-web/./src/game/model/collect/Barrier.ts","webpack://rock-raiders-web/./src/game/model/job/CarryFenceJob.ts","webpack://rock-raiders-web/./src/game/model/collect/ElectricFence.ts","webpack://rock-raiders-web/./src/game/model/building/BuildingEntity.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Barracks.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Docks.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Geodome.ts","webpack://rock-raiders-web/./src/game/model/building/entities/GunStation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/OreRefinery.ts","webpack://rock-raiders-web/./src/game/model/building/entities/PowerStation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/TeleportBig.ts","webpack://rock-raiders-web/./src/game/model/building/entities/TeleportPad.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Toolstation.ts","webpack://rock-raiders-web/./src/game/model/building/entities/Upgrade.ts","webpack://rock-raiders-web/./src/game/model/job/EatJob.ts","webpack://rock-raiders-web/./src/game/model/job/GetToolJob.ts","webpack://rock-raiders-web/./src/game/model/job/TrainJob.ts","webpack://rock-raiders-web/./src/game/model/job/UpgradeJob.ts","webpack://rock-raiders-web/./src/game/GuiManager.ts","webpack://rock-raiders-web/./src/game/model/job/MoveJob.ts","webpack://rock-raiders-web/./src/game/model/EntityStep.ts","webpack://rock-raiders-web/./src/game/model/MovableEntity.ts","webpack://rock-raiders-web/./src/game/model/FulfillerEntity.ts","webpack://rock-raiders-web/./src/game/model/raider/Raider.ts","webpack://rock-raiders-web/./src/game/model/activities/MonsterActivity.ts","webpack://rock-raiders-web/./src/game/model/monster/Monster.ts","webpack://rock-raiders-web/./src/game/model/monster/Bat.ts","webpack://rock-raiders-web/./src/game/model/monster/SmallSpider.ts","webpack://rock-raiders-web/./src/game/ObjectListLoader.ts","webpack://rock-raiders-web/./src/event/EventTypeEnum.ts","webpack://rock-raiders-web/./src/game/Supervisor.ts","webpack://rock-raiders-web/./src/core/NerpRunner.ts","webpack://rock-raiders-web/./src/core/NerpParser.ts","webpack://rock-raiders-web/./src/game/WorldManager.ts","webpack://rock-raiders-web/./src/screen/layer/ScreenLayer.ts","webpack://rock-raiders-web/./src/event/GameKeyboardEvent.ts","webpack://rock-raiders-web/./src/event/GamePointerEvent.ts","webpack://rock-raiders-web/./src/event/GameWheelEvent.ts","webpack://rock-raiders-web/./src/event/EventManager.ts","webpack://rock-raiders-web/./src/screen/layer/CursorLayer.ts","webpack://rock-raiders-web/./src/screen/BaseScreen.ts","webpack://rock-raiders-web/./src/event/GuiCommand.ts","webpack://rock-raiders-web/./src/screen/layer/GameLayer.ts","webpack://rock-raiders-web/./src/screen/layer/OffscreenLayer.ts","webpack://rock-raiders-web/./src/screen/layer/GuiMainLayer.ts","webpack://rock-raiders-web/./src/screen/layer/OverlayLayer.ts","webpack://rock-raiders-web/./src/screen/layer/SelectionLayer.ts","webpack://rock-raiders-web/./src/screen/GameScreen.ts","webpack://rock-raiders-web/./src/menu/MainMenuBaseItem.ts","webpack://rock-raiders-web/./src/menu/MainMenuIconButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLabelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLayer.ts","webpack://rock-raiders-web/./src/menu/MainMenuLevelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuPanel.ts","webpack://rock-raiders-web/./src/menu/MainMenuWindow.ts","webpack://rock-raiders-web/./src/menu/LevelSelectLayer.ts","webpack://rock-raiders-web/./src/screen/MainMenuScreen.ts","webpack://rock-raiders-web/./src/menu/RewardScreenButton.ts","webpack://rock-raiders-web/./src/screen/RewardScreen.ts","webpack://rock-raiders-web/./src/main.ts","webpack://rock-raiders-web/./src/screen/LoadingScreen.ts","webpack://rock-raiders-web/./src/params.ts"],"names":["___CSS_LOADER_EXPORT___","push","module","id","ClearCacheButton","parentId","this","rootElement","document","getElementById","appendChild","createElement","classList","add","button","innerText","onclick","indexedDB","deleteDatabase","location","reload","style","visibility","GithubBox","link","href","img","src","alt","textContent","WadFileSelectionModal","onStart","tabIndex","setAttribute","modalDialog","modalContent","modalHeader","modalTitle","modalBody","navTabList","navFileBtn","appendNavButton","navUrlBtn","navTabContent","appendNavFileTab","appendNavUrlTab","modal","backdrop","keyboard","parent","active","controlTarget","navBtn","type","String","labelledBy","navFileTab","appendNavTab","wad0File","appendWadFileGroup","wad1File","btnStartFile","addEventListener","disabled","wad0FileUrl","URL","createObjectURL","files","wad1FileUrl","filename","wadFileGroup","wadFileLabel","innerHTML","wadFileInput","required","navUrlTab","urlHint","wad0Url","appendWadUrlGroup","wad1Url","btnStartUrl","value","navTab","example","wadUrlGroup","wadUrlLabel","wadUrlInput","show","hide","EntityType","EntitySuperType","Cursors","RaiderTool","EventKey","getFilename","url","strUrl","toString","replace","startsWith","substring","lastInd","lastIndexOf","iGet","obj","keys","forEach","keyname","Object","filter","key","toLowerCase","map","decodeString","data","TextDecoder","decode","decodeFilepath","getRandomInclusive","min","max","Math","ceil","floor","random","getRandom","getRandomSign","clearTimeoutSafe","timeout","clearTimeout","clearIntervalSafe","interval","clearInterval","Array","prototype","remove","element","index","indexOf","splice","last","length","undefined","count","callback","counter","e","partition","left","right","a","Map","getOrUpdate","updateCallback","get","set","equalsIgnoreCase","other","EventBus","event","blockedEvents","includes","eventKey","isLocal","console","log","workerListener","getListener","eventListener","SurfaceType","options","shaping","matIndex","selectable","drillable","drillableHard","explodable","reinforcable","cursor","Pointer_Standard","statsDrillName","canCarryFence","assign","typeNum","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","error","GROUND","name","Pointer_SurfaceType_Immovable","Pointer_SurfaceType_Hard","Pointer_SurfaceType_Medium","Pointer_SurfaceType_Loose","Pointer_SurfaceType_OreSeam","Pointer_SurfaceType_CrystalSeam","Pointer_SurfaceType_RechargeSeam","POWER_PATH","POWER_PATH_SITE","AllRaiderTools","DRILL","HAMMER","SHOVEL","SPANNER","FREEZERGUN","LASER","PUSHERGUN","BIRDSCARER","RaiderTraining","AllRaiderTrainings","DRIVER","ENGINEER","GEOLOGIST","PILOT","SAILOR","DEMOLITION","RaiderTrainingSites","BARRACKS","UPGRADE","GEODOME","TELEPORT_PAD","DOCKS","TOOLSTATION","RaiderTrainingStatsProperty","SelectionType","GameEvent","guiForward","LocalEvent","super","SelectionChanged","selectionType","NOTHING","selectedSurface","selectedBuilding","selectedRaiders","canDoTraining","everyHasTool","isGround","surfaceType","isPowerPath","isFloor","hasRubble","isDrillable","isDrillableHard","isReinforcable","canPlaceFence","GameState","buildings","some","b","entityType","POWER_STATION","isUsable","someCarries","r","carries","everyHasMaxLevel","every","level","stats","Levels","training","getTrainingSites","hasTraining","tool","hasTool","buildingCanUpgrade","canUpgrade","buildingCanSwitchPower","SelfPowered","PowerBuilding","AirLevelChanged","airLevel","ChangeCursor","SetupPriorityList","priorityList","BuildingsChangedEvent","usableBuildingsByTypeAndLevel","perLevel","building","minLevel","result","RaidersChangedEvent","numRaiders","raiders","GameResultState","PriorityList","levelDefault","current","priorities","reset","enabled","tmp","entry","PriorityEntry","c","job","priority","j","getPriorityIdentifier","priorityIdentifier","find","levelPriorityEntry","resultState","RUNNING","levelFullName","numCrystal","numOre","numBrick","usedCrystals","neededCrystals","selectedEntities","buildingsUndiscovered","raidersUndiscovered","requestedRaiders","materials","materialsUndiscovered","buildingSites","spiders","spidersBySurface","bats","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","discoveredCaverns","levelStartTime","levelStopTime","rewardConfig","oxygenRate","buildModeSelection","objectiveShown","objectiveSwitch","buildingTypes","bt","position","targetBuildings","getBuildingsByType","closest","minDist","bPos","getDropPosition","dist","distanceToSquared","entities","previouslySelected","stillSelected","deselect","freshlySelected","select","len","GROUP","getSelectionType","publishEvent","surface","minX","x","minZ","y","maxX","maxZ","discoverEntities","undiscovered","discovered","pos","getPosition","z","onDiscover","round","quota","importance","scoreCrystals","crystals","Infinity","scoreTimer","gameTimeSeconds","timer","scoreCaverns","caverns","scoreConstructions","constructions","scoreOxygen","oxygen","scoreFigures","figures","SURFACE","BUILDING","RAIDER","entity","terrain","sceneMgr","currentSurface","getSurfaceFromWorld","nearbySpiders","getSurface","createContext","width","height","fillStyle","fillRect","createDummyContext","canvas","OffscreenCanvas","context","getContext","createDummyImgData","ImageData","px","py","setPixel","imgData","g","n","getPixel","AnimationEntityType","carryNullName","depositNullName","toolNullName","mediumPoly","highPoly","fPPoly","activities","Stats","DebugHelper","setMode","domElement","top","body","begin","end","BarrierLocation","surfaceCenter","heading","clone","sub","angle","PI","WALL_TYPE","SurfaceGeometry","wallType","topLeftVertex","bottomRightVertex","topRightVertex","bottomLeftVertex","topLeftHeight","topRightHeight","bottomRightHeight","bottomLeftHeight","uvOffset","INVERTED_CORNER","WALL","WEIRD_CREVICE","Boolean","uv","bufferVertices","bufferNormals","addFaceAndNormals","normal","subVectors","cross","normalize","uvIndexes","bufferVertexUvs","i","bufferGeometry","BufferAttribute","Float32Array","copyVector3sArray","copyVector2sArray","BuildPlacementMarkerMesh","standardColor","geometry","shininess","transparent","opacity","color","visible","primaryPosition","multiplyScalar","applyAxisAngle","isValid","material","setHex","create","BuildPlacementMarker","group","markers","buildingMarkerPrimary","buildingMarkerSecondary","powerPathMarkerPrimary","powerPathMarkerSecondary","waterPathMarker","sdx","sdz","lastCheck","visibleSurfaces","primarySurface","secondarySurface","waterSurface","buildingMarkerColor","pathMarkerColor","waterMarkerColor","addMarker","marker","worldPosition","updateAllMarker","markAsValid","hideAllMarker","copy","getFloorPosition","sdxv","sdzv","abs","sign","atan2","updateState","secondaryBuildingPart","primaryPowerPath","secondaryPowerPath","waterPathSurface","s","neighbors","m","barrierLocations","center","getCenterWorld2D","barrierOffset","secondary","dx","dy","pathTo","node","curr","path","unshift","astar","graph","start","cleanDirty","heuristic","heuristics","manhattan","openHeap","BinaryHeap","f","closestNode","h","markDirty","size","currentNode","pop","closed","il","neighbor","isWall","gScore","getCost","beenVisited","visited","rescoreElement","pos0","pos1","D2","sqrt","d1","d2","Graph","gridIn","nodes","grid","dirtyNodes","diagonal","row","GridNode","init","cleanNode","ret","graphString","rowDebug","weight","join","fromNeighbor","scoreFunction","content","sinkDown","bubbleUp","parentN","elemScore","child2N","child1N","child1Score","swap","child1","child2","WorldEvent","entityKey","JobEvent","JobCreateEvent","JobDeleteEvent","RequestedRaidersChanged","numRequestedRaiders","MaterialAmountChanged","usedCrystal","neededCrystal","totalOre","CavernDiscovered","OreFoundEvent","WorldLocationEvent","CrystalFoundEvent","LandslideEvent","RaiderDiscoveredEvent","AnimClip","looping","transcoef","firstFrame","lastFrame","framesPerSecond","bodies","degToRad","AnimSubObj","relPos","relRot","relScale","parentObjInd","model","degX","degY","degZ","animationFrameIndex","infos","radVec","AnimatedMesh","mesh","textureSequences","dispose","isArray","mat","SURF_VTRN","getVector3AtOffset","view","offset","vector","getFloat32","LWOLoader","verbose","vertices","indices","uvs","sequenceIntervals","chunkOffset","chunkSize","numVertices","vertexIndex","vertexOffset","buffer","surfaceNames","Uint8Array","split","new_material","side","alphaToCoverage","totalNumIndices","numIndices","getInt16","materialIndex","addGroup","currentIndex","Uint16Array","faceIndices","Int16Array","COUNTER_CLOCKWISE","getUint8","materialName","textureFlags","textureSize","textureCenter","subchunkOffset","subchunkType","getInt32","subchunkSize","colorArray","fromArray","flags","getUint16","warn","blending","depthWrite","edgeTransparencyThreshold","luminosity","emissiveIntensity","diffuse","specular","reflection","reflectivity","transparency","vLuminosity","vDiffuse","vSpecular","toArray","textureTypeName","textureValue","textureColorArray","textureFilepath","sequenceTexture","endsWith","match","textureFilename","textures","ResourceManager","filterTextureSequenceNames","getTexture","seqNum","setInterval","lTextureName","XAXIS_BIT","groups","uvIndex","u","v","planarMapUVS","DataView","getUint32","fileSize","byteLength","ID4_SIZE","magic","chunkType","parsePoints","parseSurfaceNames","parsePolygons","parseSurface","setIndex","computeVertexNormals","LWSCLoader","animationClip","lines","lineIndex","l","trim","sceneFileVersion","parseInt","line","parseFrameBlock","parseObjectBlock","parseLine","frameStep","subObj","slice","lwoBuffer","getResource","SceneManager","registerMesh","parse","lenInfos","lenFrames","Number","setFrameAndFollowing","numOfInformationChannels","numOfKeyframes","frameNum","setOpacityAndFollowing","PriorityIdentifier","JobState","JobType","BaseActivity","activityKey","AnimEntityActivity","Stand","AnimEntity","worldMgr","superType","floorOffset","rotation","radHeading","rotateOnAxis","surfaces","scene","aeFilename","animationEntityType","poly","animation","animationTimeout","selectionFrame","pickSphere","carryJoint","depositJoint","getToolJoint","activity","radiusSq","getAnimationEntityType","changeActivity","moveUp","setTimeout","removeFromScene","getDefaultActivity","onAnimationDone","durationTimeMs","lActivityKey","anim","bind","children","polyModel","polyPart","parentInd","sphere","setFromObject","getBoundingSphere","radius","animate","frameIndex","p","scale","hasOwnProperty","nextFrame","standardDurationTimeMs","that","timeoutTimeMs","pickSphereDiameter","PickSphere","pickSphereRadius","userData","pickSphereCenter","getPickSphereCenter","createSelectionFrame","getBoundingBoxCenter","getCenter","applyMatrix4","makeScale","selectionFrameTextureSize","ctx","strength","selectionFrameTexture","selectionMaterial","depthTest","selectionFrameSize","Job","fulfiller","jobState","INCOMPLETE","CANCELED","stopJob","COMPLETE","target","PublicJob","CarryJob","item","CARRY","actualTarget","getCarryTargets","setTargetSite","site","getDropAction","canGatherItem","onJobComplete","targetLocation","lookAt","dropItem","gatherItem","RaiderActivity","Route","RunPanic","Drill","Walk","Reinforce","Reverse","TurnLeft","TurnRight","CantDo","Collect","Clear","Carry","CarryTurnLeft","CarryTurnRight","CarryStand","Dynamite","Place","Deposit","TeleportIn","Repair","rest","routeRubble","CarryRubble","Eat","FireLaser","GetUp","ThrownByRockMonster","Slip","Train","Recharge","Waiting1","Waiting2","Waiting3","Waiting4","Hoverboard","Standhoverboard","HitLefthoverboard","HitRighthoverboard","HitFronthoverboard","HitBackhoverboard","SMALLTRUCK","StandSMALLTRUCK","HitLeftSMALLTRUCK","HitRightSMALLTRUCK","HitFrontSMALLTRUCK","HitBackSMALLTRUCK","SMALLheli","StandSMALLheli","HitLeftSMALLheli","HitRightSMALLheli","HitFrontSMALLheli","HitBackSMALLheli","SMALLCAT","StandSMALLCAT","HitLeftSMALLCAT","HitRightSMALLCAT","HitFrontSMALLCAT","HitBackSMALLCAT","SMALLMLP","StandSMALLMLP","HitLeftSMALLMLP","HitRightSMALLMLP","HitFrontSMALLMLP","HitBackSMALLMLP","LARGECAT","StandLARGECAT","HitLeftLARGECAT","HitRightLARGECAT","HitFrontLARGECAT","HitBackLARGECAT","SMALLDIGGER","StandSMALLDIGGER","PathTarget","addToScene","BuildingActivity","Teleport","Explode","Unpowered","CarryPathTarget","SiteCarryPathTarget","addItem","complete","BuildingCarryPathTarget","ORE_REFINERY","addItemToStorage","CRYSTAL","ORE","MaterialEntity","MATERIAL","targetBuildingTypes","targets","targetSite","positionPathTarget","updateTargets","sites","needs","getRandomDropPosition","getTargetBuildingTypes","getDropPosition2D","t","isInvalid","resetTarget","createCarryJob","unAssign","getPosition2D","equals","Crystal","resource2","mesh2","resource","emissive","aiPriorityCrystal","PowerCrystal","DynamiteActivity","Normal","TickDown","CarryDynamiteJob","dynamite","ignite","DYNAMITE","targetSurface","aiPriorityDestruction","isExplodable","getDigPositions","getCenterWorld","collapse","Ore","aiPriorityOre","ClearRubbleJob","CLEAR_RUBBLE","rubblePositions","reduceRubble","jobWorkplaces","getWorkplaces","aiPriorityClearing","DrillJob","onDrillComplete","drillTimeInMsPerType","drillTime","drillTimeEntry","drillTimeMs","ReinforceJob","REINFORCE","reinforce","aiPriorityReinforce","PathMap","PredugMap","WorkerMessageType","MoveState","Surface","heightOffset","containedOres","containedCrystals","selected","reinforced","drillJob","reinforceJob","dynamiteJob","clearRubbleJob","surfaceRotation","seamLevel","fallinTimeout","fallinGrp","needsMeshUpdate","topLeftHeightOffset","topRightHeightOffset","bottomLeftHeightOffset","bottomRightHeightOffset","fence","hasPower","setDiscovered","floors","others","caveFound","shift","o","isSupported","discoverSurface","drillPosition","vec","rotateAround","crystal","placeMaterial","cancelJobs","getRandomPosition","discover","dropContainedOre","surf","updateSurfaceMeshes","floorGroup","updateWorldMatrix","dropAmount","safeRemoveJob","updateJobColor","updateTexture","surfLeft","surfTopLeft","surfTop","surfTopRight","surfRight","surfBottomRight","surfBottom","surfBottomLeft","isHighGround","surf1","surf2","surf3","force","updateGeometry","cancelReinforceJobs","updateGraphWalk","getGraphWalkWeight","graphWalk","textureName","textureSet","texturebasename","updatePowerPathTexture","CORNER","forEachMaterial","texture","isPath","bottom","pathSum","avgHeight","args","sum","cnt","blocksPathSurface","digPosition","isWalkable","addScalar","getTerrainHeight","fallinLevel","originPos","targetPos","findFallInOrigin","findFallInTarget","scheduleFallin","targetX","targetY","createFallin","fallinPosition","makeRubble","worldX","worldZ","sx","sy","dy0","interpolate","dy1","y0","y1","containedOre","state","recursive","setHasPower","targetBuilding","getClosestBuildingByType","getHeading","TerrainPath","locations","lengthSq","Terrain","roofGroup","cachedPaths","setScalar","getSurfaceFromWorldXZ","getSurfaceOrNull","forEachSurface","updateMesh","resetGraphWalk","clear","gridStartX","gridStartY","gridEndX","gridEndY","cacheIdentifier","cachedPath","addLocation","searchPath","startNode","endNode","worldPath","search","gridNodeToWorldPos","gridNode","divideScalar","leftSurface","topSurface","rightSurface","bottomSurface","leftSurface2","isDigable","topSurface2","rightSurface2","bottomSurface2","each","maxFps","debugHelper","renderer","antialias","setClearColor","camera","controls","mouseButtons","LEFT","MIDDLE","RIGHT","listenToKeyEvents","keyPanSpeed","buildMarker","registerEventListener","rx","ry","raycaster","setFromCamera","intersects","intersectObjects","object","selectEntities","r1x","r1y","r2x","r2y","startPoint","endPoint","EPSILON","updateProjectionMatrix","updateMatrixWorld","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","setFromMatrixPosition","matrixWorld","unproject","vectemp1","vectemp2","vectemp3","deep","MAX_VALUE","frustum","planes","setFromCoplanarPoints","containsPoint","getSelectionCenter","levelConf","ambientRgb","cfg","maxAmbRgb","normalizedRgb","ambientColor","ambientLight","cursorTorchlight","distance","tileSize","blockSize","themeName","terrainMap","pathMap","surfaceMap","predugMap","cryOreMap","fallinMap","erodeMap","blockPointersMap","surfaceTypeNum","getByNum","predugLevel","CAVERN_EXPOSED","SLUG_HOLE_EXPOSED","SLUG_HOLE_HIDDEN","CAVERN_HIDDEN","pathMapLevel","NONE","RUBBLE","currentCryOre","weights","col","w","setFallinLevel","loadTerrain","countDiggables","countCrystals","countOres","renderInterval","animRequest","requestAnimationFrame","renderStart","render","renderDone","cancelAnimationFrame","meshRegistry","animatedMesh","setSize","point","world","floorY","getFloorHeight","intersect","intersectObject","BitmapFont","fontImageData","cols","rows","letters","chars","maxCharWidth","getActualCharacterWidth","rowPixelIndex","colPixelIndex","charHeight","extractData","actualWidth","startX","startY","alpha","text","maxWidth","autoCenter","determineRows","rowX","rowY","letterX","letterImgData","charAt","putImageData","spaceWidth","rowText","rowWidth","word","wordWidth","letter","letterImg","ResourceCache","configuration","resourceName","lName","resourceByName","imageName","getImageData","getImage","fontCache","getBitmapFont","InitLoadingMessage","startLoading","msg","worker","onmessage","ASSET","assetNames","assetName","assetObj","onAssetLoaded","MSG","onMessage","CFG","onInitialLoad","totalResources","CACHE_MISS","onCacheMissed","DONE","loadingTimeSeconds","onLoadDone","postMessage","basename","lBasename","res","lSharedTextureName","needsUpdate","cfgRoot","root","getPath","polyname","polykey","act","file","isLws","loadModels","Worker","BarrierActivity","Short","Expand","Long","CompletePowerPathJob","placedItems","COMPLETE_POWER_PATH","workplaces","placed","aiPriorityConstruction","BuildingSite","neededByType","assignedByType","onSiteByType","needed","onAddToSite","checkComplete","neededType","BARRIER","placeDown","items","itemsOnSite","Barrier","CarryFenceJob","ElectricFence","ELECTRIC_FENCE","BuildingEntity","powerSwitch","spawning","primaryPathSurface","secondaryPathSurface","upgradeCostOre","upgradeCostBrick","crystalsInUse","inBeam","turnOnPower","worldPos","getWorldPosition","isPowered","CostOre","CostCrystal","setBuilding","beamUp","hasMaxLevel","quantity","disableTeleportIn","getSurfaceFromWorld2D","secondaryOffset","pathOffset","pathSurface","createPickSphere","onPlaceDown","Barracks","Docks","Geodome","GunStation","GUNSTATION","OreRefinery","PowerStation","Powerstation","TeleportBig","TELEPORT_BIG","TeleportBIG","TeleportPad","Toolstation","Upgrade","EatJob","EAT","GetToolJob","GET_TOOL","addTool","TrainJob","TRAIN","getTrainingTargets","addTraining","UpgradeJob","GuiManager","pathToToolstation","findPathToTarget","sort","setJob","targetPosition","spawnMaterials","spawnFence","increase","createDrillJob","createReinforceJob","createDynamiteJob","createClearRubbleJob","upgrade","turnOffPower","isDriving","closestToolstation","buildingFromType","MoveJob","MOVE","EntityStep","targetReached","MovableEntity","currentPath","paths","TARGET_UNREACHABLE","nextLocation","firstLocation","step","determineStep","isInArea","TARGET_REACHED","getRouteActivity","MOVED","getEntityStep","stepLengthSq","entitySpeed","getSpeed","setLength","targetWorld","FulfillerEntity","workInterval","followUpJob","work","unassign","Raider","tools","trainings","slipped","Pilot","findPath","RouteSpeed","isOnPath","PathCoef","isOnRubble","moveToClosestTarget","setActualWorkplace","getNearbySpiders","spider","slip","onDeath","carryItem","getCarryItem","getPositionPathTarget","pickupItem","moveToClosestWorkplace","isReadyToComplete","workActivity","getWorkActivity","completeJob","getWorkDuration","has","MonsterActivity","Monster","MONSTER","moveTimeout","Bat","BAT","onMove","bat","findTarget","currentCenter","targetZ","onLevelEnd","SmallSpider","SMALL_SPIDER","MOUSE_BUTTON","POINTER_EVENT","KEY_EVENT","Supervisor","jobs","assignInterval","checkRubbleInterval","cancel","stop","assignJobs","checkUnclearedRubble","resetWorkInterval","availableJobs","isEnabled","getPriority","unemployedRaider","closestRaider","closestRaiderIndex","minDistance","closestToolRaider","closestToolRaiderIndex","minToolDistance","closestToolstationPosition","closestNeededTool","closestTrainingRaider","closestTrainingRaiderIndex","minTrainingDistance","closestTrainingArea","closestNeededTraining","raider","requiredTool","getRequiredTool","hasRequiredTool","raiderTraining","getRequiredTraining","pathToJob","trainingSite","startSurface","rad","NerpRunner","debug","nerpInterval","registers","fill","timers","scriptLines","statements","macrosByName","labelsByName","halted","programCounter","messages","messagePermit","execute","register","num","isNaN","Error","checkRegister","checkRegisterValue","Date","getTime","FAILED","messagesAllowed","typeName","setBuildingsUpgradeLevel","arg1","arg2","arg3","messageNumber","arrowDisabled","txt","blockNum","methodName","methodArgs","setRegisterMatch","setR","addRegisterMatch","addR","getRegisterMatch","getR","setTimerMatch","setTimer","getTimerMatch","getTimer","lMethodName","memberName","getOwnPropertyNames","apply","conditionResult","executeStatement","expression","invoke","argValues","callMethod","comparator","jump","statement","label","NerpParser","nerpScript","nerpRunner","includeName","includedRunner","concat","firstLine","macroLines","mLine","append","macroLine","macroCall","replaceMacros","labelMatch","preProcess","labelName","macro","RegExp","number","opSplit","brackets","spaceSplit","jumpMatch","WorldManager","oxygenUpdateInterval","updateOxygen","fullName","reward","setList","nerpFile","nerpMessageFile","startExecution","now","pauseExecution","diff","OxygenCoef","reduce","ScreenLayer","withContext","background","zIndex","layerA","layerB","aIndex","bIndex","onRedraw","isActive","redraw","windowX","windowY","clientRect","getBoundingClientRect","Promise","resolve","ScaledLayer","fixedWidth","fixedHeight","updateScale","scaleX","scaleY","cx","cy","toCanvasCoords","resize","GameKeyboardEvent","eventEnum","bubbles","code","GamePointerEvent","clientX","clientY","pointerType","ctrlKey","metaKey","shiftKey","GameWheelEvent","deltaX","deltaY","deltaZ","EventManager","screen","gameCanvasContainer","isInRect","preventDefault","DOWN","UP","eventType","nonBubblingClone","activeLayers","layers","compareZ","publishPointerEvent","publishKeyEvent","publishWheelEvent","handlePointerEvent","then","consumed","handleKeyEvent","handleWheelEvent","CursorLayer","changeCursor","pointersCfg","curUrl","revokeObjectURL","cursorFilename","curImg","toDataURL","BaseScreen","ratio","focus","eventMgr","window","onWindowResize","cursorLayer","addLayer","layer","setZIndex","offsetWidth","maxHeight","offsetHeight","idealHeight","oldCanvas","removeChild","firstLayer","rect","GuiCommand","CancelBuildMode","GameLayer","rightDown","lastCursor","intersectionPoint","getTerrainPositionFromEvent","setTorchPosition","update","updateCursor","MAIN","getBarrierLocations","neededOre","spawnBarriers","SECONDARY","assignSurfaceJob","dispatchEvent","PointerEvent","determineCursor","Pointer_Selected","KeyboardEvent","getTerrainIntersectionPoint","WheelEvent","generateUUID","OffscreenLayer","resolveCallbackByEventId","sendMessage","INIT","response","RESPONSE_EVENT","eventResponse","eventId","eventConsumed","delete","GAME_EVENT","gameEvent","registerWorkerListener","message","transfer","RESET","transferControlToOffscreen","CANVAS","REDRAW","canvasX","canvasY","sendEventMessage","EVENT_POINTER","EVENT_KEY","inputEvent","GuiMainLayer","onOptionsShow","SHOW_OPTIONS","SPACE_TO_CONINUE","messageState","OverlayLayer","onSetSpaceToContinue","onAbortGame","onRestartGame","GAME_ABORT","GAME_RESTART","objectiveText","objectiveBackImgCfg","OVERLAY_SETUP","SelectionLayer","selectStart","startSelection","changeSelection","screenX","screenY","clearRect","strokeStyle","lineWidth","strokeRect","selectEntitiesByRay","selectEntitiesInFrustum","GameScreen","spawnRaiderInterval","gameLayer","selectionLayer","guiLayer","overlayLayer","jobSupervisor","guiMgr","showOptions","setSpaceToContinue","restartLevel","checkSpawnRaiders","levelName","levelsByName","setupAndStartLevel","setup","setupScene","objective","objectiveImage640x480","objectListConf","oListFile","disableStartTeleport","values","olObject","lTypeName","xPos","yPos","buildingType","terrainY","loc","createBuildingByName","startMoving","startRandomMove","typename","loadObjectList","startScene","disposeScene","getMaxRaiders","spawnBuildings","station","walkOutPos","MainMenuBaseItem","scrollAffected","needsRedraw","hover","pressed","actionName","targetIndex","onHoverChange","MainMenuIconButton","imgNormal","imgHover","imgPressed","tooltip","draw","drawImage","MainMenuLabelButton","labelImgLo","labelImgHi","loFont","createTextImage","hiFont","MainMenuLayer","menuCfg","scrollY","scrollSpeedY","scrollInterval","menuImage","titleImage","itemsLabel","displayTitle","setScrollY","toScaledCoords","hovered","setReleased","absY","checkHover","canScroll","scrollAreaHeight","setScrollSpeedY","checkSetPressed","showMainMenu","selectLevel","levelKey","pow","scrollYBefore","MainMenuLevelButton","levelCfg","imgActive","imgInactive","imgCross","unlocked","frontEndX","frontEndY","menuBMP","frontEndOpen","MainMenuPanel","area","MainMenuWindow","font","imgFirstLine","imgSecondLine","LevelSelectLayer","modeLevel","levelsCfg","levelTextCfg","LevelTextCfg","panelImgData","panelPos","levelTextWindow","getDefaultFont","setFirstLine","tutorial","levelButton","setSecondLine","winCfg","panelCfg","parseLabel","MainMenuScreen","onLevelSelected","menus","title","menu","RewardScreenButton","conf","imgNormalFilepath","imgHoverFilepath","imgPressedFilepath","imgDisabledFilepath","imgDisabled","RewardScreen","resultIndex","resultLastIndex","images","boxes","fonts","texts","uncoverTimeout","titleFont","backgroundImg","wallpaper","filePath","boxImages","fontKey","labelFont","backFont","resultsLayer","btnSave","btnAdvance","descriptionTextLayer","btnLayer","saveButton","advanceButton","onAdvance","uncoverResult","levelFullNameImg","resultText","quitText","completeText","failedText","resultValues","percentString","timeString","score","gameResultTextImg","box","vertSpacing","descriptionTextImg","textPos","tx","ty","actual","lessIsMore","padding","seconds","ss","padLeft","minutes","mm","loadingScreen","assetIndex","setLoadingMessage","fillText","imgBackground","imgProgress","imgLoading","loadingBarWidth","wadFileSelectModal","githubBox","clearCacheButton","startLoadingFromUrl","enableGraphicMode","increaseLoadingState","mainMenuScreen","gameScreen","rewardScreen","startLevel","showLevelSelection","params","URLSearchParams","substr","startLoadingFromCache","DEV_MODE","WAD_CACHE_DB_NAME","JOB_SCHEDULE_INTERVAL","CHECK_CLEARRUBBLE_INTERVAL","JOB_ACTION_RANGE","CHECK_SPANW_RAIDER_TIMER","MAX_RAIDER_BASE","ADDITIONAL_RAIDER_PER_SUPPORT","UPDATE_OXYGEN_TIMER","HEIGHT_MULTIPLER","SEQUENCE_TEXTURE_FRAMERATE","SPRITE_RESOLUTION_WIDTH","SPRITE_RESOLUTION_HEIGHT","TILESIZE","NATIVE_FRAMERATE"],"mappings":"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CA,yCACA,yDAEA,+BACA,+BACA,6DACA,6CACA,6BACA,6CACA,oDACA,kDACA,sCAEA,kFACA,8DACA,kDACA,kDACA,0EACA,4DACA,oEACA,kEACA,kEACA,kFACA,4DACA,0DACA,gDACA,8CACA,wDACA,sDACA,oDACA,kDACA,8DACA,8DAEA,wCACA,4CACA,wDACA,sDACA,gDACA,oDACA,oDACA,gEK1CG,MAAMiE,EAMT,oBAAoBC,GACZzJ,KAAK0J,cAAcC,SAASF,EAAMG,YACjCH,EAAMI,SAASC,QAAQC,IAAI,oBAAsB,EAASN,EAAMG,WACrE5J,KAAK0J,cAAc/J,KAAK8J,EAAMG,UAC9B5J,KAAKgK,eAAe5D,SAASsC,GAAaA,EAASe,KACnDzJ,KAAKiK,YAAYR,EAAMG,UAAUxD,SAASsC,GAAaA,EAASe,KAChEzJ,KAAK0J,cAAczB,OAAOwB,EAAMG,WAGpC,6BAA6BA,EAAoBlB,GAC7C1I,KAAKiK,YAAYL,GAAUjK,KAAK+I,GAG5B,mBAAmBkB,GACvB,OAAO5J,KAAKkK,cAAchB,YAAYU,GAAU,IAAM,KAG1D,8BAA8BlB,GAC1B1I,KAAKgK,eAAerK,KAAK+I,IAtBtB,EAAAwB,cAAgB,IAAIjB,IACpB,EAAAe,eAAgD,GAChD,EAAAN,cAAgB,GJP3B,SAAYvE,GAGR,qBAGA,iCACA,mCACA,qBACA,qCACA,2BACA,yBACA,yBACA,mCACA,+BACA,oCAGA,kBACA,oCAGA,4BACA,wCACA,0BACA,kBACA,sBACA,0BA3BJ,CAAYA,MAAU,KA+BtB,SAAYC,GAER,uBACA,2BACA,yBACA,2BALJ,CAAYA,MAAe,KC/B3B,SAAYC,GAER,qCACA,2CACA,qCACA,6CACA,qCACA,+BACA,uCACA,2CACA,mDACA,6CACA,sDACA,4CACA,4CACA,kDACA,oCACA,4CACA,oCACA,4CACA,0CACA,sCACA,wCACA,oCACA,0CACA,4CACA,kDACA,4CACA,oDACA,wCACA,gDACA,8CACA,wDACA,wDACA,gDACA,gDACA,8DACA,8DACA,sDACA,sDACA,sDACA,sDACA,8CACA,8CACA,oDACA,oD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","file":"643.index.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".clear-cache-box {\\n    z-index: 2000;\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./site/clearcache/clearCacheButton.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;IACb,kBAAkB;IAClB,OAAO;IACP,MAAM;AACV\",\"sourcesContent\":[\".clear-cache-box {\\n    z-index: 2000;\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".github-box {\\n    z-index: 2000;\\n    padding: 16px;\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    background-color: rgba(0, 0, 0, 0.6);\\n    color: #fff;\\n}\\n\\n.github-box a {\\n    color: #fff;\\n    text-decoration: none;\\n    padding: 8px;\\n}\\n\\n.github-box a:hover {\\n    color: #fff;\\n    text-decoration: underline;\\n}\\n\\n.github-logo {\\n    width: 16px;\\n    height: 16px;\\n    margin-right: 8px;\\n    vertical-align: middle;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./site/github/github.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;IACb,aAAa;IACb,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,oCAAoC;IACpC,WAAW;AACf;;AAEA;IACI,WAAW;IACX,qBAAqB;IACrB,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,0BAA0B;AAC9B;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,sBAAsB;AAC1B\",\"sourcesContent\":[\".github-box {\\n    z-index: 2000;\\n    padding: 16px;\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    background-color: rgba(0, 0, 0, 0.6);\\n    color: #fff;\\n}\\n\\n.github-box a {\\n    color: #fff;\\n    text-decoration: none;\\n    padding: 8px;\\n}\\n\\n.github-box a:hover {\\n    color: #fff;\\n    text-decoration: underline;\\n}\\n\\n.github-logo {\\n    width: 16px;\\n    height: 16px;\\n    margin-right: 8px;\\n    vertical-align: middle;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!./clearCacheButton.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { WAD_CACHE_DB_NAME } from '../../src/params'\nimport './clearCacheButton.css'\n\nexport class ClearCacheButton {\n\n    rootElement: HTMLDivElement\n\n    constructor(parentId: string) {\n        this.rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        this.rootElement.classList.add('clear-cache-box')\n\n        const button = this.rootElement.appendChild(document.createElement('button'))\n        button.classList.add('btn', 'btn-info')\n        button.innerText = 'Clear cached wad files and restart'\n        button.onclick = () => {\n            indexedDB.deleteDatabase(WAD_CACHE_DB_NAME)\n            location.reload()\n        }\n    }\n\n    hide() {\n        this.rootElement.style.visibility = 'hidden'\n    }\n\n}\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!./github.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import './github.css'\nimport GithubIcon from './github.png'\n\nexport class GithubBox {\n\n    rootElement: HTMLDivElement\n\n    constructor(parentId: string) {\n        this.rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        this.rootElement.classList.add('github-box')\n\n        const link = this.rootElement.appendChild(document.createElement('a'))\n        link.href = 'https://github.com/scarabol/rock-raiders-web'\n\n        const img = link.appendChild(document.createElement('img'))\n        img.src = GithubIcon\n        img.classList.add('github-logo')\n        img.alt = 'Fork on GitHub'\n\n        const txt = link.appendChild(document.createElement('span'))\n        txt.textContent = img.alt\n    }\n\n    hide() {\n        this.rootElement.style.visibility = 'hidden'\n    }\n\n}\n","import { Modal } from 'bootstrap'\n\nexport class WadFileSelectionModal {\n\n    public onStart: (wad0Url, wad1Url) => any = null\n\n    private readonly modal: Modal\n\n    constructor(parentId: string) {\n        const rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        rootElement.classList.add('modal')\n        rootElement.tabIndex = -1\n        rootElement.setAttribute('role', 'dialog')\n        rootElement.setAttribute('aria-hidden', 'true')\n\n        const modalDialog = rootElement.appendChild(document.createElement('div'))\n        modalDialog.classList.add('modal-dialog')\n        rootElement.setAttribute('role', 'document')\n\n        const modalContent = modalDialog.appendChild(document.createElement('div'))\n        modalContent.classList.add('modal-content')\n\n        const modalHeader = modalContent.appendChild(document.createElement('div'))\n        modalHeader.classList.add('modal-header')\n        const modalTitle = modalHeader.appendChild(document.createElement('h5'))\n        modalTitle.classList.add('modal-title')\n        modalTitle.innerText = 'Load .wad files'\n        modalTitle.id = 'wadfileSelectModalLabel'\n        rootElement.setAttribute('aria-labelledby', modalTitle.id)\n\n        const modalBody = modalContent.appendChild(document.createElement('div'))\n        modalBody.classList.add('modal-body')\n\n        const hint = modalBody.appendChild(document.createElement('p'))\n        hint.innerText = 'Assets not included! In order to play the game, please select the game files.'\n\n        const navTabs = modalBody.appendChild(document.createElement('nav'))\n        const navTabList = navTabs.appendChild(document.createElement('div'))\n        navTabList.id = 'nav-tab'\n        navTabList.classList.add('nav', 'nav-tabs')\n        navTabList.setAttribute('role', 'tablist')\n\n        const navFileBtn = WadFileSelectionModal.appendNavButton(navTabList, true, 'nav-file-tab', 'nav-file', 'Local files (recommended)')\n        const navUrlBtn = WadFileSelectionModal.appendNavButton(navTabList, false, 'nav-url-tab', 'nav-url', 'Online from URL')\n\n        const navTabContent = modalBody.appendChild(document.createElement('div'))\n        navTabContent.classList.add('tab-content')\n        this.appendNavFileTab(navTabContent, navFileBtn.id)\n        this.appendNavUrlTab(navTabContent, navUrlBtn.id)\n\n        // rootElement has to be a valid bootstrap HTML modal before we can instantiate it\n        this.modal = new Modal(rootElement, {backdrop: 'static', keyboard: false})\n    }\n\n    private static appendNavButton(parent: HTMLDivElement, active: boolean, id: string, controlTarget: string, innerText: string) {\n        const navBtn = parent.appendChild(document.createElement('button'))\n        navBtn.classList.add('nav-link')\n        if (active) navBtn.classList.add('active')\n        navBtn.id = id\n        navBtn.setAttribute('data-bs-toggle', 'tab')\n        navBtn.setAttribute('data-bs-target', '#' + controlTarget)\n        navBtn.type = 'button'\n        navBtn.setAttribute('role', 'tab')\n        navBtn.setAttribute('aria-controls', controlTarget)\n        navBtn.setAttribute('aria-selected', String(active))\n        navBtn.innerText = innerText\n        return navBtn\n    }\n\n    private appendNavFileTab(parent: HTMLDivElement, labelledBy: string) {\n        const navFileTab = WadFileSelectionModal.appendNavTab(parent, true, 'nav-file', labelledBy)\n\n        const wad0File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad0-file', 'LegoRR0.wad')\n        const wad1File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad1-file', 'LegoRR1.wad')\n\n        const btnStartFile = navFileTab.appendChild(document.createElement('button'))\n        btnStartFile.type = 'submit'\n        btnStartFile.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartFile.id = 'button-start-file'\n        btnStartFile.innerText = 'Start Game'\n        btnStartFile.addEventListener('click', () => {\n            btnStartFile.disabled = true\n            const wad0FileUrl = URL.createObjectURL(wad0File.files[0])\n            const wad1FileUrl = URL.createObjectURL(wad1File.files[0])\n            this.onStart(wad0FileUrl, wad1FileUrl)\n        })\n    }\n\n    private static appendWadFileGroup(parent: HTMLDivElement, id: string, filename: string) {\n        const wadFileGroup = parent.appendChild(document.createElement('div'))\n        wadFileGroup.classList.add('my-3')\n        const wadFileLabel = wadFileGroup.appendChild(document.createElement('label'))\n        wadFileLabel.setAttribute('for', id)\n        wadFileLabel.classList.add('form-label')\n        wadFileLabel.innerHTML = 'Select <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadFileInput = wadFileGroup.appendChild(document.createElement('input'))\n        wadFileInput.type = 'file'\n        wadFileInput.classList.add('form-control')\n        wadFileInput.id = id\n        wadFileInput.required = true\n        return wadFileInput\n    }\n\n    private appendNavUrlTab(parent: HTMLDivElement, labelledBy: string) {\n        const navUrlTab = WadFileSelectionModal.appendNavTab(parent, false, 'nav-url', labelledBy)\n\n        const urlHint = navUrlTab.appendChild(document.createElement('div'))\n        urlHint.classList.add('my-3')\n        urlHint.innerText = 'Direct links with correct Allow-Origin-CORS-Headers required here.'\n\n        const wad0Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad0-url', 'LegoRR0.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n        const wad1Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad1-url', 'LegoRR1.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n\n        const btnStartUrl = navUrlTab.appendChild(document.createElement('button'))\n        btnStartUrl.type = 'submit'\n        btnStartUrl.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartUrl.id = 'button-start-url'\n        btnStartUrl.innerText = 'Start Game'\n        btnStartUrl.addEventListener('click', () => {\n            btnStartUrl.disabled = true\n            // XXX show loading progress for WAD files\n            this.onStart(wad0Url.value, wad1Url.value)\n        })\n    }\n\n    private static appendNavTab(parent: HTMLDivElement, active: boolean, id: string, labelledBy: string) {\n        const navTab = parent.appendChild(document.createElement('div'))\n        navTab.classList.add('tab-pane', 'fade')\n        if (active) navTab.classList.add('show', 'active')\n        navTab.id = id\n        navTab.setAttribute('role', 'tabpanel')\n        navTab.setAttribute('aria-labelledby', labelledBy)\n        return navTab\n    }\n\n    private static appendWadUrlGroup(parent: HTMLDivElement, id: string, filename: string, example: string) {\n        const wadUrlGroup = parent.appendChild(document.createElement('div'))\n        wadUrlGroup.classList.add('my-3')\n        const wadUrlLabel = wadUrlGroup.appendChild(document.createElement('label'))\n        wadUrlLabel.setAttribute('for', id)\n        wadUrlLabel.classList.add('form-label')\n        wadUrlLabel.innerHTML = 'Enter url for <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadUrlInput = wadUrlGroup.appendChild(document.createElement('input'))\n        wadUrlInput.type = 'url'\n        wadUrlInput.classList.add('form-control')\n        wadUrlInput.id = id\n        wadUrlInput.required = true\n        wadUrlInput.value = example\n        return wadUrlInput\n    }\n\n    public show() {\n        this.modal.show()\n    }\n\n    public hide() {\n        this.modal.hide()\n    }\n\n}\n","export enum EventKey {\n\n    SELECTION_CHANGED,\n    BUILDINGS_CHANGED,\n    RAIDERS_CHANGED,\n    MATERIAL_AMOUNT_CHANGED,\n\n    JOB_CREATE,\n    JOB_DELETE,\n    REQUESTED_RAIDERS_CHANGED,\n    CAVERN_DISCOVERED,\n    ORE_FOUND,\n    AIR_LEVEL_CHANGED,\n    CHANGE_PRIORITY_LIST,\n    SETUP_PRIORITY_LIST,\n    CHANGE_CURSOR,\n\n    COMMAND_CHANGE_RAIDER_SPAWN_REQUEST,\n    COMMAND_CREATE_POWER_PATH,\n    COMMAND_PLACE_FENCE,\n    COMMAND_MAKE_RUBBLE,\n    COMMAND_CREATE_CLEAR_RUBBLE_JOB,\n    COMMAND_CREATE_DRILL_JOB,\n    COMMAND_CREATE_REINFORCE_JOB,\n    COMMAND_CREATE_DYNAMITE_JOB,\n    COMMAND_CANCEL_SURFACE_JOBS,\n    COMMAND_CHANGE_BUILDING_POWER_STATE,\n    COMMAND_UPGRADE_BUILDING,\n    COMMAND_BUILDING_BEAMUP,\n    COMMAND_RAIDER_EAT,\n    COMMAND_PICK_TOOL,\n    COMMAND_RAIDER_UPGRADE,\n    COMMAND_RAIDER_BEAMUP,\n    COMMAND_TRAIN_RAIDER,\n    COMMAND_RAIDER_DROP,\n    COMMAND_SELECT_BUILD_MODE,\n    COMMAND_CANCEL_BUILD_MODE,\n\n    LOCATION_DEATH,\n    LOCATION_MONSTER,\n    LOCATION_CRYSTAL_FOUND,\n    LOCATION_UNDER_ATTACK,\n    LOCATION_LANDSLIDE,\n    LOCATION_POWER_DRAIN,\n    LOCATION_SLUG_EMERGE,\n    LOCATION_RAIDER_DISCOVERED,\n\n}\n","export enum EntityType {\n\n    // RAIDER\n    PILOT,\n\n    // BUILDING\n    TOOLSTATION,\n    TELEPORT_PAD,\n    DOCKS,\n    POWER_STATION,\n    BARRACKS,\n    UPGRADE,\n    GEODOME,\n    ORE_REFINERY,\n    GUNSTATION,\n    TELEPORT_BIG,\n\n    // MONSTER\n    BAT,\n    SMALL_SPIDER,\n\n    // MATERIAL\n    DYNAMITE,\n    ELECTRIC_FENCE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n\n}\n\nexport enum EntitySuperType {\n\n    RAIDER,\n    BUILDING,\n    MONSTER,\n    MATERIAL,\n\n}\n","export enum Cursors {\n\n    Pointer_Blank,\n    Pointer_Standard,\n    Pointer_Drill,\n    Pointer_CantDrill,\n    Pointer_Clear,\n    Pointer_Go,\n    Pointer_CantGo,\n    Pointer_Teleport,\n    Pointer_CantTeleport,\n    Pointer_Reinforce,\n    Pointer_CantReinforce,\n    Pointer_Selected,\n    Pointer_RadarPan,\n    Pointer_TrackObject,\n    Pointer_Zoom,\n    Pointer_CantZoom,\n    Pointer_Help,\n    Pointer_CantHelp,\n    Pointer_PutDown,\n    Pointer_GetIn,\n    Pointer_GetOut,\n    Pointer_Okay,\n    Pointer_NotOkay,\n    Pointer_CanBuild,\n    Pointer_CannotBuild,\n    Pointer_Dynamite,\n    Pointer_CantDynamite,\n    Pointer_PickUp,\n    Pointer_CantPickUp,\n    Pointer_PickUpOre,\n    Pointer_LegoManCantDig,\n    Pointer_VehicleCantDig,\n    Pointer_LegoManDig,\n    Pointer_VehicleDig,\n    Pointer_LegoManCantPickUp,\n    Pointer_VehicleCantPickUp,\n    Pointer_LegoManPickUp,\n    Pointer_VehiclePickUp,\n    Pointer_LegoManCantGo,\n    Pointer_VehicleCantGo,\n    Pointer_LegoManGo,\n    Pointer_VehicleGo,\n    Pointer_LegoManClear,\n    Pointer_VehicleClear,\n    Pointer_SurfaceType_Immovable,\n    Pointer_SurfaceType_Hard,\n    Pointer_SurfaceType_Medium,\n    Pointer_SurfaceType_Loose,\n    Pointer_SurfaceType_Soil,\n    Pointer_SurfaceType_OreSeam,\n    Pointer_SurfaceType_CrystalSeam,\n    Pointer_SurfaceType_RechargeSeam,\n\n}\n","export enum RaiderTool {\n\n    DRILL,\n    HAMMER,\n    SHOVEL,\n    SPANNER,\n    FREEZERGUN,\n    LASER,\n    PUSHERGUN,\n    BIRDSCARER,\n\n}\n\nexport const AllRaiderTools: RaiderTool[] = [\n    RaiderTool.DRILL,\n    RaiderTool.HAMMER,\n    RaiderTool.SHOVEL,\n    RaiderTool.SPANNER,\n    RaiderTool.FREEZERGUN,\n    RaiderTool.LASER,\n    RaiderTool.PUSHERGUN,\n    RaiderTool.BIRDSCARER,\n]\n","export function getPath(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '')\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/')\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max)\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2\n}\n\nexport function clearTimeoutSafe(timeout: NodeJS.Timeout) {\n    if (timeout) clearTimeout(timeout)\n    return null\n}\n\nexport function clearIntervalSafe(interval: NodeJS.Timeout) {\n    if (interval) clearInterval(interval)\n    return null\n}\n\ndeclare global {\n\n    interface Array<T> {\n        remove(element: T): void\n\n        last(): T\n\n        count(callback: (element: T) => boolean): number\n\n        partition(filter: (element: T) => boolean): [T[], T[]]\n    }\n\n    interface Map<K, V> {\n        getOrUpdate(key: K, updateCallback: () => V): V\n    }\n\n    interface String {\n        equalsIgnoreCase(other: string): boolean\n    }\n\n}\n\nArray.prototype.remove = function <T>(element: T): void {\n    const index = this.indexOf(element)\n    if (index !== -1) this.splice(index, 1)\n}\n\nArray.prototype.last = function <T>(): T {\n    return this.length > 0 ? this[this.length - 1] : undefined\n}\n\nArray.prototype.count = function <T>(callback: (element: T) => boolean): number {\n    let counter = 0\n    this.forEach((e) => callback(e) && counter++)\n    return counter\n}\n\nArray.prototype.partition = function <T>(filter: (element: T) => boolean): [T[], T[]] {\n    const left: T[] = [], right: T[] = []\n    this.forEach((a) => filter(a) ? left.push(a) : right.push(a))\n    return [left, right]\n}\n\n// noinspection JSUnusedGlobalSymbols\nMap.prototype.getOrUpdate = function <K, V>(key: K, updateCallback: () => V): V {\n    let value = this.get(key)\n    if (value === undefined) {\n        value = updateCallback()\n        this.set(key, value)\n    }\n    return value\n}\n\nString.prototype.equalsIgnoreCase = function (other: string): boolean {\n    return this.toLowerCase() === other?.toLowerCase()\n}\n","import { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class EventBus {\n\n    static eventListener = new Map<EventKey, ((event: GameEvent) => any)[]>()\n    static workerListener: ((event: GameEvent) => any)[] = []\n    static blockedEvents = []\n\n    static publishEvent(event: GameEvent) {\n        if (this.blockedEvents.includes(event.eventKey)) return // event is currently blocked from publishing\n        if (!event.isLocal) console.log('Event published: ' + EventKey[event.eventKey])\n        this.blockedEvents.push(event.eventKey)\n        this.workerListener.forEach((callback) => callback(event))\n        this.getListener(event.eventKey).forEach((callback) => callback(event))\n        this.blockedEvents.remove(event.eventKey)\n    }\n\n    static registerEventListener(eventKey: EventKey, callback: (GameEvent) => any) {\n        this.getListener(eventKey).push(callback)\n    }\n\n    private static getListener(eventKey: EventKey) {\n        return this.eventListener.getOrUpdate(eventKey, () => [])\n    }\n\n    static registerWorkerListener(callback: (GameEvent) => any) {\n        this.workerListener.push(callback)\n    }\n\n    // TODO cleanup/unregister all event listener at level end?!\n\n}\n","import { Cursors } from '../../../screen/Cursors'\n\nexport class SurfaceType {\n\n    name: string // human readable, maybe used as label later on\n    shaping: boolean = false\n    matIndex: string = '00'\n    floor: boolean = false\n    selectable: boolean = false\n    drillable: boolean = false\n    drillableHard: boolean = false\n    explodable: boolean = false\n    reinforcable: boolean = false\n    cursor: Cursors = Cursors.Pointer_Standard\n    statsDrillName: string = null\n    canCarryFence: boolean = false\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options)\n    }\n\n    static readonly GROUND = new SurfaceType({\n        name: 'ground',\n        floor: true,\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly SOLID_ROCK = new SurfaceType({\n        name: 'solid rock',\n        shaping: true,\n        matIndex: '5',\n        cursor: Cursors.Pointer_SurfaceType_Immovable,\n    })\n    static readonly HARD_ROCK = new SurfaceType({\n        name: 'hard rock',\n        shaping: true,\n        matIndex: '4',\n        selectable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_Hard,\n        statsDrillName: 'HardDrillTime',\n    })\n    static readonly LOOSE_ROCK = new SurfaceType({\n        name: 'loose rock',\n        shaping: true,\n        matIndex: '3',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_Medium,\n        statsDrillName: 'LooseDrillTime',\n    })\n    static readonly DIRT = new SurfaceType({\n        name: 'dirt',\n        shaping: true,\n        matIndex: '2',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_Loose,\n        statsDrillName: 'SoilDrillTime',\n    })\n    static readonly SLUG_HOLE = new SurfaceType({name: 'slug hole', floor: true, matIndex: '30'})\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'})\n    static readonly ORE_SEAM = new SurfaceType({\n        name: 'ore seam',\n        matIndex: '40',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_OreSeam,\n        statsDrillName: 'SeamDrillTime',\n    })\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45'})\n    static readonly CRYSTAL_SEAM = new SurfaceType({\n        name: 'energy crystal seam',\n        matIndex: '20',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursors.Pointer_SurfaceType_CrystalSeam,\n        statsDrillName: 'SeamDrillTime',\n    })\n    static readonly RECHARGE_SEAM = new SurfaceType({\n        name: 'recharge seam',\n        matIndex: '67',\n        cursor: Cursors.Pointer_SurfaceType_RechargeSeam,\n    })\n    static readonly POWER_PATH = new SurfaceType({\n        name: 'power path all',\n        floor: true,\n        matIndex: '60',\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly POWER_PATH_SITE = new SurfaceType({\n        name: 'power path site',\n        floor: true,\n        matIndex: '61',\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly POWER_PATH_BUILDING = new SurfaceType({\n        name: 'power path building',\n        floor: true,\n        matIndex: '76',\n    })\n    static readonly RUBBLE1 = new SurfaceType({\n        name: 'rubble 1',\n        floor: true,\n        matIndex: '13',\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly RUBBLE2 = new SurfaceType({\n        name: 'rubble 2',\n        floor: true,\n        matIndex: '12',\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly RUBBLE3 = new SurfaceType({\n        name: 'rubble 3',\n        floor: true,\n        matIndex: '11',\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly RUBBLE4 = new SurfaceType({\n        name: 'rubble 4',\n        floor: true,\n        matIndex: '10',\n        selectable: true,\n        canCarryFence: true,\n    })\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING\n            case 1:\n                return SurfaceType.SOLID_ROCK\n            case 2:\n                return SurfaceType.HARD_ROCK\n            case 3:\n                return SurfaceType.LOOSE_ROCK\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT\n            case 6:\n                return SurfaceType.LAVA\n            case 8:\n                return SurfaceType.ORE_SEAM\n            case 9:\n                return SurfaceType.WATER\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM\n            case 11:\n                return SurfaceType.RECHARGE_SEAM\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE\n            case 100:\n                return SurfaceType.RUBBLE4\n            case 101:\n                return SurfaceType.RUBBLE3\n            case 102:\n                return SurfaceType.RUBBLE2\n            case 103:\n                return SurfaceType.RUBBLE1\n            default:\n                console.error('Unexpected surface type num: ' + typeNum)\n                return SurfaceType.SOLID_ROCK\n        }\n    }\n}\n","import { EntityType } from '../EntityType'\n\nexport enum RaiderTraining {\n    DRIVER,\n    ENGINEER,\n    GEOLOGIST,\n    PILOT,\n    SAILOR,\n    DEMOLITION,\n}\n\nexport const AllRaiderTrainings: RaiderTraining[] = [\n    RaiderTraining.DRIVER,\n    RaiderTraining.ENGINEER,\n    RaiderTraining.GEOLOGIST,\n    RaiderTraining.PILOT,\n    RaiderTraining.SAILOR,\n    RaiderTraining.DEMOLITION,\n]\n\nexport const RaiderTrainingSites: EntityType[] = []\nRaiderTrainingSites[RaiderTraining.DRIVER] = EntityType.BARRACKS\nRaiderTrainingSites[RaiderTraining.DRIVER] = EntityType.BARRACKS\nRaiderTrainingSites[RaiderTraining.ENGINEER] = EntityType.UPGRADE\nRaiderTrainingSites[RaiderTraining.GEOLOGIST] = EntityType.GEODOME\nRaiderTrainingSites[RaiderTraining.PILOT] = EntityType.TELEPORT_PAD\nRaiderTrainingSites[RaiderTraining.SAILOR] = EntityType.DOCKS\nRaiderTrainingSites[RaiderTraining.DEMOLITION] = EntityType.TOOLSTATION\n\nexport const RaiderTrainingStatsProperty: string[] = []\nRaiderTrainingStatsProperty[RaiderTraining.DRIVER] = 'TrainDriver'\nRaiderTrainingStatsProperty[RaiderTraining.ENGINEER] = 'TrainRepair'\nRaiderTrainingStatsProperty[RaiderTraining.GEOLOGIST] = 'TrainScanner'\nRaiderTrainingStatsProperty[RaiderTraining.PILOT] = 'TrainPilot'\nRaiderTrainingStatsProperty[RaiderTraining.SAILOR] = 'TrainSailor'\nRaiderTrainingStatsProperty[RaiderTraining.DEMOLITION] = 'TrainDynamite'\n","import { Vector3 } from 'three'\n\nexport interface Selectable {\n\n    getSelectionType(): SelectionType\n\n    select(): boolean\n\n    deselect(): any\n\n    getSelectionCenter(): Vector3\n\n}\n\nexport enum SelectionType {\n\n    NOTHING,\n    SURFACE,\n    RAIDER,\n    BUILDING,\n    VEHICLE,\n    GROUP,\n\n}\n","import { EventKey } from './EventKeyEnum'\n\nexport class GameEvent {\n\n    eventKey: EventKey\n    isLocal: boolean\n    guiForward: boolean\n\n    constructor(eventKey: EventKey) {\n        this.eventKey = eventKey\n        this.guiForward = true\n    }\n\n}\n","import { BuildingEntity } from '../game/model/building/BuildingEntity'\nimport { EntityType } from '../game/model/EntityType'\nimport { GameState } from '../game/model/GameState'\nimport { PriorityEntry } from '../game/model/job/PriorityList'\nimport { Surface } from '../game/model/map/Surface'\nimport { SurfaceType } from '../game/model/map/SurfaceType'\nimport { Raider } from '../game/model/raider/Raider'\nimport { AllRaiderTools, RaiderTool } from '../game/model/raider/RaiderTool'\nimport { AllRaiderTrainings, RaiderTraining } from '../game/model/raider/RaiderTraining'\nimport { SelectionType } from '../game/model/Selectable'\nimport { Cursors } from '../screen/Cursors'\nimport { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n        this.isLocal = true\n    }\n\n}\n\nexport class SelectionChanged extends LocalEvent {\n\n    selectionType: SelectionType\n    isGround: boolean\n    isPowerPath: boolean\n    canPlaceFence: boolean\n    isFloor: boolean\n    hasRubble: boolean\n    isDrillable: boolean\n    isDrillableHard: boolean\n    isReinforcable: boolean\n    someCarries: boolean\n    everyHasMaxLevel: boolean\n    canDoTraining: Map<RaiderTraining, boolean> = new Map()\n    everyHasTool: Map<RaiderTool, boolean> = new Map()\n    buildingCanUpgrade: boolean\n    buildingCanSwitchPower: boolean\n\n    constructor(selectionType: SelectionType = SelectionType.NOTHING, selectedSurface: Surface = null, selectedBuilding: BuildingEntity = null, selectedRaiders: Raider[] = null) {\n        super(EventKey.SELECTION_CHANGED)\n        this.selectionType = selectionType\n        this.isGround = selectedSurface?.surfaceType === SurfaceType.GROUND\n        this.isPowerPath = selectedSurface?.surfaceType === SurfaceType.POWER_PATH\n        this.isFloor = selectedSurface?.surfaceType.floor\n        this.hasRubble = selectedSurface?.hasRubble()\n        this.isDrillable = selectedSurface?.isDrillable()\n        this.isDrillableHard = selectedSurface?.isDrillableHard()\n        this.isReinforcable = selectedSurface?.isReinforcable()\n        this.canPlaceFence = selectedSurface?.canPlaceFence() && GameState.buildings.some((b) => b.entityType === EntityType.POWER_STATION && b.isUsable())\n        this.someCarries = !!selectedRaiders?.some((r) => !!r.carries)\n        this.everyHasMaxLevel = !!selectedRaiders?.every((r) => r.level >= r.stats.Levels)\n        AllRaiderTrainings.forEach((training) => this.canDoTraining.set(training, GameState.getTrainingSites(training).length > 0 && selectedRaiders?.some((r) => !r.hasTraining(training))))\n        AllRaiderTools.forEach((tool) => this.everyHasTool.set(tool, !!selectedRaiders?.every((r) => r.hasTool(tool))))\n        this.buildingCanUpgrade = selectedBuilding?.canUpgrade()\n        this.buildingCanSwitchPower = selectedBuilding?.stats.SelfPowered || selectedBuilding?.stats.PowerBuilding\n    }\n\n}\n\nexport class AirLevelChanged extends LocalEvent {\n\n    airLevel: number\n\n    constructor(airLevel: number) {\n        super(EventKey.AIR_LEVEL_CHANGED)\n        this.airLevel = airLevel\n    }\n\n}\n\nexport class ChangeCursor extends LocalEvent {\n\n    cursor: Cursors\n\n    constructor(cursor: Cursors) {\n        super(EventKey.CHANGE_CURSOR)\n        this.cursor = cursor\n    }\n\n}\n\nexport class SetupPriorityList extends LocalEvent {\n\n    priorityList: PriorityEntry[]\n\n    constructor(priorityList: PriorityEntry[]) {\n        super(EventKey.SETUP_PRIORITY_LIST)\n        this.priorityList = priorityList\n    }\n\n}\n\nexport class BuildingsChangedEvent extends LocalEvent {\n\n    usableBuildingsByTypeAndLevel: Map<EntityType, Map<number, number>> = new Map()\n\n    constructor() {\n        super(EventKey.BUILDINGS_CHANGED)\n        GameState.buildings.forEach((b) => {\n            if (b.isUsable()) {\n                const perLevel = this.usableBuildingsByTypeAndLevel.getOrUpdate(b.entityType, () => new Map())\n                perLevel.set(b.level, perLevel.getOrUpdate(b.level, () => 0) + 1)\n            }\n        })\n    }\n\n    static countUsable(event: BuildingsChangedEvent, building: EntityType, minLevel: number = 0) {\n        let result = 0\n        event.usableBuildingsByTypeAndLevel.getOrUpdate(building, () => new Map()).forEach((count, level) => {\n            if (level >= minLevel) result += count\n        })\n        return result\n    }\n\n}\n\nexport class RaidersChangedEvent extends LocalEvent {\n\n    numRaiders: number\n    training: RaiderTraining\n\n    constructor(training: RaiderTraining = null) {\n        super(EventKey.RAIDERS_CHANGED)\n        this.numRaiders = GameState.raiders.length\n        this.training = training\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { LevelRewardConfig } from '../../cfg/LevelsCfg'\nimport { EventBus } from '../../event/EventBus'\nimport { SelectionChanged } from '../../event/LocalEvents'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../../params'\nimport { BaseEntity } from './BaseEntity'\nimport { BuildingEntity } from './building/BuildingEntity'\nimport { BuildingSite } from './building/BuildingSite'\nimport { MaterialEntity } from './collect/MaterialEntity'\nimport { EntityType } from './EntityType'\nimport { PriorityList } from './job/PriorityList'\nimport { Surface } from './map/Surface'\nimport { Bat } from './monster/Bat'\nimport { SmallSpider } from './monster/SmallSpider'\nimport { Raider } from './raider/Raider'\nimport { RaiderTraining, RaiderTrainingSites, RaiderTrainingStatsProperty } from './raider/RaiderTraining'\nimport { Selectable, SelectionType } from './Selectable'\n\nexport enum GameResultState {\n\n    RUNNING,\n    COMPLETE,\n    FAILED,\n\n}\n\nexport class GameState {\n\n    static resultState: GameResultState = GameResultState.RUNNING\n    static levelFullName: string = ''\n    static numCrystal: number = 0\n    static numOre: number = 0\n    static numBrick: number = 0\n    static usedCrystals: number = 0\n    static neededCrystals: number = 0\n    static airLevel: number = 1 // air level in percent from 0 to 1.0\n    static selectedEntities: Selectable[] = []\n    static selectionType: SelectionType = null\n    static buildings: BuildingEntity[] = []\n    static buildingsUndiscovered: BuildingEntity[] = []\n    static raiders: Raider[] = []\n    static raidersUndiscovered: Raider[] = []\n    static requestedRaiders: number = 0\n    static materials: MaterialEntity[] = []\n    static materialsUndiscovered: MaterialEntity[] = []\n    static buildingSites: BuildingSite[] = []\n    static spiders: SmallSpider[] = []\n    static spidersBySurface: Map<Surface, SmallSpider[]> = new Map()\n    static bats: Bat[] = []\n    static totalCrystals: number = 0\n    static totalOres: number = 0\n    static totalDiggables: number = 0\n    static remainingDiggables: number = 0\n    static totalCaverns: number = 0\n    static discoveredCaverns: number = 0\n    static levelStartTime: number = 0\n    static levelStopTime: number = 0\n    static rewardConfig: LevelRewardConfig = null\n    static priorityList: PriorityList = new PriorityList()\n    static oxygenRate: number = 0\n    static buildModeSelection: BuildingEntity = null\n    static objectiveShown: boolean = false\n    static objectiveSwitch: boolean = false\n\n    static reset() {\n        this.resultState = GameResultState.RUNNING\n        this.levelFullName = ''\n        this.numCrystal = 0\n        this.numOre = 0\n        this.numBrick = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.airLevel = 1\n        this.selectedEntities = []\n        this.selectionType = null\n        this.buildings = []\n        this.buildingsUndiscovered = []\n        this.raiders = []\n        this.raidersUndiscovered = []\n        this.requestedRaiders = 0\n        this.materials = []\n        this.materialsUndiscovered = []\n        this.buildingSites = []\n        this.spiders = []\n        this.spidersBySurface = new Map()\n        this.bats = []\n        this.totalCrystals = 0\n        this.totalOres = 0\n        this.totalDiggables = 0\n        this.remainingDiggables = 0\n        this.totalCaverns = 0\n        this.discoveredCaverns = 0\n        this.levelStartTime = 0\n        this.levelStopTime = 0\n        this.rewardConfig = null\n        this.priorityList = new PriorityList()\n        this.oxygenRate = 0\n        this.buildModeSelection = null\n        this.objectiveShown = false\n        this.objectiveSwitch = false\n    }\n\n    static getBuildingsByType(...buildingTypes: EntityType[]): BuildingEntity[] {\n        return this.buildings.filter(b => b.isUsable() && buildingTypes.some(bt => b.entityType === bt))\n    }\n\n    static getClosestBuildingByType(position: Vector3, ...buildingTypes: EntityType[]): BuildingEntity {\n        const targetBuildings = GameState.getBuildingsByType(...buildingTypes)\n        let closest = null, minDist = null\n        targetBuildings.forEach((b) => {\n            const bPos = b.getDropPosition()\n            const dist = position.distanceToSquared(bPos) // TODO better use pathfinding\n            if (closest === null || dist < minDist) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static getTrainingSites(training: RaiderTraining): BuildingEntity[] {\n        return this.buildings.filter((b) => b.entityType === RaiderTrainingSites[training] && b.isUsable() && b.stats[RaiderTrainingStatsProperty[training]][b.level])\n    }\n\n    static selectEntities(entities: Selectable[]) {\n        this.selectedEntities = this.selectedEntities.filter((previouslySelected) => {\n            const stillSelected = entities.indexOf(previouslySelected) !== -1\n            if (!stillSelected) previouslySelected.deselect()\n            return stillSelected\n        })\n        // add new entities that are selectable\n        entities.forEach((freshlySelected) => {\n            if (freshlySelected.select()) {\n                this.selectedEntities.push(freshlySelected)\n            }\n        })\n        // determine and set next selection type\n        const len = this.selectedEntities.length\n        if (len > 1) {\n            this.selectionType = SelectionType.GROUP\n        } else if (len === 1) {\n            this.selectionType = this.selectedEntities[0].getSelectionType()\n        } else if (this.selectionType !== null) {\n            this.selectionType = SelectionType.NOTHING\n        }\n        // AFTER updating selected entities and selection type, publish all events\n        EventBus.publishEvent(new SelectionChanged(this.selectionType, this.selectedSurface, this.selectedBuilding, this.selectedRaiders))\n    }\n\n    static getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + GameState.buildings.count((b) => b.isUsable() && b.entityType === EntityType.BARRACKS) * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    static discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE\n        this.discoverEntities(this.raidersUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.buildingsUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.materialsUndiscovered, minX, maxX, minZ, maxZ)\n    }\n\n    static discoverEntities(undiscovered: BaseEntity[], minX, maxX, minZ, maxZ) {\n        const discovered = []\n        undiscovered.forEach((e) => {\n            const pos = e.getPosition()\n            if (pos.x >= minX && pos.x < maxX && pos.z >= minZ && pos.z < maxZ) {\n                e.onDiscover()\n                discovered.push(e)\n            }\n        })\n        discovered.forEach((r) => undiscovered.remove(r))\n    }\n\n    static get gameTimeSeconds() {\n        return Math.round((GameState.levelStopTime - GameState.levelStartTime) / 1000)\n    }\n\n    static get score() {\n        if (!GameState.rewardConfig) return 0\n        let quota = GameState.rewardConfig.quota\n        let importance = GameState.rewardConfig.importance\n        const scoreCrystals = GameState.numCrystal >= (quota.crystals || Infinity) ? importance.crystals : 0\n        const scoreTimer = GameState.gameTimeSeconds <= (quota.timer || 0) ? importance.timer : 0\n        const scoreCaverns = quota.caverns ? Math.min(1, GameState.discoveredCaverns / quota.caverns) * importance.caverns : 0\n        const scoreConstructions = quota.constructions ? Math.min(1, GameState.buildings.length / quota.constructions * importance.constructions) : 0\n        const scoreOxygen = GameState.airLevel * importance.oxygen\n        const scoreFigures = GameState.raiders.length >= MAX_RAIDER_BASE ? importance.figures : 0\n        return Math.round(scoreCrystals + scoreTimer + scoreCaverns + scoreConstructions + scoreOxygen + scoreFigures) / 100\n    }\n\n    static get selectedSurface(): Surface {\n        return this.selectionType === SelectionType.SURFACE && this.selectedEntities.length > 0 ? this.selectedEntities[0] as Surface : null\n    }\n\n    static get selectedBuilding(): BuildingEntity {\n        return this.selectionType === SelectionType.BUILDING && this.selectedEntities.length > 0 ? this.selectedEntities[0] as BuildingEntity : null\n    }\n\n    static get selectedRaiders(): Raider[] {\n        return (this.selectionType === SelectionType.RAIDER || this.selectionType === SelectionType.GROUP) && this.selectedEntities.length > 0 ? this.selectedEntities as Raider[] : []\n    }\n\n    static get totalOre(): number {\n        return this.numOre + this.numBrick * 5\n    }\n\n    static getNearbySpiders(entity: BaseEntity): SmallSpider[] {\n        const terrain = entity.sceneMgr.terrain\n        const currentSurface = terrain.getSurfaceFromWorld(entity.getPosition())\n        const nearbySpiders: SmallSpider[] = []\n        for (let x = currentSurface.x; x <= currentSurface.x + 1; x++) {\n            for (let y = currentSurface.y; y <= currentSurface.y + 1; y++) {\n                const surface = terrain.getSurface(x, y)\n                nearbySpiders.push(...(GameState.spidersBySurface.get(surface) || []))\n            }\n        }\n        return nearbySpiders\n    }\n\n}\n","import { LevelPrioritiesEntryConfig } from '../../../cfg/LevelsCfg'\nimport { PublicJob } from './Job'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport class PriorityList {\n\n    levelDefault: PriorityEntry[] = []\n    current: PriorityEntry[] = []\n\n    setList(priorities: PriorityEntry[]) {\n        this.levelDefault = priorities\n        this.reset()\n    }\n\n    toggle(index: number) {\n        this.current[index].enabled = !this.current[index].enabled\n    }\n\n    upOne(index: number) {\n        const tmp = this.current[index]\n        this.current[index] = this.current[index + 1]\n        this.current[index + 1] = tmp\n    }\n\n    reset() {\n        this.current = this.levelDefault.map(entry => new PriorityEntry(entry)) // use deep copy to avoid interference\n    }\n\n    pushToTop(index: number) {\n        const element = this.current[index]\n        for (let c = index; c > 0; c--) {\n            this.current[c] = this.current[c - 1]\n        }\n        this.current[0] = element\n    }\n\n    getPriority(job: PublicJob) {\n        let priority = 0\n        this.current.some((j, index) => {\n            if (j.key === job.getPriorityIdentifier()) {\n                priority = index\n                return true\n            }\n        })\n        return priority\n    }\n\n    isEnabled(priorityIdentifier: PriorityIdentifier): boolean {\n        return this.current.find((entry) => entry.key === priorityIdentifier)?.enabled || false\n    }\n}\n\nexport class PriorityEntry {\n\n    key: PriorityIdentifier\n    enabled: boolean\n\n    constructor(levelPriorityEntry: LevelPrioritiesEntryConfig) {\n        this.key = levelPriorityEntry.key\n        this.enabled = levelPriorityEntry.enabled\n    }\n\n}\n","/**\n * creates a new context with the specified dimensions.\n * @param width: the desired width of the new context\n * @param height: the desired height of the new context\n * @returns RenderingContext the newly created canvas\n */\nexport function createContext(width, height) {\n    if (width < 1 || height < 1) {\n        console.error('Can\\'t create context with size ' + width + ' x ' + height);\n        return createDummyContext(64, 64);\n    }\n    let canvas\n    if (typeof document !== 'undefined') {\n        canvas = document.createElement('canvas')\n        canvas.setAttribute('width', width);\n        canvas.setAttribute('height', height);\n    } else {\n        canvas = new OffscreenCanvas(width, height)\n    }\n    const context = canvas.getContext('2d');\n    context.width = width;\n    context.height = height;\n    return context;\n}\n\n/**\n * This method is intended to increase stability by providing an (ugly) placeholder image in case the right one is missing\n * @param width: expected width of the original image\n * @param height: expected height of the original image\n */\nexport function createDummyContext(width, height) {\n    const result = createContext(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            if (x / 16 % 2 === y / 16 % 2) {\n                result.fillStyle = 'rgb(0,255,255)';\n            } else {\n                result.fillStyle = 'rgb(255,0,255)';\n            }\n            result.fillRect(x, y, 16, 16);\n        }\n    }\n    return result;\n}\n\nexport function createDummyImgData(width, height) {\n    const result = new ImageData(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            const e = x / 16 % 2 === y / 16 % 2;\n            for (let px = x; px < x + 16; px++) {\n                for (let py = y; py < y + 16; py++) {\n                    setPixel(result, px, py, e ? 0 : 255, e ? 255 : 0, 255);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport function setPixel(imgData, x, y, r, g, b, a = 255) {\n    const n = (y * imgData.width + x) * 4;\n    imgData.data[n] = r;\n    imgData.data[n + 1] = g;\n    imgData.data[n + 2] = b;\n    imgData.data[n + 3] = a;\n}\n\nexport function getPixel(imgData, x, y) {\n    const n = (y * imgData.width + x) * 4;\n    return {r: imgData.data[n], g: imgData.data[n + 1], b: imgData.data[n + 2], a: imgData.data[n + 3]};\n}\n","import { AnimClip } from './AnimClip'\n\nexport class AnimationEntityType {\n\n    carryNullName: string = ''\n    depositNullName: string = ''\n    toolNullName: string = ''\n    mediumPoly: {} = {}\n    highPoly: {} = {}\n    fPPoly: {} = {}\n    activities: Map<string, { file: string, transcoef: number, lwsfile: boolean, animation: AnimClip }> = new Map()\n\n}\n","const Stats = require('stats.js')\n\nexport class DebugHelper {\n\n    stats\n\n    constructor() {\n        this.stats = new Stats()\n        this.stats.setMode(0) // 0: fps, 1: ms\n\n        this.stats.domElement.style.position = 'absolute'\n        this.stats.domElement.style.left = '0px'\n        this.stats.domElement.style.top = '0px'\n\n        document.body.appendChild(this.stats.domElement)\n        this.hide()\n    }\n\n    show() {\n        this.stats.domElement.style.visibility = 'visible'\n    }\n\n    hide() {\n        this.stats.domElement.style.visibility = 'hidden'\n    }\n\n    renderStart() {\n        this.stats.begin()\n    }\n\n    renderDone() {\n        this.stats.end()\n    }\n\n}\n","import { Vector2 } from 'three'\n\nexport class BarrierLocation {\n\n    location: Vector2\n    heading: number\n\n    constructor(location: Vector2, surfaceCenter: Vector2) {\n        this.location = location\n        this.heading = location.clone().sub(surfaceCenter).angle()\n        if (location.y === surfaceCenter.y) {\n            this.heading -= Math.PI / 2\n        } else {\n            this.heading += Math.PI / 2\n        }\n    }\n\n}\n","export enum WALL_TYPE {\n\n    CORNER = 1,\n    WALL = 2,\n    INVERTED_CORNER = 3,\n    WEIRD_CREVICE = 20,\n\n}\n","import { BufferGeometry, Vector2, Vector3 } from 'three'\nimport { BufferAttribute } from 'three/src/core/BufferAttribute'\nimport { WALL_TYPE } from './WallType'\n\nexport class SurfaceGeometry {\n\n    public static create(wallType: WALL_TYPE,\n                         topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3,\n                         topLeftHeight: number, topRightHeight: number, bottomRightHeight: number, bottomLeftHeight: number,\n    ) {\n        let uvOffset = 0\n\n        // not-rotated\n        // 1 ?\n        // ? 0\n        if (topLeftVertex.y && !bottomRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topRightVertex.y)))) {\n            uvOffset = 0\n        }\n\n        // 90 clock-wise\n        // ? 1\n        // 0 ?\n        if (topRightVertex.y && !bottomLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomRightVertex.y)))) {\n            uvOffset = 3\n        }\n\n        // 180 clock-wise\n        // 0 ?\n        // ? 1\n        if (bottomRightVertex.y && !topLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomLeftVertex.y)))) {\n            uvOffset = 2\n        }\n\n        // 270 clock-wise\n        // ? 0\n        // 1 ?\n        if (bottomLeftVertex.y && !topRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topLeftVertex.y)))) {\n            uvOffset = 1\n        }\n\n        if (wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) {\n            if (topLeftVertex.y && bottomRightVertex.y) {\n                uvOffset = 0\n            }\n            if (topRightVertex.y && bottomLeftVertex.y) {\n                uvOffset = 3\n            }\n        }\n\n        /*\n        //\t\t0---1                1         0---1\n        //\t\t|   |  becomes      /|   and   |  /\n        //\t\t|   |             /  |         |/\n        //\t\t3---2            3---2         3\n        //\n        //\t\tOR\n        //\n        //\t\t0---1            0             0---1\n        //\t\t|   |  becomes   |\\    \t and    \\  |\n        //\t\t|   |            |  \\             \\|\n        //\t\t3---2            3---2             2\n        //\n        //\t\tTriangles 0-1-3 and 0-3-2\n        //\t\tQuad 0-1-3-2\n        */\n\n        const uv = [\n            new Vector2(0, 1),\n            new Vector2(1, 1),\n            new Vector2(1, 0),\n            new Vector2(0, 0),\n        ]\n\n        const bufferVertices = []\n        const bufferNormals = []\n\n        function addFaceAndNormals(a, b, c) {\n            bufferVertices.push(a, b, c)\n            const normal = new Vector3().subVectors(c, b)\n            normal.cross(new Vector3().subVectors(a, b))\n            normal.normalize()\n            bufferNormals.push(normal, normal, normal)\n        }\n\n        const uvIndexes = []\n        if (topRightVertex.y !== bottomLeftVertex.y ||\n            ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) && !(topRightVertex.y && bottomLeftVertex.y))) {\n            uvIndexes.push(1, 3, 2)\n            uvIndexes.push(1, 0, 3)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topRightVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topRightVertex, topLeftVertex, bottomLeftVertex)\n        } else {\n            uvIndexes.push(0, 3, 2)\n            uvIndexes.push(0, 2, 1)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topLeftVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topLeftVertex, bottomRightVertex, topRightVertex)\n        }\n\n        const bufferVertexUvs = uvIndexes.map(i => uv[(i + uvOffset) % 4])\n\n        const bufferGeometry = new BufferGeometry()\n        bufferGeometry.setAttribute('position', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferVertices))\n        bufferGeometry.setAttribute('normal', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferNormals))\n        bufferGeometry.setAttribute('uv', new BufferAttribute(new Float32Array(12), 2).copyVector2sArray(bufferVertexUvs))\n        return bufferGeometry\n    }\n}\n","import { Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { TILESIZE } from '../../../params'\nimport { SurfaceGeometry } from '../map/SurfaceGeometry'\nimport { WALL_TYPE } from '../map/WallType'\n\nexport class BuildPlacementMarkerMesh extends Mesh {\n\n    static readonly geometry = SurfaceGeometry.create(WALL_TYPE.WALL,\n        new Vector3(0, 0, 0), new Vector3(TILESIZE, 0, TILESIZE),\n        new Vector3(TILESIZE, 0, 0), new Vector3(0, 0, TILESIZE),\n        1, 1, 1, 1,\n    )\n\n    standardColor: number\n\n    constructor(standardColor: number) {\n        super(BuildPlacementMarkerMesh.geometry, new MeshPhongMaterial({\n            shininess: 0,\n            transparent: true,\n            opacity: 0.4,\n            color: standardColor,\n        }))\n        this.standardColor = standardColor\n        this.visible = false\n    }\n\n    updateState(position: { x: number, y: number }, heading: number, primaryPosition: Vector3) {\n        this.visible = !!position\n        if (position) {\n            this.position.set(position.x, 0, position.y).multiplyScalar(TILESIZE)\n                .applyAxisAngle(new Vector3(0, 1, 0), -heading + Math.PI / 2)\n                .add(primaryPosition)\n        }\n    }\n\n    markAsValid(isValid: boolean) {\n        const color = isValid ? this.standardColor : 0x500000;\n        (this.material as MeshPhongMaterial).color.setHex(color)\n    }\n\n}\n","import { Group, Vector2 } from 'three'\nimport { TILESIZE } from '../../../params'\nimport { BarrierLocation } from '../collect/BarrierLocation'\nimport { GameState } from '../GameState'\nimport { Surface } from '../map/Surface'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { Terrain } from '../map/Terrain'\nimport { BuildPlacementMarkerMesh } from './BuildPlacementMarkerMesh'\n\nexport class BuildPlacementMarker {\n\n    static readonly buildingMarkerColor: number = 0x005000\n    static readonly pathMarkerColor: number = 0x505000\n    static readonly waterMarkerColor: number = 0x000050\n\n    group: Group = new Group()\n    markers: BuildPlacementMarkerMesh[] = []\n    buildingMarkerPrimary: BuildPlacementMarkerMesh = null\n    buildingMarkerSecondary: BuildPlacementMarkerMesh = null\n    powerPathMarkerPrimary: BuildPlacementMarkerMesh = null\n    powerPathMarkerSecondary: BuildPlacementMarkerMesh = null\n    waterPathMarker: BuildPlacementMarkerMesh = null\n    heading: number = 0\n    sdx: number = 0\n    sdz: number = 0\n    lastCheck: boolean = false\n    visibleSurfaces: Surface[] = []\n    primarySurface: Surface = null\n    secondarySurface: Surface = null\n    waterSurface: Surface = null\n\n    constructor() {\n        this.buildingMarkerPrimary = new BuildPlacementMarkerMesh(BuildPlacementMarker.buildingMarkerColor)\n        this.buildingMarkerSecondary = new BuildPlacementMarkerMesh(BuildPlacementMarker.buildingMarkerColor)\n        this.powerPathMarkerPrimary = new BuildPlacementMarkerMesh(BuildPlacementMarker.pathMarkerColor)\n        this.powerPathMarkerSecondary = new BuildPlacementMarkerMesh(BuildPlacementMarker.pathMarkerColor)\n        this.waterPathMarker = new BuildPlacementMarkerMesh(BuildPlacementMarker.waterMarkerColor)\n        this.addMarker(this.buildingMarkerPrimary)\n        this.addMarker(this.buildingMarkerSecondary)\n        this.addMarker(this.powerPathMarkerPrimary)\n        this.addMarker(this.powerPathMarkerSecondary)\n        this.addMarker(this.waterPathMarker)\n    }\n\n    private addMarker(marker: BuildPlacementMarkerMesh) {\n        this.group.add(marker)\n        this.markers.push(marker)\n    }\n\n    update(terrain: Terrain, worldPosition: Vector2) {\n        if (!worldPosition || !GameState.buildModeSelection) {\n            this.hideAllMarker()\n        } else {\n            const isValid = this.updateAllMarker(terrain, worldPosition)\n            this.markers.forEach((c) => c.markAsValid(isValid))\n        }\n    }\n\n    private updateAllMarker(terrain: Terrain, worldPosition: Vector2 = null): boolean {\n        // TODO use surface height offsets, refactor terrain map/data handling before\n        this.buildingMarkerPrimary.visible = true\n        this.buildingMarkerPrimary.position.copy(terrain.sceneMgr.getFloorPosition(new Vector2(Math.floor(worldPosition.x / TILESIZE) * TILESIZE, Math.floor(worldPosition.y / TILESIZE) * TILESIZE)))\n        const sdxv = worldPosition.x - this.buildingMarkerPrimary.position.x - TILESIZE / 2\n        const sdzv = worldPosition.y - this.buildingMarkerPrimary.position.z - TILESIZE / 2\n        const sdx = Math.abs(sdxv) > Math.abs(sdzv) ? Math.sign(sdxv) : 0\n        const sdz = Math.abs(sdzv) > Math.abs(sdxv) ? Math.sign(sdzv) : 0\n        if (this.sdx === sdx && this.sdz === sdz) return this.lastCheck\n        this.sdx = sdx\n        this.sdz = sdz\n        this.heading = Math.atan2(sdz, sdx)\n        this.buildingMarkerSecondary.updateState(GameState.buildModeSelection.secondaryBuildingPart, this.heading, this.buildingMarkerPrimary.position)\n        this.powerPathMarkerPrimary.updateState(GameState.buildModeSelection.primaryPowerPath, this.heading, this.buildingMarkerPrimary.position)\n        this.powerPathMarkerSecondary.updateState(GameState.buildModeSelection.secondaryPowerPath, this.heading, this.buildingMarkerPrimary.position)\n        this.waterPathMarker.updateState(GameState.buildModeSelection.waterPathSurface, this.heading, this.buildingMarkerPrimary.position)\n        this.visibleSurfaces = [this.buildingMarkerPrimary, this.buildingMarkerSecondary, this.powerPathMarkerPrimary, this.powerPathMarkerSecondary]\n            .filter((c) => c.visible).map((c) => terrain.getSurfaceFromWorld(c.position))\n        this.primarySurface = this.visibleSurfaces[0]\n        this.secondarySurface = this.buildingMarkerSecondary.visible ? this.visibleSurfaces[1] : null\n        this.waterSurface = this.waterPathMarker.visible ? terrain.getSurfaceFromWorld(this.waterPathMarker.position) : null\n        this.lastCheck = this.visibleSurfaces.every((s) => s.surfaceType === SurfaceType.GROUND)\n            && ([this.powerPathMarkerPrimary, this.powerPathMarkerSecondary]\n                    .some((c) => c.visible && terrain.getSurfaceFromWorld(c.position).neighbors\n                        .some((n) => n.surfaceType === SurfaceType.POWER_PATH)) ||\n                !GameState.buildModeSelection.primaryPowerPath && this.primarySurface.neighbors.some((n) => n.surfaceType === SurfaceType.POWER_PATH))\n            && (!this.waterPathMarker.visible || this.waterSurface.surfaceType === SurfaceType.WATER)\n        return this.lastCheck\n    }\n\n    hideAllMarker() {\n        this.markers.forEach((m) => m.visible = false)\n        this.lastCheck = false\n    }\n\n    getBarrierLocations(): BarrierLocation[] {\n        const barrierLocations: BarrierLocation[] = []\n        const center = this.primarySurface.getCenterWorld2D()\n        const barrierOffset = TILESIZE * 9 / 20\n        if (this.secondarySurface) {\n            const secondary = this.secondarySurface.getCenterWorld2D()\n            const dx = Math.sign(secondary.x - center.x)\n            const dy = Math.sign(secondary.y - center.y)\n            if (dx !== 0) {\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x - dx * barrierOffset, center.y), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y - barrierOffset), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y + barrierOffset), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x + dx * barrierOffset, center.y), secondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x, secondary.y - barrierOffset), secondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x, secondary.y + barrierOffset), secondary))\n            } else {\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y - dy * barrierOffset), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x - barrierOffset, center.y), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(center.x + barrierOffset, center.y), center))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x, secondary.y + dy * barrierOffset), secondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x - barrierOffset, center.y), secondary))\n                barrierLocations.push(new BarrierLocation(new Vector2(secondary.x + barrierOffset, center.y), secondary))\n            }\n        } else {\n            barrierLocations.push(new BarrierLocation(new Vector2(center.x - barrierOffset, center.y), center))\n            barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y - barrierOffset), center))\n            barrierLocations.push(new BarrierLocation(new Vector2(center.x + barrierOffset, center.y), center))\n            barrierLocations.push(new BarrierLocation(new Vector2(center.x, center.y + barrierOffset), center))\n        }\n        return barrierLocations\n    }\n\n}\n","// javascript-astar 0.4.1 (converted to typescript by Scarabol)\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n\nfunction pathTo(node) {\n    let curr = node\n    const path = []\n    while (curr.parent) {\n        path.unshift(curr)\n        curr = curr.parent\n    }\n    return path\n}\n\nfunction getHeap() {\n    return new BinaryHeap(function (node) {\n        return node.f\n    })\n}\n\nexport const astar = {\n\n    /**\n     * Perform an A* Search on a graph given a start and end node.\n     * @param {Graph} graph\n     * @param {GridNode} start\n     * @param {GridNode} end\n     * @param {Object} [options]\n     * @param {boolean} [options.closest] Specifies whether to return the\n     path to the closest node if the target is unreachable.\n     * @param {Function} [options.heuristic] Heuristic function (see\n     *          astar.heuristics).\n     */\n    search(graph: Graph, start: GridNode, end: GridNode, options = null): GridNode[] {\n        graph.cleanDirty()\n        options = options || {}\n        const heuristic = options.heuristic || astar.heuristics.manhattan\n        const closest = options.closest || false\n\n        const openHeap = getHeap()\n        let closestNode = start  // set the start node to be the closest if required\n\n        start.h = heuristic(start, end)\n        graph.markDirty(start)\n\n        openHeap.push(start)\n\n        while (openHeap.size() > 0) {\n\n            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n            const currentNode = openHeap.pop()\n\n            // End case -- result has been found, return the traced path.\n            if (currentNode === end) {\n                return pathTo(currentNode)\n            }\n\n            // Normal case -- move currentNode from open to closed, process each of its neighbors.\n            currentNode.closed = true\n\n            // Find all neighbors for the current node.\n            const neighbors = graph.neighbors(currentNode)\n\n            let i = 0\n            const il = neighbors.length\n            for (; i < il; ++i) {\n                const neighbor = neighbors[i]\n\n                if (neighbor.closed || neighbor.isWall()) {\n                    // Not a valid node to process, skip to next neighbor.\n                    continue\n                }\n\n                // The g score is the shortest distance from start to current node.\n                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n                const gScore = currentNode.g + neighbor.getCost(currentNode)\n                const beenVisited = neighbor.visited\n\n                if (!beenVisited || gScore < neighbor.g) {\n\n                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n                    neighbor.visited = true\n                    neighbor.parent = currentNode\n                    neighbor.h = neighbor.h || heuristic(neighbor, end)\n                    neighbor.g = gScore\n                    neighbor.f = neighbor.g + neighbor.h\n                    graph.markDirty(neighbor)\n                    if (closest) {\n                        // If the neighbour is closer than the current closestNode or if it's equally close but has\n                        // a cheaper path than the current closest node then it becomes the closest node\n                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n                            closestNode = neighbor\n                        }\n                    }\n\n                    if (!beenVisited) {\n                        // Pushing to heap will put it in proper place based on the 'f' value.\n                        openHeap.push(neighbor)\n                    } else {\n                        // Already seen the node, but since it has been rescored we need to reorder it in the heap\n                        openHeap.rescoreElement(neighbor)\n                    }\n                }\n            }\n        }\n\n        if (closest) {\n            return pathTo(closestNode)\n        }\n\n        // No result was found - empty array signifies failure to find path.\n        return []\n    },\n\n    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n    heuristics: {\n        manhattan(pos0, pos1) {\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return d1 + d2\n        },\n\n        diagonal(pos0, pos1) {\n            const D = 1\n            const D2 = Math.sqrt(2)\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2))\n        },\n    },\n\n    cleanNode(node) {\n        node.f = 0\n        node.g = 0\n        node.h = 0\n        node.visited = false\n        node.closed = false\n        node.parent = null\n    },\n}\n\nexport class Graph {\n\n    readonly nodes: GridNode[] = []\n    readonly diagonal: boolean\n    readonly grid: GridNode[][] = []\n    dirtyNodes: GridNode[] = []\n\n    /**\n     * A graph memory structure\n     * @param {Array} gridIn 2D array of input weights\n     * @param {Object} [options]\n     * @param {boolean} [options.diagonal] Specifies whether diagonal moves are allowed\n     */\n    constructor(gridIn: number[][], options = null) {\n        options = options || {}\n        this.diagonal = !!options.diagonal\n        for (let x = 0; x < gridIn.length; x++) {\n            this.grid[x] = []\n\n            let y = 0\n            const row = gridIn[x]\n            for (; y < row.length; y++) {\n                const node = new GridNode(x, y, row[y])\n                this.grid[x][y] = node\n                this.nodes.push(node)\n            }\n        }\n        this.init()\n    }\n\n    init() {\n        this.dirtyNodes = []\n        for (let i = 0; i < this.nodes.length; i++) {\n            astar.cleanNode(this.nodes[i])\n        }\n    }\n\n    cleanDirty() {\n        for (let i = 0; i < this.dirtyNodes.length; i++) {\n            astar.cleanNode(this.dirtyNodes[i])\n        }\n        this.dirtyNodes = []\n    }\n\n    markDirty(node) {\n        this.dirtyNodes.push(node)\n    }\n\n    neighbors(node: GridNode) {\n        const ret: GridNode[] = []\n        const x = node.x\n        const y = node.y\n        const grid = this.grid\n\n        // West\n        if (grid[x - 1] && grid[x - 1][y]) {\n            ret.push(grid[x - 1][y])\n        }\n\n        // East\n        if (grid[x + 1] && grid[x + 1][y]) {\n            ret.push(grid[x + 1][y])\n        }\n\n        // South\n        if (grid[x] && grid[x][y - 1]) {\n            ret.push(grid[x][y - 1])\n        }\n\n        // North\n        if (grid[x] && grid[x][y + 1]) {\n            ret.push(grid[x][y + 1])\n        }\n\n        if (this.diagonal) {\n            // Southwest\n            if (grid[x - 1] && grid[x - 1][y - 1]) {\n                ret.push(grid[x - 1][y - 1])\n            }\n\n            // Southeast\n            if (grid[x + 1] && grid[x + 1][y - 1]) {\n                ret.push(grid[x + 1][y - 1])\n            }\n\n            // Northwest\n            if (grid[x - 1] && grid[x - 1][y + 1]) {\n                ret.push(grid[x - 1][y + 1])\n            }\n\n            // Northeast\n            if (grid[x + 1] && grid[x + 1][y + 1]) {\n                ret.push(grid[x + 1][y + 1])\n            }\n        }\n\n        return ret\n    }\n\n    toString() {\n        const graphString = []\n        const nodes = this.grid\n        for (let x = 0; x < nodes.length; x++) {\n            const rowDebug = []\n            const row = nodes[x]\n            for (let y = 0; y < row.length; y++) {\n                rowDebug.push(row[y].weight)\n            }\n            graphString.push(rowDebug.join(' '))\n        }\n        return graphString.join('\\n')\n    }\n}\n\nclass GridNode {\n\n    x: number\n    y: number\n    weight: number\n    h: number\n    closed: boolean\n    visited: boolean\n    g: number\n    parent: GridNode\n    f: number\n\n    constructor(x, y, weight) {\n        this.x = x\n        this.y = y\n        this.weight = weight\n    }\n\n    toString() {\n        return '[' + this.x + ' ' + this.y + ']'\n    }\n\n    getCost(fromNeighbor: GridNode) {\n        // Take diagonal weight into consideration.\n        if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n            return this.weight * 1.41421\n        }\n        return this.weight\n    }\n\n    isWall() {\n        return this.weight === 0\n    }\n}\n\nclass BinaryHeap {\n\n    content = []\n    scoreFunction\n\n    constructor(scoreFunction) {\n        this.content = []\n        this.scoreFunction = scoreFunction\n    }\n\n    push(element) {\n        // Add the new element to the end of the array.\n        this.content.push(element)\n\n        // Allow it to sink down.\n        this.sinkDown(this.content.length - 1)\n    }\n\n    pop() {\n        // Store the first element so we can return it later.\n        const result = this.content[0]\n        // Get the element at the end of the array.\n        const end = this.content.pop()\n        // If there are any elements left, put the end element at the\n        // start, and let it bubble up.\n        if (this.content.length > 0) {\n            this.content[0] = end\n            this.bubbleUp(0)\n        }\n        return result\n    }\n\n    remove(node) {\n        const i = this.content.indexOf(node)\n\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        const end = this.content.pop()\n\n        if (i !== this.content.length - 1) {\n            this.content[i] = end\n\n            if (this.scoreFunction(end) < this.scoreFunction(node)) {\n                this.sinkDown(i)\n            } else {\n                this.bubbleUp(i)\n            }\n        }\n    }\n\n    size() {\n        return this.content.length\n    }\n\n    rescoreElement(node) {\n        this.sinkDown(this.content.indexOf(node))\n    }\n\n    sinkDown(n) {\n        // Fetch the element that has to be sunk.\n        const element = this.content[n]\n\n        // When at 0, an element can not sink any further.\n        while (n > 0) {\n\n            // Compute the parent element's index, and fetch it.\n            const parentN = ((n + 1) >> 1) - 1\n            const parent = this.content[parentN]\n            // Swap the elements if the parent is greater.\n            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n                this.content[parentN] = element\n                this.content[n] = parent\n                // Update 'n' to continue at the new position.\n                n = parentN\n            }\n            // Found a parent that is less, no need to sink any further.\n            else {\n                break\n            }\n        }\n    }\n\n    bubbleUp(n) {\n        // Look up the target element and its score.\n        const length = this.content.length\n        const element = this.content[n]\n        const elemScore = this.scoreFunction(element)\n\n        while (true) {\n            // Compute the indices of the child elements.\n            const child2N = (n + 1) << 1\n            const child1N = child2N - 1\n            // This is used to store the new position of the element, if any.\n            let swap = null\n            let child1Score\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                const child1 = this.content[child1N]\n                child1Score = this.scoreFunction(child1)\n\n                // If the score is less than our element's, we need to swap.\n                if (child1Score < elemScore) {\n                    swap = child1N\n                }\n            }\n\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                const child2 = this.content[child2N]\n                const child2Score = this.scoreFunction(child2)\n                if (child2Score < (swap === null ? elemScore : child1Score)) {\n                    swap = child2N\n                }\n            }\n\n            // If the element needs to be moved, swap it, and continue.\n            if (swap !== null) {\n                this.content[n] = this.content[swap]\n                this.content[swap] = element\n                n = swap\n            }\n            // Otherwise, we are done.\n            else {\n                break\n            }\n        }\n    }\n}\n","import { GameState } from '../game/model/GameState'\nimport { PublicJob } from '../game/model/job/Job'\nimport { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class WorldEvent extends GameEvent {\n\n    constructor(entityKey: EventKey) {\n        super(entityKey)\n        this.isLocal = false\n    }\n\n}\n\nexport abstract class JobEvent extends WorldEvent {\n\n    job: PublicJob\n\n    protected constructor(eventKey: EventKey, job: PublicJob) {\n        super(eventKey)\n        this.guiForward = false\n        this.job = job\n    }\n\n}\n\nexport class JobCreateEvent extends JobEvent {\n\n    constructor(job: PublicJob) {\n        super(EventKey.JOB_CREATE, job)\n    }\n\n}\n\nexport class JobDeleteEvent extends JobEvent {\n\n    constructor(job: PublicJob) {\n        super(EventKey.JOB_DELETE, job)\n    }\n\n}\n\nexport class RequestedRaidersChanged extends WorldEvent {\n\n    numRequestedRaiders: number\n\n    constructor(requestedRaiders: number) {\n        super(EventKey.REQUESTED_RAIDERS_CHANGED)\n        this.numRequestedRaiders = requestedRaiders\n    }\n\n}\n\nexport class MaterialAmountChanged extends WorldEvent {\n\n    numCrystal: number\n    usedCrystal: number\n    neededCrystal: number\n    totalOre: number\n\n    constructor() {\n        super(EventKey.MATERIAL_AMOUNT_CHANGED)\n        this.numCrystal = GameState.numCrystal\n        this.usedCrystal = GameState.usedCrystals\n        this.neededCrystal = GameState.neededCrystals\n        this.totalOre = GameState.totalOre\n    }\n\n}\n\nexport class CavernDiscovered extends WorldEvent {\n\n    constructor() {\n        super(EventKey.CAVERN_DISCOVERED)\n    }\n\n}\n\nexport class OreFoundEvent extends WorldEvent {\n\n    constructor() {\n        super(EventKey.ORE_FOUND)\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { EventKey } from './EventKeyEnum'\nimport { WorldEvent } from './WorldEvents'\n\nexport class WorldLocationEvent extends WorldEvent {\n\n    location: Vector3\n\n    constructor(entityKey: EventKey, location: Vector3) {\n        super(entityKey)\n        this.location = location\n    }\n\n}\n\nexport class GenericDeathEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_DEATH, location)\n    }\n\n}\n\nexport class GenericMonsterEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_MONSTER, location)\n    }\n\n}\n\nexport class CrystalFoundEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_CRYSTAL_FOUND, location)\n    }\n\n}\n\nexport class UnderAttackEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_UNDER_ATTACK, location)\n    }\n\n}\n\nexport class LandslideEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_LANDSLIDE, location)\n    }\n\n}\n\nexport class PowerDrainEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_POWER_DRAIN, location)\n    }\n\n}\n\nexport class SlugEmergeEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_SLUG_EMERGE, location)\n    }\n\n}\n\nexport class RaiderDiscoveredEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_RAIDER_DISCOVERED, location)\n    }\n\n}\n","import { AnimSubObj } from './AnimSubObj'\n\nexport class AnimClip {\n\n    looping: boolean = false\n    transcoef: number = 1\n    firstFrame: number = null\n    lastFrame: number = null\n    framesPerSecond: number = null\n    bodies: AnimSubObj[] = []\n\n}\n","import { Euler, MathUtils, Object3D, Vector3 } from 'three'\nimport degToRad = MathUtils.degToRad\n\nexport class AnimSubObj {\n\n    name: string = ''\n    filename: string = ''\n    relPos: Vector3[] = []\n    relRot: Euler[] = []\n    relScale: Vector3[] = []\n    opacity: number[] = []\n    parentObjInd: number = null\n    model: Object3D = null\n\n    radVec(degX: number, degY: number, degZ: number) {\n        return new Euler(degToRad(degY), degToRad(degX), degToRad(degZ), 'YXZ')\n    }\n\n    setFrameAndFollowing(animationFrameIndex: number, lastFrame: number, infos: number[]) {\n        this.relPos[animationFrameIndex] = new Vector3(infos[0], infos[1], infos[2])\n        this.relRot[animationFrameIndex] = this.radVec(infos[3], infos[4], infos[5])\n        this.relScale[animationFrameIndex] = new Vector3(infos[6], infos[7], infos[8])\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.relPos[c] = this.relPos[animationFrameIndex]\n            this.relRot[c] = this.relRot[animationFrameIndex]\n            this.relScale[c] = this.relScale[animationFrameIndex]\n        }\n    }\n\n    setOpacityAndFollowing(animationFrameIndex: number, lastFrame: number, value: number) {\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.opacity[c] = value\n        }\n    }\n\n}\n","import { Mesh } from 'three'\nimport { clearIntervalSafe } from '../core/Util'\n\nexport class AnimatedMesh {\n\n    mesh: Mesh = null\n    textureSequences = []\n\n    constructor(mesh: Mesh, textureSequences: any[]) {\n        this.mesh = mesh\n        this.textureSequences = textureSequences\n    }\n\n    dispose() {\n        this.textureSequences.forEach((s) => clearIntervalSafe(s))\n        this.mesh.geometry.dispose()\n        Array.isArray(this.mesh.material) ? this.mesh.material.forEach(mat => mat.dispose()) : this.mesh.material?.dispose()\n    }\n\n}\n","// noinspection JSUnusedLocalSymbols,JSBitwiseOperatorUsage\n\n/**\n * @author Marcus-Bizal https://github.com/marcbizal\n * patched by Scarabol\n *\n * This loader loads LWOB files exported from LW6.\n *\n * Support\n *  -\n */\n\nimport { AdditiveBlending, BufferAttribute, BufferGeometry, Color, DoubleSide, Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { decodeFilepath, decodeString, getFilename } from '../core/Util'\nimport { SEQUENCE_TEXTURE_FRAMERATE } from '../params'\nimport { AnimatedMesh } from './AnimatedMesh'\nimport { ResourceManager } from './ResourceManager'\n\n// HEADER SPEC //\nconst LWO_MAGIC = 0x4C574F42 // \"LWOB\"\nconst OFF_MAGIC = 8\n\n/********************/\n/* TYPE SIZES START */\n/********************/\n\nconst ID4_SIZE = 4\nconst I1_SIZE = 1\nconst I2_SIZE = 2\nconst I4_SIZE = 4\nconst F4_SIZE = 4\n\nconst COL4_SIZE = 4\nconst VEC12_SIZE = 12\nconst IP2_SIZE = 2\nconst FP4_SIZE = 4\nconst DEG4_SIZE = 4\n\n/********************/\n/*  TYPE SIZES END  */\n/********************/\n\n/*********************/\n/* CHUNK TYPES START */\n/*********************/\n\nconst LWO_FORM = 0x464F524D\nconst LWO_PNTS = 0x504E5453\nconst LWO_SFRS = 0x53524653\nconst LWO_POLS = 0x504F4C53\nconst LWO_CRVS = 0x43525653\nconst LWO_PCHS = 0x50434853\nconst LWO_SURF = 0x53555246\n\nconst CHUNK_HEADER_SIZE = 8\nconst SUBCHUNK_HEADER_SIZE = 6\n\n/*********************/\n/*  CHUNK TYPES END  */\n/*********************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\nconst SURF_COLR = 0x434F4C52\nconst SURF_FLAG = 0x464C4147\n\n// Base Shading Values (Fixed Point)\nconst SURF_LUMI = 0x4C554D49\nconst SURF_DIFF = 0x44494646\nconst SURF_SPEC = 0x53504543\nconst SURF_REFL = 0x5245464C\nconst SURF_TRAN = 0x5452414E\n\n// Base Shading Values (Floating Point)\nconst SURF_VLUM = 0x564C554D\nconst SURF_VDIF = 0x56444946\nconst SURF_VSPC = 0x56535043\nconst SURF_VRFL = 0x5646524C\nconst SURF_VTRN = 0x5654524E\n\nconst SURF_GLOS = 0x474C4F53\nconst SURF_RFLT = 0x52464C54\nconst SURF_RIMG = 0x52494D47\nconst SURF_RIND = 0x52494E44\nconst SURF_EDGE = 0x45444745\nconst SURF_SMAN = 0x534D414E\n\n/**************************/\n/*  SURF DEFINITIONS END  */\n/**************************/\n\n/*****************************/\n/* TEXTURE DEFINITIONS START */\n/*****************************/\n\n// Start of Definition\nconst SURF_CTEX = 0x43544558\nconst SURF_DTEX = 0x44544558\nconst SURF_STEX = 0x53544558\nconst SURF_RTEX = 0x52544558\nconst SURF_TTEX = 0x54544558\nconst SURF_LTEX = 0x4C544558\nconst SURF_BTEX = 0x42544558\n\n// Flags\nconst SURF_TFLG = 0x54464C47\n\n// Location and Size\nconst SURF_TSIZ = 0x5453495A\nconst SURF_TCTR = 0x54435452\nconst SURF_TFAL = 0x5446414C\nconst SURF_TVEL = 0x5456454C\n\n// Color\nconst SURF_TCLR = 0x54434C52\n\n// Value\nconst SURF_TVAL = 0x54434C52\n\n// Bump Amplitude\nconst SURF_TAMP = 0x54414D50\n\n// Image Map\nconst SURF_TIMG = 0x54494D47\n\n// Image Alpha\nconst SURF_TALP = 0x54414C50\n\n// Image Wrap Options\nconst SURF_TWRP = 0x54575250\n\n// Antialiasing Strength\nconst SURF_TAAS = 0x54414153\n\n// Texture Opacity\nconst SURF_TOPC = 0x544F5043\n\n/*****************************/\n/*  TEXTURE DEFINITIONS END  */\n/*****************************/\n\n/*************************/\n/* FLAG DEFINITION START */\n/*************************/\n\nconst LUMINOUS_BIT = 1\nconst OUTLINE_BIT = 2\nconst SMOOTHING_BIT = 4\nconst COLORHIGHLIGHTS_BIT = 8\nconst COLORFILTER_BIT = 16\nconst OPAQUEEDGE_BIT = 32\nconst TRANSPARENTEDGE_BIT = 64\nconst SHARPTERMINATOR_BIT = 128\nconst DOUBLESIDED_BIT = 256\nconst ADDITIVE_BIT = 512\nconst SHADOWALPHA_BIT = 1024\n\n/*************************/\n/*  FLAG DEFINITION END  */\n/*************************/\n\n/*************************/\n/* TFLG DEFINITION START */\n/*************************/\n\nconst XAXIS_BIT = 1\nconst YAXIS_BIT = 2\nconst ZAXIS_BIT = 4\nconst WORLDCOORDS_BIT = 8\nconst NEGATIVEIMAGE_BIT = 16\nconst PIXELBLENDING_BIT = 32\nconst ANTIALIASING_BIT = 64\n\n/*************************/\n/*  TFLG DEFINITION END  */\n\n/*************************/\n\nfunction getVector3AtOffset(view, offset) {\n    let vector = new Vector3()\n    vector.x = view.getFloat32(offset)\n    vector.y = view.getFloat32(offset + F4_SIZE)\n    vector.z = view.getFloat32(offset + (F4_SIZE * 2))\n    return vector\n}\n\nfunction planarMapUVS(geometry, vertices, uvs, indices, materialIndex, size, center, flags) {\n    // Check to ensure that one of the flags is set, if not throw an error.\n    const mask = XAXIS_BIT | YAXIS_BIT | ZAXIS_BIT\n    if (flags & mask) {\n        for (let group of geometry.groups) {\n            if (group.materialIndex !== materialIndex) continue\n\n            for (let i = group.start; i < group.start + group.count; i++) {\n\n                let vertexIndex = indices[i] * 3\n                let x = vertices[vertexIndex] - center.x\n                let y = vertices[vertexIndex + 1] - center.y\n                let z = vertices[vertexIndex + 2] - center.z\n\n                let uvIndex = indices[i] * 2\n                let u = 0\n                let v = 0\n\n                if (flags & XAXIS_BIT) {\n                    u = z / size.z + 0.5\n                    v = y / size.y + 0.5\n                } else if (flags & YAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = z / size.z + 0.5\n                } else if (flags & ZAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = y / size.y + 0.5\n                }\n\n                uvs[uvIndex] = u\n                uvs[uvIndex + 1] = v\n            }\n        }\n    } else {\n        // console.warn(\"LWOLoader.planarMapUVS: No axis bit is set!\"); // XXX what is this about\n    }\n}\n\nexport class LWOLoader {\n\n    COUNTER_CLOCKWISE: false\n\n    path: string = ''\n    verbose: boolean = false\n    materials: MeshPhongMaterial[] = []\n    geometry: BufferGeometry = new BufferGeometry()\n    vertices: Float32Array = null\n    indices: Uint16Array = null\n    uvs: Float32Array = null\n    sequenceIntervals = []\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('LWO path: ' + this.path)\n    }\n\n    parsePoints(view, chunkOffset, chunkSize) {\n        if (chunkSize % VEC12_SIZE !== 0) {\n            console.error('LWOLoader.parse: F12 does not evenly divide into chunk size (' + chunkSize + '). Possible corruption.')\n            return\n        }\n\n        let numVertices = (chunkSize / F4_SIZE) / 3\n        this.vertices = new Float32Array(numVertices * 3)\n        this.uvs = new Float32Array(numVertices * 2)\n\n        for (let i = 0; i < numVertices; i++) {\n            let vertexIndex = i * 3\n            let vertexOffset = vertexIndex * F4_SIZE\n            this.vertices[vertexIndex] = view.getFloat32(chunkOffset + vertexOffset) \t\t\t\t// x\n            this.vertices[vertexIndex + 1] = view.getFloat32(chunkOffset + vertexOffset + F4_SIZE) \t// y\n            this.vertices[vertexIndex + 2] = view.getFloat32(chunkOffset + vertexOffset + (F4_SIZE * 2)) \t// z\n        }\n    }\n\n    parseSurfaceNames(buffer, chunkOffset, chunkSize) {\n        let textChunk = new TextDecoder().decode(new Uint8Array(buffer, chunkOffset, chunkSize))\n        let surfaceNames = textChunk.split('\\0').filter(function (s) {\n            return s !== ''\n        })\n\n        for (let i = 0; i < surfaceNames.length; i++) {\n            const new_material = new MeshPhongMaterial()\n            new_material.name = surfaceNames[i]\n            new_material.side = DoubleSide\n            new_material.alphaToCoverage = true\n\n            this.materials.push(new_material)\n        }\n        if (this.verbose) console.log('LWO contains ' + this.materials.length + ' materials with following names: ' + surfaceNames)\n    }\n\n    parsePolygons(view, chunkOffset, chunkSize) {\n        // Gather some initial data so that we can get the proper size\n        let totalNumIndices = 0\n        let offset = 0\n        while (offset < chunkSize) {\n            const numIndices = view.getInt16(chunkOffset + offset)\n            const materialIndex = view.getInt16(chunkOffset + offset + 2 + (numIndices * 2))\n\n            this.geometry.addGroup(totalNumIndices, (numIndices - 2) * 3, materialIndex - 1)\n\n            totalNumIndices += (numIndices - 2) * 3\n            offset += 4 + (numIndices * 2)\n        }\n\n        offset = 0\n        let currentIndex = 0\n        this.indices = new Uint16Array(totalNumIndices)\n        while (offset < chunkSize) {\n            let numIndices = view.getInt16(chunkOffset + offset)\n\n            offset += 2\n\n            let faceIndices = new Int16Array(numIndices)\n            for (let i = 0; i <= numIndices; i++) {\n                faceIndices[i] = view.getInt16(chunkOffset + offset + (i * 2))\n            }\n\n            for (let i = 0; i < numIndices - 2; i++) {\n                if (this.COUNTER_CLOCKWISE) {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                } else {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                }\n            }\n\n            offset += 2 + (numIndices * 2)\n        }\n    }\n\n    parseSurface(view, buffer, chunkOffset, chunkSize) {\n        let offset = 0\n        while (view.getUint8(chunkOffset + offset) !== 0) offset++\n\n        let materialName = decodeString(new Uint8Array(buffer, chunkOffset, offset))\n        if (this.verbose) console.log('Parsing surface: ' + materialName)\n        let materialIndex = -1\n        let material: MeshPhongMaterial = null\n\n        let textureFlags = 0\n        let textureSize = new Vector3(0, 0, 0)\n        let textureCenter = new Vector3(0, 0, 0)\n        // let textureFalloff = new Vector3(0, 0, 0);\n        // let textureVelocity = new Vector3(0, 0, 0);\n\n        for (let i = 0; i < this.materials.length; i++) {\n            if (this.materials[i].name === materialName) {\n                materialIndex = i\n                material = this.materials[i]\n            }\n        }\n\n        if (!material) {\n            console.error('LWOLoader.parse: Surface in SURF chunk does not exist in SRFS')\n            return\n        }\n\n        material.shininess = 0\n\n        while (offset < chunkSize) {\n            const subchunkOffset = chunkOffset + offset\n            if (view.getUint8(subchunkOffset) === 0) {\n                offset++\n            } else {\n                const subchunkType = view.getInt32(subchunkOffset)\n                const subchunkSize = view.getInt16(subchunkOffset + ID4_SIZE)\n\n                if (this.verbose) console.log('Parsing subchunk ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n\n                switch (subchunkType) {\n                    case SURF_COLR:\n                        const colorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                        ]\n                        material.color = new Color().fromArray(colorArray)\n                        if (this.verbose) console.log('Material color (COLR): ' + colorArray.join(' '))\n                        break\n                    case SURF_FLAG:\n                        const flags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (FLAG): ' + flags.toString(2))\n                        // if (this.verbose && flags & LUMINOUS_BIT) console.warn('Flag is set but unhandled: luminous') // flag replaced with LUMI below\n                        if (this.verbose && flags & OUTLINE_BIT) console.warn('Flag is set but unhandled: outline')\n                        if (this.verbose && flags & SMOOTHING_BIT) console.warn('Flag is set but unhandled: smoothing')\n                        if (this.verbose && flags & COLORHIGHLIGHTS_BIT) console.warn('Flag is set but unhandled: colorHighlights')\n                        if (this.verbose && flags & COLORFILTER_BIT) console.warn('Flag is set but unhandled: colorFilter')\n                        if (this.verbose && flags & OPAQUEEDGE_BIT) console.warn('Flag is set but unhandled: opaqueEdge')\n                        if (this.verbose && flags & TRANSPARENTEDGE_BIT) console.warn('Flag is set but unhandled: transparentEdge')\n                        if (this.verbose && flags & SHARPTERMINATOR_BIT) console.warn('Flag is set but unhandled: sharpTerminator')\n                        if (flags & DOUBLESIDED_BIT) material.side = DoubleSide\n                        if (flags & ADDITIVE_BIT) {\n                            material.blending = AdditiveBlending\n                            material.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n                        }\n                        if (this.verbose && flags & SHADOWALPHA_BIT) console.warn('Flag is set but unhandled: shadowAlpha')\n                        break\n                    case SURF_EDGE:\n                        const edgeTransparencyThreshold = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Edge transparency threshold (0.0 to 1.0): ' + edgeTransparencyThreshold)\n                        break\n                    case SURF_LUMI:\n                        const luminosity = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.log('Luminosity (LUMI): ' + luminosity)\n                        material.emissiveIntensity = luminosity\n                        break\n                    case SURF_DIFF:\n                        const diffuse = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.log('Diffuse (DIFF): ' + diffuse)\n                        if (!diffuse) material.color = null\n                        break\n                    case SURF_SPEC:\n                        const specular = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        // material.specular = material.color.multiplyScalar(specular);\n                        if (this.verbose) console.warn('Specular (SPEC): ' + specular)\n                        break\n                    case SURF_REFL:\n                        let reflection = 0\n                        if (reflection === SURF_VRFL) {\n                            reflection = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            reflection = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        }\n                        material.reflectivity = reflection\n                        if (this.verbose) console.log('Reflectivity (REFL): ' + material.reflectivity)\n                        break\n                    case SURF_TRAN:\n                    case SURF_VTRN:\n                        let transparency = 0\n                        if (subchunkType === SURF_VTRN) {\n                            transparency = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            transparency = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        }\n                        material.opacity = 1 - transparency\n                        if (this.verbose) console.log('Opacity (TRAN/VTRN): ' + material.opacity)\n                        material.transparent = material.transparent || material.opacity < 1\n                        break\n                    case SURF_VLUM:\n                        const vLuminosity = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Luminosity (VLUM): ' + vLuminosity)\n                        material.emissiveIntensity = vLuminosity\n                        break\n                    case SURF_VDIF:\n                        let vDiffuse = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Diffuse (VDIF): ' + vDiffuse)\n                        // material.vertexColors = !!vDiffuse // XXX push vertex colors first\n                        break\n                    case SURF_VSPC:\n                        let vSpecular = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        // material.specular = material.color.multiplyScalar(vSpecular);\n                        if (this.verbose) console.warn('Specular (VSPC): ' + vSpecular)\n                        break\n                    case SURF_TFLG:\n                        textureFlags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (TFLG): ' + textureFlags.toString(2))\n                        if (this.verbose && textureFlags & XAXIS_BIT) console.warn('Flag is set but unhandled: X Axis')\n                        if (this.verbose && textureFlags & YAXIS_BIT) console.warn('Flag is set but unhandled: Y Axis')\n                        if (this.verbose && textureFlags & ZAXIS_BIT) console.warn('Flag is set but unhandled: Z Axis')\n                        if (this.verbose && textureFlags & WORLDCOORDS_BIT) console.warn('Flag is set but unhandled: World Coords')\n                        if (this.verbose && textureFlags & NEGATIVEIMAGE_BIT) console.warn('Flag is set but unhandled: Negative Image')\n                        if (this.verbose && textureFlags & PIXELBLENDING_BIT) console.warn('Flag is set but unhandled: Pixel Blending')\n                        if (this.verbose && textureFlags & ANTIALIASING_BIT) console.log('Flag is set: Antialiasing') // turned on by default\n                        break\n                    case SURF_TSIZ:\n                        textureSize = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Texture size (TSIZ): ' + textureSize.toArray().join(' '))\n                        break\n                    case SURF_TCTR:\n                        textureCenter = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Texture center (TCTR): ' + textureCenter.toArray().join(' '))\n                        break\n                    case SURF_CTEX:\n                    case SURF_DTEX:\n                    case SURF_STEX:\n                    case SURF_RTEX:\n                    case SURF_TTEX:\n                    case SURF_BTEX:\n                        const textureTypeName = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture typename: ' + textureTypeName)\n                        // XXX handle different texture types\n                        break\n                    case SURF_TVAL: // always 0 in the game\n                        const textureValue = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.warn('Texture value (TVAL): ' + textureValue)\n                        break\n                    case SURF_TCLR:\n                        const textureColorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        // const textureColor = new Color().fromArray(textureColorArray);\n                        // seems to be 0 0 0 anyway...\n                        if (this.verbose) console.log('Texture color (TCLR): ' + textureColorArray.join(' '))\n                        break\n                    case SURF_TIMG:\n                        let textureFilepath = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture filepath (TIMG): ' + textureFilepath)\n                        if (textureFilepath === '(none)') break\n                        let sequenceTexture = false\n                        if (textureFilepath.endsWith(' (sequence)')) {\n                            sequenceTexture = true\n                            textureFilepath = textureFilepath.substring(0, textureFilepath.length - ' (sequence)'.length)\n                        }\n                        let filename = getFilename(textureFilepath)\n                        material.transparent = material.transparent || !!filename.match(/^a\\d+.+.bmp/i)\n                        const textureFilename = this.path + filename\n                        if (sequenceTexture) {\n                            const match = textureFilename.match(/(.+\\D)0+(\\d+)\\..+/)\n                            const textures = ResourceManager.filterTextureSequenceNames(match[1])\n                                .map((name) => ResourceManager.getTexture(name))\n                            if (textures) {\n                                let seqNum = 0\n                                material.color = null // no need for color, when color map (texture) in use\n                                this.sequenceIntervals.push(setInterval(() => {\n                                    material.map = textures[seqNum++]\n                                    if (seqNum >= textures.length) seqNum = 0\n                                }, 1000 / SEQUENCE_TEXTURE_FRAMERATE))\n                            }\n                        }\n                        const lTextureName = textureFilename.toLowerCase()\n                        if (lTextureName === 'miscanims/barrier/a_side.bmp' // workaround (TODO actually never add unknown textures?)\n                            || lTextureName === 'miscanims/barrier/a_top.bmp'\n                            || lTextureName === 'world/shared/teofoilreflections.jpg'\n                            || lTextureName === 'buildings/barracks/wingbase3.bmp') {\n                            break\n                        }\n                        material.map = ResourceManager.getTexture(textureFilename)\n                        material.color = null // no need for color, when color map (texture) in use\n                        break\n                    default: // TODO implement all LWO features\n                        if (this.verbose) console.warn('Found unrecognised SURF subchunk type ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n                        break\n                }\n\n                offset += SUBCHUNK_HEADER_SIZE + subchunkSize\n            }\n        }\n\n        planarMapUVS(this.geometry, this.vertices, this.uvs, this.indices, materialIndex, textureSize, textureCenter, textureFlags)\n    }\n\n    parse(buffer: ArrayBuffer): AnimatedMesh {\n        const view = new DataView(buffer)\n\n        if (view.getUint32(0) !== LWO_FORM) {\n            console.error('LWOLoader.parse: Cannot find header.')\n            return\n        }\n\n        const fileSize = view.getUint32(ID4_SIZE)\n        if (fileSize + CHUNK_HEADER_SIZE !== view.byteLength) {\n            console.warn('LWOLoader.parse: Discrepancy between size in header (' + (fileSize + CHUNK_HEADER_SIZE) + ' bytes) and actual size (' + view.byteLength + ' bytes).')\n        }\n\n        let magicOffset = ID4_SIZE + I4_SIZE\n        if (view.getUint32(magicOffset) !== LWO_MAGIC) {\n            const magic = decodeString(new Uint8Array(buffer, magicOffset, ID4_SIZE))\n            console.error('LWOLoader.parse: Invalid magic ID (' + magic + ') in LWO header.')\n            return\n        }\n\n        let cursor = 12\n        while (cursor < view.byteLength) {\n            // Skip null byte padding\n            if (view.getUint8(cursor) === 0) {\n                cursor++\n            } else {\n                const chunkType = view.getInt32(cursor)\n                const chunkSize = view.getInt32(cursor + ID4_SIZE)\n\n                cursor += CHUNK_HEADER_SIZE\n\n                switch (chunkType) {\n                    case LWO_PNTS:\n                        this.parsePoints(view, cursor, chunkSize)\n                        break\n                    case LWO_SFRS:\n                        this.parseSurfaceNames(buffer, cursor, chunkSize)\n                        break\n                    case LWO_POLS:\n                        this.parsePolygons(view, cursor, chunkSize)\n                        break\n                    case LWO_SURF:\n                        this.parseSurface(view, buffer, cursor, chunkSize)\n                        break\n                    default:\n                        console.warn('Found unrecognised chunk type ' + decodeString(new Uint8Array(buffer, cursor - CHUNK_HEADER_SIZE, ID4_SIZE)) + ' at ' + cursor)\n                }\n\n                cursor += chunkSize\n            }\n\n        }\n\n        this.geometry.setAttribute('position', new BufferAttribute(this.vertices, 3))\n        this.geometry.setAttribute('uv', new BufferAttribute(this.uvs, 2))\n        this.geometry.setIndex(new BufferAttribute(this.indices, 1))\n        this.geometry.computeVertexNormals()\n\n        return new AnimatedMesh(new Mesh(this.geometry, this.materials), this.sequenceIntervals)\n    }\n}\n","/**\n * @author Scarabol https://github.com/scarabol\n *\n * This loader loads LWSC files exported from LW\n *\n * File format description: http://www.martinreddy.net/gfx/3d/LWSC.txt\n */\n\nimport { Group } from 'three'\nimport { getFilename } from '../core/Util'\nimport { AnimClip } from '../game/model/anim/AnimClip'\nimport { AnimSubObj } from '../game/model/anim/AnimSubObj'\nimport { SceneManager } from '../game/SceneManager'\nimport { LWOLoader } from './LWOLoader'\nimport { ResourceManager } from './ResourceManager'\n\nexport class LWSCLoader {\n\n    path: string = ''\n    verbose: boolean = false\n    animationClip: AnimClip = new AnimClip()\n    lines: string[] = []\n    lineIndex: number = 0\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('Using verbose mode')\n    }\n\n    parse(content): AnimClip {\n        this.lines = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map(l => l.trim())\n\n        if (this.lines[0] !== 'LWSC') {\n            throw 'Invalid start of file! Expected \\'LWSC\\' in first line'\n        }\n\n        const sceneFileVersion = parseInt(this.lines[1], 10)\n        if (sceneFileVersion !== 1) {\n            console.warn('Unexpected scene file version: ' + sceneFileVersion)\n        }\n\n        for (this.lineIndex = 2; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) continue // empty line: object separator\n            const key = line.split(' ')[0]\n            if (key === 'FirstFrame') {\n                this.parseFrameBlock()\n            } else if (key === 'AddNullObject' || key === 'LoadObject') {\n                this.parseObjectBlock()\n                if (this.verbose) console.log(this.animationClip.bodies[this.animationClip.bodies.length - 1])\n            } else if (line.startsWith('PreviewFirstFrame ') || line.startsWith('PreviewLastFrame ') || line.startsWith('PreviewFrameStep ')) {\n                // only used in editor\n            } else {\n                // console.warn('Unexpected line: ' + line); // TODO analyze remaining entries\n            }\n        }\n\n        if (this.verbose) console.log(this.animationClip)\n        return this.animationClip\n    }\n\n    parseLine(line: string): string[] {\n        return line.split(' ').filter((l: string) => l !== '')\n    }\n\n    parseFrameBlock() {\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            const line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'FirstFrame') {\n                this.animationClip.firstFrame = parseInt(value)\n            } else if (key === 'LastFrame') {\n                this.animationClip.lastFrame = parseInt(value)\n            } else if (key === 'FrameStep') {\n                const frameStep = parseInt(value)\n                if (frameStep !== 1) console.error('Animation frameStep has unexpected value: ' + frameStep)\n            } else if (key === 'FramesPerSecond') {\n                this.animationClip.framesPerSecond = parseInt(value)\n            } else if (key === 'PreviewFirstFrame' || key === 'PreviewLastFrame' || key === 'PreviewFrameStep') {\n                // only used in editor\n            } else {\n                console.warn('Unexpected key in frame block')\n            }\n        }\n        console.error('Parsing block reached content end')\n    }\n\n    parseObjectBlock(): AnimSubObj {\n        const subObj = new AnimSubObj()\n        this.animationClip.bodies.push(subObj)\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'AddNullObject' || key === 'LoadObject') {\n                if (key === 'LoadObject') {\n                    const filename = getFilename(value)\n                    subObj.name = filename.slice(0, filename.length - '.lwo'.length)\n                    subObj.filename = this.path + filename\n                    const lwoBuffer = ResourceManager.getResource(subObj.filename)\n                    subObj.model = SceneManager.registerMesh(new LWOLoader(this.path).parse(lwoBuffer))\n                } else if (key === 'AddNullObject') {\n                    subObj.name = value\n                    subObj.model = new Group()\n                } else {\n                    throw 'Unexpected line: ' + line\n                }\n            } else if (key === 'ObjectMotion') {\n                let line = this.lines[++this.lineIndex]\n                const lenInfos = parseInt(line)\n                line = this.lines[++this.lineIndex]\n                const lenFrames = parseInt(line)\n                this.lineIndex++\n                for (let c = 0; c < lenFrames; c++) {\n                    let line = this.lines[this.lineIndex + c * 2]\n                    if (line.startsWith('EndBehavior')) break\n                    const infos = line.split(' ').map(Number)\n                    if (infos.length !== lenInfos) console.warn('Number of infos (' + infos.length + ') does not match if specified count (' + lenInfos + ')')\n                    line = this.lines[this.lineIndex + c * 2 + 1]\n                    const animationFrameIndex = parseInt(line.split(' ')[0]) // other entries in line should be zeros\n                    subObj.setFrameAndFollowing(animationFrameIndex, this.animationClip.lastFrame, infos)\n                }\n                this.lineIndex += lenFrames * 2\n            } else if (key === 'ParentObject') {\n                subObj.parentObjInd = Number(value) - 1 // index is 1 based\n                if (this.verbose) console.log('parent obj ind is: ' + subObj.parentObjInd)\n            } else if (key === 'ShowObject' || key === 'LockedChannels') {\n                // only used in editor\n            } else if (key === 'ShadowOptions') { // TODO implement shadow options (bitwise)\n                // 0 - Self Shadow\n                // 1 - Cast Shadow\n                // 2 - Receive Shadow\n            } else if (key === 'ObjDissolve') {\n                if (value == '(envelope)') {\n                    let line = this.lines[++this.lineIndex]\n                    const numOfInformationChannels = parseInt(line)\n                    if (numOfInformationChannels !== 1) console.error('Number of information channels for opacity is not 1, but: ' + numOfInformationChannels)\n                    line = this.lines[++this.lineIndex]\n                    const numOfKeyframes = parseInt(line)\n                    this.lineIndex++\n                    for (let c = 0; c < numOfKeyframes; c++) {\n                        let line = this.lines[this.lineIndex + c * 2]\n                        if (line.startsWith('EndBehavior')) break\n                        const opacity = 1 - Number(line)\n                        line = this.lines[this.lineIndex + c * 2 + 1]\n                        const frameNum = Number(line.split(' ')[0])\n                        subObj.setOpacityAndFollowing(frameNum, this.animationClip.lastFrame, opacity)\n                    }\n                    this.lineIndex += numOfKeyframes * 2\n                } else {\n                    const opacity = 1 - Number(value)\n                    subObj.setOpacityAndFollowing(0, this.animationClip.lastFrame, opacity)\n                }\n            } else if (this.verbose) {\n                console.warn('Unhandled line in object block: ' + line + '; key: ' + key + '; value: ' + value) // TODO analyze unhandled lines\n            }\n        }\n        console.error('Parsing block reached content end')\n        return subObj\n    }\n\n}\n","export enum PriorityIdentifier {\n\n    aiPriorityTrain,\n    aiPriorityGetIn,\n    aiPriorityCrystal,\n    aiPriorityOre,\n    aiPriorityRepair,\n    aiPriorityClearing,\n    aiPriorityDestruction,\n    aiPriorityConstruction,\n    aiPriorityReinforce,\n    aiPriorityRecharge,\n\n}\n","export enum JobState {\n\n    INCOMPLETE,\n    COMPLETE,\n    CANCELED,\n\n}\n","export enum JobType {\n\n    DRILL,\n    REINFORCE,\n    CLEAR_RUBBLE,\n    CARRY,\n    MOVE,\n    TRAIN,\n    GET_TOOL,\n    EAT,\n    COMPLETE_POWER_PATH,\n\n}\n","export class BaseActivity {\n\n    activityKey: string\n\n    constructor(activityKey: string) {\n        this.activityKey = activityKey\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class AnimEntityActivity extends BaseActivity {\n\n    static Stand = new AnimEntityActivity('Activity_Stand')\n\n}\n","import { Box3, CanvasTexture, Matrix4, Mesh, MeshBasicMaterial, MeshPhongMaterial, Object3D, Sphere, SphereGeometry, Sprite, SpriteMaterial, Vector3 } from 'three'\nimport { createContext } from '../../../core/ImageHelper'\nimport { clearTimeoutSafe, iGet } from '../../../core/Util'\nimport { EventBus } from '../../../event/EventBus'\nimport { SelectionChanged } from '../../../event/LocalEvents'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { BaseActivity } from '../activities/BaseActivity'\nimport { BaseEntity } from '../BaseEntity'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { AnimationEntityType } from './AnimationEntityType'\nimport { AnimClip } from './AnimClip'\nimport { AnimSubObj } from './AnimSubObj'\n\nexport abstract class AnimEntity extends BaseEntity {\n\n    animationEntityType: AnimationEntityType = null\n    poly: Object3D[] = []\n    animation: AnimClip = null\n    animationTimeout: NodeJS.Timeout = null\n    selectionFrame: Sprite = null\n    pickSphere: Mesh = null\n    carryJoint: Object3D = null\n    depositJoint: Object3D = null\n    getToolJoint: Object3D = null\n    activity: BaseActivity = null\n    radiusSq: number = 0\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, superType: EntitySuperType, entityType: EntityType, aeFilename: string) {\n        super(worldMgr, sceneMgr, superType, entityType)\n        if (aeFilename) this.animationEntityType = ResourceManager.getAnimationEntityType(aeFilename)\n    }\n\n    beamUp() {\n        // TODO avoid all further state changes and mark as unavailable here\n        // TODO publish event: check jobs with this target, update power state...\n        EventBus.publishEvent(new SelectionChanged())\n        this.changeActivity()\n        // TODO insert beam animation\n        AnimEntity.moveUp(this, 6 * TILESIZE)\n    }\n\n    private static moveUp(entity: AnimEntity, counter: number) {\n        if (counter > 0) {\n            counter--\n            entity.group.position.y += (TILESIZE / NATIVE_FRAMERATE) / 2\n            setTimeout(() => AnimEntity.moveUp(entity, counter), 1000 / NATIVE_FRAMERATE)\n        } else {\n            entity.removeFromScene()\n        }\n    }\n\n    changeActivity(activity: AnimEntityActivity = this.getDefaultActivity(), onAnimationDone: () => any = null, durationTimeMs: number = null) {\n        if (this.activity === activity || this.animationEntityType === null) return\n        this.activity = activity\n        let lActivityKey = activity.activityKey.toLowerCase()\n        let anim = this.animationEntityType.activities.get(lActivityKey)\n        if (!anim) { // find by prefix\n            this.animationEntityType.activities.forEach((a, key) => {\n                if (!anim && lActivityKey.startsWith(key)) anim = a\n            })\n        }\n        if (!anim?.animation) {\n            console.warn('Activity ' + activity.activityKey + ' unknown or has no animation defined')\n            console.log(this.animationEntityType.activities)\n            return\n        }\n        if (onAnimationDone) onAnimationDone.bind(this)\n        this.animation = anim.animation\n        this.animation.looping = true\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.group.remove(...this.poly)\n        this.poly = []\n        const carries = (this.carryJoint && this.carryJoint.children) || []\n        this.carryJoint = null\n        // bodies are defined in animation and second in high/medium/low poly groups\n        this.animation.bodies.forEach((body) => {\n            let model: Object3D = iGet(this.animationEntityType.highPoly, body.name)\n            if (!model) model = iGet(this.animationEntityType.mediumPoly, body.name)\n            if (!model) model = body.model\n            const polyModel = model.clone(true)\n            this.poly.push(polyModel)\n            if (body.name) {\n                if (body.name.equalsIgnoreCase(this.animationEntityType.carryNullName)) {\n                    this.carryJoint = polyModel\n                    if (carries.length > 0) this.carryJoint.add(...carries)\n                } else if (body.name.equalsIgnoreCase(this.animationEntityType.depositNullName)) {\n                    this.depositJoint = polyModel\n                } else if (body.name.equalsIgnoreCase(this.animationEntityType.toolNullName)) {\n                    this.getToolJoint = polyModel\n                }\n            }\n        })\n        this.animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = this.poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                this.poly[parentInd].add(polyPart)\n            } else {\n                this.group.add(polyPart)\n            }\n        })\n        const sphere = new Sphere()\n        new Box3().setFromObject(this.group).getBoundingSphere(sphere)\n        this.radiusSq = sphere.radius * sphere.radius\n        this.animate(0, onAnimationDone, durationTimeMs)\n    }\n\n    private animate(frameIndex: number, onAnimationDone: () => any, durationTimeMs: number) {\n        if (this.poly.length !== this.animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        this.animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = this.poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = mat.transparent || mat.opacity < 1\n                    })\n                }\n            }\n        })\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        let nextFrame = frameIndex + 1\n        if (nextFrame <= this.animation.lastFrame || !onAnimationDone || (durationTimeMs !== null && durationTimeMs > 0)) {\n            if (nextFrame > this.animation.lastFrame) {\n                nextFrame = this.animation.firstFrame\n            }\n            const standardDurationTimeMs = 1000 / this.animation.framesPerSecond * this.animation.transcoef\n            if (durationTimeMs !== null) durationTimeMs -= standardDurationTimeMs\n            const that = this\n            const timeoutTimeMs = durationTimeMs !== null ? Math.max(0, Math.min(durationTimeMs, standardDurationTimeMs)) : standardDurationTimeMs\n            this.animationTimeout = setTimeout(() => that.animate(nextFrame, onAnimationDone, durationTimeMs), timeoutTimeMs) // TODO get this in sync with threejs\n        } else if (onAnimationDone) {\n            onAnimationDone()\n        }\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return AnimEntityActivity.Stand\n    }\n\n    createPickSphere() {\n        if (this.pickSphere) return\n        const pickSphereDiameter = this.stats.PickSphere\n        const pickSphereRadius = pickSphereDiameter / 2\n        const geometry = new SphereGeometry(pickSphereRadius, pickSphereRadius, pickSphereRadius)\n        const material = new MeshBasicMaterial({color: 0xffff00, visible: false}) // change visible to true for debugging\n        this.pickSphere = new Mesh(geometry, material)\n        this.pickSphere.userData = {selectable: this}\n        const pickSphereCenter = this.getPickSphereCenter()\n        this.pickSphere.position.copy(pickSphereCenter)\n        this.group.add(this.pickSphere)\n        this.createSelectionFrame(pickSphereDiameter, pickSphereCenter)\n    }\n\n    getPickSphereCenter(): Vector3 {\n        return this.getBoundingBoxCenter()\n    }\n\n    getBoundingBoxCenter() {\n        const center = new Vector3()\n        new Box3().setFromObject(this.group).getCenter(center)\n        center.sub(this.group.position)\n        center.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        return center\n    }\n\n    private createSelectionFrame(pickSphereDiameter: number, pickSphereCenter: Vector3) {\n        const selectionFrameTextureSize = 128\n        const ctx = createContext(selectionFrameTextureSize, selectionFrameTextureSize)\n        ctx.fillStyle = '#0f0'\n        const strength = Math.round(50 / pickSphereDiameter)\n        const length = selectionFrameTextureSize / 6\n        ctx.fillRect(0, 0, length, strength)\n        ctx.fillRect(0, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, 0, length, strength)\n        ctx.fillRect(selectionFrameTextureSize - strength, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - strength, selectionFrameTextureSize - length, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - length, strength, length)\n        const selectionFrameTexture = new CanvasTexture(ctx.canvas)\n        const selectionMaterial = new SpriteMaterial({map: selectionFrameTexture, depthTest: false})\n        this.selectionFrame = new Sprite(selectionMaterial)\n        this.selectionFrame.position.copy(pickSphereCenter)\n        const selectionFrameSize = pickSphereDiameter\n        this.selectionFrame.scale.set(selectionFrameSize, selectionFrameSize, selectionFrameSize)\n        this.selectionFrame.visible = false\n        this.group.add(this.selectionFrame)\n    }\n\n}\n","import { Group, Vector2, Vector3 } from 'three'\nimport { SceneManager } from '../SceneManager'\nimport { WorldManager } from '../WorldManager'\nimport { EntitySuperType, EntityType } from './EntityType'\nimport { Surface } from './map/Surface'\n\nexport abstract class BaseEntity {\n\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n\n    group: Group = new Group()\n\n    superType: EntitySuperType = null\n    entityType: EntityType = null\n    level: number = 0\n    floorOffset: number = 0\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, superType: EntitySuperType, entityType: EntityType) {\n        this.worldMgr = worldMgr\n        this.sceneMgr = sceneMgr\n        this.superType = superType\n        this.entityType = entityType\n    }\n\n    get stats() {\n        return null\n    }\n\n    getPosition() {\n        return this.group.position.clone()\n    }\n\n    getPosition2D() {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    getHeading(): number {\n        return this.group.rotation.y\n    }\n\n    onDiscover() {\n        this.group.visible = true\n    }\n\n    addToScene(worldPosition: Vector2, radHeading: number) {\n        if (worldPosition) {\n            this.group.position.copy(this.sceneMgr.getFloorPosition(worldPosition))\n            this.group.position.y += this.floorOffset\n        }\n        if (radHeading !== undefined && radHeading !== null) {\n            this.group.rotateOnAxis(new Vector3(0, 1, 0), radHeading)\n        }\n        this.group.visible = this.surfaces.some((s) => s.discovered)\n        this.sceneMgr.scene.add(this.group)\n    }\n\n    removeFromScene() {\n        this.sceneMgr.scene.remove(this.group)\n    }\n\n    get surfaces(): Surface[] {\n        return [this.sceneMgr.terrain.getSurfaceFromWorld(this.group.position)]\n    }\n\n}\n","import { RaiderActivity } from '../activities/RaiderActivity'\nimport { MaterialEntity } from '../collect/MaterialEntity'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { PathTarget } from '../PathTarget'\nimport { RaiderTool } from '../raider/RaiderTool'\nimport { RaiderTraining } from '../raider/RaiderTraining'\nimport { JobState } from './JobState'\nimport { JobType } from './JobType'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport abstract class Job {\n\n    type: JobType\n    jobState: JobState\n    fulfiller: FulfillerEntity[] = []\n\n    protected constructor(type: JobType) {\n        this.type = type\n        this.jobState = JobState.INCOMPLETE\n    }\n\n    assign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller)\n        if (fulfiller && index === -1) {\n            this.fulfiller.push(fulfiller)\n        }\n    }\n\n    unassign(fulfiller: FulfillerEntity) {\n        this.fulfiller.remove(fulfiller)\n    }\n\n    cancel() {\n        this.jobState = JobState.CANCELED\n        const fulfiller = this.fulfiller // ensure consistency while processing\n        this.fulfiller = []\n        fulfiller.forEach((fulfiller) => fulfiller.stopJob())\n    }\n\n    getRequiredTool(): RaiderTool {\n        return null\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return null\n    }\n\n    isReadyToComplete(): boolean {\n        return true\n    }\n\n    onJobComplete() {\n        this.jobState = JobState.COMPLETE\n    }\n\n    abstract getWorkplaces(): PathTarget[];\n\n    setActualWorkplace(target: PathTarget) {\n    }\n\n    getCarryItem(): MaterialEntity {\n        return null\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return null\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        return null\n    }\n\n}\n\nexport abstract class PublicJob extends Job {\n\n    abstract getPriorityIdentifier(): PriorityIdentifier\n\n}\n","import { Vector3 } from 'three'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { CarryPathTarget, SiteCarryPathTarget } from '../collect/CarryPathTarget'\nimport { MaterialEntity } from '../collect/MaterialEntity'\nimport { PublicJob } from './Job'\nimport { JobType } from './JobType'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport class CarryJob<I extends MaterialEntity> extends PublicJob {\n\n    item: I\n    actualTarget: CarryPathTarget = null\n\n    constructor(item: I) {\n        super(JobType.CARRY)\n        this.item = item\n    }\n\n    getWorkplaces(): CarryPathTarget[] {\n        return this.item.getCarryTargets()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return this.item.getPriorityIdentifier()\n    }\n\n    setActualWorkplace(target: CarryPathTarget) {\n        this.item.setTargetSite((target as SiteCarryPathTarget)?.site)\n        this.actualTarget = target\n    }\n\n    getCarryItem(): I {\n        return this.item\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return this.actualTarget.getDropAction()\n    }\n\n    isReadyToComplete(): boolean {\n        return this.actualTarget.canGatherItem()\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        const targetLocation = this.actualTarget.targetLocation\n        this.fulfiller.forEach((f) => {\n            f.group.lookAt(new Vector3(targetLocation.x, f.group.position.y, targetLocation.y))\n            f.dropItem()\n        })\n        this.actualTarget.gatherItem(this.item)\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class RaiderActivity extends AnimEntityActivity {\n\n    static Route = new RaiderActivity('Activity_Route')\n    static RunPanic = new RaiderActivity('Activity_RunPanic')\n    static Drill = new RaiderActivity('Activity_Drill')\n    static Walk = new RaiderActivity('!Activity_Walk')\n    static Reinforce = new RaiderActivity('Activity_Reinforce')\n    static Reverse = new RaiderActivity('!Activity_Reverse')\n    static TurnLeft = new RaiderActivity('!Activity_TurnLeft')\n    static TurnRight = new RaiderActivity('!Activity_TurnRight')\n    static CantDo = new RaiderActivity('!Activity_CantDo')\n    static Collect = new RaiderActivity('Activity_Collect')\n    static Clear = new RaiderActivity('Activity_Clear')\n    static Carry = new RaiderActivity('Activity_Carry')\n    static CarryTurnLeft = new RaiderActivity('!Activity_CarryTurnLeft')\n    static CarryTurnRight = new RaiderActivity('!Activity_CarryTurnRight')\n    static CarryStand = new RaiderActivity('Activity_CarryStand')\n    static Dynamite = new RaiderActivity('Activity_Dynamite')\n    static Place = new RaiderActivity('Activity_Place')\n    static Deposit = new RaiderActivity('!Activity_Deposit')\n    static TeleportIn = new RaiderActivity('Activity_TeleportIn')\n    static Repair = new RaiderActivity('Activity_Repair')\n    static rest = new RaiderActivity('Activity_rest')\n    static routeRubble = new RaiderActivity('!Activity_routeRubble')\n    static CarryRubble = new RaiderActivity('!Activity_CarryRubble')\n    static Eat = new RaiderActivity('Activity_Eat')\n    static FireLaser = new RaiderActivity('Activity_FireLaser')\n    static GetUp = new RaiderActivity('!Activity_GetUp')\n    static ThrownByRockMonster = new RaiderActivity('Activity_ThrownByRockMonster')\n    static Slip = new RaiderActivity('Activity_Slip')\n    static Train = new RaiderActivity('Activity_Train')\n    static Recharge = new RaiderActivity('!Activity_Recharge')\n\n    static Waiting1 = new RaiderActivity('Activity_Waiting1')\n    static Waiting2 = new RaiderActivity('Activity_Waiting2')\n    static Waiting3 = new RaiderActivity('Activity_Waiting3')\n    static Waiting4 = new RaiderActivity('Activity_Waiting4')\n\n    static Hoverboard = new RaiderActivity('Activity_Hoverboard')\n    static Standhoverboard = new RaiderActivity('Activity_Standhoverboard')\n    static HitLefthoverboard = new RaiderActivity('!Activity_HitLefthoverboard')\n    static HitRighthoverboard = new RaiderActivity('!Activity_HitRighthoverboard')\n    static HitFronthoverboard = new RaiderActivity('!Activity_HitFronthoverboard')\n    static HitBackhoverboard = new RaiderActivity('!Activity_HitBackhoverboard')\n\n    static SMALLTRUCK = new RaiderActivity('Activity_SMALLTRUCK')\n    static StandSMALLTRUCK = new RaiderActivity('Activity_StandSMALLTRUCK')\n    static HitLeftSMALLTRUCK = new RaiderActivity('!Activity_HitLeftSMALLTRUCK')\n    static HitRightSMALLTRUCK = new RaiderActivity('!Activity_HitRightSMALLTRUCK')\n    static HitFrontSMALLTRUCK = new RaiderActivity('!Activity_HitFrontSMALLTRUCK')\n    static HitBackSMALLTRUCK = new RaiderActivity('!Activity_HitBackSMALLTRUCK')\n\n    static SMALLheli = new RaiderActivity('Activity_SMALLheli')\n    static StandSMALLheli = new RaiderActivity('Activity_StandSMALLheli')\n    static HitLeftSMALLheli = new RaiderActivity('!Activity_HitLeftSMALLheli')\n    static HitRightSMALLheli = new RaiderActivity('!Activity_HitRightSMALLheli')\n    static HitFrontSMALLheli = new RaiderActivity('!Activity_HitFrontSMALLheli')\n    static HitBackSMALLheli = new RaiderActivity('!Activity_HitBackSMALLheli')\n\n    static SMALLCAT = new RaiderActivity('Activity_SMALLCAT')\n    static StandSMALLCAT = new RaiderActivity('Activity_StandSMALLCAT')\n    static HitLeftSMALLCAT = new RaiderActivity('!Activity_HitLeftSMALLCAT')\n    static HitRightSMALLCAT = new RaiderActivity('!Activity_HitRightSMALLCAT')\n    static HitFrontSMALLCAT = new RaiderActivity('!Activity_HitFrontSMALLCAT')\n    static HitBackSMALLCAT = new RaiderActivity('!Activity_HitBackSMALLCAT')\n\n    static SMALLMLP = new RaiderActivity('Activity_SMALLMLP')\n    static StandSMALLMLP = new RaiderActivity('Activity_StandSMALLMLP')\n    static HitLeftSMALLMLP = new RaiderActivity('!Activity_HitLeftSMALLMLP')\n    static HitRightSMALLMLP = new RaiderActivity('!Activity_HitRightSMALLMLP')\n    static HitFrontSMALLMLP = new RaiderActivity('!Activity_HitFrontSMALLMLP')\n    static HitBackSMALLMLP = new RaiderActivity('!Activity_HitBackSMALLMLP')\n\n    static LARGECAT = new RaiderActivity('Activity_LARGECAT')\n    static StandLARGECAT = new RaiderActivity('Activity_StandLARGECAT')\n    static HitLeftLARGECAT = new RaiderActivity('!Activity_HitLeftLARGECAT')\n    static HitRightLARGECAT = new RaiderActivity('!Activity_HitRightLARGECAT')\n    static HitFrontLARGECAT = new RaiderActivity('!Activity_HitFrontLARGECAT')\n    static HitBackLARGECAT = new RaiderActivity('!Activity_HitBackLARGECAT')\n\n    static SMALLDIGGER = new RaiderActivity('Activity_SMALLDIGGER')\n    static StandSMALLDIGGER = new RaiderActivity('Activity_StandSMALLDIGGER')\n\n}\n","import { Vector2 } from 'three'\nimport { RaiderActivity } from './activities/RaiderActivity'\nimport { MaterialEntity } from './collect/MaterialEntity'\n\nexport class PathTarget {\n\n    targetLocation: Vector2\n\n    constructor(location: Vector2) {\n        this.targetLocation = location\n    }\n\n    isInArea(position: Vector2): boolean {\n        return false\n    }\n\n    canGatherItem(): boolean {\n        return false\n    }\n\n    gatherItem(item: MaterialEntity) {\n        item.addToScene(null, null)\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class BuildingActivity extends AnimEntityActivity {\n\n    static Teleport = new BuildingActivity('Activity_Teleport')\n    static Deposit = new BuildingActivity('Activity_Deposit')\n    static Explode = new BuildingActivity('Activity_Explode')\n    static Unpowered = new BuildingActivity('Activity_Unpowered')\n\n}\n","import { Vector2 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { MaterialAmountChanged } from '../../../event/WorldEvents'\nimport { BuildingActivity } from '../activities/BuildingActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { BuildingEntity } from '../building/BuildingEntity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { PathTarget } from '../PathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class CarryPathTarget extends PathTarget {\n\n    constructor(location: Vector2) {\n        super(location)\n    }\n\n    canGatherItem(): boolean {\n        return true\n    }\n\n    gatherItem(item: MaterialEntity) {\n        item.addToScene(null, null)\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n    isInvalid(): boolean {\n        return false\n    }\n\n}\n\nexport class SiteCarryPathTarget extends CarryPathTarget {\n\n    site: BuildingSite\n\n    constructor(location: Vector2, site: BuildingSite) {\n        super(location)\n        this.site = site\n    }\n\n    gatherItem(item: MaterialEntity) {\n        this.site.addItem(item)\n    }\n\n    getDropAction(): RaiderActivity {\n        return this.site.getDropAction()\n    }\n\n    isInvalid(): boolean {\n        return this.site.complete\n    }\n\n}\n\nexport class BuildingCarryPathTarget extends CarryPathTarget {\n\n    building: BuildingEntity\n\n    constructor(location: Vector2, building: BuildingEntity) {\n        super(location)\n        this.building = building\n    }\n\n    canGatherItem(): boolean {\n        return this.building.activity.activityKey === this.building.getDefaultActivity().activityKey\n    }\n\n    gatherItem(item: MaterialEntity) {\n        if (this.building.entityType === EntityType.POWER_STATION || this.building.entityType === EntityType.ORE_REFINERY) {\n            if (this.building.carryJoint) {\n                this.building.carryJoint.add(item.group)\n                item.group.position.set(0, 0, 0)\n            }\n            this.building.changeActivity(BuildingActivity.Deposit, () => {\n                this.building.changeActivity()\n                if (this.building.carryJoint) this.building.carryJoint.remove(item.group)\n                BuildingCarryPathTarget.addItemToStorage(item)\n                // TODO dispose item\n            })\n        } else {\n            item.removeFromScene()\n            BuildingCarryPathTarget.addItemToStorage(item)\n        }\n    }\n\n    private static addItemToStorage(item: MaterialEntity) {\n        switch (item.entityType) {\n            case EntityType.CRYSTAL:\n                GameState.numCrystal++\n                break\n            case EntityType.ORE:\n                GameState.numOre++\n                break\n        }\n        EventBus.publishEvent(new MaterialAmountChanged())\n    }\n\n    getDropAction(): RaiderActivity {\n        return this.building.getDropAction()\n    }\n\n    isInvalid(): boolean {\n        return !this.building.isUsable()\n    }\n\n}\n","import { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { AnimEntity } from '../anim/AnimEntity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CarryJob } from '../job/CarryJob'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { PathTarget } from '../PathTarget'\nimport { BuildingCarryPathTarget, CarryPathTarget, SiteCarryPathTarget } from './CarryPathTarget'\n\nexport abstract class MaterialEntity extends AnimEntity {\n\n    targetBuildingTypes: EntityType[] = []\n    priorityIdentifier: PriorityIdentifier = null\n    targets: CarryPathTarget[] = []\n    targetSite: BuildingSite = null\n    positionPathTarget: PathTarget[] = null\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, entityType: EntityType, aeFilename: string = null) {\n        super(worldMgr, sceneMgr, EntitySuperType.MATERIAL, entityType, aeFilename)\n        this.targetBuildingTypes = [EntityType.TOOLSTATION]\n    }\n\n    getCarryTargets(): CarryPathTarget[] {\n        return this.updateTargets()\n    }\n\n    resetTarget() {\n        this.targets = []\n        this.targetSite = null\n        this.updateTargets()\n    }\n\n    protected updateTargets(): CarryPathTarget[] {\n        if (this.targets.length < 1) {\n            const sites = GameState.buildingSites.filter((b) => b.needs(this.entityType))\n            if (sites.length > 0) {\n                this.targets = sites.map((s) => new SiteCarryPathTarget(s.getRandomDropPosition(), s))\n            } else {\n                const buildings = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                if (buildings.length > 0) {\n                    this.targets = buildings.map((b) => new BuildingCarryPathTarget(b.getDropPosition2D(), b))\n                }\n            }\n        } else if (this.targets.some((t) => t.isInvalid())) {\n            this.resetTarget()\n        }\n        return this.targets\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.materialsUndiscovered.remove(this)\n        GameState.materials.push(this)\n        EventBus.publishEvent(new JobCreateEvent(this.createCarryJob()))\n    }\n\n    setTargetSite(site: BuildingSite) {\n        if (this.targetSite === site) return\n        this.targetSite?.unAssign(this)\n        this.targetSite = site\n        this.targetSite?.assign(this)\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return this.priorityIdentifier\n    }\n\n    getTargetBuildingTypes(): EntityType[] {\n        return this.targetBuildingTypes\n    }\n\n    createCarryJob(): CarryJob<MaterialEntity> {\n        return new CarryJob(this)\n    }\n\n    onAddToSite() {\n        this.addToScene(null, null)\n    }\n\n    getPositionPathTarget(): PathTarget[] {\n        const position = this.getPosition2D()\n        if (!this.positionPathTarget || !this.positionPathTarget[0].targetLocation.equals(position)) {\n            this.positionPathTarget = [new PathTarget(position)]\n        }\n        return this.positionPathTarget\n    }\n\n}\n","import { AdditiveBlending, Color, Material, MeshPhongMaterial } from 'three'\nimport { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Crystal extends MaterialEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.CRYSTAL)\n        const resource2 = ResourceManager.getResource('MiscAnims/Crystal/vlp_greencrystal.lwo')\n        const mesh2 = SceneManager.registerMesh(new LWOLoader('MiscAnims/Crystal/').parse(resource2));\n        (mesh2.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.blending = AdditiveBlending\n            mat.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n            mat.opacity = 0.5 // XXX read from LWO file?\n            mat.transparent = mat.opacity < 1\n        })\n        mesh2.scale.set(1.75, 1.75, 1.75) // XXX derive from texture scale?\n        this.group.add(mesh2)\n        const resource = ResourceManager.getResource('World/Shared/Crystal.lwo') // high poly version\n        const mesh = SceneManager.registerMesh(new LWOLoader('World/Shared/').parse(resource));\n        (mesh.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.emissive = new Color(0, 8, 0) // XXX read from LWO file?\n            mat.color = new Color(0, 0, 0) // XXX read from LWO file?\n            mat.opacity = 0.9 // XXX read from LWO file?\n            mat.transparent = mat.opacity < 1\n        })\n        this.group.add(mesh)\n        this.targetBuildingTypes = [EntityType.POWER_STATION, EntityType.TOOLSTATION]\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityCrystal\n    }\n\n    get stats() {\n        return ResourceManager.stats.PowerCrystal\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class DynamiteActivity extends BaseActivity {\n\n    static Normal = new DynamiteActivity('Normal')\n    static TickDown = new DynamiteActivity('TickDown')\n\n}\n","import { Dynamite } from '../../collect/Dynamite'\nimport { RaiderTraining } from '../../raider/RaiderTraining'\nimport { CarryJob } from '../CarryJob'\n\nexport class CarryDynamiteJob extends CarryJob<Dynamite> {\n\n    color: number = 0xa06060\n\n    constructor(dynamite: Dynamite) {\n        super(dynamite)\n    }\n\n    getRequiredTraining(): RaiderTraining {\n        return RaiderTraining.DEMOLITION\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.item.ignite()\n    }\n\n}\n","import { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { DynamiteActivity } from '../activities/DynamiteActivity'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CarryJob } from '../job/CarryJob'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { CarryDynamiteJob } from '../job/surface/CarryDynamiteJob'\nimport { Surface } from '../map/Surface'\nimport { CarryPathTarget } from './CarryPathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Dynamite extends MaterialEntity {\n\n    targetSurface: Surface\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager, surface: Surface) {\n        super(worldMgr, sceneMgr, EntityType.DYNAMITE, 'MiscAnims/Dynamite/Dynamite.ae')\n        this.targetSurface = surface\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityDestruction\n        this.changeActivity()\n    }\n\n    getCarryTargets(): CarryPathTarget[] {\n        if (this.targetSurface && this.targetSurface.isExplodable()) {\n            return this.targetSurface.getDigPositions().map((p) => new CarryPathTarget(p))\n        } else {\n            return GameState.getBuildingsByType(EntityType.TOOLSTATION).map((b) => b.getDropPosition2D())\n                .map((p) => new CarryPathTarget(p))\n        }\n    }\n\n    ignite() {\n        // TODO add as explosive and scare em all!\n        const center = this.targetSurface.getCenterWorld()\n        center.y = this.group.position.y\n        this.group.lookAt(center)\n        this.changeActivity(DynamiteActivity.TickDown, () => {\n            this.removeFromScene()\n            this.targetSurface.collapse()\n            // TODO add explosion animation\n            // TODO damage raider, vehicle, buildings\n        })\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return DynamiteActivity.Normal\n    }\n\n    createCarryJob(): CarryJob<Dynamite> {\n        return new CarryDynamiteJob(this)\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Ore extends MaterialEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.ORE)\n        const resource = ResourceManager.getResource('MiscAnims/Ore/Ore1st.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('MiscAnims/Ore/').parse(resource))\n        this.group.add(mesh)\n        this.targetBuildingTypes = [EntityType.ORE_REFINERY, EntityType.TOOLSTATION]\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityOre\n    }\n\n    get stats() {\n        return ResourceManager.stats.Ore\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PublicJob } from '../Job'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class ClearRubbleJob extends PublicJob {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(JobType.CLEAR_RUBBLE)\n        this.surface = surface\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.SHOVEL\n    }\n\n    getWorkplaces(): PathTarget[] {\n        const rubblePositions = this.surface.rubblePositions\n        return rubblePositions.length > 0 ? [new PathTarget(rubblePositions[0])] : [] // use first (no need to optimize)\n    }\n\n    onJobComplete() {\n        this.fulfiller.forEach((f) => f.changeActivity())\n        this.surface.reduceRubble()\n        this.fulfiller.forEach((f) => f.jobWorkplaces = this.getWorkplaces())\n        if (!this.surface.hasRubble()) {\n            super.onJobComplete()\n        }\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityClearing\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Clear\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { FulfillerEntity } from '../../FulfillerEntity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PublicJob } from '../Job'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class DrillJob extends PublicJob {\n\n    color: number = 0xa0a0a0\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(JobType.DRILL)\n        this.surface = surface\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.DRILL\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.surface.getDigPositions().map((p) => new PathTarget(p))\n    }\n\n    onJobComplete() {\n        if (this.surface.onDrillComplete(this.fulfiller.last().getPosition2D())) super.onJobComplete()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityDestruction\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Drill\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        const drillTimeInMsPerType: Map<EntityType, { drillTime: number, count: number }> = new Map()\n        this.fulfiller.forEach((f) => {\n            drillTimeInMsPerType.getOrUpdate(f.entityType, () => {\n                return {drillTime: f.stats[this.surface.surfaceType.statsDrillName][f.level] * 1000, count: 0}\n            }).count++\n        })\n        const drillTimeEntry = drillTimeInMsPerType.get(fulfiller.entityType)\n        const drillTimeMs = drillTimeEntry?.drillTime / (drillTimeEntry?.count || 1) || null\n        if (!drillTimeMs) console.warn('According to cfg this entity cannot drill this material')\n        return drillTimeMs\n    }\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { FulfillerEntity } from '../../FulfillerEntity'\nimport { Surface } from '../../map/Surface'\nimport { PathTarget } from '../../PathTarget'\nimport { PublicJob } from '../Job'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class ReinforceJob extends PublicJob {\n\n    color: number = 0x60a060\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(JobType.REINFORCE)\n        this.surface = surface\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.surface.getDigPositions().map((p) => new PathTarget(p))\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.reinforce()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityReinforce\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Reinforce\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        return 2700\n    }\n\n}\n","import { Group, MathUtils, Mesh, MeshPhongMaterial, Vector2, Vector3 } from 'three'\nimport { clearTimeoutSafe, getRandom, getRandomSign } from '../../../core/Util'\nimport { EventBus } from '../../../event/EventBus'\nimport { SelectionChanged } from '../../../event/LocalEvents'\nimport { CavernDiscovered, JobCreateEvent, JobDeleteEvent, OreFoundEvent } from '../../../event/WorldEvents'\nimport { CrystalFoundEvent, LandslideEvent } from '../../../event/WorldLocationEvent'\nimport { HEIGHT_MULTIPLER, TILESIZE } from '../../../params'\nimport { LWSCLoader } from '../../../resource/LWSCLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { AnimSubObj } from '../anim/AnimSubObj'\nimport { BuildingEntity } from '../building/BuildingEntity'\nimport { Crystal } from '../collect/Crystal'\nimport { Dynamite } from '../collect/Dynamite'\nimport { ElectricFence } from '../collect/ElectricFence'\nimport { Ore } from '../collect/Ore'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CarryDynamiteJob } from '../job/surface/CarryDynamiteJob'\nimport { ClearRubbleJob } from '../job/surface/ClearRubbleJob'\nimport { DrillJob } from '../job/surface/DrillJob'\nimport { ReinforceJob } from '../job/surface/ReinforceJob'\nimport { Selectable, SelectionType } from '../Selectable'\nimport { SurfaceGeometry } from './SurfaceGeometry'\nimport { SurfaceType } from './SurfaceType'\nimport { Terrain } from './Terrain'\nimport { WALL_TYPE } from './WallType'\nimport degToRad = MathUtils.degToRad\n\nexport class Surface implements Selectable {\n\n    terrain: Terrain\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    surfaceType: SurfaceType\n    x: number\n    y: number\n    containedOres: number = 0\n    containedCrystals: number = 0\n    heightOffset: number = null\n    discovered: boolean = false\n    selected: boolean = false\n    reinforced: boolean = false\n    drillJob: DrillJob = null\n    reinforceJob: ReinforceJob = null\n    dynamiteJob: CarryDynamiteJob = null\n    clearRubbleJob: ClearRubbleJob = null\n    surfaceRotation: number = 0\n    seamLevel: number = 0\n    fallinTimeout = null\n\n    fallinGrp: Group = null\n    animationTimeout = null\n\n    wallType: WALL_TYPE = null\n    mesh: Mesh = null\n    needsMeshUpdate: boolean = false\n\n    topLeftHeightOffset: number = 0\n    topRightHeightOffset: number = 0\n    bottomLeftHeightOffset: number = 0\n    bottomRightHeightOffset: number = 0\n\n    rubblePositions: Vector2[] = []\n\n    building: BuildingEntity = null\n    fence: ElectricFence = null\n    hasPower: boolean = false\n\n    constructor(terrain: Terrain, surfaceType: SurfaceType, x: number, y: number, heightOffset: number) {\n        this.terrain = terrain\n        this.worldMgr = this.terrain.worldMgr\n        this.sceneMgr = this.terrain.sceneMgr\n        this.surfaceType = surfaceType\n        if (surfaceType === SurfaceType.CRYSTAL_SEAM || surfaceType === SurfaceType.ORE_SEAM) this.seamLevel = 4\n        this.x = x\n        this.y = y\n        this.heightOffset = heightOffset\n    }\n\n    /**\n     * @return {boolean} Returns true, if a new cave has been discovered\n     */\n    discover(): boolean { // TODO improve performance then test with level 20\n        this.setDiscovered()\n        this.needsMeshUpdate = true\n        if (!this.surfaceType.floor) return false\n        const floors: Surface[] = []\n        const others: Surface[] = []\n        for (let x = -1; x <= 1; x++) {\n            for (let y = -1; y <= 1; y++) {\n                if (x === 0 && y === 0) continue\n                const n = this.terrain.getSurface(this.x + x, this.y + y)\n                if ((x === 0 || y === 0) && n.surfaceType.floor) {\n                    floors.push(n)\n                } else {\n                    others.push(n)\n                }\n            }\n        }\n        let caveFound = false\n        let counter = 0\n        while (floors.length > 0) {\n            counter++\n            const neighbor = floors.shift()\n            neighbor.setDiscovered()\n            for (let x = -1; x <= 1; x++) {\n                for (let y = -1; y <= 1; y++) {\n                    if (x === 0 && y === 0) continue\n                    const n = neighbor.terrain.getSurface(neighbor.x + x, neighbor.y + y)\n                    if ((x === 0 || y === 0) && n.surfaceType.floor && !n.discovered) {\n                        floors.push(n)\n                        caveFound = true\n                    } else {\n                        others.push(n)\n                    }\n                }\n            }\n        }\n        others.forEach((o) => {\n            o.setDiscovered()\n            if (!o.isSupported()) {\n                o.collapse()\n            }\n        })\n        console.log('surface discover handled ' + counter + ' floors and ' + others.length + ' others')\n        return caveFound\n    }\n\n    private setDiscovered() {\n        if (!this.discovered) GameState.discoverSurface(this)\n        this.discovered = true\n        this.needsMeshUpdate = true\n    }\n\n    onDrillComplete(drillPosition: Vector2): boolean {\n        if (this.seamLevel > 0) {\n            this.seamLevel--\n            const vec = new Vector2().copy(drillPosition).sub(this.getCenterWorld2D())\n                .multiplyScalar(0.3 + getRandom(3) / 10)\n                .rotateAround(new Vector2(0, 0), degToRad(-10 + getRandom(20)))\n                .add(drillPosition)\n            if (this.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                const crystal = this.worldMgr.placeMaterial(new Crystal(this.worldMgr, this.sceneMgr), vec)\n                EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n            } else if (this.surfaceType === SurfaceType.ORE_SEAM) {\n                this.worldMgr.placeMaterial(new Ore(this.worldMgr, this.sceneMgr), vec)\n                EventBus.publishEvent(new OreFoundEvent())\n            }\n        }\n        if (this.seamLevel > 0) {\n            return false\n        } else {\n            this.collapse()\n            return true\n        }\n    }\n\n    collapse() {\n        this.cancelJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += 4\n        this.needsMeshUpdate = true\n        const foundCave = this.discover()\n        if (foundCave) EventBus.publishEvent(new CavernDiscovered())\n        // drop contained ores and crystals\n        this.dropContainedOre(this.containedOres - 4)\n        for (let c = 0; c < this.containedCrystals; c++) {\n            const crystal = this.worldMgr.placeMaterial(new Crystal(this.worldMgr, this.sceneMgr), this.getRandomPosition())\n            EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n        }\n        // check for unsupported neighbors\n        for (let x = this.x - 1; x <= this.x + 1; x++) {\n            for (let y = this.y - 1; y <= this.y + 1; y++) {\n                if (x !== this.x || y !== this.y) {\n                    const surf = this.terrain.getSurface(x, y)\n                    surf.needsMeshUpdate = true\n                    if (!surf.isSupported()) surf.collapse()\n                }\n            }\n        }\n        // update meshes\n        this.terrain.updateSurfaceMeshes()\n        this.terrain.floorGroup.updateWorldMatrix(true, true)\n    }\n\n    private dropContainedOre(dropAmount: number) {\n        for (let c = 0; c < dropAmount && this.containedOres > 0; c++) {\n            this.containedOres--\n            this.worldMgr.placeMaterial(new Ore(this.worldMgr, this.sceneMgr), this.getRandomPosition())\n            EventBus.publishEvent(new OreFoundEvent())\n        }\n    }\n\n    getRandomPosition(): Vector2 {\n        return new Vector2(this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4),\n            this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4))\n    }\n\n    cancelJobs() {\n        this.drillJob = Surface.safeRemoveJob(this.drillJob)\n        this.reinforceJob = Surface.safeRemoveJob(this.reinforceJob)\n        this.dynamiteJob = Surface.safeRemoveJob(this.dynamiteJob)\n        this.clearRubbleJob = Surface.safeRemoveJob(this.clearRubbleJob)\n        this.updateJobColor()\n    }\n\n    private static safeRemoveJob(job: DrillJob | ReinforceJob | CarryDynamiteJob | ClearRubbleJob) {\n        if (job) EventBus.publishEvent(new JobDeleteEvent(job))\n        return null\n    }\n\n    reduceRubble() {\n        this.rubblePositions.shift()\n        if (this.surfaceType === SurfaceType.RUBBLE4) this.surfaceType = SurfaceType.RUBBLE3\n        else if (this.surfaceType === SurfaceType.RUBBLE3) this.surfaceType = SurfaceType.RUBBLE2\n        else if (this.surfaceType === SurfaceType.RUBBLE2) this.surfaceType = SurfaceType.RUBBLE1\n        else if (this.surfaceType === SurfaceType.RUBBLE1) this.surfaceType = SurfaceType.GROUND\n        this.dropContainedOre(this.containedOres - this.rubblePositions.length)\n        this.updateTexture()\n        if (this.selected) EventBus.publishEvent(new SelectionChanged(SelectionType.SURFACE, this))\n    }\n\n    isSupported(): boolean {\n        if (this.surfaceType.floor) return true\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        return isHighGround(surfLeft, surfTopLeft, surfTop)\n            || isHighGround(surfTop, surfTopRight, surfRight)\n            || isHighGround(surfRight, surfBottomRight, surfBottom)\n            || isHighGround(surfBottom, surfBottomLeft, surfLeft)\n    }\n\n    updateMesh(force: boolean = true) {\n        if (!force && !this.needsMeshUpdate) return\n        this.needsMeshUpdate = false\n\n        const topLeftVertex = new Vector3(this.x, 0, this.y)\n        const topRightVertex = new Vector3(this.x + 1, 0, this.y)\n        const bottomLeftVertex = new Vector3(this.x, 0, this.y + 1)\n        const bottomRightVertex = new Vector3(this.x + 1, 0, this.y + 1)\n\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        if (!this.discovered) {\n            topLeftVertex.y = 1\n            topRightVertex.y = 1\n            bottomRightVertex.y = 1\n            bottomLeftVertex.y = 1\n        } else if (!this.surfaceType.floor || !this.neighbors.some((n) => n.surfaceType.floor && n.discovered)) {\n            if (isHighGround(surfLeft, surfTopLeft, surfTop)) topLeftVertex.y = 1\n            if (isHighGround(surfTop, surfTopRight, surfRight)) topRightVertex.y = 1\n            if (isHighGround(surfRight, surfBottomRight, surfBottom)) bottomRightVertex.y = 1\n            if (isHighGround(surfBottom, surfBottomLeft, surfLeft)) bottomLeftVertex.y = 1\n        }\n\n        // update mesh (geometry), if wall type changed\n        let wallType = topLeftVertex.y + topRightVertex.y + bottomRightVertex.y + bottomLeftVertex.y\n        if (wallType === WALL_TYPE.WALL && topLeftVertex.y === bottomRightVertex.y) wallType = WALL_TYPE.WEIRD_CREVICE\n\n        if (this.wallType !== wallType) {\n            this.wallType = wallType\n            this.updateGeometry(topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex, surfTopLeft, surfTop, surfLeft, surfTopRight, surfRight, surfBottomRight, surfBottom, surfBottomLeft)\n            if (this.wallType !== WALL_TYPE.WALL) this.cancelReinforceJobs()\n        }\n\n        this.updateTexture()\n        this.updateJobColor()\n        this.updateGraphWalk()\n    }\n\n    private updateGraphWalk() {\n        const weight = this.getGraphWalkWeight()\n        for (let x = 0; x < 3; x++) {\n            for (let y = 0; y < 3; y++) {\n                this.terrain.graphWalk.grid[this.x * 3 + x][this.y * 3 + y].weight = weight\n            }\n        }\n    }\n\n    cancelReinforceJobs() {\n        this.reinforceJob = Surface.safeRemoveJob(this.reinforceJob)\n        this.updateJobColor()\n    }\n\n    updateTexture() {\n        let textureName = this.terrain.textureSet.texturebasename\n        if (!this.discovered) {\n            textureName += '70'\n        } else if (this.surfaceType === SurfaceType.POWER_PATH) {\n            textureName += this.updatePowerPathTexture()\n        } else if (!this.surfaceType.shaping && this.neighbors.some((n) => n.discovered && n.surfaceType.floor)) {\n            if (this.surfaceType === SurfaceType.POWER_PATH_BUILDING && this.hasPower) {\n                textureName += '66'\n            } else {\n                textureName += this.surfaceType.matIndex.toString()\n            }\n        } else if (this.wallType === WALL_TYPE.WEIRD_CREVICE) {\n            textureName += '77'\n        } else {\n            if (this.wallType === WALL_TYPE.CORNER) {\n                textureName += '5'\n            } else if (this.wallType === WALL_TYPE.INVERTED_CORNER) {\n                textureName += '3'\n            } else if (this.reinforced) {\n                textureName += '2'\n            } else {\n                textureName += '0'\n            }\n            textureName += this.surfaceType.shaping ? this.surfaceType.matIndex : SurfaceType.SOLID_ROCK.matIndex\n        }\n        textureName += '.bmp'\n\n        this.forEachMaterial((mat) => mat.map?.dispose())\n        const texture = ResourceManager.getTexture(textureName)\n        texture.center.set(0.5, 0.5)\n        texture.rotation = this.surfaceRotation\n\n        this.forEachMaterial((mat) => mat.map = texture)\n    }\n\n    private updatePowerPathTexture(): string {\n        this.surfaceRotation = 0\n        const left = this.terrain.getSurface(this.x - 1, this.y).isPath()\n        const top = this.terrain.getSurface(this.x, this.y - 1).isPath()\n        const right = this.terrain.getSurface(this.x + 1, this.y).isPath()\n        const bottom = this.terrain.getSurface(this.x, this.y + 1).isPath()\n        const pathSum = (left ? 1 : 0) + (top ? 1 : 0) + (right ? 1 : 0) + (bottom ? 1 : 0)\n        if (pathSum === 0 || pathSum === 1) {\n            if (left) this.surfaceRotation = -Math.PI / 2\n            if (top) this.surfaceRotation = Math.PI\n            if (right) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '75' : '65'\n        } else if (pathSum === 2) {\n            if (left === right) {\n                this.surfaceRotation = left ? Math.PI / 2 : 0\n                return this.hasPower ? '72' : '62'\n            } else {\n                if (left && bottom) this.surfaceRotation = -Math.PI / 2\n                if (left && top) this.surfaceRotation = Math.PI\n                if (top && right) this.surfaceRotation = Math.PI / 2\n                return this.hasPower ? '73' : '63'\n            }\n        } else if (pathSum === 3) {\n            if (!top) this.surfaceRotation = -Math.PI / 2\n            if (!right) this.surfaceRotation = Math.PI\n            if (!bottom) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '74' : '64'\n        } else {\n            return this.hasPower ? '71' : '60'\n        }\n    }\n\n    forEachMaterial(callback: (mat: MeshPhongMaterial) => void): void {\n        if (!this.mesh?.material) return;\n        (Array.isArray(this.mesh.material) ? this.mesh.material : [this.mesh.material]).forEach((m) => callback(m as MeshPhongMaterial))\n    }\n\n    updateGeometry(topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3, surfTopLeft: Surface, surfTop: Surface, surfLeft: Surface, surfTopRight: Surface, surfRight: Surface, surfBottomRight: Surface, surfBottom: Surface, surfBottomLeft: Surface) {\n        if (this.mesh) this.terrain.floorGroup.remove(this.mesh)\n        this.mesh?.geometry?.dispose()\n\n        function avgHeight(...args: Surface[]) {\n            let sum = 0, cnt = 0\n            args.map(s => s.heightOffset).filter(Boolean).forEach(h => {\n                sum += h\n                cnt++\n            })\n            return sum / cnt\n        }\n\n        this.topLeftHeightOffset = avgHeight(surfTopLeft, surfTop, this, surfLeft) * HEIGHT_MULTIPLER\n        this.topRightHeightOffset = avgHeight(surfTop, surfTopRight, surfRight, this) * HEIGHT_MULTIPLER\n        this.bottomRightHeightOffset = avgHeight(this, surfRight, surfBottomRight, surfBottom) * HEIGHT_MULTIPLER\n        this.bottomLeftHeightOffset = avgHeight(surfLeft, this, surfBottom, surfBottomLeft) * HEIGHT_MULTIPLER\n        const geometry = SurfaceGeometry.create(this.wallType, topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex,\n            topLeftVertex.y + this.topLeftHeightOffset,\n            topRightVertex.y + this.topRightHeightOffset,\n            bottomRightVertex.y + this.bottomRightHeightOffset,\n            bottomLeftVertex.y + this.bottomLeftHeightOffset,\n        )\n\n        this.mesh = new Mesh(geometry, new MeshPhongMaterial({shininess: 0}))\n        this.mesh.userData = {selectable: this, surface: this}\n\n        this.terrain.floorGroup.add(this.mesh)\n        this.terrain.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.SURFACE\n    }\n\n    select(): boolean {\n        if (this.surfaceType.selectable && (this.wallType !== WALL_TYPE.INVERTED_CORNER && this.wallType !== WALL_TYPE.WEIRD_CREVICE) && !this.selected && this.discovered) {\n            this.selected = true\n            this.forEachMaterial((mat) => mat.color.setHex(0x6060a0))\n            console.log('Surface selected at ' + this.x + '/' + this.y)\n            return true\n        }\n        return false\n    }\n\n    deselect(): any {\n        if (this.selected) {\n            this.selected = false\n            this.updateJobColor()\n        }\n    }\n\n    getSelectionCenter(): Vector3 {\n        return null // not used\n    }\n\n    updateJobColor() {\n        const color = this.dynamiteJob?.color || this.reinforceJob?.color || this.drillJob?.color || 0xffffff\n        this.forEachMaterial((mat) => mat.color.setHex(color))\n    }\n\n    hasRubble(): boolean {\n        return this.rubblePositions.length > 0\n    }\n\n    isPath(): boolean {\n        return this.surfaceType === SurfaceType.POWER_PATH || this.surfaceType === SurfaceType.POWER_PATH_BUILDING\n    }\n\n    isWalkable(): boolean {\n        return this.surfaceType.floor && this.discovered && this.surfaceType !== SurfaceType.LAVA && this.surfaceType !== SurfaceType.WATER && !this.building?.blocksPathSurface\n    }\n\n    isDrillable(): boolean {\n        return this.surfaceType.drillable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDrillableHard(): boolean {\n        return this.surfaceType.drillableHard && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isReinforcable(): boolean {\n        return this.surfaceType.reinforcable && this.discovered && this.wallType === WALL_TYPE.WALL && !this.reinforced\n    }\n\n    isExplodable(): boolean {\n        return this.surfaceType.explodable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDigable(): boolean {\n        return this.isDrillable() || this.isExplodable()\n    }\n\n    getDigPositions(): Vector2[] {\n        const digPosition = []\n        if (this.terrain.getSurface(this.x - 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE - 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y - 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE - 1))\n        if (this.terrain.getSurface(this.x + 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE + 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y + 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE + TILESIZE + 1))\n        return digPosition\n    }\n\n    reinforce() {\n        this.reinforced = true\n        this.cancelReinforceJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.updateTexture()\n    }\n\n    getCenterWorld2D(): Vector2 {\n        return new Vector2(this.x, this.y).addScalar(0.5).multiplyScalar(TILESIZE)\n    }\n\n    getCenterWorld(): Vector3 {\n        const center = this.getCenterWorld2D()\n        return new Vector3(center.x, this.sceneMgr.getTerrainHeight(center.x, center.y), center.y)\n    }\n\n    setFallinLevel(fallinLevel: number) {\n        if (fallinLevel < 1) return\n        let originPos\n        let targetPos\n        if (this.surfaceType.floor) {\n            originPos = this.terrain.findFallInOrigin(this.x, this.y)\n            targetPos = [this.x, this.y]\n        } else {\n            originPos = [this.x, this.y]\n            targetPos = this.terrain.findFallInTarget(this.x, this.y)\n        }\n        if (originPos && targetPos) {\n            this.terrain.getSurface(originPos[0], originPos[1]).scheduleFallin(targetPos[0], targetPos[1])\n        }\n    }\n\n    scheduleFallin(targetX: number, targetY: number) {\n        this.fallinTimeout = setTimeout(() => {\n            this.createFallin(targetX, targetY)\n            this.scheduleFallin(targetX, targetY)\n        }, (30 + getRandom(60)) * 1000) // TODO adapt timer to level multiplier and fallin value\n    }\n\n    createFallin(targetX: number, targetY: number) {\n        const fallinPosition = this.terrain.getSurface(targetX, targetY).getCenterWorld()\n        EventBus.publishEvent(new LandslideEvent(fallinPosition))\n\n        // TODO refactor mesh and animation handling\n        const content = ResourceManager.getResource('MiscAnims/RockFall/Rock3Sides.lws')\n        const animation = new LWSCLoader('MiscAnims/RockFall/').parse(content)\n        this.fallinGrp = new Group()\n        this.fallinGrp.position.copy(fallinPosition)\n        const dx = this.x - targetX, dy = targetY - this.y\n        this.fallinGrp.rotateOnAxis(new Vector3(0, 1, 0), Math.atan2(dy, dx) + Math.PI / 2)\n        this.sceneMgr.scene.add(this.fallinGrp)\n        const poly = []\n        animation.bodies.forEach((body) => {\n            const polyModel = body.model.clone(true)\n            poly.push(polyModel)\n        })\n        animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                poly[parentInd].add(polyPart)\n            } else {\n                this.fallinGrp.add(polyPart)\n            }\n        })\n        this.animate(poly, animation, 0)\n\n        this.terrain.getSurface(targetX, targetY).makeRubble()\n    }\n\n    animate(poly, animation, frameIndex) {\n        if (poly.length !== animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = mat.transparent || mat.opacity < 1\n                    })\n                }\n            }\n        })\n        this.animationTimeout = null\n        if (!(frameIndex + 1 > animation.lastFrame) || animation.looping) {\n            let nextFrame = frameIndex + 1\n            if (nextFrame > animation.lastFrame) {\n                nextFrame = animation.firstFrame\n            }\n            const that = this\n            this.animationTimeout = setTimeout(() => that.animate(poly, animation, nextFrame), 1000 / animation.framesPerSecond * animation.transcoef)\n        } else {\n            this.sceneMgr.scene.remove(this.fallinGrp)\n            this.fallinGrp = null\n        }\n    }\n\n    dispose() {\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.forEachMaterial(m => m.dispose())\n        this.mesh?.geometry?.dispose()\n    }\n\n    getFloorHeight(worldX: number, worldZ: number) {\n        const sx = worldX / TILESIZE - this.x\n        const sy = worldZ / TILESIZE - this.y\n        const dy0 = Surface.interpolate(this.topLeftHeightOffset, this.topRightHeightOffset, sx)\n        const dy1 = Surface.interpolate(this.bottomLeftHeightOffset, this.bottomRightHeightOffset, sx)\n        return Surface.interpolate(dy0, dy1, sy) * TILESIZE\n    }\n\n    private static interpolate(y0: number, y1: number, x: number): number {\n        return y0 + x * (y1 - y0)\n    }\n\n    get neighbors(): Surface[] {\n        return [this.terrain.getSurface(this.x - 1, this.y), this.terrain.getSurface(this.x, this.y - 1),\n            this.terrain.getSurface(this.x + 1, this.y), this.terrain.getSurface(this.x, this.y + 1)]\n    }\n\n    makeRubble(containedOre: number = 0) {\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += containedOre\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.updateTexture()\n    }\n\n    setBuilding(building: BuildingEntity) {\n        this.building = building\n        this.updateGraphWalk()\n    }\n\n    getGraphWalkWeight(): number {\n        return this.isWalkable() ? this.hasRubble() ? 4 : 1 : 0\n    }\n\n    setHasPower(state: boolean, recursive: boolean) {\n        if (this.hasPower === state) return\n        this.hasPower = state\n        this.updateTexture()\n        if (recursive) this.neighbors.forEach((n) => n.isPath() && n.setHasPower(state, recursive))\n    }\n\n    canPlaceFence(): boolean { // TODO performance this can be cached\n        return this.surfaceType.canCarryFence && !this.building && !this.fence &&\n            [1, 2].some((n) => {\n                return !!this.terrain.getSurface(this.x - n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y - n).building ||\n                    !!this.terrain.getSurface(this.x + n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y + n).building ||\n                    !!this.terrain.getSurface(this.x - n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y - n).fence ||\n                    !!this.terrain.getSurface(this.x + n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y + n).fence\n            })\n    }\n\n    createDrillJob(): DrillJob {\n        if (!this.drillJob) {\n            this.drillJob = new DrillJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.drillJob))\n        }\n        return this.drillJob\n    }\n\n    createReinforceJob(): ReinforceJob {\n        if (!this.reinforceJob) {\n            this.reinforceJob = new ReinforceJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.reinforceJob))\n        }\n        return this.reinforceJob\n    }\n\n    createDynamiteJob(): CarryDynamiteJob {\n        if (!this.dynamiteJob) {\n            const targetBuilding = GameState.getClosestBuildingByType(this.getCenterWorld(), EntityType.TOOLSTATION) // XXX performance cache this\n            if (!targetBuilding) throw 'Could not find toolstation to spawn dynamite'\n            const dynamite = new Dynamite(this.worldMgr, this.sceneMgr, this)\n            dynamite.addToScene(targetBuilding.getDropPosition2D(), targetBuilding.getHeading())\n            this.dynamiteJob = new CarryDynamiteJob(dynamite)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.dynamiteJob))\n        }\n        return this.dynamiteJob\n    }\n\n    createClearRubbleJob(): ClearRubbleJob {\n        if (!this.clearRubbleJob) {\n            this.clearRubbleJob = new ClearRubbleJob(this)\n            this.updateJobColor()\n            EventBus.publishEvent(new JobCreateEvent(this.clearRubbleJob))\n        }\n        return this.clearRubbleJob\n    }\n\n}\n","import { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { Graph } from './model/map/astar'\nimport { Surface } from './model/map/Surface'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { Terrain } from './model/map/Terrain'\nimport { SceneManager } from './SceneManager'\nimport { WorldManager } from './WorldManager'\n\nexport class TerrainLoader {\n\n    static loadTerrain(levelConf: LevelEntryCfg, worldMgr: WorldManager, sceneMgr: SceneManager): Terrain {\n        const tileSize = levelConf.blockSize\n        if (tileSize !== TILESIZE) console.error('Unexpected tile size in level configuration: ' + tileSize)\n        const terrain = new Terrain(worldMgr, sceneMgr)\n\n        const themeName = levelConf.textureSet[1]\n        terrain.textureSet = ResourceManager.cfg('Textures', themeName)\n        // console.log(terrain.textureSet);\n\n        const terrainMap = ResourceManager.getResource(levelConf.terrainMap)\n        terrain.width = terrainMap.width\n        terrain.height = terrainMap.height\n        const pathMap = ResourceManager.getResource(levelConf.pathMap)?.level\n        const surfaceMap = ResourceManager.getResource(levelConf.surfaceMap)?.level\n        const predugMap = ResourceManager.getResource(levelConf.predugMap)?.level\n        const cryOreMap = ResourceManager.getResource(levelConf.cryOreMap)?.level\n        const fallinMap = ResourceManager.getResource(levelConf.fallinMap)?.level\n        const erodeMap = ResourceManager.getResource(levelConf.erodeMap)?.level\n        const blockMap = ResourceManager.getResource(levelConf.blockPointersMap)?.level\n\n        // maps parsed from WAD are row-wise saved, which means y (row) comes first and x (column) second\n        for (let r = 0; r < terrainMap.level.length; r++) {\n            for (let c = 0; c < (terrainMap.level)[r].length; c++) {\n                (terrain.surfaces)[c] = (terrain.surfaces)[c] || []\n                const surfaceTypeNum = (terrainMap.level)[r][c]\n                let surfaceType = SurfaceType.getByNum(surfaceTypeNum)\n                const predugLevel = predugMap[r][c]\n                if (predugLevel === PredugMap.CAVERN_EXPOSED) {\n                    if (surfaceType === SurfaceType.GROUND || surfaceType === SurfaceType.DIRT\n                        || surfaceType === SurfaceType.POWER_PATH_BUILDING) { // used by mods\n                        surfaceType = SurfaceType.GROUND\n                    } else if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) {\n                        console.warn('Unexpected cavern surface type: ' + surfaceType.name)\n                    }\n                } else if (predugLevel === PredugMap.SLUG_HOLE_EXPOSED || predugLevel === PredugMap.SLUG_HOLE_HIDDEN) {\n                    surfaceType = SurfaceType.SLUG_HOLE\n                } else if (predugLevel !== PredugMap.WALL && predugLevel !== PredugMap.CAVERN_HIDDEN) {\n                    console.warn('Unexpected predug level: ' + predugLevel)\n                }\n                // give the path map the highest priority, if it exists\n                const pathMapLevel = pathMap && surfaceType.floor ? pathMap[r][c] : PathMap.NONE\n                if (pathMapLevel === PathMap.RUBBLE) {\n                    surfaceType = SurfaceType.RUBBLE4\n                } else if (pathMapLevel === PathMap.POWER_PATH) {\n                    surfaceType = SurfaceType.POWER_PATH\n                } else if (pathMapLevel !== PathMap.NONE) {\n                    console.warn('Unexpected path map level: ' + pathMapLevel)\n                }\n\n                const surface = new Surface(terrain, surfaceType, c, r, surfaceMap[r][c])\n                if (cryOreMap) {\n                    const currentCryOre = cryOreMap[r][c]\n                    if (currentCryOre % 2 === 1) {\n                        surface.containedCrystals = (currentCryOre + 1) / 2\n                    } else {\n                        surface.containedOres = currentCryOre / 2\n                    }\n                }\n\n                (terrain.surfaces)[c].push(surface)\n            }\n        }\n\n        // exlpore predug surfaces\n        terrain.forEachSurface((s) => {\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_EXPOSED || predugMap[s.y][s.x] === PredugMap.SLUG_HOLE_EXPOSED) { // map are rows (y) first, columns (x) second\n                for (let x = s.x - 1; x <= s.x + 1; x++) {\n                    for (let y = s.y - 1; y <= s.y + 1; y++) {\n                        terrain.getSurfaceOrNull(x, y).discovered = true\n                    }\n                }\n            }\n        })\n\n        // create hidden caverns\n        terrain.forEachSurface((s) => {\n            const surface = terrain.getSurfaceOrNull(s.x, s.y)\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_HIDDEN && !surface.discovered) {\n                surface.surfaceType = SurfaceType.GROUND\n            }\n        })\n\n        // generate path finding weights\n        const weights: number[][] = []\n        for (let x = 0; x < terrain.width; x++) {\n            const col: number[] = []\n            for (let y = 0; y < terrain.height; y++) {\n                const w = terrain.getSurfaceOrNull(x, y).getGraphWalkWeight()\n                col.push(w, w, w)\n            }\n            weights.push(col, col, col)\n        }\n        terrain.graphWalk = new Graph(weights, {diagonal: true})\n\n        // crumble unsupported walls\n        terrain.forEachSurface((s) => {\n            if (!s.isSupported()) s.collapse()\n        })\n\n        terrain.updateSurfaceMeshes(true)\n\n        if (fallinMap) {\n            for (let x = 0; x < terrain.width; x++) {\n                for (let y = 0; y < terrain.height; y++) {\n                    terrain.getSurface(x, y).setFallinLevel(fallinMap[y][x]) // rows (y) before columns (x) used in maps\n                }\n            }\n        }\n\n        if (erodeMap) { // TODO implement lava erosion\n            console.warn('Lucky you! Lava erosion not yet implemented')\n        }\n\n        if (blockMap) { // TODO implement tutorial blocks map\n            // console.log(blockMap)\n        }\n\n        return terrain\n    }\n\n}\n\nenum PathMap {\n\n    NONE = 0,\n    RUBBLE = 1,\n    POWER_PATH = 2,\n\n}\n\nenum PredugMap {\n\n    WALL = 0,\n    CAVERN_EXPOSED = 1,\n    CAVERN_HIDDEN = 2,\n    SLUG_HOLE_EXPOSED = 3,\n    SLUG_HOLE_HIDDEN = 4,\n}\n","export enum WorkerMessageType {\n\n    // wad worker\n    MSG,\n    CFG,\n    CACHE_MISS,\n    SFX,\n    ASSET,\n    DONE,\n\n    // gui/scene worker\n    INIT,\n    CANVAS,\n    REDRAW,\n    RESET,\n    EVENT_POINTER,\n    EVENT_KEY,\n    EVENT_WHEEL,\n    RESPONSE_EVENT,\n    OVERLAY_SETUP,\n    SPACE_TO_CONINUE,\n    SHOW_OPTIONS,\n    GAME_ABORT,\n    GAME_RESTART,\n    GAME_EVENT,\n\n}\n","export enum MoveState {\n\n    MOVED,\n    TARGET_REACHED,\n    TARGET_UNREACHABLE,\n\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\n\nexport class TerrainPath {\n\n    target: PathTarget = null\n    locations: Vector2[] = []\n    lengthSq: number = 0\n\n    constructor(target: PathTarget, locations: Vector2[] | Vector2) {\n        this.target = target\n        this.locations = Array.isArray(locations) ? locations : [locations]\n        for (let c = 0; c < this.locations.length - 1; c++) {\n            const start = this.locations[c]\n            const end = this.locations[c + 1]\n            this.lengthSq += start.distanceToSquared(end)\n        }\n    }\n\n    addLocation(location: Vector2): TerrainPath {\n        this.locations.push(location)\n        if (this.locations.length > 1) {\n            this.lengthSq += this.locations[this.locations.length - 2].distanceToSquared(location)\n        }\n        return this\n    }\n\n    get targetPosition(): Vector2 {\n        return this.locations[this.locations.length - 1] || null\n    }\n\n    get firstLocation(): Vector2 {\n        return this.locations[0] || null\n    }\n\n}\n","import { Group, Vector2, Vector3 } from 'three'\nimport { TILESIZE } from '../../../params'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { PathTarget } from '../PathTarget'\nimport { astar, Graph } from './astar'\nimport { Surface } from './Surface'\nimport { SurfaceType } from './SurfaceType'\nimport { TerrainPath } from './TerrainPath'\n\nexport class Terrain {\n\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    textureSet: any = {}\n    width: number = 0\n    height: number = 0\n    surfaces: Surface[][] = []\n    floorGroup: Group = new Group()\n    roofGroup: Group = new Group()\n    graphWalk: Graph = null\n    cachedPaths = new Map<string, TerrainPath>()\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        this.worldMgr = worldMgr\n        this.sceneMgr = sceneMgr\n        this.floorGroup.scale.setScalar(TILESIZE)\n        this.roofGroup.scale.setScalar(TILESIZE)\n        this.roofGroup.visible = false // keep roof hidden unless switched to other camera\n    }\n\n    getSurfaceFromWorld(worldPosition: Vector3): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.z)\n    }\n\n    getSurfaceFromWorld2D(worldPosition: Vector2): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.y)\n    }\n\n    getSurfaceFromWorldXZ(worldX: number, worldZ: number): Surface | null {\n        return this.getSurface(worldX / TILESIZE, worldZ / TILESIZE)\n    }\n\n    getSurface(x, y): Surface {\n        x = Math.floor(x)\n        y = Math.floor(y)\n        return this.getSurfaceOrNull(x, y) || new Surface(this, SurfaceType.SOLID_ROCK, x, y, 0)\n    }\n\n    getSurfaceOrNull(x, y): Surface | null {\n        if (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n            return this.surfaces[x][y]\n        } else {\n            return null\n        }\n    }\n\n    updateSurfaceMeshes(force: boolean = false) {\n        this.forEachSurface((s) => s.updateMesh(force))\n        this.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n        this.resetGraphWalk()\n    }\n\n    resetGraphWalk() {\n        this.graphWalk.init()\n        this.cachedPaths.clear()\n        console.log('Cached paths cleared')\n    }\n\n    findPath(start: Vector2, target: PathTarget): TerrainPath {\n        const end = target.targetLocation\n        const gridStartX = Math.floor(start.x * 3 / TILESIZE)\n        const gridStartY = Math.floor(start.y * 3 / TILESIZE)\n        const gridEndX = Math.floor(end.x * 3 / TILESIZE)\n        const gridEndY = Math.floor(end.y * 3 / TILESIZE)\n        if (gridStartX === gridEndX && gridStartY === gridEndY) {\n            return new TerrainPath(target, end)\n        }\n        const cacheIdentifier = gridStartX + '/' + gridStartY + ' -> ' + gridEndX + '/' + gridEndY\n        const cachedPath = this.cachedPaths.get(cacheIdentifier)\n        if (cachedPath) {\n            return cachedPath.addLocation(end)\n        } else {\n            return this.searchPath(gridStartX, gridStartY, gridEndX, gridEndY, target, cacheIdentifier)\n        }\n    }\n\n    private searchPath(gridStartX: number, gridStartY: number, gridEndX: number, gridEndY: number, target: PathTarget, cacheIdentifier: string): TerrainPath {\n        const startNode = this.graphWalk.grid[gridStartX][gridStartY]\n        const endNode = this.graphWalk.grid[gridEndX][gridEndY]\n        const worldPath = astar.search(this.graphWalk, startNode, endNode)\n            .map((n) => Terrain.gridNodeToWorldPos(n))\n        if (worldPath.length < 1) return null // no path found\n        // replace last surface center with actual target position\n        worldPath.pop()\n        worldPath.push(target.targetLocation)\n        this.cachedPaths.set(cacheIdentifier, new TerrainPath(target, worldPath.slice(0, -1))) // cache shallow copy to avoid interference\n        return new TerrainPath(target, worldPath)\n    }\n\n    private static gridNodeToWorldPos(gridNode) {\n        return new Vector2(Math.random(), Math.random()).divideScalar(2).add(gridNode).multiplyScalar(TILESIZE / 3)\n    }\n\n    findFallInOrigin(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isReinforcable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isReinforcable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isReinforcable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isReinforcable()) return [bottomSurface.x, bottomSurface.y]\n        const leftSurface2 = this.getSurface(x - 1, y)\n        if (leftSurface2.isDigable()) return [leftSurface2.x, leftSurface2.y]\n        const topSurface2 = this.getSurface(x, y - 1)\n        if (topSurface2.isDigable()) return [topSurface2.x, topSurface2.y]\n        const rightSurface2 = this.getSurface(x + 1, y)\n        if (rightSurface2.isDigable()) return [rightSurface2.x, rightSurface2.y]\n        const bottomSurface2 = this.getSurface(x, y + 1)\n        if (bottomSurface2.isDigable()) return [bottomSurface2.x, bottomSurface2.y]\n        return null\n    }\n\n    findFallInTarget(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isWalkable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isWalkable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isWalkable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isWalkable()) return [bottomSurface.x, bottomSurface.y]\n        return null\n    }\n\n    dispose() {\n        this.forEachSurface(s => s.dispose())\n    }\n\n    forEachSurface(each: (surface: Surface) => any) {\n        this.surfaces?.forEach((r) => r.forEach((s) => each(s)))\n    }\n\n    countDiggables(): number {\n        let totalDiggables = 0\n        this.forEachSurface((s) => totalDiggables += s.isDigable() ? 1 : 0)\n        return totalDiggables\n    }\n\n    countCrystals(): number {\n        let totalCrystals = 0\n        this.forEachSurface((s) => totalCrystals += s.containedCrystals)\n        return totalCrystals\n    }\n\n    countOres(): number {\n        let totalOres = 0\n        this.forEachSurface((s) => totalOres += s.containedOres)\n        return totalOres\n    }\n\n}\n","import { AmbientLight, Color, Frustum, Mesh, MOUSE, PerspectiveCamera, PointLight, Raycaster, Scene, Vector2, Vector3, WebGLRenderer } from 'three'\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { clearIntervalSafe } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { TILESIZE } from '../params'\nimport { AnimatedMesh } from '../resource/AnimatedMesh'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { DebugHelper } from '../screen/DebugHelper'\nimport { BuildPlacementMarker } from './model/building/BuildPlacementMarker'\nimport { GameState } from './model/GameState'\nimport { Terrain } from './model/map/Terrain'\nimport { Selectable } from './model/Selectable'\nimport { TerrainLoader } from './TerrainLoader'\nimport { WorldManager } from './WorldManager'\n\nexport class SceneManager {\n\n    static meshRegistry: AnimatedMesh[] = []\n\n    maxFps: number = 30 // most animations use 25 fps so this should be enough\n    renderer: WebGLRenderer\n    debugHelper: DebugHelper = new DebugHelper()\n    renderInterval\n    animRequest\n    scene: Scene\n    camera: PerspectiveCamera\n    ambientLight: AmbientLight\n    light: PointLight\n    terrain: Terrain\n    controls: MapControls\n    cursorTorchlight: PointLight\n    buildMarker: BuildPlacementMarker\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.renderer = new WebGLRenderer({antialias: true, canvas: canvas})\n        this.renderer.setClearColor(0x000000)\n\n        this.camera = new PerspectiveCamera(30, canvas.width / canvas.height, 0.1, 5000) // TODO make these params configurable\n\n        this.controls = new MapControls(this.camera, this.renderer.domElement)\n        this.controls.mouseButtons = {LEFT: null, MIDDLE: MOUSE.ROTATE, RIGHT: MOUSE.PAN}\n        // this.controls.maxPolarAngle = Math.PI * 0.45; // TODO dynamically adapt to terrain height at camera position\n        this.controls.listenToKeyEvents(this.renderer.domElement)\n        this.controls.keyPanSpeed = this.controls.keyPanSpeed * 20\n\n        this.buildMarker = new BuildPlacementMarker()\n        EventBus.registerEventListener(EventKey.COMMAND_CANCEL_BUILD_MODE, () => {\n            GameState.buildModeSelection = null // TODO dispose build mode selection first\n            this.buildMarker.hideAllMarker()\n        })\n    }\n\n    selectEntitiesByRay(rx: number, ry: number) {\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        let intersects = raycaster.intersectObjects(GameState.raiders.map((r) => r.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.buildings.map((b) => b.pickSphere))\n        if (intersects.length < 1 && this.terrain) intersects = raycaster.intersectObjects(this.terrain.floorGroup.children)\n        const selected = []\n        if (intersects.length > 0) {\n            const userData = intersects[0].object.userData\n            if (userData && userData.hasOwnProperty('selectable')) {\n                const selectable = userData['selectable']\n                if (selectable) selected.push(selectable)\n            }\n        }\n        GameState.selectEntities(selected)\n    }\n\n    selectEntitiesInFrustum(r1x: number, r1y: number, r2x: number, r2y: number) {\n        const startPoint = new Vector3(r1x, r1y, 0.5)\n        const endPoint = new Vector3(r2x, r2y, 0.5)\n        // Avoid invalid frustum\n        if (startPoint.x === endPoint.x) {\n            endPoint.x += Number.EPSILON\n        }\n        if (startPoint.y === endPoint.y) {\n            endPoint.y += Number.EPSILON\n        }\n        // update camera\n        this.camera.updateProjectionMatrix()\n        this.camera.updateMatrixWorld()\n        // update frustum\n        const tmpPoint = new Vector3()\n        tmpPoint.copy(startPoint)\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x)\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y)\n        endPoint.x = Math.max(startPoint.x, endPoint.x)\n        endPoint.y = Math.min(startPoint.y, endPoint.y)\n\n        const vecNear = new Vector3()\n        const vecTopLeft = new Vector3()\n        const vecTopRight = new Vector3()\n        const vecDownRight = new Vector3()\n        const vecDownLeft = new Vector3()\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld)\n        vecTopLeft.copy(tmpPoint)\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0)\n        vecDownRight.copy(endPoint)\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0)\n\n        vecTopLeft.unproject(this.camera)\n        vecTopRight.unproject(this.camera)\n        vecDownRight.unproject(this.camera)\n        vecDownLeft.unproject(this.camera)\n\n        const vectemp1 = new Vector3()\n        const vectemp2 = new Vector3()\n        const vectemp3 = new Vector3()\n        vectemp1.copy(vecTopLeft).sub(vecNear)\n        vectemp2.copy(vecTopRight).sub(vecNear)\n        vectemp3.copy(vecDownRight).sub(vecNear)\n        vectemp1.normalize()\n        vectemp2.normalize()\n        vectemp3.normalize()\n\n        const deep = Number.MAX_VALUE\n        vectemp1.multiplyScalar(deep)\n        vectemp2.multiplyScalar(deep)\n        vectemp3.multiplyScalar(deep)\n        vectemp1.add(vecNear)\n        vectemp2.add(vecNear)\n        vectemp3.add(vecNear)\n\n        const frustum = new Frustum()\n        const planes = frustum.planes\n\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight)\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight)\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear)\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear)\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft)\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1)\n        planes[5].normal.multiplyScalar(-1)\n\n        let entities: Selectable[] = GameState.raiders.filter((r) => frustum.containsPoint(r.getSelectionCenter()))\n        if (entities.length < 1) entities = GameState.buildings.filter((b) => frustum.containsPoint(b.getSelectionCenter()))\n        GameState.selectEntities(entities)\n    }\n\n    setupScene(levelConf: LevelEntryCfg, worldMgr: WorldManager) {\n        this.scene = new Scene()\n\n        const ambientRgb = ResourceManager.cfg('Main', 'AmbientRGB') || [10, 10, 10]\n        const maxAmbRgb = Math.min(255, Math.max(0, ...ambientRgb))\n        const normalizedRgb = ambientRgb.map(v => v / (maxAmbRgb ? maxAmbRgb : 1))\n        const ambientColor = new Color(normalizedRgb[0], normalizedRgb[1], normalizedRgb[2])\n        this.ambientLight = new AmbientLight(ambientColor, 0.4)\n        this.scene.add(this.ambientLight)\n\n        this.cursorTorchlight = new PointLight(0xffffff, 1.5, 4, 1)\n        this.cursorTorchlight.distance *= TILESIZE\n        this.scene.add(this.cursorTorchlight)\n\n        this.scene.add(this.buildMarker.group)\n\n        // create terrain mesh and add it to the scene\n        this.terrain = TerrainLoader.loadTerrain(levelConf, worldMgr, this)\n        this.scene.add(this.terrain.floorGroup)\n\n        // gather level start details for game result score calculation\n        GameState.totalDiggables = this.terrain.countDiggables()\n        GameState.totalCrystals = this.terrain.countCrystals()\n        GameState.totalOres = this.terrain.countOres()\n    }\n\n    startScene() {\n        this.debugHelper.show()\n        this.renderInterval = setInterval(() => {\n            this.animRequest = requestAnimationFrame(() => {\n                this.debugHelper.renderStart()\n                this.renderer.render(this.scene, this.camera)\n                this.debugHelper.renderDone()\n            })\n        }, 1000 / this.maxFps)\n    }\n\n    disposeScene() {\n        this.debugHelper.hide()\n        this.renderInterval = clearIntervalSafe(this.renderInterval)\n        if (this.animRequest) {\n            cancelAnimationFrame(this.animRequest)\n            this.animRequest = null\n        }\n        GameState.remainingDiggables = this.terrain?.countDiggables() || 0\n        this.terrain?.dispose()\n        this.terrain = null\n        SceneManager.meshRegistry.forEach(mesh => mesh.dispose())\n        SceneManager.meshRegistry = []\n    }\n\n    static registerMesh(animatedMesh: AnimatedMesh): Mesh {\n        this.meshRegistry.push(animatedMesh)\n        return animatedMesh.mesh\n    }\n\n    resize(width: number, height: number) {\n        this.renderer.setSize(width, height)\n    }\n\n    getTerrainIntersectionPoint(rx: number, ry: number): Vector2 {\n        if (!this.terrain) return null\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        const intersects = raycaster.intersectObjects(this.terrain.floorGroup.children)\n        return intersects.length > 0 ? new Vector2(intersects[0].point.x, intersects[0].point.z) : null\n    }\n\n    setTorchPosition(position: Vector2) {\n        this.cursorTorchlight.position.copy(this.getFloorPosition(position))\n        this.cursorTorchlight.position.y += 2 * TILESIZE\n    }\n\n    getFloorPosition(world: Vector2) {\n        const floorY = this.terrain.getSurfaceFromWorldXZ(world.x, world.y).getFloorHeight(world.x, world.y)\n        return new Vector3(world.x, floorY, world.y)\n    }\n\n    getTerrainHeight(worldX: number, worldZ: number): number {\n        const raycaster = new Raycaster(new Vector3(Number(worldX), 3 * TILESIZE, Number(worldZ)), new Vector3(0, -1, 0))\n        const intersect = raycaster.intersectObject(this.terrain.floorGroup, true)\n        if (intersect.length > 0) {\n            return intersect[0].point.y\n        } else {\n            console.warn('could not determine terrain height for ' + worldX + '/' + worldZ)\n            return 0\n        }\n    }\n\n}\n","import { createContext, createDummyImgData, getPixel, setPixel } from './ImageHelper'\n\nexport class BitmapFont {\n\n    charHeight: number\n    letters: ImageData[] = []\n\n    constructor(fontImageData: ImageData, cols = 10, rows = 19) { // font images always consist of 10 columns and 19 rows with last row empty\n        // actually chars are font dependent and have to be externalized in future\n        // maybe CP850 was used... not sure, doesn't fit...\n        const chars = [' ', '!', '\"', '#', '$', '%', '⌵', '`', '(', ')',\n            '*', '+', ',', '-', '.', '/', '0', '1', '2', '3',\n            '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',\n            '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n            'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n            'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[',\n            '\\\\', ']', '^', '_', '\\'', 'a', 'b', 'c', 'd', 'e',\n            'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\n            'z', 'Ä', 'Å', 'Á', 'À', 'Â', 'Ã', 'Ą', 'ä', 'å',\n            'á', 'à', 'â', 'ã', 'ą', 'Ë', 'E̊', 'É', 'È', 'É',\n            'Ę', 'ë', 'e̊', 'é', 'è', 'e̊', 'ę̊', '', '', '',\n            '', '', '', '', '', 'Ö', '', '', '', '',\n            'ö', '', '', '', '', 'Ü', '', '', '', 'ü',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', 'ß', '', '', '', 'Ñ', '', 'ñ',\n            '',\n        ] // XXX complete this character list\n\n        const maxCharWidth = fontImageData.width / cols\n        this.charHeight = fontImageData.height / rows\n\n        function getActualCharacterWidth(imgData) {\n            for (let y = 0; y < imgData.height / rows; y++) { // find non-empty row first\n                let rowPixelIndex = y * 4 * imgData.width\n                if (imgData.data[rowPixelIndex] !== 255 && imgData.data[rowPixelIndex + 2] !== 255) { // red/blue pixels indicate end of character\n                    for (let x = 0; x < maxCharWidth; x++) {\n                        let colPixelIndex = x * 4\n                        if (imgData.data[colPixelIndex] === 255 || imgData.data[colPixelIndex + 2] === 255) { // red/blue pixels indicate end of character\n                            return x\n                        }\n                    }\n                    return maxCharWidth\n                }\n            }\n            return 0\n        }\n\n        for (let i = 0; i < chars.length; i++) {\n            let imgData = this.extractData(fontImageData, (i % 10) * maxCharWidth, Math.floor(i / 10) * this.charHeight, maxCharWidth, this.charHeight)\n            let actualWidth = getActualCharacterWidth(imgData)\n            if (actualWidth > 0) {\n                imgData = this.extractData(imgData, 0, 0, actualWidth, this.charHeight)\n            } else {\n                imgData = createDummyImgData(maxCharWidth, this.charHeight)\n            }\n            this.letters[chars[i]] = imgData\n        }\n    }\n\n    extractData(imgData, startX, startY, width, height): ImageData {\n        const alpha = getPixel(imgData, startX + width - 1, startY + height - 1)\n        const result = new ImageData(width, height)\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const p = getPixel(imgData, startX + x, startY + y)\n                if (p.r === alpha.r && p.g === alpha.g && p.b === alpha.b) p.a = 0 // apply alpha channel\n                setPixel(result, x, y, p.r, p.g, p.b, p.a)\n            }\n        }\n        return result\n    }\n\n    createTextImage(text: string, maxWidth?: number, autoCenter: boolean = true): HTMLCanvasElement {\n        if (text === undefined || text === null || text.length < 1) {\n            // empty text requested, context with width 0 is not allowed, but 1 with alpha is close enough\n            return createContext(1, 1).canvas\n        }\n        text = text.replace(/_/g, ' ')\n        const rows = this.determineRows(text, maxWidth)\n        const width = Math.max(...(rows.map(r => r.width)))\n        const result = new ImageData(width, this.charHeight * rows.length)\n        rows.forEach((row, index) => {\n            const rowX = autoCenter ? Math.round((width - row.width) / 2) : 0\n            const rowY = index * this.charHeight\n            let letterX = 0\n            for (let c = 0; c < row.text.length; c++) {\n                const letterImgData = this.letters[row.text.charAt(c)]\n                if (letterImgData) {\n                    for (let x = letterX; x < letterX + letterImgData.width; x++) {\n                        for (let y = 0; y < letterImgData.height; y++) {\n                            const p = getPixel(letterImgData, x - letterX, y)\n                            setPixel(result, rowX + x, rowY + y, p.r, p.g, p.b, p.a)\n                        }\n                    }\n                    letterX += letterImgData.width\n                } // missing letter issue already reported above\n            }\n        })\n        const img: CanvasRenderingContext2D = createContext(result.width, result.height)\n        img.putImageData(result, 0, 0)\n        return img.canvas\n    }\n\n    private determineRows(text: string, maxWidth?: number): { text: string, width: number }[] {\n        const spaceWidth = this.letters[' '].width\n        const rows: { text: string, width: number }[] = []\n        let rowText = ''\n        let rowWidth = 0\n        text.split(' ').map(word => {\n            let wordWidth = 0\n            for (let c = 0; c < word.length; c++) {\n                const letter = word.charAt(c)\n                const letterImg = this.letters[letter]\n                if (letterImg) {\n                    wordWidth += letterImg.width\n                } else {\n                    console.error('Letter \\'' + letter + '\\' not found in charset! Ignoring it')\n                }\n            }\n            if (rowWidth > 0) {\n                if (!maxWidth || rowWidth + spaceWidth + wordWidth < maxWidth) {\n                    rowText += ' ' + word\n                    rowWidth += spaceWidth + wordWidth\n                } else {\n                    rows.push({text: rowText, width: rowWidth})\n                    rowText = word\n                    rowWidth = wordWidth\n                }\n            } else {\n                rowText += word\n                rowWidth += wordWidth\n            }\n            return wordWidth\n        })\n        if (rowWidth > 0) rows.push({text: rowText, width: rowWidth})\n        return rows\n    }\n}\n","import { GameStatsCfg } from '../cfg/GameStatsCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { createContext, createDummyImgData } from '../core/ImageHelper'\nimport { iGet } from '../core/Util'\n\nexport class ResourceCache {\n\n    static configuration: any = {}\n    static resourceByName: Map<string, any> = new Map()\n    static fontCache: Map<string, BitmapFont> = new Map()\n    static stats: GameStatsCfg\n\n    static cfg(...keys: string[]): any {\n        return iGet(this.configuration, ...keys)\n    }\n\n    static getResource(resourceName: string): any {\n        const lName = resourceName?.toString()?.toLowerCase() || null\n        return this.resourceByName.get(lName) || null\n    }\n\n    static getImageData(imageName: string): ImageData {\n        if (!imageName) throw 'imageName must not be undefined, null or empty - was ' + imageName\n        return this.resourceByName.getOrUpdate((imageName.toLowerCase()), () => {\n            console.error('Image \\'' + imageName + '\\' unknown! Using placeholder image instead')\n            return createDummyImgData(64, 64)\n        })\n    }\n\n    static getImage(imageName: string): HTMLCanvasElement {\n        const imgData = this.getImageData(imageName)\n        const context: CanvasRenderingContext2D = createContext(imgData.width, imgData.height)\n        context.putImageData(imgData, 0, 0)\n        return context.canvas\n    }\n\n    static getImageOrNull(imageName: string): HTMLCanvasElement | null {\n        return imageName ? this.getImage(imageName) : null\n    }\n\n    static getBitmapFont(name: string): BitmapFont {\n        return this.fontCache.getOrUpdate(name, () => {\n            const fontImageData = this.getResource(name)\n            if (!fontImageData) throw 'Could not load font image data for: ' + name\n            return new BitmapFont(fontImageData)\n        })\n    }\n\n    static getDefaultFont() {\n        return this.getBitmapFont('Interface/Fonts/Font5_Hi.bmp')\n    }\n\n}\n","export class InitLoadingMessage {\n\n    wad0FileUrl: string\n    wad1FileUrl: string\n\n    constructor(wad0FileUrl: string, wad1FileUrl: string) {\n        this.wad0FileUrl = wad0FileUrl\n        this.wad1FileUrl = wad1FileUrl\n    }\n\n}\n","import { RepeatWrapping, Texture } from 'three'\nimport { createDummyImgData } from '../core/ImageHelper'\nimport { getFilename } from '../core/Util'\nimport { AnimationEntityType } from '../game/model/anim/AnimationEntityType'\nimport { AnimEntityLoader } from './AnimEntityLoader'\nimport { ResourceCache } from './ResourceCache'\nimport { InitLoadingMessage } from './wadworker/InitLoadingMessage'\nimport { WadWorkerMessage } from './wadworker/WadWorkerMessage'\nimport { WorkerMessageType } from './wadworker/WorkerMessageType'\n\nexport class ResourceManager extends ResourceCache { // TODO rename to WadResourceManager\n\n    static worker: Worker = new Worker(new URL('./wadworker/WadWorker', import.meta.url))\n\n    static startLoadingFromCache() {\n        return this.startLoading(null)\n    }\n\n    static startLoadingFromUrl(wad0Url: string, wad1Url: string) {\n        return this.startLoading(new InitLoadingMessage(wad0Url, wad1Url))\n    }\n\n    private static startLoading(msg: InitLoadingMessage) {\n        this.worker.onmessage = (event) => {\n            const msg: WadWorkerMessage = event.data\n            if (msg.type === WorkerMessageType.ASSET) {\n                msg.assetNames.forEach((assetName) => this.resourceByName.set(assetName.toLowerCase(), msg.assetObj))\n                this.onAssetLoaded()\n            } else if (msg.type === WorkerMessageType.MSG) {\n                this.onMessage(msg.text)\n            } else if (msg.type === WorkerMessageType.CFG) {\n                this.configuration = msg.cfg\n                this.stats = msg.stats\n                this.onInitialLoad(msg.totalResources)\n            } else if (msg.type === WorkerMessageType.CACHE_MISS) {\n                this.onCacheMissed()\n            } else if (msg.type === WorkerMessageType.DONE) {\n                console.log('Loading of about ' + msg.totalResources + ' assets complete! Total load time: ' + msg.loadingTimeSeconds + ' seconds.')\n                this.onLoadDone()\n            }\n        }\n        this.worker.postMessage(msg)\n    }\n\n    static onMessage: (msg: string) => any = (msg: string) => {\n        console.log(msg)\n    }\n\n    static onCacheMissed: () => any = () => {\n        console.log('Worker missed cache')\n    }\n\n    static onInitialLoad: (totalResources: number) => any = () => {\n        console.log('Initial loading done.')\n    }\n\n    static onAssetLoaded: () => any = () => {\n    }\n\n    static onLoadDone: () => any = () => {\n    }\n\n    static filterTextureSequenceNames(basename: string): string[] {\n        const lBasename = basename.toLowerCase()\n        const result = []\n        this.resourceByName.forEach((res, name) => {\n            if (name.startsWith(lBasename)) result.push(name)\n        })\n        if (result.length > 0) {\n            return result\n        } else if (!lBasename.startsWith('world/shared/')) {\n            return this.filterTextureSequenceNames('world/shared/' + getFilename(basename))\n        } else {\n            console.warn('Texture sequence not found: ' + basename)\n            return null\n        }\n    }\n\n    static getTexture(textureName): Texture {\n        if (!textureName || textureName.length === 0) {\n            throw 'textureName must not be undefined, null or empty - was ' + textureName\n        }\n        const lTextureName = textureName.toLowerCase()\n        const imgData = this.resourceByName.getOrUpdate(lTextureName, () => {\n            const lSharedTextureName = 'world/shared/' + getFilename(lTextureName)\n            return this.resourceByName.getOrUpdate(lSharedTextureName, () => {\n                console.warn('Texture \\'' + textureName + '\\' (' + lTextureName + ', ' + lSharedTextureName + ') unknown! Using placeholder texture instead')\n                return createDummyImgData(64, 64)\n            })\n        })\n        const texture = new Texture(imgData, Texture.DEFAULT_MAPPING, RepeatWrapping, RepeatWrapping)\n        texture.needsUpdate = true\n        return texture\n    }\n\n    static getAnimationEntityType(aeFilename: string): AnimationEntityType {\n        let cfgRoot = this.getResource(aeFilename)\n        if (!cfgRoot) throw 'Could not get animation entity type for: ' + aeFilename\n        return AnimEntityLoader.loadModels(aeFilename, cfgRoot)\n    }\n\n}\n","import { getPath, iGet } from '../core/Util'\nimport { AnimationEntityType } from '../game/model/anim/AnimationEntityType'\nimport { AnimClip } from '../game/model/anim/AnimClip'\nimport { SceneManager } from '../game/SceneManager'\nimport { LWOLoader } from './LWOLoader'\nimport { LWSCLoader } from './LWSCLoader'\nimport { ResourceManager } from './ResourceManager'\n\nexport class AnimEntityLoader {\n\n    static loadModels(url, root): AnimationEntityType {\n        const path = getPath(url)\n\n        const entityType = new AnimationEntityType()\n\n        entityType.carryNullName = iGet(root, 'CarryNullName')\n        entityType.depositNullName = iGet(root, 'DepositNullName')\n        entityType.toolNullName = iGet(root, 'ToolNullName')\n\n        // TODO load other poly quality models (if available)\n        // let mediumPoly = iGet(root, 'MediumPoly');\n        // if (mediumPoly) {\n        //     Object.keys(mediumPoly).forEach((key) => {\n        //         const polyname = mediumPoly[key];\n        //         const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //         const polyfile = path + polyname + '.lwo';\n        //         console.log('polyfile');\n        //         console.log(polyfile);\n        //         // new LWOLoader().load(polyfile, (model) => {\n        //         //     mediumPoly[polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //         // }, undefined, () => {\n        //         //     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //         // });\n        //     });\n        //     Object.keys(mediumPoly).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete mediumPoly[polykey]);\n        // }\n\n        const highPoly = iGet(root, 'highpoly')\n        if (highPoly) {\n            entityType.highPoly = {}\n            Object.keys(highPoly).forEach((key) => {\n                const polyname = highPoly[key] + '.lwo'\n                const polykey = key.startsWith('!') ? key.slice(1) : key\n                const lwoBuffer = ResourceManager.getResource(path + polyname)\n                entityType.highPoly[polykey] = SceneManager.registerMesh(new LWOLoader(path).parse(lwoBuffer))\n            })\n        }\n\n        // let fPoly = (root)['fppoly'];\n        // if (fPoly) {\n        //     Object.keys(fPoly).forEach((camera) => {\n        //         Object.keys(fPoly[camera]).forEach((key) => {\n        //             const polyname = fPoly[camera][key];\n        //             const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //             if (polyname !== 'null') {\n        //                 const polyfile = path + polyname + '.lwo';\n        //                 new LWOLoader().load(polyfile, (model) => {\n        //                     fPoly[camera][polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //                 }, undefined, () => {\n        //                     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //                 });\n        //             } else {\n        //                 fPoly[camera][key] = {polyname: polyname, polyfile: null, model: new Group()};\n        //             }\n        //         });\n        //         Object.keys(fPoly[camera]).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete fPoly[polykey][camera]);\n        //     });\n        // }\n\n        const activities = iGet(root, 'Activities')\n        if (activities) {\n            Object.keys(activities).forEach((activity) => {\n                try {\n                    let keyname = iGet(activities, activity)\n                    const act: { file: string, transcoef: number, lwsfile: boolean, animation: AnimClip } = iGet(root, keyname)\n                    const file = iGet(act, 'FILE')\n                    const isLws = iGet(act, 'LWSFILE') === true\n                    const transcoef = iGet(act, 'TRANSCOEF')\n                    const looping = iGet(act, 'LOOPING') === true\n                    if (isLws) {\n                        const content = ResourceManager.getResource(path + file + '.lws')\n                        act.animation = new LWSCLoader(path).parse(content)\n                        act.animation.looping = looping\n                        act.animation.transcoef = transcoef ? Number(transcoef) : 1\n                        entityType.activities.set(activity.toLowerCase(), act)\n                    } else {\n                        console.error('Found activity which is not an LWS file')\n                    }\n                } catch (e) {\n                    console.error(e)\n                    console.log(root)\n                    console.log(activities)\n                    console.log(activity)\n                }\n            })\n        }\n\n        return entityType\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class BarrierActivity extends AnimEntityActivity {\n\n    static Short = new AnimEntityActivity('Short')\n    static Expand = new AnimEntityActivity('Expand')\n    static Long = new AnimEntityActivity('Long')\n    static Teleport = new AnimEntityActivity('Teleport')\n\n}\n","import { RaiderActivity } from '../../activities/RaiderActivity'\nimport { MaterialEntity } from '../../collect/MaterialEntity'\nimport { Surface } from '../../map/Surface'\nimport { SurfaceType } from '../../map/SurfaceType'\nimport { PathTarget } from '../../PathTarget'\nimport { RaiderTool } from '../../raider/RaiderTool'\nimport { PublicJob } from '../Job'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class CompletePowerPathJob extends PublicJob {\n\n    surface: Surface\n    placedItems: MaterialEntity[]\n    workplaces: PathTarget[]\n\n    constructor(surface: Surface, placedItems: MaterialEntity[]) {\n        super(JobType.COMPLETE_POWER_PATH)\n        this.surface = surface\n        this.placedItems = placedItems\n        this.workplaces = [new PathTarget(surface.getRandomPosition())]\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.placedItems.forEach((placed) => placed.removeFromScene())\n        this.surface.surfaceType = SurfaceType.POWER_PATH\n        this.surface.updateTexture()\n        this.surface.neighbors.forEach((s) => s.updateTexture())\n    }\n\n    getRequiredTool(): RaiderTool {\n        return RaiderTool.SHOVEL\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityConstruction\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.workplaces\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Clear\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { BarrierActivity } from '../activities/BarrierActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { Barrier } from '../collect/Barrier'\nimport { Crystal } from '../collect/Crystal'\nimport { MaterialEntity } from '../collect/MaterialEntity'\nimport { Ore } from '../collect/Ore'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CompletePowerPathJob } from '../job/surface/CompletePowerPathJob'\nimport { Surface } from '../map/Surface'\nimport { BuildingEntity } from './BuildingEntity'\n\nexport class BuildingSite {\n\n    primarySurface: Surface = null\n    secondarySurface: Surface = null\n    building: BuildingEntity\n    heading: number = 0\n    neededByType: Map<EntityType, number> = new Map()\n    assignedByType: Map<EntityType, MaterialEntity[]> = new Map()\n    onSiteByType: Map<EntityType, MaterialEntity[]> = new Map()\n    complete: boolean = false\n\n    constructor(primarySurface: Surface, secondarySurface: Surface = null, building: BuildingEntity = null) {\n        this.primarySurface = primarySurface\n        this.secondarySurface = secondarySurface\n        this.building = building\n    }\n\n    getRandomDropPosition(): Vector2 {\n        return this.primarySurface.getRandomPosition()\n    }\n\n    needs(EntityType: EntityType): boolean {\n        const needed = this.neededByType.getOrUpdate(EntityType, () => 0)\n        const assigned = this.assignedByType.getOrUpdate(EntityType, () => []).length\n        return needed > assigned\n    }\n\n    assign(item: MaterialEntity) {\n        this.assignedByType.getOrUpdate(item.entityType, () => []).push(item)\n    }\n\n    unAssign(item: MaterialEntity) {\n        this.assignedByType.getOrUpdate(item.entityType, () => []).remove(item)\n    }\n\n    addItem(item: MaterialEntity) {\n        const needed = this.neededByType.getOrUpdate(item.entityType, () => 0)\n        if (this.onSiteByType.getOrUpdate(item.entityType, () => []).length < needed) {\n            item.onAddToSite()\n            this.onSiteByType.getOrUpdate(item.entityType, () => []).push(item)\n            this.checkComplete()\n        } else {\n            item.resetTarget()\n        }\n    }\n\n    checkComplete() {\n        if (this.complete) return\n        this.complete = true\n        this.neededByType.forEach((needed, neededType) => {\n            this.complete = this.complete && this.onSiteByType.getOrUpdate(neededType, () => []).length >= needed\n        })\n        if (!this.complete) return\n        GameState.buildingSites.remove(this)\n        if (!this.building) {\n            const items = []\n            this.onSiteByType.forEach((itemsOnSite) => items.push(...itemsOnSite))\n            EventBus.publishEvent(new JobCreateEvent(new CompletePowerPathJob(this.primarySurface, items)))\n        } else {\n            this.onSiteByType.getOrUpdate(EntityType.BARRIER, () => []).forEach((item: Barrier) => {\n                item.changeActivity(BarrierActivity.Teleport, () => item.removeFromScene())\n            })\n            this.onSiteByType.getOrUpdate(EntityType.CRYSTAL, () => []).forEach((item: Crystal) => {\n                item.removeFromScene()\n            })\n            this.onSiteByType.getOrUpdate(EntityType.ORE, () => []).forEach((item: Ore) => {\n                item.removeFromScene()\n            })\n            const world = this.primarySurface.getCenterWorld2D()\n            this.building.placeDown(world, -this.heading + Math.PI / 2, false)\n        }\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n}\n","import { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { BarrierActivity } from '../activities/BarrierActivity'\nimport { BuildingSite } from '../building/BuildingSite'\nimport { EntityType } from '../EntityType'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { BarrierLocation } from './BarrierLocation'\nimport { CarryPathTarget, SiteCarryPathTarget } from './CarryPathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class Barrier extends MaterialEntity {\n\n    heading: number\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager, location: BarrierLocation, site: BuildingSite) {\n        super(worldMgr, sceneMgr, EntityType.BARRIER, 'MiscAnims/Barrier/Barrier.ae')\n        this.heading = location.heading\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityConstruction\n        this.changeActivity()\n        this.targets = [new SiteCarryPathTarget(location.location, site)]\n    }\n\n    protected updateTargets(): CarryPathTarget[] {\n        return this.targets // TODO check target site still requires barrier, otherwise choose toolstation\n    }\n\n    getDefaultActivity(): BarrierActivity {\n        return BarrierActivity.Short\n    }\n\n    onAddToSite() {\n        super.onAddToSite()\n        this.group.rotation.y = this.heading\n        this.changeActivity(BarrierActivity.Expand, () => this.changeActivity(BarrierActivity.Long))\n    }\n\n}\n","import { ElectricFence } from '../collect/ElectricFence'\nimport { CarryJob } from './CarryJob'\n\nexport class CarryFenceJob extends CarryJob<ElectricFence> {\n\n    onJobComplete() {\n        super.onJobComplete()\n        if (this.item.targetSurface.canPlaceFence()) {\n            this.item.addToScene(null, null)\n            this.item.targetSurface.fence = this.item\n        } // TODO else dispose item entity with mesh\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { CarryFenceJob } from '../job/CarryFenceJob'\nimport { PriorityIdentifier } from '../job/PriorityIdentifier'\nimport { Surface } from '../map/Surface'\nimport { BuildingCarryPathTarget, CarryPathTarget } from './CarryPathTarget'\nimport { MaterialEntity } from './MaterialEntity'\n\nexport class ElectricFence extends MaterialEntity {\n\n    targetSurface: Surface\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager, surface: Surface) {\n        super(worldMgr, sceneMgr, EntityType.ELECTRIC_FENCE)\n        const resource = ResourceManager.getResource('Buildings/E-Fence/E-Fence4.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('Buildings/E-Fence/').parse(resource))\n        this.group.add(mesh)\n        this.targetSurface = surface\n        this.priorityIdentifier = PriorityIdentifier.aiPriorityConstruction\n    }\n\n    protected updateTargets(): CarryPathTarget[] {\n        if (this.targets.length < 1) {\n            if (this.targetSurface.canPlaceFence()) {\n                this.targets = [new CarryPathTarget(this.targetSurface.getCenterWorld2D())]\n            } else {\n                this.targets = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                    .map((b) => new BuildingCarryPathTarget(b.getDropPosition2D(), b))\n            }\n        } else if (!this.targetSurface.canPlaceFence() && !(this.targets[0] as BuildingCarryPathTarget).building) {\n            this.targets = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                .map((b) => new BuildingCarryPathTarget(b.getDropPosition2D(), b))\n        }\n        return this.targets\n    }\n\n    createCarryJob(): CarryFenceJob {\n        return new CarryFenceJob(this)\n    }\n\n}\n","import { Matrix4, Vector2, Vector3 } from 'three'\nimport { BuildingEntityStats } from '../../../cfg/BuildingEntityStats'\nimport { EventBus } from '../../../event/EventBus'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { BuildingsChangedEvent, SelectionChanged } from '../../../event/LocalEvents'\nimport { MaterialAmountChanged } from '../../../event/WorldEvents'\nimport { TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { BuildingActivity } from '../activities/BuildingActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { AnimEntity } from '../anim/AnimEntity'\nimport { Barrier } from '../collect/Barrier'\nimport { BarrierLocation } from '../collect/BarrierLocation'\nimport { Crystal } from '../collect/Crystal'\nimport { ElectricFence } from '../collect/ElectricFence'\nimport { Ore } from '../collect/Ore'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { Surface } from '../map/Surface'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { PathTarget } from '../PathTarget'\nimport { Selectable, SelectionType } from '../Selectable'\nimport { BuildingSite } from './BuildingSite'\n\nexport abstract class BuildingEntity extends AnimEntity implements Selectable {\n\n    blocksPathSurface: boolean = true\n    secondaryBuildingPart: Vector2 = null\n    primaryPowerPath: Vector2 = new Vector2(0, 1)\n    secondaryPowerPath: Vector2 = null\n    waterPathSurface: Vector2 = null\n\n    selected: boolean\n    powerSwitch: boolean = true\n    spawning: boolean = false\n    primarySurface: Surface = null\n    secondarySurface: Surface = null\n    primaryPathSurface: Surface = null\n    secondaryPathSurface: Surface = null\n    upgradeCostOre: number = 0\n    upgradeCostBrick: number = 0\n    crystalsInUse: number = 0\n    inBeam: boolean = false\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, entityType: EntityType, aeFilename: string) {\n        super(worldMgr, sceneMgr, EntitySuperType.BUILDING, entityType, aeFilename)\n        this.group.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        this.group.userData = {'selectable': this}\n        this.upgradeCostOre = ResourceManager.cfg('Main', 'BuildingUpgradeCostOre')\n        this.upgradeCostBrick = ResourceManager.cfg('Main', 'BuildingUpgradeCostStuds')\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, () => {\n            if (this.powerSwitch) this.turnOnPower()\n        })\n    }\n\n    abstract get stats(): BuildingEntityStats\n\n    getSelectionType(): SelectionType {\n        return SelectionType.BUILDING\n    }\n\n    select(): boolean {\n        if (this.selected || this.inBeam) return false\n        this.selectionFrame.visible = true\n        this.selected = true\n        return true\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    getPickSphereCenter(): Vector3 {\n        return new Vector3(0, this.stats.PickSphere / 4, 0)\n    }\n\n    getDropPosition2D(): Vector2 {\n        if (this.getToolJoint) {\n            const worldPos = new Vector3()\n            this.getToolJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else if (this.depositJoint) {\n            const worldPos = new Vector3()\n            this.depositJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else {\n            return this.getPosition2D()\n        }\n    }\n\n    getDropPosition(): Vector3 {\n        return this.sceneMgr.getFloorPosition(this.getDropPosition2D())\n    }\n\n    isUsable(): boolean {\n        return !this.inBeam && this.powerSwitch && (this.isPowered() || this.stats.PowerBuilding)\n    }\n\n    isPowered(): boolean {\n        return this.stats.SelfPowered || this.crystalsInUse > 0\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.buildingsUndiscovered.remove(this)\n        GameState.buildings.push(this)\n        EventBus.publishEvent(new BuildingsChangedEvent())\n    }\n\n    hasMaxLevel(): boolean {\n        return this.level >= this.stats.Levels - 1\n    }\n\n    upgrade() {\n        if (!this.canUpgrade()) return\n        if (GameState.numBrick >= this.upgradeCostBrick) {\n            GameState.numBrick -= this.upgradeCostBrick\n        } else {\n            GameState.numOre -= this.upgradeCostOre\n        }\n        EventBus.publishEvent(new MaterialAmountChanged())\n        this.level++\n        EventBus.publishEvent(new SelectionChanged())\n        EventBus.publishEvent(new BuildingsChangedEvent())\n        // TODO add sparkly upgrade animation\n    }\n\n    getDefaultActivity(): BuildingActivity {\n        return !this.isPowered() ? BuildingActivity.Unpowered : AnimEntityActivity.Stand\n    }\n\n    beamUp() {\n        GameState.usedCrystals -= this.crystalsInUse\n        this.crystalsInUse = 0\n        this.inBeam = true\n        for (let c = 0; c < this.stats.CostOre; c++) {\n            this.worldMgr.placeMaterial(new Ore(this.worldMgr, this.sceneMgr), this.primarySurface.getRandomPosition())\n        }\n        for (let c = 0; c < this.stats.CostCrystal; c++) {\n            this.worldMgr.placeMaterial(new Crystal(this.worldMgr, this.sceneMgr), this.primarySurface.getRandomPosition())\n        }\n        this.surfaces.forEach((s) => {\n            s.surfaceType = SurfaceType.GROUND\n            s.setBuilding(null)\n            s.updateTexture()\n            s.neighbors.forEach((n) => n.updateTexture())\n        })\n        super.beamUp()\n        EventBus.publishEvent(new BuildingsChangedEvent())\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        GameState.buildings.remove(this)\n    }\n\n    canUpgrade() {\n        return !this.hasMaxLevel() && (GameState.numOre >= this.upgradeCostOre || GameState.numBrick >= this.upgradeCostBrick)\n    }\n\n    spawnMaterials(type: EntityType, quantity: number) {\n        const material = []\n        if (type === EntityType.CRYSTAL) {\n            while (GameState.numCrystal > 0 && material.length < quantity) {\n                GameState.numCrystal--\n                material.push(new Crystal(this.worldMgr, this.sceneMgr))\n            }\n        } else if (type === EntityType.ORE) {\n            while (GameState.numOre > 0 && material.length < quantity) {\n                GameState.numOre--\n                material.push(new Ore(this.worldMgr, this.sceneMgr))\n            }\n        } else {\n            console.error('Material drop not implemented for: ' + type)\n        }\n        if (material.length > 0) EventBus.publishEvent(new MaterialAmountChanged())\n        material.forEach((m) => this.worldMgr.placeMaterial(m, this.getDropPosition2D()))\n    }\n\n    spawnBarriers(barrierLocations: BarrierLocation[], site: BuildingSite) {\n        barrierLocations.map((l) => new Barrier(this.worldMgr, this.sceneMgr, l, site)).forEach((b) => this.worldMgr.placeMaterial(b, this.getDropPosition2D()))\n    }\n\n    spawnFence(targetSurface: Surface) {\n        this.worldMgr.placeMaterial(new ElectricFence(this.worldMgr, this.sceneMgr, targetSurface), this.getDropPosition2D())\n    }\n\n    turnOnPower() {\n        if (this.crystalsInUse > 0 || GameState.usedCrystals >= GameState.numCrystal || (this.entityType !== EntityType.POWER_STATION && !this.surfaces.some((s) => s.neighbors.some((n) => n.hasPower)))) return\n        this.crystalsInUse = 1\n        GameState.usedCrystals += this.crystalsInUse\n        this.surfaces.forEach((s) => s.setHasPower(true, true))\n        this.changeActivity()\n        EventBus.publishEvent(new BuildingsChangedEvent())\n    }\n\n    turnOffPower() {\n        if (this.crystalsInUse < 1) return\n        GameState.usedCrystals -= this.crystalsInUse\n        this.crystalsInUse = 0\n        this.surfaces.forEach((s) => s.setHasPower(false, false))\n        this.changeActivity()\n        EventBus.publishEvent(new BuildingsChangedEvent())\n    }\n\n    get surfaces(): Surface[] {\n        const result = []\n        if (this.primarySurface) result.push(this.primarySurface)\n        if (this.secondarySurface) result.push(this.secondarySurface)\n        if (this.primaryPathSurface) result.push(this.primaryPathSurface)\n        if (this.secondaryPathSurface) result.push(this.secondaryPathSurface)\n        return result\n    }\n\n    placeDown(worldPosition: Vector2, radHeading: number, disableTeleportIn: boolean) {\n        const primaryPathSurface = this.sceneMgr.terrain.getSurfaceFromWorld2D(worldPosition)\n        primaryPathSurface.setBuilding(this)\n        primaryPathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n        primaryPathSurface.updateTexture()\n        primaryPathSurface.neighbors.forEach((n) => n.updateTexture())\n        this.primarySurface = primaryPathSurface\n        if (this.secondaryBuildingPart) {\n            const secondaryOffset = new Vector2(TILESIZE * this.secondaryBuildingPart.x, TILESIZE * this.secondaryBuildingPart.y)\n                .rotateAround(new Vector2(0, 0), -radHeading).add(worldPosition)\n            const secondarySurface = this.sceneMgr.terrain.getSurfaceFromWorld2D(secondaryOffset)\n            secondarySurface.setBuilding(this)\n            secondarySurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n            secondarySurface.updateTexture()\n            secondarySurface.neighbors.forEach((n) => n.updateTexture())\n            this.secondarySurface = secondarySurface\n        }\n        if (this.primaryPowerPath) {\n            const pathOffset = new Vector2(this.primaryPowerPath.x, this.primaryPowerPath.y).multiplyScalar(TILESIZE)\n                .rotateAround(new Vector2(0, 0), -radHeading).add(worldPosition)\n            const pathSurface = this.sceneMgr.terrain.getSurfaceFromWorld2D(pathOffset)\n            if (this.entityType === EntityType.GEODOME) pathSurface.building = this\n            pathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n            pathSurface.updateTexture()\n            pathSurface.neighbors.forEach((n) => n.updateTexture())\n            this.primaryPathSurface = pathSurface\n        }\n        this.addToScene(worldPosition, radHeading)\n        this.createPickSphere()\n        if (this.group.visible) {\n            GameState.buildings.push(this)\n        } else {\n            GameState.buildingsUndiscovered.push(this)\n        }\n        if (this.group.visible && !disableTeleportIn) {\n            this.inBeam = true\n            this.changeActivity(BuildingActivity.Teleport, () => {\n                this.inBeam = false\n                this.onPlaceDown()\n            })\n        } else {\n            this.onPlaceDown()\n        }\n        this.sceneMgr.terrain.resetGraphWalk()\n    }\n\n    private onPlaceDown() {\n        this.changeActivity()\n        this.turnOnPower()\n        EventBus.publishEvent(new BuildingsChangedEvent())\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Place\n    }\n\n    getTrainingTargets() {\n        return [new Vector2(-1, 0), new Vector2(0, 1), new Vector2(1, 0), new Vector2(0, -1)]\n            .map((v) => new PathTarget(v.multiplyScalar(TILESIZE / 2).add(this.primarySurface.getCenterWorld2D())))\n    }\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Barracks extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.BARRACKS, 'Buildings/Barracks/Barracks.ae')\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Barracks\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Docks extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.DOCKS, 'Buildings/Docks/Docks.ae')\n        this.waterPathSurface = new Vector2(0, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Docks\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Geodome extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.GEODOME, 'Buildings/Geo-dome/Geo-dome.ae')\n        this.primaryPowerPath = null\n        this.secondaryBuildingPart = new Vector2(0, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Geodome\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { BuildingActivity } from '../../activities/BuildingActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class GunStation extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.GUNSTATION, 'Buildings/gunstation/gunstation.ae')\n        this.primaryPowerPath = null\n    }\n\n    getDefaultActivity(): BuildingActivity {\n        return BuildingActivity.Stand\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.GunStation\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class OreRefinery extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.ORE_REFINERY, 'Buildings/OreRefinery/OreRefinery.ae')\n        this.primaryPowerPath = new Vector2(0, 2)\n        this.secondaryBuildingPart = new Vector2(0, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.OreRefinery\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Deposit\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { RaiderActivity } from '../../activities/RaiderActivity'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class PowerStation extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.POWER_STATION, 'Buildings/Powerstation/Powerstation.ae')\n        this.secondaryBuildingPart = new Vector2(-1, 0)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Powerstation\n    }\n\n    getDropAction(): RaiderActivity {\n        return RaiderActivity.Deposit\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class TeleportBig extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.TELEPORT_BIG, 'Buildings/BIGTeleport/BIGTeleport.ae')\n        this.secondaryBuildingPart = new Vector2(1, 0)\n        this.secondaryPowerPath = new Vector2(1, 1)\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.TeleportBIG\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class TeleportPad extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.TELEPORT_PAD, 'Buildings/Teleports/Teleports.ae')\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.TeleportPad\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Toolstation extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.TOOLSTATION, 'Buildings/Toolstation/Toolstation.ae')\n        this.blocksPathSurface = false\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Toolstation\n    }\n\n}\n","import { BuildingEntityStats } from '../../../../cfg/BuildingEntityStats'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { SceneManager } from '../../../SceneManager'\nimport { WorldManager } from '../../../WorldManager'\nimport { EntityType } from '../../EntityType'\nimport { BuildingEntity } from '../BuildingEntity'\n\nexport class Upgrade extends BuildingEntity {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.UPGRADE, 'Buildings/Upgrade/Upgrade.ae')\n    }\n\n    get stats(): BuildingEntityStats {\n        return ResourceManager.stats.Upgrade\n    }\n\n}\n","import { RaiderActivity } from '../activities/RaiderActivity'\nimport { PathTarget } from '../PathTarget'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class EatJob extends Job {\n\n    constructor() {\n        super(JobType.EAT)\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.fulfiller.map((f) => new PathTarget(f.getPosition2D()))\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        // TODO implement endurance, fill eat level here\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Eat\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\nimport { RaiderTool } from '../raider/RaiderTool'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class GetToolJob extends Job {\n\n    target: PathTarget[]\n    tool: RaiderTool\n\n    constructor(target: Vector2, tool: RaiderTool) {\n        super(JobType.GET_TOOL)\n        this.target = [new PathTarget(target)]\n        this.tool = tool\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.target\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.fulfiller.forEach((f) => f.addTool(this.tool))\n    }\n\n}\n","import { EventBus } from '../../../event/EventBus'\nimport { RaidersChangedEvent } from '../../../event/LocalEvents'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { BuildingEntity } from '../building/BuildingEntity'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { PathTarget } from '../PathTarget'\nimport { RaiderTraining } from '../raider/RaiderTraining'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class TrainJob extends Job {\n\n    building: BuildingEntity\n    workplaces: PathTarget[]\n    training: RaiderTraining\n\n    constructor(building: BuildingEntity, training: RaiderTraining) {\n        super(JobType.TRAIN)\n        this.building = building\n        this.workplaces = building.getTrainingTargets()\n        this.training = training\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.building.isUsable() ? this.workplaces : []\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.fulfiller.forEach((f) => {\n            f.addTraining(this.training)\n            EventBus.publishEvent(new RaidersChangedEvent(this.training))\n        })\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Train\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        return 10000 // XXX adjust training time\n    }\n\n}\n","import { RaiderActivity } from '../activities/RaiderActivity'\nimport { BuildingEntity } from '../building/BuildingEntity'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { PathTarget } from '../PathTarget'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class UpgradeJob extends Job {\n\n    building: BuildingEntity\n    workplaces: PathTarget[]\n\n    constructor(building: BuildingEntity) {\n        super(JobType.TRAIN)\n        this.building = building\n        this.workplaces = building.getTrainingTargets()\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.building.isUsable() ? this.workplaces : []\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.fulfiller.forEach((f) => {\n            if (f.level < f.stats.Levels) f.level++\n        })\n    }\n\n    getWorkActivity(): RaiderActivity {\n        return RaiderActivity.Train\n    }\n\n    getWorkDuration(fulfiller: FulfillerEntity): number {\n        return 30000 // XXX adjust upgrade time\n    }\n\n}\n","import { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { ChangeBuildingPowerState, ChangeRaiderSpawnRequest, SelectBuildMode, SelectedRaiderPickTool, TrainRaider } from '../event/GuiCommand'\nimport { SelectionChanged } from '../event/LocalEvents'\nimport { RequestedRaidersChanged } from '../event/WorldEvents'\nimport { BuildingEntity } from './model/building/BuildingEntity'\nimport { BuildingSite } from './model/building/BuildingSite'\nimport { Barracks } from './model/building/entities/Barracks'\nimport { Docks } from './model/building/entities/Docks'\nimport { Geodome } from './model/building/entities/Geodome'\nimport { GunStation } from './model/building/entities/GunStation'\nimport { OreRefinery } from './model/building/entities/OreRefinery'\nimport { PowerStation } from './model/building/entities/PowerStation'\nimport { TeleportBig } from './model/building/entities/TeleportBig'\nimport { TeleportPad } from './model/building/entities/TeleportPad'\nimport { Toolstation } from './model/building/entities/Toolstation'\nimport { Upgrade } from './model/building/entities/Upgrade'\nimport { EntityType } from './model/EntityType'\nimport { GameState } from './model/GameState'\nimport { EatJob } from './model/job/EatJob'\nimport { GetToolJob } from './model/job/GetToolJob'\nimport { TrainJob } from './model/job/TrainJob'\nimport { UpgradeJob } from './model/job/UpgradeJob'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { PathTarget } from './model/PathTarget'\nimport { RaiderTrainingSites, RaiderTrainingStatsProperty } from './model/raider/RaiderTraining'\nimport { SceneManager } from './SceneManager'\nimport { WorldManager } from './WorldManager'\n\nexport class GuiManager {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        EventBus.registerEventListener(EventKey.COMMAND_PICK_TOOL, (event: SelectedRaiderPickTool) => {\n            GameState.selectedRaiders.forEach((r) => {\n                if (!r.hasTool(event.tool)) {\n                    const pathToToolstation = GameState.getBuildingsByType(EntityType.TOOLSTATION)\n                        .map((b) => r.findPathToTarget(new PathTarget(b.getPosition2D())))\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToToolstation) {\n                        r.setJob(new GetToolJob(pathToToolstation.targetPosition, event.tool)) // TODO use precalculated path to toolstation\n                    }\n                }\n            })\n            EventBus.publishEvent(new SelectionChanged())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CREATE_POWER_PATH, () => {\n            const selectedSurface = GameState.selectedSurface\n            selectedSurface.surfaceType = SurfaceType.POWER_PATH_SITE\n            selectedSurface.updateTexture()\n            GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), EntityType.TOOLSTATION)?.spawnMaterials(EntityType.ORE, 2)\n            const site = new BuildingSite(selectedSurface)\n            site.neededByType.set(EntityType.ORE, 2)\n            GameState.buildingSites.push(site)\n            EventBus.publishEvent(new SelectionChanged())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_MAKE_RUBBLE, () => {\n            GameState.selectedSurface?.makeRubble(2)\n            EventBus.publishEvent(new SelectionChanged())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_PLACE_FENCE, () => {\n            const selectedSurface = GameState.selectedSurface\n            if (selectedSurface) {\n                GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), EntityType.TOOLSTATION)?.spawnFence(selectedSurface)\n            }\n            EventBus.publishEvent(new SelectionChanged())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CHANGE_RAIDER_SPAWN_REQUEST, (event: ChangeRaiderSpawnRequest) => {\n            if (event.increase) {\n                GameState.requestedRaiders++\n            } else {\n                GameState.requestedRaiders--\n            }\n            EventBus.publishEvent(new RequestedRaidersChanged(GameState.requestedRaiders))\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CREATE_DRILL_JOB, () => {\n            GameState.selectedSurface?.createDrillJob()\n            EventBus.publishEvent(new SelectionChanged())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CREATE_REINFORCE_JOB, () => {\n            GameState.selectedSurface?.createReinforceJob()\n            EventBus.publishEvent(new SelectionChanged())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CREATE_DYNAMITE_JOB, () => {\n            GameState.selectedSurface?.createDynamiteJob()\n            EventBus.publishEvent(new SelectionChanged())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CANCEL_SURFACE_JOBS, () => {\n            GameState.selectedSurface?.cancelJobs()\n            EventBus.publishEvent(new SelectionChanged())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CREATE_CLEAR_RUBBLE_JOB, () => {\n            GameState.selectedSurface?.createClearRubbleJob()\n            EventBus.publishEvent(new SelectionChanged())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_UPGRADE_BUILDING, () => {\n            GameState.selectedBuilding?.upgrade()\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_BUILDING_BEAMUP, () => {\n            GameState.selectedBuilding?.beamUp()\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CHANGE_BUILDING_POWER_STATE, (event: ChangeBuildingPowerState) => {\n            if (!event.state) {\n                GameState.selectedBuilding?.turnOffPower()\n            } else {\n                GameState.selectedBuilding?.turnOnPower()\n            }\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_RAIDER_EAT, () => {\n            GameState.selectedRaiders.forEach((r) => !r.isDriving() && r.setJob(new EatJob()))\n            EventBus.publishEvent(new SelectionChanged())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_RAIDER_UPGRADE, () => {\n            GameState.selectedRaiders.forEach((r) => {\n                const closestToolstation = GameState.getClosestBuildingByType(r.getPosition(), EntityType.TOOLSTATION)\n                if (closestToolstation && r.level < r.stats.Levels) {\n                    r.setJob(new UpgradeJob(closestToolstation))\n                }\n            })\n            EventBus.publishEvent(new SelectionChanged())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_RAIDER_BEAMUP, () => {\n            GameState.selectedRaiders.forEach((r) => r.beamUp())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_TRAIN_RAIDER, (event: TrainRaider) => {\n            GameState.getBuildingsByType(RaiderTrainingSites[event.training]).some((b) => {\n                if (b.stats[RaiderTrainingStatsProperty[event.training]][b.level]) {\n                    GameState.selectedRaiders.forEach((r) => !r.hasTraining(event.training) && r.setJob(new TrainJob(b, event.training)))\n                    EventBus.publishEvent(new SelectionChanged())\n                    return true\n                }\n            })\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_RAIDER_DROP, () => {\n            GameState.selectedRaiders?.forEach((r) => r.dropItem())\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_SELECT_BUILD_MODE, (event: SelectBuildMode) => {\n            // TODO dispose build mode selection first\n            GameState.buildModeSelection = GuiManager.buildingFromType(event.entityType, worldMgr, sceneMgr)\n        })\n        EventBus.registerEventListener(EventKey.COMMAND_CANCEL_BUILD_MODE, () => {\n            GameState.buildModeSelection = null // TODO dispose build mode selection first\n        })\n    }\n\n    static buildingFromType(entityType: EntityType, worldMgr: WorldManager, sceneMgr: SceneManager): BuildingEntity {\n        switch (entityType) {\n            case EntityType.TOOLSTATION:\n                return new Toolstation(worldMgr, sceneMgr)\n            case EntityType.TELEPORT_PAD:\n                return new TeleportPad(worldMgr, sceneMgr)\n            case EntityType.DOCKS:\n                return new Docks(worldMgr, sceneMgr)\n            case EntityType.POWER_STATION:\n                return new PowerStation(worldMgr, sceneMgr)\n            case EntityType.BARRACKS:\n                return new Barracks(worldMgr, sceneMgr)\n            case EntityType.UPGRADE:\n                return new Upgrade(worldMgr, sceneMgr)\n            case EntityType.GEODOME:\n                return new Geodome(worldMgr, sceneMgr)\n            case EntityType.ORE_REFINERY:\n                return new OreRefinery(worldMgr, sceneMgr)\n            case EntityType.GUNSTATION:\n                return new GunStation(worldMgr, sceneMgr)\n            case EntityType.TELEPORT_BIG:\n                return new TeleportBig(worldMgr, sceneMgr)\n            default:\n                throw 'Unexpected building type: ' + EntityType[entityType]\n        }\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\n\nexport class MoveJob extends Job {\n\n    target: PathTarget[]\n\n    constructor(target: Vector2) {\n        super(JobType.MOVE)\n        this.target = [new PathTarget(target)]\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.target\n    }\n\n}\n","import { Vector3 } from 'three'\n\nexport class EntityStep {\n\n    vec: Vector3 = null\n    targetReached: boolean = false\n\n    constructor(vec: Vector3) {\n        this.vec = vec\n    }\n\n}\n","import { Vector2, Vector3 } from 'three'\nimport { JOB_ACTION_RANGE } from '../../params'\nimport { SceneManager } from '../SceneManager'\nimport { WorldManager } from '../WorldManager'\nimport { AnimEntityActivity } from './activities/AnimEntityActivity'\nimport { AnimEntity } from './anim/AnimEntity'\nimport { EntityStep } from './EntityStep'\nimport { EntitySuperType, EntityType } from './EntityType'\nimport { TerrainPath } from './map/TerrainPath'\nimport { MoveState } from './MoveState'\nimport { PathTarget } from './PathTarget'\n\nexport abstract class MovableEntity extends AnimEntity {\n\n    currentPath: TerrainPath = null\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, superType: EntitySuperType, entityType: EntityType, aeFilename: string) {\n        super(worldMgr, sceneMgr, superType, entityType, aeFilename)\n    }\n\n    getPosition(): Vector3 {\n        return new Vector3(this.group.position.x, this.group.position.y, this.group.position.z)\n    }\n\n    getPosition2D(): Vector2 {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    getSpeed(): number {\n        return this.animation?.transcoef || 1\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        if (!target?.length) {\n            console.warn('No targets given')\n            debugger\n        }\n        if (!this.currentPath || !target.some((t) => t.targetLocation.equals(this.currentPath.target.targetLocation))) {\n            const paths = target.map((t) => this.findPathToTarget(t)).filter((p) => !!p)\n                .sort((l, r) => l.lengthSq - r.lengthSq)\n            this.currentPath = paths.length > 0 ? paths[0] : null\n            if (!this.currentPath) return MoveState.TARGET_UNREACHABLE\n        }\n        const nextLocation = this.currentPath.firstLocation\n        this.group.lookAt(new Vector3(nextLocation.x, this.group.position.y, nextLocation.y))\n        const step = this.determineStep()\n        if (step.targetReached || this.currentPath.target.isInArea(this.getPosition2D())) {\n            return MoveState.TARGET_REACHED\n        } else {\n            this.group.position.add(step.vec)\n            this.changeActivity(this.getRouteActivity()) // only change when actually moving\n            return MoveState.MOVED\n        }\n    }\n\n    abstract getRouteActivity(): AnimEntityActivity\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return new TerrainPath(target, target.targetLocation)\n    }\n\n    determineStep(): EntityStep {\n        const step = this.getEntityStep(this.currentPath.firstLocation)\n        const stepLengthSq = step.vec.lengthSq()\n        const entitySpeed = this.getSpeed() // TODO use average speed between current and target position\n        if (this.currentPath.locations.length > 1) {\n            if (stepLengthSq < entitySpeed * entitySpeed) {\n                this.currentPath.locations.shift()\n                return this.determineStep()\n            }\n        } else if (stepLengthSq < JOB_ACTION_RANGE * JOB_ACTION_RANGE) {\n            step.targetReached = true\n        }\n        step.vec.setLength(Math.min(entitySpeed, JOB_ACTION_RANGE))\n        return step\n    }\n\n    getEntityStep(target: Vector2): EntityStep {\n        const targetWorld = this.sceneMgr.getFloorPosition(target)\n        targetWorld.y += this.floorOffset\n        return new EntityStep(targetWorld.sub(this.group.position))\n    }\n\n}\n","import { Vector2, Vector3 } from 'three'\nimport { clearIntervalSafe } from '../../core/Util'\nimport { NATIVE_FRAMERATE } from '../../params'\nimport { SceneManager } from '../SceneManager'\nimport { WorldManager } from '../WorldManager'\nimport { MaterialEntity } from './collect/MaterialEntity'\nimport { EntitySuperType, EntityType } from './EntityType'\nimport { Job } from './job/Job'\nimport { MovableEntity } from './MovableEntity'\nimport { PathTarget } from './PathTarget'\nimport { RaiderTool } from './raider/RaiderTool'\nimport { RaiderTraining } from './raider/RaiderTraining'\nimport { Selectable, SelectionType } from './Selectable'\n\nexport abstract class FulfillerEntity extends MovableEntity implements Selectable {\n\n    selectionType: SelectionType\n    selected: boolean\n    workInterval = null\n    job: Job = null\n    followUpJob: Job = null\n    carries: MaterialEntity = null\n    jobWorkplaces: PathTarget[] = []\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, superType: EntitySuperType, entityType: EntityType, aeFilename: string, selectionType: SelectionType) {\n        super(worldMgr, sceneMgr, superType, entityType, aeFilename)\n        this.selectionType = selectionType\n        this.group.userData = {'selectable': this}\n        this.workInterval = setInterval(this.work.bind(this), 1000 / NATIVE_FRAMERATE) // TODO do not use interval, make work trigger itself (with timeout/interval) until work is done\n    }\n\n    resetWorkInterval() {\n        this.workInterval = clearIntervalSafe(this.workInterval)\n    }\n\n    abstract work()\n\n    dropItem() {\n        if (!this.carries) return\n        const position = this.getPosition()\n        if (this.carryJoint) {\n            this.carryJoint.remove(this.carries.group)\n            this.carryJoint.getWorldPosition(position)\n        }\n        this.carries.addToScene(new Vector2(position.x, position.z), null)\n        this.carries = null\n    }\n\n    pickupItem(item: MaterialEntity) {\n        this.carries = item\n        if (this.carryJoint) this.carryJoint.add(this.carries.group)\n        this.carries.group.position.set(0, 0, 0)\n    }\n\n    setJob(job: Job, followUpJob: Job = null) {\n        if (this.job !== job) this.stopJob()\n        this.job = job\n        if (this.job) this.job.assign(this)\n        this.followUpJob = followUpJob\n        if (this.followUpJob) this.followUpJob.assign(this)\n        this.jobWorkplaces = this.job.getWorkplaces()\n    }\n\n    stopJob() {\n        this.dropItem()\n        if (!this.job) return\n        this.job.unassign(this)\n        if (this.followUpJob) this.followUpJob.unassign(this)\n        this.job = null\n        this.followUpJob = null\n        this.jobWorkplaces = []\n        this.changeActivity()\n    }\n\n    abstract hasTool(tool: RaiderTool)\n\n    abstract hasTraining(training: RaiderTraining)\n\n    getSelectionType(): SelectionType {\n        return this.selectionType\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    abstract select(): boolean\n\n    abstract getSelectionCenter(): Vector3\n\n    abstract addTool(tool: RaiderTool)\n\n    abstract addTraining(skill: RaiderTraining)\n\n    abstract get stats(): FulfillerStats\n\n}\n\nexport class FulfillerStats {\n\n    Levels: number\n    HardDrillTime: number[]\n    LooseDrillTime: number[]\n    SoilDrillTime: number[]\n    SeamDrillTime: number[]\n\n}\n","import { Vector3 } from 'three'\nimport { getRandomInclusive } from '../../../core/Util'\nimport { EventBus } from '../../../event/EventBus'\nimport { RaidersChangedEvent } from '../../../event/LocalEvents'\nimport { RaiderDiscoveredEvent } from '../../../event/WorldLocationEvent'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { BaseActivity } from '../activities/BaseActivity'\nimport { RaiderActivity } from '../activities/RaiderActivity'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { FulfillerEntity } from '../FulfillerEntity'\nimport { GameState } from '../GameState'\nimport { JobState } from '../job/JobState'\nimport { TerrainPath } from '../map/TerrainPath'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { SelectionType } from '../Selectable'\nimport { RaiderTool } from './RaiderTool'\nimport { RaiderTraining } from './RaiderTraining'\n\nexport class Raider extends FulfillerEntity {\n\n    tools: Map<RaiderTool, boolean> = new Map()\n    trainings: Map<RaiderTraining, boolean> = new Map()\n    slipped: boolean = false\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntitySuperType.RAIDER, EntityType.PILOT, 'mini-figures/pilot/pilot.ae', SelectionType.RAIDER)\n        this.tools.set(RaiderTool.DRILL, true)\n    }\n\n    get stats() {\n        return ResourceManager.stats.Pilot\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.sceneMgr.terrain.findPath(this.getPosition2D(), target)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.raidersUndiscovered.remove(this)\n        GameState.raiders.push(this)\n        EventBus.publishEvent(new RaidersChangedEvent())\n        EventBus.publishEvent(new RaiderDiscoveredEvent(this.getPosition()))\n    }\n\n    select(): boolean {\n        this.selectionFrame.visible = !this.slipped\n        if (this.selected || this.slipped) return false\n        this.selected = true\n        this.changeActivity()\n        return true\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    isDriving(): boolean {\n        return false // TODO implement vehicles\n    }\n\n    getSpeed(): number {\n        return super.getSpeed() * this.stats.RouteSpeed[this.level] * (this.isOnPath() ? this.stats.PathCoef : 1)\n    }\n\n    isOnPath(): boolean {\n        return this.sceneMgr.terrain.getSurfaceFromWorld(this.group.position).isPath()\n    }\n\n    isOnRubble() {\n        return this.sceneMgr.terrain.getSurfaceFromWorld(this.group.position).hasRubble()\n    }\n\n    getRouteActivity(): BaseActivity {\n        if (this.isOnRubble()) {\n            return !!this.carries ? RaiderActivity.CarryRubble : RaiderActivity.routeRubble\n        } else {\n            return !!this.carries ? RaiderActivity.Carry : RaiderActivity.Route\n        }\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        const result = super.moveToClosestTarget(target)\n        this.job.setActualWorkplace(this.currentPath?.target)\n        if (result === MoveState.MOVED) {\n            GameState.getNearbySpiders(this).some((spider) => {\n                if (this.group.position.distanceToSquared(spider.group.position) < this.radiusSq + spider.radiusSq) {\n                    this.slip()\n                    spider.onDeath()\n                    return true\n                }\n            })\n        } else if (result === MoveState.TARGET_UNREACHABLE) {\n            console.log('Entity could not move to job target, stopping job')\n            this.stopJob()\n        }\n        return result\n    }\n\n    slip() {\n        if (getRandomInclusive(0, 100) < 10) this.stopJob()\n        this.dropItem()\n        this.slipped = true\n        this.changeActivity(RaiderActivity.Slip, () => {\n            this.slipped = false\n        })\n    }\n\n    moveToClosestWorkplace(): boolean {\n        return this.moveToClosestTarget(this.jobWorkplaces) === MoveState.TARGET_REACHED\n    }\n\n    work() {\n        if (!this.job || this.selected || this.slipped) return\n        if (this.job.jobState !== JobState.INCOMPLETE) {\n            this.stopJob()\n        } else {\n            const carryItem = this.job.getCarryItem()\n            if (carryItem && this.carries !== carryItem) {\n                this.dropItem()\n                if (this.moveToClosestTarget(carryItem.getPositionPathTarget())) {\n                    this.changeActivity(RaiderActivity.Collect, () => {\n                        this.pickupItem(carryItem)\n                    })\n                }\n            } else if (this.moveToClosestWorkplace()) {\n                if (this.job.isReadyToComplete()) {\n                    const workActivity = this.job.getWorkActivity() || this.getDefaultActivity()\n                    this.changeActivity(workActivity, () => {\n                        this.completeJob()\n                    }, this.job.getWorkDuration(this))\n                } else {\n                    this.changeActivity()\n                }\n            }\n        }\n    }\n\n    private completeJob() {\n        this.job?.onJobComplete()\n        if (this.job?.jobState === JobState.INCOMPLETE) return\n        if (this.job) this.job.unassign(this)\n        this.job = this.followUpJob\n        this.followUpJob = null\n        this.jobWorkplaces = this.job?.getWorkplaces() || []\n        this.changeActivity()\n    }\n\n    getDefaultActivity(): BaseActivity {\n        return this.carries ? RaiderActivity.CarryStand : super.getDefaultActivity()\n    }\n\n    beamUp() {\n        this.stopJob()\n        super.beamUp()\n        EventBus.publishEvent(new RaidersChangedEvent())\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        GameState.raiders.remove(this)\n    }\n\n    hasTool(tool: RaiderTool) {\n        return !tool || this.tools.has(tool)\n    }\n\n    hasTraining(training: RaiderTraining) {\n        return !training || this.trainings.has(training)\n    }\n\n    addTool(tool: RaiderTool) {\n        this.tools.set(tool, true)\n    }\n\n    addTraining(training: RaiderTraining) {\n        this.trainings.set(training, true)\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class MonsterActivity extends AnimEntityActivity {\n\n    static Route = new MonsterActivity('Activity_Route')\n\n}\n","import { clearTimeoutSafe } from '../../../core/Util'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { MonsterActivity } from '../activities/MonsterActivity'\nimport { EntitySuperType, EntityType } from '../EntityType'\nimport { MovableEntity } from '../MovableEntity'\nimport { PathTarget } from '../PathTarget'\n\nexport abstract class Monster extends MovableEntity {\n\n    moveTimeout: NodeJS.Timeout\n    target: PathTarget[] = []\n\n    protected constructor(worldMgr: WorldManager, sceneMgr: SceneManager, entityType: EntityType, aeFilename: string) {\n        super(worldMgr, sceneMgr, EntitySuperType.MONSTER, entityType, aeFilename)\n    }\n\n    onLevelEnd() {\n        this.moveTimeout = clearTimeoutSafe(this.moveTimeout)\n        this.removeFromScene()\n    }\n\n    getRouteActivity(): MonsterActivity {\n        return MonsterActivity.Route\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { getRandomInclusive } from '../../../core/Util'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { Monster } from './Monster'\n\nexport class Bat extends Monster {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.BAT, 'Creatures/bat/bat.ae')\n        this.floorOffset = TILESIZE / 2\n    }\n\n    get stats() {\n        return ResourceManager.stats.Bat\n    }\n\n    startRandomMove() {\n        Bat.onMove(this)\n    }\n\n    private static onMove(bat: Bat) {\n        if (bat.target.length < 1 || bat.moveToClosestTarget(bat.target) === MoveState.TARGET_REACHED) {\n            bat.target = [bat.findTarget()]\n        }\n        bat.moveTimeout = setTimeout(() => Bat.onMove(bat), 1000 / NATIVE_FRAMERATE)\n    }\n\n    private findTarget(): PathTarget { // TODO move to nearby drilling noise, explosions or sonic blasters\n        const terrain = this.sceneMgr.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            if (terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType.floor) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a target')\n        return null\n    }\n\n    onDeath() {\n        this.onLevelEnd()\n        GameState.bats.remove(this)\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { getRandom, getRandomInclusive } from '../../../core/Util'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../params'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { WorldManager } from '../../WorldManager'\nimport { EntityType } from '../EntityType'\nimport { GameState } from '../GameState'\nimport { SurfaceType } from '../map/SurfaceType'\nimport { MoveState } from '../MoveState'\nimport { PathTarget } from '../PathTarget'\nimport { Monster } from './Monster'\n\nexport class SmallSpider extends Monster {\n\n    constructor(worldMgr: WorldManager, sceneMgr: SceneManager) {\n        super(worldMgr, sceneMgr, EntityType.SMALL_SPIDER, 'Creatures/SpiderSB/SpiderSB.ae')\n        this.floorOffset = 1\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallSpider\n    }\n\n    startMoving() {\n        SmallSpider.onMove(this)\n    }\n\n    private static onMove(spider: SmallSpider) {\n        spider.surfaces.forEach((s) => GameState.spidersBySurface.getOrUpdate(s, () => []).remove(spider))\n        if (spider.target.length > 0 && spider.moveToClosestTarget(spider.target) === MoveState.MOVED) {\n            spider.surfaces.forEach((s) => GameState.spidersBySurface.getOrUpdate(s, () => []).push(spider))\n            if (!spider.sceneMgr.terrain.getSurfaceFromWorld(spider.getPosition()).surfaceType.floor) {\n                spider.onDeath()\n            } else {\n                spider.moveTimeout = setTimeout(() => SmallSpider.onMove(spider), 1000 / NATIVE_FRAMERATE)\n            }\n        } else {\n            spider.changeActivity()\n            spider.moveTimeout = setTimeout(() => {\n                spider.target = [spider.findTarget()]\n                SmallSpider.onMove(spider)\n            }, 1000 + getRandom(9000))\n        }\n    }\n\n    private findTarget(): PathTarget {\n        const terrain = this.sceneMgr.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            const surfaceType = terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType\n            if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a target')\n        return null\n    }\n\n    onDeath() {\n        this.onLevelEnd()\n        GameState.spiders.remove(this)\n        this.surfaces.forEach((s) => GameState.spidersBySurface.getOrUpdate(s, () => []).remove(this))\n    }\n\n}\n","import { MathUtils, Vector2, Vector3 } from 'three'\nimport { EventBus } from '../event/EventBus'\nimport { RaidersChangedEvent } from '../event/LocalEvents'\nimport { TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { Barracks } from './model/building/entities/Barracks'\nimport { Docks } from './model/building/entities/Docks'\nimport { Geodome } from './model/building/entities/Geodome'\nimport { GunStation } from './model/building/entities/GunStation'\nimport { OreRefinery } from './model/building/entities/OreRefinery'\nimport { PowerStation } from './model/building/entities/PowerStation'\nimport { TeleportBig } from './model/building/entities/TeleportBig'\nimport { TeleportPad } from './model/building/entities/TeleportPad'\nimport { Toolstation } from './model/building/entities/Toolstation'\nimport { Upgrade } from './model/building/entities/Upgrade'\nimport { Crystal } from './model/collect/Crystal'\nimport { GameState } from './model/GameState'\nimport { Bat } from './model/monster/Bat'\nimport { SmallSpider } from './model/monster/SmallSpider'\nimport { Raider } from './model/raider/Raider'\nimport { SceneManager } from './SceneManager'\nimport { WorldManager } from './WorldManager'\nimport degToRad = MathUtils.degToRad\n\nexport class ObjectListLoader {\n\n    static loadObjectList(worldMgr: WorldManager, sceneMgr: SceneManager, objectListConf, disableStartTeleport: boolean) {\n        Object.values(objectListConf).forEach((olObject: any) => {\n            const lTypeName = olObject.type ? olObject.type.toLowerCase() : olObject.type\n            // all object positions are off by one tile, because they start at 1 not 0\n            const worldPos = new Vector2(olObject.xPos, olObject.yPos).addScalar(-1).multiplyScalar(TILESIZE) // TODO assert that world pos is over terrain otherwise drop item\n            const buildingType: string = ResourceManager.cfg('BuildingTypes', olObject.type)\n            const radHeading = degToRad(olObject.heading)\n            if (lTypeName === 'TVCamera'.toLowerCase()) {\n                const terrainY = sceneMgr.getTerrainHeight(worldPos.x, worldPos.y)\n                const loc = new Vector3(worldPos.x, terrainY, worldPos.y - TILESIZE / 2)\n                const offset = new Vector3(5 * TILESIZE, 0, 0).applyAxisAngle(new Vector3(0, 1, 0), radHeading - Math.PI / 16).add(loc)\n                sceneMgr.camera.position.copy(offset)\n                sceneMgr.camera.position.y = 4.5 * TILESIZE\n                sceneMgr.controls.target.copy(loc)\n                sceneMgr.controls.update()\n                sceneMgr.setTorchPosition(new Vector2(worldPos.x, worldPos.y - TILESIZE / 2))\n            } else if (lTypeName === 'Pilot'.toLowerCase()) {\n                const raider = new Raider(worldMgr, sceneMgr)\n                raider.changeActivity()\n                raider.createPickSphere()\n                raider.addToScene(worldPos, radHeading - Math.PI / 2)\n                if (raider.group.visible) {\n                    GameState.raiders.push(raider)\n                    EventBus.publishEvent(new RaidersChangedEvent())\n                } else {\n                    GameState.raidersUndiscovered.push(raider)\n                }\n            } else if (buildingType) {\n                const entity = this.createBuildingByName(buildingType, worldMgr, sceneMgr)\n                entity.placeDown(worldPos, -radHeading - Math.PI, disableStartTeleport)\n            } else if (lTypeName === 'PowerCrystal'.toLowerCase()) {\n                worldMgr.placeMaterial(new Crystal(worldMgr, sceneMgr), worldPos)\n            } else if (lTypeName === 'SmallSpider'.toLowerCase()) {\n                const spider = new SmallSpider(worldMgr, sceneMgr)\n                spider.changeActivity()\n                spider.addToScene(worldPos, radHeading)\n                GameState.spiders.push(spider)\n                spider.surfaces.forEach((s) => GameState.spidersBySurface.getOrUpdate(s, () => []).push(spider))\n                spider.startMoving()\n            } else if (lTypeName === 'Bat'.toLowerCase()) {\n                const bat = new Bat(worldMgr, sceneMgr)\n                bat.changeActivity()\n                bat.addToScene(worldPos, radHeading)\n                GameState.bats.push(bat)\n                bat.startRandomMove()\n            } else {\n                // TODO implement remaining object types\n                console.warn('Object type ' + olObject.type + ' not yet implemented')\n            }\n        })\n    }\n\n    private static createBuildingByName(buildingType: string, worldMgr: WorldManager, sceneMgr: SceneManager) {\n        const typename = buildingType.slice(buildingType.lastIndexOf('/') + 1).toLowerCase()\n        if (typename === 'toolstation') {\n            return new Toolstation(worldMgr, sceneMgr)\n        } else if (typename === 'teleports') {\n            return new TeleportPad(worldMgr, sceneMgr)\n        } else if (typename === 'docks') {\n            return new Docks(worldMgr, sceneMgr)\n        } else if (typename === 'powerstation') {\n            return new PowerStation(worldMgr, sceneMgr)\n        } else if (typename === 'barracks') {\n            return new Barracks(worldMgr, sceneMgr)\n        } else if (typename === 'upgrade') {\n            return new Upgrade(worldMgr, sceneMgr)\n        } else if (typename === 'geo-dome') {\n            return new Geodome(worldMgr, sceneMgr)\n        } else if (typename === 'orerefinery') {\n            return new OreRefinery(worldMgr, sceneMgr)\n        } else if (typename === 'gunstation') {\n            return new GunStation(worldMgr, sceneMgr)\n        } else if (typename === 'teleportbig') {\n            return new TeleportBig(worldMgr, sceneMgr)\n        } else {\n            throw 'Unknown building type: ' + typename\n        }\n    }\n\n}\n","// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n}\n\nexport enum POINTER_EVENT {\n    MOVE,\n    DOWN,\n    UP,\n}\n\nexport enum KEY_EVENT {\n    DOWN,\n    UP,\n}\n","import { Vector2 } from 'three'\nimport { clearIntervalSafe } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { JobCreateEvent, JobDeleteEvent } from '../event/WorldEvents'\nimport { CHECK_CLEARRUBBLE_INTERVAL, JOB_SCHEDULE_INTERVAL } from '../params'\nimport { BuildingEntity } from './model/building/BuildingEntity'\nimport { EntityType } from './model/EntityType'\nimport { GameState } from './model/GameState'\nimport { GetToolJob } from './model/job/GetToolJob'\nimport { PublicJob } from './model/job/Job'\nimport { JobState } from './model/job/JobState'\nimport { PriorityIdentifier } from './model/job/PriorityIdentifier'\nimport { TrainJob } from './model/job/TrainJob'\nimport { PathTarget } from './model/PathTarget'\nimport { Raider } from './model/raider/Raider'\nimport { RaiderTool } from './model/raider/RaiderTool'\nimport { RaiderTraining } from './model/raider/RaiderTraining'\nimport { WorldManager } from './WorldManager'\n\nexport class Supervisor {\n\n    worldMgr: WorldManager\n    jobs: PublicJob[] = []\n    assignInterval = null\n    checkRubbleInterval = null\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        EventBus.registerEventListener(EventKey.JOB_CREATE, (event: JobCreateEvent) => {\n            this.jobs.push(event.job)\n        })\n        EventBus.registerEventListener(EventKey.JOB_DELETE, (event: JobDeleteEvent) => {\n            event.job.cancel()\n        })\n    }\n\n    start() {\n        stop()\n        this.assignInterval = setInterval(this.assignJobs.bind(this), JOB_SCHEDULE_INTERVAL)\n        this.checkRubbleInterval = setInterval(this.checkUnclearedRubble.bind(this), CHECK_CLEARRUBBLE_INTERVAL)\n    }\n\n    stop() {\n        this.assignInterval = clearIntervalSafe(this.assignInterval)\n        this.checkRubbleInterval = clearIntervalSafe(this.checkRubbleInterval)\n        GameState.raiders.forEach((r) => r.resetWorkInterval())\n        GameState.raidersUndiscovered.forEach((r) => r.resetWorkInterval())\n    }\n\n    assignJobs() {\n        const availableJobs: PublicJob[] = []\n        this.jobs = this.jobs.filter((j) => {\n            const result = j.jobState === JobState.INCOMPLETE\n            if (result && j.fulfiller.length < 1 && GameState.priorityList.isEnabled(j.getPriorityIdentifier())) { // TODO don't assign jobs on hidden surfaces\n                availableJobs.push(j)\n            }\n            return result\n        })\n        availableJobs.sort((left, right) => {\n            return Math.sign(GameState.priorityList.getPriority(left) - GameState.priorityList.getPriority(right))\n        })\n        const unemployedRaider = GameState.raiders.filter((r) => !r.job)\n        availableJobs.forEach((job) => { // XXX better use estimated time to complete job as metric\n                let closestRaider: Raider = null\n                let closestRaiderIndex: number = null\n                let minDistance: number = null\n                let closestToolRaider: Raider = null\n                let closestToolRaiderIndex: number = null\n                let minToolDistance: number = null\n                let closestToolstationPosition: Vector2 = null\n                let closestNeededTool: RaiderTool = null\n                let closestTrainingRaider: Raider = null\n                let closestTrainingRaiderIndex: number = null\n                let minTrainingDistance: number = null\n                let closestTrainingArea: BuildingEntity = null\n                let closestNeededTraining: RaiderTraining = null\n                unemployedRaider.forEach((raider, index) => {\n                    const requiredTool = job.getRequiredTool()\n                    const hasRequiredTool = raider.hasTool(requiredTool)\n                    const raiderTraining = job.getRequiredTraining()\n                    const hasTraining = raider.hasTraining(raiderTraining)\n                    const raiderPosition = raider.getPosition()\n                    if (hasRequiredTool && hasTraining) {\n                        const pathToJob = job.getWorkplaces().map((b) => raider.findPathToTarget(b))\n                            .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                        if (pathToJob) {\n                            const dist = pathToJob.lengthSq // TODO use precalculated path to job\n                            if (minDistance === null || dist < minDistance) {\n                                closestRaider = raider\n                                closestRaiderIndex = index\n                                minDistance = dist\n                            }\n                        }\n                    } else if (!hasRequiredTool) {\n                        const pathToToolstation = GameState.getBuildingsByType(EntityType.TOOLSTATION)\n                            .map((b) => raider.findPathToTarget(new PathTarget(b.getPosition2D())))\n                            .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                        if (pathToToolstation) {\n                            const dist = pathToToolstation.lengthSq\n                            if (minToolDistance === null || dist < minToolDistance) {\n                                closestToolRaider = raider\n                                closestToolRaiderIndex = index\n                                minToolDistance = dist\n                                closestToolstationPosition = pathToToolstation.targetPosition\n                                closestNeededTool = requiredTool\n                            }\n                        }\n                    } else {\n                        const trainingSite = GameState.getTrainingSites(raiderTraining).sort((l, r) =>\n                            raider.findPathToTarget(new PathTarget(l.getPosition2D())).lengthSq - raider.findPathToTarget(new PathTarget(r.getPosition2D())).lengthSq)[0]\n                        if (trainingSite) {\n                            const dist = raider.findPathToTarget(new PathTarget(trainingSite.getPosition2D())).lengthSq\n                            if (minTrainingDistance === null || dist < minTrainingDistance) {\n                                closestTrainingRaider = raider\n                                closestTrainingRaiderIndex = index\n                                minTrainingDistance = dist\n                                closestTrainingArea = trainingSite\n                                closestNeededTraining = raiderTraining\n                            }\n                        }\n                    }\n                })\n                if (closestRaider) {\n                    closestRaider.setJob(job)\n                    unemployedRaider.splice(closestRaiderIndex, 1)\n                } else if (closestToolRaider) {\n                    closestToolRaider.setJob(new GetToolJob(closestToolstationPosition, closestNeededTool), job)\n                    unemployedRaider.splice(closestToolRaiderIndex, 1)\n                } else if (closestTrainingRaider) {\n                    closestTrainingRaider.setJob(new TrainJob(closestTrainingArea, closestNeededTraining), job)\n                    unemployedRaider.splice(closestTrainingRaiderIndex, 1)\n                }\n            },\n        )\n        // TODO move unemployed raider out of building sites\n    }\n\n    checkUnclearedRubble() {\n        if (!GameState.priorityList.isEnabled(PriorityIdentifier.aiPriorityClearing)) return\n        GameState.raiders.forEach((raider) => {\n            if (raider.job) return\n            const startSurface = raider.sceneMgr.terrain.getSurfaceFromWorld(raider.getPosition())\n            for (let rad = 0; rad < 10; rad++) {\n                for (let x = startSurface.x - rad; x <= startSurface.x + rad; x++) {\n                    for (let y = startSurface.y - rad; y <= startSurface.y + rad; y++) {\n                        const surface = raider.sceneMgr.terrain.getSurfaceOrNull(x, y)\n                        if (!(surface?.hasRubble()) || !surface?.discovered) continue\n                        const clearRubbleJob = surface.createClearRubbleJob()\n                        if (!clearRubbleJob) continue\n                        const requiredTool = clearRubbleJob.getRequiredTool()\n                        if (raider.hasTool(requiredTool)) {\n                            raider.setJob(clearRubbleJob)\n                        } else {\n                            const pathToToolstation = GameState.getBuildingsByType(EntityType.TOOLSTATION)\n                                .map((b) => raider.findPathToTarget(new PathTarget(b.getPosition2D())))\n                                .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                            if (pathToToolstation) {\n                                raider.setJob(new GetToolJob(pathToToolstation.targetPosition, requiredTool), clearRubbleJob) // TODO use precalculated path to toolstation\n                            }\n                        }\n                    }\n                }\n            }\n        })\n    }\n\n}\n","/** Function documentation mostly copied from the following URLs\n *\n * https://kb.rockraidersunited.com/User:Jessietail/NERPs_reference\n * https://web.archive.org/web/20131206122442/http://rru-stuff.org/nerpfuncs.html\n * https://kb.rockraidersunited.com/NERPs_documentation#Labels\n *\n */\nimport { EntityType } from '../game/model/EntityType'\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { clearIntervalSafe, getRandom } from './Util'\n\n// noinspection JSUnusedGlobalSymbols,JSUnusedLocalSymbols\nexport class NerpRunner {\n\n    debug = false\n    onLevelEnd: () => any = null\n    nerpInterval: NodeJS.Timeout = null\n\n    registers = new Array(8).fill(0)\n    timers = new Array(4).fill(0)\n    scriptLines = [] // contains humand readable script strings\n    statements = [] // contains parsed statements for execution\n    macrosByName = {}\n    labelsByName = {}\n    halted = false\n    programCounter = 0\n    messages = []\n    // more state variables and switches\n    messagePermit = null\n\n    constructor(debug = false) {\n        this.debug = debug\n    }\n\n    startExecution() {\n        const that = this\n        this.nerpInterval = setInterval(() => {\n            that.execute()\n        }, 2000)\n    }\n\n    pauseExecution() {\n        this.nerpInterval = clearIntervalSafe(this.nerpInterval)\n    }\n\n    /**\n     * Internally used to validate and parse a register number.\n     * @param register\n     * @return {number}\n     */\n    checkRegister(register) {\n        const num = parseInt(register)\n        if (isNaN(num) || num < 0 || num > this.registers.length) throw new Error('Invalid register (' + register + ') provided')\n        return num\n    }\n\n    /**\n     * Internally used to validate and parse a value before setting or adding it with a register.\n     * @param value\n     * @return {number}\n     */\n    checkRegisterValue(value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Invalid register value (' + value + ') provided')\n        return num\n    }\n\n    /**\n     * Gets the value currently stored in the given register, internally used to handle all registers with one method.\n     * @param register the register to read\n     * @return {number} returns the value currently stored in the register\n     */\n    getR(register) {\n        register = this.checkRegister(register)\n        return this.registers[register]\n    }\n\n    /**\n     * Sets the given value for the given register, internally used to handle all registers with one method.\n     * @param register the register to set\n     * @param value the value to set for the given register\n     */\n    setR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] = value\n    }\n\n    /**\n     * Adds the given value to the given register, internally used to handle all registers with one method.\n     * @param register the register to add to\n     * @param value the value to add to the given register\n     */\n    addR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] += value\n    }\n\n    /**\n     * Set the respective timer to the given numerical value. Units are in milliseconds.\n     * @param timer\n     * @param value\n     */\n    setTimer(timer, value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Can\\'t set timer to NaN value: ' + value)\n        this.timers[timer] = new Date().getTime() + num\n    }\n\n    /**\n     * Gets the value of the respective timer. Units are in milliseconds.\n     * @param timer\n     * @return {number}\n     */\n    getTimer(timer) {\n        return new Date().getTime() - this.timers[timer]\n    }\n\n    /**\n     * End the level successfully and show the score screen.\n     */\n    setLevelCompleted() {\n        console.log('Nerp runner marks level as complete')\n        this.halted = true\n        GameState.resultState = GameResultState.COMPLETE\n        this.onLevelEnd()\n    }\n\n    /**\n     * End the level as failure and show the score screen.\n     */\n    setLevelFail() {\n        console.log('NerpRunner marks level as failed; at line: ' + this.scriptLines[this.programCounter])\n        this.halted = true\n        GameState.resultState = GameResultState.FAILED\n        this.onLevelEnd()\n    }\n\n    /**\n     * Sets tutorial flags\n     * @param value a bitmask to set flags with\n     */\n    setTutorialFlags(value) {\n        // seems like value must be interpreted bitwise and sets a certain flag on each bit\n        // seen so far:\n        // 0 = 0x00 allow any click anywhere anytime\n        // 3 = 0x11 disallow invalid clicks\n        // 4095 = 0x111111111111 set all flags? (seen in Tutorial01 level)\n        if (value !== 0) { // holds for all known levels\n            console.warn('NERP: setTutorialFlags not yet implemented', value)\n        }\n    }\n\n    /**\n     * This is used to make messages come up/not come up.\n     * @param messagesAllowed\n     */\n    setMessagePermit(messagesAllowed) {\n        this.messagePermit = !messagesAllowed\n    }\n\n    setBuildingsUpgradeLevel(typeName: EntityType, level: number) {\n        GameState.buildings.forEach(b => {\n            if (b.entityType === typeName) b.level = level\n        })\n    }\n\n    setToolStoreLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.TOOLSTATION, level)\n    }\n\n    setTeleportPadLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.TELEPORT_PAD, level)\n    }\n\n    setPowerStationLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.POWER_STATION, level)\n    }\n\n    setBarracksLevel(level: number) {\n        this.setBuildingsUpgradeLevel(EntityType.BARRACKS, level)\n    }\n\n    /**\n     * Gets the number of tool stores currently built. NOT the total ever built.\n     * @return {number}\n     */\n    getToolStoresBuilt() {\n        return GameState.buildings.count((b) => b.entityType === EntityType.TOOLSTATION)\n    }\n\n    /**\n     * Gets the number of minifigures on the level. XXX it is NOT tested if this ignores minifigures in hidden caverns\n     * @return {number}\n     */\n    getMinifiguresOnLevel() {\n        return GameState.raiders.length\n    }\n\n    /**\n     * Gets the number of crystals currently stored.\n     * @return {number}\n     */\n    getCrystalsCurrentlyStored() {\n        return GameState.numCrystal\n    }\n\n    getObjectiveSwitch() {\n        return GameState.objectiveSwitch\n    }\n\n    setMessageTimerValues(arg1, arg2, arg3) {\n        // TODO implement this\n    }\n\n    getMessageTimer() {\n        return 0 // TODO return remaining amount of time needed to fully play WAV message\n    }\n\n    cameraUnlock() {\n        // TODO implement this\n    }\n\n    setMessage(messageNumber, arrowDisabled) {\n        if (!this.messagePermit) return\n        if (messageNumber === 0) return // TODO messages start at 1\n        const msg = this.messages[messageNumber]\n        console.log(msg.txt) // TODO show message to user\n        // msg.snd resides in sounds/streamed/ which is currently not loaded :(\n    }\n\n    setCameraGotoTutorial(arg1) {\n        // TODO implement this\n    }\n\n    getTutorialBlockIsGround(blockNum) {\n        return 0 // TODO return true if given block is ground\n    }\n\n    getTutorialBlockIsPath(blockNum) {\n        return 0 // TODO return true if given block is a path\n    }\n\n    getUnitAtBlock(blockNum) {\n        return 0 // TODO return number of units on given block\n    }\n\n    getOxygenLevel() {\n        return GameState.airLevel * 100\n    }\n\n    getObjectiveShowing() {\n        return GameState.objectiveShown\n    }\n\n    addPoweredCrystals() {\n        // TODO implement this\n    }\n\n    disallowAll() {\n        // TODO implement this\n    }\n\n    getPoweredPowerStationsBuilt() {\n        return GameState.buildings.count((b) => b.isUsable() && b.entityType === EntityType.POWER_STATION)\n    }\n\n    getPoweredBarracksBuilt() {\n        return GameState.buildings.count((b) => b.isUsable() && b.entityType === EntityType.BARRACKS)\n    }\n\n    getRecordObjectAtTutorial() {\n        // TODO implement this\n    }\n\n    getHiddenObjectsFound() {\n        // TODO implement this\n        return 0\n    }\n\n    getLevel1PowerStationsBuilt() {\n        return GameState.buildings.count((b) => b.entityType === EntityType.POWER_STATION && b.level >= 1)\n    }\n\n    getRandom100(): number {\n        return getRandom(100)\n    }\n\n    getSlugsOnLevel(): number {\n        return 0 // TODO implement slugs\n    }\n\n    generateSlug() {\n        console.warn('Slugs not yet implemented') // TODO implement slugs\n    }\n\n    callMethod(methodName, methodArgs) {\n        if (methodName === 'Stop') {\n            throw 'Stop'\n        } else if (methodName === 'TRUE') {\n            return true\n        } else if (methodName === 'FALSE') {\n            return false\n        }\n        const setRegisterMatch = methodName.match(/^SetR([0-7])$/)\n        if (setRegisterMatch) {\n            return this.setR(setRegisterMatch[1], methodArgs[0])\n        }\n        const addRegisterMatch = methodName.match(/^AddR([0-7])$/)\n        if (addRegisterMatch) {\n            return this.addR(addRegisterMatch[1], methodArgs[0])\n        }\n        const getRegisterMatch = methodName.match(/^GetR([0-7])$/)\n        if (getRegisterMatch) {\n            return this.getR(getRegisterMatch[1])\n        }\n        const setTimerMatch = methodName.match(/^SetTimer([0-3])$/)\n        if (setTimerMatch) {\n            return this.setTimer(setTimerMatch[1], methodArgs[0])\n        }\n        const getTimerMatch = methodName.match(/^GetTimer([0-3])$/)\n        if (getTimerMatch) {\n            return this.getTimer(getTimerMatch[1])\n        }\n        const lMethodName = methodName.toLowerCase()\n        const memberName = Object.getOwnPropertyNames(NerpRunner.prototype).find((name) => name.toLowerCase() === lMethodName)\n        if (memberName) return this[memberName].apply(this, methodArgs)\n        throw new Error('Undefined method: ' + methodName)\n    }\n\n    conditional(left, right) {\n        const conditionResult = this.executeStatement(left)\n        if (this.debug) {\n            console.log('Condition evaluated to ' + conditionResult)\n        }\n        if (conditionResult) {\n            this.executeStatement(right)\n        }\n    }\n\n    executeStatement(expression) {\n        if (expression.invoke) {\n            const argValues = expression.invoke !== 'conditional' ? expression.args.map(e => this.executeStatement(e)) : expression.args\n            const result = this.callMethod(expression.invoke, argValues)\n            if (result !== undefined && this.debug) {\n                console.log('Method returned: ' + result)\n            }\n            return result\n        } else if (expression.comparator) {\n            const left = this.executeStatement(expression.left)\n            const right = this.executeStatement(expression.right)\n            if (expression.comparator === '=') {\n                return left === right\n            } else if (expression.comparator === '!=') {\n                return left !== right\n            } else if (expression.comparator === '<') {\n                return left < right\n            } else if (expression.comparator === '>') {\n                return left > right\n            } else {\n                console.log(expression)\n                throw new Error('Unknown comparator: ' + expression.comparator)\n            }\n        } else if (!isNaN(expression)) { // just a number\n            return expression\n        } else if (expression.jump) {\n            this.programCounter = this.labelsByName[expression.jump]\n            if (this.programCounter === undefined) {\n                throw new Error('Label \\'' + expression.jump + '\\' is unknown!')\n            }\n            if (this.debug) {\n                console.log('Jumping to label \\'' + expression.jump + '\\' in line ' + this.programCounter)\n            }\n        } else {\n            console.log(expression)\n            throw new Error('Unknown expression in line ' + this.programCounter + ': ' + expression)\n        }\n    }\n\n    execute(debug = false) {\n        this.debug = debug\n        if (this.halted) return\n        try {\n            if (this.debug) {\n                console.log('Executing following script\\n' + this.scriptLines.join('\\n'))\n                console.log('Registers: ' + this.registers)\n            }\n            for (this.programCounter = 0; this.programCounter < this.statements.length; this.programCounter++) {\n                const statement = this.statements[this.programCounter]\n                if (this.debug) {\n                    console.log(this.programCounter + ': ' + this.scriptLines[this.programCounter])\n                    console.log(statement)\n                }\n                if (!statement.label) { // do nothing for label markers\n                    this.executeStatement(statement)\n                }\n            }\n        } catch (e) {\n            if (e === 'Stop') {\n                return\n            }\n            console.error(e)\n            console.error('FATAL ERROR! Script execution failed! You can NOT win anymore!')\n            this.halted = true\n        }\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { NerpRunner } from './NerpRunner'\n\nexport class NerpParser {\n\n    static parse(nerpScript: string): NerpRunner {\n        const nerpRunner = new NerpRunner()\n        const lines = nerpScript.split('\\n').map(l => l\n            .split('//')[0].trim() // before comment starts\n            .split(';')[0].trim() // before preprocessor comment starts\n            .replace(/_/g, '') // some preprocessor macros use this prefix\n            .replace(/\\bTRUE \\? /, '') // some weird requirement of the original language\n            .replace(/[{}]/g, ''), // duplicate limit for macros using labels too\n        )\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c]\n            if (line.length < 1) {\n                continue // ignore empty lines, but important for macro closure\n            }\n            if (line.startsWith('#include ')) { // include other nerp scripts/headers\n                const includeName = line.replace(/^#include /, '').trim().slice(1, -1)\n                if (includeName === 'nerpdef.h') {\n                    // trivial default header file, is applied by search and replace above\n                    // see https://github.com/jgrip/legorr/blob/master/nerpdef.h\n                    continue\n                }\n                const includedRunner = NerpParser.parse(ResourceManager.getResource('Levels/' + includeName))\n                if (!includedRunner || !includedRunner.scriptLines || includedRunner.scriptLines.length < 1) {\n                    throw 'Can\\'t include unknown nerp script: ' + line\n                }\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(includedRunner.scriptLines)\n                // copy macros from included file to current file\n                nerpRunner.macrosByName = Object.assign({}, nerpRunner.macrosByName, includedRunner.macrosByName)\n            } else if (line.startsWith('#define ')) { // parse C++ preprocessor macro\n                const firstLine = line.replace(/^#define /, '').split(' ')\n                const macroLines = [firstLine.splice(1).join(' ').replace(/\\\\$/, '').trim()]\n                let mLine = line\n                let append = false\n                while (mLine.endsWith('\\\\') && c < lines.length - 1) {\n                    c++\n                    mLine = lines[c].trim()\n                    const macroLine = mLine.replace(/\\\\$/, '').trim()\n                    if (macroLine.length > 0) {\n                        if (append) {\n                            append = false\n                            macroLines[macroLines.length - 1] += macroLine\n                        } else {\n                            macroLines.push(macroLine)\n                        }\n                    }\n                    if (mLine.match(/:\\\\$/)) {\n                        append = true\n                    }\n                }\n                const macroCall = firstLine[0].split('(')\n                nerpRunner.macrosByName[macroCall[0]] = {\n                    args: macroCall[1].replace(/\\)$/, '').split(','),\n                    lines: macroLines,\n                }\n            } else {\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(this.replaceMacros(nerpRunner.macrosByName, line))\n            }\n        }\n        // somewhat precompile the script and create syntax tree\n        // must be done in separate block to make sure the script is complete and we can refer/rely on line numbers for label jumps\n        for (let c = 0; c < nerpRunner.scriptLines.length; c++) {\n            const line = nerpRunner.scriptLines[c]\n            nerpRunner.statements[c] = line.replace(/\\(\\)/g, '') // now the macros are applied and obsolete empty \"()\" can be removed\n                .split(' ? ')\n            const labelMatch = line.match(/(\\S+):/)\n            if (nerpRunner.statements[c].length === 2) { // line contains condition (primary operator)\n                nerpRunner.statements[c] = {\n                    invoke: 'conditional',\n                    args: [this.preProcess(nerpRunner.statements[c][0]), this.preProcess(nerpRunner.statements[c][1])],\n                }\n            } else if (labelMatch) { // keep label line number for later usage\n                const labelName = labelMatch[1].toLowerCase()\n                nerpRunner.labelsByName[labelName] = c\n                nerpRunner.statements[c] = {label: labelName}\n            } else if (nerpRunner.statements[c].length === 1) { // just a call\n                nerpRunner.statements[c] = this.preProcess(nerpRunner.statements[c][0])\n            } else { // lines contains more than 1 condition statement\n                throw 'Can\\'t deal with line: ' + line\n            }\n        }\n        return nerpRunner\n    }\n\n    static replaceMacros(macrosByName, line): string[] {\n        // check if this line contains a macro\n        const split = line.split('(') // not a very stable check though...\n        const macro = macrosByName[split[0]]\n        if (macro) {\n            const argValues = split.splice(1).join('(').slice(0, -1).split(',')\n            if (argValues.length !== macro.args.length) {\n                throw 'Invalid number of args provided for macro in line ' + line\n            }\n            const macroLines = []\n            macro.lines.forEach((line) => {\n                for (let c = 0; c < argValues.length; c++) {\n                    line = line.replace(new RegExp('\\\\b' + macro.args[c] + '\\\\b'), argValues[c])\n                }\n                macroLines.push(...(this.replaceMacros(macrosByName, line)))\n            })\n            return macroLines\n        } else {\n            return [line]\n        }\n    }\n\n    static preProcess(expression) {\n        expression = expression.trim().replace(/^_/, '') // remove whitespace and leading underscore\n        const number = parseInt(expression)\n        if (!isNaN(number)) {\n            return number\n        }\n        const opSplit = expression.split(/ (=) | (!=) | (>) | (<) /).filter(e => e !== undefined)\n        const brackets = expression.match(/^(.+)\\((.+)\\)$/)\n        const spaceSplit = expression.split(' ')\n        const labelMatch = expression.match(/([^:]+):$/)\n        const jumpMatch = expression.match(/^:([^:]+)$/)\n        if (opSplit.length === 3) { // expression contains secondary operator\n            return {left: this.preProcess(opSplit[0]), comparator: opSplit[1], right: this.preProcess(opSplit[2])}\n        } else if (brackets) {\n            const args = brackets[2].split(',').map(a => this.preProcess(a))\n            return {invoke: brackets[1], args: args}\n        } else if (spaceSplit.length > 1) { // space split must be the very last since most expressions contain space\n            const args = spaceSplit.length === 2 ? [this.preProcess(spaceSplit[1])] : spaceSplit.splice(1).map(a => this.preProcess(a))\n            return {invoke: spaceSplit[0], args: args}\n        } else if (labelMatch) { // label definition\n            return {label: labelMatch[1]}\n        } else if (jumpMatch) { // jump to label\n            return {jump: jumpMatch[1].toLowerCase()}\n        } else { // function call without args\n            if (expression.match(/[ =?><!]/)) {\n                throw 'Invalid expression given, parsing must have failed before somewhere'\n            }\n            return {invoke: expression, args: []}\n        }\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { NerpParser } from '../core/NerpParser'\nimport { NerpRunner } from '../core/NerpRunner'\nimport { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { AirLevelChanged, SelectionChanged, SetupPriorityList } from '../event/LocalEvents'\nimport { JobCreateEvent } from '../event/WorldEvents'\nimport { UPDATE_OXYGEN_TIMER } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MaterialEntity } from './model/collect/MaterialEntity'\nimport { GameState } from './model/GameState'\nimport { SelectionType } from './model/Selectable'\n\nexport class WorldManager {\n\n    nerpRunner: NerpRunner = null\n    oxygenUpdateInterval = null\n\n    constructor() {\n        EventBus.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            if (event.selectionType === SelectionType.NOTHING) GameState.selectEntities([])\n        })\n        EventBus.registerEventListener(EventKey.CAVERN_DISCOVERED, () => {\n            GameState.discoveredCaverns++\n        })\n        this.oxygenUpdateInterval = setInterval(this.updateOxygen.bind(this), UPDATE_OXYGEN_TIMER)\n    }\n\n    setup(levelConf: LevelEntryCfg, onLevelEnd: () => any) {\n        GameState.levelFullName = levelConf.fullName\n        GameState.totalCaverns = levelConf.reward?.quota?.caverns || 0\n        GameState.rewardConfig = levelConf.reward\n        GameState.priorityList.setList(levelConf.priorities)\n        EventBus.publishEvent(new SetupPriorityList(GameState.priorityList.levelDefault))\n        GameState.oxygenRate = levelConf.oxygenRate\n\n        // load nerp script\n        this.nerpRunner = NerpParser.parse(ResourceManager.getResource(levelConf.nerpFile))\n        this.nerpRunner.messages.push(...(ResourceManager.getResource(levelConf.nerpMessageFile)))\n        this.nerpRunner.onLevelEnd = onLevelEnd\n    }\n\n    start() {\n        this.nerpRunner?.startExecution()\n        GameState.levelStartTime = Date.now()\n    }\n\n    stop() {\n        GameState.levelStopTime = Date.now()\n        this.nerpRunner?.pauseExecution()\n        GameState.spiders.forEach((m) => m.onLevelEnd())\n        GameState.bats.forEach((b) => b.onLevelEnd())\n    }\n\n    placeMaterial(item: MaterialEntity, worldPosition: Vector2) {\n        item.addToScene(worldPosition, 0)\n        if (item.group.visible) {\n            GameState.materials.push(item)\n            EventBus.publishEvent(new JobCreateEvent(item.createCarryJob()))\n        } else {\n            GameState.materialsUndiscovered.push(item)\n        }\n        return item\n    }\n\n    updateOxygen() {\n        const sum = GameState.raiders.map((r) => r.stats.OxygenCoef).reduce((l, r) => l + r, 0) +\n            GameState.buildings.map((b) => b.isUsable() ? b.stats.OxygenCoef : 0).reduce((l, r) => l + r, 0)\n        const rateMultiplier = 0.001\n        const valuePerSecond = 1 / 25\n        const msToSeconds = 0.001\n        const diff = sum * GameState.oxygenRate * rateMultiplier * valuePerSecond * UPDATE_OXYGEN_TIMER * msToSeconds / 10\n        const airLevel = Math.min(1, Math.max(0, GameState.airLevel + diff))\n        if (GameState.airLevel !== airLevel) {\n            GameState.airLevel = airLevel\n            EventBus.publishEvent(new AirLevelChanged(GameState.airLevel))\n        }\n    }\n\n}\n","import { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../../params'\n\nexport class ScreenLayer {\n\n    canvas: HTMLCanvasElement\n    context: CanvasRenderingContext2D\n    onRedraw: (context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) => any\n    active: boolean = true\n\n    constructor(alpha: boolean, withContext: boolean) {\n        this.canvas = document.createElement('canvas')\n        if (!alpha) this.canvas.style.background = '#f0f'\n        if (withContext) this.context = this.canvas.getContext('2d', {alpha: alpha})\n        this.hide()\n    }\n\n    reset() {\n    }\n\n    setZIndex(zIndex: number) {\n        this.canvas.style.zIndex = String(zIndex)\n    }\n\n    static compareZ(layerA: ScreenLayer, layerB: ScreenLayer) {\n        let aIndex = layerA?.canvas?.style?.zIndex || 0\n        const bIndex = layerB?.canvas?.style?.zIndex || 0\n        return aIndex === bIndex ? 0 : aIndex > bIndex ? -1 : 1\n    }\n\n    resize(width, height) {\n        this.canvas.width = width\n        this.canvas.height = height\n    }\n\n    redraw() {\n        const callback = this.onRedraw\n        if (this.isActive() && callback) {\n            const context = this.context\n            requestAnimationFrame(() => callback(context))\n        }\n    }\n\n    show() {\n        this.reset()\n        this.active = true\n        this.canvas.style.visibility = 'visible'\n        this.redraw()\n    }\n\n    hide() {\n        this.active = false\n        this.canvas.style.visibility = 'hidden'\n    }\n\n    isActive() {\n        return this.active\n    }\n\n    toCanvasCoords(windowX: number, windowY: number) {\n        const clientRect = this.canvas.getBoundingClientRect()\n        return [windowX - clientRect.left, windowY - clientRect.top]\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        return new Promise((resolve) => resolve(false))\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): Promise<boolean> {\n        return new Promise((resolve) => resolve(false))\n    }\n\n    handleWheelEvent(event: GameWheelEvent): Promise<boolean> {\n        return new Promise((resolve) => resolve(false))\n    }\n\n}\n\nexport class ScaledLayer extends ScreenLayer {\n\n    fixedWidth: number = SPRITE_RESOLUTION_WIDTH\n    fixedHeight: number = SPRITE_RESOLUTION_HEIGHT\n    scaleX: number\n    scaleY: number\n\n    constructor(alpha: boolean = true, withContext: boolean = true) {\n        super(alpha, withContext)\n        this.updateScale()\n    }\n\n    private updateScale() {\n        this.scaleX = this.canvas.width / this.fixedWidth\n        this.scaleY = this.canvas.height / this.fixedHeight\n    }\n\n    toScaledCoords(windowX: number, windowY: number) {\n        const [cx, cy] = this.toCanvasCoords(windowX, windowY)\n        return [cx / this.scaleX, cy / this.scaleY].map((c) => Math.round(c))\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        this.updateScale()\n        this.context.scale(this.scaleX, this.scaleY)\n    }\n\n}\n","import { KEY_EVENT } from './EventTypeEnum'\n\nexport class GameKeyboardEvent {\n\n    eventEnum: KEY_EVENT\n    type: string\n    bubbles: boolean\n    key: string\n    code: string\n\n    constructor(eventEnum: KEY_EVENT, event: KeyboardEvent) {\n        this.eventEnum = eventEnum\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        this.key = event.key\n        this.code = event.code\n    }\n\n}\n","import { POINTER_EVENT } from './EventTypeEnum'\n\nexport class GamePointerEvent implements PointerEventInit {\n\n    type: string\n    eventEnum: POINTER_EVENT\n    bubbles: boolean\n    clientX: number\n    clientY: number\n    pointerType: string\n    button: number\n    ctrlKey: boolean\n    metaKey: boolean\n    shiftKey: boolean\n    canvasX: number\n    canvasY: number\n\n    constructor(eventEnum: POINTER_EVENT, event: PointerEvent) {\n        this.eventEnum = eventEnum\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        // all event attributes used by three.js controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n        this.clientX = event.clientX\n        this.clientY = event.clientY\n        this.pointerType = event.pointerType\n        this.button = event.button\n        this.ctrlKey = event.ctrlKey\n        this.metaKey = event.metaKey\n        this.shiftKey = event.shiftKey\n    }\n\n}\n","export class GameWheelEvent {\n\n    type: string\n    bubbles: boolean\n    clientX: number\n    clientY: number\n    deltaX: number\n    deltaY: number\n    deltaZ: number\n    button: number\n    ctrlKey: boolean\n    metaKey: boolean\n    shiftKey: boolean\n    canvasX: number\n    canvasY: number\n\n    constructor(event: WheelEvent) {\n        this.type = event.type\n        this.bubbles = false // disable bubbling otherwise we'll trigger this same event handler again\n        // all event attributes used by three.js controls: clientX, clientY, deltaY, keyCode, touches, button, ctrlKey, metaKey, shiftKey\n        this.clientX = event.clientX\n        this.clientY = event.clientY\n        this.deltaX = event.deltaX\n        this.deltaY = event.deltaY\n        this.deltaZ = event.deltaZ\n        this.button = event.button\n        this.ctrlKey = event.ctrlKey\n        this.metaKey = event.metaKey\n        this.shiftKey = event.shiftKey\n    }\n\n}\n","import { DEV_MODE } from '../params'\nimport { BaseScreen } from '../screen/BaseScreen'\nimport { ScreenLayer } from '../screen/layer/ScreenLayer'\nimport { KEY_EVENT, POINTER_EVENT } from './EventTypeEnum'\nimport { GameKeyboardEvent } from './GameKeyboardEvent'\nimport { GamePointerEvent } from './GamePointerEvent'\nimport { GameWheelEvent } from './GameWheelEvent'\n\nexport class EventManager {\n\n    constructor(screen: BaseScreen) {\n        screen.gameCanvasContainer.addEventListener('contextmenu', (event: MouseEvent) => {\n            if (screen.isInRect(event)) event.preventDefault()\n        })\n        new Map<string, POINTER_EVENT>([\n            ['pointermove', POINTER_EVENT.MOVE],\n            ['pointerdown', POINTER_EVENT.DOWN],\n            ['pointerup', POINTER_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: PointerEvent) => {\n                if (!screen.isInRect(event)) return\n                event.preventDefault()\n                const nonBubblingClone = new GamePointerEvent(eventEnum, event)\n                const activeLayers = screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                EventManager.publishPointerEvent(activeLayers, nonBubblingClone)\n            })\n        })\n        new Map<string, KEY_EVENT>([\n            ['keydown', KEY_EVENT.DOWN],\n            ['keyup', KEY_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: KeyboardEvent) => {\n                if (!DEV_MODE) event.preventDefault()\n                const nonBubblingClone = new GameKeyboardEvent(eventEnum, event)\n                const activeLayers = screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                EventManager.publishKeyEvent(activeLayers, nonBubblingClone)\n            })\n        })\n        screen.gameCanvasContainer.addEventListener('wheel', (event: WheelEvent) => {\n            if (!screen.isInRect(event)) return\n            const nonBubblingClone = new GameWheelEvent(event)\n            const activeLayers = screen.layers.filter(l => l.isActive())\n                .sort((a, b) => ScreenLayer.compareZ(a, b))\n            EventManager.publishWheelEvent(activeLayers, nonBubblingClone)\n        })\n    }\n\n    private static publishPointerEvent(activeLayers: ScreenLayer[], event: GamePointerEvent) {\n        activeLayers.shift()?.handlePointerEvent(event).then((consumed) => {\n            if (!consumed) this.publishPointerEvent(activeLayers, event)\n        })\n    }\n\n    private static publishKeyEvent(activeLayers: ScreenLayer[], event: GameKeyboardEvent) {\n        activeLayers.shift()?.handleKeyEvent(event).then((consumed) => {\n            if (!consumed) this.publishKeyEvent(activeLayers, event)\n        })\n    }\n\n    private static publishWheelEvent(activeLayers: ScreenLayer[], event: GameWheelEvent) {\n        activeLayers.shift()?.handleWheelEvent(event).then((consumed) => {\n            if (!consumed) this.publishWheelEvent(activeLayers, event)\n        })\n    }\n\n}\n","import { iGet } from '../../core/Util'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { IEventHandler } from '../../event/IEventHandler'\nimport { ChangeCursor } from '../../event/LocalEvents'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Cursors } from '../Cursors'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class CursorLayer extends ScreenLayer {\n\n    pointersCfg\n    curUrl\n\n    constructor(parent: IEventHandler) {\n        super(true, false)\n        parent.registerEventListener(EventKey.CHANGE_CURSOR, (event: ChangeCursor) => {\n            this.changeCursor(event.cursor)\n        })\n    }\n\n    show() {\n        super.show()\n        this.pointersCfg = ResourceManager.cfg('Pointers')\n        this.changeCursor(Cursors.Pointer_Standard)\n    }\n\n    hide() {\n        super.hide()\n        this.canvas.style.cursor = null\n    }\n\n    private changeCursor(cursor: Cursors) {\n        if (this.curUrl) URL.revokeObjectURL(this.curUrl)\n        if (!this.pointersCfg) return\n        const cursorFilename = iGet(this.pointersCfg, Cursors[cursor])\n        const curImg = ResourceManager.getImage(cursorFilename)\n        this.curUrl = curImg.toDataURL()\n        // no resized possible; Chrome limits cursor size to 32x32 anyway\n        this.canvas.style.cursor = 'url(' + this.curUrl + '), auto'\n    }\n\n}\n","import { EventBus } from '../event/EventBus'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { EventManager } from '../event/EventManager'\nimport { GameEvent } from '../event/GameEvent'\nimport { IEventHandler } from '../event/IEventHandler'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../params'\nimport { CursorLayer } from './layer/CursorLayer'\nimport { ScreenLayer } from './layer/ScreenLayer'\n\nexport class BaseScreen implements IEventHandler {\n\n    gameCanvasContainer: HTMLElement\n    eventMgr: EventManager\n    layers: ScreenLayer[] = []\n    width: number = SPRITE_RESOLUTION_WIDTH\n    height: number = SPRITE_RESOLUTION_HEIGHT\n    ratio: number = SPRITE_RESOLUTION_WIDTH / SPRITE_RESOLUTION_HEIGHT\n    cursorLayer: CursorLayer\n\n    constructor() {\n        this.gameCanvasContainer = document.getElementById('game-canvas-container')\n        this.gameCanvasContainer.focus()\n        this.eventMgr = new EventManager(this)\n        if (!this.gameCanvasContainer) throw 'Fatal error: game canvas container not found!'\n        window.addEventListener('resize', () => this.onWindowResize())\n        this.onWindowResize()\n        this.cursorLayer = this.addLayer(new CursorLayer(this), 1000)\n    }\n\n    addLayer<T extends ScreenLayer>(layer: T, zIndex: number = 0): T {\n        layer.resize(this.width, this.height)\n        layer.setZIndex(zIndex)\n        this.layers.push(layer)\n        this.gameCanvasContainer.appendChild(layer.canvas)\n        return layer\n    }\n\n    redraw() {\n        this.layers.forEach((layer) => layer.redraw())\n    }\n\n    show() {\n        this.layers.forEach((layer) => layer.show())\n        this.redraw()\n    }\n\n    hide() {\n        this.layers.forEach((layer) => layer.hide())\n    }\n\n    onWindowResize() {\n        const maxWidth = this.gameCanvasContainer.offsetWidth, maxHeight = this.gameCanvasContainer.offsetHeight\n        const idealHeight = Math.round(maxWidth / this.ratio)\n        if (idealHeight > maxHeight) {\n            this.resize(Math.round(maxHeight * this.ratio), maxHeight)\n        } else {\n            this.resize(maxWidth, idealHeight)\n        }\n    }\n\n    resize(width: number, height: number) {\n        this.width = width\n        this.height = height\n        this.layers.forEach((layer) => {\n            const oldCanvas = layer.canvas\n            layer.resize(width, height)\n            if (oldCanvas !== layer.canvas) { // TODO refactor this\n                this.gameCanvasContainer.removeChild(oldCanvas)\n                this.gameCanvasContainer.appendChild(layer.canvas)\n            }\n        })\n        this.redraw()\n    }\n\n    isInRect(event: MouseEvent | WheelEvent) {\n        if (this.layers.length < 1) return false\n        const firstLayer = this.layers[0] // all layers have same state and size\n        if (!firstLayer.isActive() || !firstLayer.canvas) return false\n        const rect = firstLayer.canvas.getBoundingClientRect()\n        const clientX = event.clientX, clientY = event.clientY\n        return clientX >= rect.left && clientX < rect.right && clientY >= rect.top && clientY < rect.bottom\n    }\n\n    publishEvent(event: GameEvent): void {\n        EventBus.publishEvent(event)\n    }\n\n    registerEventListener(eventKey: EventKey, callback: (GameEvent) => any): void {\n        EventBus.registerEventListener(eventKey, callback)\n    }\n\n}\n","import { EntityType } from '../game/model/EntityType'\nimport { PriorityEntry } from '../game/model/job/PriorityList'\nimport { RaiderTool } from '../game/model/raider/RaiderTool'\nimport { RaiderTraining } from '../game/model/raider/RaiderTraining'\nimport { EventKey } from './EventKeyEnum'\nimport { LocalEvent } from './LocalEvents'\n\nexport class GuiCommand extends LocalEvent {\n}\n\nexport class CancelBuildMode extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CANCEL_BUILD_MODE)\n    }\n\n}\n\nexport class SelectBuildMode extends GuiCommand {\n\n    entityType: EntityType\n\n    constructor(entityType: EntityType) {\n        super(EventKey.COMMAND_SELECT_BUILD_MODE)\n        this.entityType = entityType\n    }\n\n}\n\nexport class SelectedRaiderPickTool extends GuiCommand {\n\n    tool: RaiderTool\n\n    constructor(tool: RaiderTool) {\n        super(EventKey.COMMAND_PICK_TOOL)\n        this.tool = tool\n    }\n\n}\n\nexport class CreatePowerPath extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_POWER_PATH)\n    }\n\n}\n\nexport class PlaceFence extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_PLACE_FENCE)\n    }\n\n}\n\nexport class MakeRubble extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_MAKE_RUBBLE)\n    }\n\n}\n\nexport class ChangeRaiderSpawnRequest extends GuiCommand {\n\n    increase: boolean\n\n    constructor(increase: boolean) {\n        super(EventKey.COMMAND_CHANGE_RAIDER_SPAWN_REQUEST)\n        this.increase = increase\n    }\n\n}\n\nexport class CreateClearRubbleJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_CLEAR_RUBBLE_JOB)\n    }\n\n}\n\nexport class UpgradeBuilding extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_UPGRADE_BUILDING)\n    }\n\n}\n\nexport class BeamUpBuilding extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_BUILDING_BEAMUP)\n    }\n\n}\n\nexport class ChangePriorityList extends GuiCommand {\n\n    priorityList: PriorityEntry[]\n\n    constructor(priorityList: PriorityEntry[]) {\n        super(EventKey.CHANGE_PRIORITY_LIST)\n        this.priorityList = priorityList\n    }\n\n}\n\nexport class ChangeBuildingPowerState extends GuiCommand {\n\n    state: boolean\n\n    constructor(state: boolean) {\n        super(EventKey.COMMAND_CHANGE_BUILDING_POWER_STATE)\n        this.state = state\n    }\n\n}\n\nexport class CreateDrillJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_DRILL_JOB)\n    }\n\n}\n\nexport class CreateReinforceJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_REINFORCE_JOB)\n    }\n\n}\n\nexport class CreateDynamiteJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_DYNAMITE_JOB)\n    }\n\n}\n\nexport class CancelSurfaceJobs extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CANCEL_SURFACE_JOBS)\n    }\n\n}\n\nexport class RaiderEat extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_EAT)\n    }\n\n}\n\nexport class RaiderDrop extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_DROP)\n    }\n\n}\n\nexport class RaiderUpgrade extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_UPGRADE)\n    }\n\n}\n\nexport class RaiderBeamUp extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_BEAMUP)\n    }\n\n}\n\nexport class TrainRaider extends GuiCommand {\n\n    training: RaiderTraining\n\n    constructor(training: RaiderTraining) {\n        super(EventKey.COMMAND_TRAIN_RAIDER)\n        this.training = training\n    }\n\n}\n","import { Raycaster, Vector2 } from 'three'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { KEY_EVENT, MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GameEvent } from '../../event/GameEvent'\nimport { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { CancelBuildMode } from '../../event/GuiCommand'\nimport { IEventHandler } from '../../event/IEventHandler'\nimport { ChangeCursor, SelectionChanged } from '../../event/LocalEvents'\nimport { BuildingSite } from '../../game/model/building/BuildingSite'\nimport { EntityType } from '../../game/model/EntityType'\nimport { FulfillerEntity } from '../../game/model/FulfillerEntity'\nimport { GameState } from '../../game/model/GameState'\nimport { Job } from '../../game/model/job/Job'\nimport { MoveJob } from '../../game/model/job/MoveJob'\nimport { Surface } from '../../game/model/map/Surface'\nimport { SurfaceType } from '../../game/model/map/SurfaceType'\nimport { Raider } from '../../game/model/raider/Raider'\nimport { SelectionType } from '../../game/model/Selectable'\nimport { SceneManager } from '../../game/SceneManager'\nimport { WorldManager } from '../../game/WorldManager'\nimport { DEV_MODE } from '../../params'\nimport { Cursors } from '../Cursors'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class GameLayer extends ScreenLayer implements IEventHandler {\n\n    parent: IEventHandler\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    private rightDown: { x: number, y: number } = {x: 0, y: 0}\n    private lastCursor: Cursors = Cursors.Pointer_Standard\n\n    constructor(parent: IEventHandler) {\n        super(false, false)\n        this.parent = parent\n    }\n\n    reset() {\n        super.reset()\n        this.rightDown = {x: 0, y: 0}\n        this.lastCursor = Cursors.Pointer_Standard\n    }\n\n    hide() {\n        super.hide()\n        this.publishEvent(new ChangeCursor(Cursors.Pointer_Standard))\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        const buildMarker = this.sceneMgr.buildMarker\n        if (event.eventEnum === POINTER_EVENT.MOVE) {\n            const intersectionPoint = this.getTerrainPositionFromEvent(event)\n            if (intersectionPoint) this.sceneMgr.setTorchPosition(intersectionPoint)\n            buildMarker.update(this.sceneMgr.terrain, intersectionPoint)\n            this.updateCursor(event)\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                if (GameState.buildModeSelection && buildMarker.lastCheck) {\n                    buildMarker.visibleSurfaces.forEach((s) => {\n                        s.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                        s.updateTexture()\n                        s.neighbors.forEach((n) => n.updateTexture())\n                    })\n                    const barrierLocations = buildMarker.getBarrierLocations()\n                    const stats = GameState.buildModeSelection.stats\n                    const neededCrystals = stats?.CostCrystal || 0\n                    const neededOre = stats?.CostOre || 0\n                    const site = new BuildingSite(buildMarker.primarySurface, buildMarker.secondarySurface, GameState.buildModeSelection)\n                    site.heading = buildMarker.heading\n                    site.neededByType.set(EntityType.BARRIER, barrierLocations.length)\n                    site.neededByType.set(EntityType.CRYSTAL, neededCrystals)\n                    site.neededByType.set(EntityType.ORE, neededOre)\n                    GameState.buildingSites.push(site)\n                    const closestToolstation = GameState.getClosestBuildingByType(buildMarker.primarySurface.getCenterWorld(), EntityType.TOOLSTATION)\n                    if (closestToolstation) {\n                        closestToolstation.spawnBarriers(barrierLocations, site)\n                        closestToolstation.spawnMaterials(EntityType.CRYSTAL, neededCrystals)\n                        closestToolstation.spawnMaterials(EntityType.ORE, neededOre)\n                    }\n                    this.publishEvent(new SelectionChanged())\n                    this.publishEvent(new CancelBuildMode())\n                }\n            } else if (event.button === MOUSE_BUTTON.SECONDARY) {\n                const downUpDistance = Math.abs(event.clientX - this.rightDown.x) + Math.abs(event.clientY - this.rightDown.y)\n                if (downUpDistance < 3 && (GameState.selectionType === SelectionType.RAIDER || GameState.selectionType === SelectionType.GROUP)) {\n                    // TODO check for collectable entity first\n                    const intersectionPoint = this.getTerrainPositionFromEvent(event)\n                    if (intersectionPoint) {\n                        const surface = this.sceneMgr.terrain.getSurfaceFromWorldXZ(intersectionPoint.x, intersectionPoint.y)\n                        if (surface) {\n                            if (surface.isDrillable()) {\n                                this.assignSurfaceJob(surface.createDrillJob(), surface, intersectionPoint)\n                            } else if (surface.hasRubble()) {\n                                this.assignSurfaceJob(surface.createClearRubbleJob(), surface, intersectionPoint)\n                            } else if (surface.isWalkable()) {\n                                GameState.selectedEntities.forEach((raider: Raider) => raider.setJob(new MoveJob(intersectionPoint)))\n                                if (GameState.selectedEntities.length > 0) this.publishEvent(new SelectionChanged())\n                            }\n                        }\n                    }\n                } else {\n                    GameState.buildModeSelection = null\n                    buildMarker.hideAllMarker()\n                }\n            }\n        } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.SECONDARY) {\n                this.rightDown.x = event.clientX\n                this.rightDown.y = event.clientY\n            }\n        }\n        this.canvas.dispatchEvent(new PointerEvent(event.type, event))\n        return new Promise((resolve) => resolve(true))\n    }\n\n    updateCursor(event) {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.sceneMgr.camera)\n        const cursor = this.determineCursor(raycaster)\n        if (cursor !== this.lastCursor) {\n            this.lastCursor = cursor\n            this.publishEvent(new ChangeCursor(cursor))\n        }\n    }\n\n    determineCursor(raycaster: Raycaster): Cursors {\n        let intersects = raycaster.intersectObjects(GameState.raiders.map((r) => r.pickSphere))\n        if (intersects.length > 0) {\n            return Cursors.Pointer_Selected\n        } else {\n            let intersects = raycaster.intersectObjects(GameState.buildings.map((b) => b.pickSphere))\n            if (intersects.length > 0) {\n                return Cursors.Pointer_Selected\n            } else {\n                intersects = raycaster.intersectObjects(this.sceneMgr.terrain.floorGroup.children)\n                if (intersects.length > 0) {\n                    const userData = intersects[0].object.userData\n                    if (userData && userData.hasOwnProperty('surface')) {\n                        const surface = userData['surface'] as Surface\n                        if (surface) {\n                            return surface.surfaceType.cursor\n                        }\n                    }\n                }\n            }\n        }\n        return Cursors.Pointer_Standard\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): Promise<boolean> {\n        if (DEV_MODE && event.eventEnum === KEY_EVENT.UP) {\n            if (GameState.selectionType === SelectionType.SURFACE) {\n                if (event.code === 'KeyC') {\n                    GameState.selectedEntities.forEach((s: Surface) => {\n                        if (!s.surfaceType.floor) s.collapse()\n                    })\n                    this.publishEvent(new SelectionChanged())\n                    return new Promise((resolve) => resolve(true))\n                } else if (event.code === 'KeyF') {\n                    GameState.selectedEntities.forEach((s: Surface) => {\n                        const t = s.terrain.findFallInTarget(s.x, s.y)\n                        if (!s.surfaceType.floor) s.createFallin(t[0], t[1])\n                    })\n                    this.publishEvent(new SelectionChanged())\n                    return new Promise((resolve) => resolve(true))\n                }\n            }\n        }\n        this.canvas.dispatchEvent(new KeyboardEvent(event.type, event))\n        return new Promise((resolve) => resolve(true))\n    }\n\n    assignSurfaceJob(job: Job, surface: Surface, intersectionPoint: Vector2) {\n        if (!job) return\n        GameState.selectedEntities.forEach((e: FulfillerEntity) => {\n            if (e.hasTool(job.getRequiredTool()) && e.hasTraining(job.getRequiredTraining())) {\n                e.setJob(job)\n            } else if (surface.isWalkable()) {\n                e.setJob(new MoveJob(intersectionPoint))\n            }\n        })\n        if (GameState.selectedEntities.length > 0) this.publishEvent(new SelectionChanged())\n    }\n\n    getTerrainPositionFromEvent(event): Vector2 {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        return this.sceneMgr.getTerrainIntersectionPoint(rx, ry)\n    }\n\n    handleWheelEvent(event: GameWheelEvent): Promise<boolean> {\n        this.canvas.dispatchEvent(new WheelEvent(event.type, event))\n        return new Promise((resolve) => resolve(true))\n    }\n\n    publishEvent(event: GameEvent): void {\n        this.parent?.publishEvent(event)\n    }\n\n    registerEventListener(eventKey: EventKey, callback: (GameEvent) => any): void {\n        this.parent.registerEventListener(eventKey, callback)\n    }\n\n}\n","import { MathUtils } from 'three'\nimport { EventBus } from '../../event/EventBus'\nimport { GameEvent } from '../../event/GameEvent'\nimport { GameKeyboardEvent } from '../../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameWheelEvent } from '../../event/GameWheelEvent'\nimport { BuildingsChangedEvent, RaidersChangedEvent } from '../../event/LocalEvents'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { WorkerMessageType } from '../../resource/wadworker/WorkerMessageType'\nimport { GuiWorkerMessage } from '../../worker/GuiWorkerMessage'\nimport { WorkerEventResponse } from '../../worker/WorkerEventResponse'\nimport { WorkerPublishEvent } from '../../worker/WorkerPublishEvent'\nimport { WorkerResponse } from '../../worker/WorkerResponse'\nimport { ScreenLayer } from './ScreenLayer'\nimport generateUUID = MathUtils.generateUUID\n\nexport abstract class OffscreenLayer extends ScreenLayer {\n\n    private worker: Worker\n    resolveCallbackByEventId: Map<string, ((consumed: boolean) => any)> = new Map()\n\n    protected constructor(worker: Worker) {\n        super(true, false)\n        this.worker = worker\n        this.sendMessage({\n            type: WorkerMessageType.INIT,\n            resourceByName: ResourceManager.resourceByName,\n            cfg: ResourceManager.configuration,\n            stats: ResourceManager.stats,\n        })\n        this.worker.onmessage = (event) => {\n            const response = event.data as WorkerResponse\n            if (response.type === WorkerMessageType.RESPONSE_EVENT) {\n                const eventResponse = response as WorkerEventResponse\n                const resolve = this.resolveCallbackByEventId.get(eventResponse.eventId)\n                resolve(eventResponse.eventConsumed)\n                this.resolveCallbackByEventId.delete(eventResponse.eventId)\n            } else if (response.type === WorkerMessageType.GAME_EVENT) {\n                const event = (response as WorkerPublishEvent).gameEvent\n                EventBus.publishEvent(event)\n            } else if (!this.onMessage(response)) {\n                console.warn('Offscreen layer ignored message: ' + WorkerMessageType[response.type])\n            }\n        }\n        EventBus.registerWorkerListener((event: GameEvent) => {\n            if (!event.guiForward) return\n            try {\n                this.sendMessage({type: WorkerMessageType.GAME_EVENT, gameEvent: event})\n            } catch (e) {\n                console.warn('Could not send event to GUI worker: ', e, event)\n            }\n        })\n    }\n\n    abstract onMessage(msg): boolean\n\n    protected sendMessage(message: GuiWorkerMessage, transfer?: Transferable[]) {\n        this.worker.postMessage(message, transfer)\n    }\n\n    reset() {\n        this.sendMessage({type: WorkerMessageType.RESET})\n        this.sendMessage({type: WorkerMessageType.GAME_EVENT, gameEvent: new BuildingsChangedEvent()})\n        this.sendMessage({type: WorkerMessageType.GAME_EVENT, gameEvent: new RaidersChangedEvent()})\n        this.sendMessage({type: WorkerMessageType.GAME_EVENT, gameEvent: new MaterialAmountChanged()})\n    }\n\n    resize(width, height) {\n        const zIndex = Number(this.canvas.style.zIndex) || 0\n        this.canvas = document.createElement('canvas')\n        if (!this.active) this.canvas.style.visibility = 'hidden'\n        super.resize(width, height)\n        this.setZIndex(zIndex)\n        const canvas = this.canvas.transferControlToOffscreen()\n        this.sendMessage({\n            type: WorkerMessageType.CANVAS,\n            canvas: canvas,\n        }, [canvas])\n    }\n\n    redraw() {\n        if (this.isActive()) this.sendMessage({type: WorkerMessageType.REDRAW})\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        [event.canvasX, event.canvasY] = this.toCanvasCoords(event.clientX, event.clientY)\n        return this.sendEventMessage(WorkerMessageType.EVENT_POINTER, event)\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): Promise<boolean> {\n        return this.sendEventMessage(WorkerMessageType.EVENT_KEY, event)\n    }\n\n    handleWheelEvent(event: GameWheelEvent): Promise<boolean> {\n        [event.canvasX, event.canvasY] = this.toCanvasCoords(event.clientX, event.clientY)\n        return this.sendEventMessage(WorkerMessageType.EVENT_POINTER, event)\n    }\n\n    private sendEventMessage(type: WorkerMessageType, event: GamePointerEvent | GameKeyboardEvent | GameWheelEvent): Promise<boolean> {\n        const eventId = generateUUID()\n        this.sendMessage({\n            type: type,\n            eventId: eventId,\n            inputEvent: event,\n        })\n        return new Promise((resolve) => this.resolveCallbackByEventId.set(eventId, resolve))\n    }\n\n}\n","import { WorkerMessageType } from '../../resource/wadworker/WorkerMessageType'\nimport { OffscreenLayer } from './OffscreenLayer'\n\nexport class GuiMainLayer extends OffscreenLayer {\n\n    onOptionsShow: () => any = () => console.log('Show options triggered')\n\n    constructor() {\n        super(new Worker(new URL('../../worker/GuiMainWorker', import.meta.url))) // webpack does not allow to extract the URL\n    }\n\n    onMessage(msg): boolean {\n        if (msg.type === WorkerMessageType.SHOW_OPTIONS) {\n            this.onOptionsShow()\n        } else {\n            return false\n        }\n        return true\n    }\n\n    setSpaceToContinue(state: boolean) {\n        this.sendMessage({type: WorkerMessageType.SPACE_TO_CONINUE, messageState: state})\n    }\n\n}\n","import { ObjectiveImageCfg } from '../../cfg/ObjectiveImageCfg'\nimport { WorkerMessageType } from '../../resource/wadworker/WorkerMessageType'\nimport { WorkerResponse } from '../../worker/WorkerResponse'\nimport { OffscreenLayer } from './OffscreenLayer'\n\nexport class OverlayLayer extends OffscreenLayer {\n\n    onSetSpaceToContinue: (state: boolean) => any = (state: boolean) => console.log('set space to continue: ' + state)\n    onAbortGame: () => any = () => console.log('abort the game')\n    onRestartGame: () => any = () => console.log('pause the game')\n\n    constructor() {\n        super(new Worker(new URL('../../worker/OverlayWorker', import.meta.url))) // webpack does not allow to extract the URL\n    }\n\n    onMessage(msg: WorkerResponse): boolean {\n        if (msg.type === WorkerMessageType.SPACE_TO_CONINUE) {\n            this.onSetSpaceToContinue(msg.messageState)\n        } else if (msg.type === WorkerMessageType.GAME_ABORT) {\n            this.onAbortGame()\n        } else if (msg.type === WorkerMessageType.GAME_RESTART) {\n            this.onRestartGame()\n        } else {\n            return false\n        }\n        return true\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.sendMessage({\n            type: WorkerMessageType.OVERLAY_SETUP,\n            objectiveText: objectiveText,\n            objectiveBackImgCfg: objectiveBackImgCfg,\n        })\n    }\n\n    showOptions() {\n        this.sendMessage({type: WorkerMessageType.SHOW_OPTIONS})\n    }\n\n}\n","import { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { GamePointerEvent } from '../../event/GamePointerEvent'\nimport { GameState } from '../../game/model/GameState'\nimport { SceneManager } from '../../game/SceneManager'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class SelectionLayer extends ScreenLayer {\n\n    sceneMgr: SceneManager\n    selectStart: { x: number, y: number } = null\n\n    constructor() {\n        super(true, true)\n    }\n\n    reset() {\n        super.reset()\n        this.selectStart = null\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        if (GameState.buildModeSelection) return new Promise((resolve) => resolve(false))\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) return new Promise((resolve) => resolve(this.startSelection(cx, cy)))\n        } else if (event.eventEnum === POINTER_EVENT.MOVE) {\n            return new Promise((resolve) => resolve(this.changeSelection(cx, cy)))\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) return new Promise((resolve) => resolve(this.selectEntities(cx, cy)))\n        }\n        return new Promise((resolve) => resolve(false))\n    }\n\n    startSelection(screenX: number, screenY: number) {\n        this.selectStart = {x: screenX, y: screenY}\n        return true\n    }\n\n    changeSelection(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        this.context.strokeStyle = 'rgba(128, 192, 192, 0.5)'\n        this.context.lineWidth = 2\n        this.context.strokeRect(this.selectStart.x, this.selectStart.y, screenX - this.selectStart.x, screenY - this.selectStart.y)\n        return true\n    }\n\n    selectEntities(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        const r1x = (this.selectStart.x / this.canvas.width) * 2 - 1\n        const r1y = -(this.selectStart.y / this.canvas.height) * 2 + 1\n        const r2x = (screenX / this.canvas.width) * 2 - 1\n        const r2y = -(screenY / this.canvas.height) * 2 + 1\n        if (Math.abs(screenX - this.selectStart.x) < 5 && Math.abs(screenY - this.selectStart.y) < 5) {\n            const x = (this.selectStart.x + screenX) / this.canvas.width - 1\n            const y = -(this.selectStart.y + screenY) / this.canvas.height + 1\n            this.sceneMgr.selectEntitiesByRay(x, y)\n        } else {\n            this.sceneMgr.selectEntitiesInFrustum(r1x, r1y, r2x, r2y)\n        }\n        this.selectStart = null\n        return true\n    }\n\n}\n","import { MathUtils, Vector2 } from 'three'\nimport { LevelObjectiveTextEntry } from '../cfg/LevelObjectiveTextEntry'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { clearIntervalSafe, getRandom, iGet } from '../core/Util'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { RaidersChangedEvent } from '../event/LocalEvents'\nimport { RequestedRaidersChanged } from '../event/WorldEvents'\nimport { GuiManager } from '../game/GuiManager'\nimport { RaiderActivity } from '../game/model/activities/RaiderActivity'\nimport { EntityType } from '../game/model/EntityType'\nimport { GameState } from '../game/model/GameState'\nimport { MoveJob } from '../game/model/job/MoveJob'\nimport { Raider } from '../game/model/raider/Raider'\nimport { ObjectListLoader } from '../game/ObjectListLoader'\nimport { SceneManager } from '../game/SceneManager'\nimport { Supervisor } from '../game/Supervisor'\nimport { WorldManager } from '../game/WorldManager'\nimport { CHECK_SPANW_RAIDER_TIMER, TILESIZE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\nimport { GameLayer } from './layer/GameLayer'\nimport { GuiMainLayer } from './layer/GuiMainLayer'\nimport { OverlayLayer } from './layer/OverlayLayer'\nimport { SelectionLayer } from './layer/SelectionLayer'\nimport degToRad = MathUtils.degToRad\n\nexport class GameScreen extends BaseScreen {\n\n    onLevelEnd: () => void = () => console.log('Level aborted')\n    gameLayer: GameLayer\n    selectionLayer: SelectionLayer\n    guiLayer: GuiMainLayer\n    overlayLayer: OverlayLayer\n    worldMgr: WorldManager\n    sceneMgr: SceneManager\n    guiMgr: GuiManager\n    spawnRaiderInterval = null\n    jobSupervisor: Supervisor\n    levelName: string\n    levelConf: LevelEntryCfg\n\n    constructor() {\n        super()\n        this.gameLayer = this.addLayer(new GameLayer(this), 0)\n        this.selectionLayer = this.addLayer(new SelectionLayer(), 10)\n        this.guiLayer = this.addLayer(new GuiMainLayer(), 20)\n        this.overlayLayer = this.addLayer(new OverlayLayer(), 30)\n        this.worldMgr = new WorldManager()\n        this.gameLayer.worldMgr = this.worldMgr\n        this.sceneMgr = new SceneManager(this.gameLayer.canvas)\n        this.gameLayer.sceneMgr = this.sceneMgr\n        this.selectionLayer.sceneMgr = this.sceneMgr\n        this.jobSupervisor = new Supervisor(this.worldMgr)\n        this.guiMgr = new GuiManager(this.worldMgr, this.sceneMgr)\n        // link layer\n        this.guiLayer.onOptionsShow = () => this.overlayLayer.showOptions()\n        this.overlayLayer.onSetSpaceToContinue = (state: boolean) => this.guiLayer.setSpaceToContinue(state)\n        this.overlayLayer.onAbortGame = () => this.onLevelEnd()\n        this.overlayLayer.onRestartGame = () => this.restartLevel()\n        this.registerEventListener(EventKey.REQUESTED_RAIDERS_CHANGED, () => {\n            if (GameState.requestedRaiders > 0 && !this.spawnRaiderInterval) {\n                this.spawnRaiderInterval = setInterval(this.checkSpawnRaiders.bind(this), CHECK_SPANW_RAIDER_TIMER)\n            }\n        })\n    }\n\n    startLevel(levelName) {\n        this.levelName = levelName\n        this.levelConf = ResourceManager.getResource('Levels').levelsByName[this.levelName]\n        if (!this.levelConf) throw 'Could not find level configuration for \"' + this.levelName + '\"'\n        this.setupAndStartLevel()\n    }\n\n    restartLevel() {\n        this.hide()\n        GameState.reset()\n        this.setupAndStartLevel()\n    }\n\n    private setupAndStartLevel() {\n        console.log('Starting level ' + this.levelName + ' - ' + this.levelConf.fullName)\n        this.worldMgr.setup(this.levelConf, () => this.onLevelEnd())\n        this.sceneMgr.setupScene(this.levelConf, this.worldMgr)\n        // setup GUI\n        const objectiveText: LevelObjectiveTextEntry = iGet(ResourceManager.getResource(this.levelConf.objectiveText), this.levelName)\n        this.guiLayer.reset()\n        this.overlayLayer.setup(objectiveText.objective, this.levelConf.objectiveImage640x480)\n        // load in non-space objects next\n        const objectListConf = ResourceManager.getResource(this.levelConf.oListFile)\n        ObjectListLoader.loadObjectList(this.worldMgr, this.sceneMgr, objectListConf, this.levelConf.disableStartTeleport)\n        this.show()\n    }\n\n    show() {\n        super.show()\n        this.sceneMgr.startScene()\n        this.worldMgr.start()\n        this.jobSupervisor.start()\n    }\n\n    hide() {\n        this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n        this.jobSupervisor.stop()\n        this.worldMgr.stop()\n        this.sceneMgr.disposeScene()\n        super.hide()\n    }\n\n    resize(width: number, height: number) {\n        super.resize(width, height)\n        this.sceneMgr?.resize(width, height)\n    }\n\n    checkSpawnRaiders() {\n        if (GameState.requestedRaiders < 1) {\n            this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n            return\n        }\n        if (GameState.raiders.length >= GameState.getMaxRaiders()) return\n        const spawnBuildings = GameState.getBuildingsByType(EntityType.TOOLSTATION, EntityType.TELEPORT_PAD)\n        for (let c = 0; c < spawnBuildings.length && GameState.requestedRaiders > 0; c++) {\n            const station = spawnBuildings[c]\n            if (station.spawning) continue\n            GameState.requestedRaiders--\n            this.publishEvent(new RequestedRaidersChanged(GameState.requestedRaiders))\n            station.spawning = true\n            const raider = new Raider(this.worldMgr, this.sceneMgr)\n            const heading = station.getHeading()\n            raider.changeActivity(RaiderActivity.TeleportIn, () => {\n                station.spawning = false\n                raider.changeActivity()\n                raider.createPickSphere()\n                const walkOutPos = station.getPosition2D().add(new Vector2(0, TILESIZE * 3 / 4 + getRandom(TILESIZE / 2))\n                    .rotateAround(new Vector2(0, 0), heading + degToRad(-10 + getRandom(20))))\n                raider.setJob(new MoveJob(walkOutPos))\n                GameState.raiders.push(raider)\n                this.publishEvent(new RaidersChangedEvent())\n            })\n            raider.addToScene(new Vector2(0, TILESIZE / 2).rotateAround(new Vector2(0, 0), station.getHeading()).add(station.getPosition2D()), heading)\n        }\n    }\n\n}\n","export class MainMenuBaseItem {\n\n    x: number = 0\n    y: number = 0\n    width: number = 0\n    height: number = 0\n    zIndex: number = 100\n    scrollAffected = false\n    needsRedraw: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n    actionName: string = ''\n    targetIndex: number = 0\n\n    static compareZ(left: MainMenuBaseItem, right: MainMenuBaseItem) {\n        return left.zIndex === right.zIndex ? 0 : left.zIndex > right.zIndex ? -1 : 1\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const hover = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        if (this.hover !== hover) {\n            this.hover = hover\n            this.needsRedraw = true\n            this.onHoverChange()\n        }\n        if (!this.hover) this.pressed = false\n        return this.hover\n    }\n\n    onHoverChange() {\n    }\n\n    checkSetPressed() {\n        if (!this.hover) return\n        if (!this.pressed) this.needsRedraw = true\n        this.pressed = true\n    }\n\n    setReleased() {\n        if (this.pressed) this.needsRedraw = true\n        this.pressed = false\n    }\n\n    draw(context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) {\n        this.needsRedraw = false\n    }\n\n}\n","import { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuIconButton extends MainMenuBaseItem {\n\n    imgNormal = null\n    imgHover = null\n    imgPressed = null\n    tooltip = ''\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.imgNormal = ResourceManager.getImage(cfg.imgNormal)\n        this.imgHover = ResourceManager.getImage(cfg.imgHover)\n        this.imgPressed = ResourceManager.getImage(cfg.imgPressed)\n        this.tooltip = (cfg.tooltip || '').replace(/_/g, ' ')\n        this.width = Math.max(this.imgNormal.width, this.imgHover.width, this.imgPressed.width)\n        this.height = Math.max(this.imgNormal.height, this.imgHover.height, this.imgPressed.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgNormal\n        if (this.hover) img = this.imgHover\n        if (this.pressed) img = this.imgPressed\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuLabelButton extends MainMenuBaseItem {\n\n    labelImgLo = null\n    labelImgHi = null\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.labelImgLo = layer.loFont.createTextImage(cfg.label)\n        this.labelImgHi = layer.hiFont.createTextImage(cfg.label)\n        this.width = Math.max(this.labelImgLo.width, this.labelImgHi.width)\n        this.height = Math.max(this.labelImgLo.height, this.labelImgHi.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) {\n        super.draw(context)\n        const img = this.hover && !this.pressed ? this.labelImgHi : this.labelImgLo\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { clearIntervalSafe } from '../core/Util'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { GamePointerEvent } from '../event/GamePointerEvent'\nimport { GameWheelEvent } from '../event/GameWheelEvent'\nimport { NATIVE_FRAMERATE } from '../params'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from '../screen/layer/ScreenLayer'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuIconButton } from './MainMenuIconButton'\nimport { MainMenuLabelButton } from './MainMenuLabelButton'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\n\nexport class MainMenuLayer extends ScaledLayer {\n\n    screen: MainMenuScreen\n    cfg: MenuEntryCfg\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    items: MainMenuBaseItem[] = []\n    scrollY: number = 0\n    scrollSpeedY: number = 0\n    scrollInterval = null\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg) {\n        super()\n        this.screen = screen\n        this.cfg = menuCfg\n        this.loFont = menuCfg.loFont ? ResourceManager.getBitmapFont(menuCfg.loFont) : null\n        this.hiFont = menuCfg.hiFont ? ResourceManager.getBitmapFont(menuCfg.hiFont) : null\n        this.menuImage = menuCfg.menuImage ? ResourceManager.getImage(menuCfg.menuImage) : null\n        this.titleImage = this.loFont.createTextImage(menuCfg.fullName)\n\n        menuCfg.itemsLabel.forEach((item) => {\n            if (item.label) {\n                this.items.push(new MainMenuLabelButton(this, item))\n            } else {\n                this.items.push(new MainMenuIconButton(this, item))\n            }\n        })\n\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n\n        this.onRedraw = (context) => {\n            context.drawImage(this.menuImage, 0, -this.scrollY)\n            if (menuCfg.displayTitle) context.drawImage(this.titleImage, (this.fixedWidth - this.titleImage.width) / 2, this.cfg.position[1])\n            this.items.forEach((item, index) => (this.items[this.items.length - 1 - index]).draw(context))\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.scrollY = 0\n        this.scrollSpeedY = 0\n    }\n\n    show() {\n        super.show()\n        const that = this\n        this.scrollInterval = setInterval(() => {\n            if (that.scrollSpeedY === 0) return\n            that.setScrollY(that.scrollSpeedY)\n        }, 1000 / NATIVE_FRAMERATE)\n    }\n\n    hide() {\n        this.scrollInterval = clearIntervalSafe(this.scrollInterval)\n        super.hide()\n    }\n\n    handlePointerEvent(event: GamePointerEvent): Promise<boolean> {\n        if (event.eventEnum === POINTER_EVENT.MOVE) {\n            const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n            let hovered = false\n            this.items.forEach((item) => {\n                if (!hovered) {\n                    const absY = sy + (item.scrollAffected ? this.scrollY : 0)\n                    hovered = item.checkHover(sx, absY)\n                } else {\n                    if (item.hover) item.needsRedraw = true\n                    item.hover = false\n                    item.setReleased()\n                }\n            })\n            if (this.cfg.canScroll) {\n                const scrollAreaHeight = 100\n                if (sy < scrollAreaHeight) {\n                    this.setScrollSpeedY(-(scrollAreaHeight - sy))\n                } else if (sy > this.fixedHeight - scrollAreaHeight) {\n                    this.setScrollSpeedY(sy - (this.fixedHeight - scrollAreaHeight))\n                } else {\n                    this.setScrollSpeedY(0)\n                }\n            }\n        } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => item.checkSetPressed())\n            }\n        } else if (event.eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => {\n                    if (item.pressed) {\n                        item.setReleased()\n                        if (item.actionName.toLowerCase() === 'next') {\n                            this.screen.showMainMenu(item.targetIndex)\n                        } else if (item.actionName.toLowerCase() === 'selectlevel') {\n                            this.screen.selectLevel((item as MainMenuLevelButton).levelKey)\n                        } else if (item.actionName) {\n                            console.warn('not implemented: ' + item.actionName + ' - ' + item.targetIndex)\n                        }\n                    }\n                })\n            }\n        }\n        if (this.needsRedraw()) this.redraw()\n        return new Promise((resolve) => resolve(false))\n    }\n\n    private setScrollSpeedY(deltaY: number) {\n        this.scrollSpeedY = Math.sign(deltaY) * Math.pow(Math.round(deltaY / 20), 2)\n    }\n\n    handleWheelEvent(event: GameWheelEvent): Promise<boolean> {\n        if (!this.cfg.canScroll) return new Promise((resolve) => resolve(false))\n        this.setScrollY(event.deltaY)\n        return new Promise((resolve) => resolve(true))\n    }\n\n    private setScrollY(deltaY: number) {\n        const scrollYBefore = this.scrollY\n        this.scrollY = Math.min(Math.max(this.scrollY + deltaY, 0), this.menuImage.height - this.fixedHeight)\n        if (scrollYBefore !== this.scrollY) this.redraw()\n    }\n\n    needsRedraw(): boolean {\n        return this.items.some((item) => item.needsRedraw)\n    }\n\n}\n","import { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\n\nexport class MainMenuLevelButton extends MainMenuBaseItem {\n\n    layer: MainMenuLayer\n    imgActive = null\n    imgInactive = null\n    imgCross = null\n    unlocked: boolean = false\n    levelKey: string = ''\n\n    constructor(layer: MainMenuLayer, levelKey: string, levelCfg: LevelEntryCfg) {\n        super()\n        this.layer = layer\n        this.actionName = 'selectlevel'\n        this.levelKey = levelKey\n        this.x = levelCfg.frontEndX\n        this.y = levelCfg.frontEndY\n        this.zIndex = 10\n        this.scrollAffected = true\n        const [imgActive, imgInactive, imgCross] = levelCfg.menuBMP\n        this.imgActive = ResourceManager.getImage(imgActive)\n        this.imgInactive = ResourceManager.getImage(imgInactive)\n        this.imgCross = ResourceManager.getImage(imgCross)\n        this.width = Math.max(this.imgActive.width, this.imgInactive.width, this.imgCross.width)\n        this.height = Math.max(this.imgActive.height, this.imgInactive.height, this.imgCross.height)\n        this.unlocked = levelCfg.frontEndOpen\n        this.unlocked = true // TODO don't unlock everything by default\n    }\n\n    draw(context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgCross\n        if (this.unlocked) img = this.hover ? this.imgActive : this.imgInactive\n        context.drawImage(img, this.x, this.y - this.layer.scrollY)\n    }\n\n}\n","import { createContext } from '../core/ImageHelper'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class MainMenuPanel extends MainMenuBaseItem {\n\n    context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D\n\n    constructor(imgData: ImageData, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.zIndex = 50\n        this.context = createContext(imgData.width, imgData.height)\n        this.context.putImageData(imgData, 0, 0)\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const inRect = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        const hover = inRect && this.context.getImageData(sx, sy, 1, 1).data[3] > 0\n        if (this.hover !== hover) this.needsRedraw = true\n        this.hover = hover\n        return this.hover\n    }\n\n    draw(context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) {\n        super.draw(context)\n        context.drawImage(this.context.canvas, this.x, this.y, this.width, this.height)\n    }\n\n}\n","import { BitmapFont } from '../core/BitmapFont'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class MainMenuWindow extends MainMenuBaseItem {\n\n    font: BitmapFont\n    imgFirstLine = null\n    imgSecondLine = null\n\n    constructor(font: BitmapFont, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.font = font\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    setFirstLine(text: string) {\n        this.imgFirstLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    setSecondLine(text: string) {\n        this.imgSecondLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    draw(context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) {\n        super.draw(context)\n        const cx = this.x + this.width / 2, cy = this.y + this.height / 2\n        if (this.imgFirstLine) context.drawImage(this.imgFirstLine, cx - this.imgFirstLine.width / 2, cy - this.imgFirstLine.height)\n        if (this.imgSecondLine) context.drawImage(this.imgSecondLine, cx - this.imgSecondLine.width / 2, cy)\n    }\n\n}\n","import { LevelEntryCfg, LevelsCfg } from '../cfg/LevelsCfg'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { iGet } from '../core/Util'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { MainMenuPanel } from './MainMenuPanel'\nimport { MainMenuWindow } from './MainMenuWindow'\n\nexport class LevelSelectLayer extends MainMenuLayer {\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg, modeLevel: boolean) {\n        super(screen, menuCfg)\n        const levelsCfg: LevelsCfg = ResourceManager.getResource('Levels')\n        const levelTextCfg = new LevelTextCfg()\n        this.items.push(new MainMenuPanel(levelTextCfg.panelImgData, levelTextCfg.panelPos))\n        const levelTextWindow = new MainMenuWindow(ResourceManager.getDefaultFont(), levelTextCfg.window)\n        levelTextWindow.setFirstLine(modeLevel ? levelTextCfg.level : levelTextCfg.tutorial)\n        this.items.push(levelTextWindow)\n        Object.keys(levelsCfg.levelsByName).forEach((levelKey) => {\n            const level: LevelEntryCfg = levelsCfg.levelsByName[levelKey]\n            const levelButton = new MainMenuLevelButton(this, levelKey, level)\n            levelButton.onHoverChange = () => levelTextWindow.setSecondLine(levelButton.hover ? level.fullName : '')\n            this.items.push(levelButton)\n        })\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n    }\n\n}\n\nclass LevelTextCfg {\n\n    window = {x: 0, y: 0, w: 0, h: 0}\n    panelImgData: ImageData\n    panelPos = {x: 0, y: 0, w: 0, h: 0}\n    level: string = ''\n    tutorial: string = ''\n\n    constructor() {\n        const cfg = ResourceManager.cfg('Menu', 'LevelText')\n        const winCfg = iGet(cfg, 'Window')\n        this.window = {x: winCfg[0], y: winCfg[1], w: winCfg[2], h: winCfg[3]}\n        const panelCfg = iGet(cfg, 'Panel')\n        this.panelImgData = ResourceManager.getImageData(panelCfg[0])\n        this.panelPos = {x: panelCfg[1], y: panelCfg[2], w: panelCfg[3], h: panelCfg[4]}\n        this.level = LevelTextCfg.parseLabel(iGet(cfg, 'Level'))\n        this.tutorial = LevelTextCfg.parseLabel(iGet(cfg, 'Tutorial'))\n    }\n\n    private static parseLabel(cfg: any) { // TODO improve cfg handling instead\n        if (!cfg) {\n            return ''\n        } else if (Array.isArray(cfg)) {\n            return cfg.join(',').replace(/_/g, ' ')\n        } else {\n            return cfg.replace(/_/g, ' ')\n        }\n    }\n\n}\n","import { MenuCfg } from '../cfg/MenuCfg'\nimport { LevelSelectLayer } from '../menu/LevelSelectLayer'\nimport { MainMenuLayer } from '../menu/MainMenuLayer'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\n\nexport class MainMenuScreen extends BaseScreen {\n\n    onLevelSelected: (levelName: string) => void = null\n    menus: MainMenuLayer[] = []\n\n    constructor() {\n        super()\n        const mainMenuFullCfg = ResourceManager.getResource('MainMenuFull') as MenuCfg\n        mainMenuFullCfg.menus.forEach((menuCfg) => {\n            let layer\n            if (menuCfg.title === 'Levels') {\n                layer = new LevelSelectLayer(this, menuCfg, true)\n            } else if (menuCfg.title === 'Tutorials') {\n                layer = new LevelSelectLayer(this, menuCfg, false)\n            } else {\n                layer = new MainMenuLayer(this, menuCfg)\n            }\n            this.menus.push(layer)\n            this.addLayer(layer)\n        })\n    }\n\n    showMainMenu(index: number = 0) {\n        this.menus.forEach((menu, i) => i === index ? menu.show() : menu.hide())\n        this.cursorLayer.show()\n    }\n\n    showLevelSelection() {\n        this.showMainMenu(1)\n    }\n\n    selectLevel(levelName) {\n        this.hide()\n        this.onLevelSelected(levelName)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class RewardScreenButton extends MainMenuBaseItem {\n\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgPressed: HTMLCanvasElement\n    imgDisabled: HTMLCanvasElement\n    disabled: boolean = false\n    visible: boolean = true\n\n    constructor(conf: any) {\n        super()\n        let imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath;\n        [imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath, this.x, this.y] = conf\n        this.imgNormal = ResourceManager.getImage(imgNormalFilepath)\n        this.imgHover = ResourceManager.getImage(imgHoverFilepath)\n        this.imgPressed = ResourceManager.getImage(imgPressedFilepath)\n        this.imgDisabled = ResourceManager.getImage(imgDisabledFilepath)\n        this.width = this.imgNormal.width\n        this.height = this.imgNormal.height\n    }\n\n    draw(context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) {\n        super.draw(context)\n        if (!this.visible) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled\n        } else if (this.pressed) {\n            img = this.imgPressed\n        } else if (this.hover) {\n            img = this.imgHover\n        }\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { RewardCfg } from '../cfg/RewardCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { clearTimeoutSafe } from '../core/Util'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { RewardScreenButton } from '../menu/RewardScreenButton'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\nimport { ScaledLayer } from './layer/ScreenLayer'\n\nexport class RewardScreen extends BaseScreen {\n\n    onAdvance: () => void\n    cfg: RewardCfg = null\n    titleFont: BitmapFont\n    resultsLayer: ScaledLayer\n    descriptionTextLayer: ScaledLayer\n    btnLayer: ScaledLayer\n    resultIndex: number = 0\n    resultLastIndex: number = 0\n    images: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    boxes: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    fonts = {}\n    texts: HTMLCanvasElement[] = []\n    uncoverTimeout = null\n    btnSave: RewardScreenButton\n    btnAdvance: RewardScreenButton\n\n    constructor() {\n        super()\n        this.cfg = ResourceManager.getResource('Reward')\n        this.titleFont = ResourceManager.getBitmapFont(this.cfg.titleFont)\n        const backgroundImg = ResourceManager.getImage(this.cfg.wallpaper)\n        const backgroundLayer = this.addLayer(new ScaledLayer())\n        backgroundLayer.onRedraw = (context) => context.drawImage(backgroundImg, 0, 0)\n        this.cfg.images.forEach((img) => {\n            this.images.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        this.cfg.boxImages.forEach((img) => {\n            this.boxes.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        Object.keys(this.cfg.fonts).forEach((fontKey, index) => {\n            const font = ResourceManager.getBitmapFont(this.cfg.fonts[fontKey])\n            this.fonts[fontKey.toLowerCase()] = font\n            const txt = this.cfg.texts[index]\n            const labelFont = index < 9 ? font : ResourceManager.getBitmapFont(this.cfg.backFont)\n            this.texts.push(labelFont.createTextImage(txt.text))\n        })\n        this.resultsLayer = this.addLayer(new ScaledLayer())\n        this.resultsLayer.handlePointerEvent = ((event) => {\n            if (event.eventEnum === POINTER_EVENT.UP) {\n                this.uncoverTimeout = clearTimeoutSafe(this.uncoverTimeout)\n                this.uncoverTimeout = null\n                this.resultIndex = this.resultLastIndex\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n                this.redraw()\n                return new Promise((resolve) => resolve(true))\n            }\n            return new Promise((resolve) => resolve(false))\n        })\n        this.descriptionTextLayer = this.addLayer(new ScaledLayer(), 20)\n        this.btnLayer = this.addLayer(new ScaledLayer(), 50)\n        this.btnSave = new RewardScreenButton(this.cfg.saveButton)\n        this.btnSave.disabled = true\n        this.btnAdvance = new RewardScreenButton(this.cfg.advanceButton)\n        this.btnLayer.handlePointerEvent = ((event) => {\n            if (event.eventEnum === POINTER_EVENT.MOVE) {\n                const [sx, sy] = this.btnLayer.toScaledCoords(event.clientX, event.clientY)\n                this.btnSave.checkHover(sx, sy)\n                this.btnAdvance.checkHover(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    this.btnSave.checkSetPressed()\n                    this.btnAdvance.checkSetPressed()\n                }\n            } else if (event.eventEnum === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    if (this.btnSave.pressed) {\n                        this.btnSave.setReleased()\n                        // TODO switch to save screen\n                    } else if (this.btnAdvance.pressed) {\n                        this.btnAdvance.setReleased()\n                        this.hide()\n                        this.onAdvance()\n                    }\n                }\n            }\n            if (this.btnSave.needsRedraw || this.btnAdvance.needsRedraw) this.redraw()\n            return new Promise((resolve) => resolve(false))\n        })\n        this.btnLayer.onRedraw = (context) => {\n            this.btnSave.draw(context)\n            this.btnAdvance.draw(context)\n        }\n    }\n\n    show() {\n        this.resultIndex = 0\n        this.btnSave.visible = false\n        this.btnAdvance.visible = false\n        this.uncoverResult()\n        const levelFullNameImg = this.titleFont.createTextImage(GameState.levelFullName)\n        let resultText = this.cfg.quitText\n        this.resultLastIndex = this.images.length - 2\n        if (GameState.resultState === GameResultState.COMPLETE) {\n            resultText = this.cfg.completeText\n            this.resultLastIndex = this.images.length - 1\n        } else if (GameState.resultState === GameResultState.FAILED) {\n            resultText = this.cfg.failedText\n        }\n        const resultValues = []\n        resultValues.push(this.fonts['crystals'].createTextImage(this.percentString(GameState.numCrystal, GameState.neededCrystals)))\n        resultValues.push(this.fonts['ore'].createTextImage(this.percentString(GameState.numOre, GameState.totalOres)))\n        resultValues.push(this.fonts['diggable'].createTextImage(this.percentString(GameState.remainingDiggables, GameState.totalDiggables, true)))\n        resultValues.push(this.fonts['constructions'].createTextImage(GameState.buildings.length.toString()))\n        resultValues.push(this.fonts['caverns'].createTextImage(this.percentString(GameState.discoveredCaverns, GameState.totalCaverns)))\n        resultValues.push(this.fonts['figures'].createTextImage(this.percentString(GameState.raiders.length, GameState.getMaxRaiders())))\n        resultValues.push(this.fonts['rockmonsters'].createTextImage(this.percentString(0))) // TODO show defence report, is either 0% or 100%\n        resultValues.push(this.fonts['oxygen'].createTextImage(this.percentString(GameState.airLevel)))\n        resultValues.push(this.fonts['timer'].createTextImage(this.timeString(GameState.gameTimeSeconds)))\n        resultValues.push(this.fonts['score'].createTextImage(this.percentString(GameState.score)))\n        const gameResultTextImg = this.titleFont.createTextImage(resultText)\n        this.resultsLayer.onRedraw = (context) => {\n            context.clearRect(0, 0, this.resultsLayer.fixedWidth, this.resultsLayer.fixedHeight)\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const img = this.images[c]\n                if (img) context.drawImage(img.img, img.x, img.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const box = this.boxes[c]\n                if (box) context.drawImage(box.img, box.x, box.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const txt = this.cfg.texts[c]\n                const text = resultValues[c]\n                if (text) context.drawImage(text, txt.x - text.width / 2, txt.y)\n            }\n            context.drawImage(levelFullNameImg, this.resultsLayer.fixedWidth / 2 - levelFullNameImg.width / 2, this.cfg.vertSpacing - levelFullNameImg.height / 2)\n            context.drawImage(gameResultTextImg, this.resultsLayer.fixedWidth / 2 - gameResultTextImg.width / 2, this.cfg.vertSpacing + levelFullNameImg.height / 2)\n        }\n        this.descriptionTextLayer.onRedraw = (context) => {\n            const descriptionTextImg = this.texts[this.resultIndex]\n            context.clearRect(0, this.cfg.textPos[1], this.descriptionTextLayer.fixedWidth, this.descriptionTextLayer.fixedHeight - this.cfg.textPos[1])\n            const tx = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[0] : 305\n            const ty = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[1] : 195\n            context.drawImage(descriptionTextImg, tx - descriptionTextImg.width / 2, ty)\n        }\n        super.show()\n    }\n\n    percentString(actual, max = 1, lessIsMore: boolean = false) {\n        if (max === 0) max = 1\n        let value = Math.round(Math.max(Math.min(actual / max, 1), 0) * 100)\n        if (lessIsMore) value = 100 - value\n        return value.toString() + '%'\n    }\n\n    padLeft(value: string, padding = '0', length = 2) {\n        while (value.length < length) value = padding + value\n        return value\n    }\n\n    timeString(seconds: number) {\n        const ss = this.padLeft((seconds % 60).toString())\n        const minutes = Math.floor(seconds / 60)\n        const mm = this.padLeft(((minutes % 60).toString()))\n        const hh = this.padLeft((Math.floor(minutes / 60).toString()))\n        return hh + ':' + mm + ':' + ss\n    }\n\n    uncoverResult() {\n        this.uncoverTimeout = setTimeout(() => {\n            this.uncoverTimeout = null\n            this.resultIndex++\n            if (this.resultIndex < this.resultLastIndex) {\n                this.uncoverResult()\n            } else {\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n            }\n            this.redraw()\n        }, this.cfg.timer * 1000)\n    }\n\n}\n","import { ClearCacheButton } from '../site/clearcache/ClearCacheButton'\nimport { GithubBox } from '../site/github/github-box'\nimport { WadFileSelectionModal } from '../site/modal/WadFileSelectionModal'\nimport { getRandomInclusive } from './core/Util'\nimport { GameState } from './game/model/GameState'\nimport { DEV_MODE } from './params'\nimport { ResourceManager } from './resource/ResourceManager'\nimport { GameScreen } from './screen/GameScreen'\nimport { LoadingScreen } from './screen/LoadingScreen'\nimport { MainMenuScreen } from './screen/MainMenuScreen'\nimport { RewardScreen } from './screen/RewardScreen'\n\nif (DEV_MODE) console.warn('DEV MODE ACTIVE')\n\n// setup and link all components\n\nconst loadingScreen = new LoadingScreen()\nconst wadFileSelectModal = new WadFileSelectionModal('game-container')\nconst githubBox = new GithubBox('game-container')\nconst clearCacheButton = new ClearCacheButton('game-container')\n\nwadFileSelectModal.onStart = (wad0Url, wad1Url) => {\n    ResourceManager.startLoadingFromUrl(wad0Url, wad1Url)\n}\nResourceManager.onMessage = (msg: string) => {\n    loadingScreen.setLoadingMessage(msg)\n}\nResourceManager.onCacheMissed = () => {\n    wadFileSelectModal.show()\n}\nResourceManager.onInitialLoad = (totalResources: number) => {\n    wadFileSelectModal.hide()\n    loadingScreen.enableGraphicMode(totalResources)\n}\nResourceManager.onAssetLoaded = () => {\n    loadingScreen.increaseLoadingState()\n}\nResourceManager.onLoadDone = () => {\n    // complete setup\n    const mainMenuScreen = new MainMenuScreen()\n    const gameScreen = new GameScreen()\n    const rewardScreen = new RewardScreen()\n\n    mainMenuScreen.onLevelSelected = (levelName) => {\n        try {\n            gameScreen.startLevel(levelName)\n        } catch (e) {\n            console.error('Could not load level: ' + levelName, e)\n            gameScreen.hide()\n            mainMenuScreen.showLevelSelection()\n        }\n    }\n    gameScreen.onLevelEnd = () => {\n        gameScreen.hide()\n        rewardScreen.show()\n    }\n    rewardScreen.onAdvance = () => {\n        GameState.reset()\n        mainMenuScreen.showLevelSelection()\n    }\n\n    // setup complete\n    loadingScreen.hide()\n    githubBox.hide()\n    clearCacheButton.hide()\n    const params = new URLSearchParams(window.location.search)\n    const entry = params.get('entry')\n    if (DEV_MODE && entry) {\n        GameState.numOre = Number(params.get('numOre')) || 0\n        GameState.numCrystal = Number(params.get('numCrystal')) || 0\n        if (entry === 'level') mainMenuScreen.showLevelSelection()\n        else if (entry === 'reward') rewardScreen.show()\n        else if (entry === 'random') mainMenuScreen.selectLevel('Level' + (('00' + getRandomInclusive(1, 25)).substr(-2)))\n        else if (entry) mainMenuScreen.selectLevel(entry)\n    } else {\n        mainMenuScreen.showMainMenu()\n    }\n}\n\n// start the game engine with loading resources\n\nloadingScreen.show()\nResourceManager.startLoadingFromCache()\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { BaseScreen } from './BaseScreen'\nimport { ScaledLayer } from './layer/ScreenLayer'\n\nexport class LoadingScreen extends BaseScreen {\n\n    layer: ScaledLayer\n    assetIndex: number = 0\n\n    constructor() {\n        super()\n        this.layer = this.addLayer(new ScaledLayer())\n    }\n\n    show() {\n        this.layers.forEach((layer) => {\n            if (layer !== this.cursorLayer) layer.show()\n        })\n        this.setLoadingMessage('Loading...')\n    }\n\n    setLoadingMessage(text) {\n        this.layer.onRedraw = (context) => {\n            // clear the screen to black\n            context.fillStyle = 'black'\n            context.fillRect(0, 0, this.layer.fixedWidth, this.layer.fixedHeight)\n            // draw the loading title\n            context.font = '24px Arial'\n            context.fillStyle = 'white'\n            context.fillText('Loading Rock Raiders', 20, this.layer.fixedHeight - 50)\n            // hard-code the first loading message\n            context.font = '18px Arial'\n            context.fillStyle = 'white'\n            context.fillText(text, 20, this.layer.fixedHeight - 20)\n        }\n        this.redraw()\n    }\n\n    enableGraphicMode(totalResources: number) {\n        const imgBackground = ResourceManager.getImage(ResourceManager.cfg('Main', 'LoadScreen'))\n        const imgProgress = ResourceManager.getImage(ResourceManager.cfg('Main', 'ProgressBar'))\n        const imgLoading = ResourceManager.getDefaultFont().createTextImage(ResourceManager.cfg('Main', 'LoadingText'))\n        this.layer.onRedraw = (context => {\n            context.drawImage(imgBackground, 0, 0)\n            const loadingBarWidth = 353 * (this.assetIndex < totalResources ? Math.round(this.assetIndex / totalResources) : 1)\n            context.drawImage(imgProgress, 142, 450, loadingBarWidth, 9)\n            context.drawImage(imgLoading, Math.round(320 - imgLoading.width / 2), Math.round(456 - imgLoading.height / 2))\n        })\n        this.cursorLayer.show()\n        this.redraw()\n    }\n\n    increaseLoadingState() {\n        this.assetIndex++\n        this.redraw()\n    }\n\n}\n","export const DEV_MODE = process.env.WEBPACK_MODE === 'development'\nexport const WAD_CACHE_DB_NAME = 'RockRaidersWeb'\nexport const JOB_SCHEDULE_INTERVAL = 1000 // milliseconds\nexport const CHECK_CLEARRUBBLE_INTERVAL = 5000 // milliseconds\nexport const JOB_ACTION_RANGE = 5\nexport const CHECK_SPANW_RAIDER_TIMER = 1000 // milliseconds\nexport const MAX_RAIDER_BASE = 12\nexport const MAX_RAIDER_REQUEST = 9\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10\nexport const UPDATE_OXYGEN_TIMER = 5000 // milliseconds\nexport const PANEL_ANIMATION_MULTIPLIER = 3\nexport const HEIGHT_MULTIPLER = 0.1\nexport const SEQUENCE_TEXTURE_FRAMERATE = 5\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640\nexport const SPRITE_RESOLUTION_HEIGHT = 480\nexport const TILESIZE = 40\nexport const NATIVE_FRAMERATE = 30\n"],"sourceRoot":""}