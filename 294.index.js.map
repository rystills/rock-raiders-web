{"version":3,"sources":["webpack://rock-raiders-web/webpack/runtime/chunk loaded","webpack://rock-raiders-web/webpack/runtime/startup chunk dependencies","webpack://rock-raiders-web/./src/event/EventTypeEnum.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/game/model/EntityType.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/game/model/Selectable.ts","webpack://rock-raiders-web/./src/game/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTool.ts","webpack://rock-raiders-web/./src/game/model/raider/RaiderTraining.ts","webpack://rock-raiders-web/./src/params.ts","webpack://rock-raiders-web/./src/cfg/ButtonCfg.ts","webpack://rock-raiders-web/./src/gui/infodock/ButtonInfoDockCfg.ts","webpack://rock-raiders-web/./src/gui/radar/RadarPanel.ts","webpack://rock-raiders-web/./src/gui/sidebar/SideBarLabel.ts","webpack://rock-raiders-web/./src/gui/sidebar/PanelCrystalSideBar.ts","webpack://rock-raiders-web/./src/gui/toppanel/ButtonPriorityListCfg.ts","webpack://rock-raiders-web/./src/gui/toppanel/ButtonTopCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonCameraControlCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonInformationCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonsCfg.ts","webpack://rock-raiders-web/./src/cfg/PanelsCfg.ts","webpack://rock-raiders-web/./src/cfg/InfoButtonCfg.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoDockButton.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoDockPanel.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoMessagesEntryConfig.ts","webpack://rock-raiders-web/./src/gui/infodock/InfoMessagesConfig.ts","webpack://rock-raiders-web/./src/gui/infodock/InformationPanel.ts","webpack://rock-raiders-web/./src/event/GuiCommand.ts","webpack://rock-raiders-web/./src/cfg/IconPanelBackButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/MenuItemCfg.ts","webpack://rock-raiders-web/./src/gui/main/IconPanelButton.ts","webpack://rock-raiders-web/./src/gui/main/IconSubPanel.ts","webpack://rock-raiders-web/./src/gui/main/BuildingPanel.ts","webpack://rock-raiders-web/./src/gui/main/GetToolPanel.ts","webpack://rock-raiders-web/./src/gui/main/IconPanelButtonLabel.ts","webpack://rock-raiders-web/./src/gui/main/LargeVehiclePanel.ts","webpack://rock-raiders-web/./src/gui/main/IconPanelToggleButton.ts","webpack://rock-raiders-web/./src/gui/main/SelectBasePanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectBuildingPanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectFloorPanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectRaiderPanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectRubblePanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectSitePanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectVehiclePanel.ts","webpack://rock-raiders-web/./src/gui/main/SelectWallPanel.ts","webpack://rock-raiders-web/./src/gui/main/SmallVehiclePanel.ts","webpack://rock-raiders-web/./src/gui/main/TrainRaiderPanel.ts","webpack://rock-raiders-web/./src/gui/main/MainPanel.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityIdentifier.ts","webpack://rock-raiders-web/./src/gui/messagepanel/TextInfoMessage.ts","webpack://rock-raiders-web/./src/gui/messagepanel/MessagePanel.ts","webpack://rock-raiders-web/./src/gui/messagepanel/TextInfoMessageEntryConfig.ts","webpack://rock-raiders-web/./src/gui/messagepanel/TextInfoMessageConfig.ts","webpack://rock-raiders-web/./src/gui/toppanel/PriorityButtonsConfig.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityList.ts","webpack://rock-raiders-web/./src/gui/toppanel/PriorityListPanel.ts","webpack://rock-raiders-web/./src/gui/toppanel/PriorityPositionsEntry.ts","webpack://rock-raiders-web/./src/gui/base/ToggleButton.ts","webpack://rock-raiders-web/./src/gui/toppanel/TopPanel.ts","webpack://rock-raiders-web/./src/worker/GuiMainWorker.ts","webpack://rock-raiders-web/webpack/bootstrap","webpack://rock-raiders-web/webpack/runtime/define property getters","webpack://rock-raiders-web/webpack/runtime/ensure chunk","webpack://rock-raiders-web/webpack/runtime/get javascript chunk filename","webpack://rock-raiders-web/webpack/runtime/global","webpack://rock-raiders-web/webpack/runtime/hasOwnProperty shorthand","webpack://rock-raiders-web/webpack/runtime/publicPath","webpack://rock-raiders-web/webpack/runtime/importScripts chunk loading","webpack://rock-raiders-web/webpack/startup"],"names":["deferred","next","MOUSE_BUTTON","POINTER_EVENT","KEY_EVENT","LocalEvent","eventKey","super","this","isLocal","SelectionChanged","selectionType","selectedSurface","selectedBuilding","selectedRaiders","canDoTraining","Map","everyHasTool","isGround","surfaceType","isPowerPath","isFloor","floor","isSite","hasRubble","isDrillable","isDrillableHard","isReinforcable","canPlaceFence","b","entityType","isUsable","someCarries","some","r","carries","everyHasMaxLevel","every","level","stats","Levels","training","set","length","hasTraining","tool","hasTool","buildingCanUpgrade","canUpgrade","buildingCanSwitchPower","SelfPowered","PowerBuilding","ChangeCursor","cursor","timeout","BuildingsChangedEvent","usableBuildingsByTypeAndLevel","perLevel","getOrUpdate","event","building","minLevel","result","forEach","count","PlaySoundEvent","sample","EntityType","EntitySuperType","GameResultState","GameState","resultState","RUNNING","numCrystal","numOre","numBrick","usedCrystals","neededCrystals","airLevel","selectedEntities","buildings","buildingsUndiscovered","raiders","raidersUndiscovered","requestedRaiders","materials","materialsUndiscovered","buildingSites","spiders","spidersBySurface","bats","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","discoveredCaverns","levelStartTime","levelStopTime","oxygenRate","buildModeSelection","buildingTypes","filter","bt","position","targetBuildings","getBuildingsByType","closest","minDist","bPos","getDropPosition","dist","distanceToSquared","entities","previouslySelected","stillSelected","indexOf","deselect","freshlySelected","select","push","len","getSelectionType","surface","minX","x","minZ","y","maxX","maxZ","discoverEntities","undiscovered","discovered","e","pos","getPosition","z","onDiscover","remove","Math","round","entity","terrain","sceneMgr","currentSurface","getSurfaceFromWorld","nearbySpiders","getSurface","get","SelectionType","SurfaceType","options","shaping","matIndex","selectable","drillable","drillableHard","explodable","reinforcable","C","cursorFulfiller","statsDrillName","canCarryFence","Object","assign","typeNum","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","console","error","GROUND","name","POWER_PATH","POWER_PATH_BUILDING_SITE","POWER_PATH_CONSTRUCTION","RaiderTool","AllRaiderTools","DRILL","HAMMER","SHOVEL","SPANNER","FREEZERGUN","LASER","PUSHERGUN","BIRDSCARER","RaiderTraining","AllRaiderTrainings","DRIVER","ENGINEER","GEOLOGIST","PILOT","SAILOR","DEMOLITION","RaiderTrainingSites","RaiderTrainingStatsProperty","MAX_RAIDER_BASE","MAX_RAIDER_REQUEST","ADDITIONAL_RAIDER_PER_SUPPORT","PANEL_ANIMATION_MULTIPLIER","SPRITE_RESOLUTION_WIDTH","SPRITE_RESOLUTION_HEIGHT","TILESIZE","NATIVE_FRAMERATE","ButtonCfg","BaseButtonCfg","cfgValue","buttonType","normalFile","highlightFile","pressedFile","relX","relY","width","height","tooltip","ButtonInfoDockCfg","BaseConfig","cfgObj","panelButtonInfoDockGoto","panelButtonInfoDockClose","lCfgKeyName","RadarPanel","Panel","parent","panelCfg","panelFillCfg","panelOverlayCfg","buttonsCfg","fill","addChild","overlay","btnToggle","Button","panelButtonRadarToggle","onClick","toggleState","btnMap","panelButtonRadarMapView","btnTagged","panelButtonRadarTaggedObjectView","ButtonRadarCfg","panelButtonRadarZoomIn","panelButtonRadarZoomOut","SideBarLabel","BaseElement","btnCfg","label","updatePosition","reset","context","hidden","textAlign","font","fillStyle","fillText","onRedraw","PanelCrystalSideBar","totalOre","labelOre","panelButtonCrystalSideBarOre","labelCrystal","panelButtonCrystalSideBarCrystals","imgNoCrystal","GuiResourceCache","imgSmallCrystal","imgUsedCrystal","imgOre","registerEventListener","toString","usedCrystal","neededCrystal","notifyRedraw","curX","img","curY","c","max","imgCrystal","drawImage","i","ButtonCrystalSideBarCfg","ButtonPriorityListCfg","panelButtonPriorityListDisable","panelButtonPriorityListUpOne","panelButtonPriorityListClose","panelButtonPriorityListReset","objKey","match","parseValue","assignValue","ButtonTopCfg","panelButtonTopPanelCallToArms","panelButtonTopPanelOptions","panelButtonTopPanelPriorities","ButtonCameraControlCfg","panelButtonCameraControlZoomIn","panelButtonCameraControlZoomOut","panelButtonCameraControlCycleBuildings","panelButtonCameraControlRotate","ButtonInformationCfg","panelButtonInformationToggle","panelButtonInformationFunction","ButtonsCfg","panelRadar","panelCrystalSideBar","panelTopPanel","panelInformation","panelPriorityList","panelCameraControl","panelInfoDock","panelEncyclopedia","btnCfgValue","arr","toLowerCase","PanelsCfg","panelRadarFill","panelRadarOverlay","panelMessages","panelMessagesSide","PanelCfg","InfoButtonCfg","buttonImageFilename","disabledFile","InfoDockButton","infoMessagesEntryConfig","messages","text","animationTimeout","animationSpeedX","animationSpeedY","message","buttonClicked","pop","unshift","showButton","targetX","targetY","Promise","resolve","updateAnimation","onDone","diffX","diffY","abs","sign","sqrt","that","setTimeout","InfoDockPanel","infoMessagesConfig","informationPanel","stackButtons","gotoLatestMessage","dropLatestMessage","infoGenericDeath","infoGenericMonster","infoCrystalFound","infoUnderAttack","infoLandslide","infoPowerDrain","infoSlugEmerge","infoFoundMinifigure","btn","msg","log","location","button","shift","setMovedIn","splice","slideStackIntoPosition","then","includes","slideInButton","disabled","map","reduce","prev","cur","slideToTarget","pushFirst","setText","promises","p","all","InfoMessagesEntryConfig","sfx","timing","flag","replace","InfoMessagesConfig","InformationPanel","textImage","createTextImage","GuiCommand","CancelBuildMode","SelectBuildMode","SelectedRaiderPickTool","CreatePowerPath","PlaceFence","MakeRubble","ChangeRaiderSpawnRequest","increase","CreateClearRubbleJob","UpgradeBuilding","BeamUpBuilding","ChangePriorityList","priorityList","ChangeBuildingPowerState","state","CreateDrillJob","CreateReinforceJob","CreateDynamiteJob","CancelSurfaceJobs","RaiderEat","RaiderDrop","RaiderUpgrade","RaiderBeamUp","TrainRaider","CancelBuilding","IconPanelBackButtonCfg","MenuItemCfg","tooltipSfx","tooltipDisabled","tooltipDisabledSfx","hotkey","Array","isArray","IconPanelButton","menuItemCfg","itemKey","parentWidth","menuIndex","isDisabled","updateState","autoRedraw","targetState","stateChanged","drawHover","hover","strokeStyle","lineWidth","strokeRect","IconSubPanel","numOfItems","onBackPanel","backBtn","iconPanelButtons","backBtnCfg","frameImgCfg","imgName","val1","val2","val3","val4","imgNameWoBackName","woBack1","woBack2","xOut","menuItemGroup","menuItem","movedIn","updateAllButtonStates","BuildingPanel","publishEvent","addBuildMenuItem","item","addMenuItem","GetToolPanel","numUsableToolstations","addGetToolItem","IconPanelButtonLabel","numRequestedRaiders","LargeVehiclePanel","IconPanelToggleButton","menuItemOffCfg","menuItemOnCfg","imgOnNormal","imgOnHover","imgOnPressed","imgOnDisabled","clicked","imgNormal","imgDisabled","imgPressed","pressed","imgHover","children","child","drawTooltip","SelectBasePanel","SelectBuildingPanel","powerSwitchItem","upgradeItem","deleteBuildingItem","SelectFloorPanel","pathItem","removeItem","placeFenceItem","SelectRaiderPanel","numToolstations","feedItem","unloadItem","getToolItem","trainItem","deleteRaiderItem","SelectRubblePanel","clearRubbleItem","SelectSitePanel","cancelBuilding","SelectVehiclePanel","SelectWallPanel","isHardDrillable","numToolstationsLevel2","itemDrill","itemReinforce","itemDynamite","itemDeselect","SmallVehiclePanel","TrainRaiderPanel","addTrainingItem","trainingItem","MainPanel","subPanels","numTeleportPads","numBarracks","numRaiders","xIn","yOut","yIn","mainPanel","addSubPanel","buildingPanel","smallVehiclePanel","largeVehiclePanel","selectWallPanel","selectFloorPanel","selectRubblePanel","selectSitePanel","selectBuildingPanel","selectRaiderPanel","trainRaiderPanel","getToolPanel","selectVehiclePanel","teleportRaider","getMaxRaiders","buildingItem","smallVehicleItem","largeVehicleItem","selectSubPanel","onSelectedSurfaceChange","childPanel","targetPanel","subPanel","PriorityIdentifier","TextInfoMessage","infoMessageEntryConfig","maxWidth","infoImage","imageFilename","sfxSample","Sample","sfxName","MessagePanel","textInfoMessageConfig","imgAir","currentMessage","messageTimeout","crystalFound","textCrystalFound","setMessage","msgSpaceToContinue","textSpaceToContinue","cavernDiscovered","textCavernDiscovered","oreFound","textOreFound","msgAirSupplyLow","textAirSupplyLow","msgAirSupplyRunningOut","textAirSupplyRunningOut","msgGameCompleted","textGameCompleted","msgManTrained","textManTrained","msgUnitUpgraded","textUnitUpgraded","textInfoMessage","min","txtX","infoX","TextInfoMessageEntryConfig","TextInfoMessageConfig","PriorityButtonsConfig","aiPriorityTrain","aiPriorityGetIn","aiPriorityCrystal","aiPriorityOre","aiPriorityRepair","aiPriorityClearing","aiPriorityDestruction","aiPriorityConstruction","aiPriorityReinforce","aiPriorityRecharge","PriorityList","levelDefault","current","priorities","index","enabled","tmp","entry","PriorityEntry","element","job","priority","j","key","getPriorityIdentifier","priorityIdentifier","find","levelPriorityEntry","PriorityListPanel","cfg","prioPositions","prioByName","buttonCfg","toggle","upOne","setList","updated","prioButton","btnIndex","pushToTop","PriorityPositionsEntry","ToggleButton","cx","cy","isInactive","inRect","isInRect","checkHover","isPressed","checkClick","checkRelease","TopPanel","btnCallToArms","btnOptions","btnPriorities","GuiMainWorker","GuiWorker","worker","panelsCfg","addPanel","rootElement","priorityButtonsConfig","priorityPositionsConfig","values","panelMain","sendResponse","type","WorkerMessageType","messageState","unsetMessage","workerInstance","self","addEventListener","data","resourceByName","processMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","__webpack_exports__","O","chunkIds","fn","notFulfilled","Infinity","fulfilled","keys","d","definition","o","defineProperty","enumerable","f","chunkId","u","g","globalThis","Function","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","document","currentScript","src","scripts","getElementsByTagName","Error","installedChunks","294","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime"],"mappings":"uBAAIA,ECAAC,E,iBCCJ,IAAYC,EAMAC,EAMAC,E,0BAZZ,SAAYF,GACR,mBACA,uBACA,6BAHJ,CAAYA,MAAY,KAMxB,SAAYC,GACR,mBACA,mBACA,eAHJ,CAAYA,MAAa,KAMzB,SAAYC,GACR,mBACA,eAFJ,CAAYA,MAAS,M,+ICEd,MAAMC,UAAmB,IAE5B,YAAYC,GACRC,MAAMD,GACNE,KAAKC,SAAU,GAKhB,MAAMC,UAAyBL,EAmBlC,YAAYM,EAA+B,YAAuBC,EAA2B,KAAMC,EAAmC,KAAMC,EAA4B,MACpKP,MAAM,uBANV,KAAAQ,cAA8C,IAAIC,IAClD,KAAAC,aAAyC,IAAID,IAMzCR,KAAKG,cAAgBA,EACrBH,KAAKU,UAAWN,aAAe,EAAfA,EAAiBO,eAAgB,WACjDX,KAAKY,aAAcR,aAAe,EAAfA,EAAiBO,eAAgB,eACpDX,KAAKa,QAAUT,aAAe,EAAfA,EAAiBO,YAAYG,MAC5Cd,KAAKe,QAASX,aAAe,EAAfA,EAAiBO,eAAgB,8BAAuCP,aAAe,EAAfA,EAAiBO,eAAgB,6BACvHX,KAAKgB,UAAYZ,aAAe,EAAfA,EAAiBY,YAClChB,KAAKiB,YAAcb,aAAe,EAAfA,EAAiBa,cACpCjB,KAAKkB,gBAAkBd,aAAe,EAAfA,EAAiBc,kBACxClB,KAAKmB,eAAiBf,aAAe,EAAfA,EAAiBe,iBACvCnB,KAAKoB,eAAgBhB,aAAe,EAAfA,EAAiBgB,kBAAmB,oBAA0BC,GAAMA,EAAEC,aAAe,mBAA4BD,EAAEE,aACxIvB,KAAKwB,eAAgBlB,aAAe,EAAfA,EAAiBmB,MAAMC,KAAQA,EAAEC,WACtD3B,KAAK4B,oBAAqBtB,aAAe,EAAfA,EAAiBuB,OAAOH,GAAMA,EAAEI,OAASJ,EAAEK,MAAMC,UAC3E,cAA4BC,GAAajC,KAAKO,cAAc2B,IAAID,EAAU,qBAA2BA,GAAUE,OAAS,IAAK7B,aAAe,EAAfA,EAAiBmB,MAAMC,IAAOA,EAAEU,YAAYH,SACzK,aAAwBI,GAASrC,KAAKS,aAAayB,IAAIG,KAAQ/B,aAAe,EAAfA,EAAiBuB,OAAOH,GAAMA,EAAEY,QAAQD,SACvGrC,KAAKuC,mBAAqBlC,aAAgB,EAAhBA,EAAkBmC,aAC5CxC,KAAKyC,yBAA0BpC,aAAgB,EAAhBA,EAAkB0B,MAAMW,gBAAgBrC,aAAgB,EAAhBA,EAAkB0B,MAAMY,gBAgBhG,MAAMC,UAAqB/C,EAK9B,YAAYgD,EAAgBC,EAAkB,MAC1C/C,MAAM,mBACNC,KAAK6C,OAASA,EACd7C,KAAK8C,QAAUA,GAgBhB,MAAMC,UAA8BlD,EAIvC,cACIE,MAAM,uBAHV,KAAAiD,8BAAsE,IAAIxC,IAItE,uBAA6Ba,IACzB,GAAIA,EAAEE,WAAY,CACd,MAAM0B,EAAWjD,KAAKgD,8BAA8BE,YAAY7B,EAAEC,YAAY,IAAM,IAAId,MACxFyC,EAASf,IAAIb,EAAES,MAAOmB,EAASC,YAAY7B,EAAES,OAAO,IAAM,IAAK,OAK3E,mBAAmBqB,EAA8BC,EAAsBC,EAAmB,GACtF,IAAIC,EAAS,EAIb,OAHAH,EAAMH,8BAA8BE,YAAYE,GAAU,IAAM,IAAI5C,MAAO+C,SAAQ,CAACC,EAAO1B,KACnFA,GAASuB,IAAUC,GAAUE,MAE9BF,GAkBR,MAAMG,UAAuB5D,EAIhC,YAAY6D,GACR3D,MAAM,gBACNC,KAAK0D,OAASA,K,cC/ItB,IAAYC,EA+BAC,E,iBA/BZ,SAAYD,GAGR,qBAGA,iCACA,mCACA,qBACA,qCACA,2BACA,yBACA,yBACA,mCACA,+BACA,oCAGA,kBACA,oCAGA,4BACA,wCACA,0BACA,kBACA,sBACA,0BA3BJ,CAAYA,MAAU,KA+BtB,SAAYC,GAER,uBACA,2BACA,yBACA,2BALJ,CAAYA,MAAe,M,mCCffC,E,sDAAZ,SAAYA,GAER,yBACA,2BACA,uBAJJ,CAAYA,MAAe,KAQpB,MAAMC,EAiCT,eACI9D,KAAK+D,YAAcF,EAAgBG,QACnChE,KAAKiE,WAAa,EAClBjE,KAAKkE,OAAS,EACdlE,KAAKmE,SAAW,EAChBnE,KAAKoE,aAAe,EACpBpE,KAAKqE,eAAiB,EACtBrE,KAAKsE,SAAW,EAChBtE,KAAKuE,iBAAmB,GACxBvE,KAAKG,cAAgB,KACrBH,KAAKwE,UAAY,GACjBxE,KAAKyE,sBAAwB,GAC7BzE,KAAK0E,QAAU,GACf1E,KAAK2E,oBAAsB,GAC3B3E,KAAK4E,iBAAmB,EACxB5E,KAAK6E,UAAY,GACjB7E,KAAK8E,sBAAwB,GAC7B9E,KAAK+E,cAAgB,GACrB/E,KAAKgF,QAAU,GACfhF,KAAKiF,iBAAmB,IAAIzE,IAC5BR,KAAKkF,KAAO,GACZlF,KAAKmF,cAAgB,EACrBnF,KAAKoF,UAAY,EACjBpF,KAAKqF,eAAiB,EACtBrF,KAAKsF,mBAAqB,EAC1BtF,KAAKuF,aAAe,EACpBvF,KAAKwF,kBAAoB,EACzBxF,KAAKyF,eAAiB,EACtBzF,KAAK0F,cAAgB,EACrB1F,KAAK2F,WAAa,EAClB3F,KAAK4F,mBAAqB,KAG9B,6BAA6BC,GACzB,OAAO7F,KAAKwE,UAAUsB,QAAOzE,GAAKA,EAAEE,YAAcsE,EAAcpE,MAAKsE,GAAM1E,EAAEC,aAAeyE,MAGhG,gCAAgCC,KAAsBH,GAClD,MAAMI,EAAkBnC,EAAUoC,sBAAsBL,GACxD,IAAIM,EAAU,KAAMC,EAAU,KAS9B,OARAH,EAAgB1C,SAASlC,IACrB,MAAMgF,EAAOhF,EAAEiF,kBACTC,EAAOP,EAASQ,kBAAkBH,IACxB,OAAZF,GAAoBI,EAAOH,KAC3BD,EAAU9E,EACV+E,EAAUG,MAGXJ,EAGX,wBAAwBlE,GACpB,OAAOjC,KAAKwE,UAAUsB,QAAQzE,GAAMA,EAAEC,aAAe,KAAoBW,IAAaZ,EAAEE,YAAcF,EAAEU,MAAM,KAA4BE,IAAWZ,EAAES,SAG3J,sBAAsB2E,GAClBzG,KAAKuE,iBAAmBvE,KAAKuE,iBAAiBuB,QAAQY,IAClD,MAAMC,GAA0D,IAA1CF,EAASG,QAAQF,GAEvC,OADKC,GAAeD,EAAmBG,WAChCF,KAGXF,EAASlD,SAASuD,IACVA,EAAgBC,UAChB/G,KAAKuE,iBAAiByC,KAAKF,MAInC,MAAMG,EAAMjH,KAAKuE,iBAAiBpC,OAC9B8E,EAAM,EACNjH,KAAKG,cAAgB,UACN,IAAR8G,EACPjH,KAAKG,cAAgBH,KAAKuE,iBAAiB,GAAG2C,mBAChB,OAAvBlH,KAAKG,gBACZH,KAAKG,cAAgB,aAGzB,iBAAsB,IAAI,KAAiBH,KAAKG,cAAeH,KAAKI,gBAAiBJ,KAAKK,iBAAkBL,KAAKM,kBAGrH,uBACI,OAAO,IAAkBwD,EAAUU,UAAUhB,OAAOnC,GAAMA,EAAEE,YAAcF,EAAEC,aAAe,eAAuB,KAGtH,uBAAuB6F,GACnB,MAAMC,EAAOD,EAAQE,EAAI,KAAUC,EAAOH,EAAQI,EAAI,KAChDC,EAAOJ,EAAO,KAAUK,EAAOH,EAAO,KAC5CtH,KAAK0H,iBAAiB1H,KAAK2E,oBAAqByC,EAAMI,EAAMF,EAAMG,GAClEzH,KAAK0H,iBAAiB1H,KAAKyE,sBAAuB2C,EAAMI,EAAMF,EAAMG,GACpEzH,KAAK0H,iBAAiB1H,KAAK8E,sBAAuBsC,EAAMI,EAAMF,EAAMG,GAGxE,wBAAwBE,EAA4BP,EAAMI,EAAMF,EAAMG,GAClE,MAAMG,EAAa,GACnBD,EAAapE,SAASsE,IAClB,MAAMC,EAAMD,EAAEE,cACVD,EAAIT,GAAKD,GAAQU,EAAIT,EAAIG,GAAQM,EAAIE,GAAKV,GAAQQ,EAAIE,EAAIP,IAC1DI,EAAEI,aACFL,EAAWZ,KAAKa,OAGxBD,EAAWrE,SAAS7B,GAAMiG,EAAaO,OAAOxG,KAGlD,6BACI,OAAOyG,KAAKC,OAAOtE,EAAU4B,cAAgB5B,EAAU2B,gBAAkB,KAG7E,6BACI,OAAOzF,KAAKG,gBAAkB,aAAyBH,KAAKuE,iBAAiBpC,OAAS,EAAInC,KAAKuE,iBAAiB,GAAgB,KAGpI,8BACI,OAAOvE,KAAKG,gBAAkB,cAA0BH,KAAKuE,iBAAiBpC,OAAS,EAAInC,KAAKuE,iBAAiB,GAAuB,KAG5I,6BACI,OAAQvE,KAAKG,gBAAkB,YAAwBH,KAAKG,gBAAkB,YAAwBH,KAAKuE,iBAAiBpC,OAAS,EAAInC,KAAKuE,iBAA+B,GAGjL,sBACI,OAAOvE,KAAKkE,OAAyB,EAAhBlE,KAAKmE,SAG9B,wBAAwBkE,GACpB,MAAMC,EAAUD,EAAOE,SAASD,QAC1BE,EAAiBF,EAAQG,oBAAoBJ,EAAON,eACpDW,EAA+B,GACrC,IAAK,IAAIrB,EAAImB,EAAenB,EAAGA,GAAKmB,EAAenB,EAAI,EAAGA,IACtD,IAAK,IAAIE,EAAIiB,EAAejB,EAAGA,GAAKiB,EAAejB,EAAI,EAAGA,IAAK,CAC3D,MAAMJ,EAAUmB,EAAQK,WAAWtB,EAAGE,GACtCmB,EAAc1B,QAASlD,EAAUmB,iBAAiB2D,IAAIzB,IAAY,IAG1E,OAAOuB,GArKJ,EAAA3E,YAA+BF,EAAgBG,QAC/C,EAAAC,WAAqB,EACrB,EAAAC,OAAiB,EACjB,EAAAC,SAAmB,EACnB,EAAAC,aAAuB,EACvB,EAAAC,eAAyB,EACzB,EAAAC,SAAmB,EACnB,EAAAC,iBAAiC,GACjC,EAAApE,cAA+B,KAC/B,EAAAqE,UAA8B,GAC9B,EAAAC,sBAA0C,GAC1C,EAAAC,QAAoB,GACpB,EAAAC,oBAAgC,GAChC,EAAAC,iBAA2B,EAC3B,EAAAC,UAA8B,GAC9B,EAAAC,sBAA0C,GAC1C,EAAAC,cAAgC,GAChC,EAAAC,QAAyB,GACzB,EAAAC,iBAAgD,IAAIzE,IACpD,EAAA0E,KAAc,GACd,EAAAC,cAAwB,EACxB,EAAAC,UAAoB,EACpB,EAAAC,eAAyB,EACzB,EAAAC,mBAA6B,EAC7B,EAAAC,aAAuB,EACvB,EAAAC,kBAA4B,EAC5B,EAAAC,eAAyB,EACzB,EAAAC,cAAwB,EACxB,EAAAC,WAAqB,EACrB,EAAAC,mBAAqC,M,cCzChD,IAAYiD,E,iBAAZ,SAAYA,GAER,yBACA,yBACA,uBACA,2BACA,yBACA,qBAPJ,CAAYA,MAAa,M,4CCZlB,MAAMC,EAgBT,YAAYC,EAAgC,IAb5C,KAAAC,SAAmB,EACnB,KAAAC,SAAmB,KACnB,KAAAnI,OAAiB,EACjB,KAAAoI,YAAsB,EACtB,KAAAC,WAAqB,EACrB,KAAAC,eAAyB,EACzB,KAAAC,YAAsB,EACtB,KAAAC,cAAwB,EACxB,KAAAzG,OAAiB,EAAA0G,EAAA,iBACjB,KAAAC,gBAA0B,EAAAD,EAAA,iBAC1B,KAAAE,eAAyB,KACzB,KAAAC,eAAyB,EAGrBC,OAAOC,OAAO5J,KAAM+I,GA0IxB,gBAAgBc,GACZ,OAAQA,GACJ,KAAK,EACD,OAAOf,EAAYgB,oBACvB,KAAK,EACD,OAAOhB,EAAYiB,WACvB,KAAK,EACD,OAAOjB,EAAYkB,UACvB,KAAK,EACD,OAAOlB,EAAYmB,WACvB,KAAK,EACL,KAAK,EACD,OAAOnB,EAAYoB,KACvB,KAAK,EACD,OAAOpB,EAAYqB,KACvB,KAAK,EACD,OAAOrB,EAAYsB,SACvB,KAAK,EACD,OAAOtB,EAAYuB,MACvB,KAAK,GACD,OAAOvB,EAAYwB,aACvB,KAAK,GACD,OAAOxB,EAAYyB,cACvB,KAAK,GACL,KAAK,GACD,OAAOzB,EAAY0B,UACvB,KAAK,IACD,OAAO1B,EAAY2B,QACvB,KAAK,IACD,OAAO3B,EAAY4B,QACvB,KAAK,IACD,OAAO5B,EAAY6B,QACvB,KAAK,IACD,OAAO7B,EAAY8B,QACvB,QAEI,OADAC,QAAQC,MAAM,gCAAkCjB,GACzCf,EAAYiB,aA3Kf,EAAAgB,OAAS,IAAIjC,EAAY,CACrCkC,KAAM,SACNlK,OAAO,EACPoI,YAAY,EACZQ,eAAe,IAEH,EAAAK,WAAa,IAAIjB,EAAY,CACzCkC,KAAM,aACNhC,SAAS,EACTC,SAAU,IACVpG,OAAQ,EAAA0G,EAAA,gCAEI,EAAAS,UAAY,IAAIlB,EAAY,CACxCkC,KAAM,YACNhC,SAAS,EACTC,SAAU,IACVC,YAAY,EACZE,eAAe,EACfC,YAAY,EACZC,cAAc,EACdzG,OAAQ,EAAA0G,EAAA,yBACRE,eAAgB,kBAEJ,EAAAQ,WAAa,IAAInB,EAAY,CACzCkC,KAAM,aACNhC,SAAS,EACTC,SAAU,IACVC,YAAY,EACZC,WAAW,EACXC,eAAe,EACfC,YAAY,EACZC,cAAc,EACdzG,OAAQ,EAAA0G,EAAA,2BACRE,eAAgB,mBAEJ,EAAAS,KAAO,IAAIpB,EAAY,CACnCkC,KAAM,OACNhC,SAAS,EACTC,SAAU,IACVC,YAAY,EACZC,WAAW,EACXC,eAAe,EACfC,YAAY,EACZC,cAAc,EACdzG,OAAQ,EAAA0G,EAAA,0BACRE,eAAgB,kBAEJ,EAAAe,UAAY,IAAI1B,EAAY,CAACkC,KAAM,YAAalK,OAAO,EAAMmI,SAAU,OACvE,EAAAkB,KAAO,IAAIrB,EAAY,CAACkC,KAAM,OAAQlK,OAAO,EAAMmI,SAAU,OAC7D,EAAAmB,SAAW,IAAItB,EAAY,CACvCkC,KAAM,WACN/B,SAAU,KACVC,YAAY,EACZC,WAAW,EACXC,eAAe,EACfC,YAAY,EACZC,cAAc,EACdzG,OAAQ,EAAA0G,EAAA,4BACRE,eAAgB,kBAEJ,EAAAY,MAAQ,IAAIvB,EAAY,CAACkC,KAAM,QAASlK,OAAO,EAAMmI,SAAU,OAC/D,EAAAqB,aAAe,IAAIxB,EAAY,CAC3CkC,KAAM,sBACN/B,SAAU,KACVC,YAAY,EACZC,WAAW,EACXC,eAAe,EACfC,YAAY,EACZC,cAAc,EACdzG,OAAQ,EAAA0G,EAAA,gCACRE,eAAgB,kBAEJ,EAAAc,cAAgB,IAAIzB,EAAY,CAC5CkC,KAAM,gBACN/B,SAAU,KACVpG,OAAQ,EAAA0G,EAAA,mCAEI,EAAA0B,WAAa,IAAInC,EAAY,CACzCkC,KAAM,iBACNlK,OAAO,EACPmI,SAAU,KACVC,YAAY,EACZQ,eAAe,IAEH,EAAAwB,yBAA2B,IAAIpC,EAAY,CACvDkC,KAAM,2BACNlK,OAAO,EACPmI,SAAU,KACVC,YAAY,EACZQ,eAAe,IAEH,EAAAI,oBAAsB,IAAIhB,EAAY,CAClDkC,KAAM,sBACNlK,OAAO,EACPmI,SAAU,OAEE,EAAAkC,wBAA0B,IAAIrC,EAAY,CACtDkC,KAAM,0BACNlK,OAAO,EACPmI,SAAU,KACVC,YAAY,IAEA,EAAA0B,QAAU,IAAI9B,EAAY,CACtCkC,KAAM,WACNlK,OAAO,EACPmI,SAAU,KACVC,YAAY,EACZQ,eAAe,EACfF,gBAAiB,EAAAD,EAAA,gBAEL,EAAAoB,QAAU,IAAI7B,EAAY,CACtCkC,KAAM,WACNlK,OAAO,EACPmI,SAAU,KACVC,YAAY,EACZQ,eAAe,EACfF,gBAAiB,EAAAD,EAAA,gBAEL,EAAAmB,QAAU,IAAI5B,EAAY,CACtCkC,KAAM,WACNlK,OAAO,EACPmI,SAAU,KACVC,YAAY,EACZQ,eAAe,EACfF,gBAAiB,EAAAD,EAAA,gBAEL,EAAAkB,QAAU,IAAI3B,EAAY,CACtCkC,KAAM,WACNlK,OAAO,EACPmI,SAAU,KACVC,YAAY,EACZQ,eAAe,EACfF,gBAAiB,EAAAD,EAAA,iB,cC1JzB,IAAY6B,E,yBAAZ,SAAYA,GAER,qBACA,uBACA,uBACA,yBACA,+BACA,qBACA,6BACA,+BATJ,CAAYA,MAAU,KAaf,MAAMC,EAA+B,CACxCD,EAAWE,MACXF,EAAWG,OACXH,EAAWI,OACXJ,EAAWK,QACXL,EAAWM,WACXN,EAAWO,MACXP,EAAWQ,UACXR,EAAWS,a,+DCnBHC,E,UAAZ,SAAYA,GACR,uBACA,2BACA,6BACA,qBACA,uBACA,+BANJ,CAAYA,MAAc,KASnB,MAAMC,EAAuC,CAChDD,EAAeE,OACfF,EAAeG,SACfH,EAAeI,UACfJ,EAAeK,MACfL,EAAeM,OACfN,EAAeO,YAGNC,EAAoC,GACjDA,EAAoBR,EAAeE,QAAU,aAC7CM,EAAoBR,EAAeE,QAAU,aAC7CM,EAAoBR,EAAeG,UAAY,YAC/CK,EAAoBR,EAAeI,WAAa,YAChDI,EAAoBR,EAAeK,OAAS,iBAC5CG,EAAoBR,EAAeM,QAAU,UAC7CE,EAAoBR,EAAeO,YAAc,gBAE1C,MAAME,EAAwC,GACrDA,EAA4BT,EAAeE,QAAU,cACrDO,EAA4BT,EAAeG,UAAY,cACvDM,EAA4BT,EAAeI,WAAa,eACxDK,EAA4BT,EAAeK,OAAS,aACpDI,EAA4BT,EAAeM,QAAU,cACrDG,EAA4BT,EAAeO,YAAc,iB,8FCnClD,MAMMG,EAAkB,GAClBC,EAAqB,EACrBC,EAAgC,GAEhCC,EAA6B,EAM7BC,EAA0B,IAC1BC,EAA2B,IAC3BC,EAAW,GACXC,EAAmB,I,oCCjBzB,MAAMC,UAAkBC,EAAA,EAE3B,YAAYC,GAER,GADAnN,QACwB,IAApBmN,EAAS/K,OAGT,KAAM,gCAAkC+K,EAAS/K,OAAS,oDAFzDnC,KAAKmN,WAAYnN,KAAKoN,WAAYpN,KAAKqN,cAAerN,KAAKsN,YAAatN,KAAKuN,KAAMvN,KAAKwN,KAAMxN,KAAKyN,MAAOzN,KAAK0N,OAAQ1N,KAAK2N,SAAWT,GCJ7I,MAAMU,UAA0BC,EAAA,EAKnC,YAAYC,GACR/N,QAJJ,KAAAgO,wBAAqC,KACrC,KAAAC,yBAAsC,KAIlCH,EAAA,aAAsB7N,KAAM8N,GAGhC,WAAWG,EAAqBf,GAC5B,OAAO,IAAIF,EAAUE,I,sBCPtB,MAAMgB,UAAmBC,EAAA,EAQ5B,YAAYC,EAAqBC,EAAoBC,EAAwBC,EAA2BC,GACpGzO,MAAMqO,EAAQC,GACdrO,KAAKyO,KAAOzO,KAAK0O,SAAS,IAAIP,EAAA,EAAMnO,KAAMsO,IAE1CtO,KAAKyO,KAAKlB,KAAOvN,KAAKuN,KAAOvN,KAAKyO,KAAKlB,KACvCvN,KAAKyO,KAAKjB,KAAOxN,KAAKwN,KAAOxN,KAAKyO,KAAKjB,KACvCxN,KAAK2O,QAAU3O,KAAK0O,SAAS,IAAIP,EAAA,EAAMnO,KAAMuO,IAE7CvO,KAAK4O,UAAY5O,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMwO,EAAWM,yBAC3D9O,KAAK4O,UAAUG,QAAU,IAAM/O,KAAKgP,cACpChP,KAAKiP,OAASjP,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMwO,EAAWU,0BACxDlP,KAAKiP,OAAOF,QAAU,OAItB/O,KAAKmP,UAAYnP,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMwO,EAAWY,mCAC3DpP,KAAKmP,UAAUJ,QAAU,QAQ1B,MAAMM,UAAuBxB,EAAA,EAQhC,YAAYC,GACR/N,QAPJ,KAAA+O,uBAAoC,KACpC,KAAAM,iCAA8C,KAC9C,KAAAE,uBAAoC,KACpC,KAAAC,wBAAqC,KACrC,KAAAL,wBAAqC,KAIjCrB,EAAA,aAAsB7N,KAAM8N,GAGhC,WAAWG,EAAqBf,GAC5B,OAAO,IAAIF,EAAUE,I,+BClDtB,MAAMsC,UAAqBC,EAAA,EAK9B,YAAYrB,EAAqBsB,GAC7B3P,MAAMqO,GACNpO,KAAKuN,KAAOmC,EAAOnC,KACnBvN,KAAKwN,KAAOkC,EAAOlC,KACnBxN,KAAKyN,MAAQiC,EAAOjC,MACpBzN,KAAK0N,OAASgC,EAAOhC,OACrB1N,KAAK2N,QAAU+B,EAAO/B,QACtB3N,KAAK2P,MAAQ,IACb3P,KAAK4P,iBAGT,QACI7P,MAAM8P,QACN7P,KAAK2P,MAAQ,IAGjB,SAASG,GACD9P,KAAK+P,SACTD,EAAQE,UAAY,SACpBF,EAAQG,KAAO,kBACfH,EAAQI,UAAY,OACpBJ,EAAQK,SAASnQ,KAAK2P,MAAO3P,KAAKqH,EAAIrH,KAAKyN,MAAQ,EAAGzN,KAAKuH,EAAIvH,KAAK0N,OAAS,GAC7E3N,MAAMqQ,SAASN,KCpBhB,MAAMO,UAA4BlC,EAAA,EAcrC,YAAYC,EAAqBC,EAAoBG,GACjDzO,MAAMqO,EAAQC,GANlB,KAAApK,WAAqB,EACrB,KAAAG,aAAuB,EACvB,KAAAC,eAAyB,EACzB,KAAAiM,SAAmB,EAIftQ,KAAKuQ,SAAWvQ,KAAK0O,SAAS,IAAIc,EAAaxP,KAAMwO,EAAWgC,+BAChExQ,KAAKyQ,aAAezQ,KAAK0O,SAAS,IAAIc,EAAaxP,KAAMwO,EAAWkC,oCACpE1Q,KAAK2Q,aAAeC,EAAA,WAA0B,2CAC9C5Q,KAAK6Q,gBAAkBD,EAAA,WAA0B,yCACjD5Q,KAAK8Q,eAAiBF,EAAA,WAA0B,wCAChD5Q,KAAK+Q,OAASH,EAAA,WAA0B,+CACxC5Q,KAAKgR,sBAAsB,6BAAmC7N,IAC1DnD,KAAKuQ,SAASZ,MAAQxM,EAAMmN,SAASW,WACrCjR,KAAKyQ,aAAad,MAAQxM,EAAMc,WAAWgN,WAC3CjR,KAAKiE,WAAad,EAAMc,WACxBjE,KAAKoE,aAAejB,EAAM+N,YAC1BlR,KAAKqE,eAAiBlB,EAAMgO,cAC5BnR,KAAKsQ,SAAWnN,EAAMmN,SACtBtQ,KAAKoR,kBAIb,QACIrR,MAAM8P,QACN7P,KAAKiE,WAAa,EAClBjE,KAAKoE,aAAe,EACpBpE,KAAKqE,eAAiB,EACtBrE,KAAKsQ,SAAW,EAGpB,SAASR,GACL/P,MAAMqQ,SAASN,GAEf,IAAIuB,EAAOrR,KAAKqH,EAAIrH,KAAKsR,IAAI7D,MAAQ,EACjC8D,EAAOvR,KAAKuH,EAAIvH,KAAKsR,IAAI5D,OAAS,GACtC,IAAK,IAAI8D,EAAI,GAAIxR,KAAKqE,eAAiB,GAAKmN,EAAIrJ,KAAKsJ,IAAIzR,KAAKqE,eAAgBrE,KAAKiE,cAAgBsN,GAAQpJ,KAAKsJ,IAAIzR,KAAK2Q,aAAajD,OAAQ1N,KAAK6Q,gBAAgBnD,OAAQ1N,KAAK8Q,eAAepD,QAAS8D,IAAK,CACzM,IAAIE,EAAa1R,KAAK2Q,aAClB3Q,KAAKoE,aAAeoN,EACpBE,EAAa1R,KAAK8Q,eACX9Q,KAAKiE,WAAauN,IACzBE,EAAa1R,KAAK6Q,iBAEtBU,GAAQG,EAAWhE,OACnBoC,EAAQ6B,UAAUD,EAAYL,EAAOK,EAAWjE,MAAQ,EAAG8D,GAG/DF,EAAOrR,KAAKqH,EAAIrH,KAAKsR,IAAI7D,MAAQ,GACjC8D,EAAOvR,KAAKuH,EAAIvH,KAAKsR,IAAI5D,OAAS,GAClC,IAAK,IAAIkE,EAAI,EAAGA,EAAI5R,KAAKsQ,UAAYiB,GAAQvR,KAAK+Q,OAAOrD,SAAUkE,EAC/DL,GAAQvR,KAAK+Q,OAAOrD,OACpBoC,EAAQ6B,UAAU3R,KAAK+Q,OAAQM,EAAOrR,KAAK+Q,OAAOtD,MAAQ,EAAG8D,IAMlE,MAAMM,UAAgChE,EAAA,EAKzC,YAAYC,GACR/N,QAJJ,KAAAyQ,6BAA0C,KAC1C,KAAAE,kCAA+C,KAI3C7C,EAAA,aAAsB7N,KAAM8N,GAGhC,WAAWG,EAAqBf,GAC5B,OAAO,IAAIF,EAAUE,ICrFtB,MAAM4E,UAA8BjE,EAAA,EAOvC,YAAYC,GACR/N,QANJ,KAAAgS,+BAA8C,GAC9C,KAAAC,6BAA4C,GAC5C,KAAAC,6BAA0C,KAC1C,KAAAC,6BAA0C,KAItCrE,EAAA,aAAsB7N,KAAM8N,GAGhC,YAAYqE,EAAQlE,EAAaf,GAC7B,OAAIe,EAAYmE,MAAM,uCAClBpS,KAAK+R,+BAA+B/K,KAAKhH,KAAKqS,WAAWpE,EAAaf,KAC/D,GACAe,EAAYmE,MAAM,qCACzBpS,KAAKgS,6BAA6BhL,KAAKhH,KAAKqS,WAAWpE,EAAaf,KAC7D,GAEAnN,MAAMuS,YAAYH,EAAQlE,EAAaf,GAItD,WAAWe,EAAqBf,GAC5B,OAAO,IAAIF,EAAUE,ICzBtB,MAAMqF,UAAqB1E,EAAA,EAM9B,YAAYC,GACR/N,QALJ,KAAAyS,8BAA2C,KAC3C,KAAAC,2BAAwC,KACxC,KAAAC,8BAA2C,KAIvC7E,EAAA,aAAsB7N,KAAM8N,GAGhC,WAAWG,EAAqBf,GAC5B,OAAO,IAAIF,EAAUE,ICZtB,MAAMyF,UAA+B9E,EAAA,EAOxC,YAAYC,GACR/N,QANJ,KAAA6S,+BAA4C,KAC5C,KAAAC,gCAA6C,KAC7C,KAAAC,uCAAoD,KACpD,KAAAC,+BAA4C,KAIxClF,EAAA,aAAsB7N,KAAM8N,GAGhC,WAAWG,EAAqBf,GAC5B,OAAO,IAAIF,EAAUE,ICbtB,MAAM8F,UAA6BnF,EAAA,EAKtC,YAAYC,GACR/N,QAJJ,KAAAkT,6BAA0C,KAC1C,KAAAC,+BAA4C,KAIxCrF,EAAA,aAAsB7N,KAAM8N,GAGhC,WAAWG,EAAqBf,GAC5B,OAAO,IAAIF,EAAUE,ICLtB,MAAMiG,UAAmBtF,EAAA,EAW5B,YAAYC,GACR/N,QAVJ,KAAAqT,WAA6B,KAC7B,KAAAC,oBAA+C,KAC/C,KAAAC,cAA8B,KAC9B,KAAAC,iBAAyC,KACzC,KAAAC,kBAA2C,KAC3C,KAAAC,mBAA6C,KAC7C,KAAAC,cAAmC,KACnC,KAAAC,kBAAyB,KAIrB9F,EAAA,aAAsB7N,KAAM8N,GAGhC,WAAWG,EAAqBf,GAC5B,MAAM0G,EAAc,GAEpB,OADA1G,EAAS3J,SAAQsQ,GAAOD,EAAYC,EAAI,IAAMA,IAC1C5F,IAAgB,aAAa6F,cACtB,IAAIzE,EAAeuE,GACnB3F,IAAgB,sBAAsB6F,cACtC,IAAIjC,EAAwB+B,GAC5B3F,IAAgB,gBAAgB6F,cAChC,IAAIvB,EAAaqB,GACjB3F,IAAgB,mBAAmB6F,cACnC,IAAId,EAAqBY,GACzB3F,IAAgB,oBAAoB6F,cACpC,IAAIhC,EAAsB8B,GAC1B3F,IAAgB,qBAAqB6F,cACrC,IAAInB,EAAuBiB,GAC3B3F,IAAgB,gBAAgB6F,cAChC,IAAIlG,EAAkBgG,GACtB3F,IAAgB,oBAAoB6F,cACpC,KAEAF,G,aC1CZ,MAAMG,UAAkBlG,EAAA,EAe3B,YAAYC,GACR/N,QAdJ,KAAAqT,WAAuB,KACvB,KAAAY,eAA2B,KAC3B,KAAAC,kBAA8B,KAC9B,KAAAC,cAA0B,KAC1B,KAAAC,kBAA8B,KAC9B,KAAAd,oBAAgC,KAChC,KAAAC,cAA0B,KAC1B,KAAAC,iBAA6B,KAC7B,KAAAC,kBAA8B,KAC9B,KAAAC,mBAA+B,KAC/B,KAAAC,cAA0B,KAC1B,KAAAC,kBAA8B,KAI1B9F,EAAA,aAAsB7N,KAAM8N,GAGhC,WAAWG,EAAqBf,GAC5B,OAAO,IAAIkH,EAAA,EAASlH,ICtBrB,MAAMmH,UAAsBpH,EAAA,EAE/B,YAAYqH,GACRvU,QACAC,KAAKoN,WAAakH,EAClBtU,KAAKqN,cAAgBiH,EACrBtU,KAAKsN,YAAcgH,EACnBtU,KAAKuU,aAAeD,EACpBtU,KAAKuN,KAAO,EACZvN,KAAKwN,KAAO,G,sBCDb,MAAMgH,UAAuB3F,EAAA,EAQhC,YAAYT,EAAuBqG,EAAkD3U,GACjFC,MAAMqO,EAAQ,IAAIiG,EAAcI,EAAwBH,sBAP5D,KAAAI,SAAyB,GACzB,KAAAC,KAAe,KACf,KAAAC,iBAAmB,KACnB,KAAAC,gBAAkB,GAClB,KAAAC,gBAAkB,EAId9U,KAAK2U,KAAOF,EAAwBM,QACpC/U,KAAK+P,QAAS,EAEd/P,KAAK+O,QAAU,KACP/O,KAAK0U,SAASvS,OAAS,GAC3BiM,EAAO4G,cAAchV,OAGzBA,KAAKgR,sBAAsBlR,GAAWqD,IAElC,IADAnD,KAAK+P,QAAS,EACP/P,KAAK0U,SAASvS,QAAU,GAAGnC,KAAK0U,SAASO,MAChDjV,KAAK0U,SAASQ,QAAQ/R,GACtBiL,EAAO+G,WAAWnV,SAI1B,QACID,MAAM8P,QACN7P,KAAK4U,kBAAmB,QAAiB5U,KAAK4U,kBAC9C5U,KAAK+P,QAAS,EACd/P,KAAK0U,SAAW,GAGpB,cAAcU,EAAiBC,GAC3B,OAAO,IAAIC,SAAeC,GAAYvV,KAAKwV,gBAAgBJ,EAASC,EAASE,KAGzE,gBAAgBH,EAAiBC,EAAiBI,GACtD,MAAMC,EAAQN,EAAUpV,KAAKuN,KACvBoI,EAAQN,EAAUrV,KAAKwN,KAC7B,GAAIrF,KAAKyN,IAAIF,IAAU1V,KAAK6U,iBAAmB1M,KAAKyN,IAAID,IAAU3V,KAAK8U,gBACnE9U,KAAKuN,KAAO6H,EACZpV,KAAKwN,KAAO6H,EACZrV,KAAK4U,iBAAmB,KACpBa,GAAQA,QACT,CACHzV,KAAKuN,MAAQpF,KAAKC,MAAMD,KAAK0N,KAAKH,GAASvN,KAAK2N,KAAK3N,KAAKyN,IAAIF,IAAU1V,KAAK6U,iBAC7E7U,KAAKwN,MAAQrF,KAAKC,MAAMD,KAAK0N,KAAKF,GAASxN,KAAK2N,KAAK3N,KAAKyN,IAAID,IAAU3V,KAAK8U,iBAC7E,MAAMiB,EAAO/V,KACbA,KAAK4U,iBAAmBoB,YAAW,IAAMD,EAAKP,gBAAgBJ,EAASC,EAASI,IAAS,IAAO,MAEpGzV,KAAK4P,iBACL5P,KAAKoR,eAGT,SAAStB,GACL/P,MAAMqQ,SAASN,GACX9P,KAAK+P,SACTD,EAAQE,UAAY,OACpBF,EAAQG,KAAO,kBACfH,EAAQI,UAAY,OACpBJ,EAAQK,SAASnQ,KAAK0U,SAASvS,OAAO8O,WAAYjR,KAAKqH,EAAI,EAAGrH,KAAKuH,EAAIvH,KAAK0N,OAAS,EAAI,KC5D1F,MAAMuI,UAAsB9H,EAAA,EAK/B,YAAYC,EAAqBC,EAAoBG,EAA+B0H,EAAwCC,GACxHpW,MAAMqO,EAAQC,GAJlB,KAAA+H,aAAiC,GACjC,KAAAD,iBAAqC,KAIjCnW,KAAKmW,iBAAmBA,EACxBnW,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMwO,EAAWT,0BAA0BgB,QAAU,IAAM/O,KAAKqW,oBACzFrW,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMwO,EAAWR,2BAA2Be,QAAU,IAAM/O,KAAKsW,oBAE1FtW,KAAK0O,SAAS,IAAI8F,EAAexU,KAAMkW,EAAmBK,iBAAkB,qBAC5EvW,KAAK0O,SAAS,IAAI8F,EAAexU,KAAMkW,EAAmBM,mBAAoB,uBAC9ExW,KAAK0O,SAAS,IAAI8F,EAAexU,KAAMkW,EAAmBO,iBAAkB,6BAC5EzW,KAAK0O,SAAS,IAAI8F,EAAexU,KAAMkW,EAAmBQ,gBAAiB,4BAC3E1W,KAAK0O,SAAS,IAAI8F,EAAexU,KAAMkW,EAAmBS,cAAe,yBACzE3W,KAAK0O,SAAS,IAAI8F,EAAexU,KAAMkW,EAAmBU,eAAgB,2BAC1E5W,KAAK0O,SAAS,IAAI8F,EAAexU,KAAMkW,EAAmBW,eAAgB,2BAC1E7W,KAAK0O,SAAS,IAAI8F,EAAexU,KAAMkW,EAAmBY,oBAAqB,iCAGnF,QACI/W,MAAM8P,QACN7P,KAAKoW,aAAe,GAGhB,oBACJ,GAAIpW,KAAKoW,aAAajU,OAAS,EAAG,OAClC,MAAM4U,EAAM/W,KAAKoW,aAAa,GAC9B,GAAIW,EAAIrC,SAASvS,OAAS,EAAG,OAC7B,MAAM6U,EAAMD,EAAIrC,SAAS,GACzB7J,QAAQoM,IAAI,4BAA6BD,EAAIE,UAGzC,oBACJ,GAAIlX,KAAKoW,aAAajU,OAAS,EAAG,OAClC,MAAMgV,EAASnX,KAAKoW,aAAa,GAC7Be,EAAOzC,SAASvS,OAAS,IAC7BgV,EAAOzC,SAAS0C,QACZD,EAAOzC,SAASvS,OAAS,IACzBgV,EAAOpH,QAAS,EAChB/P,KAAKmW,iBAAiBkB,YAAW,GACjCrX,KAAKoW,aAAakB,OAAOtX,KAAKoW,aAAaxP,QAAQuQ,GAAS,GAC5DnX,KAAKuX,yBAAyBC,QAElCL,EAAO/F,gBAGX,WAAW+F,GACHnX,KAAKoW,aAAaqB,SAASN,GAC3BA,EAAO/F,eAEPpR,KAAK0X,cAAcP,GAInB,cAAcA,GAClBnX,KAAKoW,aAAa7S,SAAQwT,GAAOA,EAAIY,UAAW,IAChD,MAAMtC,GAAWrV,KAAKoW,aAAawB,KAAIvW,GAAKA,EAAEqM,SAAQmK,QAAO,CAACC,EAAMC,IAAQD,EAAOC,GAAK,GACxF/X,KAAKoW,aAAapP,KAAKmQ,GACvBA,EAAO5J,MAAQ4J,EAAO1J,MACtB0J,EAAO3J,KAAO6H,EAAU8B,EAAOzJ,OAC/ByJ,EAAOvH,iBACPuH,EAAOa,cAAc,EAAG3C,GAASmC,MAAK,IAAMxX,KAAKoW,aAAa7S,SAAQwT,GAAOA,EAAIY,UAAW,MAGhG,cAAcR,GACNA,IAAWnX,KAAKoW,aAAa,GAC7BpW,KAAKiY,UAAUd,IAEfnX,KAAKmW,iBAAiB+B,QAAQf,EAAOxC,MACrC3U,KAAKmW,iBAAiBnH,eAItB,UAAUmI,GACdnX,KAAKoW,aAAakB,OAAOtX,KAAKoW,aAAaxP,QAAQuQ,GAAS,GAC5DnX,KAAKoW,aAAalB,QAAQiC,GAC1BnX,KAAKuX,yBAAyBC,MAAK,KAC/BxX,KAAKmW,iBAAiB+B,QAAQf,EAAOxC,MACrC3U,KAAKmW,iBAAiBkB,YAAW,MAIjC,yBACJrX,KAAKoW,aAAa7S,SAAQwT,GAAOA,EAAIY,UAAW,IAChD,IAAInK,EAAO,EACX,MAAM2K,EAAWnY,KAAKoW,aAAawB,KAAIb,IACnC,MAAMqB,EAAIrB,EAAIiB,cAAc,EAAGxK,GAE/B,OADAA,GAAQuJ,EAAIrJ,OACL0K,KAEX,OAAO,IAAI9C,SAAeC,IACtBD,QAAQ+C,IAAIF,GAAUX,MAAK,KACvBxX,KAAKoW,aAAa7S,SAAQwT,GAAOA,EAAIY,UAAW,IAChDpC,WC1GT,MAAM+C,EAQT,YAAYpL,GANZ,KAAA6H,QAAkB,KAClB,KAAAT,oBAA8B,KAC9B,KAAAiE,IAAc,KACd,KAAAC,OAAiB,KACjB,KAAAC,KAAe,MAGVzY,KAAK+U,QAAS/U,KAAKsU,oBAAqBtU,KAAKuY,IAAKvY,KAAKwY,OAAQxY,KAAKyY,MAAQvL,EAC7ElN,KAAK+U,QAAU/U,KAAK+U,QAAQ2D,QAAQ,KAAM,MCP3C,MAAMC,UAA2B9K,EAAA,EAWpC,YAAYC,GACR/N,QAVJ,KAAAwW,iBAA4C,KAC5C,KAAAC,mBAA8C,KAC9C,KAAAC,iBAA4C,KAC5C,KAAAC,gBAA2C,KAC3C,KAAAC,cAAyC,KACzC,KAAAC,eAA0C,KAC1C,KAAAC,eAA0C,KAC1C,KAAAC,oBAA+C,KAI3CjJ,EAAA,aAAsB7N,KAAM8N,GAGhC,WAAWG,EAAqBf,GAC5B,OAAO,IAAIoL,EAAwBpL,ICdpC,MAAM0L,UAAyBzK,EAAA,EAKlC,YAAYC,EAAqBC,GAC7BtO,MAAMqO,EAAQC,GAJlB,KAAA4B,KAAmB,KACnB,KAAA4I,UAAY,KAIR7Y,KAAKiQ,KAAOW,EAAA,mBAGhB,QAAQ+D,GACJ3U,KAAK6Y,UAAYlE,EAAO3U,KAAKiQ,KAAK6I,gBAAgBnE,EAAM3U,KAAKsR,IAAI7D,MAAQ,IAAM,KAC/EzN,KAAKoR,eAGT,SAAStB,GACL/P,MAAMqQ,SAASN,GACX9P,KAAK6Y,WAAW/I,EAAQ6B,UAAU3R,KAAK6Y,UAAW7Y,KAAKqH,GAAKrH,KAAKsR,IAAI7D,MAAQzN,KAAK6Y,UAAUpL,OAAS,EAAGzN,KAAKuH,EAAI,K,YChBtH,MAAMwR,UAAmB,MAGzB,MAAMC,UAAwBD,EAEjC,cACIhZ,MAAM,gCAKP,MAAMkZ,UAAwBF,EAIjC,YAAYzX,GACRvB,MAAM,+BACNC,KAAKsB,WAAaA,GAKnB,MAAM4X,UAA+BH,EAIxC,YAAY1W,GACRtC,MAAM,uBACNC,KAAKqC,KAAOA,GAKb,MAAM8W,UAAwBJ,EAEjC,cACIhZ,MAAM,gCAKP,MAAMqZ,UAAmBL,EAE5B,cACIhZ,MAAM,0BAKP,MAAMsZ,UAAmBN,EAE5B,cACIhZ,MAAM,0BAKP,MAAMuZ,UAAiCP,EAI1C,YAAYQ,GACRxZ,MAAM,yCACNC,KAAKuZ,SAAWA,GAKjB,MAAMC,UAA6BT,EAEtC,cACIhZ,MAAM,sCAKP,MAAM0Z,UAAwBV,EAEjC,cACIhZ,MAAM,+BAKP,MAAM2Z,UAAuBX,EAEhC,cACIhZ,MAAM,8BAKP,MAAM4Z,UAA2BZ,EAIpC,YAAYa,GACR7Z,MAAM,0BACNC,KAAK4Z,aAAeA,GAKrB,MAAMC,UAAiCd,EAI1C,YAAYe,GACR/Z,MAAM,yCACNC,KAAK8Z,MAAQA,GAKd,MAAMC,UAAuBhB,EAEhC,cACIhZ,MAAM,+BAKP,MAAMia,UAA2BjB,EAEpC,cACIhZ,MAAM,mCAKP,MAAMka,UAA0BlB,EAEnC,cACIhZ,MAAM,kCAKP,MAAMma,UAA0BnB,EAEnC,cACIhZ,MAAM,kCAKP,MAAMoa,UAAkBpB,EAE3B,cACIhZ,MAAM,yBAKP,MAAMqa,UAAmBrB,EAE5B,cACIhZ,MAAM,0BAKP,MAAMsa,UAAsBtB,EAE/B,cACIhZ,MAAM,6BAKP,MAAMua,UAAqBvB,EAE9B,cACIhZ,MAAM,4BAKP,MAAMwa,WAAoBxB,EAI7B,YAAY9W,GACRlC,MAAM,0BACNC,KAAKiC,SAAWA,GAKjB,MAAMuY,WAAuBzB,EAEhC,cACIhZ,MAAM,kC,wBCrMP,MAAM0a,WAA+BxN,EAAA,EAExC,YAAYC,GACRnN,SACCC,KAAKyN,MAAOzN,KAAK0N,OAAQ1N,KAAKqN,cAAerN,KAAKsN,YAAatN,KAAK2N,SAAWT,EAChFlN,KAAKuN,KAAO,EACZvN,KAAKwN,KAAO,ICNb,MAAMkN,WAAoBzN,EAAA,EAO7B,YAAYC,G,QAER,GADAnN,QANJ,KAAA4a,WAAqB,KACrB,KAAAC,gBAA0B,KAC1B,KAAAC,mBAA6B,KAC7B,KAAAC,OAAiB,KAIW,IAApB5N,EAAS/K,QACRnC,KAAKoN,WAAYpN,KAAKuU,aAAcvU,KAAKsN,YAAatN,KAAK8a,QAAU5N,OACnE,GAAwB,IAApBA,EAAS/K,QAAoC,IAApB+K,EAAS/K,OAAc,CACvD,IAAIwL,EAASiN,GACZ5a,KAAKoN,WAAYpN,KAAKuU,aAAcvU,KAAKsN,YAAaK,EAASiN,EAAiB5a,KAAK8a,QAAU5N,EAC5FS,IACIoN,MAAMC,QAAQrN,IACb3N,KAAK2N,QAAS3N,KAAK2a,YAAchN,EAElC3N,KAAK2N,QAAUA,GAGnBiN,IACIG,MAAMC,QAAQJ,IACb5a,KAAK4a,gBAAiB5a,KAAK6a,oBAAsBD,EAElD5a,KAAK4a,gBAAkBA,QAI/B/P,QAAQC,MAAM,0CAA4CoC,EAAS/K,QAE3D,QAAZ,EAAAnC,KAAK2N,eAAO,SAAE+K,QAAQ,KAAM,KACR,QAApB,EAAA1Y,KAAK4a,uBAAe,SAAElC,QAAQ,KAAM,KACpC1Y,KAAKyN,MAAQ,GACbzN,KAAK0N,OAAS,IChCf,MAAMuN,WAAwBpM,EAAA,EAQjC,YAAYT,EAAqB8M,EAA0BC,EAAiBC,EAAqBC,GAC7Ftb,MAAMqO,EAAQ8M,GAPlB,KAAAP,WAAqB,KACrB,KAAAC,gBAA0B,KAC1B,KAAAC,mBAA6B,KAC7B,KAAAC,OAAiB,KACjB,KAAAQ,WAA4B,IAAMtb,KAAK2X,SAInC3X,KAAKmN,WAAagO,EAClBnb,KAAKuN,KAAO6N,EAAc,GAC1Bpb,KAAKwN,KAAO,EAAIxN,KAAK0N,OAAS2N,EAC9Brb,KAAK2a,WAAaO,EAAYP,WAC9B3a,KAAK4a,gBAAkBM,EAAYN,gBACnC5a,KAAK6a,mBAAqBK,EAAYL,mBACtC7a,KAAK8a,OAASI,EAAYJ,OAC1B9a,KAAK2X,UAAW,EAChB3X,KAAK+O,QAAU,IAAMlE,QAAQoM,IAAI,sBAAwBjX,KAAKmN,YAGlE,QACIpN,MAAM8P,QACN7P,KAAK2X,UAAW,EAChB3X,KAAKub,aAAY,GAGrB,YAAYC,GAAsB,GAC9B,MAAMC,IAAgBzb,KAAKsb,aACrBI,EAAe1b,KAAK2X,WAAa8D,EAGvC,OAFAzb,KAAK2X,SAAW8D,EACZC,GAAgBF,GAAYxb,KAAKoR,eAC9BsK,EAGX,UAAU5L,GACN/P,MAAM4b,UAAU7L,IACX9P,KAAK2X,UAAY3X,KAAK4b,QACvB9L,EAAQ+L,YAAc,OACtB/L,EAAQgM,UAAY,EACpBhM,EAAQiM,WAAW/b,KAAKqH,EAAIyI,EAAQgM,UAAY,EAAG9b,KAAKuH,EAAIuI,EAAQgM,UAAY,EAAG9b,KAAKyN,MAAQqC,EAAQgM,UAAY,EAAG9b,KAAK0N,OAASoC,EAAQgM,UAAY,KCpC9J,MAAME,WAAqB7N,EAAA,EAK9B,YAAYC,EAAqB6N,EAAYC,EAAqB,MAE9D,GADAnc,MAAMqO,GAJV,KAAA+N,QAAkB,KAClB,KAAAC,iBAAsC,GAI9BF,EAAa,CACb,MAAMG,EAAa,IAAI5B,GAAuB7J,EAAA,MAAqB,wBACnE5Q,KAAKmc,QAAUnc,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMqc,IAC9Crc,KAAKmc,QAAQpN,QAAU,IAAM/O,KAAKgP,aAAY,IAAMkN,EAAYlN,gBAEpE,MAAMsN,EAAc1L,EAAA,MAAqB,0BAA2BqL,EAAWhL,aAExEsL,EAASC,EAAMC,EAAMC,EAAMC,EAAMC,EAAmBC,EAASC,GAAWR,EAC/Etc,KAAKsR,IAAM4K,EAActL,EAAA,WAA0B2L,GAAW3L,EAAA,WAA0BgM,GACxF5c,KAAK+c,MAAQ/c,KAAKsR,IAAI7D,MAG1B,YAAYuP,EAAuB7B,GAC/B,MAAMD,EAAc,IAAIR,GAAY9J,EAAA,MAAqBoM,EAAe7B,IAClE8B,EAAWjd,KAAK0O,SAAS,IAAIuM,GAAgBjb,KAAMkb,EAAaC,EAASnb,KAAKsR,IAAI7D,MAAOzN,KAAKoc,iBAAiBja,SAErH,OADAnC,KAAKoc,iBAAiBpV,KAAKiW,GACpBA,EAGX,YAAYxH,EAAoB,MAC5B1V,MAAMiP,YAAYyG,GACbzV,KAAKkd,SAASld,KAAKmd,wBAG5B,wBACInd,KAAKoc,iBAAiB7Y,SAAS4T,GAAWA,EAAOoE,aAAY,KAC7Dvb,KAAKoR,gBCnCN,MAAMgM,WAAsBpB,GAE/B,YAAY5N,EAAqB8N,GAC7Bnc,MAAMqO,EAAQ,GAAI8N,GAClBlc,KAAKmc,QAAQpN,QAAU,KACnB/O,KAAKqd,aAAa,IAAIrE,GACtBhZ,KAAKgP,aAAY,IAAMkN,EAAYlN,iBAEvChP,KAAKsd,iBAAiB,uBAAwB,cAAe3Z,GAAA,eAC7D3D,KAAKsd,iBAAiB,uBAAwB,cAAe3Z,GAAA,gBAC7D3D,KAAKsd,iBAAiB,uBAAwB,QAAS3Z,GAAA,SACvD3D,KAAKsd,iBAAiB,uBAAwB,eAAgB3Z,GAAA,iBAC9D3D,KAAKsd,iBAAiB,uBAAwB,WAAY3Z,GAAA,YAC1D3D,KAAKsd,iBAAiB,uBAAwB,UAAW3Z,GAAA,WACzD3D,KAAKsd,iBAAiB,uBAAwB,WAAY3Z,GAAA,WAC1D3D,KAAKsd,iBAAiB,uBAAwB,cAAe3Z,GAAA,gBAC7D3D,KAAKsd,iBAAiB,uBAAwB,aAAc3Z,GAAA,cAC5D3D,KAAKsd,iBAAiB,uBAAwB,cAAe3Z,GAAA,gBAGjE,iBAAiBqZ,EAAuB7B,EAAiB7Z,GACrD,MAAMic,EAAOvd,KAAKwd,YAAYR,EAAe7B,GAG7C,OAFAoC,EAAKjC,WAAa,KAAM,EACxBiC,EAAKxO,QAAU,IAAM/O,KAAKqd,aAAa,IAAIpE,EAAgB3X,IACpDic,G,cCpBR,MAAME,WAAqBzB,GAK9B,YAAY5N,EAAqB8N,GAC7Bnc,MAAMqO,EAAQ,EAAG8N,GAJrB,KAAAwB,sBAAgC,EAChC,KAAAjd,aAAyC,IAAID,IAIzCR,KAAK2d,eAAe,kBAAmB,8BAA+BvS,GAAA,SACtEpL,KAAK2d,eAAe,kBAAmB,8BAA+BvS,GAAA,UACtEpL,KAAK2d,eAAe,kBAAmB,+BAAgCvS,GAAA,UACvEpL,KAAK2d,eAAe,kBAAmB,gCAAiCvS,GAAA,WACxEpL,KAAK2d,eAAe,kBAAmB,mCAAoCvS,GAAA,cAC3EpL,KAAK2d,eAAe,kBAAmB,8BAA+BvS,GAAA,SACtEpL,KAAK2d,eAAe,kBAAmB,kCAAmCvS,GAAA,aAC1EpL,KAAK2d,eAAe,kBAAmB,mCAAoCvS,GAAA,cAC3EpL,KAAKgR,sBAAsB,uBAA6B7N,IACpDnD,KAAK0d,sBAAwB,iBAAkCva,EAAOQ,GAAA,eACtE3D,KAAKmd,2BAETnd,KAAKgR,sBAAsB,uBAA6B7N,IACpDnD,KAAKS,aAAe0C,EAAM1C,aAC1BT,KAAKmd,2BAIb,eAAeH,EAAuB7B,EAAiB9Y,GACnD,MAAM4a,EAAWld,MAAMyd,YAAYR,EAAe7B,GAGlD,OAFA8B,EAAS3B,WAAa,IAAMtb,KAAK0d,sBAAwB,KAAO1d,KAAKS,aAAamI,IAAIvG,GACtF4a,EAASlO,QAAU,IAAM/O,KAAKqd,aAAa,IAAInE,EAAuB7W,IAC/D4a,EAGX,QACIld,MAAM8P,QACN7P,KAAK0d,sBAAwB,EAC7B1d,KAAKS,aAAe,IAAID,KCzCzB,MAAMod,WAA6BnO,EAAA,EAItC,YAAYrB,GACRrO,MAAMqO,GAHV,KAAAyP,oBAA8B,GAI1B7d,KAAKuN,KAAO,EACZvN,KAAKwN,KAAO,GACZxN,KAAKgR,sBAAsB,+BAAqC7N,IAC5DnD,KAAK6d,qBAAuB1a,EAAM0a,qBAAuB,IAAI5M,WAC7DjR,KAAKoR,kBAIb,QACIrR,MAAM8P,QACN7P,KAAK6d,oBAAsB,GAG/B,SAAS/N,GACD9P,KAAK+P,SACTD,EAAQE,UAAY,OACpBF,EAAQG,KAAO,kBACfH,EAAQI,UAAYlQ,KAAK2X,UAAa3X,KAAKoO,QAAUpO,KAAKoO,OAAOuJ,SAAY,OAAS,OACtF7H,EAAQK,SAASnQ,KAAK6d,oBAAqB7d,KAAKqH,EAAGrH,KAAKuH,GACxDxH,MAAMqQ,SAASN,KCzBhB,MAAMgO,WAA0B9B,GAEnC,YAAY5N,EAAqB8N,GAC7Bnc,MAAMqO,EAAQ,EAAG8N,GACjBlc,KAAKwd,YAAY,uBAAwB,aACzCxd,KAAKwd,YAAY,uBAAwB,gBACzCxd,KAAKwd,YAAY,uBAAwB,YACzCxd,KAAKwd,YAAY,uBAAwB,eACzCxd,KAAKwd,YAAY,uBAAwB,aCP1C,MAAMO,WAA8B9C,GAQvC,YAAY7M,EAAqB4P,EAA6BC,EAA4B7C,EAAqBC,GAC3Gtb,MAAMqO,EAAQ4P,EAAgB,KAAM5C,EAAaC,GAPrD,KAAArM,aAAuB,EAQnBhP,KAAKke,YAActN,EAAA,iBAAgCqN,EAAc7Q,YACjEpN,KAAKme,WAAavN,EAAA,iBAAgCqN,EAAc5Q,eAChErN,KAAKoe,aAAexN,EAAA,iBAAgCqN,EAAc3Q,aAClEtN,KAAKqe,cAAgBzN,EAAA,iBAAgCqN,EAAc1J,cAGvE,UACIvU,KAAKgP,aAAehP,KAAKgP,YACzBjP,MAAMue,UAGV,SAASxO,GACL,GAAI9P,KAAK+P,OAAQ,OACjB,IAAIuB,EAAMtR,KAAKgP,YAAchP,KAAKke,YAAcle,KAAKue,UACjDve,KAAK2X,SAEDrG,EADAtR,KAAKgP,YACChP,KAAKqe,eAAiBre,KAAKoe,cAAgBpe,KAAKke,YAEhDle,KAAKwe,aAAexe,KAAKye,YAAcze,KAAKue,UAE/Cve,KAAK0e,QAERpN,EADAtR,KAAKgP,YACChP,KAAKoe,cAAgBpe,KAAKke,YAE1Ble,KAAKye,YAAcze,KAAKue,UAE3Bve,KAAK4b,QAERtK,EADAtR,KAAKgP,YACChP,KAAKme,YAAcne,KAAKke,YAExBle,KAAK2e,UAAY3e,KAAKue,WAGhCjN,GAAKxB,EAAQ6B,UAAUL,EAAKtR,KAAKqH,EAAGrH,KAAKuH,GAC7CvH,KAAK4e,SAASrb,SAASsb,GAAUA,EAAMzO,SAASN,KAChD9P,KAAK4e,SAASrb,SAASsb,GAAUA,EAAMlD,UAAU7L,KACjD9P,KAAK4e,SAASrb,SAASsb,GAAUA,EAAMC,YAAYhP,MC9CpD,MAAMiP,WAAwB/C,GAEjC,YAAY5N,EAAqB6N,EAAYC,GACzCnc,MAAMqO,EAAQ6N,EAAYC,GAC1Blc,KAAKmc,QAAQpN,QAAU,IAAM/O,KAAKqd,aAAa,IAAI,OCEpD,MAAM2B,WAA4BD,GAOrC,YAAY3Q,EAAqB8N,GAC7Bnc,MAAMqO,EAAQ,EAAG8N,GANrB,KAAAhL,YAAc,EACd,KAAAjN,WAAa,EACb,KAAA1B,oBAA8B,EAC9B,KAAAE,wBAAkC,EAI9BzC,KAAKwd,YAAY,kBAAmB,6BACpC,MAAMQ,EAAiB,IAAItD,GAAY9J,EAAA,MAAqB,kBAAmB,gCACzEqN,EAAgB,IAAIvD,GAAY9J,EAAA,MAAqB,kBAAmB,+BACxEqO,EAAkBjf,KAAK0O,SAAS,IAAIqP,GAAsB/d,KAAMge,EAAgBC,EAAeje,KAAKsR,IAAI7D,MAAOzN,KAAKoc,iBAAiBja,SAC3InC,KAAKoc,iBAAiBpV,KAAKiY,GAC3BA,EAAgB3D,WAAa,IAAMtb,KAAKkR,aAAelR,KAAKiE,aAAejE,KAAKyC,uBAChFwc,EAAgBlQ,QAAU,IAAM/O,KAAKqd,aAAa,IAAIxD,GAA0BoF,EAAgBjQ,cAChG,MAAMkQ,EAAclf,KAAKwd,YAAY,kBAAmB,sCACxD0B,EAAY5D,WAAa,KAAOtb,KAAKuC,mBACrC2c,EAAYnQ,QAAU,IAAM/O,KAAKqd,aAAa,IAAI5D,GAClD,MAAM0F,EAAqBnf,KAAKwd,YAAY,kBAAmB,qCAC/D2B,EAAmB7D,WAAa,KAAM,EACtC6D,EAAmBpQ,QAAU,IAAM/O,KAAKqd,aAAa,IAAI3D,GACzD1Z,KAAKgR,sBAAsB,uBAA6B7N,IACpDnD,KAAKuC,mBAAqBY,EAAMZ,mBAChCvC,KAAKyC,uBAAyBU,EAAMV,uBACpCzC,KAAKmd,2BAETnd,KAAKgR,sBAAsB,6BAAmC7N,IAC1DnD,KAAKiE,WAAad,EAAMc,WACxBjE,KAAKkR,YAAc/N,EAAM+N,YACzBlR,KAAKmd,2BAIb,QACIpd,MAAM8P,QACN7P,KAAKkR,YAAc,EACnBlR,KAAKiE,WAAa,EAClBjE,KAAKuC,oBAAqB,EAC1BvC,KAAKyC,wBAAyB,GC3C/B,MAAM2c,WAAyBL,GAMlC,YAAY3Q,EAAqB8N,GAC7Bnc,MAAMqO,EAAQ,EAAG8N,GALrB,KAAAxb,UAAoB,EACpB,KAAAE,aAAuB,EACvB,KAAAQ,eAAyB,EAIrB,MAAMie,EAAWrf,KAAKwd,YAAY,kBAAmB,8BACrD6B,EAAStQ,QAAU,IAAM/O,KAAKqd,aAAa,IAAIlE,GAC/CkG,EAAS/D,WAAa,KAAOtb,KAAKU,SAClC,MAAM4e,EAAatf,KAAKwd,YAAY,kBAAmB,iCACvD8B,EAAWvQ,QAAU,IAAM/O,KAAKqd,aAAa,IAAIhE,GACjDiG,EAAWhE,WAAa,KAAOtb,KAAKY,YACpC,MAAM2e,EAAiBvf,KAAKwd,YAAY,kBAAmB,iCAC3D+B,EAAejE,WAAa,KAAOtb,KAAKoB,cACxCme,EAAexQ,QAAU,IAAM/O,KAAKqd,aAAa,IAAIjE,GACrDpZ,KAAKgR,sBAAsB,uBAA6B7N,IACpDnD,KAAKU,SAAWyC,EAAMzC,SACtBV,KAAKY,YAAcuC,EAAMvC,YACzBZ,KAAKoB,cAAgB+B,EAAM/B,cAC3BpB,KAAKmd,2BAIb,QACIpd,MAAM8P,QACN7P,KAAKU,UAAW,EAChBV,KAAKY,aAAc,EACnBZ,KAAKoB,eAAgB,GC3BtB,MAAMoe,WAA0BT,GASnC,YAAY3Q,EAAqB8N,GAC7Bnc,MAAMqO,EAAQ,GAAI8N,GALtB,KAAA1a,aAAuB,EACvB,KAAAI,kBAA4B,EAC5B,KAAA6d,gBAA0B,EAItB,MAAMC,EAAW1f,KAAKwd,YAAY,kBAAmB,6BACrDkC,EAASpE,WAAa,KAAM,EAC5BoE,EAAS3Q,QAAU,IAAM/O,KAAKqd,aAAa,IAAIlD,GAC/C,MAAMwF,EAAa3f,KAAKwd,YAAY,kBAAmB,uCACvDmC,EAAWrE,WAAa,KAAOtb,KAAKwB,YACpCme,EAAW5Q,QAAU,IAAM/O,KAAKqd,aAAa,IAAIjD,GACjDpa,KAAKwd,YAAY,kBAAmB,uCACpCxd,KAAK4f,YAAc5f,KAAKwd,YAAY,kBAAmB,8BACvDxd,KAAK4f,YAAYtE,WAAa,KAAM,EACpCtb,KAAKwd,YAAY,kBAAmB,qCACpC,MAAM0B,EAAclf,KAAKwd,YAAY,kBAAmB,iCACxD0B,EAAY5D,WAAa,IAAMtb,KAAK4B,kBAAoB5B,KAAKyf,gBAAkB,EAC/EP,EAAYnQ,QAAU,IAAM/O,KAAKqd,aAAa,IAAIhD,GAClDra,KAAK6f,UAAY7f,KAAKwd,YAAY,kBAAmB,iCACrDxd,KAAK6f,UAAUvE,WAAa,KAAM,EAClCtb,KAAKwd,YAAY,kBAAmB,sCACpCxd,KAAKwd,YAAY,kBAAmB,uCACpC,MAAMsC,EAAmB9f,KAAKwd,YAAY,kBAAmB,gCAC7DsC,EAAiBxE,WAAa,KAAM,EACpCwE,EAAiB/Q,QAAU,IAAM/O,KAAKqd,aAAa,IAAI/C,GACvDta,KAAKgR,sBAAsB,uBAA6B7N,IACpDnD,KAAKwB,YAAc2B,EAAM3B,YACzBxB,KAAK4B,iBAAmBuB,EAAMvB,iBAC9B5B,KAAKmd,2BAETnd,KAAKgR,sBAAsB,uBAA6B7N,IACpDnD,KAAKyf,gBAAkB,iBAAkCtc,EAAOQ,GAAA,eAChE3D,KAAKmd,2BAIb,QACIpd,MAAM8P,QACN7P,KAAKwB,aAAc,EACnBxB,KAAK4B,kBAAmB,EACxB5B,KAAKyf,gBAAkB,GChDxB,MAAMM,WAA0BhB,GAKnC,YAAY3Q,EAAqB8N,GAC7Bnc,MAAMqO,EAAQ,EAAG8N,GAJrB,KAAAlb,WAAqB,EACrB,KAAAI,eAAyB,EAIrB,MAAM4e,EAAkBhgB,KAAKwd,YAAY,kBAAmB,kCAC5DwC,EAAgB1E,WAAa,KAAOtb,KAAKgB,UACzCgf,EAAgBjR,QAAU,IAAM/O,KAAKqd,aAAa,IAAI7D,GAC/BxZ,KAAKwd,YAAY,kBAAmB,iCAC5ClC,WAAa,KAAOtb,KAAKoB,cACxCpB,KAAKgR,sBAAsB,uBAA6B7N,IACpDnD,KAAKgB,UAAYmC,EAAMnC,UACvBhB,KAAKoB,cAAgB+B,EAAM/B,cAC3BpB,KAAKmd,2BAIb,QACIpd,MAAM8P,QACN7P,KAAKgB,WAAY,EACjBhB,KAAKoB,eAAgB,GCxBtB,MAAM6e,WAAwBlB,GAEjC,YAAY3Q,EAAqB8N,GAC7Bnc,MAAMqO,EAAQ,EAAG8N,GACjB,MAAMgE,EAAiBlgB,KAAKwd,YAAY,kBAAmB,yCAC3D0C,EAAe5E,WAAa,KAAM,EAClC4E,EAAenR,QAAU,KACrB/O,KAAKqd,aAAa,IAAI7C,MCR3B,MAAM2F,WAA2BpB,GAEpC,YAAY3Q,EAAqB8N,GAC7Bnc,MAAMqO,EAAQ,EAAG8N,ICClB,MAAMkE,WAAwBrB,GAOjC,YAAY3Q,EAAqB8N,GAC7Bnc,MAAMqO,EAAQ,EAAG8N,GANrB,KAAAjb,aAAuB,EACvB,KAAAof,iBAA2B,EAC3B,KAAAlf,gBAA0B,EAC1B,KAAAmf,sBAAgC,EAI5B,MAAMC,EAAYvgB,KAAKwd,YAAY,kBAAmB,0BACtD+C,EAAUjF,WAAa,KAAOtb,KAAKiB,cAAgBjB,KAAKqgB,gBACxDE,EAAUxR,QAAU,IAAM/O,KAAKqd,aAAa,IAAItD,GAChD,MAAMyG,EAAgBxgB,KAAKwd,YAAY,kBAAmB,gCAC1DgD,EAAclF,WAAa,KAAOtb,KAAKmB,eACvCqf,EAAczR,QAAU,IAAM/O,KAAKqd,aAAa,IAAIrD,GACpD,MAAMyG,EAAezgB,KAAKwd,YAAY,kBAAmB,+BACzDiD,EAAanF,WAAa,IAAMtb,KAAKsgB,sBAAwB,EAC7DG,EAAa1R,QAAU,IAAM/O,KAAKqd,aAAa,IAAIpD,GACnD,MAAMyG,EAAe1gB,KAAKwd,YAAY,kBAAmB,kCACzDkD,EAAapF,WAAa,KAAM,EAChCoF,EAAa3R,QAAU,IAAM/O,KAAKqd,aAAa,IAAInD,GACnDla,KAAKgR,sBAAsB,uBAA6B7N,IACpDnD,KAAKiB,YAAckC,EAAMlC,YACzBjB,KAAKqgB,gBAAkBld,EAAMjC,gBAC7BlB,KAAKmB,eAAiBgC,EAAMhC,eAC5BnB,KAAKmd,2BAETnd,KAAKgR,sBAAsB,uBAA6B7N,IACpDnD,KAAKsgB,sBAAwB,iBAAkCnd,EAAOQ,GAAA,cAAwB,MAItG,QACI5D,MAAM8P,QACN7P,KAAKiB,aAAc,EACnBjB,KAAKqgB,iBAAkB,EACvBrgB,KAAKmB,gBAAiB,EACtBnB,KAAKsgB,sBAAwB,GCzC9B,MAAMK,WAA0B3E,GAEnC,YAAY5N,EAAqB8N,GAC7Bnc,MAAMqO,EAAQ,EAAG8N,GACjBlc,KAAKwd,YAAY,uBAAwB,cACzCxd,KAAKwd,YAAY,uBAAwB,eACzCxd,KAAKwd,YAAY,uBAAwB,cACzCxd,KAAKwd,YAAY,uBAAwB,YACzCxd,KAAKwd,YAAY,uBAAwB,YACzCxd,KAAKwd,YAAY,uBAAwB,c,cCL1C,MAAMoD,WAAyB5E,GAIlC,YAAY5N,EAAqB8N,GAC7Bnc,MAAMqO,EAAQ,EAAG8N,GAHrB,KAAA3b,cAA8C,IAAIC,IAI9CR,KAAK6gB,gBAAgB,iCAAkC/U,GAAA,WACvD9L,KAAK6gB,gBAAgB,mCAAoC/U,GAAA,aACzD9L,KAAK6gB,gBAAgB,oCAAqC/U,GAAA,cAC1D9L,KAAK6gB,gBAAgB,gCAAiC/U,GAAA,UACtD9L,KAAK6gB,gBAAgB,iCAAkC/U,GAAA,WACvD9L,KAAK6gB,gBAAgB,mCAAoC/U,GAAA,eACzD9L,KAAKgR,sBAAsB,uBAA6B7N,IACpDnD,KAAKO,cAAgB4C,EAAM5C,iBAI3B,gBAAgB4a,EAAiBlZ,GACrC,MAAM6e,EAAe9gB,KAAKwd,YAAY,kBAAmBrC,GACzD2F,EAAaxF,WAAa,KAAOtb,KAAKO,cAAcqI,IAAI3G,GACxD6e,EAAa/R,QAAU,IAAM/O,KAAKqd,aAAa,IAAI9C,GAAYtY,IAGnE,QACIlC,MAAM8P,QACN7P,KAAKO,cAAgB,IAAIC,KCT1B,MAAMugB,WAAkB5S,EAAA,EAe3B,YAAYC,GACRrO,MAAMqO,GAdV,KAAA4S,UAA4B,GAO5B,KAAAnD,oBAA8B,EAC9B,KAAA4B,gBAA0B,EAC1B,KAAAwB,gBAA0B,EAC1B,KAAAC,YAAsB,EACtB,KAAAC,WAAqB,EAIjBnhB,KAAKuN,KAAOvN,KAAK+c,KAAO,IACxB/c,KAAKohB,IAAM,IACXphB,KAAKwN,KAAOxN,KAAKqhB,KAAOrhB,KAAKshB,IAAM,EACnCthB,KAAKkd,SAAU,EACfld,KAAKuhB,UAAYvhB,KAAKwhB,YAAY,IAAIxF,GAAahc,KAAM,IACzDA,KAAKuhB,UAAUhU,KAAOvN,KAAKuhB,UAAUxE,KACrC/c,KAAKuhB,UAAU/T,KAAOxN,KAAKuhB,UAAUF,KACrCrhB,KAAKuhB,UAAUrE,SAAU,EAEzB,MAAMuE,EAAgBzhB,KAAKwhB,YAAY,IAAIpE,GAAcpd,KAAMA,KAAKuhB,YAC9DG,EAAoB1hB,KAAKwhB,YAAY,IAAIb,GAAkB3gB,KAAMA,KAAKuhB,YACtEI,EAAoB3hB,KAAKwhB,YAAY,IAAI1D,GAAkB9d,KAAMA,KAAKuhB,YAC5EvhB,KAAK4hB,gBAAkB5hB,KAAKwhB,YAAY,IAAIpB,GAAgBpgB,KAAMA,KAAKuhB,YACvEvhB,KAAK6hB,iBAAmB7hB,KAAKwhB,YAAY,IAAIpC,GAAiBpf,KAAMA,KAAKuhB,YACzEvhB,KAAK8hB,kBAAoB9hB,KAAKwhB,YAAY,IAAIzB,GAAkB/f,KAAMA,KAAKuhB,YAC3EvhB,KAAK+hB,gBAAkB/hB,KAAKwhB,YAAY,IAAIvB,GAAgBjgB,KAAMA,KAAKuhB,YACvE,MAAMS,EAAsBhiB,KAAKwhB,YAAY,IAAIxC,GAAoBhf,KAAMA,KAAKuhB,YAC1EU,EAAoBjiB,KAAKwhB,YAAY,IAAIhC,GAAkBxf,KAAMA,KAAKuhB,YACtEW,EAAmBliB,KAAKwhB,YAAY,IAAIZ,GAAiB5gB,KAAMiiB,IACrEA,EAAkBpC,UAAU9Q,QAAU,IAAMkT,EAAkBjT,aAAY,IAAMkT,EAAiBlT,gBACjG,MAAMmT,EAAeniB,KAAKwhB,YAAY,IAAI/D,GAAazd,KAAMiiB,IAC7DA,EAAkBrC,YAAY7Q,QAAU,IAAMkT,EAAkBjT,aAAY,IAAMmT,EAAanT,gBAC/F,MAAMoT,EAAqBpiB,KAAKwhB,YAAY,IAAIrB,GAAmBngB,KAAMA,KAAKuhB,YACxEc,EAAiBriB,KAAKuhB,UAAU/D,YAAY,kBAAmB,kCACrE6E,EAAe/G,WAAa,IAAMtb,KAAKmhB,YAAcnhB,KAAKsiB,iBAAmBtiB,KAAK6d,qBAAuB,MACpG7d,KAAKyf,gBAAkB,GAAKzf,KAAKihB,gBAAkB,EACxDoB,EAAe9G,cACf8G,EAAetT,QAAU,IAAM/O,KAAKqd,aAAa,IAAI/D,GAAyB,IAE9E+I,EAAe3T,SAAS,IAAIkP,GAAqByE,IACjDriB,KAAKgR,sBAAsB,+BAAqC7N,IAC5DnD,KAAK6d,oBAAsB1a,EAAM0a,oBACjCwE,EAAe9G,iBAEnB,MAAMgH,EAAeviB,KAAKuhB,UAAU/D,YAAY,kBAAmB,oCACnE+E,EAAajH,WAAa,KAAM,EAChCiH,EAAaxT,QAAU,IAAM/O,KAAKuhB,UAAUvS,aAAY,IAAMyS,EAAczS,gBAC5E,MAAMwT,EAAmBxiB,KAAKuhB,UAAU/D,YAAY,kBAAmB,wCACvEgF,EAAiBlH,WAAa,KAAM,EACpCkH,EAAiBzT,QAAU,IAAM/O,KAAKuhB,UAAUvS,aAAY,IAAM0S,EAAkB1S,gBACpF,MAAMyT,EAAmBziB,KAAKuhB,UAAU/D,YAAY,kBAAmB,wCACvEiF,EAAiBnH,WAAa,KAAM,EACpCmH,EAAiB1T,QAAU,IAAM/O,KAAKuhB,UAAUvS,aAAY,IAAM2S,EAAkB3S,gBACpFhP,KAAKgR,sBAAsB,uBAA6B7N,IAChDA,EAAMhD,gBAAkB,aAAuBH,KAAK0iB,eAAe1iB,KAAKuhB,WACnEpe,EAAMhD,gBAAkB,cAAwBH,KAAK0iB,eAAeV,GACpE7e,EAAMhD,gBAAkB,aAAwBgD,EAAMhD,gBAAkB,WAAqBH,KAAK0iB,eAAeT,GACjH9e,EAAMhD,gBAAkB,aAAuBH,KAAK0iB,eAAeN,GACnEjf,EAAMhD,gBAAkB,cAAuBH,KAAK2iB,wBAAwBxf,EAAMtC,QAASsC,EAAMpC,OAAQoC,EAAMnC,cAE5HhB,KAAKgR,sBAAsB,uBAA6B7N,IACpDnD,KAAKyf,gBAAkB,iBAAkCtc,EAAOQ,GAAA,eAChE3D,KAAKihB,gBAAkB,iBAAkC9d,EAAOQ,GAAA,gBAChE3D,KAAKkhB,YAAc,iBAAkC/d,EAAOQ,GAAA,YAC5D0e,EAAe9G,iBAEnBvb,KAAKgR,sBAAsB,qBAA2B7N,IAClDnD,KAAKmhB,WAAahe,EAAMge,WACxBkB,EAAe9G,iBAIvB,gBACI,OAAO,IAAkBvb,KAAKkhB,YAAc,KAGhD,QACInhB,MAAM8P,QACN7P,KAAKuN,KAAOvN,KAAK+c,KACjB/c,KAAKwN,KAAOxN,KAAKqhB,KACjBrhB,KAAKkd,SAAU,EACfld,KAAK4P,iBACL5P,KAAKuhB,UAAUhU,KAAOvN,KAAKuhB,UAAUxE,KACrC/c,KAAKuhB,UAAU/T,KAAOxN,KAAKuhB,UAAUF,KACrCrhB,KAAKuhB,UAAUrE,SAAU,EACzBld,KAAKuhB,UAAU3R,iBACf5P,KAAK6d,oBAAsB,EAC3B7d,KAAKyf,gBAAkB,EACvBzf,KAAKihB,gBAAkB,EACvBjhB,KAAKkhB,YAAc,EACnBlhB,KAAKmhB,WAAa,EAGtB,YAAoCyB,GAGhC,OAFA5iB,KAAK0O,SAASkU,GACd5iB,KAAKghB,UAAUha,KAAK4b,GACbA,EAGX,eAAeC,GACX7iB,KAAKghB,UAAUzd,SAASuf,GAAaA,IAAaD,GAAeC,EAASzL,YAAW,KACrFwL,EAAYxL,YAAW,GAG3B,wBAAwBxW,EAAkBE,EAAiBC,GACnDH,EACIG,EACAhB,KAAK0iB,eAAe1iB,KAAK8hB,mBAClB/gB,EACPf,KAAK0iB,eAAe1iB,KAAK+hB,iBAEzB/hB,KAAK0iB,eAAe1iB,KAAK6hB,kBAG7B7hB,KAAK0iB,eAAe1iB,KAAK4hB,kB,ICjJzBmB,G,UCKL,MAAMC,GAMT,YAAY/S,EAAkBgT,EAAoDC,GAC9EljB,KAAK6Y,UAAY5I,EAAK6I,gBAAgBmK,EAAuBtO,KAAMuO,GACnEljB,KAAKmjB,UAAYvS,EAAA,iBAAgCqS,EAAuBG,eACxEpjB,KAAKqjB,UAAYC,GAAA,EAAOL,EAAuBM,UCJhD,MAAMC,WAAqBrV,EAAA,EAe9B,YAAYC,EAAqBC,EAAoBoV,GACjD1jB,MAAMqO,EAAQC,GAdlB,KAAAqV,OAAsB,KACtB,KAAAC,eAAkC,KAClC,KAAAC,eAAiB,KASjB,KAAAtf,SAAmB,EAIftE,KAAKuN,KAAOvN,KAAK+c,KAAO/c,KAAKohB,IAAM,GACnCphB,KAAKwN,KAAOxN,KAAKqhB,KAAOrhB,KAAKshB,IAAM,IACnCthB,KAAK0jB,OAAS9S,EAAA,WAA0B,6CAExC,MAAMX,EAAOW,EAAA,mBACPiT,EAAe,IAAIb,GAAgB/S,EAAMwT,EAAsBK,iBAAkB9jB,KAAKsR,IAAI7D,OAChGzN,KAAKgR,sBAAsB,4BAAiC,IAAMhR,KAAK+jB,WAAWF,KAClF7jB,KAAKgkB,mBAAqB,IAAIhB,GAAgB/S,EAAMwT,EAAsBQ,oBAAqBjkB,KAAKsR,IAAI7D,OACxG,MAAMyW,EAAmB,IAAIlB,GAAgB/S,EAAMwT,EAAsBU,qBAAsBnkB,KAAKsR,IAAI7D,OACxGzN,KAAKgR,sBAAsB,uBAA4B,IAAMhR,KAAK+jB,WAAWG,KAC7E,MAAME,EAAW,IAAIpB,GAAgB/S,EAAMwT,EAAsBY,aAAcrkB,KAAKsR,IAAI7D,OACxFzN,KAAKgR,sBAAsB,eAAoB,IAAMhR,KAAK+jB,WAAWK,KACrEpkB,KAAKskB,gBAAkB,IAAItB,GAAgB/S,EAAMwT,EAAsBc,iBAAkBvkB,KAAKsR,IAAI7D,OAClGzN,KAAKwkB,uBAAyB,IAAIxB,GAAgB/S,EAAMwT,EAAsBgB,wBAAyBzkB,KAAKsR,IAAI7D,OAChHzN,KAAK0kB,iBAAmB,IAAI1B,GAAgB/S,EAAMwT,EAAsBkB,kBAAmB3kB,KAAKsR,IAAI7D,OACpGzN,KAAK4kB,cAAgB,IAAI5B,GAAgB/S,EAAMwT,EAAsBoB,eAAgB7kB,KAAKsR,IAAI7D,OAC9FzN,KAAKgR,sBAAsB,qBAA2B7N,GAA+BA,EAAMlB,UAAYjC,KAAK+jB,WAAW/jB,KAAK4kB,iBAC5H5kB,KAAK8kB,gBAAkB,IAAI9B,GAAgB/S,EAAMwT,EAAsBsB,iBAAkB/kB,KAAKsR,IAAI7D,OAClGzN,KAAKgR,sBAAsB,uBAA4B,IAAMhR,KAAKoR,iBAClEpR,KAAKgR,sBAAsB,uBAA6B7N,IACpDnD,KAAKsE,SAAWnB,EAAMmB,YAI9B,QACIvE,MAAM8P,QACN7P,KAAKsE,SAAW,EAGpB,WAAW0gB,EAAkCliB,EAAkB,KAK3D,GAJA9C,KAAK4jB,gBAAiB,QAAiB5jB,KAAK4jB,gBAC5C5jB,KAAK2jB,eAAiBqB,EACtBhlB,KAAKoR,eACD4T,EAAgB3B,WAAWrjB,KAAKqd,aAAa,IAAI,KAAe2H,EAAgB3B,YAChFvgB,EAAS,CACT,MAAMiT,EAAO/V,KACbA,KAAK4jB,eAAiB5N,YAAW,KAC7BD,EAAK4N,eAAiB,KACtB5N,EAAK3E,iBACNtO,IAIX,aAAakiB,GACLhlB,KAAK2jB,iBAAmBqB,IACxBhlB,KAAK2jB,eAAiB,KACtB3jB,KAAKoR,gBAIb,SAAStB,G,QAEL,GADA/P,MAAMqQ,SAASN,GACX9P,KAAKsE,SAAW,EAAG,CACnB,MAAMmJ,EAAQtF,KAAKC,MAAM,IAAMD,KAAK8c,IAAI,EAAGjlB,KAAKsE,WAChDwL,EAAQ6B,UAAU3R,KAAK0jB,OAAQ1jB,KAAKqH,EAAI,GAAIrH,KAAKuH,EAAI,EAAGkG,EAAO,GAEnE,MAAMoL,EAA+B,QAAnB,EAAA7Y,KAAK2jB,sBAAc,eAAE9K,UACjCsK,EAA+B,QAAnB,EAAAnjB,KAAK2jB,sBAAc,eAAER,UACvC,GAAItK,EAAW,CACX,MAAMqM,EAAOllB,KAAKqH,GAAKrH,KAAKsR,IAAI7D,MAAQoL,EAAUpL,OAAS0V,EAAYA,EAAU1V,MAAQ,IAAM,EAC/FqC,EAAQ6B,UAAUkH,EAAWqM,EAAMllB,KAAKuH,EAAI,IAEhD,GAAI4b,EAAW,CACX,MAAMgC,EAAQnlB,KAAKqH,EAAIrH,KAAKsR,IAAI7D,MAAQ0V,EAAU1V,MAClDqC,EAAQ6B,UAAUwR,EAAWgC,EAAOnlB,KAAKuH,EAAI,MC3FlD,MAAM6d,GAST,YAAYlY,IACPlN,KAAK2U,KAAM3U,KAAKojB,cAAepjB,KAAKujB,SAAWrW,GCPjD,MAAMmY,WAA8BxX,EAAA,EAYvC,YAAYC,GACR/N,QAXJ,KAAA+jB,iBAA+C,KAC/C,KAAAG,oBAAkD,KAClD,KAAAE,qBAAmD,KACnD,KAAAE,aAA2C,KAC3C,KAAAE,iBAA+C,KAC/C,KAAAE,wBAAsD,KACtD,KAAAE,kBAAgD,KAChD,KAAAE,eAA6C,KAC7C,KAAAE,iBAA+C,KAI3ClX,EAAA,aAAsB7N,KAAM8N,GAGhC,WAAWG,EAAqBf,GAC5B,OAAO,IAAIkY,GAA2BlY,IClBvC,MAAMoY,WAA8BzX,EAAA,EAavC,YAAYC,GACR/N,QAZJ,KAAAwlB,gBAA6B,KAC7B,KAAAC,gBAA6B,KAC7B,KAAAC,kBAA+B,KAC/B,KAAAC,cAA2B,KAC3B,KAAAC,iBAA8B,KAC9B,KAAAC,mBAAgC,KAChC,KAAAC,sBAAmC,KACnC,KAAAC,uBAAoC,KACpC,KAAAC,oBAAiC,KACjC,KAAAC,mBAAgC,KAI5BnY,EAAA,aAAsB7N,KAAM8N,GAGhC,WAAWG,EAAqBf,GAC5B,MAAO,CACHC,WAAYD,EAAS,GACrBE,WAAYF,EAAS,GACrBG,cAAeH,EAAS,GACxBI,YAAaJ,EAAS,GACtBqH,aAAcrH,EAAS,ML3BnC,SAAY6V,GAER,yCACA,yCACA,6CACA,qCACA,2CACA,+CACA,qDACA,uDACA,iDACA,+CAXJ,CAAYA,QAAkB,KMIvB,MAAMkD,GAAb,cAEI,KAAAC,aAAgC,GAChC,KAAAC,QAA2B,GAE3B,QAAQC,GACJpmB,KAAKkmB,aAAeE,EACpBpmB,KAAK6P,QAGT,OAAOwW,GACHrmB,KAAKmmB,QAAQE,GAAOC,SAAWtmB,KAAKmmB,QAAQE,GAAOC,QAGvD,MAAMD,GACF,MAAME,EAAMvmB,KAAKmmB,QAAQE,GACzBrmB,KAAKmmB,QAAQE,GAASrmB,KAAKmmB,QAAQE,EAAQ,GAC3CrmB,KAAKmmB,QAAQE,EAAQ,GAAKE,EAG9B,QACIvmB,KAAKmmB,QAAUnmB,KAAKkmB,aAAatO,KAAI4O,GAAS,IAAIC,GAAcD,KAGpE,UAAUH,GACN,MAAMK,EAAU1mB,KAAKmmB,QAAQE,GAC7B,IAAK,IAAI7U,EAAI6U,EAAO7U,EAAI,EAAGA,IACvBxR,KAAKmmB,QAAQ3U,GAAKxR,KAAKmmB,QAAQ3U,EAAI,GAEvCxR,KAAKmmB,QAAQ,GAAKO,EAGtB,YAAYC,GACR,IAAIC,EAAW,EAOf,OANA5mB,KAAKmmB,QAAQ1kB,MAAK,CAAColB,EAAGR,KAClB,GAAIQ,EAAEC,MAAQH,EAAII,wBAEd,OADAH,EAAWP,GACJ,KAGRO,EAGX,UAAUI,G,MACN,OAAqE,QAA9D,EAAAhnB,KAAKmmB,QAAQc,MAAMT,GAAUA,EAAMM,MAAQE,WAAmB,eAAEV,WAAW,GAInF,MAAMG,GAKT,YAAYS,GACRlnB,KAAK8mB,IAAMI,EAAmBJ,IAC9B9mB,KAAKsmB,QAAUY,EAAmBZ,SC9CnC,MAAMa,WAA0BhZ,EAAA,EAOnC,YAAYC,EAAqBC,EAAoBG,EAAmC1G,EAA+Bsf,GACnHrnB,MAAMqO,EAAQC,GANlB,KAAAgZ,cAA0C,GAC1C,KAAAC,WAA8C,IAAI9mB,IAElD,KAAAoZ,aAA6B,IAAIqM,GAI7BzX,EAAWuD,+BAA+BxO,SAAQ,CAACgkB,EAAWlB,KAC1DrmB,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMunB,IAAYxY,QAAU,KACjD/O,KAAK4Z,aAAa4N,OAAOnB,GACzBrmB,KAAKqd,aAAa,IAAI1D,EAAmB3Z,KAAK4Z,aAAauM,cAGnE3X,EAAWwD,6BAA6BzO,SAAQ,CAACgkB,EAAWlB,KACxDrmB,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMunB,IAAYxY,QAAU,KACjD/O,KAAK4Z,aAAa6N,MAAMpB,GACxBrmB,KAAKqd,aAAa,IAAI1D,EAAmB3Z,KAAK4Z,aAAauM,cAGnEnmB,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMwO,EAAW0D,+BAA+BnD,QAAU,KAC/E/O,KAAK4Z,aAAa/J,QAClB7P,KAAKqd,aAAa,IAAI1D,EAAmB3Z,KAAK4Z,aAAauM,WAG/DnmB,KAAKqnB,cAAgBvf,EACrB9H,KAAKsnB,WAAWplB,IAAI6gB,GAAmBwC,gBAAiBvlB,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMonB,EAAI7B,mBAC3FvlB,KAAKsnB,WAAWplB,IAAI6gB,GAAmByC,gBAAiBxlB,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMonB,EAAI5B,mBAC3FxlB,KAAKsnB,WAAWplB,IAAI6gB,GAAmB0C,kBAAmBzlB,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMonB,EAAI3B,qBAC7FzlB,KAAKsnB,WAAWplB,IAAI6gB,GAAmB2C,cAAe1lB,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMonB,EAAI1B,iBACzF1lB,KAAKsnB,WAAWplB,IAAI6gB,GAAmB4C,iBAAkB3lB,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMonB,EAAIzB,oBAC5F3lB,KAAKsnB,WAAWplB,IAAI6gB,GAAmB6C,mBAAoB5lB,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMonB,EAAIxB,sBAC9F5lB,KAAKsnB,WAAWplB,IAAI6gB,GAAmB8C,sBAAuB7lB,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMonB,EAAIvB,yBACjG7lB,KAAKsnB,WAAWplB,IAAI6gB,GAAmB+C,uBAAwB9lB,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMonB,EAAItB,0BAClG9lB,KAAKsnB,WAAWplB,IAAI6gB,GAAmBgD,oBAAqB/lB,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMonB,EAAIrB,uBAC/F/lB,KAAKsnB,WAAWplB,IAAI6gB,GAAmBiD,mBAAoBhmB,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMonB,EAAIpB,sBAC9FhmB,KAAKgR,sBAAsB,yBAA+B7N,IACtDnD,KAAK0nB,QAAQvkB,EAAMyW,iBAI3B,QACI7Z,MAAM8P,QACN7P,KAAK4Z,aAAa/J,QAGd,QAAQ+J,GACZ5Z,KAAK4Z,aAAa8N,QAAQ9N,GAC1B5Z,KAAKsnB,WAAW/jB,SAASwT,GAAQA,EAAIhH,QAAS,IAC9C,IAAIsW,EAAQ,EACRsB,GAAU,EACd/N,EAAarW,SAAQ6jB,IACjB,MAAMQ,EAAqB5nB,KAAKsnB,WAAW1e,IAAIwe,EAAIN,KACnD,GAAIc,EAAY,CACZD,EAAUA,GAAWC,EAAW7X,QAAU6X,EAAWjQ,YAAcyP,EAAId,QACvEsB,EAAW7X,QAAS,EACpB6X,EAAWjQ,UAAYyP,EAAId,QAC3BsB,EAAWra,KAAOvN,KAAKqnB,cAAchB,GAAOhf,EAC5CugB,EAAWpa,KAAOxN,KAAKqnB,cAAchB,GAAO9e,EAC5CqgB,EAAWhY,iBACX,MAAMiY,EAAWxB,EACjBuB,EAAW7Y,QAAU,KACjB/O,KAAK4Z,aAAakO,UAAUD,GAC5B7nB,KAAKqd,aAAa,IAAI1D,EAAmB3Z,KAAK4Z,aAAauM,WAE/DE,QAGJsB,GAAS3nB,KAAKoR,gBClFnB,MAAM2W,GAKT,YAAY7a,IACPlN,KAAKqH,EAAGrH,KAAKuH,GAAK2F,GCFpB,MAAM8a,WAAqBnZ,EAAA,EAI9B,YAAYT,EAAqBsB,GAC7B3P,MAAMqO,EAAQsB,GAHlB,KAAAV,aAAuB,EAMvB,WAAWiZ,EAAIC,GACX,GAAIloB,KAAKmoB,aAAc,OAAO,EAC9B,MAAMC,EAASpoB,KAAKqoB,SAASJ,EAAIC,GACjC,IAAIP,EAAU3nB,KAAK4b,QAAUwM,EAM7B,OALApoB,KAAK4b,MAAQwM,EACbpoB,KAAK0e,QAAW1e,KAAK0e,SAAW1e,KAAK4b,OAAU5b,KAAKgP,YAEpDhP,KAAK4e,SAASrb,SAASsb,GAAU8I,EAAU9I,EAAMyJ,WAAWL,EAAIC,IAAOP,IACnEA,GAAS3nB,KAAKoR,eACXuW,EAGX,WAAWM,EAAIC,GACX,GAAIloB,KAAKmoB,aAAc,OAAO,EAC9B,MAAMI,EAAYvoB,KAAKqoB,SAASJ,EAAIC,IAAOloB,KAAKgP,YAChD,IAAI2Y,EAAU3nB,KAAK0e,UAAY6J,EAI/B,OAHAvoB,KAAK0e,QAAU6J,EACfvoB,KAAK4e,SAASrb,SAASsb,GAAU8I,EAAU9I,EAAM2J,WAAWP,EAAIC,IAAOP,IACnEA,GAAS3nB,KAAKoR,eACXuW,EAGX,aAAaM,EAAIC,GACb,GAAIloB,KAAKmoB,aAAc,OAAO,EAC9B,MAAMC,EAASpoB,KAAKqoB,SAASJ,EAAIC,GACjC,IAAIP,EAAUS,GAAUpoB,KAAK0e,QAQ7B,OAPIiJ,IACA3nB,KAAKse,UACLte,KAAK0e,QAAUiJ,GAAW3nB,KAAKgP,YAC/BhP,KAAK4b,MAAQwM,GAEjBpoB,KAAK4e,SAASrb,SAASsb,GAAU8I,EAAU9I,EAAM4J,aAAaR,EAAIC,IAAOP,IACrEA,GAAS3nB,KAAKoR,eACXuW,EAGX,UACI3nB,KAAKgP,aAAehP,KAAKgP,YACzBjP,MAAMue,UAGV,UACI,OAAO,GC/CR,MAAMoK,WAAiBva,EAAA,EAM1B,YAAYC,EAAqBC,EAAoBG,GACjDzO,MAAMqO,EAAQC,GACdrO,KAAK2oB,cAAgB3oB,KAAK0O,SAAS,IAAIsZ,GAAahoB,KAAMwO,EAAWgE,gCACrExS,KAAK4oB,WAAa5oB,KAAK0O,SAAS,IAAIG,EAAA,EAAO7O,KAAMwO,EAAWiE,6BAC5DzS,KAAK6oB,cAAgB7oB,KAAK0O,SAAS,IAAIsZ,GAAahoB,KAAMwO,EAAWkE,iC,uBCGtE,MAAMoW,WAAsBC,GAAA,EAc/B,YAAYC,GACRjpB,MAAMipB,GACN,MAAMC,EAAY,IAAIlV,EAAUnD,EAAA,MAAqB,kBAC/CpC,EAAa,IAAI2E,EAAWvC,EAAA,MAAqB,mBAEvD5Q,KAAK2T,kBAAoB3T,KAAKkpB,SAAS,IAAI/a,EAAA,EAAMnO,KAAKmpB,YAAaF,EAAUtV,oBAC7E3T,KAAKuT,iBAAmBvT,KAAKkpB,SAAS,IAAItQ,EAAiB5Y,KAAKmpB,YAAaF,EAAU1V,mBACvFvT,KAAK0T,cAAgB1T,KAAKkpB,SAAS,IAAIjT,EAAcjW,KAAKmpB,YAAaF,EAAUvV,cAAelF,EAAWkF,cAAe,IAAIiF,EAAmB/H,EAAA,MAAqB,iBAAkB5Q,KAAKuT,mBAC7LvT,KAAKyT,mBAAqBzT,KAAKkpB,SAAS,IAAI/a,EAAA,EAAMnO,KAAKmpB,YAAaF,EAAUxV,qBAC9E,MAAM2V,EAAwB,IAAI9D,GAAsB1U,EAAA,MAAqB,mBACvEyY,EAA0B1f,OAAO2f,OAAO1Y,EAAA,MAAqB,6BAA6BgH,KAAI1K,GAAY,IAAI6a,GAAuB7a,KAC3IlN,KAAKwT,kBAAoBxT,KAAKkpB,SAAS,IAAI/B,GAAkBnnB,KAAKmpB,YAAaF,EAAUzV,kBAAmBhF,EAAWgF,kBAAmB6V,EAAyBD,IACnKppB,KAAKsT,cAAgBtT,KAAKkpB,SAAS,IAAIR,GAAS1oB,KAAKmpB,YAAaF,EAAU3V,cAAe9E,EAAW8E,gBACtGtT,KAAKupB,UAAYvpB,KAAKkpB,SAAS,IAAInI,GAAU/gB,KAAKmpB,cAClDnpB,KAAKqT,oBAAsBrT,KAAKkpB,SAAS,IAAI7Y,EAAoBrQ,KAAKmpB,YAAaF,EAAU5V,oBAAqB7E,EAAW6E,sBAC7HrT,KAAKmU,kBAAoBnU,KAAKkpB,SAAS,IAAI/a,EAAA,EAAMnO,KAAKmpB,YAAaF,EAAU9U,oBAC7EnU,KAAKkU,cAAgBlU,KAAKkpB,SAAS,IAAI1F,GAAaxjB,KAAKmpB,YAAaF,EAAU/U,cAAe,IAAImR,GAAsBzU,EAAA,MAAqB,6BAC9I5Q,KAAKoT,WAAapT,KAAKkpB,SAAS,IAAIhb,EAAWlO,KAAKmpB,YAAaF,EAAU7V,WAAY6V,EAAUjV,eAAgBiV,EAAUhV,kBAAmBzF,EAAW4E,aAEzJpT,KAAKsT,cAAcsV,WAAW7Z,QAAU,KACpC/O,KAAKwpB,aAAa,CAACC,KAAMC,GAAA,kBAE7B1pB,KAAKsT,cAAcuV,cAAc9Z,QAAU,KACnC/O,KAAKsT,cAAcuV,cAAc7Z,YACjChP,KAAKupB,UAAUlS,YAAW,GAAM,IAAMrX,KAAKwT,kBAAkB6D,YAAW,KAExErX,KAAKwT,kBAAkB6D,YAAW,GAAM,IAAMrX,KAAKupB,UAAUlS,YAAW,MAKpF,iBAAiBL,GACb,OAAIA,EAAIyS,OAASC,GAAA,qBACT1S,EAAI2S,aACJ3pB,KAAKkU,cAAc6P,WAAW/jB,KAAKkU,cAAc8P,mBAAoB,GAErEhkB,KAAKkU,cAAc0V,aAAa5pB,KAAKkU,cAAc8P,qBAKpD,IAKf,IAAI6F,GAA4B,KAEhC,MAAMb,GAAiBc,KAEvBd,GAAOe,iBAAiB,WAAY5mB,IAChC,MAAM6T,EAAwB7T,EAAM6mB,KAChChT,EAAIyS,OAASC,GAAA,QACb9Y,EAAA,iBAAkCoG,EAAIiT,eACtCrZ,EAAA,gBAAiCoG,EAAIoQ,IACrCxW,EAAA,QAAyBoG,EAAIjV,MAC7B8nB,GAAiB,IAAIf,GAAcE,KAEnCa,GAAeK,eAAelT,QC3FlCmT,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,IAOV,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,QAIfJ,EAAoBO,EAAID,EAGxBN,EAAoB/iB,EAAI,KAGvB,IAAIujB,EAAsBR,EAAoBS,OAAEN,EAAW,CAAC,IAAI,MAAM,IAAOH,EAAoB,OAEjG,OADsBA,EAAoBS,EAAED,I7DhCzCprB,EAAW,GACf4qB,EAAoBS,EAAI,CAACvnB,EAAQwnB,EAAUC,EAAInE,KAC9C,IAAGkE,EAAH,CAMA,IAAIE,EAAeC,IACnB,IAASrZ,EAAI,EAAGA,EAAIpS,EAAS2C,OAAQyP,IAAK,CAGzC,IAFA,IAAKkZ,EAAUC,EAAInE,GAAYpnB,EAASoS,GACpCsZ,GAAY,EACPrE,EAAI,EAAGA,EAAIiE,EAAS3oB,OAAQ0kB,MACpB,EAAXD,GAAsBoE,GAAgBpE,IAAajd,OAAOwhB,KAAKf,EAAoBS,GAAGhpB,OAAOilB,GAASsD,EAAoBS,EAAE/D,GAAKgE,EAASjE,MAC9IiE,EAASxT,OAAOuP,IAAK,IAErBqE,GAAY,EACTtE,EAAWoE,IAAcA,EAAepE,IAG1CsE,IACF1rB,EAAS8X,OAAO1F,IAAK,GACrBtO,EAASynB,KAGX,OAAOznB,EAtBNsjB,EAAWA,GAAY,EACvB,IAAI,IAAIhV,EAAIpS,EAAS2C,OAAQyP,EAAI,GAAKpS,EAASoS,EAAI,GAAG,GAAKgV,EAAUhV,IAAKpS,EAASoS,GAAKpS,EAASoS,EAAI,GACrGpS,EAASoS,GAAK,CAACkZ,EAAUC,EAAInE,I8DJ/BwD,EAAoBgB,EAAI,CAACZ,EAASa,KACjC,IAAI,IAAIvE,KAAOuE,EACXjB,EAAoBkB,EAAED,EAAYvE,KAASsD,EAAoBkB,EAAEd,EAAS1D,IAC5End,OAAO4hB,eAAef,EAAS1D,EAAK,CAAE0E,YAAY,EAAM5iB,IAAKyiB,EAAWvE,MCJ3EsD,EAAoBqB,EAAI,GAGxBrB,EAAoBviB,EAAK6jB,GACjBpW,QAAQ+C,IAAI1O,OAAOwhB,KAAKf,EAAoBqB,GAAG5T,QAAO,CAACM,EAAU2O,KACvEsD,EAAoBqB,EAAE3E,GAAK4E,EAASvT,GAC7BA,IACL,KCNJiS,EAAoBuB,EAAKD,GAEZA,EAAU,YCHvBtB,EAAoBwB,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAO7rB,MAAQ,IAAI8rB,SAAS,cAAb,GACd,MAAOjkB,GACR,GAAsB,iBAAXkkB,OAAqB,OAAOA,QALjB,GCAxB3B,EAAoBkB,EAAI,CAACU,EAAKC,IAAUtiB,OAAOuiB,UAAUC,eAAeC,KAAKJ,EAAKC,G,MCAlF,IAAII,EACAjC,EAAoBwB,EAAEU,gBAAeD,EAAYjC,EAAoBwB,EAAE1U,SAAW,IACtF,IAAIqV,EAAWnC,EAAoBwB,EAAEW,SACrC,IAAKF,GAAaE,IACbA,EAASC,gBACZH,EAAYE,EAASC,cAAcC,MAC/BJ,GAAW,CACf,IAAIK,EAAUH,EAASI,qBAAqB,UACzCD,EAAQvqB,SAAQkqB,EAAYK,EAAQA,EAAQvqB,OAAS,GAAGsqB,KAK7D,IAAKJ,EAAW,MAAM,IAAIO,MAAM,yDAChCP,EAAYA,EAAU3T,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpF0R,EAAoBhS,EAAIiU,G,SCXxB,IAAIQ,EAAkB,CACrBC,IAAK,GAgBN1C,EAAoBqB,EAAE7Z,EAAI,CAAC8Z,EAASvT,KAE/B0U,EAAgBnB,IAElBY,cAAclC,EAAoBhS,EAAIgS,EAAoBuB,EAAED,KAK/D,IAAIqB,EAAqBjD,KAAmC,6BAAIA,KAAmC,8BAAK,GACpGkD,EAA6BD,EAAmB/lB,KAAKimB,KAAKF,GAC9DA,EAAmB/lB,KAvBCgjB,IACnB,IAAKc,EAAUoC,EAAaC,GAAWnD,EACvC,IAAI,IAAIK,KAAY6C,EAChB9C,EAAoBkB,EAAE4B,EAAa7C,KACrCD,EAAoBO,EAAEN,GAAY6C,EAAY7C,IAIhD,IADG8C,GAASA,EAAQ/C,GACdU,EAAS3oB,QACd0qB,EAAgB/B,EAAS7V,OAAS,EACnC+X,EAA2BhD,K,GnEnBxBvqB,EAAO2qB,EAAoB/iB,EAC/B+iB,EAAoB/iB,EAAI,IAChBiO,QAAQ+C,IAAI,CAClB+R,EAAoBviB,EAAE,KACtBuiB,EAAoBviB,EAAE,OACpB2P,KAAK/X,GoEJiB2qB,EAAoB/iB,K","file":"294.index.js","sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tresult = fn();\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([\n\t\t__webpack_require__.e(529),\n\t\t__webpack_require__.e(969)\n\t]).then(next);\n};","// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n}\n\nexport enum POINTER_EVENT {\n    MOVE,\n    DOWN,\n    UP,\n}\n\nexport enum KEY_EVENT {\n    DOWN,\n    UP,\n}\n","import { Sample } from '../audio/Sample'\nimport { BuildingEntity } from '../game/model/building/BuildingEntity'\nimport { EntityType } from '../game/model/EntityType'\nimport { GameState } from '../game/model/GameState'\nimport { PriorityEntry } from '../game/model/job/PriorityList'\nimport { Surface } from '../game/model/map/Surface'\nimport { SurfaceType } from '../game/model/map/SurfaceType'\nimport { Raider } from '../game/model/raider/Raider'\nimport { AllRaiderTools, RaiderTool } from '../game/model/raider/RaiderTool'\nimport { AllRaiderTrainings, RaiderTraining } from '../game/model/raider/RaiderTraining'\nimport { SelectionType } from '../game/model/Selectable'\nimport { Cursor } from '../screen/Cursor'\nimport { EventKey } from './EventKeyEnum'\nimport { GameEvent } from './GameEvent'\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n        this.isLocal = true\n    }\n\n}\n\nexport class SelectionChanged extends LocalEvent {\n\n    selectionType: SelectionType\n    isGround: boolean\n    isPowerPath: boolean\n    canPlaceFence: boolean\n    isFloor: boolean\n    isSite: boolean\n    hasRubble: boolean\n    isDrillable: boolean\n    isDrillableHard: boolean\n    isReinforcable: boolean\n    someCarries: boolean\n    everyHasMaxLevel: boolean\n    canDoTraining: Map<RaiderTraining, boolean> = new Map()\n    everyHasTool: Map<RaiderTool, boolean> = new Map()\n    buildingCanUpgrade: boolean\n    buildingCanSwitchPower: boolean\n\n    constructor(selectionType: SelectionType = SelectionType.NOTHING, selectedSurface: Surface = null, selectedBuilding: BuildingEntity = null, selectedRaiders: Raider[] = null) {\n        super(EventKey.SELECTION_CHANGED)\n        this.selectionType = selectionType\n        this.isGround = selectedSurface?.surfaceType === SurfaceType.GROUND\n        this.isPowerPath = selectedSurface?.surfaceType === SurfaceType.POWER_PATH\n        this.isFloor = selectedSurface?.surfaceType.floor\n        this.isSite = selectedSurface?.surfaceType === SurfaceType.POWER_PATH_CONSTRUCTION || selectedSurface?.surfaceType === SurfaceType.POWER_PATH_BUILDING_SITE\n        this.hasRubble = selectedSurface?.hasRubble()\n        this.isDrillable = selectedSurface?.isDrillable()\n        this.isDrillableHard = selectedSurface?.isDrillableHard()\n        this.isReinforcable = selectedSurface?.isReinforcable()\n        this.canPlaceFence = selectedSurface?.canPlaceFence() && GameState.buildings.some((b) => b.entityType === EntityType.POWER_STATION && b.isUsable())\n        this.someCarries = !!selectedRaiders?.some((r) => !!r.carries)\n        this.everyHasMaxLevel = !!selectedRaiders?.every((r) => r.level >= r.stats.Levels)\n        AllRaiderTrainings.forEach((training) => this.canDoTraining.set(training, GameState.getTrainingSites(training).length > 0 && selectedRaiders?.some((r) => !r.hasTraining(training))))\n        AllRaiderTools.forEach((tool) => this.everyHasTool.set(tool, !!selectedRaiders?.every((r) => r.hasTool(tool))))\n        this.buildingCanUpgrade = selectedBuilding?.canUpgrade()\n        this.buildingCanSwitchPower = !selectedBuilding?.stats.SelfPowered && !selectedBuilding?.stats.PowerBuilding\n    }\n\n}\n\nexport class AirLevelChanged extends LocalEvent {\n\n    airLevel: number\n\n    constructor(airLevel: number) {\n        super(EventKey.AIR_LEVEL_CHANGED)\n        this.airLevel = airLevel\n    }\n\n}\n\nexport class ChangeCursor extends LocalEvent {\n\n    cursor: Cursor\n    timeout: number\n\n    constructor(cursor: Cursor, timeout: number = null) {\n        super(EventKey.CHANGE_CURSOR)\n        this.cursor = cursor\n        this.timeout = timeout\n    }\n\n}\n\nexport class SetupPriorityList extends LocalEvent {\n\n    priorityList: PriorityEntry[]\n\n    constructor(priorityList: PriorityEntry[]) {\n        super(EventKey.SETUP_PRIORITY_LIST)\n        this.priorityList = priorityList\n    }\n\n}\n\nexport class BuildingsChangedEvent extends LocalEvent {\n\n    usableBuildingsByTypeAndLevel: Map<EntityType, Map<number, number>> = new Map()\n\n    constructor() {\n        super(EventKey.BUILDINGS_CHANGED)\n        GameState.buildings.forEach((b) => {\n            if (b.isUsable()) {\n                const perLevel = this.usableBuildingsByTypeAndLevel.getOrUpdate(b.entityType, () => new Map())\n                perLevel.set(b.level, perLevel.getOrUpdate(b.level, () => 0) + 1)\n            }\n        })\n    }\n\n    static countUsable(event: BuildingsChangedEvent, building: EntityType, minLevel: number = 0) {\n        let result = 0\n        event.usableBuildingsByTypeAndLevel.getOrUpdate(building, () => new Map()).forEach((count, level) => {\n            if (level >= minLevel) result += count\n        })\n        return result\n    }\n\n}\n\nexport class RaidersChangedEvent extends LocalEvent {\n\n    numRaiders: number\n    training: RaiderTraining\n\n    constructor(training: RaiderTraining = null) {\n        super(EventKey.RAIDERS_CHANGED)\n        this.numRaiders = GameState.raiders.length\n        this.training = training\n    }\n\n}\n\nexport class PlaySoundEvent extends LocalEvent {\n\n    sample: Sample\n\n    constructor(sample: Sample) {\n        super(EventKey.PLAY_SOUND)\n        this.sample = sample\n    }\n\n}\n","export enum EntityType {\n\n    // RAIDER\n    PILOT,\n\n    // BUILDING\n    TOOLSTATION,\n    TELEPORT_PAD,\n    DOCKS,\n    POWER_STATION,\n    BARRACKS,\n    UPGRADE,\n    GEODOME,\n    ORE_REFINERY,\n    GUNSTATION,\n    TELEPORT_BIG,\n\n    // MONSTER\n    BAT,\n    SMALL_SPIDER,\n\n    // MATERIAL\n    DYNAMITE,\n    ELECTRIC_FENCE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n\n}\n\nexport enum EntitySuperType {\n\n    RAIDER,\n    BUILDING,\n    MONSTER,\n    MATERIAL,\n\n}\n","import { Vector3 } from 'three'\nimport { EventBus } from '../../event/EventBus'\nimport { SelectionChanged } from '../../event/LocalEvents'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../../params'\nimport { BaseEntity } from './BaseEntity'\nimport { BuildingEntity } from './building/BuildingEntity'\nimport { BuildingSite } from './building/BuildingSite'\nimport { MaterialEntity } from './collect/MaterialEntity'\nimport { EntityType } from './EntityType'\nimport { Surface } from './map/Surface'\nimport { Bat } from './monster/Bat'\nimport { SmallSpider } from './monster/SmallSpider'\nimport { Raider } from './raider/Raider'\nimport { RaiderTraining, RaiderTrainingSites, RaiderTrainingStatsProperty } from './raider/RaiderTraining'\nimport { Selectable, SelectionType } from './Selectable'\n\nexport enum GameResultState {\n\n    RUNNING,\n    COMPLETE,\n    FAILED,\n\n}\n\nexport class GameState {\n\n    static resultState: GameResultState = GameResultState.RUNNING\n    static numCrystal: number = 0\n    static numOre: number = 0\n    static numBrick: number = 0\n    static usedCrystals: number = 0\n    static neededCrystals: number = 0\n    static airLevel: number = 1 // air level in percent from 0 to 1.0\n    static selectedEntities: Selectable[] = []\n    static selectionType: SelectionType = null\n    static buildings: BuildingEntity[] = []\n    static buildingsUndiscovered: BuildingEntity[] = []\n    static raiders: Raider[] = []\n    static raidersUndiscovered: Raider[] = []\n    static requestedRaiders: number = 0\n    static materials: MaterialEntity[] = []\n    static materialsUndiscovered: MaterialEntity[] = []\n    static buildingSites: BuildingSite[] = []\n    static spiders: SmallSpider[] = []\n    static spidersBySurface: Map<Surface, SmallSpider[]> = new Map()\n    static bats: Bat[] = []\n    static totalCrystals: number = 0\n    static totalOres: number = 0\n    static totalDiggables: number = 0\n    static remainingDiggables: number = 0\n    static totalCaverns: number = 0\n    static discoveredCaverns: number = 0\n    static levelStartTime: number = 0\n    static levelStopTime: number = 0\n    static oxygenRate: number = 0\n    static buildModeSelection: BuildingEntity = null\n\n    static reset() {\n        this.resultState = GameResultState.RUNNING\n        this.numCrystal = 0\n        this.numOre = 0\n        this.numBrick = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.airLevel = 1\n        this.selectedEntities = []\n        this.selectionType = null\n        this.buildings = []\n        this.buildingsUndiscovered = []\n        this.raiders = []\n        this.raidersUndiscovered = []\n        this.requestedRaiders = 0\n        this.materials = []\n        this.materialsUndiscovered = []\n        this.buildingSites = []\n        this.spiders = []\n        this.spidersBySurface = new Map()\n        this.bats = []\n        this.totalCrystals = 0\n        this.totalOres = 0\n        this.totalDiggables = 0\n        this.remainingDiggables = 0\n        this.totalCaverns = 0\n        this.discoveredCaverns = 0\n        this.levelStartTime = 0\n        this.levelStopTime = 0\n        this.oxygenRate = 0\n        this.buildModeSelection = null\n    }\n\n    static getBuildingsByType(...buildingTypes: EntityType[]): BuildingEntity[] {\n        return this.buildings.filter(b => b.isUsable() && buildingTypes.some(bt => b.entityType === bt))\n    }\n\n    static getClosestBuildingByType(position: Vector3, ...buildingTypes: EntityType[]): BuildingEntity {\n        const targetBuildings = GameState.getBuildingsByType(...buildingTypes)\n        let closest = null, minDist = null\n        targetBuildings.forEach((b) => {\n            const bPos = b.getDropPosition()\n            const dist = position.distanceToSquared(bPos) // TODO better use pathfinding\n            if (closest === null || dist < minDist) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static getTrainingSites(training: RaiderTraining): BuildingEntity[] {\n        return this.buildings.filter((b) => b.entityType === RaiderTrainingSites[training] && b.isUsable() && b.stats[RaiderTrainingStatsProperty[training]][b.level])\n    }\n\n    static selectEntities(entities: Selectable[]) {\n        this.selectedEntities = this.selectedEntities.filter((previouslySelected) => {\n            const stillSelected = entities.indexOf(previouslySelected) !== -1\n            if (!stillSelected) previouslySelected.deselect()\n            return stillSelected\n        })\n        // add new entities that are selectable\n        entities.forEach((freshlySelected) => {\n            if (freshlySelected.select()) {\n                this.selectedEntities.push(freshlySelected)\n            }\n        })\n        // determine and set next selection type\n        const len = this.selectedEntities.length\n        if (len > 1) {\n            this.selectionType = SelectionType.GROUP\n        } else if (len === 1) {\n            this.selectionType = this.selectedEntities[0].getSelectionType()\n        } else if (this.selectionType !== null) {\n            this.selectionType = SelectionType.NOTHING\n        }\n        // AFTER updating selected entities and selection type, publish all events\n        EventBus.publishEvent(new SelectionChanged(this.selectionType, this.selectedSurface, this.selectedBuilding, this.selectedRaiders))\n    }\n\n    static getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + GameState.buildings.count((b) => b.isUsable() && b.entityType === EntityType.BARRACKS) * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    static discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE\n        this.discoverEntities(this.raidersUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.buildingsUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.materialsUndiscovered, minX, maxX, minZ, maxZ)\n    }\n\n    static discoverEntities(undiscovered: BaseEntity[], minX, maxX, minZ, maxZ) {\n        const discovered = []\n        undiscovered.forEach((e) => {\n            const pos = e.getPosition()\n            if (pos.x >= minX && pos.x < maxX && pos.z >= minZ && pos.z < maxZ) {\n                e.onDiscover()\n                discovered.push(e)\n            }\n        })\n        discovered.forEach((r) => undiscovered.remove(r))\n    }\n\n    static get gameTimeSeconds() {\n        return Math.round((GameState.levelStopTime - GameState.levelStartTime) / 1000)\n    }\n\n    static get selectedSurface(): Surface {\n        return this.selectionType === SelectionType.SURFACE && this.selectedEntities.length > 0 ? this.selectedEntities[0] as Surface : null\n    }\n\n    static get selectedBuilding(): BuildingEntity {\n        return this.selectionType === SelectionType.BUILDING && this.selectedEntities.length > 0 ? this.selectedEntities[0] as BuildingEntity : null\n    }\n\n    static get selectedRaiders(): Raider[] {\n        return (this.selectionType === SelectionType.RAIDER || this.selectionType === SelectionType.GROUP) && this.selectedEntities.length > 0 ? this.selectedEntities as Raider[] : []\n    }\n\n    static get totalOre(): number {\n        return this.numOre + this.numBrick * 5\n    }\n\n    static getNearbySpiders(entity: BaseEntity): SmallSpider[] {\n        const terrain = entity.sceneMgr.terrain\n        const currentSurface = terrain.getSurfaceFromWorld(entity.getPosition())\n        const nearbySpiders: SmallSpider[] = []\n        for (let x = currentSurface.x; x <= currentSurface.x + 1; x++) {\n            for (let y = currentSurface.y; y <= currentSurface.y + 1; y++) {\n                const surface = terrain.getSurface(x, y)\n                nearbySpiders.push(...(GameState.spidersBySurface.get(surface) || []))\n            }\n        }\n        return nearbySpiders\n    }\n\n}\n","import { Vector3 } from 'three'\n\nexport interface Selectable {\n\n    getSelectionType(): SelectionType\n\n    select(): boolean\n\n    deselect(): any\n\n    getSelectionCenter(): Vector3\n\n}\n\nexport enum SelectionType {\n\n    NOTHING,\n    SURFACE,\n    RAIDER,\n    BUILDING,\n    VEHICLE,\n    GROUP,\n\n}\n","import { Cursor } from '../../../screen/Cursor'\n\nexport class SurfaceType {\n\n    name: string // human readable, maybe used as label later on\n    shaping: boolean = false\n    matIndex: string = '00'\n    floor: boolean = false\n    selectable: boolean = false\n    drillable: boolean = false\n    drillableHard: boolean = false\n    explodable: boolean = false\n    reinforcable: boolean = false\n    cursor: Cursor = Cursor.Pointer_Standard\n    cursorFulfiller: Cursor = Cursor.Pointer_Standard\n    statsDrillName: string = null\n    canCarryFence: boolean = false\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options)\n    }\n\n    static readonly GROUND = new SurfaceType({\n        name: 'ground',\n        floor: true,\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly SOLID_ROCK = new SurfaceType({\n        name: 'solid rock',\n        shaping: true,\n        matIndex: '5',\n        cursor: Cursor.Pointer_SurfaceType_Immovable,\n    })\n    static readonly HARD_ROCK = new SurfaceType({\n        name: 'hard rock',\n        shaping: true,\n        matIndex: '4',\n        selectable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_Hard,\n        statsDrillName: 'HardDrillTime',\n    })\n    static readonly LOOSE_ROCK = new SurfaceType({\n        name: 'loose rock',\n        shaping: true,\n        matIndex: '3',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_Medium,\n        statsDrillName: 'LooseDrillTime',\n    })\n    static readonly DIRT = new SurfaceType({\n        name: 'dirt',\n        shaping: true,\n        matIndex: '2',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_Loose,\n        statsDrillName: 'SoilDrillTime',\n    })\n    static readonly SLUG_HOLE = new SurfaceType({name: 'slug hole', floor: true, matIndex: '30'})\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'})\n    static readonly ORE_SEAM = new SurfaceType({\n        name: 'ore seam',\n        matIndex: '40',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_OreSeam,\n        statsDrillName: 'SeamDrillTime',\n    })\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45'})\n    static readonly CRYSTAL_SEAM = new SurfaceType({\n        name: 'energy crystal seam',\n        matIndex: '20',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n        cursor: Cursor.Pointer_SurfaceType_CrystalSeam,\n        statsDrillName: 'SeamDrillTime',\n    })\n    static readonly RECHARGE_SEAM = new SurfaceType({\n        name: 'recharge seam',\n        matIndex: '67',\n        cursor: Cursor.Pointer_SurfaceType_RechargeSeam,\n    })\n    static readonly POWER_PATH = new SurfaceType({\n        name: 'power path all',\n        floor: true,\n        matIndex: '60',\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly POWER_PATH_BUILDING_SITE = new SurfaceType({\n        name: 'power path building site',\n        floor: true,\n        matIndex: '61',\n        selectable: true,\n        canCarryFence: true,\n    })\n    static readonly POWER_PATH_BUILDING = new SurfaceType({\n        name: 'power path building',\n        floor: true,\n        matIndex: '76',\n    })\n    static readonly POWER_PATH_CONSTRUCTION = new SurfaceType({\n        name: 'power path construction',\n        floor: true,\n        matIndex: '76',\n        selectable: true,\n    })\n    static readonly RUBBLE1 = new SurfaceType({\n        name: 'rubble 1',\n        floor: true,\n        matIndex: '13',\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_Clear,\n    })\n    static readonly RUBBLE2 = new SurfaceType({\n        name: 'rubble 2',\n        floor: true,\n        matIndex: '12',\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_Clear,\n    })\n    static readonly RUBBLE3 = new SurfaceType({\n        name: 'rubble 3',\n        floor: true,\n        matIndex: '11',\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_Clear,\n    })\n    static readonly RUBBLE4 = new SurfaceType({\n        name: 'rubble 4',\n        floor: true,\n        matIndex: '10',\n        selectable: true,\n        canCarryFence: true,\n        cursorFulfiller: Cursor.Pointer_Clear,\n    })\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING\n            case 1:\n                return SurfaceType.SOLID_ROCK\n            case 2:\n                return SurfaceType.HARD_ROCK\n            case 3:\n                return SurfaceType.LOOSE_ROCK\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT\n            case 6:\n                return SurfaceType.LAVA\n            case 8:\n                return SurfaceType.ORE_SEAM\n            case 9:\n                return SurfaceType.WATER\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM\n            case 11:\n                return SurfaceType.RECHARGE_SEAM\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE\n            case 100:\n                return SurfaceType.RUBBLE4\n            case 101:\n                return SurfaceType.RUBBLE3\n            case 102:\n                return SurfaceType.RUBBLE2\n            case 103:\n                return SurfaceType.RUBBLE1\n            default:\n                console.error('Unexpected surface type num: ' + typeNum)\n                return SurfaceType.SOLID_ROCK\n        }\n    }\n}\n","export enum RaiderTool {\n\n    DRILL,\n    HAMMER,\n    SHOVEL,\n    SPANNER,\n    FREEZERGUN,\n    LASER,\n    PUSHERGUN,\n    BIRDSCARER,\n\n}\n\nexport const AllRaiderTools: RaiderTool[] = [\n    RaiderTool.DRILL,\n    RaiderTool.HAMMER,\n    RaiderTool.SHOVEL,\n    RaiderTool.SPANNER,\n    RaiderTool.FREEZERGUN,\n    RaiderTool.LASER,\n    RaiderTool.PUSHERGUN,\n    RaiderTool.BIRDSCARER,\n]\n","import { EntityType } from '../EntityType'\n\nexport enum RaiderTraining {\n    DRIVER,\n    ENGINEER,\n    GEOLOGIST,\n    PILOT,\n    SAILOR,\n    DEMOLITION,\n}\n\nexport const AllRaiderTrainings: RaiderTraining[] = [\n    RaiderTraining.DRIVER,\n    RaiderTraining.ENGINEER,\n    RaiderTraining.GEOLOGIST,\n    RaiderTraining.PILOT,\n    RaiderTraining.SAILOR,\n    RaiderTraining.DEMOLITION,\n]\n\nexport const RaiderTrainingSites: EntityType[] = []\nRaiderTrainingSites[RaiderTraining.DRIVER] = EntityType.BARRACKS\nRaiderTrainingSites[RaiderTraining.DRIVER] = EntityType.BARRACKS\nRaiderTrainingSites[RaiderTraining.ENGINEER] = EntityType.UPGRADE\nRaiderTrainingSites[RaiderTraining.GEOLOGIST] = EntityType.GEODOME\nRaiderTrainingSites[RaiderTraining.PILOT] = EntityType.TELEPORT_PAD\nRaiderTrainingSites[RaiderTraining.SAILOR] = EntityType.DOCKS\nRaiderTrainingSites[RaiderTraining.DEMOLITION] = EntityType.TOOLSTATION\n\nexport const RaiderTrainingStatsProperty: string[] = []\nRaiderTrainingStatsProperty[RaiderTraining.DRIVER] = 'TrainDriver'\nRaiderTrainingStatsProperty[RaiderTraining.ENGINEER] = 'TrainRepair'\nRaiderTrainingStatsProperty[RaiderTraining.GEOLOGIST] = 'TrainScanner'\nRaiderTrainingStatsProperty[RaiderTraining.PILOT] = 'TrainPilot'\nRaiderTrainingStatsProperty[RaiderTraining.SAILOR] = 'TrainSailor'\nRaiderTrainingStatsProperty[RaiderTraining.DEMOLITION] = 'TrainDynamite'\n","export const DEV_MODE = process.env.WEBPACK_MODE === 'development'\nexport const WAD_CACHE_DB_NAME = 'RockRaidersWeb'\nexport const JOB_SCHEDULE_INTERVAL = 1000 // milliseconds\nexport const CHECK_CLEARRUBBLE_INTERVAL = 5000 // milliseconds\nexport const JOB_ACTION_RANGE = 7\nexport const CHECK_SPANW_RAIDER_TIMER = 1000 // milliseconds\nexport const MAX_RAIDER_BASE = 12\nexport const MAX_RAIDER_REQUEST = 9\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10\nexport const UPDATE_OXYGEN_TIMER = 5000 // milliseconds\nexport const PANEL_ANIMATION_MULTIPLIER = 3\nexport const HEIGHT_MULTIPLER = 0.1\nexport const SEQUENCE_TEXTURE_FRAMERATE = 5\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640\nexport const SPRITE_RESOLUTION_HEIGHT = 480\nexport const TILESIZE = 40\nexport const NATIVE_FRAMERATE = 30\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class ButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 9) {\n            [this.buttonType, this.normalFile, this.highlightFile, this.pressedFile, this.relX, this.relY, this.width, this.height, this.tooltip] = cfgValue\n        } else {\n            throw 'Invalid number of arguments (' + cfgValue.length + ') given for button configuration expected 9 or 5'\n        }\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class ButtonInfoDockCfg extends BaseConfig {\n\n    panelButtonInfoDockGoto: ButtonCfg = null\n    panelButtonInfoDockClose: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { PanelCfg } from '../../cfg/PanelCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\n\nexport class RadarPanel extends Panel {\n\n    fill: Panel\n    overlay: Panel\n    btnToggle: Button\n    btnMap: Button\n    btnTagged: Button\n\n    constructor(parent: BaseElement, panelCfg: PanelCfg, panelFillCfg: PanelCfg, panelOverlayCfg: PanelCfg, buttonsCfg: ButtonRadarCfg) {\n        super(parent, panelCfg)\n        this.fill = this.addChild(new Panel(this, panelFillCfg))\n        // fill cords given in abs, turn to rel (otherwise animation wont work)\n        this.fill.relX = this.relX - this.fill.relX\n        this.fill.relY = this.relY - this.fill.relY\n        this.overlay = this.addChild(new Panel(this, panelOverlayCfg))\n        // this.overlay.hide();\n        this.btnToggle = this.addChild(new Button(this, buttonsCfg.panelButtonRadarToggle))\n        this.btnToggle.onClick = () => this.toggleState()\n        this.btnMap = this.addChild(new Button(this, buttonsCfg.panelButtonRadarMapView))\n        this.btnMap.onClick = () => {\n            // this.fill.hide();\n            // this.overlay.hide();\n        }\n        this.btnTagged = this.addChild(new Button(this, buttonsCfg.panelButtonRadarTaggedObjectView))\n        this.btnTagged.onClick = () => {\n            // this.fill.show();\n            // this.overlay.show(); // TODO only show overlay, when entity selected\n        }\n    }\n\n}\n\nexport class ButtonRadarCfg extends BaseConfig {\n\n    panelButtonRadarToggle: ButtonCfg = null\n    panelButtonRadarTaggedObjectView: ButtonCfg = null\n    panelButtonRadarZoomIn: ButtonCfg = null\n    panelButtonRadarZoomOut: ButtonCfg = null\n    panelButtonRadarMapView: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { BaseElement } from '../base/BaseElement'\n\nexport class SideBarLabel extends BaseElement {\n\n    tooltip: string\n    label: string\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width\n        this.height = btnCfg.height\n        this.tooltip = btnCfg.tooltip\n        this.label = '0'\n        this.updatePosition()\n    }\n\n    reset() {\n        super.reset()\n        this.label = '0'\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        context.textAlign = 'center'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.label, this.x + this.width / 2, this.y + this.height - 2)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { PanelCfg } from '../../cfg/PanelCfg'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { SideBarLabel } from './SideBarLabel'\n\nexport class PanelCrystalSideBar extends Panel {\n\n    labelOre: SideBarLabel\n    labelCrystal: SideBarLabel\n    imgNoCrystal: SpriteImage\n    imgSmallCrystal: SpriteImage\n    imgUsedCrystal: SpriteImage\n    imgOre: SpriteImage\n\n    numCrystal: number = 0\n    usedCrystals: number = 0\n    neededCrystals: number = 0\n    totalOre: number = 0\n\n    constructor(parent: BaseElement, panelCfg: PanelCfg, buttonsCfg: ButtonCrystalSideBarCfg) {\n        super(parent, panelCfg)\n        this.labelOre = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarOre))\n        this.labelCrystal = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarCrystals))\n        this.imgNoCrystal = GuiResourceCache.getImage('Interface/RightPanel/NoSmallCrystal.bmp')\n        this.imgSmallCrystal = GuiResourceCache.getImage('Interface/RightPanel/SmallCrystal.bmp')\n        this.imgUsedCrystal = GuiResourceCache.getImage('Interface/RightPanel/UsedCrystal.bmp')\n        this.imgOre = GuiResourceCache.getImage('Interface/RightPanel/CrystalSideBar_Ore.bmp')\n        this.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, (event: MaterialAmountChanged) => {\n            this.labelOre.label = event.totalOre.toString()\n            this.labelCrystal.label = event.numCrystal.toString()\n            this.numCrystal = event.numCrystal\n            this.usedCrystals = event.usedCrystal\n            this.neededCrystals = event.neededCrystal\n            this.totalOre = event.totalOre\n            this.notifyRedraw()\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.numCrystal = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.totalOre = 0\n    }\n\n    onRedraw(context: SpriteContext) {\n        super.onRedraw(context)\n        // draw crystals\n        let curX = this.x + this.img.width - 8\n        let curY = this.y + this.img.height - 34\n        for (let c = 0; (this.neededCrystals < 1 || c < Math.max(this.neededCrystals, this.numCrystal)) && curY >= Math.max(this.imgNoCrystal.height, this.imgSmallCrystal.height, this.imgUsedCrystal.height); c++) {\n            let imgCrystal = this.imgNoCrystal\n            if (this.usedCrystals > c) {\n                imgCrystal = this.imgUsedCrystal\n            } else if (this.numCrystal > c) {\n                imgCrystal = this.imgSmallCrystal\n            }\n            curY -= imgCrystal.height\n            context.drawImage(imgCrystal, curX - imgCrystal.width / 2, curY)\n        }\n        // draw ores\n        curX = this.x + this.img.width - 21\n        curY = this.y + this.img.height - 42\n        for (let i = 0; i < this.totalOre && curY >= this.imgOre.height; ++i) {\n            curY -= this.imgOre.height\n            context.drawImage(this.imgOre, curX - this.imgOre.width / 2, curY)\n        }\n    }\n\n}\n\nexport class ButtonCrystalSideBarCfg extends BaseConfig {\n\n    panelButtonCrystalSideBarOre: ButtonCfg = null\n    panelButtonCrystalSideBarCrystals: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class ButtonPriorityListCfg extends BaseConfig {\n\n    panelButtonPriorityListDisable: ButtonCfg[] = []\n    panelButtonPriorityListUpOne: ButtonCfg[] = []\n    panelButtonPriorityListClose: ButtonCfg = null // not used in the game\n    panelButtonPriorityListReset: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName.match(/panelButtonPriorityListDisable\\d+/i)) {\n            this.panelButtonPriorityListDisable.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else if (lCfgKeyName.match(/panelButtonPriorityListUpOne\\d+/i)) {\n            this.panelButtonPriorityListUpOne.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else {\n            return super.assignValue(objKey, lCfgKeyName, cfgValue)\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class ButtonTopCfg extends BaseConfig {\n\n    panelButtonTopPanelCallToArms: ButtonCfg = null\n    panelButtonTopPanelOptions: ButtonCfg = null\n    panelButtonTopPanelPriorities: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ButtonCfg } from './ButtonCfg'\n\nexport class ButtonCameraControlCfg extends BaseConfig {\n\n    panelButtonCameraControlZoomIn: ButtonCfg = null\n    panelButtonCameraControlZoomOut: ButtonCfg = null\n    panelButtonCameraControlCycleBuildings: ButtonCfg = null\n    panelButtonCameraControlRotate: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ButtonCfg } from './ButtonCfg'\n\nexport class ButtonInformationCfg extends BaseConfig {\n\n    panelButtonInformationToggle: ButtonCfg = null\n    panelButtonInformationFunction: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { ButtonInfoDockCfg } from '../gui/infodock/ButtonInfoDockCfg'\nimport { ButtonRadarCfg } from '../gui/radar/RadarPanel'\nimport { ButtonCrystalSideBarCfg } from '../gui/sidebar/PanelCrystalSideBar'\nimport { ButtonPriorityListCfg } from '../gui/toppanel/ButtonPriorityListCfg'\nimport { ButtonTopCfg } from '../gui/toppanel/ButtonTopCfg'\nimport { BaseConfig } from './BaseConfig'\nimport { ButtonCameraControlCfg } from './ButtonCameraControlCfg'\nimport { ButtonInformationCfg } from './ButtonInformationCfg'\n\nexport class ButtonsCfg extends BaseConfig {\n\n    panelRadar: ButtonRadarCfg = null\n    panelCrystalSideBar: ButtonCrystalSideBarCfg = null\n    panelTopPanel: ButtonTopCfg = null\n    panelInformation: ButtonInformationCfg = null\n    panelPriorityList: ButtonPriorityListCfg = null\n    panelCameraControl: ButtonCameraControlCfg = null\n    panelInfoDock: ButtonInfoDockCfg = null\n    panelEncyclopedia: any = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        const btnCfgValue = {}\n        cfgValue.forEach(arr => btnCfgValue[arr[0]] = arr)\n        if (lCfgKeyName === 'panelRadar'.toLowerCase()) {\n            return new ButtonRadarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCrystalSideBar'.toLowerCase()) {\n            return new ButtonCrystalSideBarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelTopPanel'.toLowerCase()) {\n            return new ButtonTopCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInformation'.toLowerCase()) {\n            return new ButtonInformationCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelPriorityList'.toLowerCase()) {\n            return new ButtonPriorityListCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCameraControl'.toLowerCase()) {\n            return new ButtonCameraControlCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInfoDock'.toLowerCase()) {\n            return new ButtonInfoDockCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelEncyclopedia'.toLowerCase()) {\n            return null // not used in the game\n        } else {\n            return btnCfgValue\n        }\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { PanelCfg } from './PanelCfg'\n\nexport class PanelsCfg extends BaseConfig {\n\n    panelRadar: PanelCfg = null\n    panelRadarFill: PanelCfg = null\n    panelRadarOverlay: PanelCfg = null\n    panelMessages: PanelCfg = null\n    panelMessagesSide: PanelCfg = null\n    panelCrystalSideBar: PanelCfg = null\n    panelTopPanel: PanelCfg = null\n    panelInformation: PanelCfg = null\n    panelPriorityList: PanelCfg = null\n    panelCameraControl: PanelCfg = null\n    panelInfoDock: PanelCfg = null\n    panelEncyclopedia: PanelCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new PanelCfg(cfgValue)\n    }\n}\n\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class InfoButtonCfg extends BaseButtonCfg {\n\n    constructor(buttonImageFilename: string) {\n        super()\n        this.normalFile = buttonImageFilename\n        this.highlightFile = buttonImageFilename\n        this.pressedFile = buttonImageFilename\n        this.disabledFile = buttonImageFilename\n        this.relX = 0\n        this.relY = 0\n    }\n\n}\n","import { InfoButtonCfg } from '../../cfg/InfoButtonCfg'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { WorldEvent } from '../../event/WorldEvents'\nimport { WorldLocationEvent } from '../../event/WorldLocationEvent'\nimport { NATIVE_FRAMERATE } from '../../params'\nimport { Button } from '../base/Button'\nimport { InfoDockPanel } from './InfoDockPanel'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\n\nexport class InfoDockButton extends Button {\n\n    messages: WorldEvent[] = [] // newest message first\n    text: string = null\n    animationTimeout = null\n    animationSpeedX = 0.5\n    animationSpeedY = 1\n\n    constructor(parent: InfoDockPanel, infoMessagesEntryConfig: InfoMessagesEntryConfig, eventKey: EventKey) {\n        super(parent, new InfoButtonCfg(infoMessagesEntryConfig.buttonImageFilename))\n        this.text = infoMessagesEntryConfig.message\n        this.hidden = true\n\n        this.onClick = () => {\n            if (this.messages.length < 1) return\n            parent.buttonClicked(this)\n        }\n\n        this.registerEventListener(eventKey, (event: WorldLocationEvent) => {\n            this.hidden = false\n            while (this.messages.length >= 9) this.messages.pop()\n            this.messages.unshift(event)\n            parent.showButton(this)\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.hidden = true\n        this.messages = []\n    }\n\n    slideToTarget(targetX: number, targetY: number): Promise<void> {\n        return new Promise<void>((resolve) => this.updateAnimation(targetX, targetY, resolve))\n    }\n\n    private updateAnimation(targetX: number, targetY: number, onDone: () => any) { // TODO refactor: almost equal with code for Panel\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= this.animationSpeedX && Math.abs(diffY) <= this.animationSpeedY) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * this.animationSpeedX)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * this.animationSpeedY)\n            const that = this\n            this.animationTimeout = setTimeout(() => that.updateAnimation(targetX, targetY, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: SpriteContext) {\n        super.onRedraw(context)\n        if (this.hidden) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.messages.length.toString(), this.x + 2, this.y + this.height / 2 + 2)\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { LandslideEvent } from '../../event/WorldLocationEvent'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { ButtonInfoDockCfg } from './ButtonInfoDockCfg'\nimport { InfoDockButton } from './InfoDockButton'\nimport { InfoMessagesConfig } from './InfoMessagesConfig'\nimport { InformationPanel } from './InformationPanel'\n\nexport class InfoDockPanel extends Panel {\n\n    stackButtons: InfoDockButton[] = []\n    informationPanel: InformationPanel = null\n\n    constructor(parent: BaseElement, panelCfg: PanelCfg, buttonsCfg: ButtonInfoDockCfg, infoMessagesConfig: InfoMessagesConfig, informationPanel: InformationPanel) {\n        super(parent, panelCfg)\n        this.informationPanel = informationPanel\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockGoto)).onClick = () => this.gotoLatestMessage()\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockClose)).onClick = () => this.dropLatestMessage()\n\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericDeath, EventKey.LOCATION_DEATH))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericMonster, EventKey.LOCATION_MONSTER))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoCrystalFound, EventKey.LOCATION_CRYSTAL_FOUND))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoUnderAttack, EventKey.LOCATION_UNDER_ATTACK))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoLandslide, EventKey.LOCATION_LANDSLIDE))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoPowerDrain, EventKey.LOCATION_POWER_DRAIN))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoSlugEmerge, EventKey.LOCATION_SLUG_EMERGE))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoFoundMinifigure, EventKey.LOCATION_RAIDER_DISCOVERED))\n    }\n\n    reset() {\n        super.reset()\n        this.stackButtons = []\n    }\n\n    private gotoLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const btn = this.stackButtons[0]\n        if (btn.messages.length < 1) return\n        const msg = btn.messages[0] as LandslideEvent\n        console.log('TODO force move camera to', msg.location) // TODO force move camera\n    }\n\n    private dropLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const button = this.stackButtons[0]\n        if (button.messages.length < 1) return\n        button.messages.shift()\n        if (button.messages.length < 1) {\n            button.hidden = true\n            this.informationPanel.setMovedIn(true)\n            this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n            this.slideStackIntoPosition().then()\n        }\n        button.notifyRedraw()\n    }\n\n    showButton(button: InfoDockButton) {\n        if (this.stackButtons.includes(button)) {\n            button.notifyRedraw()\n        } else {\n            this.slideInButton(button)\n        }\n    }\n\n    private slideInButton(button: InfoDockButton) {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        const targetY = -this.stackButtons.map(b => b.height).reduce((prev, cur) => prev + cur, 0)\n        this.stackButtons.push(button)\n        button.relX = -button.width\n        button.relY = targetY - button.height\n        button.updatePosition()\n        button.slideToTarget(0, targetY).then(() => this.stackButtons.forEach(btn => btn.disabled = false))\n    }\n\n    buttonClicked(button: InfoDockButton) {\n        if (button !== this.stackButtons[0]) {\n            this.pushFirst(button)\n        } else {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.toggleState()\n        }\n    }\n\n    private pushFirst(button: InfoDockButton) {\n        this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n        this.stackButtons.unshift(button)\n        this.slideStackIntoPosition().then(() => {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.setMovedIn(false)\n        })\n    }\n\n    private slideStackIntoPosition() {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        let relY = 0\n        const promises = this.stackButtons.map(btn => {\n            const p = btn.slideToTarget(0, relY)\n            relY -= btn.height\n            return p\n        })\n        return new Promise<void>((resolve) => {\n            Promise.all(promises).then(() => {\n                this.stackButtons.forEach(btn => btn.disabled = false)\n                resolve()\n            })\n        })\n    }\n\n}\n\n","export class InfoMessagesEntryConfig {\n\n    message: string = null\n    buttonImageFilename: string = null\n    sfx: string = null\n    timing: string = null\n    flag: string = null\n\n    constructor(cfgValue: any) {\n        [this.message, this.buttonImageFilename, this.sfx, this.timing, this.flag] = cfgValue\n        this.message = this.message.replace(/_/g, ' ')\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\n\nexport class InfoMessagesConfig extends BaseConfig {\n\n    infoGenericDeath: InfoMessagesEntryConfig = null\n    infoGenericMonster: InfoMessagesEntryConfig = null\n    infoCrystalFound: InfoMessagesEntryConfig = null\n    infoUnderAttack: InfoMessagesEntryConfig = null\n    infoLandslide: InfoMessagesEntryConfig = null\n    infoPowerDrain: InfoMessagesEntryConfig = null\n    infoSlugEmerge: InfoMessagesEntryConfig = null\n    infoFoundMinifigure: InfoMessagesEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new InfoMessagesEntryConfig(cfgValue)\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { BitmapFont } from '../../core/BitmapFont'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { GuiResourceCache } from '../GuiResourceCache'\n\nexport class InformationPanel extends Panel {\n\n    font: BitmapFont = null\n    textImage = null\n\n    constructor(parent: BaseElement, panelCfg: PanelCfg) {\n        super(parent, panelCfg)\n        this.font = GuiResourceCache.getDefaultFont()\n    }\n\n    setText(text?: string) {\n        this.textImage = text ? this.font.createTextImage(text, this.img.width - 80) : null\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: SpriteContext) {\n        super.onRedraw(context)\n        if (this.textImage) context.drawImage(this.textImage, this.x + (this.img.width - this.textImage.width) / 2, this.y + 12)\n    }\n\n}\n","import { EntityType } from '../game/model/EntityType'\nimport { PriorityEntry } from '../game/model/job/PriorityList'\nimport { RaiderTool } from '../game/model/raider/RaiderTool'\nimport { RaiderTraining } from '../game/model/raider/RaiderTraining'\nimport { EventKey } from './EventKeyEnum'\nimport { LocalEvent } from './LocalEvents'\n\nexport class GuiCommand extends LocalEvent {\n}\n\nexport class CancelBuildMode extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CANCEL_BUILD_MODE)\n    }\n\n}\n\nexport class SelectBuildMode extends GuiCommand {\n\n    entityType: EntityType\n\n    constructor(entityType: EntityType) {\n        super(EventKey.COMMAND_SELECT_BUILD_MODE)\n        this.entityType = entityType\n    }\n\n}\n\nexport class SelectedRaiderPickTool extends GuiCommand {\n\n    tool: RaiderTool\n\n    constructor(tool: RaiderTool) {\n        super(EventKey.COMMAND_PICK_TOOL)\n        this.tool = tool\n    }\n\n}\n\nexport class CreatePowerPath extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_POWER_PATH)\n    }\n\n}\n\nexport class PlaceFence extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_PLACE_FENCE)\n    }\n\n}\n\nexport class MakeRubble extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_MAKE_RUBBLE)\n    }\n\n}\n\nexport class ChangeRaiderSpawnRequest extends GuiCommand {\n\n    increase: boolean\n\n    constructor(increase: boolean) {\n        super(EventKey.COMMAND_CHANGE_RAIDER_SPAWN_REQUEST)\n        this.increase = increase\n    }\n\n}\n\nexport class CreateClearRubbleJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_CLEAR_RUBBLE_JOB)\n    }\n\n}\n\nexport class UpgradeBuilding extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_UPGRADE_BUILDING)\n    }\n\n}\n\nexport class BeamUpBuilding extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_BUILDING_BEAMUP)\n    }\n\n}\n\nexport class ChangePriorityList extends GuiCommand {\n\n    priorityList: PriorityEntry[]\n\n    constructor(priorityList: PriorityEntry[]) {\n        super(EventKey.CHANGE_PRIORITY_LIST)\n        this.priorityList = priorityList\n    }\n\n}\n\nexport class ChangeBuildingPowerState extends GuiCommand {\n\n    state: boolean\n\n    constructor(state: boolean) {\n        super(EventKey.COMMAND_CHANGE_BUILDING_POWER_STATE)\n        this.state = state\n    }\n\n}\n\nexport class CreateDrillJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_DRILL_JOB)\n    }\n\n}\n\nexport class CreateReinforceJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_REINFORCE_JOB)\n    }\n\n}\n\nexport class CreateDynamiteJob extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CREATE_DYNAMITE_JOB)\n    }\n\n}\n\nexport class CancelSurfaceJobs extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CANCEL_SURFACE_JOBS)\n    }\n\n}\n\nexport class RaiderEat extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_EAT)\n    }\n\n}\n\nexport class RaiderDrop extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_DROP)\n    }\n\n}\n\nexport class RaiderUpgrade extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_UPGRADE)\n    }\n\n}\n\nexport class RaiderBeamUp extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_RAIDER_BEAMUP)\n    }\n\n}\n\nexport class TrainRaider extends GuiCommand {\n\n    training: RaiderTraining\n\n    constructor(training: RaiderTraining) {\n        super(EventKey.COMMAND_TRAIN_RAIDER)\n        this.training = training\n    }\n\n}\n\nexport class CancelBuilding extends GuiCommand {\n\n    constructor() {\n        super(EventKey.COMMAND_CANCEL_CONSTRUCTION)\n    }\n\n}\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class IconPanelBackButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super();\n        [this.width, this.height, this.highlightFile, this.pressedFile, this.tooltip] = cfgValue // Interface back button\n        this.relX = 4\n        this.relY = 14\n    }\n\n}\n","import { BaseButtonCfg } from './BaseButtonCfg'\n\nexport class MenuItemCfg extends BaseButtonCfg {\n\n    tooltipSfx: string = null\n    tooltipDisabled: string = null\n    tooltipDisabledSfx: string = null\n    hotkey: string = null\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 4) {\n            [this.normalFile, this.disabledFile, this.pressedFile, this.hotkey] = cfgValue\n        } else if (cfgValue.length === 6 || cfgValue.length === 7) { // XXX 7th element is boolean, but usage unknown\n            let tooltip, tooltipDisabled\n            [this.normalFile, this.disabledFile, this.pressedFile, tooltip, tooltipDisabled, this.hotkey] = cfgValue\n            if (tooltip) {\n                if (Array.isArray(tooltip)) {\n                    [this.tooltip, this.tooltipSfx] = tooltip\n                } else {\n                    this.tooltip = tooltip\n                }\n            }\n            if (tooltipDisabled) {\n                if (Array.isArray(tooltipDisabled)) {\n                    [this.tooltipDisabled, this.tooltipDisabledSfx] = tooltipDisabled\n                } else {\n                    this.tooltipDisabled = tooltipDisabled\n                }\n            }\n        } else {\n            console.error('Unexpected menu item cfg value length: ' + cfgValue.length)\n        }\n        this.tooltip?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.tooltipDisabled?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.width = 40\n        this.height = 40\n    }\n\n}\n","import { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\n\nexport class IconPanelButton extends Button {\n\n    tooltipSfx: string = null\n    tooltipDisabled: string = null\n    tooltipDisabledSfx: string = null\n    hotkey: string = null\n    isDisabled: () => boolean = () => this.disabled\n\n    constructor(parent: BaseElement, menuItemCfg: MenuItemCfg, itemKey: string, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemCfg)\n        this.buttonType = itemKey\n        this.relX = parentWidth - 59\n        this.relY = 9 + this.height * menuIndex\n        this.tooltipSfx = menuItemCfg.tooltipSfx\n        this.tooltipDisabled = menuItemCfg.tooltipDisabled\n        this.tooltipDisabledSfx = menuItemCfg.tooltipDisabledSfx\n        this.hotkey = menuItemCfg.hotkey\n        this.disabled = true\n        this.onClick = () => console.log('menu item pressed: ' + this.buttonType)\n    }\n\n    reset() {\n        super.reset()\n        this.disabled = true\n        this.updateState(false)\n    }\n\n    updateState(autoRedraw: boolean = true) {\n        const targetState = !!this.isDisabled()\n        const stateChanged = this.disabled !== targetState\n        this.disabled = targetState\n        if (stateChanged && autoRedraw) this.notifyRedraw()\n        return stateChanged\n    }\n\n    drawHover(context: SpriteContext) {\n        super.drawHover(context)\n        if (!this.disabled && this.hover) {\n            context.strokeStyle = '#0f0'\n            context.lineWidth = 2\n            context.strokeRect(this.x - context.lineWidth / 2, this.y - context.lineWidth / 2, this.width + context.lineWidth - 1, this.height + context.lineWidth - 1)\n        }\n    }\n\n}\n","import { IconPanelBackButtonCfg } from '../../cfg/IconPanelBackButtonCfg'\nimport { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class IconSubPanel extends Panel {\n\n    backBtn: Button = null\n    iconPanelButtons: IconPanelButton[] = []\n\n    constructor(parent: BaseElement, numOfItems, onBackPanel: Panel = null) {\n        super(parent)\n        if (onBackPanel) {\n            const backBtnCfg = new IconPanelBackButtonCfg(GuiResourceCache.cfg('InterfaceBackButton'))\n            this.backBtn = this.addChild(new Button(this, backBtnCfg))\n            this.backBtn.onClick = () => this.toggleState(() => onBackPanel.toggleState())\n        }\n        const frameImgCfg = GuiResourceCache.cfg('InterfaceSurroundImages', numOfItems.toString())\n        // noinspection JSUnusedLocalSymbols\n        const [imgName, val1, val2, val3, val4, imgNameWoBackName, woBack1, woBack2] = frameImgCfg\n        this.img = onBackPanel ? GuiResourceCache.getImage(imgName) : GuiResourceCache.getImage(imgNameWoBackName)\n        this.xOut = -this.img.width\n    }\n\n    addMenuItem(menuItemGroup: string, itemKey: string) {\n        const menuItemCfg = new MenuItemCfg(GuiResourceCache.cfg(menuItemGroup, itemKey))\n        const menuItem = this.addChild(new IconPanelButton(this, menuItemCfg, itemKey, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(menuItem)\n        return menuItem\n    }\n\n    toggleState(onDone: () => any = null) {\n        super.toggleState(onDone)\n        if (!this.movedIn) this.updateAllButtonStates()\n    }\n\n    updateAllButtonStates() {\n        this.iconPanelButtons.forEach((button) => button.updateState(false))\n        this.notifyRedraw()\n    }\n\n}\n","import { CancelBuildMode, SelectBuildMode } from '../../event/GuiCommand'\nimport { EntityType } from '../../game/model/EntityType'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class BuildingPanel extends IconSubPanel {\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 10, onBackPanel)\n        this.backBtn.onClick = () => {\n            this.publishEvent(new CancelBuildMode())\n            this.toggleState(() => onBackPanel.toggleState())\n        }\n        this.addBuildMenuItem('InterfaceBuildImages', 'Toolstation', EntityType.TOOLSTATION)\n        this.addBuildMenuItem('InterfaceBuildImages', 'TeleportPad', EntityType.TELEPORT_PAD)\n        this.addBuildMenuItem('InterfaceBuildImages', 'Docks', EntityType.DOCKS)\n        this.addBuildMenuItem('InterfaceBuildImages', 'Powerstation', EntityType.POWER_STATION)\n        this.addBuildMenuItem('InterfaceBuildImages', 'Barracks', EntityType.BARRACKS)\n        this.addBuildMenuItem('InterfaceBuildImages', 'Upgrade', EntityType.UPGRADE)\n        this.addBuildMenuItem('InterfaceBuildImages', 'Geo-dome', EntityType.GEODOME)\n        this.addBuildMenuItem('InterfaceBuildImages', 'OreRefinery', EntityType.ORE_REFINERY)\n        this.addBuildMenuItem('InterfaceBuildImages', 'Gunstation', EntityType.GUNSTATION)\n        this.addBuildMenuItem('InterfaceBuildImages', 'TeleportBIG', EntityType.TELEPORT_BIG)\n    }\n\n    addBuildMenuItem(menuItemGroup: string, itemKey: string, entityType: EntityType) {\n        const item = this.addMenuItem(menuItemGroup, itemKey)\n        item.isDisabled = () => false // TODO check Dependencies from config\n        item.onClick = () => this.publishEvent(new SelectBuildMode(entityType))\n        return item\n    }\n\n}\n","import { EventKey } from '../../event/EventKeyEnum'\nimport { SelectedRaiderPickTool } from '../../event/GuiCommand'\nimport { BuildingsChangedEvent, SelectionChanged } from '../../event/LocalEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { RaiderTool } from '../../game/model/raider/RaiderTool'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class GetToolPanel extends IconSubPanel {\n\n    numUsableToolstations: number = 0\n    everyHasTool: Map<RaiderTool, boolean> = new Map()\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 8, onBackPanel)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetDrill', RaiderTool.DRILL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpade', RaiderTool.SHOVEL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetHammer', RaiderTool.HAMMER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpanner', RaiderTool.SPANNER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetFreezerGun', RaiderTool.FREEZERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetLaser', RaiderTool.LASER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetPusherGun', RaiderTool.PUSHERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetBirdScarer', RaiderTool.BIRDSCARER)\n        this.registerEventListener(EventKey.BUILDINGS_CHANGED, (event: BuildingsChangedEvent) => {\n            this.numUsableToolstations = BuildingsChangedEvent.countUsable(event, EntityType.TOOLSTATION)\n            this.updateAllButtonStates()\n        })\n        this.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            this.everyHasTool = event.everyHasTool\n            this.updateAllButtonStates()\n        })\n    }\n\n    addGetToolItem(menuItemGroup: string, itemKey: string, tool: RaiderTool): IconPanelButton {\n        const menuItem = super.addMenuItem(menuItemGroup, itemKey)\n        menuItem.isDisabled = () => this.numUsableToolstations < 1 || !!this.everyHasTool.get(tool)\n        menuItem.onClick = () => this.publishEvent(new SelectedRaiderPickTool(tool))\n        return menuItem\n    }\n\n    reset() {\n        super.reset()\n        this.numUsableToolstations = 0\n        this.everyHasTool = new Map()\n    }\n\n}\n","import { EventKey } from '../../event/EventKeyEnum'\nimport { RequestedRaidersChanged } from '../../event/WorldEvents'\nimport { BaseElement } from '../base/BaseElement'\n\nexport class IconPanelButtonLabel extends BaseElement {\n\n    numRequestedRaiders: string = ''\n\n    constructor(parent: BaseElement) {\n        super(parent)\n        this.relX = 4\n        this.relY = 11\n        this.registerEventListener(EventKey.REQUESTED_RAIDERS_CHANGED, (event: RequestedRaidersChanged) => {\n            this.numRequestedRaiders = (event.numRequestedRaiders || '').toString()\n            this.notifyRedraw()\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.numRequestedRaiders = ''\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = this.disabled || (this.parent && this.parent.disabled) ? '#444' : '#fff'\n        context.fillText(this.numRequestedRaiders, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class LargeVehiclePanel extends IconSubPanel {\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 5, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'BullDozer')\n        this.addMenuItem('InterfaceBuildImages', 'WalkerDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeMLP')\n        this.addMenuItem('InterfaceBuildImages', 'LargeDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeCat')\n    }\n\n}\n","import { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class IconPanelToggleButton extends IconPanelButton {\n\n    toggleState: boolean = false\n    imgOnNormal: SpriteImage\n    imgOnHover: SpriteImage\n    imgOnPressed: SpriteImage\n    imgOnDisabled: SpriteImage\n\n    constructor(parent: BaseElement, menuItemOffCfg: MenuItemCfg, menuItemOnCfg: MenuItemCfg, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemOffCfg, null, parentWidth, menuIndex)\n        this.imgOnNormal = GuiResourceCache.getImageOrNull(menuItemOnCfg.normalFile)\n        this.imgOnHover = GuiResourceCache.getImageOrNull(menuItemOnCfg.highlightFile)\n        this.imgOnPressed = GuiResourceCache.getImageOrNull(menuItemOnCfg.pressedFile)\n        this.imgOnDisabled = GuiResourceCache.getImageOrNull(menuItemOnCfg.disabledFile)\n    }\n\n    clicked() {\n        this.toggleState = !this.toggleState\n        super.clicked()\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        let img = this.toggleState ? this.imgOnNormal : this.imgNormal\n        if (this.disabled) {\n            if (this.toggleState) {\n                img = this.imgOnDisabled || this.imgOnPressed || this.imgOnNormal\n            } else {\n                img = this.imgDisabled || this.imgPressed || this.imgNormal\n            }\n        } else if (this.pressed) {\n            if (this.toggleState) {\n                img = this.imgOnPressed || this.imgOnNormal\n            } else {\n                img = this.imgPressed || this.imgNormal\n            }\n        } else if (this.hover) {\n            if (this.toggleState) {\n                img = this.imgOnHover || this.imgOnNormal\n            } else {\n                img = this.imgHover || this.imgNormal\n            }\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n}\n","import { SelectionChanged } from '../../event/LocalEvents'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class SelectBasePanel extends IconSubPanel {\n\n    constructor(parent: BaseElement, numOfItems, onBackPanel: Panel) {\n        super(parent, numOfItems, onBackPanel)\n        this.backBtn.onClick = () => this.publishEvent(new SelectionChanged())\n    }\n\n}\n","import { MenuItemCfg } from '../../cfg/MenuItemCfg'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { BeamUpBuilding, ChangeBuildingPowerState, UpgradeBuilding } from '../../event/GuiCommand'\nimport { SelectionChanged } from '../../event/LocalEvents'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { IconPanelToggleButton } from './IconPanelToggleButton'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectBuildingPanel extends SelectBasePanel {\n\n    usedCrystal = 0\n    numCrystal = 0\n    buildingCanUpgrade: boolean = false\n    buildingCanSwitchPower: boolean = false\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 4, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Repair') // TODO implement repair buildings\n        const menuItemOffCfg = new MenuItemCfg(GuiResourceCache.cfg('InterfaceImages', 'Interface_MenuItem_PowerOff'))\n        const menuItemOnCfg = new MenuItemCfg(GuiResourceCache.cfg('InterfaceImages', 'Interface_MenuItem_PowerOn'))\n        const powerSwitchItem = this.addChild(new IconPanelToggleButton(this, menuItemOffCfg, menuItemOnCfg, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(powerSwitchItem)\n        powerSwitchItem.isDisabled = () => this.usedCrystal >= this.numCrystal || !this.buildingCanSwitchPower\n        powerSwitchItem.onClick = () => this.publishEvent(new ChangeBuildingPowerState(!powerSwitchItem.toggleState))\n        const upgradeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeBuilding')\n        upgradeItem.isDisabled = () => !this.buildingCanUpgrade\n        upgradeItem.onClick = () => this.publishEvent(new UpgradeBuilding())\n        const deleteBuildingItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteBuilding')\n        deleteBuildingItem.isDisabled = () => false\n        deleteBuildingItem.onClick = () => this.publishEvent(new BeamUpBuilding())\n        this.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            this.buildingCanUpgrade = event.buildingCanUpgrade\n            this.buildingCanSwitchPower = event.buildingCanSwitchPower\n            this.updateAllButtonStates()\n        })\n        this.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, (event: MaterialAmountChanged) => {\n            this.numCrystal = event.numCrystal\n            this.usedCrystal = event.usedCrystal\n            this.updateAllButtonStates()\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.usedCrystal = 0\n        this.numCrystal = 0\n        this.buildingCanUpgrade = false\n        this.buildingCanSwitchPower = false\n    }\n\n}\n","import { EventKey } from '../../event/EventKeyEnum'\nimport { CreatePowerPath, MakeRubble, PlaceFence } from '../../event/GuiCommand'\nimport { SelectionChanged } from '../../event/LocalEvents'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectFloorPanel extends SelectBasePanel {\n\n    isGround: boolean = false\n    isPowerPath: boolean = false\n    canPlaceFence: boolean = false\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 3, onBackPanel)\n        const pathItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_LayPath')\n        pathItem.onClick = () => this.publishEvent(new CreatePowerPath())\n        pathItem.isDisabled = () => !this.isGround\n        const removeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_RemovePath')\n        removeItem.onClick = () => this.publishEvent(new MakeRubble())\n        removeItem.isDisabled = () => !this.isPowerPath\n        const placeFenceItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        placeFenceItem.isDisabled = () => !this.canPlaceFence\n        placeFenceItem.onClick = () => this.publishEvent(new PlaceFence())\n        this.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            this.isGround = event.isGround\n            this.isPowerPath = event.isPowerPath\n            this.canPlaceFence = event.canPlaceFence\n            this.updateAllButtonStates()\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.isGround = false\n        this.isPowerPath = false\n        this.canPlaceFence = false\n    }\n\n}\n","import { EventKey } from '../../event/EventKeyEnum'\nimport { RaiderBeamUp, RaiderDrop, RaiderEat, RaiderUpgrade } from '../../event/GuiCommand'\nimport { BuildingsChangedEvent, SelectionChanged } from '../../event/LocalEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectRaiderPanel extends SelectBasePanel {\n\n    getToolItem: IconPanelButton\n    trainItem: IconPanelButton\n\n    someCarries: boolean = false\n    everyHasMaxLevel: boolean = false\n    numToolstations: number = 0\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 10, onBackPanel)\n        const feedItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GoFeed')\n        feedItem.isDisabled = () => false\n        feedItem.onClick = () => this.publishEvent(new RaiderEat())\n        const unloadItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UnLoadMinifigure')\n        unloadItem.isDisabled = () => !this.someCarries\n        unloadItem.onClick = () => this.publishEvent(new RaiderDrop())\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_MinifigurePickUp')\n        this.getToolItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GetTool')\n        this.getToolItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DropBirdScarer')\n        const upgradeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeMan')\n        upgradeItem.isDisabled = () => this.everyHasMaxLevel || this.numToolstations < 1\n        upgradeItem.onClick = () => this.publishEvent(new RaiderUpgrade())\n        this.trainItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSkill')\n        this.trainItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoFirstPerson')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoSecondPerson')\n        const deleteRaiderItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteMan')\n        deleteRaiderItem.isDisabled = () => false\n        deleteRaiderItem.onClick = () => this.publishEvent(new RaiderBeamUp())\n        this.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            this.someCarries = event.someCarries\n            this.everyHasMaxLevel = event.everyHasMaxLevel\n            this.updateAllButtonStates()\n        })\n        this.registerEventListener(EventKey.BUILDINGS_CHANGED, (event: BuildingsChangedEvent) => {\n            this.numToolstations = BuildingsChangedEvent.countUsable(event, EntityType.TOOLSTATION)\n            this.updateAllButtonStates()\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.someCarries = false\n        this.everyHasMaxLevel = false\n        this.numToolstations = 0\n    }\n\n}\n","import { EventKey } from '../../event/EventKeyEnum'\nimport { CreateClearRubbleJob } from '../../event/GuiCommand'\nimport { SelectionChanged } from '../../event/LocalEvents'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectRubblePanel extends SelectBasePanel {\n\n    hasRubble: boolean = false\n    canPlaceFence: boolean = false\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 2, onBackPanel)\n        const clearRubbleItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_ClearRubble')\n        clearRubbleItem.isDisabled = () => !this.hasRubble\n        clearRubbleItem.onClick = () => this.publishEvent(new CreateClearRubbleJob())\n        const placeFenceItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        placeFenceItem.isDisabled = () => !this.canPlaceFence\n        this.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            this.hasRubble = event.hasRubble\n            this.canPlaceFence = event.canPlaceFence\n            this.updateAllButtonStates()\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.hasRubble = false\n        this.canPlaceFence = false\n    }\n\n}\n","import { CancelBuilding } from '../../event/GuiCommand'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectSitePanel extends SelectBasePanel {\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 1, onBackPanel)\n        const cancelBuilding = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_CancelConstruction')\n        cancelBuilding.isDisabled = () => false\n        cancelBuilding.onClick = () => {\n            this.publishEvent(new CancelBuilding())\n        }\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectVehiclePanel extends SelectBasePanel {\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 7, onBackPanel)\n    }\n\n}\n","import { EventKey } from '../../event/EventKeyEnum'\nimport { CancelSurfaceJobs, CreateDrillJob, CreateDynamiteJob, CreateReinforceJob } from '../../event/GuiCommand'\nimport { BuildingsChangedEvent, SelectionChanged } from '../../event/LocalEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectWallPanel extends SelectBasePanel {\n\n    isDrillable: boolean = false\n    isHardDrillable: boolean = false\n    isReinforcable: boolean = false\n    numToolstationsLevel2: number = 0\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 4, onBackPanel)\n        const itemDrill = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Dig')\n        itemDrill.isDisabled = () => !this.isDrillable && !this.isHardDrillable // TODO implement vehicle check for drill hard skill\n        itemDrill.onClick = () => this.publishEvent(new CreateDrillJob())\n        const itemReinforce = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Reinforce')\n        itemReinforce.isDisabled = () => !this.isReinforcable\n        itemReinforce.onClick = () => this.publishEvent(new CreateReinforceJob())\n        const itemDynamite = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Dynamite')\n        itemDynamite.isDisabled = () => this.numToolstationsLevel2 < 1\n        itemDynamite.onClick = () => this.publishEvent(new CreateDynamiteJob())\n        const itemDeselect = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeselectDig')\n        itemDeselect.isDisabled = () => false\n        itemDeselect.onClick = () => this.publishEvent(new CancelSurfaceJobs())\n        this.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            this.isDrillable = event.isDrillable\n            this.isHardDrillable = event.isDrillableHard\n            this.isReinforcable = event.isReinforcable\n            this.updateAllButtonStates()\n        })\n        this.registerEventListener(EventKey.BUILDINGS_CHANGED, (event: BuildingsChangedEvent) => {\n            this.numToolstationsLevel2 = BuildingsChangedEvent.countUsable(event, EntityType.TOOLSTATION, 2)\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.isDrillable = false\n        this.isHardDrillable = false\n        this.isReinforcable = false\n        this.numToolstationsLevel2 = 0\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class SmallVehiclePanel extends IconSubPanel {\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 6, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Hoverboard')\n        this.addMenuItem('InterfaceBuildImages', 'SmallDigger')\n        this.addMenuItem('InterfaceBuildImages', 'SmallTruck')\n        this.addMenuItem('InterfaceBuildImages', 'SmallCat')\n        this.addMenuItem('InterfaceBuildImages', 'SmallMLP')\n        this.addMenuItem('InterfaceBuildImages', 'SmallHeli')\n    }\n\n}\n","import { EventKey } from '../../event/EventKeyEnum'\nimport { TrainRaider } from '../../event/GuiCommand'\nimport { SelectionChanged } from '../../event/LocalEvents'\nimport { RaiderTraining } from '../../game/model/raider/RaiderTraining'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class TrainRaiderPanel extends IconSubPanel {\n\n    canDoTraining: Map<RaiderTraining, boolean> = new Map()\n\n    constructor(parent: BaseElement, onBackPanel: Panel) {\n        super(parent, 6, onBackPanel)\n        this.addTrainingItem('Interface_MenuItem_TrainDriver', RaiderTraining.DRIVER)\n        this.addTrainingItem('Interface_MenuItem_TrainEngineer', RaiderTraining.ENGINEER)\n        this.addTrainingItem('Interface_MenuItem_TrainGeologist', RaiderTraining.GEOLOGIST)\n        this.addTrainingItem('Interface_MenuItem_TrainPilot', RaiderTraining.PILOT)\n        this.addTrainingItem('Interface_MenuItem_TrainSailor', RaiderTraining.SAILOR)\n        this.addTrainingItem('Interface_MenuItem_TrainDynamite', RaiderTraining.DEMOLITION)\n        this.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            this.canDoTraining = event.canDoTraining\n        })\n    }\n\n    private addTrainingItem(itemKey: string, training: RaiderTraining) {\n        const trainingItem = this.addMenuItem('InterfaceImages', itemKey)\n        trainingItem.isDisabled = () => !this.canDoTraining.get(training)\n        trainingItem.onClick = () => this.publishEvent(new TrainRaider(training))\n    }\n\n    reset() {\n        super.reset()\n        this.canDoTraining = new Map()\n    }\n\n}\n","import { EventKey } from '../../event/EventKeyEnum'\nimport { ChangeRaiderSpawnRequest } from '../../event/GuiCommand'\nimport { BuildingsChangedEvent, RaidersChangedEvent, SelectionChanged } from '../../event/LocalEvents'\nimport { RequestedRaidersChanged } from '../../event/WorldEvents'\nimport { EntityType } from '../../game/model/EntityType'\nimport { SelectionType } from '../../game/model/Selectable'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, MAX_RAIDER_REQUEST } from '../../params'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { BuildingPanel } from './BuildingPanel'\nimport { GetToolPanel } from './GetToolPanel'\nimport { IconPanelButtonLabel } from './IconPanelButtonLabel'\nimport { IconSubPanel } from './IconSubPanel'\nimport { LargeVehiclePanel } from './LargeVehiclePanel'\nimport { SelectBuildingPanel } from './SelectBuildingPanel'\nimport { SelectFloorPanel } from './SelectFloorPanel'\nimport { SelectRaiderPanel } from './SelectRaiderPanel'\nimport { SelectRubblePanel } from './SelectRubblePanel'\nimport { SelectSitePanel } from './SelectSitePanel'\nimport { SelectVehiclePanel } from './SelectVehiclePanel'\nimport { SelectWallPanel } from './SelectWallPanel'\nimport { SmallVehiclePanel } from './SmallVehiclePanel'\nimport { TrainRaiderPanel } from './TrainRaiderPanel'\n\nexport class MainPanel extends Panel {\n\n    subPanels: IconSubPanel[] = []\n    mainPanel: IconSubPanel // don't use root itself, since sub panel must be decoupled from (animated) main panel position\n    selectWallPanel: SelectWallPanel\n    selectFloorPanel: SelectFloorPanel\n    selectRubblePanel: SelectRubblePanel\n    selectSitePanel: SelectSitePanel\n\n    numRequestedRaiders: number = 0\n    numToolstations: number = 0\n    numTeleportPads: number = 0\n    numBarracks: number = 0\n    numRaiders: number = 0\n\n    constructor(parent: BaseElement) {\n        super(parent)\n        this.relX = this.xOut = 640 - 16\n        this.xIn = 640 + 95\n        this.relY = this.yOut = this.yIn = 9\n        this.movedIn = false\n        this.mainPanel = this.addSubPanel(new IconSubPanel(this, 4))\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n\n        const buildingPanel = this.addSubPanel(new BuildingPanel(this, this.mainPanel))\n        const smallVehiclePanel = this.addSubPanel(new SmallVehiclePanel(this, this.mainPanel))\n        const largeVehiclePanel = this.addSubPanel(new LargeVehiclePanel(this, this.mainPanel))\n        this.selectWallPanel = this.addSubPanel(new SelectWallPanel(this, this.mainPanel))\n        this.selectFloorPanel = this.addSubPanel(new SelectFloorPanel(this, this.mainPanel))\n        this.selectRubblePanel = this.addSubPanel(new SelectRubblePanel(this, this.mainPanel))\n        this.selectSitePanel = this.addSubPanel(new SelectSitePanel(this, this.mainPanel))\n        const selectBuildingPanel = this.addSubPanel(new SelectBuildingPanel(this, this.mainPanel))\n        const selectRaiderPanel = this.addSubPanel(new SelectRaiderPanel(this, this.mainPanel))\n        const trainRaiderPanel = this.addSubPanel(new TrainRaiderPanel(this, selectRaiderPanel))\n        selectRaiderPanel.trainItem.onClick = () => selectRaiderPanel.toggleState(() => trainRaiderPanel.toggleState())\n        const getToolPanel = this.addSubPanel(new GetToolPanel(this, selectRaiderPanel))\n        selectRaiderPanel.getToolItem.onClick = () => selectRaiderPanel.toggleState(() => getToolPanel.toggleState())\n        const selectVehiclePanel = this.addSubPanel(new SelectVehiclePanel(this, this.mainPanel))\n        const teleportRaider = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_TeleportMan')\n        teleportRaider.isDisabled = () => this.numRaiders >= this.getMaxRaiders() || this.numRequestedRaiders >= MAX_RAIDER_REQUEST ||\n            (this.numToolstations < 1 && this.numTeleportPads < 1)\n        teleportRaider.updateState()\n        teleportRaider.onClick = () => this.publishEvent(new ChangeRaiderSpawnRequest(true))\n        // TODO add decrease requested raider spawn option (needs right click for gui elements)\n        teleportRaider.addChild(new IconPanelButtonLabel(teleportRaider))\n        this.registerEventListener(EventKey.REQUESTED_RAIDERS_CHANGED, (event: RequestedRaidersChanged) => {\n            this.numRequestedRaiders = event.numRequestedRaiders\n            teleportRaider.updateState()\n        })\n        const buildingItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildBuilding')\n        buildingItem.isDisabled = () => false\n        buildingItem.onClick = () => this.mainPanel.toggleState(() => buildingPanel.toggleState())\n        const smallVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildSmallVehicle')\n        smallVehicleItem.isDisabled = () => false\n        smallVehicleItem.onClick = () => this.mainPanel.toggleState(() => smallVehiclePanel.toggleState())\n        const largeVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildLargeVehicle')\n        largeVehicleItem.isDisabled = () => false\n        largeVehicleItem.onClick = () => this.mainPanel.toggleState(() => largeVehiclePanel.toggleState())\n        this.registerEventListener(EventKey.SELECTION_CHANGED, (event: SelectionChanged) => {\n            if (event.selectionType === SelectionType.NOTHING) this.selectSubPanel(this.mainPanel)\n            else if (event.selectionType === SelectionType.BUILDING) this.selectSubPanel(selectBuildingPanel)\n            else if (event.selectionType === SelectionType.RAIDER || event.selectionType === SelectionType.GROUP) this.selectSubPanel(selectRaiderPanel)\n            else if (event.selectionType === SelectionType.VEHICLE) this.selectSubPanel(selectVehiclePanel)\n            else if (event.selectionType === SelectionType.SURFACE) this.onSelectedSurfaceChange(event.isFloor, event.isSite, event.hasRubble)\n        })\n        this.registerEventListener(EventKey.BUILDINGS_CHANGED, (event: BuildingsChangedEvent) => {\n            this.numToolstations = BuildingsChangedEvent.countUsable(event, EntityType.TOOLSTATION)\n            this.numTeleportPads = BuildingsChangedEvent.countUsable(event, EntityType.TELEPORT_PAD)\n            this.numBarracks = BuildingsChangedEvent.countUsable(event, EntityType.BARRACKS)\n            teleportRaider.updateState()\n        })\n        this.registerEventListener(EventKey.RAIDERS_CHANGED, (event: RaidersChangedEvent) => {\n            this.numRaiders = event.numRaiders\n            teleportRaider.updateState()\n        })\n    }\n\n    getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + this.numBarracks * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    reset() {\n        super.reset()\n        this.relX = this.xOut\n        this.relY = this.yOut\n        this.movedIn = false\n        this.updatePosition()\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n        this.mainPanel.updatePosition()\n        this.numRequestedRaiders = 0\n        this.numToolstations = 0\n        this.numTeleportPads = 0\n        this.numBarracks = 0\n        this.numRaiders = 0\n    }\n\n    addSubPanel<T extends IconSubPanel>(childPanel: T): T {\n        this.addChild(childPanel)\n        this.subPanels.push(childPanel)\n        return childPanel\n    }\n\n    selectSubPanel(targetPanel: IconSubPanel) {\n        this.subPanels.forEach((subPanel) => subPanel !== targetPanel && subPanel.setMovedIn(true))\n        targetPanel.setMovedIn(false)\n    }\n\n    onSelectedSurfaceChange(isFloor: boolean, isSite: boolean, hasRubble: boolean) {\n        if (isFloor) {\n            if (hasRubble) {\n                this.selectSubPanel(this.selectRubblePanel)\n            } else if (isSite) {\n                this.selectSubPanel(this.selectSitePanel)\n            } else {\n                this.selectSubPanel(this.selectFloorPanel)\n            }\n        } else {\n            this.selectSubPanel(this.selectWallPanel)\n        }\n    }\n\n}\n","export enum PriorityIdentifier {\n\n    aiPriorityTrain,\n    aiPriorityGetIn,\n    aiPriorityCrystal,\n    aiPriorityOre,\n    aiPriorityRepair,\n    aiPriorityClearing,\n    aiPriorityDestruction,\n    aiPriorityConstruction,\n    aiPriorityReinforce,\n    aiPriorityRecharge,\n\n}\n","import { Sample } from '../../audio/Sample'\nimport { BitmapFont } from '../../core/BitmapFont'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\n\nexport class TextInfoMessage {\n\n    infoImage: SpriteImage\n    textImage: SpriteImage\n    sfxSample: Sample\n\n    constructor(font: BitmapFont, infoMessageEntryConfig: TextInfoMessageEntryConfig, maxWidth: number) {\n        this.textImage = font.createTextImage(infoMessageEntryConfig.text, maxWidth)\n        this.infoImage = GuiResourceCache.getImageOrNull(infoMessageEntryConfig.imageFilename)\n        this.sfxSample = Sample[infoMessageEntryConfig.sfxName]\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { AirLevelChanged, PlaySoundEvent, RaidersChangedEvent } from '../../event/LocalEvents'\nimport { BaseElement } from '../base/BaseElement'\nimport { Panel } from '../base/Panel'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { TextInfoMessage } from './TextInfoMessage'\nimport { TextInfoMessageConfig } from './TextInfoMessageConfig'\n\nexport class MessagePanel extends Panel {\n\n    imgAir: SpriteImage = null\n    currentMessage: TextInfoMessage = null\n    messageTimeout = null\n\n    msgSpaceToContinue: TextInfoMessage\n    msgAirSupplyLow: TextInfoMessage\n    msgAirSupplyRunningOut: TextInfoMessage\n    msgGameCompleted: TextInfoMessage\n    msgManTrained: TextInfoMessage\n    msgUnitUpgraded: TextInfoMessage\n\n    airLevel: number = 1\n\n    constructor(parent: BaseElement, panelCfg: PanelCfg, textInfoMessageConfig: TextInfoMessageConfig) {\n        super(parent, panelCfg)\n        this.relX = this.xOut = this.xIn = 42\n        this.relY = this.yOut = this.yIn = 409\n        this.imgAir = GuiResourceCache.getImage('Interface/Airmeter/msgpanel_air_juice.bmp')\n\n        const font = GuiResourceCache.getDefaultFont()\n        const crystalFound = new TextInfoMessage(font, textInfoMessageConfig.textCrystalFound, this.img.width)\n        this.registerEventListener(EventKey.LOCATION_CRYSTAL_FOUND, () => this.setMessage(crystalFound))\n        this.msgSpaceToContinue = new TextInfoMessage(font, textInfoMessageConfig.textSpaceToContinue, this.img.width)\n        const cavernDiscovered = new TextInfoMessage(font, textInfoMessageConfig.textCavernDiscovered, this.img.width)\n        this.registerEventListener(EventKey.CAVERN_DISCOVERED, () => this.setMessage(cavernDiscovered))\n        const oreFound = new TextInfoMessage(font, textInfoMessageConfig.textOreFound, this.img.width)\n        this.registerEventListener(EventKey.ORE_FOUND, () => this.setMessage(oreFound))\n        this.msgAirSupplyLow = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyLow, this.img.width)\n        this.msgAirSupplyRunningOut = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyRunningOut, this.img.width)\n        this.msgGameCompleted = new TextInfoMessage(font, textInfoMessageConfig.textGameCompleted, this.img.width)\n        this.msgManTrained = new TextInfoMessage(font, textInfoMessageConfig.textManTrained, this.img.width)\n        this.registerEventListener(EventKey.RAIDERS_CHANGED, (event: RaidersChangedEvent) => event.training && this.setMessage(this.msgManTrained))\n        this.msgUnitUpgraded = new TextInfoMessage(font, textInfoMessageConfig.textUnitUpgraded, this.img.width)\n        this.registerEventListener(EventKey.AIR_LEVEL_CHANGED, () => this.notifyRedraw())\n        this.registerEventListener(EventKey.AIR_LEVEL_CHANGED, (event: AirLevelChanged) => {\n            this.airLevel = event.airLevel\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.airLevel = 1\n    }\n\n    setMessage(textInfoMessage: TextInfoMessage, timeout: number = 3000) {\n        this.messageTimeout = clearTimeoutSafe(this.messageTimeout)\n        this.currentMessage = textInfoMessage\n        this.notifyRedraw()\n        if (textInfoMessage.sfxSample) this.publishEvent(new PlaySoundEvent(textInfoMessage.sfxSample))\n        if (timeout) {\n            const that = this\n            this.messageTimeout = setTimeout(() => {\n                that.currentMessage = null\n                that.notifyRedraw()\n            }, timeout)\n        }\n    }\n\n    unsetMessage(textInfoMessage: TextInfoMessage) {\n        if (this.currentMessage === textInfoMessage) {\n            this.currentMessage = null\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: SpriteContext) {\n        super.onRedraw(context)\n        if (this.airLevel > 0) {\n            const width = Math.round(236 * Math.min(1, this.airLevel))\n            context.drawImage(this.imgAir, this.x + 85, this.y + 6, width, 8)\n        }\n        const textImage = this.currentMessage?.textImage\n        const infoImage = this.currentMessage?.infoImage\n        if (textImage) {\n            const txtX = this.x + (this.img.width - textImage.width - (infoImage ? infoImage.width : 0)) / 2\n            context.drawImage(textImage, txtX, this.y + 26)\n        }\n        if (infoImage) {\n            const infoX = this.x + this.img.width - infoImage.width\n            context.drawImage(infoImage, infoX, this.y + 16)\n        }\n    }\n\n}\n","export class TextInfoMessageEntryConfig {\n\n    text: string\n    imageFilename: string\n    sfxName: string\n\n    textImage\n    infoImage\n\n    constructor(cfgValue: any) {\n        [this.text, this.imageFilename, this.sfxName] = cfgValue\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\n\nexport class TextInfoMessageConfig extends BaseConfig {\n\n    textCrystalFound: TextInfoMessageEntryConfig = null\n    textSpaceToContinue: TextInfoMessageEntryConfig = null\n    textCavernDiscovered: TextInfoMessageEntryConfig = null\n    textOreFound: TextInfoMessageEntryConfig = null\n    textAirSupplyLow: TextInfoMessageEntryConfig = null\n    textAirSupplyRunningOut: TextInfoMessageEntryConfig = null\n    textGameCompleted: TextInfoMessageEntryConfig = null\n    textManTrained: TextInfoMessageEntryConfig = null\n    textUnitUpgraded: TextInfoMessageEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new TextInfoMessageEntryConfig(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\n\nexport class PriorityButtonsConfig extends BaseConfig {\n\n    aiPriorityTrain: ButtonCfg = null\n    aiPriorityGetIn: ButtonCfg = null\n    aiPriorityCrystal: ButtonCfg = null\n    aiPriorityOre: ButtonCfg = null\n    aiPriorityRepair: ButtonCfg = null\n    aiPriorityClearing: ButtonCfg = null\n    aiPriorityDestruction: ButtonCfg = null\n    aiPriorityConstruction: ButtonCfg = null\n    aiPriorityReinforce: ButtonCfg = null\n    aiPriorityRecharge: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): ButtonCfg {\n        return {\n            buttonType: cfgValue[0],\n            normalFile: cfgValue[1],\n            highlightFile: cfgValue[1],\n            pressedFile: cfgValue[2],\n            disabledFile: cfgValue[3],\n        }\n    }\n\n}\n","import { LevelPrioritiesEntryConfig } from '../../../cfg/LevelsCfg'\nimport { PublicJob } from './Job'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport class PriorityList {\n\n    levelDefault: PriorityEntry[] = []\n    current: PriorityEntry[] = []\n\n    setList(priorities: PriorityEntry[]) {\n        this.levelDefault = priorities\n        this.reset()\n    }\n\n    toggle(index: number) {\n        this.current[index].enabled = !this.current[index].enabled\n    }\n\n    upOne(index: number) {\n        const tmp = this.current[index]\n        this.current[index] = this.current[index + 1]\n        this.current[index + 1] = tmp\n    }\n\n    reset() {\n        this.current = this.levelDefault.map(entry => new PriorityEntry(entry)) // use deep copy to avoid interference\n    }\n\n    pushToTop(index: number) {\n        const element = this.current[index]\n        for (let c = index; c > 0; c--) {\n            this.current[c] = this.current[c - 1]\n        }\n        this.current[0] = element\n    }\n\n    getPriority(job: PublicJob) {\n        let priority = 0\n        this.current.some((j, index) => {\n            if (j.key === job.getPriorityIdentifier()) {\n                priority = index\n                return true\n            }\n        })\n        return priority\n    }\n\n    isEnabled(priorityIdentifier: PriorityIdentifier): boolean {\n        return this.current.find((entry) => entry.key === priorityIdentifier)?.enabled || false\n    }\n}\n\nexport class PriorityEntry {\n\n    key: PriorityIdentifier\n    enabled: boolean\n\n    constructor(levelPriorityEntry: LevelPrioritiesEntryConfig) {\n        this.key = levelPriorityEntry.key\n        this.enabled = levelPriorityEntry.enabled\n    }\n\n}\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { ChangePriorityList } from '../../event/GuiCommand'\nimport { SetupPriorityList } from '../../event/LocalEvents'\nimport { PriorityIdentifier } from '../../game/model/job/PriorityIdentifier'\nimport { PriorityEntry, PriorityList } from '../../game/model/job/PriorityList'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { ButtonPriorityListCfg } from './ButtonPriorityListCfg'\nimport { PriorityButtonsConfig } from './PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from './PriorityPositionsEntry'\n\nexport class PriorityListPanel extends Panel {\n\n    prioPositions: PriorityPositionsEntry[] = []\n    prioByName: Map<PriorityIdentifier, Button> = new Map()\n\n    priorityList: PriorityList = new PriorityList()\n\n    constructor(parent: BaseElement, panelCfg: PanelCfg, buttonsCfg: ButtonPriorityListCfg, pos: PriorityPositionsEntry[], cfg: PriorityButtonsConfig) {\n        super(parent, panelCfg)\n        buttonsCfg.panelButtonPriorityListDisable.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                this.priorityList.toggle(index)\n                this.publishEvent(new ChangePriorityList(this.priorityList.current))\n            }\n        })\n        buttonsCfg.panelButtonPriorityListUpOne.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                this.priorityList.upOne(index)\n                this.publishEvent(new ChangePriorityList(this.priorityList.current))\n            }\n        })\n        this.addChild(new Button(this, buttonsCfg.panelButtonPriorityListReset)).onClick = () => {\n            this.priorityList.reset()\n            this.publishEvent(new ChangePriorityList(this.priorityList.current))\n        }\n\n        this.prioPositions = pos\n        this.prioByName.set(PriorityIdentifier.aiPriorityTrain, this.addChild(new Button(this, cfg.aiPriorityTrain)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityGetIn, this.addChild(new Button(this, cfg.aiPriorityGetIn)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityCrystal, this.addChild(new Button(this, cfg.aiPriorityCrystal)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityOre, this.addChild(new Button(this, cfg.aiPriorityOre)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityRepair, this.addChild(new Button(this, cfg.aiPriorityRepair)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityClearing, this.addChild(new Button(this, cfg.aiPriorityClearing)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityDestruction, this.addChild(new Button(this, cfg.aiPriorityDestruction)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityConstruction, this.addChild(new Button(this, cfg.aiPriorityConstruction)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityReinforce, this.addChild(new Button(this, cfg.aiPriorityReinforce)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityRecharge, this.addChild(new Button(this, cfg.aiPriorityRecharge)))\n        this.registerEventListener(EventKey.SETUP_PRIORITY_LIST, (event: SetupPriorityList) => {\n            this.setList(event.priorityList)\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.priorityList.reset()\n    }\n\n    private setList(priorityList: PriorityEntry[]) {\n        this.priorityList.setList(priorityList)\n        this.prioByName.forEach((btn) => btn.hidden = true)\n        let index = 0\n        let updated = false\n        priorityList.forEach(cfg => {\n            const prioButton: Button = this.prioByName.get(cfg.key)\n            if (prioButton) {\n                updated = updated || prioButton.hidden || prioButton.disabled !== !cfg.enabled\n                prioButton.hidden = false\n                prioButton.disabled = !cfg.enabled\n                prioButton.relX = this.prioPositions[index].x\n                prioButton.relY = this.prioPositions[index].y\n                prioButton.updatePosition()\n                const btnIndex = index\n                prioButton.onClick = () => {\n                    this.priorityList.pushToTop(btnIndex)\n                    this.publishEvent(new ChangePriorityList(this.priorityList.current))\n                }\n                index++\n            }\n        })\n        if (updated) this.notifyRedraw()\n    }\n\n}\n\n","export class PriorityPositionsEntry {\n\n    x: number\n    y: number\n\n    constructor(cfgValue: any) {\n        [this.x, this.y] = cfgValue\n    }\n\n}\n","import { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { BaseElement } from './BaseElement'\nimport { Button } from './Button'\n\nexport class ToggleButton extends Button {\n\n    toggleState: boolean = false\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent, btnCfg)\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = (this.pressed && this.hover) || this.toggleState\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => updated = child.checkHover(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const isPressed = this.isInRect(cx, cy) || this.toggleState\n        let updated = this.pressed !== isPressed\n        this.pressed = isPressed\n        this.children.forEach((child) => updated = child.checkClick(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = inRect && this.pressed\n        if (updated) {\n            this.clicked()\n            this.pressed = updated && this.toggleState\n            this.hover = inRect\n        }\n        this.children.forEach((child) => updated = child.checkRelease(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    clicked() {\n        this.toggleState = !this.toggleState\n        super.clicked()\n    }\n\n    release(): boolean {\n        return false\n    }\n\n}\n\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { ToggleButton } from '../base/ToggleButton'\nimport { ButtonTopCfg } from './ButtonTopCfg'\n\nexport class TopPanel extends Panel {\n\n    btnCallToArms: ToggleButton\n    btnOptions: Button\n    btnPriorities: ToggleButton\n\n    constructor(parent: BaseElement, panelCfg: PanelCfg, buttonsCfg: ButtonTopCfg) {\n        super(parent, panelCfg)\n        this.btnCallToArms = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelCallToArms))\n        this.btnOptions = this.addChild(new Button(this, buttonsCfg.panelButtonTopPanelOptions))\n        this.btnPriorities = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelPriorities))\n    }\n\n}\n\n","import { ButtonsCfg } from '../cfg/ButtonsCfg'\nimport { PanelsCfg } from '../cfg/PanelsCfg'\nimport { Panel } from '../gui/base/Panel'\nimport { GuiResourceCache } from '../gui/GuiResourceCache'\nimport { InfoDockPanel } from '../gui/infodock/InfoDockPanel'\nimport { InfoMessagesConfig } from '../gui/infodock/InfoMessagesConfig'\nimport { InformationPanel } from '../gui/infodock/InformationPanel'\nimport { MainPanel } from '../gui/main/MainPanel'\nimport { MessagePanel } from '../gui/messagepanel/MessagePanel'\nimport { TextInfoMessageConfig } from '../gui/messagepanel/TextInfoMessageConfig'\nimport { RadarPanel } from '../gui/radar/RadarPanel'\nimport { PanelCrystalSideBar } from '../gui/sidebar/PanelCrystalSideBar'\nimport { PriorityButtonsConfig } from '../gui/toppanel/PriorityButtonsConfig'\nimport { PriorityListPanel } from '../gui/toppanel/PriorityListPanel'\nimport { PriorityPositionsEntry } from '../gui/toppanel/PriorityPositionsEntry'\nimport { TopPanel } from '../gui/toppanel/TopPanel'\nimport { WorkerMessageType } from '../resource/wadworker/WorkerMessageType'\nimport { GuiWorker } from './GuiWorker'\nimport { GuiWorkerMessage } from './GuiWorkerMessage'\n\nexport class GuiMainWorker extends GuiWorker {\n\n    panelRadar: RadarPanel\n    panelMessages: MessagePanel\n    panelMessagesSide: Panel\n    panelCrystalSideBar: PanelCrystalSideBar\n    panelMain: MainPanel\n    panelTopPanel: TopPanel\n    panelInformation: InformationPanel\n    panelPriorityList: PriorityListPanel\n    panelCameraControl: Panel\n    panelInfoDock: InfoDockPanel\n    panelEncyclopedia: Panel\n\n    constructor(worker: Worker) {\n        super(worker)\n        const panelsCfg = new PanelsCfg(GuiResourceCache.cfg('Panels640x480'))\n        const buttonsCfg = new ButtonsCfg(GuiResourceCache.cfg('Buttons640x480'))\n        // created in reverse order compared to cfg, earlier in cfg means higher z-value // TODO add some z layering at least to panels\n        this.panelEncyclopedia = this.addPanel(new Panel(this.rootElement, panelsCfg.panelEncyclopedia))\n        this.panelInformation = this.addPanel(new InformationPanel(this.rootElement, panelsCfg.panelInformation))\n        this.panelInfoDock = this.addPanel(new InfoDockPanel(this.rootElement, panelsCfg.panelInfoDock, buttonsCfg.panelInfoDock, new InfoMessagesConfig(GuiResourceCache.cfg('InfoMessages')), this.panelInformation))\n        this.panelCameraControl = this.addPanel(new Panel(this.rootElement, panelsCfg.panelCameraControl))\n        const priorityButtonsConfig = new PriorityButtonsConfig(GuiResourceCache.cfg('PriorityImages'))\n        const priorityPositionsConfig = Object.values(GuiResourceCache.cfg('PrioritiesImagePositions')).map(cfgValue => new PriorityPositionsEntry(cfgValue))\n        this.panelPriorityList = this.addPanel(new PriorityListPanel(this.rootElement, panelsCfg.panelPriorityList, buttonsCfg.panelPriorityList, priorityPositionsConfig, priorityButtonsConfig))\n        this.panelTopPanel = this.addPanel(new TopPanel(this.rootElement, panelsCfg.panelTopPanel, buttonsCfg.panelTopPanel))\n        this.panelMain = this.addPanel(new MainPanel(this.rootElement))\n        this.panelCrystalSideBar = this.addPanel(new PanelCrystalSideBar(this.rootElement, panelsCfg.panelCrystalSideBar, buttonsCfg.panelCrystalSideBar))\n        this.panelMessagesSide = this.addPanel(new Panel(this.rootElement, panelsCfg.panelMessagesSide))\n        this.panelMessages = this.addPanel(new MessagePanel(this.rootElement, panelsCfg.panelMessages, new TextInfoMessageConfig(GuiResourceCache.cfg('TextMessagesWithImages'))))\n        this.panelRadar = this.addPanel(new RadarPanel(this.rootElement, panelsCfg.panelRadar, panelsCfg.panelRadarFill, panelsCfg.panelRadarOverlay, buttonsCfg.panelRadar))\n        // link panels\n        this.panelTopPanel.btnOptions.onClick = () => {\n            this.sendResponse({type: WorkerMessageType.SHOW_OPTIONS})\n        }\n        this.panelTopPanel.btnPriorities.onClick = () => {\n            if (this.panelTopPanel.btnPriorities.toggleState) {\n                this.panelMain.setMovedIn(true, () => this.panelPriorityList.setMovedIn(false))\n            } else {\n                this.panelPriorityList.setMovedIn(true, () => this.panelMain.setMovedIn(false))\n            }\n        }\n    }\n\n    onProcessMessage(msg: GuiWorkerMessage): boolean {\n        if (msg.type === WorkerMessageType.SPACE_TO_CONINUE) {\n            if (msg.messageState) {\n                this.panelMessages.setMessage(this.panelMessages.msgSpaceToContinue, 0)\n            } else {\n                this.panelMessages.unsetMessage(this.panelMessages.msgSpaceToContinue)\n            }\n        } else {\n            return false\n        }\n        return true\n    }\n\n}\n\nlet workerInstance: GuiWorker = null\n\nconst worker: Worker = self as any\n\nworker.addEventListener('message', (event) => {\n    const msg: GuiWorkerMessage = event.data\n    if (msg.type === WorkerMessageType.INIT) {\n        GuiResourceCache.resourceByName = msg.resourceByName\n        GuiResourceCache.configuration = msg.cfg\n        GuiResourceCache.stats = msg.stats\n        workerInstance = new GuiMainWorker(worker)\n    } else {\n        workerInstance.processMessage(msg)\n    }\n})\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [529,969], () => (__webpack_require__(298)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".index.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t294: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkrock_raiders_web\"] = self[\"webpackChunkrock_raiders_web\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"sourceRoot":""}