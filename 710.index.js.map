{"version":3,"sources":["webpack://rock-raiders-web/./src/cfg/BaseButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/BaseConfig.ts","webpack://rock-raiders-web/./src/cfg/PanelCfg.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/gui/GuiResourceCache.ts","webpack://rock-raiders-web/./src/worker/WorkerPublishEvent.ts","webpack://rock-raiders-web/./src/worker/WorkerResponse.ts","webpack://rock-raiders-web/./src/gui/GuiWorker.ts","webpack://rock-raiders-web/./src/worker/OffscreenWorker.ts","webpack://rock-raiders-web/./src/gui/base/BaseElement.ts","webpack://rock-raiders-web/./src/gui/base/Button.ts","webpack://rock-raiders-web/./src/gui/base/Panel.ts"],"names":["BaseButtonCfg","buttonType","normalFile","highlightFile","pressedFile","disabledFile","relX","relY","width","height","tooltip","BaseConfig","config","cfgObj","Object","keys","forEach","cfgKey","lCfgKeyName","startsWith","substring","toLowerCase","replace","some","objKey","assignValue","console","warn","constructor","name","cfgValue","currentValue","this","currentIsArray","Array","isArray","parsedValue","parseValue","parsedIsArray","PanelCfg","filename","xOut","yOut","xIn","yIn","iGet","obj","keyname","filter","key","map","clearTimeoutSafe","timeout","clearTimeout","clearIntervalSafe","interval","clearInterval","prototype","add","element","indexOf","push","remove","index","splice","removeLast","lastIndex","last","length","undefined","count","callback","counter","e","partition","left","right","a","random","max","min","Math","ceil","floor","getRandomInclusive","Map","getOrUpdate","updateCallback","value","get","set","String","equalsIgnoreCase","other","GuiResourceCache","WorkerPublishEvent","type","messageState","gameEvent","super","WorkerMessageType","GuiWorker","worker","canvas","context","eventListener","clearRect","getContext","scale","redraw","event","response","postMessage","sendResponse","msg","setCanvas","consumed","handlePointerEvent","inputEvent","sendEventResponse","eventId","eventConsumed","handleKeyEvent","handleWheelEvent","reset","eventKey","onProcessMessage","rootElement","BaseElement","panels","notifyRedraw","publishEvent","registerEventListener","onRedraw","p","panel","addChild","cx","cy","canvasX","canvasY","sx","sy","c","round","hit","getImageData","data","Cursor","C","eventEnum","checkHover","checkClick","button","checkRelease","release","parent","x","y","children","hidden","disabled","hover","pressedByButton","onClick","onClickSecondary","onPublishEvent","log","tooltipTimeout","child","updatePosition","drawHover","drawTooltip","isInactive","hide","show","inRect","isInRect","stateChanged","setTimeout","showTooltip","oldState","clicked","Button","btnCfg","sfxName","imgNormal","imgHover","imgPressed","imgDisabled","sfxTooltip","img","drawImage","Panel","panelCfg","animationTimeout","movedIn","onDone","toggleState","updateAnimation","targetX","targetY","speed","diffX","diffY","abs","sign","sqrt"],"mappings":"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","file":"710.index.js","sourcesContent":["export class BaseButtonCfg {\n\n    buttonType?: string = null\n    normalFile?: string = null\n    highlightFile?: string = null\n    pressedFile?: string = null\n    disabledFile?: string = null\n    relX?: number = 0\n    relY?: number = 0\n    width?: number = 0\n    height?: number = 0\n    tooltip?: string = null\n}\n","export class BaseConfig {\n\n    static setFromCfg(config: BaseConfig, cfgObj: any) {\n        Object.keys(cfgObj).forEach((cfgKey) => {\n            const lCfgKeyName = (cfgKey.startsWith('!') ? cfgKey.substring(1) : cfgKey)\n                .toLowerCase()\n                .replace(/_/g, '') // Activity_Stand\n                .replace(/-/g, '') // Geo-dome\n            const found = Object.keys(config).some((objKey) => {\n                return config.assignValue(objKey, lCfgKeyName, cfgObj[cfgKey])\n            })\n            if (!found) {\n                console.warn('cfg key: ' + cfgKey + ' does not exist in cfg: ' + config?.constructor?.name)\n            }\n        })\n        return config\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            const currentValue = this[objKey]\n            const currentIsArray = Array.isArray(currentValue)\n            let parsedValue = this.parseValue(lCfgKeyName, cfgValue)\n            const parsedIsArray = Array.isArray(parsedValue)\n            if (currentValue && currentIsArray !== parsedIsArray) {\n                if (currentIsArray) {\n                    parsedValue = [parsedValue]\n                    // } else {\n                    //     console.warn('Array overwrite conflict for key ' + objKey + ' with existing value (' + currentValue + ') and new value (' + parsedValue + ')')\n                }\n            }\n            this[objKey] = parsedValue\n            return true\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return cfgValue\n    }\n\n}\n","export class PanelCfg {\n\n    filename: string\n    xOut: number\n    yOut: number\n    xIn: number\n    yIn: number\n\n    constructor(cfgValue: any) {\n        [this.filename, this.xOut, this.yOut, this.xIn, this.yIn] = cfgValue\n    }\n\n}\n","export function getPath(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '')\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/')\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max)\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2\n}\n\nexport function clearTimeoutSafe(timeout: NodeJS.Timeout) {\n    if (timeout) clearTimeout(timeout)\n    return null\n}\n\nexport function clearIntervalSafe(interval: NodeJS.Timeout) {\n    if (interval) clearInterval(interval)\n    return null\n}\n\ndeclare global {\n\n    interface Array<T> {\n        add(element: T): void\n\n        remove(element: T): void\n\n        removeLast(element: T): void\n\n        last(): T\n\n        count(callback: (element: T) => boolean): number\n\n        partition(filter: (element: T) => boolean): [T[], T[]]\n\n        random(): T\n    }\n\n    interface Map<K, V> {\n        getOrUpdate(key: K, updateCallback: () => V): V\n    }\n\n    interface String {\n        equalsIgnoreCase(other: string): boolean\n    }\n\n}\n\nArray.prototype.add = function <T>(element: T): void {\n    const index = this.indexOf(element)\n    if (index === -1) this.push(element)\n}\n\nArray.prototype.remove = function <T>(element: T): void {\n    const index = this.indexOf(element)\n    if (index !== -1) this.splice(index, 1)\n}\n\nArray.prototype.removeLast = function <T>(element: T): void {\n    const lastIndex = this.indexOf(element)\n    if (lastIndex !== -1) this.splice(lastIndex, 1)\n}\n\nArray.prototype.last = function <T>(): T {\n    return this.length > 0 ? this[this.length - 1] : undefined\n}\n\nArray.prototype.count = function <T>(callback: (element: T) => boolean): number {\n    let counter = 0\n    this.forEach((e) => callback(e) && counter++)\n    return counter\n}\n\nArray.prototype.partition = function <T>(filter: (element: T) => boolean): [T[], T[]] {\n    const left: T[] = [], right: T[] = []\n    this.forEach((a) => filter(a) ? left.push(a) : right.push(a))\n    return [left, right]\n}\n\nArray.prototype.random = function <T>(): T {\n    if (!this.length) return undefined\n    return this[getRandom(this.length - 1)]\n}\n\n// noinspection JSUnusedGlobalSymbols\nMap.prototype.getOrUpdate = function <K, V>(key: K, updateCallback: () => V): V {\n    let value = this.get(key)\n    if (value === undefined) {\n        value = updateCallback()\n        this.set(key, value)\n    }\n    return value\n}\n\nString.prototype.equalsIgnoreCase = function (other: string): boolean {\n    return this.toLowerCase() === other?.toLowerCase()\n}\n","import { ResourceCache } from '../resource/ResourceCache'\n\nexport class GuiResourceCache extends ResourceCache {\n}\n","import { GameEvent } from '../event/GameEvent'\nimport { WorkerMessageType } from '../resource/wadworker/WorkerMessageType'\nimport { WorkerResponse } from './WorkerResponse'\n\nexport class WorkerPublishEvent extends WorkerResponse {\n\n    gameEvent: GameEvent\n\n    constructor(gameEvent: GameEvent) {\n        super(WorkerMessageType.GAME_EVENT)\n        this.gameEvent = gameEvent\n    }\n\n}\n","import { WorkerMessageType } from '../resource/wadworker/WorkerMessageType'\n\nexport class WorkerResponse {\n\n    type: WorkerMessageType\n    messageState?: boolean = null\n\n    constructor(type: WorkerMessageType) {\n        this.type = type\n    }\n\n}\n","import { EventKey } from '../event/EventKeyEnum'\nimport { POINTER_EVENT } from '../event/EventTypeEnum'\nimport { GamePointerEvent } from '../event/GamePointerEvent'\nimport { GameWheelEvent } from '../event/GameWheelEvent'\nimport { ChangeCursor, LocalEvent } from '../event/LocalEvents'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../params'\nimport { Cursor } from '../screen/Cursor'\nimport { OffscreenWorker } from '../worker/OffscreenWorker'\nimport { BaseElement } from './base/BaseElement'\nimport { Panel } from './base/Panel'\n\nexport abstract class GuiWorker extends OffscreenWorker {\n\n    rootElement: BaseElement = new BaseElement(null)\n    panels: Panel[] = []\n\n    protected constructor(worker: Worker) {\n        super(worker)\n        this.rootElement.notifyRedraw = () => this.redraw()\n        this.rootElement.publishEvent = (event: LocalEvent) => {\n            this.publishEvent(event)\n        }\n        this.rootElement.registerEventListener = (eventKey: EventKey, callback: (GameEvent) => any) => {\n            this.registerEventListener(eventKey, callback)\n        }\n    }\n\n    redraw() {\n        super.redraw()\n        this.rootElement.onRedraw(this.context)\n    }\n\n    reset() {\n        super.reset()\n        this.panels.forEach((p) => p.reset())\n    }\n\n    addPanel<T extends Panel>(panel: T): T {\n        this.rootElement.addChild(panel)\n        this.panels.push(panel)\n        return panel\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        const [cx, cy] = [event.canvasX, event.canvasY]\n        const [sx, sy] = [cx / (this.canvas.width / SPRITE_RESOLUTION_WIDTH), cy / (this.canvas.height / SPRITE_RESOLUTION_HEIGHT)]\n            .map((c) => Math.round(c))\n        const hit = this.context && this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n        if (hit) {\n            this.publishEvent(new ChangeCursor(Cursor.Pointer_Standard)) // TODO don't spam so many events?!\n            if (event.eventEnum === POINTER_EVENT.MOVE) {\n                this.rootElement.checkHover(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n                this.rootElement.checkClick(sx, sy, event.button)\n            } else if (event.eventEnum === POINTER_EVENT.UP) {\n                this.rootElement.checkRelease(sx, sy, event.button)\n            }\n        } else if (event.eventEnum === POINTER_EVENT.MOVE) {\n            this.rootElement.release()\n        }\n        return hit\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        return !this.context || this.context.getImageData(event.canvasX, event.canvasY, 1, 1).data[3] > 0\n    }\n\n}\n","import { EventKey } from '../event/EventKeyEnum'\nimport { GameEvent } from '../event/GameEvent'\nimport { GameKeyboardEvent } from '../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../event/GamePointerEvent'\nimport { GameWheelEvent } from '../event/GameWheelEvent'\nimport { IEventHandler } from '../event/IEventHandler'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../params'\nimport { WorkerMessageType } from '../resource/wadworker/WorkerMessageType'\nimport { OffscreenWorkerMessage } from './OffscreenWorkerMessage'\nimport { WorkerEventResponse } from './WorkerEventResponse'\nimport { WorkerPublishEvent } from './WorkerPublishEvent'\nimport { WorkerResponse } from './WorkerResponse'\n\nexport abstract class OffscreenWorker implements IEventHandler {\n\n    worker: Worker\n\n    canvas: OffscreenCanvas = null\n    context: OffscreenCanvasRenderingContext2D = null\n\n    eventListener = new Map<EventKey, ((event: GameEvent) => any)[]>()\n\n    protected constructor(worker: Worker) {\n        this.worker = worker\n    }\n\n    redraw() {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    reset() {\n    }\n\n    setCanvas(canvas: OffscreenCanvas) {\n        this.canvas = canvas\n        this.context = canvas.getContext('2d')\n        this.context.scale(this.canvas.width / SPRITE_RESOLUTION_WIDTH, this.canvas.height / SPRITE_RESOLUTION_HEIGHT)\n        this.redraw()\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        return false\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): boolean {\n        return false\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        return false\n    }\n\n    sendResponse(response: WorkerResponse) {\n        this.worker.postMessage(response)\n    }\n\n    sendEventResponse(response: WorkerEventResponse) {\n        this.sendResponse(response)\n    }\n\n    processMessage(msg: OffscreenWorkerMessage) {\n        if (msg.type === WorkerMessageType.CANVAS) {\n            this.setCanvas(msg.canvas)\n        } else if (msg.type === WorkerMessageType.EVENT_POINTER) {\n            const consumed = this.handlePointerEvent(msg.inputEvent as GamePointerEvent)\n            this.sendEventResponse({\n                type: WorkerMessageType.RESPONSE_EVENT,\n                eventId: msg.eventId,\n                eventConsumed: consumed,\n            })\n        } else if (msg.type === WorkerMessageType.EVENT_KEY) {\n            const consumed = this.handleKeyEvent(msg.inputEvent as GameKeyboardEvent)\n            this.sendEventResponse({\n                type: WorkerMessageType.RESPONSE_EVENT,\n                eventId: msg.eventId,\n                eventConsumed: consumed,\n            })\n        } else if (msg.type === WorkerMessageType.EVENT_WHEEL) {\n            const consumed = this.handleWheelEvent(msg.inputEvent as GameWheelEvent)\n            this.sendEventResponse({\n                type: WorkerMessageType.RESPONSE_EVENT,\n                eventId: msg.eventId,\n                eventConsumed: consumed,\n            })\n        } else if (msg.type === WorkerMessageType.RESET) {\n            this.reset()\n        } else if (msg.type === WorkerMessageType.REDRAW) {\n            this.redraw()\n        } else if (msg.type === WorkerMessageType.GAME_EVENT) {\n            const event = msg.gameEvent\n            this.eventListener.getOrUpdate(event.eventKey, () => []).forEach((callback) => callback(event))\n        } else if (!this.onProcessMessage(msg)) {\n            console.warn('Worker ignores message of type: ' + WorkerMessageType[msg.type])\n        }\n        return true\n    }\n\n    publishEvent(event: GameEvent): void {\n        this.sendResponse(new WorkerPublishEvent(event))\n    }\n\n    registerEventListener(eventKey: EventKey, callback: (GameEvent) => any): void {\n        this.eventListener.getOrUpdate(eventKey, () => []).push(callback)\n    }\n\n    abstract onProcessMessage(msg: OffscreenWorkerMessage): boolean\n\n}\n","import { Sample } from '../../audio/Sample'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { MOUSE_BUTTON } from '../../event/EventTypeEnum'\nimport { ChangeCursor, LocalEvent, PlaySoundEvent } from '../../event/LocalEvents'\nimport { Cursor } from '../../screen/Cursor'\n\nexport class BaseElement {\n\n    parent: BaseElement = null\n    x: number = 0\n    y: number = 0\n    relX: number = 0\n    relY: number = 0\n    width: number = 0\n    height: number = 0\n    children: BaseElement[] = []\n    hidden: boolean = false\n    disabled: boolean = false\n    hover: boolean = false\n    pressedByButton: MOUSE_BUTTON = null\n    onClick: (cx?: number, cy?: number) => any = null\n    onClickSecondary: (cx?: number, cy?: number) => any = null\n    onPublishEvent: (event: LocalEvent) => any = (event) => console.log('TODO publish event: ' + EventKey[event.eventKey])\n    tooltipTimeout = null\n\n    constructor(parent: BaseElement) {\n        this.parent = parent\n    }\n\n    reset() {\n        this.hidden = false\n        this.disabled = false\n        this.hover = false\n        this.pressedByButton = null\n        this.children.forEach((c) => c.reset())\n    }\n\n    addChild<T extends BaseElement>(child: T): T {\n        child.parent = this\n        this.children.push(child)\n        child.updatePosition()\n        return child\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n    drawHover(context: SpriteContext) {\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    drawTooltip(context: SpriteContext) {\n    }\n\n    isInactive(): boolean {\n        for (let parent = this.parent; !!parent; parent = parent.parent) if (parent.isInactive()) return true\n        return this.hidden || this.disabled\n    }\n\n    hide() {\n        this.hidden = true\n        this.children.forEach((child) => child.hide())\n    }\n\n    show() {\n        this.hidden = false\n        this.children.forEach((child) => child.show())\n    }\n\n    updatePosition() {\n        this.x = this.parent ? this.parent.x + this.relX : this.relX\n        this.y = this.parent ? this.parent.y + this.relY : this.relY\n        this.children.forEach((child) => child.updatePosition())\n    }\n\n    isInRect(cx, cy) {\n        return cx >= this.x && cy >= this.y && cx < this.x + this.width && cy < this.y + this.height\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.hover !== inRect\n        this.hover = inRect\n        if (this.hover) {\n            if (!this.tooltipTimeout) this.tooltipTimeout = setTimeout(() => this.showTooltip(), 1000)\n        } else if (this.tooltipTimeout) {\n            clearTimeout(this.tooltipTimeout)\n            this.tooltipTimeout = null\n        }\n        if (!this.hover) this.pressedByButton = null\n        this.children.forEach((child) => stateChanged = child.checkHover(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    showTooltip() {\n    }\n\n    checkClick(cx, cy, button: MOUSE_BUTTON): boolean {\n        if (this.isInactive()) return false\n        const oldState = this.pressedByButton\n        if (this.isInRect(cx, cy)) {\n            if (this.pressedByButton === null && ((button === MOUSE_BUTTON.MAIN && this.onClick) ||\n                (button === MOUSE_BUTTON.SECONDARY && this.onClickSecondary))) {\n                this.pressedByButton = button\n            }\n        } else {\n            this.pressedByButton = null\n        }\n        let stateChanged = this.pressedByButton !== oldState\n        this.children.forEach((child) => stateChanged = child.checkClick(cx, cy, button) || stateChanged)\n        return stateChanged\n    }\n\n    checkRelease(cx, cy, button: MOUSE_BUTTON): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        if (inRect && this.pressedByButton !== null) {\n            this.clicked(cx, cy, button)\n        }\n        let stateChanged = false\n        this.children.forEach((child) => stateChanged = child.checkRelease(cx, cy, button) || stateChanged)\n        stateChanged = this.pressedByButton !== null || stateChanged\n        this.pressedByButton = null\n        return stateChanged\n    }\n\n    clicked(cx: number, cy: number, button: MOUSE_BUTTON) {\n        if (button === MOUSE_BUTTON.MAIN) {\n            if (this.onClick) {\n                this.publishEvent(new ChangeCursor(Cursor.Pointer_Okay, 1000))\n                this.publishEvent(new PlaySoundEvent(Sample.SFX_ButtonPressed))\n                this.onClick(cx, cy)\n            }\n        } else if (button === MOUSE_BUTTON.SECONDARY) {\n            if (this.onClickSecondary) {\n                this.publishEvent(new ChangeCursor(Cursor.Pointer_Okay, 1000))\n                this.publishEvent(new PlaySoundEvent(Sample.SFX_ButtonPressed))\n                this.onClickSecondary(cx, cy)\n            }\n        }\n    }\n\n    release(): boolean {\n        let stateChanged = this.pressedByButton !== null || this.hover\n        this.pressedByButton = null\n        this.hover = false\n        this.children.forEach((child) => stateChanged = child.release() || stateChanged)\n        return stateChanged\n    }\n\n    notifyRedraw() {\n        this.parent?.notifyRedraw()\n    }\n\n    publishEvent(event: LocalEvent) {\n        if (this.parent) this.parent.publishEvent(event)\n        else this.onPublishEvent(event)\n    }\n\n    registerEventListener(eventKey: EventKey, callback: (GameEvent) => any) {\n        this.parent.registerEventListener(eventKey, callback)\n    }\n\n}\n","import { SoundManager } from '../../audio/SoundManager'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { MOUSE_BUTTON } from '../../event/EventTypeEnum'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { BaseElement } from './BaseElement'\n\nexport class Button extends BaseElement {\n\n    buttonType: string = null\n    sfxName: string = null\n    imgNormal: SpriteImage = null\n    imgHover: SpriteImage = null\n    imgPressed: SpriteImage = null\n    imgDisabled: SpriteImage = null\n    tooltip: string = null\n    sfxTooltip: string = null\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent)\n        if (Array.isArray(btnCfg.buttonType)) {\n            [this.buttonType, this.sfxName] = btnCfg.buttonType\n        } else {\n            this.buttonType = btnCfg.buttonType\n        }\n        this.imgNormal = GuiResourceCache.getImageOrNull(btnCfg.normalFile)\n        this.imgHover = GuiResourceCache.getImageOrNull(btnCfg.highlightFile)\n        this.imgPressed = GuiResourceCache.getImageOrNull(btnCfg.pressedFile)\n        this.imgDisabled = GuiResourceCache.getImageOrNull(btnCfg.disabledFile)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width || this.imgNormal?.width || this.imgPressed?.width || this.imgHover?.width\n        this.height = btnCfg.height || this.imgNormal?.height || this.imgPressed?.height || this.imgHover?.height\n        if (Array.isArray(btnCfg.tooltip)) {\n            [this.tooltip, this.sfxTooltip] = btnCfg.tooltip\n        } else {\n            this.tooltip = btnCfg.tooltip\n        }\n        this.tooltip = this.tooltip?.replace(/_/g, ' ')\n        this.updatePosition()\n        this.onClick = () => console.log('button pressed: ' + this.buttonType)\n    }\n\n    showTooltip() {\n        // TODO show tooltip rendering\n        if (this.sfxName) SoundManager.playSound(this.sfxName)\n        if (this.sfxTooltip) SoundManager.playSound(this.sfxTooltip)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy, button: MOUSE_BUTTON): boolean {\n        const stateChanged = super.checkClick(cx, cy, button)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy, button: MOUSE_BUTTON): boolean {\n        const stateChanged = super.checkRelease(cx, cy, button)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled || this.imgPressed || this.imgNormal\n        } else if (this.pressedByButton !== null) {\n            img = this.imgPressed || this.imgNormal\n        } else if (this.hover) {\n            img = this.imgHover || this.imgNormal\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { NATIVE_FRAMERATE, PANEL_ANIMATION_MULTIPLIER } from '../../params'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { BaseElement } from './BaseElement'\n\nexport class Panel extends BaseElement {\n\n    img: SpriteImage = null\n    xOut: number = 0\n    yOut: number = 0\n    xIn: number = 0\n    yIn: number = 0\n    animationTimeout = null\n    movedIn: boolean = true // xIn, yIn is the collapsed position out of screen\n\n    constructor(parent: BaseElement, panelCfg?: PanelCfg) {\n        super(parent)\n        if (panelCfg) {\n            this.img = GuiResourceCache.getImage(panelCfg.filename)\n            this.xOut = panelCfg.xOut\n            this.yOut = panelCfg.yOut\n            this.xIn = panelCfg.xIn\n            this.yIn = panelCfg.yIn\n            this.relX = this.xIn\n            this.relY = this.yIn\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.relX = this.xIn\n        this.relY = this.yIn\n        this.movedIn = true\n        this.updatePosition()\n    }\n\n    isInactive(): boolean {\n        return this.animationTimeout || super.isInactive()\n    }\n\n    setMovedIn(movedIn: boolean, onDone: () => any = null) {\n        if (this.movedIn !== movedIn) {\n            this.toggleState(onDone)\n        } else if (onDone) {\n            onDone()\n        }\n    }\n\n    toggleState(onDone: () => any = null) {\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        if (this.movedIn) {\n            this.movedIn = false\n            this.updateAnimation(this.xOut, this.yOut, PANEL_ANIMATION_MULTIPLIER, onDone)\n        } else {\n            this.movedIn = true\n            this.updateAnimation(this.xIn, this.yIn, PANEL_ANIMATION_MULTIPLIER, onDone)\n        }\n    }\n\n    protected updateAnimation(targetX: number, targetY: number, speed: number, onDone: () => any) {\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= speed && Math.abs(diffY) <= speed) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * speed)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * speed)\n            const panel = this\n            this.animationTimeout = setTimeout(() => panel.updateAnimation(targetX, targetY, speed, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        if (this.img) context.drawImage(this.img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n"],"sourceRoot":""}