{"version":3,"sources":["webpack://rock-raiders-web/./src/cfg/BaseButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/BaseConfig.ts","webpack://rock-raiders-web/./src/cfg/PanelCfg.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/gui/GuiResourceCache.ts","webpack://rock-raiders-web/./src/worker/WorkerPublishEvent.ts","webpack://rock-raiders-web/./src/worker/WorkerResponse.ts","webpack://rock-raiders-web/./src/gui/GuiWorker.ts","webpack://rock-raiders-web/./src/worker/OffscreenWorker.ts","webpack://rock-raiders-web/./src/gui/base/BaseElement.ts","webpack://rock-raiders-web/./src/gui/base/Button.ts","webpack://rock-raiders-web/./src/gui/base/Panel.ts"],"names":["BaseButtonCfg","buttonType","normalFile","highlightFile","pressedFile","disabledFile","relX","relY","width","height","tooltip","BaseConfig","config","cfgObj","Object","keys","forEach","cfgKey","lCfgKeyName","startsWith","substring","toLowerCase","replace","some","objKey","assignValue","console","warn","constructor","name","cfgValue","currentValue","this","currentIsArray","Array","isArray","parsedValue","parseValue","parsedIsArray","PanelCfg","filename","xOut","yOut","xIn","yIn","iGet","obj","keyname","filter","key","map","clearTimeoutSafe","timeout","clearTimeout","clearIntervalSafe","interval","clearInterval","prototype","add","element","indexOf","push","remove","index","splice","last","length","undefined","count","callback","counter","e","partition","left","right","a","random","max","min","Math","ceil","floor","getRandomInclusive","Map","getOrUpdate","updateCallback","value","get","set","String","equalsIgnoreCase","other","GuiResourceCache","WorkerPublishEvent","type","messageState","gameEvent","super","WorkerMessageType","GuiWorker","worker","canvas","context","eventListener","clearRect","getContext","scale","redraw","event","response","postMessage","sendResponse","msg","setCanvas","consumed","handlePointerEvent","inputEvent","sendEventResponse","eventId","eventConsumed","handleKeyEvent","handleWheelEvent","reset","eventKey","onProcessMessage","rootElement","BaseElement","panels","notifyRedraw","publishEvent","registerEventListener","onRedraw","p","panel","addChild","cx","cy","canvasX","canvasY","sx","sy","c","round","hit","getImageData","data","Cursor","C","eventEnum","checkHover","button","checkClick","checkRelease","release","parent","x","y","children","hidden","disabled","hover","pressed","onClick","onPublishEvent","log","tooltipTimeout","child","updatePosition","drawHover","drawTooltip","isInactive","hide","show","inRect","isInRect","stateChanged","setTimeout","showTooltip","clicked","Button","btnCfg","sfxName","imgNormal","imgHover","imgPressed","imgDisabled","sfxTooltip","img","drawImage","Panel","panelCfg","animationTimeout","movedIn","onDone","toggleState","updateAnimation","targetX","targetY","speed","diffX","diffY","abs","sign","sqrt"],"mappings":"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","file":"710.index.js","sourcesContent":["export class BaseButtonCfg {\n\n    buttonType?: string = null\n    normalFile?: string = null\n    highlightFile?: string = null\n    pressedFile?: string = null\n    disabledFile?: string = null\n    relX?: number = 0\n    relY?: number = 0\n    width?: number = 0\n    height?: number = 0\n    tooltip?: string = null\n}\n","export class BaseConfig {\n\n    static setFromCfg(config: BaseConfig, cfgObj: any) {\n        Object.keys(cfgObj).forEach((cfgKey) => {\n            const lCfgKeyName = (cfgKey.startsWith('!') ? cfgKey.substring(1) : cfgKey)\n                .toLowerCase()\n                .replace(/_/g, '') // Activity_Stand\n                .replace(/-/g, '') // Geo-dome\n            const found = Object.keys(config).some((objKey) => {\n                return config.assignValue(objKey, lCfgKeyName, cfgObj[cfgKey])\n            })\n            if (!found) {\n                console.warn('cfg key: ' + cfgKey + ' does not exist in cfg: ' + config?.constructor?.name)\n            }\n        })\n        return config\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            const currentValue = this[objKey]\n            const currentIsArray = Array.isArray(currentValue)\n            let parsedValue = this.parseValue(lCfgKeyName, cfgValue)\n            const parsedIsArray = Array.isArray(parsedValue)\n            if (currentValue && currentIsArray !== parsedIsArray) {\n                if (currentIsArray) {\n                    parsedValue = [parsedValue]\n                    // } else {\n                    //     console.warn('Array overwrite conflict for key ' + objKey + ' with existing value (' + currentValue + ') and new value (' + parsedValue + ')')\n                }\n            }\n            this[objKey] = parsedValue\n            return true\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return cfgValue\n    }\n\n}\n","export class PanelCfg {\n\n    filename: string\n    xOut: number\n    yOut: number\n    xIn: number\n    yIn: number\n\n    constructor(cfgValue: any) {\n        [this.filename, this.xOut, this.yOut, this.xIn, this.yIn] = cfgValue\n    }\n\n}\n","export function getPath(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '')\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/')\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max)\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2\n}\n\nexport function clearTimeoutSafe(timeout: NodeJS.Timeout) {\n    if (timeout) clearTimeout(timeout)\n    return null\n}\n\nexport function clearIntervalSafe(interval: NodeJS.Timeout) {\n    if (interval) clearInterval(interval)\n    return null\n}\n\ndeclare global {\n\n    interface Array<T> {\n        add(element: T): void\n\n        remove(element: T): void\n\n        last(): T\n\n        count(callback: (element: T) => boolean): number\n\n        partition(filter: (element: T) => boolean): [T[], T[]]\n\n        random(): T\n    }\n\n    interface Map<K, V> {\n        getOrUpdate(key: K, updateCallback: () => V): V\n    }\n\n    interface String {\n        equalsIgnoreCase(other: string): boolean\n    }\n\n}\n\nArray.prototype.add = function <T>(element: T): void {\n    const index = this.indexOf(element)\n    if (index === -1) this.push(element)\n}\n\nArray.prototype.remove = function <T>(element: T): void {\n    const index = this.indexOf(element)\n    if (index !== -1) this.splice(index, 1)\n}\n\nArray.prototype.last = function <T>(): T {\n    return this.length > 0 ? this[this.length - 1] : undefined\n}\n\nArray.prototype.count = function <T>(callback: (element: T) => boolean): number {\n    let counter = 0\n    this.forEach((e) => callback(e) && counter++)\n    return counter\n}\n\nArray.prototype.partition = function <T>(filter: (element: T) => boolean): [T[], T[]] {\n    const left: T[] = [], right: T[] = []\n    this.forEach((a) => filter(a) ? left.push(a) : right.push(a))\n    return [left, right]\n}\n\nArray.prototype.random = function <T>(): T {\n    if (!this.length) return undefined\n    return this[getRandom(this.length - 1)]\n}\n\n// noinspection JSUnusedGlobalSymbols\nMap.prototype.getOrUpdate = function <K, V>(key: K, updateCallback: () => V): V {\n    let value = this.get(key)\n    if (value === undefined) {\n        value = updateCallback()\n        this.set(key, value)\n    }\n    return value\n}\n\nString.prototype.equalsIgnoreCase = function (other: string): boolean {\n    return this.toLowerCase() === other?.toLowerCase()\n}\n","import { ResourceCache } from '../resource/ResourceCache'\n\nexport class GuiResourceCache extends ResourceCache {\n}\n","import { GameEvent } from '../event/GameEvent'\nimport { WorkerMessageType } from '../resource/wadworker/WorkerMessageType'\nimport { WorkerResponse } from './WorkerResponse'\n\nexport class WorkerPublishEvent extends WorkerResponse {\n\n    gameEvent: GameEvent\n\n    constructor(gameEvent: GameEvent) {\n        super(WorkerMessageType.GAME_EVENT)\n        this.gameEvent = gameEvent\n    }\n\n}\n","import { WorkerMessageType } from '../resource/wadworker/WorkerMessageType'\n\nexport class WorkerResponse {\n\n    type: WorkerMessageType\n    messageState?: boolean = null\n\n    constructor(type: WorkerMessageType) {\n        this.type = type\n    }\n\n}\n","import { EventKey } from '../event/EventKeyEnum'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { GamePointerEvent } from '../event/GamePointerEvent'\nimport { GameWheelEvent } from '../event/GameWheelEvent'\nimport { ChangeCursor, LocalEvent } from '../event/LocalEvents'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../params'\nimport { Cursor } from '../screen/Cursor'\nimport { OffscreenWorker } from '../worker/OffscreenWorker'\nimport { BaseElement } from './base/BaseElement'\nimport { Panel } from './base/Panel'\n\nexport abstract class GuiWorker extends OffscreenWorker {\n\n    rootElement: BaseElement = new BaseElement(null)\n    panels: Panel[] = []\n\n    protected constructor(worker: Worker) {\n        super(worker)\n        this.rootElement.notifyRedraw = () => this.redraw()\n        this.rootElement.publishEvent = (event: LocalEvent) => {\n            this.publishEvent(event)\n        }\n        this.rootElement.registerEventListener = (eventKey: EventKey, callback: (GameEvent) => any) => {\n            this.registerEventListener(eventKey, callback)\n        }\n    }\n\n    redraw() {\n        super.redraw()\n        this.rootElement.onRedraw(this.context)\n    }\n\n    reset() {\n        super.reset()\n        this.panels.forEach((p) => p.reset())\n    }\n\n    addPanel<T extends Panel>(panel: T): T {\n        this.rootElement.addChild(panel)\n        this.panels.push(panel)\n        return panel\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        const [cx, cy] = [event.canvasX, event.canvasY]\n        const [sx, sy] = [cx / (this.canvas.width / SPRITE_RESOLUTION_WIDTH), cy / (this.canvas.height / SPRITE_RESOLUTION_HEIGHT)]\n            .map((c) => Math.round(c))\n        const hit = this.context && this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n        if (hit) {\n            this.publishEvent(new ChangeCursor(Cursor.Pointer_Standard)) // TODO don't spam so many events?!\n            if (event.eventEnum === POINTER_EVENT.MOVE) {\n                this.rootElement.checkHover(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) this.rootElement.checkClick(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) this.rootElement.checkRelease(sx, sy)\n            }\n        } else if (event.eventEnum === POINTER_EVENT.MOVE) {\n            this.rootElement.release()\n        }\n        return hit\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        return !this.context || this.context.getImageData(event.canvasX, event.canvasY, 1, 1).data[3] > 0\n    }\n\n}\n","import { EventKey } from '../event/EventKeyEnum'\nimport { GameEvent } from '../event/GameEvent'\nimport { GameKeyboardEvent } from '../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../event/GamePointerEvent'\nimport { GameWheelEvent } from '../event/GameWheelEvent'\nimport { IEventHandler } from '../event/IEventHandler'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../params'\nimport { WorkerMessageType } from '../resource/wadworker/WorkerMessageType'\nimport { OffscreenWorkerMessage } from './OffscreenWorkerMessage'\nimport { WorkerEventResponse } from './WorkerEventResponse'\nimport { WorkerPublishEvent } from './WorkerPublishEvent'\nimport { WorkerResponse } from './WorkerResponse'\n\nexport abstract class OffscreenWorker implements IEventHandler {\n\n    worker: Worker\n\n    canvas: OffscreenCanvas = null\n    context: OffscreenCanvasRenderingContext2D = null\n\n    eventListener = new Map<EventKey, ((event: GameEvent) => any)[]>()\n\n    protected constructor(worker: Worker) {\n        this.worker = worker\n    }\n\n    redraw() {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    reset() {\n    }\n\n    setCanvas(canvas: OffscreenCanvas) {\n        this.canvas = canvas\n        this.context = canvas.getContext('2d')\n        this.context.scale(this.canvas.width / SPRITE_RESOLUTION_WIDTH, this.canvas.height / SPRITE_RESOLUTION_HEIGHT)\n        this.redraw()\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        return false\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): boolean {\n        return false\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        return false\n    }\n\n    sendResponse(response: WorkerResponse) {\n        this.worker.postMessage(response)\n    }\n\n    sendEventResponse(response: WorkerEventResponse) {\n        this.sendResponse(response)\n    }\n\n    processMessage(msg: OffscreenWorkerMessage) {\n        if (msg.type === WorkerMessageType.CANVAS) {\n            this.setCanvas(msg.canvas)\n        } else if (msg.type === WorkerMessageType.EVENT_POINTER) {\n            const consumed = this.handlePointerEvent(msg.inputEvent as GamePointerEvent)\n            this.sendEventResponse({\n                type: WorkerMessageType.RESPONSE_EVENT,\n                eventId: msg.eventId,\n                eventConsumed: consumed,\n            })\n        } else if (msg.type === WorkerMessageType.EVENT_KEY) {\n            const consumed = this.handleKeyEvent(msg.inputEvent as GameKeyboardEvent)\n            this.sendEventResponse({\n                type: WorkerMessageType.RESPONSE_EVENT,\n                eventId: msg.eventId,\n                eventConsumed: consumed,\n            })\n        } else if (msg.type === WorkerMessageType.EVENT_WHEEL) {\n            const consumed = this.handleWheelEvent(msg.inputEvent as GameWheelEvent)\n            this.sendEventResponse({\n                type: WorkerMessageType.RESPONSE_EVENT,\n                eventId: msg.eventId,\n                eventConsumed: consumed,\n            })\n        } else if (msg.type === WorkerMessageType.RESET) {\n            this.reset()\n        } else if (msg.type === WorkerMessageType.REDRAW) {\n            this.redraw()\n        } else if (msg.type === WorkerMessageType.GAME_EVENT) {\n            const event = msg.gameEvent\n            this.eventListener.getOrUpdate(event.eventKey, () => []).forEach((callback) => callback(event))\n        } else if (!this.onProcessMessage(msg)) {\n            console.warn('Worker ignores message of type: ' + WorkerMessageType[msg.type])\n        }\n        return true\n    }\n\n    publishEvent(event: GameEvent): void {\n        this.sendResponse(new WorkerPublishEvent(event))\n    }\n\n    registerEventListener(eventKey: EventKey, callback: (GameEvent) => any): void {\n        this.eventListener.getOrUpdate(eventKey, () => []).push(callback)\n    }\n\n    abstract onProcessMessage(msg: OffscreenWorkerMessage): boolean\n\n}\n","import { Sample } from '../../audio/Sample'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { ChangeCursor, LocalEvent, PlaySoundEvent } from '../../event/LocalEvents'\nimport { Cursor } from '../../screen/Cursor'\n\nexport class BaseElement {\n\n    parent: BaseElement = null\n    x: number = 0\n    y: number = 0\n    relX: number = 0\n    relY: number = 0\n    width: number = 0\n    height: number = 0\n    children: BaseElement[] = []\n    hidden: boolean = false\n    disabled: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n    onClick: (cx?: number, cy?: number) => any = null\n    onPublishEvent: (event: LocalEvent) => any = (event) => console.log('TODO publish event: ' + EventKey[event.eventKey])\n    tooltipTimeout = null\n\n    constructor(parent: BaseElement) {\n        this.parent = parent\n    }\n\n    reset() {\n        this.hidden = false\n        this.disabled = false\n        this.hover = false\n        this.pressed = false\n        this.children.forEach((c) => c.reset())\n    }\n\n    addChild<T extends BaseElement>(child: T): T {\n        child.parent = this\n        this.children.push(child)\n        child.updatePosition()\n        return child\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n    drawHover(context: SpriteContext) {\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    drawTooltip(context: SpriteContext) {\n    }\n\n    isInactive(): boolean {\n        for (let parent = this.parent; !!parent; parent = parent.parent) if (parent.isInactive()) return true\n        return this.hidden || this.disabled\n    }\n\n    hide() {\n        this.hidden = true\n        this.children.forEach((child) => child.hide())\n    }\n\n    show() {\n        this.hidden = false\n        this.children.forEach((child) => child.show())\n    }\n\n    updatePosition() {\n        this.x = this.parent ? this.parent.x + this.relX : this.relX\n        this.y = this.parent ? this.parent.y + this.relY : this.relY\n        this.children.forEach((child) => child.updatePosition())\n    }\n\n    isInRect(cx, cy) {\n        return cx >= this.x && cy >= this.y && cx < this.x + this.width && cy < this.y + this.height\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.hover !== inRect\n        this.hover = inRect\n        if (this.hover) {\n            if (!this.tooltipTimeout) this.tooltipTimeout = setTimeout(() => this.showTooltip(), 1000)\n        } else if (this.tooltipTimeout) {\n            clearTimeout(this.tooltipTimeout)\n            this.tooltipTimeout = null\n        }\n        this.pressed = this.pressed && this.hover\n        this.children.forEach((child) => stateChanged = child.checkHover(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    showTooltip() {\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.pressed !== inRect\n        this.pressed = inRect\n        this.children.forEach((child) => stateChanged = child.checkClick(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        if (inRect && this.pressed && this.onClick) {\n            this.clicked(cx, cy)\n        }\n        let stateChanged = false\n        this.children.forEach((child) => stateChanged = child.checkRelease(cx, cy) || stateChanged)\n        stateChanged = this.pressed || stateChanged\n        this.pressed = false\n        return stateChanged\n    }\n\n    clicked(cx: number, cy: number) {\n        this.publishEvent(new ChangeCursor(Cursor.Pointer_Okay, 1000))\n        this.publishEvent(new PlaySoundEvent(Sample.SFX_ButtonPressed))\n        this.onClick(cx, cy)\n    }\n\n    release(): boolean {\n        let stateChanged = this.pressed || this.hover\n        this.pressed = false\n        this.hover = false\n        this.children.forEach((child) => stateChanged = child.release() || stateChanged)\n        return stateChanged\n    }\n\n    notifyRedraw() {\n        this.parent?.notifyRedraw()\n    }\n\n    publishEvent(event: LocalEvent) {\n        if (this.parent) this.parent.publishEvent(event)\n        else this.onPublishEvent(event)\n    }\n\n    registerEventListener(eventKey: EventKey, callback: (GameEvent) => any) {\n        this.parent.registerEventListener(eventKey, callback)\n    }\n\n}\n","import { SoundManager } from '../../audio/SoundManager'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { BaseElement } from './BaseElement'\n\nexport class Button extends BaseElement {\n\n    buttonType: string = null\n    sfxName: string = null\n    imgNormal: SpriteImage = null\n    imgHover: SpriteImage = null\n    imgPressed: SpriteImage = null\n    imgDisabled: SpriteImage = null\n    tooltip: string = null\n    sfxTooltip: string = null\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent)\n        if (Array.isArray(btnCfg.buttonType)) {\n            [this.buttonType, this.sfxName] = btnCfg.buttonType\n        } else {\n            this.buttonType = btnCfg.buttonType\n        }\n        this.imgNormal = GuiResourceCache.getImageOrNull(btnCfg.normalFile)\n        this.imgHover = GuiResourceCache.getImageOrNull(btnCfg.highlightFile)\n        this.imgPressed = GuiResourceCache.getImageOrNull(btnCfg.pressedFile)\n        this.imgDisabled = GuiResourceCache.getImageOrNull(btnCfg.disabledFile)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width || this.imgNormal?.width || this.imgPressed?.width || this.imgHover?.width\n        this.height = btnCfg.height || this.imgNormal?.height || this.imgPressed?.height || this.imgHover?.height\n        if (Array.isArray(btnCfg.tooltip)) {\n            [this.tooltip, this.sfxTooltip] = btnCfg.tooltip\n        } else {\n            this.tooltip = btnCfg.tooltip\n        }\n        this.tooltip = this.tooltip?.replace(/_/g, ' ')\n        this.updatePosition()\n        this.onClick = () => console.log('button pressed: ' + this.buttonType)\n    }\n\n    showTooltip() {\n        // TODO show tooltip rendering\n        if (this.sfxName) SoundManager.playSound(this.sfxName)\n        if (this.sfxTooltip) SoundManager.playSound(this.sfxTooltip)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled || this.imgPressed || this.imgNormal\n        } else if (this.pressed) {\n            img = this.imgPressed || this.imgNormal\n        } else if (this.hover) {\n            img = this.imgHover || this.imgNormal\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { NATIVE_FRAMERATE, PANEL_ANIMATION_MULTIPLIER } from '../../params'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { BaseElement } from './BaseElement'\n\nexport class Panel extends BaseElement {\n\n    img: SpriteImage = null\n    xOut: number = 0\n    yOut: number = 0\n    xIn: number = 0\n    yIn: number = 0\n    animationTimeout = null\n    movedIn: boolean = true // xIn, yIn is the collapsed position out of screen\n\n    constructor(parent: BaseElement, panelCfg?: PanelCfg) {\n        super(parent)\n        if (panelCfg) {\n            this.img = GuiResourceCache.getImage(panelCfg.filename)\n            this.xOut = panelCfg.xOut\n            this.yOut = panelCfg.yOut\n            this.xIn = panelCfg.xIn\n            this.yIn = panelCfg.yIn\n            this.relX = this.xIn\n            this.relY = this.yIn\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.relX = this.xIn\n        this.relY = this.yIn\n        this.movedIn = true\n        this.updatePosition()\n    }\n\n    isInactive(): boolean {\n        return this.animationTimeout || super.isInactive()\n    }\n\n    setMovedIn(movedIn: boolean, onDone: () => any = null) {\n        if (this.movedIn !== movedIn) {\n            this.toggleState(onDone)\n        } else if (onDone) {\n            onDone()\n        }\n    }\n\n    toggleState(onDone: () => any = null) {\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        if (this.movedIn) {\n            this.movedIn = false\n            this.updateAnimation(this.xOut, this.yOut, PANEL_ANIMATION_MULTIPLIER, onDone)\n        } else {\n            this.movedIn = true\n            this.updateAnimation(this.xIn, this.yIn, PANEL_ANIMATION_MULTIPLIER, onDone)\n        }\n    }\n\n    protected updateAnimation(targetX: number, targetY: number, speed: number, onDone: () => any) {\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= speed && Math.abs(diffY) <= speed) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * speed)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * speed)\n            const panel = this\n            this.animationTimeout = setTimeout(() => panel.updateAnimation(targetX, targetY, speed, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        if (this.img) context.drawImage(this.img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n"],"sourceRoot":""}