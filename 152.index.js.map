{"version":3,"sources":["webpack://rock-raiders-web/./site/modal/WadFileSelectionModal.ts","webpack://rock-raiders-web/./src/resource/wadworker/Resources.ts","webpack://rock-raiders-web/./src/resource/wadworker/InitLoadingMessage.ts","webpack://rock-raiders-web/./src/core/ImageHelper.js","webpack://rock-raiders-web/./src/resource/wadworker/WadUtil.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimationEntityType.ts","webpack://rock-raiders-web/./src/resource/LWOLoader.ts","webpack://rock-raiders-web/./src/game/model/Selectable.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimClip.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimSubObj.ts","webpack://rock-raiders-web/./src/resource/LWSCLoader.ts","webpack://rock-raiders-web/./src/scene/DebugHelper.ts","webpack://rock-raiders-web/./src/game/model/entity/building/Building.ts","webpack://rock-raiders-web/./src/scene/model/BaseEntity.ts","webpack://rock-raiders-web/./src/event/WorldEvents.ts","webpack://rock-raiders-web/./src/event/EventBus.ts","webpack://rock-raiders-web/./src/game/model/job/Job.ts","webpack://rock-raiders-web/./src/scene/model/collect/CollectableEntity.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimEntity.ts","webpack://rock-raiders-web/./src/scene/model/collect/Dynamite.ts","webpack://rock-raiders-web/./src/scene/model/collect/Crystal.ts","webpack://rock-raiders-web/./src/scene/model/collect/Ore.ts","webpack://rock-raiders-web/./src/resource/wadworker/WorkerMessage.ts","webpack://rock-raiders-web/./src/scene/SceneManager.ts","webpack://rock-raiders-web/./src/resource/AnimEntityLoader.ts","webpack://rock-raiders-web/./src/core/BitmapFont.ts","webpack://rock-raiders-web/./src/event/EventManager.ts","webpack://rock-raiders-web/./src/resource/ResourceManager.ts","webpack://rock-raiders-web/./src/screen/ScreenLayer.ts","webpack://rock-raiders-web/./src/scene/model/map/Surface.ts","webpack://rock-raiders-web/./src/screen/BaseScreen.ts","webpack://rock-raiders-web/./src/screen/LoadingScreen.ts","webpack://rock-raiders-web/./src/menu/MainMenuBaseItem.ts","webpack://rock-raiders-web/./src/menu/MainMenuLabelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuIconButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLayer.ts","webpack://rock-raiders-web/./src/menu/MainMenuLevelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuPanel.ts","webpack://rock-raiders-web/./src/menu/MainMenuWindow.ts","webpack://rock-raiders-web/./src/menu/LevelSelectLayer.ts","webpack://rock-raiders-web/./src/screen/MainMenuScreen.ts","webpack://rock-raiders-web/./src/scene/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/game/model/job/SurfaceJob.ts","webpack://rock-raiders-web/./src/scene/model/map/SurfaceGeometry.ts","webpack://rock-raiders-web/./src/event/WorldLocationEvent.ts","webpack://rock-raiders-web/./src/scene/model/map/astar.ts","webpack://rock-raiders-web/./src/scene/TerrainLoader.ts","webpack://rock-raiders-web/./src/scene/model/map/Terrain.ts","webpack://rock-raiders-web/./src/scene/model/FulfillerEntity.ts","webpack://rock-raiders-web/./src/scene/model/MovableEntity.ts","webpack://rock-raiders-web/./src/scene/model/Raider.ts","webpack://rock-raiders-web/./src/scene/model/BuildingEntity.ts","webpack://rock-raiders-web/./src/scene/ObjectListLoader.ts","webpack://rock-raiders-web/./src/core/NerpRunner.ts","webpack://rock-raiders-web/./src/core/NerpParser.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityList.ts","webpack://rock-raiders-web/./src/scene/WorldManager.ts","webpack://rock-raiders-web/./src/game/layer/SelectionLayer.ts","webpack://rock-raiders-web/./src/game/layer/GameLayer.ts","webpack://rock-raiders-web/./src/game/gui/base/BaseElement.ts","webpack://rock-raiders-web/./src/game/gui/base/Panel.ts","webpack://rock-raiders-web/./src/game/gui/base/Button.ts","webpack://rock-raiders-web/./src/cfg/BaseConfig.ts","webpack://rock-raiders-web/./src/game/gui/sidebar/SideBarLabel.ts","webpack://rock-raiders-web/./src/game/gui/sidebar/PanelCrystalSideBar.ts","webpack://rock-raiders-web/./src/game/gui/infodock/ButtonInfoDockCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/ButtonPriorityListCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/ButtonTopCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonsCfg.ts","webpack://rock-raiders-web/./src/game/gui/radar/RadarPanel.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessage.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/MessagePanel.ts","webpack://rock-raiders-web/./src/cfg/IconPanelBackButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/MenuItemCfg.ts","webpack://rock-raiders-web/./src/game/gui/main/IconPanelButton.ts","webpack://rock-raiders-web/./src/game/gui/main/IconSubPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/IconPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/BuildingPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SmallVehiclePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/LargeVehiclePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectBasePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectWallPanel.ts","webpack://rock-raiders-web/./src/scene/model/BuildingSite.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectFloorPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectRubblePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectBuildingPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectRaiderPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectVehiclePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/MainPanel.ts","webpack://rock-raiders-web/./src/game/gui/base/ToggleButton.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/TopPanel.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoDockButton.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoDockPanel.ts","webpack://rock-raiders-web/./src/cfg/PanelsCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityListPanel.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoMessagesEntryConfig.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoMessagesConfig.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InformationPanel.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityButtonsConfig.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityPositionsEntry.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessageEntryConfig.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessageConfig.ts","webpack://rock-raiders-web/./src/game/layer/GuiBaseLayer.ts","webpack://rock-raiders-web/./src/game/layer/GuiMainLayer.ts","webpack://rock-raiders-web/./src/game/Supervisor.ts","webpack://rock-raiders-web/./src/game/gui/briefing/BriefingPanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuCycleItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuSliderItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuLabelItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuLayer.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuBasePanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/OptionsPanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/PausePanel.ts","webpack://rock-raiders-web/./src/core/Rect.ts","webpack://rock-raiders-web/./src/cfg/DialogCfg.ts","webpack://rock-raiders-web/./src/cfg/BriefingPanelCfg.ts","webpack://rock-raiders-web/./src/game/layer/OverlayLayer.ts","webpack://rock-raiders-web/./src/screen/GameScreen.ts","webpack://rock-raiders-web/./src/menu/RewardScreenButton.ts","webpack://rock-raiders-web/./src/screen/RewardScreen.ts","webpack://rock-raiders-web/./src/main.ts"],"names":["parentId","onStart","rootElement","document","getElementById","appendChild","createElement","classList","add","tabIndex","setAttribute","modalDialog","modalContent","modalHeader","modalTitle","innerText","id","modalBody","navTabList","navFileBtn","WadFileSelectionModal","appendNavButton","navUrlBtn","navTabContent","this","appendNavFileTab","appendNavUrlTab","modal","backdrop","keyboard","parent","active","controlTarget","navBtn","type","String","labelledBy","navFileTab","appendNavTab","wad0File","appendWadFileGroup","wad1File","btnStartFile","addEventListener","disabled","wad0FileUrl","URL","createObjectURL","files","wad1FileUrl","filename","wadFileGroup","wadFileLabel","innerHTML","wadFileInput","required","navUrlTab","urlHint","wad0Url","appendWadUrlGroup","wad1Url","btnStartUrl","value","navTab","example","wadUrlGroup","wadUrlLabel","wadUrlInput","show","hide","Worker_fn","Worker","createContext","width","height","console","error","result","y","x","fillStyle","fillRect","createDummyContext","canvas","context","getContext","createDummyImgData","ImageData","e","px","py","setPixel","imgData","r","g","b","a","n","data","getPixel","iGet","obj","keys","forEach","keyname","Object","filter","key","toLowerCase","map","url","strUrl","toString","replace","startsWith","substring","lastInd","lastIndexOf","decodeString","TextDecoder","decode","decodeFilepath","getRandomInclusive","min","max","Math","ceil","floor","random","getRandom","getRandomSign","carryNullName","mediumPoly","highPoly","fPPoly","activities","SURF_VTRN","getVector3AtOffset","view","offset","vector","getFloat32","z","SelectionType","path","verbose","materials","geometry","vertices","indices","uvs","log","parsePoints","chunkOffset","chunkSize","numVertices","Float32Array","i","vertexIndex","vertexOffset","parseSurfaceNames","buffer","surfaceNames","Uint8Array","split","s","length","new_material","name","side","push","parsePolygons","totalNumIndices","numIndices","getInt16","materialIndex","addGroup","currentIndex","Uint16Array","faceIndices","Int16Array","COUNTER_CLOCKWISE","parseSurface","getUint8","materialName","material","textureFlags","textureSize","textureCenter","subchunkOffset","subchunkType","getInt32","subchunkSize","colorArray","color","fromArray","join","flags","getUint16","luminosity","diffuse","specular","reflection","reflectivity","transparency","opacity","transparent","luminosity2","diffuse2","specular2","toArray","textureTypeName","textureColorArray","textureFilepath","sequenceTexture","endsWith","textureFilename","match","ResourceManager","filterTextureSequenceNames","setInterval","getTexture","alphaTest","warn","size","center","XAXIS_BIT","groups","group","start","count","uvIndex","u","v","planarMapUVS","parse","DataView","getUint32","fileSize","byteLength","ID4_SIZE","cursor","chunkType","setIndex","computeVertexNormals","magic","looping","transcoef","firstFrame","lastFrame","framesPerSecond","bodies","degToRad","relPos","relRot","relScale","parentObjInd","model","radVec","degX","degY","degZ","setFrameAndFollowing","animationFrameIndex","infos","c","setOpacityAndFollowing","animationClip","AnimClip","lines","lineIndex","content","l","trim","numOfModels","parseInt","line","parseFrameBlock","parseObjectBlock","parseLine","frameStep","subObj","AnimSubObj","slice","lwoBuffer","getResource","LWOLoader","lenInfos","lenFrames","Number","numOfInformationChannels","numOfKeyframes","frameNum","Stats","stats","setMode","domElement","style","position","left","top","body","visibility","renderStart","begin","renderDone","end","dropPosAngleDeg","dropPosDist","selfPowered","maxUpgrades","aeFile","getByName","buildingType","TOOLSTATION","TELEPORT_PAD","UPGRADE","POWER_STATION","SUPPORT","REFINERY","GEODOME","Building","EntityType","sequenceIntervals","getPosition","copy","getRotation","rotation","onDiscover","visible","publishEvent","event","blockedEvents","includes","eventKey","isLocal","eventListener","callback","index","indexOf","splice","registerEventListener","entityKey","GameEvent","job","WorldEvent","JobCreateEvent","JobEvent","JobDeleteEvent","numRequested","RaiderRequested","collectType","CollectEvent","surface","SpawnDynamiteEvent","collectable","spawnPosition","SpawnMaterialEvent","entity","EntityAddedEvent","EntityRemovedEvent","JobType","JobState","CavernDiscovered","OreFoundEvent","CollectableType","CollectTargetType","fulfiller","jobstate","OPEN","assign","unassign","cancel","CANCELED","stopJob","isQualified","onJobComplete","COMPLETE","item","CARRY","isInArea","pos","sub","JOB_ACTION_RANGE","carries","getTargetPos","getTargetType","getCollectableType","CRYSTAL","GameState","numCrystal","EventBus","ORE","numOre","BUILDING_SITE","targetSite","addItem","Job","target","MOVE","lengthSq","RAIDER_SPEED","collectableType","targetPos","complete","resetTarget","targetBuilding","site","getClosestSiteThatRequires","targetType","getClosestBuildingByType","getTargetBuildingTypes","getDropPosition","unAssign","collectablesUndiscovered","collectables","CollectJob","BaseEntity","GameResultState","SurfaceSelectedEvent","LocalEvent","building","BuildingSelected","raider","RaiderSelected","vehicle","VehicleSelected","EntityDeselected","entityType","poly","animation","animationTimeout","selectionFrame","pickSphere","pickSphereRadius","selectionFrameSize","carryJoint","setActivity","onAnimationDone","iterations","clearTimeout","activity","remove","children","polyModel","clone","polyPart","parentInd","animate","frameIndex","p","scale","hasOwnProperty","undefined","Array","isArray","mat","setTimeout","createPickSphere","setFromObject","getCenter","userData","selectable","ctx","strength","texture","selectionMaterial","depthTest","set","getAnimationEntityType","targetSurface","isExplodable","getDigPositions","DYNAMITE","ignite","worldMgr","sceneManager","scene","getCenterWorld","lookAt","collapse","AnimEntity","resource2","mesh2","SceneManager","registerMesh","emissive","depthWrite","resource","mesh","interval","clearInterval","CollectableEntity","WorkerMessageType","reset","resultState","RUNNING","levelFullName","numBrick","usedCrystals","neededCrystals","airlevel","selectedEntities","selectionType","buildings","buildingsUndiscovered","raiders","raidersUndiscovered","requestedRaiders","vehicles","vehiclesUndiscovered","buildingSites","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","discoveredCaverns","levelStartTime","levelStopTime","rewardConfig","priorityList","getBuildingsByType","isPowered","buildingTypes","some","bt","targetBuildings","closest","minDist","bPos","dist","needs","selectEntities","entities","deselect","select","len","GROUP","getSelectionType","getMaxRaiders","MAX_RAIDER_BASE","ADDITIONAL_RAIDER_PER_SUPPORT","discoverSurface","minX","TILESIZE","minZ","maxX","maxZ","discoverEntities","undiscovered","discovered","dropMaterial","quantity","Dynamite","Crystal","Ore","round","quota","importance","scoreCrystals","crystals","Infinity","scoreTimer","gameTimeSeconds","timer","scoreCaverns","caverns","scoreConstructions","constructions","scoreOxygen","oxygen","scoreFigures","figures","SURFACE","BUILDING","maxFps","debugHelper","DebugHelper","renderer","antialias","setClearColor","camera","controls","mouseButtons","LEFT","MIDDLE","RIGHT","selectEntitiesByRay","rx","ry","raycaster","setFromCamera","intersects","intersectObjects","terrain","floorGroup","selected","object","selectEntitiesInFrustum","r1x","r1y","r2x","r2y","startPoint","endPoint","EPSILON","updateProjectionMatrix","updateMatrixWorld","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","setFromMatrixPosition","matrixWorld","unproject","vectemp1","vectemp2","vectemp3","normalize","deep","MAX_VALUE","multiplyScalar","frustum","planes","setFromCoplanarPoints","normal","containsPoint","getSelectionCenter","setupScene","amb","cursorTorchlight","distance","startScene","renderInterval","animRequest","requestAnimationFrame","render","disposeScene","cancelAnimationFrame","dispose","meshRegistry","loadModels","root","getPath","AnimationEntityType","polyname","polykey","act","file","isLws","LWSCLoader","fontImageData","cols","rows","letters","chars","maxCharWidth","getActualCharacterWidth","rowPixelIndex","colPixelIndex","charHeight","extractData","actualWidth","startX","startY","alpha","createTextImage","text","maxWidth","autoCenter","determineRows","row","rowX","rowY","letterX","letterImgData","charAt","img","putImageData","spaceWidth","rowText","rowWidth","word","wordWidth","letter","letterImg","createTextMessage","msg","MSG","createCfgLoaded","cfg","totalResources","CFG","createAssetLoaded","assetIndex","assetName","assetObj","ASSET","createLoadDone","loadingTimeSeconds","DONE","MOUSE_BUTTON","POINTER_EVENT","KEY_EVENT","startLoadingFromCache","startLoading","startLoadingFromUrl","InitLoadingMessage","worker","onmessage","resourceByName","onAssetLoaded","onMessage","configuration","onInitialLoad","CACHE_MISS","onCacheMissed","onLoadDone","postMessage","basename","lBasename","resourceName","lName","getImageData","imageName","lImageName","getImage","getImageOrNull","textureName","lTextureName","lSharedTextureName","needsUpdate","getMap","aeFilename","cfgRoot","AnimEntityLoader","getBitmapFont","fontCache","BitmapFont","withContext","background","setZIndex","zIndex","compareZ","layerA","layerB","aIndex","bIndex","resize","redraw","onRedraw","isActive","toCanvasCoords","windowX","windowY","clientRect","getBoundingClientRect","handlePointerEvent","eventEnum","handleKeyEvent","handleWheelEvent","fixedWidth","SPRITE_RESOLUTION_WIDTH","fixedHeight","SPRITE_RESOLUTION_HEIGHT","toScaledCoords","cx","cy","scaleX","scaleY","ScreenLayer","cursorName","createCursor","curUrl","revokeObjectURL","curImg","toDataURL","ScaledLayer","WALL_TYPE","screen","gameCanvasContainer","isInRect","preventDefault","Map","DOWN","UP","eventType","nonBubblingClone","PointerEvent","bubbles","clientX","clientY","pointerType","button","ctrlKey","metaKey","shiftKey","layers","sort","WheelEvent","deltaX","deltaY","deltaZ","ratio","focus","eventMgr","EventManager","window","onWindowResize","cursorLayer","addLayer","CursorLayer","layer","offsetWidth","maxHeight","offsetHeight","idealHeight","firstLayer","rect","right","bottom","font","fillText","setLoadingMessage","enableGraphicMode","imgBackground","imgProgress","screenZoom","loadingBarWidth","drawImage","setLoadingState","BaseScreen","scrollAffected","needsRedraw","hover","pressed","actionName","targetIndex","checkHover","sx","sy","onHoverChange","checkSetPressed","setReleased","draw","labelImgLo","labelImgHi","loFont","label","hiFont","MainMenuBaseItem","imgNormal","imgHover","imgPressed","tooltip","menuCfg","items","scrollY","menuImage","titleImage","fullName","itemsLabel","MainMenuLabelButton","MainMenuIconButton","displayTitle","absY","MAIN","showMainMenu","selectLevel","levelKey","canScroll","levelCfg","imgActive","imgInactive","imgCross","unlocked","frontEndX","frontEndY","menuBMP","frontEndOpen","area","w","h","imgFirstLine","imgSecondLine","setFirstLine","setSecondLine","modeLevel","levelsCfg","levelTextCfg","LevelTextCfg","MainMenuPanel","panelImgData","panelPos","levelTextWindow","MainMenuWindow","level","tutorial","levelsByName","levelButton","MainMenuLevelButton","MainMenuLayer","winCfg","panelCfg","onLevelSelected","menus","title","LevelSelectLayer","showLevelSelection","levelName","options","shaping","matIndex","drillable","explodable","reinforcable","getByNum","typeNum","SurfaceType","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","GROUND","POWER_PATH","POWER_PATH_SITE","requiredTools","requiredSkills","DRILL","SurfaceJobType","REINFORCE","BLOW","CLEAR_RUBBLE","workType","hasTools","hasSkills","digPos","getTerrainHeight","reinforce","reduceRubble","dynamite","SurfaceJob","placedItems","placed","surfaceType","updateTexture","create","wallType","topLeftVertex","bottomRightVertex","topRightVertex","bottomLeftVertex","topLeftHeight","topRightHeight","bottomRightHeight","bottomLeftHeight","uvOffset","INVERTED_CORNER","WALL","WEIRD_CREVICE","Boolean","uv","bufferVertices","bufferNormals","addFaceAndNormals","subVectors","cross","uvIndexes","bufferVertexUvs","bufferGeometry","BufferAttribute","copyVector3sArray","copyVector2sArray","location","GenericDeathEvent","WorldLocationEvent","GenericMonsterEvent","CrystalFoundEvent","UnderAttackEvent","LandslideEvent","PowerDrainEvent","SlugEmergeEvent","RaiderDiscoveredEvent","heightOffset","containedOres","containedCrystals","reinforced","jobs","surfaceRotation","seamLevel","fallinTimeout","fallinGrp","needsMeshUpdate","surfaceJob","hasJobType","discoverNeighbors","foundCave","surf","getSurfaceOrNull","cancelJobs","getSurface","isSupported","updateSurfaceMeshes","updateWorldMatrix","crystal","addCollectable","dropContainedOre","dropAmount","updateJobColor","surfLeft","surfTopLeft","surfTop","surfTopRight","surfRight","surfBottomRight","surfBottom","surfBottomLeft","isHighGround","surf1","surf2","surf3","updateMesh","force","updateGeometry","cancelReinforceJobs","otherJobs","textureSet","texturebasename","updatePowerPathTexture","CORNER","accessMaterials","isPath","pathSum","PI","avgHeight","sum","cnt","args","SurfaceGeometry","HEIGHT_MULTIPLER","shininess","setHex","hasRubble","isWalkable","isDrillable","isReinforcable","isDigable","digPosition","setFallinLevel","fallinLevel","originPos","findFallInOrigin","findFallInTarget","scheduleFallin","targetX","targetY","createFallin","fallinPosition","dx","dy","rotateOnAxis","atan2","m","pathTo","node","curr","unshift","PathMap","PredugMap","astar","search","graph","cleanDirty","heuristic","heuristics","manhattan","openHeap","BinaryHeap","f","closestNode","markDirty","currentNode","pop","closed","neighbors","il","neighbor","isWall","gScore","getCost","beenVisited","visited","rescoreElement","pos0","pos1","abs","diagonal","D2","sqrt","d1","d2","cleanNode","gridIn","nodes","grid","dirtyNodes","GridNode","init","ret","graphString","rowDebug","weight","fromNeighbor","scoreFunction","element","sinkDown","bubbleUp","parentN","elemScore","child2N","child1N","swap","child1Score","child1","child2","surfaces","roofGroup","graphWalk","cachedPaths","bSurf","getSurfaceFromWorld","worldPosition","Surface","Graph","clear","findPath","canFly","canSwim","startSurface","endSurface","cacheIdentifier","cachedPath","get","searchPath","startNode","endNode","worldPath","leftSurface","topSurface","rightSurface","bottomSurface","leftSurface2","topSurface2","rightSurface2","bottomSurface2","loadTerrain","levelConf","tileSize","blockSize","Terrain","themeName","terrainMap","pathMap","surfaceMap","predugMap","cryOreMap","fallinMap","erodeMap","surfaceTypeNum","predugLevel","CAVERN_EXPOSED","SLUG_HOLE_EXPOSED","SLUG_HOLE_HIDDEN","CAVERN_HIDDEN","pathMapLevel","NONE","RUBBLE","currentCryOre","FulfillerActivity","speed","pathToTarget","getSpeed","moveToTarget","equals","findPathToTarget","isOnRubble","changeActivity","MOVING_RUBBLE","MOVING","determineStep","pathStepTarget","step","setLength","shift","onChangeDone","workInterval","jobSubPos","tools","skills","carryTarget","work","bind","NATIVE_FRAMERATE","surfaceJobType","DRILLING","vec","applyAxisAngle","STANDING","jobPos","SHOVELING","dropItem","PICKING","pickupItem","DROPPING","setJob","toolnames","skillKeys","onSelect","MovableEntity","PILOT","isNaN","isOnPath","RAIDER","applyMatrix4","FulfillerEntity","powerSwitch","powerLink","spawning","upgrades","makeScale","dropPos","applyEuler","hasMaxUpgrades","upgrade","loadObjectList","objectListConf","values","olObject","lTypeName","worldX","xPos","worldZ","yPos","worldY","radHeading","heading","update","setTorchPosition","Raider","BuildingEntity","path1Surface","pathOffset","path2Surface","debug","onLevelComplete","nerpInterval","registers","fill","timers","scriptLines","statements","macrosByName","labelsByName","halted","programCounter","messages","messagePermit","startExecution","that","execute","pauseExecution","checkRegister","register","num","Error","checkRegisterValue","getR","setR","addR","setTimer","Date","getTime","getTimer","setLevelCompleted","setLevelFail","FAILED","setTutorialFlags","setMessagePermit","messagesAllowed","setBuildingsUpgradeLevel","typeName","setToolStoreLevel","setTeleportPadLevel","setPowerStationLevel","setBarracksLevel","getToolStoresBuilt","getMinifiguresOnLevel","getCrystalsCurrentlyStored","getObjectiveSwitch","setMessageTimerValues","arg1","arg2","arg3","getMessageTimer","cameraUnlock","setMessage","messageNumber","arrowDisabled","txt","setCameraGotoTutorial","getTutorialBlockIsGround","getTutorialBlockIsPath","getUnitAtBlock","getOxygenLevel","getObjectiveShowing","addPoweredCrystals","disallowAll","getPoweredPowerStationsBuilt","getPoweredBarracksBuilt","getRecordObjectAtTutorial","getHiddenObjectsFound","callMethod","methodName","methodArgs","setRegisterMatch","addRegisterMatch","getRegisterMatch","setTimerMatch","getTimerMatch","lMethodName","memberName","apply","conditional","conditionResult","executeStatement","expression","invoke","argValues","comparator","jump","statement","nerpScript","nerpRunner","NerpRunner","includeName","includedRunner","NerpParser","concat","firstLine","macroLines","mLine","append","macroLine","macroCall","replaceMacros","labelMatch","preProcess","labelName","macro","RegExp","number","opSplit","brackets","spaceSplit","jumpMatch","priorities","levelDefault","current","toggle","enabled","upOne","tmp","entry","PriorityEntry","pushToTop","levelPriorityEntry","spawnRaiderInterval","checkSpawnRaiders","CHECK_SPANW_RAIDER_TIMER","DynamiteJob","setup","gameScreen","reward","PriorityList","TerrainLoader","oListFile","ObjectListLoader","nerpFile","nerpMessageFile","onLevelEnd","now","stop","setSize","getTerrainIntersectionPoint","point","intersect","intersectObject","spawnBuildings","station","walkOutPos","MoveJob","selectStart","setWorldManager","worldManager","startSelection","changeSelection","screenX","screenY","clearRect","strokeStyle","lineWidth","strokeRect","rightDown","intersectionPoint","getTerrainPositionFromEvent","SECONDARY","createSurfaceJob","dispatchEvent","t","surfJob","relX","relY","hidden","addChild","child","updatePosition","drawHover","drawTooltip","onClick","isInactive","inRect","stateChanged","checkClick","checkRelease","release","notifyRedraw","xOut","yOut","xIn","yIn","movedIn","updateAnimation","onDone","diffX","diffY","sign","setMovedIn","toggleState","PANEL_ANIMATION_MULTIPLIER","BaseElement","btnCfg","buttonType","imgDisabled","normalFile","highlightFile","pressedFile","disabledFile","setFromCfg","config","cfgObj","cfgKey","lCfgKeyName","objKey","assignValue","cfgValue","parseValue","textAlign","buttonsCfg","labelOre","SideBarLabel","panelButtonCrystalSideBarOre","labelCrystal","panelButtonCrystalSideBarCrystals","imgNoCrystal","imgSmallCrystal","imgUsedCrystal","imgOre","updateQuantities","BRICK","curX","curY","imgCrystal","Panel","BaseConfig","ButtonCfg","panelButtonInfoDockGoto","panelButtonInfoDockClose","panelButtonPriorityListDisable","panelButtonPriorityListUpOne","panelButtonPriorityListClose","panelButtonPriorityListReset","panelButtonTopPanelCallToArms","panelButtonTopPanelOptions","panelButtonTopPanelPriorities","panelRadar","panelCrystalSideBar","panelTopPanel","panelInformation","panelPriorityList","panelCameraControl","panelInfoDock","panelEncyclopedia","btnCfgValue","arr","ButtonRadarCfg","ButtonCrystalSideBarCfg","ButtonTopCfg","ButtonInformationCfg","ButtonPriorityListCfg","ButtonCameraControlCfg","ButtonInfoDockCfg","panelButtonInformationToggle","panelButtonInformationFunction","panelButtonCameraControlZoomIn","panelButtonCameraControlZoomOut","panelButtonCameraControlCycleBuildings","panelButtonCameraControlRotate","BaseButtonCfg","buttonImageFilename","panelFillCfg","panelOverlayCfg","overlay","btnToggle","Button","panelButtonRadarToggle","btnMap","panelButtonRadarMapView","btnTagged","panelButtonRadarTaggedObjectView","panelButtonRadarZoomIn","panelButtonRadarZoomOut","infoMessageEntryConfig","textImage","infoImage","imageFilename","textInfoMessageConfig","imgAir","currentMessage","messageTimeout","crystalFound","TextInfoMessage","textCrystalFound","msgSpaceToContinue","textSpaceToContinue","cavernDiscovered","textCavernDiscovered","oreFound","textOreFound","msgAirSupplyLow","textAirSupplyLow","msgAirSupplyRunningOut","textAirSupplyRunningOut","msgGameCompleted","textGameCompleted","msgManTrained","textManTrained","msgUnitUpgraded","textUnitUpgraded","textInfoMessage","timeout","unsetMessage","txtX","infoX","tooltipDisabled","hotkey","menuItemCfg","itemKey","parentWidth","menuIndex","updateState","targetState","isDisabled","numOfItems","onBackPanel","countMenuItems","backBtn","backBtnCfg","IconPanelBackButtonCfg","frameImgCfg","imgName","imgNameWoBackName","addMenuItem","menuItemGroup","MenuItemCfg","menuItem","IconPanelButton","subPanels","mainPanel","addSubPanel","IconSubPanel","childPanel","selectSubPanel","targetPanel","subPanel","itemDrill","addWallMenuItem","itemReinforce","itemDynamite","itemDeselect","jobType","selectedSurface","SelectBasePanel","isPowerPath","neededByType","assignedByType","onSiteByType","needed","checkComplete","neededType","CompletePowerPathJob","pathItem","ore","BuildingSite","clearRubbleItem","upgradeItem","buildingPanel","BuildingPanel","smallVehiclePanel","SmallVehiclePanel","largeVehiclePanel","LargeVehiclePanel","selectWallPanel","SelectWallPanel","selectFloorPanel","SelectFloorPanel","selectRubblePanel","SelectRubblePanel","selectBuildingPanel","SelectBuildingPanel","selectRaiderPanel","SelectRaiderPanel","selectVehiclePanel","SelectVehiclePanel","teleportRaider","buildingItem","smallVehicleItem","largeVehicleItem","IconPanel","updated","isPressed","btnCallToArms","ToggleButton","btnOptions","btnPriorities","infoMessagesEntryConfig","InfoButtonCfg","animationSpeedX","animationSpeedY","message","buttonClicked","showButton","slideToTarget","Promise","resolve","infoMessagesConfig","informationPanel","stackButtons","gotoLatestMessage","dropLatestMessage","InfoDockButton","infoGenericDeath","infoGenericMonster","infoCrystalFound","infoUnderAttack","infoLandslide","infoPowerDrain","infoSlugEmerge","infoFoundMinifigure","btn","slideStackIntoPosition","then","slideInButton","reduce","prev","cur","pushFirst","setText","promises","all","panelRadarFill","panelRadarOverlay","panelMessages","panelMessagesSide","PanelCfg","prioPositions","prioByName","buttonCfg","setList","aiPriorityTrain","aiPriorityGetIn","aiPriorityCrystal","aiPriorityOre","aiPriorityRepair","aiPriorityClearing","aiPriorityDestruction","aiPriorityConstruction","aiPriorityReinforce","aiPriorityRecharge","prioButton","sfx","timing","flag","InfoMessagesEntryConfig","sfxName","TextInfoMessageEntryConfig","panels","addPanel","panel","hit","onOptionsShow","panelsCfg","PanelsCfg","ButtonsCfg","InformationPanel","InfoDockPanel","InfoMessagesConfig","priorityButtonsConfig","PriorityButtonsConfig","priorityPositionsConfig","PriorityPositionsEntry","PriorityListPanel","TopPanel","panelMain","MainPanel","PanelCrystalSideBar","MessagePanel","TextInfoMessageConfig","RadarPanel","GuiBaseLayer","scheduleJobs","JOB_SCHEDULE_INTERVAL","j","closestRaider","minDistance","imgTitle","titleRelX","titleRelY","btnNext","btnBack","imgBack","imgParagraph","paragraph","titleFont","titleWindow","nextButtonCfg","nextParagraph","backButtonCfg","prevParagraph","objectiveText","objectiveBackImgCfg","textFont","textWindow","setParagraph","messagePanel","itemCfg","labelX","state","imgTextNormal","description","imgTextHover","imgLabelOffNormal","labelOff","imgLabelOffHover","imgLabelOnNormal","labelOn","imgLabelOnHover","imgLabel","sliderX","onValueChanged","imgLeft","imgOff","imgOn","imgRight","leftBtn","btnLeftNormal","btnLeftHover","rightBtn","btnRightNormal","btnRightHover","posX","dw","loImg","hiImg","itemsTrigger","itemsNext","menuFont","MenuLabelItem","itemsCycle","MenuCycleItem","itemsSlider","MenuSliderItem","layersByKey","MenuLayer","pausePanel","selectLayer","onRepeatBriefing","MenuBasePanel","onAbortGame","onRestartGame","image","okWindow","cancelWindow","contrastOverlay","Rect","dialogCfg","DialogCfg","panelPause","PausePanel","panelOptions","OptionsPanel","panelBriefing","BriefingPanel","BriefingPanelCfg","setActivePanel","every","lEventKey","gameLayer","GameLayer","selectionLayer","SelectionLayer","guiLayer","GuiMainLayer","overlayLayer","OverlayLayer","WorldManager","jobSupervisor","Supervisor","restartLevel","startLevel","setupAndStartLevel","objective","objectiveImage640x480","conf","imgNormalFilepath","imgHoverFilepath","imgPressedFilepath","imgDisabledFilepath","resultIndex","resultLastIndex","images","boxes","fonts","texts","uncoverTimeout","backgroundImg","wallpaper","filePath","boxImages","fontKey","labelFont","backFont","resultsLayer","btnSave","btnAdvance","descriptionTextLayer","btnLayer","RewardScreenButton","saveButton","advanceButton","onAdvance","uncoverResult","levelFullNameImg","resultText","quitText","completeText","failedText","resultValues","percentString","timeString","score","gameResultTextImg","box","vertSpacing","descriptionTextImg","textPos","tx","ty","actual","lessIsMore","padLeft","padding","seconds","ss","minutes","mm","loadingScreen","LoadingScreen","wadfileSelectModal","mainMenuScreen","MainMenuScreen","GameScreen","rewardScreen","RewardScreen"],"mappings":"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","file":"152.index.js","sourcesContent":["import { Modal } from 'bootstrap'\n\nexport class WadFileSelectionModal {\n\n    public onStart: (wad0Url, wad1Url) => any = null\n\n    private readonly modal: Modal\n\n    constructor(parentId: string) {\n        const rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        rootElement.classList.add('modal')\n        rootElement.tabIndex = -1\n        rootElement.setAttribute('role', 'dialog')\n        rootElement.setAttribute('aria-hidden', 'true')\n\n        const modalDialog = rootElement.appendChild(document.createElement('div'))\n        modalDialog.classList.add('modal-dialog')\n        rootElement.setAttribute('role', 'document')\n\n        const modalContent = modalDialog.appendChild(document.createElement('div'))\n        modalContent.classList.add('modal-content')\n\n        const modalHeader = modalContent.appendChild(document.createElement('div'))\n        modalHeader.classList.add('modal-header')\n        const modalTitle = modalHeader.appendChild(document.createElement('h5'))\n        modalTitle.classList.add('modal-title')\n        modalTitle.innerText = 'Load .wad files'\n        modalTitle.id = 'wadfileSelectModalLabel'\n        rootElement.setAttribute('aria-labelledby', modalTitle.id)\n\n        const modalBody = modalContent.appendChild(document.createElement('div'))\n        modalBody.classList.add('modal-body')\n\n        const hint = modalBody.appendChild(document.createElement('p'))\n        hint.innerText = 'Assets not included! In order to play the game, please select the game files.'\n\n        const navTabs = modalBody.appendChild(document.createElement('nav'))\n        const navTabList = navTabs.appendChild(document.createElement('div'))\n        navTabList.id = 'nav-tab'\n        navTabList.classList.add('nav', 'nav-tabs')\n        navTabList.setAttribute('role', 'tablist')\n\n        const navFileBtn = WadFileSelectionModal.appendNavButton(navTabList, true, 'nav-file-tab', 'nav-file', 'Local files (recommended)')\n        const navUrlBtn = WadFileSelectionModal.appendNavButton(navTabList, false, 'nav-url-tab', 'nav-url', 'Online from URL')\n\n        const navTabContent = modalBody.appendChild(document.createElement('div'))\n        navTabContent.classList.add('tab-content')\n        this.appendNavFileTab(navTabContent, navFileBtn.id)\n        this.appendNavUrlTab(navTabContent, navUrlBtn.id)\n\n        // rootElement has to be a valid bootstrap HTML modal before we can instantiate it\n        this.modal = new Modal(rootElement, {backdrop: 'static', keyboard: false})\n    }\n\n    private static appendNavButton(parent: HTMLDivElement, active: boolean, id: string, controlTarget: string, innerText: string) {\n        const navBtn = parent.appendChild(document.createElement('button'))\n        navBtn.classList.add('nav-link')\n        if (active) navBtn.classList.add('active')\n        navBtn.id = id\n        navBtn.setAttribute('data-bs-toggle', 'tab')\n        navBtn.setAttribute('data-bs-target', '#' + controlTarget)\n        navBtn.type = 'button'\n        navBtn.setAttribute('role', 'tab')\n        navBtn.setAttribute('aria-controls', controlTarget)\n        navBtn.setAttribute('aria-selected', String(active))\n        navBtn.innerText = innerText\n        return navBtn\n    }\n\n    private appendNavFileTab(parent: HTMLDivElement, labelledBy: string) {\n        const navFileTab = WadFileSelectionModal.appendNavTab(parent, true, 'nav-file', labelledBy)\n\n        const wad0File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad0-file', 'LegoRR0.wad')\n        const wad1File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad1-file', 'LegoRR1.wad')\n\n        const btnStartFile = navFileTab.appendChild(document.createElement('button'))\n        btnStartFile.type = 'submit'\n        btnStartFile.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartFile.id = 'button-start-file'\n        btnStartFile.innerText = 'Start Game'\n        btnStartFile.addEventListener('click', () => {\n            btnStartFile.disabled = true\n            const wad0FileUrl = URL.createObjectURL(wad0File.files[0])\n            const wad1FileUrl = URL.createObjectURL(wad1File.files[0])\n            this.onStart(wad0FileUrl, wad1FileUrl)\n        })\n    }\n\n    private static appendWadFileGroup(parent: HTMLDivElement, id: string, filename: string) {\n        const wadFileGroup = parent.appendChild(document.createElement('div'))\n        wadFileGroup.classList.add('my-3')\n        const wadFileLabel = wadFileGroup.appendChild(document.createElement('label'))\n        wadFileLabel.setAttribute('for', id)\n        wadFileLabel.classList.add('form-label')\n        wadFileLabel.innerHTML = 'Select <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadFileInput = wadFileGroup.appendChild(document.createElement('input'))\n        wadFileInput.type = 'file'\n        wadFileInput.classList.add('form-control')\n        wadFileInput.id = id\n        wadFileInput.required = true\n        return wadFileInput\n    }\n\n    private appendNavUrlTab(parent: HTMLDivElement, labelledBy: string) {\n        const navUrlTab = WadFileSelectionModal.appendNavTab(parent, false, 'nav-url', labelledBy)\n\n        const urlHint = navUrlTab.appendChild(document.createElement('div'))\n        urlHint.classList.add('my-3')\n        urlHint.innerText = 'Direct links with correct Allow-Origin-CORS-Headers required here.'\n\n        const wad0Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad0-url', 'LegoRR0.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n        const wad1Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad1-url', 'LegoRR1.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n\n        const btnStartUrl = navUrlTab.appendChild(document.createElement('button'))\n        btnStartUrl.type = 'submit'\n        btnStartUrl.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartUrl.id = 'button-start-url'\n        btnStartUrl.innerText = 'Start Game'\n        btnStartUrl.addEventListener('click', () => {\n            btnStartUrl.disabled = true\n            // TODO show loading progress for WAD files\n            this.onStart(wad0Url.value, wad1Url.value)\n        })\n    }\n\n    private static appendNavTab(parent: HTMLDivElement, active: boolean, id: string, labelledBy: string) {\n        const navTab = parent.appendChild(document.createElement('div'))\n        navTab.classList.add('tab-pane', 'fade')\n        if (active) navTab.classList.add('show', 'active')\n        navTab.id = id\n        navTab.setAttribute('role', 'tabpanel')\n        navTab.setAttribute('aria-labelledby', labelledBy)\n        return navTab\n    }\n\n    private static appendWadUrlGroup(parent: HTMLDivElement, id: string, filename: string, example: string) {\n        const wadUrlGroup = parent.appendChild(document.createElement('div'))\n        wadUrlGroup.classList.add('my-3')\n        const wadUrlLabel = wadUrlGroup.appendChild(document.createElement('label'))\n        wadUrlLabel.setAttribute('for', id)\n        wadUrlLabel.classList.add('form-label')\n        wadUrlLabel.innerHTML = 'Enter url for <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadUrlInput = wadUrlGroup.appendChild(document.createElement('input'))\n        wadUrlInput.type = 'url'\n        wadUrlInput.classList.add('form-control')\n        wadUrlInput.id = id\n        wadUrlInput.required = true\n        wadUrlInput.value = example\n        return wadUrlInput\n    }\n\n    public show() {\n        this.modal.show()\n    }\n\n    public hide() {\n        this.modal.hide()\n    }\n\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"index.worker.js\");\n}\n","export class InitLoadingMessage {\n\n    wad0FileUrl: string\n    wad1FileUrl: string\n\n    constructor(wad0FileUrl: string, wad1FileUrl: string) {\n        this.wad0FileUrl = wad0FileUrl\n        this.wad1FileUrl = wad1FileUrl\n    }\n\n}\n","/**\n * creates a new context with the specified dimensions.\n * @param width: the desired width of the new context\n * @param height: the desired height of the new context\n * @returns RenderingContext the newly created canvas\n */\nexport function createContext(width, height) {\n    if (width < 1 || height < 1) {\n        console.error('Can\\'t create context with size ' + width + ' x ' + height);\n        return createDummyContext(64, 64);\n    }\n    const canvas = document.createElement('canvas');\n    canvas.setAttribute('width', width);\n    canvas.setAttribute('height', height);\n    const context = canvas.getContext('2d');\n    context.width = width;\n    context.height = height;\n    return context;\n}\n\n/**\n * This method is intended to increase stability by providing an (ugly) placeholder image in case the right one is missing\n * @param width: expected width of the original image\n * @param height: expected height of the original image\n */\nexport function createDummyContext(width, height) {\n    const result = createContext(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            if (x / 16 % 2 === y / 16 % 2) {\n                result.fillStyle = 'rgb(0,255,255)';\n            } else {\n                result.fillStyle = 'rgb(255,0,255)';\n            }\n            result.fillRect(x, y, 16, 16);\n        }\n    }\n    return result;\n}\n\nexport function createDummyImgData(width, height) {\n    const result = new ImageData(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            const e = x / 16 % 2 === y / 16 % 2;\n            for (let px = x; px < x + 16; px++) {\n                for (let py = y; py < y + 16; py++) {\n                    setPixel(result, px, py, e ? 0 : 255, e ? 255 : 0, 255);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport function setPixel(imgData, x, y, r, g, b, a = 255) {\n    const n = (y * imgData.width + x) * 4;\n    imgData.data[n] = r;\n    imgData.data[n + 1] = g;\n    imgData.data[n + 2] = b;\n    imgData.data[n + 3] = a;\n}\n\nexport function getPixel(imgData, x, y) {\n    const n = (y * imgData.width + x) * 4;\n    return {r: imgData.data[n], g: imgData.data[n + 1], b: imgData.data[n + 2], a: imgData.data[n + 3]};\n}\n\nexport function copyPixel(originData, targetData, x, y) {\n    const p = getPixel(originData);\n    setPixel(targetData, p.r, p.g, p.b, p.a);\n}\n","export function getPath(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n","export function getFilename(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '')\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/')\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max)\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2\n}\n","export class AnimationEntityType {\n\n    carryNullName: string = ''\n    mediumPoly: {} = {}\n    highPoly: {} = {}\n    fPPoly: {} = {}\n    activities = {}\n\n}\n","/**\n * @author Marcus-Bizal https://github.com/marcbizal\n * patched by Scarabol\n *\n * This loader loads LWOB files exported from LW6.\n *\n * Support\n *  -\n */\n\nimport { BufferAttribute, BufferGeometry, Color, DoubleSide, Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { decodeFilepath, decodeString, getFilename } from '../core/Util'\nimport { ResourceManager } from './ResourceManager'\n\n// HEADER SPEC //\nconst LWO_MAGIC = 0x4C574F42 // \"LWOB\"\nconst OFF_MAGIC = 8\n\n/********************/\n/* TYPE SIZES START */\n/********************/\n\nconst ID4_SIZE = 4\nconst I1_SIZE = 1\nconst I2_SIZE = 2\nconst I4_SIZE = 4\nconst F4_SIZE = 4\n\nconst COL4_SIZE = 4\nconst VEC12_SIZE = 12\nconst IP2_SIZE = 2\nconst FP4_SIZE = 4\nconst DEG4_SIZE = 4\n\n/********************/\n/*  TYPE SIZES END  */\n/********************/\n\n/*********************/\n/* CHUNK TYPES START */\n/*********************/\n\nconst LWO_FORM = 0x464F524D\nconst LWO_PNTS = 0x504E5453\nconst LWO_SFRS = 0x53524653\nconst LWO_POLS = 0x504F4C53\nconst LWO_CRVS = 0x43525653\nconst LWO_PCHS = 0x50434853\nconst LWO_SURF = 0x53555246\n\nconst CHUNK_HEADER_SIZE = 8\nconst SUBCHUNK_HEADER_SIZE = 6\n\n/*********************/\n/*  CHUNK TYPES END  */\n/*********************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\nconst SURF_COLR = 0x434F4C52\nconst SURF_FLAG = 0x464C4147\n\n// Base Shading Values (Fixed Point)\nconst SURF_LUMI = 0x4C554D49\nconst SURF_DIFF = 0x44494646\nconst SURF_SPEC = 0x53504543\nconst SURF_REFL = 0x5245464C\nconst SURF_TRAN = 0x5452414E\n\n// Base Shading Values (Floating Point)\nconst SURF_VLUM = 0x564C554D\nconst SURF_VDIF = 0x56444946\nconst SURF_VSPC = 0x56535043\nconst SURF_VRFL = 0x5646524C\nconst SURF_VTRN = 0x5654524E\n\nconst SURF_GLOS = 0x474C4F53\nconst SURF_RFLT = 0x52464C54\nconst SURF_RIMG = 0x52494D47\nconst SURF_RIND = 0x52494E44\nconst SURF_EDGE = 0x45444745\nconst SURF_SMAN = 0x534D414E\n\n/**************************/\n/*  SURF DEFINITIONS END  */\n/**************************/\n\n/*****************************/\n/* TEXTURE DEFINITIONS START */\n/*****************************/\n\n// Start of Definition\nconst SURF_CTEX = 0x43544558\nconst SURF_DTEX = 0x44544558\nconst SURF_STEX = 0x53544558\nconst SURF_RTEX = 0x52544558\nconst SURF_TTEX = 0x54544558\nconst SURF_LTEX = 0x4C544558\nconst SURF_BTEX = 0x42544558\n\n// Flags\nconst SURF_TFLG = 0x54464C47\n\n// Location and Size\nconst SURF_TSIZ = 0x5453495A\nconst SURF_TCTR = 0x54435452\nconst SURF_TFAL = 0x5446414C\nconst SURF_TVEL = 0x5456454C\n\n// Color\nconst SURF_TCLR = 0x54434C52\n\n// Value\nconst SURF_TVAL = 0x54434C52\n\n// Bump Amplitude\nconst SURF_TAMP = 0x54414D50\n\n// Image Map\nconst SURF_TIMG = 0x54494D47\n\n// Image Alpha\nconst SURF_TALP = 0x54414C50\n\n// Image Wrap Options\nconst SURF_TWRP = 0x54575250\n\n// Antialiasing Strength\nconst SURF_TAAS = 0x54414153\n\n// Texture Opacity\nconst SURF_TOPC = 0x544F5043\n\n/*****************************/\n/*  TEXTURE DEFINITIONS END  */\n/*****************************/\n\n/*************************/\n/* FLAG DEFINITION START */\n/*************************/\n\nconst LUMINOUS_BIT = 1\nconst OUTLINE_BIT = 2\nconst SMOOTHING_BIT = 4\nconst COLORHIGHLIGHTS_BIT = 8\nconst COLORFILTER_BIT = 16\nconst OPAQUEEDGE_BIT = 32\nconst TRANSPARENTEDGE_BIT = 64\nconst SHARPTERMINATOR_BIT = 128\nconst DOUBLESIDED_BIT = 256\nconst ADDITIVE_BIT = 512\nconst SHADOWALPHA_BIT = 1024\n\n/*************************/\n/*  FLAG DEFINITION END  */\n/*************************/\n\n/*************************/\n/* TFLG DEFINITION START */\n/*************************/\n\nconst XAXIS_BIT = 1\nconst YAXIS_BIT = 2\nconst ZAXIS_BIT = 4\nconst WORLDCOORDS_BIT = 8\nconst NEGATIVEIMAGE_BIT = 16\nconst PIXELBLENDING_BIT = 32\nconst ANTIALIASING_BIT = 64\n\n/*************************/\n/*  TFLG DEFINITION END  */\n\n/*************************/\n\nfunction getVector3AtOffset(view, offset) {\n    let vector = new Vector3()\n    vector.x = view.getFloat32(offset)\n    vector.y = view.getFloat32(offset + F4_SIZE)\n    vector.z = view.getFloat32(offset + (F4_SIZE * 2))\n    return vector\n}\n\nfunction planarMapUVS(geometry, vertices, uvs, indices, materialIndex, size, center, flags) {\n    // Check to ensure that one of the flags is set, if not throw an error.\n    const mask = XAXIS_BIT | YAXIS_BIT | ZAXIS_BIT\n    if (flags & mask) {\n        for (let group of geometry.groups) {\n            if (group.materialIndex !== materialIndex) continue\n\n            for (let i = group.start; i < group.start + group.count; i++) {\n\n                let vertexIndex = indices[i] * 3\n                let x = vertices[vertexIndex] - center.x\n                let y = vertices[vertexIndex + 1] - center.y\n                let z = vertices[vertexIndex + 2] - center.z\n\n                let uvIndex = indices[i] * 2\n                let u = 0\n                let v = 0\n\n                if (flags & XAXIS_BIT) {\n                    u = z / size.z + 0.5\n                    v = y / size.y + 0.5\n                } else if (flags & YAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = z / size.z + 0.5\n                } else if (flags & ZAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = y / size.y + 0.5\n                }\n\n                uvs[uvIndex] = u\n                uvs[uvIndex + 1] = v\n            }\n        }\n    } else {\n        // console.warn(\"LWOLoader.planarMapUVS: No axis bit is set!\"); // TODO what is this about\n    }\n}\n\nexport class LWOLoader {\n\n    COUNTER_CLOCKWISE: false\n\n    path: string = ''\n    verbose: boolean = false\n    materials: MeshPhongMaterial[] = []\n    geometry: BufferGeometry = new BufferGeometry()\n    vertices: Float32Array = null\n    indices: Uint16Array = null\n    uvs: Float32Array = null\n\n    constructor(path: string, verbose: boolean = false) {\n        this.verbose = verbose\n        this.path = path\n        if (this.verbose) console.log('LWO path: ' + this.path)\n    }\n\n    parsePoints(view, chunkOffset, chunkSize) {\n        if (chunkSize % VEC12_SIZE !== 0) {\n            console.error('LWOLoader.parse: F12 does not evenly divide into chunk size (' + chunkSize + '). Possible corruption.')\n            return\n        }\n\n        let numVertices = (chunkSize / F4_SIZE) / 3\n        this.vertices = new Float32Array(numVertices * 3)\n        this.uvs = new Float32Array(numVertices * 2)\n\n        for (let i = 0; i < numVertices; i++) {\n            let vertexIndex = i * 3\n            let vertexOffset = vertexIndex * F4_SIZE\n            this.vertices[vertexIndex] = view.getFloat32(chunkOffset + vertexOffset) \t\t\t\t// x\n            this.vertices[vertexIndex + 1] = view.getFloat32(chunkOffset + vertexOffset + F4_SIZE) \t// y\n            this.vertices[vertexIndex + 2] = view.getFloat32(chunkOffset + vertexOffset + (F4_SIZE * 2)) \t// z\n        }\n    }\n\n    parseSurfaceNames(buffer, chunkOffset, chunkSize) {\n        let textChunk = new TextDecoder().decode(new Uint8Array(buffer, chunkOffset, chunkSize))\n        let surfaceNames = textChunk.split('\\0').filter(function (s) {\n            return s !== ''\n        })\n\n        for (let i = 0; i < surfaceNames.length; i++) {\n            const new_material = new MeshPhongMaterial()\n            new_material.name = surfaceNames[i]\n            new_material.side = DoubleSide\n\n            this.materials.push(new_material)\n        }\n        if (this.verbose) console.log('LWO contains ' + this.materials.length + ' materials with following names: ' + surfaceNames)\n    }\n\n    parsePolygons(view, chunkOffset, chunkSize) {\n        // Gather some initial data so that we can get the proper size\n        let totalNumIndices = 0\n        let offset = 0\n        while (offset < chunkSize) {\n            const numIndices = view.getInt16(chunkOffset + offset)\n            const materialIndex = view.getInt16(chunkOffset + offset + 2 + (numIndices * 2))\n\n            this.geometry.addGroup(totalNumIndices, (numIndices - 2) * 3, materialIndex - 1)\n\n            totalNumIndices += (numIndices - 2) * 3\n            offset += 4 + (numIndices * 2)\n        }\n\n        offset = 0\n        let currentIndex = 0\n        this.indices = new Uint16Array(totalNumIndices)\n        while (offset < chunkSize) {\n            let numIndices = view.getInt16(chunkOffset + offset)\n\n            offset += 2\n\n            let faceIndices = new Int16Array(numIndices)\n            for (let i = 0; i <= numIndices; i++) {\n                faceIndices[i] = view.getInt16(chunkOffset + offset + (i * 2))\n            }\n\n            for (let i = 0; i < numIndices - 2; i++) {\n                if (this.COUNTER_CLOCKWISE) {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                } else {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                }\n            }\n\n            offset += 2 + (numIndices * 2)\n        }\n    }\n\n    parseSurface(view, buffer, chunkOffset, chunkSize) {\n        let offset = 0\n        while (view.getUint8(chunkOffset + offset) !== 0) offset++\n\n        let materialName = decodeString(new Uint8Array(buffer, chunkOffset, offset))\n        if (this.verbose) console.log('Parsing surface: ' + materialName)\n        let materialIndex = -1\n        let material: MeshPhongMaterial = null\n\n        let textureFlags = 0\n        let textureSize = new Vector3(0, 0, 0)\n        let textureCenter = new Vector3(0, 0, 0)\n        // let textureFalloff = new Vector3(0, 0, 0);\n        // let textureVelocity = new Vector3(0, 0, 0);\n\n        for (let i = 0; i < this.materials.length; i++) {\n            if (this.materials[i].name === materialName) {\n                materialIndex = i\n                material = this.materials[i]\n            }\n        }\n\n        if (!material) {\n            console.error('LWOLoader.parse: Surface in SURF chunk does not exist in SRFS')\n            return\n        }\n\n        while (offset < chunkSize) {\n            const subchunkOffset = chunkOffset + offset\n            if (view.getUint8(subchunkOffset) === 0) {\n                offset++\n            } else {\n                const subchunkType = view.getInt32(subchunkOffset)\n                const subchunkSize = view.getInt16(subchunkOffset + ID4_SIZE)\n\n                if (this.verbose) console.log('Parsing subchunk ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n\n                switch (subchunkType) {\n                    case SURF_COLR:\n                        const colorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        material.color = new Color().fromArray(colorArray)\n                        if (this.verbose) console.log('Material color (COLR): ' + colorArray.join(' '))\n                        break\n                    case SURF_FLAG:\n                        const flags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (FLAG): ' + flags.toString(2))\n                        break\n                    case SURF_LUMI:\n                        const luminosity = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        if (this.verbose) console.log('Luminosity (LUMI): ' + luminosity)\n                        break\n                    case SURF_DIFF:\n                        const diffuse = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        if (this.verbose) console.log('Diffuse (DIFF): ' + diffuse)\n                        break\n                    case SURF_SPEC:\n                        const specular = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        // material.specular = material.color.multiplyScalar(specular);\n                        if (this.verbose) console.log('Specular (SPEC): ' + specular)\n                        break\n                    case SURF_REFL:\n                        let reflection = 0\n                        if (reflection === SURF_VRFL) {\n                            reflection = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            reflection = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        }\n                        material.reflectivity = reflection\n                        if (this.verbose) console.log('Reflectivity (REFL): ' + material.reflectivity)\n                        break\n                    case SURF_TRAN:\n                    case SURF_VTRN:\n                        let transparency = 0\n                        if (subchunkType === SURF_VTRN) {\n                            transparency = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            transparency = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        }\n                        material.opacity = 1 - transparency\n                        if (this.verbose) console.log('Opacity (TRAN/VTRN): ' + material.opacity)\n                        if (transparency > 0) material.transparent = true\n                        break\n                    case SURF_VLUM:\n                        const luminosity2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Luminosity (VLUM): ' + luminosity2)\n                        break\n                    case SURF_VDIF:\n                        let diffuse2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Diffuse (VDIF): ' + diffuse2)\n                        break\n                    case SURF_VSPC:\n                        let specular2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        // material.specular = material.color.multiplyScalar(specular2);\n                        if (this.verbose) console.log('Specular (VSPC): ' + specular2)\n                        break\n                    case SURF_TFLG:\n                        textureFlags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (TFLG): ' + textureFlags.toString(2))\n                        break\n                    case SURF_TSIZ:\n                        textureSize = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Texture size (TSIZ): ' + textureSize.toArray().join(' '))\n                        break\n                    case SURF_TCTR:\n                        textureCenter = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Texture center (TCTR): ' + textureCenter.toArray().join(' '))\n                        break\n                    case SURF_CTEX:\n                    case SURF_DTEX:\n                    case SURF_STEX:\n                    case SURF_RTEX:\n                    case SURF_TTEX:\n                    case SURF_BTEX:\n                        const textureTypeName = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture typename: ' + textureTypeName)\n                        break\n                    case SURF_TCLR:\n                        const textureColorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        // const textureColor = new Color().fromArray(textureColorArray);\n                        // seems to be 0 0 0 anyway...\n                        if (this.verbose) console.log('Texture color (TCLR): ' + textureColorArray.join(' '))\n                        break\n                    case SURF_TIMG:\n                        let textureFilepath = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture filepath (TIMG): ' + textureFilepath)\n                        if (textureFilepath === '(none)') break\n                        let sequenceTexture = false\n                        if (textureFilepath.endsWith(' (sequence)')) {\n                            sequenceTexture = true\n                            textureFilepath = textureFilepath.substring(0, textureFilepath.length - ' (sequence)'.length)\n                        }\n                        let filename = getFilename(textureFilepath)\n                        const textureFilename = this.path + filename\n                        if (sequenceTexture) {\n                            const match = textureFilename.match(/(\\D+)0+(\\d+)\\..+/)\n                            const sequenceNames = ResourceManager.filterTextureSequenceNames(match[1])\n                            let seqNum = 0\n                            setInterval(() => { // TODO need to keep track on these intervals?\n                                material.map = ResourceManager.getTexture(sequenceNames[seqNum])\n                                seqNum++\n                                if (seqNum >= sequenceNames.length) seqNum = 0\n                            }, 1000 / 5) // TODO 5? FPS for texture animations?\n                            material.transparent = true\n                        }\n                        material.map = ResourceManager.getTexture(textureFilename)\n                        material.alphaTest = material.transparent ? 0 : 0.5\n                        material.color = null // no need for color, when color map (texture) in use\n                        break\n                    default: // TODO implement all LWO features\n                        if (this.verbose) console.warn('Found unrecognised SURF subchunk type ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n                        break\n                }\n\n                offset += SUBCHUNK_HEADER_SIZE + subchunkSize\n            }\n        }\n\n        planarMapUVS(this.geometry, this.vertices, this.uvs, this.indices, materialIndex, textureSize, textureCenter, textureFlags)\n    }\n\n    parse(buffer: ArrayBuffer): Mesh {\n        const view = new DataView(buffer)\n\n        if (view.getUint32(0) !== LWO_FORM) {\n            console.error('LWOLoader.parse: Cannot find header.')\n            return\n        }\n\n        const fileSize = view.getUint32(ID4_SIZE)\n        if (fileSize + CHUNK_HEADER_SIZE !== view.byteLength) {\n            console.warn('LWOLoader.parse: Discrepancy between size in header (' + (fileSize + CHUNK_HEADER_SIZE) + ' bytes) and actual size (' + view.byteLength + ' bytes).')\n        }\n\n        let magicOffset = ID4_SIZE + I4_SIZE\n        if (view.getUint32(magicOffset) !== LWO_MAGIC) {\n            const magic = decodeString(new Uint8Array(buffer, magicOffset, ID4_SIZE))\n            console.error('LWOLoader.parse: Invalid magic ID (' + magic + ') in LWO header.')\n            return\n        }\n\n        let cursor = 12\n        while (cursor < view.byteLength) {\n            // Skip null byte padding\n            if (view.getUint8(cursor) === 0) {\n                cursor++\n            } else {\n                const chunkType = view.getInt32(cursor)\n                const chunkSize = view.getInt32(cursor + ID4_SIZE)\n\n                cursor += CHUNK_HEADER_SIZE\n\n                switch (chunkType) {\n                    case LWO_PNTS:\n                        this.parsePoints(view, cursor, chunkSize)\n                        break\n                    case LWO_SFRS:\n                        this.parseSurfaceNames(buffer, cursor, chunkSize)\n                        break\n                    case LWO_POLS:\n                        this.parsePolygons(view, cursor, chunkSize)\n                        break\n                    case LWO_SURF:\n                        this.parseSurface(view, buffer, cursor, chunkSize)\n                        break\n                    default:\n                        console.warn('Found unrecognised chunk type ' + decodeString(new Uint8Array(buffer, cursor - CHUNK_HEADER_SIZE, ID4_SIZE)) + ' at ' + cursor)\n                }\n\n                cursor += chunkSize\n            }\n\n        }\n\n        this.geometry.setAttribute('position', new BufferAttribute(this.vertices, 3))\n        this.geometry.setAttribute('uv', new BufferAttribute(this.uvs, 2))\n        this.geometry.setIndex(new BufferAttribute(this.indices, 1))\n        this.geometry.computeVertexNormals()\n\n        return new Mesh(this.geometry, this.materials)\n    }\n}\n","import { Vector3 } from 'three'\n\nexport interface Selectable {\n\n    getSelectionType(): SelectionType;\n\n    select();\n\n    deselect(): any;\n\n    getSelectionCenter(): Vector3;\n\n}\n\nexport enum SelectionType {\n\n    SURFACE,\n    PILOT,\n    BUILDING,\n    VEHICLE,\n    GROUP,\n\n}\n","import { AnimSubObj } from './AnimSubObj'\n\nexport class AnimClip {\n\n    looping: boolean = false\n    transcoef: number = 1\n    firstFrame: number = null\n    lastFrame: number = null\n    framesPerSecond: number = null\n    bodies: AnimSubObj[] = []\n\n}\n","import { Euler, MathUtils, Object3D, Vector3 } from 'three'\nimport degToRad = MathUtils.degToRad\n\nexport class AnimSubObj {\n\n    name: string = ''\n    filename: string = ''\n    relPos: Vector3[] = []\n    relRot: Euler[] = []\n    relScale: Vector3[] = []\n    opacity: number[] = []\n    parentObjInd: number = null\n    model: Object3D = null\n\n    radVec(degX: number, degY: number, degZ: number) {\n        return new Euler(degToRad(degY), degToRad(degX), degToRad(degZ), 'YXZ')\n    }\n\n    setFrameAndFollowing(animationFrameIndex: number, lastFrame: number, infos: number[]) {\n        this.relPos[animationFrameIndex] = new Vector3(infos[0], infos[1], infos[2])\n        this.relRot[animationFrameIndex] = this.radVec(infos[3], infos[4], infos[5])\n        this.relScale[animationFrameIndex] = new Vector3(infos[6], infos[7], infos[8])\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.relPos[c] = this.relPos[animationFrameIndex]\n            this.relRot[c] = this.relRot[animationFrameIndex]\n            this.relScale[c] = this.relScale[animationFrameIndex]\n        }\n    }\n\n    setOpacityAndFollowing(animationFrameIndex: number, lastFrame: number, value: number) {\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.opacity[c] = value\n        }\n    }\n\n}\n","/**\n * @author Scarabol https://github.com/scarabol\n *\n * This loader loads LWSC files exported from LW\n *\n * File format description: http://www.martinreddy.net/gfx/3d/LWSC.txt\n */\n\nimport { AnimClip } from '../scene/model/anim/AnimClip'\nimport { AnimSubObj } from '../scene/model/anim/AnimSubObj'\nimport { Group } from 'three'\nimport { getFilename } from '../core/Util'\nimport { ResourceManager } from './ResourceManager'\nimport { LWOLoader } from './LWOLoader'\n\nexport class LWSCLoader {\n\n    path: string = ''\n    verbose: boolean = false\n    animationClip: AnimClip = new AnimClip()\n    lines: string[] = []\n    lineIndex: number = 0\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('Using verbose mode')\n    }\n\n    parse(content): AnimClip {\n        this.lines = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map(l => l.trim())\n\n        if (this.lines[0] !== 'LWSC') {\n            throw 'Invalid start of file! Expected \\'LWSC\\' in first line'\n        }\n\n        const numOfModels = parseInt(this.lines[1], 10) // TODO is this correct? May be something else\n        if (numOfModels !== 1) {\n            console.warn('Number of models has unexpected value: ' + numOfModels)\n        }\n\n        for (this.lineIndex = 2; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) continue // empty line: object separator\n            const key = line.split(' ')[0]\n            if (key === 'FirstFrame') {\n                this.parseFrameBlock()\n            } else if (key === 'AddNullObject' || key === 'LoadObject') {\n                this.parseObjectBlock()\n                if (this.verbose) console.log(this.animationClip.bodies[this.animationClip.bodies.length - 1])\n            } else if (line.startsWith('PreviewFirstFrame ') || line.startsWith('PreviewLastFrame ') || line.startsWith('PreviewFrameStep ')) {\n                // only used in editor\n            } else {\n                // console.warn('Unexpected line: ' + line); // TODO debug logging, analyze remaining entries\n            }\n        }\n\n        if (this.verbose) console.log(this.animationClip)\n        return this.animationClip\n    }\n\n    parseLine(line: string): string[] {\n        return line.split(' ').filter((l: string) => l !== '')\n    }\n\n    parseFrameBlock() {\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            const line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'FirstFrame') {\n                this.animationClip.firstFrame = parseInt(value)\n            } else if (key === 'LastFrame') {\n                this.animationClip.lastFrame = parseInt(value)\n            } else if (key === 'FrameStep') {\n                const frameStep = parseInt(value)\n                if (frameStep !== 1) console.error('Animation frameStep has unexpected value: ' + frameStep)\n            } else if (key === 'FramesPerSecond') {\n                this.animationClip.framesPerSecond = parseInt(value)\n            } else if (key === 'PreviewFirstFrame' || key === 'PreviewLastFrame' || key === 'PreviewFrameStep') {\n                // only used in editor\n            } else {\n                console.warn('Unexpected key in frame block')\n            }\n        }\n        console.error('Parsing block reached content end')\n    }\n\n    parseObjectBlock(): AnimSubObj {\n        const subObj = new AnimSubObj()\n        this.animationClip.bodies.push(subObj)\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'AddNullObject' || key === 'LoadObject') {\n                if (key === 'LoadObject') {\n                    const filename = getFilename(value)\n                    subObj.name = filename.slice(0, filename.length - '.lwo'.length)\n                    subObj.filename = this.path + filename\n                    // TODO do not parse twice, read from cache first\n                    const lwoBuffer = ResourceManager.getResource(subObj.filename)\n                    subObj.model = new LWOLoader(this.path).parse(lwoBuffer)\n                } else if (key === 'AddNullObject') {\n                    subObj.name = value\n                    subObj.model = new Group()\n                } else {\n                    throw 'Unexpected line: ' + line\n                }\n            } else if (key === 'ObjectMotion') {\n                let line = this.lines[++this.lineIndex]\n                const lenInfos = parseInt(line)\n                line = this.lines[++this.lineIndex]\n                const lenFrames = parseInt(line)\n                this.lineIndex++\n                for (let c = 0; c < lenFrames; c++) {\n                    let line = this.lines[this.lineIndex + c * 2]\n                    if (line.startsWith('EndBehavior')) break\n                    const infos = line.split(' ').map(Number)\n                    if (infos.length !== lenInfos) console.warn('Number of infos (' + infos.length + ') does not match if specified count (' + lenInfos + ')')\n                    line = this.lines[this.lineIndex + c * 2 + 1]\n                    const animationFrameIndex = parseInt(line.split(' ')[0]) // other entries in line should be zeros\n                    subObj.setFrameAndFollowing(animationFrameIndex, this.animationClip.lastFrame, infos)\n                }\n                this.lineIndex += lenFrames * 2\n            } else if (key === 'ParentObject') {\n                subObj.parentObjInd = Number(value) - 1 // index is 1 based\n                if (this.verbose) console.log('parent obj ind is: ' + subObj.parentObjInd)\n            } else if (key === 'ShowObject ' || key === 'LockedChannels') {\n                // only used in editor\n            } else if (key === 'ShadowOptions') { // TODO implement shadow options (bitwise)\n                // 0 - Self Shadow\n                // 1 - Cast Shadow\n                // 2 - Receive Shadow\n            } else if (key === 'ObjDissolve') {\n                if (value == '(envelope)') {\n                    let line = this.lines[++this.lineIndex]\n                    const numOfInformationChannels = parseInt(line)\n                    if (numOfInformationChannels !== 1) console.error('Number of information channels for opacity is not 1, but: ' + numOfInformationChannels)\n                    line = this.lines[++this.lineIndex]\n                    const numOfKeyframes = parseInt(line)\n                    this.lineIndex++\n                    for (let c = 0; c < numOfKeyframes; c++) {\n                        let line = this.lines[this.lineIndex + c * 2]\n                        if (line.startsWith('EndBehavior')) break\n                        const opacity = 1 - Number(line)\n                        line = this.lines[this.lineIndex + c * 2 + 1]\n                        const frameNum = Number(line.split(' ')[0])\n                        subObj.setOpacityAndFollowing(frameNum, this.animationClip.lastFrame, opacity)\n                    }\n                    this.lineIndex += numOfKeyframes * 2\n                } else {\n                    const opacity = 1 - Number(value)\n                    subObj.setOpacityAndFollowing(0, this.animationClip.lastFrame, opacity)\n                }\n            } else {\n                // console.log('Unhandled line in object block: ' + line); // TODO debug logging\n            }\n        }\n        console.error('Parsing block reached content end')\n        return subObj\n    }\n\n}\n","const Stats = require('stats.js')\n\nexport class DebugHelper {\n\n    stats\n\n    constructor() {\n        this.stats = new Stats()\n        this.stats.setMode(0) // 0: fps, 1: ms\n\n        this.stats.domElement.style.position = 'absolute'\n        this.stats.domElement.style.left = '0px'\n        this.stats.domElement.style.top = '0px'\n\n        document.body.appendChild(this.stats.domElement)\n        this.hide()\n    }\n\n    show() {\n        this.stats.domElement.style.visibility = 'visible'\n    }\n\n    hide() {\n        this.stats.domElement.style.visibility = 'hidden'\n    }\n\n    renderStart() {\n        this.stats.begin()\n    }\n\n    renderDone() {\n        this.stats.end()\n    }\n\n}\n","export class Building {\n\n    static readonly TOOLSTATION = new Building('Buildings/Toolstation', 130, 10, true)\n    static readonly TELEPORT_PAD = new Building('Buildings/Teleports') // TODO test with level 25\n    static readonly POWER_STATION = new Building('Buildings/Powerstation') // TODO test with level 09\n    static readonly SUPPORT = new Building('Buildings/Support')\n    static readonly UPGRADE = new Building('Buildings/Upgrade') // TODO test with level 09\n    static readonly REFINERY = new Building('Buildings/Refinery')\n    static readonly GEODOME = new Building('Buildings/Geo-dome') // TODO test with level 25\n\n    name: string\n    aeFile: string\n    dropPosAngleDeg: number = 0\n    dropPosDist: number = 0\n    selfPowered: boolean = false\n    maxUpgrades: number = 2 // TODO read from cfg\n\n    constructor(name: string, dropPosAngleDeg: number = 0, dropPosDist: number = 0, selfPowered: boolean = false) {\n        this.name = name\n        this.aeFile = name + '/' + name.slice(name.lastIndexOf('/') + 1) + '.ae'\n        this.dropPosAngleDeg = dropPosAngleDeg\n        this.dropPosDist = dropPosDist\n        this.selfPowered = selfPowered\n    }\n\n    static getByName(buildingType: string) {\n        const typename = buildingType.slice(buildingType.lastIndexOf('/') + 1).toLowerCase()\n        switch (typename) {\n            case 'toolstation':\n                return this.TOOLSTATION\n            case 'teleports':\n                return this.TELEPORT_PAD\n            case 'upgrade':\n                return this.UPGRADE\n            case 'powerstation':\n                return this.POWER_STATION\n            case 'support':\n                return this.SUPPORT\n            case 'refinery':\n                return this.REFINERY\n            case 'geo-dome':\n                return this.GEODOME\n            default:\n                throw 'Unknown building type: ' + buildingType\n        }\n    }\n\n}\n","import { WorldManager } from '../WorldManager'\nimport { Euler, Group, Vector3 } from 'three'\n\nexport class BaseEntity {\n\n    worldMgr: WorldManager\n    group: Group = new Group()\n    sequenceIntervals = []\n\n    constructor() {\n        // this.group.add(new AxesHelper(40)); // TODO debug orientations and possible x-axis flip\n    }\n\n    getPosition() {\n        return new Vector3().copy(this.group.position)\n    }\n\n    getRotation() {\n        return new Euler().copy(this.group.rotation)\n    }\n\n    onDiscover() {\n        this.group.visible = true\n    }\n\n}\n","import { GameEvent } from './EventBus'\nimport { Job } from '../game/model/job/Job'\nimport { CollectableEntity, CollectableType } from '../scene/model/collect/CollectableEntity'\nimport { AnimEntity } from '../scene/model/anim/AnimEntity'\nimport { Vector3 } from 'three'\nimport { Surface } from '../scene/model/map/Surface'\n\nexport class WorldEvent extends GameEvent {\n\n    constructor(entityKey: string) {\n        super(entityKey)\n        this.isLocal = false\n    }\n\n}\n\nexport class JobEvent extends WorldEvent {\n\n    job: Job\n\n    constructor(eventKey: string, job: Job) {\n        super(eventKey)\n        this.job = job\n    }\n\n}\n\nexport class JobCreateEvent extends JobEvent {\n\n    static eventKey = 'job.create'\n\n    constructor(job: Job) {\n        super(JobCreateEvent.eventKey, job)\n    }\n\n}\n\nexport class JobDeleteEvent extends JobEvent {\n\n    static eventKey = 'job.delete'\n\n    constructor(job: Job) {\n        super(JobDeleteEvent.eventKey, job)\n    }\n\n}\n\nexport class RaiderRequested extends WorldEvent {\n\n    static eventKey = 'raider.request'\n\n    numRequested: number = 0\n\n    constructor(numRequested: number) {\n        super(RaiderRequested.eventKey)\n        this.numRequested = numRequested\n    }\n\n}\n\nexport class CollectEvent extends WorldEvent {\n\n    static eventKey = 'item.collected'\n\n    collectType: CollectableType\n\n    constructor(collectType: CollectableType) {\n        super(CollectEvent.eventKey)\n        this.collectType = collectType\n    }\n\n}\n\nexport class SpawnDynamiteEvent extends WorldEvent {\n\n    static eventKey = 'spawn.dynamite'\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(SpawnDynamiteEvent.eventKey)\n        this.surface = surface\n    }\n\n}\n\nexport class SpawnMaterialEvent extends WorldEvent {\n\n    static eventKey = 'spawn.material'\n\n    collectable: CollectableEntity\n    spawnPosition: Vector3\n\n    constructor(collectable: CollectableEntity, spawnPosition: Vector3) {\n        super(SpawnMaterialEvent.eventKey)\n        this.collectable = collectable\n        this.spawnPosition = spawnPosition\n    }\n\n}\n\nexport class EntityAddedEvent extends WorldEvent {\n\n    static eventKey = 'added.entity'\n\n    type: EntityType\n    entity: AnimEntity\n\n    constructor(type: EntityType, entity: AnimEntity) {\n        super(EntityAddedEvent.eventKey)\n        this.type = type\n        this.entity = entity\n    }\n\n}\n\nexport class EntityRemovedEvent extends WorldEvent {\n\n    static eventKey = 'remove.entity'\n\n    type: EntityType\n    entity: AnimEntity\n\n    constructor(type: EntityType, entity: AnimEntity) {\n        super(EntityRemovedEvent.eventKey)\n        this.type = type\n        this.entity = entity\n    }\n\n}\n\nexport enum EntityType {\n\n    RAIDER,\n    VEHICLE,\n    BUILDING,\n\n}\n\nexport class CavernDiscovered extends WorldEvent {\n\n    static eventKey = 'cavern.discovered'\n\n    constructor() {\n        super(CavernDiscovered.eventKey)\n    }\n\n}\n\nexport class OreFoundEvent extends WorldEvent {\n\n    static eventKey = 'ore.found'\n\n    constructor() {\n        super(OreFoundEvent.eventKey)\n    }\n\n}\n","export class EventBus {\n\n    static eventListener = {}\n    static blockedEvents = []\n\n    static publishEvent(event: GameEvent) {\n        if (this.blockedEvents.includes(event.eventKey)) return // event is currently blocked from publishing\n        if (!event.isLocal) console.log('Event published: ' + event.eventKey)\n        this.blockedEvents.push(event.eventKey);\n        (this.eventListener[event.eventKey] || []).forEach((callback) => callback(event))\n        const index = this.blockedEvents.indexOf(event.eventKey)\n        if (index > -1) this.blockedEvents.splice(index, 1)\n    }\n\n    static registerEventListener(eventKey: string, callback: (GameEvent) => any) {\n        this.eventListener[eventKey] = this.eventListener[eventKey] || []\n        this.eventListener[eventKey].push(callback)\n    }\n\n}\n\nexport class GameEvent {\n\n    eventKey: string\n    isLocal: boolean\n\n    constructor(eventKey: string) {\n        this.eventKey = eventKey\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { CollectableEntity, CollectableType, CollectTargetType } from '../../../scene/model/collect/CollectableEntity'\nimport { JOB_ACTION_RANGE, RAIDER_SPEED } from '../../../main'\nimport { GameState } from '../GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { CollectEvent } from '../../../event/WorldEvents'\nimport { FulfillerEntity } from '../../../scene/model/FulfillerEntity'\nimport { Building } from '../entity/building/Building'\n\nexport enum JobType {\n\n    SURFACE,\n    CARRY,\n    MOVE,\n\n}\n\nexport enum JobState {\n\n    OPEN,\n    COMPLETE,\n    CANCELED,\n\n}\n\nexport abstract class Job {\n\n    type: JobType\n    jobstate: JobState\n    fulfiller: FulfillerEntity[] = []\n\n    protected constructor(type: JobType) {\n        this.type = type\n        this.jobstate = JobState.OPEN\n    }\n\n    assign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller)\n        if (fulfiller && index === -1) {\n            this.fulfiller.push(fulfiller)\n        }\n    }\n\n    unassign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller)\n        if (index > -1) this.fulfiller.splice(index, 1)\n    }\n\n    cancel() {\n        this.jobstate = JobState.CANCELED\n        const fulfiller = this.fulfiller // ensure consistency while processing\n        this.fulfiller = []\n        fulfiller.forEach((fulfiller) => fulfiller.stopJob())\n    }\n\n    isQualified(fulfiller: FulfillerEntity): boolean {\n        return true\n    }\n\n    onJobComplete() {\n        this.jobstate = JobState.COMPLETE\n    }\n\n    abstract getPosition(): Vector3; // TODO job system in 2d should be sufficient and decouple from three for deps and worker reasons\n\n    abstract isInArea(x: number, z: number): boolean;\n\n}\n\nexport class CollectJob extends Job {\n\n    item: CollectableEntity\n\n    constructor(item: CollectableEntity) {\n        super(JobType.CARRY)\n        this.item = item\n    }\n\n    getPosition(): Vector3 {\n        return this.item.getPosition()\n    }\n\n    isInArea(x: number, z: number): boolean {\n        const pos = this.getPosition()\n        return pos.sub(new Vector3(x, pos.y, z)).length() < JOB_ACTION_RANGE\n    }\n\n    isQualified(fulfiller: FulfillerEntity) {\n        return fulfiller.carries === null && !!this.item.getTargetPos()\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        if (this.item.getTargetType() === Building.TOOLSTATION) {\n            switch (this.item.getCollectableType()) {\n                case CollectableType.CRYSTAL:\n                    GameState.numCrystal++\n                    EventBus.publishEvent(new CollectEvent(this.item.getCollectableType()))\n                    break\n                case CollectableType.ORE:\n                    GameState.numOre++\n                    EventBus.publishEvent(new CollectEvent(this.item.getCollectableType()))\n                    break\n            }\n        } else if (this.item.getTargetType() === CollectTargetType.BUILDING_SITE) {\n            this.item.targetSite.addItem(this.item)\n        } else {\n            console.error('target type not yet implemented: ' + this.item.getTargetType())\n        }\n    }\n\n}\n\nexport class MoveJob extends Job {\n\n    target: Vector3\n\n    constructor(target: Vector3) {\n        super(JobType.MOVE)\n        this.target = target\n    }\n\n    getPosition(): Vector3 {\n        return new Vector3().copy(this.target)\n    }\n\n    isInArea(x: number, z: number) {\n        return this.getPosition().sub(new Vector3(x, this.target.y, z)).lengthSq() < RAIDER_SPEED * RAIDER_SPEED\n    }\n\n}\n","import { BaseEntity } from '../BaseEntity'\nimport { GameState } from '../../../game/model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { CollectJob } from '../../../game/model/job/Job'\nimport { Carryable } from './Carryable'\nimport { Vector3 } from 'three'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { BuildingSite } from '../BuildingSite'\n\nexport abstract class CollectableEntity extends BaseEntity implements Carryable {\n\n    collectableType: CollectableType\n    targetSite: BuildingSite\n    targetBuilding: BuildingEntity\n    targetPos: Vector3 = null\n    targetType: CollectTargetType | Building\n\n    protected constructor(collectableType: CollectableType) {\n        super()\n        this.collectableType = collectableType\n    }\n\n    abstract getTargetBuildingTypes(): Building[];\n\n    getTargetPos(): Vector3 {\n        if (!this.targetPos) {\n            const site = GameState.getClosestSiteThatRequires(this.getPosition(), this.getCollectableType())\n            if (site) {\n                this.targetSite = site\n                this.targetPos = site.getPosition()\n                this.targetType = CollectTargetType.BUILDING_SITE\n                site.assign(this)\n            } else {\n                const targetBuilding = GameState.getClosestBuildingByType(this.getPosition(), ...this.getTargetBuildingTypes())\n                if (targetBuilding) {\n                    this.targetBuilding = targetBuilding\n                    this.targetPos = targetBuilding.getDropPosition()\n                    this.targetType = targetBuilding.type\n                }\n            }\n        } else if (this.targetSite) {\n            if (this.targetSite.complete) this.resetTarget()\n        } else if (this.targetBuilding) {\n            // TODO check if building has been teleported away or turned off\n        }\n        return this.targetPos\n    }\n\n    getTargetType(): CollectTargetType | Building {\n        return this.targetType\n    }\n\n    resetTarget() {\n        if (this.targetSite) this.targetSite.unAssign(this)\n        this.targetSite = null\n        this.targetBuilding = null\n        this.targetPos = null\n        this.targetType = null\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        const index = GameState.collectablesUndiscovered.indexOf(this)\n        if (index !== -1) GameState.collectablesUndiscovered.splice(index, 1)\n        GameState.collectables.push(this)\n        EventBus.publishEvent(new JobCreateEvent(new CollectJob(this)))\n    }\n\n    getCollectableType(): CollectableType {\n        return this.collectableType\n    }\n\n}\n\nexport enum CollectableType {\n\n    DYNAMITE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n\n}\n\nexport enum CollectTargetType {\n\n    SURFACE,\n    BUILDING_SITE,\n\n}\n","import { BuildingEntity } from '../../scene/model/BuildingEntity'\nimport { Building } from './entity/building/Building'\nimport { Selectable, SelectionType } from './Selectable'\nimport { Raider } from '../../scene/model/Raider'\nimport { VehicleEntity } from '../../scene/model/VehicleEntity'\nimport { CollectableEntity, CollectableType } from '../../scene/model/collect/CollectableEntity'\nimport { Vector3 } from 'three'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../../main'\nimport { Surface } from '../../scene/model/map/Surface'\nimport { BaseEntity } from '../../scene/model/BaseEntity'\nimport { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { BuildingSite } from '../../scene/model/BuildingSite'\nimport { Dynamite } from '../../scene/model/collect/Dynamite'\nimport { Crystal } from '../../scene/model/collect/Crystal'\nimport { Ore } from '../../scene/model/collect/Ore'\nimport { LevelRewardConfig } from '../../cfg/LevelsCfg'\nimport { PriorityList } from './job/PriorityList'\n\nexport enum GameResultState {\n\n    RUNNING,\n    COMPLETE,\n    FAILED,\n    CANCELED,\n\n}\n\nexport class GameState {\n\n    static resultState: GameResultState = GameResultState.RUNNING\n    static levelFullName: string = ''\n    static numCrystal: number = 0\n    static numOre: number = 0\n    static numBrick: number = 0\n    static usedCrystals: number = 0\n    static neededCrystals: number = 0\n    static airlevel: number = 1 // airlevel in percent from 0 to 1.0\n    static selectedEntities: Selectable[] = []\n    static selectionType: SelectionType = null\n    static buildings: BuildingEntity[] = []\n    static buildingsUndiscovered: BuildingEntity[] = []\n    static raiders: Raider[] = []\n    static raidersUndiscovered: Raider[] = []\n    static requestedRaiders: number = 0\n    static vehicles: VehicleEntity[] = []\n    static vehiclesUndiscovered: VehicleEntity[] = []\n    static collectables: CollectableEntity[] = []\n    static collectablesUndiscovered: CollectableEntity[] = []\n    static buildingSites: BuildingSite[] = []\n    static totalCrystals: number = 0\n    static totalOres: number = 0\n    static totalDiggables: number = 0\n    static remainingDiggables: number = 0\n    static totalCaverns: number = 0\n    static discoveredCaverns: number = 0\n    static levelStartTime: number = 0\n    static levelStopTime: number = 0\n    static rewardConfig: LevelRewardConfig = null\n    static priorityList: PriorityList = null\n\n    static reset() {\n        this.resultState = GameResultState.RUNNING\n        this.levelFullName = ''\n        this.numCrystal = 0\n        this.numOre = 0\n        this.numBrick = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.airlevel = 1\n        this.selectedEntities = []\n        this.selectionType = null\n        this.buildings = []\n        this.buildingsUndiscovered = []\n        this.raiders = []\n        this.raidersUndiscovered = []\n        this.requestedRaiders = 0\n        this.vehicles = []\n        this.vehiclesUndiscovered = []\n        this.collectables = []\n        this.collectablesUndiscovered = []\n        this.buildingSites = []\n        this.totalCrystals = 0\n        this.totalOres = 0\n        this.totalDiggables = 0\n        this.remainingDiggables = 0\n        this.totalCaverns = 0\n        this.discoveredCaverns = 0\n        this.levelStartTime = 0\n        this.levelStopTime = 0\n        this.rewardConfig = null\n        this.priorityList = null\n    }\n\n    static getBuildingsByType(...buildingTypes: Building[]): BuildingEntity[] {\n        return this.buildings.filter(b => b.isPowered() && buildingTypes.some(bt => b.type === bt))\n    }\n\n    static getClosestBuildingByType(position: Vector3, ...buildingTypes: Building[]): BuildingEntity {\n        const targetBuildings = GameState.getBuildingsByType(...buildingTypes)\n        let closest = null, minDist = null\n        targetBuildings.forEach((b) => {\n            const bPos = b.getDropPosition()\n            const dist = new Vector3().copy(position).sub(bPos).lengthSq()\n            if (closest === null || dist < minDist) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static getClosestSiteThatRequires(position: Vector3, collectableType: CollectableType): BuildingSite {\n        let closest = null, minDist = null\n        this.buildingSites.forEach((b) => {\n            const bPos = b.getPosition()\n            const dist = new Vector3().copy(position).sub(bPos).lengthSq()\n            if ((closest === null || dist < minDist) && b.needs(collectableType)) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static selectEntities(entities: Selectable[]) {\n        // deselect and remove entities that are not selected anymore\n        this.selectedEntities.filter((e) => entities.indexOf(e) === -1).forEach((e) => e.deselect())\n        this.selectedEntities = this.selectedEntities.filter((e) => entities.indexOf(e) !== -1)\n        // add and select new entities (if they are selectable)\n        this.selectedEntities.push(...(entities.filter((e) => e.select())))\n        // determine and set next selection type\n        const len = this.selectedEntities.length\n        if (len > 1) {\n            this.selectionType = SelectionType.GROUP\n        } else if (len === 1) {\n            this.selectionType = this.selectedEntities[0].getSelectionType()\n        } else if (this.selectionType !== null) {\n            this.selectionType = null\n            EventBus.publishEvent(new EntityDeselected())\n        }\n    }\n\n    static getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + this.getBuildingsByType(Building.SUPPORT).length * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    static discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE\n        this.discoverEntities(this.raidersUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.buildingsUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.vehiclesUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.collectablesUndiscovered, minX, maxX, minZ, maxZ)\n    }\n\n    static discoverEntities(undiscovered: BaseEntity[], minX, maxX, minZ, maxZ) {\n        const discovered = []\n        undiscovered.forEach((e) => {\n            const pos = e.getPosition()\n            if (pos.x >= minX && pos.x < maxX && pos.z >= minZ && pos.z < maxZ) {\n                e.onDiscover()\n                discovered.push(e)\n            }\n        })\n        discovered.forEach((r) => {\n            const index = undiscovered.indexOf(r)\n            if (index !== -1) undiscovered.splice(index, 1)\n        })\n    }\n\n    static dropMaterial(type: CollectableType, quantity: number): CollectableEntity[] {\n        const result = []\n        if (type === CollectableType.DYNAMITE) {\n            for (let c = 0; c < quantity; c++) result.push(new Dynamite())\n        } else if (type === CollectableType.CRYSTAL) {\n            while (GameState.numCrystal > 0 && result.length < quantity) {\n                GameState.numCrystal--\n                result.push(new Crystal())\n            }\n        } else if (type === CollectableType.ORE) {\n            while (GameState.numOre > 0 && result.length < quantity) {\n                GameState.numOre--\n                result.push(new Ore())\n            }\n        } else {\n            console.error('Material drop not yet implemented: ' + type)\n        }\n        return result\n    }\n\n    static get gameTimeSeconds() {\n        return Math.round((GameState.levelStopTime - GameState.levelStartTime) / 1000)\n    }\n\n    static get score() {\n        if (!GameState.rewardConfig) return 0\n        let quota = GameState.rewardConfig.quota\n        let importance = GameState.rewardConfig.importance\n        const scoreCrystals = GameState.numCrystal >= (quota.crystals || Infinity) ? importance.crystals : 0\n        const scoreTimer = GameState.gameTimeSeconds <= (quota.timer || 0) ? importance.timer : 0\n        const scoreCaverns = quota.caverns ? Math.min(1, GameState.discoveredCaverns / quota.caverns) * importance.caverns : 0\n        const scoreConstructions = quota.constructions ? Math.min(1, GameState.buildings.length / quota.constructions * importance.constructions) : 0\n        const scoreOxygen = GameState.airlevel * importance.oxygen\n        const scoreFigures = GameState.raiders.length >= MAX_RAIDER_BASE ? importance.figures : 0\n        return Math.round(scoreCrystals + scoreTimer + scoreCaverns + scoreConstructions + scoreOxygen + scoreFigures) / 100\n    }\n\n    static get selectedSurface(): Surface {\n        return this.selectionType === SelectionType.SURFACE && this.selectedEntities.length > 0 ? this.selectedEntities[0] as Surface : null\n    }\n\n    static get selectedBuilding(): BuildingEntity {\n        return this.selectionType === SelectionType.BUILDING && this.selectedEntities.length > 0 ? this.selectedEntities[0] as BuildingEntity : null\n    }\n\n}\n","import { GameEvent } from './EventBus'\nimport { BuildingEntity } from '../scene/model/BuildingEntity'\nimport { Surface } from '../scene/model/map/Surface'\nimport { Raider } from '../scene/model/Raider'\nimport { VehicleEntity } from '../scene/model/VehicleEntity'\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: string) {\n        super(eventKey)\n        this.isLocal = true\n    }\n\n}\n\nexport class SurfaceSelectedEvent extends LocalEvent {\n\n    static eventKey: string = 'surface.selected'\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(SurfaceSelectedEvent.eventKey)\n        this.surface = surface\n    }\n\n}\n\nexport class BuildingSelected extends LocalEvent {\n\n    static eventKey: string = 'building.selected'\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(BuildingSelected.eventKey)\n        this.building = building\n    }\n\n}\n\nexport class RaiderSelected extends LocalEvent {\n\n    static eventKey: string = 'raider.select'\n\n    raider: Raider\n\n    constructor(raider: Raider) {\n        super(RaiderSelected.eventKey)\n        this.raider = raider\n    }\n\n}\n\nexport class VehicleSelected extends LocalEvent {\n\n    static eventKey: string = 'vehicle.select'\n\n    vehicle: VehicleEntity\n\n    constructor(vehicle: VehicleEntity) {\n        super(VehicleSelected.eventKey)\n        this.vehicle = vehicle\n    }\n\n}\n\nexport class EntityDeselected extends LocalEvent {\n\n    static eventKey: string = 'entity.deselect'\n\n    constructor() {\n        super(EntityDeselected.eventKey)\n    }\n\n}\n","import { Box3, CanvasTexture, Mesh, MeshBasicMaterial, MeshPhongMaterial, Object3D, SphereGeometry, Sprite, SpriteMaterial, Vector3 } from 'three'\nimport { AnimClip } from './AnimClip'\nimport { iGet } from '../../../core/Util'\nimport { AnimationEntityType } from './AnimationEntityType'\nimport { BaseEntity } from '../BaseEntity'\nimport { AnimSubObj } from './AnimSubObj'\n\nexport abstract class AnimEntity extends BaseEntity {\n\n    entityType: AnimationEntityType = null\n    poly: Object3D[] = []\n    animation: AnimClip = null\n    animationTimeout: NodeJS.Timeout = null\n    selectionFrame: Sprite = null\n    pickSphere: Mesh = null\n    pickSphereRadius: number = 10\n    selectionFrameSize: number = 10\n    carryJoint: Object3D = null\n\n    protected constructor(entityType: AnimationEntityType) {\n        super()\n        this.entityType = entityType\n    }\n\n    setActivity(keyname, onAnimationDone = null, iterations = 1) {\n        if (this.animationTimeout) {\n            clearTimeout(this.animationTimeout)\n            this.animationTimeout = null\n        }\n        const activity = iGet(this.entityType.activities, keyname)\n        if (!activity) {\n            console.error('Activity \\'' + keyname + '\\' unknown')\n            console.log(this.entityType.activities)\n            return\n        }\n        if (activity.animation) {\n            this.animation = activity.animation\n            this.group.remove(...this.poly)\n            this.poly = []\n            const carries = (this.carryJoint && this.carryJoint.children) || []\n            this.carryJoint = null\n            // bodies are defined in animation and second in high/medium/low poly groups\n            this.animation.bodies.forEach((body) => {\n                let model: Object3D = iGet(this.entityType.highPoly, body.name)\n                if (!model) model = iGet(this.entityType.mediumPoly, body.name)\n                if (!model) model = body.model\n                const polyModel = model.clone(true)\n                this.poly.push(polyModel)\n                if (this.entityType.carryNullName && body.name && this.entityType.carryNullName.toLowerCase() === body.name.toLowerCase()) {\n                    this.carryJoint = polyModel\n                    if (carries.length > 0) this.carryJoint.add(...carries)\n                }\n            })\n            this.animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n                const polyPart = this.poly[index]\n                const parentInd = body.parentObjInd\n                if (parentInd !== undefined && parentInd !== null) { // can be 0\n                    this.poly[parentInd].add(polyPart)\n                } else {\n                    this.group.add(polyPart)\n                }\n            })\n            this.animate(0, onAnimationDone, iterations)\n        } else {\n            console.warn('Activity ' + keyname + ' has no animation defined yet')\n        }\n    }\n\n    animate(frameIndex, onAnimationDone, iterations) {\n        if (this.poly.length !== this.animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        this.animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = this.poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = true\n                        mat.alphaTest = 0\n                    })\n                }\n            }\n        })\n        this.animationTimeout = null\n        if (!(frameIndex + 1 > this.animation.lastFrame) || (this.animation.looping && (!onAnimationDone || iterations > 1))) {\n            let nextFrame = frameIndex + 1\n            if (nextFrame > this.animation.lastFrame) {\n                nextFrame = this.animation.firstFrame\n                iterations--\n            }\n            const that = this\n            this.animationTimeout = setTimeout(() => that.animate(nextFrame, onAnimationDone, iterations), 1000 / this.animation.framesPerSecond * this.animation.transcoef) // TODO get this in sync with threejs\n        } else if (onAnimationDone) {\n            onAnimationDone()\n        }\n    }\n\n    createPickSphere() {\n        if (this.pickSphere) return\n        const center = new Vector3()\n        new Box3().setFromObject(this.group).getCenter(center)\n        center.sub(this.group.position)\n        const geometry = new SphereGeometry(this.pickSphereRadius, this.pickSphereRadius, this.pickSphereRadius)\n        const material = new MeshBasicMaterial({color: 0xffff00, visible: false}) // change to true for debugging\n        this.pickSphere = new Mesh(geometry, material)\n        this.pickSphere.userData = {selectable: this}\n        this.pickSphere.position.copy(center)\n        this.group.add(this.pickSphere)\n\n        const ctx = document.createElement('canvas').getContext('2d')\n        const size = 128 // TODO read from cfg?\n        ctx.canvas.width = size\n        ctx.canvas.height = size\n        ctx.fillStyle = '#0f0'\n        const strength = 50 / this.selectionFrameSize\n        const length = size / 3\n        ctx.fillRect(0, 0, length, strength)\n        ctx.fillRect(0, 0, strength, length)\n        ctx.fillRect(size - length, 0, length, strength)\n        ctx.fillRect(size - strength, 0, strength, length)\n        ctx.fillRect(size - strength, size - length, strength, length)\n        ctx.fillRect(size - length, size - strength, length, strength)\n        ctx.fillRect(0, size - strength, length, strength)\n        ctx.fillRect(0, size - length, strength, length)\n        const texture = new CanvasTexture(ctx.canvas)\n        const selectionMaterial = new SpriteMaterial({map: texture, depthTest: false})\n        this.selectionFrame = new Sprite(selectionMaterial)\n        this.selectionFrame.position.copy(center)\n        this.selectionFrame.scale.set(this.selectionFrameSize, this.selectionFrameSize, this.selectionFrameSize)\n        this.selectionFrame.visible = false\n        this.group.add(this.selectionFrame)\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { AnimEntity } from '../anim/AnimEntity'\nimport { Carryable } from './Carryable'\nimport { Surface } from '../map/Surface'\nimport { Vector3 } from 'three'\nimport { GameState } from '../../../game/model/GameState'\n\nexport class Dynamite extends AnimEntity implements Carryable {\n\n    targetSurface: Surface\n\n    constructor() {\n        super(ResourceManager.getAnimationEntityType('MiscAnims/Dynamite/Dynamite.ae'))\n    }\n\n    getTargetPos(): Vector3 {\n        if (this.targetSurface && this.targetSurface.isExplodable()) {\n            return this.targetSurface.getDigPositions()[0] // TODO find closest dig position\n        } else {\n            return GameState.getClosestBuildingByType(this.getPosition(), Building.TOOLSTATION).getDropPosition()\n        }\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.DYNAMITE\n    }\n\n    ignite() {\n        this.worldMgr.sceneManager.scene.add(this.group) // TODO add as explosive and scare em all!\n        const center = this.targetSurface.getCenterWorld()\n        center.y = this.group.position.y\n        this.group.lookAt(center)\n        this.setActivity('TickDown', () => {\n            this.worldMgr.sceneManager.scene.remove(this.group)\n            this.targetSurface.collapse()\n            // TODO add explosion animation\n            // TODO damage raider, vehicle, buildings\n        })\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Color, Material, MeshPhongMaterial } from 'three'\nimport { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { SceneManager } from '../../SceneManager'\n\nexport class Crystal extends CollectableEntity {\n\n    constructor() {\n        super(CollectableType.CRYSTAL)\n        const resource2 = ResourceManager.getResource('MiscAnims/Crystal/vlp_greencrystal.lwo')\n        const mesh2 = SceneManager.registerMesh(new LWOLoader('MiscAnims/Crystal/').parse(resource2));\n        (mesh2.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.color = new Color(0, 0, 0) // TODO read from LWO file?\n            mat.emissive = new Color(0, 255, 0) // TODO should be luminosity color from mesh file?\n            mat.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n            mat.opacity = 0.5 // TODO read from LWO file?\n            mat.transparent = true\n        })\n        mesh2.scale.set(1.75, 1.75, 1.75) // TODO derive from texture scale?\n        this.group.add(mesh2)\n        const resource = ResourceManager.getResource('World/Shared/Crystal.lwo') // highpoly version\n        const mesh = SceneManager.registerMesh(new LWOLoader('World/Shared/').parse(resource));\n        (mesh.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.emissive = new Color(0, 8, 0) // TODO read from LWO file?\n            mat.color = new Color(0, 0, 0) // TODO read from LWO file?\n            mat.transparent = true\n            mat.opacity = 0.4 // TODO read from LWO file?\n        })\n        this.group.add(mesh)\n        this.sequenceIntervals.forEach((interval) => clearInterval(interval)) // TODO looks better without sequence, maybe just slow it down or merge it?\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.POWER_STATION, Building.TOOLSTATION]\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        console.log('An energy crystal has been discovered')\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { SceneManager } from '../../SceneManager'\n\nexport class Ore extends CollectableEntity {\n\n    constructor() {\n        super(CollectableType.ORE)\n        const resource = ResourceManager.getResource('MiscAnims/Ore/Ore1st.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('MiscAnims/Ore/').parse(resource))\n        this.group.add(mesh)\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.REFINERY, Building.TOOLSTATION]\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        console.log('Ore has been discovered')\n    }\n\n}\n","export class WorkerMessage {\n\n    type: WorkerMessageType = null\n    text?: string\n    cfg?: any\n    totalResources?: number\n    assetName?: string\n    assetObj?: any\n    assetIndex?: number\n    loadingTimeSeconds?: string\n\n    constructor(type: WorkerMessageType) {\n        this.type = type\n    }\n\n    static createTextMessage(msg: string): WorkerMessage {\n        return {type: WorkerMessageType.MSG, text: msg}\n    }\n\n    static createCfgLoaded(cfg: any, totalResources: number): WorkerMessage {\n        return {type: WorkerMessageType.CFG, cfg: cfg, totalResources: totalResources}\n    }\n\n    static createAssetLoaded(assetIndex: number, assetName: string, assetObj: any) {\n        return {type: WorkerMessageType.ASSET, assetIndex: assetIndex, assetName: assetName, assetObj: assetObj}\n    }\n\n    static createLoadDone(totalResources: number, loadingTimeSeconds: string) {\n        return {type: WorkerMessageType.DONE, totalResources: totalResources, loadingTimeSeconds: loadingTimeSeconds}\n    }\n\n}\n\nexport enum WorkerMessageType {\n\n    MSG,\n    CFG,\n    CACHE_MISS,\n    SFX,\n    ASSET,\n    DONE,\n\n}\n","import { AmbientLight, Frustum, Mesh, MOUSE, PerspectiveCamera, PointLight, Raycaster, Scene, Vector3, WebGLRenderer } from 'three'\nimport { DebugHelper } from './DebugHelper'\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { GameState } from '../game/model/GameState'\nimport { Selectable } from '../game/model/Selectable'\nimport { Terrain } from './model/map/Terrain'\nimport { TILESIZE } from '../main'\n\nexport class SceneManager {\n\n    static meshRegistry = []\n\n    maxFps: number = 30 // most animations use 25 fps so this should be enough\n    renderer: WebGLRenderer\n    debugHelper: DebugHelper = new DebugHelper()\n    renderInterval\n    animRequest\n    scene: Scene\n    camera: PerspectiveCamera\n    amb: AmbientLight\n    light: PointLight\n    terrain: Terrain\n    controls: MapControls\n    cursorTorchlight: PointLight\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.renderer = new WebGLRenderer({antialias: true, canvas: canvas})\n        this.renderer.setClearColor(0x000000)\n\n        this.camera = new PerspectiveCamera(30, canvas.width / canvas.height, 0.1, 5000) // TODO make these params configurable\n\n        this.controls = new MapControls(this.camera, this.renderer.domElement)\n        this.controls.mouseButtons = {LEFT: null, MIDDLE: MOUSE.ROTATE, RIGHT: MOUSE.PAN}\n        // this.controls.maxPolarAngle = Math.PI * 0.45; // TODO dynamically adapt to terrain height at camera position\n    }\n\n    selectEntitiesByRay(rx: number, ry: number) {\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        let intersects = raycaster.intersectObjects(GameState.raiders.map((r) => r.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.vehicles.map((v) => v.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.buildings.map((b) => b.pickSphere))\n        if (intersects.length < 1 && this.terrain) intersects = raycaster.intersectObjects(this.terrain.floorGroup.children)\n        const selected = []\n        if (intersects.length > 0) {\n            const userData = intersects[0].object.userData\n            if (userData && userData.hasOwnProperty('selectable')) {\n                const selectable = userData['selectable']\n                if (selectable) selected.push(selectable)\n            }\n        }\n        GameState.selectEntities(selected)\n    }\n\n    selectEntitiesInFrustum(r1x: number, r1y: number, r2x: number, r2y: number) {\n        const startPoint = new Vector3(r1x, r1y, 0.5)\n        const endPoint = new Vector3(r2x, r2y, 0.5)\n        // Avoid invalid frustum\n        if (startPoint.x === endPoint.x) {\n            endPoint.x += Number.EPSILON\n        }\n        if (startPoint.y === endPoint.y) {\n            endPoint.y += Number.EPSILON\n        }\n        // update camera\n        this.camera.updateProjectionMatrix()\n        this.camera.updateMatrixWorld()\n        // update frustum\n        const tmpPoint = new Vector3()\n        tmpPoint.copy(startPoint)\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x)\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y)\n        endPoint.x = Math.max(startPoint.x, endPoint.x)\n        endPoint.y = Math.min(startPoint.y, endPoint.y)\n\n        const vecNear = new Vector3()\n        const vecTopLeft = new Vector3()\n        const vecTopRight = new Vector3()\n        const vecDownRight = new Vector3()\n        const vecDownLeft = new Vector3()\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld)\n        vecTopLeft.copy(tmpPoint)\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0)\n        vecDownRight.copy(endPoint)\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0)\n\n        vecTopLeft.unproject(this.camera)\n        vecTopRight.unproject(this.camera)\n        vecDownRight.unproject(this.camera)\n        vecDownLeft.unproject(this.camera)\n\n        const vectemp1 = new Vector3()\n        const vectemp2 = new Vector3()\n        const vectemp3 = new Vector3()\n        vectemp1.copy(vecTopLeft).sub(vecNear)\n        vectemp2.copy(vecTopRight).sub(vecNear)\n        vectemp3.copy(vecDownRight).sub(vecNear)\n        vectemp1.normalize()\n        vectemp2.normalize()\n        vectemp3.normalize()\n\n        const deep = Number.MAX_VALUE\n        vectemp1.multiplyScalar(deep)\n        vectemp2.multiplyScalar(deep)\n        vectemp3.multiplyScalar(deep)\n        vectemp1.add(vecNear)\n        vectemp2.add(vecNear)\n        vectemp3.add(vecNear)\n\n        const frustum = new Frustum()\n        const planes = frustum.planes\n\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight)\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight)\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear)\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear)\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft)\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1)\n        planes[5].normal.multiplyScalar(-1)\n\n        let entities: Selectable[] = GameState.raiders.filter((r) => frustum.containsPoint(r.getSelectionCenter()))\n        entities.push(...(GameState.vehicles.filter((v) => frustum.containsPoint(v.getSelectionCenter()))))\n        if (entities.length < 1) entities = GameState.buildings.filter((b) => frustum.containsPoint(b.getSelectionCenter()))\n        GameState.selectEntities(entities)\n    }\n\n    setupScene() {\n        this.scene = new Scene()\n        // this.scene.fog = new FogExp2(0x6e6e9b, 0.05); // TODO derive from level config\n\n        this.amb = new AmbientLight(0x808080) // TODO use \"cave\" light setup\n        this.scene.add(this.amb)\n\n        this.cursorTorchlight = new PointLight(0xffffff, 1, 7, 2)\n        this.cursorTorchlight.distance *= TILESIZE\n        this.scene.add(this.cursorTorchlight)\n    }\n\n    startScene() {\n        this.debugHelper.show()\n        this.renderInterval = setInterval(() => {\n            this.animRequest = requestAnimationFrame(() => {\n                this.debugHelper.renderStart()\n                this.renderer.render(this.scene, this.camera)\n                this.debugHelper.renderDone()\n            })\n        }, 1000 / this.maxFps)\n    }\n\n    disposeScene() {\n        this.debugHelper.hide()\n        if (this.renderInterval) {\n            clearInterval(this.renderInterval)\n            this.renderInterval = null\n        }\n        if (this.animRequest) {\n            cancelAnimationFrame(this.animRequest)\n            this.animRequest = null\n        }\n        this.terrain?.dispose()\n        this.terrain = null\n        SceneManager.meshRegistry.forEach(mesh => {\n            // TODO stop animation intervals/timeouts\n            mesh.geometry.dispose() // TODO refactor better handle on entity level\n            Array.isArray(mesh.material) ? mesh.material.forEach(mat => mat.dispose()) : mesh.material?.dispose()\n        })\n        SceneManager.meshRegistry = []\n    }\n\n    static registerMesh(mesh: Mesh): Mesh {\n        this.meshRegistry.push(mesh)\n        return mesh\n    }\n\n}\n","import { AnimationEntityType } from '../scene/model/anim/AnimationEntityType'\nimport { getPath, iGet } from './wadworker/WadUtil'\nimport { ResourceManager } from './ResourceManager'\nimport { LWOLoader } from './LWOLoader'\nimport { LWSCLoader } from './LWSCLoader'\nimport { SceneManager } from '../scene/SceneManager'\n\nexport class AnimEntityLoader {\n\n    static loadModels(url, root): AnimationEntityType {\n        const path = getPath(url)\n\n        const entityType = new AnimationEntityType()\n\n        entityType.carryNullName = iGet(root, 'CarryNullName')\n\n        // TODO load other poly quality models (if available)\n        // let mediumPoly = iGet(root, 'MediumPoly');\n        // if (mediumPoly) {\n        //     Object.keys(mediumPoly).forEach((key) => {\n        //         const polyname = mediumPoly[key];\n        //         const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //         const polyfile = path + polyname + '.lwo';\n        //         console.log('polyfile');\n        //         console.log(polyfile);\n        //         // new LWOLoader().load(polyfile, (model) => {\n        //         //     mediumPoly[polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //         // }, undefined, () => {\n        //         //     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //         // });\n        //     });\n        //     Object.keys(mediumPoly).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete mediumPoly[polykey]);\n        // }\n\n        const highPoly = iGet(root, 'highpoly')\n        if (highPoly) {\n            entityType.highPoly = {}\n            Object.keys(highPoly).forEach((key) => {\n                const polyname = highPoly[key] + '.lwo'\n                const polykey = key.startsWith('!') ? key.slice(1) : key\n                // console.log(path + polyname);\n                // TODO do not parse twice, read from cache first\n                const lwoBuffer = ResourceManager.getResource(path + polyname)\n                entityType.highPoly[polykey] = SceneManager.registerMesh(new LWOLoader(path).parse(lwoBuffer))\n            })\n        }\n\n        // let fPoly = (root)['fppoly'];\n        // if (fPoly) {\n        //     Object.keys(fPoly).forEach((camera) => {\n        //         Object.keys(fPoly[camera]).forEach((key) => {\n        //             const polyname = fPoly[camera][key];\n        //             const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //             if (polyname !== 'null') {\n        //                 const polyfile = path + polyname + '.lwo';\n        //                 new LWOLoader().load(polyfile, (model) => {\n        //                     fPoly[camera][polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //                 }, undefined, () => {\n        //                     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //                 });\n        //             } else {\n        //                 fPoly[camera][key] = {polyname: polyname, polyfile: null, model: new Group()};\n        //             }\n        //         });\n        //         Object.keys(fPoly[camera]).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete fPoly[polykey][camera]);\n        //     });\n        // }\n\n        const activities = iGet(root, 'Activities')\n        if (activities) {\n            Object.keys(activities).forEach((activity) => {\n                try {\n                    let keyname = iGet(activities, activity)\n                    const act = iGet(root, keyname)\n                    const file = iGet(act, 'FILE')\n                    const isLws = iGet(act, 'LWSFILE') === true\n                    const transcoef = iGet(act, 'TRANSCOEF')\n                    const looping = iGet(act, 'LOOPING') === true\n                    if (isLws) {\n                        const content = ResourceManager.getResource(path + file + '.lws')\n                        act.animation = new LWSCLoader(path).parse(content)\n                        act.animation.looping = looping\n                        act.animation.transcoef = transcoef ? Number(transcoef) : 1;\n                        (entityType.activities)[keyname] = act\n                    } else {\n                        console.error('Found activity which is not an LWS file')\n                    }\n                } catch (e) {\n                    console.error(e)\n                    console.log(root)\n                    console.log(activities)\n                    console.log(activity)\n                }\n            })\n        }\n\n        return entityType\n    }\n\n}\n","import { createContext, createDummyImgData, getPixel, setPixel } from './ImageHelper'\n\nexport class BitmapFont {\n\n    charHeight: number\n    letters: ImageData[] = []\n\n    constructor(fontImageData: ImageData, cols = 10, rows = 19) { // font images always consist of 10 columns and 19 rows with last row empty\n        // actually chars are font dependent and have to be externalized in future\n        // maybe CP850 was used... not sure, doesn't fit...\n        const chars = [' ', '!', '\"', '#', '$', '%', '⌵', '`', '(', ')',\n            '*', '+', ',', '-', '.', '/', '0', '1', '2', '3',\n            '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',\n            '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n            'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n            'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[',\n            '\\\\', ']', '^', '_', '\\'', 'a', 'b', 'c', 'd', 'e',\n            'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\n            'z', 'Ä', 'Å', 'Á', 'À', 'Â', 'Ã', 'Ą', 'ä', 'å',\n            'á', 'à', 'â', 'ã', 'ą', 'Ë', 'E̊', 'É', 'È', 'É',\n            'Ę', 'ë', 'e̊', 'é', 'è', 'e̊', 'ę̊', '', '', '',\n            '', '', '', '', '', 'Ö', '', '', '', '',\n            'ö', '', '', '', '', 'Ü', '', '', '', 'ü',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', 'ß', '', '', '', 'Ñ', '', 'ñ',\n            '',\n        ] // TODO complete this character list\n\n        const maxCharWidth = fontImageData.width / cols\n        this.charHeight = fontImageData.height / rows\n\n        function getActualCharacterWidth(imgData) {\n            for (let y = 0; y < imgData.height / rows; y++) { // find non-empty row first\n                let rowPixelIndex = y * 4 * imgData.width\n                if (imgData.data[rowPixelIndex] !== 255 && imgData.data[rowPixelIndex + 2] !== 255) { // red/blue pixels indicate end of character\n                    for (let x = 0; x < maxCharWidth; x++) {\n                        let colPixelIndex = x * 4\n                        if (imgData.data[colPixelIndex] === 255 || imgData.data[colPixelIndex + 2] === 255) { // red/blue pixels indicate end of character\n                            return x\n                        }\n                    }\n                    return maxCharWidth\n                }\n            }\n            return 0\n        }\n\n        for (let i = 0; i < chars.length; i++) {\n            let imgData = this.extractData(fontImageData, (i % 10) * maxCharWidth, Math.floor(i / 10) * this.charHeight, maxCharWidth, this.charHeight)\n            let actualWidth = getActualCharacterWidth(imgData)\n            if (actualWidth > 0) {\n                imgData = this.extractData(imgData, 0, 0, actualWidth, this.charHeight)\n            } else {\n                imgData = createDummyImgData(maxCharWidth, this.charHeight)\n            }\n            this.letters[chars[i]] = imgData\n        }\n    }\n\n    extractData(imgData, startX, startY, width, height): ImageData {\n        const alpha = getPixel(imgData, startX + width - 1, startY + height - 1)\n        const result = new ImageData(width, height)\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const p = getPixel(imgData, startX + x, startY + y)\n                if (p.r === alpha.r && p.g === alpha.g && p.b === alpha.b) p.a = 0 // apply alpha channel\n                setPixel(result, x, y, p.r, p.g, p.b, p.a)\n            }\n        }\n        return result\n    }\n\n    createTextImage(text: string, maxWidth?: number, autoCenter: boolean = true): HTMLCanvasElement {\n        if (text === undefined || text === null || text.length < 1) {\n            // empty text requested, context with width 0 is not allowed, but 1 with alpha is close enough\n            return createContext(1, 1).canvas\n        }\n        text = text.replace(/_/g, ' ')\n        const rows = this.determineRows(text, maxWidth)\n        const width = Math.max(...(rows.map(r => r.width)))\n        const result = new ImageData(width, this.charHeight * rows.length)\n        rows.forEach((row, index) => {\n            const rowX = autoCenter ? Math.round((width - row.width) / 2) : 0\n            const rowY = index * this.charHeight\n            let letterX = 0\n            for (let c = 0; c < row.text.length; c++) {\n                const letterImgData = this.letters[row.text.charAt(c)]\n                if (letterImgData) {\n                    for (let x = letterX; x < letterX + letterImgData.width; x++) {\n                        for (let y = 0; y < letterImgData.height; y++) {\n                            const p = getPixel(letterImgData, x - letterX, y)\n                            setPixel(result, rowX + x, rowY + y, p.r, p.g, p.b, p.a)\n                        }\n                    }\n                    letterX += letterImgData.width\n                } // missing letter issue already reported above\n            }\n        })\n        const img: CanvasRenderingContext2D = createContext(result.width, result.height)\n        img.putImageData(result, 0, 0)\n        return img.canvas\n    }\n\n    private determineRows(text: string, maxWidth?: number): { text: string, width: number }[] {\n        const spaceWidth = this.letters[' '].width\n        const rows: { text: string, width: number }[] = []\n        let rowText = ''\n        let rowWidth = 0\n        text.split(' ').map(word => {\n            let wordWidth = 0\n            for (let c = 0; c < word.length; c++) {\n                const letter = word.charAt(c)\n                const letterImg = this.letters[letter]\n                if (letterImg) {\n                    wordWidth += letterImg.width\n                } else {\n                    console.error('Letter \\'' + letter + '\\' not found in charset! Ignoring it')\n                }\n            }\n            if (rowWidth > 0) {\n                if (!maxWidth || rowWidth + spaceWidth + wordWidth < maxWidth) {\n                    rowText += ' ' + word\n                    rowWidth += spaceWidth + wordWidth\n                } else {\n                    rows.push({text: rowText, width: rowWidth})\n                    rowText = word\n                    rowWidth = wordWidth\n                }\n            } else {\n                rowText += word\n                rowWidth += wordWidth\n            }\n            return wordWidth\n        })\n        if (rowWidth > 0) rows.push({text: rowText, width: rowWidth})\n        return rows\n    }\n}\n","import { ScreenLayer } from '../screen/ScreenLayer'\nimport { BaseScreen } from '../screen/BaseScreen'\n\n// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n}\n\nexport enum POINTER_EVENT {\n    MOVE,\n    DOWN,\n    UP,\n}\n\nexport enum KEY_EVENT {\n    DOWN,\n    UP,\n}\n\nexport class EventManager {\n\n    constructor(screen: BaseScreen) {\n        screen.gameCanvasContainer.addEventListener('contextmenu', (event: MouseEvent) => {\n            if (screen.isInRect(event)) event.preventDefault()\n        })\n        new Map<string, POINTER_EVENT>([\n            ['pointermove', POINTER_EVENT.MOVE],\n            ['pointerdown', POINTER_EVENT.DOWN],\n            ['pointerup', POINTER_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: PointerEvent) => {\n                if (!screen.isInRect(event)) return\n                event.preventDefault()\n                // all event attibutes used by controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n                const nonBubblingClone = new PointerEvent(event.type, {\n                    bubbles: false, // disable bubbling otherwise we'll trigger this same event handler again\n                    clientX: event.clientX,\n                    clientY: event.clientY,\n                    pointerType: event.pointerType,\n                    button: event.button,\n                    ctrlKey: event.ctrlKey,\n                    metaKey: event.metaKey,\n                    shiftKey: event.shiftKey,\n                })\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handlePointerEvent(eventEnum, nonBubblingClone))\n            })\n        })\n        new Map<string, KEY_EVENT>([\n            ['keydown', KEY_EVENT.DOWN],\n            ['keyup', KEY_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: KeyboardEvent) => {\n                // event.preventDefault(); // otherwise page reload with F5 stops working (may be intended in future)\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handleKeyEvent(eventEnum, event))\n            })\n        })\n        screen.gameCanvasContainer.addEventListener('wheel', (event: WheelEvent) => {\n            if (!screen.isInRect(event)) return\n            // all event attibutes used by controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n            const nonBubblingClone = new WheelEvent(event.type, {\n                bubbles: false, // disable bubbling otherwise we'll trigger this same event handler again\n                clientX: event.clientX,\n                clientY: event.clientY,\n                deltaX: event.deltaX,\n                deltaY: event.deltaY,\n                deltaZ: event.deltaZ,\n                button: event.button,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey,\n                shiftKey: event.shiftKey,\n            })\n            screen.layers.filter(l => l.isActive())\n                .sort((a, b) => ScreenLayer.compareZ(a, b))\n                .some(l => l.handleWheelEvent(nonBubblingClone))\n        })\n    }\n\n}\n","import ResourceWorker from 'worker-loader!./wadworker/Resources'\nimport { RepeatWrapping, Texture } from 'three'\nimport { AnimationEntityType } from '../scene/model/anim/AnimationEntityType'\nimport { InitLoadingMessage } from './wadworker/InitLoadingMessage'\nimport { createContext, createDummyImgData } from '../core/ImageHelper'\nimport { iGet } from './wadworker/WadUtil'\nimport { getFilename } from '../core/Util'\nimport { AnimEntityLoader } from './AnimEntityLoader'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { WorkerMessage, WorkerMessageType } from './wadworker/WorkerMessage'\n\nexport class ResourceManager {\n\n    static worker: ResourceWorker = new ResourceWorker()\n    static configuration: any = {}\n    static resourceByName: {} = {}\n    static fontCache = {}\n\n    static startLoadingFromCache() {\n        return this.startLoading(null)\n    }\n\n    static startLoadingFromUrl(wad0Url: string, wad1Url: string) {\n        return this.startLoading(new InitLoadingMessage(wad0Url, wad1Url))\n    }\n\n    private static startLoading(msg: InitLoadingMessage) {\n        this.worker.onmessage = (event) => {\n            const msg: WorkerMessage = event.data\n            if (msg.type === WorkerMessageType.ASSET) {\n                this.resourceByName[msg.assetName.toLowerCase()] = msg.assetObj\n                this.onAssetLoaded(msg.assetIndex)\n            } else if (msg.type === WorkerMessageType.MSG) {\n                this.onMessage(msg.text)\n            } else if (msg.type === WorkerMessageType.CFG) {\n                this.configuration = msg.cfg\n                this.onInitialLoad(msg.totalResources)\n            } else if (msg.type === WorkerMessageType.CACHE_MISS) {\n                this.onCacheMissed()\n            } else if (msg.type === WorkerMessageType.DONE) {\n                console.log('Loading of about ' + msg.totalResources + ' assets complete! Total load time: ' + msg.loadingTimeSeconds + ' seconds.')\n                this.onLoadDone()\n            }\n        }\n        this.worker.postMessage(msg)\n    }\n\n    static onMessage: (msg: string) => any = (msg: string) => {\n        console.log(msg)\n    }\n\n    static onCacheMissed: () => any = () => {\n        console.log('Worker missed cache')\n    }\n\n    static onInitialLoad: (totalResources: number) => any = () => {\n        console.log('Initial loading done.')\n    }\n\n    static onAssetLoaded: (assetIndex: number) => any = () => {\n    }\n\n    static onLoadDone: () => any = () => {\n    }\n\n    static cfg(...keys: string[]): any {\n        return iGet(ResourceManager.configuration, ...keys)\n    }\n\n    static filterTextureSequenceNames(basename: string): string[] {\n        const lBasename = basename.toLowerCase()\n        const result = Object.keys(this.resourceByName).filter((name) => name.startsWith(lBasename))\n        return result.length > 0 ? result : ResourceManager.filterTextureSequenceNames('world/shared/' + getFilename(basename))\n    }\n\n    static getResource(resourceName: string): any {\n        const lName = resourceName ? resourceName.toString().toLowerCase() : null\n        if (lName && this.resourceByName.hasOwnProperty(lName)) {\n            return this.resourceByName[lName]\n        }\n        return null\n    }\n\n    static getImageData(imageName): ImageData {\n        if (!imageName || imageName.length === 0) {\n            throw 'imageName must not be undefined, null or empty - was ' + imageName\n        }\n        const lImageName = imageName.toLowerCase()\n        let imgData = this.getResource(lImageName)\n        if (!imgData) {\n            console.error('Image \\'' + imageName + '\\' unknown! Using placeholder image instead')\n            ResourceManager.resourceByName[lImageName] = createDummyImgData(64, 64)\n        }\n        return ResourceManager.resourceByName[lImageName]\n    }\n\n    static getImage(imageName: string): HTMLCanvasElement {\n        const imgData = this.getImageData(imageName)\n        const context: CanvasRenderingContext2D = createContext(imgData.width, imgData.height)\n        context.putImageData(imgData, 0, 0)\n        return context.canvas\n    }\n\n    static getImageOrNull(imageName: string): HTMLCanvasElement | null {\n        if (!imageName) return null\n        return this.getImage(imageName)\n    }\n\n    static getTexture(textureName): Texture {\n        if (!textureName || textureName.length === 0) {\n            throw 'textureName must not be undefined, null or empty - was ' + textureName\n        }\n        const lTextureName = textureName.toLowerCase()\n        const lSharedTextureName = 'world/shared/' + getFilename(lTextureName)\n        let imgData = this.getResource(lTextureName) || this.getResource(lSharedTextureName)\n        if (!imgData) {\n            console.error('Texture \\'' + textureName + '\\' (' + lTextureName + ', ' + lSharedTextureName + ') unknown! Using placeholder texture instead')\n            ResourceManager.resourceByName[lTextureName] = imgData = createDummyImgData(64, 64)\n        }\n        const texture = new Texture(imgData, Texture.DEFAULT_MAPPING, RepeatWrapping, RepeatWrapping)\n        texture.needsUpdate = true\n        return texture\n    }\n\n    static getMap(name: string) {\n        return name ? this.getResource(name) : null\n    }\n\n    static getAnimationEntityType(aeFilename: string): AnimationEntityType {\n        let cfgRoot = this.getResource(aeFilename)\n        if (!cfgRoot) throw 'Could not get animation entity type for: ' + aeFilename\n        return AnimEntityLoader.loadModels(aeFilename, cfgRoot)\n    }\n\n    static getBitmapFont(name: string): BitmapFont {\n        ResourceManager.fontCache[name] = ResourceManager.fontCache[name] || new BitmapFont(this.getResource(name))\n        return ResourceManager.fontCache[name]\n    }\n\n}\n","import { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../main'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { KEY_EVENT, POINTER_EVENT } from '../event/EventManager'\n\nexport class ScreenLayer {\n\n    canvas: HTMLCanvasElement\n    context: CanvasRenderingContext2D\n    onRedraw: (context: CanvasRenderingContext2D) => any\n\n    constructor(alpha: boolean = false, withContext: boolean = true) {\n        this.canvas = document.createElement('canvas')\n        if (!alpha) this.canvas.style.background = '#f0f'\n        if (withContext) this.context = this.canvas.getContext('2d', {alpha: alpha})\n        this.hide()\n    }\n\n    setZIndex(zIndex: number) {\n        this.canvas.style.zIndex = String(zIndex)\n    }\n\n    static compareZ(layerA: ScreenLayer, layerB: ScreenLayer) {\n        let aIndex = layerA?.canvas?.style?.zIndex || 0\n        const bIndex = layerB?.canvas?.style?.zIndex || 0\n        return aIndex === bIndex ? 0 : aIndex > bIndex ? -1 : 1\n    }\n\n    resize(width, height) {\n        this.canvas.width = width\n        this.canvas.height = height\n    }\n\n    redraw() {\n        const callback = this.onRedraw\n        if (this.isActive() && callback) {\n            const context = this.context\n            requestAnimationFrame(() => callback(context))\n        }\n    }\n\n    show() {\n        this.canvas.style.visibility = 'visible'\n        this.redraw()\n    }\n\n    hide() {\n        this.canvas.style.visibility = 'hidden'\n    }\n\n    isActive() {\n        return this.canvas.style.visibility === 'visible'\n    }\n\n    toCanvasCoords(windowX: number, windowY: number) {\n        const clientRect = this.canvas.getBoundingClientRect()\n        return [windowX - clientRect.left, windowY - clientRect.top]\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        return false\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        return false\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        return false\n    }\n\n}\n\nexport class ScaledLayer extends ScreenLayer {\n\n    fixedWidth: number\n    fixedHeight: number\n\n    constructor() {\n        super(true)\n        this.fixedWidth = SPRITE_RESOLUTION_WIDTH\n        this.fixedHeight = SPRITE_RESOLUTION_HEIGHT\n    }\n\n    toScaledCoords(windowX: number, windowY: number) {\n        const [cx, cy] = this.toCanvasCoords(windowX, windowY)\n        return [cx / this.scaleX(), cy / this.scaleY()]\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        this.context.scale(this.scaleX(), this.scaleY())\n    }\n\n    scaleX() {\n        return this.canvas.width / this.fixedWidth\n    }\n\n    scaleY() {\n        return this.canvas.height / this.fixedHeight\n    }\n\n}\n\nexport class CursorLayer extends ScaledLayer {\n\n    curUrl\n    cursorName: string = 'Aclosed'\n\n    show() {\n        super.show()\n        this.createCursor()\n    }\n\n    hide() {\n        super.hide()\n        this.canvas.style.cursor = null\n    }\n\n    createCursor() {\n        if (this.curUrl) URL.revokeObjectURL(this.curUrl)\n        const curImg = ResourceManager.getImage('Interface/Pointers/' + this.cursorName + '.bmp')\n        this.curUrl = curImg.toDataURL()\n        // Chrome limits cursor size to 32x32 anyway...\n        // const context: CanvasRenderingContext2D = createContext(curImg.width * this.scaleX(), curImg.height * this.scaleY());\n        // context.scale(this.scaleX(), this.scaleY());\n        // context.drawImage(curImg, 0, 0);\n        // this.curUrl = context.canvas.toDataURL();\n        this.canvas.style.cursor = 'url(' + this.curUrl + '), auto'\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        if (this.isActive()) this.createCursor()\n    }\n\n}\n","import { Group, Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { Terrain } from './Terrain'\nimport { SurfaceType } from './SurfaceType'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Selectable, SelectionType } from '../../../game/model/Selectable'\nimport { EventBus } from '../../../event/EventBus'\nimport { SurfaceSelectedEvent } from '../../../event/LocalEvents'\nimport { JobType } from '../../../game/model/job/Job'\nimport { CavernDiscovered, JobCreateEvent, JobDeleteEvent, OreFoundEvent } from '../../../event/WorldEvents'\nimport { getRandom, getRandomSign } from '../../../core/Util'\nimport { Crystal } from '../collect/Crystal'\nimport { Ore } from '../collect/Ore'\nimport { HEIGHT_MULTIPLER, TILESIZE } from '../../../main'\nimport { GameState } from '../../../game/model/GameState'\nimport { SurfaceJob, SurfaceJobType } from '../../../game/model/job/SurfaceJob'\nimport { LWSCLoader } from '../../../resource/LWSCLoader'\nimport { AnimSubObj } from '../anim/AnimSubObj'\nimport { SurfaceGeometry } from './SurfaceGeometry'\nimport { CrystalFoundEvent, LandslideEvent } from '../../../event/WorldLocationEvent'\n\nexport class Surface implements Selectable {\n\n    terrain: Terrain\n    surfaceType: SurfaceType\n    x: number\n    y: number\n    containedOres: number = 0\n    containedCrystals: number = 0\n    heightOffset: number = null\n    discovered: boolean = false\n    selected: boolean = false\n    reinforced: boolean = false\n    jobs: SurfaceJob[] = []\n    surfaceRotation: number = 0\n    seamLevel: number = 0\n    fallinTimeout = null\n\n    fallinGrp: Group = null\n    animationTimeout = null\n\n    wallType: WALL_TYPE = null\n    mesh: Mesh = null\n    needsMeshUpdate: boolean = false\n\n    constructor(terrain: Terrain, surfaceType: SurfaceType, x: number, y: number, heightOffset: number) {\n        this.terrain = terrain\n        this.surfaceType = surfaceType\n        if (surfaceType === SurfaceType.CRYSTAL_SEAM || surfaceType === SurfaceType.ORE_SEAM) this.seamLevel = 4\n        this.x = x\n        this.y = y\n        this.heightOffset = heightOffset\n        EventBus.registerEventListener(JobCreateEvent.eventKey, (event: JobCreateEvent) => {\n            const jobType = event.job.type\n            if (jobType === JobType.SURFACE) {\n                const surfaceJob = event.job as SurfaceJob\n                if (surfaceJob.surface === this) this.jobs.push(surfaceJob)\n            }\n        })\n    }\n\n    hasJobType(type: SurfaceJobType) {\n        return this.jobs.some((job) => job.workType === type)\n    }\n\n    /**\n     * @return {boolean} Returns true, if a new cave has been discovered\n     */\n    discoverNeighbors(): boolean {\n        if (!this.discovered) GameState.discoverSurface(this)\n        this.discovered = true\n        this.needsMeshUpdate = true\n        let foundCave = false\n        if (this.surfaceType.floor) {\n            for (let x = this.x - 1; x <= this.x + 1; x++) {\n                for (let y = this.y - 1; y <= this.y + 1; y++) {\n                    if (x !== this.x || y !== this.y) {\n                        const surf = this.terrain.getSurfaceOrNull(x, y)\n                        if (surf && !surf.discovered) {\n                            foundCave = surf.discoverNeighbors() || surf.surfaceType.floor\n                            surf.needsMeshUpdate = true\n                        }\n                    }\n                }\n            }\n        }\n        return foundCave\n    }\n\n    collapse() {\n        this.cancelJobs()\n        if (this.fallinTimeout) clearTimeout(this.fallinTimeout)\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.containedOres += 4\n        this.needsMeshUpdate = true\n        // discover surface and all neighbors\n        const foundCave = this.discoverNeighbors()\n        if (foundCave) EventBus.publishEvent(new CavernDiscovered())\n        // check for unsupported neighbors\n        for (let x = this.x - 1; x <= this.x + 1; x++) {\n            for (let y = this.y - 1; y <= this.y + 1; y++) {\n                if (x !== this.x || y !== this.y) {\n                    const surf = this.terrain.getSurface(x, y)\n                    surf.needsMeshUpdate = true\n                    if (!surf.isSupported()) surf.collapse()\n                }\n            }\n        }\n        // update meshes\n        this.terrain.updateSurfaceMeshes()\n        this.terrain.floorGroup.updateWorldMatrix(true, true)\n        // drop contained crystals and ores\n        for (let c = 0; c < this.containedCrystals; c++) {\n            const x = this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4)\n            const z = this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4)\n            const crystal = this.terrain.worldMgr.addCollectable(new Crystal(), x, z)\n            EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n        }\n        this.dropContainedOre(this.containedOres - 4)\n        // TODO workaround until buildings can be placed without terrain ray intersection\n        GameState.buildings.forEach((b) => b.group.position.y = this.terrain.worldMgr.getTerrainHeight(b.group.position.x, b.group.position.z))\n    }\n\n    private dropContainedOre(dropAmount: number) {\n        for (let c = 0; c < dropAmount && this.containedOres > 0; c++) {\n            this.containedOres--\n            const x = this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4)\n            const z = this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4)\n            this.terrain.worldMgr.addCollectable(new Ore(), x, z)\n            EventBus.publishEvent(new OreFoundEvent())\n        }\n    }\n\n    cancelJobs() {\n        const jobs = this.jobs // ensure consistency while processing\n        this.jobs = []\n        jobs.forEach((job) => EventBus.publishEvent(new JobDeleteEvent(job)))\n        this.updateJobColor()\n    }\n\n    reduceRubble() {\n        if (this.surfaceType === SurfaceType.RUBBLE4) this.surfaceType = SurfaceType.RUBBLE3\n        else if (this.surfaceType === SurfaceType.RUBBLE3) this.surfaceType = SurfaceType.RUBBLE2\n        else if (this.surfaceType === SurfaceType.RUBBLE2) this.surfaceType = SurfaceType.RUBBLE1\n        else if (this.surfaceType === SurfaceType.RUBBLE1) this.surfaceType = SurfaceType.GROUND\n        this.dropContainedOre(1)\n        this.updateTexture()\n    }\n\n    isSupported(): boolean {\n        if (this.surfaceType.floor) return true\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        return isHighGround(surfLeft, surfTopLeft, surfTop)\n            || isHighGround(surfTop, surfTopRight, surfRight)\n            || isHighGround(surfRight, surfBottomRight, surfBottom)\n            || isHighGround(surfBottom, surfBottomLeft, surfLeft)\n    }\n\n    updateMesh(force: boolean = true) {\n        if (!force && !this.needsMeshUpdate) return\n        this.needsMeshUpdate = false\n\n        const topLeftVertex = new Vector3(this.x, 0, this.y)\n        const topRightVertex = new Vector3(this.x + 1, 0, this.y)\n        const bottomLeftVertex = new Vector3(this.x, 0, this.y + 1)\n        const bottomRightVertex = new Vector3(this.x + 1, 0, this.y + 1)\n\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        if (!this.discovered) {\n            topLeftVertex.y = 1\n            topRightVertex.y = 1\n            bottomRightVertex.y = 1\n            bottomLeftVertex.y = 1\n        } else if (!this.surfaceType.floor) {\n            if (isHighGround(surfLeft, surfTopLeft, surfTop)) topLeftVertex.y = 1\n            if (isHighGround(surfTop, surfTopRight, surfRight)) topRightVertex.y = 1\n            if (isHighGround(surfRight, surfBottomRight, surfBottom)) bottomRightVertex.y = 1\n            if (isHighGround(surfBottom, surfBottomLeft, surfLeft)) bottomLeftVertex.y = 1\n        }\n\n        // update mesh (geometry), if wall type changed\n        let wallType = topLeftVertex.y + topRightVertex.y + bottomRightVertex.y + bottomLeftVertex.y\n        if (wallType === WALL_TYPE.WALL && topLeftVertex.y === bottomRightVertex.y) wallType = WALL_TYPE.WEIRD_CREVICE\n\n        if (this.wallType !== wallType) {\n            this.wallType = wallType\n            this.updateGeometry(topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex, surfTopLeft, surfTop, surfLeft, surfTopRight, surfRight, surfBottomRight, surfBottom, surfBottomLeft)\n            if (this.wallType !== WALL_TYPE.WALL) this.cancelReinforceJobs()\n            // TODO if wall was reinforced remove it (same for fallin)\n        }\n\n        this.updateTexture()\n        this.updateJobColor()\n    }\n\n    cancelReinforceJobs() {\n        const otherJobs = []\n        this.jobs.forEach((job) => {\n            if (job.workType === SurfaceJobType.REINFORCE) {\n                EventBus.publishEvent(new JobDeleteEvent(job))\n            } else {\n                otherJobs.push(job)\n            }\n        })\n        this.jobs = otherJobs\n        this.updateJobColor()\n    }\n\n    updateTexture() {\n        let textureName = this.terrain.textureSet.texturebasename\n        if (!this.discovered) {\n            textureName += '70'\n        } else if (this.surfaceType === SurfaceType.POWER_PATH) {\n            textureName += this.updatePowerPathTexture()\n        } else if (!this.surfaceType.shaping) {\n            textureName += this.surfaceType.matIndex.toString()\n        } else if (this.wallType === WALL_TYPE.WEIRD_CREVICE) {\n            textureName += '77'\n        } else {\n            if (this.wallType === WALL_TYPE.CORNER) {\n                textureName += '5'\n            } else if (this.wallType === WALL_TYPE.INVERTED_CORNER) {\n                textureName += '3'\n            } else if (this.reinforced) {\n                textureName += '2'\n            } else {\n                textureName += '0'\n            }\n            textureName += this.surfaceType.matIndex\n        }\n        textureName += '.bmp'\n\n        const texture = ResourceManager.getTexture(textureName)\n        texture.center.set(0.5, 0.5)\n        texture.rotation = this.surfaceRotation\n\n        this.accessMaterials().forEach((mat) => mat.map = texture)\n    }\n\n    updatePowerPathTexture(): string {\n        this.surfaceRotation = 0\n        const left = this.terrain.getSurface(this.x - 1, this.y).isPath()\n        const top = this.terrain.getSurface(this.x, this.y - 1).isPath()\n        const right = this.terrain.getSurface(this.x + 1, this.y).isPath()\n        const bottom = this.terrain.getSurface(this.x, this.y + 1).isPath()\n        const pathSum = (left ? 1 : 0) + (top ? 1 : 0) + (right ? 1 : 0) + (bottom ? 1 : 0)\n        if (pathSum === 0 || pathSum === 1) {\n            if (left) this.surfaceRotation = Math.PI / 2\n            if (top) this.surfaceRotation = Math.PI\n            if (right) this.surfaceRotation = -Math.PI / 2\n            return '65'\n        } else if (pathSum === 2) {\n            if (left === right) {\n                this.surfaceRotation = left ? Math.PI / 2 : 0\n                return '62'\n            } else {\n                if (left && bottom) this.surfaceRotation = Math.PI / 2\n                if (left && top) this.surfaceRotation = Math.PI\n                if (top && right) this.surfaceRotation = -Math.PI / 2\n                return '63'\n            }\n        } else if (pathSum === 3) {\n            if (!top) this.surfaceRotation = Math.PI / 2\n            if (!right) this.surfaceRotation = Math.PI\n            if (!bottom) this.surfaceRotation = -Math.PI / 2\n            return '64'\n        } else {\n            return '60'\n        }\n    }\n\n    accessMaterials(): MeshPhongMaterial[] {\n        if (!this.mesh || !this.mesh.material) return []\n        if (Array.isArray(this.mesh.material)) {\n            return this.mesh.material as MeshPhongMaterial[]\n        } else {\n            return [this.mesh.material as MeshPhongMaterial]\n        }\n    }\n\n    updateGeometry(topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3, surfTopLeft: Surface, surfTop: Surface, surfLeft: Surface, surfTopRight: Surface, surfRight: Surface, surfBottomRight: Surface, surfBottom: Surface, surfBottomLeft: Surface) {\n        if (this.mesh) this.terrain.floorGroup.remove(this.mesh)\n        this.mesh?.geometry?.dispose()\n\n        function avgHeight(...args: Surface[]) {\n            let sum = 0, cnt = 0\n            args.map(s => s.heightOffset).filter(Boolean).forEach(h => {\n                sum += h\n                cnt++\n            })\n            return sum / cnt\n        }\n\n        const geometry = SurfaceGeometry.create(this.wallType, topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex,\n            topLeftVertex.y + avgHeight(surfTopLeft, surfTop, this, surfLeft) * HEIGHT_MULTIPLER,\n            topRightVertex.y + avgHeight(surfTop, surfTopRight, surfRight, this) * HEIGHT_MULTIPLER,\n            bottomRightVertex.y + avgHeight(this, surfRight, surfBottomRight, surfBottom) * HEIGHT_MULTIPLER,\n            bottomLeftVertex.y + avgHeight(surfLeft, this, surfBottom, surfBottomLeft) * HEIGHT_MULTIPLER,\n        )\n\n        this.mesh = new Mesh(geometry, new MeshPhongMaterial({shininess: 0}))\n        this.mesh.userData = {selectable: this}\n\n        this.terrain.floorGroup.add(this.mesh)\n        this.terrain.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.SURFACE\n    }\n\n    select(): Selectable {\n        if (this.surfaceType.selectable && (this.wallType !== WALL_TYPE.INVERTED_CORNER && this.wallType !== WALL_TYPE.WEIRD_CREVICE) && !this.selected) {\n            this.selected = true\n            this.accessMaterials().forEach((mat) => mat.color.setHex(0x6060a0))\n            EventBus.publishEvent(new SurfaceSelectedEvent(this))\n            return this\n        }\n        return null\n    }\n\n    deselect(): any {\n        if (this.selected) {\n            this.selected = false\n            this.updateJobColor()\n        }\n    }\n\n    getSelectionCenter(): Vector3 {\n        return null // not used\n    }\n\n    updateJobColor() {\n        let color = 0xffffff\n        this.jobs.forEach((job) => color = job.workType.color) // TODO prioritize colors?\n        this.accessMaterials().forEach((mat) => mat.color.setHex(color))\n    }\n\n    hasRubble(): boolean { // TODO performance: use boolean on surfacetype\n        return this.surfaceType === SurfaceType.RUBBLE1\n            || this.surfaceType === SurfaceType.RUBBLE2\n            || this.surfaceType === SurfaceType.RUBBLE3\n            || this.surfaceType === SurfaceType.RUBBLE4\n    }\n\n    isPath(): boolean {\n        return this.surfaceType === SurfaceType.POWER_PATH || this.surfaceType === SurfaceType.POWER_PATH_BUILDING\n    }\n\n    isWalkable(): boolean {\n        return this.surfaceType.floor && this.discovered && this.surfaceType !== SurfaceType.LAVA && this.surfaceType !== SurfaceType.WATER\n    }\n\n    isDrillable(): boolean {\n        return this.surfaceType.drillable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isReinforcable(): boolean {\n        return this.surfaceType.reinforcable && this.discovered && this.wallType === WALL_TYPE.WALL && !this.reinforced\n    }\n\n    isExplodable(): boolean {\n        return this.surfaceType.explodable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDigable(): boolean {\n        return this.isDrillable() || this.isExplodable()\n    }\n\n    getDigPositions(): Vector3[] {\n        const digPosition = []\n        if (this.terrain.getSurface(this.x - 1, this.y).isWalkable()) digPosition.push(new Vector3(this.x * TILESIZE - 1, 0, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y - 1).isWalkable()) digPosition.push(new Vector3(this.x * TILESIZE + TILESIZE / 2, 0, this.y * TILESIZE - 1))\n        if (this.terrain.getSurface(this.x + 1, this.y).isWalkable()) digPosition.push(new Vector3(this.x * TILESIZE + TILESIZE + 1, 0, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y + 1).isWalkable()) digPosition.push(new Vector3(this.x * TILESIZE + TILESIZE / 2, 0, this.y * TILESIZE + TILESIZE + 1))\n        return digPosition\n    }\n\n    reinforce() {\n        this.reinforced = true\n        this.cancelReinforceJobs()\n        if (this.fallinTimeout) clearTimeout(this.fallinTimeout)\n        this.updateTexture()\n    }\n\n    getCenterWorld(): Vector3 {\n        const center = new Vector3(this.x * TILESIZE + TILESIZE / 2, 0, this.y * TILESIZE + TILESIZE / 2)\n        center.y = this.terrain.worldMgr.getTerrainHeight(center.x, center.z)\n        return center\n    }\n\n    setFallinLevel(fallinLevel: number) {\n        if (fallinLevel < 1) return\n        let originPos\n        let targetPos\n        if (this.surfaceType.floor) {\n            originPos = this.terrain.findFallInOrigin(this.x, this.y)\n            targetPos = [this.x, this.y]\n        } else {\n            originPos = [this.x, this.y]\n            targetPos = this.terrain.findFallInTarget(this.x, this.y)\n        }\n        if (originPos && targetPos) {\n            this.terrain.getSurface(originPos[0], originPos[1]).scheduleFallin(targetPos[0], targetPos[1])\n        }\n    }\n\n    scheduleFallin(targetX: number, targetY: number) {\n        this.fallinTimeout = setTimeout(() => {\n            this.createFallin(targetX, targetY)\n            this.scheduleFallin(targetX, targetY)\n        }, (30 + getRandom(60)) * 1000) // TODO adapt timer to level multiplier and fallin value\n    }\n\n    createFallin(targetX: number, targetY: number) {\n        const fallinPosition = this.terrain.getSurface(targetX, targetY).getCenterWorld()\n        EventBus.publishEvent(new LandslideEvent(fallinPosition))\n\n        // FIXME refactor animation handling\n        const content = ResourceManager.getResource('MiscAnims/RockFall/Rock3Sides.lws')\n        const animation = new LWSCLoader('MiscAnims/RockFall/').parse(content)\n        this.fallinGrp = new Group()\n        this.fallinGrp.position.copy(fallinPosition)\n        const dx = this.x - targetX, dy = targetY - this.y\n        this.fallinGrp.rotateOnAxis(new Vector3(0, 1, 0), Math.atan2(dy, dx) + Math.PI / 2)\n        this.terrain.worldMgr.sceneManager.scene.add(this.fallinGrp)\n        const poly = []\n        animation.bodies.forEach((body) => {\n            const polyModel = body.model.clone(true)\n            poly.push(polyModel)\n        })\n        animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                poly[parentInd].add(polyPart)\n            } else {\n                this.fallinGrp.add(polyPart)\n            }\n        })\n        this.animate(poly, animation, 0)\n\n        const targetSurface = this.terrain.getSurface(targetX, targetY)\n        targetSurface.surfaceType = SurfaceType.RUBBLE4\n        targetSurface.updateTexture()\n    }\n\n    animate(poly, animation, frameIndex) { // FIXME refactor animation handling\n        if (poly.length !== animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = true\n                        mat.alphaTest = 0\n                    })\n                }\n            }\n        })\n        this.animationTimeout = null\n        if (!(frameIndex + 1 > animation.lastFrame) || animation.looping) {\n            let nextFrame = frameIndex + 1\n            if (nextFrame > animation.lastFrame) {\n                nextFrame = animation.firstFrame\n            }\n            const that = this\n            this.animationTimeout = setTimeout(() => that.animate(poly, animation, nextFrame), 1000 / animation.framesPerSecond * animation.transcoef)\n        } else {\n            this.terrain.worldMgr.sceneManager.scene.remove(this.fallinGrp)\n            this.fallinGrp = null\n        }\n    }\n\n    dispose() {\n        this.mesh.geometry.dispose()\n        this.accessMaterials().forEach(m => m.dispose())\n    }\n\n}\n\nexport enum WALL_TYPE {\n\n    CORNER = 1,\n    WALL = 2,\n    INVERTED_CORNER = 3,\n    WEIRD_CREVICE = 20,\n\n}\n","import { CursorLayer, ScreenLayer } from './ScreenLayer'\nimport { EventManager } from '../event/EventManager'\n\nexport class BaseScreen {\n\n    gameCanvasContainer: HTMLElement\n    eventMgr: EventManager\n    layers: ScreenLayer[] = []\n    width: number = 800\n    height: number = 600\n    ratio: number = 800 / 600\n    cursorLayer: CursorLayer\n\n    constructor() {\n        this.gameCanvasContainer = document.getElementById('game-canvas-container')\n        this.gameCanvasContainer.focus()\n        this.eventMgr = new EventManager(this)\n        if (!this.gameCanvasContainer) throw 'Fatal error: game canvas container not found!'\n        window.addEventListener('resize', () => this.onWindowResize())\n        this.cursorLayer = this.addLayer(new CursorLayer(), 1000)\n        this.onWindowResize()\n    }\n\n    addLayer<T extends ScreenLayer>(layer: T, zIndex: number = 0): T {\n        layer.resize(this.width, this.height)\n        layer.setZIndex(zIndex)\n        this.layers.push(layer)\n        this.gameCanvasContainer.appendChild(layer.canvas)\n        return layer\n    }\n\n    redraw() {\n        this.layers.forEach((layer) => {\n            if (layer.isActive()) layer.redraw()\n        })\n    }\n\n    show() {\n        this.layers.forEach((layer) => layer.show())\n        this.redraw()\n    }\n\n    hide() {\n        this.layers.forEach((layer) => layer.hide())\n    }\n\n    onWindowResize() {\n        const maxWidth = this.gameCanvasContainer.offsetWidth, maxHeight = this.gameCanvasContainer.offsetHeight\n        const idealHeight = Math.round(maxWidth / this.ratio)\n        if (idealHeight > maxHeight) {\n            this.resize(Math.round(maxHeight * this.ratio), maxHeight)\n        } else {\n            this.resize(maxWidth, idealHeight)\n        }\n    }\n\n    resize(width: number, height: number) {\n        this.width = width\n        this.height = height\n        this.layers.forEach((layer) => layer.resize(width, height))\n        this.redraw()\n    }\n\n    isInRect(event: MouseEvent | WheelEvent) {\n        if (this.layers.length < 1) return false\n        const firstLayer = this.layers[0] // all layers have same state and size\n        if (!firstLayer.isActive() && !firstLayer.canvas) return false\n        const rect = firstLayer.canvas.getBoundingClientRect()\n        const clientX = event.clientX, clientY = event.clientY\n        return clientX >= rect.left && clientX < rect.right && clientY >= rect.top && clientY < rect.bottom\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScreenLayer } from './ScreenLayer'\n\nexport class LoadingScreen extends BaseScreen {\n\n    layer: ScreenLayer\n    assetIndex: number = 0\n    totalResources: number = 0\n\n    constructor() {\n        super()\n        this.layer = this.addLayer(new ScreenLayer())\n        this.layer.onRedraw = (context) => {\n            // clear the screen to black\n            context.fillStyle = 'black'\n            context.fillRect(0, 0, this.width, this.height)\n            // draw the loading title\n            context.font = '48px Arial'\n            context.fillStyle = 'white'\n            context.fillText('Loading Rock Raiders', 5, this.height - 80)\n            // hard-code the first loading message\n            context.font = '30px Arial'\n            context.fillStyle = 'white'\n            context.fillText('Loading...', 20, this.height - 30)\n        }\n    }\n\n    show() {\n        this.layers.forEach((layer) => {\n            if (layer !== this.cursorLayer) layer.show()\n        })\n        this.redraw()\n    }\n\n    setLoadingMessage(text) {\n        this.layer.onRedraw = (context) => {\n            // wipe old message text\n            context.fillStyle = 'black'\n            context.fillRect(0, this.height - 60, this.width, 60)\n            // write new message text\n            context.font = '30px Arial'\n            context.fillStyle = 'white'\n            context.fillText(text, 20, this.height - 30)\n        }\n        this.redraw()\n    }\n\n    enableGraphicMode(totalResources: number) {\n        this.totalResources = totalResources\n        const imgBackground = ResourceManager.getImage(ResourceManager.cfg('Main', 'LoadScreen'))\n        const imgProgress = ResourceManager.getImage(ResourceManager.cfg('Main', 'ProgressBar'))\n        this.layer.onRedraw = (context => {\n            const screenZoom = this.width / imgBackground.width\n            const loadingBarWidth = 353 * this.assetIndex / this.totalResources * screenZoom\n            context.drawImage(imgBackground, 0, 0, this.width, this.height)\n            context.drawImage(imgProgress, 142 * screenZoom, 450 * screenZoom, loadingBarWidth, 9 * screenZoom)\n            // TODO show LoadingText from cfg\n        })\n        this.cursorLayer.show()\n        this.redraw()\n    }\n\n    setLoadingState(assetIndex) {\n        if (this.assetIndex === assetIndex) return\n        this.assetIndex = assetIndex\n        this.redraw()\n    }\n\n}\n","export class MainMenuBaseItem {\n\n    x: number = 0\n    y: number = 0\n    width: number = 0\n    height: number = 0\n    zIndex: number = 100\n    scrollAffected = false\n    needsRedraw: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n    actionName: string = ''\n    targetIndex: number = 0\n\n    static compareZ(left: MainMenuBaseItem, right: MainMenuBaseItem) {\n        return left.zIndex === right.zIndex ? 0 : left.zIndex > right.zIndex ? -1 : 1\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const hover = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        if (this.hover !== hover) {\n            this.hover = hover\n            this.needsRedraw = true\n            this.onHoverChange()\n        }\n        if (!this.hover) this.pressed = false\n        return this.hover\n    }\n\n    onHoverChange() {\n    }\n\n    checkSetPressed() {\n        if (!this.hover) return\n        if (!this.pressed) this.needsRedraw = true\n        this.pressed = true\n    }\n\n    setReleased() {\n        if (this.pressed) this.needsRedraw = true\n        this.pressed = false\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        this.needsRedraw = false\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\n\nexport class MainMenuLabelButton extends MainMenuBaseItem {\n\n    labelImgLo = null\n    labelImgHi = null\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.labelImgLo = layer.loFont.createTextImage(cfg.label)\n        this.labelImgHi = layer.hiFont.createTextImage(cfg.label)\n        this.width = Math.max(this.labelImgLo.width, this.labelImgHi.width)\n        this.height = Math.max(this.labelImgLo.height, this.labelImgHi.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const img = this.hover && !this.pressed ? this.labelImgHi : this.labelImgLo\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\n\nexport class MainMenuIconButton extends MainMenuBaseItem {\n\n    imgNormal = null\n    imgHover = null\n    imgPressed = null\n    tooltip = ''\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.imgNormal = ResourceManager.getImage(cfg.imgNormal)\n        this.imgHover = ResourceManager.getImage(cfg.imgHover)\n        this.imgPressed = ResourceManager.getImage(cfg.imgPressed)\n        this.tooltip = (cfg.tooltip || '').replace(/_/g, ' ')\n        this.width = Math.max(this.imgNormal.width, this.imgHover.width, this.imgPressed.width)\n        this.height = Math.max(this.imgNormal.height, this.imgHover.height, this.imgPressed.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgNormal\n        if (this.hover) img = this.imgHover\n        if (this.pressed) img = this.imgPressed\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuLabelButton } from './MainMenuLabelButton'\nimport { ScaledLayer } from '../screen/ScreenLayer'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventManager'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuIconButton } from './MainMenuIconButton'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\n\nexport class MainMenuLayer extends ScaledLayer {\n\n    screen: MainMenuScreen\n    cfg: MenuEntryCfg\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    items: MainMenuBaseItem[] = []\n    scrollY: number = 0\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg) {\n        super()\n        this.screen = screen\n        this.cfg = menuCfg\n        this.loFont = menuCfg.loFont ? ResourceManager.getBitmapFont(menuCfg.loFont) : null\n        this.hiFont = menuCfg.hiFont ? ResourceManager.getBitmapFont(menuCfg.hiFont) : null\n        this.menuImage = menuCfg.menuImage ? ResourceManager.getImage(menuCfg.menuImage) : null\n        this.titleImage = this.loFont.createTextImage(menuCfg.fullName)\n\n        menuCfg.itemsLabel.forEach((item) => {\n            if (item.label) {\n                this.items.push(new MainMenuLabelButton(this, item))\n            } else {\n                this.items.push(new MainMenuIconButton(this, item))\n            }\n        })\n        // TODO implement other elements like itemsTrigger\n\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n\n        this.onRedraw = (context) => {\n            context.drawImage(this.menuImage, 0, -this.scrollY)\n            if (menuCfg.displayTitle) context.drawImage(this.titleImage, (this.fixedWidth - this.titleImage.width) / 2, this.cfg.position[1])\n            this.items.forEach((item, index) => (this.items[this.items.length - 1 - index]).draw(context))\n        }\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (eventEnum === POINTER_EVENT.MOVE) { // TODO scroll when close to menu top/bottom border\n            const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n            let hovered = false\n            this.items.forEach((item) => {\n                if (!hovered) {\n                    const absY = sy + (item.scrollAffected ? this.scrollY : 0)\n                    hovered = item.checkHover(sx, absY)\n                } else {\n                    if (item.hover) item.needsRedraw = true\n                    item.hover = false\n                    item.setReleased()\n                }\n            })\n        } else if (eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => item.checkSetPressed())\n            }\n        } else if (eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => {\n                    if (item.pressed) {\n                        item.setReleased()\n                        if (item.actionName.toLowerCase() === 'next') {\n                            this.screen.showMainMenu(item.targetIndex)\n                        } else if (item.actionName.toLowerCase() === 'selectlevel') {\n                            this.screen.selectLevel((item as MainMenuLevelButton).levelKey)\n                        } else if (item.actionName) {\n                            console.warn('not implemented: ' + item.actionName + ' - ' + item.targetIndex)\n                        }\n                    }\n                })\n            }\n        }\n        if (this.needsRedraw()) this.redraw()\n        return false\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        if (!this.cfg.canScroll) return false\n        this.scrollY = Math.min(Math.max(this.scrollY + event.deltaY, 0), this.menuImage.height - this.fixedHeight)\n        this.redraw()\n        return true\n    }\n\n    needsRedraw(): boolean {\n        return this.items.some((item) => item.needsRedraw)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class MainMenuLevelButton extends MainMenuBaseItem {\n\n    layer: MainMenuLayer\n    imgActive = null\n    imgInactive = null\n    imgCross = null\n    unlocked: boolean = false\n    levelKey: string = ''\n\n    constructor(layer: MainMenuLayer, levelKey: string, levelCfg: LevelEntryCfg) {\n        super()\n        this.layer = layer\n        this.actionName = 'selectlevel'\n        this.levelKey = levelKey\n        this.x = levelCfg.frontEndX\n        this.y = levelCfg.frontEndY\n        this.zIndex = 10\n        this.scrollAffected = true\n        const [imgActive, imgInactive, imgCross] = levelCfg.menuBMP\n        this.imgActive = ResourceManager.getImage(imgActive)\n        this.imgInactive = ResourceManager.getImage(imgInactive)\n        this.imgCross = ResourceManager.getImage(imgCross)\n        this.width = Math.max(this.imgActive.width, this.imgInactive.width, this.imgCross.width)\n        this.height = Math.max(this.imgActive.height, this.imgInactive.height, this.imgCross.height)\n        this.unlocked = levelCfg.frontEndOpen\n        this.unlocked = true // TODO don't unlock everything by default\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgCross\n        if (this.unlocked) img = this.hover ? this.imgActive : this.imgInactive\n        context.drawImage(img, this.x, this.y - this.layer.scrollY)\n    }\n\n}\n","import { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { createContext } from '../core/ImageHelper'\n\nexport class MainMenuPanel extends MainMenuBaseItem {\n\n    context: CanvasRenderingContext2D\n\n    constructor(imgData: ImageData, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.zIndex = 50\n        this.context = createContext(imgData.width, imgData.height)\n        this.context.putImageData(imgData, 0, 0)\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const inRect = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        const hover = inRect && this.context.getImageData(sx, sy, 1, 1).data[3] > 0\n        if (this.hover !== hover) this.needsRedraw = true\n        this.hover = hover\n        return this.hover\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        context.drawImage(this.context.canvas, this.x, this.y, this.width, this.height)\n    }\n\n}\n","import { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { BitmapFont } from '../core/BitmapFont'\n\nexport class MainMenuWindow extends MainMenuBaseItem {\n\n    font: BitmapFont\n    imgFirstLine = null\n    imgSecondLine = null\n\n    constructor(font: BitmapFont, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.font = font\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    setFirstLine(text: string) {\n        this.imgFirstLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    setSecondLine(text: string) {\n        this.imgSecondLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const cx = this.x + this.width / 2, cy = this.y + this.height / 2\n        if (this.imgFirstLine) context.drawImage(this.imgFirstLine, cx - this.imgFirstLine.width / 2, cy - this.imgFirstLine.height)\n        if (this.imgSecondLine) context.drawImage(this.imgSecondLine, cx - this.imgSecondLine.width / 2, cy)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { LevelEntryCfg, LevelsCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { iGet } from '../core/Util'\nimport { MainMenuPanel } from './MainMenuPanel'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuWindow } from './MainMenuWindow'\n\nexport class LevelSelectLayer extends MainMenuLayer {\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg, modeLevel: boolean) {\n        super(screen, menuCfg)\n        const levelsCfg: LevelsCfg = ResourceManager.getResource('Levels')\n        const levelTextCfg = new LevelTextCfg()\n        this.items.push(new MainMenuPanel(levelTextCfg.panelImgData, levelTextCfg.panelPos))\n        const levelTextWindow = new MainMenuWindow(ResourceManager.getBitmapFont('Interface/Fonts/Font5_Hi.bmp'), levelTextCfg.window)\n        levelTextWindow.setFirstLine(modeLevel ? levelTextCfg.level : levelTextCfg.tutorial)\n        this.items.push(levelTextWindow)\n        Object.keys(levelsCfg.levelsByName).forEach((levelKey) => {\n            const level: LevelEntryCfg = levelsCfg.levelsByName[levelKey]\n            const levelButton = new MainMenuLevelButton(this, levelKey, level)\n            levelButton.onHoverChange = () => levelTextWindow.setSecondLine(levelButton.hover ? level.fullName : '')\n            this.items.push(levelButton)\n        })\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n    }\n\n    show() {\n        this.scrollY = 0\n        super.show()\n    }\n\n}\n\nclass LevelTextCfg {\n\n    window = {x: 0, y: 0, w: 0, h: 0}\n    panelImgData: ImageData\n    panelPos = {x: 0, y: 0, w: 0, h: 0}\n    level: string = ''\n    tutorial: string = ''\n\n    constructor() {\n        const cfg = ResourceManager.cfg('Menu', 'LevelText')\n        const winCfg = iGet(cfg, 'Window')\n        this.window = {x: winCfg[0], y: winCfg[1], w: winCfg[2], h: winCfg[3]}\n        const panelCfg = iGet(cfg, 'Panel')\n        this.panelImgData = ResourceManager.getImageData(panelCfg[0])\n        this.panelPos = {x: panelCfg[1], y: panelCfg[2], w: panelCfg[3], h: panelCfg[4]}\n        this.level = iGet(cfg, 'Level').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n        this.tutorial = iGet(cfg, 'Tutorial').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MenuCfg } from '../cfg/MenuCfg'\nimport { MainMenuLayer } from '../menu/MainMenuLayer'\nimport { LevelSelectLayer } from '../menu/LevelSelectLayer'\n\nexport class MainMenuScreen extends BaseScreen {\n\n    onLevelSelected: (levelName: string) => void = null\n    menus: MainMenuLayer[] = []\n\n    constructor() {\n        super()\n        const mainMenuFullCfg = ResourceManager.getResource('MainMenuFull') as MenuCfg\n        mainMenuFullCfg.menus.forEach((menuCfg) => {\n            let layer\n            if (menuCfg.title === 'Levels') {\n                layer = new LevelSelectLayer(this, menuCfg, true)\n            } else if (menuCfg.title === 'Tutorials') {\n                layer = new LevelSelectLayer(this, menuCfg, false)\n            } else {\n                layer = new MainMenuLayer(this, menuCfg)\n            }\n            this.menus.push(layer)\n            this.addLayer(layer)\n        })\n    }\n\n    showMainMenu(index: number = 0) {\n        this.hide()\n        this.menus[index].show()\n        this.cursorLayer.show()\n    }\n\n    showLevelSelection() {\n        this.showMainMenu(1)\n    }\n\n    selectLevel(levelName) {\n        this.hide()\n        this.onLevelSelected(levelName)\n    }\n\n}\n","export class SurfaceType {\n\n    name: string // humand readable, maybe used as label lateron\n    shaping: boolean = false\n    matIndex: string = '00'\n    floor: boolean = false\n    selectable: boolean = false\n    drillable: boolean = false\n    explodable: boolean = false\n    reinforcable: boolean = false\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options)\n    }\n\n    static readonly GROUND = new SurfaceType({name: 'ground', floor: true, selectable: true})\n    static readonly SOLID_ROCK = new SurfaceType({name: 'solid rock', shaping: true, matIndex: '5'})\n    static readonly HARD_ROCK = new SurfaceType({\n        name: 'hard rock',\n        shaping: true,\n        matIndex: '4',\n        selectable: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly LOOSE_ROCK = new SurfaceType({\n        name: 'loose rock',\n        shaping: true,\n        matIndex: '3',\n        selectable: true,\n        drillable: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly DIRT = new SurfaceType({\n        name: 'dirt',\n        shaping: true,\n        matIndex: '1',\n        selectable: true,\n        drillable: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly SLUG_HOLE = new SurfaceType({name: 'slug hole', floor: true, matIndex: '30'})\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'})\n    static readonly ORE_SEAM = new SurfaceType({\n        name: 'ore seam',\n        matIndex: '40',\n        selectable: true,\n        drillable: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45'})\n    static readonly CRYSTAL_SEAM = new SurfaceType({\n        name: 'energy crystal seam',\n        matIndex: '20',\n        selectable: true,\n        drillable: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly RECHARGE_SEAM = new SurfaceType({name: 'recharge seam', matIndex: '67'})\n    static readonly POWER_PATH = new SurfaceType({\n        name: 'power path all',\n        floor: true,\n        matIndex: '60',\n        selectable: true,\n    })\n    static readonly POWER_PATH_SITE = new SurfaceType({\n        name: 'power path site',\n        floor: true,\n        matIndex: '61',\n        selectable: true,\n    })\n    static readonly POWER_PATH_BUILDING = new SurfaceType({name: 'power path', floor: true, matIndex: '76'})\n    static readonly RUBBLE1 = new SurfaceType({name: 'rubble 1', floor: true, matIndex: '13', selectable: true})\n    static readonly RUBBLE2 = new SurfaceType({name: 'rubble 2', floor: true, matIndex: '12', selectable: true})\n    static readonly RUBBLE3 = new SurfaceType({name: 'rubble 3', floor: true, matIndex: '11', selectable: true})\n    static readonly RUBBLE4 = new SurfaceType({name: 'rubble 4', floor: true, matIndex: '10', selectable: true})\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING\n            case 1:\n                return SurfaceType.SOLID_ROCK\n            case 2:\n                return SurfaceType.HARD_ROCK\n            case 3:\n                return SurfaceType.LOOSE_ROCK\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT\n            case 6:\n                return SurfaceType.LAVA\n            case 8:\n                return SurfaceType.ORE_SEAM\n            case 9:\n                return SurfaceType.WATER\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM\n            case 11:\n                return SurfaceType.RECHARGE_SEAM\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE\n            case 100:\n                return SurfaceType.RUBBLE4\n            case 101:\n                return SurfaceType.RUBBLE3\n            case 102:\n                return SurfaceType.RUBBLE2\n            case 103:\n                return SurfaceType.RUBBLE1\n            default:\n                console.error('Unexpected surface type num: ' + typeNum)\n                return SurfaceType.SOLID_ROCK\n        }\n    }\n}\n","import { Surface } from '../../../scene/model/map/Surface'\nimport { FulfillerEntity } from '../../../scene/model/FulfillerEntity'\nimport { Vector3 } from 'three'\nimport { JOB_ACTION_RANGE, TILESIZE } from '../../../main'\nimport { Dynamite } from '../../../scene/model/collect/Dynamite'\nimport { Job, JobType } from './Job'\nimport { SurfaceType } from '../../../scene/model/map/SurfaceType'\nimport { CollectableEntity } from '../../../scene/model/collect/CollectableEntity'\n\nexport class SurfaceJobType {\n\n    color: number\n    requiredTools: string[]\n    requiredSkills: string[]\n\n    constructor(color: number, requiredTools: string[], requiredSkills: string[]) {\n        this.color = color\n        this.requiredTools = requiredTools\n        this.requiredSkills = requiredSkills\n    }\n\n    static readonly DRILL = new SurfaceJobType(0xa0a0a0, ['drill'], [])\n    static readonly REINFORCE = new SurfaceJobType(0x60a060, ['hammer'], [])\n    static readonly BLOW = new SurfaceJobType(0xa06060, [], ['demolition'])\n    static readonly CLEAR_RUBBLE = new SurfaceJobType(0xffffff, ['shovel'], [])\n\n}\n\nexport class SurfaceJob extends Job {\n\n    surface: Surface\n    workType: SurfaceJobType\n\n    constructor(workType: SurfaceJobType, surface: Surface) {\n        super(JobType.SURFACE)\n        this.surface = surface\n        this.workType = workType\n    }\n\n    isQualified(fulfiller: FulfillerEntity) {\n        return fulfiller.hasTools(this.workType.requiredTools) && fulfiller.hasSkills(this.workType.requiredSkills)\n    }\n\n    getPosition(): Vector3 {\n        if (this.workType === SurfaceJobType.CLEAR_RUBBLE) {\n            return this.surface.getCenterWorld()\n        } else {\n            const digPos = this.surface.getDigPositions()[0]\n            digPos.y = this.surface.terrain.worldMgr.getTerrainHeight(digPos.x, digPos.z)\n            return digPos\n        }\n    }\n\n    isInArea(x: number, z: number): boolean {\n        if (this.workType === SurfaceJobType.CLEAR_RUBBLE) {\n            return x >= this.surface.x * TILESIZE + 5 && x < this.surface.x * TILESIZE + TILESIZE + 5\n                && z >= this.surface.y * TILESIZE + 5 && z < this.surface.y * TILESIZE + TILESIZE + 5\n        } else {\n            const pos = this.getPosition()\n            return pos.sub(new Vector3(x, pos.y, z)).length() < JOB_ACTION_RANGE\n        }\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        switch (this.workType) {\n            case SurfaceJobType.DRILL:\n                this.surface.collapse()\n                break\n            case SurfaceJobType.REINFORCE:\n                this.surface.reinforce()\n                break\n            case SurfaceJobType.CLEAR_RUBBLE:\n                this.surface.reduceRubble()\n                break\n        }\n    }\n\n}\n\nexport class DynamiteJob extends SurfaceJob {\n\n    dynamite: Dynamite\n\n    constructor(surface: Surface, dynamite: Dynamite) {\n        super(SurfaceJobType.BLOW, surface)\n        this.dynamite = dynamite\n    }\n\n    getPosition(): Vector3 {\n        return this.dynamite.getPosition()\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.dynamite.ignite()\n    }\n\n}\n\nexport class CompletePowerPathJob extends SurfaceJob {\n\n    placedItems: CollectableEntity[]\n\n    constructor(surface: Surface, placedItems: CollectableEntity[]) {\n        super(SurfaceJobType.CLEAR_RUBBLE, surface)\n        this.placedItems = placedItems\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.placedItems.forEach((placed) => placed.worldMgr.sceneManager.scene.remove(placed.group))\n        this.surface.surfaceType = SurfaceType.POWER_PATH\n        this.surface.updateTexture()\n    }\n\n}\n","import { BufferGeometry, Vector2, Vector3 } from 'three'\nimport { WALL_TYPE } from './Surface'\nimport { BufferAttribute } from 'three/src/core/BufferAttribute'\n\nexport class SurfaceGeometry {\n\n    public static create(wallType: WALL_TYPE,\n                         topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3,\n                         topLeftHeight: number, topRightHeight: number, bottomRightHeight: number, bottomLeftHeight: number,\n    ) {\n        let uvOffset = 0\n\n        // not-rotated\n        // 1 ?\n        // ? 0\n        if (topLeftVertex.y && !bottomRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topRightVertex.y)))) {\n            uvOffset = 0\n        }\n\n        // 90 clock-wise\n        // ? 1\n        // 0 ?\n        if (topRightVertex.y && !bottomLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomRightVertex.y)))) {\n            uvOffset = 3\n        }\n\n        // 180 clock-wise\n        // 0 ?\n        // ? 1\n        if (bottomRightVertex.y && !topLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomLeftVertex.y)))) {\n            uvOffset = 2\n        }\n\n        // 270 clock-wise\n        // ? 0\n        // 1 ?\n        if (bottomLeftVertex.y && !topRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topLeftVertex.y)))) {\n            uvOffset = 1\n        }\n\n        if (wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) {\n            if (topLeftVertex.y && bottomRightVertex.y) {\n                uvOffset = 0\n            }\n            if (topRightVertex.y && bottomLeftVertex.y) {\n                uvOffset = 3\n            }\n        }\n\n        /*\n        //\t\t0---1                1         0---1\n        //\t\t|   |  becomes      /|   and   |  /\n        //\t\t|   |             /  |         |/\n        //\t\t3---2            3---2         3\n        //\n        //\t\tOR\n        //\n        //\t\t0---1            0             0---1\n        //\t\t|   |  becomes   |\\    \t and    \\  |\n        //\t\t|   |            |  \\             \\|\n        //\t\t3---2            3---2             2\n        //\n        //\t\tTriangles 0-1-3 and 0-3-2\n        //\t\tQuad 0-1-3-2\n        */\n\n        const uv = [\n            new Vector2(0, 1),\n            new Vector2(1, 1),\n            new Vector2(1, 0),\n            new Vector2(0, 0),\n        ]\n\n        const bufferVertices = []\n        const bufferNormals = []\n\n        function addFaceAndNormals(a, b, c) {\n            bufferVertices.push(a, b, c)\n            const normal = new Vector3().subVectors(c, b)\n            normal.cross(new Vector3().subVectors(a, b))\n            normal.normalize()\n            bufferNormals.push(normal, normal, normal)\n        }\n\n        const uvIndexes = []\n        if (topRightVertex.y !== bottomLeftVertex.y ||\n            ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) && !(topRightVertex.y && bottomLeftVertex.y))) {\n            uvIndexes.push(1, 3, 2)\n            uvIndexes.push(1, 0, 3)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topRightVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topRightVertex, topLeftVertex, bottomLeftVertex)\n        } else {\n            uvIndexes.push(0, 3, 2)\n            uvIndexes.push(0, 2, 1)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topLeftVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topLeftVertex, bottomRightVertex, topRightVertex)\n        }\n\n        const bufferVertexUvs = uvIndexes.map(i => uv[(i + uvOffset) % 4])\n\n        const bufferGeometry = new BufferGeometry()\n        bufferGeometry.setAttribute('position', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferVertices))\n        bufferGeometry.setAttribute('normal', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferNormals))\n        bufferGeometry.setAttribute('uv', new BufferAttribute(new Float32Array(12), 2).copyVector2sArray(bufferVertexUvs))\n        return bufferGeometry\n    }\n}\n","import { WorldEvent } from './WorldEvents'\nimport { Vector3 } from 'three'\n\nexport class WorldLocationEvent extends WorldEvent {\n\n    location: Vector3\n\n    constructor(entityKey: string, location: Vector3) {\n        super(entityKey)\n        this.location = location\n    }\n\n}\n\nexport class GenericDeathEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.death'\n\n    constructor(location: Vector3) {\n        super(GenericDeathEvent.eventKey, location)\n    }\n\n}\n\nexport class GenericMonsterEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.monster'\n\n    constructor(location: Vector3) {\n        super(GenericMonsterEvent.eventKey, location)\n    }\n\n}\n\nexport class CrystalFoundEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.crystal_found'\n\n    constructor(location: Vector3) {\n        super(CrystalFoundEvent.eventKey, location)\n    }\n\n}\n\nexport class UnderAttackEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.under_attack'\n\n    constructor(location: Vector3) {\n        super(UnderAttackEvent.eventKey, location)\n    }\n\n}\n\nexport class LandslideEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.landslide'\n\n    constructor(location: Vector3) {\n        super(LandslideEvent.eventKey, location)\n    }\n\n}\n\nexport class PowerDrainEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.power_drain'\n\n    constructor(location: Vector3) {\n        super(PowerDrainEvent.eventKey, location)\n    }\n\n}\n\nexport class SlugEmergeEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.slug_emerge'\n\n    constructor(location: Vector3) {\n        super(SlugEmergeEvent.eventKey, location)\n    }\n\n}\n\nexport class RaiderDiscoveredEvent extends WorldLocationEvent {\n\n    static eventKey = 'location.raider_discovered'\n\n    constructor(location: Vector3) {\n        super(RaiderDiscoveredEvent.eventKey, location)\n    }\n\n}\n","// javascript-astar 0.4.1 (converted to typescript by Scarabol)\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n\nfunction pathTo(node) {\n    let curr = node\n    const path = []\n    while (curr.parent) {\n        path.unshift(curr)\n        curr = curr.parent\n    }\n    return path\n}\n\nfunction getHeap() {\n    return new BinaryHeap(function (node) {\n        return node.f\n    })\n}\n\nexport const astar = {\n\n    /**\n     * Perform an A* Search on a graph given a start and end node.\n     * @param {Graph} graph\n     * @param {GridNode} start\n     * @param {GridNode} end\n     * @param {Object} [options]\n     * @param {boolean} [options.closest] Specifies whether to return the\n     path to the closest node if the target is unreachable.\n     * @param {Function} [options.heuristic] Heuristic function (see\n     *          astar.heuristics).\n     */\n    search(graph: Graph, start: GridNode, end: GridNode, options = null): GridNode[] {\n        graph.cleanDirty()\n        options = options || {}\n        const heuristic = options.heuristic || astar.heuristics.manhattan\n        const closest = options.closest || false\n\n        const openHeap = getHeap()\n        let closestNode = start  // set the start node to be the closest if required\n\n        start.h = heuristic(start, end)\n        graph.markDirty(start)\n\n        openHeap.push(start)\n\n        while (openHeap.size() > 0) {\n\n            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n            const currentNode = openHeap.pop()\n\n            // End case -- result has been found, return the traced path.\n            if (currentNode === end) {\n                return pathTo(currentNode)\n            }\n\n            // Normal case -- move currentNode from open to closed, process each of its neighbors.\n            currentNode.closed = true\n\n            // Find all neighbors for the current node.\n            const neighbors = graph.neighbors(currentNode)\n\n            let i = 0\n            const il = neighbors.length\n            for (; i < il; ++i) {\n                const neighbor = neighbors[i]\n\n                if (neighbor.closed || neighbor.isWall()) {\n                    // Not a valid node to process, skip to next neighbor.\n                    continue\n                }\n\n                // The g score is the shortest distance from start to current node.\n                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n                const gScore = currentNode.g + neighbor.getCost(currentNode)\n                const beenVisited = neighbor.visited\n\n                if (!beenVisited || gScore < neighbor.g) {\n\n                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n                    neighbor.visited = true\n                    neighbor.parent = currentNode\n                    neighbor.h = neighbor.h || heuristic(neighbor, end)\n                    neighbor.g = gScore\n                    neighbor.f = neighbor.g + neighbor.h\n                    graph.markDirty(neighbor)\n                    if (closest) {\n                        // If the neighbour is closer than the current closestNode or if it's equally close but has\n                        // a cheaper path than the current closest node then it becomes the closest node\n                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n                            closestNode = neighbor\n                        }\n                    }\n\n                    if (!beenVisited) {\n                        // Pushing to heap will put it in proper place based on the 'f' value.\n                        openHeap.push(neighbor)\n                    } else {\n                        // Already seen the node, but since it has been rescored we need to reorder it in the heap\n                        openHeap.rescoreElement(neighbor)\n                    }\n                }\n            }\n        }\n\n        if (closest) {\n            return pathTo(closestNode)\n        }\n\n        // No result was found - empty array signifies failure to find path.\n        return []\n    },\n\n    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n    heuristics: {\n        manhattan(pos0, pos1) {\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return d1 + d2\n        },\n\n        diagonal(pos0, pos1) {\n            const D = 1\n            const D2 = Math.sqrt(2)\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2))\n        },\n    },\n\n    cleanNode(node) {\n        node.f = 0\n        node.g = 0\n        node.h = 0\n        node.visited = false\n        node.closed = false\n        node.parent = null\n    },\n}\n\nexport class Graph {\n\n    readonly nodes: GridNode[] = []\n    readonly diagonal: boolean\n    readonly grid: GridNode[][] = []\n    dirtyNodes: GridNode[] = []\n\n    /**\n     * A graph memory structure\n     * @param {Array} gridIn 2D array of input weights\n     * @param {Object} [options]\n     * @param {boolean} [options.diagonal] Specifies whether diagonal moves are allowed\n     */\n    constructor(gridIn: number[][], options = null) {\n        options = options || {}\n        this.diagonal = !!options.diagonal\n        for (let x = 0; x < gridIn.length; x++) {\n            this.grid[x] = []\n\n            let y = 0\n            const row = gridIn[x]\n            for (; y < row.length; y++) {\n                const node = new GridNode(x, y, row[y])\n                this.grid[x][y] = node\n                this.nodes.push(node)\n            }\n        }\n        this.init()\n    }\n\n    init() {\n        this.dirtyNodes = []\n        for (let i = 0; i < this.nodes.length; i++) {\n            astar.cleanNode(this.nodes[i])\n        }\n    }\n\n    cleanDirty() {\n        for (let i = 0; i < this.dirtyNodes.length; i++) {\n            astar.cleanNode(this.dirtyNodes[i])\n        }\n        this.dirtyNodes = []\n    }\n\n    markDirty(node) {\n        this.dirtyNodes.push(node)\n    }\n\n    neighbors(node: GridNode) {\n        const ret: GridNode[] = []\n        const x = node.x\n        const y = node.y\n        const grid = this.grid\n\n        // West\n        if (grid[x - 1] && grid[x - 1][y]) {\n            ret.push(grid[x - 1][y])\n        }\n\n        // East\n        if (grid[x + 1] && grid[x + 1][y]) {\n            ret.push(grid[x + 1][y])\n        }\n\n        // South\n        if (grid[x] && grid[x][y - 1]) {\n            ret.push(grid[x][y - 1])\n        }\n\n        // North\n        if (grid[x] && grid[x][y + 1]) {\n            ret.push(grid[x][y + 1])\n        }\n\n        if (this.diagonal) {\n            // Southwest\n            if (grid[x - 1] && grid[x - 1][y - 1]) {\n                ret.push(grid[x - 1][y - 1])\n            }\n\n            // Southeast\n            if (grid[x + 1] && grid[x + 1][y - 1]) {\n                ret.push(grid[x + 1][y - 1])\n            }\n\n            // Northwest\n            if (grid[x - 1] && grid[x - 1][y + 1]) {\n                ret.push(grid[x - 1][y + 1])\n            }\n\n            // Northeast\n            if (grid[x + 1] && grid[x + 1][y + 1]) {\n                ret.push(grid[x + 1][y + 1])\n            }\n        }\n\n        return ret\n    }\n\n    toString() {\n        const graphString = []\n        const nodes = this.grid\n        for (let x = 0; x < nodes.length; x++) {\n            const rowDebug = []\n            const row = nodes[x]\n            for (let y = 0; y < row.length; y++) {\n                rowDebug.push(row[y].weight)\n            }\n            graphString.push(rowDebug.join(' '))\n        }\n        return graphString.join('\\n')\n    }\n}\n\nclass GridNode {\n\n    x: number\n    y: number\n    weight: number\n    h: number\n    closed: boolean\n    visited: boolean\n    g: number\n    parent: GridNode\n    f: number\n\n    constructor(x, y, weight) {\n        this.x = x\n        this.y = y\n        this.weight = weight\n    }\n\n    toString() {\n        return '[' + this.x + ' ' + this.y + ']'\n    }\n\n    getCost(fromNeighbor: GridNode) {\n        // Take diagonal weight into consideration.\n        if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n            return this.weight * 1.41421\n        }\n        return this.weight\n    }\n\n    isWall() {\n        return this.weight === 0\n    }\n}\n\nclass BinaryHeap {\n\n    content = []\n    scoreFunction\n\n    constructor(scoreFunction) {\n        this.content = []\n        this.scoreFunction = scoreFunction\n    }\n\n    push(element) {\n        // Add the new element to the end of the array.\n        this.content.push(element)\n\n        // Allow it to sink down.\n        this.sinkDown(this.content.length - 1)\n    }\n\n    pop() {\n        // Store the first element so we can return it later.\n        const result = this.content[0]\n        // Get the element at the end of the array.\n        const end = this.content.pop()\n        // If there are any elements left, put the end element at the\n        // start, and let it bubble up.\n        if (this.content.length > 0) {\n            this.content[0] = end\n            this.bubbleUp(0)\n        }\n        return result\n    }\n\n    remove(node) {\n        const i = this.content.indexOf(node)\n\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        const end = this.content.pop()\n\n        if (i !== this.content.length - 1) {\n            this.content[i] = end\n\n            if (this.scoreFunction(end) < this.scoreFunction(node)) {\n                this.sinkDown(i)\n            } else {\n                this.bubbleUp(i)\n            }\n        }\n    }\n\n    size() {\n        return this.content.length\n    }\n\n    rescoreElement(node) {\n        this.sinkDown(this.content.indexOf(node))\n    }\n\n    sinkDown(n) {\n        // Fetch the element that has to be sunk.\n        const element = this.content[n]\n\n        // When at 0, an element can not sink any further.\n        while (n > 0) {\n\n            // Compute the parent element's index, and fetch it.\n            const parentN = ((n + 1) >> 1) - 1\n            const parent = this.content[parentN]\n            // Swap the elements if the parent is greater.\n            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n                this.content[parentN] = element\n                this.content[n] = parent\n                // Update 'n' to continue at the new position.\n                n = parentN\n            }\n            // Found a parent that is less, no need to sink any further.\n            else {\n                break\n            }\n        }\n    }\n\n    bubbleUp(n) {\n        // Look up the target element and its score.\n        const length = this.content.length\n        const element = this.content[n]\n        const elemScore = this.scoreFunction(element)\n\n        while (true) {\n            // Compute the indices of the child elements.\n            const child2N = (n + 1) << 1\n            const child1N = child2N - 1\n            // This is used to store the new position of the element, if any.\n            let swap = null\n            let child1Score\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                const child1 = this.content[child1N]\n                child1Score = this.scoreFunction(child1)\n\n                // If the score is less than our element's, we need to swap.\n                if (child1Score < elemScore) {\n                    swap = child1N\n                }\n            }\n\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                const child2 = this.content[child2N]\n                const child2Score = this.scoreFunction(child2)\n                if (child2Score < (swap === null ? elemScore : child1Score)) {\n                    swap = child2N\n                }\n            }\n\n            // If the element needs to be moved, swap it, and continue.\n            if (swap !== null) {\n                this.content[n] = this.content[swap]\n                this.content[swap] = element\n                n = swap\n            }\n            // Otherwise, we are done.\n            else {\n                break\n            }\n        }\n    }\n}\n","import { Surface } from './model/map/Surface'\nimport { Terrain } from './model/map/Terrain'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { WorldManager } from './WorldManager'\nimport { TILESIZE } from '../main'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\n\nexport class TerrainLoader {\n\n    static loadTerrain(levelConf: LevelEntryCfg, worldMgr: WorldManager): Terrain {\n        const tileSize = levelConf.blockSize\n        if (tileSize !== TILESIZE) console.error('Unexpected tile size in level configuration: ' + tileSize)\n        const terrain = new Terrain(worldMgr)\n\n        const themeName = levelConf.textureSet[1]\n        terrain.textureSet = ResourceManager.cfg('Textures', themeName)\n        // console.log(terrain.textureSet);\n\n        const terrainMap = ResourceManager.getMap(levelConf.terrainMap)\n        terrain.width = terrainMap.width\n        terrain.height = terrainMap.height\n        const pathMap = ResourceManager.getMap(levelConf.pathMap)?.level\n        const surfaceMap = ResourceManager.getMap(levelConf.surfaceMap)?.level\n        const predugMap = ResourceManager.getMap(levelConf.predugMap)?.level\n        const cryOreMap = ResourceManager.getMap(levelConf.cryOreMap)?.level\n        const fallinMap = ResourceManager.getMap(levelConf.fallinMap)?.level\n        const erodeMap = ResourceManager.getMap(levelConf.erodeMap)?.level\n\n        // maps parsed from WAD are row-wise saved, which means y (row) comes first and x (column) second\n        for (let r = 0; r < terrainMap.level.length; r++) {\n            for (let c = 0; c < (terrainMap.level)[r].length; c++) {\n                (terrain.surfaces)[c] = (terrain.surfaces)[c] || []\n                const surfaceTypeNum = (terrainMap.level)[r][c]\n                let surfaceType = SurfaceType.getByNum(surfaceTypeNum)\n                const predugLevel = predugMap[r][c]\n                if (predugLevel === PredugMap.CAVERN_EXPOSED) {\n                    if (surfaceType === SurfaceType.GROUND || surfaceType === SurfaceType.DIRT) {\n                        surfaceType = SurfaceType.GROUND\n                    } else if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) {\n                        console.warn('Unexpected cavern surface type: ' + surfaceType.name)\n                    }\n                } else if (predugLevel === PredugMap.SLUG_HOLE_EXPOSED || predugLevel === PredugMap.SLUG_HOLE_HIDDEN) {\n                    surfaceType = SurfaceType.SLUG_HOLE\n                } else if (predugLevel !== PredugMap.WALL && predugLevel !== PredugMap.CAVERN_HIDDEN) {\n                    console.warn('Unexpected predug level: ' + predugLevel)\n                }\n                // give the path map the highest priority, if it exists\n                const pathMapLevel = pathMap && surfaceType.floor ? pathMap[r][c] : PathMap.NONE\n                if (pathMapLevel === PathMap.RUBBLE) {\n                    surfaceType = SurfaceType.RUBBLE4\n                } else if (pathMapLevel === PathMap.POWER_PATH) {\n                    surfaceType = SurfaceType.POWER_PATH\n                } else if (pathMapLevel !== PathMap.NONE) {\n                    console.warn('Unexpected path map level: ' + pathMapLevel)\n                }\n\n                const surface = new Surface(terrain, surfaceType, c, r, surfaceMap[r][c])\n                if (cryOreMap) {\n                    const currentCryOre = cryOreMap[r][c]\n                    if (currentCryOre % 2 === 1) {\n                        surface.containedCrystals = (currentCryOre + 1) / 2\n                    } else {\n                        surface.containedOres = currentCryOre / 2\n                    }\n                }\n\n                (terrain.surfaces)[c].push(surface)\n            }\n        }\n\n        // exlpore predug surfaces\n        terrain.surfaces.forEach(c => c.forEach(s => {\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_EXPOSED || predugMap[s.y][s.x] === PredugMap.SLUG_HOLE_EXPOSED) { // map are rows (y) first, columns (x) second\n                for (let x = s.x - 1; x <= s.x + 1; x++) {\n                    for (let y = s.y - 1; y <= s.y + 1; y++) {\n                        terrain.getSurfaceOrNull(x, y).discovered = true\n                    }\n                }\n            }\n        }))\n\n        // create hidden caverns\n        terrain.surfaces.forEach(c => c.forEach(s => {\n            const surface = terrain.getSurfaceOrNull(s.x, s.y)\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_HIDDEN && !surface.discovered) {\n                surface.surfaceType = SurfaceType.GROUND\n            }\n        }))\n\n        // crumble unsupported walls\n        terrain.surfaces.forEach((c) => c.forEach((s) => {\n            if (!s.isSupported()) s.collapse()\n        }))\n\n        terrain.updateSurfaceMeshes(true)\n\n        if (fallinMap) {\n            for (let x = 0; x < terrain.width; x++) {\n                for (let y = 0; y < terrain.height; y++) {\n                    terrain.getSurface(x, y).setFallinLevel(fallinMap[y][x]) // rows (y) before columns (x) used in maps\n                }\n            }\n        }\n\n        if (erodeMap) { // TODO implement lava erosion\n            console.warn('Lucky you! Lava erosion not yet implemented')\n        }\n\n        return terrain\n    }\n\n}\n\nenum PathMap {\n\n    NONE = 0,\n    RUBBLE = 1,\n    POWER_PATH = 2,\n\n}\n\nenum PredugMap {\n\n    WALL = 0,\n    CAVERN_EXPOSED = 1,\n    CAVERN_HIDDEN = 2,\n    SLUG_HOLE_EXPOSED = 3,\n    SLUG_HOLE_HIDDEN = 4,\n}\n","import { Group, Vector3 } from 'three'\nimport { Surface } from './Surface'\nimport { WorldManager } from '../../WorldManager'\nimport { SurfaceType } from './SurfaceType'\nimport { TILESIZE } from '../../../main'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityAddedEvent, EntityType } from '../../../event/WorldEvents'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { astar, Graph } from './astar'\n\nexport class Terrain {\n\n    worldMgr: WorldManager\n    textureSet: any = {}\n    width: number = 0\n    height: number = 0\n    surfaces: Surface[][] = []\n    floorGroup: Group = new Group()\n    roofGroup: Group = new Group()\n    graphWalk: Graph = null\n    cachedPaths = new Map()\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        this.floorGroup.scale.set(TILESIZE, TILESIZE, TILESIZE)\n        this.roofGroup.visible = false // keep roof hidden unless switched to other camera\n        EventBus.registerEventListener(EntityAddedEvent.eventKey, (event: EntityAddedEvent) => {\n            if (event.type !== EntityType.BUILDING) return;\n            (event.entity as BuildingEntity).surfaces.forEach((bSurf) => {\n                for (let x = -1; x <= 1; x++) {\n                    for (let y = -1; y <= 1; y++) {\n                        this.getSurface(bSurf.x + x, bSurf.y + y).updateTexture()\n                    }\n                }\n            })\n        })\n    }\n\n    getSurfaceFromWorld(worldPosition: Vector3): Surface | null {\n        return this.getSurface(worldPosition.x / TILESIZE, worldPosition.z / TILESIZE)\n    }\n\n    getSurface(x, y): Surface {\n        x = Math.floor(x)\n        y = Math.floor(y)\n        return this.getSurfaceOrNull(x, y) || new Surface(this, SurfaceType.SOLID_ROCK, x, y, 0)\n    }\n\n    getSurfaceOrNull(x, y): Surface | null {\n        if (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n            return this.surfaces[x][y]\n        } else {\n            return null\n        }\n    }\n\n    updateSurfaceMeshes(force: boolean = false) {\n        this.surfaces.forEach((r) => r.forEach((s) => s.updateMesh(force)))\n        this.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n\n        // TODO performance: update specific graph entry, when surface type changes\n        this.graphWalk = new Graph(this.surfaces.map(c => c.map(s => s.isWalkable() ? s.hasRubble() ? 4 : 1 : 0)))\n        console.log('Cached paths cleared')\n        this.cachedPaths.clear()\n    }\n\n    findPath(start: Vector3, end: Vector3, canFly = false, canSwim = false): Vector3[] {\n        const startSurface = this.getSurfaceFromWorld(start)\n        const endSurface = this.getSurfaceFromWorld(end)\n        if (startSurface.x === endSurface.x && startSurface.y === endSurface.y) {\n            return [end]\n        }\n        const cacheIdentifier = startSurface.x + '/' + startSurface.y + ' -> ' + endSurface.x + '/' + endSurface.y\n        const cachedPath = this.cachedPaths.get(cacheIdentifier)\n        if (cachedPath) {\n            return [...cachedPath, end]\n        } else {\n            return this.searchPath(startSurface, endSurface, end, cacheIdentifier)\n        }\n    }\n\n    private searchPath(startSurface: Surface, endSurface: Surface, end, cacheIdentifier: string) {\n        const startNode = this.graphWalk.grid[startSurface.x][startSurface.y]\n        const endNode = this.graphWalk.grid[endSurface.x][endSurface.y]\n        const worldPath = astar.search(this.graphWalk, startNode, endNode).map(p => this.getSurface(p.x, p.y).getCenterWorld())\n        if (worldPath.length < 1) return null // no path found\n        // replace last surface center with actual target position\n        worldPath.pop()\n        worldPath.push(end)\n        this.cachedPaths.set(cacheIdentifier, worldPath.slice(0, -1)) // cache shallow copy to avoid interference\n        return worldPath\n    }\n\n    findFallInOrigin(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isReinforcable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isReinforcable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isReinforcable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isReinforcable()) return [bottomSurface.x, bottomSurface.y]\n        const leftSurface2 = this.getSurface(x - 1, y)\n        if (leftSurface2.isDigable()) return [leftSurface2.x, leftSurface2.y]\n        const topSurface2 = this.getSurface(x, y - 1)\n        if (topSurface2.isDigable()) return [topSurface2.x, topSurface2.y]\n        const rightSurface2 = this.getSurface(x + 1, y)\n        if (rightSurface2.isDigable()) return [rightSurface2.x, rightSurface2.y]\n        const bottomSurface2 = this.getSurface(x, y + 1)\n        if (bottomSurface2.isDigable()) return [bottomSurface2.x, bottomSurface2.y]\n        return null\n    }\n\n    findFallInTarget(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isWalkable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isWalkable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isWalkable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isWalkable()) return [bottomSurface.x, bottomSurface.y]\n        return null\n    }\n\n    dispose() {\n        this.surfaces.forEach(c => c.forEach(s => s.dispose()))\n    }\n\n}\n","import { MovableEntity } from './MovableEntity'\nimport { Selectable, SelectionType } from '../../game/model/Selectable'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { CollectJob, Job, JobType } from '../../game/model/job/Job'\nimport { MathUtils, Vector3 } from 'three'\nimport { JOB_ACTION_RANGE, NATIVE_FRAMERATE } from '../../main'\nimport { getRandom, getRandomSign } from '../../core/Util'\nimport { Carryable } from './collect/Carryable'\nimport { DynamiteJob, SurfaceJob, SurfaceJobType } from '../../game/model/job/SurfaceJob'\nimport { SurfaceType } from './map/SurfaceType'\nimport { Crystal } from './collect/Crystal'\nimport { Ore } from './collect/Ore'\nimport { EventBus } from '../../event/EventBus'\nimport { CrystalFoundEvent } from '../../event/WorldLocationEvent'\nimport { OreFoundEvent } from '../../event/WorldEvents'\nimport degToRad = MathUtils.degToRad\n\nexport abstract class FulfillerEntity extends MovableEntity implements Selectable {\n\n    selectionType: SelectionType\n    selected: boolean\n    workInterval = null\n    job: Job = null\n    activity: FulfillerActivity = null\n    jobSubPos: Vector3 = null\n    tools: string[] = []\n    skills: string[] = []\n    carries: Carryable = null // TODO implement multi carry for vehicles\n    carryTarget: Vector3 = null\n\n    protected constructor(selectionType: SelectionType, aeFilename: string, speed: number) {\n        super(ResourceManager.getAnimationEntityType(aeFilename), speed)\n        this.selectionType = selectionType\n        this.group.userData = {'selectable': this}\n        this.workInterval = setInterval(this.work.bind(this), 1000 / NATIVE_FRAMERATE) // TODO do not use interval, make work trigger itself (with timeout/interval) until work is done\n    }\n\n    work() {\n        if (!this.job || this.selected) return\n        if (this.job.type === JobType.SURFACE) {\n            const surfJob = this.job as SurfaceJob\n            const surfaceJobType = surfJob.workType\n            if (surfaceJobType === SurfaceJobType.DRILL) {\n                if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                    this.moveToTarget(this.job.getPosition())\n                } else {\n                    this.changeActivity(FulfillerActivity.DRILLING, () => { // TODO use drilling times from cfg\n                        if (surfJob.surface.seamLevel > 0) {\n                            surfJob.surface.seamLevel--\n                            const vec = new Vector3().copy(this.getPosition()).sub(surfJob.surface.getCenterWorld())\n                                .multiplyScalar(0.3 + getRandom(3) / 10)\n                                .applyAxisAngle(new Vector3(0, 1, 0), degToRad(-10 + getRandom(20)))\n                                .add(this.getPosition()) // TODO set y to terrain height at this position?\n                            if (surfJob.surface.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                                this.worldMgr.addCollectable(new Crystal(), vec.x, vec.z)\n                                EventBus.publishEvent(new CrystalFoundEvent(vec))\n                            } else if (surfJob.surface.surfaceType === SurfaceType.ORE_SEAM) {\n                                this.worldMgr.addCollectable(new Ore(), vec.x, vec.z)\n                                EventBus.publishEvent(new OreFoundEvent())\n                            }\n                            this.changeActivity(FulfillerActivity.STANDING)\n                        } else {\n                            this.job.onJobComplete()\n                            this.stopJob()\n                        }\n                    })\n                }\n            } else if (surfaceJobType === SurfaceJobType.CLEAR_RUBBLE) {\n                if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                    this.moveToTarget(this.job.getPosition())\n                } else {\n                    if (!this.jobSubPos) {\n                        const jobPos = this.job.getPosition()\n                        this.jobSubPos = new Vector3(jobPos.x + getRandomSign() * getRandom(10), 0, jobPos.z + getRandomSign() * getRandom(10))\n                        this.jobSubPos.y = this.worldMgr.getTerrainHeight(this.jobSubPos.x, this.jobSubPos.z)\n                    }\n                    if (new Vector3().copy(this.jobSubPos).sub(this.getPosition()).length() > this.getSpeed()) {\n                        this.moveToTarget(this.jobSubPos)\n                    } else {\n                        this.changeActivity(FulfillerActivity.SHOVELING, () => {\n                            this.job.onJobComplete()\n                            if (surfJob.surface.hasRubble()) {\n                                this.jobSubPos = null\n                            } else {\n                                this.stopJob()\n                            }\n                        })\n                    }\n                }\n            } else if (surfaceJobType === SurfaceJobType.REINFORCE) {\n                if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                    this.moveToTarget(this.job.getPosition())\n                } else {\n                    this.changeActivity(FulfillerActivity.REINFORCE, () => {\n                        this.job.onJobComplete()\n                        this.stopJob()\n                    }, 3)\n                }\n            } else if (surfaceJobType === SurfaceJobType.BLOW) {\n                const bj = this.job as DynamiteJob\n                if (this.carries !== bj.dynamite) {\n                    this.dropItem()\n                    if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                        this.moveToTarget(this.job.getPosition())\n                    } else {\n                        this.changeActivity(FulfillerActivity.PICKING, () => {\n                            this.pickupItem(bj.dynamite)\n                        })\n                    }\n                } else if (!this.carryTarget) {\n                    this.carryTarget = bj.surface.getDigPositions()[0]\n                } else if (this.getPosition().sub(this.carryTarget).length() > JOB_ACTION_RANGE) {\n                    this.moveToTarget(this.carryTarget)\n                } else {\n                    this.changeActivity(FulfillerActivity.DROPPING, () => {\n                        this.dropItem()\n                        this.job.onJobComplete()\n                        this.stopJob()\n                    })\n                }\n            }\n        } else if (this.job.type === JobType.CARRY) {\n            const carryJob = this.job as CollectJob\n            if (this.carries !== carryJob.item) {\n                this.dropItem()\n                if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                    this.moveToTarget(this.job.getPosition())\n                } else {\n                    this.changeActivity(FulfillerActivity.PICKING, () => {\n                        this.pickupItem(carryJob.item)\n                    })\n                }\n            } else if (!this.carryTarget) {\n                this.carryTarget = this.carries.getTargetPos() // TODO sleep 5 seconds, before retry\n            } else if (this.getPosition().sub(this.carryTarget).length() > JOB_ACTION_RANGE) {\n                this.moveToTarget(this.carryTarget)\n            } else {\n                this.changeActivity(FulfillerActivity.DROPPING, () => {\n                    this.dropItem()\n                    this.job.onJobComplete()\n                    this.stopJob()\n                })\n            }\n        } else if (this.job.type === JobType.MOVE) {\n            if (!this.job.isInArea(this.group.position.x, this.group.position.z)) {\n                this.moveToTarget(this.job.getPosition())\n            } else {\n                this.changeActivity(FulfillerActivity.STANDING, () => {\n                    this.job.onJobComplete()\n                    this.stopJob()\n                })\n            }\n        }\n    }\n\n    moveToTarget(target): boolean {\n        const result = super.moveToTarget(target)\n        if (!result) {\n            console.log('Entity could not move to job target, stopping job')\n            this.stopJob()\n        }\n        return result\n    }\n\n    dropItem() {\n        if (!this.carries) return\n        if (this.carryJoint) this.carryJoint.remove(this.carries.group)\n        this.carries.group.position.copy(this.group.position)\n        this.carries = null\n        this.carryTarget = null\n    }\n\n    pickupItem(item: Carryable) {\n        this.carries = item\n        if (this.carryJoint) this.carryJoint.add(this.carries.group)\n        this.carries.group.position.set(0, 0, 0)\n    }\n\n    setJob(job: Job) {\n        if (this.job !== job) this.stopJob()\n        if (job.type === JobType.SURFACE) this.dropItem()\n        this.job = job\n        if (this.job) this.job.assign(this)\n    }\n\n    stopJob() {\n        if (!this.job) return\n        this.job.unassign(this)\n        this.jobSubPos = null\n        this.carryTarget = null\n        this.job = null\n        this.changeActivity(FulfillerActivity.STANDING)\n    }\n\n    hasTools(toolnames: string[]) {\n        for (let c = 0; c < toolnames.length; c++) {\n            if (this.tools.indexOf(toolnames[c]) === -1) return false\n        }\n        return true\n    }\n\n    hasSkills(skillKeys: string[]) {\n        for (let c = 0; c < skillKeys.length; c++) {\n            if (this.skills.indexOf(skillKeys[c]) === -1) return false\n        }\n        return true\n    }\n\n    getSelectionType(): SelectionType {\n        return this.selectionType\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    select() {\n        this.selectionFrame.visible = true\n        if (!this.selected) {\n            this.selected = true\n            this.onSelect()\n            return this\n        }\n        return null\n    }\n\n    onSelect() {\n    }\n\n    abstract getSelectionCenter(): Vector3;\n\n}\n\nexport enum FulfillerActivity {\n\n    STANDING,\n    MOVING,\n    MOVING_RUBBLE,\n    DRILLING,\n    SHOVELING,\n    PICKING,\n    DROPPING,\n    REINFORCE,\n\n}\n","import { AnimEntity } from './anim/AnimEntity'\nimport { Vector3 } from 'three'\nimport { AnimationEntityType } from './anim/AnimationEntityType'\nimport { FulfillerActivity } from './FulfillerEntity'\n\nexport abstract class MovableEntity extends AnimEntity {\n\n    speed: number\n    pathToTarget: Vector3[] = null\n\n    constructor(entityType: AnimationEntityType, speed: number) {\n        super(entityType)\n        this.speed = speed\n    }\n\n    getPosition(): Vector3 {\n        return new Vector3().copy(this.group.position)\n    }\n\n    getSpeed() {\n        return this.speed\n    }\n\n    moveToTarget(target: Vector3): boolean {\n        if (!this.pathToTarget || !this.pathToTarget[this.pathToTarget.length - 1].equals(target)) {\n            this.pathToTarget = this.findPathToTarget(target)\n            if (!this.pathToTarget) return false\n        }\n        if (this.isOnRubble()) {\n            this.changeActivity(FulfillerActivity.MOVING_RUBBLE)\n        } else {\n            this.changeActivity(FulfillerActivity.MOVING)\n        }\n        this.group.position.add(this.determineStep())\n        this.group.position.y = this.worldMgr.getTerrainHeight(this.group.position.x, this.group.position.z)\n        this.group.lookAt(new Vector3(this.pathToTarget[0].x, this.group.position.y, this.pathToTarget[0].z))\n        return true\n    }\n\n    findPathToTarget(target: Vector3): Vector3[] {\n        return [target]\n    }\n\n    determineStep(): Vector3 {\n        const pathStepTarget = this.pathToTarget[0]\n        pathStepTarget.y = this.worldMgr.getTerrainHeight(pathStepTarget.x, pathStepTarget.z)\n        const step = new Vector3().copy(pathStepTarget).sub(this.getPosition())\n        if (step.length() > this.getSpeed()) {\n            step.setLength(this.getSpeed()) // TODO use average speed between current and target position\n        } else if (this.pathToTarget.length > 1) {\n            this.pathToTarget.shift()\n            return this.determineStep()\n        }\n        return step\n    }\n\n    isOnRubble(): boolean {\n        return false\n    }\n\n    changeActivity(activity: FulfillerActivity, onChangeDone = null, iterations = 1) {\n    }\n\n}\n","import { SelectionType } from '../../game/model/Selectable'\nimport { EventBus } from '../../event/EventBus'\nimport { RAIDER_SPEED } from '../../main'\nimport { RaiderSelected } from '../../event/LocalEvents'\nimport { FulfillerActivity, FulfillerEntity } from './FulfillerEntity'\nimport { GameState } from '../../game/model/GameState'\nimport { Vector3 } from 'three'\nimport { EntityAddedEvent, EntityType } from '../../event/WorldEvents'\nimport { RaiderDiscoveredEvent } from '../../event/WorldLocationEvent'\n\nexport class Raider extends FulfillerEntity {\n\n    constructor() {\n        super(SelectionType.PILOT, 'mini-figures/pilot/pilot.ae', RAIDER_SPEED)\n        this.tools = ['drill', 'shovel', 'hammer']\n        this.skills = ['demolition']\n        this.pickSphereRadius = 10 // TODO read pick sphere size from cfg\n        this.selectionFrameSize = 10\n    }\n\n    getSpeed(): number {\n        let speed = super.getSpeed()\n        if (this.animation && !isNaN(this.animation.transcoef)) speed *= this.animation.transcoef\n        if (this.isOnPath()) speed *= 2 // TODO read from cfg\n        return speed\n    }\n\n    isOnRubble() {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).hasRubble()\n    }\n\n    isOnPath(): boolean {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).isPath()\n    }\n\n    findPathToTarget(target: Vector3): Vector3[] {\n        return this.worldMgr.sceneManager.terrain.findPath(this.getPosition(), target)\n    }\n\n    changeActivity(activity: FulfillerActivity, onChangeDone = null, iterations = 1) {\n        if (onChangeDone) onChangeDone.bind(this)\n        if (this.activity !== activity) {\n            this.activity = activity\n            switch (this.activity) {\n                case FulfillerActivity.STANDING:\n                    if (this.carries) {\n                        this.setActivity('StandCarry', onChangeDone, iterations)\n                    } else {\n                        this.setActivity('Stand', onChangeDone, iterations)\n                    }\n                    break\n                case FulfillerActivity.MOVING:\n                    if (this.carries) {\n                        this.setActivity('Carry', onChangeDone, iterations)\n                    } else {\n                        this.setActivity('Run', onChangeDone, iterations)\n                    }\n                    break\n                case FulfillerActivity.MOVING_RUBBLE:\n                    if (this.carries) {\n                        this.setActivity('Carryrubble', onChangeDone, iterations)\n                    } else {\n                        this.setActivity('Routerubble', onChangeDone, iterations)\n                    }\n                    break\n                case FulfillerActivity.DRILLING:\n                    // TODO adapt drilling time to material hardness\n                    this.setActivity('Drill', onChangeDone, iterations)\n                    break\n                case FulfillerActivity.SHOVELING:\n                    this.setActivity('ClearRubble', onChangeDone, iterations)\n                    break\n                case FulfillerActivity.PICKING:\n                    this.setActivity('Pickup', onChangeDone, iterations)\n                    break\n                case FulfillerActivity.DROPPING:\n                    this.setActivity('Place', onChangeDone, iterations)\n                    break\n                case FulfillerActivity.REINFORCE:\n                    this.setActivity('Reinforce', onChangeDone, iterations)\n                    break\n            }\n            this.animation.looping = true // TODO make all looping?\n        }\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        const index = GameState.raidersUndiscovered.indexOf(this)\n        if (index !== -1) GameState.raidersUndiscovered.splice(index, 1)\n        GameState.raiders.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, this))\n        EventBus.publishEvent(new RaiderDiscoveredEvent(this.getPosition()))\n    }\n\n    onSelect() {\n        this.changeActivity(FulfillerActivity.STANDING)\n        EventBus.publishEvent(new RaiderSelected(this))\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { BuildingSelected, EntityDeselected } from '../../event/LocalEvents'\nimport { Building } from '../../game/model/entity/building/Building'\nimport { AnimEntity } from './anim/AnimEntity'\nimport { Selectable, SelectionType } from '../../game/model/Selectable'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { MathUtils, Vector3, Matrix4 } from 'three'\nimport { GameState } from '../../game/model/GameState'\nimport { CollectEvent, EntityAddedEvent, EntityType } from '../../event/WorldEvents'\nimport { Surface } from './map/Surface'\nimport { CollectableType } from './collect/CollectableEntity'\nimport degToRad = MathUtils.degToRad\n\nexport class BuildingEntity extends AnimEntity implements Selectable {\n\n    type: Building\n    selected: boolean\n    powerSwitch: boolean = true\n    powerLink: boolean = false\n    spawning: boolean = false\n    surfaces: Surface[] = []\n    upgrades: number = 0\n\n    constructor(buildingType: Building) {\n        super(ResourceManager.getAnimationEntityType(buildingType.aeFile))\n        this.type = buildingType\n        this.group.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        this.group.userData = {'selectable': this}\n        this.pickSphereRadius = 30 // TODO read pick sphere size from cfg\n        this.selectionFrameSize = 15\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.BUILDING\n    }\n\n    select() {\n        this.selectionFrame.visible = true\n        if (!this.selected) {\n            this.selected = true\n            EventBus.publishEvent(new BuildingSelected(this))\n            return this\n        }\n        return null\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    getDropPosition(): Vector3 {\n        const dropPos = this.getPosition().add(new Vector3(0, 0, this.type.dropPosDist)\n            .applyEuler(this.getRotation()).applyAxisAngle(new Vector3(0, 1, 0), degToRad(this.type.dropPosAngleDeg)))\n        dropPos.y = this.worldMgr.getTerrainHeight(dropPos.x, dropPos.z)\n        return dropPos\n    }\n\n    isPowered(): boolean {\n        return this.powerSwitch && (this.type.selfPowered || this.powerLink)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        const index = GameState.buildingsUndiscovered.indexOf(this)\n        if (index !== -1) GameState.buildingsUndiscovered.splice(index, 1)\n        GameState.buildings.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(EntityType.BUILDING, this))\n    }\n\n    hasMaxUpgrades(): boolean {\n        return this.upgrades >= this.type.maxUpgrades\n    }\n\n    upgrade() {\n        if (GameState.numOre < 5) return // TODO read from cfg BuildingUpgradeCostOre and BuildingUpgradeCostStuds\n        GameState.numOre -= 5\n        this.upgrades++\n        EventBus.publishEvent(new CollectEvent(CollectableType.ORE))\n        EventBus.publishEvent(new EntityDeselected())\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { TILESIZE } from '../main'\nimport { MathUtils, Vector3 } from 'three'\nimport { Raider } from './model/Raider'\nimport { GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { BuildingEntity } from './model/BuildingEntity'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { Crystal } from './model/collect/Crystal'\nimport { WorldManager } from './WorldManager'\nimport { EventBus } from '../event/EventBus'\nimport { EntityAddedEvent, EntityType } from '../event/WorldEvents'\nimport degToRad = MathUtils.degToRad\n\nexport class ObjectListLoader {\n\n    static loadObjectList(worldMgr: WorldManager, objectListConf) {\n        Object.values(objectListConf).forEach((olObject: any) => {\n            const lTypeName = olObject.type ? olObject.type.toLowerCase() : olObject.type\n            // all object positions are off by half a tile, because 0/0 is the top left corner of first tile\n            const worldX = (olObject.xPos - 1) * TILESIZE\n            const worldZ = (olObject.yPos - 1) * TILESIZE\n            const worldY = worldMgr.getTerrainHeight(worldX, worldZ)\n            const buildingType = ResourceManager.cfg('BuildingTypes', olObject.type)\n            const radHeading = degToRad(olObject.heading)\n            if (lTypeName === 'TVCamera'.toLowerCase()) {\n                const target = new Vector3(worldX, worldY, worldZ - TILESIZE / 2)\n                const offset = new Vector3(5 * TILESIZE, 0, 0).applyAxisAngle(new Vector3(0, 1, 0), radHeading - Math.PI / 16).add(target)\n                worldMgr.sceneManager.camera.position.copy(offset)\n                worldMgr.sceneManager.camera.position.y = 4.5 * TILESIZE\n                worldMgr.sceneManager.controls.target.copy(target)\n                worldMgr.sceneManager.controls.update()\n                worldMgr.setTorchPosition(target)\n            } else if (lTypeName === 'Pilot'.toLowerCase()) {\n                const raider = new Raider()\n                raider.worldMgr = worldMgr\n                raider.setActivity('Stand')\n                raider.createPickSphere()\n                raider.group.position.set(worldX, worldY, worldZ)\n                raider.group.rotateOnAxis(new Vector3(0, 1, 0), radHeading - Math.PI / 2)\n                raider.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(raider.group.position).discovered\n                if (raider.group.visible) {\n                    GameState.raiders.push(raider)\n                    EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, raider))\n                } else {\n                    GameState.raidersUndiscovered.push(raider)\n                }\n                worldMgr.sceneManager.scene.add(raider.group)\n            } else if (buildingType) {\n                const building = Building.getByName(buildingType)\n                const entity = new BuildingEntity(building)\n                entity.worldMgr = worldMgr\n                entity.setActivity('Stand')\n                entity.createPickSphere()\n                entity.group.position.set(worldX, worldY, worldZ)\n                entity.group.rotateOnAxis(new Vector3(0, 1, 0), -radHeading - Math.PI)\n                entity.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(entity.group.position).discovered\n                if (entity.group.visible) {\n                    GameState.buildings.push(entity)\n                    EventBus.publishEvent(new EntityAddedEvent(EntityType.BUILDING, entity))\n                } else {\n                    GameState.buildingsUndiscovered.push(entity)\n                }\n                // TODO rotate building with normal vector of surface\n                worldMgr.sceneManager.scene.add(entity.group)\n                const path1Surface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(entity.group.position)\n                path1Surface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                path1Surface.updateTexture()\n                entity.surfaces.push(path1Surface)\n                const pathOffset = new Vector3(0, 0, TILESIZE).applyAxisAngle(new Vector3(0, 1, 0), -radHeading - Math.PI)\n                pathOffset.add(entity.group.position)\n                const path2Surface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(pathOffset)\n                path2Surface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                path2Surface.updateTexture()\n                entity.surfaces.push(path2Surface)\n            } else if (lTypeName === 'PowerCrystal'.toLowerCase()) {\n                worldMgr.addCollectable(new Crystal(), worldX, worldZ)\n            } else {\n                // TODO implement remaining object types like: spider, drives and hovercraft\n                console.warn('Object type ' + olObject.type + ' not yet implemented')\n            }\n        })\n        // update path textures when all buildings are added\n        GameState.buildings.forEach((b) => b.surfaces.forEach((bSurf) => {\n            for (let x = -1; x <= 1; x++) {\n                for (let y = -1; y <= 1; y++) {\n                    worldMgr.sceneManager.terrain.getSurface(bSurf.x + x, bSurf.y + y).updateTexture()\n                }\n            }\n        }))\n    }\n\n}\n","/** Function documentation mostly copied from the following URLs\n *\n * https://kb.rockraidersunited.com/User:Jessietail/NERPs_reference\n * https://web.archive.org/web/20131206122442/http://rru-stuff.org/nerpfuncs.html\n * https://kb.rockraidersunited.com/NERPs_documentation#Labels\n *\n */\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\n\nexport class NerpRunner {\n\n    debug = false\n    onLevelComplete: () => any = null\n    nerpInterval: NodeJS.Timeout = null\n\n    registers = new Array(8).fill(0)\n    timers = new Array(4).fill(0)\n    scriptLines = [] // contains humand readable script strings\n    statements = [] // contains parsed statements for execution\n    macrosByName = {}\n    labelsByName = {}\n    halted = false\n    programCounter = 0\n    messages = []\n    // more state variables and switches\n    messagePermit = null\n\n    constructor(debug = false) {\n        this.debug = debug\n    }\n\n    startExecution() {\n        const that = this\n        this.nerpInterval = setInterval(() => {\n            that.execute()\n        }, 2000)\n    }\n\n    pauseExecution() {\n        if (this.nerpInterval) clearInterval(this.nerpInterval)\n        this.nerpInterval = null\n    }\n\n    /**\n     * Internally used to validate and parse a register number.\n     * @param register\n     * @return {number}\n     */\n    checkRegister(register) {\n        const num = parseInt(register)\n        if (isNaN(num) || num < 0 || num > this.registers.length) throw new Error('Invalid register (' + register + ') provided')\n        return num\n    }\n\n    /**\n     * Internally used to validate and parse a value before setting or adding it with a register.\n     * @param value\n     * @return {number}\n     */\n    checkRegisterValue(value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Invalid register value (' + value + ') provided')\n        return num\n    }\n\n    /**\n     * Gets the value currently stored in the given register, internally used to handle all registers with one method.\n     * @param register the register to read\n     * @return {number} returns the value currently stored in the register\n     */\n    getR(register) {\n        register = this.checkRegister(register)\n        return this.registers[register]\n    }\n\n    /**\n     * Sets the given value for the given register, internally used to handle all registers with one method.\n     * @param register the register to set\n     * @param value the value to set for the given register\n     */\n    setR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] = value\n    }\n\n    /**\n     * Adds the given value to the given register, internally used to handle all registers with one method.\n     * @param register the register to add to\n     * @param value the value to add to the given register\n     */\n    addR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] += value\n    }\n\n    /**\n     * Set the respective timer to the given numerical value. Units are in milliseconds.\n     * @param timer\n     * @param value\n     */\n    setTimer(timer, value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Can\\'t set timer to NaN value: ' + value)\n        this.timers[timer] = new Date().getTime() + num\n    }\n\n    /**\n     * Gets the value of the respective timer. Units are in milliseconds.\n     * @param timer\n     * @return {number}\n     */\n    getTimer(timer) {\n        return new Date().getTime() - this.timers[timer]\n    }\n\n    /**\n     * End the level successfully and show the score screen.\n     */\n    setLevelCompleted() {\n        this.halted = true\n        GameState.resultState = GameResultState.COMPLETE\n        this.onLevelComplete()\n    }\n\n    /**\n     * End the level as failure and show the score screen.\n     */\n    setLevelFail() {\n        this.halted = true\n        GameState.resultState = GameResultState.FAILED\n        this.onLevelComplete()\n    }\n\n    /**\n     * Sets tutorial flags\n     * @param value a bitmask to set flags with\n     */\n    setTutorialFlags(value) {\n        // TODO implement tutorial flags\n        // seems like value must be interpreted bitwise and sets a certain flag on each bit\n        // seen so far:\n        // 0 = 0x00 allow any click anywhere anytime\n        // 3 = 0x11 disallow invalid clicks\n        // 4095 = 0x111111111111 set all flags? (seen in Tutorial01 level)\n    }\n\n    /**\n     * This is used to make messages come up/not come up.\n     * @param messagesAllowed\n     */\n    setMessagePermit(messagesAllowed) {\n        this.messagePermit = !messagesAllowed\n    }\n\n    setBuildingsUpgradeLevel(typeName, level) {\n        GameState.buildings.forEach(b => {\n            if (b.type === typeName) b.upgrades = level\n        })\n    }\n\n    setToolStoreLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.TOOLSTATION, level)\n    }\n\n    setTeleportPadLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.TELEPORT_PAD, level)\n    }\n\n    setPowerStationLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.POWER_STATION, level)\n    }\n\n    setBarracksLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.SUPPORT, level)\n    }\n\n    /**\n     * Gets the number of tool stores currently built. NOT the total ever built.\n     * @return {number}\n     */\n    getToolStoresBuilt() {\n        return GameState.getBuildingsByType(Building.TOOLSTATION).length\n    }\n\n    /**\n     * Gets the number of minifigures on the level. TODO it is NOT tested if this ignores minifigures in hidden caverns\n     * @return {number}\n     */\n    getMinifiguresOnLevel() {\n        return GameState.raiders.length\n    }\n\n    /**\n     * Gets the number of crystals currently stored.\n     * @return {number}\n     */\n    getCrystalsCurrentlyStored() {\n        return GameState.numCrystal\n    }\n\n    getObjectiveSwitch() {\n        // TODO implement this\n        return 0\n    }\n\n    setMessageTimerValues(arg1, arg2, arg3) {\n        // TODO implement this\n    }\n\n    getMessageTimer() {\n        return 0 // TODO return remaining amount of time needed to fully play WAV message\n    }\n\n    cameraUnlock() {\n        // TODO implement this\n    }\n\n    setMessage(messageNumber, arrowDisabled) {\n        if (!this.messagePermit) {\n            return\n        }\n        const msg = this.messages[messageNumber]\n        // TODO show message to user\n        console.log(msg.txt)\n        // msg.snd resides in sounds/streamed/ which is currently not loaded :(\n    }\n\n    setCameraGotoTutorial(arg1) {\n        // TODO implement this\n    }\n\n    getTutorialBlockIsGround(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getTutorialBlockIsPath(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getUnitAtBlock(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getOxygenLevel() {\n        // TODO implement this\n        return 100\n    }\n\n    getObjectiveShowing() {\n        // TODO implement this\n        return false\n    }\n\n    addPoweredCrystals() {\n        // TODO implement this\n    }\n\n    disallowAll() {\n        // TODO implement this\n    }\n\n    getPoweredPowerStationsBuilt() {\n        return GameState.getBuildingsByType(Building.POWER_STATION).length\n    }\n\n    getPoweredBarracksBuilt() {\n        return GameState.getBuildingsByType(Building.SUPPORT).length\n    }\n\n    getRecordObjectAtTutorial() {\n        // TODO implement this\n    }\n\n    getHiddenObjectsFound() {\n        // TODO implement this\n        return 0\n    }\n\n    callMethod(methodName, methodArgs) {\n        if (methodName === 'Stop') {\n            throw 'Stop'\n        } else if (methodName === 'TRUE') {\n            return true\n        } else if (methodName === 'FALSE') {\n            return false\n        }\n        const setRegisterMatch = methodName.match(/^SetR([0-7])$/)\n        if (setRegisterMatch) {\n            return this.setR(setRegisterMatch[1], methodArgs[0])\n        }\n        const addRegisterMatch = methodName.match(/^AddR([0-7])$/)\n        if (addRegisterMatch) {\n            return this.addR(addRegisterMatch[1], methodArgs[0])\n        }\n        const getRegisterMatch = methodName.match(/^GetR([0-7])$/)\n        if (getRegisterMatch) {\n            return this.getR(getRegisterMatch[1])\n        }\n        const setTimerMatch = methodName.match(/^SetTimer([0-3])$/)\n        if (setTimerMatch) {\n            return this.setTimer(setTimerMatch[1], methodArgs[0])\n        }\n        const getTimerMatch = methodName.match(/^GetTimer([0-3])$/)\n        if (getTimerMatch) {\n            return this.getTimer(getTimerMatch[1])\n        }\n        const lMethodName = methodName.toLowerCase()\n        for (const memberName in this) {\n            // noinspection JSUnfilteredForInLoop\n            if (memberName.toLowerCase() === lMethodName) {\n                // @ts-ignore\n                // noinspection JSUnfilteredForInLoop\n                return this[memberName].apply(this, methodArgs)\n            }\n        }\n        throw new Error('Undefined method: ' + methodName)\n    }\n\n    conditional(left, right) {\n        const conditionResult = this.executeStatement(left)\n        if (this.debug) {\n            console.log('Condition evaluated to ' + conditionResult)\n        }\n        if (conditionResult) {\n            this.executeStatement(right)\n        }\n    }\n\n    executeStatement(expression) {\n        if (expression.invoke) {\n            const argValues = expression.invoke !== 'conditional' ? expression.args.map(e => this.executeStatement(e)) : expression.args\n            const result = this.callMethod(expression.invoke, argValues)\n            if (result !== undefined && this.debug) {\n                console.log('Method returned: ' + result)\n            }\n            return result\n        } else if (expression.comparator) {\n            const left = this.executeStatement(expression.left)\n            const right = this.executeStatement(expression.right)\n            if (expression.comparator === '=') {\n                return left === right\n            } else if (expression.comparator === '!=') {\n                return left !== right\n            } else if (expression.comparator === '<') {\n                return left < right\n            } else if (expression.comparator === '>') {\n                return left > right\n            } else {\n                console.log(expression)\n                throw new Error('Unknown comparator: ' + expression.comparator)\n            }\n        } else if (!isNaN(expression)) { // just a number\n            return expression\n        } else if (expression.jump) {\n            this.programCounter = this.labelsByName[expression.jump]\n            if (this.programCounter === undefined) {\n                throw new Error('Label \\'' + expression.jump + '\\' is unknown!')\n            }\n            if (this.debug) {\n                console.log('Jumping to label \\'' + expression.jump + '\\' in line ' + this.programCounter)\n            }\n        } else {\n            console.log(expression)\n            throw new Error('Unknown expression in line ' + this.programCounter + ': ' + expression)\n        }\n    }\n\n    execute(debug = false) {\n        this.debug = debug\n        if (this.halted) return\n        try {\n            if (this.debug) {\n                console.log('Executing following script\\n' + this.scriptLines.join('\\n'))\n                console.log('Registers: ' + this.registers)\n            }\n            for (this.programCounter = 0; this.programCounter < this.statements.length; this.programCounter++) {\n                const statement = this.statements[this.programCounter]\n                if (this.debug) {\n                    console.log(this.programCounter + ': ' + this.scriptLines[this.programCounter])\n                    console.log(statement)\n                }\n                if (!statement.label) { // do nothing for label markers\n                    this.executeStatement(statement)\n                }\n            }\n        } catch (e) {\n            if (e === 'Stop') {\n                return\n            }\n            console.error(e)\n            console.error('FATAL ERROR! Script execution failed! You can NOT win anymore!')\n            this.halted = true\n            debugger;\n        }\n    }\n\n}\n","import { NerpRunner } from './NerpRunner'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class NerpParser {\n\n    static parse(nerpScript: string): NerpRunner {\n        const nerpRunner = new NerpRunner()\n        const lines = nerpScript.split('\\n').map(l => l\n            .split('//')[0].trim() // before comment starts\n            .split(';')[0].trim() // before preprocessor comment starts\n            .replace(/_/g, '') // some preprocessor macros use this prefix\n            .replace(/\\bTRUE \\? /, '') // some weird requirement of the original language\n            .replace(/[{}]/g, ''), // duplicate limit for macros using labels too\n        )\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c]\n            if (line.length < 1) {\n                continue // ignore empty lines, but important for macro closure\n            }\n            if (line.startsWith('#include ')) { // include other nerp scripts/headers\n                const includeName = line.replace(/^#include /, '').trim().slice(1, -1)\n                if (includeName === 'nerpdef.h') {\n                    // trivial default header file, is applied by search and replace above\n                    // see https://github.com/jgrip/legorr/blob/master/nerpdef.h\n                    continue\n                }\n                const includedRunner = NerpParser.parse(ResourceManager.getResource('Levels/' + includeName))\n                if (!includedRunner || !includedRunner.scriptLines || includedRunner.scriptLines.length < 1) {\n                    throw 'Can\\'t include unknown nerp script: ' + line\n                }\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(includedRunner.scriptLines)\n                // copy macros from included file to current file\n                nerpRunner.macrosByName = Object.assign({}, nerpRunner.macrosByName, includedRunner.macrosByName)\n            } else if (line.startsWith('#define ')) { // parse C++ preprocessor macro\n                const firstLine = line.replace(/^#define /, '').split(' ')\n                const macroLines = [firstLine.splice(1).join(' ').replace(/\\\\$/, '').trim()]\n                let mLine = line\n                let append = false\n                while (mLine.endsWith('\\\\') && c < lines.length - 1) {\n                    c++\n                    mLine = lines[c].trim()\n                    const macroLine = mLine.replace(/\\\\$/, '').trim()\n                    if (macroLine.length > 0) {\n                        if (append) {\n                            append = false\n                            macroLines[macroLines.length - 1] += macroLine\n                        } else {\n                            macroLines.push(macroLine)\n                        }\n                    }\n                    if (mLine.match(/:\\\\$/)) {\n                        append = true\n                    }\n                }\n                const macroCall = firstLine[0].split('(')\n                nerpRunner.macrosByName[macroCall[0]] = {\n                    args: macroCall[1].replace(/\\)$/, '').split(','),\n                    lines: macroLines,\n                }\n            } else {\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(this.replaceMacros(nerpRunner.macrosByName, line))\n            }\n        }\n        // somewhat precompile the script and create syntax tree\n        // must be done in separate block to make sure the script is complete and we can refer/rely on line numbers for label jumps\n        for (let c = 0; c < nerpRunner.scriptLines.length; c++) {\n            const line = nerpRunner.scriptLines[c]\n            nerpRunner.statements[c] = line.replace(/\\(\\)/g, '') // now the macros are applied and obsolete empty \"()\" can be removed\n                .split(' ? ')\n            const labelMatch = line.match(/(\\S+):/)\n            if (nerpRunner.statements[c].length === 2) { // line contains condition (primary operator)\n                nerpRunner.statements[c] = {\n                    invoke: 'conditional',\n                    args: [this.preProcess(nerpRunner.statements[c][0]), this.preProcess(nerpRunner.statements[c][1])],\n                }\n            } else if (labelMatch) { // keep label line number for later usage\n                const labelName = labelMatch[1].toLowerCase()\n                nerpRunner.labelsByName[labelName] = c\n                nerpRunner.statements[c] = {label: labelName}\n            } else if (nerpRunner.statements[c].length === 1) { // just a call\n                nerpRunner.statements[c] = this.preProcess(nerpRunner.statements[c][0])\n            } else { // lines contains more than 1 condition statement\n                throw 'Can\\'t deal with line: ' + line\n            }\n        }\n        return nerpRunner\n    }\n\n    static replaceMacros(macrosByName, line): string[] {\n        // check if this line contains a macro\n        const split = line.split('(') // not a very stable check though...\n        const macro = macrosByName[split[0]]\n        if (macro) {\n            const argValues = split.splice(1).join('(').slice(0, -1).split(',')\n            if (argValues.length !== macro.args.length) {\n                throw 'Invalid number of args provided for macro in line ' + line\n            }\n            const macroLines = []\n            macro.lines.forEach((line) => {\n                for (let c = 0; c < argValues.length; c++) {\n                    line = line.replace(new RegExp('\\\\b' + macro.args[c] + '\\\\b'), argValues[c])\n                }\n                macroLines.push(...(this.replaceMacros(macrosByName, line)))\n            })\n            return macroLines\n        } else {\n            return [line]\n        }\n    }\n\n    static preProcess(expression) {\n        expression = expression.trim().replace(/^_/, '') // remove whitespace and leading underscore\n        const number = parseInt(expression)\n        if (!isNaN(number)) {\n            return number\n        }\n        const opSplit = expression.split(/ (=) | (!=) | (>) | (<) /).filter(e => e !== undefined)\n        const brackets = expression.match(/^(.+)\\((.+)\\)$/)\n        const spaceSplit = expression.split(' ')\n        const labelMatch = expression.match(/([^:]+):$/)\n        const jumpMatch = expression.match(/^:([^:]+)$/)\n        if (opSplit.length === 3) { // expression contains secondary operator\n            return {left: this.preProcess(opSplit[0]), comparator: opSplit[1], right: this.preProcess(opSplit[2])}\n        } else if (brackets) {\n            const args = brackets[2].split(',').map(a => this.preProcess(a))\n            return {invoke: brackets[1], args: args}\n        } else if (spaceSplit.length > 1) { // space split must be the very last since most expressions contain space\n            const args = spaceSplit.length === 2 ? [this.preProcess(spaceSplit[1])] : spaceSplit.splice(1).map(a => this.preProcess(a))\n            return {invoke: spaceSplit[0], args: args}\n        } else if (labelMatch) { // label definition\n            return {label: labelMatch[1]}\n        } else if (jumpMatch) { // jump to label\n            return {jump: jumpMatch[1].toLowerCase()}\n        } else { // function call without args\n            if (expression.match(/[ =?><!]/)) {\n                throw 'Invalid expression given, parsing must have failed before somewhere'\n            }\n            return {invoke: expression, args: []}\n        }\n    }\n\n}\n","import { LevelPrioritiesEntryConfig } from '../../../cfg/LevelsCfg'\n\nexport class PriorityList {\n\n    levelDefault: PriorityEntry[] = []\n    current: PriorityEntry[] = []\n\n    constructor(priorities: LevelPrioritiesEntryConfig[]) {\n        this.levelDefault = priorities\n        this.reset()\n    }\n\n    toggle(index: number) {\n        this.current[index].enabled = !this.current[index].enabled\n    }\n\n    upOne(index: number) {\n        const tmp = this.current[index]\n        this.current[index] = this.current[index + 1]\n        this.current[index + 1] = tmp\n    }\n\n    reset() {\n        this.current = this.levelDefault.map(entry => new PriorityEntry(entry)) // deep copy required\n    }\n\n    pushToTop(index: number) {\n        const element = this.current[index]\n        for (let c = index; c > 0; c--) {\n            this.current[c] = this.current[c - 1]\n        }\n        this.current[0] = element\n    }\n\n}\n\nexport class PriorityEntry {\n\n    key: string\n    enabled: boolean\n\n    constructor(levelPriorityEntry: LevelPrioritiesEntryConfig) {\n        this.key = levelPriorityEntry.key\n        this.enabled = levelPriorityEntry.enabled\n    }\n\n}","import { SceneManager } from './SceneManager'\nimport { TerrainLoader } from './TerrainLoader'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MathUtils, Raycaster, Vector3 } from 'three'\nimport { getRandom } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { CavernDiscovered, EntityAddedEvent, EntityType, JobCreateEvent, RaiderRequested, SpawnDynamiteEvent, SpawnMaterialEvent } from '../event/WorldEvents'\nimport { Raider } from './model/Raider'\nimport { GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { CollectJob, MoveJob } from '../game/model/job/Job'\nimport { CollectableEntity } from './model/collect/CollectableEntity'\nimport { CHECK_SPANW_RAIDER_TIMER, TILESIZE } from '../main'\nimport { EntityDeselected } from '../event/LocalEvents'\nimport { ObjectListLoader } from './ObjectListLoader'\nimport { Dynamite } from './model/collect/Dynamite'\nimport { DynamiteJob } from '../game/model/job/SurfaceJob'\nimport { NerpParser } from '../core/NerpParser'\nimport { NerpRunner } from '../core/NerpRunner'\nimport { GameScreen } from '../screen/GameScreen'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { PriorityList } from '../game/model/job/PriorityList'\nimport degToRad = MathUtils.degToRad\n\nexport class WorldManager {\n\n    sceneManager: SceneManager\n    spawnRaiderInterval = null\n    nerpRunner: NerpRunner = null\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.sceneManager = new SceneManager(canvas)\n        EventBus.registerEventListener(EntityDeselected.eventKey, () => GameState.selectEntities([]))\n        EventBus.registerEventListener(RaiderRequested.eventKey, (event: RaiderRequested) => {\n            GameState.requestedRaiders = event.numRequested\n            if (GameState.requestedRaiders > 0 && !this.spawnRaiderInterval) {\n                this.spawnRaiderInterval = setInterval(this.checkSpawnRaiders.bind(this), CHECK_SPANW_RAIDER_TIMER)\n            }\n        })\n        EventBus.registerEventListener(SpawnDynamiteEvent.eventKey, (event: SpawnDynamiteEvent) => {\n            const targetBuilding = GameState.getClosestBuildingByType(event.surface.getDigPositions()[0], Building.TOOLSTATION)\n            if (!targetBuilding) {\n                throw 'Could not find toolstation to spawn dynamite'\n            }\n            const pos = targetBuilding.getDropPosition() // TODO use ToolNullName from cfg\n            const dynamite = new Dynamite()\n            dynamite.targetSurface = event.surface\n            dynamite.worldMgr = this\n            dynamite.setActivity('Normal')\n            dynamite.group.position.copy(pos)\n            this.sceneManager.scene.add(dynamite.group)\n            EventBus.publishEvent(new JobCreateEvent(new DynamiteJob(event.surface, dynamite)))\n        })\n        EventBus.registerEventListener(SpawnMaterialEvent.eventKey, (event: SpawnMaterialEvent) => {\n            this.addCollectable(event.collectable, event.spawnPosition.x, event.spawnPosition.z)\n        })\n        EventBus.registerEventListener(CavernDiscovered.eventKey, () => {\n            GameState.discoveredCaverns++\n        })\n    }\n\n    setup(levelConf: LevelEntryCfg, gameScreen: GameScreen) {\n        GameState.levelFullName = levelConf.fullName\n        GameState.totalCaverns = levelConf.reward?.quota?.caverns || 0\n        GameState.rewardConfig = levelConf.reward\n        GameState.priorityList = new PriorityList(levelConf.priorities)\n\n        this.sceneManager.setupScene()\n\n        // create terrain mesh and add it to the scene\n        this.sceneManager.terrain = TerrainLoader.loadTerrain(levelConf, this)\n        this.sceneManager.scene.add(this.sceneManager.terrain.floorGroup)\n\n        // load in non-space objects next\n        const objectListConf = ResourceManager.getResource(levelConf.oListFile)\n        ObjectListLoader.loadObjectList(this, objectListConf)\n\n        // load nerp script\n        this.nerpRunner = NerpParser.parse(ResourceManager.getResource(levelConf.nerpFile))\n        this.nerpRunner.messages.push(...(ResourceManager.getResource(levelConf.nerpMessageFile)))\n        this.nerpRunner.onLevelComplete = () => gameScreen.onLevelEnd()\n\n        // gather level start details for game result score calculation\n        GameState.totalDiggables = this.sceneManager.terrain.surfaces.filter((r) => r.forEach((s) => s.isDigable())).length\n        GameState.totalCrystals = 0\n        this.sceneManager.terrain.surfaces.forEach((r) => r.forEach((s) => GameState.totalCrystals += s.containedCrystals))\n        GameState.totalOres = 0\n        this.sceneManager.terrain.surfaces.forEach((r) => r.forEach((s) => GameState.totalOres += s.containedOres))\n    }\n\n    start() {\n        this.sceneManager.startScene()\n        this.nerpRunner?.startExecution()\n        GameState.levelStartTime = Date.now()\n    }\n\n    stop() {\n        GameState.levelStopTime = Date.now()\n        this.nerpRunner?.pauseExecution()\n        if (this.spawnRaiderInterval) clearInterval(this.spawnRaiderInterval)\n        this.spawnRaiderInterval = null\n        GameState.remainingDiggables = 0\n        this.sceneManager?.terrain?.surfaces?.forEach((r) => r.forEach((s) => GameState.remainingDiggables += s.isDigable() ? 1 : 0))\n        this.sceneManager.disposeScene()\n    }\n\n    resize(width: number, height: number) {\n        if (this.sceneManager) this.sceneManager.renderer.setSize(width, height)\n    }\n\n    getTerrainIntersectionPoint(rx: number, ry: number): Vector3 {\n        if (!this.sceneManager.terrain) return null\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.sceneManager.camera)\n        const intersects = raycaster.intersectObjects(this.sceneManager.terrain.floorGroup.children)\n        return intersects.length > 0 ? intersects[0].point : null\n    }\n\n    setTorchPosition(position: Vector3) {\n        this.sceneManager.cursorTorchlight.position.copy(position)\n        this.sceneManager.cursorTorchlight.position.y = this.getTerrainHeight(position.x, position.z) + 2 * TILESIZE\n    }\n\n    getTerrainHeight(worldX: number, worldZ: number): number {\n        const raycaster = new Raycaster(new Vector3(Number(worldX), 3 * TILESIZE, Number(worldZ)), new Vector3(0, -1, 0))\n        const intersect = raycaster.intersectObject(this.sceneManager.terrain.floorGroup, true)\n        if (intersect.length > 0) {\n            return intersect[0].point.y\n        } else {\n            console.warn('could not determine terrain height for ' + worldX + '/' + worldZ)\n            return 0\n        }\n    }\n\n    addCollectable(collectable: CollectableEntity, worldX: number, worldZ: number) {\n        const worldY = this.getTerrainHeight(worldX, worldZ)\n        collectable.worldMgr = this\n        collectable.group.position.set(worldX, worldY, worldZ)\n        collectable.group.visible = this.sceneManager.terrain.getSurfaceFromWorld(collectable.group.position).discovered\n        this.sceneManager.scene.add(collectable.group)\n        if (collectable.group.visible) {\n            GameState.collectables.push(collectable)\n            EventBus.publishEvent(new JobCreateEvent(new CollectJob(collectable)))\n        } else {\n            GameState.collectablesUndiscovered.push(collectable)\n        }\n        return collectable\n    }\n\n    checkSpawnRaiders() {\n        if (GameState.requestedRaiders < 1) {\n            if (this.spawnRaiderInterval) clearInterval(this.spawnRaiderInterval)\n            this.spawnRaiderInterval = null\n            return\n        }\n        if (GameState.raiders.length >= GameState.getMaxRaiders()) return\n        const spawnBuildings = GameState.getBuildingsByType(Building.TOOLSTATION, Building.TELEPORT_PAD).filter((b) => !b.spawning)\n        for (let c = 0; c < spawnBuildings.length && GameState.requestedRaiders > 0; c++) {\n            GameState.requestedRaiders--\n            const station = spawnBuildings[c]\n            station.spawning = true\n            const raider = new Raider()\n            raider.worldMgr = this\n            raider.setActivity('TeleportIn', () => {\n                station.spawning = false\n                raider.setActivity('Stand')\n                raider.createPickSphere()\n                const walkOutPos = station.getPosition().add(new Vector3(0, 0, TILESIZE * 3 / 4 + getRandom(TILESIZE / 2))\n                    .applyEuler(station.getRotation()).applyAxisAngle(new Vector3(0, 1, 0), degToRad(-10 + getRandom(20))))\n                walkOutPos.y = this.getTerrainHeight(walkOutPos.x, walkOutPos.z)\n                raider.setJob(new MoveJob(walkOutPos))\n                GameState.raiders.push(raider)\n                EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, raider))\n            })\n            raider.group.position.copy(station.group.position).add(new Vector3(0, 0, TILESIZE / 2).applyEuler(station.group.rotation))\n            raider.group.rotation.copy(station.group.rotation)\n            this.sceneManager.scene.add(raider.group)\n        }\n    }\n\n}\n","import { ScreenLayer } from '../../screen/ScreenLayer'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventManager'\nimport { WorldManager } from '../../scene/WorldManager'\n\nexport class SelectionLayer extends ScreenLayer {\n\n    worldManager: WorldManager\n    selectStart: { x: number, y: number } = null\n\n    constructor() {\n        super(true)\n    }\n\n    setWorldManager(worldManager: WorldManager) {\n        this.worldManager = worldManager\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        if (eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.startSelection(cx, cy)\n        } else if (eventEnum === POINTER_EVENT.MOVE) {\n            return this.changeSelection(cx, cy)\n        } else if (eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.selectEntities(cx, cy)\n        }\n        return false\n    }\n\n    startSelection(screenX: number, screenY: number) {\n        this.selectStart = {x: screenX, y: screenY}\n        return true\n    }\n\n    changeSelection(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        this.context.strokeStyle = 'rgba(128, 192, 192, 0.5)'\n        this.context.lineWidth = 2\n        this.context.strokeRect(this.selectStart.x, this.selectStart.y, screenX - this.selectStart.x, screenY - this.selectStart.y)\n        return true\n    }\n\n    selectEntities(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        const r1x = (this.selectStart.x / this.canvas.width) * 2 - 1\n        const r1y = -(this.selectStart.y / this.canvas.height) * 2 + 1\n        const r2x = (screenX / this.canvas.width) * 2 - 1\n        const r2y = -(screenY / this.canvas.height) * 2 + 1\n        if (Math.abs(screenX - this.selectStart.x) < 5 && Math.abs(screenY - this.selectStart.y) < 5) {\n            const x = (this.selectStart.x + screenX) / this.canvas.width - 1\n            const y = -(this.selectStart.y + screenY) / this.canvas.height + 1\n            this.worldManager.sceneManager.selectEntitiesByRay(x, y)\n        } else {\n            this.worldManager.sceneManager.selectEntitiesInFrustum(r1x, r1y, r2x, r2y)\n        }\n        this.selectStart = null\n        return true\n    }\n\n}\n","import { ScreenLayer } from '../../screen/ScreenLayer'\nimport { WorldManager } from '../../scene/WorldManager'\nimport { SelectionType } from '../model/Selectable'\nimport { GameState } from '../model/GameState'\nimport { Raider } from '../../scene/model/Raider'\nimport { MoveJob } from '../model/job/Job'\nimport { EventBus } from '../../event/EventBus'\nimport { JobCreateEvent } from '../../event/WorldEvents'\nimport { Surface } from '../../scene/model/map/Surface'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { FulfillerEntity } from '../../scene/model/FulfillerEntity'\nimport { SurfaceJob, SurfaceJobType } from '../model/job/SurfaceJob'\nimport { KEY_EVENT, MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventManager'\n\nexport class GameLayer extends ScreenLayer {\n\n    private worldMgr: WorldManager\n    private rightDown: { x: number, y: number } = {x: 0, y: 0}\n\n    constructor() {\n        super(false, false)\n    }\n\n    setWorldManager(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (eventEnum === POINTER_EVENT.MOVE) {\n            const intersectionPoint = this.getTerrainPositionFromEvent(event)\n            if (intersectionPoint) this.worldMgr.setTorchPosition(intersectionPoint)\n        } else if (eventEnum === POINTER_EVENT.UP && event.button === MOUSE_BUTTON.SECONDARY) {\n            const downUpDistance = Math.abs(event.x - this.rightDown.x) + Math.abs(event.y - this.rightDown.y)\n            if (downUpDistance < 3 && GameState.selectionType === SelectionType.PILOT || GameState.selectionType === SelectionType.GROUP) {\n                // TODO check for collectable entity first\n                const intersectionPoint = this.getTerrainPositionFromEvent(event)\n                if (intersectionPoint) {\n                    const surface = this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(intersectionPoint)\n                    if (surface) {\n                        if (surface.isDrillable()) {\n                            this.createSurfaceJob(SurfaceJobType.DRILL, surface)\n                        } else if (surface.hasRubble()) {\n                            this.createSurfaceJob(SurfaceJobType.CLEAR_RUBBLE, surface)\n                        } else if (surface.isWalkable()) {\n                            GameState.selectedEntities.forEach((raider: Raider) => raider.setJob(new MoveJob(intersectionPoint)))\n                            if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n                        }\n                    }\n                }\n            }\n        } else if (eventEnum === POINTER_EVENT.DOWN && event.button === MOUSE_BUTTON.SECONDARY) {\n            this.rightDown.x = event.x\n            this.rightDown.y = event.y\n        }\n        this.canvas.dispatchEvent(event)\n        return true\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        if (eventEnum === KEY_EVENT.UP) {\n            if (GameState.selectionType === SelectionType.SURFACE) {\n                GameState.selectedEntities.forEach((s: Surface) => {\n                    if (event.key === 'c') {\n                        if (!s.surfaceType.floor) s.collapse()\n                    } else if (event.key === 'f') {\n                        const t = s.terrain.findFallInTarget(s.x, s.y)\n                        if (!s.surfaceType.floor) s.createFallin(t[0], t[1])\n                    }\n                })\n                EventBus.publishEvent(new EntityDeselected())\n                return true\n            }\n        }\n        return false\n    }\n\n    createSurfaceJob(surfaceJobType: SurfaceJobType, surface: Surface) {\n        const surfJob = new SurfaceJob(surfaceJobType, surface)\n        GameState.selectedEntities.forEach((e: FulfillerEntity) => {\n            if (surfJob.isQualified(e)) e.setJob(surfJob)\n        })\n        EventBus.publishEvent(new JobCreateEvent(surfJob))\n        surface.updateJobColor()\n        if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n    }\n\n    getTerrainPositionFromEvent(event) {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        return this.worldMgr.getTerrainIntersectionPoint(rx, ry)\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        this.canvas.dispatchEvent(event)\n        return true\n    }\n\n}\n","export class BaseElement {\n\n    parent: BaseElement = null\n    x: number = 0\n    y: number = 0\n    relX: number = 0\n    relY: number = 0\n    width: number = 0\n    height: number = 0\n    children: BaseElement[] = []\n    hidden: boolean = false\n    disabled: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n\n    constructor(parent: BaseElement = null) {\n        this.parent = parent\n    }\n\n    addChild<T extends BaseElement>(child: T): T {\n        child.parent = this\n        this.children.push(child)\n        child.updatePosition()\n        return child\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n    }\n\n    drawTooltip(context: CanvasRenderingContext2D) {\n    }\n\n    onClick() {\n    }\n\n    isInactive(): boolean {\n        for (let parent = this.parent; !!parent; parent = parent.parent) if (parent.isInactive()) return true\n        return this.hidden || this.disabled\n    }\n\n    hide() {\n        this.hidden = true\n        this.children.forEach((child) => child.hide())\n    }\n\n    show() {\n        this.hidden = false\n        this.children.forEach((child) => child.show())\n    }\n\n    updatePosition() {\n        this.x = this.parent ? this.parent.x + this.relX : this.relX\n        this.y = this.parent ? this.parent.y + this.relY : this.relY\n        this.children.forEach((child) => child.updatePosition())\n    }\n\n    isInRect(cx, cy) {\n        return cx >= this.x && cy >= this.y && cx < this.x + this.width && cy < this.y + this.height\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = this.pressed && this.hover\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => stateChanged = child.checkHover(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.pressed !== inRect\n        this.pressed = inRect\n        this.children.forEach((child) => stateChanged = child.checkClick(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        if (inRect && this.pressed) this.onClick()\n        let stateChanged = false\n        this.children.forEach((child) => stateChanged = child.checkRelease(cx, cy) || stateChanged)\n        stateChanged = this.pressed || stateChanged\n        this.pressed = false\n        return stateChanged\n    }\n\n    release(): boolean {\n        let stateChanged = this.pressed || this.hover\n        this.pressed = false\n        this.hover = false\n        this.children.forEach((child) => stateChanged = child.release() || stateChanged)\n        return stateChanged\n    }\n\n    notifyRedraw() {\n        if (this.parent) this.parent.notifyRedraw()\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\nimport { NATIVE_FRAMERATE, PANEL_ANIMATION_MULTIPLIER } from '../../../main'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\n\nexport class Panel extends BaseElement {\n\n    img: HTMLCanvasElement = null\n    xOut: number = 0\n    yOut: number = 0\n    xIn: number = 0\n    yIn: number = 0\n    animationTimeout = null\n    movedIn: boolean = true // xIn, yIn is the collapsed position out of screen\n\n    constructor(panelCfg?: PanelCfg) {\n        super()\n        if (panelCfg) {\n            this.img = ResourceManager.getImage(panelCfg.filename)\n            this.xOut = panelCfg.xOut\n            this.yOut = panelCfg.yOut\n            this.xIn = panelCfg.xIn\n            this.yIn = panelCfg.yIn\n            this.relX = this.xIn\n            this.relY = this.yIn\n        }\n    }\n\n    isInactive(): boolean {\n        return this.animationTimeout || super.isInactive()\n    }\n\n    updateAnimation(targetX: number, targetY: number, speed: number, onDone: () => any) {\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= speed && Math.abs(diffY) <= speed) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * speed)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * speed)\n            const panel = this\n            this.animationTimeout = setTimeout(() => panel.updateAnimation(targetX, targetY, speed, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    setMovedIn(movedIn: boolean, onDone: () => any = null) {\n        if (this.movedIn !== movedIn) {\n            this.toggleState(onDone)\n        } else if (onDone) {\n            onDone()\n        }\n    }\n\n    toggleState(onDone: () => any = null) {\n        if (this.animationTimeout) {\n            clearTimeout(this.animationTimeout)\n            this.animationTimeout = null\n        }\n        if (this.movedIn) {\n            this.movedIn = false\n            this.updateAnimation(this.xOut, this.yOut, PANEL_ANIMATION_MULTIPLIER, onDone)\n        } else {\n            this.movedIn = true\n            this.updateAnimation(this.xIn, this.yIn, PANEL_ANIMATION_MULTIPLIER, onDone)\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.img) context.drawImage(this.img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class Button extends BaseElement {\n\n    buttonType: string = null\n    imgNormal: HTMLCanvasElement = null\n    imgHover: HTMLCanvasElement = null\n    imgPressed: HTMLCanvasElement = null\n    imgDisabled: HTMLCanvasElement = null\n    tooltip: string = null\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent)\n        this.buttonType = btnCfg.buttonType\n        this.imgNormal = ResourceManager.getImageOrNull(btnCfg.normalFile)\n        this.imgHover = ResourceManager.getImageOrNull(btnCfg.highlightFile)\n        this.imgPressed = ResourceManager.getImageOrNull(btnCfg.pressedFile)\n        this.imgDisabled = ResourceManager.getImageOrNull(btnCfg.disabledFile)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width || this.imgNormal?.width || this.imgPressed?.width\n        this.height = btnCfg.height || this.imgNormal?.height || this.imgPressed?.height\n        this.tooltip = btnCfg.tooltip\n        this.updatePosition()\n    }\n\n    onClick() {\n        console.log('button pressed: ' + this.buttonType)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled || this.imgPressed || this.imgNormal\n        } else if (this.pressed) {\n            img = this.imgPressed || this.imgNormal\n        } else if (this.hover) {\n            img = this.imgHover || this.imgNormal\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","export class BaseConfig {\n\n    static setFromCfg(config: BaseConfig, cfgObj: any) {\n        Object.keys(cfgObj).forEach((cfgKey) => {\n            const lCfgKeyName = (cfgKey.startsWith('!') ? cfgKey.substring(1) : cfgKey).toLowerCase().replace(/_/g, '')\n            const found = Object.keys(config).some((objKey) => {\n                return config.assignValue(objKey, lCfgKeyName, cfgObj[cfgKey])\n            })\n            if (!found) {\n                console.warn('cfg key does not exist: ' + cfgKey)\n            }\n        })\n        return config\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            this[objKey] = this.parseValue(lCfgKeyName, cfgValue)\n            return true\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return cfgValue\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class SideBarLabel extends BaseElement {\n\n    tooltip: string\n    label: string\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg, label: string) {\n        super(parent)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width\n        this.height = btnCfg.height\n        this.tooltip = btnCfg.tooltip\n        this.label = label\n        this.updatePosition()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.textAlign = 'center'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.label, this.x + this.width / 2, this.y + this.height - 2)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { GameState } from '../../model/GameState'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { CollectEvent, SpawnMaterialEvent } from '../../../event/WorldEvents'\nimport { CollectableType } from '../../../scene/model/collect/CollectableEntity'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { SideBarLabel } from './SideBarLabel'\n\nexport class PanelCrystalSideBar extends Panel {\n\n    labelOre: SideBarLabel\n    labelCrystal: SideBarLabel\n    imgNoCrystal: HTMLCanvasElement\n    imgSmallCrystal: HTMLCanvasElement\n    imgUsedCrystal: HTMLCanvasElement\n    imgOre: HTMLCanvasElement\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonCrystalSideBarCfg) {\n        super(panelCfg)\n        this.labelOre = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarOre, GameState.numOre.toString())) // TODO include number of bricks\n        this.labelCrystal = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarCrystals, GameState.numCrystal.toString()))\n        this.imgNoCrystal = ResourceManager.getImage('Interface/RightPanel/NoSmallCrystal.bmp')\n        this.imgSmallCrystal = ResourceManager.getImage('Interface/RightPanel/SmallCrystal.bmp')\n        this.imgUsedCrystal = ResourceManager.getImage('Interface/RightPanel/UsedCrystal.bmp')\n        this.imgOre = ResourceManager.getImage('Interface/RightPanel/CrystalSideBar_Ore.bmp')\n        EventBus.registerEventListener(CollectEvent.eventKey, (event: CollectEvent) => {\n            this.updateQuantities(event.collectType)\n        })\n        EventBus.registerEventListener(SpawnMaterialEvent.eventKey, (event: SpawnMaterialEvent) => {\n            this.updateQuantities(event.collectable.getCollectableType())\n        })\n    }\n\n    updateQuantities(type: CollectableType) {\n        if (type === CollectableType.CRYSTAL || type === CollectableType.ORE || type === CollectableType.BRICK) {\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        this.labelOre.label = GameState.numOre.toString() // TODO include number of bricks\n        this.labelCrystal.label = GameState.numCrystal.toString()\n        super.onRedraw(context)\n        // draw crystals\n        let curX = this.x + this.img.width - 8\n        let curY = this.y + this.img.height - 34\n        for (let c = 0; (GameState.neededCrystals < 1 || c < Math.max(GameState.neededCrystals, GameState.numCrystal)) && curY >= Math.max(this.imgNoCrystal.height, this.imgSmallCrystal.height, this.imgUsedCrystal.height); c++) {\n            let imgCrystal = this.imgNoCrystal\n            if (GameState.usedCrystals > c) {\n                imgCrystal = this.imgUsedCrystal\n            } else if (GameState.numCrystal > c) {\n                imgCrystal = this.imgSmallCrystal\n            }\n            curY -= imgCrystal.height\n            context.drawImage(imgCrystal, curX - imgCrystal.width / 2, curY)\n        }\n        // draw ores\n        curX = this.x + this.img.width - 21\n        curY = this.y + this.img.height - 42\n        for (let i = 0; i < GameState.numOre && curY >= this.imgOre.height; ++i) {\n            curY -= this.imgOre.height\n            context.drawImage(this.imgOre, curX - this.imgOre.width / 2, curY)\n        }\n    }\n\n}\n\nexport class ButtonCrystalSideBarCfg extends BaseConfig {\n\n    panelButtonCrystalSideBarOre: ButtonCfg = null\n    panelButtonCrystalSideBarCrystals: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonInfoDockCfg extends BaseConfig {\n\n    panelButtonInfoDockGoto: ButtonCfg = null\n    panelButtonInfoDockClose: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonPriorityListCfg extends BaseConfig {\n\n    panelButtonPriorityListDisable: ButtonCfg[] = []\n    panelButtonPriorityListUpOne: ButtonCfg[] = []\n    panelButtonPriorityListClose: ButtonCfg = null // not used in the game\n    panelButtonPriorityListReset: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName.match(/panelButtonPriorityListDisable\\d+/i)) {\n            this.panelButtonPriorityListDisable.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else if (lCfgKeyName.match(/panelButtonPriorityListUpOne\\d+/i)) {\n            this.panelButtonPriorityListUpOne.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else {\n            return super.assignValue(objKey, lCfgKeyName, cfgValue)\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonTopCfg extends BaseConfig {\n\n    panelButtonTopPanelCallToArms: ButtonCfg = null\n    panelButtonTopPanelOptions: ButtonCfg = null\n    panelButtonTopPanelPriorities: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ButtonRadarCfg } from '../game/gui/radar/RadarPanel'\nimport { ButtonCrystalSideBarCfg } from '../game/gui/sidebar/PanelCrystalSideBar'\nimport { ButtonInfoDockCfg } from '../game/gui/infodock/ButtonInfoDockCfg'\nimport { ButtonPriorityListCfg } from '../game/gui/toppanel/ButtonPriorityListCfg'\nimport { ButtonTopCfg } from '../game/gui/toppanel/ButtonTopCfg'\n\nexport class ButtonsCfg extends BaseConfig {\n\n    panelRadar: ButtonRadarCfg = null\n    panelCrystalSideBar: ButtonCrystalSideBarCfg = null\n    panelTopPanel: ButtonTopCfg = null\n    panelInformation: ButtonInformationCfg = null\n    panelPriorityList: ButtonPriorityListCfg = null\n    panelCameraControl: ButtonCameraControlCfg = null\n    panelInfoDock: ButtonInfoDockCfg = null\n    panelEncyclopedia: any = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        const btnCfgValue = {}\n        cfgValue.forEach(arr => btnCfgValue[arr[0]] = arr)\n        if (lCfgKeyName === 'panelRadar'.toLowerCase()) {\n            return new ButtonRadarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCrystalSideBar'.toLowerCase()) {\n            return new ButtonCrystalSideBarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelTopPanel'.toLowerCase()) {\n            return new ButtonTopCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInformation'.toLowerCase()) {\n            return new ButtonInformationCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelPriorityList'.toLowerCase()) {\n            return new ButtonPriorityListCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCameraControl'.toLowerCase()) {\n            return new ButtonCameraControlCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInfoDock'.toLowerCase()) {\n            return new ButtonInfoDockCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelEncyclopedia'.toLowerCase()) {\n            return null // not used in the game\n        } else {\n            return btnCfgValue\n        }\n    }\n\n}\n\nexport class ButtonInformationCfg extends BaseConfig {\n\n    panelButtonInformationToggle: ButtonCfg = null\n    panelButtonInformationFunction: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n\nexport class ButtonCameraControlCfg extends BaseConfig {\n\n    panelButtonCameraControlZoomIn: ButtonCfg = null\n    panelButtonCameraControlZoomOut: ButtonCfg = null\n    panelButtonCameraControlCycleBuildings: ButtonCfg = null\n    panelButtonCameraControlRotate: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n\nexport class BaseButtonCfg {\n\n    buttonType?: string = null\n    normalFile?: string = null\n    highlightFile?: string = null\n    pressedFile?: string = null\n    disabledFile?: string = null\n    relX?: number = 0\n    relY?: number = 0\n    width?: number = 0\n    height?: number = 0\n    tooltip?: string = null\n}\n\nexport class ButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 9) {\n            [this.buttonType, this.normalFile, this.highlightFile, this.pressedFile, this.relX, this.relY, this.width, this.height, this.tooltip] = cfgValue\n        } else {\n            throw 'Invalid number of arguments (' + cfgValue.length + ') given for button configuration expected 9 or 5'\n        }\n    }\n\n}\n\nexport class InfoButtonCfg extends BaseButtonCfg {\n\n    constructor(buttonImageFilename: string) {\n        super()\n        this.normalFile = buttonImageFilename\n        this.highlightFile = buttonImageFilename\n        this.pressedFile = buttonImageFilename\n        this.disabledFile = buttonImageFilename\n        this.relX = 0\n        this.relY = 0\n    }\n\n}\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { BaseConfig } from '../../../cfg/BaseConfig'\n\nexport class RadarPanel extends Panel {\n\n    fill: Panel\n    overlay: Panel\n    btnToggle: Button\n    btnMap: Button\n    btnTagged: Button\n\n    constructor(panelCfg: PanelCfg, panelFillCfg: PanelCfg, panelOverlayCfg: PanelCfg, buttonsCfg: ButtonRadarCfg) {\n        super(panelCfg)\n        this.fill = this.addChild(new Panel(panelFillCfg))\n        // fill cords given in abs, turn to rel (otherwise animation wont work)\n        this.fill.relX = this.relX - this.fill.relX\n        this.fill.relY = this.relY - this.fill.relY\n        this.overlay = this.addChild(new Panel(panelOverlayCfg))\n        // this.overlay.hide();\n        this.btnToggle = this.addChild(new Button(this, buttonsCfg.panelButtonRadarToggle))\n        this.btnToggle.onClick = () => this.toggleState()\n        this.btnMap = this.addChild(new Button(this, buttonsCfg.panelButtonRadarMapView))\n        this.btnMap.onClick = () => {\n            // this.fill.hide();\n            // this.overlay.hide();\n        }\n        this.btnTagged = this.addChild(new Button(this, buttonsCfg.panelButtonRadarTaggedObjectView))\n        this.btnTagged.onClick = () => {\n            // this.fill.show();\n            // this.overlay.show(); // TODO only show overlay, when entity selected\n        }\n    }\n\n}\n\nexport class ButtonRadarCfg extends BaseConfig {\n\n    panelButtonRadarToggle: ButtonCfg = null\n    panelButtonRadarTaggedObjectView: ButtonCfg = null\n    panelButtonRadarZoomIn: ButtonCfg = null\n    panelButtonRadarZoomOut: ButtonCfg = null\n    panelButtonRadarMapView: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class TextInfoMessage {\n\n    infoImage\n    textImage\n\n    constructor(font: BitmapFont, infoMessageEntryConfig: TextInfoMessageEntryConfig, maxWidth: number) {\n        this.textImage = font.createTextImage(infoMessageEntryConfig.text, maxWidth)\n        this.infoImage = ResourceManager.getImageOrNull(infoMessageEntryConfig.imageFilename)\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { GameState } from '../../model/GameState'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { TextInfoMessageConfig } from './TextInfoMessageConfig'\nimport { EventBus } from '../../../event/EventBus'\nimport { CrystalFoundEvent } from '../../../event/WorldLocationEvent'\nimport { TextInfoMessage } from './TextInfoMessage'\nimport { CavernDiscovered, OreFoundEvent } from '../../../event/WorldEvents'\n\nexport class MessagePanel extends Panel {\n\n    imgAir: HTMLCanvasElement = null\n    currentMessage: TextInfoMessage = null\n    messageTimeout = null\n\n    msgSpaceToContinue: TextInfoMessage\n    msgAirSupplyLow: TextInfoMessage\n    msgAirSupplyRunningOut: TextInfoMessage\n    msgGameCompleted: TextInfoMessage\n    msgManTrained: TextInfoMessage\n    msgUnitUpgraded: TextInfoMessage\n\n    constructor(panelCfg: PanelCfg, textInfoMessageConfig: TextInfoMessageConfig) {\n        super(panelCfg)\n        this.relX = this.xOut = this.xIn = 42\n        this.relY = this.yOut = this.yIn = 409\n        this.imgAir = ResourceManager.getImage('Interface/Airmeter/msgpanel_air_juice.bmp')\n\n        const font = ResourceManager.getBitmapFont('Interface/Fonts/Font5_Hi.bmp')\n        const crystalFound = new TextInfoMessage(font, textInfoMessageConfig.textCrystalFound, this.img.width)\n        EventBus.registerEventListener(CrystalFoundEvent.eventKey, () => this.setMessage(crystalFound))\n        this.msgSpaceToContinue = new TextInfoMessage(font, textInfoMessageConfig.textSpaceToContinue, this.img.width)\n        const cavernDiscovered = new TextInfoMessage(font, textInfoMessageConfig.textCavernDiscovered, this.img.width)\n        EventBus.registerEventListener(CavernDiscovered.eventKey, () => this.setMessage(cavernDiscovered))\n        const oreFound = new TextInfoMessage(font, textInfoMessageConfig.textOreFound, this.img.width)\n        EventBus.registerEventListener(OreFoundEvent.eventKey, () => this.setMessage(oreFound))\n        this.msgAirSupplyLow = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyLow, this.img.width)\n        this.msgAirSupplyRunningOut = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyRunningOut, this.img.width)\n        this.msgGameCompleted = new TextInfoMessage(font, textInfoMessageConfig.textGameCompleted, this.img.width)\n        this.msgManTrained = new TextInfoMessage(font, textInfoMessageConfig.textManTrained, this.img.width)\n        this.msgUnitUpgraded = new TextInfoMessage(font, textInfoMessageConfig.textUnitUpgraded, this.img.width)\n    }\n\n    setMessage(textInfoMessage: TextInfoMessage, timeout: number = 3000) {\n        if (this.messageTimeout) clearTimeout(this.messageTimeout)\n        this.currentMessage = textInfoMessage\n        this.notifyRedraw()\n        if (timeout) {\n            const that = this\n            this.messageTimeout = setTimeout(() => {\n                that.currentMessage = null\n                that.notifyRedraw()\n            }, timeout)\n        }\n    }\n\n    unsetMessage(textInfoMessage: TextInfoMessage) {\n        if (this.currentMessage === textInfoMessage) {\n            this.currentMessage = null\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (GameState.airlevel > 0) {\n            const width = Math.round(236 * Math.min(1, GameState.airlevel))\n            context.drawImage(this.imgAir, this.x + 85, this.y + 6, width, 8)\n        }\n        const textImage = this.currentMessage?.textImage\n        const infoImage = this.currentMessage?.infoImage\n        if (textImage) {\n            const txtX = this.x + (this.img.width - textImage.width - (infoImage ? infoImage.width : 0)) / 2\n            context.drawImage(textImage, txtX, this.y + 26)\n        }\n        if (infoImage) {\n            const infoX = this.x + this.img.width - infoImage.width\n            context.drawImage(infoImage, infoX, this.y + 16)\n        }\n    }\n\n}\n","import { BaseButtonCfg } from './ButtonsCfg'\n\nexport class IconPanelBackButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super();\n        [this.width, this.height, this.highlightFile, this.pressedFile, this.tooltip] = cfgValue // Interface back button\n        this.relX = 4\n        this.relY = 14\n    }\n\n}\n","import { BaseButtonCfg } from './ButtonsCfg'\n\nexport class MenuItemCfg extends BaseButtonCfg {\n\n    tooltipDisabled: string\n    hotkey: string\n\n    constructor(cfgValue: any) {\n        super();\n        [this.normalFile, this.disabledFile, this.pressedFile, this.tooltip, this.tooltipDisabled, this.hotkey] = cfgValue\n        this.width = 40\n        this.height = 40\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\n\nexport class IconPanelButton extends Button {\n\n    tooltipDisabled: string\n    hotkey: string\n    isDisabled: () => boolean\n\n    constructor(parent: BaseElement, menuItemCfg: MenuItemCfg, itemKey: string, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemCfg)\n        this.buttonType = itemKey\n        this.relX = parentWidth - 59\n        this.relY = 9 + this.height * menuIndex\n        this.tooltipDisabled = menuItemCfg.tooltipDisabled\n        this.hotkey = menuItemCfg.hotkey\n        this.disabled = true\n    }\n\n    onClick() {\n        console.log('menu item pressed: ' + this.buttonType)\n    }\n\n    updateState(): boolean {\n        if (!this.disabled) return false\n        const targetState = !!this.isDisabled()\n        const stateChanged = this.disabled !== targetState\n        this.disabled = targetState\n        if (stateChanged) this.notifyRedraw()\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n        super.drawHover(context)\n        if (!this.disabled && this.hover) {\n            context.strokeStyle = '#0f0'\n            context.lineWidth = 2\n            context.strokeRect(this.x - context.lineWidth / 2, this.y - context.lineWidth / 2, this.width + context.lineWidth - 1, this.height + context.lineWidth - 1)\n        }\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { Button } from '../base/Button'\nimport { IconPanelBackButtonCfg } from '../../../cfg/IconPanelBackButtonCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class IconSubPanel extends Panel {\n\n    countMenuItems: number = 0\n    backBtn: Button = null\n\n    constructor(numOfItems, onBackPanel: Panel = null) {\n        super()\n        if (onBackPanel) {\n            const backBtnCfg = new IconPanelBackButtonCfg(ResourceManager.cfg('InterfaceBackButton'))\n            this.backBtn = this.addChild(new Button(this, backBtnCfg))\n            const panel = this\n            this.backBtn.onClick = () => panel.toggleState(() => onBackPanel.toggleState())\n        }\n        const frameImgCfg = ResourceManager.cfg('InterfaceSurroundImages', numOfItems.toString())\n        const [imgName, val1, val2, val3, val4, imgNameWoBackName, woBack1, woBack2] = frameImgCfg\n        this.img = onBackPanel ? ResourceManager.getImage(imgName) : ResourceManager.getImage(imgNameWoBackName)\n        this.xOut = -this.img.width\n    }\n\n    addMenuItem(menuItemGroup: string, itemKey: string) {\n        const menuItemCfg = new MenuItemCfg(ResourceManager.cfg(menuItemGroup, itemKey))\n        const menuItem = this.addChild(new IconPanelButton(this, menuItemCfg, itemKey, this.img.width, this.countMenuItems))\n        this.countMenuItems++\n        return menuItem\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class IconPanel extends Panel {\n\n    subPanels: IconSubPanel[] = []\n    mainPanel: IconSubPanel\n\n    constructor() {\n        super()\n        this.relX = this.xOut = 640 - 16\n        this.xIn = 640 + 95\n        this.relY = this.yOut = this.yIn = 9\n        this.movedIn = false\n        this.mainPanel = this.addSubPanel(new IconSubPanel(4))\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n    }\n\n    addSubPanel<T extends IconSubPanel>(childPanel: T): T {\n        this.addChild(childPanel)\n        this.subPanels.push(childPanel)\n        return childPanel\n    }\n\n    selectSubPanel(targetPanel: IconSubPanel) {\n        this.subPanels.forEach((subPanel) => subPanel !== targetPanel && subPanel.setMovedIn(true))\n        targetPanel.setMovedIn(false)\n    }\n\n}\n\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\n\nexport class BuildingPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Toolstation')\n        this.addMenuItem('InterfaceBuildImages', 'TeleportPad')\n        this.addMenuItem('InterfaceBuildImages', 'Docks')\n        this.addMenuItem('InterfaceBuildImages', 'Powerstation')\n        this.addMenuItem('InterfaceBuildImages', 'Barracks')\n        this.addMenuItem('InterfaceBuildImages', 'Upgrade')\n        this.addMenuItem('InterfaceBuildImages', 'Geo-dome')\n        this.addMenuItem('InterfaceBuildImages', 'OreRefinery')\n        this.addMenuItem('InterfaceBuildImages', 'Gunstation')\n        this.addMenuItem('InterfaceBuildImages', 'TeleportBIG')\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class SmallVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Hoverboard')\n        this.addMenuItem('InterfaceBuildImages', 'SmallDigger')\n        this.addMenuItem('InterfaceBuildImages', 'SmallTruck')\n        this.addMenuItem('InterfaceBuildImages', 'SmallCat')\n        this.addMenuItem('InterfaceBuildImages', 'SmallMLP')\n        this.addMenuItem('InterfaceBuildImages', 'SmallHeli')\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\n\nexport class LargeVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(5, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'BullDozer')\n        this.addMenuItem('InterfaceBuildImages', 'WalkerDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeMLP')\n        this.addMenuItem('InterfaceBuildImages', 'LargeDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeCat')\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\n\nexport class SelectBasePanel extends IconSubPanel {\n\n    constructor(numOfItems, onBackPanel: Panel) {\n        super(numOfItems, onBackPanel)\n        this.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected())\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { SurfaceJob, SurfaceJobType } from '../../model/job/SurfaceJob'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { EntityDeselected, SurfaceSelectedEvent } from '../../../event/LocalEvents'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class SelectWallPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        const itemDrill = this.addWallMenuItem('Interface_MenuItem_Dig', SurfaceJobType.DRILL)\n        const itemReinforce = this.addWallMenuItem('Interface_MenuItem_Reinforce', SurfaceJobType.REINFORCE)\n        const itemDynamite = this.addWallMenuItem('Interface_MenuItem_Dynamite', SurfaceJobType.BLOW)\n        const itemDeselect = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeselectDig')\n        itemDeselect.disabled = false\n        itemDeselect.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.cancelJobs()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        EventBus.registerEventListener(SurfaceSelectedEvent.eventKey, (event: SurfaceSelectedEvent) => {\n            const surface = event.surface\n            if (!surface.surfaceType.floor) {\n                itemDrill.disabled = !surface.isDrillable()\n                itemReinforce.disabled = !surface.isReinforcable()\n                itemDynamite.disabled = !surface.isExplodable()\n                this.notifyRedraw()\n            }\n        })\n    }\n\n    addWallMenuItem(itemKey: string, jobType: SurfaceJobType): IconPanelButton {\n        const item = this.addMenuItem('InterfaceImages', itemKey)\n        item.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            if (!selectedSurface.hasJobType(jobType)) {\n                EventBus.publishEvent(new JobCreateEvent(new SurfaceJob(jobType, selectedSurface)))\n            }\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        return item\n    }\n\n}\n","import { Vector3 } from 'three'\nimport { Surface } from './map/Surface'\nimport { CollectableEntity, CollectableType } from './collect/CollectableEntity'\nimport { EventBus } from '../../event/EventBus'\nimport { JobCreateEvent } from '../../event/WorldEvents'\nimport { CompletePowerPathJob } from '../../game/model/job/SurfaceJob'\nimport { GameState } from '../../game/model/GameState'\n\nexport class BuildingSite {\n\n    isPowerPath: boolean\n    surfaces: Surface[] = []\n    neededByType = {}\n    assignedByType = {}\n    onSiteByType = {}\n    complete: boolean = false\n\n    constructor(isPowerPath: boolean = false) {\n        this.isPowerPath = isPowerPath\n    }\n\n    getPosition(): Vector3 {\n        return this.surfaces[0].getCenterWorld()\n    }\n\n    needs(collectableType: CollectableType): boolean {\n        const needed = this.neededByType[collectableType] || 0\n        const assigned = (this.assignedByType[collectableType] || []).length\n        return needed > assigned\n    }\n\n    assign(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        this.assignedByType[collectableType] = this.assignedByType[collectableType] || []\n        this.assignedByType[collectableType].push(item)\n    }\n\n    unAssign(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        this.assignedByType[collectableType] = (this.assignedByType[collectableType] || [])\n        this.assignedByType[collectableType].splice(this.assignedByType[collectableType].indexOf(item), 1)\n    }\n\n    addItem(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        const needed = this.neededByType[collectableType] || 0\n        this.onSiteByType[collectableType] = this.onSiteByType[collectableType] || []\n        if (this.onSiteByType[collectableType].length < needed) {\n            item.group.position.copy(item.getTargetPos())\n            item.worldMgr.sceneManager.scene.add(item.group)\n            this.onSiteByType[collectableType].push(item)\n            this.checkComplete()\n        } else {\n            item.resetTarget()\n            item.worldMgr.addCollectable(item, item.getTargetPos().x, item.getTargetPos().z)\n        }\n    }\n\n    checkComplete() {\n        if (this.complete) return\n        let complete = true\n        Object.keys(this.neededByType).some((neededType) => {\n            const needed = this.neededByType[neededType] || 0\n            const onSite = (this.onSiteByType[neededType] || []).length\n            if (onSite < needed) {\n                complete = false\n                return true\n            }\n        })\n        if (complete) {\n            this.complete = complete\n            GameState.buildingSites.splice(GameState.buildingSites.indexOf(this), 1)\n            const items = []\n            Object.keys(this.onSiteByType).forEach((collectableType) => items.push(...this.onSiteByType[collectableType]))\n            if (this.isPowerPath) {\n                EventBus.publishEvent(new JobCreateEvent(new CompletePowerPathJob(this.surfaces[0], items)))\n            } else {\n                // TODO implement building spawning\n                console.log('Building site is complete')\n            }\n        }\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { SurfaceType } from '../../../scene/model/map/SurfaceType'\nimport { Building } from '../../model/entity/building/Building'\nimport { CollectableType } from '../../../scene/model/collect/CollectableEntity'\nimport { EventBus } from '../../../event/EventBus'\nimport { SpawnMaterialEvent } from '../../../event/WorldEvents'\nimport { BuildingSite } from '../../../scene/model/BuildingSite'\nimport { EntityDeselected, SurfaceSelectedEvent } from '../../../event/LocalEvents'\n\nexport class SelectFloorPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(3, onBackPanel)\n        const pathItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_LayPath')\n        pathItem.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.surfaceType = SurfaceType.POWER_PATH_SITE\n            selectedSurface.updateTexture()\n            const targetBuilding = GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), Building.TOOLSTATION)\n            if (targetBuilding) {\n                const ores = GameState.dropMaterial(CollectableType.ORE, 2)\n                ores.forEach((ore) => {\n                    EventBus.publishEvent(new SpawnMaterialEvent(ore, targetBuilding.getDropPosition())) // TODO use ToolNullName from cfg\n                })\n            }\n            const site = new BuildingSite(true)\n            site.surfaces.push(selectedSurface)\n            site.neededByType[CollectableType.ORE] = 2\n            GameState.buildingSites.push(site)\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        pathItem.isDisabled = () => GameState.selectedSurface?.hasRubble() // TODO introduce GameState getselected surface\n        EventBus.registerEventListener(SurfaceSelectedEvent.eventKey, () => pathItem.updateState())\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_RemovePath')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { SurfaceJob, SurfaceJobType } from '../../model/job/SurfaceJob'\nimport { EntityDeselected, SurfaceSelectedEvent } from '../../../event/LocalEvents'\n\nexport class SelectRubblePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(2, onBackPanel)\n        const clearRubbleItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_ClearRubble')\n        clearRubbleItem.onClick = () => {\n            EventBus.publishEvent(new JobCreateEvent(new SurfaceJob(SurfaceJobType.CLEAR_RUBBLE, GameState.selectedSurface)))\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        clearRubbleItem.isDisabled = () => !GameState.selectedSurface?.hasRubble()\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        EventBus.registerEventListener(SurfaceSelectedEvent.eventKey, () => clearRubbleItem.updateState())\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { EventBus } from '../../../event/EventBus'\nimport { CollectEvent, SpawnMaterialEvent } from '../../../event/WorldEvents'\nimport { GameState } from '../../model/GameState'\n\nexport class SelectBuildingPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Repair')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PowerOff') // TODO other option is Interface_MenuItem_PowerOn\n        const upgradeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeBuilding')\n        upgradeItem.isDisabled = () => GameState.numOre < 5 || GameState.selectedBuilding?.hasMaxUpgrades()\n        upgradeItem.updateState() // TODO auto trigger update state when panel is shown\n        upgradeItem.onClick = () => GameState.selectedBuilding?.upgrade()\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteBuilding')\n        EventBus.registerEventListener(CollectEvent.eventKey, () => upgradeItem.updateState())\n        EventBus.registerEventListener(SpawnMaterialEvent.eventKey, () => upgradeItem.updateState())\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectRaiderPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GoFeed')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UnLoadMinifigure')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_MinifigurePickUp')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GetTool')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DropBirdScarer')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeMan')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSkill')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoFirstPerson')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoSecondPerson')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteMan')\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectVehiclePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(7, onBackPanel)\n    }\n\n}\n","import { IconPanel } from './IconPanel'\nimport { EventBus } from '../../../event/EventBus'\nimport { BuildingSelected, EntityDeselected, RaiderSelected, SurfaceSelectedEvent, VehicleSelected } from '../../../event/LocalEvents'\nimport { EntityAddedEvent, EntityRemovedEvent, EntityType, RaiderRequested } from '../../../event/WorldEvents'\nimport { GameState } from '../../model/GameState'\nimport { Building } from '../../model/entity/building/Building'\nimport { BuildingPanel } from './BuildingPanel'\nimport { SmallVehiclePanel } from './SmallVehiclePanel'\nimport { LargeVehiclePanel } from './LargeVehiclePanel'\nimport { SelectWallPanel } from './SelectWallPanel'\nimport { SelectFloorPanel } from './SelectFloorPanel'\nimport { SelectRubblePanel } from './SelectRubblePanel'\nimport { SelectBuildingPanel } from './SelectBuildingPanel'\nimport { SelectRaiderPanel } from './SelectRaiderPanel'\nimport { SelectVehiclePanel } from './SelectVehiclePanel'\n\nexport class MainPanel extends IconPanel {\n\n    constructor() {\n        super()\n        const buildingPanel = this.addSubPanel(new BuildingPanel(this.mainPanel))\n        const smallVehiclePanel = this.addSubPanel(new SmallVehiclePanel(this.mainPanel))\n        const largeVehiclePanel = this.addSubPanel(new LargeVehiclePanel(this.mainPanel))\n        const selectWallPanel = this.addSubPanel(new SelectWallPanel(this.mainPanel))\n        const selectFloorPanel = this.addSubPanel(new SelectFloorPanel(this.mainPanel))\n        const selectRubblePanel = this.addSubPanel(new SelectRubblePanel(this.mainPanel))\n        const selectBuildingPanel = this.addSubPanel(new SelectBuildingPanel(this.mainPanel))\n        const selectRaiderPanel = this.addSubPanel(new SelectRaiderPanel(this.mainPanel))\n        const selectVehiclePanel = this.addSubPanel(new SelectVehiclePanel(this.mainPanel))\n        const teleportRaider = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_TeleportMan')\n        teleportRaider.isDisabled = () => GameState.getBuildingsByType(Building.TOOLSTATION, Building.TELEPORT_PAD).length < 1\n            || GameState.raiders.length >= GameState.getMaxRaiders()\n        teleportRaider.updateState() // TODO auto call this for each button, when icon panel is shown\n        EventBus.registerEventListener(EntityAddedEvent.eventKey, (event: EntityAddedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.type === EntityType.BUILDING || event.type === EntityType.RAIDER) teleportRaider.updateState()\n        })\n        EventBus.registerEventListener(EntityRemovedEvent.eventKey, (event: EntityRemovedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.type === EntityType.BUILDING || event.type === EntityType.RAIDER) teleportRaider.updateState()\n        })\n        teleportRaider.onClick = () => EventBus.publishEvent(new RaiderRequested(GameState.requestedRaiders + 1))\n        // TODO add decrease requested raider spawn option\n        const buildingItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildBuilding')\n        buildingItem.disabled = false\n        buildingItem.onClick = () => this.mainPanel.toggleState(() => buildingPanel.toggleState())\n        const smallVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildSmallVehicle')\n        smallVehicleItem.disabled = false\n        smallVehicleItem.onClick = () => this.mainPanel.toggleState(() => smallVehiclePanel.toggleState())\n        const largeVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildLargeVehicle')\n        largeVehicleItem.disabled = false\n        largeVehicleItem.onClick = () => this.mainPanel.toggleState(() => largeVehiclePanel.toggleState())\n        EventBus.registerEventListener(SurfaceSelectedEvent.eventKey, (event: SurfaceSelectedEvent) => {\n            const surface = event.surface\n            if (surface.surfaceType.floor) {\n                if (surface.hasRubble()) {\n                    this.selectSubPanel(selectRubblePanel)\n                } else {\n                    this.selectSubPanel(selectFloorPanel)\n                }\n            } else {\n                this.selectSubPanel(selectWallPanel)\n            }\n        })\n        EventBus.registerEventListener(EntityDeselected.eventKey, () => this.selectSubPanel(this.mainPanel))\n        EventBus.registerEventListener(BuildingSelected.eventKey, () => this.selectSubPanel(selectBuildingPanel))\n        EventBus.registerEventListener(RaiderSelected.eventKey, () => this.selectSubPanel(selectRaiderPanel))\n        EventBus.registerEventListener(VehicleSelected.eventKey, () => this.selectSubPanel(selectVehiclePanel))\n    }\n\n}\n","import { BaseElement } from './BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { Button } from './Button'\n\nexport class ToggleButton extends Button {\n\n    toggleState: boolean = false\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent, btnCfg)\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = (this.pressed && this.hover) || this.toggleState\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => updated = child.checkHover(cx, cy) || updated)\n        return updated\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const isPressed = this.isInRect(cx, cy) || this.toggleState\n        let updated = this.pressed !== isPressed\n        this.pressed = isPressed\n        this.children.forEach((child) => updated = child.checkClick(cx, cy) || updated)\n        return updated\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = inRect && this.pressed\n        if (updated) {\n            this.toggleState = !this.toggleState\n            this.onClick()\n            this.pressed = updated && this.toggleState\n            this.hover = inRect\n        }\n        this.children.forEach((child) => updated = child.checkRelease(cx, cy) || updated)\n        return updated\n    }\n\n    release(): boolean {\n        return false\n    }\n\n}\n\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ToggleButton } from '../base/ToggleButton'\nimport { ButtonTopCfg } from './ButtonTopCfg'\n\nexport class TopPanel extends Panel {\n\n    btnCallToArms: ToggleButton\n    btnOptions: Button\n    btnPriorities: ToggleButton\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonTopCfg) {\n        super(panelCfg)\n        this.btnCallToArms = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelCallToArms))\n        this.btnOptions = this.addChild(new Button(this, buttonsCfg.panelButtonTopPanelOptions))\n        this.btnPriorities = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelPriorities))\n    }\n\n}\n\n","import { Button } from '../base/Button'\nimport { WorldEvent } from '../../../event/WorldEvents'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\nimport { InfoButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { InfoDockPanel } from './InfoDockPanel'\nimport { EventBus } from '../../../event/EventBus'\nimport { WorldLocationEvent } from '../../../event/WorldLocationEvent'\nimport { NATIVE_FRAMERATE } from '../../../main'\n\nexport class InfoDockButton extends Button {\n\n    messages: WorldEvent[] = [] // newest message first\n    text: string = null\n    animationTimeout = null\n    animationSpeedX = 0.5\n    animationSpeedY = 1\n\n    constructor(parent: InfoDockPanel, infoMessagesEntryConfig: InfoMessagesEntryConfig, eventKey: string) {\n        super(parent, new InfoButtonCfg(infoMessagesEntryConfig.buttonImageFilename))\n        this.text = infoMessagesEntryConfig.message\n        this.hidden = true\n\n        this.onClick = () => {\n            if (this.messages.length < 1) return\n            parent.buttonClicked(this)\n        }\n\n        EventBus.registerEventListener(eventKey, (event: WorldLocationEvent) => {\n            this.hidden = false\n            while (this.messages.length >= 9) this.messages.pop()\n            this.messages.unshift(event)\n            parent.showButton(this)\n        })\n    }\n\n    slideToTarget(targetX: number, targetY: number): Promise<void> {\n        return new Promise<void>((resolve) => this.updateAnimation(targetX, targetY, resolve))\n    }\n\n    private updateAnimation(targetX: number, targetY: number, onDone: () => any) { // TODO refactor: almost equal with code for Panel\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= this.animationSpeedX && Math.abs(diffY) <= this.animationSpeedY) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * this.animationSpeedX)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * this.animationSpeedY)\n            const that = this\n            this.animationTimeout = setTimeout(() => that.updateAnimation(targetX, targetY, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw() // FIXME performance: sync redraw for all animations on this layer (if hasAnimation, use requestAnimationFrame)\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.hidden) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.messages.length.toString(), this.x + 2, this.y + this.height / 2 + 2)\n    }\n\n}\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ButtonInfoDockCfg } from './ButtonInfoDockCfg'\nimport { InfoMessagesConfig } from './InfoMessagesConfig'\nimport { GenericDeathEvent, GenericMonsterEvent, LandslideEvent, PowerDrainEvent, RaiderDiscoveredEvent, SlugEmergeEvent, UnderAttackEvent } from '../../../event/WorldLocationEvent'\nimport { InfoDockButton } from './InfoDockButton'\nimport { InformationPanel } from './InformationPanel'\n\nexport class InfoDockPanel extends Panel {\n\n    stackButtons: InfoDockButton[] = []\n    informationPanel: InformationPanel = null\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonInfoDockCfg, infoMessagesConfig: InfoMessagesConfig, informationPanel: InformationPanel) {\n        super(panelCfg)\n        this.informationPanel = informationPanel\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockGoto)).onClick = () => this.gotoLatestMessage()\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockClose)).onClick = () => this.dropLatestMessage()\n\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericDeath, GenericDeathEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericMonster, GenericMonsterEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoCrystalFound, UnderAttackEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoUnderAttack, UnderAttackEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoLandslide, LandslideEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoPowerDrain, PowerDrainEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoSlugEmerge, SlugEmergeEvent.eventKey))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoFoundMinifigure, RaiderDiscoveredEvent.eventKey))\n    }\n\n    private gotoLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const btn = this.stackButtons[0]\n        if (btn.messages.length < 1) return\n        const msg = btn.messages[0] as LandslideEvent\n        console.log('TODO force move camera to: ' + msg.location.toArray()) // TODO force move camera\n    }\n\n    private dropLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const button = this.stackButtons[0]\n        if (button.messages.length < 1) return\n        button.messages.shift()\n        if (button.messages.length < 1) {\n            button.hidden = true\n            this.informationPanel.setMovedIn(true)\n            this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n            this.slideStackIntoPosition().then()\n        }\n        button.notifyRedraw()\n    }\n\n    showButton(button: InfoDockButton) {\n        if (this.stackButtons.includes(button)) {\n            button.notifyRedraw()\n        } else {\n            this.slideInButton(button)\n        }\n    }\n\n    private slideInButton(button: InfoDockButton) {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        const targetY = -this.stackButtons.map(b => b.height).reduce((prev, cur) => prev + cur, 0)\n        this.stackButtons.push(button)\n        button.relX = -button.width\n        button.relY = targetY - button.height\n        button.updatePosition()\n        button.slideToTarget(0, targetY).then(() => this.stackButtons.forEach(btn => btn.disabled = false))\n    }\n\n    buttonClicked(button: InfoDockButton) {\n        if (button !== this.stackButtons[0]) {\n            this.pushFirst(button)\n        } else {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.toggleState()\n        }\n    }\n\n    private pushFirst(button: InfoDockButton) {\n        this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n        this.stackButtons.unshift(button)\n        this.slideStackIntoPosition().then(() => {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.setMovedIn(false)\n        })\n    }\n\n    private slideStackIntoPosition() {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        let relY = 0\n        const promises = this.stackButtons.map(btn => {\n            const p = btn.slideToTarget(0, relY)\n            relY -= btn.height\n            return p\n        })\n        return new Promise<void>((resolve) => {\n            Promise.all(promises).then(() => {\n                this.stackButtons.forEach(btn => btn.disabled = false)\n                resolve()\n            })\n        })\n    }\n\n}\n\n","import { BaseConfig } from './BaseConfig'\n\nexport class PanelsCfg extends BaseConfig {\n\n    panelRadar: PanelCfg = null\n    panelRadarFill: PanelCfg = null\n    panelRadarOverlay: PanelCfg = null\n    panelMessages: PanelCfg = null\n    panelMessagesSide: PanelCfg = null\n    panelCrystalSideBar: PanelCfg = null\n    panelTopPanel: PanelCfg = null\n    panelInformation: PanelCfg = null\n    panelPriorityList: PanelCfg = null\n    panelCameraControl: PanelCfg = null\n    panelInfoDock: PanelCfg = null\n    panelEncyclopedia: PanelCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new PanelCfg(cfgValue)\n    }\n}\n\nexport class PanelCfg {\n\n    filename: string\n    xOut: number\n    yOut: number\n    xIn: number\n    yIn: number\n\n    constructor(cfgValue: any) {\n        [this.filename, this.xOut, this.yOut, this.xIn, this.yIn] = cfgValue\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { Button } from '../base/Button'\nimport { GameState } from '../../model/GameState'\nimport { LevelPrioritiesEntryConfig } from '../../../cfg/LevelsCfg'\nimport { ButtonPriorityListCfg } from './ButtonPriorityListCfg'\nimport { PriorityButtonsConfig } from './PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from './PriorityPositionsEntry'\n\nexport class PriorityListPanel extends Panel {\n\n    prioPositions: PriorityPositionsEntry[] = []\n    prioByName: Map<string, Button> = new Map()\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonPriorityListCfg, pos: PriorityPositionsEntry[], cfg: PriorityButtonsConfig) {\n        super(panelCfg)\n        buttonsCfg.panelButtonPriorityListDisable.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.toggle(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        buttonsCfg.panelButtonPriorityListUpOne.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.upOne(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        this.addChild(new Button(this, buttonsCfg.panelButtonPriorityListReset)).onClick = () => this.reset()\n\n        this.prioPositions = pos\n        this.prioByName.set('aiPriorityTrain'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityTrain)))\n        this.prioByName.set('aiPriorityGetIn'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityGetIn)))\n        this.prioByName.set('aiPriorityCrystal'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityCrystal)))\n        this.prioByName.set('aiPriorityOre'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityOre)))\n        this.prioByName.set('aiPriorityRepair'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityRepair)))\n        this.prioByName.set('aiPriorityClearing'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityClearing)))\n        this.prioByName.set('aiPriorityDestruction'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityDestruction)))\n        this.prioByName.set('aiPriorityConstruction'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityConstruction)))\n        this.prioByName.set('aiPriorityReinforce'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityReinforce)))\n        this.prioByName.set('aiPriorityRecharge'.toLowerCase(), this.addChild(new Button(this, cfg.aiPriorityRecharge)))\n    }\n\n    reset() {\n        GameState.priorityList.reset()\n        this.setList(GameState.priorityList.current)\n    }\n\n    private setList(priorityList: LevelPrioritiesEntryConfig[]) {\n        this.prioByName.forEach((btn) => btn.hidden = true)\n        let index = 0\n        let updated = false\n        priorityList.forEach(cfg => {\n            const prioButton: Button = this.prioByName.get(cfg.key.toLowerCase())\n            if (prioButton) {\n                updated = updated || prioButton.hidden || prioButton.disabled !== !cfg.enabled\n                prioButton.hidden = false\n                prioButton.disabled = !cfg.enabled\n                prioButton.relX = this.prioPositions[index].x\n                prioButton.relY = this.prioPositions[index].y\n                prioButton.updatePosition()\n                const btnIndex = index\n                prioButton.onClick = () => {\n                    GameState.priorityList.pushToTop(btnIndex)\n                    this.setList(GameState.priorityList.current)\n                }\n                index++\n            }\n        })\n        if (updated) this.notifyRedraw()\n    }\n\n}\n\n","export class InfoMessagesEntryConfig {\n\n    message: string = null\n    buttonImageFilename: string = null\n    sfx: string = null\n    timing: string = null\n    flag: string = null\n\n    constructor(cfgValue: any) {\n        [this.message, this.buttonImageFilename, this.sfx, this.timing, this.flag] = cfgValue\n        this.message = this.message.replace(/_/g, ' ')\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\n\nexport class InfoMessagesConfig extends BaseConfig {\n\n    infoGenericDeath: InfoMessagesEntryConfig = null\n    infoGenericMonster: InfoMessagesEntryConfig = null\n    infoCrystalFound: InfoMessagesEntryConfig = null\n    infoUnderAttack: InfoMessagesEntryConfig = null\n    infoLandslide: InfoMessagesEntryConfig = null\n    infoPowerDrain: InfoMessagesEntryConfig = null\n    infoSlugEmerge: InfoMessagesEntryConfig = null\n    infoFoundMinifigure: InfoMessagesEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new InfoMessagesEntryConfig(cfgValue)\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class InformationPanel extends Panel {\n\n    font: BitmapFont = null\n    textImage = null\n\n    constructor(panelCfg: PanelCfg) {\n        super(panelCfg)\n        this.font = ResourceManager.getBitmapFont('Interface/Fonts/Font5_Hi.bmp')\n    }\n\n    setText(text?: string) {\n        this.textImage = text ? this.font.createTextImage(text, this.img.width - 80) : null\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.textImage) context.drawImage(this.textImage, this.x + (this.img.width - this.textImage.width) / 2, this.y + 12)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class PriorityButtonsConfig extends BaseConfig {\n\n    aiPriorityTrain: ButtonCfg = null\n    aiPriorityGetIn: ButtonCfg = null\n    aiPriorityCrystal: ButtonCfg = null\n    aiPriorityOre: ButtonCfg = null\n    aiPriorityRepair: ButtonCfg = null\n    aiPriorityClearing: ButtonCfg = null\n    aiPriorityDestruction: ButtonCfg = null\n    aiPriorityConstruction: ButtonCfg = null\n    aiPriorityReinforce: ButtonCfg = null\n    aiPriorityRecharge: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): ButtonCfg {\n        return {\n            buttonType: cfgValue[0],\n            normalFile: cfgValue[1],\n            highlightFile: cfgValue[1],\n            pressedFile: cfgValue[2],\n            disabledFile: cfgValue[3],\n        }\n    }\n\n}\n","export class PriorityPositionsEntry {\n\n    x: number\n    y: number\n\n    constructor(cfgValue: any) {\n        [this.x, this.y] = cfgValue\n    }\n\n}\n","export class TextInfoMessageEntryConfig {\n\n    text: string\n    imageFilename: string\n    sfxName: string\n\n    textImage\n    infoImage\n\n    constructor(cfgValue: any) {\n        [this.text, this.imageFilename, this.sfxName] = cfgValue\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\n\nexport class TextInfoMessageConfig extends BaseConfig {\n\n    textCrystalFound: TextInfoMessageEntryConfig = null\n    textSpaceToContinue: TextInfoMessageEntryConfig = null\n    textCavernDiscovered: TextInfoMessageEntryConfig = null\n    textOreFound: TextInfoMessageEntryConfig = null\n    textAirSupplyLow: TextInfoMessageEntryConfig = null\n    textAirSupplyRunningOut: TextInfoMessageEntryConfig = null\n    textGameCompleted: TextInfoMessageEntryConfig = null\n    textManTrained: TextInfoMessageEntryConfig = null\n    textUnitUpgraded: TextInfoMessageEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new TextInfoMessageEntryConfig(cfgValue)\n    }\n\n}\n","import { ScaledLayer } from '../../screen/ScreenLayer'\nimport { Panel } from '../gui/base/Panel'\nimport { BaseElement } from '../gui/base/BaseElement'\nimport { POINTER_EVENT } from '../../event/EventManager'\n\nexport class GuiBaseLayer extends ScaledLayer {\n\n    rootElement: BaseElement = new BaseElement()\n    panels: Panel[] = []\n\n    constructor() {\n        super()\n        this.rootElement.notifyRedraw = () => this.redraw()\n        this.onRedraw = (context: CanvasRenderingContext2D) => {\n            context.clearRect(0, 0, context.canvas.width, context.canvas.height)\n            this.rootElement.onRedraw(context)\n        }\n    }\n\n    addPanel<T extends Panel>(panel: T): T {\n        this.rootElement.addChild(panel)\n        this.panels.push(panel)\n        return panel\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n        const hit = this.context && this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n        if (hit) {\n            event.preventDefault()\n            if (eventEnum === POINTER_EVENT.MOVE) {\n                this.rootElement.checkHover(sx, sy)\n            } else if (eventEnum === POINTER_EVENT.DOWN) {\n                this.rootElement.checkClick(sx, sy)\n            } else if (eventEnum === POINTER_EVENT.UP) {\n                this.rootElement.checkRelease(sx, sy)\n            }\n        } else if (eventEnum === POINTER_EVENT.MOVE) {\n            this.rootElement.release()\n        }\n        return hit\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        return !this.context || this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n    }\n\n}\n","import { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../gui/base/Panel'\nimport { RadarPanel } from '../gui/radar/RadarPanel'\nimport { MessagePanel } from '../gui/messagepanel/MessagePanel'\nimport { PanelCrystalSideBar } from '../gui/sidebar/PanelCrystalSideBar'\nimport { MainPanel } from '../gui/main/MainPanel'\nimport { TopPanel } from '../gui/toppanel/TopPanel'\nimport { InfoDockPanel } from '../gui/infodock/InfoDockPanel'\nimport { PanelsCfg } from '../../cfg/PanelsCfg'\nimport { ButtonsCfg } from '../../cfg/ButtonsCfg'\nimport { PriorityListPanel } from '../gui/toppanel/PriorityListPanel'\nimport { InfoMessagesConfig } from '../gui/infodock/InfoMessagesConfig'\nimport { InformationPanel } from '../gui/infodock/InformationPanel'\nimport { PriorityButtonsConfig } from '../gui/toppanel/PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from '../gui/toppanel/PriorityPositionsEntry'\nimport { TextInfoMessageConfig } from '../gui/messagepanel/TextInfoMessageConfig'\nimport { GuiBaseLayer } from './GuiBaseLayer'\n\nexport class GuiMainLayer extends GuiBaseLayer {\n\n    panelRadar: RadarPanel\n    panelMessages: MessagePanel\n    panelMessagesSide: Panel\n    panelCrystalSideBar: PanelCrystalSideBar\n    panelMain: MainPanel\n    panelTopPanel: TopPanel\n    panelInformation: InformationPanel\n    panelPriorityList: PriorityListPanel\n    panelCameraControl: Panel\n    panelInfoDock: InfoDockPanel\n    panelEncyclopedia: Panel\n    onOptionsShow: () => any = () => console.log('show options triggered')\n\n    constructor() {\n        super()\n        const panelsCfg = new PanelsCfg(ResourceManager.cfg('Panels640x480'))\n        const buttonsCfg = new ButtonsCfg(ResourceManager.cfg('Buttons640x480'))\n        // created in reverse order compared to cfg, earlier in cfg means higher z-value // TODO add some z layering at least to panels\n        this.panelEncyclopedia = this.addPanel(new Panel(panelsCfg.panelEncyclopedia))\n        this.panelInformation = this.addPanel(new InformationPanel(panelsCfg.panelInformation))\n        this.panelInfoDock = this.addPanel(new InfoDockPanel(panelsCfg.panelInfoDock, buttonsCfg.panelInfoDock, new InfoMessagesConfig(ResourceManager.cfg('InfoMessages')), this.panelInformation))\n        this.panelCameraControl = this.addPanel(new Panel(panelsCfg.panelCameraControl))\n        const priorityButtonsConfig = new PriorityButtonsConfig(ResourceManager.cfg('PriorityImages'))\n        const priorityPositionsConfig = Object.values(ResourceManager.cfg('PrioritiesImagePositions')).map(cfgValue => new PriorityPositionsEntry(cfgValue))\n        this.panelPriorityList = this.addPanel(new PriorityListPanel(panelsCfg.panelPriorityList, buttonsCfg.panelPriorityList, priorityPositionsConfig, priorityButtonsConfig))\n        this.panelTopPanel = this.addPanel(new TopPanel(panelsCfg.panelTopPanel, buttonsCfg.panelTopPanel))\n        this.panelMain = this.addPanel(new MainPanel())\n        this.panelCrystalSideBar = this.addPanel(new PanelCrystalSideBar(panelsCfg.panelCrystalSideBar, buttonsCfg.panelCrystalSideBar))\n        this.panelMessagesSide = this.addPanel(new Panel(panelsCfg.panelMessagesSide))\n        this.panelMessages = this.addPanel(new MessagePanel(panelsCfg.panelMessages, new TextInfoMessageConfig(ResourceManager.cfg('TextMessagesWithImages'))))\n        this.panelRadar = this.addPanel(new RadarPanel(panelsCfg.panelRadar, panelsCfg.panelRadarFill, panelsCfg.panelRadarOverlay, buttonsCfg.panelRadar))\n        // link panels\n        this.panelTopPanel.btnOptions.onClick = () => this.onOptionsShow()\n        this.panelTopPanel.btnPriorities.onClick = () => {\n            if (this.panelTopPanel.btnPriorities.toggleState) {\n                this.panelMain.setMovedIn(true, () => this.panelPriorityList.setMovedIn(false))\n            } else {\n                this.panelPriorityList.setMovedIn(true, () => this.panelMain.setMovedIn(false))\n            }\n        }\n    }\n\n    reset() {\n        // FIXME reset GUI including all panels\n        this.panelPriorityList.reset()\n    }\n\n}\n","import { EventBus } from '../event/EventBus'\nimport { JobCreateEvent, JobDeleteEvent } from '../event/WorldEvents'\nimport { Job, JobState } from './model/job/Job'\nimport { GameState } from './model/GameState'\nimport { Vector3 } from 'three'\nimport { Raider } from '../scene/model/Raider'\nimport { WorldManager } from '../scene/WorldManager'\nimport { JOB_SCHEDULE_INTERVAL } from '../main'\n\nexport class Supervisor {\n\n    worldMgr: WorldManager\n    jobs: Job[] = []\n    interval = null\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        EventBus.registerEventListener(JobCreateEvent.eventKey, (event: JobCreateEvent) => {\n            this.jobs.push(event.job)\n        })\n        EventBus.registerEventListener(JobDeleteEvent.eventKey, (event: JobDeleteEvent) => {\n            event.job.cancel()\n        })\n    }\n\n    start() {\n        stop()\n        this.interval = setInterval(this.scheduleJobs.bind(this), JOB_SCHEDULE_INTERVAL)\n    }\n\n    stop() {\n        if (this.interval) clearInterval(this.interval)\n        this.interval = null\n        GameState.raiders.forEach((r) => {\n            if (r.workInterval) clearInterval(r.workInterval)\n            r.workInterval = null\n        })\n        GameState.raidersUndiscovered.forEach((r) => {\n            if (r.workInterval) clearInterval(r.workInterval)\n            r.workInterval = null\n        })\n        GameState.vehicles.forEach((v) => {\n            if (v.workInterval) clearInterval(v.workInterval)\n            v.workInterval = null\n        })\n        GameState.vehiclesUndiscovered.forEach((v) => {\n            if (v.workInterval) clearInterval(v.workInterval)\n            v.workInterval = null\n        })\n    }\n\n    scheduleJobs() {\n        this.jobs = this.jobs.filter((j) => j.jobstate === JobState.OPEN)\n        this.jobs.forEach((job) => { // TODO sort jobs by priority list\n            if (job.fulfiller.length > 0) return\n            // find closest, qualified, unemployed raider\n            let closestRaider: Raider = null\n            let minDistance = null\n            GameState.raiders.forEach((raider) => {\n                if (!raider.job && job.isQualified(raider)) {\n                    const dist = new Vector3().copy(job.getPosition()).sub(raider.getPosition()).lengthSq()\n                    if (minDistance === null || dist < minDistance) {\n                        closestRaider = raider\n                        minDistance = dist\n                    }\n                }\n            })\n            if (closestRaider) closestRaider.setJob(job)\n        })\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { BriefingPanelCfg } from '../../../cfg/BriefingPanelCfg'\nimport { MessagePanel } from '../messagepanel/MessagePanel'\nimport { ObjectiveImageCfg } from '../../../cfg/ObjectiveImageCfg'\n\nexport class BriefingPanel extends Panel {\n\n    messagePanel: MessagePanel\n    cfg: BriefingPanelCfg = null\n    imgTitle: HTMLCanvasElement = null\n    titleRelX: number = 0\n    titleRelY: number = 0\n    btnNext: Button = null\n    btnBack: Button = null\n    imgBack: HTMLCanvasElement = null\n    imgParagraph: HTMLCanvasElement[] = []\n    paragraph: number = 0\n\n    constructor(cfg: BriefingPanelCfg) {\n        super()\n        this.cfg = cfg\n        this.imgTitle = cfg.titleFont.createTextImage(cfg.title)\n        this.titleRelX = cfg.titleWindow.x + (cfg.titleWindow.w - this.imgTitle.width) / 2\n        this.titleRelY = cfg.titleWindow.y\n        this.btnNext = this.addChild(new Button(this, cfg.nextButtonCfg))\n        this.btnNext.onClick = () => this.nextParagraph()\n        this.btnBack = this.addChild(new Button(this, cfg.backButtonCfg))\n        this.btnBack.onClick = () => this.prevParagraph()\n        this.hidden = true\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.imgBack = ResourceManager.getImageOrNull(objectiveBackImgCfg.filename)\n        this.relX = objectiveBackImgCfg.x\n        this.relY = objectiveBackImgCfg.y\n        this.width = this.imgBack.width\n        this.height = this.imgBack.height\n        this.updatePosition()\n        this.imgParagraph = objectiveText.split('\\\\a').map(txt => this.cfg.textFont.createTextImage(txt, this.cfg.textWindow.w, false))\n    }\n\n    setParagraph(paragraph: number) {\n        if (paragraph < 0) return\n        if (paragraph > this.imgParagraph.length - 1) {\n            this.hide()\n            this.notifyRedraw()\n            return\n        }\n        this.paragraph = paragraph\n        this.btnNext.hidden = this.paragraph >= this.imgParagraph.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.notifyRedraw()\n    }\n\n    nextParagraph() {\n        this.setParagraph(this.paragraph + 1)\n    }\n\n    prevParagraph() {\n        this.setParagraph(this.paragraph - 1)\n    }\n\n    show() {\n        super.show()\n        this.setParagraph(0)\n        this.btnNext.hidden = this.paragraph >= this.imgParagraph.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.messagePanel?.setMessage(this.messagePanel.msgSpaceToContinue, 0)\n    }\n\n    hide() {\n        super.hide()\n        this.messagePanel?.unsetMessage(this.messagePanel.msgSpaceToContinue)\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.imgBack) context.drawImage(this.imgBack, this.x, this.y)\n        if (this.imgTitle) context.drawImage(this.imgTitle, this.x + this.titleRelX, this.y + this.titleRelY)\n        if (this.imgParagraph && this.imgParagraph[this.paragraph]) context.drawImage(this.imgParagraph[this.paragraph], this.x + this.cfg.textWindow.x, this.y + this.cfg.textWindow.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuCycleItemCfg } from '../../../cfg/MenuCycleItemCfg'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuCycleItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLabelOnNormal: HTMLCanvasElement // TODO only toggle state with clicks on label\n    imgLabelOffNormal: HTMLCanvasElement // TODO use button?\n    imgLabelOnHover: HTMLCanvasElement\n    imgLabelOffHover: HTMLCanvasElement\n\n    labelX: number = 0\n    state: boolean = false\n\n    constructor(parent: MenuLayer, itemCfg: MenuCycleItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.labelX = itemCfg.width\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.imgLabelOffNormal = parent.loFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOffHover = parent.hiFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOnNormal = parent.loFont.createTextImage(itemCfg.labelOn)\n        this.imgLabelOnHover = parent.hiFont.createTextImage(itemCfg.labelOn)\n        this.width = itemCfg.width + Math.max(this.imgLabelOnHover.width, this.imgLabelOffHover.width)\n        this.height = this.imgTextNormal.height\n    }\n\n    onClick() {\n        this.state = !this.state\n        console.log('TODO: cycle item clicked; state: ' + this.state)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        let imgLabel = this.state ? this.imgLabelOnNormal : this.imgLabelOffNormal\n        if (this.hover) {\n            img = this.imgTextHover\n            imgLabel = this.state ? this.imgLabelOnHover : this.imgLabelOffHover\n        }\n        context.drawImage(img, this.x, this.y)\n        context.drawImage(imgLabel, this.x + this.labelX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuSliderItemCfg } from '../../../cfg/MenuSliderItemCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { BaseButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuSliderItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLeft: HTMLCanvasElement\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgRight: HTMLCanvasElement\n    sliderX: number = 0\n    min: number = 0\n    max: number = 1\n    value: number = 0\n    onValueChanged: (value: number) => any = (value) => console.log('value changed to: ' + value)\n\n    constructor(parent: MenuLayer, itemCfg: MenuSliderItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.sliderX = itemCfg.width\n        this.imgLeft = ResourceManager.getImage(itemCfg.imgLeft)\n        this.imgNormal = ResourceManager.getImage(itemCfg.imgOff)\n        this.imgHover = ResourceManager.getImage(itemCfg.imgOn)\n        this.imgRight = ResourceManager.getImage(itemCfg.imgRight)\n        const leftBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        leftBtn.imgNormal = ResourceManager.getImage(itemCfg.btnLeftNormal)\n        leftBtn.imgHover = ResourceManager.getImage(itemCfg.btnLeftHover)\n        leftBtn.relX = this.sliderX - this.imgLeft.width - leftBtn.imgHover.width\n        leftBtn.width = leftBtn.imgHover.width\n        leftBtn.height = leftBtn.imgHover.height\n        leftBtn.updatePosition()\n        leftBtn.onClick = () => {\n            if (this.value > this.min) {\n                this.value--\n                this.onValueChanged(this.value)\n            }\n        }\n        const rightBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        rightBtn.imgNormal = ResourceManager.getImage(itemCfg.btnRightNormal)\n        rightBtn.imgHover = ResourceManager.getImage(itemCfg.btnRightHover)\n        rightBtn.relX = this.sliderX + this.imgNormal.width + this.imgRight.width * 2\n        rightBtn.width = rightBtn.imgHover.width\n        rightBtn.height = rightBtn.imgHover.height\n        rightBtn.updatePosition()\n        rightBtn.onClick = () => {\n            if (this.value < this.max) {\n                this.value++\n                this.onValueChanged(this.value)\n            }\n        }\n        this.width = itemCfg.width + leftBtn.imgHover.width + this.imgLeft.width + this.imgNormal.width + this.imgRight.width * 2 + rightBtn.imgHover.width\n        this.min = itemCfg.min\n        this.max = itemCfg.max || 1\n        this.value = this.min // TODO set default value\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.height = this.imgTextNormal.height\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        if (this.hover) {\n            img = this.imgTextHover\n        }\n        context.drawImage(img, this.x, this.y)\n        let posX = this.x + this.sliderX\n        context.drawImage(this.imgLeft, posX, this.y)\n        context.drawImage(this.imgNormal, posX, this.y)\n        const dw = Math.round(this.value / this.max * this.imgHover.width)\n        context.drawImage(this.imgHover, 0, 0, dw, this.imgHover.height, posX, this.y, dw, this.imgHover.height)\n        posX += this.imgNormal.width\n        context.drawImage(this.imgRight, posX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuLayer } from './MenuLayer'\nimport { MenuLabelItemCfg } from '../../../cfg/MenuLabelItemCfg'\n\nexport class MenuLabelItem extends BaseElement {\n\n    target: string\n    loImg: HTMLCanvasElement\n    hiImg: HTMLCanvasElement\n\n    constructor(parent: MenuLayer, itemCfg: MenuLabelItemCfg, autoCenter: boolean) {\n        super(parent)\n        this.target = itemCfg.target\n        this.loImg = parent.loFont.createTextImage(itemCfg.label)\n        this.hiImg = parent.hiFont.createTextImage(itemCfg.label)\n        this.width = this.loImg.width\n        this.height = this.loImg.height\n        this.relX = autoCenter ? -parent.relX + (parent.menuImage.width - this.width) / 2 : itemCfg.x\n        this.relY = itemCfg.y\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.hover) {\n            context.drawImage(this.hiImg, this.x, this.y)\n        } else {\n            context.drawImage(this.loImg, this.x, this.y)\n        }\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuEntryCfg } from '../../../cfg/MenuEntryCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuCycleItem } from './MenuCycleItem'\nimport { MenuSliderItem } from './MenuSliderItem'\nimport { MenuLabelItem } from './MenuLabelItem'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class MenuLayer extends BaseElement {\n\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    itemsTrigger: MenuLabelItem[] = []\n    itemsNext: MenuLabelItem[] = []\n\n    constructor(parent: BaseElement, menuCfg: MenuEntryCfg) {\n        super(parent)\n        this.relX = menuCfg.position[0]\n        this.relY = menuCfg.position[1]\n        this.menuImage = ResourceManager.getImageOrNull(menuCfg.menuImage[0]) // menuImage has 4 parameter here\n        this.titleImage = ResourceManager.getBitmapFont(menuCfg.menuFont).createTextImage(menuCfg.fullName)\n        this.loFont = ResourceManager.getBitmapFont(menuCfg.loFont)\n        this.hiFont = ResourceManager.getBitmapFont(menuCfg.hiFont)\n        menuCfg.itemsLabel.forEach((itemCfg) => {\n            const item = this.addChild(new MenuLabelItem(this, itemCfg, menuCfg.autoCenter))\n            if (itemCfg.actionName.toLowerCase() === 'trigger') {\n                this.itemsTrigger.push(item)\n            } else {\n                this.itemsNext.push(item)\n            }\n        })\n        menuCfg.itemsCycle.forEach((itemCfg) => this.addChild(new MenuCycleItem(this, itemCfg)))\n        menuCfg.itemsSlider.forEach((itemCfg) => this.addChild(new MenuSliderItem(this, itemCfg)))\n        this.hidden = true\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.drawImage(this.menuImage, (this.parent.width - this.menuImage.width) / 2, (this.parent.height - this.menuImage.height) / 2)\n        context.drawImage(this.titleImage, (this.parent.width - this.titleImage.width) / 2, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { MenuLayer } from './MenuLayer'\nimport { MenuCfg } from '../../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\n\nexport class MenuBasePanel extends Panel {\n\n    layersByKey: Map<string, MenuLayer> = new Map()\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super()\n        this.width = layer.fixedWidth\n        this.height = layer.fixedHeight\n        this.hidden = true\n        cfg.menus.forEach((menuCfg, index) => this.layersByKey.set('menu' + (index + 1), this.addChild(new MenuLayer(this, menuCfg))))\n        const pausePanel = this\n        this.layersByKey.forEach((layer) => layer.itemsNext.forEach((item) => item.onClick = () => pausePanel.selectLayer(item.target)))\n    }\n\n    show() {\n        this.hidden = false\n        this.selectLayer('menu1')\n    }\n\n    hide() {\n        super.hide()\n        this.notifyRedraw()\n    }\n\n    selectLayer(key: string) {\n        const layer = this.layersByKey.get(key.toLowerCase())\n        this.layersByKey.forEach(l => l !== layer && l.hide())\n        layer.show()\n        this.notifyRedraw()\n    }\n\n}\n","import { MenuCfg } from '../../../cfg/MenuCfg'\nimport { MenuBasePanel } from './MenuBasePanel'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\n\nexport class OptionsPanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const panel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => panel.onRepeatBriefing()\n        this.layersByKey.get('menu1').itemsTrigger[1].onClick = () => panel.hide()\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { MenuCfg } from '../../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\nimport { MenuBasePanel } from './MenuBasePanel'\n\nexport class PausePanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n    onAbortGame: () => any = () => console.log('abort mission')\n    onRestartGame: () => any = () => console.log('restart mission')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const pausePanel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => pausePanel.hide() // Pause\n        this.layersByKey.get('menu2').itemsTrigger[0].onClick = () => pausePanel.onRepeatBriefing() // Options\n        this.layersByKey.get('menu3').itemsTrigger[0].onClick = () => pausePanel.onAbortGame() // Quit\n        this.layersByKey.get('menu4').itemsTrigger[0].onClick = () => pausePanel.onRestartGame() // Restart\n    }\n\n}\n","export class Rect {\n\n    x: number = 0\n    y: number = 0\n    w: number = 0\n    h: number = 0\n\n    constructor(arr: number[]) {\n        [this.x, this.y, this.w, this.h] = arr\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { Rect } from '../core/Rect'\n\nexport class DialogCfg extends BaseConfig {\n\n    image: string = null\n    titleWindow: Rect = null\n    textWindow: Rect = null\n    okWindow: Rect = null\n    cancelWindow: Rect = null\n    contrastOverlay: string = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        if (lCfgKeyName.endsWith('window')) {\n            return new Rect(cfgValue)\n        }\n        return super.parseValue(lCfgKeyName, cfgValue)\n    }\n\n}\n","import { PanelCfg } from './PanelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { DialogCfg } from './DialogCfg'\nimport { Rect } from '../core/Rect'\nimport { ButtonCfg } from './ButtonsCfg'\n\nexport class BriefingPanelCfg extends PanelCfg {\n\n    // TODO find config values for this class\n\n    titleFont: BitmapFont\n    title: string\n    titleWindow: Rect\n    textFont: BitmapFont\n    textWindow: Rect\n    nextButtonCfg: ButtonCfg\n    backButtonCfg: ButtonCfg\n\n    constructor() {\n        super([])\n        this.titleFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont2.bmp')\n        this.title = ResourceManager.cfg('Main', 'MissionBriefingText')\n        const dialogCfg = new DialogCfg(ResourceManager.cfg('Dialog'))\n        this.titleWindow = dialogCfg.titleWindow\n        this.textFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont.bmp')\n        this.textWindow = dialogCfg.textWindow\n        this.nextButtonCfg = {\n            buttonType: 'Next briefing paragraph',\n            relX: 394,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'NextButton640x480'),\n        }\n        this.backButtonCfg = {\n            buttonType: 'Previous briefing paragraph',\n            relX: 54,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'BackArrow'),\n        }\n    }\n\n}\n","import { BriefingPanel } from '../gui/briefing/BriefingPanel'\nimport { OptionsPanel } from '../gui/overlay/OptionsPanel'\nimport { PausePanel } from '../gui/overlay/PausePanel'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { MenuCfg } from '../../cfg/MenuCfg'\nimport { BriefingPanelCfg } from '../../cfg/BriefingPanelCfg'\nimport { KEY_EVENT, POINTER_EVENT } from '../../event/EventManager'\nimport { Panel } from '../gui/base/Panel'\nimport { GuiBaseLayer } from './GuiBaseLayer'\nimport { ObjectiveImageCfg } from '../../cfg/ObjectiveImageCfg'\n\nexport class OverlayLayer extends GuiBaseLayer {\n\n    panelBriefing: BriefingPanel\n    panelOptions: OptionsPanel\n    panelPause: PausePanel\n\n    constructor() {\n        super()\n        this.panelPause = this.addPanel(new PausePanel(this, ResourceManager.getResource('PausedMenu') as MenuCfg))\n        this.panelOptions = this.addPanel(new OptionsPanel(this, ResourceManager.getResource('OptionsMenu') as MenuCfg))\n        this.panelBriefing = this.addPanel(new BriefingPanel(new BriefingPanelCfg()))\n        // link items\n        this.panelPause.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n        this.panelPause.onAbortGame = () => {\n            console.log('TODO abort game here') // TODO abort game\n        }\n        this.panelPause.onRestartGame = () => {\n            console.log('TODO restart game here') // TODO restart game\n        }\n        this.panelOptions.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n    }\n\n    setActivePanel(panel: Panel) {\n        this.panels.forEach(p => p !== panel && p.hide())\n        panel.show()\n        this.redraw()\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.panelBriefing.setup(objectiveText, objectiveBackImgCfg)\n        this.setActivePanel(this.panelBriefing)\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (this.panels.every(p => p.hidden)) return false\n        return super.handlePointerEvent(eventEnum, event) || this.isActive() // catch em all\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        let result = false\n        const lEventKey = event.key.toLowerCase()\n        if (eventEnum === KEY_EVENT.UP) {\n            if (lEventKey === 'escape') {\n                if (this.panelBriefing.hidden && this.panelOptions.hidden) {\n                    if (this.panelPause.hidden) {\n                        // TODO actually pause the game\n                        this.setActivePanel(this.panelPause)\n                    } else {\n                        // TODO actually unpause the game\n                        this.panelPause.hide()\n                    }\n                    result = true\n                }\n            } else if (lEventKey === ' ') { // space\n                if (!this.panelBriefing.hidden) {\n                    this.panelBriefing.nextParagraph()\n                    result = true\n                }\n            }\n        }\n        return result || this.isActive() // catch em all\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { WorldManager } from '../scene/WorldManager'\nimport { SelectionLayer } from '../game/layer/SelectionLayer'\nimport { GameLayer } from '../game/layer/GameLayer'\nimport { GuiMainLayer } from '../game/layer/GuiMainLayer'\nimport { Supervisor } from '../game/Supervisor'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { iGet } from '../core/Util'\nimport { LevelObjectiveTextEntry } from '../resource/wadworker/ObjectiveTextParser'\nimport { OverlayLayer } from '../game/layer/OverlayLayer'\nimport { GameState } from '../game/model/GameState'\n\nexport class GameScreen extends BaseScreen {\n\n    onLevelEnd: () => void\n    gameLayer: GameLayer\n    selectionLayer: SelectionLayer\n    guiLayer: GuiMainLayer\n    overlayLayer: OverlayLayer\n    worldManager: WorldManager\n    jobSupervisor: Supervisor\n    levelName: string\n    levelConf: LevelEntryCfg\n\n    constructor() {\n        super()\n        this.gameLayer = this.addLayer(new GameLayer(), 0)\n        this.selectionLayer = this.addLayer(new SelectionLayer(), 10)\n        this.guiLayer = this.addLayer(new GuiMainLayer(), 20)\n        this.overlayLayer = this.addLayer(new OverlayLayer(), 30)\n        this.worldManager = new WorldManager(this.gameLayer.canvas)\n        this.gameLayer.setWorldManager(this.worldManager)\n        this.selectionLayer.setWorldManager(this.worldManager)\n        this.jobSupervisor = new Supervisor(this.worldManager)\n        // link layer\n        this.guiLayer.onOptionsShow = () => this.overlayLayer.panelOptions.show()\n        this.overlayLayer.panelBriefing.messagePanel = this.guiLayer.panelMessages\n        this.overlayLayer.panelPause.onAbortGame = () => this.onLevelEnd && this.onLevelEnd()\n        this.overlayLayer.panelPause.onRestartGame = () => this.restartLevel()\n    }\n\n    startLevel(levelName) {\n        this.levelName = levelName\n        this.levelConf = ResourceManager.getResource('Levels').levelsByName[this.levelName]\n        if (!this.levelConf) throw 'Could not find level configuration for \"' + this.levelName + '\"'\n        this.setupAndStartLevel()\n    }\n\n    restartLevel() {\n        this.hide()\n        GameState.reset()\n        this.setupAndStartLevel()\n    }\n\n    private setupAndStartLevel() {\n        console.log('Starting level ' + this.levelName + ' - ' + this.levelConf.fullName)\n        this.worldManager.setup(this.levelConf, this)\n        const objectiveText: LevelObjectiveTextEntry = iGet(ResourceManager.getResource(this.levelConf.objectiveText), this.levelName)\n        this.guiLayer.reset()\n        this.overlayLayer.setup(objectiveText.objective, this.levelConf.objectiveImage640x480)\n        this.show()\n    }\n\n    show() {\n        super.show()\n        this.worldManager.start()\n        this.jobSupervisor.start()\n    }\n\n    hide() {\n        this.worldManager.stop()\n        this.jobSupervisor.stop()\n        super.hide()\n    }\n\n    resize(width: number, height: number) {\n        super.resize(width, height)\n        if (this.worldManager) this.worldManager.resize(width, height)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class RewardScreenButton extends MainMenuBaseItem {\n\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgPressed: HTMLCanvasElement\n    imgDisabled: HTMLCanvasElement\n    disabled: boolean = false\n    visible: boolean = true\n\n    constructor(conf: any) {\n        super()\n        let imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath;\n        [imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath, this.x, this.y] = conf\n        this.imgNormal = ResourceManager.getImage(imgNormalFilepath)\n        this.imgHover = ResourceManager.getImage(imgHoverFilepath)\n        this.imgPressed = ResourceManager.getImage(imgPressedFilepath)\n        this.imgDisabled = ResourceManager.getImage(imgDisabledFilepath)\n        this.width = this.imgNormal.width\n        this.height = this.imgNormal.height\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        if (!this.visible) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled\n        } else if (this.pressed) {\n            img = this.imgPressed\n        } else if (this.hover) {\n            img = this.imgHover\n        }\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from './ScreenLayer'\nimport { RewardCfg } from '../cfg/RewardCfg'\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { RewardScreenButton } from '../menu/RewardScreenButton'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventManager'\n\nexport class RewardScreen extends BaseScreen {\n\n    onAdvance: () => void\n    cfg: RewardCfg = null\n    titleFont: BitmapFont\n    resultsLayer: ScaledLayer\n    descriptionTextLayer: ScaledLayer\n    btnLayer: ScaledLayer\n    resultIndex: number = 0\n    resultLastIndex: number = 0\n    images: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    boxes: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    fonts = {}\n    texts: HTMLCanvasElement[] = []\n    uncoverTimeout = null\n    btnSave: RewardScreenButton\n    btnAdvance: RewardScreenButton\n\n    constructor() {\n        super()\n        this.cfg = ResourceManager.getResource('Reward')\n        this.titleFont = ResourceManager.getBitmapFont(this.cfg.titleFont)\n        const backgroundImg = ResourceManager.getImage(this.cfg.wallpaper)\n        const backgroundLayer = this.addLayer(new ScaledLayer())\n        backgroundLayer.onRedraw = (context) => context.drawImage(backgroundImg, 0, 0)\n        this.cfg.images.forEach((img) => {\n            this.images.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        this.cfg.boxImages.forEach((img) => {\n            this.boxes.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        Object.keys(this.cfg.fonts).forEach((fontKey, index) => {\n            const font = ResourceManager.getBitmapFont(this.cfg.fonts[fontKey])\n            this.fonts[fontKey.toLowerCase()] = font\n            const txt = this.cfg.texts[index]\n            const labelFont = index < 9 ? font : ResourceManager.getBitmapFont(this.cfg.backFont)\n            this.texts.push(labelFont.createTextImage(txt.text))\n        })\n        this.resultsLayer = this.addLayer(new ScaledLayer())\n        this.resultsLayer.handlePointerEvent = ((eventType) => {\n            if (eventType === POINTER_EVENT.UP) {\n                if (this.uncoverTimeout) clearTimeout(this.uncoverTimeout)\n                this.uncoverTimeout = null\n                this.resultIndex = this.resultLastIndex\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n                this.redraw()\n                return true\n            }\n            return false\n        })\n        this.descriptionTextLayer = this.addLayer(new ScaledLayer(), 20)\n        this.btnLayer = this.addLayer(new ScaledLayer(), 50)\n        this.btnSave = new RewardScreenButton(this.cfg.saveButton)\n        this.btnSave.disabled = true\n        this.btnAdvance = new RewardScreenButton(this.cfg.advanceButton)\n        this.btnLayer.handlePointerEvent = ((eventType, event) => {\n            if (eventType === POINTER_EVENT.MOVE) {\n                const [sx, sy] = this.btnLayer.toScaledCoords(event.clientX, event.clientY)\n                this.btnSave.checkHover(sx, sy)\n                this.btnAdvance.checkHover(sx, sy)\n            } else if (eventType === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    this.btnSave.checkSetPressed()\n                    this.btnAdvance.checkSetPressed()\n                }\n            } else if (eventType === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    if (this.btnSave.pressed) {\n                        this.btnSave.setReleased()\n                        // TODO switch to save screen\n                    } else if (this.btnAdvance.pressed) {\n                        this.btnAdvance.setReleased()\n                        this.hide()\n                        this.onAdvance()\n                    }\n                }\n            }\n            if (this.btnSave.needsRedraw || this.btnAdvance.needsRedraw) this.redraw()\n            return false\n        })\n        this.btnLayer.onRedraw = (context) => {\n            this.btnSave.draw(context)\n            this.btnAdvance.draw(context)\n        }\n    }\n\n    show() {\n        this.resultIndex = 0\n        this.btnSave.visible = false\n        this.btnAdvance.visible = false\n        this.uncoverResult()\n        const levelFullNameImg = this.titleFont.createTextImage(GameState.levelFullName)\n        let resultText = this.cfg.quitText\n        this.resultLastIndex = this.images.length - 2\n        if (GameState.resultState === GameResultState.COMPLETE) {\n            resultText = this.cfg.completeText\n            this.resultLastIndex = this.images.length - 1\n        } else if (GameState.resultState === GameResultState.FAILED) {\n            resultText = this.cfg.failedText\n        }\n        const resultValues = []\n        resultValues.push(this.fonts['crystals'].createTextImage(this.percentString(GameState.numCrystal, GameState.neededCrystals)))\n        resultValues.push(this.fonts['ore'].createTextImage(this.percentString(GameState.numOre, GameState.totalOres)))\n        resultValues.push(this.fonts['diggable'].createTextImage(this.percentString(GameState.remainingDiggables, GameState.totalDiggables, true)))\n        resultValues.push(this.fonts['constructions'].createTextImage(GameState.buildings.length.toString()))\n        resultValues.push(this.fonts['caverns'].createTextImage(this.percentString(GameState.discoveredCaverns, GameState.totalCaverns)))\n        resultValues.push(this.fonts['figures'].createTextImage(this.percentString(GameState.raiders.length, GameState.getMaxRaiders())))\n        resultValues.push(this.fonts['rockmonsters'].createTextImage(this.percentString(0))) // TODO show defence report\n        resultValues.push(this.fonts['oxygen'].createTextImage(this.percentString(GameState.airlevel)))\n        resultValues.push(this.fonts['timer'].createTextImage(this.timeString(GameState.gameTimeSeconds)))\n        resultValues.push(this.fonts['score'].createTextImage(this.percentString(GameState.score)))\n        const gameResultTextImg = this.titleFont.createTextImage(resultText)\n        this.resultsLayer.onRedraw = (context) => {\n            context.clearRect(0, 0, this.resultsLayer.fixedWidth, this.resultsLayer.fixedHeight)\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const img = this.images[c]\n                if (img) context.drawImage(img.img, img.x, img.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const box = this.boxes[c]\n                if (box) context.drawImage(box.img, box.x, box.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const txt = this.cfg.texts[c]\n                const text = resultValues[c]\n                if (text) context.drawImage(text, txt.x - text.width / 2, txt.y)\n            }\n            context.drawImage(levelFullNameImg, this.resultsLayer.fixedWidth / 2 - levelFullNameImg.width / 2, this.cfg.vertSpacing - levelFullNameImg.height / 2)\n            context.drawImage(gameResultTextImg, this.resultsLayer.fixedWidth / 2 - gameResultTextImg.width / 2, this.cfg.vertSpacing + levelFullNameImg.height / 2)\n        }\n        this.descriptionTextLayer.onRedraw = (context) => {\n            const descriptionTextImg = this.texts[this.resultIndex]\n            context.clearRect(0, this.cfg.textPos[1], this.descriptionTextLayer.fixedWidth, this.descriptionTextLayer.fixedHeight - this.cfg.textPos[1])\n            const tx = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[0] : 305\n            const ty = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[1] : 195\n            context.drawImage(descriptionTextImg, tx - descriptionTextImg.width / 2, ty)\n        }\n        super.show()\n    }\n\n    percentString(actual, max = 1, lessIsMore: boolean = false) {\n        if (max === 0) max = 1\n        let value = Math.round(Math.max(Math.min(actual / max, 1), 0) * 100)\n        if (lessIsMore) value = 100 - value\n        return value.toString() + '%'\n    }\n\n    padLeft(value: string, padding = '0', length = 2) {\n        while (value.length < length) value = padding + value\n        return value\n    }\n\n    timeString(seconds: number) {\n        const ss = this.padLeft((seconds % 60).toString())\n        const minutes = Math.floor(seconds / 60)\n        const mm = this.padLeft(((minutes % 60).toString()))\n        const hh = this.padLeft((Math.floor(minutes / 60).toString()))\n        return hh + ':' + mm + ':' + ss\n    }\n\n    uncoverResult() {\n        this.uncoverTimeout = setTimeout(() => {\n            this.uncoverTimeout = null\n            this.resultIndex++\n            if (this.resultIndex < this.resultLastIndex) {\n                this.uncoverResult()\n            } else {\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n            }\n            this.redraw()\n        }, this.cfg.timer * 1000)\n    }\n\n}\n","import { ResourceManager } from './resource/ResourceManager'\nimport { LoadingScreen } from './screen/LoadingScreen'\nimport { MainMenuScreen } from './screen/MainMenuScreen'\nimport { GameScreen } from './screen/GameScreen'\nimport { RewardScreen } from './screen/RewardScreen'\nimport { GameState } from './game/model/GameState'\nimport { WadFileSelectionModal } from '../site/modal/WadFileSelectionModal'\n\n// define constants\n\nexport const JOB_SCHEDULE_INTERVAL = 1000 // milliseconds\nexport const JOB_ACTION_RANGE = 5\nexport const CHECK_SPANW_RAIDER_TIMER = 1000 // milliseconds\nexport const RAIDER_SPEED = 2.0\nexport const MAX_RAIDER_BASE = 12\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10\n\nexport const PANEL_ANIMATION_MULTIPLIER = 3\nexport const HEIGHT_MULTIPLER = 0.1\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640\nexport const SPRITE_RESOLUTION_HEIGHT = 480\nexport const TILESIZE = 40\nexport const NATIVE_FRAMERATE = 30\n\n// setup and link all components\n\nconst loadingScreen = new LoadingScreen()\nconst wadfileSelectModal = new WadFileSelectionModal('game-container')\n\nwadfileSelectModal.onStart = (wad0Url, wad1Url) => {\n    ResourceManager.startLoadingFromUrl(wad0Url, wad1Url)\n}\nResourceManager.onMessage = (msg: string) => {\n    loadingScreen.setLoadingMessage(msg)\n}\nResourceManager.onCacheMissed = () => {\n    wadfileSelectModal.show()\n}\nResourceManager.onInitialLoad = (totalResources: number) => {\n    wadfileSelectModal.hide()\n    loadingScreen.enableGraphicMode(totalResources)\n}\nResourceManager.onAssetLoaded = (assetIndex: number) => {\n    loadingScreen.setLoadingState(assetIndex)\n}\nResourceManager.onLoadDone = () => {\n    // complete setup\n    const mainMenuScreen = new MainMenuScreen()\n    const gameScreen = new GameScreen()\n    const rewardScreen = new RewardScreen()\n\n    mainMenuScreen.onLevelSelected = (levelName) => {\n        try {\n            gameScreen.startLevel(levelName)\n        } catch (e) {\n            console.error('Could not load level: ' + levelName, e)\n            gameScreen.hide()\n            mainMenuScreen.showLevelSelection()\n        }\n    }\n    gameScreen.onLevelEnd = () => {\n        gameScreen.hide()\n        rewardScreen.show()\n    }\n    rewardScreen.onAdvance = () => {\n        GameState.reset()\n        mainMenuScreen.showLevelSelection()\n    }\n\n    // setup complete\n    loadingScreen.hide()\n    mainMenuScreen.showMainMenu()\n    // mainMenuScreen.showLevelSelection()\n    // mainMenuScreen.selectLevel('') // UI Testmode\n    // mainMenuScreen.selectLevel('Level02')\n    // mainMenuScreen.selectLevel('Level06')\n    // mainMenuScreen.selectLevel('Level09')\n    // mainMenuScreen.selectLevel('Level25')\n    // rewardScreen.show();\n}\n\n// start the game engine with loading resources\n\nloadingScreen.show()\nResourceManager.startLoadingFromCache()\n"],"sourceRoot":""}