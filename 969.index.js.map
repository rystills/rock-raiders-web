{"version":3,"sources":["webpack://rock-raiders-web/./src/cfg/BaseButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/BaseConfig.ts","webpack://rock-raiders-web/./src/cfg/PanelCfg.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/gui/GuiResourceCache.ts","webpack://rock-raiders-web/./src/gui/base/BaseElement.ts","webpack://rock-raiders-web/./src/gui/base/Button.ts","webpack://rock-raiders-web/./src/gui/base/Panel.ts","webpack://rock-raiders-web/./src/worker/WorkerPublishEvent.ts","webpack://rock-raiders-web/./src/worker/WorkerResponse.ts","webpack://rock-raiders-web/./src/worker/GuiWorker.ts","webpack://rock-raiders-web/./src/worker/OffscreenWorker.ts"],"names":["BaseButtonCfg","buttonType","normalFile","highlightFile","pressedFile","disabledFile","relX","relY","width","height","tooltip","BaseConfig","config","cfgObj","Object","keys","forEach","cfgKey","lCfgKeyName","startsWith","substring","toLowerCase","replace","some","objKey","assignValue","console","warn","constructor","name","cfgValue","currentValue","this","currentIsArray","Array","isArray","parsedValue","parseValue","parsedIsArray","PanelCfg","filename","xOut","yOut","xIn","yIn","iGet","obj","keyname","filter","key","map","clearTimeoutSafe","timeout","clearTimeout","clearIntervalSafe","interval","clearInterval","prototype","remove","element","index","indexOf","splice","last","length","undefined","count","callback","counter","e","partition","left","right","a","push","Map","getOrUpdate","updateCallback","value","get","set","String","equalsIgnoreCase","other","GuiResourceCache","BaseElement","parent","x","y","children","hidden","disabled","hover","pressed","onClick","onPublishEvent","event","log","eventKey","tooltipTimeout","c","reset","child","updatePosition","context","onRedraw","drawHover","drawTooltip","isInactive","hide","show","cx","cy","inRect","isInRect","stateChanged","setTimeout","showTooltip","checkHover","checkClick","clicked","checkRelease","publishEvent","C","release","notifyRedraw","registerEventListener","Button","btnCfg","super","sfxName","imgNormal","imgHover","imgPressed","imgDisabled","sfxTooltip","img","drawImage","Panel","panelCfg","animationTimeout","movedIn","onDone","toggleState","updateAnimation","targetX","targetY","speed","diffX","diffY","Math","abs","round","sign","sqrt","panel","WorkerPublishEvent","type","messageState","gameEvent","WorkerMessageType","GuiWorker","worker","canvas","eventListener","clearRect","getContext","scale","redraw","response","postMessage","sendResponse","msg","setCanvas","consumed","handlePointerEvent","inputEvent","sendEventResponse","eventId","eventConsumed","handleKeyEvent","handleWheelEvent","onProcessMessage","rootElement","panels","p","addChild","canvasX","canvasY","sx","sy","hit","getImageData","data","Cursor","eventEnum","button"],"mappings":"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","file":"969.index.js","sourcesContent":["export class BaseButtonCfg {\n\n    buttonType?: string = null\n    normalFile?: string = null\n    highlightFile?: string = null\n    pressedFile?: string = null\n    disabledFile?: string = null\n    relX?: number = 0\n    relY?: number = 0\n    width?: number = 0\n    height?: number = 0\n    tooltip?: string = null\n}\n","export class BaseConfig {\n\n    static setFromCfg(config: BaseConfig, cfgObj: any) {\n        Object.keys(cfgObj).forEach((cfgKey) => {\n            const lCfgKeyName = (cfgKey.startsWith('!') ? cfgKey.substring(1) : cfgKey)\n                .toLowerCase()\n                .replace(/_/g, '') // Activity_Stand\n                .replace(/-/g, '') // Geo-dome\n            const found = Object.keys(config).some((objKey) => {\n                return config.assignValue(objKey, lCfgKeyName, cfgObj[cfgKey])\n            })\n            if (!found) {\n                console.warn('cfg key: ' + cfgKey + ' does not exist in cfg: ' + config?.constructor?.name)\n            }\n        })\n        return config\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            const currentValue = this[objKey]\n            const currentIsArray = Array.isArray(currentValue)\n            let parsedValue = this.parseValue(lCfgKeyName, cfgValue)\n            const parsedIsArray = Array.isArray(parsedValue)\n            if (currentValue && currentIsArray !== parsedIsArray) {\n                if (currentIsArray) {\n                    parsedValue = [parsedValue]\n                    // } else {\n                    //     console.warn('Array overwrite conflict for key ' + objKey + ' with existing value (' + currentValue + ') and new value (' + parsedValue + ')')\n                }\n            }\n            this[objKey] = parsedValue\n            return true\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return cfgValue\n    }\n\n}\n","export class PanelCfg {\n\n    filename: string\n    xOut: number\n    yOut: number\n    xIn: number\n    yIn: number\n\n    constructor(cfgValue: any) {\n        [this.filename, this.xOut, this.yOut, this.xIn, this.yIn] = cfgValue\n    }\n\n}\n","export function getPath(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '')\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/')\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max)\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2\n}\n\nexport function clearTimeoutSafe(timeout: NodeJS.Timeout) {\n    if (timeout) clearTimeout(timeout)\n    return null\n}\n\nexport function clearIntervalSafe(interval: NodeJS.Timeout) {\n    if (interval) clearInterval(interval)\n    return null\n}\n\ndeclare global {\n\n    interface Array<T> {\n        remove(element: T): void\n\n        last(): T\n\n        count(callback: (element: T) => boolean): number\n\n        partition(filter: (element: T) => boolean): [T[], T[]]\n    }\n\n    interface Map<K, V> {\n        getOrUpdate(key: K, updateCallback: () => V): V\n    }\n\n    interface String {\n        equalsIgnoreCase(other: string): boolean\n    }\n\n}\n\nArray.prototype.remove = function <T>(element: T): void {\n    const index = this.indexOf(element)\n    if (index !== -1) this.splice(index, 1)\n}\n\nArray.prototype.last = function <T>(): T {\n    return this.length > 0 ? this[this.length - 1] : undefined\n}\n\nArray.prototype.count = function <T>(callback: (element: T) => boolean): number {\n    let counter = 0\n    this.forEach((e) => callback(e) && counter++)\n    return counter\n}\n\nArray.prototype.partition = function <T>(filter: (element: T) => boolean): [T[], T[]] {\n    const left: T[] = [], right: T[] = []\n    this.forEach((a) => filter(a) ? left.push(a) : right.push(a))\n    return [left, right]\n}\n\n// noinspection JSUnusedGlobalSymbols\nMap.prototype.getOrUpdate = function <K, V>(key: K, updateCallback: () => V): V {\n    let value = this.get(key)\n    if (value === undefined) {\n        value = updateCallback()\n        this.set(key, value)\n    }\n    return value\n}\n\nString.prototype.equalsIgnoreCase = function (other: string): boolean {\n    return this.toLowerCase() === other?.toLowerCase()\n}\n","import { ResourceCache } from '../resource/ResourceCache'\n\nexport class GuiResourceCache extends ResourceCache {\n}\n","import { Sample } from '../../audio/Sample'\nimport { EventKey } from '../../event/EventKeyEnum'\nimport { ChangeCursor, LocalEvent, PlaySoundEvent } from '../../event/LocalEvents'\nimport { Cursor } from '../../screen/Cursor'\n\nexport class BaseElement {\n\n    parent: BaseElement = null\n    x: number = 0\n    y: number = 0\n    relX: number = 0\n    relY: number = 0\n    width: number = 0\n    height: number = 0\n    children: BaseElement[] = []\n    hidden: boolean = false\n    disabled: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n    onClick: () => any = null\n    onPublishEvent: (event: LocalEvent) => any = (event) => console.log('TODO publish event: ' + EventKey[event.eventKey])\n    tooltipTimeout = null\n\n    constructor(parent: BaseElement) {\n        this.parent = parent\n    }\n\n    reset() {\n        this.hidden = false\n        this.disabled = false\n        this.hover = false\n        this.pressed = false\n        this.children.forEach((c) => c.reset())\n    }\n\n    addChild<T extends BaseElement>(child: T): T {\n        child.parent = this\n        this.children.push(child)\n        child.updatePosition()\n        return child\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n    drawHover(context: SpriteContext) {\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    drawTooltip(context: SpriteContext) {\n    }\n\n    isInactive(): boolean {\n        for (let parent = this.parent; !!parent; parent = parent.parent) if (parent.isInactive()) return true\n        return this.hidden || this.disabled\n    }\n\n    hide() {\n        this.hidden = true\n        this.children.forEach((child) => child.hide())\n    }\n\n    show() {\n        this.hidden = false\n        this.children.forEach((child) => child.show())\n    }\n\n    updatePosition() {\n        this.x = this.parent ? this.parent.x + this.relX : this.relX\n        this.y = this.parent ? this.parent.y + this.relY : this.relY\n        this.children.forEach((child) => child.updatePosition())\n    }\n\n    isInRect(cx, cy) {\n        return cx >= this.x && cy >= this.y && cx < this.x + this.width && cy < this.y + this.height\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.hover !== inRect\n        this.hover = inRect\n        if (this.hover) {\n            if (!this.tooltipTimeout) this.tooltipTimeout = setTimeout(() => this.showTooltip(), 1000)\n        } else if (this.tooltipTimeout) {\n            clearTimeout(this.tooltipTimeout)\n            this.tooltipTimeout = null\n        }\n        this.pressed = this.pressed && this.hover\n        this.children.forEach((child) => stateChanged = child.checkHover(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    showTooltip() {\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.pressed !== inRect\n        this.pressed = inRect\n        this.children.forEach((child) => stateChanged = child.checkClick(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        if (inRect && this.pressed && this.onClick) this.clicked()\n        let stateChanged = false\n        this.children.forEach((child) => stateChanged = child.checkRelease(cx, cy) || stateChanged)\n        stateChanged = this.pressed || stateChanged\n        this.pressed = false\n        return stateChanged\n    }\n\n    clicked() {\n        this.publishEvent(new ChangeCursor(Cursor.Pointer_Okay, 1000))\n        this.publishEvent(new PlaySoundEvent(Sample.SFX_ButtonPressed))\n        this.onClick()\n    }\n\n    release(): boolean {\n        let stateChanged = this.pressed || this.hover\n        this.pressed = false\n        this.hover = false\n        this.children.forEach((child) => stateChanged = child.release() || stateChanged)\n        return stateChanged\n    }\n\n    notifyRedraw() {\n        this.parent?.notifyRedraw()\n    }\n\n    publishEvent(event: LocalEvent) {\n        if (this.parent) this.parent.publishEvent(event)\n        else this.onPublishEvent(event)\n    }\n\n    registerEventListener(eventKey: EventKey, callback: (GameEvent) => any) {\n        this.parent.registerEventListener(eventKey, callback)\n    }\n\n}\n","import { SoundManager } from '../../audio/SoundManager'\nimport { ButtonCfg } from '../../cfg/ButtonCfg'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { BaseElement } from './BaseElement'\n\nexport class Button extends BaseElement {\n\n    buttonType: string = null\n    sfxName: string = null\n    imgNormal: SpriteImage = null\n    imgHover: SpriteImage = null\n    imgPressed: SpriteImage = null\n    imgDisabled: SpriteImage = null\n    tooltip: string = null\n    sfxTooltip: string = null\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent)\n        if (Array.isArray(btnCfg.buttonType)) {\n            [this.buttonType, this.sfxName] = btnCfg.buttonType\n        } else {\n            this.buttonType = btnCfg.buttonType\n        }\n        this.imgNormal = GuiResourceCache.getImageOrNull(btnCfg.normalFile)\n        this.imgHover = GuiResourceCache.getImageOrNull(btnCfg.highlightFile)\n        this.imgPressed = GuiResourceCache.getImageOrNull(btnCfg.pressedFile)\n        this.imgDisabled = GuiResourceCache.getImageOrNull(btnCfg.disabledFile)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width || this.imgNormal?.width || this.imgPressed?.width\n        this.height = btnCfg.height || this.imgNormal?.height || this.imgPressed?.height\n        if (Array.isArray(btnCfg.tooltip)) {\n            [this.tooltip, this.sfxTooltip] = btnCfg.tooltip\n        } else {\n            this.tooltip = btnCfg.tooltip\n        }\n        this.tooltip = this.tooltip?.replace(/_/g, ' ')\n        this.updatePosition()\n        this.onClick = () => console.log('button pressed: ' + this.buttonType)\n    }\n\n    showTooltip() {\n        // TODO show tooltip rendering\n        if (this.sfxName) SoundManager.playSound(this.sfxName)\n        if (this.sfxTooltip) SoundManager.playSound(this.sfxTooltip)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled || this.imgPressed || this.imgNormal\n        } else if (this.pressed) {\n            img = this.imgPressed || this.imgNormal\n        } else if (this.hover) {\n            img = this.imgHover || this.imgNormal\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { PanelCfg } from '../../cfg/PanelCfg'\nimport { clearTimeoutSafe } from '../../core/Util'\nimport { NATIVE_FRAMERATE, PANEL_ANIMATION_MULTIPLIER } from '../../params'\nimport { GuiResourceCache } from '../GuiResourceCache'\nimport { BaseElement } from './BaseElement'\n\nexport class Panel extends BaseElement {\n\n    img: SpriteImage = null\n    xOut: number = 0\n    yOut: number = 0\n    xIn: number = 0\n    yIn: number = 0\n    animationTimeout = null\n    movedIn: boolean = true // xIn, yIn is the collapsed position out of screen\n\n    constructor(parent: BaseElement, panelCfg?: PanelCfg) {\n        super(parent)\n        if (panelCfg) {\n            this.img = GuiResourceCache.getImage(panelCfg.filename)\n            this.xOut = panelCfg.xOut\n            this.yOut = panelCfg.yOut\n            this.xIn = panelCfg.xIn\n            this.yIn = panelCfg.yIn\n            this.relX = this.xIn\n            this.relY = this.yIn\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.relX = this.xIn\n        this.relY = this.yIn\n        this.movedIn = true\n        this.updatePosition()\n    }\n\n    isInactive(): boolean {\n        return this.animationTimeout || super.isInactive()\n    }\n\n    setMovedIn(movedIn: boolean, onDone: () => any = null) {\n        if (this.movedIn !== movedIn) {\n            this.toggleState(onDone)\n        } else if (onDone) {\n            onDone()\n        }\n    }\n\n    toggleState(onDone: () => any = null) {\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        if (this.movedIn) {\n            this.movedIn = false\n            this.updateAnimation(this.xOut, this.yOut, PANEL_ANIMATION_MULTIPLIER, onDone)\n        } else {\n            this.movedIn = true\n            this.updateAnimation(this.xIn, this.yIn, PANEL_ANIMATION_MULTIPLIER, onDone)\n        }\n    }\n\n    protected updateAnimation(targetX: number, targetY: number, speed: number, onDone: () => any) {\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= speed && Math.abs(diffY) <= speed) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * speed)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * speed)\n            const panel = this\n            this.animationTimeout = setTimeout(() => panel.updateAnimation(targetX, targetY, speed, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: SpriteContext) {\n        if (this.hidden) return\n        if (this.img) context.drawImage(this.img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { GameEvent } from '../event/GameEvent'\nimport { WorkerMessageType } from '../resource/wadworker/WorkerMessageType'\nimport { WorkerResponse } from './WorkerResponse'\n\nexport class WorkerPublishEvent extends WorkerResponse {\n\n    gameEvent: GameEvent\n\n    constructor(gameEvent: GameEvent) {\n        super(WorkerMessageType.GAME_EVENT)\n        this.gameEvent = gameEvent\n    }\n\n}\n","import { WorkerMessageType } from '../resource/wadworker/WorkerMessageType'\n\nexport class WorkerResponse {\n\n    type: WorkerMessageType\n    messageState?: boolean = null\n\n    constructor(type: WorkerMessageType) {\n        this.type = type\n    }\n\n}\n","import { EventKey } from '../event/EventKeyEnum'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { GamePointerEvent } from '../event/GamePointerEvent'\nimport { GameWheelEvent } from '../event/GameWheelEvent'\nimport { ChangeCursor, LocalEvent } from '../event/LocalEvents'\nimport { BaseElement } from '../gui/base/BaseElement'\nimport { Panel } from '../gui/base/Panel'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../params'\nimport { Cursor } from '../screen/Cursor'\nimport { OffscreenWorker } from './OffscreenWorker'\n\nexport abstract class GuiWorker extends OffscreenWorker {\n\n    rootElement: BaseElement = new BaseElement(null)\n    panels: Panel[] = []\n\n    protected constructor(worker: Worker) {\n        super(worker)\n        this.rootElement.notifyRedraw = () => this.redraw()\n        this.rootElement.publishEvent = (event: LocalEvent) => {\n            this.publishEvent(event)\n        }\n        this.rootElement.registerEventListener = (eventKey: EventKey, callback: (GameEvent) => any) => {\n            this.registerEventListener(eventKey, callback)\n        }\n    }\n\n    redraw() {\n        super.redraw()\n        this.rootElement.onRedraw(this.context)\n    }\n\n    reset() {\n        super.reset()\n        this.panels.forEach((p) => p.reset())\n    }\n\n    addPanel<T extends Panel>(panel: T): T {\n        this.rootElement.addChild(panel)\n        this.panels.push(panel)\n        return panel\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        const [cx, cy] = [event.canvasX, event.canvasY]\n        const [sx, sy] = [cx / (this.canvas.width / SPRITE_RESOLUTION_WIDTH), cy / (this.canvas.height / SPRITE_RESOLUTION_HEIGHT)]\n            .map((c) => Math.round(c))\n        const hit = this.context && this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n        if (hit) {\n            this.publishEvent(new ChangeCursor(Cursor.Pointer_Standard)) // TODO don't spam so many events?!\n            if (event.eventEnum === POINTER_EVENT.MOVE) {\n                this.rootElement.checkHover(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) this.rootElement.checkClick(sx, sy)\n            } else if (event.eventEnum === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) this.rootElement.checkRelease(sx, sy)\n            }\n        } else if (event.eventEnum === POINTER_EVENT.MOVE) {\n            this.rootElement.release()\n        }\n        return hit\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        return !this.context || this.context.getImageData(event.canvasX, event.canvasY, 1, 1).data[3] > 0\n    }\n\n}\n","import { EventKey } from '../event/EventKeyEnum'\nimport { GameEvent } from '../event/GameEvent'\nimport { GameKeyboardEvent } from '../event/GameKeyboardEvent'\nimport { GamePointerEvent } from '../event/GamePointerEvent'\nimport { GameWheelEvent } from '../event/GameWheelEvent'\nimport { IEventHandler } from '../event/IEventHandler'\nimport { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../params'\nimport { WorkerMessageType } from '../resource/wadworker/WorkerMessageType'\nimport { GuiWorkerMessage } from './GuiWorkerMessage'\nimport { OffscreenWorkerMessage } from './OffscreenWorkerMessage'\nimport { WorkerEventResponse } from './WorkerEventResponse'\nimport { WorkerPublishEvent } from './WorkerPublishEvent'\nimport { WorkerResponse } from './WorkerResponse'\n\nexport abstract class OffscreenWorker implements IEventHandler {\n\n    worker: Worker\n\n    canvas: OffscreenCanvas = null\n    context: OffscreenCanvasRenderingContext2D = null\n\n    eventListener = new Map<EventKey, ((event: GameEvent) => any)[]>()\n\n    protected constructor(worker: Worker) {\n        this.worker = worker\n    }\n\n    redraw() {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    reset() {\n    }\n\n    setCanvas(canvas: OffscreenCanvas) {\n        this.canvas = canvas\n        this.context = canvas.getContext('2d')\n        this.context.scale(this.canvas.width / SPRITE_RESOLUTION_WIDTH, this.canvas.height / SPRITE_RESOLUTION_HEIGHT)\n        this.redraw()\n    }\n\n    handlePointerEvent(event: GamePointerEvent): boolean {\n        return false\n    }\n\n    handleKeyEvent(event: GameKeyboardEvent): boolean {\n        return false\n    }\n\n    handleWheelEvent(event: GameWheelEvent): boolean {\n        return false\n    }\n\n    sendResponse(response: WorkerResponse) {\n        this.worker.postMessage(response)\n    }\n\n    sendEventResponse(response: WorkerEventResponse) {\n        this.sendResponse(response)\n    }\n\n    processMessage(msg: GuiWorkerMessage) {\n        if (msg.type === WorkerMessageType.CANVAS) {\n            this.setCanvas(msg.canvas)\n        } else if (msg.type === WorkerMessageType.EVENT_POINTER) {\n            const consumed = this.handlePointerEvent(msg.inputEvent as GamePointerEvent)\n            this.sendEventResponse({\n                type: WorkerMessageType.RESPONSE_EVENT,\n                eventId: msg.eventId,\n                eventConsumed: consumed,\n            })\n        } else if (msg.type === WorkerMessageType.EVENT_KEY) {\n            const consumed = this.handleKeyEvent(msg.inputEvent as GameKeyboardEvent)\n            this.sendEventResponse({\n                type: WorkerMessageType.RESPONSE_EVENT,\n                eventId: msg.eventId,\n                eventConsumed: consumed,\n            })\n        } else if (msg.type === WorkerMessageType.EVENT_WHEEL) {\n            const consumed = this.handleWheelEvent(msg.inputEvent as GameWheelEvent)\n            this.sendEventResponse({\n                type: WorkerMessageType.RESPONSE_EVENT,\n                eventId: msg.eventId,\n                eventConsumed: consumed,\n            })\n        } else if (msg.type === WorkerMessageType.RESET) {\n            this.reset()\n        } else if (msg.type === WorkerMessageType.REDRAW) {\n            this.redraw()\n        } else if (msg.type === WorkerMessageType.GAME_EVENT) {\n            const event = msg.gameEvent\n            this.eventListener.getOrUpdate(event.eventKey, () => []).forEach((callback) => callback(event))\n        } else if (!this.onProcessMessage(msg)) {\n            console.warn('Worker ignores message of type: ' + WorkerMessageType[msg.type])\n        }\n        return true\n    }\n\n    publishEvent(event: GameEvent): void {\n        this.sendResponse(new WorkerPublishEvent(event))\n    }\n\n    registerEventListener(eventKey: EventKey, callback: (GameEvent) => any): void {\n        this.eventListener.getOrUpdate(eventKey, () => []).push(callback)\n    }\n\n    abstract onProcessMessage(msg: OffscreenWorkerMessage): boolean\n\n}\n"],"sourceRoot":""}