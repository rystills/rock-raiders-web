{"version":3,"sources":["webpack://rock-raiders-web/./site/modal/WadFileSelectionModal.ts","webpack://rock-raiders-web/./src/resource/wadworker/Resources.ts","webpack://rock-raiders-web/./src/resource/wadworker/InitLoadingMessage.ts","webpack://rock-raiders-web/./src/core/ImageHelper.js","webpack://rock-raiders-web/./src/resource/wadworker/WadUtil.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimationEntityType.ts","webpack://rock-raiders-web/./src/resource/AnimatedMesh.ts","webpack://rock-raiders-web/./src/resource/LWOLoader.ts","webpack://rock-raiders-web/./src/game/model/Selectable.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimClip.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimSubObj.ts","webpack://rock-raiders-web/./src/scene/DebugHelper.ts","webpack://rock-raiders-web/./src/game/model/entity/building/Building.ts","webpack://rock-raiders-web/./src/scene/model/BaseEntity.ts","webpack://rock-raiders-web/./src/event/EventKeyEnum.ts","webpack://rock-raiders-web/./src/event/EventBus.ts","webpack://rock-raiders-web/./src/event/WorldEvents.ts","webpack://rock-raiders-web/./src/event/GameEvent.ts","webpack://rock-raiders-web/./src/game/model/job/JobState.ts","webpack://rock-raiders-web/./src/game/model/job/JobType.ts","webpack://rock-raiders-web/./src/game/model/job/Job.ts","webpack://rock-raiders-web/./src/scene/model/PathTarget.ts","webpack://rock-raiders-web/./src/scene/model/collect/CollectableEntity.ts","webpack://rock-raiders-web/./src/game/model/job/CollectJob.ts","webpack://rock-raiders-web/./src/scene/model/activities/BaseActivity.ts","webpack://rock-raiders-web/./src/scene/model/activities/AnimEntityActivity.ts","webpack://rock-raiders-web/./src/scene/model/activities/RaiderActivity.ts","webpack://rock-raiders-web/./src/scene/model/activities/BuildingActivity.ts","webpack://rock-raiders-web/./src/scene/model/CollectionTarget.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityIdentifier.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimEntity.ts","webpack://rock-raiders-web/./src/scene/model/activities/DynamiteActivity.ts","webpack://rock-raiders-web/./src/scene/model/collect/Dynamite.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/scene/model/collect/Crystal.ts","webpack://rock-raiders-web/./src/scene/model/collect/Ore.ts","webpack://rock-raiders-web/./src/scene/model/RaiderSkill.ts","webpack://rock-raiders-web/./src/resource/wadworker/WorkerMessage.ts","webpack://rock-raiders-web/./src/scene/SceneManager.ts","webpack://rock-raiders-web/./src/resource/LWSCLoader.ts","webpack://rock-raiders-web/./src/resource/AnimEntityLoader.ts","webpack://rock-raiders-web/./src/core/BitmapFont.ts","webpack://rock-raiders-web/./src/cfg/BaseConfig.ts","webpack://rock-raiders-web/./src/event/EventTypeEnum.ts","webpack://rock-raiders-web/./src/cfg/BuildingEntityStats.ts","webpack://rock-raiders-web/./src/cfg/MovableEntityStats.ts","webpack://rock-raiders-web/./src/cfg/GameStatsCfg.ts","webpack://rock-raiders-web/./src/resource/ResourceManager.ts","webpack://rock-raiders-web/./src/screen/ScreenLayer.ts","webpack://rock-raiders-web/./src/event/EventManager.ts","webpack://rock-raiders-web/./src/scene/model/map/Surface.ts","webpack://rock-raiders-web/./src/screen/BaseScreen.ts","webpack://rock-raiders-web/./src/screen/LoadingScreen.ts","webpack://rock-raiders-web/./src/menu/MainMenuBaseItem.ts","webpack://rock-raiders-web/./src/menu/MainMenuLabelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuIconButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLayer.ts","webpack://rock-raiders-web/./src/menu/MainMenuLevelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuPanel.ts","webpack://rock-raiders-web/./src/menu/MainMenuWindow.ts","webpack://rock-raiders-web/./src/menu/LevelSelectLayer.ts","webpack://rock-raiders-web/./src/screen/MainMenuScreen.ts","webpack://rock-raiders-web/./src/scene/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/scene/model/map/SurfaceGeometry.ts","webpack://rock-raiders-web/./src/event/WorldLocationEvent.ts","webpack://rock-raiders-web/./src/scene/model/map/astar.ts","webpack://rock-raiders-web/./src/scene/TerrainLoader.ts","webpack://rock-raiders-web/./src/scene/model/map/TerrainPath.ts","webpack://rock-raiders-web/./src/scene/model/map/Terrain.ts","webpack://rock-raiders-web/./src/scene/model/EntityStep.ts","webpack://rock-raiders-web/./src/scene/model/MoveState.ts","webpack://rock-raiders-web/./src/scene/model/MovableEntity.ts","webpack://rock-raiders-web/./src/scene/model/FulfillerEntity.ts","webpack://rock-raiders-web/./src/scene/model/RaiderTool.ts","webpack://rock-raiders-web/./src/scene/model/Raider.ts","webpack://rock-raiders-web/./src/scene/model/BuildingEntity.ts","webpack://rock-raiders-web/./src/scene/model/activities/MonsterActivity.ts","webpack://rock-raiders-web/./src/game/model/entity/monster/Monster.ts","webpack://rock-raiders-web/./src/game/model/entity/monster/SmallSpider.ts","webpack://rock-raiders-web/./src/game/model/entity/monster/Bat.ts","webpack://rock-raiders-web/./src/scene/ObjectListLoader.ts","webpack://rock-raiders-web/./src/game/model/job/surface/SurfaceJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/DynamiteJob.ts","webpack://rock-raiders-web/./src/core/NerpRunner.ts","webpack://rock-raiders-web/./src/core/NerpParser.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityList.ts","webpack://rock-raiders-web/./src/game/model/job/MoveJob.ts","webpack://rock-raiders-web/./src/scene/WorldManager.ts","webpack://rock-raiders-web/./src/game/layer/SelectionLayer.ts","webpack://rock-raiders-web/./src/game/model/job/surface/DrillJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ClearRubbleJob.ts","webpack://rock-raiders-web/./src/game/layer/GameLayer.ts","webpack://rock-raiders-web/./src/game/gui/base/BaseElement.ts","webpack://rock-raiders-web/./src/game/gui/base/Panel.ts","webpack://rock-raiders-web/./src/game/gui/base/Button.ts","webpack://rock-raiders-web/./src/game/gui/sidebar/SideBarLabel.ts","webpack://rock-raiders-web/./src/game/gui/sidebar/PanelCrystalSideBar.ts","webpack://rock-raiders-web/./src/game/gui/infodock/ButtonInfoDockCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/ButtonPriorityListCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/ButtonTopCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonsCfg.ts","webpack://rock-raiders-web/./src/game/gui/radar/RadarPanel.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessage.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/MessagePanel.ts","webpack://rock-raiders-web/./src/cfg/IconPanelBackButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/MenuItemCfg.ts","webpack://rock-raiders-web/./src/game/gui/main/IconPanelButton.ts","webpack://rock-raiders-web/./src/game/gui/main/IconSubPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/BuildingPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SmallVehiclePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/LargeVehiclePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectBasePanel.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ReinforceJob.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectWallPanel.ts","webpack://rock-raiders-web/./src/game/model/job/surface/CompletePowerPathJob.ts","webpack://rock-raiders-web/./src/scene/model/BuildingSite.ts","webpack://rock-raiders-web/./src/scene/model/collect/ElectricFence.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectFloorPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectRubblePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/IconPanelToggleButton.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectBuildingPanel.ts","webpack://rock-raiders-web/./src/game/model/job/EatJob.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectRaiderPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectVehiclePanel.ts","webpack://rock-raiders-web/./src/core/Area.ts","webpack://rock-raiders-web/./src/game/model/job/TrainJob.ts","webpack://rock-raiders-web/./src/game/gui/main/TrainRaiderPanel.ts","webpack://rock-raiders-web/./src/game/model/job/GetToolJob.ts","webpack://rock-raiders-web/./src/game/gui/main/GetToolPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/IconPanelButtonLabel.ts","webpack://rock-raiders-web/./src/game/gui/main/MainPanel.ts","webpack://rock-raiders-web/./src/game/gui/base/ToggleButton.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/TopPanel.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoDockButton.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoDockPanel.ts","webpack://rock-raiders-web/./src/cfg/PanelsCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityListPanel.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoMessagesEntryConfig.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoMessagesConfig.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InformationPanel.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityButtonsConfig.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityPositionsEntry.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessageEntryConfig.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessageConfig.ts","webpack://rock-raiders-web/./src/game/layer/GuiBaseLayer.ts","webpack://rock-raiders-web/./src/game/layer/GuiMainLayer.ts","webpack://rock-raiders-web/./src/game/Supervisor.ts","webpack://rock-raiders-web/./src/game/gui/briefing/BriefingPanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuCycleItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuSliderItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuLabelItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuLayer.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuBasePanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/OptionsPanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/PausePanel.ts","webpack://rock-raiders-web/./src/core/Rect.ts","webpack://rock-raiders-web/./src/cfg/DialogCfg.ts","webpack://rock-raiders-web/./src/cfg/BriefingPanelCfg.ts","webpack://rock-raiders-web/./src/game/layer/OverlayLayer.ts","webpack://rock-raiders-web/./src/screen/GameScreen.ts","webpack://rock-raiders-web/./src/menu/RewardScreenButton.ts","webpack://rock-raiders-web/./src/screen/RewardScreen.ts","webpack://rock-raiders-web/./src/main.ts"],"names":["parentId","onStart","rootElement","document","getElementById","appendChild","createElement","classList","add","tabIndex","setAttribute","modalDialog","modalContent","modalHeader","modalTitle","innerText","id","modalBody","navTabList","navFileBtn","WadFileSelectionModal","appendNavButton","navUrlBtn","navTabContent","this","appendNavFileTab","appendNavUrlTab","modal","backdrop","keyboard","parent","active","controlTarget","navBtn","type","String","labelledBy","navFileTab","appendNavTab","wad0File","appendWadFileGroup","wad1File","btnStartFile","addEventListener","disabled","wad0FileUrl","URL","createObjectURL","files","wad1FileUrl","filename","wadFileGroup","wadFileLabel","innerHTML","wadFileInput","required","navUrlTab","urlHint","wad0Url","appendWadUrlGroup","wad1Url","btnStartUrl","value","navTab","example","wadUrlGroup","wadUrlLabel","wadUrlInput","show","hide","Worker_fn","Worker","createContext","width","height","console","error","result","y","x","fillStyle","fillRect","createDummyContext","canvas","context","getContext","createDummyImgData","ImageData","e","px","py","setPixel","imgData","r","g","b","a","n","data","getPixel","iGet","obj","keys","forEach","keyname","Object","filter","key","toLowerCase","map","url","strUrl","toString","replace","startsWith","substring","lastInd","lastIndexOf","decodeString","TextDecoder","decode","decodeFilepath","getRandomInclusive","min","max","Math","ceil","floor","random","getRandom","getRandomSign","clearTimeoutSafe","timeout","clearTimeout","clearIntervalSafe","interval","clearInterval","Array","prototype","remove","element","index","indexOf","splice","Map","getOrUpdate","updateCallback","get","undefined","set","carryNullName","depositNullName","toolNullName","mediumPoly","highPoly","fPPoly","activities","mesh","textureSequences","dispose","s","geometry","isArray","material","mat","SURF_VTRN","getVector3AtOffset","view","offset","vector","getFloat32","z","SelectionType","path","verbose","materials","vertices","indices","uvs","sequenceIntervals","log","parsePoints","chunkOffset","chunkSize","numVertices","Float32Array","i","vertexIndex","vertexOffset","parseSurfaceNames","buffer","surfaceNames","Uint8Array","split","length","new_material","name","side","push","parsePolygons","totalNumIndices","numIndices","getInt16","materialIndex","addGroup","currentIndex","Uint16Array","faceIndices","Int16Array","COUNTER_CLOCKWISE","parseSurface","getUint8","materialName","textureFlags","textureSize","textureCenter","shininess","subchunkOffset","subchunkType","getInt32","subchunkSize","colorArray","color","fromArray","join","flags","getUint16","warn","blending","depthWrite","edgeTransparencyThreshold","luminosity","emissiveIntensity","diffuse","specular","reflection","reflectivity","transparency","opacity","transparent","vLuminosity","vDiffuse","vSpecular","toArray","textureTypeName","textureValue","textureColorArray","textureFilepath","sequenceTexture","endsWith","match","textureFilename","ResourceManager","filterTextureSequenceNames","setInterval","getTexture","SEQUENCE_TEXTURE_FRAMERATE","lTextureName","size","center","XAXIS_BIT","groups","group","start","count","uvIndex","u","v","planarMapUVS","parse","DataView","getUint32","fileSize","byteLength","ID4_SIZE","cursor","chunkType","setIndex","computeVertexNormals","AnimatedMesh","magic","looping","transcoef","firstFrame","lastFrame","framesPerSecond","bodies","degToRad","relPos","relRot","relScale","parentObjInd","model","radVec","degX","degY","degZ","setFrameAndFollowing","animationFrameIndex","infos","c","setOpacityAndFollowing","Stats","stats","setMode","domElement","style","position","left","top","body","visibility","renderStart","begin","renderDone","end","folder","blocksPathSurface","secondaryBuildingPart","secondaryPowerPath","hasPrimaryPowerPath","waterPathSurface","aeFile","slice","getByName","buildingType","TOOLSTATION","TELEPORT_PAD","DOCKS","POWER_STATION","BARRACKS","UPGRADE","GEODOME","ORE_REFINERY","GUNSTATION","TELEPORT_BIG","Building","EventKey","level","getPosition","clone","getPosition2D","getHeading","rotation","onDiscover","visible","getCurrentSurface","worldMgr","sceneManager","terrain","getSurfaceFromWorld","removeFromScene","scene","EntityType","publishEvent","event","blockedEvents","includes","eventKey","isLocal","getListener","callback","registerEventListener","eventListener","entityKey","GameEvent","job","WorldEvent","JOB_CREATE","JobEvent","JOB_DELETE","RAIDER_REQUESTED","collectableType","MATERIAL_AMOUNT_CHANGED","surface","SPAWN_DYNAMITE","entity","ENTITY_ADDED","ENTITY_REMOVED","JobState","CAVERN_DISCOVERED","ORE_FOUND","building","BUILDING_UPGRADED","raider","skill","RAIDER_TRAINED","JobType","fulfiller","jobstate","OPEN","assign","unassign","cancel","CANCELED","stopJob","isQualified","isQualifiedWithTool","isQualifiedWithTraining","onJobComplete","COMPLETE","Job","CollectableType","location","targetLocation","isInArea","item","COLLECT","getWorkplaces","PathTarget","carries","hasTarget","getPriorityIdentifier","getCollectableType","ELECTRIC_FENCE","electricFence","targetSurface","canPlaceFence","fence","PublicJob","activityKey","Stand","AnimEntityActivity","BaseActivity","Route","RaiderActivity","RunPanic","Drill","Walk","Reinforce","Reverse","TurnLeft","TurnRight","CantDo","Collect","Clear","Carry","CarryTurnLeft","CarryTurnRight","CarryStand","Dynamite","Place","Deposit","TeleportIn","Repair","rest","routeRubble","CarryRubble","Eat","FireLaser","GetUp","ThrownByRockMonster","Slip","Train","Recharge","Waiting1","Waiting2","Waiting3","Waiting4","Hoverboard","Standhoverboard","HitLefthoverboard","HitRighthoverboard","HitFronthoverboard","HitBackhoverboard","SMALLTRUCK","StandSMALLTRUCK","HitLeftSMALLTRUCK","HitRightSMALLTRUCK","HitFrontSMALLTRUCK","HitBackSMALLTRUCK","SMALLheli","StandSMALLheli","HitLeftSMALLheli","HitRightSMALLheli","HitFrontSMALLheli","HitBackSMALLheli","SMALLCAT","StandSMALLCAT","HitLeftSMALLCAT","HitRightSMALLCAT","HitFrontSMALLCAT","HitBackSMALLCAT","SMALLMLP","StandSMALLMLP","HitLeftSMALLMLP","HitRightSMALLMLP","HitFrontSMALLMLP","HitBackSMALLMLP","LARGECAT","StandLARGECAT","HitLeftLARGECAT","HitRightLARGECAT","HitFrontLARGECAT","HitBackLARGECAT","SMALLDIGGER","StandSMALLDIGGER","Teleport","BuildingActivity","Explode","Unpowered","site","canGatherItem","activity","getDefaultActivity","gatherItem","addItem","carryJoint","changeActivity","CollectPathTarget","addItemToStorage","CRYSTAL","GameState","numCrystal","EventBus","MaterialAmountChanged","ORE","numOre","getDropAction","targets","targetSite","updateTargets","getCarryTargets","resetTarget","sites","buildingSites","needs","getRandomDropPosition","buildings","getBuildingsByType","getTargetBuildingTypes","getDropPosition2D","some","t","complete","isPowered","collectablesUndiscovered","collectables","JobCreateEvent","CollectJob","setTargetSite","unAssign","BaseEntity","PriorityIdentifier","LocalEvent","SELECTED_SURFACE","SelectionEvent","SELECTED_BUILDING","SELECTED_RAIDER","vehicle","SELECTED_VEHICLE","DESELECTED_ENTITY","SURFACE_CHANGED","AIR_LEVEL_CHANGED","entityType","poly","animation","animationTimeout","selectionFrame","pickSphere","pickSphereRadius","depositJoint","getToolJoint","radiusSq","beamUp","EntityDeselected","AnimEntity","moveUp","TILESIZE","counter","NATIVE_FRAMERATE","setTimeout","onAnimationDone","durationTimeMs","lActivityKey","anim","setAnimation","bind","children","polyModel","lBodyName","polyPart","parentInd","sphere","setFromObject","getBoundingSphere","radius","animate","frameIndex","p","copy","scale","hasOwnProperty","nextFrame","standardDurationTimeMs","timeoutTimeMs","createPickSphere","pickSphereCenter","getPickSphereCenter","userData","selectable","createSelectionFrame","getBoundingBoxCenter","getCenter","sub","applyMatrix4","makeScale","selectionFrameTextureSize","ctx","strength","round","selectionFrameTexture","selectionMaterial","depthTest","selectionFrameSize","Normal","DynamiteActivity","TickDown","getAnimationEntityType","isExplodable","hasOneBuildingOf","getDigPositions","DYNAMITE","ignite","getCenterWorld","lookAt","collapse","GameResultState","resource2","getResource","mesh2","SceneManager","registerMesh","LWOLoader","resource","emissive","PowerCrystal","aiPriorityCrystal","CollectableEntity","Ore","aiPriorityOre","DRIVER","RaiderSkill","ENGINEER","GEOLOGIST","PILOT","SAILOR","DEMOLITION","WorkerMessageType","reset","resultState","RUNNING","levelFullName","numBrick","usedCrystals","neededCrystals","airlevel","selectedEntities","selectionType","buildingsUndiscovered","raiders","raidersUndiscovered","requestedRaiders","vehicles","vehiclesUndiscovered","spiders","spidersBySurface","bats","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","discoveredCaverns","levelStartTime","levelStopTime","rewardConfig","priorityList","oxygenRate","buildingTypes","bt","getClosestBuildingByType","targetBuildings","closest","minDist","bPos","getDropPosition","dist","distanceToSquared","hasBuildingWithUpgrades","upgrades","getTrainingSites","training","TrainDynamite","selectEntities","entities","previouslySelected","stillSelected","deselect","selectionEvents","freshlySelected","selectionEvent","select","len","GROUP","getSelectionType","getMaxRaiders","MAX_RAIDER_BASE","ADDITIONAL_RAIDER_PER_SUPPORT","discoverSurface","minX","minZ","maxX","maxZ","discoverEntities","undiscovered","discovered","pos","dropMaterial","quantity","Crystal","quota","importance","scoreCrystals","crystals","Infinity","scoreTimer","gameTimeSeconds","timer","scoreCaverns","caverns","scoreConstructions","constructions","scoreOxygen","oxygen","scoreFigures","figures","SURFACE","BUILDING","getNearbySpiders","currentSurface","nearbySpiders","getSurface","maxFps","debugHelper","DebugHelper","renderer","antialias","setClearColor","camera","controls","mouseButtons","LEFT","MIDDLE","RIGHT","selectEntitiesByRay","rx","ry","raycaster","setFromCamera","intersects","intersectObjects","floorGroup","selected","object","selectEntitiesInFrustum","r1x","r1y","r2x","r2y","startPoint","endPoint","Number","EPSILON","updateProjectionMatrix","updateMatrixWorld","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","setFromMatrixPosition","matrixWorld","unproject","vectemp1","vectemp2","vectemp3","normalize","deep","MAX_VALUE","multiplyScalar","frustum","planes","setFromCoplanarPoints","normal","containsPoint","getSelectionCenter","setupScene","ambientColor","ambientLight","cursorTorchlight","distance","startScene","renderInterval","animRequest","requestAnimationFrame","render","disposeScene","cancelAnimationFrame","meshRegistry","animatedMesh","animationClip","AnimClip","lines","lineIndex","content","l","trim","sceneFileVersion","parseInt","line","parseFrameBlock","parseObjectBlock","parseLine","frameStep","subObj","AnimSubObj","lwoBuffer","lenInfos","lenFrames","numOfInformationChannels","numOfKeyframes","frameNum","loadModels","root","getPath","AnimationEntityType","polyname","polykey","act","file","isLws","LWSCLoader","fontImageData","cols","rows","letters","chars","maxCharWidth","getActualCharacterWidth","rowPixelIndex","colPixelIndex","charHeight","extractData","actualWidth","startX","startY","alpha","createTextImage","text","maxWidth","autoCenter","determineRows","row","rowX","rowY","letterX","letterImgData","charAt","img","putImageData","spaceWidth","rowText","rowWidth","word","wordWidth","letter","letterImg","createTextMessage","msg","MSG","createCfgLoaded","cfg","totalResources","CFG","createAssetLoaded","assetIndex","assetName","assetObj","ASSET","createLoadDone","loadingTimeSeconds","DONE","MOUSE_BUTTON","POINTER_EVENT","KEY_EVENT","setFromCfg","config","cfgObj","cfgKey","lCfgKeyName","objKey","assignValue","cfgValue","currentValue","currentIsArray","parsedValue","parseValue","parsedIsArray","Levels","SelfPowered","PowerBuilding","PickSphere","CostOre","CostCrystal","OxygenCoef","getByType","Toolstation","TeleportPad","Docks","Powerstation","Barracks","Upgrade","Geodome","OreRefinery","GunStation","TeleportBIG","BaseConfig","RouteSpeed","RubbleCoef","PathCoef","Pilot","SoilDrillTime","LooseDrillTime","MedDrillTime","HardDrillTime","SeamDrillTime","UpgradeTime","CollRadius","CollHeight","TrackDist","SingleWidthDig","RepairValue","SurveyRadius","Drillsound","Drillfadesound","RestPercent","EnergyDecayRate","CanClearRubble","NumOfToolsCanCarry","CrossLand","RouteAvoidance","UseLegoManTeleporter","AwarenessRange","CanStrafe","EnterToolStore","ShowHealthBar","RockMonster","AlertRadius","HealthDecayRate","CanScare","CarryMinHealth","PainThreshold","StampRadius","AttackRadius","CanSteal","GrabMinifigure","BumpDamage","AttackPaths","SplitOnZeroHealth","CanBeHitByFence","Capacity","CanBeShotAt","CanFreeze","FreezerTime","FreezerDamage","CanLaser","LaserDamage","CanPush","PusherDist","PusherDamage","WakeRadius","ScaredByBigBangs","RemoveReinforcement","SmallSpider","RandomMove","RandomEnterWall","CauseSlip","DontShowDamage","DontShowOnRadar","MovableEntityStats","Bat","randomMoveTime","Flocks","FlocksDebug","FlocksSmooth","FlocksSize","FlocksTurn","FlocksSpeed","FlocksTightness","FlocksGoalUpdate","FlocksRandomness","FlocksHeight","CrossWater","CrossLava","TinyRM","ScaredByPlayer","TinyIM","Slug","UseHoles","DrainPower","LavaMonster","IceMonster","CanBeDriven","UseSmallTeleporter","UpgradeCostOre","UpgradeCostStuds","EngineSound","SmallHeli","Smallmlp","Tracker","CanDoubleSelect","SmallCat","UseWaterTeleporter","MaxCarry","GetInAtLand","GetOutAtLand","TakeCarryingDrivers","SmallDigger","VehicleCanBeCarried","SmallTruck","CarryStart","Bulldozer","UseBigTeleporter","InvisibleDriver","WalkerDigger","DrillSound","DrillFadeSound","LargeDigger","LargeCat","ClassAsLarge","CarryVehicles","LargeHeli","LargeMLP","CostRefinedOre","SnaxULike","TrainDriver","CrystalDrain","DamageCausesCallToArms","BuildingEntityStats","ProcessCrystal","ProcessOre","SmallTeleporter","ManTeleporter","TrainPilot","BigTeleporter","WaterEntrances","WaterTeleporter","TrainSailor","ToolStore","StoreObjects","FunctionCoef","TrainScanner","UpgradeBuilding","TrainRepair","ProcessedOre","Boulder","Pusher","Freezer","LaserShot","ColRadius","ElectricFence","Path","startLoadingFromCache","startLoading","startLoadingFromUrl","InitLoadingMessage","worker","onmessage","resourceByName","onAssetLoaded","onMessage","configuration","GameStatsCfg","onInitialLoad","CACHE_MISS","onCacheMissed","onLoadDone","postMessage","basename","lBasename","resourceName","lName","getImageData","imageName","lImageName","getImage","getImageOrNull","textureName","lSharedTextureName","texture","needsUpdate","getMap","aeFilename","cfgRoot","AnimEntityLoader","getBitmapFont","fontCache","BitmapFont","getDefaultFont","withContext","background","setZIndex","zIndex","compareZ","layerA","layerB","aIndex","bIndex","resize","redraw","onRedraw","isActive","toCanvasCoords","windowX","windowY","clientRect","getBoundingClientRect","handlePointerEvent","eventEnum","handleKeyEvent","handleWheelEvent","fixedWidth","SPRITE_RESOLUTION_WIDTH","fixedHeight","SPRITE_RESOLUTION_HEIGHT","toScaledCoords","cx","cy","scaleX","scaleY","ScreenLayer","cursorName","createCursor","curUrl","revokeObjectURL","curImg","toDataURL","ScaledLayer","WALL_TYPE","screen","gameCanvasContainer","isInRect","preventDefault","MOVE","DOWN","UP","eventType","nonBubblingClone","PointerEvent","bubbles","clientX","clientY","pointerType","button","ctrlKey","metaKey","shiftKey","layers","sort","WheelEvent","deltaX","deltaY","deltaZ","ratio","focus","eventMgr","EventManager","window","onWindowResize","cursorLayer","addLayer","CursorLayer","layer","offsetWidth","maxHeight","offsetHeight","idealHeight","firstLayer","rect","right","bottom","setLoadingMessage","font","fillText","enableGraphicMode","imgBackground","imgProgress","imgLoading","drawImage","loadingBarWidth","increaseLoadingState","BaseScreen","scrollAffected","needsRedraw","hover","pressed","actionName","targetIndex","checkHover","sx","sy","onHoverChange","checkSetPressed","setReleased","draw","labelImgLo","labelImgHi","loFont","label","hiFont","target","MainMenuBaseItem","imgNormal","imgHover","imgPressed","tooltip","menuCfg","items","scrollY","scrollSpeedY","scrollInterval","menuImage","titleImage","fullName","itemsLabel","MainMenuLabelButton","MainMenuIconButton","displayTitle","that","setScrollY","absY","canScroll","scrollAreaHeight","setScrollSpeedY","MAIN","showMainMenu","selectLevel","levelKey","sign","pow","scrollYBefore","levelCfg","imgActive","imgInactive","imgCross","unlocked","frontEndX","frontEndY","menuBMP","frontEndOpen","area","w","h","imgFirstLine","imgSecondLine","setFirstLine","setSecondLine","modeLevel","levelsCfg","levelTextCfg","LevelTextCfg","MainMenuPanel","panelImgData","panelPos","levelTextWindow","MainMenuWindow","tutorial","levelsByName","levelButton","MainMenuLevelButton","MainMenuLayer","winCfg","panelCfg","onLevelSelected","menus","title","LevelSelectLayer","showLevelSelection","levelName","options","shaping","matIndex","drillable","drillableHard","explodable","reinforcable","getByNum","typeNum","SurfaceType","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","GROUND","POWER_PATH","POWER_PATH_SITE","create","wallType","topLeftVertex","bottomRightVertex","topRightVertex","bottomLeftVertex","topLeftHeight","topRightHeight","bottomRightHeight","bottomLeftHeight","uvOffset","INVERTED_CORNER","WALL","WEIRD_CREVICE","Boolean","uv","bufferVertices","bufferNormals","addFaceAndNormals","subVectors","cross","uvIndexes","bufferVertexUvs","bufferGeometry","BufferAttribute","copyVector3sArray","copyVector2sArray","LOCATION_DEATH","WorldLocationEvent","LOCATION_MONSTER","LOCATION_CRYSTAL_FOUND","LOCATION_UNDER_ATTACK","LOCATION_LANDSLIDE","LOCATION_POWER_DRAIN","LOCATION_SLUG_EMERGE","LOCATION_RAIDER_DISCOVERED","surfaceType","heightOffset","containedOres","containedCrystals","reinforced","jobs","surfaceRotation","seamLevel","fallinTimeout","fallinGrp","needsMeshUpdate","topLeftHeightOffset","topRightHeightOffset","bottomLeftHeightOffset","bottomRightHeightOffset","rubblePositions","hasPower","jobType","DRILL","REINFORCE","BLOW","surfaceJob","hasJobType","discoverNeighbors","foundCave","surf","getSurfaceOrNull","cancelJobs","getRandomPosition","CavernDiscovered","dropContainedOre","crystal","addCollectable","CrystalFoundEvent","isSupported","updateSurfaceMeshes","updateWorldMatrix","dropAmount","OreFoundEvent","JobDeleteEvent","updateJobColor","reduceRubble","shift","updateTexture","SurfaceChanged","surfLeft","surfTopLeft","surfTop","surfTopRight","surfRight","surfBottomRight","surfBottom","surfBottomLeft","isHighGround","surf1","surf2","surf3","updateMesh","force","updateGeometry","cancelReinforceJobs","graphWalk","grid","weight","getGraphWalkWeight","otherJobs","textureSet","texturebasename","updatePowerPathTexture","CORNER","accessMaterials","isPath","pathSum","PI","avgHeight","sum","cnt","args","HEIGHT_MULTIPLER","SurfaceGeometry","setHex","SurfaceSelectedEvent","colorPriority","hasRubble","isWalkable","isDrillable","isDrillableHard","isReinforcable","isDigable","digPosition","reinforce","getCenterWorld2D","getTerrainHeight","setFallinLevel","fallinLevel","originPos","targetPos","findFallInOrigin","findFallInTarget","scheduleFallin","targetX","targetY","createFallin","fallinPosition","LandslideEvent","dx","dy","rotateOnAxis","atan2","makeRubble","m","getFloorHeight","worldX","worldZ","dy0","Surface","interpolate","dy1","y0","y1","containedOre","setBuilding","resetGraphWalk","setHasPower","state","recursive","neighbors","pathTo","node","curr","unshift","PathMap","PredugMap","astar","search","graph","cleanDirty","heuristic","heuristics","manhattan","openHeap","BinaryHeap","f","closestNode","markDirty","currentNode","pop","closed","il","neighbor","isWall","gScore","getCost","beenVisited","visited","rescoreElement","pos0","pos1","abs","diagonal","D2","sqrt","d1","d2","cleanNode","gridIn","nodes","dirtyNodes","GridNode","init","ret","graphString","rowDebug","fromNeighbor","scoreFunction","sinkDown","bubbleUp","parentN","elemScore","child2N","child1N","swap","child1Score","child1","child2","locations","lengthSq","addLocation","surfaces","roofGroup","cachedPaths","bSurf","worldPosition","getSurfaceFromWorldXZ","getSurfaceFromWorld2D","clear","findPath","startSurface","endSurface","TerrainPath","cacheIdentifier","cachedPath","searchPath","startNode","endNode","worldPath","leftSurface","topSurface","rightSurface","bottomSurface","leftSurface2","topSurface2","rightSurface2","bottomSurface2","loadTerrain","levelConf","tileSize","blockSize","Terrain","themeName","terrainMap","pathMap","surfaceMap","predugMap","cryOreMap","fallinMap","erodeMap","surfaceTypeNum","predugLevel","CAVERN_EXPOSED","SLUG_HOLE_EXPOSED","SLUG_HOLE_HIDDEN","CAVERN_HIDDEN","pathMapLevel","NONE","RUBBLE","currentCryOre","Graph","MoveState","dz","vec","targetReached","currentPath","getSpeed","isOnPath","moveToClosestTarget","equals","paths","findPathToTarget","TARGET_UNREACHABLE","nextLocation","firstLocation","step","determineStep","TARGET_REACHED","getRouteActivity","MOVED","getEntityStep","stepLengthSq","entitySpeed","JOB_ACTION_RANGE","setLength","EntityStep","determinePosY","isOnRubble","workInterval","followUpJob","jobWorkplaces","work","resetWorkInterval","dropItem","getWorldPosition","pickupItem","setJob","MovableEntity","RaiderTool","HAMMER","SHOVEL","SPANNER","FREEZERGUN","LASER","PUSHERGUN","BIRDSCARER","tools","skills","slipped","EntityAddedEvent","RAIDER","RaiderDiscoveredEvent","RaiderSelected","isDriving","spider","slip","onDeath","moveToClosestWorkplace","drillTimeMs","focusPoint","rotateAround","completeJob","CLEAR_RUBBLE","dynamite","moveResult","dropAction","TRAIN","RaiderTrained","GET_TOOL","tool","EAT","COMPLETE_POWER_PATH","hasTool","hasSkill","FulfillerEntity","powerSwitch","spawning","upgradeCostOre","upgradeCostBrick","crystalsInUse","inBeam","turnOnPower","BuildingSelected","worldPos","dropPos2D","hasMaxLevel","upgrade","canUpgrade","BRICK","BuildingUpgraded","spawnMaterials","turnOffPower","MonsterActivity","onLevelEnd","moveTimeout","startMoving","onMove","prevSurface","nextSurface","findTarget","currentCenter","targetZ","Monster","startRandomMove","bat","loadObjectList","objectListConf","values","olObject","lTypeName","xPos","yPos","terrainY","radHeading","heading","applyAxisAngle","update","setTorchPosition","Raider","BuildingEntity","primaryPathSurface","secondaryOffset","secondarySurface","pathOffset","pathSurface","requiredTool","requiredSkill","aiPriorityDestruction","SurfaceJob","debug","onLevelComplete","nerpInterval","registers","fill","timers","scriptLines","statements","macrosByName","labelsByName","halted","programCounter","messages","messagePermit","startExecution","execute","pauseExecution","checkRegister","register","num","isNaN","Error","checkRegisterValue","getR","setR","addR","setTimer","Date","getTime","getTimer","setLevelCompleted","setLevelFail","FAILED","setTutorialFlags","setMessagePermit","messagesAllowed","setBuildingsUpgradeLevel","typeName","setToolStoreLevel","setTeleportPadLevel","setPowerStationLevel","setBarracksLevel","getToolStoresBuilt","getMinifiguresOnLevel","getCrystalsCurrentlyStored","getObjectiveSwitch","setMessageTimerValues","arg1","arg2","arg3","getMessageTimer","cameraUnlock","setMessage","messageNumber","arrowDisabled","txt","setCameraGotoTutorial","getTutorialBlockIsGround","getTutorialBlockIsPath","getUnitAtBlock","getOxygenLevel","getObjectiveShowing","addPoweredCrystals","disallowAll","getPoweredPowerStationsBuilt","getPoweredBarracksBuilt","getRecordObjectAtTutorial","getHiddenObjectsFound","callMethod","methodName","methodArgs","setRegisterMatch","addRegisterMatch","getRegisterMatch","setTimerMatch","getTimerMatch","lMethodName","memberName","apply","conditional","conditionResult","executeStatement","expression","invoke","argValues","comparator","jump","statement","nerpScript","nerpRunner","NerpRunner","includeName","includedRunner","NerpParser","concat","firstLine","macroLines","mLine","append","macroLine","macroCall","replaceMacros","labelMatch","preProcess","labelName","macro","RegExp","number","opSplit","brackets","spaceSplit","jumpMatch","priorities","levelDefault","current","toggle","enabled","upOne","tmp","entry","PriorityEntry","pushToTop","getPriority","priority","j","levelPriorityEntry","spawnRaiderInterval","oxygenUpdateInterval","checkSpawnRaiders","CHECK_SPANW_RAIDER_TIMER","targetBuilding","DynamiteJob","updateOxygen","UPDATE_OXYGEN_TIMER","setup","gameScreen","reward","PriorityList","ambientRgb","maxAmbRgb","normalizedRgb","TerrainLoader","oListFile","ObjectListLoader","nerpFile","nerpMessageFile","now","stop","setSize","getTerrainIntersectionPoint","point","intersect","intersectObject","collectable","world","spawnBuildings","RaiderRequested","station","walkOutPos","MoveJob","applyEuler","diff","reduce","AirLevelChanged","selectStart","setWorldManager","worldManager","startSelection","changeSelection","screenX","screenY","clearRect","strokeStyle","lineWidth","strokeRect","aiPriorityClearing","rightDown","intersectionPoint","getTerrainPositionFromEvent","SECONDARY","createSurfaceJob","DrillJob","ClearRubbleJob","dispatchEvent","DEV_MODE","surfJob","relX","relY","hidden","addChild","child","updatePosition","drawHover","drawTooltip","onClick","isInactive","inRect","stateChanged","checkClick","checkRelease","release","notifyRedraw","xOut","yOut","xIn","yIn","movedIn","setMovedIn","onDone","toggleState","updateAnimation","PANEL_ANIMATION_MULTIPLIER","speed","diffX","diffY","BaseElement","btnCfg","buttonType","imgDisabled","normalFile","highlightFile","pressedFile","disabledFile","textAlign","buttonsCfg","labelOre","SideBarLabel","panelButtonCrystalSideBarOre","totalOre","labelCrystal","panelButtonCrystalSideBarCrystals","imgNoCrystal","imgSmallCrystal","imgUsedCrystal","imgOre","updateQuantities","curX","curY","imgCrystal","Panel","ButtonCfg","panelButtonInfoDockGoto","panelButtonInfoDockClose","panelButtonPriorityListDisable","panelButtonPriorityListUpOne","panelButtonPriorityListClose","panelButtonPriorityListReset","panelButtonTopPanelCallToArms","panelButtonTopPanelOptions","panelButtonTopPanelPriorities","panelRadar","panelCrystalSideBar","panelTopPanel","panelInformation","panelPriorityList","panelCameraControl","panelInfoDock","panelEncyclopedia","btnCfgValue","arr","ButtonRadarCfg","ButtonCrystalSideBarCfg","ButtonTopCfg","ButtonInformationCfg","ButtonPriorityListCfg","ButtonCameraControlCfg","ButtonInfoDockCfg","panelButtonInformationToggle","panelButtonInformationFunction","panelButtonCameraControlZoomIn","panelButtonCameraControlZoomOut","panelButtonCameraControlCycleBuildings","panelButtonCameraControlRotate","BaseButtonCfg","buttonImageFilename","panelFillCfg","panelOverlayCfg","overlay","btnToggle","Button","panelButtonRadarToggle","btnMap","panelButtonRadarMapView","btnTagged","panelButtonRadarTaggedObjectView","panelButtonRadarZoomIn","panelButtonRadarZoomOut","infoMessageEntryConfig","textImage","infoImage","imageFilename","textInfoMessageConfig","imgAir","currentMessage","messageTimeout","crystalFound","TextInfoMessage","textCrystalFound","msgSpaceToContinue","textSpaceToContinue","cavernDiscovered","textCavernDiscovered","oreFound","textOreFound","msgAirSupplyLow","textAirSupplyLow","msgAirSupplyRunningOut","textAirSupplyRunningOut","msgGameCompleted","textGameCompleted","msgManTrained","textManTrained","msgUnitUpgraded","textUnitUpgraded","textInfoMessage","unsetMessage","txtX","infoX","tooltipSfx","tooltipDisabled","tooltipDisabledSfx","hotkey","menuItemCfg","itemKey","parentWidth","menuIndex","isDisabled","updateState","autoRedraw","targetState","numOfItems","onBackPanel","backBtn","iconPanelButtons","backBtnCfg","IconPanelBackButtonCfg","frameImgCfg","imgName","imgNameWoBackName","addMenuItem","menuItemGroup","MenuItemCfg","menuItem","IconPanelButton","IconSubPanel","aiPriorityReinforce","itemDrill","addWallMenuItem","itemReinforce","ReinforceJob","itemDynamite","itemDeselect","createJob","selectedSurface","SpawnDynamiteEvent","SelectBasePanel","placedItems","workplaces","placed","aiPriorityConstruction","isPowerPath","neededByType","assignedByType","onSiteByType","needed","checkComplete","neededType","CompletePowerPathJob","pathItem","BuildingSite","removeItem","placeFenceItem","toolstation","clearRubbleItem","menuItemOffCfg","menuItemOnCfg","imgOnNormal","imgOnHover","imgOnPressed","imgOnDisabled","onToggleStateChange","powerSwitchItem","IconPanelToggleButton","upgradeItem","deleteBuildingItem","feedItem","selectedRaiders","EatJob","getToolItem","trainItem","deleteRaiderItem","x0","x1","SurfacePathTarget","targetArea","Area","trainDynamite","every","TrainJob","addGetToolItem","pathToToolstation","GetToolJob","targetPosition","subPanels","mainPanel","addSubPanel","buildingPanel","BuildingPanel","smallVehiclePanel","SmallVehiclePanel","largeVehiclePanel","LargeVehiclePanel","selectWallPanel","SelectWallPanel","selectFloorPanel","SelectFloorPanel","selectRubblePanel","SelectRubblePanel","selectBuildingPanel","SelectBuildingPanel","selectRaiderPanel","SelectRaiderPanel","trainRaiderPanel","TrainRaiderPanel","getToolPanel","GetToolPanel","selectVehiclePanel","SelectVehiclePanel","teleportRaider","MAX_RAIDER_REQUEST","IconPanelButtonLabel","buildingItem","smallVehicleItem","largeVehicleItem","onSelectedSurfaceChange","selectSubPanel","childPanel","targetPanel","subPanel","updated","isPressed","btnCallToArms","ToggleButton","btnOptions","btnPriorities","infoMessagesEntryConfig","InfoButtonCfg","animationSpeedX","animationSpeedY","message","buttonClicked","showButton","slideToTarget","Promise","resolve","infoMessagesConfig","informationPanel","stackButtons","gotoLatestMessage","dropLatestMessage","InfoDockButton","infoGenericDeath","infoGenericMonster","infoCrystalFound","infoUnderAttack","infoLandslide","infoPowerDrain","infoSlugEmerge","infoFoundMinifigure","btn","slideStackIntoPosition","then","slideInButton","prev","cur","pushFirst","setText","promises","all","panelRadarFill","panelRadarOverlay","panelMessages","panelMessagesSide","PanelCfg","prioPositions","prioByName","buttonCfg","setList","resetList","aiPriorityTrain","aiPriorityGetIn","aiPriorityRepair","aiPriorityRecharge","prioButton","sfx","timing","flag","InfoMessagesEntryConfig","sfxName","TextInfoMessageEntryConfig","panels","addPanel","panel","hit","onOptionsShow","panelsCfg","PanelsCfg","ButtonsCfg","InformationPanel","InfoDockPanel","InfoMessagesConfig","priorityButtonsConfig","PriorityButtonsConfig","priorityPositionsConfig","PriorityPositionsEntry","PriorityListPanel","TopPanel","panelMain","MainPanel","PanelCrystalSideBar","MessagePanel","TextInfoMessageConfig","RadarPanel","GuiBaseLayer","assignInterval","checkRubbleInterval","assignJobs","JOB_SCHEDULE_INTERVAL","checkUnclearedRubble","CHECK_CLEARRUBBLE_INTERVAL","availableJobs","unemployedRaider","closestRaider","closestRaiderIndex","minDistance","closestToolRaider","closestToolRaiderIndex","minToolDistance","closestToolstationPosition","closestNeededTool","closestTrainingRaider","closestTrainingRaiderIndex","minTrainingDistance","closestTrainingArea","closestNeededTraining","pathToJob","raiderPosition","neededTool","neededTraining","pathToTraining","rad","imgTitle","titleRelX","titleRelY","btnNext","btnBack","imgBack","imgParagraph","paragraph","titleFont","titleWindow","nextButtonCfg","nextParagraph","backButtonCfg","prevParagraph","setParagraph","objectiveText","objectiveBackImgCfg","textFont","textWindow","messagePanel","itemCfg","labelX","imgTextNormal","description","imgTextHover","imgLabelOffNormal","labelOff","imgLabelOffHover","imgLabelOnNormal","labelOn","imgLabelOnHover","imgLabel","sliderX","onValueChanged","imgLeft","imgOff","imgOn","imgRight","leftBtn","btnLeftNormal","btnLeftHover","rightBtn","btnRightNormal","btnRightHover","posX","dw","loImg","hiImg","itemsTrigger","itemsNext","menuFont","MenuLabelItem","itemsCycle","MenuCycleItem","itemsSlider","MenuSliderItem","layersByKey","MenuLayer","pausePanel","selectLayer","onRepeatBriefing","MenuBasePanel","onAbortGame","onRestartGame","image","okWindow","cancelWindow","contrastOverlay","Rect","dialogCfg","DialogCfg","panelPause","PausePanel","panelOptions","OptionsPanel","panelBriefing","BriefingPanel","BriefingPanelCfg","setActivePanel","lEventKey","gameLayer","GameLayer","selectionLayer","SelectionLayer","guiLayer","GuiMainLayer","overlayLayer","OverlayLayer","WorldManager","jobSupervisor","Supervisor","restartLevel","startLevel","setupAndStartLevel","objective","objectiveImage640x480","conf","imgNormalFilepath","imgHoverFilepath","imgPressedFilepath","imgDisabledFilepath","resultIndex","resultLastIndex","images","boxes","fonts","texts","uncoverTimeout","backgroundImg","wallpaper","filePath","boxImages","fontKey","labelFont","backFont","resultsLayer","btnSave","btnAdvance","descriptionTextLayer","btnLayer","RewardScreenButton","saveButton","advanceButton","onAdvance","uncoverResult","levelFullNameImg","resultText","quitText","completeText","failedText","resultValues","percentString","timeString","score","gameResultTextImg","box","vertSpacing","descriptionTextImg","textPos","tx","ty","actual","lessIsMore","padLeft","padding","seconds","ss","minutes","mm","loadingScreen","LoadingScreen","wadfileSelectModal","mainMenuScreen","MainMenuScreen","GameScreen","rewardScreen","RewardScreen","params","URLSearchParams"],"mappings":"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","file":"786.index.js","sourcesContent":["import { Modal } from 'bootstrap'\n\nexport class WadFileSelectionModal {\n\n    public onStart: (wad0Url, wad1Url) => any = null\n\n    private readonly modal: Modal\n\n    constructor(parentId: string) {\n        const rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        rootElement.classList.add('modal')\n        rootElement.tabIndex = -1\n        rootElement.setAttribute('role', 'dialog')\n        rootElement.setAttribute('aria-hidden', 'true')\n\n        const modalDialog = rootElement.appendChild(document.createElement('div'))\n        modalDialog.classList.add('modal-dialog')\n        rootElement.setAttribute('role', 'document')\n\n        const modalContent = modalDialog.appendChild(document.createElement('div'))\n        modalContent.classList.add('modal-content')\n\n        const modalHeader = modalContent.appendChild(document.createElement('div'))\n        modalHeader.classList.add('modal-header')\n        const modalTitle = modalHeader.appendChild(document.createElement('h5'))\n        modalTitle.classList.add('modal-title')\n        modalTitle.innerText = 'Load .wad files'\n        modalTitle.id = 'wadfileSelectModalLabel'\n        rootElement.setAttribute('aria-labelledby', modalTitle.id)\n\n        const modalBody = modalContent.appendChild(document.createElement('div'))\n        modalBody.classList.add('modal-body')\n\n        const hint = modalBody.appendChild(document.createElement('p'))\n        hint.innerText = 'Assets not included! In order to play the game, please select the game files.'\n\n        const navTabs = modalBody.appendChild(document.createElement('nav'))\n        const navTabList = navTabs.appendChild(document.createElement('div'))\n        navTabList.id = 'nav-tab'\n        navTabList.classList.add('nav', 'nav-tabs')\n        navTabList.setAttribute('role', 'tablist')\n\n        const navFileBtn = WadFileSelectionModal.appendNavButton(navTabList, true, 'nav-file-tab', 'nav-file', 'Local files (recommended)')\n        const navUrlBtn = WadFileSelectionModal.appendNavButton(navTabList, false, 'nav-url-tab', 'nav-url', 'Online from URL')\n\n        const navTabContent = modalBody.appendChild(document.createElement('div'))\n        navTabContent.classList.add('tab-content')\n        this.appendNavFileTab(navTabContent, navFileBtn.id)\n        this.appendNavUrlTab(navTabContent, navUrlBtn.id)\n\n        // rootElement has to be a valid bootstrap HTML modal before we can instantiate it\n        this.modal = new Modal(rootElement, {backdrop: 'static', keyboard: false})\n    }\n\n    private static appendNavButton(parent: HTMLDivElement, active: boolean, id: string, controlTarget: string, innerText: string) {\n        const navBtn = parent.appendChild(document.createElement('button'))\n        navBtn.classList.add('nav-link')\n        if (active) navBtn.classList.add('active')\n        navBtn.id = id\n        navBtn.setAttribute('data-bs-toggle', 'tab')\n        navBtn.setAttribute('data-bs-target', '#' + controlTarget)\n        navBtn.type = 'button'\n        navBtn.setAttribute('role', 'tab')\n        navBtn.setAttribute('aria-controls', controlTarget)\n        navBtn.setAttribute('aria-selected', String(active))\n        navBtn.innerText = innerText\n        return navBtn\n    }\n\n    private appendNavFileTab(parent: HTMLDivElement, labelledBy: string) {\n        const navFileTab = WadFileSelectionModal.appendNavTab(parent, true, 'nav-file', labelledBy)\n\n        const wad0File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad0-file', 'LegoRR0.wad')\n        const wad1File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad1-file', 'LegoRR1.wad')\n\n        const btnStartFile = navFileTab.appendChild(document.createElement('button'))\n        btnStartFile.type = 'submit'\n        btnStartFile.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartFile.id = 'button-start-file'\n        btnStartFile.innerText = 'Start Game'\n        btnStartFile.addEventListener('click', () => {\n            btnStartFile.disabled = true\n            const wad0FileUrl = URL.createObjectURL(wad0File.files[0])\n            const wad1FileUrl = URL.createObjectURL(wad1File.files[0])\n            this.onStart(wad0FileUrl, wad1FileUrl)\n        })\n    }\n\n    private static appendWadFileGroup(parent: HTMLDivElement, id: string, filename: string) {\n        const wadFileGroup = parent.appendChild(document.createElement('div'))\n        wadFileGroup.classList.add('my-3')\n        const wadFileLabel = wadFileGroup.appendChild(document.createElement('label'))\n        wadFileLabel.setAttribute('for', id)\n        wadFileLabel.classList.add('form-label')\n        wadFileLabel.innerHTML = 'Select <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadFileInput = wadFileGroup.appendChild(document.createElement('input'))\n        wadFileInput.type = 'file'\n        wadFileInput.classList.add('form-control')\n        wadFileInput.id = id\n        wadFileInput.required = true\n        return wadFileInput\n    }\n\n    private appendNavUrlTab(parent: HTMLDivElement, labelledBy: string) {\n        const navUrlTab = WadFileSelectionModal.appendNavTab(parent, false, 'nav-url', labelledBy)\n\n        const urlHint = navUrlTab.appendChild(document.createElement('div'))\n        urlHint.classList.add('my-3')\n        urlHint.innerText = 'Direct links with correct Allow-Origin-CORS-Headers required here.'\n\n        const wad0Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad0-url', 'LegoRR0.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n        const wad1Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad1-url', 'LegoRR1.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n\n        const btnStartUrl = navUrlTab.appendChild(document.createElement('button'))\n        btnStartUrl.type = 'submit'\n        btnStartUrl.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartUrl.id = 'button-start-url'\n        btnStartUrl.innerText = 'Start Game'\n        btnStartUrl.addEventListener('click', () => {\n            btnStartUrl.disabled = true\n            // XXX show loading progress for WAD files\n            this.onStart(wad0Url.value, wad1Url.value)\n        })\n    }\n\n    private static appendNavTab(parent: HTMLDivElement, active: boolean, id: string, labelledBy: string) {\n        const navTab = parent.appendChild(document.createElement('div'))\n        navTab.classList.add('tab-pane', 'fade')\n        if (active) navTab.classList.add('show', 'active')\n        navTab.id = id\n        navTab.setAttribute('role', 'tabpanel')\n        navTab.setAttribute('aria-labelledby', labelledBy)\n        return navTab\n    }\n\n    private static appendWadUrlGroup(parent: HTMLDivElement, id: string, filename: string, example: string) {\n        const wadUrlGroup = parent.appendChild(document.createElement('div'))\n        wadUrlGroup.classList.add('my-3')\n        const wadUrlLabel = wadUrlGroup.appendChild(document.createElement('label'))\n        wadUrlLabel.setAttribute('for', id)\n        wadUrlLabel.classList.add('form-label')\n        wadUrlLabel.innerHTML = 'Enter url for <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadUrlInput = wadUrlGroup.appendChild(document.createElement('input'))\n        wadUrlInput.type = 'url'\n        wadUrlInput.classList.add('form-control')\n        wadUrlInput.id = id\n        wadUrlInput.required = true\n        wadUrlInput.value = example\n        return wadUrlInput\n    }\n\n    public show() {\n        this.modal.show()\n    }\n\n    public hide() {\n        this.modal.hide()\n    }\n\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"index.worker.js\");\n}\n","export class InitLoadingMessage {\n\n    wad0FileUrl: string\n    wad1FileUrl: string\n\n    constructor(wad0FileUrl: string, wad1FileUrl: string) {\n        this.wad0FileUrl = wad0FileUrl\n        this.wad1FileUrl = wad1FileUrl\n    }\n\n}\n","/**\n * creates a new context with the specified dimensions.\n * @param width: the desired width of the new context\n * @param height: the desired height of the new context\n * @returns RenderingContext the newly created canvas\n */\nexport function createContext(width, height) {\n    if (width < 1 || height < 1) {\n        console.error('Can\\'t create context with size ' + width + ' x ' + height);\n        return createDummyContext(64, 64);\n    }\n    const canvas = document.createElement('canvas');\n    canvas.setAttribute('width', width);\n    canvas.setAttribute('height', height);\n    const context = canvas.getContext('2d');\n    context.width = width;\n    context.height = height;\n    return context;\n}\n\n/**\n * This method is intended to increase stability by providing an (ugly) placeholder image in case the right one is missing\n * @param width: expected width of the original image\n * @param height: expected height of the original image\n */\nexport function createDummyContext(width, height) {\n    const result = createContext(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            if (x / 16 % 2 === y / 16 % 2) {\n                result.fillStyle = 'rgb(0,255,255)';\n            } else {\n                result.fillStyle = 'rgb(255,0,255)';\n            }\n            result.fillRect(x, y, 16, 16);\n        }\n    }\n    return result;\n}\n\nexport function createDummyImgData(width, height) {\n    const result = new ImageData(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            const e = x / 16 % 2 === y / 16 % 2;\n            for (let px = x; px < x + 16; px++) {\n                for (let py = y; py < y + 16; py++) {\n                    setPixel(result, px, py, e ? 0 : 255, e ? 255 : 0, 255);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport function setPixel(imgData, x, y, r, g, b, a = 255) {\n    const n = (y * imgData.width + x) * 4;\n    imgData.data[n] = r;\n    imgData.data[n + 1] = g;\n    imgData.data[n + 2] = b;\n    imgData.data[n + 3] = a;\n}\n\nexport function getPixel(imgData, x, y) {\n    const n = (y * imgData.width + x) * 4;\n    return {r: imgData.data[n], g: imgData.data[n + 1], b: imgData.data[n + 2], a: imgData.data[n + 3]};\n}\n\nexport function copyPixel(originData, targetData, x, y) {\n    const p = getPixel(originData);\n    setPixel(targetData, p.r, p.g, p.b, p.a);\n}\n","export function getPath(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n","export function getFilename(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '')\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/')\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max)\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2\n}\n\nexport function clearTimeoutSafe(timeout: NodeJS.Timeout) {\n    if (timeout) clearTimeout(timeout)\n    return null\n}\n\nexport function clearIntervalSafe(interval: NodeJS.Timeout) {\n    if (interval) clearInterval(interval)\n    return null\n}\n\ndeclare global {\n\n    interface Array<T> {\n        remove(element: T): T\n    }\n\n    interface Map<K, V> {\n        getOrUpdate(key: K, updateCallback: () => V): V\n    }\n\n}\n\nArray.prototype.remove = function <T>(element: T): void {\n    const index = this.indexOf(element)\n    if (index !== -1) this.splice(index, 1)\n}\n\n// noinspection JSUnusedGlobalSymbols\nMap.prototype.getOrUpdate = function <K, V>(key: K, updateCallback: () => V): V {\n    let value = this.get(key)\n    if (value === undefined) {\n        value = updateCallback()\n        this.set(key, value)\n    }\n    return value\n}\n","import { AnimClip } from './AnimClip'\n\nexport class AnimationEntityType {\n\n    carryNullName: string = ''\n    depositNullName: string = ''\n    toolNullName: string = ''\n    mediumPoly: {} = {}\n    highPoly: {} = {}\n    fPPoly: {} = {}\n    activities: Map<string, { file: string, transcoef: number, lwsfile: boolean, animation: AnimClip }> = new Map()\n\n}\n","import { Mesh } from 'three'\nimport { clearIntervalSafe } from '../core/Util'\n\nexport class AnimatedMesh {\n\n    mesh: Mesh = null\n    textureSequences = []\n\n    constructor(mesh: Mesh, textureSequences: any[]) {\n        this.mesh = mesh\n        this.textureSequences = textureSequences\n    }\n\n    dispose() {\n        this.textureSequences.forEach((s) => clearIntervalSafe(s))\n        this.mesh.geometry.dispose()\n        Array.isArray(this.mesh.material) ? this.mesh.material.forEach(mat => mat.dispose()) : this.mesh.material?.dispose()\n    }\n\n}\n","// noinspection JSUnusedLocalSymbols\n\n/**\n * @author Marcus-Bizal https://github.com/marcbizal\n * patched by Scarabol\n *\n * This loader loads LWOB files exported from LW6.\n *\n * Support\n *  -\n */\n\nimport { AdditiveBlending, BufferAttribute, BufferGeometry, Color, DoubleSide, Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { decodeFilepath, decodeString, getFilename } from '../core/Util'\nimport { ResourceManager } from './ResourceManager'\nimport { SEQUENCE_TEXTURE_FRAMERATE } from '../main'\nimport { AnimatedMesh } from './AnimatedMesh'\n\n// HEADER SPEC //\nconst LWO_MAGIC = 0x4C574F42 // \"LWOB\"\nconst OFF_MAGIC = 8\n\n/********************/\n/* TYPE SIZES START */\n/********************/\n\nconst ID4_SIZE = 4\nconst I1_SIZE = 1\nconst I2_SIZE = 2\nconst I4_SIZE = 4\nconst F4_SIZE = 4\n\nconst COL4_SIZE = 4\nconst VEC12_SIZE = 12\nconst IP2_SIZE = 2\nconst FP4_SIZE = 4\nconst DEG4_SIZE = 4\n\n/********************/\n/*  TYPE SIZES END  */\n/********************/\n\n/*********************/\n/* CHUNK TYPES START */\n/*********************/\n\nconst LWO_FORM = 0x464F524D\nconst LWO_PNTS = 0x504E5453\nconst LWO_SFRS = 0x53524653\nconst LWO_POLS = 0x504F4C53\nconst LWO_CRVS = 0x43525653\nconst LWO_PCHS = 0x50434853\nconst LWO_SURF = 0x53555246\n\nconst CHUNK_HEADER_SIZE = 8\nconst SUBCHUNK_HEADER_SIZE = 6\n\n/*********************/\n/*  CHUNK TYPES END  */\n/*********************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\nconst SURF_COLR = 0x434F4C52\nconst SURF_FLAG = 0x464C4147\n\n// Base Shading Values (Fixed Point)\nconst SURF_LUMI = 0x4C554D49\nconst SURF_DIFF = 0x44494646\nconst SURF_SPEC = 0x53504543\nconst SURF_REFL = 0x5245464C\nconst SURF_TRAN = 0x5452414E\n\n// Base Shading Values (Floating Point)\nconst SURF_VLUM = 0x564C554D\nconst SURF_VDIF = 0x56444946\nconst SURF_VSPC = 0x56535043\nconst SURF_VRFL = 0x5646524C\nconst SURF_VTRN = 0x5654524E\n\nconst SURF_GLOS = 0x474C4F53\nconst SURF_RFLT = 0x52464C54\nconst SURF_RIMG = 0x52494D47\nconst SURF_RIND = 0x52494E44\nconst SURF_EDGE = 0x45444745\nconst SURF_SMAN = 0x534D414E\n\n/**************************/\n/*  SURF DEFINITIONS END  */\n/**************************/\n\n/*****************************/\n/* TEXTURE DEFINITIONS START */\n/*****************************/\n\n// Start of Definition\nconst SURF_CTEX = 0x43544558\nconst SURF_DTEX = 0x44544558\nconst SURF_STEX = 0x53544558\nconst SURF_RTEX = 0x52544558\nconst SURF_TTEX = 0x54544558\nconst SURF_LTEX = 0x4C544558\nconst SURF_BTEX = 0x42544558\n\n// Flags\nconst SURF_TFLG = 0x54464C47\n\n// Location and Size\nconst SURF_TSIZ = 0x5453495A\nconst SURF_TCTR = 0x54435452\nconst SURF_TFAL = 0x5446414C\nconst SURF_TVEL = 0x5456454C\n\n// Color\nconst SURF_TCLR = 0x54434C52\n\n// Value\nconst SURF_TVAL = 0x54434C52\n\n// Bump Amplitude\nconst SURF_TAMP = 0x54414D50\n\n// Image Map\nconst SURF_TIMG = 0x54494D47\n\n// Image Alpha\nconst SURF_TALP = 0x54414C50\n\n// Image Wrap Options\nconst SURF_TWRP = 0x54575250\n\n// Antialiasing Strength\nconst SURF_TAAS = 0x54414153\n\n// Texture Opacity\nconst SURF_TOPC = 0x544F5043\n\n/*****************************/\n/*  TEXTURE DEFINITIONS END  */\n/*****************************/\n\n/*************************/\n/* FLAG DEFINITION START */\n/*************************/\n\nconst LUMINOUS_BIT = 1\nconst OUTLINE_BIT = 2\nconst SMOOTHING_BIT = 4\nconst COLORHIGHLIGHTS_BIT = 8\nconst COLORFILTER_BIT = 16\nconst OPAQUEEDGE_BIT = 32\nconst TRANSPARENTEDGE_BIT = 64\nconst SHARPTERMINATOR_BIT = 128\nconst DOUBLESIDED_BIT = 256\nconst ADDITIVE_BIT = 512\nconst SHADOWALPHA_BIT = 1024\n\n/*************************/\n/*  FLAG DEFINITION END  */\n/*************************/\n\n/*************************/\n/* TFLG DEFINITION START */\n/*************************/\n\nconst XAXIS_BIT = 1\nconst YAXIS_BIT = 2\nconst ZAXIS_BIT = 4\nconst WORLDCOORDS_BIT = 8\nconst NEGATIVEIMAGE_BIT = 16\nconst PIXELBLENDING_BIT = 32\nconst ANTIALIASING_BIT = 64\n\n/*************************/\n/*  TFLG DEFINITION END  */\n\n/*************************/\n\nfunction getVector3AtOffset(view, offset) {\n    let vector = new Vector3()\n    vector.x = view.getFloat32(offset)\n    vector.y = view.getFloat32(offset + F4_SIZE)\n    vector.z = view.getFloat32(offset + (F4_SIZE * 2))\n    return vector\n}\n\nfunction planarMapUVS(geometry, vertices, uvs, indices, materialIndex, size, center, flags) {\n    // Check to ensure that one of the flags is set, if not throw an error.\n    const mask = XAXIS_BIT | YAXIS_BIT | ZAXIS_BIT\n    if (flags & mask) {\n        for (let group of geometry.groups) {\n            if (group.materialIndex !== materialIndex) continue\n\n            for (let i = group.start; i < group.start + group.count; i++) {\n\n                let vertexIndex = indices[i] * 3\n                let x = vertices[vertexIndex] - center.x\n                let y = vertices[vertexIndex + 1] - center.y\n                let z = vertices[vertexIndex + 2] - center.z\n\n                let uvIndex = indices[i] * 2\n                let u = 0\n                let v = 0\n\n                if (flags & XAXIS_BIT) {\n                    u = z / size.z + 0.5\n                    v = y / size.y + 0.5\n                } else if (flags & YAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = z / size.z + 0.5\n                } else if (flags & ZAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = y / size.y + 0.5\n                }\n\n                uvs[uvIndex] = u\n                uvs[uvIndex + 1] = v\n            }\n        }\n    } else {\n        // console.warn(\"LWOLoader.planarMapUVS: No axis bit is set!\"); // XXX what is this about\n    }\n}\n\nexport class LWOLoader {\n\n    COUNTER_CLOCKWISE: false\n\n    path: string = ''\n    verbose: boolean = false\n    materials: MeshPhongMaterial[] = []\n    geometry: BufferGeometry = new BufferGeometry()\n    vertices: Float32Array = null\n    indices: Uint16Array = null\n    uvs: Float32Array = null\n    sequenceIntervals = []\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('LWO path: ' + this.path)\n    }\n\n    parsePoints(view, chunkOffset, chunkSize) {\n        if (chunkSize % VEC12_SIZE !== 0) {\n            console.error('LWOLoader.parse: F12 does not evenly divide into chunk size (' + chunkSize + '). Possible corruption.')\n            return\n        }\n\n        let numVertices = (chunkSize / F4_SIZE) / 3\n        this.vertices = new Float32Array(numVertices * 3)\n        this.uvs = new Float32Array(numVertices * 2)\n\n        for (let i = 0; i < numVertices; i++) {\n            let vertexIndex = i * 3\n            let vertexOffset = vertexIndex * F4_SIZE\n            this.vertices[vertexIndex] = view.getFloat32(chunkOffset + vertexOffset) \t\t\t\t// x\n            this.vertices[vertexIndex + 1] = view.getFloat32(chunkOffset + vertexOffset + F4_SIZE) \t// y\n            this.vertices[vertexIndex + 2] = view.getFloat32(chunkOffset + vertexOffset + (F4_SIZE * 2)) \t// z\n        }\n    }\n\n    parseSurfaceNames(buffer, chunkOffset, chunkSize) {\n        let textChunk = new TextDecoder().decode(new Uint8Array(buffer, chunkOffset, chunkSize))\n        let surfaceNames = textChunk.split('\\0').filter(function (s) {\n            return s !== ''\n        })\n\n        for (let i = 0; i < surfaceNames.length; i++) {\n            const new_material = new MeshPhongMaterial()\n            new_material.name = surfaceNames[i]\n            new_material.side = DoubleSide\n\n            this.materials.push(new_material)\n        }\n        if (this.verbose) console.log('LWO contains ' + this.materials.length + ' materials with following names: ' + surfaceNames)\n    }\n\n    parsePolygons(view, chunkOffset, chunkSize) {\n        // Gather some initial data so that we can get the proper size\n        let totalNumIndices = 0\n        let offset = 0\n        while (offset < chunkSize) {\n            const numIndices = view.getInt16(chunkOffset + offset)\n            const materialIndex = view.getInt16(chunkOffset + offset + 2 + (numIndices * 2))\n\n            this.geometry.addGroup(totalNumIndices, (numIndices - 2) * 3, materialIndex - 1)\n\n            totalNumIndices += (numIndices - 2) * 3\n            offset += 4 + (numIndices * 2)\n        }\n\n        offset = 0\n        let currentIndex = 0\n        this.indices = new Uint16Array(totalNumIndices)\n        while (offset < chunkSize) {\n            let numIndices = view.getInt16(chunkOffset + offset)\n\n            offset += 2\n\n            let faceIndices = new Int16Array(numIndices)\n            for (let i = 0; i <= numIndices; i++) {\n                faceIndices[i] = view.getInt16(chunkOffset + offset + (i * 2))\n            }\n\n            for (let i = 0; i < numIndices - 2; i++) {\n                if (this.COUNTER_CLOCKWISE) {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                } else {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                }\n            }\n\n            offset += 2 + (numIndices * 2)\n        }\n    }\n\n    parseSurface(view, buffer, chunkOffset, chunkSize) {\n        let offset = 0\n        while (view.getUint8(chunkOffset + offset) !== 0) offset++\n\n        let materialName = decodeString(new Uint8Array(buffer, chunkOffset, offset))\n        if (this.verbose) console.log('Parsing surface: ' + materialName)\n        let materialIndex = -1\n        let material: MeshPhongMaterial = null\n\n        let textureFlags = 0\n        let textureSize = new Vector3(0, 0, 0)\n        let textureCenter = new Vector3(0, 0, 0)\n        // let textureFalloff = new Vector3(0, 0, 0);\n        // let textureVelocity = new Vector3(0, 0, 0);\n\n        for (let i = 0; i < this.materials.length; i++) {\n            if (this.materials[i].name === materialName) {\n                materialIndex = i\n                material = this.materials[i]\n            }\n        }\n\n        if (!material) {\n            console.error('LWOLoader.parse: Surface in SURF chunk does not exist in SRFS')\n            return\n        }\n\n        material.shininess = 0\n\n        while (offset < chunkSize) {\n            const subchunkOffset = chunkOffset + offset\n            if (view.getUint8(subchunkOffset) === 0) {\n                offset++\n            } else {\n                const subchunkType = view.getInt32(subchunkOffset)\n                const subchunkSize = view.getInt16(subchunkOffset + ID4_SIZE)\n\n                if (this.verbose) console.log('Parsing subchunk ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n\n                switch (subchunkType) {\n                    case SURF_COLR:\n                        const colorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                        ]\n                        material.color = new Color().fromArray(colorArray)\n                        if (this.verbose) console.log('Material color (COLR): ' + colorArray.join(' '))\n                        break\n                    case SURF_FLAG:\n                        const flags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (FLAG): ' + flags.toString(2))\n                        // if (this.verbose && flags & LUMINOUS_BIT) console.warn('Flag is set but unhandled: luminous') // flag replaced with LUMI below\n                        if (this.verbose && flags & OUTLINE_BIT) console.warn('Flag is set but unhandled: outline')\n                        if (this.verbose && flags & SMOOTHING_BIT) console.warn('Flag is set but unhandled: smoothing')\n                        if (this.verbose && flags & COLORHIGHLIGHTS_BIT) console.warn('Flag is set but unhandled: colorHighlights')\n                        if (this.verbose && flags & COLORFILTER_BIT) console.warn('Flag is set but unhandled: colorFilter')\n                        if (this.verbose && flags & OPAQUEEDGE_BIT) console.warn('Flag is set but unhandled: opaqueEdge')\n                        if (this.verbose && flags & TRANSPARENTEDGE_BIT) console.warn('Flag is set but unhandled: transparentEdge')\n                        if (this.verbose && flags & SHARPTERMINATOR_BIT) console.warn('Flag is set but unhandled: sharpTerminator')\n                        if (flags & DOUBLESIDED_BIT) material.side = DoubleSide\n                        if (flags & ADDITIVE_BIT) {\n                            material.blending = AdditiveBlending\n                            material.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n                        }\n                        if (this.verbose && flags & SHADOWALPHA_BIT) console.warn('Flag is set but unhandled: shadowAlpha')\n                        break\n                    case SURF_EDGE:\n                        const edgeTransparencyThreshold = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Edge transparency threshold (0.0 to 1.0): ' + edgeTransparencyThreshold)\n                        break\n                    case SURF_LUMI:\n                        const luminosity = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.log('Luminosity (LUMI): ' + luminosity)\n                        material.emissiveIntensity = luminosity\n                        break\n                    case SURF_DIFF:\n                        const diffuse = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.log('Diffuse (DIFF): ' + diffuse)\n                        if (!diffuse) material.color = null\n                        break\n                    case SURF_SPEC:\n                        const specular = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        // material.specular = material.color.multiplyScalar(specular);\n                        if (this.verbose) console.warn('Specular (SPEC): ' + specular)\n                        break\n                    case SURF_REFL:\n                        let reflection = 0\n                        if (reflection === SURF_VRFL) {\n                            reflection = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            reflection = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        }\n                        material.reflectivity = reflection\n                        if (this.verbose) console.log('Reflectivity (REFL): ' + material.reflectivity)\n                        break\n                    case SURF_TRAN:\n                    case SURF_VTRN:\n                        let transparency = 0\n                        if (subchunkType === SURF_VTRN) {\n                            transparency = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            transparency = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        }\n                        material.opacity = 1 - transparency\n                        if (this.verbose) console.log('Opacity (TRAN/VTRN): ' + material.opacity)\n                        material.transparent = material.opacity < 1\n                        break\n                    case SURF_VLUM:\n                        const vLuminosity = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Luminosity (VLUM): ' + vLuminosity)\n                        material.emissiveIntensity = vLuminosity\n                        break\n                    case SURF_VDIF:\n                        let vDiffuse = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Diffuse (VDIF): ' + vDiffuse)\n                        // material.vertexColors = !!vDiffuse // XXX push vertex colors first\n                        break\n                    case SURF_VSPC:\n                        let vSpecular = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        // material.specular = material.color.multiplyScalar(vSpecular);\n                        if (this.verbose) console.warn('Specular (VSPC): ' + vSpecular)\n                        break\n                    case SURF_TFLG:\n                        textureFlags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (TFLG): ' + textureFlags.toString(2))\n                        if (this.verbose && textureFlags & XAXIS_BIT) console.warn('Flag is set but unhandled: X Axis')\n                        if (this.verbose && textureFlags & YAXIS_BIT) console.warn('Flag is set but unhandled: Y Axis')\n                        if (this.verbose && textureFlags & ZAXIS_BIT) console.warn('Flag is set but unhandled: Z Axis')\n                        if (this.verbose && textureFlags & WORLDCOORDS_BIT) console.warn('Flag is set but unhandled: World Coords')\n                        if (this.verbose && textureFlags & NEGATIVEIMAGE_BIT) console.warn('Flag is set but unhandled: Negative Image')\n                        if (this.verbose && textureFlags & PIXELBLENDING_BIT) console.warn('Flag is set but unhandled: Pixel Blending')\n                        if (this.verbose && textureFlags & ANTIALIASING_BIT) console.log('Flag is set: Antialiasing') // turned on by default\n                        break\n                    case SURF_TSIZ:\n                        textureSize = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Texture size (TSIZ): ' + textureSize.toArray().join(' '))\n                        break\n                    case SURF_TCTR:\n                        textureCenter = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.warn('Texture center (TCTR): ' + textureCenter.toArray().join(' '))\n                        break\n                    case SURF_CTEX:\n                    case SURF_DTEX:\n                    case SURF_STEX:\n                    case SURF_RTEX:\n                    case SURF_TTEX:\n                    case SURF_BTEX:\n                        const textureTypeName = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture typename: ' + textureTypeName)\n                        // XXX handle different texture types\n                        break\n                    case SURF_TVAL: // always 0 in the game\n                        const textureValue = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 256\n                        if (this.verbose) console.warn('Texture value (TVAL): ' + textureValue)\n                        break\n                    case SURF_TCLR:\n                        const textureColorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        // const textureColor = new Color().fromArray(textureColorArray);\n                        // seems to be 0 0 0 anyway...\n                        if (this.verbose) console.log('Texture color (TCLR): ' + textureColorArray.join(' '))\n                        break\n                    case SURF_TIMG:\n                        let textureFilepath = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture filepath (TIMG): ' + textureFilepath)\n                        if (textureFilepath === '(none)') break\n                        let sequenceTexture = false\n                        if (textureFilepath.endsWith(' (sequence)')) {\n                            sequenceTexture = true\n                            textureFilepath = textureFilepath.substring(0, textureFilepath.length - ' (sequence)'.length)\n                        }\n                        let filename = getFilename(textureFilepath)\n                        material.transparent = !!filename.match(/^a\\d+.+.bmp/i)\n                        const textureFilename = this.path + filename\n                        if (sequenceTexture) {\n                            const match = textureFilename.match(/(.+\\D)0+(\\d+)\\..+/)\n                            const sequenceNames = ResourceManager.filterTextureSequenceNames(match[1])\n                            if (sequenceNames) {\n                                let seqNum = 0\n                                this.sequenceIntervals.push(setInterval(() => {\n                                    material.map = ResourceManager.getTexture(sequenceNames[seqNum])\n                                    material.color = null // no need for color, when color map (texture) in use\n                                    seqNum++\n                                    if (seqNum >= sequenceNames.length) seqNum = 0\n                                }, 1000 / SEQUENCE_TEXTURE_FRAMERATE))\n                            }\n                        }\n                        const lTextureName = textureFilename.toLowerCase()\n                        if (lTextureName === 'miscanims/barrier/a_side.bmp' // workaround (TODO actually never add unknown textures?)\n                            || lTextureName === 'miscanims/barrier/a_top.bmp'\n                            || lTextureName === 'miscanims/barrier/a_bstripes.bmp'\n                            || lTextureName === 'buildings/geo-dome/a_walkie.bmp'\n                            || lTextureName === 'world/shared/teofoilreflections.jpg'\n                            || lTextureName === 'buildings/barracks/wingbase3.bmp') {\n                            break\n                        }\n                        material.map = ResourceManager.getTexture(textureFilename)\n                        material.color = null // no need for color, when color map (texture) in use\n                        break\n                    default: // TODO implement all LWO features\n                        if (this.verbose) console.warn('Found unrecognised SURF subchunk type ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n                        break\n                }\n\n                offset += SUBCHUNK_HEADER_SIZE + subchunkSize\n            }\n        }\n\n        planarMapUVS(this.geometry, this.vertices, this.uvs, this.indices, materialIndex, textureSize, textureCenter, textureFlags)\n    }\n\n    parse(buffer: ArrayBuffer): AnimatedMesh {\n        const view = new DataView(buffer)\n\n        if (view.getUint32(0) !== LWO_FORM) {\n            console.error('LWOLoader.parse: Cannot find header.')\n            return\n        }\n\n        const fileSize = view.getUint32(ID4_SIZE)\n        if (fileSize + CHUNK_HEADER_SIZE !== view.byteLength) {\n            console.warn('LWOLoader.parse: Discrepancy between size in header (' + (fileSize + CHUNK_HEADER_SIZE) + ' bytes) and actual size (' + view.byteLength + ' bytes).')\n        }\n\n        let magicOffset = ID4_SIZE + I4_SIZE\n        if (view.getUint32(magicOffset) !== LWO_MAGIC) {\n            const magic = decodeString(new Uint8Array(buffer, magicOffset, ID4_SIZE))\n            console.error('LWOLoader.parse: Invalid magic ID (' + magic + ') in LWO header.')\n            return\n        }\n\n        let cursor = 12\n        while (cursor < view.byteLength) {\n            // Skip null byte padding\n            if (view.getUint8(cursor) === 0) {\n                cursor++\n            } else {\n                const chunkType = view.getInt32(cursor)\n                const chunkSize = view.getInt32(cursor + ID4_SIZE)\n\n                cursor += CHUNK_HEADER_SIZE\n\n                switch (chunkType) {\n                    case LWO_PNTS:\n                        this.parsePoints(view, cursor, chunkSize)\n                        break\n                    case LWO_SFRS:\n                        this.parseSurfaceNames(buffer, cursor, chunkSize)\n                        break\n                    case LWO_POLS:\n                        this.parsePolygons(view, cursor, chunkSize)\n                        break\n                    case LWO_SURF:\n                        this.parseSurface(view, buffer, cursor, chunkSize)\n                        break\n                    default:\n                        console.warn('Found unrecognised chunk type ' + decodeString(new Uint8Array(buffer, cursor - CHUNK_HEADER_SIZE, ID4_SIZE)) + ' at ' + cursor)\n                }\n\n                cursor += chunkSize\n            }\n\n        }\n\n        this.geometry.setAttribute('position', new BufferAttribute(this.vertices, 3))\n        this.geometry.setAttribute('uv', new BufferAttribute(this.uvs, 2))\n        this.geometry.setIndex(new BufferAttribute(this.indices, 1))\n        this.geometry.computeVertexNormals()\n\n        return new AnimatedMesh(new Mesh(this.geometry, this.materials), this.sequenceIntervals)\n    }\n}\n","import { Vector3 } from 'three'\nimport { SelectionEvent } from '../../event/LocalEvents'\n\nexport interface Selectable {\n\n    getSelectionType(): SelectionType;\n\n    select(): SelectionEvent;\n\n    deselect(): any;\n\n    getSelectionCenter(): Vector3;\n\n}\n\nexport enum SelectionType {\n\n    SURFACE,\n    PILOT,\n    BUILDING,\n    VEHICLE,\n    GROUP,\n\n}\n","import { AnimSubObj } from './AnimSubObj'\n\nexport class AnimClip {\n\n    looping: boolean = false\n    transcoef: number = 1\n    firstFrame: number = null\n    lastFrame: number = null\n    framesPerSecond: number = null\n    bodies: AnimSubObj[] = []\n\n}\n","import { Euler, MathUtils, Object3D, Vector3 } from 'three'\nimport degToRad = MathUtils.degToRad\n\nexport class AnimSubObj {\n\n    name: string = ''\n    filename: string = ''\n    relPos: Vector3[] = []\n    relRot: Euler[] = []\n    relScale: Vector3[] = []\n    opacity: number[] = []\n    parentObjInd: number = null\n    model: Object3D = null\n\n    radVec(degX: number, degY: number, degZ: number) {\n        return new Euler(degToRad(degY), degToRad(degX), degToRad(degZ), 'YXZ')\n    }\n\n    setFrameAndFollowing(animationFrameIndex: number, lastFrame: number, infos: number[]) {\n        this.relPos[animationFrameIndex] = new Vector3(infos[0], infos[1], infos[2])\n        this.relRot[animationFrameIndex] = this.radVec(infos[3], infos[4], infos[5])\n        this.relScale[animationFrameIndex] = new Vector3(infos[6], infos[7], infos[8])\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.relPos[c] = this.relPos[animationFrameIndex]\n            this.relRot[c] = this.relRot[animationFrameIndex]\n            this.relScale[c] = this.relScale[animationFrameIndex]\n        }\n    }\n\n    setOpacityAndFollowing(animationFrameIndex: number, lastFrame: number, value: number) {\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.opacity[c] = value\n        }\n    }\n\n}\n","const Stats = require('stats.js')\n\nexport class DebugHelper {\n\n    stats\n\n    constructor() {\n        this.stats = new Stats()\n        this.stats.setMode(0) // 0: fps, 1: ms\n\n        this.stats.domElement.style.position = 'absolute'\n        this.stats.domElement.style.left = '0px'\n        this.stats.domElement.style.top = '0px'\n\n        document.body.appendChild(this.stats.domElement)\n        this.hide()\n    }\n\n    show() {\n        this.stats.domElement.style.visibility = 'visible'\n    }\n\n    hide() {\n        this.stats.domElement.style.visibility = 'hidden'\n    }\n\n    renderStart() {\n        this.stats.begin()\n    }\n\n    renderDone() {\n        this.stats.end()\n    }\n\n}\n","export class Building {\n\n    // XXX dynamically read building types from cfg at BuildingTypes\n    static readonly TOOLSTATION = new Building('Toolstation', 'Buildings/Toolstation', false)\n    static readonly TELEPORT_PAD = new Building('TeleportPad', 'Buildings/Teleports')\n    static readonly DOCKS = new Building('Docks', 'Buildings/Docks', true,\n        null, null, true, {x: 0, y: 1})\n    static readonly POWER_STATION = new Building('Powerstation', 'Buildings/Powerstation', true,\n        {x: 1, y: 0})\n    static readonly BARRACKS = new Building('Barracks', 'Buildings/Barracks')\n    static readonly UPGRADE = new Building('Upgrade', 'Buildings/Upgrade')\n    static readonly GEODOME = new Building('Geo-dome', 'Buildings/Geo-dome', true,\n        {x: 0, y: -1}, null, false)\n    static readonly ORE_REFINERY = new Building('OreRefinery', 'Buildings/OreRefinery', true,\n        {x: 0, y: 1})\n    static readonly GUNSTATION = new Building('Gunstation', 'Buildings/gunstation', true,\n        null, null, false)\n    static readonly TELEPORT_BIG = new Building('TeleportBIG', 'Buildings/BIGTeleport', true,\n        {x: -1, y: 0}, {x: -1, y: -1})\n\n    name: string\n    aeFile: string\n    blocksPathSurface: boolean\n    secondaryBuildingPart: { x: number, y: number }\n    secondaryPowerPath: { x: number, y: number }\n    hasPrimaryPowerPath: boolean\n    waterPathSurface: { x: number, y: number }\n\n    constructor(name: string, folder: string, blocksPathSurface: boolean = true, secondaryBuildingPart: { x: number, y: number } = null, secondaryPowerPath: { x: number, y: number } = null, hasPrimaryPowerPath: boolean = true, waterPathSurface: { x: number, y: number } = null) {\n        this.name = name\n        this.aeFile = folder + '/' + folder.slice(folder.lastIndexOf('/') + 1) + '.ae'\n        this.blocksPathSurface = blocksPathSurface\n        this.secondaryBuildingPart = secondaryBuildingPart\n        this.secondaryPowerPath = secondaryPowerPath\n        this.hasPrimaryPowerPath = hasPrimaryPowerPath\n        this.waterPathSurface = waterPathSurface\n    }\n\n    static getByName(buildingType: string) {\n        const typename = buildingType.slice(buildingType.lastIndexOf('/') + 1).toLowerCase()\n        switch (typename) {\n            case 'toolstation':\n                return this.TOOLSTATION\n            case 'teleports':\n                return this.TELEPORT_PAD\n            case 'docks':\n                return this.DOCKS\n            case 'powerstation':\n                return this.POWER_STATION\n            case 'barracks':\n                return this.BARRACKS\n            case 'upgrade':\n                return this.UPGRADE\n            case 'geo-dome':\n                return this.GEODOME\n            case 'orerefinery':\n                return this.ORE_REFINERY\n            case 'gunstation':\n                return this.GUNSTATION\n            case 'teleportbig':\n                return this.TELEPORT_BIG\n            default:\n                throw 'Unknown building type: ' + buildingType\n        }\n    }\n\n}\n","import { WorldManager } from '../WorldManager'\nimport { Group, Vector2 } from 'three'\nimport { Surface } from './map/Surface'\n\nexport abstract class BaseEntity {\n\n    worldMgr: WorldManager\n    group: Group = new Group()\n    level: number = 0\n\n    abstract get stats()\n\n    getPosition() {\n        return this.group.position.clone()\n    }\n\n    getPosition2D() {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    getHeading(): number {\n        return this.group.rotation.y\n    }\n\n    onDiscover() {\n        this.group.visible = true\n    }\n\n    getCurrentSurface(): Surface {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position)\n    }\n\n    removeFromScene() {\n        this.worldMgr.sceneManager.scene.remove(this.group)\n    }\n\n}\n","export enum EventKey {\n\n    SELECTED_SURFACE,\n    SELECTED_BUILDING,\n    SELECTED_RAIDER,\n    SELECTED_VEHICLE,\n\n    DESELECTED_ENTITY,\n\n    JOB_CREATE,\n    JOB_DELETE,\n\n    RAIDER_REQUESTED,\n\n    MATERIAL_AMOUNT_CHANGED,\n\n    SPAWN_DYNAMITE,\n\n    ENTITY_ADDED,\n    ENTITY_REMOVED,\n\n    CAVERN_DISCOVERED,\n\n    ORE_FOUND,\n\n    BUILDING_UPGRADED,\n\n    RAIDER_TRAINED,\n\n    LOCATION_DEATH,\n    LOCATION_MONSTER,\n    LOCATION_CRYSTAL_FOUND,\n    LOCATION_UNDER_ATTACK,\n    LOCATION_LANDSLIDE,\n    LOCATION_POWER_DRAIN,\n    LOCATION_SLUG_EMERGE,\n    LOCATION_RAIDER_DISCOVERED,\n\n    SURFACE_CHANGED,\n    AIR_LEVEL_CHANGED,\n\n}\n","import { GameEvent } from './GameEvent'\nimport { EventKey } from './EventKeyEnum'\n\nexport class EventBus {\n\n    static eventListener = new Map<EventKey, ((event: GameEvent) => any)[]>()\n    static blockedEvents = []\n\n    static publishEvent(event: GameEvent) {\n        if (this.blockedEvents.includes(event.eventKey)) return // event is currently blocked from publishing\n        if (!event.isLocal) console.log('Event published: ' + EventKey[event.eventKey])\n        this.blockedEvents.push(event.eventKey)\n        this.getListener(event.eventKey).forEach((callback) => callback(event))\n        this.blockedEvents.remove(event.eventKey)\n    }\n\n    static registerEventListener(eventKey: EventKey, callback: (GameEvent) => any) {\n        this.getListener(eventKey).push(callback)\n    }\n\n    private static getListener(eventKey: EventKey) {\n        return this.eventListener.getOrUpdate(eventKey, () => [])\n    }\n\n    // TODO cleanup/unregister all event listener at level end?!\n\n}\n","import { PublicJob } from '../game/model/job/Job'\nimport { CollectableType } from '../scene/model/collect/CollectableEntity'\nimport { AnimEntity } from '../scene/model/anim/AnimEntity'\nimport { Surface } from '../scene/model/map/Surface'\nimport { BuildingEntity } from '../scene/model/BuildingEntity'\nimport { FulfillerEntity } from '../scene/model/FulfillerEntity'\nimport { RaiderSkill } from '../scene/model/RaiderSkill'\nimport { GameEvent } from './GameEvent'\nimport { EventKey } from './EventKeyEnum'\n\nexport class WorldEvent extends GameEvent {\n\n    constructor(entityKey: EventKey) {\n        super(entityKey)\n        this.isLocal = false\n    }\n\n}\n\nexport class JobEvent extends WorldEvent {\n\n    job: PublicJob\n\n    constructor(eventKey: EventKey, job: PublicJob) {\n        super(eventKey)\n        this.job = job\n    }\n\n}\n\nexport class JobCreateEvent extends JobEvent {\n\n    constructor(job: PublicJob) {\n        super(EventKey.JOB_CREATE, job)\n    }\n\n}\n\nexport class JobDeleteEvent extends JobEvent {\n\n    constructor(job: PublicJob) {\n        super(EventKey.JOB_DELETE, job)\n    }\n\n}\n\nexport class RaiderRequested extends WorldEvent {\n\n    constructor() {\n        super(EventKey.RAIDER_REQUESTED)\n    }\n\n}\n\nexport class MaterialAmountChanged extends WorldEvent {\n\n    collectableType: CollectableType\n\n    constructor(collectableType: CollectableType) {\n        super(EventKey.MATERIAL_AMOUNT_CHANGED)\n        this.collectableType = collectableType\n    }\n\n}\n\nexport class SpawnDynamiteEvent extends WorldEvent {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(EventKey.SPAWN_DYNAMITE)\n        this.surface = surface\n    }\n\n}\n\nexport class EntityAddedEvent extends WorldEvent {\n\n    type: EntityType\n    entity: AnimEntity\n\n    constructor(type: EntityType, entity: AnimEntity) {\n        super(EventKey.ENTITY_ADDED)\n        this.type = type\n        this.entity = entity\n    }\n\n}\n\nexport class EntityRemovedEvent extends WorldEvent {\n\n    type: EntityType\n    entity: AnimEntity\n\n    constructor(type: EntityType, entity: AnimEntity) {\n        super(EventKey.ENTITY_REMOVED)\n        this.type = type\n        this.entity = entity\n    }\n\n}\n\nexport enum EntityType {\n\n    RAIDER,\n    VEHICLE,\n    BUILDING,\n\n}\n\nexport class CavernDiscovered extends WorldEvent {\n\n    constructor() {\n        super(EventKey.CAVERN_DISCOVERED)\n    }\n\n}\n\nexport class OreFoundEvent extends WorldEvent {\n\n    constructor() {\n        super(EventKey.ORE_FOUND)\n    }\n\n}\n\nexport class BuildingUpgraded extends WorldEvent {\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(EventKey.BUILDING_UPGRADED)\n        this.building = building\n    }\n\n}\n\nexport class RaiderTrained extends WorldEvent {\n\n    entity: FulfillerEntity\n    skill: RaiderSkill\n\n    constructor(raider: FulfillerEntity, skill: RaiderSkill) {\n        super(EventKey.RAIDER_TRAINED)\n        this.entity = raider\n        this.skill = skill\n    }\n\n}\n","import { EventKey } from './EventKeyEnum'\n\nexport class GameEvent {\n\n    eventKey: EventKey\n    isLocal: boolean\n\n    constructor(eventKey: EventKey) {\n        this.eventKey = eventKey\n    }\n\n}\n","export enum JobState {\n\n    OPEN,\n    COMPLETE,\n    CANCELED,\n\n}\n","export enum JobType {\n\n    DRILL,\n    REINFORCE,\n    BLOW,\n    CLEAR_RUBBLE,\n    COLLECT,\n    CARRY,\n    MOVE,\n    TRAIN,\n    GET_TOOL,\n    EAT,\n    COMPLETE_POWER_PATH,\n\n}\n","import { FulfillerEntity } from '../../../scene/model/FulfillerEntity'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\nimport { RaiderTool } from '../../../scene/model/RaiderTool'\nimport { JobType } from './JobType'\nimport { JobState } from './JobState'\nimport { PriorityIdentifier } from './PriorityIdentifier'\nimport { PathTarget } from '../../../scene/model/PathTarget'\n\nexport abstract class Job {\n\n    type: JobType\n    jobstate: JobState\n    fulfiller: FulfillerEntity[] = []\n\n    protected constructor(type: JobType) {\n        this.type = type\n        this.jobstate = JobState.OPEN\n    }\n\n    assign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller)\n        if (fulfiller && index === -1) {\n            this.fulfiller.push(fulfiller)\n        }\n    }\n\n    unassign(fulfiller: FulfillerEntity) {\n        this.fulfiller.remove(fulfiller)\n    }\n\n    cancel() {\n        this.jobstate = JobState.CANCELED\n        const fulfiller = this.fulfiller // ensure consistency while processing\n        this.fulfiller = []\n        fulfiller.forEach((fulfiller) => fulfiller.stopJob())\n    }\n\n    isQualified(fulfiller: FulfillerEntity): boolean {\n        return true\n    }\n\n    isQualifiedWithTool(fulfiller: FulfillerEntity): RaiderTool {\n        return null\n    }\n\n    isQualifiedWithTraining(fulfiller: FulfillerEntity): RaiderSkill {\n        return null\n    }\n\n    onJobComplete() {\n        this.jobstate = JobState.COMPLETE\n    }\n\n    abstract getWorkplaces(): PathTarget[];\n\n}\n\nexport abstract class PublicJob extends Job {\n\n    abstract getPriorityIdentifier(): PriorityIdentifier\n\n}\n","import { Vector2 } from 'three'\n\nexport class PathTarget {\n\n    targetLocation: Vector2\n\n    constructor(location: Vector2) {\n        this.targetLocation = location\n    }\n\n    isInArea(position: Vector2): boolean {\n        return false\n    }\n\n}\n","import { BaseEntity } from '../BaseEntity'\nimport { GameState } from '../../../game/model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { Carryable } from './Carryable'\nimport { CollectJob } from '../../../game/model/job/CollectJob'\nimport { CollectPathTarget } from '../CollectionTarget'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { BuildingSite } from '../BuildingSite'\nimport { PriorityIdentifier } from '../../../game/model/job/PriorityIdentifier'\n\nexport abstract class CollectableEntity extends BaseEntity implements Carryable {\n\n    targets: CollectPathTarget[] = []\n    targetSite: BuildingSite = null\n\n    abstract getTargetBuildingTypes(): Building[];\n\n    hasTarget(): boolean {\n        return this.updateTargets().length > 0\n    }\n\n    getCarryTargets(): CollectPathTarget[] {\n        return this.updateTargets()\n    }\n\n    resetTarget() {\n        this.targets = []\n        this.targetSite = null\n        this.updateTargets()\n    }\n\n    protected updateTargets(): CollectPathTarget[] {\n        if (this.targets.length < 1) {\n            const sites = GameState.buildingSites.filter((b) => b.needs(this.getCollectableType()))\n            if (sites.length > 0) {\n                this.targets = sites.map((s) => new CollectPathTarget(s.getRandomDropPosition(), s, null))\n            } else {\n                const buildings = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                if (buildings.length > 0) {\n                    this.targets = buildings.map((b) => new CollectPathTarget(b.getDropPosition2D(), null, b))\n                }\n            }\n        } else if (this.targets.some((t) => t.site && t.site.complete)) {\n            this.resetTarget()\n        } else if (this.targets.some((t) => t.building && !t.building.isPowered())) {\n            this.resetTarget()\n        }\n        return this.targets\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.collectablesUndiscovered.remove(this)\n        GameState.collectables.push(this)\n        EventBus.publishEvent(new JobCreateEvent(new CollectJob(this)))\n    }\n\n    abstract getCollectableType(): CollectableType\n\n    abstract getPriorityIdentifier(): PriorityIdentifier\n\n    setTargetSite(site: BuildingSite) {\n        if (this.targetSite === site) return\n        this.targetSite?.unAssign(this)\n        this.targetSite = site\n        this.targetSite?.assign(this)\n    }\n\n}\n\nexport enum CollectableType {\n\n    DYNAMITE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n    ELECTRIC_FENCE,\n\n}\n","import { CollectableEntity, CollectableType } from '../../../scene/model/collect/CollectableEntity'\nimport { FulfillerEntity } from '../../../scene/model/FulfillerEntity'\nimport { PublicJob } from './Job'\nimport { JobType } from './JobType'\nimport { PriorityIdentifier } from './PriorityIdentifier'\nimport { PathTarget } from '../../../scene/model/PathTarget'\nimport { ElectricFence } from '../../../scene/model/collect/ElectricFence'\n\nexport class CollectJob extends PublicJob {\n\n    item: CollectableEntity\n\n    constructor(item: CollectableEntity) {\n        super(JobType.COLLECT)\n        this.item = item\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return [new PathTarget(this.item.getPosition2D())]\n    }\n\n    isQualified(fulfiller: FulfillerEntity) {\n        return fulfiller.carries === null && this.item.hasTarget()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return this.item.getPriorityIdentifier()\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        if (this.item.getCollectableType() === CollectableType.ELECTRIC_FENCE) {\n            const electricFence = this.item as ElectricFence\n            if (electricFence.targetSurface.canPlaceFence()) {\n                this.item.worldMgr.sceneManager.scene.add(this.item.group)\n                electricFence.targetSurface.fence = electricFence\n            } // TODO else dispose item entity with mesh\n        }\n    }\n\n}\n","export class BaseActivity {\n\n    activityKey: string\n\n    constructor(activityKey: string) {\n        this.activityKey = activityKey\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class AnimEntityActivity extends BaseActivity {\n\n    static Stand = new AnimEntityActivity('Activity_Stand')\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class RaiderActivity extends AnimEntityActivity {\n\n    static Route = new RaiderActivity('Activity_Route')\n    static RunPanic = new RaiderActivity('Activity_RunPanic')\n    static Drill = new RaiderActivity('Activity_Drill')\n    static Walk = new RaiderActivity('!Activity_Walk')\n    static Reinforce = new RaiderActivity('Activity_Reinforce')\n    static Reverse = new RaiderActivity('!Activity_Reverse')\n    static TurnLeft = new RaiderActivity('!Activity_TurnLeft')\n    static TurnRight = new RaiderActivity('!Activity_TurnRight')\n    static CantDo = new RaiderActivity('!Activity_CantDo')\n    static Collect = new RaiderActivity('Activity_Collect')\n    static Clear = new RaiderActivity('Activity_Clear')\n    static Carry = new RaiderActivity('Activity_Carry')\n    static CarryTurnLeft = new RaiderActivity('!Activity_CarryTurnLeft')\n    static CarryTurnRight = new RaiderActivity('!Activity_CarryTurnRight')\n    static CarryStand = new RaiderActivity('Activity_CarryStand')\n    static Dynamite = new RaiderActivity('Activity_Dynamite')\n    static Place = new RaiderActivity('Activity_Place')\n    static Deposit = new RaiderActivity('!Activity_Deposit')\n    static TeleportIn = new RaiderActivity('Activity_TeleportIn')\n    static Repair = new RaiderActivity('Activity_Repair')\n    static rest = new RaiderActivity('Activity_rest')\n    static routeRubble = new RaiderActivity('!Activity_routeRubble')\n    static CarryRubble = new RaiderActivity('!Activity_CarryRubble')\n    static Eat = new RaiderActivity('Activity_Eat')\n    static FireLaser = new RaiderActivity('Activity_FireLaser')\n    static GetUp = new RaiderActivity('!Activity_GetUp')\n    static ThrownByRockMonster = new RaiderActivity('Activity_ThrownByRockMonster')\n    static Slip = new RaiderActivity('Activity_Slip')\n    static Train = new RaiderActivity('Activity_Train')\n    static Recharge = new RaiderActivity('!Activity_Recharge')\n\n    static Waiting1 = new RaiderActivity('Activity_Waiting1')\n    static Waiting2 = new RaiderActivity('Activity_Waiting2')\n    static Waiting3 = new RaiderActivity('Activity_Waiting3')\n    static Waiting4 = new RaiderActivity('Activity_Waiting4')\n\n    static Hoverboard = new RaiderActivity('Activity_Hoverboard')\n    static Standhoverboard = new RaiderActivity('Activity_Standhoverboard')\n    static HitLefthoverboard = new RaiderActivity('!Activity_HitLefthoverboard')\n    static HitRighthoverboard = new RaiderActivity('!Activity_HitRighthoverboard')\n    static HitFronthoverboard = new RaiderActivity('!Activity_HitFronthoverboard')\n    static HitBackhoverboard = new RaiderActivity('!Activity_HitBackhoverboard')\n\n    static SMALLTRUCK = new RaiderActivity('Activity_SMALLTRUCK')\n    static StandSMALLTRUCK = new RaiderActivity('Activity_StandSMALLTRUCK')\n    static HitLeftSMALLTRUCK = new RaiderActivity('!Activity_HitLeftSMALLTRUCK')\n    static HitRightSMALLTRUCK = new RaiderActivity('!Activity_HitRightSMALLTRUCK')\n    static HitFrontSMALLTRUCK = new RaiderActivity('!Activity_HitFrontSMALLTRUCK')\n    static HitBackSMALLTRUCK = new RaiderActivity('!Activity_HitBackSMALLTRUCK')\n\n    static SMALLheli = new RaiderActivity('Activity_SMALLheli')\n    static StandSMALLheli = new RaiderActivity('Activity_StandSMALLheli')\n    static HitLeftSMALLheli = new RaiderActivity('!Activity_HitLeftSMALLheli')\n    static HitRightSMALLheli = new RaiderActivity('!Activity_HitRightSMALLheli')\n    static HitFrontSMALLheli = new RaiderActivity('!Activity_HitFrontSMALLheli')\n    static HitBackSMALLheli = new RaiderActivity('!Activity_HitBackSMALLheli')\n\n    static SMALLCAT = new RaiderActivity('Activity_SMALLCAT')\n    static StandSMALLCAT = new RaiderActivity('Activity_StandSMALLCAT')\n    static HitLeftSMALLCAT = new RaiderActivity('!Activity_HitLeftSMALLCAT')\n    static HitRightSMALLCAT = new RaiderActivity('!Activity_HitRightSMALLCAT')\n    static HitFrontSMALLCAT = new RaiderActivity('!Activity_HitFrontSMALLCAT')\n    static HitBackSMALLCAT = new RaiderActivity('!Activity_HitBackSMALLCAT')\n\n    static SMALLMLP = new RaiderActivity('Activity_SMALLMLP')\n    static StandSMALLMLP = new RaiderActivity('Activity_StandSMALLMLP')\n    static HitLeftSMALLMLP = new RaiderActivity('!Activity_HitLeftSMALLMLP')\n    static HitRightSMALLMLP = new RaiderActivity('!Activity_HitRightSMALLMLP')\n    static HitFrontSMALLMLP = new RaiderActivity('!Activity_HitFrontSMALLMLP')\n    static HitBackSMALLMLP = new RaiderActivity('!Activity_HitBackSMALLMLP')\n\n    static LARGECAT = new RaiderActivity('Activity_LARGECAT')\n    static StandLARGECAT = new RaiderActivity('Activity_StandLARGECAT')\n    static HitLeftLARGECAT = new RaiderActivity('!Activity_HitLeftLARGECAT')\n    static HitRightLARGECAT = new RaiderActivity('!Activity_HitRightLARGECAT')\n    static HitFrontLARGECAT = new RaiderActivity('!Activity_HitFrontLARGECAT')\n    static HitBackLARGECAT = new RaiderActivity('!Activity_HitBackLARGECAT')\n\n    static SMALLDIGGER = new RaiderActivity('Activity_SMALLDIGGER')\n    static StandSMALLDIGGER = new RaiderActivity('Activity_StandSMALLDIGGER')\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class BuildingActivity extends AnimEntityActivity {\n\n    static Teleport = new BuildingActivity('Activity_Teleport')\n    static Deposit = new BuildingActivity('Activity_Deposit')\n    static Explode = new BuildingActivity('Activity_Explode')\n    static Unpowered = new BuildingActivity('Activity_Unpowered')\n\n}\n","import { Vector2 } from 'three'\nimport { RaiderActivity } from './activities/RaiderActivity'\nimport { CollectableEntity, CollectableType } from './collect/CollectableEntity'\nimport { PathTarget } from './PathTarget'\nimport { BuildingSite } from './BuildingSite'\nimport { Building } from '../../game/model/entity/building/Building'\nimport { BuildingEntity } from './BuildingEntity'\nimport { BuildingActivity } from './activities/BuildingActivity'\nimport { GameState } from '../../game/model/GameState'\nimport { EventBus } from '../../event/EventBus'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\n\nexport interface CollectionTarget {\n\n    getDropAction(): RaiderActivity\n\n    gatherItem(item: CollectableEntity)\n\n}\n\nexport class CollectPathTarget extends PathTarget implements CollectionTarget {\n\n    site: BuildingSite\n    building: BuildingEntity\n\n    constructor(location: Vector2, site: BuildingSite, building: BuildingEntity) {\n        super(location)\n        this.site = site\n        this.building = building\n    }\n\n    canGatherItem(): boolean {\n        if (this.building) {\n            return this.building.activity.activityKey === this.building.getDefaultActivity().activityKey\n        }\n        return true\n    }\n\n    gatherItem(item: CollectableEntity) {\n        if (this.site) {\n            this.site.addItem(item)\n        } else if (this.building) {\n            if (this.building.type === Building.POWER_STATION || this.building.type === Building.ORE_REFINERY) {\n                if (this.building.carryJoint) {\n                    this.building.carryJoint.add(item.group)\n                    item.group.position.set(0, 0, 0)\n                }\n                this.building.changeActivity(BuildingActivity.Deposit, () => {\n                    this.building.changeActivity()\n                    if (this.building.carryJoint) this.building.carryJoint.remove(item.group)\n                    CollectPathTarget.addItemToStorage(item)\n                    // TODO dispose item\n                })\n            } else {\n                CollectPathTarget.addItemToStorage(item)\n            }\n        } else {\n            item.worldMgr.sceneManager.scene.add(item.group)\n        }\n    }\n\n    private static addItemToStorage(item: CollectableEntity) {\n        switch (item.getCollectableType()) {\n            case CollectableType.CRYSTAL:\n                GameState.numCrystal++\n                EventBus.publishEvent(new MaterialAmountChanged(item.getCollectableType()))\n                break\n            case CollectableType.ORE:\n                GameState.numOre++\n                EventBus.publishEvent(new MaterialAmountChanged(item.getCollectableType()))\n                break\n        }\n    }\n\n    getDropAction(): RaiderActivity {\n        if (this.building && (this.building.type === Building.POWER_STATION || this.building.type === Building.ORE_REFINERY)) {\n            return RaiderActivity.Deposit\n        } else {\n            return RaiderActivity.Place\n        }\n    }\n\n}\n","export enum PriorityIdentifier {\n\n    aiPriorityTrain,\n    aiPriorityGetIn,\n    aiPriorityCrystal,\n    aiPriorityOre,\n    aiPriorityRepair,\n    aiPriorityClearing,\n    aiPriorityDestruction,\n    aiPriorityConstruction,\n    aiPriorityReinforce,\n    aiPriorityRecharge,\n\n}\n","import { GameEvent } from './GameEvent'\nimport { BuildingEntity } from '../scene/model/BuildingEntity'\nimport { Surface } from '../scene/model/map/Surface'\nimport { Raider } from '../scene/model/Raider'\nimport { VehicleEntity } from '../scene/model/VehicleEntity'\nimport { EventKey } from './EventKeyEnum'\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n        this.isLocal = true\n    }\n\n}\n\nexport class SelectionEvent extends LocalEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n    }\n\n}\n\nexport class SurfaceSelectedEvent extends SelectionEvent {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(EventKey.SELECTED_SURFACE)\n        this.surface = surface\n    }\n\n}\n\nexport class BuildingSelected extends SelectionEvent {\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(EventKey.SELECTED_BUILDING)\n        this.building = building\n    }\n\n}\n\nexport class RaiderSelected extends SelectionEvent {\n\n    raider: Raider\n\n    constructor(raider: Raider) {\n        super(EventKey.SELECTED_RAIDER)\n        this.raider = raider\n    }\n\n}\n\nexport class VehicleSelected extends SelectionEvent {\n\n    vehicle: VehicleEntity\n\n    constructor(vehicle: VehicleEntity) {\n        super(EventKey.SELECTED_VEHICLE)\n        this.vehicle = vehicle\n    }\n\n}\n\nexport class EntityDeselected extends LocalEvent {\n\n    constructor() {\n        super(EventKey.DESELECTED_ENTITY)\n    }\n\n}\n\nexport class SurfaceChanged extends LocalEvent {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(EventKey.SURFACE_CHANGED)\n        this.surface = surface\n    }\n\n}\n\nexport class AirLevelChanged extends LocalEvent {\n\n    constructor() {\n        super(EventKey.AIR_LEVEL_CHANGED)\n    }\n\n}\n","import { Box3, CanvasTexture, Matrix4, Mesh, MeshBasicMaterial, MeshPhongMaterial, Object3D, Sphere, SphereGeometry, Sprite, SpriteMaterial, Vector3 } from 'three'\nimport { AnimClip } from './AnimClip'\nimport { clearTimeoutSafe, iGet } from '../../../core/Util'\nimport { AnimationEntityType } from './AnimationEntityType'\nimport { BaseEntity } from '../BaseEntity'\nimport { AnimSubObj } from './AnimSubObj'\nimport { createContext } from '../../../core/ImageHelper'\nimport { BaseActivity } from '../activities/BaseActivity'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../main'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\n\nexport abstract class AnimEntity extends BaseEntity {\n\n    entityType: AnimationEntityType = null\n    poly: Object3D[] = []\n    animation: AnimClip = null\n    animationTimeout: NodeJS.Timeout = null\n    selectionFrame: Sprite = null\n    pickSphere: Mesh = null\n    pickSphereRadius: number = 10 / 2\n    carryJoint: Object3D = null\n    depositJoint: Object3D = null\n    getToolJoint: Object3D = null\n    activity: BaseActivity = null\n    radiusSq: number = 0\n\n    protected constructor(entityType: AnimationEntityType) {\n        super()\n        this.entityType = entityType\n    }\n\n    beamUp() {\n        // TODO avoid all further state changes and mark as unavailable here\n        // TODO publish event: check jobs with this target, update power state...\n        EventBus.publishEvent(new EntityDeselected())\n        this.changeActivity()\n        // TODO insert beam animation\n        AnimEntity.moveUp(this, 6 * TILESIZE)\n    }\n\n    private static moveUp(entity: AnimEntity, counter: number) {\n        if (counter > 0) {\n            counter--\n            entity.group.position.y += (TILESIZE / NATIVE_FRAMERATE) / 2\n            setTimeout(() => AnimEntity.moveUp(entity, counter), 1000 / NATIVE_FRAMERATE)\n        } else {\n            entity.removeFromScene()\n        }\n    }\n\n    changeActivity(activity: AnimEntityActivity = this.getDefaultActivity(), onAnimationDone = null, durationTimeMs: number = null) {\n        if (this.activity === activity) return\n        this.activity = activity\n        let lActivityKey = activity.activityKey.toLowerCase()\n        let anim = this.entityType.activities.get(lActivityKey)\n        if (!anim) { // find by prefix\n            this.entityType.activities.forEach((a, key) => {\n                if (!anim && lActivityKey.startsWith(key)) anim = a\n            })\n        }\n        if (!anim?.animation) {\n            console.warn('Activity ' + activity.activityKey + ' unknown or has no animation defined')\n            console.log(this.entityType.activities)\n            return\n        }\n        this.setAnimation(anim?.animation, onAnimationDone, durationTimeMs)\n    }\n\n    private setAnimation(animation: AnimClip, onAnimationDone = null, durationTimeMs = null) {\n        if (onAnimationDone) onAnimationDone.bind(this)\n        this.animation = animation\n        this.animation.looping = true\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.group.remove(...this.poly)\n        this.poly = []\n        const carries = (this.carryJoint && this.carryJoint.children) || []\n        this.carryJoint = null\n        // bodies are defined in animation and second in high/medium/low poly groups\n        this.animation.bodies.forEach((body) => {\n            let model: Object3D = iGet(this.entityType.highPoly, body.name)\n            if (!model) model = iGet(this.entityType.mediumPoly, body.name)\n            if (!model) model = body.model\n            const polyModel = model.clone(true)\n            this.poly.push(polyModel)\n            if (body.name) {\n                const lBodyName = body.name.toLowerCase()\n                if (lBodyName === this.entityType.carryNullName?.toLowerCase()) {\n                    this.carryJoint = polyModel\n                    if (carries.length > 0) this.carryJoint.add(...carries)\n                } else if (lBodyName === this.entityType.depositNullName?.toLowerCase()) {\n                    this.depositJoint = polyModel\n                } else if (lBodyName === this.entityType.toolNullName?.toLowerCase()) {\n                    this.getToolJoint = polyModel\n                }\n            }\n        })\n        this.animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = this.poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                this.poly[parentInd].add(polyPart)\n            } else {\n                this.group.add(polyPart)\n            }\n        })\n        const sphere = new Sphere()\n        new Box3().setFromObject(this.group).getBoundingSphere(sphere)\n        this.radiusSq = sphere.radius * sphere.radius\n        this.animate(0, onAnimationDone, durationTimeMs)\n    }\n\n    private animate(frameIndex, onAnimationDone, durationTimeMs) {\n        if (this.poly.length !== this.animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        this.animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = this.poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = material.opacity < 1\n                    })\n                }\n            }\n        })\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        let nextFrame = frameIndex + 1\n        if (nextFrame <= this.animation.lastFrame || !onAnimationDone || (durationTimeMs !== null && durationTimeMs > 0)) {\n            if (nextFrame > this.animation.lastFrame) {\n                nextFrame = this.animation.firstFrame\n            }\n            const standardDurationTimeMs = 1000 / this.animation.framesPerSecond * this.animation.transcoef\n            if (durationTimeMs !== null) durationTimeMs -= standardDurationTimeMs\n            const that = this\n            const timeoutTimeMs = durationTimeMs !== null ? Math.max(0, Math.min(durationTimeMs, standardDurationTimeMs)) : standardDurationTimeMs\n            this.animationTimeout = setTimeout(() => that.animate(nextFrame, onAnimationDone, durationTimeMs), timeoutTimeMs) // TODO get this in sync with threejs\n        } else if (onAnimationDone) {\n            onAnimationDone()\n        }\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return AnimEntityActivity.Stand\n    }\n\n    createPickSphere() {\n        if (this.pickSphere) return\n        const pickSphereCenter = this.getPickSphereCenter()\n        const geometry = new SphereGeometry(this.pickSphereRadius, this.pickSphereRadius, this.pickSphereRadius)\n        const material = new MeshBasicMaterial({color: 0xffff00, visible: false}) // change visible to true for debugging\n        this.pickSphere = new Mesh(geometry, material)\n        this.pickSphere.userData = {selectable: this}\n        this.pickSphere.position.copy(pickSphereCenter)\n        this.group.add(this.pickSphere)\n        this.createSelectionFrame(pickSphereCenter)\n    }\n\n    getPickSphereCenter(): Vector3 {\n        return this.getBoundingBoxCenter()\n    }\n\n    getBoundingBoxCenter() {\n        const center = new Vector3()\n        new Box3().setFromObject(this.group).getCenter(center)\n        center.sub(this.group.position)\n        center.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        return center\n    }\n\n    private createSelectionFrame(pickSphereCenter: Vector3) {\n        const selectionFrameTextureSize = 128\n        const ctx = createContext(selectionFrameTextureSize, selectionFrameTextureSize)\n        ctx.fillStyle = '#0f0'\n        const strength = Math.round(25 / this.pickSphereRadius)\n        const length = selectionFrameTextureSize / 6\n        ctx.fillRect(0, 0, length, strength)\n        ctx.fillRect(0, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, 0, length, strength)\n        ctx.fillRect(selectionFrameTextureSize - strength, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - strength, selectionFrameTextureSize - length, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - length, strength, length)\n        const selectionFrameTexture = new CanvasTexture(ctx.canvas)\n        const selectionMaterial = new SpriteMaterial({map: selectionFrameTexture, depthTest: false})\n        this.selectionFrame = new Sprite(selectionMaterial)\n        this.selectionFrame.position.copy(pickSphereCenter)\n        const selectionFrameSize = this.pickSphereRadius * 2\n        this.selectionFrame.scale.set(selectionFrameSize, selectionFrameSize, selectionFrameSize)\n        this.selectionFrame.visible = false\n        this.group.add(this.selectionFrame)\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class DynamiteActivity extends BaseActivity {\n\n    static Normal = new DynamiteActivity('Normal')\n    static TickDown = new DynamiteActivity('TickDown')\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { AnimEntity } from '../anim/AnimEntity'\nimport { Carryable } from './Carryable'\nimport { Surface } from '../map/Surface'\nimport { GameState } from '../../../game/model/GameState'\nimport { DynamiteActivity } from '../activities/DynamiteActivity'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { PathTarget } from '../PathTarget'\n\nexport class Dynamite extends AnimEntity implements Carryable {\n\n    targetSurface: Surface\n\n    constructor() {\n        super(ResourceManager.getAnimationEntityType('MiscAnims/Dynamite/Dynamite.ae'))\n        this.changeActivity()\n    }\n\n    get stats() {\n        return {}\n    }\n\n    hasTarget(): boolean {\n        return this.targetSurface && this.targetSurface.isExplodable() || GameState.hasOneBuildingOf(Building.TOOLSTATION)\n    }\n\n    getCarryTargets(): PathTarget[] {\n        if (this.targetSurface && this.targetSurface.isExplodable()) {\n            return this.targetSurface.getDigPositions().map((p) => new PathTarget(p))\n        } else {\n            return GameState.getBuildingsByType(Building.TOOLSTATION).map((b) => b.getDropPosition2D())\n                .map((p) => new PathTarget(p))\n        }\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.DYNAMITE\n    }\n\n    ignite() {\n        // TODO add as explosive and scare em all!\n        this.worldMgr.sceneManager.scene.add(this.group)\n        const center = this.targetSurface.getCenterWorld()\n        center.y = this.group.position.y\n        this.group.lookAt(center)\n        this.changeActivity(DynamiteActivity.TickDown, () => {\n            this.removeFromScene()\n            this.targetSurface.collapse()\n            // TODO add explosion animation\n            // TODO damage raider, vehicle, buildings\n        })\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return DynamiteActivity.Normal\n    }\n\n}\n","import { BuildingEntity } from '../../scene/model/BuildingEntity'\nimport { Building } from './entity/building/Building'\nimport { Selectable, SelectionType } from './Selectable'\nimport { Raider } from '../../scene/model/Raider'\nimport { VehicleEntity } from '../../scene/model/VehicleEntity'\nimport { CollectableEntity, CollectableType } from '../../scene/model/collect/CollectableEntity'\nimport { Vector3 } from 'three'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../../main'\nimport { Surface } from '../../scene/model/map/Surface'\nimport { BaseEntity } from '../../scene/model/BaseEntity'\nimport { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { BuildingSite } from '../../scene/model/BuildingSite'\nimport { Dynamite } from '../../scene/model/collect/Dynamite'\nimport { Crystal } from '../../scene/model/collect/Crystal'\nimport { Ore } from '../../scene/model/collect/Ore'\nimport { LevelRewardConfig } from '../../cfg/LevelsCfg'\nimport { PriorityList } from './job/PriorityList'\nimport { SmallSpider } from './entity/monster/SmallSpider'\nimport { Bat } from './entity/monster/Bat'\nimport { RaiderSkill } from '../../scene/model/RaiderSkill'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\n\nexport enum GameResultState {\n\n    RUNNING,\n    COMPLETE,\n    FAILED,\n\n}\n\nexport class GameState {\n\n    static resultState: GameResultState = GameResultState.RUNNING\n    static levelFullName: string = ''\n    static numCrystal: number = 0\n    static numOre: number = 0\n    static numBrick: number = 0\n    static usedCrystals: number = 0\n    static neededCrystals: number = 0\n    static airlevel: number = 1 // airlevel in percent from 0 to 1.0\n    static selectedEntities: Selectable[] = []\n    static selectionType: SelectionType = null\n    static buildings: BuildingEntity[] = []\n    static buildingsUndiscovered: BuildingEntity[] = []\n    static raiders: Raider[] = []\n    static raidersUndiscovered: Raider[] = []\n    static requestedRaiders: number = 0\n    static vehicles: VehicleEntity[] = []\n    static vehiclesUndiscovered: VehicleEntity[] = []\n    static collectables: CollectableEntity[] = []\n    static collectablesUndiscovered: CollectableEntity[] = []\n    static buildingSites: BuildingSite[] = []\n    static spiders: SmallSpider[] = []\n    static spidersBySurface: Map<Surface, SmallSpider[]> = new Map()\n    static bats: Bat[] = []\n    static totalCrystals: number = 0\n    static totalOres: number = 0\n    static totalDiggables: number = 0\n    static remainingDiggables: number = 0\n    static totalCaverns: number = 0\n    static discoveredCaverns: number = 0\n    static levelStartTime: number = 0\n    static levelStopTime: number = 0\n    static rewardConfig: LevelRewardConfig = null\n    static priorityList: PriorityList = null\n    static oxygenRate: number = 0\n\n    static reset() {\n        this.resultState = GameResultState.RUNNING\n        this.levelFullName = ''\n        this.numCrystal = 0\n        this.numOre = 0\n        this.numBrick = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.airlevel = 1\n        this.selectedEntities = []\n        this.selectionType = null\n        this.buildings = []\n        this.buildingsUndiscovered = []\n        this.raiders = []\n        this.raidersUndiscovered = []\n        this.requestedRaiders = 0\n        this.vehicles = []\n        this.vehiclesUndiscovered = []\n        this.collectables = []\n        this.collectablesUndiscovered = []\n        this.buildingSites = []\n        this.spiders = []\n        this.spidersBySurface = new Map()\n        this.bats = []\n        this.totalCrystals = 0\n        this.totalOres = 0\n        this.totalDiggables = 0\n        this.remainingDiggables = 0\n        this.totalCaverns = 0\n        this.discoveredCaverns = 0\n        this.levelStartTime = 0\n        this.levelStopTime = 0\n        this.rewardConfig = null\n        this.priorityList = null\n        this.oxygenRate = 0\n    }\n\n    static getBuildingsByType(...buildingTypes: Building[]): BuildingEntity[] {\n        return this.buildings.filter(b => b.isPowered() && buildingTypes.some(bt => b.type === bt))\n    }\n\n    static getClosestBuildingByType(position: Vector3, ...buildingTypes: Building[]): BuildingEntity {\n        const targetBuildings = GameState.getBuildingsByType(...buildingTypes)\n        let closest = null, minDist = null\n        targetBuildings.forEach((b) => {\n            const bPos = b.getDropPosition()\n            const dist = position.distanceToSquared(bPos) // TODO better use pathfinding\n            if (closest === null || dist < minDist) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static hasOneBuildingOf(...buildings: Building[]): boolean {\n        return this.buildings.some((b) => buildings.some((type) => b.type === type) && b.isPowered())\n    }\n\n    static hasBuildingWithUpgrades(building: Building, upgrades: number = 0): boolean {\n        return this.buildings.some((b) => b.type === building && b.level >= upgrades && b.isPowered())\n    }\n\n    static getTrainingSites(position: Vector3, training: RaiderSkill): BuildingEntity[] {\n        if (training === RaiderSkill.DEMOLITION) {\n            return this.buildings.filter((b) => {\n                return b.stats.TrainDynamite && b.stats.TrainDynamite[b.level]\n            })\n        }\n        return []\n    }\n\n    static selectEntities(entities: Selectable[]) {\n        this.selectedEntities = this.selectedEntities.filter((previouslySelected) => {\n            const stillSelected = entities.indexOf(previouslySelected) !== -1\n            if (!stillSelected) previouslySelected.deselect()\n            return stillSelected\n        })\n        // add new entities that are selectable\n        const selectionEvents = []\n        entities.forEach((freshlySelected) => {\n            const selectionEvent = freshlySelected.select()\n            if (selectionEvent) {\n                this.selectedEntities.push(freshlySelected)\n                selectionEvents.push(selectionEvent)\n            }\n        })\n        // determine and set next selection type\n        const len = this.selectedEntities.length\n        if (len > 1) {\n            this.selectionType = SelectionType.GROUP\n        } else if (len === 1) {\n            this.selectionType = this.selectedEntities[0].getSelectionType()\n        } else if (this.selectionType !== null) {\n            this.selectionType = null\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        // AFTER updating selected entities and selection type, publish all events\n        selectionEvents.forEach((event) => EventBus.publishEvent(event))\n    }\n\n    static getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + this.getBuildingsByType(Building.BARRACKS).length * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    static discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE\n        this.discoverEntities(this.raidersUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.buildingsUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.vehiclesUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.collectablesUndiscovered, minX, maxX, minZ, maxZ)\n    }\n\n    static discoverEntities(undiscovered: BaseEntity[], minX, maxX, minZ, maxZ) {\n        const discovered = []\n        undiscovered.forEach((e) => {\n            const pos = e.getPosition()\n            if (pos.x >= minX && pos.x < maxX && pos.z >= minZ && pos.z < maxZ) {\n                e.onDiscover()\n                discovered.push(e)\n            }\n        })\n        discovered.forEach((r) => undiscovered.remove(r))\n    }\n\n    static dropMaterial(type: CollectableType, quantity: number): CollectableEntity[] {\n        const result = []\n        if (type === CollectableType.DYNAMITE) {\n            for (let c = 0; c < quantity; c++) result.push(new Dynamite())\n        } else if (type === CollectableType.CRYSTAL) {\n            while (GameState.numCrystal > 0 && result.length < quantity) {\n                GameState.numCrystal--\n                result.push(new Crystal())\n            }\n        } else if (type === CollectableType.ORE) {\n            while (GameState.numOre > 0 && result.length < quantity) {\n                GameState.numOre--\n                result.push(new Ore())\n            }\n        } else {\n            console.error('Material drop not yet implemented: ' + type)\n        }\n        if (result.length > 0) EventBus.publishEvent(new MaterialAmountChanged(type))\n        return result\n    }\n\n    static get gameTimeSeconds() {\n        return Math.round((GameState.levelStopTime - GameState.levelStartTime) / 1000)\n    }\n\n    static get score() {\n        if (!GameState.rewardConfig) return 0\n        let quota = GameState.rewardConfig.quota\n        let importance = GameState.rewardConfig.importance\n        const scoreCrystals = GameState.numCrystal >= (quota.crystals || Infinity) ? importance.crystals : 0\n        const scoreTimer = GameState.gameTimeSeconds <= (quota.timer || 0) ? importance.timer : 0\n        const scoreCaverns = quota.caverns ? Math.min(1, GameState.discoveredCaverns / quota.caverns) * importance.caverns : 0\n        const scoreConstructions = quota.constructions ? Math.min(1, GameState.buildings.length / quota.constructions * importance.constructions) : 0\n        const scoreOxygen = GameState.airlevel * importance.oxygen\n        const scoreFigures = GameState.raiders.length >= MAX_RAIDER_BASE ? importance.figures : 0\n        return Math.round(scoreCrystals + scoreTimer + scoreCaverns + scoreConstructions + scoreOxygen + scoreFigures) / 100\n    }\n\n    static get selectedSurface(): Surface {\n        return this.selectionType === SelectionType.SURFACE && this.selectedEntities.length > 0 ? this.selectedEntities[0] as Surface : null\n    }\n\n    static get selectedBuilding(): BuildingEntity {\n        return this.selectionType === SelectionType.BUILDING && this.selectedEntities.length > 0 ? this.selectedEntities[0] as BuildingEntity : null\n    }\n\n    static get selectedRaiders(): Raider[] {\n        return (this.selectionType === SelectionType.PILOT || this.selectionType === SelectionType.GROUP) && this.selectedEntities.length > 0 ? this.selectedEntities as Raider[] : []\n    }\n\n    static get totalOre(): number {\n        return this.numOre + this.numBrick * 5\n    }\n\n    static getNearbySpiders(entity: BaseEntity): SmallSpider[] {\n        const terrain = entity.worldMgr.sceneManager.terrain\n        const currentSurface = terrain.getSurfaceFromWorld(entity.getPosition())\n        const nearbySpiders: SmallSpider[] = []\n        for (let x = currentSurface.x; x <= currentSurface.x + 1; x++) {\n            for (let y = currentSurface.y; y <= currentSurface.y + 1; y++) {\n                const surface = terrain.getSurface(x, y)\n                nearbySpiders.push(...(GameState.spidersBySurface.get(surface) || []))\n            }\n        }\n        return nearbySpiders\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { AdditiveBlending, Color, Material, MeshPhongMaterial } from 'three'\nimport { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { SceneManager } from '../../SceneManager'\nimport { PriorityIdentifier } from '../../../game/model/job/PriorityIdentifier'\n\nexport class Crystal extends CollectableEntity {\n\n    constructor() {\n        super()\n        const resource2 = ResourceManager.getResource('MiscAnims/Crystal/vlp_greencrystal.lwo')\n        const mesh2 = SceneManager.registerMesh(new LWOLoader('MiscAnims/Crystal/').parse(resource2));\n        (mesh2.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.blending = AdditiveBlending\n            mat.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n            mat.opacity = 0.5 // XXX read from LWO file?\n            mat.transparent = mat.opacity < 1\n        })\n        mesh2.scale.set(1.75, 1.75, 1.75) // XXX derive from texture scale?\n        this.group.add(mesh2)\n        const resource = ResourceManager.getResource('World/Shared/Crystal.lwo') // highpoly version\n        const mesh = SceneManager.registerMesh(new LWOLoader('World/Shared/').parse(resource));\n        (mesh.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.emissive = new Color(0, 8, 0) // XXX read from LWO file?\n            mat.color = new Color(0, 0, 0) // XXX read from LWO file?\n            mat.opacity = 0.4 // XXX read from LWO file?\n            mat.transparent = mat.opacity < 1\n        })\n        this.group.add(mesh)\n    }\n\n    get stats() {\n        return ResourceManager.stats.PowerCrystal\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.POWER_STATION, Building.TOOLSTATION]\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        console.log('An energy crystal has been discovered')\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.CRYSTAL\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityCrystal\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { SceneManager } from '../../SceneManager'\nimport { PriorityIdentifier } from '../../../game/model/job/PriorityIdentifier'\n\nexport class Ore extends CollectableEntity {\n\n    constructor() {\n        super()\n        const resource = ResourceManager.getResource('MiscAnims/Ore/Ore1st.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('MiscAnims/Ore/').parse(resource))\n        this.group.add(mesh)\n    }\n\n    get stats() {\n        return ResourceManager.stats.Ore\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.ORE_REFINERY, Building.TOOLSTATION]\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        console.log('Ore has been discovered')\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.ORE\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityOre\n    }\n\n}\n","export class RaiderSkill {\n\n    static DRIVER = new RaiderSkill('driver')\n    static ENGINEER = new RaiderSkill('engineer')\n    static GEOLOGIST = new RaiderSkill('geologist')\n    static PILOT = new RaiderSkill('pilot')\n    static SAILOR = new RaiderSkill('sailor')\n    static DEMOLITION = new RaiderSkill('demolition')\n\n    name: string\n\n    constructor(name: string) {\n        this.name = name\n    }\n\n}\n","export class WorkerMessage {\n\n    type: WorkerMessageType = null\n    text?: string\n    cfg?: any\n    totalResources?: number\n    assetName?: string\n    assetObj?: any\n    loadingTimeSeconds?: string\n\n    constructor(type: WorkerMessageType) {\n        this.type = type\n    }\n\n    static createTextMessage(msg: string): WorkerMessage {\n        return {type: WorkerMessageType.MSG, text: msg}\n    }\n\n    static createCfgLoaded(cfg: any, totalResources: number): WorkerMessage {\n        return {type: WorkerMessageType.CFG, cfg: cfg, totalResources: totalResources}\n    }\n\n    static createAssetLoaded(assetIndex: number, assetName: string, assetObj: any) {\n        return {type: WorkerMessageType.ASSET, assetName: assetName, assetObj: assetObj}\n    }\n\n    static createLoadDone(totalResources: number, loadingTimeSeconds: string) {\n        return {type: WorkerMessageType.DONE, totalResources: totalResources, loadingTimeSeconds: loadingTimeSeconds}\n    }\n\n}\n\nexport enum WorkerMessageType {\n\n    MSG,\n    CFG,\n    CACHE_MISS,\n    SFX,\n    ASSET,\n    DONE,\n\n}\n","import { AmbientLight, Color, Frustum, Mesh, MOUSE, PerspectiveCamera, PointLight, Raycaster, Scene, Vector3, WebGLRenderer } from 'three'\nimport { DebugHelper } from './DebugHelper'\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { GameState } from '../game/model/GameState'\nimport { Selectable } from '../game/model/Selectable'\nimport { Terrain } from './model/map/Terrain'\nimport { TILESIZE } from '../main'\nimport { clearIntervalSafe } from '../core/Util'\nimport { AnimatedMesh } from '../resource/AnimatedMesh'\n\nexport class SceneManager {\n\n    static meshRegistry: AnimatedMesh[] = []\n\n    maxFps: number = 30 // most animations use 25 fps so this should be enough\n    renderer: WebGLRenderer\n    debugHelper: DebugHelper = new DebugHelper()\n    renderInterval\n    animRequest\n    scene: Scene\n    camera: PerspectiveCamera\n    ambientLight: AmbientLight\n    light: PointLight\n    terrain: Terrain\n    controls: MapControls\n    cursorTorchlight: PointLight\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.renderer = new WebGLRenderer({antialias: true, canvas: canvas})\n        this.renderer.setClearColor(0x000000)\n\n        this.camera = new PerspectiveCamera(30, canvas.width / canvas.height, 0.1, 5000) // TODO make these params configurable\n\n        this.controls = new MapControls(this.camera, this.renderer.domElement)\n        this.controls.mouseButtons = {LEFT: null, MIDDLE: MOUSE.ROTATE, RIGHT: MOUSE.PAN}\n        // this.controls.maxPolarAngle = Math.PI * 0.45; // TODO dynamically adapt to terrain height at camera position\n    }\n\n    selectEntitiesByRay(rx: number, ry: number) {\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        let intersects = raycaster.intersectObjects(GameState.raiders.map((r) => r.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.vehicles.map((v) => v.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.buildings.map((b) => b.pickSphere))\n        if (intersects.length < 1 && this.terrain) intersects = raycaster.intersectObjects(this.terrain.floorGroup.children)\n        const selected = []\n        if (intersects.length > 0) {\n            const userData = intersects[0].object.userData\n            if (userData && userData.hasOwnProperty('selectable')) {\n                const selectable = userData['selectable']\n                if (selectable) selected.push(selectable)\n            }\n        }\n        GameState.selectEntities(selected)\n    }\n\n    selectEntitiesInFrustum(r1x: number, r1y: number, r2x: number, r2y: number) {\n        const startPoint = new Vector3(r1x, r1y, 0.5)\n        const endPoint = new Vector3(r2x, r2y, 0.5)\n        // Avoid invalid frustum\n        if (startPoint.x === endPoint.x) {\n            endPoint.x += Number.EPSILON\n        }\n        if (startPoint.y === endPoint.y) {\n            endPoint.y += Number.EPSILON\n        }\n        // update camera\n        this.camera.updateProjectionMatrix()\n        this.camera.updateMatrixWorld()\n        // update frustum\n        const tmpPoint = new Vector3()\n        tmpPoint.copy(startPoint)\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x)\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y)\n        endPoint.x = Math.max(startPoint.x, endPoint.x)\n        endPoint.y = Math.min(startPoint.y, endPoint.y)\n\n        const vecNear = new Vector3()\n        const vecTopLeft = new Vector3()\n        const vecTopRight = new Vector3()\n        const vecDownRight = new Vector3()\n        const vecDownLeft = new Vector3()\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld)\n        vecTopLeft.copy(tmpPoint)\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0)\n        vecDownRight.copy(endPoint)\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0)\n\n        vecTopLeft.unproject(this.camera)\n        vecTopRight.unproject(this.camera)\n        vecDownRight.unproject(this.camera)\n        vecDownLeft.unproject(this.camera)\n\n        const vectemp1 = new Vector3()\n        const vectemp2 = new Vector3()\n        const vectemp3 = new Vector3()\n        vectemp1.copy(vecTopLeft).sub(vecNear)\n        vectemp2.copy(vecTopRight).sub(vecNear)\n        vectemp3.copy(vecDownRight).sub(vecNear)\n        vectemp1.normalize()\n        vectemp2.normalize()\n        vectemp3.normalize()\n\n        const deep = Number.MAX_VALUE\n        vectemp1.multiplyScalar(deep)\n        vectemp2.multiplyScalar(deep)\n        vectemp3.multiplyScalar(deep)\n        vectemp1.add(vecNear)\n        vectemp2.add(vecNear)\n        vectemp3.add(vecNear)\n\n        const frustum = new Frustum()\n        const planes = frustum.planes\n\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight)\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight)\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear)\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear)\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft)\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1)\n        planes[5].normal.multiplyScalar(-1)\n\n        let entities: Selectable[] = GameState.raiders.filter((r) => frustum.containsPoint(r.getSelectionCenter()))\n        entities.push(...(GameState.vehicles.filter((v) => frustum.containsPoint(v.getSelectionCenter()))))\n        if (entities.length < 1) entities = GameState.buildings.filter((b) => frustum.containsPoint(b.getSelectionCenter()))\n        GameState.selectEntities(entities)\n    }\n\n    setupScene(ambientColor: Color) {\n        this.scene = new Scene()\n\n        this.ambientLight = new AmbientLight(ambientColor, 0.4)\n        this.scene.add(this.ambientLight)\n\n        this.cursorTorchlight = new PointLight(0xffffff, 1.5, 4, 1)\n        this.cursorTorchlight.distance *= TILESIZE\n        this.scene.add(this.cursorTorchlight)\n    }\n\n    startScene() {\n        this.debugHelper.show()\n        this.renderInterval = setInterval(() => {\n            this.animRequest = requestAnimationFrame(() => {\n                this.debugHelper.renderStart()\n                this.renderer.render(this.scene, this.camera)\n                this.debugHelper.renderDone()\n            })\n        }, 1000 / this.maxFps)\n    }\n\n    disposeScene() {\n        this.debugHelper.hide()\n        this.renderInterval = clearIntervalSafe(this.renderInterval)\n        if (this.animRequest) {\n            cancelAnimationFrame(this.animRequest)\n            this.animRequest = null\n        }\n        this.terrain?.dispose()\n        this.terrain = null\n        SceneManager.meshRegistry.forEach(mesh => mesh.dispose())\n        SceneManager.meshRegistry = []\n    }\n\n    static registerMesh(animatedMesh: AnimatedMesh): Mesh {\n        this.meshRegistry.push(animatedMesh)\n        return animatedMesh.mesh\n    }\n\n}\n","/**\n * @author Scarabol https://github.com/scarabol\n *\n * This loader loads LWSC files exported from LW\n *\n * File format description: http://www.martinreddy.net/gfx/3d/LWSC.txt\n */\n\nimport { AnimClip } from '../scene/model/anim/AnimClip'\nimport { AnimSubObj } from '../scene/model/anim/AnimSubObj'\nimport { Group } from 'three'\nimport { getFilename } from '../core/Util'\nimport { ResourceManager } from './ResourceManager'\nimport { LWOLoader } from './LWOLoader'\nimport { SceneManager } from '../scene/SceneManager'\n\nexport class LWSCLoader {\n\n    path: string = ''\n    verbose: boolean = false\n    animationClip: AnimClip = new AnimClip()\n    lines: string[] = []\n    lineIndex: number = 0\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('Using verbose mode')\n    }\n\n    parse(content): AnimClip {\n        this.lines = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map(l => l.trim())\n\n        if (this.lines[0] !== 'LWSC') {\n            throw 'Invalid start of file! Expected \\'LWSC\\' in first line'\n        }\n\n        const sceneFileVersion = parseInt(this.lines[1], 10)\n        if (sceneFileVersion !== 1) {\n            console.warn('Unexpected scene file version: ' + sceneFileVersion)\n        }\n\n        for (this.lineIndex = 2; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) continue // empty line: object separator\n            const key = line.split(' ')[0]\n            if (key === 'FirstFrame') {\n                this.parseFrameBlock()\n            } else if (key === 'AddNullObject' || key === 'LoadObject') {\n                this.parseObjectBlock()\n                if (this.verbose) console.log(this.animationClip.bodies[this.animationClip.bodies.length - 1])\n            } else if (line.startsWith('PreviewFirstFrame ') || line.startsWith('PreviewLastFrame ') || line.startsWith('PreviewFrameStep ')) {\n                // only used in editor\n            } else {\n                // console.warn('Unexpected line: ' + line); // TODO analyze remaining entries\n            }\n        }\n\n        if (this.verbose) console.log(this.animationClip)\n        return this.animationClip\n    }\n\n    parseLine(line: string): string[] {\n        return line.split(' ').filter((l: string) => l !== '')\n    }\n\n    parseFrameBlock() {\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            const line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'FirstFrame') {\n                this.animationClip.firstFrame = parseInt(value)\n            } else if (key === 'LastFrame') {\n                this.animationClip.lastFrame = parseInt(value)\n            } else if (key === 'FrameStep') {\n                const frameStep = parseInt(value)\n                if (frameStep !== 1) console.error('Animation frameStep has unexpected value: ' + frameStep)\n            } else if (key === 'FramesPerSecond') {\n                this.animationClip.framesPerSecond = parseInt(value)\n            } else if (key === 'PreviewFirstFrame' || key === 'PreviewLastFrame' || key === 'PreviewFrameStep') {\n                // only used in editor\n            } else {\n                console.warn('Unexpected key in frame block')\n            }\n        }\n        console.error('Parsing block reached content end')\n    }\n\n    parseObjectBlock(): AnimSubObj {\n        const subObj = new AnimSubObj()\n        this.animationClip.bodies.push(subObj)\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'AddNullObject' || key === 'LoadObject') {\n                if (key === 'LoadObject') {\n                    const filename = getFilename(value)\n                    subObj.name = filename.slice(0, filename.length - '.lwo'.length)\n                    subObj.filename = this.path + filename\n                    const lwoBuffer = ResourceManager.getResource(subObj.filename)\n                    subObj.model = SceneManager.registerMesh(new LWOLoader(this.path).parse(lwoBuffer))\n                } else if (key === 'AddNullObject') {\n                    subObj.name = value\n                    subObj.model = new Group()\n                } else {\n                    throw 'Unexpected line: ' + line\n                }\n            } else if (key === 'ObjectMotion') {\n                let line = this.lines[++this.lineIndex]\n                const lenInfos = parseInt(line)\n                line = this.lines[++this.lineIndex]\n                const lenFrames = parseInt(line)\n                this.lineIndex++\n                for (let c = 0; c < lenFrames; c++) {\n                    let line = this.lines[this.lineIndex + c * 2]\n                    if (line.startsWith('EndBehavior')) break\n                    const infos = line.split(' ').map(Number)\n                    if (infos.length !== lenInfos) console.warn('Number of infos (' + infos.length + ') does not match if specified count (' + lenInfos + ')')\n                    line = this.lines[this.lineIndex + c * 2 + 1]\n                    const animationFrameIndex = parseInt(line.split(' ')[0]) // other entries in line should be zeros\n                    subObj.setFrameAndFollowing(animationFrameIndex, this.animationClip.lastFrame, infos)\n                }\n                this.lineIndex += lenFrames * 2\n            } else if (key === 'ParentObject') {\n                subObj.parentObjInd = Number(value) - 1 // index is 1 based\n                if (this.verbose) console.log('parent obj ind is: ' + subObj.parentObjInd)\n            } else if (key === 'ShowObject ' || key === 'LockedChannels') {\n                // only used in editor\n            } else if (key === 'ShadowOptions') { // TODO implement shadow options (bitwise)\n                // 0 - Self Shadow\n                // 1 - Cast Shadow\n                // 2 - Receive Shadow\n            } else if (key === 'ObjDissolve') {\n                if (value == '(envelope)') {\n                    let line = this.lines[++this.lineIndex]\n                    const numOfInformationChannels = parseInt(line)\n                    if (numOfInformationChannels !== 1) console.error('Number of information channels for opacity is not 1, but: ' + numOfInformationChannels)\n                    line = this.lines[++this.lineIndex]\n                    const numOfKeyframes = parseInt(line)\n                    this.lineIndex++\n                    for (let c = 0; c < numOfKeyframes; c++) {\n                        let line = this.lines[this.lineIndex + c * 2]\n                        if (line.startsWith('EndBehavior')) break\n                        const opacity = 1 - Number(line)\n                        line = this.lines[this.lineIndex + c * 2 + 1]\n                        const frameNum = Number(line.split(' ')[0])\n                        subObj.setOpacityAndFollowing(frameNum, this.animationClip.lastFrame, opacity)\n                    }\n                    this.lineIndex += numOfKeyframes * 2\n                } else {\n                    const opacity = 1 - Number(value)\n                    subObj.setOpacityAndFollowing(0, this.animationClip.lastFrame, opacity)\n                }\n            } else {\n                // console.log('Unhandled line in object block: ' + line); // TODO analyze unhandled lines\n            }\n        }\n        console.error('Parsing block reached content end')\n        return subObj\n    }\n\n}\n","import { AnimationEntityType } from '../scene/model/anim/AnimationEntityType'\nimport { getPath, iGet } from './wadworker/WadUtil'\nimport { ResourceManager } from './ResourceManager'\nimport { LWOLoader } from './LWOLoader'\nimport { LWSCLoader } from './LWSCLoader'\nimport { SceneManager } from '../scene/SceneManager'\nimport { AnimClip } from '../scene/model/anim/AnimClip'\n\nexport class AnimEntityLoader {\n\n    static loadModels(url, root): AnimationEntityType {\n        const path = getPath(url)\n\n        const entityType = new AnimationEntityType()\n\n        entityType.carryNullName = iGet(root, 'CarryNullName')\n        entityType.depositNullName = iGet(root, 'DepositNullName')\n        entityType.toolNullName = iGet(root, 'ToolNullName')\n\n        // TODO load other poly quality models (if available)\n        // let mediumPoly = iGet(root, 'MediumPoly');\n        // if (mediumPoly) {\n        //     Object.keys(mediumPoly).forEach((key) => {\n        //         const polyname = mediumPoly[key];\n        //         const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //         const polyfile = path + polyname + '.lwo';\n        //         console.log('polyfile');\n        //         console.log(polyfile);\n        //         // new LWOLoader().load(polyfile, (model) => {\n        //         //     mediumPoly[polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //         // }, undefined, () => {\n        //         //     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //         // });\n        //     });\n        //     Object.keys(mediumPoly).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete mediumPoly[polykey]);\n        // }\n\n        const highPoly = iGet(root, 'highpoly')\n        if (highPoly) {\n            entityType.highPoly = {}\n            Object.keys(highPoly).forEach((key) => {\n                const polyname = highPoly[key] + '.lwo'\n                const polykey = key.startsWith('!') ? key.slice(1) : key\n                const lwoBuffer = ResourceManager.getResource(path + polyname)\n                entityType.highPoly[polykey] = SceneManager.registerMesh(new LWOLoader(path).parse(lwoBuffer))\n            })\n        }\n\n        // let fPoly = (root)['fppoly'];\n        // if (fPoly) {\n        //     Object.keys(fPoly).forEach((camera) => {\n        //         Object.keys(fPoly[camera]).forEach((key) => {\n        //             const polyname = fPoly[camera][key];\n        //             const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //             if (polyname !== 'null') {\n        //                 const polyfile = path + polyname + '.lwo';\n        //                 new LWOLoader().load(polyfile, (model) => {\n        //                     fPoly[camera][polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //                 }, undefined, () => {\n        //                     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //                 });\n        //             } else {\n        //                 fPoly[camera][key] = {polyname: polyname, polyfile: null, model: new Group()};\n        //             }\n        //         });\n        //         Object.keys(fPoly[camera]).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete fPoly[polykey][camera]);\n        //     });\n        // }\n\n        const activities = iGet(root, 'Activities')\n        if (activities) {\n            Object.keys(activities).forEach((activity) => {\n                try {\n                    let keyname = iGet(activities, activity)\n                    const act: { file: string, transcoef: number, lwsfile: boolean, animation: AnimClip } = iGet(root, keyname)\n                    const file = iGet(act, 'FILE')\n                    const isLws = iGet(act, 'LWSFILE') === true\n                    const transcoef = iGet(act, 'TRANSCOEF')\n                    const looping = iGet(act, 'LOOPING') === true\n                    if (isLws) {\n                        const content = ResourceManager.getResource(path + file + '.lws')\n                        act.animation = new LWSCLoader(path).parse(content)\n                        act.animation.looping = looping\n                        act.animation.transcoef = transcoef ? Number(transcoef) : 1\n                        entityType.activities.set(activity.toLowerCase(), act)\n                    } else {\n                        console.error('Found activity which is not an LWS file')\n                    }\n                } catch (e) {\n                    console.error(e)\n                    console.log(root)\n                    console.log(activities)\n                    console.log(activity)\n                }\n            })\n        }\n\n        return entityType\n    }\n\n}\n","import { createContext, createDummyImgData, getPixel, setPixel } from './ImageHelper'\n\nexport class BitmapFont {\n\n    charHeight: number\n    letters: ImageData[] = []\n\n    constructor(fontImageData: ImageData, cols = 10, rows = 19) { // font images always consist of 10 columns and 19 rows with last row empty\n        // actually chars are font dependent and have to be externalized in future\n        // maybe CP850 was used... not sure, doesn't fit...\n        const chars = [' ', '!', '\"', '#', '$', '%', '⌵', '`', '(', ')',\n            '*', '+', ',', '-', '.', '/', '0', '1', '2', '3',\n            '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',\n            '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n            'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n            'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[',\n            '\\\\', ']', '^', '_', '\\'', 'a', 'b', 'c', 'd', 'e',\n            'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\n            'z', 'Ä', 'Å', 'Á', 'À', 'Â', 'Ã', 'Ą', 'ä', 'å',\n            'á', 'à', 'â', 'ã', 'ą', 'Ë', 'E̊', 'É', 'È', 'É',\n            'Ę', 'ë', 'e̊', 'é', 'è', 'e̊', 'ę̊', '', '', '',\n            '', '', '', '', '', 'Ö', '', '', '', '',\n            'ö', '', '', '', '', 'Ü', '', '', '', 'ü',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', 'ß', '', '', '', 'Ñ', '', 'ñ',\n            '',\n        ] // XXX complete this character list\n\n        const maxCharWidth = fontImageData.width / cols\n        this.charHeight = fontImageData.height / rows\n\n        function getActualCharacterWidth(imgData) {\n            for (let y = 0; y < imgData.height / rows; y++) { // find non-empty row first\n                let rowPixelIndex = y * 4 * imgData.width\n                if (imgData.data[rowPixelIndex] !== 255 && imgData.data[rowPixelIndex + 2] !== 255) { // red/blue pixels indicate end of character\n                    for (let x = 0; x < maxCharWidth; x++) {\n                        let colPixelIndex = x * 4\n                        if (imgData.data[colPixelIndex] === 255 || imgData.data[colPixelIndex + 2] === 255) { // red/blue pixels indicate end of character\n                            return x\n                        }\n                    }\n                    return maxCharWidth\n                }\n            }\n            return 0\n        }\n\n        for (let i = 0; i < chars.length; i++) {\n            let imgData = this.extractData(fontImageData, (i % 10) * maxCharWidth, Math.floor(i / 10) * this.charHeight, maxCharWidth, this.charHeight)\n            let actualWidth = getActualCharacterWidth(imgData)\n            if (actualWidth > 0) {\n                imgData = this.extractData(imgData, 0, 0, actualWidth, this.charHeight)\n            } else {\n                imgData = createDummyImgData(maxCharWidth, this.charHeight)\n            }\n            this.letters[chars[i]] = imgData\n        }\n    }\n\n    extractData(imgData, startX, startY, width, height): ImageData {\n        const alpha = getPixel(imgData, startX + width - 1, startY + height - 1)\n        const result = new ImageData(width, height)\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const p = getPixel(imgData, startX + x, startY + y)\n                if (p.r === alpha.r && p.g === alpha.g && p.b === alpha.b) p.a = 0 // apply alpha channel\n                setPixel(result, x, y, p.r, p.g, p.b, p.a)\n            }\n        }\n        return result\n    }\n\n    createTextImage(text: string, maxWidth?: number, autoCenter: boolean = true): HTMLCanvasElement {\n        if (text === undefined || text === null || text.length < 1) {\n            // empty text requested, context with width 0 is not allowed, but 1 with alpha is close enough\n            return createContext(1, 1).canvas\n        }\n        text = text.replace(/_/g, ' ')\n        const rows = this.determineRows(text, maxWidth)\n        const width = Math.max(...(rows.map(r => r.width)))\n        const result = new ImageData(width, this.charHeight * rows.length)\n        rows.forEach((row, index) => {\n            const rowX = autoCenter ? Math.round((width - row.width) / 2) : 0\n            const rowY = index * this.charHeight\n            let letterX = 0\n            for (let c = 0; c < row.text.length; c++) {\n                const letterImgData = this.letters[row.text.charAt(c)]\n                if (letterImgData) {\n                    for (let x = letterX; x < letterX + letterImgData.width; x++) {\n                        for (let y = 0; y < letterImgData.height; y++) {\n                            const p = getPixel(letterImgData, x - letterX, y)\n                            setPixel(result, rowX + x, rowY + y, p.r, p.g, p.b, p.a)\n                        }\n                    }\n                    letterX += letterImgData.width\n                } // missing letter issue already reported above\n            }\n        })\n        const img: CanvasRenderingContext2D = createContext(result.width, result.height)\n        img.putImageData(result, 0, 0)\n        return img.canvas\n    }\n\n    private determineRows(text: string, maxWidth?: number): { text: string, width: number }[] {\n        const spaceWidth = this.letters[' '].width\n        const rows: { text: string, width: number }[] = []\n        let rowText = ''\n        let rowWidth = 0\n        text.split(' ').map(word => {\n            let wordWidth = 0\n            for (let c = 0; c < word.length; c++) {\n                const letter = word.charAt(c)\n                const letterImg = this.letters[letter]\n                if (letterImg) {\n                    wordWidth += letterImg.width\n                } else {\n                    console.error('Letter \\'' + letter + '\\' not found in charset! Ignoring it')\n                }\n            }\n            if (rowWidth > 0) {\n                if (!maxWidth || rowWidth + spaceWidth + wordWidth < maxWidth) {\n                    rowText += ' ' + word\n                    rowWidth += spaceWidth + wordWidth\n                } else {\n                    rows.push({text: rowText, width: rowWidth})\n                    rowText = word\n                    rowWidth = wordWidth\n                }\n            } else {\n                rowText += word\n                rowWidth += wordWidth\n            }\n            return wordWidth\n        })\n        if (rowWidth > 0) rows.push({text: rowText, width: rowWidth})\n        return rows\n    }\n}\n","export class BaseConfig {\n\n    static setFromCfg(config: BaseConfig, cfgObj: any) {\n        Object.keys(cfgObj).forEach((cfgKey) => {\n            const lCfgKeyName = (cfgKey.startsWith('!') ? cfgKey.substring(1) : cfgKey)\n                .toLowerCase()\n                .replace(/_/g, '') // Activity_Stand\n                .replace(/-/g, '') // Geo-dome\n            const found = Object.keys(config).some((objKey) => {\n                return config.assignValue(objKey, lCfgKeyName, cfgObj[cfgKey])\n            })\n            if (!found) {\n                console.warn('cfg key does not exist: ' + cfgKey)\n            }\n        })\n        return config\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            const currentValue = this[objKey]\n            const currentIsArray = Array.isArray(currentValue)\n            let parsedValue = this.parseValue(lCfgKeyName, cfgValue)\n            const parsedIsArray = Array.isArray(parsedValue)\n            if (currentValue && currentIsArray !== parsedIsArray) {\n                if (currentIsArray) {\n                    parsedValue = [parsedValue]\n                    // } else {\n                    //     console.warn('Array overwrite conflict for key ' + objKey + ' with existing value (' + currentValue + ') and new value (' + parsedValue + ')')\n                }\n            }\n            this[objKey] = parsedValue\n            return true\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return cfgValue\n    }\n\n}\n","// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n}\n\nexport enum POINTER_EVENT {\n    MOVE,\n    DOWN,\n    UP,\n}\n\nexport enum KEY_EVENT {\n    DOWN,\n    UP,\n}\n","import { BaseConfig } from './BaseConfig'\nimport { Building } from '../game/model/entity/building/Building'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class BuildingEntityStats extends BaseConfig {\n\n    Levels: number = 0\n    SelfPowered: boolean = false\n    PowerBuilding: boolean = false\n    PickSphere: number = 0\n    TrainDynamite: boolean[] = null\n    CostOre: number = 0\n    CostCrystal: number = 0\n    OxygenCoef: number = 0\n\n    static getByType(type: Building): BuildingEntityStats {\n        switch (type) {\n            case Building.TOOLSTATION:\n                return ResourceManager.stats.Toolstation\n            case Building.TELEPORT_PAD:\n                return ResourceManager.stats.TeleportPad\n            case Building.DOCKS:\n                return ResourceManager.stats.Docks\n            case Building.POWER_STATION:\n                return ResourceManager.stats.Powerstation\n            case Building.BARRACKS:\n                return ResourceManager.stats.Barracks\n            case Building.UPGRADE:\n                return ResourceManager.stats.Upgrade\n            case Building.GEODOME:\n                return ResourceManager.stats.Geodome\n            case Building.ORE_REFINERY:\n                return ResourceManager.stats.OreRefinery\n            case Building.GUNSTATION:\n                return ResourceManager.stats.GunStation\n            case Building.TELEPORT_BIG:\n                return ResourceManager.stats.TeleportBIG\n        }\n        throw 'Unexpected building type: '+type\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\n\nexport class MovableEntityStats extends BaseConfig {\n\n    RouteSpeed: number[] = []\n    RubbleCoef: number = 1\n    PathCoef: number = 1\n\n}\n","// noinspection JSUnusedGlobalSymbols\n\nimport { BaseConfig } from './BaseConfig'\nimport { BuildingEntityStats } from './BuildingEntityStats'\nimport { MovableEntityStats } from './MovableEntityStats'\n\nexport class GameStatsCfg extends BaseConfig {\n\n    Pilot = new class PilotStats extends BaseConfig {\n        Levels: number = 4\n        RouteSpeed: number[] = [1.10, 1.10, 1.10, 1.10]\n        SoilDrillTime: number[] = [4.0, 4.0, 4.0, 4.0] // Time in seconds to drill through the rock.\n        LooseDrillTime: number[] = [4.0, 4.0, 4.0, 4.0]\n        MedDrillTime: number[] = [8.0, 8.0, 8.0, 8.0]\n        HardDrillTime: number[] = [0.0, 0.0, 0.0, 0.0] // Zero means the object cannot drill the rock type\n        SeamDrillTime: number[] = [10.0, 10.0, 10.0, 10.0] // Either or both ore or crystal.\n        UpgradeTime: number[] = [30.0, 45.0, 60.0, 60.0] // Last entry is ignored as it can never upgrade from that.\n        CollRadius: number = 5.0\n        CollHeight: number = 12.0\n        TrackDist: number = 40.0\n        SingleWidthDig: boolean[] = [true, true, true, true]\n        PickSphere: number = 10.0\n        RepairValue: number[] = [10.0, 15.0, 20.0, 25.0]\n        SurveyRadius: number[] = [3, 3, 3, 3]\n        Drillsound: string = 'SND_pilotdrill'\n        Drillfadesound: string = 'SND_pilotdrillfade'\n        RestPercent: number = 60.0\n        EnergyDecayRate: number = 0.25\n        CanClearRubble: boolean = true\n        NumOfToolsCanCarry: number[] = [2, 3, 4, 5]\n        CrossLand: boolean = true\n        RubbleCoef: number = 0.5\n        PathCoef: number = 2.0\n        RouteAvoidance: boolean = true\n        UseLegoManTeleporter: boolean = true\n        AwarenessRange: number = 10.0\n        OxygenCoef: number = -1.0\n        CanStrafe: boolean = true\n        EnterToolStore: boolean = true\n        ShowHealthBar: boolean = true\n    }\n\n    RockMonster = new class RockMonsterStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 0.8\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 22.0\n        AlertRadius: number = 60.0\n        HealthDecayRate: number = 0.6 // Reduce health by 'n' every second.\n        PickSphere: number = 22.0\n        RepairValue: number = -10.0\n        CanScare: boolean = true\n        RestPercent: number = 20.0\n        CarryMinHealth: number = 15.0\n        PainThreshold: number = 20.0\n        StampRadius: number = 80.0\n        AttackRadius: number = 160.0\n        CanSteal: boolean = true\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        GrabMinifigure: boolean = true\n        RouteAvoidance: boolean = true\n        BumpDamage: boolean = true\n        AttackPaths: boolean = true\n        SplitOnZeroHealth: boolean = true\n        CanBeHitByFence: boolean = true\n        Capacity: number = 6 // How many crystals it can eat\n        PathCoef: number = 0.5\n        // Statistics about the weapons\n        CanBeShotAt: boolean = true // Can this monster be shot at by lego men\n        CanFreeze: boolean = true // Can this object be frozen\n        FreezerTime: number = 25.0 // Time this object is frozen for\n        FreezerDamage: number = 5.0 // Damage that freezing causes\n        CanLaser: boolean = true // Can this object be lasered\n        LaserDamage: number = 110.0 // Damage sustained by a laser\n        CanPush: boolean = true // Can this object be pusher'ed\n        PusherDist: number = 20.0 // Distance the object is pushed 40=1 block\n        PusherDamage: number = 2.0 // Damage that the pusher gun causes\n        WakeRadius: number = 25.0\n        ScaredByBigBangs: boolean = true\n        RemoveReinforcement: boolean = true\n        ShowHealthBar: boolean = true\n    }\n\n    SmallSpider = new class SmallSpiderStats extends MovableEntityStats {\n        Levels: number = 1\n        RouteSpeed: number[] = [2.0]\n        TrackDist: number = 10.0\n        CollRadius: number = 0.0\n        CollHeight: number = 0.0\n        PickSphere: number = 6.0\n        AlertRadius: number = 40.0\n        RandomMove: boolean = true\n        RandomEnterWall: boolean = true\n        CauseSlip: boolean = true\n        CrossLand: boolean = true\n        RubbleCoef: number = 0.2\n        DontShowDamage: boolean = true\n        DontShowOnRadar: boolean = true\n        ScaredByBigBangs: boolean = true\n    }\n\n    Bat = new class BatStats extends MovableEntityStats {\n        Levels: number = 1\n        RouteSpeed: number[] = [1.0]\n        TrackDist: number = 10.0\n        CollRadius: number = 10.0\n        AlertRadius: number = 10.0 // Alert radius (causes attack mode)\n        RandomMove: boolean = true // Random movement\n        randomMoveTime: number = 10\n        CanScare: boolean = true // Scare away the player\n        ScaredByBigBangs: boolean = true\n        // Flock parameters.\n        Flocks: boolean = true // Set this to create a flock for this object.\n        FlocksDebug: boolean = false // If this is set the actual lego objects animation is displayed at the \"lego\" position.\n        FlocksSmooth: boolean = true // Smooths out the orientation of the flocks elements.\n        FlocksSize: number = 8 // Number of the given item in the flock.  (Default 5)\n        FlocksTurn: number = 0.6 // Turning speed of the bat. (0.6 default)\n        FlocksSpeed: number = 1.5 // Velocity of the flock. (2.0 default)\n        FlocksTightness: number = 0.8 // Tightness of the flock. (2.0 default)\n        FlocksGoalUpdate: number = 2.0 // How often the flocks goal is updated (25 per second).  (2.0 default)\n        FlocksRandomness: number = 6.0 // Randomness of goals. (2.0 default)\n        FlocksHeight: number = 22.0 // Height above the ground of the flock elements.  (30.0 default)\n        CrossLand: boolean = true\n        CrossWater: boolean = true\n        CrossLava: boolean = true\n        DontShowDamage: boolean = true\n    }\n\n    TinyRM = new class TinyRMStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 1.2\n        TrackDist: number = 10.0\n        CollRadius: number = 0.0\n        CollHeight: number = 5.0\n        PickSphere: number = 6.0\n        AlertRadius: number = 40.0\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        DontShowDamage: boolean = true\n        DontShowOnRadar: boolean = true\n        ScaredByPlayer: boolean = true\n        ScaredByBigBangs: boolean = true\n    }\n\n    TinyIM = new class TinyIMStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 1.2\n        TrackDist: number = 10.0\n        CollRadius: number = 0.0\n        CollHeight: number = 5.0\n        PickSphere: number = 6.0\n        AlertRadius: number = 40.0\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        DontShowDamage: boolean = true\n        DontShowOnRadar: boolean = true\n        ScaredByPlayer: boolean = true\n        ScaredByBigBangs: boolean = true\n    }\n\n    Slug = new class SlugStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 0.3\n        TrackDist: number = 10.0\n        CollRadius: number = 3.0\n        CollHeight: number = 7.0\n        PickSphere: number = 12.0\n        AlertRadius: number = 40.0\n        CrossLand: boolean = true\n        RubbleCoef: number = 0.3\n        UseHoles: boolean = true\n        DrainPower: boolean = true\n        AttackRadius: number = 280.0\n        PainThreshold: number = 50.0\n        CanBeShotAt: boolean = true\n        CanLaser: boolean = true\n        LaserDamage: number = 5.0\n        CanPush: boolean = true // Can this object be pusher'ed\n        PusherDist: number = 60.0 // Distance the object is pushed\n        PusherDamage: number = 5.0 // Damage that the pusher gun causes\n        ShowHealthBar: boolean = true\n        ScaredByBigBangs: boolean = true\n    }\n\n    LavaMonster = new class LavaMonsterStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 0.8\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 22.0\n        AlertRadius: number = 60.0\n        HealthDecayRate: number = 0.6 // Reduce health by 'n' every second.\n        PickSphere: number = 22.0\n        RepairValue: number = -10.0\n        CanScare: boolean = true\n        RestPercent: number = 20.0\n        CarryMinHealth: number = 15.0\n        PainThreshold: number = 20.0\n        StampRadius: number = 80.0\n        AttackRadius: number = 160.0\n        CanSteal: boolean = true\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        GrabMinifigure: boolean = true\n        Capacity: number = 7 // How many crystals it can eat\n        RouteAvoidance: boolean = true\n        BumpDamage: boolean = true\n        AttackPaths: boolean = true\n        SplitOnZeroHealth: boolean = true\n        CanBeHitByFence: boolean = true\n        PathCoef: number = 0.5\n        CrossLava: boolean = true\n        // Statistics about the weapons\n        CanBeShotAt: boolean = true // Can this monster be shot at by lego men\n        CanFreeze: boolean = true // Can this object be frozen\n        FreezerTime: number = 75.0 // Time this object is frozen for\n        FreezerDamage: number = 40.0 // Damage that freezing causes\n        CanLaser: boolean = true // Can this object be lasered\n        LaserDamage: number = 1.0 // Damage sustained by a laser\n        CanPush: boolean = true // Can this object be pusher'ed\n        PusherDist: number = 60.0 // Distance the object is pushed\n        PusherDamage: number = 5.0 // Damage that the pusher gun causes\n        WakeRadius: number = 25.0\n        ScaredByBigBangs: boolean = true\n        RemoveReinforcement: boolean = true\n        ShowHealthBar: boolean = true\n    }\n\n    IceMonster = new class IceMonsterStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 0.8\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 22.0\n        AlertRadius: number = 60.0\n        HealthDecayRate: number = 0.6 // Reduce health by 'n' every second.\n        PickSphere: number = 22.0\n        RepairValue: number = -10.0\n        CanScare: boolean = true\n        RestPercent: number = 20.0\n        CarryMinHealth: number = 15.0\n        PainThreshold: number = 20.0\n        StampRadius: number = 80.0\n        AttackRadius: number = 120.0\n        CanSteal: boolean = true\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        GrabMinifigure: boolean = true\n        Capacity: number = 5 // How many crystals it can eat\n        RouteAvoidance: boolean = true\n        BumpDamage: boolean = true\n        AttackPaths: boolean = true\n        SplitOnZeroHealth: boolean = true\n        CanBeHitByFence: boolean = true\n        PathCoef: number = 0.5\n        // Statistics about the weapons\n        CanBeShotAt: boolean = true // Can this monster be shot at by lego men\n        CanFreeze: boolean = false // Can this object be frozen\n        FreezerTime: number = 0.0 // Time this object is frozen for\n        FreezerDamage: number = 0.0 // Damage that freezing causes\n        CanLaser: boolean = true // Can this object be lasered\n        LaserDamage: number = 110.0 // Damage sustained by a laser\n        CanPush: boolean = true // Can this object be pusher'ed\n        PusherDist: number = 60.0 // Distance the object is pushed\n        PusherDamage: number = 2.0 // Damage that the pusher gun causes\n        WakeRadius: number = 25.0\n        ScaredByBigBangs: boolean = true\n        RemoveReinforcement: boolean = true\n        ShowHealthBar: boolean = true\n    }\n\n    Hoverboard = new class HoverboardStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No drill or carry)\n        Levels: number = 8\n        RouteSpeed: number[] = [3.0, 3.0, 5.0, 5.0, 3.0, 3.0, 5.0, 5.0]\n        SurveyRadius: number[] = [0, 0, 0, 0, 4, 4, 4, 4]\n        TrackDist: number = 50.0\n        CollRadius: number = 8.0\n        CollHeight: number = 12.0\n        PickSphere: number = 16.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        UseSmallTeleporter: boolean = true\n        CanStrafe: boolean = true\n        CostCrystal: number = 1\n        UpgradeCostOre: number[] = [0, 5, 10, 0]\n        UpgradeCostStuds: number[] = [0, 1, 2, 0]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_SmallEngine'\n    }\n\n    SmallHeli = new class SmallHeliStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 2.50\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 12.0\n        PickSphere: number = 20.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        CrossWater: boolean = true\n        CrossLava: boolean = true\n        UseSmallTeleporter: boolean = true\n        CanStrafe: boolean = true\n        CostCrystal: number = 3\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_HeliEngine'\n    }\n\n    Smallmlp = new class SmallmlpStats extends BaseConfig {\n        Levels: number = 4\n        RouteSpeed: number[] = [0.50, 0.50, 0.50, 0.50]\n        TrackDist: number = 50.0\n        CollRadius: number = 12.0\n        CollHeight: number = 22.0\n        PickSphere: number = 26.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        UseSmallTeleporter: boolean = true\n        Tracker: boolean = true\n        CanDoubleSelect: boolean = true\n        CostCrystal: number = 3\n        UpgradeCostOre: number[] = [0, 0, 0, 10]\n        UpgradeCostStuds: number[] = [0, 0, 0, 2]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_MediumEngine'\n    }\n\n    SmallCat = new class SmallCatStats extends BaseConfig {\n        Levels: number = 3\n        RouteSpeed: number[] = [2.0, 3.0, 4.0]\n        TrackDist: number = 50.0\n        CollRadius: number = 12.0\n        CollHeight: number = 12.0\n        PickSphere: number = 26.0\n        CrossWater: boolean = true\n        CanBeDriven: boolean = true\n        UseWaterTeleporter: boolean = true\n        CostCrystal: number = 2\n        MaxCarry: number[] = [1, 1, 1]\n        GetInAtLand: boolean = true\n        GetOutAtLand: boolean = true\n        TakeCarryingDrivers: boolean = true\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_Catamaran'\n    }\n\n    SmallDigger = new class SmallDiggerStats extends BaseConfig {\n        Levels: number = 8\n        RouteSpeed: number[] = [2.0, 2.0, 4.0, 4.0, 2.0, 2.0, 4.0, 4.0]\n        SoilDrillTime: number[] = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n        LooseDrillTime: number[] = [2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0]\n        MedDrillTime: number[] = [4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0]\n        HardDrillTime: number[] = [180.0, 150.0, 180.0, 150.0, 180.0, 150.0, 180.0, 150.0]\n        SeamDrillTime: number[] = [8.0, 4.0, 8.0, 4.0, 8.0, 4.0, 8.0, 4.0]\n        MaxCarry: number[] = [0, 0, 0, 0, 0, 0, 0, 0]\n        SurveyRadius: number[] = [0, 0, 0, 0, 4, 4, 4, 4]\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 12.0\n        PickSphere: number = 20.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        RouteAvoidance: boolean = true\n        UseSmallTeleporter: boolean = true\n        VehicleCanBeCarried: boolean = true\n        CostCrystal: number = 1\n        UpgradeCostOre: number[] = [0, 5, 10, 10]\n        UpgradeCostStuds: number[] = [0, 1, 2, 2]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_SmallEngine'\n    }\n\n    SmallTruck = new class SmallTruckStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No drill)\n        Levels: number = 16\n        RouteSpeed: number[] = [2.0, 2.0, 3.0, 3.0, 2.0, 2.0, 3.0, 3.0, 2.0, 2.0, 3.0, 3.0, 2.0, 2.0, 3.0, 3.0]\n        MaxCarry: number[] = [3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6]\n        CarryStart: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3]\n        SurveyRadius: number[] = [0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4]\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 12.0\n        PickSphere: number = 20.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        UseSmallTeleporter: boolean = true\n        VehicleCanBeCarried: boolean = true\n        CostCrystal: number = 2\n        EnterToolStore: boolean = true\n        UpgradeCostOre: number[] = [5, 5, 10, 0]\n        UpgradeCostStuds: number[] = [1, 1, 2, 0]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_SmallEngine'\n    }\n\n    Bulldozer = new class BulldozerStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No drill)\n        Levels: number = 16\n        RouteSpeed: number[] = [0.5, 0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8]\n        MaxCarry: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2]\n        SurveyRadius: number[] = [0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5, 5, 5]\n        TrackDist: number = 80.0\n        CollRadius: number = 18.0\n        CollHeight: number = 26.0\n        PickSphere: number = 40.0\n        CrossLand: boolean = true\n        CanClearRubble: boolean = true\n        UseBigTeleporter: boolean = true\n        CanBeDriven: boolean = true\n        CostCrystal: number = 4\n        InvisibleDriver: boolean = true\n        UpgradeCostOre: number[] = [5, 5, 20, 0]\n        UpgradeCostStuds: number[] = [1, 1, 4, 0]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_MediumEngine'\n    }\n\n    WalkerDigger = new class WalkerDiggerStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No carry)\n        Levels: number = 8\n        RouteSpeed: number[] = [0.50, 0.50, 0.80, 0.80, 0.50, 0.50, 0.80, 0.80]\n        SoilDrillTime: number[] = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n        LooseDrillTime: number[] = [0.80, 0.40, 0.80, 0.40, 0.80, 0.40, 0.80, 0.40]\n        MedDrillTime: number[] = [2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0]\n        HardDrillTime: number[] = [180.0, 150.0, 180.0, 150.0, 180.0, 150.0, 180.0, 150.0]\n        SeamDrillTime: number[] = [4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0]\n        SurveyRadius: number[] = [0, 0, 0, 0, 5, 5, 5, 5]\n        TrackDist: number = 80.0\n        CollRadius: number = 15.0\n        CollHeight: number = 33.0\n        PickSphere: number = 35.0\n        CrossLand: boolean = true\n        UseBigTeleporter: boolean = true\n        CostCrystal: number = 3\n        CanBeDriven: boolean = true\n        InvisibleDriver: boolean = true\n        CanStrafe: boolean = true\n        DrillSound: string = 'DrillSFX_Grinder'\n        DrillFadeSound: string = 'DrillSFX_GrinderFade'\n        UpgradeCostOre: number[] = [0, 5, 20, 20]\n        UpgradeCostStuds: number[] = [0, 1, 4, 4]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_MediumEngine'\n    }\n\n    LargeDigger = new class LargeDiggerStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No carry or scan)\n        Levels: number = 4\n        RouteSpeed: number[] = [0.30, 0.30, 0.60, 0.60]\n        SoilDrillTime: number[] = [1.0, 1.0, 1.0, 1.0]\n        LooseDrillTime: number[] = [0.40, 0.20, 0.40, 0.20]\n        MedDrillTime: number[] = [0.80, 0.40, 0.80, 0.40]\n        HardDrillTime: number[] = [1.0, 0.50, 1.0, 0.50]\n        SeamDrillTime: number[] = [1.0, 0.50, 1.0, 0.50]\n        TrackDist: number = 80.0\n        CollRadius: number = 22.0\n        CollHeight: number = 30.0\n        PickSphere: number = 50.0\n        CrossLand: boolean = true\n        UseBigTeleporter: boolean = true\n        Tracker: boolean = true\n        CanDoubleSelect: boolean = true\n        CanBeDriven: boolean = true\n        CostCrystal: number = 5\n        InvisibleDriver: boolean = true\n        DrillSound: string = 'DrillSFX_Grinder'\n        DrillFadeSound: string = 'DrillSFX_GrinderFade'\n        UpgradeCostOre: number[] = [0, 0, 15, 20]\n        UpgradeCostStuds: number[] = [0, 0, 3, 4]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_LargeEngine'\n    }\n\n    LargeCat = new class LargeCatStats extends BaseConfig { // [Carry][Scan][Speed][Drill] (No carry) (Drill???)\n        Levels: number = 1\n        RouteSpeed: number = 1.50\n        SurveyRadius: number = 0\n        TrackDist: number = 80.0\n        CollRadius: number = 22.0\n        CollHeight: number = 25.0\n        PickSphere: number = 50.0\n        CanBeDriven: boolean = true\n        CrossWater: boolean = true\n        UseWaterTeleporter: boolean = true\n        ClassAsLarge: boolean = true\n        CarryVehicles: boolean = true\n        CostCrystal: number = 4\n        EngineSound: string = 'SND_Catamaran'\n        ShowHealthBar: boolean = true\n    }\n\n    LargeHeli = new class LargeHeliStats extends BaseConfig {\n        Levels: number = 3\n        RouteSpeed: number[] = [0.30, 0.40, 0.50]\n        TrackDist: number = 80.0\n        CollRadius: number = 0.0\n        CollHeight: number = 0.0\n        PickSphere: number = 20.0\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_HeliEngine'\n    }\n\n    LargeMLP = new class LargeMLPStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No carry or speed) (Doesn't have drills, just lasers)\n        Levels: number = 8\n        RouteSpeed: number[] = [0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40]\n        SurveyRadius: number[] = [0, 0, 0, 0, 5, 5, 5, 5]\n        TrackDist: number = 80.0\n        CollRadius: number = 20.0\n        CollHeight: number = 24.0\n        PickSphere: number = 47.0\n        CrossLand: boolean = true\n        UseBigTeleporter: boolean = true\n        Tracker: boolean = true\n        CanDoubleSelect: boolean = true\n        CostCrystal: number = 4\n        CanBeDriven: boolean = true\n        InvisibleDriver: boolean = true\n        UpgradeCostOre: number[] = [0, 5, 0, 25]\n        UpgradeCostStuds: number[] = [0, 1, 0, 5]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_LargeEngine'\n    }\n\n    Barracks = new class BarracksStats extends BuildingEntityStats {\n        Levels: number = 3\n        TrackDist: number = 50.0\n        CollHeight: number = 23.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 15\n        CostRefinedOre: number = 3\n        CostCrystal: number = 3\n        SnaxULike: boolean = true\n        TrainDriver: boolean[] = [true, true, true]\n        CrystalDrain: number[] = [1, 1, 1]\n        DamageCausesCallToArms: boolean = true\n        OxygenCoef: number = 10.0\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Powerstation = new class PowerstationStats extends BuildingEntityStats {\n        Levels: number = 2\n        TrackDist: number = 80.0\n        ProcessCrystal: boolean = true\n        CollHeight: number = 31.0\n        CollRadius: number = 15.0\n        PickSphere: number = 32.0\n        CostOre: number = 12\n        CostRefinedOre: number = 3\n        CostCrystal: number = 2\n        PowerBuilding: boolean = true\n        DamageCausesCallToArms: boolean = true\n        EngineSound: string = 'SND_PowerBuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    OreRefinery = new class OreRefineryStats extends BuildingEntityStats {\n        Levels: number = 4\n        TrackDist: number = 60.0\n        ProcessOre: boolean = true\n        CollHeight: number = 16.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 20\n        CostRefinedOre: number = 4\n        CostCrystal: number = 3\n        CrystalDrain: number[] = [1, 1, 1, 1]\n        DamageCausesCallToArms: boolean = true\n        MaxCarry: number[] = [5, 4, 3, 2]\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    TeleportPad = new class TeleportPadStats extends BuildingEntityStats {\n        Levels: number = 3\n        TrackDist: number = 60.0\n        SmallTeleporter: boolean = true\n        ManTeleporter: boolean = true\n        CollHeight: number = 20.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 8\n        CostRefinedOre: number = 2\n        CrystalDrain: number[] = [1, 1, 1]\n        DamageCausesCallToArms: boolean = true\n        TrainPilot: boolean[] = [true, true, true]\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    TeleportBIG = new class TeleportBIGStats extends BuildingEntityStats {\n        Levels: number = 2\n        TrackDist: number = 50.0\n        BigTeleporter: boolean = true\n        CollHeight: number = 17.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 20\n        CostRefinedOre: number = 4\n        CostCrystal: number = 2\n        CrystalDrain: number[] = [1, 1]\n        DamageCausesCallToArms: boolean = true\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Docks = new class DocksStats extends BuildingEntityStats {\n        Levels: number = 1\n        TrackDist: number = 60.0\n        CollHeight: number = 20.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 8\n        CostRefinedOre: number = 2\n        CostCrystal: number = 1\n        WaterEntrances: number = 1\n        WaterTeleporter: boolean = true\n        CrystalDrain: number = 1\n        DamageCausesCallToArms: boolean = true\n        TrainSailor: boolean = true\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Toolstation = new class ToolstationStats extends BuildingEntityStats {\n        Levels: number = 3\n        TrackDist: number = 50.0\n        ManTeleporter: boolean = true\n        CollHeight: number = 16.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        ToolStore: boolean = true\n        StoreObjects: boolean = true\n        SelfPowered: boolean = true\n        DamageCausesCallToArms: boolean = true\n        TrainDynamite: boolean[] = [false, false, true]\n        FunctionCoef: number[] = [1.0, 1.0, 1.0] // Function here is how long it takes to upgrade a minfigure\n        ShowHealthBar: boolean = true\n    }\n\n    GunStation = new class GunStationStats extends BuildingEntityStats {\n        Levels: number = 2\n        TrackDist: number = 60.0\n        CollHeight: number = 33.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 15\n        CostRefinedOre: number = 3\n        CostCrystal: number = 1\n        Tracker: boolean = true\n        CanDoubleSelect: boolean = true\n        CrystalDrain: number[] = [1, 1]\n        DamageCausesCallToArms: boolean = true\n        FunctionCoef: number[] = [1.0, 0.5] // How much of a crystal it drains every time it fires...\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Geodome = new class GeodomeStats extends BuildingEntityStats {\n        Levels: number = 3\n        TrackDist: number = 50.0\n        CollHeight: number = 20.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 15\n        CostRefinedOre: number = 3\n        CostCrystal: number = 3\n        SurveyRadius: number[] = [6, 8, 12]\n        CrystalDrain: number[] = [1, 1, 1]\n        DamageCausesCallToArms: boolean = true\n        TrainScanner: boolean[] = [true, true, true]\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Upgrade = new class UpgradeStats extends BuildingEntityStats {\n        Levels: number = 2\n        TrackDist: number = 80.0\n        CollHeight: number = 40.0\n        CollRadius: number = 15.0\n        PickSphere: number = 32.0\n        CostOre: number = 20\n        CostRefinedOre: number = 4\n        CostCrystal: number = 3\n        UpgradeBuilding: boolean = true\n        CrystalDrain: number[] = [1, 1]\n        DamageCausesCallToArms: boolean = true\n        FunctionCoef: number[] = [0.8, 1.6] // Function is speed of upgrade animation.\n        TrainRepair: boolean[] = [true, true]\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    PowerCrystal = new class PowerCrystalStats extends BaseConfig {\n        Levels: number = 1\n        TrackDist: number = 20.0\n        CollHeight: number = 2.0\n        PickSphere: number = 6.0\n    }\n\n    ProcessedOre = new class ProcessedOreStats extends BaseConfig {\n        Levels: number = 1\n        TrackDist: number = 20.0\n        CollHeight: number = 2.0\n        PickSphere: number = 8.0\n    }\n\n    Ore = new class OreStats extends BaseConfig {\n        Levels: number = 1\n        TrackDist: number = 20.0\n        CollHeight: number = 2.0\n        PickSphere: number = 6.0\n    }\n\n    Boulder = new class BoulderStats extends BaseConfig {\n        Levels: number = 1\n        CollRadius: number = 2.0\n    }\n\n    Pusher = new class PusherStats extends BaseConfig {\n        Levels: number = 1\n        CollRadius: number = 1.0\n    }\n\n    Freezer = new class FreezerStats extends BaseConfig {\n        Levels: number = 1\n        CollRadius: number = 1.0\n    }\n\n    LaserShot = new class LaserShotStats extends BaseConfig {\n        Levels: number = 1\n        ColRadius: number = 1.0\n    }\n\n    ElectricFence = new class ElectricFenceStats extends BaseConfig {\n        Levels: number = 1\n        TrackDist: number = 50.0\n        CollRadius: number = 5.0\n        CollHeight: number = 18.0\n        PickSphere: number = 20.0\n        DamageCausesCallToArms: boolean = true\n    }\n\n    Path = new class PathStats extends BaseConfig {\n        Levels: number = 1\n        CostOre: number = 2\n        CostRefinedOre: number = 1\n    }\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            BaseConfig.setFromCfg(this[objKey], cfgValue)\n            return true\n        }\n    }\n\n}\n\n","import ResourceWorker from 'worker-loader!./wadworker/Resources'\nimport { RepeatWrapping, Texture } from 'three'\nimport { AnimationEntityType } from '../scene/model/anim/AnimationEntityType'\nimport { InitLoadingMessage } from './wadworker/InitLoadingMessage'\nimport { createContext, createDummyImgData } from '../core/ImageHelper'\nimport { iGet } from './wadworker/WadUtil'\nimport { getFilename } from '../core/Util'\nimport { AnimEntityLoader } from './AnimEntityLoader'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { WorkerMessage, WorkerMessageType } from './wadworker/WorkerMessage'\nimport { GameStatsCfg } from '../cfg/GameStatsCfg'\n\nexport class ResourceManager {\n\n    static worker: ResourceWorker = new ResourceWorker()\n    static configuration: any = {}\n    static resourceByName: {} = {}\n    static fontCache = {}\n    static stats: GameStatsCfg\n\n    static startLoadingFromCache() {\n        return this.startLoading(null)\n    }\n\n    static startLoadingFromUrl(wad0Url: string, wad1Url: string) {\n        return this.startLoading(new InitLoadingMessage(wad0Url, wad1Url))\n    }\n\n    private static startLoading(msg: InitLoadingMessage) {\n        this.worker.onmessage = (event) => {\n            const msg: WorkerMessage = event.data\n            if (msg.type === WorkerMessageType.ASSET) {\n                this.resourceByName[msg.assetName.toLowerCase()] = msg.assetObj\n                this.onAssetLoaded()\n            } else if (msg.type === WorkerMessageType.MSG) {\n                this.onMessage(msg.text)\n            } else if (msg.type === WorkerMessageType.CFG) {\n                this.configuration = msg.cfg\n                this.stats = new GameStatsCfg(this.cfg('Stats'))\n                this.onInitialLoad(msg.totalResources)\n            } else if (msg.type === WorkerMessageType.CACHE_MISS) {\n                this.onCacheMissed()\n            } else if (msg.type === WorkerMessageType.DONE) {\n                console.log('Loading of about ' + msg.totalResources + ' assets complete! Total load time: ' + msg.loadingTimeSeconds + ' seconds.')\n                this.onLoadDone()\n            }\n        }\n        this.worker.postMessage(msg)\n    }\n\n    static onMessage: (msg: string) => any = (msg: string) => {\n        console.log(msg)\n    }\n\n    static onCacheMissed: () => any = () => {\n        console.log('Worker missed cache')\n    }\n\n    static onInitialLoad: (totalResources: number) => any = () => {\n        console.log('Initial loading done.')\n    }\n\n    static onAssetLoaded: () => any = () => {\n    }\n\n    static onLoadDone: () => any = () => {\n    }\n\n    static cfg(...keys: string[]): any {\n        return iGet(ResourceManager.configuration, ...keys)\n    }\n\n    static filterTextureSequenceNames(basename: string): string[] {\n        const lBasename = basename.toLowerCase()\n        const result = Object.keys(this.resourceByName).filter((name) => name.startsWith(lBasename))\n        if (result.length > 0) {\n            return result\n        } else if (!lBasename.startsWith('world/shared/')) {\n            return ResourceManager.filterTextureSequenceNames('world/shared/' + getFilename(basename))\n        } else {\n            console.warn('Texture sequence not found: ' + basename)\n            return null\n        }\n    }\n\n    static getResource(resourceName: string): any {\n        const lName = resourceName ? resourceName.toString().toLowerCase() : null\n        if (lName && this.resourceByName.hasOwnProperty(lName)) {\n            return this.resourceByName[lName]\n        }\n        return null\n    }\n\n    static getImageData(imageName): ImageData {\n        if (!imageName || imageName.length === 0) {\n            throw 'imageName must not be undefined, null or empty - was ' + imageName\n        }\n        const lImageName = imageName.toLowerCase()\n        let imgData = this.getResource(lImageName)\n        if (!imgData) {\n            console.error('Image \\'' + imageName + '\\' unknown! Using placeholder image instead')\n            ResourceManager.resourceByName[lImageName] = createDummyImgData(64, 64)\n        }\n        return ResourceManager.resourceByName[lImageName]\n    }\n\n    static getImage(imageName: string): HTMLCanvasElement {\n        const imgData = this.getImageData(imageName)\n        const context: CanvasRenderingContext2D = createContext(imgData.width, imgData.height)\n        context.putImageData(imgData, 0, 0)\n        return context.canvas\n    }\n\n    static getImageOrNull(imageName: string): HTMLCanvasElement | null {\n        if (!imageName) return null\n        return this.getImage(imageName)\n    }\n\n    static getTexture(textureName): Texture {\n        if (!textureName || textureName.length === 0) {\n            throw 'textureName must not be undefined, null or empty - was ' + textureName\n        }\n        const lTextureName = textureName.toLowerCase()\n        const lSharedTextureName = 'world/shared/' + getFilename(lTextureName)\n        let imgData = this.getResource(lTextureName) || this.getResource(lSharedTextureName)\n        if (!imgData) {\n            console.warn('Texture \\'' + textureName + '\\' (' + lTextureName + ', ' + lSharedTextureName + ') unknown! Using placeholder texture instead')\n            ResourceManager.resourceByName[lTextureName] = imgData = createDummyImgData(64, 64)\n        }\n        const texture = new Texture(imgData, Texture.DEFAULT_MAPPING, RepeatWrapping, RepeatWrapping)\n        texture.needsUpdate = true\n        return texture\n    }\n\n    static getMap(name: string) {\n        return name ? this.getResource(name) : null\n    }\n\n    static getAnimationEntityType(aeFilename: string): AnimationEntityType {\n        let cfgRoot = this.getResource(aeFilename)\n        if (!cfgRoot) throw 'Could not get animation entity type for: ' + aeFilename\n        return AnimEntityLoader.loadModels(aeFilename, cfgRoot)\n    }\n\n    static getBitmapFont(name: string): BitmapFont {\n        const fontImageData = this.getResource(name)\n        if (!fontImageData) throw 'Could not load font image data for: ' + name\n        ResourceManager.fontCache[name] = ResourceManager.fontCache[name] || new BitmapFont(fontImageData)\n        return ResourceManager.fontCache[name]\n    }\n\n    static getDefaultFont() {\n        return ResourceManager.getBitmapFont('Interface/Fonts/Font5_Hi.bmp')\n    }\n}\n","import { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../main'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { KEY_EVENT, POINTER_EVENT } from '../event/EventTypeEnum'\n\nexport class ScreenLayer {\n\n    canvas: HTMLCanvasElement\n    context: CanvasRenderingContext2D\n    onRedraw: (context: CanvasRenderingContext2D) => any\n    active: boolean = true\n\n    constructor(alpha: boolean = false, withContext: boolean = true) {\n        this.canvas = document.createElement('canvas')\n        if (!alpha) this.canvas.style.background = '#f0f'\n        if (withContext) this.context = this.canvas.getContext('2d', {alpha: alpha})\n        this.hide()\n    }\n\n    reset() {\n    }\n\n    setZIndex(zIndex: number) {\n        this.canvas.style.zIndex = String(zIndex)\n    }\n\n    static compareZ(layerA: ScreenLayer, layerB: ScreenLayer) {\n        let aIndex = layerA?.canvas?.style?.zIndex || 0\n        const bIndex = layerB?.canvas?.style?.zIndex || 0\n        return aIndex === bIndex ? 0 : aIndex > bIndex ? -1 : 1\n    }\n\n    resize(width, height) {\n        this.canvas.width = width\n        this.canvas.height = height\n    }\n\n    redraw() {\n        const callback = this.onRedraw\n        if (this.isActive() && callback) {\n            const context = this.context\n            requestAnimationFrame(() => callback(context))\n        }\n    }\n\n    show() {\n        this.reset()\n        this.active = true\n        this.canvas.style.visibility = 'visible'\n        this.redraw()\n    }\n\n    hide() {\n        this.active = false\n        this.canvas.style.visibility = 'hidden'\n    }\n\n    isActive() {\n        return this.active\n    }\n\n    toCanvasCoords(windowX: number, windowY: number) {\n        const clientRect = this.canvas.getBoundingClientRect()\n        return [windowX - clientRect.left, windowY - clientRect.top]\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        return false\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        return false\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        return false\n    }\n\n}\n\nexport class ScaledLayer extends ScreenLayer {\n\n    fixedWidth: number\n    fixedHeight: number\n\n    constructor() {\n        super(true)\n        this.fixedWidth = SPRITE_RESOLUTION_WIDTH\n        this.fixedHeight = SPRITE_RESOLUTION_HEIGHT\n    }\n\n    toScaledCoords(windowX: number, windowY: number) {\n        const [cx, cy] = this.toCanvasCoords(windowX, windowY)\n        return [cx / this.scaleX(), cy / this.scaleY()]\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        this.context.scale(this.scaleX(), this.scaleY())\n    }\n\n    scaleX() {\n        return this.canvas.width / this.fixedWidth\n    }\n\n    scaleY() {\n        return this.canvas.height / this.fixedHeight\n    }\n\n}\n\nexport class CursorLayer extends ScaledLayer {\n\n    curUrl\n    cursorName: string = 'Aclosed'\n\n    show() {\n        super.show()\n        this.createCursor()\n    }\n\n    hide() {\n        super.hide()\n        this.canvas.style.cursor = null\n    }\n\n    createCursor() {\n        if (this.curUrl) URL.revokeObjectURL(this.curUrl)\n        const curImg = ResourceManager.getImage('Interface/Pointers/' + this.cursorName + '.bmp')\n        this.curUrl = curImg.toDataURL()\n        // Chrome limits cursor size to 32x32 anyway...\n        // const context: CanvasRenderingContext2D = createContext(curImg.width * this.scaleX(), curImg.height * this.scaleY());\n        // context.scale(this.scaleX(), this.scaleY());\n        // context.drawImage(curImg, 0, 0);\n        // this.curUrl = context.canvas.toDataURL();\n        this.canvas.style.cursor = 'url(' + this.curUrl + '), auto'\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        if (this.isActive()) this.createCursor()\n    }\n\n}\n","import { ScreenLayer } from '../screen/ScreenLayer'\nimport { BaseScreen } from '../screen/BaseScreen'\nimport { KEY_EVENT, POINTER_EVENT } from './EventTypeEnum'\n\nexport class EventManager {\n\n    constructor(screen: BaseScreen) {\n        screen.gameCanvasContainer.addEventListener('contextmenu', (event: MouseEvent) => {\n            if (screen.isInRect(event)) event.preventDefault()\n        })\n        new Map<string, POINTER_EVENT>([\n            ['pointermove', POINTER_EVENT.MOVE],\n            ['pointerdown', POINTER_EVENT.DOWN],\n            ['pointerup', POINTER_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: PointerEvent) => {\n                if (!screen.isInRect(event)) return\n                event.preventDefault()\n                // all event attibutes used by controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n                const nonBubblingClone = new PointerEvent(event.type, {\n                    bubbles: false, // disable bubbling otherwise we'll trigger this same event handler again\n                    clientX: event.clientX,\n                    clientY: event.clientY,\n                    pointerType: event.pointerType,\n                    button: event.button,\n                    ctrlKey: event.ctrlKey,\n                    metaKey: event.metaKey,\n                    shiftKey: event.shiftKey,\n                })\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handlePointerEvent(eventEnum, nonBubblingClone))\n            })\n        })\n        new Map<string, KEY_EVENT>([\n            ['keydown', KEY_EVENT.DOWN],\n            ['keyup', KEY_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: KeyboardEvent) => {\n                // event.preventDefault(); // otherwise page reload with F5 stops working (may be intended in future)\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handleKeyEvent(eventEnum, event))\n            })\n        })\n        screen.gameCanvasContainer.addEventListener('wheel', (event: WheelEvent) => {\n            if (!screen.isInRect(event)) return\n            // all event attibutes used by controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n            const nonBubblingClone = new WheelEvent(event.type, {\n                bubbles: false, // disable bubbling otherwise we'll trigger this same event handler again\n                clientX: event.clientX,\n                clientY: event.clientY,\n                deltaX: event.deltaX,\n                deltaY: event.deltaY,\n                deltaZ: event.deltaZ,\n                button: event.button,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey,\n                shiftKey: event.shiftKey,\n            })\n            screen.layers.filter(l => l.isActive())\n                .sort((a, b) => ScreenLayer.compareZ(a, b))\n                .some(l => l.handleWheelEvent(nonBubblingClone))\n        })\n    }\n\n}\n","import { Group, Mesh, MeshPhongMaterial, Vector2, Vector3 } from 'three'\nimport { Terrain } from './Terrain'\nimport { SurfaceType } from './SurfaceType'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Selectable, SelectionType } from '../../../game/model/Selectable'\nimport { EventBus } from '../../../event/EventBus'\nimport { SelectionEvent, SurfaceChanged, SurfaceSelectedEvent } from '../../../event/LocalEvents'\nimport { CavernDiscovered, JobCreateEvent, JobDeleteEvent, OreFoundEvent } from '../../../event/WorldEvents'\nimport { clearTimeoutSafe, getRandom, getRandomSign } from '../../../core/Util'\nimport { Crystal } from '../collect/Crystal'\nimport { Ore } from '../collect/Ore'\nimport { HEIGHT_MULTIPLER, TILESIZE } from '../../../main'\nimport { GameState } from '../../../game/model/GameState'\nimport { SurfaceJob } from '../../../game/model/job/surface/SurfaceJob'\nimport { LWSCLoader } from '../../../resource/LWSCLoader'\nimport { AnimSubObj } from '../anim/AnimSubObj'\nimport { SurfaceGeometry } from './SurfaceGeometry'\nimport { CrystalFoundEvent, LandslideEvent } from '../../../event/WorldLocationEvent'\nimport { JobType } from '../../../game/model/job/JobType'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { ElectricFence } from '../collect/ElectricFence'\n\nexport class Surface implements Selectable {\n\n    terrain: Terrain\n    surfaceType: SurfaceType\n    x: number\n    y: number\n    containedOres: number = 0\n    containedCrystals: number = 0\n    heightOffset: number = null\n    discovered: boolean = false\n    selected: boolean = false\n    reinforced: boolean = false\n    jobs: SurfaceJob[] = []\n    surfaceRotation: number = 0\n    seamLevel: number = 0\n    fallinTimeout = null\n\n    fallinGrp: Group = null\n    animationTimeout = null\n\n    wallType: WALL_TYPE = null\n    mesh: Mesh = null\n    needsMeshUpdate: boolean = false\n\n    topLeftHeightOffset: number = 0\n    topRightHeightOffset: number = 0\n    bottomLeftHeightOffset: number = 0\n    bottomRightHeightOffset: number = 0\n\n    rubblePositions: Vector2[] = []\n\n    building: BuildingEntity = null\n    fence: ElectricFence = null\n    hasPower: boolean = false\n\n    constructor(terrain: Terrain, surfaceType: SurfaceType, x: number, y: number, heightOffset: number) {\n        this.terrain = terrain\n        this.surfaceType = surfaceType\n        if (surfaceType === SurfaceType.CRYSTAL_SEAM || surfaceType === SurfaceType.ORE_SEAM) this.seamLevel = 4\n        this.x = x\n        this.y = y\n        this.heightOffset = heightOffset\n        EventBus.registerEventListener(EventKey.JOB_CREATE, (event: JobCreateEvent) => {\n            const jobType = event.job.type\n            if (jobType === JobType.DRILL || jobType === JobType.REINFORCE || jobType === JobType.BLOW) {\n                const surfaceJob = event.job as SurfaceJob\n                if (surfaceJob.surface === this) this.jobs.push(surfaceJob)\n            }\n        })\n    }\n\n    hasJobType(type: JobType) {\n        return this.jobs.some((job) => job.type === type)\n    }\n\n    /**\n     * @return {boolean} Returns true, if a new cave has been discovered\n     */\n    discoverNeighbors(): boolean {\n        if (!this.discovered) GameState.discoverSurface(this)\n        this.discovered = true\n        this.needsMeshUpdate = true\n        let foundCave = false\n        if (this.surfaceType.floor) {\n            for (let x = this.x - 1; x <= this.x + 1; x++) {\n                for (let y = this.y - 1; y <= this.y + 1; y++) {\n                    if (x !== this.x || y !== this.y) {\n                        const surf = this.terrain.getSurfaceOrNull(x, y)\n                        if (surf && !surf.discovered) {\n                            foundCave = surf.discoverNeighbors() || surf.surfaceType.floor\n                            surf.needsMeshUpdate = true\n                        }\n                    }\n                }\n            }\n        }\n        return foundCave\n    }\n\n    collapse() {\n        this.cancelJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += 4\n        this.needsMeshUpdate = true\n        // discover surface and all neighbors\n        const foundCave = this.discoverNeighbors()\n        if (foundCave) EventBus.publishEvent(new CavernDiscovered())\n        // drop contained ores and crystals\n        this.dropContainedOre(this.containedOres - 4)\n        for (let c = 0; c < this.containedCrystals; c++) {\n            const crystal = this.terrain.worldMgr.addCollectable(new Crystal(), this.getRandomPosition())\n            EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n        }\n        // check for unsupported neighbors\n        for (let x = this.x - 1; x <= this.x + 1; x++) {\n            for (let y = this.y - 1; y <= this.y + 1; y++) {\n                if (x !== this.x || y !== this.y) {\n                    const surf = this.terrain.getSurface(x, y)\n                    surf.needsMeshUpdate = true\n                    if (!surf.isSupported()) surf.collapse()\n                }\n            }\n        }\n        // update meshes\n        this.terrain.updateSurfaceMeshes()\n        this.terrain.floorGroup.updateWorldMatrix(true, true)\n    }\n\n    private dropContainedOre(dropAmount: number) {\n        for (let c = 0; c < dropAmount && this.containedOres > 0; c++) {\n            this.containedOres--\n            this.terrain.worldMgr.addCollectable(new Ore(), this.getRandomPosition())\n            EventBus.publishEvent(new OreFoundEvent())\n        }\n    }\n\n    getRandomPosition(): Vector2 {\n        return new Vector2(this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4),\n            this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4))\n    }\n\n    cancelJobs() {\n        const jobs = this.jobs // ensure consistency while processing\n        this.jobs = []\n        jobs.forEach((job) => EventBus.publishEvent(new JobDeleteEvent(job)))\n        this.updateJobColor()\n    }\n\n    reduceRubble() {\n        this.rubblePositions.shift()\n        if (this.surfaceType === SurfaceType.RUBBLE4) this.surfaceType = SurfaceType.RUBBLE3\n        else if (this.surfaceType === SurfaceType.RUBBLE3) this.surfaceType = SurfaceType.RUBBLE2\n        else if (this.surfaceType === SurfaceType.RUBBLE2) this.surfaceType = SurfaceType.RUBBLE1\n        else if (this.surfaceType === SurfaceType.RUBBLE1) this.surfaceType = SurfaceType.GROUND\n        this.dropContainedOre(this.containedOres - this.rubblePositions.length)\n        this.updateTexture()\n        EventBus.publishEvent(new SurfaceChanged(this))\n    }\n\n    isSupported(): boolean {\n        if (this.surfaceType.floor) return true\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        return isHighGround(surfLeft, surfTopLeft, surfTop)\n            || isHighGround(surfTop, surfTopRight, surfRight)\n            || isHighGround(surfRight, surfBottomRight, surfBottom)\n            || isHighGround(surfBottom, surfBottomLeft, surfLeft)\n    }\n\n    updateMesh(force: boolean = true) {\n        if (!force && !this.needsMeshUpdate) return\n        this.needsMeshUpdate = false\n\n        const topLeftVertex = new Vector3(this.x, 0, this.y)\n        const topRightVertex = new Vector3(this.x + 1, 0, this.y)\n        const bottomLeftVertex = new Vector3(this.x, 0, this.y + 1)\n        const bottomRightVertex = new Vector3(this.x + 1, 0, this.y + 1)\n\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        if (!this.discovered) {\n            topLeftVertex.y = 1\n            topRightVertex.y = 1\n            bottomRightVertex.y = 1\n            bottomLeftVertex.y = 1\n        } else if (!this.surfaceType.floor) {\n            if (isHighGround(surfLeft, surfTopLeft, surfTop)) topLeftVertex.y = 1\n            if (isHighGround(surfTop, surfTopRight, surfRight)) topRightVertex.y = 1\n            if (isHighGround(surfRight, surfBottomRight, surfBottom)) bottomRightVertex.y = 1\n            if (isHighGround(surfBottom, surfBottomLeft, surfLeft)) bottomLeftVertex.y = 1\n        }\n\n        // update mesh (geometry), if wall type changed\n        let wallType = topLeftVertex.y + topRightVertex.y + bottomRightVertex.y + bottomLeftVertex.y\n        if (wallType === WALL_TYPE.WALL && topLeftVertex.y === bottomRightVertex.y) wallType = WALL_TYPE.WEIRD_CREVICE\n\n        if (this.wallType !== wallType) {\n            this.wallType = wallType\n            this.updateGeometry(topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex, surfTopLeft, surfTop, surfLeft, surfTopRight, surfRight, surfBottomRight, surfBottom, surfBottomLeft)\n            if (this.wallType !== WALL_TYPE.WALL) this.cancelReinforceJobs()\n        }\n\n        this.updateTexture()\n        this.updateJobColor()\n        this.terrain.graphWalk.grid[this.x][this.y].weight = this.getGraphWalkWeight()\n    }\n\n    cancelReinforceJobs() {\n        const otherJobs = []\n        this.jobs.forEach((job) => {\n            if (job.type === JobType.REINFORCE) {\n                EventBus.publishEvent(new JobDeleteEvent(job))\n            } else {\n                otherJobs.push(job)\n            }\n        })\n        this.jobs = otherJobs\n        this.updateJobColor()\n    }\n\n    updateTexture() {\n        let textureName = this.terrain.textureSet.texturebasename\n        if (!this.discovered) {\n            textureName += '70'\n        } else if (this.surfaceType === SurfaceType.POWER_PATH) {\n            textureName += this.updatePowerPathTexture()\n        } else if (!this.surfaceType.shaping) {\n            if (this.surfaceType === SurfaceType.POWER_PATH_BUILDING && this.hasPower) {\n                textureName += '66'\n            } else {\n                textureName += this.surfaceType.matIndex.toString()\n            }\n        } else if (this.wallType === WALL_TYPE.WEIRD_CREVICE) {\n            textureName += '77'\n        } else {\n            if (this.wallType === WALL_TYPE.CORNER) {\n                textureName += '5'\n            } else if (this.wallType === WALL_TYPE.INVERTED_CORNER) {\n                textureName += '3'\n            } else if (this.reinforced) {\n                textureName += '2'\n            } else {\n                textureName += '0'\n            }\n            textureName += this.surfaceType.matIndex\n        }\n        textureName += '.bmp'\n\n        const texture = ResourceManager.getTexture(textureName)\n        texture.center.set(0.5, 0.5)\n        texture.rotation = this.surfaceRotation\n\n        this.accessMaterials().forEach((mat) => mat.map = texture)\n    }\n\n    private updatePowerPathTexture(): string {\n        this.surfaceRotation = 0\n        const left = this.terrain.getSurface(this.x - 1, this.y).isPath()\n        const top = this.terrain.getSurface(this.x, this.y - 1).isPath()\n        const right = this.terrain.getSurface(this.x + 1, this.y).isPath()\n        const bottom = this.terrain.getSurface(this.x, this.y + 1).isPath()\n        const pathSum = (left ? 1 : 0) + (top ? 1 : 0) + (right ? 1 : 0) + (bottom ? 1 : 0)\n        if (pathSum === 0 || pathSum === 1) {\n            if (left) this.surfaceRotation = -Math.PI / 2\n            if (top) this.surfaceRotation = Math.PI\n            if (right) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '75' : '65'\n        } else if (pathSum === 2) {\n            if (left === right) {\n                this.surfaceRotation = left ? Math.PI / 2 : 0\n                return this.hasPower ? '72' : '62'\n            } else {\n                if (left && bottom) this.surfaceRotation = -Math.PI / 2\n                if (left && top) this.surfaceRotation = Math.PI\n                if (top && right) this.surfaceRotation = Math.PI / 2\n                return this.hasPower ? '73' : '63'\n            }\n        } else if (pathSum === 3) {\n            if (!top) this.surfaceRotation = -Math.PI / 2\n            if (!right) this.surfaceRotation = Math.PI\n            if (!bottom) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '74' : '64'\n        } else {\n            return this.hasPower ? '71' : '60'\n        }\n    }\n\n    accessMaterials(): MeshPhongMaterial[] {\n        if (!this.mesh || !this.mesh.material) return []\n        if (Array.isArray(this.mesh.material)) {\n            return this.mesh.material as MeshPhongMaterial[]\n        } else {\n            return [this.mesh.material as MeshPhongMaterial]\n        }\n    }\n\n    updateGeometry(topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3, surfTopLeft: Surface, surfTop: Surface, surfLeft: Surface, surfTopRight: Surface, surfRight: Surface, surfBottomRight: Surface, surfBottom: Surface, surfBottomLeft: Surface) {\n        if (this.mesh) this.terrain.floorGroup.remove(this.mesh)\n        this.mesh?.geometry?.dispose()\n\n        function avgHeight(...args: Surface[]) {\n            let sum = 0, cnt = 0\n            args.map(s => s.heightOffset).filter(Boolean).forEach(h => {\n                sum += h\n                cnt++\n            })\n            return sum / cnt\n        }\n\n        this.topLeftHeightOffset = avgHeight(surfTopLeft, surfTop, this, surfLeft) * HEIGHT_MULTIPLER\n        this.topRightHeightOffset = avgHeight(surfTop, surfTopRight, surfRight, this) * HEIGHT_MULTIPLER\n        this.bottomRightHeightOffset = avgHeight(this, surfRight, surfBottomRight, surfBottom) * HEIGHT_MULTIPLER\n        this.bottomLeftHeightOffset = avgHeight(surfLeft, this, surfBottom, surfBottomLeft) * HEIGHT_MULTIPLER\n        const geometry = SurfaceGeometry.create(this.wallType, topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex,\n            topLeftVertex.y + this.topLeftHeightOffset,\n            topRightVertex.y + this.topRightHeightOffset,\n            bottomRightVertex.y + this.bottomRightHeightOffset,\n            bottomLeftVertex.y + this.bottomLeftHeightOffset,\n        )\n\n        this.mesh = new Mesh(geometry, new MeshPhongMaterial({shininess: 0}))\n        this.mesh.userData = {selectable: this}\n\n        this.terrain.floorGroup.add(this.mesh)\n        this.terrain.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.SURFACE\n    }\n\n    select(): SelectionEvent {\n        if (this.surfaceType.selectable && (this.wallType !== WALL_TYPE.INVERTED_CORNER && this.wallType !== WALL_TYPE.WEIRD_CREVICE) && !this.selected) {\n            this.selected = true\n            this.accessMaterials().forEach((mat) => mat.color.setHex(0x6060a0))\n            return new SurfaceSelectedEvent(this)\n        }\n        return null\n    }\n\n    deselect(): any {\n        if (this.selected) {\n            this.selected = false\n            this.updateJobColor()\n        }\n    }\n\n    getSelectionCenter(): Vector3 {\n        return null // not used\n    }\n\n    updateJobColor() {\n        const sortedJobs = this.jobs.sort((l, r) => -l.colorPriority + r.colorPriority)\n        const color = sortedJobs[0]?.color || 0xffffff\n        this.accessMaterials().forEach((mat) => mat.color.setHex(color))\n    }\n\n    hasRubble(): boolean {\n        return this.rubblePositions.length > 0\n    }\n\n    isPath(): boolean {\n        return this.surfaceType === SurfaceType.POWER_PATH || this.surfaceType === SurfaceType.POWER_PATH_BUILDING\n    }\n\n    isWalkable(): boolean {\n        return this.surfaceType.floor && this.discovered && this.surfaceType !== SurfaceType.LAVA && this.surfaceType !== SurfaceType.WATER && !this.building?.type.blocksPathSurface\n    }\n\n    isDrillable(): boolean {\n        return this.surfaceType.drillable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDrillableHard(): boolean {\n        return this.surfaceType.drillableHard && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isReinforcable(): boolean {\n        return this.surfaceType.reinforcable && this.discovered && this.wallType === WALL_TYPE.WALL && !this.reinforced\n    }\n\n    isExplodable(): boolean {\n        return this.surfaceType.explodable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDigable(): boolean {\n        return this.isDrillable() || this.isExplodable()\n    }\n\n    getDigPositions(): Vector2[] {\n        const digPosition = []\n        if (this.terrain.getSurface(this.x - 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE - 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y - 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE - 1))\n        if (this.terrain.getSurface(this.x + 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE + 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y + 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE + TILESIZE + 1))\n        return digPosition\n    }\n\n    reinforce() {\n        this.reinforced = true\n        this.cancelReinforceJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.updateTexture()\n    }\n\n    getCenterWorld2D(): Vector2 {\n        return new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE + TILESIZE / 2)\n    }\n\n    getCenterWorld(): Vector3 {\n        const center = this.getCenterWorld2D()\n        return new Vector3(center.x, this.terrain.worldMgr.getTerrainHeight(center.x, center.y), center.y)\n    }\n\n    setFallinLevel(fallinLevel: number) {\n        if (fallinLevel < 1) return\n        let originPos\n        let targetPos\n        if (this.surfaceType.floor) {\n            originPos = this.terrain.findFallInOrigin(this.x, this.y)\n            targetPos = [this.x, this.y]\n        } else {\n            originPos = [this.x, this.y]\n            targetPos = this.terrain.findFallInTarget(this.x, this.y)\n        }\n        if (originPos && targetPos) {\n            this.terrain.getSurface(originPos[0], originPos[1]).scheduleFallin(targetPos[0], targetPos[1])\n        }\n    }\n\n    scheduleFallin(targetX: number, targetY: number) {\n        this.fallinTimeout = setTimeout(() => {\n            this.createFallin(targetX, targetY)\n            this.scheduleFallin(targetX, targetY)\n        }, (30 + getRandom(60)) * 1000) // TODO adapt timer to level multiplier and fallin value\n    }\n\n    createFallin(targetX: number, targetY: number) {\n        const fallinPosition = this.terrain.getSurface(targetX, targetY).getCenterWorld()\n        EventBus.publishEvent(new LandslideEvent(fallinPosition))\n\n        // TODO refactor mesh and animation handling\n        const content = ResourceManager.getResource('MiscAnims/RockFall/Rock3Sides.lws')\n        const animation = new LWSCLoader('MiscAnims/RockFall/').parse(content)\n        this.fallinGrp = new Group()\n        this.fallinGrp.position.copy(fallinPosition)\n        const dx = this.x - targetX, dy = targetY - this.y\n        this.fallinGrp.rotateOnAxis(new Vector3(0, 1, 0), Math.atan2(dy, dx) + Math.PI / 2)\n        this.terrain.worldMgr.sceneManager.scene.add(this.fallinGrp)\n        const poly = []\n        animation.bodies.forEach((body) => {\n            const polyModel = body.model.clone(true)\n            poly.push(polyModel)\n        })\n        animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                poly[parentInd].add(polyPart)\n            } else {\n                this.fallinGrp.add(polyPart)\n            }\n        })\n        this.animate(poly, animation, 0)\n\n        this.terrain.getSurface(targetX, targetY).makeRubble()\n    }\n\n    animate(poly, animation, frameIndex) {\n        if (poly.length !== animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = material.opacity < 1\n                    })\n                }\n            }\n        })\n        this.animationTimeout = null\n        if (!(frameIndex + 1 > animation.lastFrame) || animation.looping) {\n            let nextFrame = frameIndex + 1\n            if (nextFrame > animation.lastFrame) {\n                nextFrame = animation.firstFrame\n            }\n            const that = this\n            this.animationTimeout = setTimeout(() => that.animate(poly, animation, nextFrame), 1000 / animation.framesPerSecond * animation.transcoef)\n        } else {\n            this.terrain.worldMgr.sceneManager.scene.remove(this.fallinGrp)\n            this.fallinGrp = null\n        }\n    }\n\n    dispose() {\n        this.accessMaterials().forEach(m => m.dispose())\n        this.mesh?.geometry?.dispose()\n    }\n\n    getFloorHeight(worldX: number, worldZ: number) {\n        const sx = worldX / TILESIZE - this.x\n        const sy = worldZ / TILESIZE - this.y\n        const dy0 = Surface.interpolate(this.topLeftHeightOffset, this.topRightHeightOffset, sx)\n        const dy1 = Surface.interpolate(this.bottomLeftHeightOffset, this.bottomRightHeightOffset, sx)\n        return Surface.interpolate(dy0, dy1, sy) * TILESIZE\n    }\n\n    private static interpolate(y0: number, y1: number, x: number): number {\n        return y0 + x * (y1 - y0)\n    }\n\n    get neighbors(): Surface[] {\n        return [this.terrain.getSurface(this.x - 1, this.y), this.terrain.getSurface(this.x, this.y - 1),\n            this.terrain.getSurface(this.x + 1, this.y), this.terrain.getSurface(this.x, this.y + 1)]\n    }\n\n    makeRubble(containedOre: number = 0) {\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += containedOre\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.updateTexture()\n    }\n\n    setBuilding(building: BuildingEntity) {\n        this.building = building\n        this.terrain.graphWalk.grid[this.x][this.y].weight = this.getGraphWalkWeight()\n        this.terrain.resetGraphWalk()\n    }\n\n    getGraphWalkWeight(): number {\n        return this.isWalkable() ? this.hasRubble() ? 4 : 1 : 0\n    }\n\n    setHasPower(state: boolean, recursive: boolean) {\n        if (this.hasPower === state) return\n        this.hasPower = state\n        this.updateTexture()\n        if (recursive) this.neighbors.forEach((n) => n.isPath() && n.setHasPower(state, recursive))\n    }\n\n    canPlaceFence(): boolean { // TODO performance this can be cached\n        return (this.surfaceType === SurfaceType.GROUND || this.isPath()) && !this.building && !this.fence &&\n            [1, 2].some((n) => {\n                return !!this.terrain.getSurface(this.x - n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y - n).building ||\n                    !!this.terrain.getSurface(this.x + n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y + n).building ||\n                    !!this.terrain.getSurface(this.x - n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y - n).fence ||\n                    !!this.terrain.getSurface(this.x + n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y + n).fence\n            })\n    }\n\n}\n\nexport enum WALL_TYPE {\n\n    CORNER = 1,\n    WALL = 2,\n    INVERTED_CORNER = 3,\n    WEIRD_CREVICE = 20,\n\n}\n","import { CursorLayer, ScreenLayer } from './ScreenLayer'\nimport { EventManager } from '../event/EventManager'\n\nexport class BaseScreen {\n\n    gameCanvasContainer: HTMLElement\n    eventMgr: EventManager\n    layers: ScreenLayer[] = []\n    width: number = 800\n    height: number = 600\n    ratio: number = 800 / 600\n    cursorLayer: CursorLayer\n\n    constructor() {\n        this.gameCanvasContainer = document.getElementById('game-canvas-container')\n        this.gameCanvasContainer.focus()\n        this.eventMgr = new EventManager(this)\n        if (!this.gameCanvasContainer) throw 'Fatal error: game canvas container not found!'\n        window.addEventListener('resize', () => this.onWindowResize())\n        this.cursorLayer = this.addLayer(new CursorLayer(), 1000)\n        this.onWindowResize()\n    }\n\n    addLayer<T extends ScreenLayer>(layer: T, zIndex: number = 0): T {\n        layer.resize(this.width, this.height)\n        layer.setZIndex(zIndex)\n        this.layers.push(layer)\n        this.gameCanvasContainer.appendChild(layer.canvas)\n        return layer\n    }\n\n    redraw() {\n        this.layers.forEach((layer) => layer.redraw())\n    }\n\n    show() {\n        this.layers.forEach((layer) => layer.show())\n        this.redraw()\n    }\n\n    hide() {\n        this.layers.forEach((layer) => layer.hide())\n    }\n\n    onWindowResize() {\n        const maxWidth = this.gameCanvasContainer.offsetWidth, maxHeight = this.gameCanvasContainer.offsetHeight\n        const idealHeight = Math.round(maxWidth / this.ratio)\n        if (idealHeight > maxHeight) {\n            this.resize(Math.round(maxHeight * this.ratio), maxHeight)\n        } else {\n            this.resize(maxWidth, idealHeight)\n        }\n    }\n\n    resize(width: number, height: number) {\n        this.width = width\n        this.height = height\n        this.layers.forEach((layer) => layer.resize(width, height))\n        this.redraw()\n    }\n\n    isInRect(event: MouseEvent | WheelEvent) {\n        if (this.layers.length < 1) return false\n        const firstLayer = this.layers[0] // all layers have same state and size\n        if (!firstLayer.isActive() && !firstLayer.canvas) return false\n        const rect = firstLayer.canvas.getBoundingClientRect()\n        const clientX = event.clientX, clientY = event.clientY\n        return clientX >= rect.left && clientX < rect.right && clientY >= rect.top && clientY < rect.bottom\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from './ScreenLayer'\n\nexport class LoadingScreen extends BaseScreen {\n\n    layer: ScaledLayer\n    assetIndex: number = 0\n\n    constructor() {\n        super()\n        this.layer = this.addLayer(new ScaledLayer())\n    }\n\n    show() {\n        this.layers.forEach((layer) => {\n            if (layer !== this.cursorLayer) layer.show()\n        })\n        this.setLoadingMessage('Loading...')\n    }\n\n    setLoadingMessage(text) {\n        this.layer.onRedraw = (context) => {\n            // clear the screen to black\n            context.fillStyle = 'black'\n            context.fillRect(0, 0, this.layer.fixedWidth, this.layer.fixedHeight)\n            // draw the loading title\n            context.font = '24px Arial'\n            context.fillStyle = 'white'\n            context.fillText('Loading Rock Raiders', 20, this.layer.fixedHeight - 50)\n            // hard-code the first loading message\n            context.font = '18px Arial'\n            context.fillStyle = 'white'\n            context.fillText(text, 20, this.layer.fixedHeight - 20)\n        }\n        this.redraw()\n    }\n\n    enableGraphicMode(totalResources: number) {\n        const imgBackground = ResourceManager.getImage(ResourceManager.cfg('Main', 'LoadScreen'))\n        const imgProgress = ResourceManager.getImage(ResourceManager.cfg('Main', 'ProgressBar'))\n        const imgLoading = ResourceManager.getDefaultFont().createTextImage(ResourceManager.cfg('Main', 'LoadingText'))\n        this.layer.onRedraw = (context => {\n            context.drawImage(imgBackground, 0, 0)\n            const loadingBarWidth = 353 * (this.assetIndex < totalResources ? Math.round(this.assetIndex / totalResources) : 1)\n            context.drawImage(imgProgress, 142, 450, loadingBarWidth, 9)\n            context.drawImage(imgLoading, Math.round(320 - imgLoading.width / 2), Math.round(456 - imgLoading.height / 2))\n        })\n        this.cursorLayer.show()\n        this.redraw()\n    }\n\n    increaseLoadingState() {\n        this.assetIndex++\n        this.redraw()\n    }\n\n}\n","export class MainMenuBaseItem {\n\n    x: number = 0\n    y: number = 0\n    width: number = 0\n    height: number = 0\n    zIndex: number = 100\n    scrollAffected = false\n    needsRedraw: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n    actionName: string = ''\n    targetIndex: number = 0\n\n    static compareZ(left: MainMenuBaseItem, right: MainMenuBaseItem) {\n        return left.zIndex === right.zIndex ? 0 : left.zIndex > right.zIndex ? -1 : 1\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const hover = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        if (this.hover !== hover) {\n            this.hover = hover\n            this.needsRedraw = true\n            this.onHoverChange()\n        }\n        if (!this.hover) this.pressed = false\n        return this.hover\n    }\n\n    onHoverChange() {\n    }\n\n    checkSetPressed() {\n        if (!this.hover) return\n        if (!this.pressed) this.needsRedraw = true\n        this.pressed = true\n    }\n\n    setReleased() {\n        if (this.pressed) this.needsRedraw = true\n        this.pressed = false\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        this.needsRedraw = false\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\n\nexport class MainMenuLabelButton extends MainMenuBaseItem {\n\n    labelImgLo = null\n    labelImgHi = null\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.labelImgLo = layer.loFont.createTextImage(cfg.label)\n        this.labelImgHi = layer.hiFont.createTextImage(cfg.label)\n        this.width = Math.max(this.labelImgLo.width, this.labelImgHi.width)\n        this.height = Math.max(this.labelImgLo.height, this.labelImgHi.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const img = this.hover && !this.pressed ? this.labelImgHi : this.labelImgLo\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\n\nexport class MainMenuIconButton extends MainMenuBaseItem {\n\n    imgNormal = null\n    imgHover = null\n    imgPressed = null\n    tooltip = ''\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.imgNormal = ResourceManager.getImage(cfg.imgNormal)\n        this.imgHover = ResourceManager.getImage(cfg.imgHover)\n        this.imgPressed = ResourceManager.getImage(cfg.imgPressed)\n        this.tooltip = (cfg.tooltip || '').replace(/_/g, ' ')\n        this.width = Math.max(this.imgNormal.width, this.imgHover.width, this.imgPressed.width)\n        this.height = Math.max(this.imgNormal.height, this.imgHover.height, this.imgPressed.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgNormal\n        if (this.hover) img = this.imgHover\n        if (this.pressed) img = this.imgPressed\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuLabelButton } from './MainMenuLabelButton'\nimport { ScaledLayer } from '../screen/ScreenLayer'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuIconButton } from './MainMenuIconButton'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { clearIntervalSafe } from '../core/Util'\nimport { NATIVE_FRAMERATE } from '../main'\n\nexport class MainMenuLayer extends ScaledLayer {\n\n    screen: MainMenuScreen\n    cfg: MenuEntryCfg\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    items: MainMenuBaseItem[] = []\n    scrollY: number = 0\n    scrollSpeedY: number = 0\n    scrollInterval = null\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg) {\n        super()\n        this.screen = screen\n        this.cfg = menuCfg\n        this.loFont = menuCfg.loFont ? ResourceManager.getBitmapFont(menuCfg.loFont) : null\n        this.hiFont = menuCfg.hiFont ? ResourceManager.getBitmapFont(menuCfg.hiFont) : null\n        this.menuImage = menuCfg.menuImage ? ResourceManager.getImage(menuCfg.menuImage) : null\n        this.titleImage = this.loFont.createTextImage(menuCfg.fullName)\n\n        menuCfg.itemsLabel.forEach((item) => {\n            if (item.label) {\n                this.items.push(new MainMenuLabelButton(this, item))\n            } else {\n                this.items.push(new MainMenuIconButton(this, item))\n            }\n        })\n\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n\n        this.onRedraw = (context) => {\n            context.drawImage(this.menuImage, 0, -this.scrollY)\n            if (menuCfg.displayTitle) context.drawImage(this.titleImage, (this.fixedWidth - this.titleImage.width) / 2, this.cfg.position[1])\n            this.items.forEach((item, index) => (this.items[this.items.length - 1 - index]).draw(context))\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.scrollY = 0\n        this.scrollSpeedY = 0\n    }\n\n    show() {\n        super.show()\n        const that = this\n        this.scrollInterval = setInterval(() => {\n            if (that.scrollSpeedY === 0) return\n            that.setScrollY(that.scrollSpeedY)\n        }, 1000 / NATIVE_FRAMERATE)\n    }\n\n    hide() {\n        this.scrollInterval = clearIntervalSafe(this.scrollInterval)\n        super.hide()\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (eventEnum === POINTER_EVENT.MOVE) {\n            const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n            let hovered = false\n            this.items.forEach((item) => {\n                if (!hovered) {\n                    const absY = sy + (item.scrollAffected ? this.scrollY : 0)\n                    hovered = item.checkHover(sx, absY)\n                } else {\n                    if (item.hover) item.needsRedraw = true\n                    item.hover = false\n                    item.setReleased()\n                }\n            })\n            if (this.cfg.canScroll) {\n                const scrollAreaHeight = 100\n                if (sy < scrollAreaHeight) {\n                    this.setScrollSpeedY(-(scrollAreaHeight - sy))\n                } else if (sy > this.fixedHeight - scrollAreaHeight) {\n                    this.setScrollSpeedY(sy - (this.fixedHeight - scrollAreaHeight))\n                } else {\n                    this.setScrollSpeedY(0)\n                }\n            }\n        } else if (eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => item.checkSetPressed())\n            }\n        } else if (eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => {\n                    if (item.pressed) {\n                        item.setReleased()\n                        if (item.actionName.toLowerCase() === 'next') {\n                            this.screen.showMainMenu(item.targetIndex)\n                        } else if (item.actionName.toLowerCase() === 'selectlevel') {\n                            this.screen.selectLevel((item as MainMenuLevelButton).levelKey)\n                        } else if (item.actionName) {\n                            console.warn('not implemented: ' + item.actionName + ' - ' + item.targetIndex)\n                        }\n                    }\n                })\n            }\n        }\n        if (this.needsRedraw()) this.redraw()\n        return false\n    }\n\n    private setScrollSpeedY(deltaY: number) {\n        this.scrollSpeedY = Math.sign(deltaY) * Math.pow(Math.round(deltaY / 20), 2)\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        if (!this.cfg.canScroll) return false\n        this.setScrollY(event.deltaY)\n        return true\n    }\n\n    private setScrollY(deltaY: number) {\n        const scrollYBefore = this.scrollY\n        this.scrollY = Math.min(Math.max(this.scrollY + deltaY, 0), this.menuImage.height - this.fixedHeight)\n        if (scrollYBefore !== this.scrollY) this.redraw()\n    }\n\n    needsRedraw(): boolean {\n        return this.items.some((item) => item.needsRedraw)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class MainMenuLevelButton extends MainMenuBaseItem {\n\n    layer: MainMenuLayer\n    imgActive = null\n    imgInactive = null\n    imgCross = null\n    unlocked: boolean = false\n    levelKey: string = ''\n\n    constructor(layer: MainMenuLayer, levelKey: string, levelCfg: LevelEntryCfg) {\n        super()\n        this.layer = layer\n        this.actionName = 'selectlevel'\n        this.levelKey = levelKey\n        this.x = levelCfg.frontEndX\n        this.y = levelCfg.frontEndY\n        this.zIndex = 10\n        this.scrollAffected = true\n        const [imgActive, imgInactive, imgCross] = levelCfg.menuBMP\n        this.imgActive = ResourceManager.getImage(imgActive)\n        this.imgInactive = ResourceManager.getImage(imgInactive)\n        this.imgCross = ResourceManager.getImage(imgCross)\n        this.width = Math.max(this.imgActive.width, this.imgInactive.width, this.imgCross.width)\n        this.height = Math.max(this.imgActive.height, this.imgInactive.height, this.imgCross.height)\n        this.unlocked = levelCfg.frontEndOpen\n        this.unlocked = true // TODO don't unlock everything by default\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgCross\n        if (this.unlocked) img = this.hover ? this.imgActive : this.imgInactive\n        context.drawImage(img, this.x, this.y - this.layer.scrollY)\n    }\n\n}\n","import { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { createContext } from '../core/ImageHelper'\n\nexport class MainMenuPanel extends MainMenuBaseItem {\n\n    context: CanvasRenderingContext2D\n\n    constructor(imgData: ImageData, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.zIndex = 50\n        this.context = createContext(imgData.width, imgData.height)\n        this.context.putImageData(imgData, 0, 0)\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const inRect = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        const hover = inRect && this.context.getImageData(sx, sy, 1, 1).data[3] > 0\n        if (this.hover !== hover) this.needsRedraw = true\n        this.hover = hover\n        return this.hover\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        context.drawImage(this.context.canvas, this.x, this.y, this.width, this.height)\n    }\n\n}\n","import { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { BitmapFont } from '../core/BitmapFont'\n\nexport class MainMenuWindow extends MainMenuBaseItem {\n\n    font: BitmapFont\n    imgFirstLine = null\n    imgSecondLine = null\n\n    constructor(font: BitmapFont, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.font = font\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    setFirstLine(text: string) {\n        this.imgFirstLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    setSecondLine(text: string) {\n        this.imgSecondLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const cx = this.x + this.width / 2, cy = this.y + this.height / 2\n        if (this.imgFirstLine) context.drawImage(this.imgFirstLine, cx - this.imgFirstLine.width / 2, cy - this.imgFirstLine.height)\n        if (this.imgSecondLine) context.drawImage(this.imgSecondLine, cx - this.imgSecondLine.width / 2, cy)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { LevelEntryCfg, LevelsCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { iGet } from '../core/Util'\nimport { MainMenuPanel } from './MainMenuPanel'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuWindow } from './MainMenuWindow'\n\nexport class LevelSelectLayer extends MainMenuLayer {\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg, modeLevel: boolean) {\n        super(screen, menuCfg)\n        const levelsCfg: LevelsCfg = ResourceManager.getResource('Levels')\n        const levelTextCfg = new LevelTextCfg()\n        this.items.push(new MainMenuPanel(levelTextCfg.panelImgData, levelTextCfg.panelPos))\n        const levelTextWindow = new MainMenuWindow(ResourceManager.getDefaultFont(), levelTextCfg.window)\n        levelTextWindow.setFirstLine(modeLevel ? levelTextCfg.level : levelTextCfg.tutorial)\n        this.items.push(levelTextWindow)\n        Object.keys(levelsCfg.levelsByName).forEach((levelKey) => {\n            const level: LevelEntryCfg = levelsCfg.levelsByName[levelKey]\n            const levelButton = new MainMenuLevelButton(this, levelKey, level)\n            levelButton.onHoverChange = () => levelTextWindow.setSecondLine(levelButton.hover ? level.fullName : '')\n            this.items.push(levelButton)\n        })\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n    }\n\n}\n\nclass LevelTextCfg {\n\n    window = {x: 0, y: 0, w: 0, h: 0}\n    panelImgData: ImageData\n    panelPos = {x: 0, y: 0, w: 0, h: 0}\n    level: string = ''\n    tutorial: string = ''\n\n    constructor() {\n        const cfg = ResourceManager.cfg('Menu', 'LevelText')\n        const winCfg = iGet(cfg, 'Window')\n        this.window = {x: winCfg[0], y: winCfg[1], w: winCfg[2], h: winCfg[3]}\n        const panelCfg = iGet(cfg, 'Panel')\n        this.panelImgData = ResourceManager.getImageData(panelCfg[0])\n        this.panelPos = {x: panelCfg[1], y: panelCfg[2], w: panelCfg[3], h: panelCfg[4]}\n        this.level = iGet(cfg, 'Level').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n        this.tutorial = iGet(cfg, 'Tutorial').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MenuCfg } from '../cfg/MenuCfg'\nimport { MainMenuLayer } from '../menu/MainMenuLayer'\nimport { LevelSelectLayer } from '../menu/LevelSelectLayer'\n\nexport class MainMenuScreen extends BaseScreen {\n\n    onLevelSelected: (levelName: string) => void = null\n    menus: MainMenuLayer[] = []\n\n    constructor() {\n        super()\n        const mainMenuFullCfg = ResourceManager.getResource('MainMenuFull') as MenuCfg\n        mainMenuFullCfg.menus.forEach((menuCfg) => {\n            let layer\n            if (menuCfg.title === 'Levels') {\n                layer = new LevelSelectLayer(this, menuCfg, true)\n            } else if (menuCfg.title === 'Tutorials') {\n                layer = new LevelSelectLayer(this, menuCfg, false)\n            } else {\n                layer = new MainMenuLayer(this, menuCfg)\n            }\n            this.menus.push(layer)\n            this.addLayer(layer)\n        })\n    }\n\n    showMainMenu(index: number = 0) {\n        this.hide()\n        this.menus[index].show()\n        this.cursorLayer.show()\n    }\n\n    showLevelSelection() {\n        this.showMainMenu(1)\n    }\n\n    selectLevel(levelName) {\n        this.hide()\n        this.onLevelSelected(levelName)\n    }\n\n}\n","export class SurfaceType {\n\n    name: string // humand readable, maybe used as label lateron\n    shaping: boolean = false\n    matIndex: string = '00'\n    floor: boolean = false\n    selectable: boolean = false\n    drillable: boolean = false\n    drillableHard: boolean = false\n    explodable: boolean = false\n    reinforcable: boolean = false\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options)\n    }\n\n    static readonly GROUND = new SurfaceType({name: 'ground', floor: true, selectable: true})\n    static readonly SOLID_ROCK = new SurfaceType({name: 'solid rock', shaping: true, matIndex: '5'})\n    static readonly HARD_ROCK = new SurfaceType({\n        name: 'hard rock',\n        shaping: true,\n        matIndex: '4',\n        selectable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly LOOSE_ROCK = new SurfaceType({\n        name: 'loose rock',\n        shaping: true,\n        matIndex: '3',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly DIRT = new SurfaceType({\n        name: 'dirt',\n        shaping: true,\n        matIndex: '1',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly SLUG_HOLE = new SurfaceType({name: 'slug hole', floor: true, matIndex: '30'})\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'})\n    static readonly ORE_SEAM = new SurfaceType({\n        name: 'ore seam',\n        matIndex: '40',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45'})\n    static readonly CRYSTAL_SEAM = new SurfaceType({\n        name: 'energy crystal seam',\n        matIndex: '20',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly RECHARGE_SEAM = new SurfaceType({name: 'recharge seam', matIndex: '67'})\n    static readonly POWER_PATH = new SurfaceType({\n        name: 'power path all',\n        floor: true,\n        matIndex: '60',\n        selectable: true,\n    })\n    static readonly POWER_PATH_SITE = new SurfaceType({\n        name: 'power path site',\n        floor: true,\n        matIndex: '61',\n        selectable: true,\n    })\n    static readonly POWER_PATH_BUILDING = new SurfaceType({name: 'power path', floor: true, matIndex: '76'})\n    static readonly RUBBLE1 = new SurfaceType({\n        name: 'rubble 1',\n        floor: true,\n        matIndex: '13',\n        selectable: true,\n    })\n    static readonly RUBBLE2 = new SurfaceType({\n        name: 'rubble 2',\n        floor: true,\n        matIndex: '12',\n        selectable: true,\n    })\n    static readonly RUBBLE3 = new SurfaceType({\n        name: 'rubble 3',\n        floor: true,\n        matIndex: '11',\n        selectable: true,\n    })\n    static readonly RUBBLE4 = new SurfaceType({\n        name: 'rubble 4',\n        floor: true,\n        matIndex: '10',\n        selectable: true,\n    })\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING\n            case 1:\n                return SurfaceType.SOLID_ROCK\n            case 2:\n                return SurfaceType.HARD_ROCK\n            case 3:\n                return SurfaceType.LOOSE_ROCK\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT\n            case 6:\n                return SurfaceType.LAVA\n            case 8:\n                return SurfaceType.ORE_SEAM\n            case 9:\n                return SurfaceType.WATER\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM\n            case 11:\n                return SurfaceType.RECHARGE_SEAM\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE\n            case 100:\n                return SurfaceType.RUBBLE4\n            case 101:\n                return SurfaceType.RUBBLE3\n            case 102:\n                return SurfaceType.RUBBLE2\n            case 103:\n                return SurfaceType.RUBBLE1\n            default:\n                console.error('Unexpected surface type num: ' + typeNum)\n                return SurfaceType.SOLID_ROCK\n        }\n    }\n}\n","import { BufferGeometry, Vector2, Vector3 } from 'three'\nimport { WALL_TYPE } from './Surface'\nimport { BufferAttribute } from 'three/src/core/BufferAttribute'\n\nexport class SurfaceGeometry {\n\n    public static create(wallType: WALL_TYPE,\n                         topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3,\n                         topLeftHeight: number, topRightHeight: number, bottomRightHeight: number, bottomLeftHeight: number,\n    ) {\n        let uvOffset = 0\n\n        // not-rotated\n        // 1 ?\n        // ? 0\n        if (topLeftVertex.y && !bottomRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topRightVertex.y)))) {\n            uvOffset = 0\n        }\n\n        // 90 clock-wise\n        // ? 1\n        // 0 ?\n        if (topRightVertex.y && !bottomLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomRightVertex.y)))) {\n            uvOffset = 3\n        }\n\n        // 180 clock-wise\n        // 0 ?\n        // ? 1\n        if (bottomRightVertex.y && !topLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomLeftVertex.y)))) {\n            uvOffset = 2\n        }\n\n        // 270 clock-wise\n        // ? 0\n        // 1 ?\n        if (bottomLeftVertex.y && !topRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topLeftVertex.y)))) {\n            uvOffset = 1\n        }\n\n        if (wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) {\n            if (topLeftVertex.y && bottomRightVertex.y) {\n                uvOffset = 0\n            }\n            if (topRightVertex.y && bottomLeftVertex.y) {\n                uvOffset = 3\n            }\n        }\n\n        /*\n        //\t\t0---1                1         0---1\n        //\t\t|   |  becomes      /|   and   |  /\n        //\t\t|   |             /  |         |/\n        //\t\t3---2            3---2         3\n        //\n        //\t\tOR\n        //\n        //\t\t0---1            0             0---1\n        //\t\t|   |  becomes   |\\    \t and    \\  |\n        //\t\t|   |            |  \\             \\|\n        //\t\t3---2            3---2             2\n        //\n        //\t\tTriangles 0-1-3 and 0-3-2\n        //\t\tQuad 0-1-3-2\n        */\n\n        const uv = [\n            new Vector2(0, 1),\n            new Vector2(1, 1),\n            new Vector2(1, 0),\n            new Vector2(0, 0),\n        ]\n\n        const bufferVertices = []\n        const bufferNormals = []\n\n        function addFaceAndNormals(a, b, c) {\n            bufferVertices.push(a, b, c)\n            const normal = new Vector3().subVectors(c, b)\n            normal.cross(new Vector3().subVectors(a, b))\n            normal.normalize()\n            bufferNormals.push(normal, normal, normal)\n        }\n\n        const uvIndexes = []\n        if (topRightVertex.y !== bottomLeftVertex.y ||\n            ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) && !(topRightVertex.y && bottomLeftVertex.y))) {\n            uvIndexes.push(1, 3, 2)\n            uvIndexes.push(1, 0, 3)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topRightVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topRightVertex, topLeftVertex, bottomLeftVertex)\n        } else {\n            uvIndexes.push(0, 3, 2)\n            uvIndexes.push(0, 2, 1)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topLeftVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topLeftVertex, bottomRightVertex, topRightVertex)\n        }\n\n        const bufferVertexUvs = uvIndexes.map(i => uv[(i + uvOffset) % 4])\n\n        const bufferGeometry = new BufferGeometry()\n        bufferGeometry.setAttribute('position', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferVertices))\n        bufferGeometry.setAttribute('normal', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferNormals))\n        bufferGeometry.setAttribute('uv', new BufferAttribute(new Float32Array(12), 2).copyVector2sArray(bufferVertexUvs))\n        return bufferGeometry\n    }\n}\n","import { WorldEvent } from './WorldEvents'\nimport { Vector3 } from 'three'\nimport { EventKey } from './EventKeyEnum'\n\nexport class WorldLocationEvent extends WorldEvent {\n\n    location: Vector3\n\n    constructor(entityKey: EventKey, location: Vector3) {\n        super(entityKey)\n        this.location = location\n    }\n\n}\n\nexport class GenericDeathEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_DEATH, location)\n    }\n\n}\n\nexport class GenericMonsterEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_MONSTER, location)\n    }\n\n}\n\nexport class CrystalFoundEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_CRYSTAL_FOUND, location)\n    }\n\n}\n\nexport class UnderAttackEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_UNDER_ATTACK, location)\n    }\n\n}\n\nexport class LandslideEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_LANDSLIDE, location)\n    }\n\n}\n\nexport class PowerDrainEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_POWER_DRAIN, location)\n    }\n\n}\n\nexport class SlugEmergeEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_SLUG_EMERGE, location)\n    }\n\n}\n\nexport class RaiderDiscoveredEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_RAIDER_DISCOVERED, location)\n    }\n\n}\n","// javascript-astar 0.4.1 (converted to typescript by Scarabol)\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n\nfunction pathTo(node) {\n    let curr = node\n    const path = []\n    while (curr.parent) {\n        path.unshift(curr)\n        curr = curr.parent\n    }\n    return path\n}\n\nfunction getHeap() {\n    return new BinaryHeap(function (node) {\n        return node.f\n    })\n}\n\nexport const astar = {\n\n    /**\n     * Perform an A* Search on a graph given a start and end node.\n     * @param {Graph} graph\n     * @param {GridNode} start\n     * @param {GridNode} end\n     * @param {Object} [options]\n     * @param {boolean} [options.closest] Specifies whether to return the\n     path to the closest node if the target is unreachable.\n     * @param {Function} [options.heuristic] Heuristic function (see\n     *          astar.heuristics).\n     */\n    search(graph: Graph, start: GridNode, end: GridNode, options = null): GridNode[] {\n        graph.cleanDirty()\n        options = options || {}\n        const heuristic = options.heuristic || astar.heuristics.manhattan\n        const closest = options.closest || false\n\n        const openHeap = getHeap()\n        let closestNode = start  // set the start node to be the closest if required\n\n        start.h = heuristic(start, end)\n        graph.markDirty(start)\n\n        openHeap.push(start)\n\n        while (openHeap.size() > 0) {\n\n            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n            const currentNode = openHeap.pop()\n\n            // End case -- result has been found, return the traced path.\n            if (currentNode === end) {\n                return pathTo(currentNode)\n            }\n\n            // Normal case -- move currentNode from open to closed, process each of its neighbors.\n            currentNode.closed = true\n\n            // Find all neighbors for the current node.\n            const neighbors = graph.neighbors(currentNode)\n\n            let i = 0\n            const il = neighbors.length\n            for (; i < il; ++i) {\n                const neighbor = neighbors[i]\n\n                if (neighbor.closed || neighbor.isWall()) {\n                    // Not a valid node to process, skip to next neighbor.\n                    continue\n                }\n\n                // The g score is the shortest distance from start to current node.\n                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n                const gScore = currentNode.g + neighbor.getCost(currentNode)\n                const beenVisited = neighbor.visited\n\n                if (!beenVisited || gScore < neighbor.g) {\n\n                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n                    neighbor.visited = true\n                    neighbor.parent = currentNode\n                    neighbor.h = neighbor.h || heuristic(neighbor, end)\n                    neighbor.g = gScore\n                    neighbor.f = neighbor.g + neighbor.h\n                    graph.markDirty(neighbor)\n                    if (closest) {\n                        // If the neighbour is closer than the current closestNode or if it's equally close but has\n                        // a cheaper path than the current closest node then it becomes the closest node\n                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n                            closestNode = neighbor\n                        }\n                    }\n\n                    if (!beenVisited) {\n                        // Pushing to heap will put it in proper place based on the 'f' value.\n                        openHeap.push(neighbor)\n                    } else {\n                        // Already seen the node, but since it has been rescored we need to reorder it in the heap\n                        openHeap.rescoreElement(neighbor)\n                    }\n                }\n            }\n        }\n\n        if (closest) {\n            return pathTo(closestNode)\n        }\n\n        // No result was found - empty array signifies failure to find path.\n        return []\n    },\n\n    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n    heuristics: {\n        manhattan(pos0, pos1) {\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return d1 + d2\n        },\n\n        diagonal(pos0, pos1) {\n            const D = 1\n            const D2 = Math.sqrt(2)\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2))\n        },\n    },\n\n    cleanNode(node) {\n        node.f = 0\n        node.g = 0\n        node.h = 0\n        node.visited = false\n        node.closed = false\n        node.parent = null\n    },\n}\n\nexport class Graph {\n\n    readonly nodes: GridNode[] = []\n    readonly diagonal: boolean\n    readonly grid: GridNode[][] = []\n    dirtyNodes: GridNode[] = []\n\n    /**\n     * A graph memory structure\n     * @param {Array} gridIn 2D array of input weights\n     * @param {Object} [options]\n     * @param {boolean} [options.diagonal] Specifies whether diagonal moves are allowed\n     */\n    constructor(gridIn: number[][], options = null) {\n        options = options || {}\n        this.diagonal = !!options.diagonal\n        for (let x = 0; x < gridIn.length; x++) {\n            this.grid[x] = []\n\n            let y = 0\n            const row = gridIn[x]\n            for (; y < row.length; y++) {\n                const node = new GridNode(x, y, row[y])\n                this.grid[x][y] = node\n                this.nodes.push(node)\n            }\n        }\n        this.init()\n    }\n\n    init() {\n        this.dirtyNodes = []\n        for (let i = 0; i < this.nodes.length; i++) {\n            astar.cleanNode(this.nodes[i])\n        }\n    }\n\n    cleanDirty() {\n        for (let i = 0; i < this.dirtyNodes.length; i++) {\n            astar.cleanNode(this.dirtyNodes[i])\n        }\n        this.dirtyNodes = []\n    }\n\n    markDirty(node) {\n        this.dirtyNodes.push(node)\n    }\n\n    neighbors(node: GridNode) {\n        const ret: GridNode[] = []\n        const x = node.x\n        const y = node.y\n        const grid = this.grid\n\n        // West\n        if (grid[x - 1] && grid[x - 1][y]) {\n            ret.push(grid[x - 1][y])\n        }\n\n        // East\n        if (grid[x + 1] && grid[x + 1][y]) {\n            ret.push(grid[x + 1][y])\n        }\n\n        // South\n        if (grid[x] && grid[x][y - 1]) {\n            ret.push(grid[x][y - 1])\n        }\n\n        // North\n        if (grid[x] && grid[x][y + 1]) {\n            ret.push(grid[x][y + 1])\n        }\n\n        if (this.diagonal) {\n            // Southwest\n            if (grid[x - 1] && grid[x - 1][y - 1]) {\n                ret.push(grid[x - 1][y - 1])\n            }\n\n            // Southeast\n            if (grid[x + 1] && grid[x + 1][y - 1]) {\n                ret.push(grid[x + 1][y - 1])\n            }\n\n            // Northwest\n            if (grid[x - 1] && grid[x - 1][y + 1]) {\n                ret.push(grid[x - 1][y + 1])\n            }\n\n            // Northeast\n            if (grid[x + 1] && grid[x + 1][y + 1]) {\n                ret.push(grid[x + 1][y + 1])\n            }\n        }\n\n        return ret\n    }\n\n    toString() {\n        const graphString = []\n        const nodes = this.grid\n        for (let x = 0; x < nodes.length; x++) {\n            const rowDebug = []\n            const row = nodes[x]\n            for (let y = 0; y < row.length; y++) {\n                rowDebug.push(row[y].weight)\n            }\n            graphString.push(rowDebug.join(' '))\n        }\n        return graphString.join('\\n')\n    }\n}\n\nclass GridNode {\n\n    x: number\n    y: number\n    weight: number\n    h: number\n    closed: boolean\n    visited: boolean\n    g: number\n    parent: GridNode\n    f: number\n\n    constructor(x, y, weight) {\n        this.x = x\n        this.y = y\n        this.weight = weight\n    }\n\n    toString() {\n        return '[' + this.x + ' ' + this.y + ']'\n    }\n\n    getCost(fromNeighbor: GridNode) {\n        // Take diagonal weight into consideration.\n        if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n            return this.weight * 1.41421\n        }\n        return this.weight\n    }\n\n    isWall() {\n        return this.weight === 0\n    }\n}\n\nclass BinaryHeap {\n\n    content = []\n    scoreFunction\n\n    constructor(scoreFunction) {\n        this.content = []\n        this.scoreFunction = scoreFunction\n    }\n\n    push(element) {\n        // Add the new element to the end of the array.\n        this.content.push(element)\n\n        // Allow it to sink down.\n        this.sinkDown(this.content.length - 1)\n    }\n\n    pop() {\n        // Store the first element so we can return it later.\n        const result = this.content[0]\n        // Get the element at the end of the array.\n        const end = this.content.pop()\n        // If there are any elements left, put the end element at the\n        // start, and let it bubble up.\n        if (this.content.length > 0) {\n            this.content[0] = end\n            this.bubbleUp(0)\n        }\n        return result\n    }\n\n    remove(node) {\n        const i = this.content.indexOf(node)\n\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        const end = this.content.pop()\n\n        if (i !== this.content.length - 1) {\n            this.content[i] = end\n\n            if (this.scoreFunction(end) < this.scoreFunction(node)) {\n                this.sinkDown(i)\n            } else {\n                this.bubbleUp(i)\n            }\n        }\n    }\n\n    size() {\n        return this.content.length\n    }\n\n    rescoreElement(node) {\n        this.sinkDown(this.content.indexOf(node))\n    }\n\n    sinkDown(n) {\n        // Fetch the element that has to be sunk.\n        const element = this.content[n]\n\n        // When at 0, an element can not sink any further.\n        while (n > 0) {\n\n            // Compute the parent element's index, and fetch it.\n            const parentN = ((n + 1) >> 1) - 1\n            const parent = this.content[parentN]\n            // Swap the elements if the parent is greater.\n            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n                this.content[parentN] = element\n                this.content[n] = parent\n                // Update 'n' to continue at the new position.\n                n = parentN\n            }\n            // Found a parent that is less, no need to sink any further.\n            else {\n                break\n            }\n        }\n    }\n\n    bubbleUp(n) {\n        // Look up the target element and its score.\n        const length = this.content.length\n        const element = this.content[n]\n        const elemScore = this.scoreFunction(element)\n\n        while (true) {\n            // Compute the indices of the child elements.\n            const child2N = (n + 1) << 1\n            const child1N = child2N - 1\n            // This is used to store the new position of the element, if any.\n            let swap = null\n            let child1Score\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                const child1 = this.content[child1N]\n                child1Score = this.scoreFunction(child1)\n\n                // If the score is less than our element's, we need to swap.\n                if (child1Score < elemScore) {\n                    swap = child1N\n                }\n            }\n\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                const child2 = this.content[child2N]\n                const child2Score = this.scoreFunction(child2)\n                if (child2Score < (swap === null ? elemScore : child1Score)) {\n                    swap = child2N\n                }\n            }\n\n            // If the element needs to be moved, swap it, and continue.\n            if (swap !== null) {\n                this.content[n] = this.content[swap]\n                this.content[swap] = element\n                n = swap\n            }\n            // Otherwise, we are done.\n            else {\n                break\n            }\n        }\n    }\n}\n","import { Surface } from './model/map/Surface'\nimport { Terrain } from './model/map/Terrain'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { WorldManager } from './WorldManager'\nimport { TILESIZE } from '../main'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { Graph } from './model/map/astar'\n\nexport class TerrainLoader {\n\n    static loadTerrain(levelConf: LevelEntryCfg, worldMgr: WorldManager): Terrain {\n        const tileSize = levelConf.blockSize\n        if (tileSize !== TILESIZE) console.error('Unexpected tile size in level configuration: ' + tileSize)\n        const terrain = new Terrain(worldMgr)\n\n        const themeName = levelConf.textureSet[1]\n        terrain.textureSet = ResourceManager.cfg('Textures', themeName)\n        // console.log(terrain.textureSet);\n\n        const terrainMap = ResourceManager.getMap(levelConf.terrainMap)\n        terrain.width = terrainMap.width\n        terrain.height = terrainMap.height\n        const pathMap = ResourceManager.getMap(levelConf.pathMap)?.level\n        const surfaceMap = ResourceManager.getMap(levelConf.surfaceMap)?.level\n        const predugMap = ResourceManager.getMap(levelConf.predugMap)?.level\n        const cryOreMap = ResourceManager.getMap(levelConf.cryOreMap)?.level\n        const fallinMap = ResourceManager.getMap(levelConf.fallinMap)?.level\n        const erodeMap = ResourceManager.getMap(levelConf.erodeMap)?.level\n\n        // maps parsed from WAD are row-wise saved, which means y (row) comes first and x (column) second\n        for (let r = 0; r < terrainMap.level.length; r++) {\n            for (let c = 0; c < (terrainMap.level)[r].length; c++) {\n                (terrain.surfaces)[c] = (terrain.surfaces)[c] || []\n                const surfaceTypeNum = (terrainMap.level)[r][c]\n                let surfaceType = SurfaceType.getByNum(surfaceTypeNum)\n                const predugLevel = predugMap[r][c]\n                if (predugLevel === PredugMap.CAVERN_EXPOSED) {\n                    if (surfaceType === SurfaceType.GROUND || surfaceType === SurfaceType.DIRT) {\n                        surfaceType = SurfaceType.GROUND\n                    } else if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) {\n                        console.warn('Unexpected cavern surface type: ' + surfaceType.name)\n                    }\n                } else if (predugLevel === PredugMap.SLUG_HOLE_EXPOSED || predugLevel === PredugMap.SLUG_HOLE_HIDDEN) {\n                    surfaceType = SurfaceType.SLUG_HOLE\n                } else if (predugLevel !== PredugMap.WALL && predugLevel !== PredugMap.CAVERN_HIDDEN) {\n                    console.warn('Unexpected predug level: ' + predugLevel)\n                }\n                // give the path map the highest priority, if it exists\n                const pathMapLevel = pathMap && surfaceType.floor ? pathMap[r][c] : PathMap.NONE\n                if (pathMapLevel === PathMap.RUBBLE) {\n                    surfaceType = SurfaceType.RUBBLE4\n                } else if (pathMapLevel === PathMap.POWER_PATH) {\n                    surfaceType = SurfaceType.POWER_PATH\n                } else if (pathMapLevel !== PathMap.NONE) {\n                    console.warn('Unexpected path map level: ' + pathMapLevel)\n                }\n\n                const surface = new Surface(terrain, surfaceType, c, r, surfaceMap[r][c])\n                if (cryOreMap) {\n                    const currentCryOre = cryOreMap[r][c]\n                    if (currentCryOre % 2 === 1) {\n                        surface.containedCrystals = (currentCryOre + 1) / 2\n                    } else {\n                        surface.containedOres = currentCryOre / 2\n                    }\n                }\n\n                (terrain.surfaces)[c].push(surface)\n            }\n        }\n\n        // exlpore predug surfaces\n        terrain.surfaces.forEach(c => c.forEach(s => {\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_EXPOSED || predugMap[s.y][s.x] === PredugMap.SLUG_HOLE_EXPOSED) { // map are rows (y) first, columns (x) second\n                for (let x = s.x - 1; x <= s.x + 1; x++) {\n                    for (let y = s.y - 1; y <= s.y + 1; y++) {\n                        terrain.getSurfaceOrNull(x, y).discovered = true\n                    }\n                }\n            }\n        }))\n\n        // create hidden caverns\n        terrain.surfaces.forEach(c => c.forEach(s => {\n            const surface = terrain.getSurfaceOrNull(s.x, s.y)\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_HIDDEN && !surface.discovered) {\n                surface.surfaceType = SurfaceType.GROUND\n            }\n        }))\n\n        terrain.graphWalk = new Graph(terrain.surfaces.map(c => c.map(s => s.getGraphWalkWeight())))\n\n        // crumble unsupported walls\n        terrain.surfaces.forEach((c) => c.forEach((s) => {\n            if (!s.isSupported()) s.collapse()\n        }))\n\n        terrain.updateSurfaceMeshes(true)\n\n        if (fallinMap) {\n            for (let x = 0; x < terrain.width; x++) {\n                for (let y = 0; y < terrain.height; y++) {\n                    terrain.getSurface(x, y).setFallinLevel(fallinMap[y][x]) // rows (y) before columns (x) used in maps\n                }\n            }\n        }\n\n        if (erodeMap) { // TODO implement lava erosion\n            console.warn('Lucky you! Lava erosion not yet implemented')\n        }\n\n        return terrain\n    }\n\n}\n\nenum PathMap {\n\n    NONE = 0,\n    RUBBLE = 1,\n    POWER_PATH = 2,\n\n}\n\nenum PredugMap {\n\n    WALL = 0,\n    CAVERN_EXPOSED = 1,\n    CAVERN_HIDDEN = 2,\n    SLUG_HOLE_EXPOSED = 3,\n    SLUG_HOLE_HIDDEN = 4,\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\n\nexport class TerrainPath {\n\n    target: PathTarget = null\n    locations: Vector2[] = []\n    lengthSq: number = 0\n\n    constructor(target: PathTarget, locations: Vector2[] | Vector2) {\n        this.target = target\n        this.locations = Array.isArray(locations) ? locations : [locations]\n        for (let c = 0; c < this.locations.length - 1; c++) {\n            const start = this.locations[c]\n            const end = this.locations[c + 1]\n            this.lengthSq += start.distanceToSquared(end)\n        }\n    }\n\n    addLocation(location: Vector2): TerrainPath {\n        this.locations.push(location)\n        if (this.locations.length > 1) {\n            this.lengthSq += this.locations[this.locations.length - 2].distanceToSquared(location)\n        }\n        return this\n    }\n\n    get targetPosition(): Vector2 {\n        return this.locations[this.locations.length - 1] || null\n    }\n\n    get firstLocation(): Vector2 {\n        return this.locations[0] || null\n    }\n\n}\n","import { Group, Vector2, Vector3 } from 'three'\nimport { Surface } from './Surface'\nimport { WorldManager } from '../../WorldManager'\nimport { SurfaceType } from './SurfaceType'\nimport { TILESIZE } from '../../../main'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityAddedEvent, EntityType } from '../../../event/WorldEvents'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { astar, Graph } from './astar'\nimport { TerrainPath } from './TerrainPath'\nimport { PathTarget } from '../PathTarget'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class Terrain {\n\n    worldMgr: WorldManager\n    textureSet: any = {}\n    width: number = 0\n    height: number = 0\n    surfaces: Surface[][] = []\n    floorGroup: Group = new Group()\n    roofGroup: Group = new Group()\n    graphWalk: Graph = null\n    cachedPaths = new Map<string, TerrainPath>()\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        this.floorGroup.scale.set(TILESIZE, TILESIZE, TILESIZE)\n        this.roofGroup.visible = false // keep roof hidden unless switched to other camera\n        EventBus.registerEventListener(EventKey.ENTITY_ADDED, (event: EntityAddedEvent) => {\n            if (event.type !== EntityType.BUILDING) return;\n            (event.entity as BuildingEntity).surfaces.forEach((bSurf) => {\n                for (let x = -1; x <= 1; x++) {\n                    for (let y = -1; y <= 1; y++) {\n                        this.getSurface(bSurf.x + x, bSurf.y + y).updateTexture()\n                    }\n                }\n            })\n        })\n    }\n\n    getSurfaceFromWorld(worldPosition: Vector3): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.z)\n    }\n\n    getSurfaceFromWorld2D(worldPosition: Vector2): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.y)\n    }\n\n    getSurfaceFromWorldXZ(worldX: number, worldZ: number): Surface | null {\n        return this.getSurface(worldX / TILESIZE, worldZ / TILESIZE)\n    }\n\n    getSurface(x, y): Surface {\n        x = Math.floor(x)\n        y = Math.floor(y)\n        return this.getSurfaceOrNull(x, y) || new Surface(this, SurfaceType.SOLID_ROCK, x, y, 0)\n    }\n\n    getSurfaceOrNull(x, y): Surface | null {\n        if (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n            return this.surfaces[x][y]\n        } else {\n            return null\n        }\n    }\n\n    updateSurfaceMeshes(force: boolean = false) {\n        this.surfaces.forEach((r) => r.forEach((s) => s.updateMesh(force)))\n        this.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n        this.resetGraphWalk()\n    }\n\n    resetGraphWalk() {\n        this.graphWalk.init()\n        this.cachedPaths.clear()\n        console.log('Cached paths cleared')\n    }\n\n    findPath(start: Vector2, target: PathTarget): TerrainPath {\n        const end = target.targetLocation\n        const startSurface = this.getSurfaceFromWorldXZ(start.x, start.y)\n        const endSurface = this.getSurfaceFromWorldXZ(end.x, end.y)\n        if (startSurface.x === endSurface.x && startSurface.y === endSurface.y) {\n            return new TerrainPath(target, end)\n        }\n        const cacheIdentifier = startSurface.x + '/' + startSurface.y + ' -> ' + endSurface.x + '/' + endSurface.y\n        const cachedPath = this.cachedPaths.get(cacheIdentifier)\n        if (cachedPath) {\n            return cachedPath.addLocation(end)\n        } else {\n            return this.searchPath(startSurface, endSurface, target, cacheIdentifier)\n        }\n    }\n\n    private searchPath(startSurface: Surface, endSurface: Surface, target: PathTarget, cacheIdentifier: string): TerrainPath {\n        const startNode = this.graphWalk.grid[startSurface.x][startSurface.y]\n        const endNode = this.graphWalk.grid[endSurface.x][endSurface.y]\n        const worldPath = astar.search(this.graphWalk, startNode, endNode).map(p => this.getSurface(p.x, p.y).getCenterWorld2D())\n        if (worldPath.length < 1) return null // no path found\n        // replace last surface center with actual target position\n        worldPath.pop()\n        worldPath.push(target.targetLocation)\n        this.cachedPaths.set(cacheIdentifier, new TerrainPath(target, worldPath.slice(0, -1))) // cache shallow copy to avoid interference\n        return new TerrainPath(target, worldPath)\n    }\n\n    findFallInOrigin(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isReinforcable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isReinforcable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isReinforcable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isReinforcable()) return [bottomSurface.x, bottomSurface.y]\n        const leftSurface2 = this.getSurface(x - 1, y)\n        if (leftSurface2.isDigable()) return [leftSurface2.x, leftSurface2.y]\n        const topSurface2 = this.getSurface(x, y - 1)\n        if (topSurface2.isDigable()) return [topSurface2.x, topSurface2.y]\n        const rightSurface2 = this.getSurface(x + 1, y)\n        if (rightSurface2.isDigable()) return [rightSurface2.x, rightSurface2.y]\n        const bottomSurface2 = this.getSurface(x, y + 1)\n        if (bottomSurface2.isDigable()) return [bottomSurface2.x, bottomSurface2.y]\n        return null\n    }\n\n    findFallInTarget(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isWalkable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isWalkable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isWalkable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isWalkable()) return [bottomSurface.x, bottomSurface.y]\n        return null\n    }\n\n    dispose() {\n        this.surfaces.forEach(c => c.forEach(s => s.dispose()))\n    }\n}\n","import { Vector3 } from 'three'\n\nexport class EntityStep {\n\n    vec: Vector3 = null\n    targetReached: boolean = false\n\n    constructor(dx: number, dy: number, dz: number) {\n        this.vec = new Vector3(dx, dy, dz)\n    }\n\n}\n","export enum MoveState {\n\n    MOVED,\n    TARGET_REACHED,\n    TARGET_UNREACHABLE,\n\n}\n","import { AnimEntity } from './anim/AnimEntity'\nimport { Vector2, Vector3 } from 'three'\nimport { AnimationEntityType } from './anim/AnimationEntityType'\nimport { MovableEntityStats } from '../../cfg/MovableEntityStats'\nimport { EntityStep } from './EntityStep'\nimport { MoveState } from './MoveState'\nimport { JOB_ACTION_RANGE } from '../../main'\nimport { TerrainPath } from './map/TerrainPath'\nimport { PathTarget } from './PathTarget'\nimport { AnimEntityActivity } from './activities/AnimEntityActivity'\n\nexport abstract class MovableEntity extends AnimEntity {\n\n    currentPath: TerrainPath = null\n\n    constructor(entityType: AnimationEntityType) {\n        super(entityType)\n    }\n\n    abstract get stats(): MovableEntityStats\n\n    getPosition(): Vector3 {\n        return new Vector3(this.group.position.x, this.group.position.y, this.group.position.z)\n    }\n\n    getPosition2D(): Vector2 {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    getSpeed(): number {\n        return this.stats.RouteSpeed[this.level] * (this.animation?.transcoef || 1) * (this.isOnPath() ? this.stats.PathCoef : 1)\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        if (!this.currentPath || !target.some((t) => t.targetLocation.equals(this.currentPath.target.targetLocation))) {\n            const paths = target.map((t) => this.findPathToTarget(t))\n                .sort((l, r) => l.lengthSq - r.lengthSq)\n            this.currentPath = paths.length > 0 ? paths[0] : null\n            if (!this.currentPath) return MoveState.TARGET_UNREACHABLE\n        }\n        const nextLocation = this.currentPath.firstLocation\n        this.group.lookAt(new Vector3(nextLocation.x, this.group.position.y, nextLocation.y))\n        const step = this.determineStep()\n        if (step.targetReached || this.currentPath.target.isInArea(this.getPosition2D())) {\n            return MoveState.TARGET_REACHED\n        } else {\n            this.group.position.add(step.vec)\n            this.changeActivity(this.getRouteActivity()) // only change when actually moving\n            return MoveState.MOVED\n        }\n    }\n\n    abstract getRouteActivity(): AnimEntityActivity\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return new TerrainPath(target, target.targetLocation)\n    }\n\n    determineStep(): EntityStep {\n        const step = this.getEntityStep(this.currentPath.firstLocation)\n        const stepLengthSq = step.vec.lengthSq()\n        const entitySpeed = this.getSpeed() // TODO use average speed between current and target position\n        if (this.currentPath.locations.length > 1) {\n            if (stepLengthSq < entitySpeed * entitySpeed) {\n                this.currentPath.locations.shift()\n                return this.determineStep()\n            }\n        } else if (stepLengthSq < JOB_ACTION_RANGE * JOB_ACTION_RANGE) {\n            step.targetReached = true\n        }\n        step.vec.setLength(Math.min(entitySpeed, JOB_ACTION_RANGE))\n        return step\n    }\n\n    getEntityStep(target: Vector2): EntityStep {\n        return new EntityStep(target.x - this.group.position.x, this.determinePosY(target.x, target.y) - this.determinePosY(this.group.position.x, this.group.position.z), target.y - this.group.position.z)\n    }\n\n    determinePosY(x: number, z: number) {\n        return this.worldMgr.getFloorHeight(x, z)\n    }\n\n    isOnRubble() {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).hasRubble()\n    }\n\n    isOnPath(): boolean {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).isPath()\n    }\n\n}\n","import { MovableEntity } from './MovableEntity'\nimport { Selectable, SelectionType } from '../../game/model/Selectable'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Job } from '../../game/model/job/Job'\nimport { Vector3 } from 'three'\nimport { NATIVE_FRAMERATE } from '../../main'\nimport { clearIntervalSafe } from '../../core/Util'\nimport { Carryable } from './collect/Carryable'\nimport { SelectionEvent } from '../../event/LocalEvents'\nimport { RaiderSkill } from './RaiderSkill'\nimport { RaiderTool } from './RaiderTool'\nimport { PathTarget } from './PathTarget'\n\nexport abstract class FulfillerEntity extends MovableEntity implements Selectable {\n\n    selectionType: SelectionType\n    selected: boolean\n    workInterval = null\n    job: Job = null\n    followUpJob: Job = null\n    carries: Carryable = null\n    jobWorkplaces: PathTarget[] = []\n\n    protected constructor(selectionType: SelectionType, aeFilename: string) {\n        super(ResourceManager.getAnimationEntityType(aeFilename))\n        this.selectionType = selectionType\n        this.group.userData = {'selectable': this}\n        this.workInterval = setInterval(this.work.bind(this), 1000 / NATIVE_FRAMERATE) // TODO do not use interval, make work trigger itself (with timeout/interval) until work is done\n    }\n\n    resetWorkInterval() {\n        this.workInterval = clearIntervalSafe(this.workInterval)\n    }\n\n    abstract work()\n\n    dropItem() {\n        if (!this.carries) return\n        this.carryJoint?.remove(this.carries.group)\n        this.carries.group.position.copy(this.group.position)\n        this.carryJoint?.getWorldPosition(this.carries.group.position)\n        this.carries.group.position.y = this.worldMgr.getFloorHeight(this.carries.group.position.x, this.carries.group.position.z)\n        this.carries = null\n    }\n\n    pickupItem(item: Carryable) {\n        this.carries = item\n        if (this.carryJoint) this.carryJoint.add(this.carries.group)\n        this.carries.group.position.set(0, 0, 0)\n    }\n\n    setJob(job: Job, followUpJob: Job = null) {\n        if (this.job !== job) this.stopJob()\n        this.job = job\n        if (this.job) this.job.assign(this)\n        this.followUpJob = followUpJob\n        if (this.followUpJob) this.followUpJob.assign(this)\n        this.jobWorkplaces = this.job.getWorkplaces()\n    }\n\n    stopJob() {\n        this.dropItem()\n        if (!this.job) return\n        this.job.unassign(this)\n        if (this.followUpJob) this.followUpJob.unassign(this)\n        this.job = null\n        this.followUpJob = null\n        this.jobWorkplaces = []\n        this.changeActivity()\n    }\n\n    abstract hasTool(tool: RaiderTool)\n\n    abstract hasSkill(skill: RaiderSkill)\n\n    getSelectionType(): SelectionType {\n        return this.selectionType\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    abstract select(): SelectionEvent;\n\n    abstract getSelectionCenter(): Vector3;\n\n}\n","export class RaiderTool {\n\n    static DRILL = new RaiderTool('drill')\n    static HAMMER = new RaiderTool('hammer')\n    static SHOVEL = new RaiderTool('shovel')\n    static SPANNER = new RaiderTool('spanner')\n    static FREEZERGUN = new RaiderTool('freezergun')\n    static LASER = new RaiderTool('laser')\n    static PUSHERGUN = new RaiderTool('pushergun')\n    static BIRDSCARER = new RaiderTool('birdscarer')\n\n    name: string\n\n    constructor(name: string) {\n        this.name = name\n    }\n\n}\n","import { SelectionType } from '../../game/model/Selectable'\nimport { EventBus } from '../../event/EventBus'\nimport { RaiderSelected, SelectionEvent } from '../../event/LocalEvents'\nimport { FulfillerEntity } from './FulfillerEntity'\nimport { GameState } from '../../game/model/GameState'\nimport { MathUtils, Vector2, Vector3 } from 'three'\nimport { EntityAddedEvent, EntityType, OreFoundEvent, RaiderTrained } from '../../event/WorldEvents'\nimport { CrystalFoundEvent, RaiderDiscoveredEvent } from '../../event/WorldLocationEvent'\nimport { BaseActivity } from './activities/BaseActivity'\nimport { RaiderActivity } from './activities/RaiderActivity'\nimport { DynamiteJob } from '../../game/model/job/surface/DynamiteJob'\nimport { DrillJob } from '../../game/model/job/surface/DrillJob'\nimport { ClearRubbleJob } from '../../game/model/job/surface/ClearRubbleJob'\nimport { SurfaceType } from './map/SurfaceType'\nimport { getRandom, getRandomInclusive } from '../../core/Util'\nimport { Crystal } from './collect/Crystal'\nimport { Ore } from './collect/Ore'\nimport { CollectJob } from '../../game/model/job/CollectJob'\nimport { TrainJob } from '../../game/model/job/TrainJob'\nimport { GetToolJob } from '../../game/model/job/GetToolJob'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { RaiderTool } from './RaiderTool'\nimport { RaiderSkill } from './RaiderSkill'\nimport { MoveState } from './MoveState'\nimport { JobType } from '../../game/model/job/JobType'\nimport { TerrainPath } from './map/TerrainPath'\nimport { PathTarget } from './PathTarget'\nimport { CollectPathTarget } from './CollectionTarget'\nimport degToRad = MathUtils.degToRad\n\nexport class Raider extends FulfillerEntity {\n\n    tools: RaiderTool[] = []\n    skills: RaiderSkill[] = []\n    slipped: boolean = false\n\n    constructor() {\n        super(SelectionType.PILOT, 'mini-figures/pilot/pilot.ae')\n        this.tools = [RaiderTool.DRILL]\n        this.skills = []\n        this.pickSphereRadius = this.stats.PickSphere / 2\n    }\n\n    get stats() {\n        return ResourceManager.stats.Pilot\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.worldMgr.sceneManager.terrain.findPath(this.getPosition2D(), target)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.raidersUndiscovered.remove(this)\n        GameState.raiders.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, this))\n        EventBus.publishEvent(new RaiderDiscoveredEvent(this.getPosition()))\n    }\n\n    select(): SelectionEvent {\n        this.selectionFrame.visible = !this.slipped\n        if (this.selected || this.slipped) return null\n        this.selected = true\n        this.changeActivity()\n        return new RaiderSelected(this)\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    isDriving(): boolean {\n        return false // TODO implement vehicles\n    }\n\n    getRouteActivity(): BaseActivity {\n        if (this.isOnRubble()) {\n            return !!this.carries ? RaiderActivity.CarryRubble : RaiderActivity.routeRubble\n        } else {\n            return !!this.carries ? RaiderActivity.Carry : RaiderActivity.Route\n        }\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        const result = super.moveToClosestTarget(target)\n        if (result === MoveState.MOVED) {\n            GameState.getNearbySpiders(this).some((spider) => {\n                if (this.group.position.distanceToSquared(spider.group.position) < this.radiusSq + spider.radiusSq) {\n                    this.slip()\n                    spider.onDeath()\n                    return true\n                }\n            })\n        } else if (result === MoveState.TARGET_UNREACHABLE) {\n            console.log('Entity could not move to job target, stopping job')\n            this.stopJob()\n        }\n        return result\n    }\n\n    slip() {\n        if (getRandomInclusive(0, 100) < 10) this.stopJob()\n        this.dropItem()\n        this.slipped = true\n        this.changeActivity(RaiderActivity.Slip, () => {\n            this.slipped = false\n        })\n    }\n\n    moveToClosestWorkplace(): boolean {\n        return this.moveToClosestTarget(this.jobWorkplaces) === MoveState.TARGET_REACHED\n    }\n\n    work() {\n        if (!this.job || this.selected || this.slipped) return\n        if (this.job.type === JobType.DRILL) {\n            const surfJob = this.job as DrillJob\n            if (this.moveToClosestWorkplace()) {\n                let drillTimeMs = null\n                if (surfJob.surface.surfaceType === SurfaceType.HARD_ROCK) {\n                    drillTimeMs = this.stats.HardDrillTime[this.level] * 1000\n                } else if (surfJob.surface.surfaceType === SurfaceType.LOOSE_ROCK) {\n                    drillTimeMs = this.stats.LooseDrillTime[this.level] * 1000\n                } else if (surfJob.surface.surfaceType === SurfaceType.DIRT) {\n                    drillTimeMs = this.stats.SoilDrillTime[this.level] * 1000\n                } else if (surfJob.surface.surfaceType === SurfaceType.ORE_SEAM ||\n                    surfJob.surface.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                    drillTimeMs = this.stats.SeamDrillTime[this.level] * 1000\n                }\n                if (drillTimeMs === 0) console.warn('According to cfg this entity cannot drill this material')\n                const focusPoint = surfJob.surface.getCenterWorld()\n                focusPoint.y = this.group.position.y\n                this.group.lookAt(focusPoint)\n                this.changeActivity(RaiderActivity.Drill, () => {\n                    if (surfJob.surface.seamLevel > 0) {\n                        surfJob.surface.seamLevel--\n                        const vec = new Vector2().copy(this.getPosition2D()).sub(surfJob.surface.getCenterWorld2D())\n                            .multiplyScalar(0.3 + getRandom(3) / 10)\n                            .rotateAround(new Vector2(0, 0), degToRad(-10 + getRandom(20)))\n                            .add(this.getPosition2D())\n                        if (surfJob.surface.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                            const crystal = this.worldMgr.addCollectable(new Crystal(), vec)\n                            EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n                        } else if (surfJob.surface.surfaceType === SurfaceType.ORE_SEAM) {\n                            this.worldMgr.addCollectable(new Ore(), vec)\n                            EventBus.publishEvent(new OreFoundEvent())\n                        }\n                        this.changeActivity()\n                    } else {\n                        this.completeJob()\n                    }\n                }, drillTimeMs)\n            }\n        } else if (this.job.type === JobType.CLEAR_RUBBLE) {\n            const surfJob = this.job as ClearRubbleJob\n            if (this.moveToClosestWorkplace()) {\n                this.changeActivity(RaiderActivity.Clear, () => {\n                    this.changeActivity()\n                    this.job.onJobComplete()\n                    this.jobWorkplaces = this.job.getWorkplaces()\n                    if (!surfJob.surface.hasRubble()) this.stopJob()\n                })\n            }\n        } else if (this.job.type === JobType.REINFORCE) {\n            if (this.moveToClosestWorkplace()) {\n                this.changeActivity(RaiderActivity.Reinforce, () => {\n                    this.completeJob()\n                }, 2700)\n            }\n        } else if (this.job.type === JobType.BLOW) {\n            const bj = this.job as DynamiteJob\n            if (this.carries !== bj.dynamite) {\n                this.dropItem()\n                if (this.moveToClosestWorkplace()) {\n                    this.changeActivity(RaiderActivity.Collect, () => {\n                        this.pickupItem(bj.dynamite)\n                    })\n                }\n            } else if (this.moveToClosestTarget(bj.surface.getDigPositions().map((p) => new PathTarget(p)))) {\n                this.changeActivity(RaiderActivity.Place, () => {\n                    this.completeJob()\n                })\n            }\n        } else if (this.job.type === JobType.COLLECT) {\n            const collectJob = this.job as CollectJob\n            const collectJobItem = collectJob.item\n            if (this.carries !== collectJobItem) {\n                this.dropItem()\n                if (this.moveToClosestWorkplace()) {\n                    this.changeActivity(RaiderActivity.Collect, () => {\n                        this.pickupItem(collectJobItem)\n                    })\n                }\n            } else {\n                const moveResult = this.moveToClosestTarget(collectJobItem.getCarryTargets())\n                collectJobItem.setTargetSite((this.currentPath?.target as CollectPathTarget)?.site)\n                if (moveResult) {\n                    const collectPathTarget = this.currentPath.target as CollectPathTarget\n                    if (collectPathTarget.canGatherItem()) {\n                        const dropAction = collectPathTarget.getDropAction()\n                        this.changeActivity(dropAction, () => {\n                            this.completeJob()\n                            collectPathTarget.gatherItem(collectJobItem)\n                        })\n                    } else {\n                        this.changeActivity()\n                    }\n                }\n            }\n        } else if (this.job.type === JobType.MOVE) {\n            if (this.moveToClosestWorkplace()) {\n                this.changeActivity(this.getDefaultActivity(), () => {\n                    this.completeJob()\n                })\n            }\n        } else if (this.job.type === JobType.TRAIN) {\n            const trainJob = this.job as TrainJob\n            if (this.moveToClosestWorkplace()) {\n                this.changeActivity(RaiderActivity.Train, () => {\n                    this.skills.push(trainJob.skill)\n                    EventBus.publishEvent(new RaiderTrained(this, trainJob.skill))\n                    this.completeJob()\n                }, 10000) // XXX adjust training time\n            }\n        } else if (this.job.type === JobType.GET_TOOL) {\n            if (this.moveToClosestWorkplace()) {\n                this.tools.push((this.job as GetToolJob).tool)\n                this.completeJob()\n            }\n        } else if (this.job.type === JobType.EAT) {\n            this.changeActivity(RaiderActivity.Eat, () => {\n                // TODO implement endurance fill eat level\n                this.completeJob()\n            })\n        } else if (this.job.type === JobType.COMPLETE_POWER_PATH) {\n            if (this.moveToClosestWorkplace()) {\n                this.changeActivity(RaiderActivity.Clear, () => {\n                    this.completeJob()\n                })\n            }\n        }\n    }\n\n    private completeJob() {\n        this.dropItem()\n        this.job.onJobComplete()\n        if (this.job) this.job.unassign(this)\n        this.job = this.followUpJob\n        this.followUpJob = null\n        this.jobWorkplaces = this.job?.getWorkplaces() || []\n        this.changeActivity()\n    }\n\n    getDefaultActivity(): BaseActivity {\n        return this.carries ? RaiderActivity.CarryStand : super.getDefaultActivity()\n    }\n\n    beamUp() {\n        this.stopJob()\n        super.beamUp()\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        GameState.raiders.remove(this)\n    }\n\n    hasTool(tool: RaiderTool) {\n        return this.tools.indexOf(tool) !== -1\n    }\n\n    hasSkill(skill: RaiderSkill) {\n        return this.skills.indexOf(skill) !== -1\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { BuildingSelected, EntityDeselected, SelectionEvent } from '../../event/LocalEvents'\nimport { Building } from '../../game/model/entity/building/Building'\nimport { AnimEntity } from './anim/AnimEntity'\nimport { Selectable, SelectionType } from '../../game/model/Selectable'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Matrix4, Vector2, Vector3 } from 'three'\nimport { GameState } from '../../game/model/GameState'\nimport { BuildingUpgraded, EntityAddedEvent, EntityType, MaterialAmountChanged } from '../../event/WorldEvents'\nimport { Surface } from './map/Surface'\nimport { CollectableEntity, CollectableType } from './collect/CollectableEntity'\nimport { BuildingActivity } from './activities/BuildingActivity'\nimport { BuildingEntityStats } from '../../cfg/BuildingEntityStats'\nimport { Ore } from './collect/Ore'\nimport { Crystal } from './collect/Crystal'\nimport { SurfaceType } from './map/SurfaceType'\nimport { AnimEntityActivity } from './activities/AnimEntityActivity'\nimport { EventKey } from '../../event/EventKeyEnum'\n\nexport class BuildingEntity extends AnimEntity implements Selectable {\n\n    type: Building\n    selected: boolean\n    powerSwitch: boolean = true\n    spawning: boolean = false\n    surfaces: Surface[] = []\n    upgradeCostOre: number = 0\n    upgradeCostBrick: number = 0\n    crystalsInUse: number = 0\n    inBeam: boolean = false\n\n    constructor(buildingType: Building) {\n        super(ResourceManager.getAnimationEntityType(buildingType.aeFile))\n        this.type = buildingType\n        this.group.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        this.group.userData = {'selectable': this}\n        this.pickSphereRadius = this.stats.PickSphere / 2\n        this.upgradeCostOre = ResourceManager.cfg('Main', 'BuildingUpgradeCostOre')\n        this.upgradeCostBrick = ResourceManager.cfg('Main', 'BuildingUpgradeCostStuds')\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, (event: MaterialAmountChanged) => {\n            if (event.collectableType === CollectableType.CRYSTAL && this.powerSwitch && this.crystalsInUse < 1) {\n                this.turnOnPower()\n            }\n        })\n    }\n\n    get stats(): BuildingEntityStats {\n        return BuildingEntityStats.getByType(this.type)\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.BUILDING\n    }\n\n    select(): SelectionEvent {\n        if (this.inBeam) return null\n        this.selectionFrame.visible = true\n        if (!this.selected) {\n            this.selected = true\n            return new BuildingSelected(this)\n        }\n        return null\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    getPickSphereCenter() {\n        const pickSphereCenter = this.getPosition()\n        pickSphereCenter.y += this.pickSphereRadius / 2\n        return pickSphereCenter\n    }\n\n    getDropPosition2D(): Vector2 {\n        if (this.getToolJoint) {\n            const worldPos = new Vector3()\n            this.getToolJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else if (this.depositJoint) {\n            const worldPos = new Vector3()\n            this.depositJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else {\n            return this.getPosition2D()\n        }\n    }\n\n    getDropPosition(): Vector3 {\n        const dropPos2D = this.getDropPosition2D()\n        return new Vector3(dropPos2D.x, this.worldMgr.getFloorHeight(dropPos2D.x, dropPos2D.y), dropPos2D.y)\n    }\n\n    isPowered(): boolean {\n        return this.powerSwitch && (this.stats.SelfPowered || this.stats.PowerBuilding || this.crystalsInUse > 0)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.buildingsUndiscovered.remove(this)\n        GameState.buildings.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(EntityType.BUILDING, this))\n    }\n\n    hasMaxLevel(): boolean {\n        return this.level >= this.stats.Levels - 1\n    }\n\n    upgrade() {\n        if (!this.canUpgrade()) return\n        if (GameState.numBrick >= this.upgradeCostBrick) {\n            GameState.numBrick -= this.upgradeCostBrick\n            EventBus.publishEvent(new MaterialAmountChanged(CollectableType.BRICK))\n        } else {\n            GameState.numOre -= this.upgradeCostOre\n            EventBus.publishEvent(new MaterialAmountChanged(CollectableType.ORE))\n        }\n        this.level++\n        EventBus.publishEvent(new EntityDeselected())\n        EventBus.publishEvent(new BuildingUpgraded(this))\n        // TODO add sparkly upgrade animation\n    }\n\n    getDefaultActivity() {\n        return !this.isPowered() && this.type !== Building.GUNSTATION ? BuildingActivity.Unpowered : AnimEntityActivity.Stand\n    }\n\n    beamUp() {\n        GameState.usedCrystals -= this.crystalsInUse\n        this.crystalsInUse = 0\n        this.inBeam = true\n        for (let c = 0; c < this.stats.CostOre; c++) {\n            this.worldMgr.addCollectable(new Ore(), this.surfaces[0].getRandomPosition())\n        }\n        for (let c = 0; c < this.stats.CostCrystal; c++) {\n            this.worldMgr.addCollectable(new Crystal(), this.surfaces[0].getRandomPosition())\n        }\n        this.surfaces.forEach((s) => {\n            s.surfaceType = SurfaceType.GROUND\n            s.setBuilding(null)\n            s.updateTexture()\n            s.neighbors.forEach((n) => n.updateTexture())\n        })\n        super.beamUp()\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        GameState.buildings.remove(this)\n    }\n\n    canUpgrade() {\n        return !this.hasMaxLevel() && (GameState.numOre >= this.upgradeCostOre || GameState.numBrick >= this.upgradeCostBrick)\n    }\n\n    spawnMaterials(materials: CollectableEntity[]) {\n        materials.forEach((m) => this.worldMgr.addCollectable(m, this.getDropPosition2D()))\n    }\n\n    turnOnPower() {\n        if (this.crystalsInUse > 0 || GameState.usedCrystals >= GameState.numCrystal) return\n        this.crystalsInUse = 1\n        GameState.usedCrystals += this.crystalsInUse\n        this.surfaces.forEach((s) => s.setHasPower(true, true))\n        this.changeActivity()\n    }\n\n    turnOffPower() {\n        if (this.crystalsInUse < 1) return\n        GameState.usedCrystals -= this.crystalsInUse\n        this.crystalsInUse = 0\n        this.surfaces.forEach((s) => s.setHasPower(false, false))\n        this.changeActivity()\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class MonsterActivity extends AnimEntityActivity {\n\n    static Route = new MonsterActivity('Activity_Route')\n\n}\n","import { MovableEntity } from '../../../../scene/model/MovableEntity'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { clearTimeoutSafe } from '../../../../core/Util'\nimport { MonsterActivity } from '../../../../scene/model/activities/MonsterActivity'\n\nexport abstract class Monster extends MovableEntity {\n\n    moveTimeout: NodeJS.Timeout\n    target: PathTarget = null\n\n    onLevelEnd() {\n        this.moveTimeout = clearTimeoutSafe(this.moveTimeout)\n        this.removeFromScene()\n    }\n\n    getRouteActivity(): MonsterActivity {\n        return MonsterActivity.Route\n    }\n\n}\n","import { Monster } from './Monster'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { Vector2 } from 'three'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../../main'\nimport { getRandom, getRandomInclusive } from '../../../../core/Util'\nimport { SurfaceType } from '../../../../scene/model/map/SurfaceType'\nimport { GameState } from '../../GameState'\nimport { MoveState } from '../../../../scene/model/MoveState'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\n\nexport class SmallSpider extends Monster {\n\n    constructor() {\n        super(ResourceManager.getAnimationEntityType('Creatures/SpiderSB/SpiderSB.ae'))\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallSpider\n    }\n\n    startMoving() {\n        SmallSpider.onMove(this)\n    }\n\n    private static onMove(spider: SmallSpider) {\n        const prevSurface = spider.getCurrentSurface()\n        if (spider.target && spider.moveToClosestTarget([spider.target]) === MoveState.MOVED) {\n            const nextSurface = spider.getCurrentSurface()\n            if (prevSurface !== nextSurface) {\n                (GameState.spidersBySurface.get(prevSurface) || []).remove(spider)\n                GameState.spidersBySurface.getOrUpdate(nextSurface, () => []).push(spider)\n            }\n            if (!spider.worldMgr.sceneManager.terrain.getSurfaceFromWorld(spider.getPosition()).surfaceType.floor) {\n                spider.onDeath()\n            } else {\n                spider.moveTimeout = setTimeout(() => SmallSpider.onMove(spider), 1000 / NATIVE_FRAMERATE)\n            }\n        } else {\n            spider.changeActivity()\n            spider.moveTimeout = setTimeout(() => {\n                spider.target = spider.findTarget()\n                SmallSpider.onMove(spider)\n            }, 1000 + getRandom(9000))\n        }\n    }\n\n    private findTarget(): PathTarget {\n        const terrain = this.worldMgr.sceneManager.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            const surfaceType = terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType\n            if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a solid target')\n        return null\n    }\n\n    onDeath() {\n        this.onLevelEnd()\n        GameState.spiders.remove(this);\n        (GameState.spidersBySurface.get(this.getCurrentSurface()) || []).remove(this)\n    }\n\n}\n","import { Monster } from './Monster'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { Vector2 } from 'three'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../../main'\nimport { getRandomInclusive } from '../../../../core/Util'\nimport { GameState } from '../../GameState'\nimport { MoveState } from '../../../../scene/model/MoveState'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\n\nexport class Bat extends Monster {\n\n    constructor() {\n        super(ResourceManager.getAnimationEntityType('Creatures/bat/bat.ae'))\n    }\n\n    get stats() {\n        return ResourceManager.stats.Bat\n    }\n\n    startRandomMove() {\n        Bat.onMove(this)\n    }\n\n    private static onMove(bat: Bat) {\n        if (!bat.target || bat.moveToClosestTarget([bat.target]) === MoveState.TARGET_REACHED) {\n            bat.target = bat.findTarget()\n        }\n        bat.moveTimeout = setTimeout(() => Bat.onMove(bat), 1000 / NATIVE_FRAMERATE)\n    }\n\n    determinePosY(x: number, z: number) {\n        return this.worldMgr.getFloorHeight(x, z) + TILESIZE / 2\n    }\n\n    private findTarget(): PathTarget { // TODO move to nearby drilling noise, explosions or sonic blasters\n        const terrain = this.worldMgr.sceneManager.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            if (terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType.floor) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a solid target')\n        return null\n    }\n\n    onDeath() {\n        this.onLevelEnd()\n        GameState.bats.remove(this)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { TILESIZE } from '../main'\nimport { MathUtils, Vector2, Vector3 } from 'three'\nimport { Raider } from './model/Raider'\nimport { GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { BuildingEntity } from './model/BuildingEntity'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { Crystal } from './model/collect/Crystal'\nimport { WorldManager } from './WorldManager'\nimport { EventBus } from '../event/EventBus'\nimport { EntityAddedEvent, EntityType } from '../event/WorldEvents'\nimport { SmallSpider } from '../game/model/entity/monster/SmallSpider'\nimport { Bat } from '../game/model/entity/monster/Bat'\nimport degToRad = MathUtils.degToRad\n\nexport class ObjectListLoader {\n\n    static loadObjectList(worldMgr: WorldManager, objectListConf) {\n        Object.values(objectListConf).forEach((olObject: any) => {\n            const lTypeName = olObject.type ? olObject.type.toLowerCase() : olObject.type\n            // all object positions are off by half a tile, because 0/0 is the top left corner of first tile\n            const worldX = (olObject.xPos - 1) * TILESIZE\n            const worldZ = (olObject.yPos - 1) * TILESIZE\n            const terrainY = worldMgr.getTerrainHeight(worldX, worldZ)\n            const buildingType: string = ResourceManager.cfg('BuildingTypes', olObject.type)\n            const radHeading = degToRad(olObject.heading)\n            if (lTypeName === 'TVCamera'.toLowerCase()) {\n                const offset = new Vector3(5 * TILESIZE, 0, 0).applyAxisAngle(new Vector3(0, 1, 0), radHeading - Math.PI / 16).add(new Vector3(worldX, terrainY, worldZ - TILESIZE / 2))\n                worldMgr.sceneManager.camera.position.copy(offset)\n                worldMgr.sceneManager.camera.position.y = 4.5 * TILESIZE\n                worldMgr.sceneManager.controls.target.copy(new Vector3(worldX, terrainY, worldZ - TILESIZE / 2))\n                worldMgr.sceneManager.controls.update()\n                worldMgr.setTorchPosition(new Vector2(worldX, worldZ - TILESIZE / 2))\n            } else if (lTypeName === 'Pilot'.toLowerCase()) {\n                const raider = new Raider()\n                raider.worldMgr = worldMgr\n                raider.changeActivity()\n                raider.createPickSphere()\n                raider.group.position.set(worldX, terrainY, worldZ)\n                raider.group.rotateOnAxis(new Vector3(0, 1, 0), radHeading - Math.PI / 2)\n                raider.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(raider.group.position).discovered\n                if (raider.group.visible) {\n                    GameState.raiders.push(raider)\n                    EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, raider))\n                } else {\n                    GameState.raidersUndiscovered.push(raider)\n                }\n                worldMgr.sceneManager.scene.add(raider.group)\n            } else if (buildingType) {\n                const building = Building.getByName(buildingType)\n                const entity = new BuildingEntity(building)\n                entity.worldMgr = worldMgr\n                entity.changeActivity()\n                entity.createPickSphere()\n                entity.group.position.set(worldX, worldMgr.getFloorHeight(worldX, worldZ), worldZ)\n                entity.group.rotateOnAxis(new Vector3(0, 1, 0), -radHeading - Math.PI)\n                entity.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(entity.group.position).discovered\n                if (entity.group.visible) {\n                    GameState.buildings.push(entity)\n                    EventBus.publishEvent(new EntityAddedEvent(EntityType.BUILDING, entity))\n                } else {\n                    GameState.buildingsUndiscovered.push(entity)\n                }\n                // TODO rotate building with normal vector of surface\n                worldMgr.sceneManager.scene.add(entity.group)\n                const primaryPathSurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(entity.group.position)\n                primaryPathSurface.setBuilding(entity)\n                primaryPathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                primaryPathSurface.updateTexture()\n                entity.surfaces.push(primaryPathSurface)\n                if (building.secondaryBuildingPart) {\n                    const secondaryOffset = new Vector3(TILESIZE * building.secondaryBuildingPart.x, 0, TILESIZE * building.secondaryBuildingPart.y)\n                        .applyAxisAngle(new Vector3(0, 1, 0), -radHeading).add(entity.group.position)\n                    const secondarySurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(secondaryOffset)\n                    secondarySurface.setBuilding(entity)\n                    secondarySurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                    secondarySurface.updateTexture()\n                    entity.surfaces.push(secondarySurface)\n                }\n                if (building.hasPrimaryPowerPath) {\n                    const pathOffset = new Vector3(0, 0, -TILESIZE).applyAxisAngle(new Vector3(0, 1, 0), radHeading)\n                    pathOffset.add(entity.group.position)\n                    const pathSurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(pathOffset)\n                    if (building === Building.GEODOME) pathSurface.building = entity\n                    pathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                    pathSurface.updateTexture()\n                    entity.surfaces.push(pathSurface)\n                }\n                if (building === Building.POWER_STATION || entity.surfaces.some((s) => s.neighbors.some((n) => n.hasPower))) {\n                    entity.turnOnPower()\n                }\n            } else if (lTypeName === 'PowerCrystal'.toLowerCase()) {\n                worldMgr.addCollectable(new Crystal(), new Vector2(worldX, worldZ))\n            } else if (lTypeName === 'SmallSpider'.toLowerCase()) {\n                const spider = new SmallSpider()\n                spider.worldMgr = worldMgr\n                spider.changeActivity()\n                spider.group.position.set(worldX, terrainY, worldZ)\n                const currentSurface = spider.getCurrentSurface()\n                spider.group.visible = currentSurface.discovered\n                worldMgr.sceneManager.scene.add(spider.group)\n                GameState.spiders.push(spider)\n                GameState.spidersBySurface.getOrUpdate(currentSurface, () => []).push(spider)\n                spider.startMoving()\n            } else if (lTypeName === 'Bat'.toLowerCase()) {\n                const bat = new Bat()\n                bat.worldMgr = worldMgr\n                bat.changeActivity()\n                bat.group.position.set(worldX, bat.determinePosY(worldX, worldZ), worldZ)\n                bat.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(bat.group.position).discovered\n                worldMgr.sceneManager.scene.add(bat.group)\n                GameState.bats.push(bat)\n                bat.startRandomMove()\n            } else {\n                // TODO implement remaining object types\n                console.warn('Object type ' + olObject.type + ' not yet implemented')\n            }\n        })\n        // update path textures when all buildings are added\n        GameState.buildings.forEach((b) => b.surfaces.forEach((bSurf) => {\n            for (let x = -1; x <= 1; x++) {\n                for (let y = -1; y <= 1; y++) {\n                    worldMgr.sceneManager.terrain.getSurface(bSurf.x + x, bSurf.y + y).updateTexture()\n                }\n            }\n        }))\n    }\n\n}\n","import { PublicJob } from '../Job'\nimport { RaiderTool } from '../../../../scene/model/RaiderTool'\nimport { RaiderSkill } from '../../../../scene/model/RaiderSkill'\nimport { JobType } from '../JobType'\nimport { FulfillerEntity } from '../../../../scene/model/FulfillerEntity'\nimport { Surface } from '../../../../scene/model/map/Surface'\n\nexport abstract class SurfaceJob extends PublicJob {\n\n    surface: Surface = null\n    color: number = 0xffffff\n    colorPriority: number = 0\n    requiredTool: RaiderTool = null\n    requiredSkill: RaiderSkill = null\n\n    protected constructor(type: JobType, surface: Surface) {\n        super(type)\n        this.surface = surface\n    }\n\n    isQualified(fulfiller: FulfillerEntity) {\n        return (!this.requiredTool || fulfiller.hasTool(this.requiredTool))\n            && (!this.requiredSkill || fulfiller.hasSkill(this.requiredSkill))\n    }\n\n    isQualifiedWithTool(fulfiller: FulfillerEntity): RaiderTool {\n        return this.requiredTool\n    }\n\n    isQualifiedWithTraining(fulfiller: FulfillerEntity): RaiderSkill {\n        return this.requiredSkill\n    }\n\n}\n","import { Dynamite } from '../../../../scene/model/collect/Dynamite'\nimport { Surface } from '../../../../scene/model/map/Surface'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { SurfaceJob } from './SurfaceJob'\nimport { JobType } from '../JobType'\nimport { RaiderSkill } from '../../../../scene/model/RaiderSkill'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class DynamiteJob extends SurfaceJob {\n\n    dynamite: Dynamite\n\n    constructor(surface: Surface, dynamite: Dynamite) {\n        super(JobType.BLOW, surface)\n        this.dynamite = dynamite\n        this.color = 0xa06060\n        this.colorPriority = 2\n        this.requiredSkill = RaiderSkill.DEMOLITION\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return [new PathTarget(this.dynamite.getPosition2D())]\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.dynamite.ignite()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityDestruction\n    }\n\n}\n","/** Function documentation mostly copied from the following URLs\n *\n * https://kb.rockraidersunited.com/User:Jessietail/NERPs_reference\n * https://web.archive.org/web/20131206122442/http://rru-stuff.org/nerpfuncs.html\n * https://kb.rockraidersunited.com/NERPs_documentation#Labels\n *\n */\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { clearIntervalSafe } from './Util'\n\nexport class NerpRunner {\n\n    debug = false\n    onLevelComplete: () => any = null\n    nerpInterval: NodeJS.Timeout = null\n\n    registers = new Array(8).fill(0)\n    timers = new Array(4).fill(0)\n    scriptLines = [] // contains humand readable script strings\n    statements = [] // contains parsed statements for execution\n    macrosByName = {}\n    labelsByName = {}\n    halted = false\n    programCounter = 0\n    messages = []\n    // more state variables and switches\n    messagePermit = null\n\n    constructor(debug = false) {\n        this.debug = debug\n    }\n\n    startExecution() {\n        const that = this\n        this.nerpInterval = setInterval(() => {\n            that.execute()\n        }, 2000)\n    }\n\n    pauseExecution() {\n        this.nerpInterval = clearIntervalSafe(this.nerpInterval)\n    }\n\n    /**\n     * Internally used to validate and parse a register number.\n     * @param register\n     * @return {number}\n     */\n    checkRegister(register) {\n        const num = parseInt(register)\n        if (isNaN(num) || num < 0 || num > this.registers.length) throw new Error('Invalid register (' + register + ') provided')\n        return num\n    }\n\n    /**\n     * Internally used to validate and parse a value before setting or adding it with a register.\n     * @param value\n     * @return {number}\n     */\n    checkRegisterValue(value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Invalid register value (' + value + ') provided')\n        return num\n    }\n\n    /**\n     * Gets the value currently stored in the given register, internally used to handle all registers with one method.\n     * @param register the register to read\n     * @return {number} returns the value currently stored in the register\n     */\n    getR(register) {\n        register = this.checkRegister(register)\n        return this.registers[register]\n    }\n\n    /**\n     * Sets the given value for the given register, internally used to handle all registers with one method.\n     * @param register the register to set\n     * @param value the value to set for the given register\n     */\n    setR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] = value\n    }\n\n    /**\n     * Adds the given value to the given register, internally used to handle all registers with one method.\n     * @param register the register to add to\n     * @param value the value to add to the given register\n     */\n    addR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] += value\n    }\n\n    /**\n     * Set the respective timer to the given numerical value. Units are in milliseconds.\n     * @param timer\n     * @param value\n     */\n    setTimer(timer, value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Can\\'t set timer to NaN value: ' + value)\n        this.timers[timer] = new Date().getTime() + num\n    }\n\n    /**\n     * Gets the value of the respective timer. Units are in milliseconds.\n     * @param timer\n     * @return {number}\n     */\n    getTimer(timer) {\n        return new Date().getTime() - this.timers[timer]\n    }\n\n    /**\n     * End the level successfully and show the score screen.\n     */\n    setLevelCompleted() {\n        this.halted = true\n        GameState.resultState = GameResultState.COMPLETE\n        this.onLevelComplete()\n    }\n\n    /**\n     * End the level as failure and show the score screen.\n     */\n    setLevelFail() {\n        this.halted = true\n        GameState.resultState = GameResultState.FAILED\n        this.onLevelComplete()\n    }\n\n    /**\n     * Sets tutorial flags\n     * @param value a bitmask to set flags with\n     */\n    setTutorialFlags(value) {\n        // TODO implement tutorial flags\n        // seems like value must be interpreted bitwise and sets a certain flag on each bit\n        // seen so far:\n        // 0 = 0x00 allow any click anywhere anytime\n        // 3 = 0x11 disallow invalid clicks\n        // 4095 = 0x111111111111 set all flags? (seen in Tutorial01 level)\n    }\n\n    /**\n     * This is used to make messages come up/not come up.\n     * @param messagesAllowed\n     */\n    setMessagePermit(messagesAllowed) {\n        this.messagePermit = !messagesAllowed\n    }\n\n    setBuildingsUpgradeLevel(typeName, level) {\n        GameState.buildings.forEach(b => {\n            if (b.type === typeName) b.level = level\n        })\n    }\n\n    setToolStoreLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.TOOLSTATION, level)\n    }\n\n    setTeleportPadLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.TELEPORT_PAD, level)\n    }\n\n    setPowerStationLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.POWER_STATION, level)\n    }\n\n    setBarracksLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.BARRACKS, level)\n    }\n\n    /**\n     * Gets the number of tool stores currently built. NOT the total ever built.\n     * @return {number}\n     */\n    getToolStoresBuilt() {\n        return GameState.getBuildingsByType(Building.TOOLSTATION).length\n    }\n\n    /**\n     * Gets the number of minifigures on the level. TODO it is NOT tested if this ignores minifigures in hidden caverns\n     * @return {number}\n     */\n    getMinifiguresOnLevel() {\n        return GameState.raiders.length\n    }\n\n    /**\n     * Gets the number of crystals currently stored.\n     * @return {number}\n     */\n    getCrystalsCurrentlyStored() {\n        return GameState.numCrystal\n    }\n\n    getObjectiveSwitch() {\n        // TODO implement this\n        return 0\n    }\n\n    setMessageTimerValues(arg1, arg2, arg3) {\n        // TODO implement this\n    }\n\n    getMessageTimer() {\n        return 0 // TODO return remaining amount of time needed to fully play WAV message\n    }\n\n    cameraUnlock() {\n        // TODO implement this\n    }\n\n    setMessage(messageNumber, arrowDisabled) {\n        if (!this.messagePermit) {\n            return\n        }\n        const msg = this.messages[messageNumber]\n        // TODO show message to user\n        console.log(msg.txt)\n        // msg.snd resides in sounds/streamed/ which is currently not loaded :(\n    }\n\n    setCameraGotoTutorial(arg1) {\n        // TODO implement this\n    }\n\n    getTutorialBlockIsGround(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getTutorialBlockIsPath(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getUnitAtBlock(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getOxygenLevel() {\n        // TODO implement this\n        return 100\n    }\n\n    getObjectiveShowing() {\n        // TODO implement this\n        return false\n    }\n\n    addPoweredCrystals() {\n        // TODO implement this\n    }\n\n    disallowAll() {\n        // TODO implement this\n    }\n\n    getPoweredPowerStationsBuilt() {\n        return GameState.getBuildingsByType(Building.POWER_STATION).length\n    }\n\n    getPoweredBarracksBuilt() {\n        return GameState.getBuildingsByType(Building.BARRACKS).length\n    }\n\n    getRecordObjectAtTutorial() {\n        // TODO implement this\n    }\n\n    getHiddenObjectsFound() {\n        // TODO implement this\n        return 0\n    }\n\n    callMethod(methodName, methodArgs) {\n        if (methodName === 'Stop') {\n            throw 'Stop'\n        } else if (methodName === 'TRUE') {\n            return true\n        } else if (methodName === 'FALSE') {\n            return false\n        }\n        const setRegisterMatch = methodName.match(/^SetR([0-7])$/)\n        if (setRegisterMatch) {\n            return this.setR(setRegisterMatch[1], methodArgs[0])\n        }\n        const addRegisterMatch = methodName.match(/^AddR([0-7])$/)\n        if (addRegisterMatch) {\n            return this.addR(addRegisterMatch[1], methodArgs[0])\n        }\n        const getRegisterMatch = methodName.match(/^GetR([0-7])$/)\n        if (getRegisterMatch) {\n            return this.getR(getRegisterMatch[1])\n        }\n        const setTimerMatch = methodName.match(/^SetTimer([0-3])$/)\n        if (setTimerMatch) {\n            return this.setTimer(setTimerMatch[1], methodArgs[0])\n        }\n        const getTimerMatch = methodName.match(/^GetTimer([0-3])$/)\n        if (getTimerMatch) {\n            return this.getTimer(getTimerMatch[1])\n        }\n        const lMethodName = methodName.toLowerCase()\n        for (const memberName in this) {\n            // noinspection JSUnfilteredForInLoop\n            if (memberName.toLowerCase() === lMethodName) {\n                // @ts-ignore\n                // noinspection JSUnfilteredForInLoop\n                return this[memberName].apply(this, methodArgs)\n            }\n        }\n        throw new Error('Undefined method: ' + methodName)\n    }\n\n    conditional(left, right) {\n        const conditionResult = this.executeStatement(left)\n        if (this.debug) {\n            console.log('Condition evaluated to ' + conditionResult)\n        }\n        if (conditionResult) {\n            this.executeStatement(right)\n        }\n    }\n\n    executeStatement(expression) {\n        if (expression.invoke) {\n            const argValues = expression.invoke !== 'conditional' ? expression.args.map(e => this.executeStatement(e)) : expression.args\n            const result = this.callMethod(expression.invoke, argValues)\n            if (result !== undefined && this.debug) {\n                console.log('Method returned: ' + result)\n            }\n            return result\n        } else if (expression.comparator) {\n            const left = this.executeStatement(expression.left)\n            const right = this.executeStatement(expression.right)\n            if (expression.comparator === '=') {\n                return left === right\n            } else if (expression.comparator === '!=') {\n                return left !== right\n            } else if (expression.comparator === '<') {\n                return left < right\n            } else if (expression.comparator === '>') {\n                return left > right\n            } else {\n                console.log(expression)\n                throw new Error('Unknown comparator: ' + expression.comparator)\n            }\n        } else if (!isNaN(expression)) { // just a number\n            return expression\n        } else if (expression.jump) {\n            this.programCounter = this.labelsByName[expression.jump]\n            if (this.programCounter === undefined) {\n                throw new Error('Label \\'' + expression.jump + '\\' is unknown!')\n            }\n            if (this.debug) {\n                console.log('Jumping to label \\'' + expression.jump + '\\' in line ' + this.programCounter)\n            }\n        } else {\n            console.log(expression)\n            throw new Error('Unknown expression in line ' + this.programCounter + ': ' + expression)\n        }\n    }\n\n    execute(debug = false) {\n        this.debug = debug\n        if (this.halted) return\n        try {\n            if (this.debug) {\n                console.log('Executing following script\\n' + this.scriptLines.join('\\n'))\n                console.log('Registers: ' + this.registers)\n            }\n            for (this.programCounter = 0; this.programCounter < this.statements.length; this.programCounter++) {\n                const statement = this.statements[this.programCounter]\n                if (this.debug) {\n                    console.log(this.programCounter + ': ' + this.scriptLines[this.programCounter])\n                    console.log(statement)\n                }\n                if (!statement.label) { // do nothing for label markers\n                    this.executeStatement(statement)\n                }\n            }\n        } catch (e) {\n            if (e === 'Stop') {\n                return\n            }\n            console.error(e)\n            console.error('FATAL ERROR! Script execution failed! You can NOT win anymore!')\n            this.halted = true\n            debugger;\n        }\n    }\n\n}\n","import { NerpRunner } from './NerpRunner'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class NerpParser {\n\n    static parse(nerpScript: string): NerpRunner {\n        const nerpRunner = new NerpRunner()\n        const lines = nerpScript.split('\\n').map(l => l\n            .split('//')[0].trim() // before comment starts\n            .split(';')[0].trim() // before preprocessor comment starts\n            .replace(/_/g, '') // some preprocessor macros use this prefix\n            .replace(/\\bTRUE \\? /, '') // some weird requirement of the original language\n            .replace(/[{}]/g, ''), // duplicate limit for macros using labels too\n        )\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c]\n            if (line.length < 1) {\n                continue // ignore empty lines, but important for macro closure\n            }\n            if (line.startsWith('#include ')) { // include other nerp scripts/headers\n                const includeName = line.replace(/^#include /, '').trim().slice(1, -1)\n                if (includeName === 'nerpdef.h') {\n                    // trivial default header file, is applied by search and replace above\n                    // see https://github.com/jgrip/legorr/blob/master/nerpdef.h\n                    continue\n                }\n                const includedRunner = NerpParser.parse(ResourceManager.getResource('Levels/' + includeName))\n                if (!includedRunner || !includedRunner.scriptLines || includedRunner.scriptLines.length < 1) {\n                    throw 'Can\\'t include unknown nerp script: ' + line\n                }\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(includedRunner.scriptLines)\n                // copy macros from included file to current file\n                nerpRunner.macrosByName = Object.assign({}, nerpRunner.macrosByName, includedRunner.macrosByName)\n            } else if (line.startsWith('#define ')) { // parse C++ preprocessor macro\n                const firstLine = line.replace(/^#define /, '').split(' ')\n                const macroLines = [firstLine.splice(1).join(' ').replace(/\\\\$/, '').trim()]\n                let mLine = line\n                let append = false\n                while (mLine.endsWith('\\\\') && c < lines.length - 1) {\n                    c++\n                    mLine = lines[c].trim()\n                    const macroLine = mLine.replace(/\\\\$/, '').trim()\n                    if (macroLine.length > 0) {\n                        if (append) {\n                            append = false\n                            macroLines[macroLines.length - 1] += macroLine\n                        } else {\n                            macroLines.push(macroLine)\n                        }\n                    }\n                    if (mLine.match(/:\\\\$/)) {\n                        append = true\n                    }\n                }\n                const macroCall = firstLine[0].split('(')\n                nerpRunner.macrosByName[macroCall[0]] = {\n                    args: macroCall[1].replace(/\\)$/, '').split(','),\n                    lines: macroLines,\n                }\n            } else {\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(this.replaceMacros(nerpRunner.macrosByName, line))\n            }\n        }\n        // somewhat precompile the script and create syntax tree\n        // must be done in separate block to make sure the script is complete and we can refer/rely on line numbers for label jumps\n        for (let c = 0; c < nerpRunner.scriptLines.length; c++) {\n            const line = nerpRunner.scriptLines[c]\n            nerpRunner.statements[c] = line.replace(/\\(\\)/g, '') // now the macros are applied and obsolete empty \"()\" can be removed\n                .split(' ? ')\n            const labelMatch = line.match(/(\\S+):/)\n            if (nerpRunner.statements[c].length === 2) { // line contains condition (primary operator)\n                nerpRunner.statements[c] = {\n                    invoke: 'conditional',\n                    args: [this.preProcess(nerpRunner.statements[c][0]), this.preProcess(nerpRunner.statements[c][1])],\n                }\n            } else if (labelMatch) { // keep label line number for later usage\n                const labelName = labelMatch[1].toLowerCase()\n                nerpRunner.labelsByName[labelName] = c\n                nerpRunner.statements[c] = {label: labelName}\n            } else if (nerpRunner.statements[c].length === 1) { // just a call\n                nerpRunner.statements[c] = this.preProcess(nerpRunner.statements[c][0])\n            } else { // lines contains more than 1 condition statement\n                throw 'Can\\'t deal with line: ' + line\n            }\n        }\n        return nerpRunner\n    }\n\n    static replaceMacros(macrosByName, line): string[] {\n        // check if this line contains a macro\n        const split = line.split('(') // not a very stable check though...\n        const macro = macrosByName[split[0]]\n        if (macro) {\n            const argValues = split.splice(1).join('(').slice(0, -1).split(',')\n            if (argValues.length !== macro.args.length) {\n                throw 'Invalid number of args provided for macro in line ' + line\n            }\n            const macroLines = []\n            macro.lines.forEach((line) => {\n                for (let c = 0; c < argValues.length; c++) {\n                    line = line.replace(new RegExp('\\\\b' + macro.args[c] + '\\\\b'), argValues[c])\n                }\n                macroLines.push(...(this.replaceMacros(macrosByName, line)))\n            })\n            return macroLines\n        } else {\n            return [line]\n        }\n    }\n\n    static preProcess(expression) {\n        expression = expression.trim().replace(/^_/, '') // remove whitespace and leading underscore\n        const number = parseInt(expression)\n        if (!isNaN(number)) {\n            return number\n        }\n        const opSplit = expression.split(/ (=) | (!=) | (>) | (<) /).filter(e => e !== undefined)\n        const brackets = expression.match(/^(.+)\\((.+)\\)$/)\n        const spaceSplit = expression.split(' ')\n        const labelMatch = expression.match(/([^:]+):$/)\n        const jumpMatch = expression.match(/^:([^:]+)$/)\n        if (opSplit.length === 3) { // expression contains secondary operator\n            return {left: this.preProcess(opSplit[0]), comparator: opSplit[1], right: this.preProcess(opSplit[2])}\n        } else if (brackets) {\n            const args = brackets[2].split(',').map(a => this.preProcess(a))\n            return {invoke: brackets[1], args: args}\n        } else if (spaceSplit.length > 1) { // space split must be the very last since most expressions contain space\n            const args = spaceSplit.length === 2 ? [this.preProcess(spaceSplit[1])] : spaceSplit.splice(1).map(a => this.preProcess(a))\n            return {invoke: spaceSplit[0], args: args}\n        } else if (labelMatch) { // label definition\n            return {label: labelMatch[1]}\n        } else if (jumpMatch) { // jump to label\n            return {jump: jumpMatch[1].toLowerCase()}\n        } else { // function call without args\n            if (expression.match(/[ =?><!]/)) {\n                throw 'Invalid expression given, parsing must have failed before somewhere'\n            }\n            return {invoke: expression, args: []}\n        }\n    }\n\n}\n","import { LevelPrioritiesEntryConfig } from '../../../cfg/LevelsCfg'\nimport { PublicJob } from './Job'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport class PriorityList {\n\n    levelDefault: PriorityEntry[] = []\n    current: PriorityEntry[] = []\n\n    constructor(priorities: LevelPrioritiesEntryConfig[]) {\n        this.levelDefault = priorities\n        this.reset()\n    }\n\n    toggle(index: number) {\n        this.current[index].enabled = !this.current[index].enabled\n    }\n\n    upOne(index: number) {\n        const tmp = this.current[index]\n        this.current[index] = this.current[index + 1]\n        this.current[index + 1] = tmp\n    }\n\n    reset() {\n        this.current = this.levelDefault.map(entry => new PriorityEntry(entry)) // use deep copy to avoid interference\n    }\n\n    pushToTop(index: number) {\n        const element = this.current[index]\n        for (let c = index; c > 0; c--) {\n            this.current[c] = this.current[c - 1]\n        }\n        this.current[0] = element\n    }\n\n    getPriority(job: PublicJob) {\n        let priority = 0\n        this.current.some((j, index) => {\n            if (j.key === job.getPriorityIdentifier()) {\n                priority = index\n                return true\n            }\n        })\n        return priority\n    }\n\n}\n\nexport class PriorityEntry {\n\n    key: PriorityIdentifier\n    enabled: boolean\n\n    constructor(levelPriorityEntry: LevelPrioritiesEntryConfig) {\n        this.key = levelPriorityEntry.key\n        this.enabled = levelPriorityEntry.enabled\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\nimport { PathTarget } from '../../../scene/model/PathTarget'\n\nexport class MoveJob extends Job {\n\n    target: PathTarget[]\n\n    constructor(target: Vector2) {\n        super(JobType.MOVE)\n        this.target = [new PathTarget(target)]\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.target\n    }\n\n}\n","import { SceneManager } from './SceneManager'\nimport { TerrainLoader } from './TerrainLoader'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { Color, MathUtils, Raycaster, Vector2, Vector3 } from 'three'\nimport { clearIntervalSafe, getRandom } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EntityAddedEvent, EntityType, JobCreateEvent, RaiderRequested, SpawnDynamiteEvent } from '../event/WorldEvents'\nimport { Raider } from './model/Raider'\nimport { GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { CollectableEntity } from './model/collect/CollectableEntity'\nimport { CHECK_SPANW_RAIDER_TIMER, TILESIZE, UPDATE_OXYGEN_TIMER } from '../main'\nimport { ObjectListLoader } from './ObjectListLoader'\nimport { Dynamite } from './model/collect/Dynamite'\nimport { DynamiteJob } from '../game/model/job/surface/DynamiteJob'\nimport { NerpParser } from '../core/NerpParser'\nimport { NerpRunner } from '../core/NerpRunner'\nimport { GameScreen } from '../screen/GameScreen'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { PriorityList } from '../game/model/job/PriorityList'\nimport { MoveJob } from '../game/model/job/MoveJob'\nimport { RaiderActivity } from './model/activities/RaiderActivity'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { CollectJob } from '../game/model/job/CollectJob'\nimport { AirLevelChanged } from '../event/LocalEvents'\nimport degToRad = MathUtils.degToRad\n\nexport class WorldManager {\n\n    sceneManager: SceneManager = null\n    spawnRaiderInterval = null\n    nerpRunner: NerpRunner = null\n    oxygenUpdateInterval = null\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.sceneManager = new SceneManager(canvas)\n        EventBus.registerEventListener(EventKey.DESELECTED_ENTITY, () => GameState.selectEntities([]))\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => {\n            if (GameState.requestedRaiders > 0 && !this.spawnRaiderInterval) {\n                this.spawnRaiderInterval = setInterval(this.checkSpawnRaiders.bind(this), CHECK_SPANW_RAIDER_TIMER)\n            }\n        })\n        EventBus.registerEventListener(EventKey.SPAWN_DYNAMITE, (event: SpawnDynamiteEvent) => {\n            const targetBuilding = GameState.getClosestBuildingByType(event.surface.getCenterWorld(), Building.TOOLSTATION)\n            if (!targetBuilding) throw 'Could not find toolstation to spawn dynamite'\n            const pos = targetBuilding.getDropPosition()\n            const dynamite = new Dynamite()\n            dynamite.targetSurface = event.surface\n            dynamite.worldMgr = this\n            dynamite.group.position.copy(pos)\n            this.sceneManager.scene.add(dynamite.group)\n            EventBus.publishEvent(new JobCreateEvent(new DynamiteJob(event.surface, dynamite)))\n        })\n        EventBus.registerEventListener(EventKey.CAVERN_DISCOVERED, () => {\n            GameState.discoveredCaverns++\n        })\n        this.oxygenUpdateInterval = setInterval(this.updateOxygen.bind(this), UPDATE_OXYGEN_TIMER)\n    }\n\n    setup(levelConf: LevelEntryCfg, gameScreen: GameScreen) {\n        GameState.levelFullName = levelConf.fullName\n        GameState.totalCaverns = levelConf.reward?.quota?.caverns || 0\n        GameState.rewardConfig = levelConf.reward\n        GameState.priorityList = new PriorityList(levelConf.priorities)\n        GameState.oxygenRate = levelConf.oxygenRate\n\n        const ambientRgb = ResourceManager.cfg('Main', 'AmbientRGB') || [10, 10, 10]\n        const maxAmbRgb = Math.min(255, Math.max(0, ...ambientRgb))\n        const normalizedRgb = ambientRgb.map(v => v / (maxAmbRgb ? maxAmbRgb : 1))\n        const ambientColor = new Color(normalizedRgb[0], normalizedRgb[1], normalizedRgb[2])\n        this.sceneManager.setupScene(ambientColor)\n\n        // create terrain mesh and add it to the scene\n        this.sceneManager.terrain = TerrainLoader.loadTerrain(levelConf, this)\n        this.sceneManager.scene.add(this.sceneManager.terrain.floorGroup)\n\n        // load in non-space objects next\n        const objectListConf = ResourceManager.getResource(levelConf.oListFile)\n        ObjectListLoader.loadObjectList(this, objectListConf)\n\n        // load nerp script\n        this.nerpRunner = NerpParser.parse(ResourceManager.getResource(levelConf.nerpFile))\n        this.nerpRunner.messages.push(...(ResourceManager.getResource(levelConf.nerpMessageFile)))\n        this.nerpRunner.onLevelComplete = () => gameScreen.onLevelEnd()\n\n        // gather level start details for game result score calculation\n        GameState.totalDiggables = this.sceneManager.terrain.surfaces.filter((r) => r.forEach((s) => s.isDigable())).length\n        GameState.totalCrystals = 0\n        this.sceneManager.terrain.surfaces.forEach((r) => r.forEach((s) => GameState.totalCrystals += s.containedCrystals))\n        GameState.totalOres = 0\n        this.sceneManager.terrain.surfaces.forEach((r) => r.forEach((s) => GameState.totalOres += s.containedOres))\n    }\n\n    start() {\n        this.sceneManager.startScene()\n        this.nerpRunner?.startExecution()\n        GameState.levelStartTime = Date.now()\n    }\n\n    stop() {\n        GameState.levelStopTime = Date.now()\n        this.nerpRunner?.pauseExecution()\n        this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n        GameState.spiders.forEach((m) => m.onLevelEnd())\n        GameState.bats.forEach((b) => b.onLevelEnd())\n        GameState.remainingDiggables = 0\n        this.sceneManager?.terrain?.surfaces?.forEach((r) => r.forEach((s) => GameState.remainingDiggables += s.isDigable() ? 1 : 0))\n        this.sceneManager.disposeScene()\n    }\n\n    resize(width: number, height: number) {\n        if (this.sceneManager) this.sceneManager.renderer.setSize(width, height)\n    }\n\n    getTerrainIntersectionPoint(rx: number, ry: number): Vector3 {\n        if (!this.sceneManager.terrain) return null\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.sceneManager.camera)\n        const intersects = raycaster.intersectObjects(this.sceneManager.terrain.floorGroup.children)\n        return intersects.length > 0 ? intersects[0].point : null\n    }\n\n    setTorchPosition(position: Vector2) {\n        this.sceneManager.cursorTorchlight.position.x = position.x\n        this.sceneManager.cursorTorchlight.position.y = this.getFloorHeight(position.x, position.y) + 2 * TILESIZE\n        this.sceneManager.cursorTorchlight.position.z = position.y\n    }\n\n    getFloorHeight(worldX: number, worldZ: number): number {\n        const surface = this.sceneManager.terrain.getSurfaceFromWorldXZ(worldX, worldZ)\n        if (!surface) return 0\n        return surface.getFloorHeight(worldX, worldZ)\n    }\n\n    getTerrainHeight(worldX: number, worldZ: number): number {\n        const raycaster = new Raycaster(new Vector3(Number(worldX), 3 * TILESIZE, Number(worldZ)), new Vector3(0, -1, 0))\n        const intersect = raycaster.intersectObject(this.sceneManager.terrain.floorGroup, true)\n        if (intersect.length > 0) {\n            return intersect[0].point.y\n        } else {\n            console.warn('could not determine terrain height for ' + worldX + '/' + worldZ)\n            return 0\n        }\n    }\n\n    addCollectable(collectable: CollectableEntity, world: Vector2) {\n        collectable.worldMgr = this\n        collectable.group.position.set(world.x, this.getFloorHeight(world.x, world.y), world.y)\n        collectable.group.visible = this.sceneManager.terrain.getSurfaceFromWorld(collectable.group.position).discovered\n        this.sceneManager.scene.add(collectable.group)\n        if (collectable.group.visible) {\n            GameState.collectables.push(collectable)\n            EventBus.publishEvent(new JobCreateEvent(new CollectJob(collectable)))\n        } else {\n            GameState.collectablesUndiscovered.push(collectable)\n        }\n        return collectable\n    }\n\n    checkSpawnRaiders() {\n        if (GameState.requestedRaiders < 1) {\n            this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n            return\n        }\n        if (GameState.raiders.length >= GameState.getMaxRaiders()) return\n        const spawnBuildings = GameState.getBuildingsByType(Building.TOOLSTATION, Building.TELEPORT_PAD).filter((b) => !b.spawning)\n        for (let c = 0; c < spawnBuildings.length && GameState.requestedRaiders > 0; c++) {\n            GameState.requestedRaiders--\n            EventBus.publishEvent(new RaiderRequested())\n            const station = spawnBuildings[c]\n            station.spawning = true\n            const raider = new Raider()\n            raider.worldMgr = this\n            raider.changeActivity(RaiderActivity.TeleportIn, () => {\n                station.spawning = false\n                raider.changeActivity()\n                raider.createPickSphere()\n                const walkOutPos = station.getPosition2D().add(new Vector2(0, TILESIZE * 3 / 4 + getRandom(TILESIZE / 2))\n                    .rotateAround(new Vector2(0, 0), station.getHeading() + degToRad(-10 + getRandom(20))))\n                raider.setJob(new MoveJob(walkOutPos))\n                GameState.raiders.push(raider)\n                EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, raider))\n            })\n            raider.group.position.copy(station.group.position).add(new Vector3(0, 0, TILESIZE / 2).applyEuler(station.group.rotation))\n            raider.group.rotation.copy(station.group.rotation)\n            this.sceneManager.scene.add(raider.group)\n        }\n    }\n\n    updateOxygen() {\n        const sum = GameState.raiders.map((r) => r.stats.OxygenCoef).reduce((l, r) => l + r, 0) +\n            GameState.buildings.map((b) => b.stats.OxygenCoef).reduce((l, r) => l + r, 0)\n        const rateMultiplier = 0.001\n        const valuePerSecond = 1 / 25\n        const msToSeconds = 0.001\n        const diff = sum * GameState.oxygenRate * rateMultiplier * valuePerSecond * UPDATE_OXYGEN_TIMER * msToSeconds / 10\n        if (diff) {\n            GameState.airlevel = Math.min(1, Math.max(0, GameState.airlevel + diff))\n            EventBus.publishEvent(new AirLevelChanged())\n        }\n    }\n\n}\n","import { ScreenLayer } from '../../screen/ScreenLayer'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { WorldManager } from '../../scene/WorldManager'\n\nexport class SelectionLayer extends ScreenLayer {\n\n    worldManager: WorldManager\n    selectStart: { x: number, y: number } = null\n\n    constructor() {\n        super(true)\n    }\n\n    reset() {\n        super.reset()\n        this.selectStart = null\n    }\n\n    setWorldManager(worldManager: WorldManager) {\n        this.worldManager = worldManager\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        if (eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.startSelection(cx, cy)\n        } else if (eventEnum === POINTER_EVENT.MOVE) {\n            return this.changeSelection(cx, cy)\n        } else if (eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.selectEntities(cx, cy)\n        }\n        return false\n    }\n\n    startSelection(screenX: number, screenY: number) {\n        this.selectStart = {x: screenX, y: screenY}\n        return true\n    }\n\n    changeSelection(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        this.context.strokeStyle = 'rgba(128, 192, 192, 0.5)'\n        this.context.lineWidth = 2\n        this.context.strokeRect(this.selectStart.x, this.selectStart.y, screenX - this.selectStart.x, screenY - this.selectStart.y)\n        return true\n    }\n\n    selectEntities(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        const r1x = (this.selectStart.x / this.canvas.width) * 2 - 1\n        const r1y = -(this.selectStart.y / this.canvas.height) * 2 + 1\n        const r2x = (screenX / this.canvas.width) * 2 - 1\n        const r2y = -(screenY / this.canvas.height) * 2 + 1\n        if (Math.abs(screenX - this.selectStart.x) < 5 && Math.abs(screenY - this.selectStart.y) < 5) {\n            const x = (this.selectStart.x + screenX) / this.canvas.width - 1\n            const y = -(this.selectStart.y + screenY) / this.canvas.height + 1\n            this.worldManager.sceneManager.selectEntitiesByRay(x, y)\n        } else {\n            this.worldManager.sceneManager.selectEntitiesInFrustum(r1x, r1y, r2x, r2y)\n        }\n        this.selectStart = null\n        return true\n    }\n\n}\n","import { SurfaceJob } from './SurfaceJob'\nimport { JobType } from '../JobType'\nimport { Surface } from '../../../../scene/model/map/Surface'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { RaiderTool } from '../../../../scene/model/RaiderTool'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class DrillJob extends SurfaceJob {\n\n    constructor(surface: Surface) {\n        super(JobType.DRILL, surface)\n        this.color = 0xa0a0a0\n        this.requiredTool = RaiderTool.DRILL\n        this.surface = surface\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.surface.getDigPositions().map((p) => new PathTarget(p))\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.collapse()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityDestruction\n    }\n\n}\n","import { SurfaceJob } from './SurfaceJob'\nimport { JobType } from '../JobType'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { RaiderTool } from '../../../../scene/model/RaiderTool'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { Surface } from '../../../../scene/model/map/Surface'\n\nexport class ClearRubbleJob extends SurfaceJob {\n\n    constructor(surface: Surface) {\n        super(JobType.CLEAR_RUBBLE, surface)\n        this.requiredTool = RaiderTool.SHOVEL\n        this.surface = surface\n    }\n\n    getWorkplaces(): PathTarget[] {\n        const rubblePositions = this.surface.rubblePositions\n        return rubblePositions.length > 0 ? [new PathTarget(rubblePositions[0])] : [] // use first (no need to optimize)\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.reduceRubble()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityClearing\n    }\n\n}\n","import { ScreenLayer } from '../../screen/ScreenLayer'\nimport { WorldManager } from '../../scene/WorldManager'\nimport { SelectionType } from '../model/Selectable'\nimport { GameState } from '../model/GameState'\nimport { Raider } from '../../scene/model/Raider'\nimport { EventBus } from '../../event/EventBus'\nimport { JobCreateEvent } from '../../event/WorldEvents'\nimport { Surface } from '../../scene/model/map/Surface'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { FulfillerEntity } from '../../scene/model/FulfillerEntity'\nimport { SurfaceJob } from '../model/job/surface/SurfaceJob'\nimport { KEY_EVENT, MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { DEV_MODE } from '../../main'\nimport { MoveJob } from '../model/job/MoveJob'\nimport { Vector2 } from 'three'\nimport { DrillJob } from '../model/job/surface/DrillJob'\nimport { ClearRubbleJob } from '../model/job/surface/ClearRubbleJob'\n\nexport class GameLayer extends ScreenLayer {\n\n    private worldMgr: WorldManager\n    private rightDown: { x: number, y: number } = {x: 0, y: 0}\n\n    constructor() {\n        super(false, false)\n    }\n\n    reset() {\n        super.reset()\n        this.rightDown = {x: 0, y: 0}\n    }\n\n    setWorldManager(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (eventEnum === POINTER_EVENT.MOVE) {\n            const intersectionPoint = this.getTerrainPositionFromEvent(event)\n            if (intersectionPoint) this.worldMgr.setTorchPosition(intersectionPoint)\n        } else if (eventEnum === POINTER_EVENT.UP && event.button === MOUSE_BUTTON.SECONDARY) {\n            const downUpDistance = Math.abs(event.x - this.rightDown.x) + Math.abs(event.y - this.rightDown.y)\n            if (downUpDistance < 3 && (GameState.selectionType === SelectionType.PILOT || GameState.selectionType === SelectionType.GROUP)) {\n                // TODO check for collectable entity first\n                const intersectionPoint = this.getTerrainPositionFromEvent(event)\n                if (intersectionPoint) {\n                    const surface = this.worldMgr.sceneManager.terrain.getSurfaceFromWorldXZ(intersectionPoint.x, intersectionPoint.y)\n                    if (surface) {\n                        if (surface.isDrillable()) {\n                            this.createSurfaceJob(new DrillJob(surface), surface, intersectionPoint)\n                        } else if (surface.hasRubble()) {\n                            this.createSurfaceJob(new ClearRubbleJob(surface), surface, intersectionPoint)\n                        } else if (surface.isWalkable()) {\n                            GameState.selectedEntities.forEach((raider: Raider) => raider.setJob(new MoveJob(intersectionPoint)))\n                            if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n                        }\n                    }\n                }\n            }\n        } else if (eventEnum === POINTER_EVENT.DOWN && event.button === MOUSE_BUTTON.SECONDARY) {\n            this.rightDown.x = event.x\n            this.rightDown.y = event.y\n        }\n        this.canvas.dispatchEvent(event)\n        return true\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        if (DEV_MODE && eventEnum === KEY_EVENT.UP) {\n            if (GameState.selectionType === SelectionType.SURFACE) {\n                GameState.selectedEntities.forEach((s: Surface) => {\n                    if (event.key === 'c') {\n                        if (!s.surfaceType.floor) s.collapse()\n                    } else if (event.key === 'f') {\n                        const t = s.terrain.findFallInTarget(s.x, s.y)\n                        if (!s.surfaceType.floor) s.createFallin(t[0], t[1])\n                    }\n                })\n                EventBus.publishEvent(new EntityDeselected())\n                return true\n            }\n        }\n        return false\n    }\n\n    createSurfaceJob(surfJob: SurfaceJob, surface: Surface, intersectionPoint: Vector2) {\n        GameState.selectedEntities.forEach((e: FulfillerEntity) => {\n            if (surfJob.isQualified(e)) {\n                e.setJob(surfJob)\n            } else if (surface.isWalkable()) {\n                e.setJob(new MoveJob(intersectionPoint))\n            }\n        })\n        EventBus.publishEvent(new JobCreateEvent(surfJob))\n        surface.updateJobColor()\n        if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n    }\n\n    getTerrainPositionFromEvent(event): Vector2 {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        const intersectionPoint = this.worldMgr.getTerrainIntersectionPoint(rx, ry)\n        return intersectionPoint ? new Vector2(intersectionPoint.x, intersectionPoint.z) : null\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        this.canvas.dispatchEvent(event)\n        return true\n    }\n\n}\n","export class BaseElement {\n\n    parent: BaseElement = null\n    x: number = 0\n    y: number = 0\n    relX: number = 0\n    relY: number = 0\n    width: number = 0\n    height: number = 0\n    children: BaseElement[] = []\n    hidden: boolean = false\n    disabled: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n\n    constructor(parent: BaseElement = null) {\n        this.parent = parent\n    }\n\n    reset() {\n        this.hidden = false\n        this.disabled = false\n        this.hover = false\n        this.pressed = false\n        this.children.forEach((c) => c.reset())\n    }\n\n    addChild<T extends BaseElement>(child: T): T {\n        child.parent = this\n        this.children.push(child)\n        child.updatePosition()\n        return child\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n    }\n\n    drawTooltip(context: CanvasRenderingContext2D) {\n    }\n\n    onClick() {\n    }\n\n    isInactive(): boolean {\n        for (let parent = this.parent; !!parent; parent = parent.parent) if (parent.isInactive()) return true\n        return this.hidden || this.disabled\n    }\n\n    hide() {\n        this.hidden = true\n        this.children.forEach((child) => child.hide())\n    }\n\n    show() {\n        this.hidden = false\n        this.children.forEach((child) => child.show())\n    }\n\n    updatePosition() {\n        this.x = this.parent ? this.parent.x + this.relX : this.relX\n        this.y = this.parent ? this.parent.y + this.relY : this.relY\n        this.children.forEach((child) => child.updatePosition())\n    }\n\n    isInRect(cx, cy) {\n        return cx >= this.x && cy >= this.y && cx < this.x + this.width && cy < this.y + this.height\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = this.pressed && this.hover\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => stateChanged = child.checkHover(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.pressed !== inRect\n        this.pressed = inRect\n        this.children.forEach((child) => stateChanged = child.checkClick(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        if (inRect && this.pressed) this.onClick()\n        let stateChanged = false\n        this.children.forEach((child) => stateChanged = child.checkRelease(cx, cy) || stateChanged)\n        stateChanged = this.pressed || stateChanged\n        this.pressed = false\n        return stateChanged\n    }\n\n    release(): boolean {\n        let stateChanged = this.pressed || this.hover\n        this.pressed = false\n        this.hover = false\n        this.children.forEach((child) => stateChanged = child.release() || stateChanged)\n        return stateChanged\n    }\n\n    notifyRedraw() {\n        if (this.parent) this.parent.notifyRedraw()\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\nimport { NATIVE_FRAMERATE, PANEL_ANIMATION_MULTIPLIER } from '../../../main'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { clearTimeoutSafe } from '../../../core/Util'\n\nexport class Panel extends BaseElement {\n\n    img: HTMLCanvasElement = null\n    xOut: number = 0\n    yOut: number = 0\n    xIn: number = 0\n    yIn: number = 0\n    animationTimeout = null\n    movedIn: boolean = true // xIn, yIn is the collapsed position out of screen\n\n    constructor(panelCfg?: PanelCfg) {\n        super()\n        if (panelCfg) {\n            this.img = ResourceManager.getImage(panelCfg.filename)\n            this.xOut = panelCfg.xOut\n            this.yOut = panelCfg.yOut\n            this.xIn = panelCfg.xIn\n            this.yIn = panelCfg.yIn\n            this.relX = this.xIn\n            this.relY = this.yIn\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.relX = this.xIn\n        this.relY = this.yIn\n        this.movedIn = true\n        this.updatePosition()\n    }\n\n    isInactive(): boolean {\n        return this.animationTimeout || super.isInactive()\n    }\n\n    setMovedIn(movedIn: boolean, onDone: () => any = null) {\n        if (this.movedIn !== movedIn) {\n            this.toggleState(onDone)\n        } else if (onDone) {\n            onDone()\n        }\n    }\n\n    toggleState(onDone: () => any = null) {\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        if (this.movedIn) {\n            this.movedIn = false\n            this.updateAnimation(this.xOut, this.yOut, PANEL_ANIMATION_MULTIPLIER, onDone)\n        } else {\n            this.movedIn = true\n            this.updateAnimation(this.xIn, this.yIn, PANEL_ANIMATION_MULTIPLIER, onDone)\n        }\n    }\n\n    protected updateAnimation(targetX: number, targetY: number, speed: number, onDone: () => any) {\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= speed && Math.abs(diffY) <= speed) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * speed)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * speed)\n            const panel = this\n            this.animationTimeout = setTimeout(() => panel.updateAnimation(targetX, targetY, speed, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.img) context.drawImage(this.img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class Button extends BaseElement {\n\n    buttonType: string = null\n    imgNormal: HTMLCanvasElement = null\n    imgHover: HTMLCanvasElement = null\n    imgPressed: HTMLCanvasElement = null\n    imgDisabled: HTMLCanvasElement = null\n    tooltip: string = null\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent)\n        this.buttonType = btnCfg.buttonType\n        this.imgNormal = ResourceManager.getImageOrNull(btnCfg.normalFile)\n        this.imgHover = ResourceManager.getImageOrNull(btnCfg.highlightFile)\n        this.imgPressed = ResourceManager.getImageOrNull(btnCfg.pressedFile)\n        this.imgDisabled = ResourceManager.getImageOrNull(btnCfg.disabledFile)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width || this.imgNormal?.width || this.imgPressed?.width\n        this.height = btnCfg.height || this.imgNormal?.height || this.imgPressed?.height\n        this.tooltip = btnCfg.tooltip?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.updatePosition()\n    }\n\n    onClick() {\n        console.log('button pressed: ' + this.buttonType)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled || this.imgPressed || this.imgNormal\n        } else if (this.pressed) {\n            img = this.imgPressed || this.imgNormal\n        } else if (this.hover) {\n            img = this.imgHover || this.imgNormal\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { BaseElement } from '../base/BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class SideBarLabel extends BaseElement {\n\n    tooltip: string\n    label: string\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg, label: string) {\n        super(parent)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width\n        this.height = btnCfg.height\n        this.tooltip = btnCfg.tooltip\n        this.label = label\n        this.updatePosition()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.textAlign = 'center'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.label, this.x + this.width / 2, this.y + this.height - 2)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { GameState } from '../../model/GameState'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { MaterialAmountChanged } from '../../../event/WorldEvents'\nimport { CollectableType } from '../../../scene/model/collect/CollectableEntity'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { SideBarLabel } from './SideBarLabel'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class PanelCrystalSideBar extends Panel {\n\n    labelOre: SideBarLabel\n    labelCrystal: SideBarLabel\n    imgNoCrystal: HTMLCanvasElement\n    imgSmallCrystal: HTMLCanvasElement\n    imgUsedCrystal: HTMLCanvasElement\n    imgOre: HTMLCanvasElement\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonCrystalSideBarCfg) {\n        super(panelCfg)\n        this.labelOre = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarOre, GameState.totalOre.toString()))\n        this.labelCrystal = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarCrystals, GameState.numCrystal.toString()))\n        this.imgNoCrystal = ResourceManager.getImage('Interface/RightPanel/NoSmallCrystal.bmp')\n        this.imgSmallCrystal = ResourceManager.getImage('Interface/RightPanel/SmallCrystal.bmp')\n        this.imgUsedCrystal = ResourceManager.getImage('Interface/RightPanel/UsedCrystal.bmp')\n        this.imgOre = ResourceManager.getImage('Interface/RightPanel/CrystalSideBar_Ore.bmp')\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, (event: MaterialAmountChanged) => {\n            this.updateQuantities(event.collectableType)\n        })\n    }\n\n    updateQuantities(type: CollectableType) {\n        if (type === CollectableType.CRYSTAL || type === CollectableType.ORE || type === CollectableType.BRICK) {\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        this.labelOre.label = GameState.totalOre.toString()\n        this.labelCrystal.label = GameState.numCrystal.toString()\n        super.onRedraw(context)\n        // draw crystals\n        let curX = this.x + this.img.width - 8\n        let curY = this.y + this.img.height - 34\n        for (let c = 0; (GameState.neededCrystals < 1 || c < Math.max(GameState.neededCrystals, GameState.numCrystal)) && curY >= Math.max(this.imgNoCrystal.height, this.imgSmallCrystal.height, this.imgUsedCrystal.height); c++) {\n            let imgCrystal = this.imgNoCrystal\n            if (GameState.usedCrystals > c) {\n                imgCrystal = this.imgUsedCrystal\n            } else if (GameState.numCrystal > c) {\n                imgCrystal = this.imgSmallCrystal\n            }\n            curY -= imgCrystal.height\n            context.drawImage(imgCrystal, curX - imgCrystal.width / 2, curY)\n        }\n        // draw ores\n        curX = this.x + this.img.width - 21\n        curY = this.y + this.img.height - 42\n        for (let i = 0; i < GameState.numOre && curY >= this.imgOre.height; ++i) {\n            curY -= this.imgOre.height\n            context.drawImage(this.imgOre, curX - this.imgOre.width / 2, curY)\n        }\n    }\n\n}\n\nexport class ButtonCrystalSideBarCfg extends BaseConfig {\n\n    panelButtonCrystalSideBarOre: ButtonCfg = null\n    panelButtonCrystalSideBarCrystals: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonInfoDockCfg extends BaseConfig {\n\n    panelButtonInfoDockGoto: ButtonCfg = null\n    panelButtonInfoDockClose: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonPriorityListCfg extends BaseConfig {\n\n    panelButtonPriorityListDisable: ButtonCfg[] = []\n    panelButtonPriorityListUpOne: ButtonCfg[] = []\n    panelButtonPriorityListClose: ButtonCfg = null // not used in the game\n    panelButtonPriorityListReset: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName.match(/panelButtonPriorityListDisable\\d+/i)) {\n            this.panelButtonPriorityListDisable.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else if (lCfgKeyName.match(/panelButtonPriorityListUpOne\\d+/i)) {\n            this.panelButtonPriorityListUpOne.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else {\n            return super.assignValue(objKey, lCfgKeyName, cfgValue)\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonTopCfg extends BaseConfig {\n\n    panelButtonTopPanelCallToArms: ButtonCfg = null\n    panelButtonTopPanelOptions: ButtonCfg = null\n    panelButtonTopPanelPriorities: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ButtonRadarCfg } from '../game/gui/radar/RadarPanel'\nimport { ButtonCrystalSideBarCfg } from '../game/gui/sidebar/PanelCrystalSideBar'\nimport { ButtonInfoDockCfg } from '../game/gui/infodock/ButtonInfoDockCfg'\nimport { ButtonPriorityListCfg } from '../game/gui/toppanel/ButtonPriorityListCfg'\nimport { ButtonTopCfg } from '../game/gui/toppanel/ButtonTopCfg'\n\nexport class ButtonsCfg extends BaseConfig {\n\n    panelRadar: ButtonRadarCfg = null\n    panelCrystalSideBar: ButtonCrystalSideBarCfg = null\n    panelTopPanel: ButtonTopCfg = null\n    panelInformation: ButtonInformationCfg = null\n    panelPriorityList: ButtonPriorityListCfg = null\n    panelCameraControl: ButtonCameraControlCfg = null\n    panelInfoDock: ButtonInfoDockCfg = null\n    panelEncyclopedia: any = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        const btnCfgValue = {}\n        cfgValue.forEach(arr => btnCfgValue[arr[0]] = arr)\n        if (lCfgKeyName === 'panelRadar'.toLowerCase()) {\n            return new ButtonRadarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCrystalSideBar'.toLowerCase()) {\n            return new ButtonCrystalSideBarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelTopPanel'.toLowerCase()) {\n            return new ButtonTopCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInformation'.toLowerCase()) {\n            return new ButtonInformationCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelPriorityList'.toLowerCase()) {\n            return new ButtonPriorityListCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCameraControl'.toLowerCase()) {\n            return new ButtonCameraControlCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInfoDock'.toLowerCase()) {\n            return new ButtonInfoDockCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelEncyclopedia'.toLowerCase()) {\n            return null // not used in the game\n        } else {\n            return btnCfgValue\n        }\n    }\n\n}\n\nexport class ButtonInformationCfg extends BaseConfig {\n\n    panelButtonInformationToggle: ButtonCfg = null\n    panelButtonInformationFunction: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n\nexport class ButtonCameraControlCfg extends BaseConfig {\n\n    panelButtonCameraControlZoomIn: ButtonCfg = null\n    panelButtonCameraControlZoomOut: ButtonCfg = null\n    panelButtonCameraControlCycleBuildings: ButtonCfg = null\n    panelButtonCameraControlRotate: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n\nexport class BaseButtonCfg {\n\n    buttonType?: string = null\n    normalFile?: string = null\n    highlightFile?: string = null\n    pressedFile?: string = null\n    disabledFile?: string = null\n    relX?: number = 0\n    relY?: number = 0\n    width?: number = 0\n    height?: number = 0\n    tooltip?: string = null\n}\n\nexport class ButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 9) {\n            [this.buttonType, this.normalFile, this.highlightFile, this.pressedFile, this.relX, this.relY, this.width, this.height, this.tooltip] = cfgValue\n        } else {\n            throw 'Invalid number of arguments (' + cfgValue.length + ') given for button configuration expected 9 or 5'\n        }\n    }\n\n}\n\nexport class InfoButtonCfg extends BaseButtonCfg {\n\n    constructor(buttonImageFilename: string) {\n        super()\n        this.normalFile = buttonImageFilename\n        this.highlightFile = buttonImageFilename\n        this.pressedFile = buttonImageFilename\n        this.disabledFile = buttonImageFilename\n        this.relX = 0\n        this.relY = 0\n    }\n\n}\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { BaseConfig } from '../../../cfg/BaseConfig'\n\nexport class RadarPanel extends Panel {\n\n    fill: Panel\n    overlay: Panel\n    btnToggle: Button\n    btnMap: Button\n    btnTagged: Button\n\n    constructor(panelCfg: PanelCfg, panelFillCfg: PanelCfg, panelOverlayCfg: PanelCfg, buttonsCfg: ButtonRadarCfg) {\n        super(panelCfg)\n        this.fill = this.addChild(new Panel(panelFillCfg))\n        // fill cords given in abs, turn to rel (otherwise animation wont work)\n        this.fill.relX = this.relX - this.fill.relX\n        this.fill.relY = this.relY - this.fill.relY\n        this.overlay = this.addChild(new Panel(panelOverlayCfg))\n        // this.overlay.hide();\n        this.btnToggle = this.addChild(new Button(this, buttonsCfg.panelButtonRadarToggle))\n        this.btnToggle.onClick = () => this.toggleState()\n        this.btnMap = this.addChild(new Button(this, buttonsCfg.panelButtonRadarMapView))\n        this.btnMap.onClick = () => {\n            // this.fill.hide();\n            // this.overlay.hide();\n        }\n        this.btnTagged = this.addChild(new Button(this, buttonsCfg.panelButtonRadarTaggedObjectView))\n        this.btnTagged.onClick = () => {\n            // this.fill.show();\n            // this.overlay.show(); // TODO only show overlay, when entity selected\n        }\n    }\n\n}\n\nexport class ButtonRadarCfg extends BaseConfig {\n\n    panelButtonRadarToggle: ButtonCfg = null\n    panelButtonRadarTaggedObjectView: ButtonCfg = null\n    panelButtonRadarZoomIn: ButtonCfg = null\n    panelButtonRadarZoomOut: ButtonCfg = null\n    panelButtonRadarMapView: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class TextInfoMessage {\n\n    infoImage\n    textImage\n\n    constructor(font: BitmapFont, infoMessageEntryConfig: TextInfoMessageEntryConfig, maxWidth: number) {\n        this.textImage = font.createTextImage(infoMessageEntryConfig.text, maxWidth)\n        this.infoImage = ResourceManager.getImageOrNull(infoMessageEntryConfig.imageFilename)\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { GameState } from '../../model/GameState'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { TextInfoMessageConfig } from './TextInfoMessageConfig'\nimport { EventBus } from '../../../event/EventBus'\nimport { TextInfoMessage } from './TextInfoMessage'\nimport { clearTimeoutSafe } from '../../../core/Util'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class MessagePanel extends Panel {\n\n    imgAir: HTMLCanvasElement = null\n    currentMessage: TextInfoMessage = null\n    messageTimeout = null\n\n    msgSpaceToContinue: TextInfoMessage\n    msgAirSupplyLow: TextInfoMessage\n    msgAirSupplyRunningOut: TextInfoMessage\n    msgGameCompleted: TextInfoMessage\n    msgManTrained: TextInfoMessage\n    msgUnitUpgraded: TextInfoMessage\n\n    constructor(panelCfg: PanelCfg, textInfoMessageConfig: TextInfoMessageConfig) {\n        super(panelCfg)\n        this.relX = this.xOut = this.xIn = 42\n        this.relY = this.yOut = this.yIn = 409\n        this.imgAir = ResourceManager.getImage('Interface/Airmeter/msgpanel_air_juice.bmp')\n\n        const font = ResourceManager.getDefaultFont()\n        const crystalFound = new TextInfoMessage(font, textInfoMessageConfig.textCrystalFound, this.img.width)\n        EventBus.registerEventListener(EventKey.LOCATION_CRYSTAL_FOUND, () => this.setMessage(crystalFound))\n        this.msgSpaceToContinue = new TextInfoMessage(font, textInfoMessageConfig.textSpaceToContinue, this.img.width)\n        const cavernDiscovered = new TextInfoMessage(font, textInfoMessageConfig.textCavernDiscovered, this.img.width)\n        EventBus.registerEventListener(EventKey.CAVERN_DISCOVERED, () => this.setMessage(cavernDiscovered))\n        const oreFound = new TextInfoMessage(font, textInfoMessageConfig.textOreFound, this.img.width)\n        EventBus.registerEventListener(EventKey.ORE_FOUND, () => this.setMessage(oreFound))\n        this.msgAirSupplyLow = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyLow, this.img.width)\n        this.msgAirSupplyRunningOut = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyRunningOut, this.img.width)\n        this.msgGameCompleted = new TextInfoMessage(font, textInfoMessageConfig.textGameCompleted, this.img.width)\n        this.msgManTrained = new TextInfoMessage(font, textInfoMessageConfig.textManTrained, this.img.width)\n        EventBus.registerEventListener(EventKey.RAIDER_TRAINED, () => this.setMessage(this.msgManTrained))\n        this.msgUnitUpgraded = new TextInfoMessage(font, textInfoMessageConfig.textUnitUpgraded, this.img.width)\n        EventBus.registerEventListener(EventKey.AIR_LEVEL_CHANGED, () => this.notifyRedraw())\n    }\n\n    setMessage(textInfoMessage: TextInfoMessage, timeout: number = 3000) {\n        this.messageTimeout = clearTimeoutSafe(this.messageTimeout)\n        this.currentMessage = textInfoMessage\n        this.notifyRedraw()\n        if (timeout) {\n            const that = this\n            this.messageTimeout = setTimeout(() => {\n                that.currentMessage = null\n                that.notifyRedraw()\n            }, timeout)\n        }\n    }\n\n    unsetMessage(textInfoMessage: TextInfoMessage) {\n        if (this.currentMessage === textInfoMessage) {\n            this.currentMessage = null\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (GameState.airlevel > 0) {\n            const width = Math.round(236 * Math.min(1, GameState.airlevel))\n            context.drawImage(this.imgAir, this.x + 85, this.y + 6, width, 8)\n        }\n        const textImage = this.currentMessage?.textImage\n        const infoImage = this.currentMessage?.infoImage\n        if (textImage) {\n            const txtX = this.x + (this.img.width - textImage.width - (infoImage ? infoImage.width : 0)) / 2\n            context.drawImage(textImage, txtX, this.y + 26)\n        }\n        if (infoImage) {\n            const infoX = this.x + this.img.width - infoImage.width\n            context.drawImage(infoImage, infoX, this.y + 16)\n        }\n    }\n\n}\n","import { BaseButtonCfg } from './ButtonsCfg'\n\nexport class IconPanelBackButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super();\n        [this.width, this.height, this.highlightFile, this.pressedFile, this.tooltip] = cfgValue // Interface back button\n        this.relX = 4\n        this.relY = 14\n    }\n\n}\n","import { BaseButtonCfg } from './ButtonsCfg'\n\nexport class MenuItemCfg extends BaseButtonCfg {\n\n    tooltipSfx: string = null\n    tooltipDisabled: string = null\n    tooltipDisabledSfx: string = null\n    hotkey: string = null\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 4) {\n            [this.normalFile, this.disabledFile, this.pressedFile, this.hotkey] = cfgValue\n        } else if (cfgValue.length === 6) {\n            let tooltip, tooltipDisabled\n            [this.normalFile, this.disabledFile, this.pressedFile, tooltip, tooltipDisabled, this.hotkey] = cfgValue\n            if (tooltip) {\n                if (Array.isArray(tooltip)) {\n                    [this.tooltip, this.tooltipSfx] = tooltip\n                } else {\n                    this.tooltip = tooltip\n                }\n            }\n            if (tooltipDisabled) {\n                if (Array.isArray(tooltipDisabled)) {\n                    [this.tooltipDisabled, this.tooltipDisabledSfx] = tooltipDisabled\n                } else {\n                    this.tooltipDisabled = tooltipDisabled\n                }\n            }\n        }\n        this.tooltip?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.tooltipDisabled?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.width = 40\n        this.height = 40\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\n\nexport class IconPanelButton extends Button {\n\n    tooltipSfx: string = null\n    tooltipDisabled: string = null\n    tooltipDisabledSfx: string = null\n    hotkey: string = null\n    isDisabled: () => boolean = () => this.disabled\n\n    constructor(parent: BaseElement, menuItemCfg: MenuItemCfg, itemKey: string, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemCfg)\n        this.buttonType = itemKey\n        this.relX = parentWidth - 59\n        this.relY = 9 + this.height * menuIndex\n        this.tooltipSfx = menuItemCfg.tooltipSfx\n        this.tooltipDisabled = menuItemCfg.tooltipDisabled\n        this.tooltipDisabledSfx = menuItemCfg.tooltipDisabledSfx\n        this.hotkey = menuItemCfg.hotkey\n        this.disabled = true\n    }\n\n    reset() {\n        super.reset()\n        this.disabled = true\n        this.updateState(false)\n    }\n\n    onClick() {\n        console.log('menu item pressed: ' + this.buttonType)\n    }\n\n    updateState(autoRedraw: boolean = true) {\n        const targetState = !!this.isDisabled()\n        const stateChanged = this.disabled !== targetState\n        this.disabled = targetState\n        if (stateChanged && autoRedraw) this.notifyRedraw()\n        return stateChanged\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n        super.drawHover(context)\n        if (!this.disabled && this.hover) {\n            context.strokeStyle = '#0f0'\n            context.lineWidth = 2\n            context.strokeRect(this.x - context.lineWidth / 2, this.y - context.lineWidth / 2, this.width + context.lineWidth - 1, this.height + context.lineWidth - 1)\n        }\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { Button } from '../base/Button'\nimport { IconPanelBackButtonCfg } from '../../../cfg/IconPanelBackButtonCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class IconSubPanel extends Panel {\n\n    backBtn: Button = null\n    iconPanelButtons: IconPanelButton[] = []\n\n    constructor(numOfItems, onBackPanel: Panel = null) {\n        super()\n        if (onBackPanel) {\n            const backBtnCfg = new IconPanelBackButtonCfg(ResourceManager.cfg('InterfaceBackButton'))\n            this.backBtn = this.addChild(new Button(this, backBtnCfg))\n            this.backBtn.onClick = () => this.toggleState(() => onBackPanel.toggleState())\n        }\n        const frameImgCfg = ResourceManager.cfg('InterfaceSurroundImages', numOfItems.toString())\n        // noinspection JSUnusedLocalSymbols\n        const [imgName, val1, val2, val3, val4, imgNameWoBackName, woBack1, woBack2] = frameImgCfg\n        this.img = onBackPanel ? ResourceManager.getImage(imgName) : ResourceManager.getImage(imgNameWoBackName)\n        this.xOut = -this.img.width\n    }\n\n    addMenuItem(menuItemGroup: string, itemKey: string) {\n        const menuItemCfg = new MenuItemCfg(ResourceManager.cfg(menuItemGroup, itemKey))\n        const menuItem = this.addChild(new IconPanelButton(this, menuItemCfg, itemKey, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(menuItem)\n        return menuItem\n    }\n\n    toggleState(onDone: () => any = null) {\n        super.toggleState(onDone)\n        if (!this.movedIn) this.iconPanelButtons.forEach((button) => button.updateState())\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\n\nexport class BuildingPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Toolstation')\n        this.addMenuItem('InterfaceBuildImages', 'TeleportPad')\n        this.addMenuItem('InterfaceBuildImages', 'Docks')\n        this.addMenuItem('InterfaceBuildImages', 'Powerstation')\n        this.addMenuItem('InterfaceBuildImages', 'Barracks')\n        this.addMenuItem('InterfaceBuildImages', 'Upgrade')\n        this.addMenuItem('InterfaceBuildImages', 'Geo-dome')\n        this.addMenuItem('InterfaceBuildImages', 'OreRefinery')\n        this.addMenuItem('InterfaceBuildImages', 'Gunstation')\n        this.addMenuItem('InterfaceBuildImages', 'TeleportBIG')\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class SmallVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Hoverboard')\n        this.addMenuItem('InterfaceBuildImages', 'SmallDigger')\n        this.addMenuItem('InterfaceBuildImages', 'SmallTruck')\n        this.addMenuItem('InterfaceBuildImages', 'SmallCat')\n        this.addMenuItem('InterfaceBuildImages', 'SmallMLP')\n        this.addMenuItem('InterfaceBuildImages', 'SmallHeli')\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\n\nexport class LargeVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(5, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'BullDozer')\n        this.addMenuItem('InterfaceBuildImages', 'WalkerDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeMLP')\n        this.addMenuItem('InterfaceBuildImages', 'LargeDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeCat')\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\n\nexport class SelectBasePanel extends IconSubPanel {\n\n    constructor(numOfItems, onBackPanel: Panel) {\n        super(numOfItems, onBackPanel)\n        this.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected())\n    }\n\n}\n","import { SurfaceJob } from './SurfaceJob'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { RaiderTool } from '../../../../scene/model/RaiderTool'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { Surface } from '../../../../scene/model/map/Surface'\n\nexport class ReinforceJob extends SurfaceJob {\n\n    constructor(surface: Surface) {\n        super(JobType.REINFORCE, surface)\n        this.color = 0x60a060\n        this.colorPriority = 1\n        this.requiredTool = RaiderTool.HAMMER\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.surface.getDigPositions().map((p) => new PathTarget(p))\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.reinforce()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityReinforce\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { SurfaceJob } from '../../model/job/surface/SurfaceJob'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent, SpawnDynamiteEvent } from '../../../event/WorldEvents'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { IconPanelButton } from './IconPanelButton'\nimport { Building } from '../../model/entity/building/Building'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { JobType } from '../../model/job/JobType'\nimport { DrillJob } from '../../model/job/surface/DrillJob'\nimport { ReinforceJob } from '../../model/job/surface/ReinforceJob'\n\nexport class SelectWallPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        const itemDrill = this.addWallMenuItem('Interface_MenuItem_Dig', JobType.DRILL, (s) => new DrillJob(s))\n        itemDrill.isDisabled = () => !(GameState.selectedSurface?.isDrillable()) &&\n            !(GameState.selectedSurface?.isDrillableHard()) // TODO implement vehicle check for drill hard skill\n        const itemReinforce = this.addWallMenuItem('Interface_MenuItem_Reinforce', JobType.REINFORCE, (s) => new ReinforceJob(s))\n        itemReinforce.isDisabled = () => !(GameState.selectedSurface?.isReinforcable())\n        const itemDynamite = this.addWallMenuItem('Interface_MenuItem_Dynamite', JobType.BLOW, null)\n        itemDynamite.isDisabled = () => !GameState.hasBuildingWithUpgrades(Building.TOOLSTATION, 2) &&\n            !GameState.raiders.some((r) => r.hasSkill(RaiderSkill.DEMOLITION))\n        const itemDeselect = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeselectDig')\n        itemDeselect.isDisabled = () => false\n        itemDeselect.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.cancelJobs()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => {\n            itemDrill.updateState(false)\n            itemReinforce.updateState(false)\n            itemDynamite.updateState(false)\n            this.notifyRedraw()\n        })\n    }\n\n    addWallMenuItem(itemKey: string, jobType: JobType, createJob: (surface: Surface) => SurfaceJob): IconPanelButton {\n        const item = this.addMenuItem('InterfaceImages', itemKey)\n        item.onClick = () => {\n            const selectedSurface = GameState.selectedSurface\n            if (selectedSurface) {\n                if (jobType === JobType.BLOW) {\n                    EventBus.publishEvent(new SpawnDynamiteEvent(selectedSurface))\n                } else if (!selectedSurface.hasJobType(jobType)) {\n                    EventBus.publishEvent(new JobCreateEvent(createJob(selectedSurface)))\n                }\n                EventBus.publishEvent(new EntityDeselected())\n            }\n        }\n        return item\n    }\n\n}\n","import { CollectableEntity } from '../../../../scene/model/collect/CollectableEntity'\nimport { Surface } from '../../../../scene/model/map/Surface'\nimport { SurfaceType } from '../../../../scene/model/map/SurfaceType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { JobType } from '../JobType'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { SurfaceJob } from './SurfaceJob'\nimport { RaiderTool } from '../../../../scene/model/RaiderTool'\n\nexport class CompletePowerPathJob extends SurfaceJob {\n\n    placedItems: CollectableEntity[]\n    workplaces: PathTarget[]\n\n    constructor(surface: Surface, placedItems: CollectableEntity[]) {\n        super(JobType.COMPLETE_POWER_PATH, surface)\n        this.requiredTool = RaiderTool.SHOVEL\n        this.surface = surface\n        this.placedItems = placedItems\n        this.workplaces = [new PathTarget(surface.getRandomPosition())]\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.placedItems.forEach((placed) => placed.removeFromScene())\n        this.surface.surfaceType = SurfaceType.POWER_PATH\n        this.surface.updateTexture()\n        this.surface.neighbors.forEach((s) => s.updateTexture())\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityConstruction\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.workplaces\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { Surface } from './map/Surface'\nimport { CollectableEntity, CollectableType } from './collect/CollectableEntity'\nimport { EventBus } from '../../event/EventBus'\nimport { JobCreateEvent } from '../../event/WorldEvents'\nimport { CompletePowerPathJob } from '../../game/model/job/surface/CompletePowerPathJob'\nimport { GameState } from '../../game/model/GameState'\n\nexport class BuildingSite {\n\n    isPowerPath: boolean\n    surfaces: Surface[] = []\n    neededByType = {}\n    assignedByType = {}\n    onSiteByType = {}\n    complete: boolean = false\n\n    constructor(isPowerPath: boolean = false) {\n        this.isPowerPath = isPowerPath\n    }\n\n    getRandomDropPosition(): Vector2 {\n        return this.surfaces[0].getRandomPosition() // TODO use \"primary\" surface\n    }\n\n    needs(collectableType: CollectableType): boolean {\n        const needed = this.neededByType[collectableType] || 0\n        const assigned = (this.assignedByType[collectableType] || []).length\n        return needed > assigned\n    }\n\n    assign(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        this.assignedByType[collectableType] = this.assignedByType[collectableType] || []\n        this.assignedByType[collectableType].push(item)\n    }\n\n    unAssign(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        this.assignedByType[collectableType] = (this.assignedByType[collectableType] || [])\n        this.assignedByType[collectableType].splice(this.assignedByType[collectableType].indexOf(item), 1)\n    }\n\n    addItem(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        const needed = this.neededByType[collectableType] || 0\n        this.onSiteByType[collectableType] = this.onSiteByType[collectableType] || []\n        if (this.onSiteByType[collectableType].length < needed) {\n            item.worldMgr.sceneManager.scene.add(item.group)\n            this.onSiteByType[collectableType].push(item)\n            this.checkComplete()\n        } else {\n            item.resetTarget()\n        }\n    }\n\n    checkComplete() {\n        if (this.complete) return\n        let complete = true\n        Object.keys(this.neededByType).some((neededType) => {\n            const needed = this.neededByType[neededType] || 0\n            const onSite = (this.onSiteByType[neededType] || []).length\n            if (onSite < needed) {\n                complete = false\n                return true\n            }\n        })\n        if (complete) {\n            this.complete = complete\n            GameState.buildingSites.remove(this)\n            const items = []\n            Object.keys(this.onSiteByType).forEach((collectableType) => items.push(...this.onSiteByType[collectableType]))\n            if (this.isPowerPath) {\n                EventBus.publishEvent(new JobCreateEvent(new CompletePowerPathJob(this.surfaces[0], items)))\n            } else {\n                // TODO implement building spawning\n                console.log('Building site is complete')\n            }\n        }\n    }\n\n}\n","import { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { PriorityIdentifier } from '../../../game/model/job/PriorityIdentifier'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { LWOLoader } from '../../../resource/LWOLoader'\nimport { CollectPathTarget } from '../CollectionTarget'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { Surface } from '../map/Surface'\nimport { GameState } from '../../../game/model/GameState'\n\nexport class ElectricFence extends CollectableEntity {\n\n    targetSurface: Surface\n\n    constructor(surface: Surface) {\n        super()\n        const resource = ResourceManager.getResource('Buildings/E-Fence/E-Fence4.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('Buildings/E-Fence/').parse(resource))\n        this.group.add(mesh)\n        this.targetSurface = surface\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.ELECTRIC_FENCE\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.TOOLSTATION]\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityConstruction\n    }\n\n    protected updateTargets(): CollectPathTarget[] {\n        if (this.targets.length < 1) {\n            if (this.targetSurface.canPlaceFence()) {\n                this.targets = [new CollectPathTarget(this.targetSurface.getCenterWorld2D(), null, null)]\n            } else {\n                this.targets = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                    .map((b) => new CollectPathTarget(b.getDropPosition2D(), null, b))\n            }\n        } else if (!this.targetSurface.canPlaceFence() && !this.targets[0].building) {\n            this.targets = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                .map((b) => new CollectPathTarget(b.getDropPosition2D(), null, b))\n        }\n        return this.targets\n    }\n\n    get stats() {\n        return null\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { SurfaceType } from '../../../scene/model/map/SurfaceType'\nimport { Building } from '../../model/entity/building/Building'\nimport { CollectableType } from '../../../scene/model/collect/CollectableEntity'\nimport { EventBus } from '../../../event/EventBus'\nimport { BuildingSite } from '../../../scene/model/BuildingSite'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { ElectricFence } from '../../../scene/model/collect/ElectricFence'\n\nexport class SelectFloorPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(3, onBackPanel)\n        const pathItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_LayPath')\n        pathItem.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.surfaceType = SurfaceType.POWER_PATH_SITE\n            selectedSurface.updateTexture()\n            const targetBuilding = GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), Building.TOOLSTATION)\n            if (targetBuilding) targetBuilding.spawnMaterials(GameState.dropMaterial(CollectableType.ORE, 2))\n            const site = new BuildingSite(true)\n            site.surfaces.push(selectedSurface)\n            site.neededByType[CollectableType.ORE] = 2\n            GameState.buildingSites.push(site)\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        pathItem.isDisabled = () => GameState.selectedSurface?.surfaceType !== SurfaceType.GROUND\n        const removeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_RemovePath')\n        removeItem.onClick = () => {\n            GameState.selectedSurface?.makeRubble(2)\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        removeItem.isDisabled = () => GameState.selectedSurface?.surfaceType !== SurfaceType.POWER_PATH\n        const placeFenceItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        placeFenceItem.isDisabled = () => {\n            return !GameState.hasOneBuildingOf(Building.POWER_STATION) || !GameState.selectedSurface?.canPlaceFence()\n        }\n        placeFenceItem.onClick = () => {\n            const selectedSurface = GameState.selectedSurface\n            if (selectedSurface) {\n                const toolstation = GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), Building.TOOLSTATION)\n                if (toolstation) {\n                    toolstation?.spawnMaterials([new ElectricFence(selectedSurface)])\n                }\n            }\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => {\n            pathItem.updateState()\n            removeItem.updateState()\n            placeFenceItem.updateState()\n        })\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { ClearRubbleJob } from '../../model/job/surface/ClearRubbleJob'\n\nexport class SelectRubblePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(2, onBackPanel)\n        const clearRubbleItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_ClearRubble')\n        clearRubbleItem.onClick = () => {\n            EventBus.publishEvent(new JobCreateEvent(new ClearRubbleJob(GameState.selectedSurface)))\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        clearRubbleItem.isDisabled = () => !GameState.selectedSurface?.hasRubble()\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => clearRubbleItem.updateState())\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\nimport { IconPanelButton } from './IconPanelButton'\nimport { ResourceManager } from '../../../resource/ResourceManager'\n\nexport class IconPanelToggleButton extends IconPanelButton {\n\n    toggleState: boolean = false\n    imgOnNormal: HTMLCanvasElement\n    imgOnHover: HTMLCanvasElement\n    imgOnPressed: HTMLCanvasElement\n    imgOnDisabled: HTMLCanvasElement\n\n    constructor(parent: BaseElement, menuItemOffCfg: MenuItemCfg, menuItemOnCfg: MenuItemCfg, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemOffCfg, null, parentWidth, menuIndex)\n        this.imgOnNormal = ResourceManager.getImageOrNull(menuItemOnCfg.normalFile)\n        this.imgOnHover = ResourceManager.getImageOrNull(menuItemOnCfg.highlightFile)\n        this.imgOnPressed = ResourceManager.getImageOrNull(menuItemOnCfg.pressedFile)\n        this.imgOnDisabled = ResourceManager.getImageOrNull(menuItemOnCfg.disabledFile)\n    }\n\n    onClick() {\n        this.toggleState = !this.toggleState\n        this.onToggleStateChange()\n    }\n\n    onToggleStateChange() {\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.toggleState ? this.imgOnNormal : this.imgNormal\n        if (this.disabled) {\n            if (this.toggleState) {\n                img = this.imgOnDisabled || this.imgOnPressed || this.imgOnNormal\n            } else {\n                img = this.imgDisabled || this.imgPressed || this.imgNormal\n            }\n        } else if (this.pressed) {\n            if (this.toggleState) {\n                img = this.imgOnPressed || this.imgOnNormal\n            } else {\n                img = this.imgPressed || this.imgNormal\n            }\n        } else if (this.hover) {\n            if (this.toggleState) {\n                img = this.imgOnHover || this.imgOnNormal\n            } else {\n                img = this.imgHover || this.imgNormal\n            }\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { EventBus } from '../../../event/EventBus'\nimport { GameState } from '../../model/GameState'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { IconPanelToggleButton } from './IconPanelToggleButton'\n\nexport class SelectBuildingPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Repair')\n\n        const menuItemOffCfg = new MenuItemCfg(ResourceManager.cfg('InterfaceImages', 'Interface_MenuItem_PowerOff'))\n        const menuItemOnCfg = new MenuItemCfg(ResourceManager.cfg('InterfaceImages', 'Interface_MenuItem_PowerOn'))\n        const powerSwitchItem = this.addChild(new IconPanelToggleButton(this, menuItemOffCfg, menuItemOnCfg, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(powerSwitchItem)\n        powerSwitchItem.isDisabled = () => GameState.usedCrystals >= GameState.numCrystal || GameState.selectedBuilding?.stats?.SelfPowered || GameState.selectedBuilding?.stats?.PowerBuilding\n        powerSwitchItem.onToggleStateChange = () => {\n            if (powerSwitchItem.toggleState) {\n                GameState.selectedBuilding?.turnOffPower()\n            } else {\n                GameState.selectedBuilding?.turnOnPower()\n            }\n        }\n        const upgradeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeBuilding')\n        upgradeItem.isDisabled = () => !GameState.selectedBuilding?.canUpgrade()\n        upgradeItem.onClick = () => GameState.selectedBuilding?.upgrade()\n        const deleteBuildingItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteBuilding')\n        deleteBuildingItem.isDisabled = () => false\n        deleteBuildingItem.onClick = () => GameState.selectedBuilding?.beamUp()\n        EventBus.registerEventListener(EventKey.SELECTED_BUILDING, () => {\n            powerSwitchItem.updateState()\n            upgradeItem.updateState()\n        })\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, () => {\n            powerSwitchItem.updateState()\n            upgradeItem.updateState()\n        })\n    }\n\n}\n","import { Job } from './Job'\nimport { JobType } from './JobType'\nimport { PathTarget } from '../../../scene/model/PathTarget'\n\nexport class EatJob extends Job {\n\n    constructor() {\n        super(JobType.EAT)\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return []\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { EatJob } from '../../model/job/EatJob'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\n\nexport class SelectRaiderPanel extends SelectBasePanel {\n\n    getToolItem: IconPanelButton\n    trainItem: IconPanelButton\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        const feedItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GoFeed')\n        feedItem.isDisabled = () => false\n        feedItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => !r.isDriving() && r.setJob(new EatJob()))\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UnLoadMinifigure')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_MinifigurePickUp')\n        this.getToolItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GetTool')\n        this.getToolItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DropBirdScarer')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeMan')\n        this.trainItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSkill')\n        this.trainItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoFirstPerson')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoSecondPerson')\n        const deleteRaiderItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteMan')\n        deleteRaiderItem.isDisabled = () => false\n        deleteRaiderItem.onClick = () => GameState.selectedRaiders.forEach((r) => r.beamUp())\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectVehiclePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(7, onBackPanel)\n    }\n\n}\n","import { Vector2 } from 'three'\n\nexport class Area {\n\n    x0: number = 0\n    y0: number = 0\n    x1: number = 0\n    y1: number = 0\n    center: Vector2 = null\n\n    constructor(x0: number, y0: number, x1: number, y1: number) {\n        this.x0 = x0\n        this.y0 = y0\n        this.x1 = x1\n        this.y1 = y1\n        this.center = new Vector2((this.x0 + this.x1) / 2, (this.y0 + this.y1) / 2)\n    }\n\n    getCenter(): Vector2 {\n        return this.center.clone()\n    }\n\n}\n","import { Job } from './Job'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\nimport { JobType } from './JobType'\nimport { PathTarget } from '../../../scene/model/PathTarget'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { Area } from '../../../core/Area'\nimport { JOB_ACTION_RANGE, TILESIZE } from '../../../main'\nimport { Vector2 } from 'three'\n\nexport class TrainJob extends Job {\n\n    workplaces: SurfacePathTarget[]\n    skill: RaiderSkill\n\n    constructor(surface: Surface, skill: RaiderSkill) {\n        super(JobType.TRAIN)\n        this.workplaces = [new SurfacePathTarget(surface)]\n        this.skill = skill\n    }\n\n    getWorkplaces(): SurfacePathTarget[] {\n        return this.workplaces\n    }\n\n}\n\nexport class SurfacePathTarget extends PathTarget {\n\n    targetArea: Area\n\n    constructor(surface: Surface) {\n        super(surface.getCenterWorld2D())\n        this.targetArea = new Area(surface.x * TILESIZE - JOB_ACTION_RANGE, surface.y * TILESIZE - JOB_ACTION_RANGE,\n            (surface.x + 1) * TILESIZE + JOB_ACTION_RANGE, (surface.y + 1) * TILESIZE + JOB_ACTION_RANGE)\n    }\n\n    isInArea(position: Vector2): boolean {\n        return position.x >= this.targetArea.x0 && position.x < this.targetArea.x1\n            && position.y >= this.targetArea.y0 && position.y < this.targetArea.y1\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { GameState } from '../../model/GameState'\nimport { Building } from '../../model/entity/building/Building'\nimport { TrainJob } from '../../model/job/TrainJob'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class TrainRaiderPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainDriver')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainEngineer')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainGeologist')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainPilot')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSailor')\n        const trainDynamite = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainDynamite')\n        trainDynamite.isDisabled = () => !GameState.getBuildingsByType(Building.TOOLSTATION).some((b) => b.stats.TrainDynamite[b.level]) ||\n            GameState.selectedRaiders.every((r) => r.hasSkill(RaiderSkill.DEMOLITION))\n        trainDynamite.onClick = () => {\n            GameState.getBuildingsByType(Building.TOOLSTATION).some((b) => {\n                if (b.stats.TrainDynamite[b.level]) {\n                    GameState.selectedRaiders.forEach((r) => !r.hasSkill(RaiderSkill.DEMOLITION) && r.setJob(new TrainJob(b.surfaces[0], RaiderSkill.DEMOLITION)))\n                    EventBus.publishEvent(new EntityDeselected())\n                    return true\n                }\n            })\n        }\n        EventBus.registerEventListener(EventKey.BUILDING_UPGRADED, () => trainDynamite.updateState())\n    }\n\n}\n","import { Job } from './Job'\nimport { Vector2 } from 'three'\nimport { RaiderTool } from '../../../scene/model/RaiderTool'\nimport { JobType } from './JobType'\nimport { PathTarget } from '../../../scene/model/PathTarget'\n\nexport class GetToolJob extends Job {\n\n    target: PathTarget[]\n    tool: RaiderTool\n\n    constructor(target: Vector2, tool: RaiderTool) {\n        super(JobType.GET_TOOL)\n        this.target = [new PathTarget(target)]\n        this.tool = tool\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.target\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { GameState } from '../../model/GameState'\nimport { IconPanelButton } from './IconPanelButton'\nimport { Building } from '../../model/entity/building/Building'\nimport { GetToolJob } from '../../model/job/GetToolJob'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { RaiderTool } from '../../../scene/model/RaiderTool'\nimport { PathTarget } from '../../../scene/model/PathTarget'\n\nexport class GetToolPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(8, onBackPanel)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetDrill', RaiderTool.DRILL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpade', RaiderTool.SHOVEL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetHammer', RaiderTool.HAMMER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpanner', RaiderTool.SPANNER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetFreezerGun', RaiderTool.FREEZERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetLaser', RaiderTool.LASER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetPusherGun', RaiderTool.PUSHERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetBirdScarer', RaiderTool.BIRDSCARER)\n    }\n\n    addGetToolItem(menuItemGroup: string, itemKey: string, tool: RaiderTool): IconPanelButton {\n        const menuItem = super.addMenuItem(menuItemGroup, itemKey)\n        menuItem.isDisabled = () => !GameState.hasOneBuildingOf(Building.TOOLSTATION) ||\n            GameState.selectedRaiders.every((r) => r.hasTool(tool))\n        menuItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => {\n                if (!r.hasTool(tool)) {\n                    const pathToToolstation = GameState.getBuildingsByType(Building.TOOLSTATION)\n                        .map((b) => r.findPathToTarget(new PathTarget(b.getPosition2D())))\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToToolstation) {\n                        r.setJob(new GetToolJob(pathToToolstation.targetPosition, tool)) // TODO use precalculated path to toolstation\n                    }\n                }\n            })\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        return menuItem\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { GameState } from '../../model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class IconPanelButtonLabel extends BaseElement {\n\n    constructor(parent: BaseElement) {\n        super(parent)\n        this.relX = 4\n        this.relY = 11\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => this.notifyRedraw())\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        const requestedRaiders = GameState.requestedRaiders\n        if (!requestedRaiders) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = this.disabled || (this.parent && this.parent.disabled) ? '#444' : '#fff'\n        context.fillText(requestedRaiders.toString(), this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { EventBus } from '../../../event/EventBus'\nimport { SurfaceChanged, SurfaceSelectedEvent } from '../../../event/LocalEvents'\nimport { EntityAddedEvent, EntityRemovedEvent, EntityType, RaiderRequested } from '../../../event/WorldEvents'\nimport { GameState } from '../../model/GameState'\nimport { Building } from '../../model/entity/building/Building'\nimport { BuildingPanel } from './BuildingPanel'\nimport { SmallVehiclePanel } from './SmallVehiclePanel'\nimport { LargeVehiclePanel } from './LargeVehiclePanel'\nimport { SelectWallPanel } from './SelectWallPanel'\nimport { SelectFloorPanel } from './SelectFloorPanel'\nimport { SelectRubblePanel } from './SelectRubblePanel'\nimport { SelectBuildingPanel } from './SelectBuildingPanel'\nimport { SelectRaiderPanel } from './SelectRaiderPanel'\nimport { SelectVehiclePanel } from './SelectVehiclePanel'\nimport { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { TrainRaiderPanel } from './TrainRaiderPanel'\nimport { GetToolPanel } from './GetToolPanel'\nimport { IconPanelButtonLabel } from './IconPanelButtonLabel'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { MAX_RAIDER_REQUEST } from '../../../main'\n\nexport class MainPanel extends Panel {\n\n    subPanels: IconSubPanel[] = []\n    mainPanel: IconSubPanel // don't use root itself, since sub panel must be decoupled from (animated) main panel position\n    selectWallPanel: SelectWallPanel\n    selectFloorPanel: SelectFloorPanel\n    selectRubblePanel: SelectRubblePanel\n\n    constructor() {\n        super()\n        this.relX = this.xOut = 640 - 16\n        this.xIn = 640 + 95\n        this.relY = this.yOut = this.yIn = 9\n        this.movedIn = false\n        this.mainPanel = this.addSubPanel(new IconSubPanel(4))\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n\n        const buildingPanel = this.addSubPanel(new BuildingPanel(this.mainPanel))\n        const smallVehiclePanel = this.addSubPanel(new SmallVehiclePanel(this.mainPanel))\n        const largeVehiclePanel = this.addSubPanel(new LargeVehiclePanel(this.mainPanel))\n        this.selectWallPanel = this.addSubPanel(new SelectWallPanel(this.mainPanel))\n        this.selectFloorPanel = this.addSubPanel(new SelectFloorPanel(this.mainPanel))\n        this.selectRubblePanel = this.addSubPanel(new SelectRubblePanel(this.mainPanel))\n        const selectBuildingPanel = this.addSubPanel(new SelectBuildingPanel(this.mainPanel))\n        const selectRaiderPanel = this.addSubPanel(new SelectRaiderPanel(this.mainPanel))\n        const trainRaiderPanel = this.addSubPanel(new TrainRaiderPanel(selectRaiderPanel))\n        selectRaiderPanel.trainItem.onClick = () => selectRaiderPanel.toggleState(() => trainRaiderPanel.toggleState())\n        const getToolPanel = this.addSubPanel(new GetToolPanel(selectRaiderPanel))\n        selectRaiderPanel.getToolItem.onClick = () => selectRaiderPanel.toggleState(() => getToolPanel.toggleState())\n        const selectVehiclePanel = this.addSubPanel(new SelectVehiclePanel(this.mainPanel))\n        const teleportRaider = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_TeleportMan')\n        teleportRaider.isDisabled = () => GameState.raiders.length >= GameState.getMaxRaiders() || GameState.requestedRaiders >= MAX_RAIDER_REQUEST ||\n            !GameState.hasOneBuildingOf(Building.TOOLSTATION, Building.TELEPORT_PAD)\n        teleportRaider.updateState()\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => teleportRaider.updateState())\n        EventBus.registerEventListener(EventKey.ENTITY_ADDED, (event: EntityAddedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.type === EntityType.BUILDING || event.type === EntityType.RAIDER) teleportRaider.updateState()\n        })\n        EventBus.registerEventListener(EventKey.ENTITY_REMOVED, (event: EntityRemovedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.type === EntityType.BUILDING || event.type === EntityType.RAIDER) teleportRaider.updateState()\n        })\n        teleportRaider.onClick = () => {\n            GameState.requestedRaiders++\n            EventBus.publishEvent(new RaiderRequested())\n        }\n        // TODO add decrease requested raider spawn option (needs right click for gui elements)\n        teleportRaider.addChild(new IconPanelButtonLabel(teleportRaider))\n        const buildingItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildBuilding')\n        buildingItem.isDisabled = () => false\n        buildingItem.onClick = () => this.mainPanel.toggleState(() => buildingPanel.toggleState())\n        const smallVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildSmallVehicle')\n        smallVehicleItem.isDisabled = () => false\n        smallVehicleItem.onClick = () => this.mainPanel.toggleState(() => smallVehiclePanel.toggleState())\n        const largeVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildLargeVehicle')\n        largeVehicleItem.isDisabled = () => false\n        largeVehicleItem.onClick = () => this.mainPanel.toggleState(() => largeVehiclePanel.toggleState())\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, (event: SurfaceSelectedEvent) => {\n            this.onSelectedSurfaceChange(event.surface)\n        })\n        EventBus.registerEventListener(EventKey.SURFACE_CHANGED, (event: SurfaceChanged) => {\n            if (GameState.selectedSurface === event.surface) this.onSelectedSurfaceChange(event.surface)\n        })\n        EventBus.registerEventListener(EventKey.DESELECTED_ENTITY, () => this.selectSubPanel(this.mainPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_BUILDING, () => this.selectSubPanel(selectBuildingPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_RAIDER, () => this.selectSubPanel(selectRaiderPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_VEHICLE, () => this.selectSubPanel(selectVehiclePanel))\n    }\n\n    reset() {\n        super.reset()\n        this.relX = this.xOut\n        this.relY = this.yOut\n        this.movedIn = false\n        this.updatePosition()\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n        this.mainPanel.updatePosition()\n    }\n\n    addSubPanel<T extends IconSubPanel>(childPanel: T): T {\n        this.addChild(childPanel)\n        this.subPanels.push(childPanel)\n        return childPanel\n    }\n\n    selectSubPanel(targetPanel: IconSubPanel) {\n        this.subPanels.forEach((subPanel) => subPanel !== targetPanel && subPanel.setMovedIn(true))\n        targetPanel.setMovedIn(false)\n    }\n\n    onSelectedSurfaceChange(surface: Surface) {\n        if (surface.surfaceType.floor) {\n            if (surface.hasRubble()) {\n                this.selectSubPanel(this.selectRubblePanel)\n            } else {\n                this.selectSubPanel(this.selectFloorPanel)\n            }\n        } else {\n            this.selectSubPanel(this.selectWallPanel)\n        }\n    }\n\n}\n","import { BaseElement } from './BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { Button } from './Button'\n\nexport class ToggleButton extends Button {\n\n    toggleState: boolean = false\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent, btnCfg)\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = (this.pressed && this.hover) || this.toggleState\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => updated = child.checkHover(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const isPressed = this.isInRect(cx, cy) || this.toggleState\n        let updated = this.pressed !== isPressed\n        this.pressed = isPressed\n        this.children.forEach((child) => updated = child.checkClick(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = inRect && this.pressed\n        if (updated) {\n            this.toggleState = !this.toggleState\n            this.onClick()\n            this.pressed = updated && this.toggleState\n            this.hover = inRect\n        }\n        this.children.forEach((child) => updated = child.checkRelease(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    release(): boolean {\n        return false\n    }\n\n}\n\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ToggleButton } from '../base/ToggleButton'\nimport { ButtonTopCfg } from './ButtonTopCfg'\n\nexport class TopPanel extends Panel {\n\n    btnCallToArms: ToggleButton\n    btnOptions: Button\n    btnPriorities: ToggleButton\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonTopCfg) {\n        super(panelCfg)\n        this.btnCallToArms = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelCallToArms))\n        this.btnOptions = this.addChild(new Button(this, buttonsCfg.panelButtonTopPanelOptions))\n        this.btnPriorities = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelPriorities))\n    }\n\n}\n\n","import { Button } from '../base/Button'\nimport { WorldEvent } from '../../../event/WorldEvents'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\nimport { InfoButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { InfoDockPanel } from './InfoDockPanel'\nimport { EventBus } from '../../../event/EventBus'\nimport { WorldLocationEvent } from '../../../event/WorldLocationEvent'\nimport { NATIVE_FRAMERATE } from '../../../main'\nimport { clearTimeoutSafe } from '../../../core/Util'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class InfoDockButton extends Button {\n\n    messages: WorldEvent[] = [] // newest message first\n    text: string = null\n    animationTimeout = null\n    animationSpeedX = 0.5\n    animationSpeedY = 1\n\n    constructor(parent: InfoDockPanel, infoMessagesEntryConfig: InfoMessagesEntryConfig, eventKey: EventKey) {\n        super(parent, new InfoButtonCfg(infoMessagesEntryConfig.buttonImageFilename))\n        this.text = infoMessagesEntryConfig.message\n        this.hidden = true\n\n        this.onClick = () => {\n            if (this.messages.length < 1) return\n            parent.buttonClicked(this)\n        }\n\n        EventBus.registerEventListener(eventKey, (event: WorldLocationEvent) => {\n            this.hidden = false\n            while (this.messages.length >= 9) this.messages.pop()\n            this.messages.unshift(event)\n            parent.showButton(this)\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.text = null\n        this.hidden = true\n        this.messages = []\n    }\n\n    slideToTarget(targetX: number, targetY: number): Promise<void> {\n        return new Promise<void>((resolve) => this.updateAnimation(targetX, targetY, resolve))\n    }\n\n    private updateAnimation(targetX: number, targetY: number, onDone: () => any) { // TODO refactor: almost equal with code for Panel\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= this.animationSpeedX && Math.abs(diffY) <= this.animationSpeedY) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * this.animationSpeedX)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * this.animationSpeedY)\n            const that = this\n            this.animationTimeout = setTimeout(() => that.updateAnimation(targetX, targetY, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.hidden) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.messages.length.toString(), this.x + 2, this.y + this.height / 2 + 2)\n    }\n\n}\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ButtonInfoDockCfg } from './ButtonInfoDockCfg'\nimport { InfoMessagesConfig } from './InfoMessagesConfig'\nimport { LandslideEvent } from '../../../event/WorldLocationEvent'\nimport { InfoDockButton } from './InfoDockButton'\nimport { InformationPanel } from './InformationPanel'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class InfoDockPanel extends Panel {\n\n    stackButtons: InfoDockButton[] = []\n    informationPanel: InformationPanel = null\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonInfoDockCfg, infoMessagesConfig: InfoMessagesConfig, informationPanel: InformationPanel) {\n        super(panelCfg)\n        this.informationPanel = informationPanel\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockGoto)).onClick = () => this.gotoLatestMessage()\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockClose)).onClick = () => this.dropLatestMessage()\n\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericDeath, EventKey.LOCATION_DEATH))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericMonster, EventKey.LOCATION_MONSTER))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoCrystalFound, EventKey.LOCATION_CRYSTAL_FOUND))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoUnderAttack, EventKey.LOCATION_UNDER_ATTACK))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoLandslide, EventKey.LOCATION_LANDSLIDE))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoPowerDrain, EventKey.LOCATION_POWER_DRAIN))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoSlugEmerge, EventKey.LOCATION_SLUG_EMERGE))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoFoundMinifigure, EventKey.LOCATION_RAIDER_DISCOVERED))\n    }\n\n    reset() {\n        super.reset()\n        this.stackButtons = []\n    }\n\n    private gotoLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const btn = this.stackButtons[0]\n        if (btn.messages.length < 1) return\n        const msg = btn.messages[0] as LandslideEvent\n        console.log('TODO force move camera to: ' + msg.location.toArray()) // TODO force move camera\n    }\n\n    private dropLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const button = this.stackButtons[0]\n        if (button.messages.length < 1) return\n        button.messages.shift()\n        if (button.messages.length < 1) {\n            button.hidden = true\n            this.informationPanel.setMovedIn(true)\n            this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n            this.slideStackIntoPosition().then()\n        }\n        button.notifyRedraw()\n    }\n\n    showButton(button: InfoDockButton) {\n        if (this.stackButtons.includes(button)) {\n            button.notifyRedraw()\n        } else {\n            this.slideInButton(button)\n        }\n    }\n\n    private slideInButton(button: InfoDockButton) {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        const targetY = -this.stackButtons.map(b => b.height).reduce((prev, cur) => prev + cur, 0)\n        this.stackButtons.push(button)\n        button.relX = -button.width\n        button.relY = targetY - button.height\n        button.updatePosition()\n        button.slideToTarget(0, targetY).then(() => this.stackButtons.forEach(btn => btn.disabled = false))\n    }\n\n    buttonClicked(button: InfoDockButton) {\n        if (button !== this.stackButtons[0]) {\n            this.pushFirst(button)\n        } else {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.toggleState()\n        }\n    }\n\n    private pushFirst(button: InfoDockButton) {\n        this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n        this.stackButtons.unshift(button)\n        this.slideStackIntoPosition().then(() => {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.setMovedIn(false)\n        })\n    }\n\n    private slideStackIntoPosition() {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        let relY = 0\n        const promises = this.stackButtons.map(btn => {\n            const p = btn.slideToTarget(0, relY)\n            relY -= btn.height\n            return p\n        })\n        return new Promise<void>((resolve) => {\n            Promise.all(promises).then(() => {\n                this.stackButtons.forEach(btn => btn.disabled = false)\n                resolve()\n            })\n        })\n    }\n\n}\n\n","import { BaseConfig } from './BaseConfig'\n\nexport class PanelsCfg extends BaseConfig {\n\n    panelRadar: PanelCfg = null\n    panelRadarFill: PanelCfg = null\n    panelRadarOverlay: PanelCfg = null\n    panelMessages: PanelCfg = null\n    panelMessagesSide: PanelCfg = null\n    panelCrystalSideBar: PanelCfg = null\n    panelTopPanel: PanelCfg = null\n    panelInformation: PanelCfg = null\n    panelPriorityList: PanelCfg = null\n    panelCameraControl: PanelCfg = null\n    panelInfoDock: PanelCfg = null\n    panelEncyclopedia: PanelCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new PanelCfg(cfgValue)\n    }\n}\n\nexport class PanelCfg {\n\n    filename: string\n    xOut: number\n    yOut: number\n    xIn: number\n    yIn: number\n\n    constructor(cfgValue: any) {\n        [this.filename, this.xOut, this.yOut, this.xIn, this.yIn] = cfgValue\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { Button } from '../base/Button'\nimport { GameState } from '../../model/GameState'\nimport { ButtonPriorityListCfg } from './ButtonPriorityListCfg'\nimport { PriorityButtonsConfig } from './PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from './PriorityPositionsEntry'\nimport { PriorityIdentifier } from '../../model/job/PriorityIdentifier'\nimport { PriorityEntry } from '../../model/job/PriorityList'\n\nexport class PriorityListPanel extends Panel {\n\n    prioPositions: PriorityPositionsEntry[] = []\n    prioByName: Map<PriorityIdentifier, Button> = new Map()\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonPriorityListCfg, pos: PriorityPositionsEntry[], cfg: PriorityButtonsConfig) {\n        super(panelCfg)\n        buttonsCfg.panelButtonPriorityListDisable.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.toggle(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        buttonsCfg.panelButtonPriorityListUpOne.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.upOne(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        this.addChild(new Button(this, buttonsCfg.panelButtonPriorityListReset)).onClick = () => this.resetList()\n\n        this.prioPositions = pos\n        this.prioByName.set(PriorityIdentifier.aiPriorityTrain, this.addChild(new Button(this, cfg.aiPriorityTrain)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityGetIn, this.addChild(new Button(this, cfg.aiPriorityGetIn)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityCrystal, this.addChild(new Button(this, cfg.aiPriorityCrystal)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityOre, this.addChild(new Button(this, cfg.aiPriorityOre)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityRepair, this.addChild(new Button(this, cfg.aiPriorityRepair)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityClearing, this.addChild(new Button(this, cfg.aiPriorityClearing)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityDestruction, this.addChild(new Button(this, cfg.aiPriorityDestruction)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityConstruction, this.addChild(new Button(this, cfg.aiPriorityConstruction)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityReinforce, this.addChild(new Button(this, cfg.aiPriorityReinforce)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityRecharge, this.addChild(new Button(this, cfg.aiPriorityRecharge)))\n    }\n\n    reset() {\n        super.reset()\n        this.resetList()\n    }\n\n    resetList() {\n        GameState.priorityList.reset()\n        this.setList(GameState.priorityList.current)\n    }\n\n    private setList(priorityList: PriorityEntry[]) {\n        this.prioByName.forEach((btn) => btn.hidden = true)\n        let index = 0\n        let updated = false\n        priorityList.forEach(cfg => {\n            const prioButton: Button = this.prioByName.get(cfg.key)\n            if (prioButton) {\n                updated = updated || prioButton.hidden || prioButton.disabled !== !cfg.enabled\n                prioButton.hidden = false\n                prioButton.disabled = !cfg.enabled\n                prioButton.relX = this.prioPositions[index].x\n                prioButton.relY = this.prioPositions[index].y\n                prioButton.updatePosition()\n                const btnIndex = index\n                prioButton.onClick = () => {\n                    GameState.priorityList.pushToTop(btnIndex)\n                    this.setList(GameState.priorityList.current)\n                }\n                index++\n            }\n        })\n        if (updated) this.notifyRedraw()\n    }\n\n}\n\n","export class InfoMessagesEntryConfig {\n\n    message: string = null\n    buttonImageFilename: string = null\n    sfx: string = null\n    timing: string = null\n    flag: string = null\n\n    constructor(cfgValue: any) {\n        [this.message, this.buttonImageFilename, this.sfx, this.timing, this.flag] = cfgValue\n        this.message = this.message.replace(/_/g, ' ')\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\n\nexport class InfoMessagesConfig extends BaseConfig {\n\n    infoGenericDeath: InfoMessagesEntryConfig = null\n    infoGenericMonster: InfoMessagesEntryConfig = null\n    infoCrystalFound: InfoMessagesEntryConfig = null\n    infoUnderAttack: InfoMessagesEntryConfig = null\n    infoLandslide: InfoMessagesEntryConfig = null\n    infoPowerDrain: InfoMessagesEntryConfig = null\n    infoSlugEmerge: InfoMessagesEntryConfig = null\n    infoFoundMinifigure: InfoMessagesEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new InfoMessagesEntryConfig(cfgValue)\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class InformationPanel extends Panel {\n\n    font: BitmapFont = null\n    textImage = null\n\n    constructor(panelCfg: PanelCfg) {\n        super(panelCfg)\n        this.font = ResourceManager.getDefaultFont()\n    }\n\n    setText(text?: string) {\n        this.textImage = text ? this.font.createTextImage(text, this.img.width - 80) : null\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.textImage) context.drawImage(this.textImage, this.x + (this.img.width - this.textImage.width) / 2, this.y + 12)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class PriorityButtonsConfig extends BaseConfig {\n\n    aiPriorityTrain: ButtonCfg = null\n    aiPriorityGetIn: ButtonCfg = null\n    aiPriorityCrystal: ButtonCfg = null\n    aiPriorityOre: ButtonCfg = null\n    aiPriorityRepair: ButtonCfg = null\n    aiPriorityClearing: ButtonCfg = null\n    aiPriorityDestruction: ButtonCfg = null\n    aiPriorityConstruction: ButtonCfg = null\n    aiPriorityReinforce: ButtonCfg = null\n    aiPriorityRecharge: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): ButtonCfg {\n        return {\n            buttonType: cfgValue[0],\n            normalFile: cfgValue[1],\n            highlightFile: cfgValue[1],\n            pressedFile: cfgValue[2],\n            disabledFile: cfgValue[3],\n        }\n    }\n\n}\n","export class PriorityPositionsEntry {\n\n    x: number\n    y: number\n\n    constructor(cfgValue: any) {\n        [this.x, this.y] = cfgValue\n    }\n\n}\n","export class TextInfoMessageEntryConfig {\n\n    text: string\n    imageFilename: string\n    sfxName: string\n\n    textImage\n    infoImage\n\n    constructor(cfgValue: any) {\n        [this.text, this.imageFilename, this.sfxName] = cfgValue\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\n\nexport class TextInfoMessageConfig extends BaseConfig {\n\n    textCrystalFound: TextInfoMessageEntryConfig = null\n    textSpaceToContinue: TextInfoMessageEntryConfig = null\n    textCavernDiscovered: TextInfoMessageEntryConfig = null\n    textOreFound: TextInfoMessageEntryConfig = null\n    textAirSupplyLow: TextInfoMessageEntryConfig = null\n    textAirSupplyRunningOut: TextInfoMessageEntryConfig = null\n    textGameCompleted: TextInfoMessageEntryConfig = null\n    textManTrained: TextInfoMessageEntryConfig = null\n    textUnitUpgraded: TextInfoMessageEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new TextInfoMessageEntryConfig(cfgValue)\n    }\n\n}\n","import { ScaledLayer } from '../../screen/ScreenLayer'\nimport { Panel } from '../gui/base/Panel'\nimport { BaseElement } from '../gui/base/BaseElement'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\n\nexport class GuiBaseLayer extends ScaledLayer {\n\n    rootElement: BaseElement = new BaseElement()\n    panels: Panel[] = []\n\n    constructor() {\n        super()\n        this.rootElement.notifyRedraw = () => this.redraw()\n        this.onRedraw = (context: CanvasRenderingContext2D) => {\n            context.clearRect(0, 0, context.canvas.width, context.canvas.height)\n            this.rootElement.onRedraw(context)\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.panels.forEach((p) => p.reset())\n    }\n\n    addPanel<T extends Panel>(panel: T): T {\n        this.rootElement.addChild(panel)\n        this.panels.push(panel)\n        return panel\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n        const hit = this.context && this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n        if (hit) {\n            event.preventDefault()\n            if (eventEnum === POINTER_EVENT.MOVE) {\n                this.rootElement.checkHover(sx, sy)\n            } else if (eventEnum === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) this.rootElement.checkClick(sx, sy)\n            } else if (eventEnum === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) this.rootElement.checkRelease(sx, sy)\n            }\n        } else if (eventEnum === POINTER_EVENT.MOVE) {\n            this.rootElement.release()\n        }\n        return hit\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        return !this.context || this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n    }\n\n}\n","import { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../gui/base/Panel'\nimport { RadarPanel } from '../gui/radar/RadarPanel'\nimport { MessagePanel } from '../gui/messagepanel/MessagePanel'\nimport { PanelCrystalSideBar } from '../gui/sidebar/PanelCrystalSideBar'\nimport { MainPanel } from '../gui/main/MainPanel'\nimport { TopPanel } from '../gui/toppanel/TopPanel'\nimport { InfoDockPanel } from '../gui/infodock/InfoDockPanel'\nimport { PanelsCfg } from '../../cfg/PanelsCfg'\nimport { ButtonsCfg } from '../../cfg/ButtonsCfg'\nimport { PriorityListPanel } from '../gui/toppanel/PriorityListPanel'\nimport { InfoMessagesConfig } from '../gui/infodock/InfoMessagesConfig'\nimport { InformationPanel } from '../gui/infodock/InformationPanel'\nimport { PriorityButtonsConfig } from '../gui/toppanel/PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from '../gui/toppanel/PriorityPositionsEntry'\nimport { TextInfoMessageConfig } from '../gui/messagepanel/TextInfoMessageConfig'\nimport { GuiBaseLayer } from './GuiBaseLayer'\n\nexport class GuiMainLayer extends GuiBaseLayer {\n\n    panelRadar: RadarPanel\n    panelMessages: MessagePanel\n    panelMessagesSide: Panel\n    panelCrystalSideBar: PanelCrystalSideBar\n    panelMain: MainPanel\n    panelTopPanel: TopPanel\n    panelInformation: InformationPanel\n    panelPriorityList: PriorityListPanel\n    panelCameraControl: Panel\n    panelInfoDock: InfoDockPanel\n    panelEncyclopedia: Panel\n    onOptionsShow: () => any = () => console.log('show options triggered')\n\n    constructor() {\n        super()\n        const panelsCfg = new PanelsCfg(ResourceManager.cfg('Panels640x480'))\n        const buttonsCfg = new ButtonsCfg(ResourceManager.cfg('Buttons640x480'))\n        // created in reverse order compared to cfg, earlier in cfg means higher z-value // TODO add some z layering at least to panels\n        this.panelEncyclopedia = this.addPanel(new Panel(panelsCfg.panelEncyclopedia))\n        this.panelInformation = this.addPanel(new InformationPanel(panelsCfg.panelInformation))\n        this.panelInfoDock = this.addPanel(new InfoDockPanel(panelsCfg.panelInfoDock, buttonsCfg.panelInfoDock, new InfoMessagesConfig(ResourceManager.cfg('InfoMessages')), this.panelInformation))\n        this.panelCameraControl = this.addPanel(new Panel(panelsCfg.panelCameraControl))\n        const priorityButtonsConfig = new PriorityButtonsConfig(ResourceManager.cfg('PriorityImages'))\n        const priorityPositionsConfig = Object.values(ResourceManager.cfg('PrioritiesImagePositions')).map(cfgValue => new PriorityPositionsEntry(cfgValue))\n        this.panelPriorityList = this.addPanel(new PriorityListPanel(panelsCfg.panelPriorityList, buttonsCfg.panelPriorityList, priorityPositionsConfig, priorityButtonsConfig))\n        this.panelTopPanel = this.addPanel(new TopPanel(panelsCfg.panelTopPanel, buttonsCfg.panelTopPanel))\n        this.panelMain = this.addPanel(new MainPanel())\n        this.panelCrystalSideBar = this.addPanel(new PanelCrystalSideBar(panelsCfg.panelCrystalSideBar, buttonsCfg.panelCrystalSideBar))\n        this.panelMessagesSide = this.addPanel(new Panel(panelsCfg.panelMessagesSide))\n        this.panelMessages = this.addPanel(new MessagePanel(panelsCfg.panelMessages, new TextInfoMessageConfig(ResourceManager.cfg('TextMessagesWithImages'))))\n        this.panelRadar = this.addPanel(new RadarPanel(panelsCfg.panelRadar, panelsCfg.panelRadarFill, panelsCfg.panelRadarOverlay, buttonsCfg.panelRadar))\n        // link panels\n        this.panelTopPanel.btnOptions.onClick = () => this.onOptionsShow()\n        this.panelTopPanel.btnPriorities.onClick = () => {\n            if (this.panelTopPanel.btnPriorities.toggleState) {\n                this.panelMain.setMovedIn(true, () => this.panelPriorityList.setMovedIn(false))\n            } else {\n                this.panelPriorityList.setMovedIn(true, () => this.panelMain.setMovedIn(false))\n            }\n        }\n    }\n\n}\n","import { EventBus } from '../event/EventBus'\nimport { JobCreateEvent, JobDeleteEvent } from '../event/WorldEvents'\nimport { PublicJob } from './model/job/Job'\nimport { GameState } from './model/GameState'\nimport { Vector2 } from 'three'\nimport { Raider } from '../scene/model/Raider'\nimport { WorldManager } from '../scene/WorldManager'\nimport { CHECK_CLEARRUBBLE_INTERVAL, JOB_SCHEDULE_INTERVAL } from '../main'\nimport { Building } from './model/entity/building/Building'\nimport { GetToolJob } from './model/job/GetToolJob'\nimport { TrainJob } from './model/job/TrainJob'\nimport { clearIntervalSafe } from '../core/Util'\nimport { RaiderSkill } from '../scene/model/RaiderSkill'\nimport { RaiderTool } from '../scene/model/RaiderTool'\nimport { JobState } from './model/job/JobState'\nimport { PathTarget } from '../scene/model/PathTarget'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { JobType } from './model/job/JobType'\nimport { Surface } from '../scene/model/map/Surface'\nimport { ClearRubbleJob } from './model/job/surface/ClearRubbleJob'\n\nexport class Supervisor {\n\n    worldMgr: WorldManager\n    jobs: PublicJob[] = []\n    assignInterval = null\n    checkRubbleInterval = null\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        EventBus.registerEventListener(EventKey.JOB_CREATE, (event: JobCreateEvent) => {\n            this.jobs.push(event.job)\n        })\n        EventBus.registerEventListener(EventKey.JOB_DELETE, (event: JobDeleteEvent) => {\n            event.job.cancel()\n        })\n    }\n\n    start() {\n        stop()\n        this.assignInterval = setInterval(this.assignJobs.bind(this), JOB_SCHEDULE_INTERVAL)\n        this.checkRubbleInterval = setInterval(this.checkUnclearedRubble.bind(this), CHECK_CLEARRUBBLE_INTERVAL)\n    }\n\n    stop() {\n        this.assignInterval = clearIntervalSafe(this.assignInterval)\n        this.checkRubbleInterval = clearIntervalSafe(this.checkRubbleInterval)\n        GameState.raiders.forEach((r) => r.resetWorkInterval())\n        GameState.raidersUndiscovered.forEach((r) => r.resetWorkInterval())\n        GameState.vehicles.forEach((v) => v.resetWorkInterval())\n        GameState.vehiclesUndiscovered.forEach((v) => v.resetWorkInterval())\n    }\n\n    assignJobs() {\n        const availableJobs: PublicJob[] = []\n        this.jobs = this.jobs.filter((j) => {\n            const result = j.jobstate === JobState.OPEN\n            if (result && j.fulfiller.length < 1) availableJobs.push(j)\n            return result\n        })\n        availableJobs.sort((left, right) => {\n            return Math.sign(GameState.priorityList.getPriority(left) - GameState.priorityList.getPriority(right))\n        })\n        const unemployedRaider = GameState.raiders.filter((r) => !r.job)\n        availableJobs.forEach((job) => { // XXX better use estimated time to complete job as metric\n            let closestRaider: Raider = null\n            let closestRaiderIndex: number = null\n            let minDistance: number = null\n            let closestToolRaider: Raider = null\n            let closestToolRaiderIndex: number = null\n            let minToolDistance: number = null\n            let closestToolstationPosition: Vector2 = null\n            let closestNeededTool: RaiderTool = null\n            let closestTrainingRaider: Raider = null\n            let closestTrainingRaiderIndex: number = null\n            let minTrainingDistance: number = null\n            let closestTrainingArea: Surface = null\n            let closestNeededTraining: RaiderSkill = null\n            unemployedRaider.forEach((raider, index) => {\n                if (job.isQualified(raider)) {\n                    const pathToJob = job.getWorkplaces().map((b) => raider.findPathToTarget(b))\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToJob) {\n                        const dist = pathToJob.lengthSq // TODO use precalculated path to job\n                        if (minDistance === null || dist < minDistance) {\n                            closestRaider = raider\n                            closestRaiderIndex = index\n                            minDistance = dist\n                        }\n                    }\n                } else {\n                    const raiderPosition = raider.getPosition()\n                    const neededTool = job.isQualifiedWithTool(raider)\n                    if (neededTool) {\n                        const pathToToolstation = GameState.getBuildingsByType(Building.TOOLSTATION)\n                            .map((b) => raider.findPathToTarget(new PathTarget(b.getPosition2D())))\n                            .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                        if (pathToToolstation) {\n                            const dist = pathToToolstation.lengthSq\n                            if (minToolDistance === null || dist < minToolDistance) {\n                                closestToolRaider = raider\n                                closestToolRaiderIndex = index\n                                minToolDistance = dist\n                                closestToolstationPosition = pathToToolstation.targetPosition // TODO use precalculated path to toolstation\n                                closestNeededTool = neededTool\n                            }\n                        }\n                    } else {\n                        const neededTraining = job.isQualifiedWithTraining(raider)\n                        if (neededTraining) {\n                            const pathToTraining = GameState.getTrainingSites(raiderPosition, neededTraining)\n                                .map((site) => raider.findPathToTarget(new PathTarget(site.getPosition2D())))\n                                .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                            if (pathToTraining) {\n                                const dist = pathToTraining.lengthSq\n                                if (minTrainingDistance === null || dist < minTrainingDistance) {\n                                    closestTrainingRaider = raider\n                                    closestTrainingRaiderIndex = index\n                                    minTrainingDistance = dist\n                                    closestTrainingArea = raider.worldMgr.sceneManager.terrain.getSurfaceFromWorld2D(pathToTraining.targetPosition) // TODO use precalculated path to training\n                                    closestNeededTraining = neededTraining\n                                }\n                            }\n                        }\n                    }\n                }\n            })\n            if (closestRaider) {\n                closestRaider.setJob(job)\n                unemployedRaider.splice(closestRaiderIndex, 1)\n            } else if (closestToolRaider) {\n                closestToolRaider.setJob(new GetToolJob(closestToolstationPosition, closestNeededTool), job)\n                unemployedRaider.splice(closestToolRaiderIndex, 1)\n            } else if (closestTrainingRaider) {\n                closestTrainingRaider.setJob(new TrainJob(closestTrainingArea, closestNeededTraining), job)\n                unemployedRaider.splice(closestTrainingRaiderIndex, 1)\n            }\n        })\n    }\n\n    checkUnclearedRubble() {\n        GameState.raiders.forEach((raider) => {\n            if (raider.job) return\n            const startSurface = raider.worldMgr.sceneManager.terrain.getSurfaceFromWorld(raider.getPosition())\n            for (let rad = 0; rad < 10; rad++) {\n                for (let x = startSurface.x - rad; x <= startSurface.x + rad; x++) {\n                    for (let y = startSurface.y - rad; y <= startSurface.y + rad; y++) {\n                        const surface = raider.worldMgr.sceneManager.terrain.getSurfaceOrNull(x, y)\n                        if (!(surface?.hasRubble()) || !surface.discovered || surface.hasJobType(JobType.CLEAR_RUBBLE)) continue\n                        const surfJob = new ClearRubbleJob(surface)\n                        if (surfJob.isQualified(raider)) {\n                            raider.setJob(surfJob)\n                        } else {\n                            const neededTool = surfJob.isQualifiedWithTool(raider)\n                            if (neededTool) {\n                                const pathToToolstation = GameState.getBuildingsByType(Building.TOOLSTATION)\n                                    .map((b) => raider.findPathToTarget(new PathTarget(b.getPosition2D())))\n                                    .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                                if (pathToToolstation) {\n                                    raider.setJob(new GetToolJob(pathToToolstation.targetPosition, neededTool), surfJob) // TODO use precalculated path to toolstation\n                                }\n                            } else {\n                                continue\n                            }\n                        }\n                        EventBus.publishEvent(new JobCreateEvent(surfJob))\n                        surface.updateJobColor()\n                    }\n                }\n            }\n        })\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { BriefingPanelCfg } from '../../../cfg/BriefingPanelCfg'\nimport { MessagePanel } from '../messagepanel/MessagePanel'\nimport { ObjectiveImageCfg } from '../../../cfg/ObjectiveImageCfg'\n\nexport class BriefingPanel extends Panel {\n\n    messagePanel: MessagePanel\n    cfg: BriefingPanelCfg = null\n    imgTitle: HTMLCanvasElement = null\n    titleRelX: number = 0\n    titleRelY: number = 0\n    btnNext: Button = null\n    btnBack: Button = null\n    imgBack: HTMLCanvasElement = null\n    imgParagraph: HTMLCanvasElement[] = []\n    paragraph: number = 0\n\n    constructor(cfg: BriefingPanelCfg) {\n        super()\n        this.cfg = cfg\n        this.imgTitle = cfg.titleFont.createTextImage(cfg.title)\n        this.titleRelX = cfg.titleWindow.x + (cfg.titleWindow.w - this.imgTitle.width) / 2\n        this.titleRelY = cfg.titleWindow.y\n        this.btnNext = this.addChild(new Button(this, cfg.nextButtonCfg))\n        this.btnNext.onClick = () => this.nextParagraph()\n        this.btnBack = this.addChild(new Button(this, cfg.backButtonCfg))\n        this.btnBack.onClick = () => this.prevParagraph()\n        this.hidden = true\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n        this.setParagraph(0)\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.imgBack = ResourceManager.getImageOrNull(objectiveBackImgCfg.filename)\n        this.relX = objectiveBackImgCfg.x\n        this.relY = objectiveBackImgCfg.y\n        this.width = this.imgBack.width\n        this.height = this.imgBack.height\n        this.updatePosition()\n        this.imgParagraph = objectiveText.split('\\\\a').map(txt => this.cfg.textFont.createTextImage(txt, this.cfg.textWindow.w, false))\n    }\n\n    setParagraph(paragraph: number) {\n        if (paragraph < 0) return\n        if (paragraph > this.imgParagraph.length - 1) {\n            this.hide()\n            this.notifyRedraw()\n            return\n        }\n        this.paragraph = paragraph\n        this.btnNext.hidden = this.paragraph >= this.imgParagraph.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.notifyRedraw()\n    }\n\n    nextParagraph() {\n        this.setParagraph(this.paragraph + 1)\n    }\n\n    prevParagraph() {\n        this.setParagraph(this.paragraph - 1)\n    }\n\n    show() {\n        super.show()\n        this.setParagraph(0)\n        this.btnNext.hidden = this.paragraph >= this.imgParagraph.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.messagePanel?.setMessage(this.messagePanel.msgSpaceToContinue, 0)\n    }\n\n    hide() {\n        super.hide()\n        this.messagePanel?.unsetMessage(this.messagePanel.msgSpaceToContinue)\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.imgBack) context.drawImage(this.imgBack, this.x, this.y)\n        if (this.imgTitle) context.drawImage(this.imgTitle, this.x + this.titleRelX, this.y + this.titleRelY)\n        if (this.imgParagraph && this.imgParagraph[this.paragraph]) context.drawImage(this.imgParagraph[this.paragraph], this.x + this.cfg.textWindow.x, this.y + this.cfg.textWindow.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuCycleItemCfg } from '../../../cfg/MenuCycleItemCfg'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuCycleItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLabelOnNormal: HTMLCanvasElement // TODO only toggle state with clicks on label\n    imgLabelOffNormal: HTMLCanvasElement // TODO use button?\n    imgLabelOnHover: HTMLCanvasElement\n    imgLabelOffHover: HTMLCanvasElement\n\n    labelX: number = 0\n    state: boolean = false\n\n    constructor(parent: MenuLayer, itemCfg: MenuCycleItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.labelX = itemCfg.width\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.imgLabelOffNormal = parent.loFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOffHover = parent.hiFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOnNormal = parent.loFont.createTextImage(itemCfg.labelOn)\n        this.imgLabelOnHover = parent.hiFont.createTextImage(itemCfg.labelOn)\n        this.width = itemCfg.width + Math.max(this.imgLabelOnHover.width, this.imgLabelOffHover.width)\n        this.height = this.imgTextNormal.height\n    }\n\n    onClick() {\n        this.state = !this.state\n        console.log('TODO: cycle item clicked; state: ' + this.state)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        let imgLabel = this.state ? this.imgLabelOnNormal : this.imgLabelOffNormal\n        if (this.hover) {\n            img = this.imgTextHover\n            imgLabel = this.state ? this.imgLabelOnHover : this.imgLabelOffHover\n        }\n        context.drawImage(img, this.x, this.y)\n        context.drawImage(imgLabel, this.x + this.labelX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuSliderItemCfg } from '../../../cfg/MenuSliderItemCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { BaseButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuSliderItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLeft: HTMLCanvasElement\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgRight: HTMLCanvasElement\n    sliderX: number = 0\n    min: number = 0\n    max: number = 1\n    value: number = 0\n    onValueChanged: (value: number) => any = (value) => console.log('value changed to: ' + value)\n\n    constructor(parent: MenuLayer, itemCfg: MenuSliderItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.sliderX = itemCfg.width\n        this.imgLeft = ResourceManager.getImage(itemCfg.imgLeft)\n        this.imgNormal = ResourceManager.getImage(itemCfg.imgOff)\n        this.imgHover = ResourceManager.getImage(itemCfg.imgOn)\n        this.imgRight = ResourceManager.getImage(itemCfg.imgRight)\n        const leftBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        leftBtn.imgNormal = ResourceManager.getImage(itemCfg.btnLeftNormal)\n        leftBtn.imgHover = ResourceManager.getImage(itemCfg.btnLeftHover)\n        leftBtn.relX = this.sliderX - this.imgLeft.width - leftBtn.imgHover.width\n        leftBtn.width = leftBtn.imgHover.width\n        leftBtn.height = leftBtn.imgHover.height\n        leftBtn.updatePosition()\n        leftBtn.onClick = () => {\n            if (this.value > this.min) {\n                this.value--\n                this.onValueChanged(this.value)\n            }\n        }\n        const rightBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        rightBtn.imgNormal = ResourceManager.getImage(itemCfg.btnRightNormal)\n        rightBtn.imgHover = ResourceManager.getImage(itemCfg.btnRightHover)\n        rightBtn.relX = this.sliderX + this.imgNormal.width + this.imgRight.width * 2\n        rightBtn.width = rightBtn.imgHover.width\n        rightBtn.height = rightBtn.imgHover.height\n        rightBtn.updatePosition()\n        rightBtn.onClick = () => {\n            if (this.value < this.max) {\n                this.value++\n                this.onValueChanged(this.value)\n            }\n        }\n        this.width = itemCfg.width + leftBtn.imgHover.width + this.imgLeft.width + this.imgNormal.width + this.imgRight.width * 2 + rightBtn.imgHover.width\n        this.min = itemCfg.min\n        this.max = itemCfg.max || 1\n        this.value = this.min // TODO set default value\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.height = this.imgTextNormal.height\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        if (this.hover) {\n            img = this.imgTextHover\n        }\n        context.drawImage(img, this.x, this.y)\n        let posX = this.x + this.sliderX\n        context.drawImage(this.imgLeft, posX, this.y)\n        context.drawImage(this.imgNormal, posX, this.y)\n        const dw = Math.round(this.value / this.max * this.imgHover.width)\n        context.drawImage(this.imgHover, 0, 0, dw, this.imgHover.height, posX, this.y, dw, this.imgHover.height)\n        posX += this.imgNormal.width\n        context.drawImage(this.imgRight, posX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuLayer } from './MenuLayer'\nimport { MenuLabelItemCfg } from '../../../cfg/MenuLabelItemCfg'\n\nexport class MenuLabelItem extends BaseElement {\n\n    target: string\n    loImg: HTMLCanvasElement\n    hiImg: HTMLCanvasElement\n\n    constructor(parent: MenuLayer, itemCfg: MenuLabelItemCfg, autoCenter: boolean) {\n        super(parent)\n        this.target = itemCfg.target\n        this.loImg = parent.loFont.createTextImage(itemCfg.label)\n        this.hiImg = parent.hiFont.createTextImage(itemCfg.label)\n        this.width = this.loImg.width\n        this.height = this.loImg.height\n        this.relX = autoCenter ? -parent.relX + (parent.menuImage.width - this.width) / 2 : itemCfg.x\n        this.relY = itemCfg.y\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.hover) {\n            context.drawImage(this.hiImg, this.x, this.y)\n        } else {\n            context.drawImage(this.loImg, this.x, this.y)\n        }\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuEntryCfg } from '../../../cfg/MenuEntryCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuCycleItem } from './MenuCycleItem'\nimport { MenuSliderItem } from './MenuSliderItem'\nimport { MenuLabelItem } from './MenuLabelItem'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class MenuLayer extends BaseElement {\n\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    itemsTrigger: MenuLabelItem[] = []\n    itemsNext: MenuLabelItem[] = []\n\n    constructor(parent: BaseElement, menuCfg: MenuEntryCfg) {\n        super(parent)\n        this.relX = menuCfg.position[0]\n        this.relY = menuCfg.position[1]\n        this.menuImage = ResourceManager.getImageOrNull(menuCfg.menuImage[0]) // menuImage has 4 parameter here\n        this.titleImage = ResourceManager.getBitmapFont(menuCfg.menuFont).createTextImage(menuCfg.fullName)\n        this.loFont = ResourceManager.getBitmapFont(menuCfg.loFont)\n        this.hiFont = ResourceManager.getBitmapFont(menuCfg.hiFont)\n        menuCfg.itemsLabel.forEach((itemCfg) => {\n            const item = this.addChild(new MenuLabelItem(this, itemCfg, menuCfg.autoCenter))\n            if (itemCfg.actionName.toLowerCase() === 'trigger') {\n                this.itemsTrigger.push(item)\n            } else {\n                this.itemsNext.push(item)\n            }\n        })\n        menuCfg.itemsCycle.forEach((itemCfg) => this.addChild(new MenuCycleItem(this, itemCfg)))\n        menuCfg.itemsSlider.forEach((itemCfg) => this.addChild(new MenuSliderItem(this, itemCfg)))\n        this.hidden = true\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.drawImage(this.menuImage, (this.parent.width - this.menuImage.width) / 2, (this.parent.height - this.menuImage.height) / 2)\n        context.drawImage(this.titleImage, (this.parent.width - this.titleImage.width) / 2, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { MenuLayer } from './MenuLayer'\nimport { MenuCfg } from '../../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\n\nexport class MenuBasePanel extends Panel {\n\n    layersByKey: Map<string, MenuLayer> = new Map()\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super()\n        this.width = layer.fixedWidth\n        this.height = layer.fixedHeight\n        this.hidden = true\n        cfg.menus.forEach((menuCfg, index) => this.layersByKey.set('menu' + (index + 1), this.addChild(new MenuLayer(this, menuCfg))))\n        const pausePanel = this\n        this.layersByKey.forEach((layer) => layer.itemsNext.forEach((item) => item.onClick = () => pausePanel.selectLayer(item.target)))\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n    }\n\n    show() {\n        this.hidden = false\n        this.selectLayer('menu1')\n    }\n\n    hide() {\n        super.hide()\n        this.notifyRedraw()\n    }\n\n    selectLayer(key: string) {\n        const layer = this.layersByKey.get(key.toLowerCase())\n        this.layersByKey.forEach(l => l !== layer && l.hide())\n        layer.show()\n        this.notifyRedraw()\n    }\n\n}\n","import { MenuCfg } from '../../../cfg/MenuCfg'\nimport { MenuBasePanel } from './MenuBasePanel'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\n\nexport class OptionsPanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const panel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => panel.onRepeatBriefing()\n        this.layersByKey.get('menu1').itemsTrigger[1].onClick = () => panel.hide()\n    }\n\n}\n","import { MenuCfg } from '../../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\nimport { MenuBasePanel } from './MenuBasePanel'\n\nexport class PausePanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n    onAbortGame: () => any = () => console.log('abort mission')\n    onRestartGame: () => any = () => console.log('restart mission')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const pausePanel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => pausePanel.hide() // Pause\n        this.layersByKey.get('menu2').itemsTrigger[0].onClick = () => pausePanel.onRepeatBriefing() // Options\n        this.layersByKey.get('menu3').itemsTrigger[0].onClick = () => pausePanel.onAbortGame() // Quit\n        this.layersByKey.get('menu4').itemsTrigger[0].onClick = () => pausePanel.onRestartGame() // Restart\n    }\n\n}\n","export class Rect {\n\n    x: number = 0\n    y: number = 0\n    w: number = 0\n    h: number = 0\n\n    constructor(arr: number[]) {\n        [this.x, this.y, this.w, this.h] = arr\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { Rect } from '../core/Rect'\n\nexport class DialogCfg extends BaseConfig {\n\n    image: string = null\n    titleWindow: Rect = null\n    textWindow: Rect = null\n    okWindow: Rect = null\n    cancelWindow: Rect = null\n    contrastOverlay: string = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        if (lCfgKeyName.endsWith('window')) {\n            return new Rect(cfgValue)\n        }\n        return super.parseValue(lCfgKeyName, cfgValue)\n    }\n\n}\n","import { PanelCfg } from './PanelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { DialogCfg } from './DialogCfg'\nimport { Rect } from '../core/Rect'\nimport { ButtonCfg } from './ButtonsCfg'\n\nexport class BriefingPanelCfg extends PanelCfg {\n\n    // XXX find config values for this class\n\n    titleFont: BitmapFont\n    title: string\n    titleWindow: Rect\n    textFont: BitmapFont\n    textWindow: Rect\n    nextButtonCfg: ButtonCfg\n    backButtonCfg: ButtonCfg\n\n    constructor() {\n        super([])\n        this.titleFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont2.bmp')\n        this.title = ResourceManager.cfg('Main', 'MissionBriefingText')\n        const dialogCfg = new DialogCfg(ResourceManager.cfg('Dialog'))\n        this.titleWindow = dialogCfg.titleWindow\n        this.textFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont.bmp')\n        this.textWindow = dialogCfg.textWindow\n        this.nextButtonCfg = {\n            buttonType: 'Next briefing paragraph',\n            relX: 394,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'NextButton640x480'),\n        }\n        this.backButtonCfg = {\n            buttonType: 'Previous briefing paragraph',\n            relX: 54,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'BackArrow'),\n        }\n    }\n\n}\n","import { BriefingPanel } from '../gui/briefing/BriefingPanel'\nimport { OptionsPanel } from '../gui/overlay/OptionsPanel'\nimport { PausePanel } from '../gui/overlay/PausePanel'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { MenuCfg } from '../../cfg/MenuCfg'\nimport { BriefingPanelCfg } from '../../cfg/BriefingPanelCfg'\nimport { KEY_EVENT, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { Panel } from '../gui/base/Panel'\nimport { GuiBaseLayer } from './GuiBaseLayer'\nimport { ObjectiveImageCfg } from '../../cfg/ObjectiveImageCfg'\nimport { DEV_MODE } from '../../main'\n\nexport class OverlayLayer extends GuiBaseLayer {\n\n    panelBriefing: BriefingPanel\n    panelOptions: OptionsPanel\n    panelPause: PausePanel\n\n    constructor() {\n        super()\n        this.panelPause = this.addPanel(new PausePanel(this, ResourceManager.getResource('PausedMenu') as MenuCfg))\n        this.panelOptions = this.addPanel(new OptionsPanel(this, ResourceManager.getResource('OptionsMenu') as MenuCfg))\n        this.panelBriefing = this.addPanel(new BriefingPanel(new BriefingPanelCfg()))\n        // link items\n        this.panelPause.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n        this.panelOptions.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n    }\n\n    setActivePanel(panel: Panel) {\n        this.panels.forEach(p => p !== panel && p.hide())\n        panel.show()\n        this.redraw()\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.panelBriefing.setup(objectiveText, objectiveBackImgCfg)\n        if (!DEV_MODE) this.setActivePanel(this.panelBriefing)\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (this.panels.every(p => p.hidden)) return false\n        return super.handlePointerEvent(eventEnum, event) || this.isActive() // catch em all\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        let result = false\n        const lEventKey = event.key.toLowerCase()\n        if (eventEnum === KEY_EVENT.UP) {\n            if (lEventKey === 'escape') {\n                if (this.panelBriefing.hidden && this.panelOptions.hidden) {\n                    if (this.panelPause.hidden) {\n                        // TODO actually pause the game\n                        this.setActivePanel(this.panelPause)\n                    } else {\n                        // TODO actually unpause the game\n                        this.panelPause.hide()\n                    }\n                    result = true\n                }\n            } else if (lEventKey === ' ') { // space\n                if (!this.panelBriefing.hidden) {\n                    this.panelBriefing.nextParagraph()\n                    result = true\n                }\n            }\n        }\n        return result\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { WorldManager } from '../scene/WorldManager'\nimport { SelectionLayer } from '../game/layer/SelectionLayer'\nimport { GameLayer } from '../game/layer/GameLayer'\nimport { GuiMainLayer } from '../game/layer/GuiMainLayer'\nimport { Supervisor } from '../game/Supervisor'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { iGet } from '../core/Util'\nimport { LevelObjectiveTextEntry } from '../resource/wadworker/ObjectiveTextParser'\nimport { OverlayLayer } from '../game/layer/OverlayLayer'\nimport { GameState } from '../game/model/GameState'\n\nexport class GameScreen extends BaseScreen {\n\n    onLevelEnd: () => void\n    gameLayer: GameLayer\n    selectionLayer: SelectionLayer\n    guiLayer: GuiMainLayer\n    overlayLayer: OverlayLayer\n    worldManager: WorldManager\n    jobSupervisor: Supervisor\n    levelName: string\n    levelConf: LevelEntryCfg\n\n    constructor() {\n        super()\n        this.gameLayer = this.addLayer(new GameLayer(), 0)\n        this.selectionLayer = this.addLayer(new SelectionLayer(), 10)\n        this.guiLayer = this.addLayer(new GuiMainLayer(), 20)\n        this.overlayLayer = this.addLayer(new OverlayLayer(), 30)\n        this.worldManager = new WorldManager(this.gameLayer.canvas)\n        this.gameLayer.setWorldManager(this.worldManager)\n        this.selectionLayer.setWorldManager(this.worldManager)\n        this.jobSupervisor = new Supervisor(this.worldManager)\n        // link layer\n        this.guiLayer.onOptionsShow = () => this.overlayLayer.panelOptions.show()\n        this.overlayLayer.panelBriefing.messagePanel = this.guiLayer.panelMessages\n        this.overlayLayer.panelPause.onAbortGame = () => this.onLevelEnd && this.onLevelEnd()\n        this.overlayLayer.panelPause.onRestartGame = () => this.restartLevel()\n    }\n\n    startLevel(levelName) {\n        this.levelName = levelName\n        this.levelConf = ResourceManager.getResource('Levels').levelsByName[this.levelName]\n        if (!this.levelConf) throw 'Could not find level configuration for \"' + this.levelName + '\"'\n        this.setupAndStartLevel()\n    }\n\n    restartLevel() {\n        this.hide()\n        GameState.reset()\n        this.setupAndStartLevel()\n    }\n\n    private setupAndStartLevel() {\n        console.log('Starting level ' + this.levelName + ' - ' + this.levelConf.fullName)\n        this.worldManager.setup(this.levelConf, this)\n        const objectiveText: LevelObjectiveTextEntry = iGet(ResourceManager.getResource(this.levelConf.objectiveText), this.levelName)\n        this.guiLayer.reset()\n        this.overlayLayer.setup(objectiveText.objective, this.levelConf.objectiveImage640x480)\n        this.show()\n    }\n\n    show() {\n        super.show()\n        this.worldManager.start()\n        this.jobSupervisor.start()\n    }\n\n    hide() {\n        this.worldManager.stop()\n        this.jobSupervisor.stop()\n        super.hide()\n    }\n\n    resize(width: number, height: number) {\n        super.resize(width, height)\n        if (this.worldManager) this.worldManager.resize(width, height)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class RewardScreenButton extends MainMenuBaseItem {\n\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgPressed: HTMLCanvasElement\n    imgDisabled: HTMLCanvasElement\n    disabled: boolean = false\n    visible: boolean = true\n\n    constructor(conf: any) {\n        super()\n        let imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath;\n        [imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath, this.x, this.y] = conf\n        this.imgNormal = ResourceManager.getImage(imgNormalFilepath)\n        this.imgHover = ResourceManager.getImage(imgHoverFilepath)\n        this.imgPressed = ResourceManager.getImage(imgPressedFilepath)\n        this.imgDisabled = ResourceManager.getImage(imgDisabledFilepath)\n        this.width = this.imgNormal.width\n        this.height = this.imgNormal.height\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        if (!this.visible) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled\n        } else if (this.pressed) {\n            img = this.imgPressed\n        } else if (this.hover) {\n            img = this.imgHover\n        }\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from './ScreenLayer'\nimport { RewardCfg } from '../cfg/RewardCfg'\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { RewardScreenButton } from '../menu/RewardScreenButton'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { clearTimeoutSafe } from '../core/Util'\n\nexport class RewardScreen extends BaseScreen {\n\n    onAdvance: () => void\n    cfg: RewardCfg = null\n    titleFont: BitmapFont\n    resultsLayer: ScaledLayer\n    descriptionTextLayer: ScaledLayer\n    btnLayer: ScaledLayer\n    resultIndex: number = 0\n    resultLastIndex: number = 0\n    images: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    boxes: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    fonts = {}\n    texts: HTMLCanvasElement[] = []\n    uncoverTimeout = null\n    btnSave: RewardScreenButton\n    btnAdvance: RewardScreenButton\n\n    constructor() {\n        super()\n        this.cfg = ResourceManager.getResource('Reward')\n        this.titleFont = ResourceManager.getBitmapFont(this.cfg.titleFont)\n        const backgroundImg = ResourceManager.getImage(this.cfg.wallpaper)\n        const backgroundLayer = this.addLayer(new ScaledLayer())\n        backgroundLayer.onRedraw = (context) => context.drawImage(backgroundImg, 0, 0)\n        this.cfg.images.forEach((img) => {\n            this.images.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        this.cfg.boxImages.forEach((img) => {\n            this.boxes.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        Object.keys(this.cfg.fonts).forEach((fontKey, index) => {\n            const font = ResourceManager.getBitmapFont(this.cfg.fonts[fontKey])\n            this.fonts[fontKey.toLowerCase()] = font\n            const txt = this.cfg.texts[index]\n            const labelFont = index < 9 ? font : ResourceManager.getBitmapFont(this.cfg.backFont)\n            this.texts.push(labelFont.createTextImage(txt.text))\n        })\n        this.resultsLayer = this.addLayer(new ScaledLayer())\n        this.resultsLayer.handlePointerEvent = ((eventType) => {\n            if (eventType === POINTER_EVENT.UP) {\n                this.uncoverTimeout = clearTimeoutSafe(this.uncoverTimeout)\n                this.uncoverTimeout = null\n                this.resultIndex = this.resultLastIndex\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n                this.redraw()\n                return true\n            }\n            return false\n        })\n        this.descriptionTextLayer = this.addLayer(new ScaledLayer(), 20)\n        this.btnLayer = this.addLayer(new ScaledLayer(), 50)\n        this.btnSave = new RewardScreenButton(this.cfg.saveButton)\n        this.btnSave.disabled = true\n        this.btnAdvance = new RewardScreenButton(this.cfg.advanceButton)\n        this.btnLayer.handlePointerEvent = ((eventType, event) => {\n            if (eventType === POINTER_EVENT.MOVE) {\n                const [sx, sy] = this.btnLayer.toScaledCoords(event.clientX, event.clientY)\n                this.btnSave.checkHover(sx, sy)\n                this.btnAdvance.checkHover(sx, sy)\n            } else if (eventType === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    this.btnSave.checkSetPressed()\n                    this.btnAdvance.checkSetPressed()\n                }\n            } else if (eventType === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    if (this.btnSave.pressed) {\n                        this.btnSave.setReleased()\n                        // TODO switch to save screen\n                    } else if (this.btnAdvance.pressed) {\n                        this.btnAdvance.setReleased()\n                        this.hide()\n                        this.onAdvance()\n                    }\n                }\n            }\n            if (this.btnSave.needsRedraw || this.btnAdvance.needsRedraw) this.redraw()\n            return false\n        })\n        this.btnLayer.onRedraw = (context) => {\n            this.btnSave.draw(context)\n            this.btnAdvance.draw(context)\n        }\n    }\n\n    show() {\n        this.resultIndex = 0\n        this.btnSave.visible = false\n        this.btnAdvance.visible = false\n        this.uncoverResult()\n        const levelFullNameImg = this.titleFont.createTextImage(GameState.levelFullName)\n        let resultText = this.cfg.quitText\n        this.resultLastIndex = this.images.length - 2\n        if (GameState.resultState === GameResultState.COMPLETE) {\n            resultText = this.cfg.completeText\n            this.resultLastIndex = this.images.length - 1\n        } else if (GameState.resultState === GameResultState.FAILED) {\n            resultText = this.cfg.failedText\n        }\n        const resultValues = []\n        resultValues.push(this.fonts['crystals'].createTextImage(this.percentString(GameState.numCrystal, GameState.neededCrystals)))\n        resultValues.push(this.fonts['ore'].createTextImage(this.percentString(GameState.numOre, GameState.totalOres)))\n        resultValues.push(this.fonts['diggable'].createTextImage(this.percentString(GameState.remainingDiggables, GameState.totalDiggables, true)))\n        resultValues.push(this.fonts['constructions'].createTextImage(GameState.buildings.length.toString()))\n        resultValues.push(this.fonts['caverns'].createTextImage(this.percentString(GameState.discoveredCaverns, GameState.totalCaverns)))\n        resultValues.push(this.fonts['figures'].createTextImage(this.percentString(GameState.raiders.length, GameState.getMaxRaiders())))\n        resultValues.push(this.fonts['rockmonsters'].createTextImage(this.percentString(0))) // TODO show defence report, is either 0% or 100%\n        resultValues.push(this.fonts['oxygen'].createTextImage(this.percentString(GameState.airlevel)))\n        resultValues.push(this.fonts['timer'].createTextImage(this.timeString(GameState.gameTimeSeconds)))\n        resultValues.push(this.fonts['score'].createTextImage(this.percentString(GameState.score)))\n        const gameResultTextImg = this.titleFont.createTextImage(resultText)\n        this.resultsLayer.onRedraw = (context) => {\n            context.clearRect(0, 0, this.resultsLayer.fixedWidth, this.resultsLayer.fixedHeight)\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const img = this.images[c]\n                if (img) context.drawImage(img.img, img.x, img.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const box = this.boxes[c]\n                if (box) context.drawImage(box.img, box.x, box.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const txt = this.cfg.texts[c]\n                const text = resultValues[c]\n                if (text) context.drawImage(text, txt.x - text.width / 2, txt.y)\n            }\n            context.drawImage(levelFullNameImg, this.resultsLayer.fixedWidth / 2 - levelFullNameImg.width / 2, this.cfg.vertSpacing - levelFullNameImg.height / 2)\n            context.drawImage(gameResultTextImg, this.resultsLayer.fixedWidth / 2 - gameResultTextImg.width / 2, this.cfg.vertSpacing + levelFullNameImg.height / 2)\n        }\n        this.descriptionTextLayer.onRedraw = (context) => {\n            const descriptionTextImg = this.texts[this.resultIndex]\n            context.clearRect(0, this.cfg.textPos[1], this.descriptionTextLayer.fixedWidth, this.descriptionTextLayer.fixedHeight - this.cfg.textPos[1])\n            const tx = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[0] : 305\n            const ty = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[1] : 195\n            context.drawImage(descriptionTextImg, tx - descriptionTextImg.width / 2, ty)\n        }\n        super.show()\n    }\n\n    percentString(actual, max = 1, lessIsMore: boolean = false) {\n        if (max === 0) max = 1\n        let value = Math.round(Math.max(Math.min(actual / max, 1), 0) * 100)\n        if (lessIsMore) value = 100 - value\n        return value.toString() + '%'\n    }\n\n    padLeft(value: string, padding = '0', length = 2) {\n        while (value.length < length) value = padding + value\n        return value\n    }\n\n    timeString(seconds: number) {\n        const ss = this.padLeft((seconds % 60).toString())\n        const minutes = Math.floor(seconds / 60)\n        const mm = this.padLeft(((minutes % 60).toString()))\n        const hh = this.padLeft((Math.floor(minutes / 60).toString()))\n        return hh + ':' + mm + ':' + ss\n    }\n\n    uncoverResult() {\n        this.uncoverTimeout = setTimeout(() => {\n            this.uncoverTimeout = null\n            this.resultIndex++\n            if (this.resultIndex < this.resultLastIndex) {\n                this.uncoverResult()\n            } else {\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n            }\n            this.redraw()\n        }, this.cfg.timer * 1000)\n    }\n\n}\n","import { ResourceManager } from './resource/ResourceManager'\nimport { LoadingScreen } from './screen/LoadingScreen'\nimport { MainMenuScreen } from './screen/MainMenuScreen'\nimport { GameScreen } from './screen/GameScreen'\nimport { RewardScreen } from './screen/RewardScreen'\nimport { GameState } from './game/model/GameState'\nimport { WadFileSelectionModal } from '../site/modal/WadFileSelectionModal'\n\n// define constants\n\nexport const DEV_MODE = process.env.WEBPACK_MODE === 'development'\nif (DEV_MODE) console.warn('DEV MODE ACTIVE')\n\nexport const JOB_SCHEDULE_INTERVAL = 1000 // milliseconds\nexport const CHECK_CLEARRUBBLE_INTERVAL = 5000 // milliseconds\nexport const JOB_ACTION_RANGE = 5\nexport const CHECK_SPANW_RAIDER_TIMER = 1000 // milliseconds\nexport const MAX_RAIDER_BASE = 12\nexport const MAX_RAIDER_REQUEST = 9\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10\nexport const UPDATE_OXYGEN_TIMER = 5000 // milliseconds\n\nexport const PANEL_ANIMATION_MULTIPLIER = 3\nexport const HEIGHT_MULTIPLER = 0.1\nexport const SEQUENCE_TEXTURE_FRAMERATE = 5\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640\nexport const SPRITE_RESOLUTION_HEIGHT = 480\nexport const TILESIZE = 40\nexport const NATIVE_FRAMERATE = 30\n\n// setup and link all components\n\nconst loadingScreen = new LoadingScreen()\nconst wadfileSelectModal = new WadFileSelectionModal('game-container')\n\nwadfileSelectModal.onStart = (wad0Url, wad1Url) => {\n    ResourceManager.startLoadingFromUrl(wad0Url, wad1Url)\n}\nResourceManager.onMessage = (msg: string) => {\n    loadingScreen.setLoadingMessage(msg)\n}\nResourceManager.onCacheMissed = () => {\n    wadfileSelectModal.show()\n}\nResourceManager.onInitialLoad = (totalResources: number) => {\n    wadfileSelectModal.hide()\n    loadingScreen.enableGraphicMode(totalResources)\n}\nResourceManager.onAssetLoaded = () => {\n    loadingScreen.increaseLoadingState()\n}\nResourceManager.onLoadDone = () => {\n    // complete setup\n    const mainMenuScreen = new MainMenuScreen()\n    const gameScreen = new GameScreen()\n    const rewardScreen = new RewardScreen()\n\n    mainMenuScreen.onLevelSelected = (levelName) => {\n        try {\n            gameScreen.startLevel(levelName)\n        } catch (e) {\n            console.error('Could not load level: ' + levelName, e)\n            gameScreen.hide()\n            mainMenuScreen.showLevelSelection()\n        }\n    }\n    gameScreen.onLevelEnd = () => {\n        gameScreen.hide()\n        rewardScreen.show()\n    }\n    rewardScreen.onAdvance = () => {\n        GameState.reset()\n        mainMenuScreen.showLevelSelection()\n    }\n\n    // setup complete\n    loadingScreen.hide()\n    const params = new URLSearchParams(window.location.search)\n    const entry = params.get('entry')\n    if (DEV_MODE && entry) {\n        GameState.numOre = Number(params.get('numOre')) || 0\n        GameState.numCrystal = Number(params.get('numCrystal')) || 0\n        if (entry === 'level') mainMenuScreen.showLevelSelection()\n        else if (entry === 'reward') rewardScreen.show()\n        else if (entry) mainMenuScreen.selectLevel(entry)\n    } else {\n        mainMenuScreen.showMainMenu()\n    }\n}\n\n// start the game engine with loading resources\n\nloadingScreen.show()\nResourceManager.startLoadingFromCache()\n"],"sourceRoot":""}