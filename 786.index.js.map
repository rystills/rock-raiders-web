{"version":3,"sources":["webpack://rock-raiders-web/./site/modal/WadFileSelectionModal.ts","webpack://rock-raiders-web/./src/resource/wadworker/Resources.ts","webpack://rock-raiders-web/./src/resource/wadworker/InitLoadingMessage.ts","webpack://rock-raiders-web/./src/core/ImageHelper.js","webpack://rock-raiders-web/./src/resource/wadworker/WadUtil.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimationEntityType.ts","webpack://rock-raiders-web/./src/resource/AnimatedMesh.ts","webpack://rock-raiders-web/./src/resource/LWOLoader.ts","webpack://rock-raiders-web/./src/game/model/Selectable.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimClip.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimSubObj.ts","webpack://rock-raiders-web/./src/scene/DebugHelper.ts","webpack://rock-raiders-web/./src/game/model/entity/building/Building.ts","webpack://rock-raiders-web/./src/scene/model/BaseEntity.ts","webpack://rock-raiders-web/./src/event/EventKeyEnum.ts","webpack://rock-raiders-web/./src/event/EventBus.ts","webpack://rock-raiders-web/./src/event/WorldEvents.ts","webpack://rock-raiders-web/./src/event/GameEvent.ts","webpack://rock-raiders-web/./src/game/model/job/JobState.ts","webpack://rock-raiders-web/./src/game/model/job/JobType.ts","webpack://rock-raiders-web/./src/game/model/job/Job.ts","webpack://rock-raiders-web/./src/scene/model/PathTarget.ts","webpack://rock-raiders-web/./src/scene/model/collect/CollectableEntity.ts","webpack://rock-raiders-web/./src/game/model/job/CollectJob.ts","webpack://rock-raiders-web/./src/scene/model/activities/BaseActivity.ts","webpack://rock-raiders-web/./src/scene/model/activities/AnimEntityActivity.ts","webpack://rock-raiders-web/./src/scene/model/activities/RaiderActivity.ts","webpack://rock-raiders-web/./src/scene/model/activities/BuildingActivity.ts","webpack://rock-raiders-web/./src/scene/model/CollectionTarget.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityIdentifier.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimEntity.ts","webpack://rock-raiders-web/./src/scene/model/activities/DynamiteActivity.ts","webpack://rock-raiders-web/./src/scene/model/collect/Dynamite.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/scene/model/collect/Crystal.ts","webpack://rock-raiders-web/./src/scene/model/collect/Ore.ts","webpack://rock-raiders-web/./src/scene/model/RaiderSkill.ts","webpack://rock-raiders-web/./src/resource/wadworker/WorkerMessage.ts","webpack://rock-raiders-web/./src/scene/SceneManager.ts","webpack://rock-raiders-web/./src/resource/LWSCLoader.ts","webpack://rock-raiders-web/./src/resource/AnimEntityLoader.ts","webpack://rock-raiders-web/./src/core/BitmapFont.ts","webpack://rock-raiders-web/./src/cfg/BaseConfig.ts","webpack://rock-raiders-web/./src/event/EventTypeEnum.ts","webpack://rock-raiders-web/./src/cfg/BuildingEntityStats.ts","webpack://rock-raiders-web/./src/cfg/MovableEntityStats.ts","webpack://rock-raiders-web/./src/cfg/GameStatsCfg.ts","webpack://rock-raiders-web/./src/resource/ResourceManager.ts","webpack://rock-raiders-web/./src/screen/ScreenLayer.ts","webpack://rock-raiders-web/./src/event/EventManager.ts","webpack://rock-raiders-web/./src/scene/model/map/Surface.ts","webpack://rock-raiders-web/./src/screen/BaseScreen.ts","webpack://rock-raiders-web/./src/screen/LoadingScreen.ts","webpack://rock-raiders-web/./src/menu/MainMenuBaseItem.ts","webpack://rock-raiders-web/./src/menu/MainMenuLabelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuIconButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLayer.ts","webpack://rock-raiders-web/./src/menu/MainMenuLevelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuPanel.ts","webpack://rock-raiders-web/./src/menu/MainMenuWindow.ts","webpack://rock-raiders-web/./src/menu/LevelSelectLayer.ts","webpack://rock-raiders-web/./src/screen/MainMenuScreen.ts","webpack://rock-raiders-web/./src/scene/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/scene/model/map/SurfaceGeometry.ts","webpack://rock-raiders-web/./src/event/WorldLocationEvent.ts","webpack://rock-raiders-web/./src/scene/model/map/astar.ts","webpack://rock-raiders-web/./src/scene/TerrainLoader.ts","webpack://rock-raiders-web/./src/scene/model/map/TerrainPath.ts","webpack://rock-raiders-web/./src/scene/model/map/Terrain.ts","webpack://rock-raiders-web/./src/scene/model/EntityStep.ts","webpack://rock-raiders-web/./src/scene/model/MoveState.ts","webpack://rock-raiders-web/./src/scene/model/MovableEntity.ts","webpack://rock-raiders-web/./src/scene/model/FulfillerEntity.ts","webpack://rock-raiders-web/./src/scene/model/RaiderTool.ts","webpack://rock-raiders-web/./src/scene/model/Raider.ts","webpack://rock-raiders-web/./src/scene/model/BuildingEntity.ts","webpack://rock-raiders-web/./src/scene/model/activities/MonsterActivity.ts","webpack://rock-raiders-web/./src/game/model/entity/monster/Monster.ts","webpack://rock-raiders-web/./src/game/model/entity/monster/SmallSpider.ts","webpack://rock-raiders-web/./src/game/model/entity/monster/Bat.ts","webpack://rock-raiders-web/./src/scene/ObjectListLoader.ts","webpack://rock-raiders-web/./src/game/model/job/surface/SurfaceJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/DynamiteJob.ts","webpack://rock-raiders-web/./src/core/NerpRunner.ts","webpack://rock-raiders-web/./src/core/NerpParser.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityList.ts","webpack://rock-raiders-web/./src/game/model/job/MoveJob.ts","webpack://rock-raiders-web/./src/scene/WorldManager.ts","webpack://rock-raiders-web/./src/game/layer/SelectionLayer.ts","webpack://rock-raiders-web/./src/game/model/job/surface/DrillJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ClearRubbleJob.ts","webpack://rock-raiders-web/./src/game/layer/GameLayer.ts","webpack://rock-raiders-web/./src/game/gui/base/BaseElement.ts","webpack://rock-raiders-web/./src/game/gui/base/Panel.ts","webpack://rock-raiders-web/./src/game/gui/base/Button.ts","webpack://rock-raiders-web/./src/game/gui/sidebar/SideBarLabel.ts","webpack://rock-raiders-web/./src/game/gui/sidebar/PanelCrystalSideBar.ts","webpack://rock-raiders-web/./src/game/gui/infodock/ButtonInfoDockCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/ButtonPriorityListCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/ButtonTopCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonsCfg.ts","webpack://rock-raiders-web/./src/game/gui/radar/RadarPanel.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessage.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/MessagePanel.ts","webpack://rock-raiders-web/./src/cfg/IconPanelBackButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/MenuItemCfg.ts","webpack://rock-raiders-web/./src/game/gui/main/IconPanelButton.ts","webpack://rock-raiders-web/./src/game/gui/main/IconSubPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/BuildingPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SmallVehiclePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/LargeVehiclePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectBasePanel.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ReinforceJob.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectWallPanel.ts","webpack://rock-raiders-web/./src/game/model/job/surface/CompletePowerPathJob.ts","webpack://rock-raiders-web/./src/scene/model/BuildingSite.ts","webpack://rock-raiders-web/./src/scene/model/collect/ElectricFence.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectFloorPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectRubblePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/IconPanelToggleButton.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectBuildingPanel.ts","webpack://rock-raiders-web/./src/game/model/job/EatJob.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectRaiderPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectVehiclePanel.ts","webpack://rock-raiders-web/./src/core/Area.ts","webpack://rock-raiders-web/./src/game/model/job/TrainJob.ts","webpack://rock-raiders-web/./src/game/gui/main/TrainRaiderPanel.ts","webpack://rock-raiders-web/./src/game/model/job/GetToolJob.ts","webpack://rock-raiders-web/./src/game/gui/main/GetToolPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/IconPanelButtonLabel.ts","webpack://rock-raiders-web/./src/game/gui/main/MainPanel.ts","webpack://rock-raiders-web/./src/game/gui/base/ToggleButton.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/TopPanel.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoDockButton.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoDockPanel.ts","webpack://rock-raiders-web/./src/cfg/PanelsCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityListPanel.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoMessagesEntryConfig.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoMessagesConfig.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InformationPanel.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityButtonsConfig.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityPositionsEntry.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessageEntryConfig.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessageConfig.ts","webpack://rock-raiders-web/./src/game/layer/GuiBaseLayer.ts","webpack://rock-raiders-web/./src/game/layer/GuiMainLayer.ts","webpack://rock-raiders-web/./src/game/Supervisor.ts","webpack://rock-raiders-web/./src/game/gui/briefing/BriefingPanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuCycleItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuSliderItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuLabelItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuLayer.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuBasePanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/OptionsPanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/PausePanel.ts","webpack://rock-raiders-web/./src/core/Rect.ts","webpack://rock-raiders-web/./src/cfg/DialogCfg.ts","webpack://rock-raiders-web/./src/cfg/BriefingPanelCfg.ts","webpack://rock-raiders-web/./src/game/layer/OverlayLayer.ts","webpack://rock-raiders-web/./src/screen/GameScreen.ts","webpack://rock-raiders-web/./src/menu/RewardScreenButton.ts","webpack://rock-raiders-web/./src/screen/RewardScreen.ts","webpack://rock-raiders-web/./src/main.ts"],"names":["parentId","onStart","rootElement","document","getElementById","appendChild","createElement","classList","add","tabIndex","setAttribute","modalDialog","modalContent","modalHeader","modalTitle","innerText","id","modalBody","navTabList","navFileBtn","WadFileSelectionModal","appendNavButton","navUrlBtn","navTabContent","this","appendNavFileTab","appendNavUrlTab","modal","backdrop","keyboard","parent","active","controlTarget","navBtn","type","String","labelledBy","navFileTab","appendNavTab","wad0File","appendWadFileGroup","wad1File","btnStartFile","addEventListener","disabled","wad0FileUrl","URL","createObjectURL","files","wad1FileUrl","filename","wadFileGroup","wadFileLabel","innerHTML","wadFileInput","required","navUrlTab","urlHint","wad0Url","appendWadUrlGroup","wad1Url","btnStartUrl","value","navTab","example","wadUrlGroup","wadUrlLabel","wadUrlInput","show","hide","Worker_fn","Worker","createContext","width","height","console","error","result","y","x","fillStyle","fillRect","createDummyContext","canvas","context","getContext","createDummyImgData","ImageData","e","px","py","setPixel","imgData","r","g","b","a","n","data","getPixel","iGet","obj","keys","forEach","keyname","Object","filter","key","toLowerCase","map","url","strUrl","toString","replace","startsWith","substring","lastInd","lastIndexOf","decodeString","TextDecoder","decode","decodeFilepath","getRandomInclusive","min","max","Math","ceil","floor","random","getRandom","getRandomSign","clearTimeoutSafe","timeout","clearTimeout","clearIntervalSafe","interval","clearInterval","Array","prototype","remove","element","index","indexOf","splice","Map","getOrUpdate","updateCallback","get","undefined","set","carryNullName","depositNullName","toolNullName","mediumPoly","highPoly","fPPoly","activities","mesh","textureSequences","dispose","s","geometry","isArray","material","mat","SURF_VTRN","getVector3AtOffset","view","offset","vector","getFloat32","z","SelectionType","path","verbose","materials","vertices","indices","uvs","sequenceIntervals","log","parsePoints","chunkOffset","chunkSize","numVertices","Float32Array","i","vertexIndex","vertexOffset","parseSurfaceNames","buffer","surfaceNames","Uint8Array","split","length","new_material","name","side","push","parsePolygons","totalNumIndices","numIndices","getInt16","materialIndex","addGroup","currentIndex","Uint16Array","faceIndices","Int16Array","COUNTER_CLOCKWISE","parseSurface","getUint8","materialName","textureFlags","textureSize","textureCenter","subchunkOffset","subchunkType","getInt32","subchunkSize","colorArray","color","fromArray","join","flags","getUint16","luminosity","diffuse","specular","reflection","reflectivity","transparency","opacity","transparent","luminosity2","diffuse2","specular2","toArray","textureTypeName","textureColorArray","textureFilepath","sequenceTexture","endsWith","textureFilename","match","ResourceManager","filterTextureSequenceNames","setInterval","getTexture","SEQUENCE_TEXTURE_FRAMERATE","alphaTest","warn","size","center","XAXIS_BIT","groups","group","start","count","uvIndex","u","v","planarMapUVS","parse","DataView","getUint32","fileSize","byteLength","ID4_SIZE","cursor","chunkType","setIndex","computeVertexNormals","AnimatedMesh","magic","looping","transcoef","firstFrame","lastFrame","framesPerSecond","bodies","degToRad","relPos","relRot","relScale","parentObjInd","model","radVec","degX","degY","degZ","setFrameAndFollowing","animationFrameIndex","infos","c","setOpacityAndFollowing","Stats","stats","setMode","domElement","style","position","left","top","body","visibility","renderStart","begin","renderDone","end","folder","blocksPathSurface","secondaryBuildingPart","secondaryPowerPath","hasPrimaryPowerPath","waterPathSurface","aeFile","slice","getByName","buildingType","TOOLSTATION","TELEPORT_PAD","DOCKS","POWER_STATION","BARRACKS","UPGRADE","GEODOME","ORE_REFINERY","GUNSTATION","TELEPORT_BIG","Building","EventKey","level","getPosition","clone","getPosition2D","getHeading","rotation","onDiscover","visible","getCurrentSurface","worldMgr","sceneManager","terrain","getSurfaceFromWorld","removeFromScene","scene","EntityType","publishEvent","event","blockedEvents","includes","eventKey","isLocal","getListener","callback","registerEventListener","eventListener","entityKey","GameEvent","job","WorldEvent","JOB_CREATE","JobEvent","JOB_DELETE","RAIDER_REQUESTED","collectableType","MATERIAL_AMOUNT_CHANGED","surface","SPAWN_DYNAMITE","entity","ENTITY_ADDED","ENTITY_REMOVED","JobState","CAVERN_DISCOVERED","ORE_FOUND","building","BUILDING_UPGRADED","raider","skill","RAIDER_TRAINED","JobType","fulfiller","jobstate","OPEN","assign","unassign","cancel","CANCELED","stopJob","isQualified","isQualifiedWithTool","isQualifiedWithTraining","onJobComplete","COMPLETE","Job","CollectableType","location","targetLocation","isInArea","item","COLLECT","getWorkplaces","PathTarget","carries","hasTarget","getPriorityIdentifier","getCollectableType","ELECTRIC_FENCE","electricFence","targetSurface","canPlaceFence","fence","PublicJob","activityKey","Stand","AnimEntityActivity","BaseActivity","Route","RaiderActivity","RunPanic","Drill","Walk","Reinforce","Reverse","TurnLeft","TurnRight","CantDo","Collect","Clear","Carry","CarryTurnLeft","CarryTurnRight","CarryStand","Dynamite","Place","Deposit","TeleportIn","Repair","rest","routeRubble","CarryRubble","Eat","FireLaser","GetUp","ThrownByRockMonster","Slip","Train","Recharge","Waiting1","Waiting2","Waiting3","Waiting4","Hoverboard","Standhoverboard","HitLefthoverboard","HitRighthoverboard","HitFronthoverboard","HitBackhoverboard","SMALLTRUCK","StandSMALLTRUCK","HitLeftSMALLTRUCK","HitRightSMALLTRUCK","HitFrontSMALLTRUCK","HitBackSMALLTRUCK","SMALLheli","StandSMALLheli","HitLeftSMALLheli","HitRightSMALLheli","HitFrontSMALLheli","HitBackSMALLheli","SMALLCAT","StandSMALLCAT","HitLeftSMALLCAT","HitRightSMALLCAT","HitFrontSMALLCAT","HitBackSMALLCAT","SMALLMLP","StandSMALLMLP","HitLeftSMALLMLP","HitRightSMALLMLP","HitFrontSMALLMLP","HitBackSMALLMLP","LARGECAT","StandLARGECAT","HitLeftLARGECAT","HitRightLARGECAT","HitFrontLARGECAT","HitBackLARGECAT","SMALLDIGGER","StandSMALLDIGGER","Teleport","BuildingActivity","Explode","Unpowered","site","canGatherItem","activity","getDefaultActivity","gatherItem","addItem","carryJoint","changeActivity","CollectPathTarget","addItemToStorage","CRYSTAL","GameState","numCrystal","EventBus","MaterialAmountChanged","ORE","numOre","getDropAction","targets","targetSite","updateTargets","getCarryTargets","resetTarget","sites","buildingSites","needs","getRandomDropPosition","buildings","getBuildingsByType","getTargetBuildingTypes","getDropPosition2D","some","t","complete","isPowered","collectablesUndiscovered","collectables","JobCreateEvent","CollectJob","setTargetSite","unAssign","BaseEntity","PriorityIdentifier","LocalEvent","SELECTED_SURFACE","SelectionEvent","SELECTED_BUILDING","SELECTED_RAIDER","vehicle","SELECTED_VEHICLE","DESELECTED_ENTITY","SURFACE_CHANGED","AIR_LEVEL_CHANGED","entityType","poly","animation","animationTimeout","selectionFrame","pickSphere","pickSphereRadius","depositJoint","getToolJoint","radiusSq","beamUp","EntityDeselected","AnimEntity","moveUp","TILESIZE","counter","NATIVE_FRAMERATE","setTimeout","onAnimationDone","durationTimeMs","lActivityKey","anim","setAnimation","bind","children","polyModel","lBodyName","polyPart","parentInd","sphere","setFromObject","getBoundingSphere","radius","animate","frameIndex","p","copy","scale","hasOwnProperty","nextFrame","standardDurationTimeMs","timeoutTimeMs","createPickSphere","pickSphereCenter","getPickSphereCenter","userData","selectable","createSelectionFrame","getBoundingBoxCenter","getCenter","sub","applyMatrix4","makeScale","selectionFrameTextureSize","ctx","strength","round","selectionFrameTexture","selectionMaterial","depthTest","selectionFrameSize","Normal","DynamiteActivity","TickDown","getAnimationEntityType","isExplodable","hasOneBuildingOf","getDigPositions","DYNAMITE","ignite","getCenterWorld","lookAt","collapse","GameResultState","resource2","getResource","mesh2","SceneManager","registerMesh","LWOLoader","emissive","depthWrite","resource","PowerCrystal","aiPriorityCrystal","CollectableEntity","Ore","aiPriorityOre","DRIVER","RaiderSkill","ENGINEER","GEOLOGIST","PILOT","SAILOR","DEMOLITION","WorkerMessageType","reset","resultState","RUNNING","levelFullName","numBrick","usedCrystals","neededCrystals","airlevel","selectedEntities","selectionType","buildingsUndiscovered","raiders","raidersUndiscovered","requestedRaiders","vehicles","vehiclesUndiscovered","spiders","spidersBySurface","bats","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","discoveredCaverns","levelStartTime","levelStopTime","rewardConfig","priorityList","oxygenRate","buildingTypes","bt","getClosestBuildingByType","targetBuildings","closest","minDist","bPos","getDropPosition","dist","distanceToSquared","hasBuildingWithUpgrades","upgrades","getTrainingSites","training","TrainDynamite","selectEntities","entities","previouslySelected","stillSelected","deselect","selectionEvents","freshlySelected","selectionEvent","select","len","GROUP","getSelectionType","getMaxRaiders","MAX_RAIDER_BASE","ADDITIONAL_RAIDER_PER_SUPPORT","discoverSurface","minX","minZ","maxX","maxZ","discoverEntities","undiscovered","discovered","pos","dropMaterial","quantity","Crystal","quota","importance","scoreCrystals","crystals","Infinity","scoreTimer","gameTimeSeconds","timer","scoreCaverns","caverns","scoreConstructions","constructions","scoreOxygen","oxygen","scoreFigures","figures","SURFACE","BUILDING","getNearbySpiders","currentSurface","nearbySpiders","getSurface","maxFps","debugHelper","DebugHelper","renderer","antialias","setClearColor","camera","controls","mouseButtons","LEFT","MIDDLE","RIGHT","selectEntitiesByRay","rx","ry","raycaster","setFromCamera","intersects","intersectObjects","floorGroup","selected","object","selectEntitiesInFrustum","r1x","r1y","r2x","r2y","startPoint","endPoint","Number","EPSILON","updateProjectionMatrix","updateMatrixWorld","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","setFromMatrixPosition","matrixWorld","unproject","vectemp1","vectemp2","vectemp3","normalize","deep","MAX_VALUE","multiplyScalar","frustum","planes","setFromCoplanarPoints","normal","containsPoint","getSelectionCenter","setupScene","ambientColor","ambientLight","cursorTorchlight","distance","startScene","renderInterval","animRequest","requestAnimationFrame","render","disposeScene","cancelAnimationFrame","meshRegistry","animatedMesh","animationClip","AnimClip","lines","lineIndex","content","l","trim","sceneFileVersion","parseInt","line","parseFrameBlock","parseObjectBlock","parseLine","frameStep","subObj","AnimSubObj","lwoBuffer","lenInfos","lenFrames","numOfInformationChannels","numOfKeyframes","frameNum","loadModels","root","getPath","AnimationEntityType","polyname","polykey","act","file","isLws","LWSCLoader","fontImageData","cols","rows","letters","chars","maxCharWidth","getActualCharacterWidth","rowPixelIndex","colPixelIndex","charHeight","extractData","actualWidth","startX","startY","alpha","createTextImage","text","maxWidth","autoCenter","determineRows","row","rowX","rowY","letterX","letterImgData","charAt","img","putImageData","spaceWidth","rowText","rowWidth","word","wordWidth","letter","letterImg","createTextMessage","msg","MSG","createCfgLoaded","cfg","totalResources","CFG","createAssetLoaded","assetIndex","assetName","assetObj","ASSET","createLoadDone","loadingTimeSeconds","DONE","MOUSE_BUTTON","POINTER_EVENT","KEY_EVENT","setFromCfg","config","cfgObj","cfgKey","lCfgKeyName","objKey","assignValue","cfgValue","currentValue","currentIsArray","parsedValue","parseValue","parsedIsArray","Levels","SelfPowered","PowerBuilding","PickSphere","CostOre","CostCrystal","OxygenCoef","getByType","Toolstation","TeleportPad","Docks","Powerstation","Barracks","Upgrade","Geodome","OreRefinery","GunStation","TeleportBIG","BaseConfig","RouteSpeed","RubbleCoef","PathCoef","Pilot","SoilDrillTime","LooseDrillTime","MedDrillTime","HardDrillTime","SeamDrillTime","UpgradeTime","CollRadius","CollHeight","TrackDist","SingleWidthDig","RepairValue","SurveyRadius","Drillsound","Drillfadesound","RestPercent","EnergyDecayRate","CanClearRubble","NumOfToolsCanCarry","CrossLand","RouteAvoidance","UseLegoManTeleporter","AwarenessRange","CanStrafe","EnterToolStore","ShowHealthBar","RockMonster","AlertRadius","HealthDecayRate","CanScare","CarryMinHealth","PainThreshold","StampRadius","AttackRadius","CanSteal","GrabMinifigure","BumpDamage","AttackPaths","SplitOnZeroHealth","CanBeHitByFence","Capacity","CanBeShotAt","CanFreeze","FreezerTime","FreezerDamage","CanLaser","LaserDamage","CanPush","PusherDist","PusherDamage","WakeRadius","ScaredByBigBangs","RemoveReinforcement","SmallSpider","RandomMove","RandomEnterWall","CauseSlip","DontShowDamage","DontShowOnRadar","MovableEntityStats","Bat","randomMoveTime","Flocks","FlocksDebug","FlocksSmooth","FlocksSize","FlocksTurn","FlocksSpeed","FlocksTightness","FlocksGoalUpdate","FlocksRandomness","FlocksHeight","CrossWater","CrossLava","TinyRM","ScaredByPlayer","TinyIM","Slug","UseHoles","DrainPower","LavaMonster","IceMonster","CanBeDriven","UseSmallTeleporter","UpgradeCostOre","UpgradeCostStuds","EngineSound","SmallHeli","Smallmlp","Tracker","CanDoubleSelect","SmallCat","UseWaterTeleporter","MaxCarry","GetInAtLand","GetOutAtLand","TakeCarryingDrivers","SmallDigger","VehicleCanBeCarried","SmallTruck","CarryStart","Bulldozer","UseBigTeleporter","InvisibleDriver","WalkerDigger","DrillSound","DrillFadeSound","LargeDigger","LargeCat","ClassAsLarge","CarryVehicles","LargeHeli","LargeMLP","CostRefinedOre","SnaxULike","TrainDriver","CrystalDrain","DamageCausesCallToArms","BuildingEntityStats","ProcessCrystal","ProcessOre","SmallTeleporter","ManTeleporter","TrainPilot","BigTeleporter","WaterEntrances","WaterTeleporter","TrainSailor","ToolStore","StoreObjects","FunctionCoef","TrainScanner","UpgradeBuilding","TrainRepair","ProcessedOre","Boulder","Pusher","Freezer","LaserShot","ColRadius","ElectricFence","Path","startLoadingFromCache","startLoading","startLoadingFromUrl","InitLoadingMessage","worker","onmessage","resourceByName","onAssetLoaded","onMessage","configuration","GameStatsCfg","onInitialLoad","CACHE_MISS","onCacheMissed","onLoadDone","postMessage","basename","lBasename","resourceName","lName","getImageData","imageName","lImageName","getImage","getImageOrNull","textureName","lTextureName","lSharedTextureName","texture","needsUpdate","getMap","aeFilename","cfgRoot","AnimEntityLoader","getBitmapFont","fontCache","BitmapFont","getDefaultFont","withContext","background","setZIndex","zIndex","compareZ","layerA","layerB","aIndex","bIndex","resize","redraw","onRedraw","isActive","toCanvasCoords","windowX","windowY","clientRect","getBoundingClientRect","handlePointerEvent","eventEnum","handleKeyEvent","handleWheelEvent","fixedWidth","SPRITE_RESOLUTION_WIDTH","fixedHeight","SPRITE_RESOLUTION_HEIGHT","toScaledCoords","cx","cy","scaleX","scaleY","ScreenLayer","cursorName","createCursor","curUrl","revokeObjectURL","curImg","toDataURL","ScaledLayer","WALL_TYPE","screen","gameCanvasContainer","isInRect","preventDefault","MOVE","DOWN","UP","eventType","nonBubblingClone","PointerEvent","bubbles","clientX","clientY","pointerType","button","ctrlKey","metaKey","shiftKey","layers","sort","WheelEvent","deltaX","deltaY","deltaZ","ratio","focus","eventMgr","EventManager","window","onWindowResize","cursorLayer","addLayer","CursorLayer","layer","offsetWidth","maxHeight","offsetHeight","idealHeight","firstLayer","rect","right","bottom","setLoadingMessage","font","fillText","enableGraphicMode","imgBackground","imgProgress","imgLoading","drawImage","loadingBarWidth","increaseLoadingState","BaseScreen","scrollAffected","needsRedraw","hover","pressed","actionName","targetIndex","checkHover","sx","sy","onHoverChange","checkSetPressed","setReleased","draw","labelImgLo","labelImgHi","loFont","label","hiFont","target","MainMenuBaseItem","imgNormal","imgHover","imgPressed","tooltip","menuCfg","items","scrollY","scrollSpeedY","scrollInterval","menuImage","titleImage","fullName","itemsLabel","MainMenuLabelButton","MainMenuIconButton","displayTitle","that","setScrollY","absY","canScroll","scrollAreaHeight","setScrollSpeedY","MAIN","showMainMenu","selectLevel","levelKey","sign","pow","scrollYBefore","levelCfg","imgActive","imgInactive","imgCross","unlocked","frontEndX","frontEndY","menuBMP","frontEndOpen","area","w","h","imgFirstLine","imgSecondLine","setFirstLine","setSecondLine","modeLevel","levelsCfg","levelTextCfg","LevelTextCfg","MainMenuPanel","panelImgData","panelPos","levelTextWindow","MainMenuWindow","tutorial","levelsByName","levelButton","MainMenuLevelButton","MainMenuLayer","winCfg","panelCfg","onLevelSelected","menus","title","LevelSelectLayer","showLevelSelection","levelName","options","shaping","matIndex","drillable","drillableHard","explodable","reinforcable","getByNum","typeNum","SurfaceType","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","GROUND","POWER_PATH","POWER_PATH_SITE","create","wallType","topLeftVertex","bottomRightVertex","topRightVertex","bottomLeftVertex","topLeftHeight","topRightHeight","bottomRightHeight","bottomLeftHeight","uvOffset","INVERTED_CORNER","WALL","WEIRD_CREVICE","Boolean","uv","bufferVertices","bufferNormals","addFaceAndNormals","subVectors","cross","uvIndexes","bufferVertexUvs","bufferGeometry","BufferAttribute","copyVector3sArray","copyVector2sArray","LOCATION_DEATH","WorldLocationEvent","LOCATION_MONSTER","LOCATION_CRYSTAL_FOUND","LOCATION_UNDER_ATTACK","LOCATION_LANDSLIDE","LOCATION_POWER_DRAIN","LOCATION_SLUG_EMERGE","LOCATION_RAIDER_DISCOVERED","surfaceType","heightOffset","containedOres","containedCrystals","reinforced","jobs","surfaceRotation","seamLevel","fallinTimeout","fallinGrp","needsMeshUpdate","topLeftHeightOffset","topRightHeightOffset","bottomLeftHeightOffset","bottomRightHeightOffset","rubblePositions","hasPower","jobType","DRILL","REINFORCE","BLOW","surfaceJob","hasJobType","discoverNeighbors","foundCave","surf","getSurfaceOrNull","cancelJobs","getRandomPosition","CavernDiscovered","dropContainedOre","crystal","addCollectable","CrystalFoundEvent","isSupported","updateSurfaceMeshes","updateWorldMatrix","dropAmount","OreFoundEvent","JobDeleteEvent","updateJobColor","reduceRubble","shift","updateTexture","SurfaceChanged","surfLeft","surfTopLeft","surfTop","surfTopRight","surfRight","surfBottomRight","surfBottom","surfBottomLeft","isHighGround","surf1","surf2","surf3","updateMesh","force","updateGeometry","cancelReinforceJobs","graphWalk","grid","weight","getGraphWalkWeight","otherJobs","textureSet","texturebasename","updatePowerPathTexture","CORNER","accessMaterials","isPath","pathSum","PI","avgHeight","sum","cnt","args","HEIGHT_MULTIPLER","SurfaceGeometry","shininess","setHex","SurfaceSelectedEvent","colorPriority","hasRubble","isWalkable","isDrillable","isDrillableHard","isReinforcable","isDigable","digPosition","reinforce","getCenterWorld2D","getTerrainHeight","setFallinLevel","fallinLevel","originPos","targetPos","findFallInOrigin","findFallInTarget","scheduleFallin","targetX","targetY","createFallin","fallinPosition","LandslideEvent","dx","dy","rotateOnAxis","atan2","makeRubble","m","getFloorHeight","worldX","worldZ","dy0","Surface","interpolate","dy1","y0","y1","containedOre","setBuilding","resetGraphWalk","setHasPower","state","recursive","neighbors","pathTo","node","curr","unshift","PathMap","PredugMap","astar","search","graph","cleanDirty","heuristic","heuristics","manhattan","openHeap","BinaryHeap","f","closestNode","markDirty","currentNode","pop","closed","il","neighbor","isWall","gScore","getCost","beenVisited","visited","rescoreElement","pos0","pos1","abs","diagonal","D2","sqrt","d1","d2","cleanNode","gridIn","nodes","dirtyNodes","GridNode","init","ret","graphString","rowDebug","fromNeighbor","scoreFunction","sinkDown","bubbleUp","parentN","elemScore","child2N","child1N","swap","child1Score","child1","child2","locations","lengthSq","addLocation","surfaces","roofGroup","cachedPaths","bSurf","worldPosition","getSurfaceFromWorldXZ","getSurfaceFromWorld2D","clear","findPath","startSurface","endSurface","TerrainPath","cacheIdentifier","cachedPath","searchPath","startNode","endNode","worldPath","leftSurface","topSurface","rightSurface","bottomSurface","leftSurface2","topSurface2","rightSurface2","bottomSurface2","loadTerrain","levelConf","tileSize","blockSize","Terrain","themeName","terrainMap","pathMap","surfaceMap","predugMap","cryOreMap","fallinMap","erodeMap","surfaceTypeNum","predugLevel","CAVERN_EXPOSED","SLUG_HOLE_EXPOSED","SLUG_HOLE_HIDDEN","CAVERN_HIDDEN","pathMapLevel","NONE","RUBBLE","currentCryOre","Graph","MoveState","dz","vec","targetReached","currentPath","getSpeed","isOnPath","moveToClosestTarget","equals","paths","findPathToTarget","TARGET_UNREACHABLE","nextLocation","firstLocation","step","determineStep","TARGET_REACHED","getRouteActivity","MOVED","getEntityStep","entitySpeed","stepLengthSq","JOB_ACTION_RANGE","setLength","EntityStep","determinePosY","isOnRubble","workInterval","followUpJob","jobWorkplaces","work","resetWorkInterval","dropItem","getWorldPosition","pickupItem","setJob","MovableEntity","RaiderTool","HAMMER","SHOVEL","SPANNER","FREEZERGUN","LASER","PUSHERGUN","BIRDSCARER","tools","skills","slipped","EntityAddedEvent","RAIDER","RaiderDiscoveredEvent","RaiderSelected","isDriving","spider","slip","onDeath","moveToClosestWorkplace","drillTimeMs","focusPoint","rotateAround","completeJob","CLEAR_RUBBLE","dynamite","moveResult","dropAction","TRAIN","RaiderTrained","GET_TOOL","tool","EAT","COMPLETE_POWER_PATH","hasTool","hasSkill","FulfillerEntity","powerSwitch","spawning","upgradeCostOre","upgradeCostBrick","crystalsInUse","inBeam","turnOnPower","BuildingSelected","worldPos","dropPos2D","hasMaxLevel","upgrade","canUpgrade","BRICK","BuildingUpgraded","spawnMaterials","turnOffPower","MonsterActivity","onLevelEnd","moveTimeout","startMoving","onMove","prevSurface","nextSurface","findTarget","currentCenter","targetZ","Monster","startRandomMove","bat","loadObjectList","objectListConf","values","olObject","lTypeName","xPos","yPos","terrainY","radHeading","heading","applyAxisAngle","update","setTorchPosition","Raider","BuildingEntity","primaryPathSurface","secondaryOffset","secondarySurface","pathOffset","pathSurface","requiredTool","requiredSkill","aiPriorityDestruction","SurfaceJob","debug","onLevelComplete","nerpInterval","registers","fill","timers","scriptLines","statements","macrosByName","labelsByName","halted","programCounter","messages","messagePermit","startExecution","execute","pauseExecution","checkRegister","register","num","isNaN","Error","checkRegisterValue","getR","setR","addR","setTimer","Date","getTime","getTimer","setLevelCompleted","setLevelFail","FAILED","setTutorialFlags","setMessagePermit","messagesAllowed","setBuildingsUpgradeLevel","typeName","setToolStoreLevel","setTeleportPadLevel","setPowerStationLevel","setBarracksLevel","getToolStoresBuilt","getMinifiguresOnLevel","getCrystalsCurrentlyStored","getObjectiveSwitch","setMessageTimerValues","arg1","arg2","arg3","getMessageTimer","cameraUnlock","setMessage","messageNumber","arrowDisabled","txt","setCameraGotoTutorial","getTutorialBlockIsGround","getTutorialBlockIsPath","getUnitAtBlock","getOxygenLevel","getObjectiveShowing","addPoweredCrystals","disallowAll","getPoweredPowerStationsBuilt","getPoweredBarracksBuilt","getRecordObjectAtTutorial","getHiddenObjectsFound","callMethod","methodName","methodArgs","setRegisterMatch","addRegisterMatch","getRegisterMatch","setTimerMatch","getTimerMatch","lMethodName","memberName","apply","conditional","conditionResult","executeStatement","expression","invoke","argValues","comparator","jump","statement","nerpScript","nerpRunner","NerpRunner","includeName","includedRunner","NerpParser","concat","firstLine","macroLines","mLine","append","macroLine","macroCall","replaceMacros","labelMatch","preProcess","labelName","macro","RegExp","number","opSplit","brackets","spaceSplit","jumpMatch","priorities","levelDefault","current","toggle","enabled","upOne","tmp","entry","PriorityEntry","pushToTop","getPriority","priority","j","levelPriorityEntry","spawnRaiderInterval","oxygenUpdateInterval","checkSpawnRaiders","CHECK_SPANW_RAIDER_TIMER","targetBuilding","DynamiteJob","updateOxygen","UPDATE_OXYGEN_TIMER","setup","gameScreen","reward","PriorityList","ambientRgb","maxAmbRgb","normalizedRgb","TerrainLoader","oListFile","ObjectListLoader","nerpFile","nerpMessageFile","now","stop","setSize","getTerrainIntersectionPoint","point","intersect","intersectObject","collectable","world","spawnBuildings","RaiderRequested","station","walkOutPos","MoveJob","applyEuler","diff","reduce","AirLevelChanged","selectStart","setWorldManager","worldManager","startSelection","changeSelection","screenX","screenY","clearRect","strokeStyle","lineWidth","strokeRect","aiPriorityClearing","rightDown","intersectionPoint","getTerrainPositionFromEvent","SECONDARY","createSurfaceJob","DrillJob","ClearRubbleJob","dispatchEvent","DEV_MODE","surfJob","relX","relY","hidden","addChild","child","updatePosition","drawHover","drawTooltip","onClick","isInactive","inRect","stateChanged","checkClick","checkRelease","release","notifyRedraw","xOut","yOut","xIn","yIn","movedIn","setMovedIn","onDone","toggleState","updateAnimation","PANEL_ANIMATION_MULTIPLIER","speed","diffX","diffY","BaseElement","btnCfg","buttonType","imgDisabled","normalFile","highlightFile","pressedFile","disabledFile","textAlign","buttonsCfg","labelOre","SideBarLabel","panelButtonCrystalSideBarOre","totalOre","labelCrystal","panelButtonCrystalSideBarCrystals","imgNoCrystal","imgSmallCrystal","imgUsedCrystal","imgOre","updateQuantities","curX","curY","imgCrystal","Panel","ButtonCfg","panelButtonInfoDockGoto","panelButtonInfoDockClose","panelButtonPriorityListDisable","panelButtonPriorityListUpOne","panelButtonPriorityListClose","panelButtonPriorityListReset","panelButtonTopPanelCallToArms","panelButtonTopPanelOptions","panelButtonTopPanelPriorities","panelRadar","panelCrystalSideBar","panelTopPanel","panelInformation","panelPriorityList","panelCameraControl","panelInfoDock","panelEncyclopedia","btnCfgValue","arr","ButtonRadarCfg","ButtonCrystalSideBarCfg","ButtonTopCfg","ButtonInformationCfg","ButtonPriorityListCfg","ButtonCameraControlCfg","ButtonInfoDockCfg","panelButtonInformationToggle","panelButtonInformationFunction","panelButtonCameraControlZoomIn","panelButtonCameraControlZoomOut","panelButtonCameraControlCycleBuildings","panelButtonCameraControlRotate","BaseButtonCfg","buttonImageFilename","panelFillCfg","panelOverlayCfg","overlay","btnToggle","Button","panelButtonRadarToggle","btnMap","panelButtonRadarMapView","btnTagged","panelButtonRadarTaggedObjectView","panelButtonRadarZoomIn","panelButtonRadarZoomOut","infoMessageEntryConfig","textImage","infoImage","imageFilename","textInfoMessageConfig","imgAir","currentMessage","messageTimeout","crystalFound","TextInfoMessage","textCrystalFound","msgSpaceToContinue","textSpaceToContinue","cavernDiscovered","textCavernDiscovered","oreFound","textOreFound","msgAirSupplyLow","textAirSupplyLow","msgAirSupplyRunningOut","textAirSupplyRunningOut","msgGameCompleted","textGameCompleted","msgManTrained","textManTrained","msgUnitUpgraded","textUnitUpgraded","textInfoMessage","unsetMessage","txtX","infoX","tooltipSfx","tooltipDisabled","tooltipDisabledSfx","hotkey","menuItemCfg","itemKey","parentWidth","menuIndex","isDisabled","updateState","autoRedraw","targetState","numOfItems","onBackPanel","backBtn","iconPanelButtons","backBtnCfg","IconPanelBackButtonCfg","frameImgCfg","imgName","imgNameWoBackName","addMenuItem","menuItemGroup","MenuItemCfg","menuItem","IconPanelButton","IconSubPanel","aiPriorityReinforce","itemDrill","addWallMenuItem","itemReinforce","ReinforceJob","itemDynamite","itemDeselect","createJob","selectedSurface","SpawnDynamiteEvent","SelectBasePanel","placedItems","workplaces","placed","aiPriorityConstruction","isPowerPath","neededByType","assignedByType","onSiteByType","needed","checkComplete","neededType","CompletePowerPathJob","pathItem","BuildingSite","removeItem","placeFenceItem","toolstation","clearRubbleItem","menuItemOffCfg","menuItemOnCfg","imgOnNormal","imgOnHover","imgOnPressed","imgOnDisabled","onToggleStateChange","powerSwitchItem","IconPanelToggleButton","upgradeItem","deleteBuildingItem","feedItem","selectedRaiders","EatJob","getToolItem","trainItem","deleteRaiderItem","x0","x1","SurfacePathTarget","targetArea","Area","trainDynamite","every","TrainJob","addGetToolItem","pathToToolstation","GetToolJob","targetPosition","subPanels","mainPanel","addSubPanel","buildingPanel","BuildingPanel","smallVehiclePanel","SmallVehiclePanel","largeVehiclePanel","LargeVehiclePanel","selectWallPanel","SelectWallPanel","selectFloorPanel","SelectFloorPanel","selectRubblePanel","SelectRubblePanel","selectBuildingPanel","SelectBuildingPanel","selectRaiderPanel","SelectRaiderPanel","trainRaiderPanel","TrainRaiderPanel","getToolPanel","GetToolPanel","selectVehiclePanel","SelectVehiclePanel","teleportRaider","MAX_RAIDER_REQUEST","IconPanelButtonLabel","buildingItem","smallVehicleItem","largeVehicleItem","onSelectedSurfaceChange","selectSubPanel","childPanel","targetPanel","subPanel","updated","isPressed","btnCallToArms","ToggleButton","btnOptions","btnPriorities","infoMessagesEntryConfig","InfoButtonCfg","animationSpeedX","animationSpeedY","message","buttonClicked","showButton","slideToTarget","Promise","resolve","infoMessagesConfig","informationPanel","stackButtons","gotoLatestMessage","dropLatestMessage","InfoDockButton","infoGenericDeath","infoGenericMonster","infoCrystalFound","infoUnderAttack","infoLandslide","infoPowerDrain","infoSlugEmerge","infoFoundMinifigure","btn","slideStackIntoPosition","then","slideInButton","prev","cur","pushFirst","setText","promises","all","panelRadarFill","panelRadarOverlay","panelMessages","panelMessagesSide","PanelCfg","prioPositions","prioByName","buttonCfg","setList","resetList","aiPriorityTrain","aiPriorityGetIn","aiPriorityRepair","aiPriorityRecharge","prioButton","sfx","timing","flag","InfoMessagesEntryConfig","sfxName","TextInfoMessageEntryConfig","panels","addPanel","panel","hit","onOptionsShow","panelsCfg","PanelsCfg","ButtonsCfg","InformationPanel","InfoDockPanel","InfoMessagesConfig","priorityButtonsConfig","PriorityButtonsConfig","priorityPositionsConfig","PriorityPositionsEntry","PriorityListPanel","TopPanel","panelMain","MainPanel","PanelCrystalSideBar","MessagePanel","TextInfoMessageConfig","RadarPanel","GuiBaseLayer","assignInterval","checkRubbleInterval","assignJobs","JOB_SCHEDULE_INTERVAL","checkUnclearedRubble","CHECK_CLEARRUBBLE_INTERVAL","availableJobs","unemployedRaider","closestRaider","closestRaiderIndex","minDistance","closestToolRaider","closestToolRaiderIndex","minToolDistance","closestToolstationPosition","closestNeededTool","closestTrainingRaider","closestTrainingRaiderIndex","minTrainingDistance","closestTrainingArea","closestNeededTraining","pathToJob","raiderPosition","neededTool","neededTraining","pathToTraining","rad","imgTitle","titleRelX","titleRelY","btnNext","btnBack","imgBack","imgParagraph","paragraph","titleFont","titleWindow","nextButtonCfg","nextParagraph","backButtonCfg","prevParagraph","setParagraph","objectiveText","objectiveBackImgCfg","textFont","textWindow","messagePanel","itemCfg","labelX","imgTextNormal","description","imgTextHover","imgLabelOffNormal","labelOff","imgLabelOffHover","imgLabelOnNormal","labelOn","imgLabelOnHover","imgLabel","sliderX","onValueChanged","imgLeft","imgOff","imgOn","imgRight","leftBtn","btnLeftNormal","btnLeftHover","rightBtn","btnRightNormal","btnRightHover","posX","dw","loImg","hiImg","itemsTrigger","itemsNext","menuFont","MenuLabelItem","itemsCycle","MenuCycleItem","itemsSlider","MenuSliderItem","layersByKey","MenuLayer","pausePanel","selectLayer","onRepeatBriefing","MenuBasePanel","onAbortGame","onRestartGame","image","okWindow","cancelWindow","contrastOverlay","Rect","dialogCfg","DialogCfg","panelPause","PausePanel","panelOptions","OptionsPanel","panelBriefing","BriefingPanel","BriefingPanelCfg","setActivePanel","lEventKey","gameLayer","GameLayer","selectionLayer","SelectionLayer","guiLayer","GuiMainLayer","overlayLayer","OverlayLayer","WorldManager","jobSupervisor","Supervisor","restartLevel","startLevel","setupAndStartLevel","objective","objectiveImage640x480","conf","imgNormalFilepath","imgHoverFilepath","imgPressedFilepath","imgDisabledFilepath","resultIndex","resultLastIndex","images","boxes","fonts","texts","uncoverTimeout","backgroundImg","wallpaper","filePath","boxImages","fontKey","labelFont","backFont","resultsLayer","btnSave","btnAdvance","descriptionTextLayer","btnLayer","RewardScreenButton","saveButton","advanceButton","onAdvance","uncoverResult","levelFullNameImg","resultText","quitText","completeText","failedText","resultValues","percentString","timeString","score","gameResultTextImg","box","vertSpacing","descriptionTextImg","textPos","tx","ty","actual","lessIsMore","padLeft","padding","seconds","ss","minutes","mm","loadingScreen","LoadingScreen","wadfileSelectModal","mainMenuScreen","MainMenuScreen","GameScreen","rewardScreen","RewardScreen","params","URLSearchParams"],"mappings":"+KAEA,aAMI,WAAYA,GAJL,KAAAC,QAAqC,KAKxC,IAAMC,EAAcC,SAASC,eAAeJ,GAAUK,YAAYF,SAASG,cAAc,QACzFJ,EAAYK,UAAUC,IAAI,SAC1BN,EAAYO,UAAY,EACxBP,EAAYQ,aAAa,OAAQ,UACjCR,EAAYQ,aAAa,cAAe,QAExC,IAAMC,EAAcT,EAAYG,YAAYF,SAASG,cAAc,QACnEK,EAAYJ,UAAUC,IAAI,gBAC1BN,EAAYQ,aAAa,OAAQ,YAEjC,IAAME,EAAeD,EAAYN,YAAYF,SAASG,cAAc,QACpEM,EAAaL,UAAUC,IAAI,iBAE3B,IAAMK,EAAcD,EAAaP,YAAYF,SAASG,cAAc,QACpEO,EAAYN,UAAUC,IAAI,gBAC1B,IAAMM,EAAaD,EAAYR,YAAYF,SAASG,cAAc,OAClEQ,EAAWP,UAAUC,IAAI,eACzBM,EAAWC,UAAY,kBACvBD,EAAWE,GAAK,0BAChBd,EAAYQ,aAAa,kBAAmBI,EAAWE,IAEvD,IAAMC,EAAYL,EAAaP,YAAYF,SAASG,cAAc,QAClEW,EAAUV,UAAUC,IAAI,cAEXS,EAAUZ,YAAYF,SAASG,cAAc,MACrDS,UAAY,gFAEjB,IACMG,EADUD,EAAUZ,YAAYF,SAASG,cAAc,QAClCD,YAAYF,SAASG,cAAc,QAC9DY,EAAWF,GAAK,UAChBE,EAAWX,UAAUC,IAAI,MAAO,YAChCU,EAAWR,aAAa,OAAQ,WAEhC,IAAMS,EAAaC,EAAsBC,gBAAgBH,GAAY,EAAM,eAAgB,WAAY,6BACjGI,EAAYF,EAAsBC,gBAAgBH,GAAY,EAAO,cAAe,UAAW,mBAE/FK,EAAgBN,EAAUZ,YAAYF,SAASG,cAAc,QACnEiB,EAAchB,UAAUC,IAAI,eAC5BgB,KAAKC,iBAAiBF,EAAeJ,EAAWH,IAChDQ,KAAKE,gBAAgBH,EAAeD,EAAUN,IAG9CQ,KAAKG,MAAQ,IAAI,KAAMzB,EAAa,CAAC0B,SAAU,SAAUC,UAAU,IA4G3E,OAzGmB,EAAAR,gBAAf,SAA+BS,EAAwBC,EAAiBf,EAAYgB,EAAuBjB,GACvG,IAAMkB,EAASH,EAAOzB,YAAYF,SAASG,cAAc,WAWzD,OAVA2B,EAAO1B,UAAUC,IAAI,YACjBuB,GAAQE,EAAO1B,UAAUC,IAAI,UACjCyB,EAAOjB,GAAKA,EACZiB,EAAOvB,aAAa,iBAAkB,OACtCuB,EAAOvB,aAAa,iBAAkB,IAAMsB,GAC5CC,EAAOC,KAAO,SACdD,EAAOvB,aAAa,OAAQ,OAC5BuB,EAAOvB,aAAa,gBAAiBsB,GACrCC,EAAOvB,aAAa,gBAAiByB,OAAOJ,IAC5CE,EAAOlB,UAAYA,EACZkB,GAGH,YAAAR,iBAAR,SAAyBK,EAAwBM,GAAjD,WACUC,EAAajB,EAAsBkB,aAAaR,GAAQ,EAAM,WAAYM,GAE1EG,EAAWnB,EAAsBoB,mBAAmBH,EAAY,YAAa,eAC7EI,EAAWrB,EAAsBoB,mBAAmBH,EAAY,YAAa,eAE7EK,EAAeL,EAAWhC,YAAYF,SAASG,cAAc,WACnEoC,EAAaR,KAAO,SACpBQ,EAAanC,UAAUC,IAAI,MAAO,cAAe,aACjDkC,EAAa1B,GAAK,oBAClB0B,EAAa3B,UAAY,aACzB2B,EAAaC,iBAAiB,SAAS,WACnCD,EAAaE,UAAW,EACxB,IAAMC,EAAcC,IAAIC,gBAAgBR,EAASS,MAAM,IACjDC,EAAcH,IAAIC,gBAAgBN,EAASO,MAAM,IACvD,EAAK/C,QAAQ4C,EAAaI,OAInB,EAAAT,mBAAf,SAAkCV,EAAwBd,EAAYkC,GAClE,IAAMC,EAAerB,EAAOzB,YAAYF,SAASG,cAAc,QAC/D6C,EAAa5C,UAAUC,IAAI,QAC3B,IAAM4C,EAAeD,EAAa9C,YAAYF,SAASG,cAAc,UACrE8C,EAAa1C,aAAa,MAAOM,GACjCoC,EAAa7C,UAAUC,IAAI,cAC3B4C,EAAaC,UAAY,gCAAkCH,EAAW,gBACtE,IAAMI,EAAeH,EAAa9C,YAAYF,SAASG,cAAc,UAKrE,OAJAgD,EAAapB,KAAO,OACpBoB,EAAa/C,UAAUC,IAAI,gBAC3B8C,EAAatC,GAAKA,EAClBsC,EAAaC,UAAW,EACjBD,GAGH,YAAA5B,gBAAR,SAAwBI,EAAwBM,GAAhD,WACUoB,EAAYpC,EAAsBkB,aAAaR,GAAQ,EAAO,UAAWM,GAEzEqB,EAAUD,EAAUnD,YAAYF,SAASG,cAAc,QAC7DmD,EAAQlD,UAAUC,IAAI,QACtBiD,EAAQ1C,UAAY,qEAEpB,IAAM2C,EAAUtC,EAAsBuC,kBAAkBH,EAAW,WAAY,cAAe,oFACxFI,EAAUxC,EAAsBuC,kBAAkBH,EAAW,WAAY,cAAe,oFAExFK,EAAcL,EAAUnD,YAAYF,SAASG,cAAc,WACjEuD,EAAY3B,KAAO,SACnB2B,EAAYtD,UAAUC,IAAI,MAAO,cAAe,aAChDqD,EAAY7C,GAAK,mBACjB6C,EAAY9C,UAAY,aACxB8C,EAAYlB,iBAAiB,SAAS,WAClCkB,EAAYjB,UAAW,EAEvB,EAAK3C,QAAQyD,EAAQI,MAAOF,EAAQE,WAI7B,EAAAxB,aAAf,SAA4BR,EAAwBC,EAAiBf,EAAYoB,GAC7E,IAAM2B,EAASjC,EAAOzB,YAAYF,SAASG,cAAc,QAMzD,OALAyD,EAAOxD,UAAUC,IAAI,WAAY,QAC7BuB,GAAQgC,EAAOxD,UAAUC,IAAI,OAAQ,UACzCuD,EAAO/C,GAAKA,EACZ+C,EAAOrD,aAAa,OAAQ,YAC5BqD,EAAOrD,aAAa,kBAAmB0B,GAChC2B,GAGI,EAAAJ,kBAAf,SAAiC7B,EAAwBd,EAAYkC,EAAkBc,GACnF,IAAMC,EAAcnC,EAAOzB,YAAYF,SAASG,cAAc,QAC9D2D,EAAY1D,UAAUC,IAAI,QAC1B,IAAM0D,EAAcD,EAAY5D,YAAYF,SAASG,cAAc,UACnE4D,EAAYxD,aAAa,MAAOM,GAChCkD,EAAY3D,UAAUC,IAAI,cAC1B0D,EAAYb,UAAY,uCAAyCH,EAAW,gBAC5E,IAAMiB,EAAcF,EAAY5D,YAAYF,SAASG,cAAc,UAMnE,OALA6D,EAAYjC,KAAO,MACnBiC,EAAY5D,UAAUC,IAAI,gBAC1B2D,EAAYnD,GAAKA,EACjBmD,EAAYZ,UAAW,EACvBY,EAAYL,MAAQE,EACbG,GAGJ,YAAAC,KAAP,WACI5C,KAAKG,MAAMyC,QAGR,YAAAC,KAAP,WACI7C,KAAKG,MAAM0C,QAGnB,EA7JA,I,2BCFe,SAASC,IACtB,OAAO,IAAIC,OAAO,IAA0B,mB,wdCD9C,EAKI,SAAY1B,EAAqBI,GAC7BzB,KAAKqB,YAAcA,EACnBrB,KAAKyB,YAAcA,GCDpB,SAASuB,EAAcC,EAAOC,GACjC,GAAID,EAAQ,GAAKC,EAAS,EAEtB,OADAC,QAAQC,MAAM,kCAAqCH,EAAQ,MAAQC,GAiBpE,SAA4BD,EAAOC,GACtC,MAAMG,EAASL,EAjBe,GAAI,IAkBlC,IAAK,IAAIM,EAAI,EAAGA,EAlBkB,GAkBNA,GAAK,GAC7B,IAAK,IAAIC,EAAI,EAAGA,EAnBU,GAmBCA,GAAK,GAExBF,EAAOG,UADPD,EAAI,GAAK,GAAMD,EAAI,GAAK,EACL,iBAEA,iBAEvBD,EAAOI,SAASF,EAAGD,EAAG,GAAI,IAGlC,OAAOD,EA5BIK,GAEX,MAAMC,EAAShF,SAASG,cAAc,UACtC6E,EAAOzE,aAAa,QAAS+D,GAC7BU,EAAOzE,aAAa,SAAUgE,GAC9B,MAAMU,EAAUD,EAAOE,WAAW,MAGlC,OAFAD,EAAQX,MAAQA,EAChBW,EAAQV,OAASA,EACVU,EAuBJ,SAASE,EAAmBb,EAAOC,GACtC,MAAMG,EAAS,IAAIU,UAAUd,EAAOC,GACpC,IAAK,IAAII,EAAI,EAAGA,EAAIJ,EAAQI,GAAK,GAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAOM,GAAK,GAAI,CAChC,MAAMS,EAAIT,EAAI,GAAK,GAAMD,EAAI,GAAK,EAClC,IAAK,IAAIW,EAAKV,EAAGU,EAAKV,EAAI,GAAIU,IAC1B,IAAK,IAAIC,EAAKZ,EAAGY,EAAKZ,EAAI,GAAIY,IAC1BC,EAASd,EAAQY,EAAIC,EAAIF,EAAI,EAAI,IAAKA,EAAI,IAAM,EAAG,KAKnE,OAAOX,EAGJ,SAASc,EAASC,EAASb,EAAGD,EAAGe,EAAGC,EAAGC,EAAGC,EAAI,KACjD,MAAMC,EAA8B,GAAzBnB,EAAIc,EAAQnB,MAAQM,GAC/Ba,EAAQM,KAAKD,GAAKJ,EAClBD,EAAQM,KAAKD,EAAI,GAAKH,EACtBF,EAAQM,KAAKD,EAAI,GAAKF,EACtBH,EAAQM,KAAKD,EAAI,GAAKD,EAGnB,SAASG,EAASP,EAASb,EAAGD,GACjC,MAAMmB,EAA8B,GAAzBnB,EAAIc,EAAQnB,MAAQM,GAC/B,MAAO,CAACc,EAAGD,EAAQM,KAAKD,GAAIH,EAAGF,EAAQM,KAAKD,EAAI,GAAIF,EAAGH,EAAQM,KAAKD,EAAI,GAAID,EAAGJ,EAAQM,KAAKD,EAAI,IC/C7F,SAASG,EAAKC,G,IAAK,wDAOtB,OANAC,EAAKC,SAAQ,SAACC,GAIVH,GAHAA,EAAMI,OAAOH,KAAKD,GACbK,QAAO,SAACC,GAAQ,OAAAA,EAAIC,gBAAkBJ,EAAQI,iBAC9CC,KAAI,SAACF,GAAQ,OAAAN,EAAIM,OACVN,EAAI,GAAKA,KAElBA,ECzBJ,SAAS,EAAYS,GACxB,IAAKA,EAAK,OAAOA,EACjB,IAAIC,EAASD,EAAIE,WAAWC,QAAQ,MAAO,KACvCF,EAAOG,WAAW,OAAMH,EAASA,EAAOI,UAAU,IACtD,IAAMC,EAAUL,EAAOM,YAAY,KACnC,OAAON,EAAOI,UAAUC,EAAU,GAG/B,SAAS,EAAKf,G,IAAK,wDAOtB,OANAC,EAAKC,SAAQ,SAACC,GAIVH,GAHAA,EAAMI,OAAOH,KAAKD,GACbK,QAAO,SAACC,GAAQ,OAAAA,EAAIC,gBAAkBJ,EAAQI,iBAC9CC,KAAI,SAACF,GAAQ,OAAAN,EAAIM,OACVN,EAAI,GAAKA,KAElBA,EAGJ,SAASiB,EAAapB,GACzB,OAAO,IAAIqB,aAAcC,OAAOtB,GAAMe,QAAQ,MAAO,IAGlD,SAASQ,EAAevB,GAC3B,OAAOoB,EAAapB,GAAMe,QAAQ,MAAO,KAGtC,SAASS,EAAmBC,EAAKC,GAGpC,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,EAGlD,SAASM,EAAUL,GACtB,OAAOF,EAAmB,EAAGE,GAG1B,SAASM,IACZ,OAAuC,EAA3BR,EAAmB,EAAG,GAA1B,EAGL,SAASS,EAAiBC,GAE7B,OADIA,GAASC,aAAaD,GACnB,KAGJ,SAASE,EAAkBC,GAE9B,OADIA,GAAUC,cAAcD,GACrB,KAeXE,MAAMC,UAAUC,OAAS,SAAaC,GAClC,IAAMC,EAAQrH,KAAKsH,QAAQF,IACZ,IAAXC,GAAcrH,KAAKuH,OAAOF,EAAO,IAIzCG,IAAIN,UAAUO,YAAc,SAAgBtC,EAAQuC,GAChD,IAAIpF,EAAQtC,KAAK2H,IAAIxC,GAKrB,YAJcyC,IAAVtF,IACAA,EAAQoF,IACR1H,KAAK6H,IAAI1C,EAAK7C,IAEXA,GCxEX,iBAEI,KAAAwF,cAAwB,GACxB,KAAAC,gBAA0B,GAC1B,KAAAC,aAAuB,GACvB,KAAAC,WAAiB,GACjB,KAAAC,SAAe,GACf,KAAAC,OAAa,GACb,KAAAC,WAAsG,IAAIZ,KCP9G,aAKI,WAAYa,EAAYC,GAHxB,KAAAD,KAAa,KACb,KAAAC,iBAAmB,GAGftI,KAAKqI,KAAOA,EACZrI,KAAKsI,iBAAmBA,EAShC,OANI,YAAAC,QAAA,W,MACIvI,KAAKsI,iBAAiBvD,SAAQ,SAACyD,GAAM,OAAA1B,EAAkB0B,MACvDxI,KAAKqI,KAAKI,SAASF,UACnBtB,MAAMyB,QAAQ1I,KAAKqI,KAAKM,UAAY3I,KAAKqI,KAAKM,SAAS5D,SAAQ,SAAA6D,GAAO,OAAAA,EAAIL,aAA+B,QAAlB,EAAAvI,KAAKqI,KAAKM,gBAAQ,SAAEJ,WAGnH,EAhBA,GCiFMM,EAAY,WAoGlB,SAASC,EAAmBC,EAAMC,GAC9B,IAAIC,EAAS,IAAI,MAIjB,OAHAA,EAAO1F,EAAIwF,EAAKG,WAAWF,GAC3BC,EAAO3F,EAAIyF,EAAKG,WAAWF,EA7Jf,GA8JZC,EAAOE,EAAIJ,EAAKG,WAAWF,EAAS,GAC7BC,EAyCX,ICvNYG,EDuNZ,aAaI,WAAYC,EAAcC,QAAA,IAAAA,OAAA,GAT1B,KAAAD,KAAe,GACf,KAAAC,SAAmB,EACnB,KAAAC,UAAiC,GACjC,KAAAd,SAA2B,IAAI,MAC/B,KAAAe,SAAyB,KACzB,KAAAC,QAAuB,KACvB,KAAAC,IAAoB,KACpB,KAAAC,kBAAoB,GAGhB3J,KAAKqJ,KAAOA,EACZrJ,KAAKsJ,QAAUA,EACXtJ,KAAKsJ,SAASnG,QAAQyG,IAAI,aAAe5J,KAAKqJ,MAyT1D,OAtTI,YAAAQ,YAAA,SAAYd,EAAMe,EAAaC,GAC3B,GAAIA,EAzNO,IAyNoB,EAA/B,CAKA,IAAIC,EAAeD,EAjOX,EAiOkC,EAC1C/J,KAAKwJ,SAAW,IAAIS,aAA2B,EAAdD,GACjChK,KAAK0J,IAAM,IAAIO,aAA2B,EAAdD,GAE5B,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAaE,IAAK,CAClC,IAAIC,EAAkB,EAAJD,EACdE,EAvOA,EAuOeD,EACnBnK,KAAKwJ,SAASW,GAAepB,EAAKG,WAAWY,EAAcM,GAC3DpK,KAAKwJ,SAASW,EAAc,GAAKpB,EAAKG,WAAWY,EAAcM,EAzO3D,GA0OJpK,KAAKwJ,SAASW,EAAc,GAAKpB,EAAKG,WAAWY,EAAcM,EAAe,SAb9EjH,QAAQC,MAAM,gEAAkE2G,EAAY,4BAiBpG,YAAAM,kBAAA,SAAkBC,EAAQR,EAAaC,GAMnC,IALA,IACIQ,GADY,IAAIxE,aAAcC,OAAO,IAAIwE,WAAWF,EAAQR,EAAaC,IAChDU,MAAM,MAAMvF,QAAO,SAAUsD,GACtD,MAAa,KAANA,KAGF0B,EAAI,EAAGA,EAAIK,EAAaG,OAAQR,IAAK,CAC1C,IAAMS,EAAe,IAAI,MACzBA,EAAaC,KAAOL,EAAaL,GACjCS,EAAaE,KAAO,MAEpB7K,KAAKuJ,UAAUuB,KAAKH,GAEpB3K,KAAKsJ,SAASnG,QAAQyG,IAAI,gBAAkB5J,KAAKuJ,UAAUmB,OAAS,oCAAsCH,IAGlH,YAAAQ,cAAA,SAAchC,EAAMe,EAAaC,GAI7B,IAFA,IAAIiB,EAAkB,EAClBhC,EAAS,EACNA,EAASe,GAAW,CACvB,IAAMkB,EAAalC,EAAKmC,SAASpB,EAAcd,GACzCmC,EAAgBpC,EAAKmC,SAASpB,EAAcd,EAAS,EAAkB,EAAbiC,GAEhEjL,KAAKyI,SAAS2C,SAASJ,EAAoC,GAAlBC,EAAa,GAAQE,EAAgB,GAE9EH,GAAsC,GAAlBC,EAAa,GACjCjC,GAAU,EAAkB,EAAbiC,EAGnBjC,EAAS,EACT,IAAIqC,EAAe,EAEnB,IADArL,KAAKyJ,QAAU,IAAI6B,YAAYN,GACxBhC,EAASe,GAAW,CACnBkB,EAAalC,EAAKmC,SAASpB,EAAcd,GAE7CA,GAAU,EAGV,IADA,IAAIuC,EAAc,IAAIC,WAAWP,GACxBf,EAAI,EAAGA,GAAKe,EAAYf,IAC7BqB,EAAYrB,GAAKnB,EAAKmC,SAASpB,EAAcd,EAAc,EAAJkB,GAG3D,IAASA,EAAI,EAAGA,EAAIe,EAAa,EAAGf,IAC5BlK,KAAKyL,mBACLzL,KAAKyJ,QAAQ4B,KAAkBE,EAAY,GAC3CvL,KAAKyJ,QAAQ4B,KAAkBE,EAAYrB,EAAI,GAC/ClK,KAAKyJ,QAAQ4B,KAAkBE,EAAYrB,EAAI,KAE/ClK,KAAKyJ,QAAQ4B,KAAkBE,EAAY,GAC3CvL,KAAKyJ,QAAQ4B,KAAkBE,EAAYrB,EAAI,GAC/ClK,KAAKyJ,QAAQ4B,KAAkBE,EAAYrB,EAAI,IAIvDlB,GAAU,EAAkB,EAAbiC,IAIvB,YAAAS,aAAA,SAAa3C,EAAMuB,EAAQR,EAAaC,GAEpC,IADA,IAAIf,EAAS,EACkC,IAAxCD,EAAK4C,SAAS7B,EAAcd,IAAeA,IAElD,IAAI4C,EAAe9F,EAAa,IAAI0E,WAAWF,EAAQR,EAAad,IAChEhJ,KAAKsJ,SAASnG,QAAQyG,IAAI,oBAAsBgC,GAUpD,IATA,IAAIT,GAAiB,EACjBxC,EAA8B,KAE9BkD,EAAe,EACfC,EAAc,IAAI,MAAQ,EAAG,EAAG,GAChCC,EAAgB,IAAI,MAAQ,EAAG,EAAG,GAI7B7B,EAAI,EAAGA,EAAIlK,KAAKuJ,UAAUmB,OAAQR,IACnClK,KAAKuJ,UAAUW,GAAGU,OAASgB,IAC3BT,EAAgBjB,EAChBvB,EAAW3I,KAAKuJ,UAAUW,IAIlC,GAAKvB,EAAL,CAKA,I,iBACI,IAAMqD,EAAiBlC,EAAcd,EACrC,GAAsC,IAAlCD,EAAK4C,SAASK,GACdhD,QACG,CACH,IAAMiD,EAAelD,EAAKmD,SAASF,GAC7BG,EAAepD,EAAKmC,SAASc,EA9UlC,GAkVD,OAFI,EAAK1C,SAASnG,QAAQyG,IAAI,qBAAsB,IAAI7D,aAAcC,OAAO,IAAIwE,WAAWF,EAAQ0B,EAhVnG,IAgVgI,OAASA,EAAiB,YAAcG,GAEjKF,GACJ,KAxSF,WAySM,IAAMG,EAAa,CACfrD,EAAK4C,SAASK,EAxTb,EAwTqD,GAAK,IAC3DjD,EAAK4C,SAASK,EAzTb,EAyTqD,GAAK,IAC3DjD,EAAK4C,SAASK,EA1Tb,EA0TqD,GAAK,IAC3DjD,EAAK4C,SAASK,EA3Tb,EA2TqD,GAAK,KAE/DrD,EAAS0D,OAAQ,IAAI,OAAQC,UAAUF,GACnC,EAAK9C,SAASnG,QAAQyG,IAAI,0BAA4BwC,EAAWG,KAAK,MAC1E,MACJ,KAjTF,WAkTM,IAAMC,EAAQzD,EAAK0D,UAAUT,EAjUxB,GAkUD,EAAK1C,SAASnG,QAAQyG,IAAI,iBAAmB4C,EAAMhH,SAAS,IAChE,MACJ,KAlTF,WAmTM,IAAMkH,EAAa3D,EAAKmC,SAASc,EArU5B,GAqUqE,IACtE,EAAK1C,SAASnG,QAAQyG,IAAI,sBAAwB8C,GACtD,MACJ,KArTF,WAsTM,IAAMC,EAAU5D,EAAKmC,SAASc,EAzUzB,GAyUkE,IACnE,EAAK1C,SAASnG,QAAQyG,IAAI,mBAAqB+C,GACnD,MACJ,KAxTF,WAyTM,IAAMC,EAAW7D,EAAKmC,SAASc,EA7U1B,GA6UmE,IAEpE,EAAK1C,SAASnG,QAAQyG,IAAI,oBAAsBgD,GACpD,MACJ,KA5TF,WA6TM,IAAIC,EAAa,EAEbA,EAxTV,aAuTUA,EACa9D,EAAKG,WAAW8C,EApV5B,GAsVYjD,EAAKmC,SAASc,EAtV1B,GAsVmE,IAExErD,EAASmE,aAAeD,EACpB,EAAKvD,SAASnG,QAAQyG,IAAI,wBAA0BjB,EAASmE,cACjE,MACJ,KArUF,WAsUE,KAAKjE,EACD,IAAIkE,EAEAA,EADAd,IAAiBpD,EACFE,EAAKG,WAAW8C,EA/V9B,GAiWcjD,EAAKmC,SAASc,EAjW5B,GAiWqE,IAE1ErD,EAASqE,QAAU,EAAID,EACnB,EAAKzD,SAASnG,QAAQyG,IAAI,wBAA0BjB,EAASqE,SAC7DrE,EAASqE,QAAU,IAAGrE,EAASsE,aAAc,GACjD,MACJ,KA9UF,WA+UM,IAAMC,EAAcnE,EAAKG,WAAW8C,EAxW/B,GAyWD,EAAK1C,SAASnG,QAAQyG,IAAI,sBAAwBsD,GACtD,MACJ,KAjVF,WAkVM,IAAIC,EAAWpE,EAAKG,WAAW8C,EA5W1B,GA6WD,EAAK1C,SAASnG,QAAQyG,IAAI,mBAAqBuD,GACnD,MACJ,KApVF,WAqVM,IAAIC,EAAYrE,EAAKG,WAAW8C,EAhX3B,GAkXD,EAAK1C,SAASnG,QAAQyG,IAAI,oBAAsBwD,GACpD,MACJ,KA5TF,WA6TMvB,EAAe9C,EAAK0D,UAAUT,EArXzB,GAsXD,EAAK1C,SAASnG,QAAQyG,IAAI,iBAAmBiC,EAAarG,SAAS,IACvE,MACJ,KA7TF,WA8TMsG,EAAchD,EAAmBC,EAAMiD,EAzXlC,GA0XD,EAAK1C,SAASnG,QAAQyG,IAAI,wBAA0BkC,EAAYuB,UAAUd,KAAK,MACnF,MACJ,KAhUF,WAiUMR,EAAgBjD,EAAmBC,EAAMiD,EA7XpC,GA8XD,EAAK1C,SAASnG,QAAQyG,IAAI,0BAA4BmC,EAAcsB,UAAUd,KAAK,MACvF,MACJ,KAjVF,WAkVE,KAjVF,WAkVE,KAjVF,WAkVE,KAjVF,WAkVE,KAjVF,WAkVE,KAhVF,WAiVM,IAAMe,EAAkBrH,EAAe,IAAIuE,WAAWF,EAAQ0B,EAtYzD,EAsYgGG,IACjG,EAAK7C,SAASnG,QAAQyG,IAAI,qBAAuB0D,GACrD,MACJ,KAxUF,WAyUM,IAAMC,EAAoB,CACtBxE,EAAK4C,SAASK,EA3Yb,EA2YqD,GAAK,IAC3DjD,EAAK4C,SAASK,EA5Yb,EA4YqD,GAAK,IAC3DjD,EAAK4C,SAASK,EA7Yb,EA6YqD,GAAK,IAC3DjD,EAAK4C,SAASK,EA9Yb,EA8YqD,GAAK,KAI3D,EAAK1C,SAASnG,QAAQyG,IAAI,yBAA2B2D,EAAkBhB,KAAK,MAChF,MACJ,KA1UF,WA2UM,IAAIiB,EAAkBvH,EAAe,IAAIuE,WAAWF,EAAQ0B,EArZvD,EAqZ8FG,IAEnG,GADI,EAAK7C,SAASnG,QAAQyG,IAAI,4BAA8B4D,GACpC,WAApBA,EAA8B,MAClC,IAAIC,GAAkB,EAClBD,EAAgBE,SAAS,iBACzBD,GAAkB,EAClBD,EAAkBA,EAAgB7H,UAAU,EAAG6H,EAAgB9C,OAAS,cAAcA,SAE1F,IAAIhJ,EAAW,EAAY8L,GACrBG,EAAkB,EAAKtE,KAAO3H,EACpC,GAAI+L,EAAiB,CACjB,IAAMG,EAAQD,EAAgBC,MAAM,qBAC9B,EAAgBC,GAAgBC,2BAA2BF,EAAM,IACvE,GAAI,EAAe,CACf,IAAI,EAAS,EACb,EAAKjE,kBAAkBmB,KAAKiD,aAAY,WACpCpF,EAAStD,IAAMwI,GAAgBG,WAAW,EAAc,MACxD,GACc,EAActD,SAAQ,EAAS,KAC9C,IAAOuD,KACVtF,EAASsE,aAAc,GAG/BtE,EAAStD,IAAMwI,GAAgBG,WAAWL,GAC1ChF,EAASuF,UAAYvF,EAASsE,YAAc,EAAI,GAChDtE,EAAS0D,MAAQ,KACjB,MACJ,QACQ,EAAK/C,SAASnG,QAAQgL,KAAK,0CAA2C,IAAIpI,aAAcC,OAAO,IAAIwE,WAAWF,EAAQ0B,EA9cjI,IA8c8J,OAASA,EAAiB,YAAcG,GAIvMnD,GArba,EAqboBmD,I,OA1IlCnD,EAASe,G,KAlKxB,SAAsBtB,EAAUe,EAAUE,EAAKD,EAAS0B,EAAeiD,EAAMC,EAAQ7B,GAGjF,GADa8B,EACT9B,EACA,IAAkB,UAAA/D,EAAS8F,OAAT,eAAiB,CAA9B,IAAIC,EAAK,KACV,GAAIA,EAAMrD,gBAAkBA,EAE5B,IAAK,IAAIjB,EAAIsE,EAAMC,MAAOvE,EAAIsE,EAAMC,MAAQD,EAAME,MAAOxE,IAAK,CAE1D,IAAIC,EAA2B,EAAbV,EAAQS,GACtB3G,EAAIiG,EAASW,GAAekE,EAAO9K,EACnCD,EAAIkG,EAASW,EAAc,GAAKkE,EAAO/K,EACvC6F,EAAIK,EAASW,EAAc,GAAKkE,EAAOlF,EAEvCwF,EAAuB,EAAblF,EAAQS,GAClB0E,EAAI,EACJC,EAAI,EArCN,EAuCErC,GACAoC,EAAIzF,EAAIiF,EAAKjF,EAAI,GACjB0F,EAAIvL,EAAI8K,EAAK9K,EAAI,IAxCnB,EAyCSkJ,GACPoC,EAAIrL,EAAI6K,EAAK7K,EAAI,GACjBsL,EAAI1F,EAAIiF,EAAKjF,EAAI,IA1CnB,EA2CSqD,IACPoC,EAAIrL,EAAI6K,EAAK7K,EAAI,GACjBsL,EAAIvL,EAAI8K,EAAK9K,EAAI,IAGrBoG,EAAIiF,GAAWC,EACflF,EAAIiF,EAAU,GAAKE,IAkR3BC,CAAa9O,KAAKyI,SAAUzI,KAAKwJ,SAAUxJ,KAAK0J,IAAK1J,KAAKyJ,QAAS0B,EAAeW,EAAaC,EAAeF,QAlJ1G1I,QAAQC,MAAM,kEAqJtB,YAAA2L,MAAA,SAAMzE,GACF,IAAMvB,EAAO,IAAIiG,SAAS1E,GAE1B,GAxcS,aAwcLvB,EAAKkG,UAAU,GAAnB,CAKA,IAAMC,EAAWnG,EAAKkG,UAjeb,GAueT,GALIC,EAtcc,IAscmBnG,EAAKoG,YACtChM,QAAQgL,KAAK,yDAA2De,EAvc1D,GAuc0F,4BAA8BnG,EAAKoG,WAAa,YA1elJ,aA8eNpG,EAAKkG,UADSG,GAClB,CAOA,IADA,IAAIC,EAAS,GACNA,EAAStG,EAAKoG,YAEjB,GAA8B,IAA1BpG,EAAK4C,SAAS0D,GACdA,QACG,CACH,IAAMC,EAAYvG,EAAKmD,SAASmD,GAC1BtF,EAAYhB,EAAKmD,SAASmD,EApf/B,GAwfD,OAFAA,GA1dU,EA4dFC,GACJ,KApeH,WAqeOtP,KAAK6J,YAAYd,EAAMsG,EAAQtF,GAC/B,MACJ,KAteH,WAueO/J,KAAKqK,kBAAkBC,EAAQ+E,EAAQtF,GACvC,MACJ,KAxeH,WAyeO/J,KAAK+K,cAAchC,EAAMsG,EAAQtF,GACjC,MACJ,KAxeH,WAyeO/J,KAAK0L,aAAa3C,EAAMuB,EAAQ+E,EAAQtF,GACxC,MACJ,QACI5G,QAAQgL,KAAK,iCAAmCrI,EAAa,IAAI0E,WAAWF,EAAQ+E,EA1elF,EA5BT,IAsgBoI,OAASA,GAG9IA,GAAUtF,EAUlB,OALA/J,KAAKyI,SAASvJ,aAAa,WAAY,IAAI,MAAgBc,KAAKwJ,SAAU,IAC1ExJ,KAAKyI,SAASvJ,aAAa,KAAM,IAAI,MAAgBc,KAAK0J,IAAK,IAC/D1J,KAAKyI,SAAS8G,SAAS,IAAI,MAAgBvP,KAAKyJ,QAAS,IACzDzJ,KAAKyI,SAAS+G,uBAEP,IAAIC,EAAa,IAAI,MAAKzP,KAAKyI,SAAUzI,KAAKuJ,WAAYvJ,KAAK2J,mBA3ClE,IAAM+F,EAAQ5J,EAAa,IAAI0E,WAAWF,EAF5B8E,EAteT,IAyeLjM,QAAQC,MAAM,sCAAwCsM,EAAQ,yBAZ9DvM,QAAQC,MAAM,yCAwD1B,EAzUA,GEpOA,aAEI,KAAAuM,SAAmB,EACnB,KAAAC,UAAoB,EACpB,KAAAC,WAAqB,KACrB,KAAAC,UAAoB,KACpB,KAAAC,gBAA0B,KAC1B,KAAAC,OAAuB,ICRpBC,EAAW,eAElB,0BAEI,KAAArF,KAAe,GACf,KAAAlJ,SAAmB,GACnB,KAAAwO,OAAoB,GACpB,KAAAC,OAAkB,GAClB,KAAAC,SAAsB,GACtB,KAAApD,QAAoB,GACpB,KAAAqD,aAAuB,KACvB,KAAAC,MAAkB,KAuBtB,OArBI,YAAAC,OAAA,SAAOC,EAAcC,EAAcC,GAC/B,OAAO,IAAI,MAAMT,EAASQ,GAAOR,EAASO,GAAOP,EAASS,GAAO,QAGrE,YAAAC,qBAAA,SAAqBC,EAA6Bd,EAAmBe,GACjE7Q,KAAKkQ,OAAOU,GAAuB,IAAI,MAAQC,EAAM,GAAIA,EAAM,GAAIA,EAAM,IACzE7Q,KAAKmQ,OAAOS,GAAuB5Q,KAAKuQ,OAAOM,EAAM,GAAIA,EAAM,GAAIA,EAAM,IACzE7Q,KAAKoQ,SAASQ,GAAuB,IAAI,MAAQC,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAC3E,IAAK,IAAIC,EAAIF,EAAqBE,GAAKhB,EAAWgB,IAC9C9Q,KAAKkQ,OAAOY,GAAK9Q,KAAKkQ,OAAOU,GAC7B5Q,KAAKmQ,OAAOW,GAAK9Q,KAAKmQ,OAAOS,GAC7B5Q,KAAKoQ,SAASU,GAAK9Q,KAAKoQ,SAASQ,IAIzC,YAAAG,uBAAA,SAAuBH,EAA6Bd,EAAmBxN,GACnE,IAAK,IAAIwO,EAAIF,EAAqBE,GAAKhB,EAAWgB,IAC9C9Q,KAAKgN,QAAQ8D,GAAKxO,GAI9B,EAhCA,GCHM0O,EAAQ,EAAQ,KAEtB,aAII,aACIhR,KAAKiR,MAAQ,IAAID,EACjBhR,KAAKiR,MAAMC,QAAQ,GAEnBlR,KAAKiR,MAAME,WAAWC,MAAMC,SAAW,WACvCrR,KAAKiR,MAAME,WAAWC,MAAME,KAAO,MACnCtR,KAAKiR,MAAME,WAAWC,MAAMG,IAAM,MAElC5S,SAAS6S,KAAK3S,YAAYmB,KAAKiR,MAAME,YACrCnR,KAAK6C,OAmBb,OAhBI,YAAAD,KAAA,WACI5C,KAAKiR,MAAME,WAAWC,MAAMK,WAAa,WAG7C,YAAA5O,KAAA,WACI7C,KAAKiR,MAAME,WAAWC,MAAMK,WAAa,UAG7C,YAAAC,YAAA,WACI1R,KAAKiR,MAAMU,SAGf,YAAAC,WAAA,WACI5R,KAAKiR,MAAMY,OAGnB,EAhCA,G,SCFA,aA4BI,WAAYjH,EAAckH,EAAgBC,EAAmCC,EAAwDC,EAAqDC,EAAqCC,QAArL,IAAAJ,OAAA,QAAmC,IAAAC,MAAA,WAAwD,IAAAC,MAAA,WAAqD,IAAAC,OAAA,QAAqC,IAAAC,MAAA,MAC3NnS,KAAK4K,KAAOA,EACZ5K,KAAKoS,OAASN,EAAS,IAAMA,EAAOO,MAAMP,EAAOjM,YAAY,KAAO,GAAK,MACzE7F,KAAK+R,kBAAoBA,EACzB/R,KAAKgS,sBAAwBA,EAC7BhS,KAAKiS,mBAAqBA,EAC1BjS,KAAKkS,oBAAsBA,EAC3BlS,KAAKmS,iBAAmBA,EA+BhC,OA5BW,EAAAG,UAAP,SAAiBC,GAEb,OADiBA,EAAaF,MAAME,EAAa1M,YAAY,KAAO,GAAGT,eAEnE,IAAK,cACD,OAAOpF,KAAKwS,YAChB,IAAK,YACD,OAAOxS,KAAKyS,aAChB,IAAK,QACD,OAAOzS,KAAK0S,MAChB,IAAK,eACD,OAAO1S,KAAK2S,cAChB,IAAK,WACD,OAAO3S,KAAK4S,SAChB,IAAK,UACD,OAAO5S,KAAK6S,QAChB,IAAK,WACD,OAAO7S,KAAK8S,QAChB,IAAK,cACD,OAAO9S,KAAK+S,aAChB,IAAK,aACD,OAAO/S,KAAKgT,WAChB,IAAK,cACD,OAAOhT,KAAKiT,aAChB,QACI,KAAM,0BAA4BV,IA3D9B,EAAAC,YAAc,IAAIU,EAAS,cAAe,yBAAyB,GACnE,EAAAT,aAAe,IAAIS,EAAS,cAAe,uBAC3C,EAAAR,MAAQ,IAAIQ,EAAS,QAAS,mBAAmB,EAC7D,KAAM,MAAM,EAAM,CAAC3P,EAAG,EAAGD,EAAG,IAChB,EAAAqP,cAAgB,IAAIO,EAAS,eAAgB,0BAA0B,EACnF,CAAC3P,EAAG,EAAGD,EAAG,IACE,EAAAsP,SAAW,IAAIM,EAAS,WAAY,sBACpC,EAAAL,QAAU,IAAIK,EAAS,UAAW,qBAClC,EAAAJ,QAAU,IAAII,EAAS,WAAY,sBAAsB,EACrE,CAAC3P,EAAG,EAAGD,GAAI,GAAI,MAAM,GACT,EAAAyP,aAAe,IAAIG,EAAS,cAAe,yBAAyB,EAChF,CAAC3P,EAAG,EAAGD,EAAG,IACE,EAAA0P,WAAa,IAAIE,EAAS,aAAc,wBAAwB,EAC5E,KAAM,MAAM,GACA,EAAAD,aAAe,IAAIC,EAAS,cAAe,yBAAyB,EAChF,CAAC3P,GAAI,EAAGD,EAAG,GAAI,CAACC,GAAI,EAAGD,GAAI,IAgDnC,EAlEA,IJeA,SAAY8F,GAER,yBACA,qBACA,2BACA,yBACA,qBANJ,CAAYA,MAAa,KKXzB,ICJY+J,EDIZ,0BAGI,KAAA3E,MAAe,IAAI,MACnB,KAAA4E,MAAgB,EA4BpB,OAxBI,YAAAC,YAAA,WACI,OAAOrT,KAAKwO,MAAM6C,SAASiC,SAG/B,YAAAC,cAAA,WACI,OAAO,IAAI,MAAQvT,KAAKwO,MAAM6C,SAAS9N,EAAGvD,KAAKwO,MAAM6C,SAASlI,IAGlE,YAAAqK,WAAA,WACI,OAAOxT,KAAKwO,MAAMiF,SAASnQ,GAG/B,YAAAoQ,WAAA,WACI1T,KAAKwO,MAAMmF,SAAU,GAGzB,YAAAC,kBAAA,WACI,OAAO5T,KAAK6T,SAASC,aAAaC,QAAQC,oBAAoBhU,KAAKwO,MAAM6C,WAG7E,YAAA4C,gBAAA,WACIjU,KAAK6T,SAASC,aAAaI,MAAM/M,OAAOnH,KAAKwO,QAGrD,EAhCA,ICJA,SAAY2E,GAER,2CACA,6CACA,yCACA,2CAEA,6CAEA,+BACA,+BAEA,2CAEA,yDAEA,uCAEA,oCACA,wCAEA,8CAEA,8BAEA,8CAEA,wCAEA,wCACA,4CACA,wDACA,sDACA,gDACA,oDACA,oDACA,gEAEA,0CACA,8CAvCJ,CAAYA,MAAQ,KCGpB,I,ECmGYgB,EAbZ,EDtFA,2BAuBA,OAlBW,EAAAC,aAAP,SAAoBC,GACZrU,KAAKsU,cAAcC,SAASF,EAAMG,YACjCH,EAAMI,SAAStR,QAAQyG,IAAI,oBAAsBuJ,EAASkB,EAAMG,WACrExU,KAAKsU,cAAcxJ,KAAKuJ,EAAMG,UAC9BxU,KAAK0U,YAAYL,EAAMG,UAAUzP,SAAQ,SAAC4P,GAAa,OAAAA,EAASN,MAChErU,KAAKsU,cAAcnN,OAAOkN,EAAMG,YAG7B,EAAAI,sBAAP,SAA6BJ,EAAoBG,GAC7C3U,KAAK0U,YAAYF,GAAU1J,KAAK6J,IAGrB,EAAAD,YAAf,SAA2BF,GACvB,OAAOxU,KAAK6U,cAAcpN,YAAY+M,GAAU,WAAM,aAhBnD,EAAAK,cAAgB,IAAIrN,IACpB,EAAA8M,cAAgB,GAoB3B,EAvBA,GEDA,EAKI,SAAYE,GACRxU,KAAKwU,SAAWA,G,kcDExB,cAEI,WAAYM,GAAZ,MACI,YAAMA,IAAU,K,OAChB,EAAKL,SAAU,E,EAGvB,OAPgC,OAOhC,EAPA,CAAgCM,GAShC,cAII,WAAYP,EAAoBQ,GAAhC,MACI,YAAMR,IAAS,K,OACf,EAAKQ,IAAMA,E,EAGnB,OAT8B,OAS9B,EATA,CAA8BC,GAW9B,cAEI,WAAYD,G,OACR,YAAM7B,EAAS+B,WAAYF,IAAI,KAGvC,OANoC,OAMpC,EANA,CAAoCG,GAQpC,cAEI,WAAYH,G,OACR,YAAM7B,EAASiC,WAAYJ,IAAI,KAGvC,OANoC,OAMpC,EANA,CAAoCG,GAQpC,cAEI,a,OACI,YAAMhC,EAASkC,mBAAiB,KAGxC,OANqC,OAMrC,EANA,CAAqCJ,GAQrC,cAII,WAAYK,GAAZ,MACI,YAAMnC,EAASoC,0BAAwB,K,OACvC,EAAKD,gBAAkBA,E,EAG/B,OAT2C,OAS3C,EATA,CAA2CL,GAW3C,cAII,WAAYO,GAAZ,MACI,YAAMrC,EAASsC,iBAAe,K,OAC9B,EAAKD,QAAUA,E,EAGvB,OATwC,OASxC,EATA,CAAwCP,GAWxC,cAKI,WAAYvU,EAAkBgV,GAA9B,MACI,YAAMvC,EAASwC,eAAa,K,OAC5B,EAAKjV,KAAOA,EACZ,EAAKgV,OAASA,E,EAGtB,OAXsC,OAWtC,EAXA,CAAsCT,GAaE,GAKpC,SAAYvU,EAAkBgV,GAA9B,MACI,YAAMvC,EAASyC,iBAAe,K,OAC9B,EAAKlV,KAAOA,EACZ,EAAKgV,OAASA,E,IARtB,EAAwCT,GAaxC,SAAYd,GAER,uBACA,yBACA,2BAJJ,CAAYA,MAAU,KAQtB,IE9GY0B,EF8GZ,cAEI,a,OACI,YAAM1C,EAAS2C,oBAAkB,KAGzC,OANsC,OAMtC,EANA,CAAsCb,GAQtC,cAEI,a,OACI,YAAM9B,EAAS4C,YAAU,KAGjC,OANmC,OAMnC,EANA,CAAmCd,GAQnC,cAII,WAAYe,GAAZ,MACI,YAAM7C,EAAS8C,oBAAkB,K,OACjC,EAAKD,SAAWA,E,EAGxB,OATsC,OAStC,EATA,CAAsCf,GAWtC,cAKI,WAAYiB,EAAyBC,GAArC,MACI,YAAMhD,EAASiD,iBAAe,K,OAC9B,EAAKV,OAASQ,EACd,EAAKC,MAAQA,E,EAGrB,OAXmC,OAWnC,EAXA,CAAmClB,IEzInC,SAAYY,GAER,mBACA,2BACA,2BAJJ,CAAYA,MAAQ,K,ICARQ,G,0dCQZ,cAMI,WAAsB3V,GAFtB,KAAA4V,UAA+B,GAG3BtW,KAAKU,KAAOA,EACZV,KAAKuW,SAAWV,EAASW,KAuCjC,OApCI,YAAAC,OAAA,SAAOH,GACH,IAAMjP,EAAQrH,KAAKsW,UAAUhP,QAAQgP,GACjCA,IAAwB,IAAXjP,GACbrH,KAAKsW,UAAUxL,KAAKwL,IAI5B,YAAAI,SAAA,SAASJ,GACLtW,KAAKsW,UAAUnP,OAAOmP,IAG1B,YAAAK,OAAA,WACI3W,KAAKuW,SAAWV,EAASe,SACzB,IAAMN,EAAYtW,KAAKsW,UACvBtW,KAAKsW,UAAY,GACjBA,EAAUvR,SAAQ,SAACuR,GAAc,OAAAA,EAAUO,cAG/C,YAAAC,YAAA,SAAYR,GACR,OAAO,GAGX,YAAAS,oBAAA,SAAoBT,GAChB,OAAO,MAGX,YAAAU,wBAAA,SAAwBV,GACpB,OAAO,MAGX,YAAAW,cAAA,WACIjX,KAAKuW,SAAWV,EAASqB,UAKjC,EA/CA,GAiDA,4B,+CAIA,OAJwC,QAIxC,EAJA,CAAwCC,KDzDxC,SAAYd,GAER,qBACA,6BACA,mBACA,mCACA,yBACA,qBACA,mBACA,qBACA,2BACA,iBACA,kDAZJ,CAAYA,QAAO,KEEnB,ICqEYe,GDrEZ,cAII,WAAYC,GACRrX,KAAKsX,eAAiBD,EAO9B,OAJI,YAAAE,SAAA,SAASlG,GACL,OAAO,GAGf,EAZA,G,0dEMA,eAII,WAAYmG,GAAZ,MACI,YAAMnB,GAAQoB,UAAQ,K,OACtB,EAAKD,KAAOA,E,EA0BpB,OAhCgC,QAS5B,YAAAE,cAAA,WACI,MAAO,CAAC,IAAIC,GAAW3X,KAAKwX,KAAKjE,mBAGrC,YAAAuD,YAAA,SAAYR,GACR,OAA6B,OAAtBA,EAAUsB,SAAoB5X,KAAKwX,KAAKK,aAGnD,YAAAC,sBAAA,WACI,OAAO9X,KAAKwX,KAAKM,yBAGrB,YAAAb,cAAA,WAEI,GADA,YAAMA,cAAa,WACfjX,KAAKwX,KAAKO,uBAAyBX,GAAgBY,eAAgB,CACnE,IAAMC,EAAgBjY,KAAKwX,KACvBS,EAAcC,cAAcC,kBAC5BnY,KAAKwX,KAAK3D,SAASC,aAAaI,MAAMlV,IAAIgB,KAAKwX,KAAKhJ,OACpDyJ,EAAcC,cAAcE,MAAQH,KAKpD,EAhCA,CAAgCI,ICRhC,GAII,SAAYC,GACRtY,KAAKsY,YAAcA,G,0dCH3B,4B,+CAIA,OAJwC,QAE7B,EAAAC,MAAQ,IAAIC,EAAmB,kBAE1C,EAJA,CAAwCC,I,0dCAxC,4B,+CAmFA,OAnFoC,QAEzB,EAAAC,MAAQ,IAAIC,EAAe,kBAC3B,EAAAC,SAAW,IAAID,EAAe,qBAC9B,EAAAE,MAAQ,IAAIF,EAAe,kBAC3B,EAAAG,KAAO,IAAIH,EAAe,kBAC1B,EAAAI,UAAY,IAAIJ,EAAe,sBAC/B,EAAAK,QAAU,IAAIL,EAAe,qBAC7B,EAAAM,SAAW,IAAIN,EAAe,sBAC9B,EAAAO,UAAY,IAAIP,EAAe,uBAC/B,EAAAQ,OAAS,IAAIR,EAAe,oBAC5B,EAAAS,QAAU,IAAIT,EAAe,oBAC7B,EAAAU,MAAQ,IAAIV,EAAe,kBAC3B,EAAAW,MAAQ,IAAIX,EAAe,kBAC3B,EAAAY,cAAgB,IAAIZ,EAAe,2BACnC,EAAAa,eAAiB,IAAIb,EAAe,4BACpC,EAAAc,WAAa,IAAId,EAAe,uBAChC,EAAAe,SAAW,IAAIf,EAAe,qBAC9B,EAAAgB,MAAQ,IAAIhB,EAAe,kBAC3B,EAAAiB,QAAU,IAAIjB,EAAe,qBAC7B,EAAAkB,WAAa,IAAIlB,EAAe,uBAChC,EAAAmB,OAAS,IAAInB,EAAe,mBAC5B,EAAAoB,KAAO,IAAIpB,EAAe,iBAC1B,EAAAqB,YAAc,IAAIrB,EAAe,yBACjC,EAAAsB,YAAc,IAAItB,EAAe,yBACjC,EAAAuB,IAAM,IAAIvB,EAAe,gBACzB,EAAAwB,UAAY,IAAIxB,EAAe,sBAC/B,EAAAyB,MAAQ,IAAIzB,EAAe,mBAC3B,EAAA0B,oBAAsB,IAAI1B,EAAe,gCACzC,EAAA2B,KAAO,IAAI3B,EAAe,iBAC1B,EAAA4B,MAAQ,IAAI5B,EAAe,kBAC3B,EAAA6B,SAAW,IAAI7B,EAAe,sBAE9B,EAAA8B,SAAW,IAAI9B,EAAe,qBAC9B,EAAA+B,SAAW,IAAI/B,EAAe,qBAC9B,EAAAgC,SAAW,IAAIhC,EAAe,qBAC9B,EAAAiC,SAAW,IAAIjC,EAAe,qBAE9B,EAAAkC,WAAa,IAAIlC,EAAe,uBAChC,EAAAmC,gBAAkB,IAAInC,EAAe,4BACrC,EAAAoC,kBAAoB,IAAIpC,EAAe,+BACvC,EAAAqC,mBAAqB,IAAIrC,EAAe,gCACxC,EAAAsC,mBAAqB,IAAItC,EAAe,gCACxC,EAAAuC,kBAAoB,IAAIvC,EAAe,+BAEvC,EAAAwC,WAAa,IAAIxC,EAAe,uBAChC,EAAAyC,gBAAkB,IAAIzC,EAAe,4BACrC,EAAA0C,kBAAoB,IAAI1C,EAAe,+BACvC,EAAA2C,mBAAqB,IAAI3C,EAAe,gCACxC,EAAA4C,mBAAqB,IAAI5C,EAAe,gCACxC,EAAA6C,kBAAoB,IAAI7C,EAAe,+BAEvC,EAAA8C,UAAY,IAAI9C,EAAe,sBAC/B,EAAA+C,eAAiB,IAAI/C,EAAe,2BACpC,EAAAgD,iBAAmB,IAAIhD,EAAe,8BACtC,EAAAiD,kBAAoB,IAAIjD,EAAe,+BACvC,EAAAkD,kBAAoB,IAAIlD,EAAe,+BACvC,EAAAmD,iBAAmB,IAAInD,EAAe,8BAEtC,EAAAoD,SAAW,IAAIpD,EAAe,qBAC9B,EAAAqD,cAAgB,IAAIrD,EAAe,0BACnC,EAAAsD,gBAAkB,IAAItD,EAAe,6BACrC,EAAAuD,iBAAmB,IAAIvD,EAAe,8BACtC,EAAAwD,iBAAmB,IAAIxD,EAAe,8BACtC,EAAAyD,gBAAkB,IAAIzD,EAAe,6BAErC,EAAA0D,SAAW,IAAI1D,EAAe,qBAC9B,EAAA2D,cAAgB,IAAI3D,EAAe,0BACnC,EAAA4D,gBAAkB,IAAI5D,EAAe,6BACrC,EAAA6D,iBAAmB,IAAI7D,EAAe,8BACtC,EAAA8D,iBAAmB,IAAI9D,EAAe,8BACtC,EAAA+D,gBAAkB,IAAI/D,EAAe,6BAErC,EAAAgE,SAAW,IAAIhE,EAAe,qBAC9B,EAAAiE,cAAgB,IAAIjE,EAAe,0BACnC,EAAAkE,gBAAkB,IAAIlE,EAAe,6BACrC,EAAAmE,iBAAmB,IAAInE,EAAe,8BACtC,EAAAoE,iBAAmB,IAAIpE,EAAe,8BACtC,EAAAqE,gBAAkB,IAAIrE,EAAe,6BAErC,EAAAsE,YAAc,IAAItE,EAAe,wBACjC,EAAAuE,iBAAmB,IAAIvE,EAAe,6BAEjD,EAnFA,CAAoCH,I,0dCApC,4B,+CAOA,OAPsC,QAE3B,EAAA2E,SAAW,IAAIC,EAAiB,qBAChC,EAAAxD,QAAU,IAAIwD,EAAiB,oBAC/B,EAAAC,QAAU,IAAID,EAAiB,oBAC/B,EAAAE,UAAY,IAAIF,EAAiB,sBAE5C,EAPA,CAAsC5E,I,0dCkBtC,eAKI,WAAYnB,EAAmBkG,EAAoBvH,GAAnD,MACI,YAAMqB,IAAS,K,OACf,EAAKkG,KAAOA,EACZ,EAAKvH,SAAWA,E,EAsDxB,OA9DuC,QAWnC,YAAAwH,cAAA,WACI,OAAIxd,KAAKgW,UACEhW,KAAKgW,SAASyH,SAASnF,cAAgBtY,KAAKgW,SAAS0H,qBAAqBpF,aAKzF,YAAAqF,WAAA,SAAWnG,GAAX,WACQxX,KAAKud,KACLvd,KAAKud,KAAKK,QAAQpG,GACXxX,KAAKgW,SACRhW,KAAKgW,SAAStV,OAASwS,EAASP,eAAiB3S,KAAKgW,SAAStV,OAASwS,EAASH,cAC7E/S,KAAKgW,SAAS6H,aACd7d,KAAKgW,SAAS6H,WAAW7e,IAAIwY,EAAKhJ,OAClCgJ,EAAKhJ,MAAM6C,SAASxJ,IAAI,EAAG,EAAG,IAElC7H,KAAKgW,SAAS8H,eAAeV,GAAiBxD,SAAS,WACnD,EAAK5D,SAAS8H,iBACV,EAAK9H,SAAS6H,YAAY,EAAK7H,SAAS6H,WAAW1W,OAAOqQ,EAAKhJ,OACnEuP,EAAkBC,iBAAiBxG,OAIvCuG,EAAkBC,iBAAiBxG,GAGvCA,EAAK3D,SAASC,aAAaI,MAAMlV,IAAIwY,EAAKhJ,QAInC,EAAAwP,iBAAf,SAAgCxG,GAC5B,OAAQA,EAAKO,sBACT,KAAKX,GAAgB6G,QACjBC,GAAUC,aACVC,EAAShK,aAAa,IAAIiK,EAAsB7G,EAAKO,uBACrD,MACJ,KAAKX,GAAgBkH,IACjBJ,GAAUK,SACVH,EAAShK,aAAa,IAAIiK,EAAsB7G,EAAKO,yBAKjE,YAAAyG,cAAA,WACI,OAAIxe,KAAKgW,UAAahW,KAAKgW,SAAStV,OAASwS,EAASP,eAAiB3S,KAAKgW,SAAStV,OAASwS,EAASH,aAG5F4F,GAAegB,MAFfhB,GAAeiB,SAMlC,EA9DA,CAAuCjC,I,0dNTvC,0E,OAEI,EAAA8G,QAA+B,GAC/B,EAAAC,WAA2B,K,EAuD/B,OA1DgD,QAO5C,YAAA7G,UAAA,WACI,OAAO7X,KAAK2e,gBAAgBjU,OAAS,GAGzC,YAAAkU,gBAAA,WACI,OAAO5e,KAAK2e,iBAGhB,YAAAE,YAAA,WACI7e,KAAKye,QAAU,GACfze,KAAK0e,WAAa,KAClB1e,KAAK2e,iBAGC,YAAAA,cAAV,sBACI,GAAI3e,KAAKye,QAAQ/T,OAAS,EAAG,CACzB,IAAMoU,EAAQZ,GAAUa,cAAc7Z,QAAO,SAACX,GAAM,OAAAA,EAAEya,MAAM,EAAKjH,yBACjE,GAAI+G,EAAMpU,OAAS,EACf1K,KAAKye,QAAUK,EAAMzZ,KAAI,SAACmD,GAAM,WAAIuV,GAAkBvV,EAAEyW,wBAAyBzW,EAAG,aACjF,CACH,IAAM0W,EAAYhB,GAAUiB,mBAAV,MAAAjB,GAAgCle,KAAKof,0BACnDF,EAAUxU,OAAS,IACnB1K,KAAKye,QAAUS,EAAU7Z,KAAI,SAACd,GAAM,WAAIwZ,GAAkBxZ,EAAE8a,oBAAqB,KAAM9a,aAGxFvE,KAAKye,QAAQa,MAAK,SAACC,GAAM,OAAAA,EAAEhC,MAAQgC,EAAEhC,KAAKiC,aAE1Cxf,KAAKye,QAAQa,MAAK,SAACC,GAAM,OAAAA,EAAEvJ,WAAauJ,EAAEvJ,SAASyJ,iBAD1Dzf,KAAK6e,cAIT,OAAO7e,KAAKye,SAGhB,YAAA/K,WAAA,WACI,YAAMA,WAAU,WAChBwK,GAAUwB,yBAAyBvY,OAAOnH,MAC1Cke,GAAUyB,aAAa7U,KAAK9K,MAC5Boe,EAAShK,aAAa,IAAIwL,EAAe,IAAIC,GAAW7f,SAO5D,YAAA8f,cAAA,SAAcvC,G,QACNvd,KAAK0e,aAAenB,IACT,QAAf,EAAAvd,KAAK0e,kBAAU,SAAEqB,SAAS/f,MAC1BA,KAAK0e,WAAanB,EACH,QAAf,EAAAvd,KAAK0e,kBAAU,SAAEjI,OAAOzW,QAGhC,EA1DA,CAAgDggB,IA4DhD,SAAY5I,GAER,2BACA,yBACA,iBACA,qBACA,yBACA,uCAPJ,CAAYA,QAAe,K,IOvEf6I,G,0dCOZ,eAEI,WAAYzL,GAAZ,MACI,YAAMA,IAAS,K,OACf,EAAKC,SAAU,E,EAGvB,OAPgC,QAOhC,EAPA,CAAgCM,GAShC,eAEI,WAAYP,G,OACR,YAAMA,IAAS,KAGvB,OANoC,QAMpC,EANA,CAAoC0L,IAQpC,eAII,WAAY1K,GAAZ,MACI,YAAMrC,EAASgN,mBAAiB,K,OAChC,EAAK3K,QAAUA,E,EAGvB,OAT0C,QAS1C,EATA,CAA0C4K,IAW1C,eAII,WAAYpK,GAAZ,MACI,YAAM7C,EAASkN,oBAAkB,K,OACjC,EAAKrK,SAAWA,E,EAGxB,OATsC,QAStC,EATA,CAAsCoK,IAWtC,eAII,WAAYlK,GAAZ,MACI,YAAM/C,EAASmN,kBAAgB,K,OAC/B,EAAKpK,OAASA,E,EAGtB,OAToC,QASpC,EATA,CAAoCkK,IAsBpC,IAXA,YAAqC,IAIjC,SAAYG,GAAZ,MACI,YAAMpN,EAASqN,mBAAiB,K,OAChC,EAAKD,QAAUA,E,IANc,GAArC,CAAqCH,IAWrC,YAEI,a,OACI,YAAMjN,EAASsN,oBAAkB,KAGzC,OANsC,QAMtC,EANA,CAAsCP,KAQtC,eAII,WAAY1K,GAAZ,MACI,YAAMrC,EAASuN,kBAAgB,K,OAC/B,EAAKlL,QAAUA,E,EAGvB,OAToC,QASpC,EATA,CAAoC0K,IAWpC,eAEI,a,OACI,YAAM/M,EAASwN,oBAAkB,KAGzC,OANqC,QAMrC,EANA,CAAqCT,I,0dC1ErC,eAeI,WAAsBU,GAAtB,MACI,cAAO,K,OAdX,EAAAA,WAAkC,KAClC,EAAAC,KAAmB,GACnB,EAAAC,UAAsB,KACtB,EAAAC,iBAAmC,KACnC,EAAAC,eAAyB,KACzB,EAAAC,WAAmB,KACnB,EAAAC,iBAA2B,EAC3B,EAAArD,WAAuB,KACvB,EAAAsD,aAAyB,KACzB,EAAAC,aAAyB,KACzB,EAAA3D,SAAyB,KACzB,EAAA4D,SAAmB,EAIf,EAAKT,WAAaA,E,EA0K1B,OA3LyC,QAoBrC,YAAAU,OAAA,WAGIlD,EAAShK,aAAa,IAAImN,IAC1BvhB,KAAK8d,iBAEL0D,EAAWC,OAAOzhB,KAAM,EAAI0hB,KAGjB,EAAAD,OAAf,SAAsB/L,EAAoBiM,GAClCA,EAAU,GACVA,IACAjM,EAAOlH,MAAM6C,SAAS/N,GAAMoe,GAAWE,GAAoB,EAC3DC,YAAW,WAAM,OAAAL,EAAWC,OAAO/L,EAAQiM,KAAU,IAAOC,KAE5DlM,EAAOzB,mBAIf,YAAA6J,eAAA,SAAeL,EAA0DqE,EAAwBC,GAC7F,QADW,IAAAtE,MAA+Bzd,KAAK0d,2BAAsB,IAAAoE,MAAA,WAAwB,IAAAC,MAAA,MACzF/hB,KAAKyd,WAAaA,EAAtB,CACAzd,KAAKyd,SAAWA,EAChB,IAAIuE,EAAevE,EAASnF,YAAYlT,cACpC6c,EAAOjiB,KAAK4gB,WAAWxY,WAAWT,IAAIqa,GAM1C,GALKC,GACDjiB,KAAK4gB,WAAWxY,WAAWrD,SAAQ,SAACP,EAAGW,IAC9B8c,GAAQD,EAAatc,WAAWP,KAAM8c,EAAOzd,QAGrDyd,aAAI,EAAJA,EAAMnB,WAGP,OAFA3d,QAAQgL,KAAK,YAAcsP,EAASnF,YAAc,6CAClDnV,QAAQyG,IAAI5J,KAAK4gB,WAAWxY,YAGhCpI,KAAKkiB,aAAaD,aAAI,EAAJA,EAAMnB,UAAWgB,EAAiBC,KAGhD,YAAAG,aAAR,SAAqBpB,EAAqBgB,EAAwBC,G,MAAlE,YAA0C,IAAAD,MAAA,WAAwB,IAAAC,MAAA,MAC1DD,GAAiBA,EAAgBK,KAAKniB,MAC1CA,KAAK8gB,UAAYA,EACjB9gB,KAAK8gB,UAAUnR,SAAU,EACzB3P,KAAK+gB,iBAAmBpa,EAAiB3G,KAAK+gB,mBAC9C,EAAA/gB,KAAKwO,OAAMrH,OAAM,QAAInH,KAAK6gB,MAC1B7gB,KAAK6gB,KAAO,GACZ,IAAMjJ,EAAW5X,KAAK6d,YAAc7d,KAAK6d,WAAWuE,UAAa,GACjEpiB,KAAK6d,WAAa,KAElB7d,KAAK8gB,UAAU9Q,OAAOjL,SAAQ,SAACyM,G,YACvBlB,EAAkB,EAAK,EAAKsQ,WAAW1Y,SAAUsJ,EAAK5G,MACrD0F,IAAOA,EAAQ,EAAK,EAAKsQ,WAAW3Y,WAAYuJ,EAAK5G,OACrD0F,IAAOA,EAAQkB,EAAKlB,OACzB,IAAM+R,EAAY/R,EAAMgD,OAAM,GAE9B,GADA,EAAKuN,KAAK/V,KAAKuX,GACX7Q,EAAK5G,KAAM,CACX,IAAM0X,EAAY9Q,EAAK5G,KAAKxF,cACxBkd,KAA2C,QAA7B,IAAK1B,WAAW9Y,qBAAa,eAAE1C,gBAC7C,EAAKyY,WAAawE,EACdzK,EAAQlN,OAAS,IAAG,IAAKmT,YAAW7e,IAAG,QAAI4Y,IACxC0K,KAA6C,QAA/B,IAAK1B,WAAW7Y,uBAAe,eAAE3C,eACtD,EAAK+b,aAAekB,EACbC,KAA0C,QAA5B,IAAK1B,WAAW5Y,oBAAY,eAAE5C,iBACnD,EAAKgc,aAAeiB,OAIhCriB,KAAK8gB,UAAU9Q,OAAOjL,SAAQ,SAACyM,EAAMnK,GACjC,IAAMkb,EAAW,EAAK1B,KAAKxZ,GACrBmb,EAAYhR,EAAKnB,aACnBmS,QACA,EAAK3B,KAAK2B,GAAWxjB,IAAIujB,GAEzB,EAAK/T,MAAMxP,IAAIujB,MAGvB,IAAME,EAAS,IAAI,OACnB,IAAI,OAAOC,cAAc1iB,KAAKwO,OAAOmU,kBAAkBF,GACvDziB,KAAKqhB,SAAWoB,EAAOG,OAASH,EAAOG,OACvC5iB,KAAK6iB,QAAQ,EAAGf,EAAiBC,IAG7B,YAAAc,QAAR,SAAgBC,EAAYhB,EAAiBC,GAA7C,WACI,GAAI/hB,KAAK6gB,KAAKnW,SAAW1K,KAAK8gB,UAAU9Q,OAAOtF,OAAQ,KAAM,yDAC7D1K,KAAK8gB,UAAU9Q,OAAOjL,SAAQ,SAACyM,EAAkBnK,GAC7C,IAAM0b,EAAI,EAAKlC,KAAKxZ,GAIpB,GAHA0b,EAAE1R,SAAS2R,KAAKxR,EAAKtB,OAAO4S,IAC5BC,EAAEtP,SAASuP,KAAKxR,EAAKrB,OAAO2S,IAC5BC,EAAEE,MAAMD,KAAKxR,EAAKpB,SAAS0S,IACvBC,EAAEG,eAAe,YAAa,CAC9B,IAAM,EAAWH,EAAY,SACvB,EAAUvR,EAAKxE,QAAQ8V,GACzB,QAAwBlb,IAAZ,IACGX,MAAMyB,QAAQ,GAAY,EAAW,CAAC,IAC9C3D,SAAQ,SAAC6D,GACZA,EAAIoE,QAAU,EACdpE,EAAIqE,YAAc,EAASD,QAAU,SAKrDhN,KAAK+gB,iBAAmBpa,EAAiB3G,KAAK+gB,kBAC9C,IAAIoC,EAAYL,EAAa,EAC7B,GAAIK,GAAanjB,KAAK8gB,UAAUhR,YAAcgS,GAAuC,OAAnBC,GAA2BA,EAAiB,EAAI,CAC1GoB,EAAYnjB,KAAK8gB,UAAUhR,YAC3BqT,EAAYnjB,KAAK8gB,UAAUjR,YAE/B,IAAMuT,EAAyB,IAAOpjB,KAAK8gB,UAAU/Q,gBAAkB/P,KAAK8gB,UAAUlR,UAC/D,OAAnBmS,IAAyBA,GAAkBqB,GAC/C,IAAM,EAAOpjB,KACPqjB,EAAmC,OAAnBtB,EAA0B1b,KAAKD,IAAI,EAAGC,KAAKF,IAAI4b,EAAgBqB,IAA2BA,EAChHpjB,KAAK+gB,iBAAmBc,YAAW,WAAM,SAAKgB,QAAQM,EAAWrB,EAAiBC,KAAiBsB,QAC5FvB,GACPA,KAIR,YAAApE,mBAAA,WACI,OAAOlF,GAAmBD,OAG9B,YAAA+K,iBAAA,WACI,IAAItjB,KAAKihB,WAAT,CACA,IAAMsC,EAAmBvjB,KAAKwjB,sBACxB/a,EAAW,IAAI,MAAezI,KAAKkhB,iBAAkBlhB,KAAKkhB,iBAAkBlhB,KAAKkhB,kBACjFvY,EAAW,IAAI,MAAkB,CAAC0D,MAAO,SAAUsH,SAAS,IAClE3T,KAAKihB,WAAa,IAAI,MAAKxY,EAAUE,GACrC3I,KAAKihB,WAAWwC,SAAW,CAACC,WAAY1jB,MACxCA,KAAKihB,WAAW5P,SAAS2R,KAAKO,GAC9BvjB,KAAKwO,MAAMxP,IAAIgB,KAAKihB,YACpBjhB,KAAK2jB,qBAAqBJ,KAG9B,YAAAC,oBAAA,WACI,OAAOxjB,KAAK4jB,wBAGhB,YAAAA,qBAAA,WACI,IAAMvV,EAAS,IAAI,MAInB,OAHA,IAAI,OAAOqU,cAAc1iB,KAAKwO,OAAOqV,UAAUxV,GAC/CA,EAAOyV,IAAI9jB,KAAKwO,MAAM6C,UACtBhD,EAAO0V,cAAa,IAAI,OAAUC,WAAW,EAAG,EAAG,IAC5C3V,GAGH,YAAAsV,qBAAR,SAA6BJ,GACzB,IAAMU,EAA4B,IAC5BC,EAAMlhB,EAAcihB,EAA2BA,GACrDC,EAAI1gB,UAAY,OAChB,IAAM2gB,EAAW9d,KAAK+d,MAAM,GAAKpkB,KAAKkhB,kBAChCxW,EAASuZ,mBACfC,EAAIzgB,SAAS,EAAG,EAAGiH,EAAQyZ,GAC3BD,EAAIzgB,SAAS,EAAG,EAAG0gB,EAAUzZ,GAC7BwZ,EAAIzgB,SAASwgB,mBAAoC,EAAGvZ,EAAQyZ,GAC5DD,EAAIzgB,SAASwgB,EAA4BE,EAAU,EAAGA,EAAUzZ,GAChEwZ,EAAIzgB,SAASwgB,EAA4BE,EAAUF,mBAAoCE,EAAUzZ,GACjGwZ,EAAIzgB,SAASwgB,mBAAoCA,EAA4BE,EAAUzZ,EAAQyZ,GAC/FD,EAAIzgB,SAAS,EAAGwgB,EAA4BE,EAAUzZ,EAAQyZ,GAC9DD,EAAIzgB,SAAS,EAAGwgB,mBAAoCE,EAAUzZ,GAC9D,IAAM2Z,EAAwB,IAAI,MAAcH,EAAIvgB,QAC9C2gB,EAAoB,IAAI,MAAe,CAACjf,IAAKgf,EAAuBE,WAAW,IACrFvkB,KAAKghB,eAAiB,IAAI,MAAOsD,GACjCtkB,KAAKghB,eAAe3P,SAAS2R,KAAKO,GAClC,IAAMiB,EAA6C,EAAxBxkB,KAAKkhB,iBAChClhB,KAAKghB,eAAeiC,MAAMpb,IAAI2c,EAAoBA,EAAoBA,GACtExkB,KAAKghB,eAAerN,SAAU,EAC9B3T,KAAKwO,MAAMxP,IAAIgB,KAAKghB,iBAG5B,EA3LA,CAAyChB,G,0dCXzC,4B,+CAKA,OALsC,QAE3B,EAAAyE,OAAS,IAAIC,EAAiB,UAC9B,EAAAC,SAAW,IAAID,EAAiB,YAE3C,EALA,CAAsCjM,I,0dCStC,eAII,mBACI,YAAM5K,GAAgB+W,uBAAuB,oCAAkC,K,OAC/E,EAAK9G,iB,EA0Cb,OAhD8B,QAS1B,sBAAI,oBAAK,C,IAAT,WACI,MAAO,I,gCAGX,YAAAjG,UAAA,WACI,OAAO7X,KAAKkY,eAAiBlY,KAAKkY,cAAc2M,gBAAkB3G,GAAU4G,iBAAiB5R,EAASV,cAG1G,YAAAoM,gBAAA,WACI,OAAI5e,KAAKkY,eAAiBlY,KAAKkY,cAAc2M,eAClC7kB,KAAKkY,cAAc6M,kBAAkB1f,KAAI,SAAC0d,GAAM,WAAIpL,GAAWoL,MAE/D7E,GAAUiB,mBAAmBjM,EAASV,aAAanN,KAAI,SAACd,GAAM,OAAAA,EAAE8a,uBAClEha,KAAI,SAAC0d,GAAM,WAAIpL,GAAWoL,OAIvC,YAAAhL,mBAAA,WACI,OAAOX,GAAgB4N,UAG3B,YAAAC,OAAA,sBAEIjlB,KAAK6T,SAASC,aAAaI,MAAMlV,IAAIgB,KAAKwO,OAC1C,IAAMH,EAASrO,KAAKkY,cAAcgN,iBAClC7W,EAAO/K,EAAItD,KAAKwO,MAAM6C,SAAS/N,EAC/BtD,KAAKwO,MAAM2W,OAAO9W,GAClBrO,KAAK8d,eAAe4G,GAAiBC,UAAU,WAC3C,EAAK1Q,kBACL,EAAKiE,cAAckN,eAM3B,YAAA1H,mBAAA,WACI,OAAOgH,GAAiBD,QAGhC,EAhDA,CAA8BjD,KJX9B,SAAYvB,GAER,yCACA,yCACA,6CACA,qCACA,2CACA,+CACA,qDACA,uDACA,iDACA,+CAXJ,CAAYA,QAAkB,K,IKuBlBoF,G,0dCfZ,eAEI,mBACI,cAAO,KACDC,EAAYzX,GAAgB0X,YAAY,0CACxCC,EAAQC,GAAaC,aAAa,IAAIC,EAAU,sBAAsB5W,MAAMuW,IACjFE,EAAM7c,SAAwB5D,SAAQ,SAAC6D,GACpCA,EAAIyD,MAAQ,IAAI,MAAM,EAAG,EAAG,GAC5BzD,EAAIgd,SAAW,IAAI,MAAM,EAAG,IAAK,GACjChd,EAAIid,YAAa,EACjBjd,EAAIoE,QAAU,GACdpE,EAAIqE,YAAcrE,EAAIoE,QAAU,KAEpCwY,EAAMvC,MAAMpb,IAAI,KAAM,KAAM,MAC5B,EAAK2G,MAAMxP,IAAIwmB,GACf,IAAMM,EAAWjY,GAAgB0X,YAAY,4BACvCld,EAAOod,GAAaC,aAAa,IAAIC,EAAU,iBAAiB5W,MAAM+W,I,OAC3Ezd,EAAKM,SAAwB5D,SAAQ,SAAC6D,GACnCA,EAAIgd,SAAW,IAAI,MAAM,EAAG,EAAG,GAC/Bhd,EAAIyD,MAAQ,IAAI,MAAM,EAAG,EAAG,GAC5BzD,EAAIoE,QAAU,GACdpE,EAAIqE,YAAcrE,EAAIoE,QAAU,KAEpC,EAAKwB,MAAMxP,IAAIqJ,G,EAwBvB,OA/C6B,QA0BzB,sBAAI,oBAAK,C,IAAT,WACI,OAAOwF,GAAgBoD,MAAM8U,c,gCAGjC,YAAA3G,uBAAA,WACI,MAAO,CAAClM,EAASP,cAAeO,EAASV,cAG7C,YAAAkB,WAAA,WACI,YAAMA,WAAU,WAChBvQ,QAAQyG,IAAI,0CAGhB,YAAAmO,mBAAA,WACI,OAAOX,GAAgB6G,SAG3B,YAAAnG,sBAAA,WACI,OAAOmI,GAAmB+F,mBAGlC,EA/CA,CAA6BC,I,0dCD7B,eAEI,mBACI,cAAO,KACDH,EAAWjY,GAAgB0X,YAAY,4BACvCld,EAAOod,GAAaC,aAAa,IAAIC,EAAU,kBAAkB5W,MAAM+W,I,OAC7E,EAAKtX,MAAMxP,IAAIqJ,G,EAwBvB,OA9ByB,QASrB,sBAAI,oBAAK,C,IAAT,WACI,OAAOwF,GAAgBoD,MAAMiV,K,gCAGjC,YAAA9G,uBAAA,WACI,MAAO,CAAClM,EAASH,aAAcG,EAASV,cAG5C,YAAAkB,WAAA,WACI,YAAMA,WAAU,WAChBvQ,QAAQyG,IAAI,4BAGhB,YAAAmO,mBAAA,WACI,OAAOX,GAAgBkH,KAG3B,YAAAxG,sBAAA,WACI,OAAOmI,GAAmBkG,eAGlC,EA9BA,CAAyBF,ICPzB,cAWI,WAAYrb,GACR5K,KAAK4K,KAAOA,EAGpB,OAbW,EAAAwb,OAAS,IAAIC,EAAY,UACzB,EAAAC,SAAW,IAAID,EAAY,YAC3B,EAAAE,UAAY,IAAIF,EAAY,aAC5B,EAAAG,MAAQ,IAAIH,EAAY,SACxB,EAAAI,OAAS,IAAIJ,EAAY,UACzB,EAAAK,WAAa,IAAIL,EAAY,cAQxC,EAfA,IHuBA,SAAYhB,GAER,yBACA,2BACA,uBAJJ,CAAYA,QAAe,KAQ3B,IICYsB,GJDZ,4BAsOA,OAjMW,EAAAC,MAAP,WACI5mB,KAAK6mB,YAAcxB,GAAgByB,QACnC9mB,KAAK+mB,cAAgB,GACrB/mB,KAAKme,WAAa,EAClBne,KAAKue,OAAS,EACdve,KAAKgnB,SAAW,EAChBhnB,KAAKinB,aAAe,EACpBjnB,KAAKknB,eAAiB,EACtBlnB,KAAKmnB,SAAW,EAChBnnB,KAAKonB,iBAAmB,GACxBpnB,KAAKqnB,cAAgB,KACrBrnB,KAAKkf,UAAY,GACjBlf,KAAKsnB,sBAAwB,GAC7BtnB,KAAKunB,QAAU,GACfvnB,KAAKwnB,oBAAsB,GAC3BxnB,KAAKynB,iBAAmB,EACxBznB,KAAK0nB,SAAW,GAChB1nB,KAAK2nB,qBAAuB,GAC5B3nB,KAAK2f,aAAe,GACpB3f,KAAK0f,yBAA2B,GAChC1f,KAAK+e,cAAgB,GACrB/e,KAAK4nB,QAAU,GACf5nB,KAAK6nB,iBAAmB,IAAIrgB,IAC5BxH,KAAK8nB,KAAO,GACZ9nB,KAAK+nB,cAAgB,EACrB/nB,KAAKgoB,UAAY,EACjBhoB,KAAKioB,eAAiB,EACtBjoB,KAAKkoB,mBAAqB,EAC1BloB,KAAKmoB,aAAe,EACpBnoB,KAAKooB,kBAAoB,EACzBpoB,KAAKqoB,eAAiB,EACtBroB,KAAKsoB,cAAgB,EACrBtoB,KAAKuoB,aAAe,KACpBvoB,KAAKwoB,aAAe,KACpBxoB,KAAKyoB,WAAa,GAGf,EAAAtJ,mBAAP,W,IAA0B,sDACtB,OAAOnf,KAAKkf,UAAUha,QAAO,SAAAX,GAAK,OAAAA,EAAEkb,aAAeiJ,EAAcpJ,MAAK,SAAAqJ,GAAM,OAAApkB,EAAE7D,OAASioB,SAGpF,EAAAC,yBAAP,SAAgCvX,G,IAAmB,wDAC/C,IAAMwX,EAAkB3K,EAAUiB,mBAAkB,MAA5BjB,EAAgCwK,GACpDI,EAAU,KAAMC,EAAU,KAS9B,OARAF,EAAgB9jB,SAAQ,SAACR,GACrB,IAAMykB,EAAOzkB,EAAE0kB,kBACTC,EAAO7X,EAAS8X,kBAAkBH,IACxB,OAAZF,GAAoBI,EAAOH,KAC3BD,EAAUvkB,EACVwkB,EAAUG,MAGXJ,GAGJ,EAAAhE,iBAAP,W,IAAwB,sDACpB,OAAO9kB,KAAKkf,UAAUI,MAAK,SAAC/a,GAAM,OAAA2a,EAAUI,MAAK,SAAC5e,GAAS,OAAA6D,EAAE7D,OAASA,MAAS6D,EAAEkb,gBAG9E,EAAA2J,wBAAP,SAA+BpT,EAAoBqT,GAC/C,YAD+C,IAAAA,MAAA,GACxCrpB,KAAKkf,UAAUI,MAAK,SAAC/a,GAAM,OAAAA,EAAE7D,OAASsV,GAAYzR,EAAE6O,OAASiW,GAAY9kB,EAAEkb,gBAG/E,EAAA6J,iBAAP,SAAwBjY,EAAmBkY,GACvC,OAAIA,IAAalD,GAAYK,WAClB1mB,KAAKkf,UAAUha,QAAO,SAACX,GAC1B,OAAOA,EAAE0M,MAAMuY,eAAiBjlB,EAAE0M,MAAMuY,cAAcjlB,EAAE6O,UAGzD,IAGJ,EAAAqW,eAAP,SAAsBC,GAAtB,WACI1pB,KAAKonB,iBAAmBpnB,KAAKonB,iBAAiBliB,QAAO,SAACykB,GAClD,IAAMC,GAA0D,IAA1CF,EAASpiB,QAAQqiB,GAEvC,OADKC,GAAeD,EAAmBE,WAChCD,KAGX,IAAME,EAAkB,GACxBJ,EAAS3kB,SAAQ,SAACglB,GACd,IAAMC,EAAiBD,EAAgBE,SACnCD,IACA,EAAK5C,iBAAiBtc,KAAKif,GAC3BD,EAAgBhf,KAAKkf,OAI7B,IAAME,EAAMlqB,KAAKonB,iBAAiB1c,OAC9Bwf,EAAM,EACNlqB,KAAKqnB,cAAgBje,EAAc+gB,MACpB,IAARD,EACPlqB,KAAKqnB,cAAgBrnB,KAAKonB,iBAAiB,GAAGgD,mBAChB,OAAvBpqB,KAAKqnB,gBACZrnB,KAAKqnB,cAAgB,KACrBjJ,EAAShK,aAAa,IAAImN,KAG9BuI,EAAgB/kB,SAAQ,SAACsP,GAAU,OAAA+J,EAAA,aAAsB/J,OAGtD,EAAAgW,cAAP,WACI,OAAOC,GAAkBtqB,KAAKmf,mBAAmBjM,EAASN,UAAUlI,OAAS6f,IAG1E,EAAAC,gBAAP,SAAuBhV,GACnB,IAAMiV,EAAOjV,EAAQjS,EAAIme,GAAUgJ,EAAOlV,EAAQlS,EAAIoe,GAChDiJ,EAAOF,EAAO/I,GAAUkJ,EAAOF,EAAOhJ,GAC5C1hB,KAAK6qB,iBAAiB7qB,KAAKwnB,oBAAqBiD,EAAME,EAAMD,EAAME,GAClE5qB,KAAK6qB,iBAAiB7qB,KAAKsnB,sBAAuBmD,EAAME,EAAMD,EAAME,GACpE5qB,KAAK6qB,iBAAiB7qB,KAAK2nB,qBAAsB8C,EAAME,EAAMD,EAAME,GACnE5qB,KAAK6qB,iBAAiB7qB,KAAK0f,yBAA0B+K,EAAME,EAAMD,EAAME,IAGpE,EAAAC,iBAAP,SAAwBC,EAA4BL,EAAME,EAAMD,EAAME,GAClE,IAAMG,EAAa,GACnBD,EAAa/lB,SAAQ,SAACf,GAClB,IAAMgnB,EAAMhnB,EAAEqP,cACV2X,EAAIznB,GAAKknB,GAAQO,EAAIznB,EAAIonB,GAAQK,EAAI7hB,GAAKuhB,GAAQM,EAAI7hB,EAAIyhB,IAC1D5mB,EAAE0P,aACFqX,EAAWjgB,KAAK9G,OAGxB+mB,EAAWhmB,SAAQ,SAACV,GAAM,OAAAymB,EAAa3jB,OAAO9C,OAG3C,EAAA4mB,aAAP,SAAoBvqB,EAAuBwqB,GACvC,IAAM7nB,EAAS,GACf,GAAI3C,IAAS0W,GAAgB4N,SACzB,IAAK,IAAIlU,EAAI,EAAGA,EAAIoa,EAAUpa,IAAKzN,EAAOyH,KAAK,IAAI4O,SAChD,GAAIhZ,IAAS0W,GAAgB6G,QAChC,KAAOC,EAAUC,WAAa,GAAK9a,EAAOqH,OAASwgB,GAC/ChN,EAAUC,aACV9a,EAAOyH,KAAK,IAAIqgB,SAEjB,GAAIzqB,IAAS0W,GAAgBkH,IAChC,KAAOJ,EAAUK,OAAS,GAAKlb,EAAOqH,OAASwgB,GAC3ChN,EAAUK,SACVlb,EAAOyH,KAAK,IAAIob,SAGpB/iB,QAAQC,MAAM,sCAAwC1C,GAG1D,OADI2C,EAAOqH,OAAS,GAAG0T,EAAShK,aAAa,IAAIiK,EAAsB3d,IAChE2C,GAGX,sBAAW,oBAAe,C,IAA1B,WACI,OAAOgD,KAAK+d,OAAOlG,EAAUoK,cAAgBpK,EAAUmK,gBAAkB,M,gCAG7E,sBAAW,UAAK,C,IAAhB,WACI,IAAKnK,EAAUqK,aAAc,OAAO,EACpC,IAAI6C,EAAQlN,EAAUqK,aAAa6C,MAC/BC,EAAanN,EAAUqK,aAAa8C,WAClCC,EAAgBpN,EAAUC,aAAeiN,EAAMG,UAAYC,KAAYH,EAAWE,SAAW,EAC7FE,EAAavN,EAAUwN,kBAAoBN,EAAMO,OAAS,GAAKN,EAAWM,MAAQ,EAClFC,EAAeR,EAAMS,QAAUxlB,KAAKF,IAAI,EAAG+X,EAAUkK,kBAAoBgD,EAAMS,SAAWR,EAAWQ,QAAU,EAC/GC,EAAqBV,EAAMW,cAAgB1lB,KAAKF,IAAI,EAAG+X,EAAUgB,UAAUxU,OAAS0gB,EAAMW,cAAgBV,EAAWU,eAAiB,EACtIC,EAAc9N,EAAUiJ,SAAWkE,EAAWY,OAC9CC,EAAehO,EAAUqJ,QAAQ7c,QAAU4f,GAAkBe,EAAWc,QAAU,EACxF,OAAO9lB,KAAK+d,MAAMkH,EAAgBG,EAAaG,EAAeE,EAAqBE,EAAcE,GAAgB,K,gCAGrH,sBAAW,oBAAe,C,IAA1B,WACI,OAAOlsB,KAAKqnB,gBAAkBje,EAAcgjB,SAAWpsB,KAAKonB,iBAAiB1c,OAAS,EAAI1K,KAAKonB,iBAAiB,GAAgB,M,gCAGpI,sBAAW,qBAAgB,C,IAA3B,WACI,OAAOpnB,KAAKqnB,gBAAkBje,EAAcijB,UAAYrsB,KAAKonB,iBAAiB1c,OAAS,EAAI1K,KAAKonB,iBAAiB,GAAuB,M,gCAG5I,sBAAW,oBAAe,C,IAA1B,WACI,OAAQpnB,KAAKqnB,gBAAkBje,EAAcod,OAASxmB,KAAKqnB,gBAAkBje,EAAc+gB,QAAUnqB,KAAKonB,iBAAiB1c,OAAS,EAAI1K,KAAKonB,iBAA+B,I,gCAGhL,sBAAW,aAAQ,C,IAAnB,WACI,OAAOpnB,KAAKue,OAAyB,EAAhBve,KAAKgnB,U,gCAGvB,EAAAsF,iBAAP,SAAwB5W,GAIpB,IAHA,IAAM3B,EAAU2B,EAAO7B,SAASC,aAAaC,QACvCwY,EAAiBxY,EAAQC,oBAAoB0B,EAAOrC,eACpDmZ,EAA+B,GAC5BjpB,EAAIgpB,EAAehpB,EAAGA,GAAKgpB,EAAehpB,EAAI,EAAGA,IACtD,IAAK,IAAID,EAAIipB,EAAejpB,EAAGA,GAAKipB,EAAejpB,EAAI,EAAGA,IAAK,CAC3D,IAAMkS,EAAUzB,EAAQ0Y,WAAWlpB,EAAGD,GACtCkpB,EAAc1hB,KAAI,MAAlB0hB,EAAuBtO,EAAU2J,iBAAiBlgB,IAAI6N,IAAY,IAG1E,OAAOgX,GAjOJ,EAAA3F,YAA+BxB,GAAgByB,QAC/C,EAAAC,cAAwB,GACxB,EAAA5I,WAAqB,EACrB,EAAAI,OAAiB,EACjB,EAAAyI,SAAmB,EACnB,EAAAC,aAAuB,EACvB,EAAAC,eAAyB,EACzB,EAAAC,SAAmB,EACnB,EAAAC,iBAAiC,GACjC,EAAAC,cAA+B,KAC/B,EAAAnI,UAA8B,GAC9B,EAAAoI,sBAA0C,GAC1C,EAAAC,QAAoB,GACpB,EAAAC,oBAAgC,GAChC,EAAAC,iBAA2B,EAC3B,EAAAC,SAA4B,GAC5B,EAAAC,qBAAwC,GACxC,EAAAhI,aAAoC,GACpC,EAAAD,yBAAgD,GAChD,EAAAX,cAAgC,GAChC,EAAA6I,QAAyB,GACzB,EAAAC,iBAAgD,IAAIrgB,IACpD,EAAAsgB,KAAc,GACd,EAAAC,cAAwB,EACxB,EAAAC,UAAoB,EACpB,EAAAC,eAAyB,EACzB,EAAAC,mBAA6B,EAC7B,EAAAC,aAAuB,EACvB,EAAAC,kBAA4B,EAC5B,EAAAC,eAAyB,EACzB,EAAAC,cAAwB,EACxB,EAAAC,aAAkC,KAClC,EAAAC,aAA6B,KAC7B,EAAAC,WAAqB,EAmMhC,EAtOA,GKrBA,cAiBI,WAAY9kB,GAbZ,KAAA+oB,OAAiB,GAEjB,KAAAC,YAA2B,IAAIC,EAY3B5sB,KAAK6sB,SAAW,IAAI,MAAc,CAACC,WAAW,EAAMnpB,OAAQA,IAC5D3D,KAAK6sB,SAASE,cAAc,GAE5B/sB,KAAKgtB,OAAS,IAAI,MAAkB,GAAIrpB,EAAOV,MAAQU,EAAOT,OAAQ,GAAK,KAE3ElD,KAAKitB,SAAW,IAAI,IAAYjtB,KAAKgtB,OAAQhtB,KAAK6sB,SAAS1b,YAC3DnR,KAAKitB,SAASC,aAAe,CAACC,KAAM,KAAMC,OAAQ,aAAcC,MAAO,WAsI/E,OAlII,YAAAC,oBAAA,SAAoBC,EAAYC,GAC5B,IAAMC,EAAY,IAAI,MACtBA,EAAUC,cAAc,CAACnqB,EAAGgqB,EAAIjqB,EAAGkqB,GAAKxtB,KAAKgtB,QAC7C,IAAIW,EAAaF,EAAUG,iBAAiB1P,GAAUqJ,QAAQliB,KAAI,SAAChB,GAAM,OAAAA,EAAE4c,eACvE0M,EAAWjjB,OAAS,IAAGijB,EAAaF,EAAUG,iBAAiB1P,GAAUwJ,SAASriB,KAAI,SAACwJ,GAAM,OAAAA,EAAEoS,gBAC/F0M,EAAWjjB,OAAS,IAAGijB,EAAaF,EAAUG,iBAAiB1P,GAAUgB,UAAU7Z,KAAI,SAACd,GAAM,OAAAA,EAAE0c,gBAChG0M,EAAWjjB,OAAS,GAAK1K,KAAK+T,UAAS4Z,EAAaF,EAAUG,iBAAiB5tB,KAAK+T,QAAQ8Z,WAAWzL,WAC3G,IAAM0L,EAAW,GACjB,GAAIH,EAAWjjB,OAAS,EAAG,CACvB,IAAM+Y,EAAWkK,EAAW,GAAGI,OAAOtK,SACtC,GAAIA,GAAYA,EAASP,eAAe,cAAe,CACnD,IAAMQ,EAAaD,EAAqB,WACpCC,GAAYoK,EAAShjB,KAAK4Y,IAGtCxF,GAAUuL,eAAeqE,IAG7B,YAAAE,wBAAA,SAAwBC,EAAaC,EAAaC,EAAaC,GAC3D,IAAMC,EAAa,IAAI,MAAQJ,EAAKC,EAAK,IACnCI,EAAW,IAAI,MAAQH,EAAKC,EAAK,IAEnCC,EAAW9qB,IAAM+qB,EAAS/qB,IAC1B+qB,EAAS/qB,GAAKgrB,OAAOC,SAErBH,EAAW/qB,IAAMgrB,EAAShrB,IAC1BgrB,EAAShrB,GAAKirB,OAAOC,SAGzBxuB,KAAKgtB,OAAOyB,yBACZzuB,KAAKgtB,OAAO0B,oBAEZ,IAAMC,EAAW,IAAI,MACrBA,EAAS3L,KAAKqL,GACdM,EAASprB,EAAI8C,KAAKF,IAAIkoB,EAAW9qB,EAAG+qB,EAAS/qB,GAC7CorB,EAASrrB,EAAI+C,KAAKD,IAAIioB,EAAW/qB,EAAGgrB,EAAShrB,GAC7CgrB,EAAS/qB,EAAI8C,KAAKD,IAAIioB,EAAW9qB,EAAG+qB,EAAS/qB,GAC7C+qB,EAAShrB,EAAI+C,KAAKF,IAAIkoB,EAAW/qB,EAAGgrB,EAAShrB,GAE7C,IAAMsrB,EAAU,IAAI,MACdC,EAAa,IAAI,MACjBC,EAAc,IAAI,MAClBC,EAAe,IAAI,MACnBC,EAAc,IAAI,MACxBJ,EAAQK,sBAAsBjvB,KAAKgtB,OAAOkC,aAC1CL,EAAW7L,KAAK2L,GAChBG,EAAYjnB,IAAIymB,EAAS/qB,EAAGorB,EAASrrB,EAAG,GACxCyrB,EAAa/L,KAAKsL,GAClBU,EAAYnnB,IAAI8mB,EAASprB,EAAG+qB,EAAShrB,EAAG,GAExCurB,EAAWM,UAAUnvB,KAAKgtB,QAC1B8B,EAAYK,UAAUnvB,KAAKgtB,QAC3B+B,EAAaI,UAAUnvB,KAAKgtB,QAC5BgC,EAAYG,UAAUnvB,KAAKgtB,QAE3B,IAAMoC,EAAW,IAAI,MACfC,EAAW,IAAI,MACfC,EAAW,IAAI,MACrBF,EAASpM,KAAK6L,GAAY/K,IAAI8K,GAC9BS,EAASrM,KAAK8L,GAAahL,IAAI8K,GAC/BU,EAAStM,KAAK+L,GAAcjL,IAAI8K,GAChCQ,EAASG,YACTF,EAASE,YACTD,EAASC,YAET,IAAMC,EAAOjB,OAAOkB,UACpBL,EAASM,eAAeF,GACxBH,EAASK,eAAeF,GACxBF,EAASI,eAAeF,GACxBJ,EAASpwB,IAAI4vB,GACbS,EAASrwB,IAAI4vB,GACbU,EAAStwB,IAAI4vB,GAEb,IAAMe,EAAU,IAAI,MACdC,EAASD,EAAQC,OAEvBA,EAAO,GAAGC,sBAAsBjB,EAASC,EAAYC,GACrDc,EAAO,GAAGC,sBAAsBjB,EAASE,EAAaC,GACtDa,EAAO,GAAGC,sBAAsBd,EAAcC,EAAaJ,GAC3DgB,EAAO,GAAGC,sBAAsBb,EAAaH,EAAYD,GACzDgB,EAAO,GAAGC,sBAAsBf,EAAaC,EAAcC,GAC3DY,EAAO,GAAGC,sBAAsBP,EAAUD,EAAUD,GACpDQ,EAAO,GAAGE,OAAOJ,gBAAgB,GAEjC,IAAIhG,EAAyBxL,GAAUqJ,QAAQriB,QAAO,SAACb,GAAM,OAAAsrB,EAAQI,cAAc1rB,EAAE2rB,yBACrFtG,EAAS5e,KAAI,MAAb4e,EAAkBxL,GAAUwJ,SAASxiB,QAAO,SAAC2J,GAAM,OAAA8gB,EAAQI,cAAclhB,EAAEmhB,0BACvEtG,EAAShf,OAAS,IAAGgf,EAAWxL,GAAUgB,UAAUha,QAAO,SAACX,GAAM,OAAAorB,EAAQI,cAAcxrB,EAAEyrB,0BAC9F9R,GAAUuL,eAAeC,IAG7B,YAAAuG,WAAA,SAAWC,GACPlwB,KAAKkU,MAAQ,IAAI,MAEjBlU,KAAKmwB,aAAe,IAAI,MAAaD,EAAc,IACnDlwB,KAAKkU,MAAMlV,IAAIgB,KAAKmwB,cAEpBnwB,KAAKowB,iBAAmB,IAAI,MAAW,SAAU,IAAK,EAAG,GACzDpwB,KAAKowB,iBAAiBC,UAAY3O,GAClC1hB,KAAKkU,MAAMlV,IAAIgB,KAAKowB,mBAGxB,YAAAE,WAAA,sBACItwB,KAAK2sB,YAAY/pB,OACjB5C,KAAKuwB,eAAiBxiB,aAAY,WAC9B,EAAKyiB,YAAcC,uBAAsB,WACrC,EAAK9D,YAAYjb,cACjB,EAAKmb,SAAS6D,OAAO,EAAKxc,MAAO,EAAK8Y,QACtC,EAAKL,YAAY/a,kBAEtB,IAAO5R,KAAK0sB,SAGnB,YAAAiE,aAAA,W,MACI3wB,KAAK2sB,YAAY9pB,OACjB7C,KAAKuwB,eAAiBzpB,EAAkB9G,KAAKuwB,gBACzCvwB,KAAKwwB,cACLI,qBAAqB5wB,KAAKwwB,aAC1BxwB,KAAKwwB,YAAc,MAEX,QAAZ,EAAAxwB,KAAK+T,eAAO,SAAExL,UACdvI,KAAK+T,QAAU,KACf0R,EAAaoL,aAAa9rB,SAAQ,SAAAsD,GAAQ,OAAAA,EAAKE,aAC/Ckd,EAAaoL,aAAe,IAGzB,EAAAnL,aAAP,SAAoBoL,GAEhB,OADA9wB,KAAK6wB,aAAa/lB,KAAKgmB,GAChBA,EAAazoB,MAzJjB,EAAAwoB,aAA+B,GA4J1C,EA9JA,GCMA,cAQI,WAAYxnB,EAAcC,QAAA,IAAAA,OAAA,GAN1B,KAAAD,KAAe,GACf,KAAAC,SAAmB,EACnB,KAAAynB,cAA0B,IAAIC,EAC9B,KAAAC,MAAkB,GAClB,KAAAC,UAAoB,EAGhBlxB,KAAKqJ,KAAOA,EACZrJ,KAAKsJ,QAAUA,EACXtJ,KAAKsJ,SAASnG,QAAQyG,IAAI,sBA2ItC,OAxII,YAAAmF,MAAA,SAAMoiB,GAMF,GALAnxB,KAAKixB,MAAQE,EAAQ1rB,QAAQ,QAAS,MAAMA,QAAQ,MAAO,MACtDA,QAAQ,MAAO,KACfgF,MAAM,MACNpF,KAAI,SAAA+rB,GAAK,OAAAA,EAAEC,UAEM,SAAlBrxB,KAAKixB,MAAM,GACX,KAAM,uDAGV,IAAMK,EAAmBC,SAASvxB,KAAKixB,MAAM,GAAI,IAKjD,IAJyB,IAArBK,GACAnuB,QAAQgL,KAAK,kCAAoCmjB,GAGhDtxB,KAAKkxB,UAAY,EAAGlxB,KAAKkxB,UAAYlxB,KAAKixB,MAAMvmB,OAAQ1K,KAAKkxB,YAAa,CAC3E,IAAIM,EAAOxxB,KAAKixB,MAAMjxB,KAAKkxB,WAC3B,GAAKM,EAAL,CACA,IAAMrsB,EAAMqsB,EAAK/mB,MAAM,KAAK,GAChB,eAARtF,EACAnF,KAAKyxB,kBACU,kBAARtsB,GAAmC,eAARA,GAClCnF,KAAK0xB,mBACD1xB,KAAKsJ,SAASnG,QAAQyG,IAAI5J,KAAK+wB,cAAc/gB,OAAOhQ,KAAK+wB,cAAc/gB,OAAOtF,OAAS,KACpF8mB,EAAK9rB,WAAW,uBAAyB8rB,EAAK9rB,WAAW,sBAAwB8rB,EAAK9rB,WAAW,sBAQhH,OADI1F,KAAKsJ,SAASnG,QAAQyG,IAAI5J,KAAK+wB,eAC5B/wB,KAAK+wB,eAGhB,YAAAY,UAAA,SAAUH,GACN,OAAOA,EAAK/mB,MAAM,KAAKvF,QAAO,SAACksB,GAAc,MAAM,KAANA,MAGjD,YAAAK,gBAAA,WACI,KAAOzxB,KAAKkxB,UAAYlxB,KAAKixB,MAAMvmB,OAAQ1K,KAAKkxB,YAAa,CACzD,IAAMM,EAAOxxB,KAAKixB,MAAMjxB,KAAKkxB,WAC7B,IAAKM,EAAM,OACL,MAAexxB,KAAK2xB,UAAUH,GAA7BrsB,EAAG,KAAE7C,EAAK,KACjB,GAAY,eAAR6C,EACAnF,KAAK+wB,cAAclhB,WAAa0hB,SAASjvB,QACtC,GAAY,cAAR6C,EACPnF,KAAK+wB,cAAcjhB,UAAYyhB,SAASjvB,QACrC,GAAY,cAAR6C,EAAqB,CAC5B,IAAMysB,EAAYL,SAASjvB,GACT,IAAdsvB,GAAiBzuB,QAAQC,MAAM,6CAA+CwuB,OACnE,oBAARzsB,EACPnF,KAAK+wB,cAAchhB,gBAAkBwhB,SAASjvB,GAC/B,sBAAR6C,GAAuC,qBAARA,GAAsC,qBAARA,GAGpEhC,QAAQgL,KAAK,iCAGrBhL,QAAQC,MAAM,sCAGlB,YAAAsuB,iBAAA,WACI,IAAMG,EAAS,IAAIC,EAEnB,IADA9xB,KAAK+wB,cAAc/gB,OAAOlF,KAAK+mB,GACxB7xB,KAAKkxB,UAAYlxB,KAAKixB,MAAMvmB,OAAQ1K,KAAKkxB,YAAa,CACzD,IAAIM,EAAOxxB,KAAKixB,MAAMjxB,KAAKkxB,WAC3B,IAAKM,EAAM,OACL,MAAexxB,KAAK2xB,UAAUH,GAA7BrsB,EAAG,KAAE7C,EAAK,KACjB,GAAY,kBAAR6C,GAAmC,eAARA,EAC3B,GAAY,eAARA,EAAsB,CACtB,IAAMzD,EAAW,EAAYY,GAC7BuvB,EAAOjnB,KAAOlJ,EAAS2Q,MAAM,EAAG3Q,EAASgJ,OAAS,OAAOA,QACzDmnB,EAAOnwB,SAAW1B,KAAKqJ,KAAO3H,EAC9B,IAAMqwB,EAAYlkB,GAAgB0X,YAAYsM,EAAOnwB,UACrDmwB,EAAOvhB,MAAQmV,GAAaC,aAAa,IAAIC,EAAU3lB,KAAKqJ,MAAM0F,MAAMgjB,QACrE,IAAY,kBAAR5sB,EAIP,KAAM,oBAAsBqsB,EAH5BK,EAAOjnB,KAAOtI,EACduvB,EAAOvhB,MAAQ,IAAI,WAIpB,GAAY,iBAARnL,EAAwB,CAC/B,IAAI,EAAOnF,KAAKixB,QAAQjxB,KAAKkxB,WACvBc,EAAWT,SAAS,GAC1B,EAAOvxB,KAAKixB,QAAQjxB,KAAKkxB,WACzB,IAAMe,EAAYV,SAAS,GAC3BvxB,KAAKkxB,YACL,IAAK,IAAIpgB,EAAI,EAAGA,EAAImhB,EAAWnhB,IAAK,CAChC,IAAI,EAAO9Q,KAAKixB,MAAMjxB,KAAKkxB,UAAgB,EAAJpgB,GACvC,GAAI,EAAKpL,WAAW,eAAgB,MACpC,IAAMmL,EAAQ,EAAKpG,MAAM,KAAKpF,IAAIkpB,QAC9B1d,EAAMnG,SAAWsnB,GAAU7uB,QAAQgL,KAAK,oBAAsB0C,EAAMnG,OAAS,wCAA0CsnB,EAAW,KACtI,EAAOhyB,KAAKixB,MAAMjxB,KAAKkxB,UAAgB,EAAJpgB,EAAQ,GAC3C,IAAMF,EAAsB2gB,SAAS,EAAK9mB,MAAM,KAAK,IACrDonB,EAAOlhB,qBAAqBC,EAAqB5Q,KAAK+wB,cAAcjhB,UAAWe,GAEnF7Q,KAAKkxB,WAAyB,EAAZe,OACf,GAAY,iBAAR9sB,EACP0sB,EAAOxhB,aAAeke,OAAOjsB,GAAS,EAClCtC,KAAKsJ,SAASnG,QAAQyG,IAAI,sBAAwBioB,EAAOxhB,mBAC1D,GAAY,gBAARlL,GAAiC,mBAARA,QAE7B,GAAY,kBAARA,QAIJ,GAAY,gBAARA,EACP,GAAa,cAAT7C,EAAuB,CACvB,IAAI,EAAOtC,KAAKixB,QAAQjxB,KAAKkxB,WACvBgB,EAA2BX,SAAS,GACT,IAA7BW,GAAgC/uB,QAAQC,MAAM,6DAA+D8uB,GACjH,EAAOlyB,KAAKixB,QAAQjxB,KAAKkxB,WACzB,IAAMiB,EAAiBZ,SAAS,GAEhC,IADAvxB,KAAKkxB,YACIpgB,EAAI,EAAGA,EAAIqhB,EAAgBrhB,IAAK,CACrC,IAAI,EAAO9Q,KAAKixB,MAAMjxB,KAAKkxB,UAAgB,EAAJpgB,GACvC,GAAI,EAAKpL,WAAW,eAAgB,MACpC,IAAMsH,EAAU,EAAIuhB,OAAO,GAC3B,EAAOvuB,KAAKixB,MAAMjxB,KAAKkxB,UAAgB,EAAJpgB,EAAQ,GAC3C,IAAMshB,EAAW7D,OAAO,EAAK9jB,MAAM,KAAK,IACxConB,EAAO9gB,uBAAuBqhB,EAAUpyB,KAAK+wB,cAAcjhB,UAAW9C,GAE1EhN,KAAKkxB,WAA8B,EAAjBiB,OAEZnlB,EAAU,EAAIuhB,OAAOjsB,GAC3BuvB,EAAO9gB,uBAAuB,EAAG/Q,KAAK+wB,cAAcjhB,UAAW9C,GAO3E,OADA7J,QAAQC,MAAM,qCACPyuB,GAGf,EAtJA,GCRA,4BA4FA,OA1FW,EAAAQ,WAAP,SAAkB/sB,EAAKgtB,GACnB,IAAMjpB,EtCXP,SAAiB/D,GACpB,IAAKA,EAAK,OAAOA,EACjB,IAAIC,EAASD,EAAIE,WAAWC,QAAQ,MAAO,KACvCF,EAAOG,WAAW,OAAMH,EAASA,EAAOI,UAAU,IACtD,IAAMC,EAAUL,EAAOM,YAAY,KAGnC,OAFAN,EAASA,EAAOI,UAAU,EAAGC,EAAU,IAC5BF,WAAW,OAAMH,EAASA,EAAOI,UAAU,IAC/CJ,EsCIUgtB,CAAQjtB,GAEfsb,EAAa,IAAI4R,EAEvB5R,EAAW9Y,cAAgBlD,EAAK0tB,EAAM,iBACtC1R,EAAW7Y,gBAAkBnD,EAAK0tB,EAAM,mBACxC1R,EAAW5Y,aAAepD,EAAK0tB,EAAM,gBAoBrC,IAAMpqB,EAAWtD,EAAK0tB,EAAM,YACxBpqB,IACA0Y,EAAW1Y,SAAW,GACtBjD,OAAOH,KAAKoD,GAAUnD,SAAQ,SAACI,GAC3B,IAAMstB,EAAWvqB,EAAS/C,GAAO,OAC3ButB,EAAUvtB,EAAIO,WAAW,KAAOP,EAAIkN,MAAM,GAAKlN,EAC/C4sB,EAAYlkB,GAAgB0X,YAAYlc,EAAOopB,GACrD7R,EAAW1Y,SAASwqB,GAAWjN,GAAaC,aAAa,IAAIC,EAAUtc,GAAM0F,MAAMgjB,QAyB3F,IAAM3pB,EAAaxD,EAAK0tB,EAAM,cA4B9B,OA3BIlqB,GACAnD,OAAOH,KAAKsD,GAAYrD,SAAQ,SAAC0Y,GAC7B,IACI,IAAIzY,EAAUJ,EAAKwD,EAAYqV,GACzBkV,EAAkF/tB,EAAK0tB,EAAMttB,GAC7F4tB,EAAOhuB,EAAK+tB,EAAK,QACjBE,GAAiC,IAAzBjuB,EAAK+tB,EAAK,WAClB/iB,EAAYhL,EAAK+tB,EAAK,aACtBhjB,GAAmC,IAAzB/K,EAAK+tB,EAAK,WAC1B,GAAIE,EAAO,CACP,IAAM1B,EAAUtjB,GAAgB0X,YAAYlc,EAAOupB,EAAO,QAC1DD,EAAI7R,UAAY,IAAIgS,GAAWzpB,GAAM0F,MAAMoiB,GAC3CwB,EAAI7R,UAAUnR,QAAUA,EACxBgjB,EAAI7R,UAAUlR,UAAYA,EAAY2e,OAAO3e,GAAa,EAC1DgR,EAAWxY,WAAWP,IAAI4V,EAASrY,cAAeutB,QAElDxvB,QAAQC,MAAM,2CAEpB,MAAOY,GACLb,QAAQC,MAAMY,GACdb,QAAQyG,IAAI0oB,GACZnvB,QAAQyG,IAAIxB,GACZjF,QAAQyG,IAAI6T,OAKjBmD,GAGf,EA5FA,GCNA,cAKI,WAAYmS,EAA0BC,EAAWC,QAAX,IAAAD,MAAA,SAAW,IAAAC,MAAA,IAFjD,KAAAC,QAAuB,GAKnB,IAAMC,EAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACxD,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,KAAM,IAAK,IAAK,IAAK,IAAM,IAAK,IAAK,IAAK,IAAK,IAC/C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,IAC9C,IAAK,IAAK,KAAM,IAAK,IAAK,KAAM,KAAM,GAAI,GAAI,GAC9C,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GACrC,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,IACtC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,IACtC,IAGEC,EAAeL,EAAc9vB,MAAQ+vB,EAG3C,SAASK,EAAwBjvB,GAC7B,IAAK,IAAId,EAAI,EAAGA,EAAIc,EAAQlB,OAAS+vB,EAAM3vB,IAAK,CAC5C,IAAIgwB,EAAoB,EAAJhwB,EAAQc,EAAQnB,MACpC,GAAoC,MAAhCmB,EAAQM,KAAK4uB,IAA8D,MAApClvB,EAAQM,KAAK4uB,EAAgB,GAAY,CAChF,IAAK,IAAI/vB,EAAI,EAAGA,EAAI6vB,EAAc7vB,IAAK,CACnC,IAAIgwB,EAAoB,EAAJhwB,EACpB,GAAoC,MAAhCa,EAAQM,KAAK6uB,IAA8D,MAApCnvB,EAAQM,KAAK6uB,EAAgB,GACpE,OAAOhwB,EAGf,OAAO6vB,GAGf,OAAO,EAfXpzB,KAAKwzB,WAAaT,EAAc7vB,OAAS+vB,EAkBzC,IAAK,IAAI/oB,EAAI,EAAGA,EAAIipB,EAAMzoB,OAAQR,IAAK,CACnC,IAAI9F,EAAUpE,KAAKyzB,YAAYV,EAAgB7oB,EAAI,GAAMkpB,EAAc/sB,KAAKE,MAAM2D,EAAI,IAAMlK,KAAKwzB,WAAYJ,EAAcpzB,KAAKwzB,YAC5HE,EAAcL,EAAwBjvB,GAEtCA,EADAsvB,EAAc,EACJ1zB,KAAKyzB,YAAYrvB,EAAS,EAAG,EAAGsvB,EAAa1zB,KAAKwzB,YAElD1vB,EAAmBsvB,EAAcpzB,KAAKwzB,YAEpDxzB,KAAKkzB,QAAQC,EAAMjpB,IAAM9F,GAkFrC,OA9EI,YAAAqvB,YAAA,SAAYrvB,EAASuvB,EAAQC,EAAQ3wB,EAAOC,GAGxC,IAFA,IAAM2wB,EAAQlvB,EAASP,EAASuvB,EAAS1wB,EAAQ,EAAG2wB,EAAS1wB,EAAS,GAChEG,EAAS,IAAIU,UAAUd,EAAOC,GAC3BK,EAAI,EAAGA,EAAIN,EAAOM,IACvB,IAAK,IAAID,EAAI,EAAGA,EAAIJ,EAAQI,IAAK,CAC7B,IAAMyf,EAAIpe,EAASP,EAASuvB,EAASpwB,EAAGqwB,EAAStwB,GAC7Cyf,EAAE1e,IAAMwvB,EAAMxvB,GAAK0e,EAAEze,IAAMuvB,EAAMvvB,GAAKye,EAAExe,IAAMsvB,EAAMtvB,IAAGwe,EAAEve,EAAI,GACjEL,EAASd,EAAQE,EAAGD,EAAGyf,EAAE1e,EAAG0e,EAAEze,EAAGye,EAAExe,EAAGwe,EAAEve,GAGhD,OAAOnB,GAGX,YAAAywB,gBAAA,SAAgBC,EAAcC,EAAmBC,GAAjD,WACI,QAD6C,IAAAA,OAAA,GACzCF,SAAuCA,EAAKrpB,OAAS,EAErD,OAAO1H,EAAc,EAAG,GAAGW,OAE/BowB,EAAOA,EAAKtuB,QAAQ,KAAM,KAC1B,IAAMwtB,EAAOjzB,KAAKk0B,cAAcH,EAAMC,GAChC/wB,EAAQoD,KAAKD,IAAG,MAARC,KAAa4sB,EAAK5tB,KAAI,SAAAhB,GAAK,OAAAA,EAAEpB,UACrCI,EAAS,IAAIU,UAAUd,EAAOjD,KAAKwzB,WAAaP,EAAKvoB,QAC3DuoB,EAAKluB,SAAQ,SAACovB,EAAK9sB,GAIf,IAHA,IAAM+sB,EAAOH,EAAa5tB,KAAK+d,OAAOnhB,EAAQkxB,EAAIlxB,OAAS,GAAK,EAC1DoxB,EAAOhtB,EAAQ,EAAKmsB,WACtBc,EAAU,EACLxjB,EAAI,EAAGA,EAAIqjB,EAAIJ,KAAKrpB,OAAQoG,IAAK,CACtC,IAAMyjB,EAAgB,EAAKrB,QAAQiB,EAAIJ,KAAKS,OAAO1jB,IACnD,GAAIyjB,EAAe,CACf,IAAK,IAAIhxB,EAAI+wB,EAAS/wB,EAAI+wB,EAAUC,EAActxB,MAAOM,IACrD,IAAK,IAAID,EAAI,EAAGA,EAAIixB,EAAcrxB,OAAQI,IAAK,CAC3C,IAAMyf,EAAIpe,EAAS4vB,EAAehxB,EAAI+wB,EAAShxB,GAC/Ca,EAASd,EAAQ+wB,EAAO7wB,EAAG8wB,EAAO/wB,EAAGyf,EAAE1e,EAAG0e,EAAEze,EAAGye,EAAExe,EAAGwe,EAAEve,GAG9D8vB,GAAWC,EAActxB,WAIrC,IAAMwxB,EAAgCzxB,EAAcK,EAAOJ,MAAOI,EAAOH,QAEzE,OADAuxB,EAAIC,aAAarxB,EAAQ,EAAG,GACrBoxB,EAAI9wB,QAGP,YAAAuwB,cAAR,SAAsBH,EAAcC,GAApC,WACUW,EAAa30B,KAAKkzB,QAAQ,KAAKjwB,MAC/BgwB,EAA0C,GAC5C2B,EAAU,GACVC,EAAW,EA4Bf,OA3BAd,EAAKtpB,MAAM,KAAKpF,KAAI,SAAAyvB,GAEhB,IADA,IAAIC,EAAY,EACPjkB,EAAI,EAAGA,EAAIgkB,EAAKpqB,OAAQoG,IAAK,CAClC,IAAMkkB,EAASF,EAAKN,OAAO1jB,GACrBmkB,EAAY,EAAK/B,QAAQ8B,GAC3BC,EACAF,GAAaE,EAAUhyB,MAEvBE,QAAQC,MAAM,WAAc4xB,EAAS,uCAgB7C,OAbIH,EAAW,GACNb,GAAYa,EAAWF,EAAaI,EAAYf,GACjDY,GAAW,IAAME,EACjBD,GAAYF,EAAaI,IAEzB9B,EAAKnoB,KAAK,CAACipB,KAAMa,EAAS3xB,MAAO4xB,IACjCD,EAAUE,EACVD,EAAWE,IAGfH,GAAWE,EACXD,GAAYE,GAETA,KAEPF,EAAW,GAAG5B,EAAKnoB,KAAK,CAACipB,KAAMa,EAAS3xB,MAAO4xB,IAC5C5B,GAEf,EAzIA,IJFA,WAUI,WAAYvyB,GARZ,KAAAA,KAA0B,KAStBV,KAAKU,KAAOA,EAGT,EAAAw0B,kBAAP,SAAyBC,GACrB,MAAO,CAACz0B,KAAMimB,GAAkByO,IAAKrB,KAAMoB,IAGxC,EAAAE,gBAAP,SAAuBC,EAAUC,GAC7B,MAAO,CAAC70B,KAAMimB,GAAkB6O,IAAKF,IAAKA,EAAKC,eAAgBA,IAG5D,EAAAE,kBAAP,SAAyBC,EAAoBC,EAAmBC,GAC5D,MAAO,CAACl1B,KAAMimB,GAAkBkP,MAAOF,UAAWA,EAAWC,SAAUA,IAGpE,EAAAE,eAAP,SAAsBP,EAAwBQ,GAC1C,MAAO,CAACr1B,KAAMimB,GAAkBqP,KAAMT,eAAgBA,EAAgBQ,mBAAoBA,IA3BlG,GAgCA,SAAYpP,GAER,iBACA,iBACA,+BACA,iBACA,qBACA,mBAPJ,CAAYA,QAAiB,KKhC7B,ICCYsP,GAMAC,GAMAC,GDbZ,4BAwCA,OAtCW,EAAAC,WAAP,SAAkBC,EAAoBC,GAalC,OAZArxB,OAAOH,KAAKwxB,GAAQvxB,SAAQ,SAACwxB,GACzB,IAAMC,GAAeD,EAAO7wB,WAAW,KAAO6wB,EAAO5wB,UAAU,GAAK4wB,GAC/DnxB,cACAK,QAAQ,KAAM,IACdA,QAAQ,KAAM,IACLR,OAAOH,KAAKuxB,GAAQ/W,MAAK,SAACmX,GACpC,OAAOJ,EAAOK,YAAYD,EAAQD,EAAaF,EAAOC,QAGtDpzB,QAAQgL,KAAK,2BAA6BooB,MAG3CF,GAGX,YAAAK,YAAA,SAAYD,EAAQD,EAAaG,GAC7B,GAAIF,EAAOrxB,gBAAkBoxB,EAAa,CACtC,IAAMI,EAAe52B,KAAKy2B,GACpBI,EAAiB5vB,MAAMyB,QAAQkuB,GACjCE,EAAc92B,KAAK+2B,WAAWP,EAAaG,GACzCK,EAAgB/vB,MAAMyB,QAAQouB,GASpC,OARIF,GAAgBC,IAAmBG,GAC/BH,IACAC,EAAc,CAACA,IAKvB92B,KAAKy2B,GAAUK,GACR,IAIf,YAAAC,WAAA,SAAWP,EAAqBG,GAC5B,OAAOA,GAGf,EAxCA,G,0dEIA,0E,OAEI,EAAAM,OAAiB,EACjB,EAAAC,aAAuB,EACvB,EAAAC,eAAyB,EACzB,EAAAC,WAAqB,EACrB,EAAA5N,cAA2B,KAC3B,EAAA6N,QAAkB,EAClB,EAAAC,YAAsB,EACtB,EAAAC,WAAqB,E,EA4BzB,OArCyC,QAW9B,EAAAC,UAAP,SAAiB92B,GACb,OAAQA,GACJ,KAAKwS,EAASV,YACV,OAAO3E,GAAgBoD,MAAMwmB,YACjC,KAAKvkB,EAAST,aACV,OAAO5E,GAAgBoD,MAAMymB,YACjC,KAAKxkB,EAASR,MACV,OAAO7E,GAAgBoD,MAAM0mB,MACjC,KAAKzkB,EAASP,cACV,OAAO9E,GAAgBoD,MAAM2mB,aACjC,KAAK1kB,EAASN,SACV,OAAO/E,GAAgBoD,MAAM4mB,SACjC,KAAK3kB,EAASL,QACV,OAAOhF,GAAgBoD,MAAM6mB,QACjC,KAAK5kB,EAASJ,QACV,OAAOjF,GAAgBoD,MAAM8mB,QACjC,KAAK7kB,EAASH,aACV,OAAOlF,GAAgBoD,MAAM+mB,YACjC,KAAK9kB,EAASF,WACV,OAAOnF,GAAgBoD,MAAMgnB,WACjC,KAAK/kB,EAASD,aACV,OAAOpF,GAAgBoD,MAAMinB,YAErC,KAAM,6BAA6Bx3B,GAG3C,EArCA,CAAyCy3B,I,0dCFzC,0E,OAEI,EAAAC,WAAuB,GACvB,EAAAC,WAAqB,EACrB,EAAAC,SAAmB,E,EAEvB,OANwC,QAMxC,EANA,CAAwCH,I,0dCIxC,eAsuBI,WAAY7B,GAAZ,MACI,cAAO,K,OAruBX,EAAAiC,MAAQ,gBAAI,2D,OACR,EAAAtB,OAAiB,EACjB,EAAAmB,WAAuB,CAAC,IAAM,IAAM,IAAM,KAC1C,EAAAI,cAA0B,CAAC,EAAK,EAAK,EAAK,GAC1C,EAAAC,eAA2B,CAAC,EAAK,EAAK,EAAK,GAC3C,EAAAC,aAAyB,CAAC,EAAK,EAAK,EAAK,GACzC,EAAAC,cAA0B,CAAC,EAAK,EAAK,EAAK,GAC1C,EAAAC,cAA0B,CAAC,GAAM,GAAM,GAAM,IAC7C,EAAAC,YAAwB,CAAC,GAAM,GAAM,GAAM,IAC3C,EAAAC,WAAqB,EACrB,EAAAC,WAAqB,GACrB,EAAAC,UAAoB,GACpB,EAAAC,eAA4B,EAAC,GAAM,GAAM,GAAM,GAC/C,EAAA7B,WAAqB,GACrB,EAAA8B,YAAwB,CAAC,GAAM,GAAM,GAAM,IAC3C,EAAAC,aAAyB,CAAC,EAAG,EAAG,EAAG,GACnC,EAAAC,WAAqB,iBACrB,EAAAC,eAAyB,qBACzB,EAAAC,YAAsB,GACtB,EAAAC,gBAA0B,IAC1B,EAAAC,gBAA0B,EAC1B,EAAAC,mBAA+B,CAAC,EAAG,EAAG,EAAG,GACzC,EAAAC,WAAqB,EACrB,EAAArB,WAAqB,GACrB,EAAAC,SAAmB,EACnB,EAAAqB,gBAA0B,EAC1B,EAAAC,sBAAgC,EAChC,EAAAC,eAAyB,GACzB,EAAAtC,YAAsB,EACtB,EAAAuC,WAAqB,EACrB,EAAAC,gBAA0B,EAC1B,EAAAC,eAAyB,E,EAC7B,OAhCqC,QAgCrC,EAhCQ,CAA6B7B,KAkCrC,EAAA8B,YAAc,gBAAI,2D,OACd,EAAAhD,OAAiB,EACjB,EAAAmB,WAAqB,GACrB,EAAAY,UAAoB,GACpB,EAAAF,WAAqB,GACrB,EAAAC,WAAqB,GACrB,EAAAmB,YAAsB,GACtB,EAAAC,gBAA0B,GAC1B,EAAA/C,WAAqB,GACrB,EAAA8B,aAAuB,GACvB,EAAAkB,UAAoB,EACpB,EAAAd,YAAsB,GACtB,EAAAe,eAAyB,GACzB,EAAAC,cAAwB,GACxB,EAAAC,YAAsB,GACtB,EAAAC,aAAuB,IACvB,EAAAC,UAAoB,EACpB,EAAAf,WAAqB,EACrB,EAAArB,WAAqB,IACrB,EAAAqC,gBAA0B,EAC1B,EAAAf,gBAA0B,EAC1B,EAAAgB,YAAsB,EACtB,EAAAC,aAAuB,EACvB,EAAAC,mBAA6B,EAC7B,EAAAC,iBAA2B,EAC3B,EAAAC,SAAmB,EACnB,EAAAzC,SAAmB,GAEnB,EAAA0C,aAAuB,EACvB,EAAAC,WAAqB,EACrB,EAAAC,YAAsB,GACtB,EAAAC,cAAwB,EACxB,EAAAC,UAAoB,EACpB,EAAAC,YAAsB,IACtB,EAAAC,SAAmB,EACnB,EAAAC,WAAqB,GACrB,EAAAC,aAAuB,EACvB,EAAAC,WAAqB,GACrB,EAAAC,kBAA4B,EAC5B,EAAAC,qBAA+B,EAC/B,EAAA3B,eAAyB,E,EAC7B,OAzCiD,QAyCjD,EAzCc,CAAmC7B,KA2CjD,EAAAyD,YAAc,gBAAI,2D,OACd,EAAA3E,OAAiB,EACjB,EAAAmB,WAAuB,CAAC,GACxB,EAAAY,UAAoB,GACpB,EAAAF,WAAqB,EACrB,EAAAC,WAAqB,EACrB,EAAA3B,WAAqB,EACrB,EAAA8C,YAAsB,GACtB,EAAA2B,YAAsB,EACtB,EAAAC,iBAA2B,EAC3B,EAAAC,WAAqB,EACrB,EAAArC,WAAqB,EACrB,EAAArB,WAAqB,GACrB,EAAA2D,gBAA0B,EAC1B,EAAAC,iBAA2B,EAC3B,EAAAP,kBAA4B,E,EAChC,OAhBiD,QAgBjD,EAhBc,CAAmCQ,KAkBjD,EAAAC,IAAM,gBAAI,2D,OACN,EAAAlF,OAAiB,EACjB,EAAAmB,WAAuB,CAAC,GACxB,EAAAY,UAAoB,GACpB,EAAAF,WAAqB,GACrB,EAAAoB,YAAsB,GACtB,EAAA2B,YAAsB,EACtB,EAAAO,eAAyB,GACzB,EAAAhC,UAAoB,EACpB,EAAAsB,kBAA4B,EAE5B,EAAAW,QAAkB,EAClB,EAAAC,aAAuB,EACvB,EAAAC,cAAwB,EACxB,EAAAC,WAAqB,EACrB,EAAAC,WAAqB,GACrB,EAAAC,YAAsB,IACtB,EAAAC,gBAA0B,GAC1B,EAAAC,iBAA2B,EAC3B,EAAAC,iBAA2B,EAC3B,EAAAC,aAAuB,GACvB,EAAApD,WAAqB,EACrB,EAAAqD,YAAsB,EACtB,EAAAC,WAAqB,EACrB,EAAAhB,gBAA0B,E,EAC9B,OAzBiC,QAyBjC,EAzBM,CAA2BE,KA2BjC,EAAAe,OAAS,gBAAI,2D,OACT,EAAAhG,OAAiB,EACjB,EAAAmB,WAAqB,IACrB,EAAAY,UAAoB,GACpB,EAAAF,WAAqB,EACrB,EAAAC,WAAqB,EACrB,EAAA3B,WAAqB,EACrB,EAAA8C,YAAsB,GACtB,EAAAR,WAAqB,EACrB,EAAArB,WAAqB,IACrB,EAAA2D,gBAA0B,EAC1B,EAAAC,iBAA2B,EAC3B,EAAAiB,gBAA0B,EAC1B,EAAAxB,kBAA4B,E,EAChC,OAduC,QAcvC,EAdS,CAA8BvD,KAgBvC,EAAAgF,OAAS,gBAAI,2D,OACT,EAAAlG,OAAiB,EACjB,EAAAmB,WAAqB,IACrB,EAAAY,UAAoB,GACpB,EAAAF,WAAqB,EACrB,EAAAC,WAAqB,EACrB,EAAA3B,WAAqB,EACrB,EAAA8C,YAAsB,GACtB,EAAAR,WAAqB,EACrB,EAAArB,WAAqB,IACrB,EAAA2D,gBAA0B,EAC1B,EAAAC,iBAA2B,EAC3B,EAAAiB,gBAA0B,EAC1B,EAAAxB,kBAA4B,E,EAChC,OAduC,QAcvC,EAdS,CAA8BvD,KAgBvC,EAAAiF,KAAO,gBAAI,2D,OACP,EAAAnG,OAAiB,EACjB,EAAAmB,WAAqB,GACrB,EAAAY,UAAoB,GACpB,EAAAF,WAAqB,EACrB,EAAAC,WAAqB,EACrB,EAAA3B,WAAqB,GACrB,EAAA8C,YAAsB,GACtB,EAAAR,WAAqB,EACrB,EAAArB,WAAqB,GACrB,EAAAgF,UAAoB,EACpB,EAAAC,YAAsB,EACtB,EAAA9C,aAAuB,IACvB,EAAAF,cAAwB,GACxB,EAAAU,aAAuB,EACvB,EAAAI,UAAoB,EACpB,EAAAC,YAAsB,EACtB,EAAAC,SAAmB,EACnB,EAAAC,WAAqB,GACrB,EAAAC,aAAuB,EACvB,EAAAxB,eAAyB,EACzB,EAAA0B,kBAA4B,E,EAChC,OAtBmC,QAsBnC,EAtBO,CAA4BvD,KAwBnC,EAAAoF,YAAc,gBAAI,2D,OACd,EAAAtG,OAAiB,EACjB,EAAAmB,WAAqB,GACrB,EAAAY,UAAoB,GACpB,EAAAF,WAAqB,GACrB,EAAAC,WAAqB,GACrB,EAAAmB,YAAsB,GACtB,EAAAC,gBAA0B,GAC1B,EAAA/C,WAAqB,GACrB,EAAA8B,aAAuB,GACvB,EAAAkB,UAAoB,EACpB,EAAAd,YAAsB,GACtB,EAAAe,eAAyB,GACzB,EAAAC,cAAwB,GACxB,EAAAC,YAAsB,GACtB,EAAAC,aAAuB,IACvB,EAAAC,UAAoB,EACpB,EAAAf,WAAqB,EACrB,EAAArB,WAAqB,IACrB,EAAAqC,gBAA0B,EAC1B,EAAAK,SAAmB,EACnB,EAAApB,gBAA0B,EAC1B,EAAAgB,YAAsB,EACtB,EAAAC,aAAuB,EACvB,EAAAC,mBAA6B,EAC7B,EAAAC,iBAA2B,EAC3B,EAAAxC,SAAmB,GACnB,EAAA0E,WAAqB,EAErB,EAAAhC,aAAuB,EACvB,EAAAC,WAAqB,EACrB,EAAAC,YAAsB,GACtB,EAAAC,cAAwB,GACxB,EAAAC,UAAoB,EACpB,EAAAC,YAAsB,EACtB,EAAAC,SAAmB,EACnB,EAAAC,WAAqB,GACrB,EAAAC,aAAuB,EACvB,EAAAC,WAAqB,GACrB,EAAAC,kBAA4B,EAC5B,EAAAC,qBAA+B,EAC/B,EAAA3B,eAAyB,E,EAC7B,OA1CiD,QA0CjD,EA1Cc,CAAmC7B,KA4CjD,EAAAqF,WAAa,gBAAI,2D,OACb,EAAAvG,OAAiB,EACjB,EAAAmB,WAAqB,GACrB,EAAAY,UAAoB,GACpB,EAAAF,WAAqB,GACrB,EAAAC,WAAqB,GACrB,EAAAmB,YAAsB,GACtB,EAAAC,gBAA0B,GAC1B,EAAA/C,WAAqB,GACrB,EAAA8B,aAAuB,GACvB,EAAAkB,UAAoB,EACpB,EAAAd,YAAsB,GACtB,EAAAe,eAAyB,GACzB,EAAAC,cAAwB,GACxB,EAAAC,YAAsB,GACtB,EAAAC,aAAuB,IACvB,EAAAC,UAAoB,EACpB,EAAAf,WAAqB,EACrB,EAAArB,WAAqB,IACrB,EAAAqC,gBAA0B,EAC1B,EAAAK,SAAmB,EACnB,EAAApB,gBAA0B,EAC1B,EAAAgB,YAAsB,EACtB,EAAAC,aAAuB,EACvB,EAAAC,mBAA6B,EAC7B,EAAAC,iBAA2B,EAC3B,EAAAxC,SAAmB,GAEnB,EAAA0C,aAAuB,EACvB,EAAAC,WAAqB,EACrB,EAAAC,YAAsB,EACtB,EAAAC,cAAwB,EACxB,EAAAC,UAAoB,EACpB,EAAAC,YAAsB,IACtB,EAAAC,SAAmB,EACnB,EAAAC,WAAqB,GACrB,EAAAC,aAAuB,EACvB,EAAAC,WAAqB,GACrB,EAAAC,kBAA4B,EAC5B,EAAAC,qBAA+B,EAC/B,EAAA3B,eAAyB,E,EAC7B,OAzC+C,QAyC/C,EAzCa,CAAkC7B,KA2C/C,EAAAtd,WAAa,gBAAI,2D,OACb,EAAAoc,OAAiB,EACjB,EAAAmB,WAAuB,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAC3D,EAAAe,aAAyB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/C,EAAAH,UAAoB,GACpB,EAAAF,WAAqB,EACrB,EAAAC,WAAqB,GACrB,EAAA3B,WAAqB,GACrB,EAAAqG,aAAuB,EACvB,EAAA/D,WAAqB,EACrB,EAAAgE,oBAA8B,EAC9B,EAAA5D,WAAqB,EACrB,EAAAxC,YAAsB,EACtB,EAAAqG,eAA2B,CAAC,EAAG,EAAG,GAAI,GACtC,EAAAC,iBAA6B,CAAC,EAAG,EAAG,EAAG,GACvC,EAAA5D,eAAyB,EACzB,EAAA6D,YAAsB,kB,EAC1B,OAjB+C,QAiB/C,EAjBa,CAAkC1F,KAmB/C,EAAA2F,UAAY,gBAAI,2D,OACZ,EAAA7G,OAAiB,EACjB,EAAAmB,WAAqB,IACrB,EAAAY,UAAoB,GACpB,EAAAF,WAAqB,GACrB,EAAAC,WAAqB,GACrB,EAAA3B,WAAqB,GACrB,EAAAqG,aAAuB,EACvB,EAAA/D,WAAqB,EACrB,EAAAqD,YAAsB,EACtB,EAAAC,WAAqB,EACrB,EAAAU,oBAA8B,EAC9B,EAAA5D,WAAqB,EACrB,EAAAxC,YAAsB,EACtB,EAAA0C,eAAyB,EACzB,EAAA6D,YAAsB,iB,EAC1B,OAhB6C,QAgB7C,EAhBY,CAAiC1F,KAkB7C,EAAA4F,SAAW,gBAAI,2D,OACX,EAAA9G,OAAiB,EACjB,EAAAmB,WAAuB,CAAC,GAAM,GAAM,GAAM,IAC1C,EAAAY,UAAoB,GACpB,EAAAF,WAAqB,GACrB,EAAAC,WAAqB,GACrB,EAAA3B,WAAqB,GACrB,EAAAqG,aAAuB,EACvB,EAAA/D,WAAqB,EACrB,EAAAgE,oBAA8B,EAC9B,EAAAM,SAAmB,EACnB,EAAAC,iBAA2B,EAC3B,EAAA3G,YAAsB,EACtB,EAAAqG,eAA2B,CAAC,EAAG,EAAG,EAAG,IACrC,EAAAC,iBAA6B,CAAC,EAAG,EAAG,EAAG,GACvC,EAAA5D,eAAyB,EACzB,EAAA6D,YAAsB,mB,EAC1B,OAjB2C,QAiB3C,EAjBW,CAAgC1F,KAmB3C,EAAA+F,SAAW,gBAAI,2D,OACX,EAAAjH,OAAiB,EACjB,EAAAmB,WAAuB,CAAC,EAAK,EAAK,GAClC,EAAAY,UAAoB,GACpB,EAAAF,WAAqB,GACrB,EAAAC,WAAqB,GACrB,EAAA3B,WAAqB,GACrB,EAAA2F,YAAsB,EACtB,EAAAU,aAAuB,EACvB,EAAAU,oBAA8B,EAC9B,EAAA7G,YAAsB,EACtB,EAAA8G,SAAqB,CAAC,EAAG,EAAG,GAC5B,EAAAC,aAAuB,EACvB,EAAAC,cAAwB,EACxB,EAAAC,qBAA+B,EAC/B,EAAAvE,eAAyB,EACzB,EAAA6D,YAAsB,gB,EAC1B,OAjB2C,QAiB3C,EAjBW,CAAgC1F,KAmB3C,EAAAqG,YAAc,gBAAI,2D,OACd,EAAAvH,OAAiB,EACjB,EAAAmB,WAAuB,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAC3D,EAAAI,cAA0B,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAC9D,EAAAC,eAA2B,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAC/D,EAAAC,aAAyB,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAC7D,EAAAC,cAA0B,CAAC,IAAO,IAAO,IAAO,IAAO,IAAO,IAAO,IAAO,KAC5E,EAAAC,cAA0B,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAC9D,EAAAwF,SAAqB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C,EAAAjF,aAAyB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/C,EAAAH,UAAoB,GACpB,EAAAF,WAAqB,GACrB,EAAAC,WAAqB,GACrB,EAAA3B,WAAqB,GACrB,EAAAqG,aAAuB,EACvB,EAAA/D,WAAqB,EACrB,EAAAC,gBAA0B,EAC1B,EAAA+D,oBAA8B,EAC9B,EAAAe,qBAA+B,EAC/B,EAAAnH,YAAsB,EACtB,EAAAqG,eAA2B,CAAC,EAAG,EAAG,GAAI,IACtC,EAAAC,iBAA6B,CAAC,EAAG,EAAG,EAAG,GACvC,EAAA5D,eAAyB,EACzB,EAAA6D,YAAsB,kB,EAC1B,OAxBiD,QAwBjD,EAxBc,CAAmC1F,KA0BjD,EAAAuG,WAAa,gBAAI,2D,OACb,EAAAzH,OAAiB,GACjB,EAAAmB,WAAuB,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACnG,EAAAgG,SAAqB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnE,EAAAO,WAAuB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACrE,EAAAxF,aAAyB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvE,EAAAH,UAAoB,GACpB,EAAAF,WAAqB,GACrB,EAAAC,WAAqB,GACrB,EAAA3B,WAAqB,GACrB,EAAAqG,aAAuB,EACvB,EAAA/D,WAAqB,EACrB,EAAAgE,oBAA8B,EAC9B,EAAAe,qBAA+B,EAC/B,EAAAnH,YAAsB,EACtB,EAAAyC,gBAA0B,EAC1B,EAAA4D,eAA2B,CAAC,EAAG,EAAG,GAAI,GACtC,EAAAC,iBAA6B,CAAC,EAAG,EAAG,EAAG,GACvC,EAAA5D,eAAyB,EACzB,EAAA6D,YAAsB,kB,EAC1B,OApB+C,QAoB/C,EApBa,CAAkC1F,KAsB/C,EAAAyG,UAAY,gBAAI,2D,OACZ,EAAA3H,OAAiB,GACjB,EAAAmB,WAAuB,CAAC,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,IACnG,EAAAgG,SAAqB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnE,EAAAjF,aAAyB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvE,EAAAH,UAAoB,GACpB,EAAAF,WAAqB,GACrB,EAAAC,WAAqB,GACrB,EAAA3B,WAAqB,GACrB,EAAAsC,WAAqB,EACrB,EAAAF,gBAA0B,EAC1B,EAAAqF,kBAA4B,EAC5B,EAAApB,aAAuB,EACvB,EAAAnG,YAAsB,EACtB,EAAAwH,iBAA2B,EAC3B,EAAAnB,eAA2B,CAAC,EAAG,EAAG,GAAI,GACtC,EAAAC,iBAA6B,CAAC,EAAG,EAAG,EAAG,GACvC,EAAA5D,eAAyB,EACzB,EAAA6D,YAAsB,mB,EAC1B,OAnB6C,QAmB7C,EAnBY,CAAiC1F,KAqB7C,EAAA4G,aAAe,gBAAI,2D,OACf,EAAA9H,OAAiB,EACjB,EAAAmB,WAAuB,CAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAClE,EAAAI,cAA0B,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAC9D,EAAAC,eAA2B,CAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IACtE,EAAAC,aAAyB,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAC7D,EAAAC,cAA0B,CAAC,IAAO,IAAO,IAAO,IAAO,IAAO,IAAO,IAAO,KAC5E,EAAAC,cAA0B,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAC9D,EAAAO,aAAyB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/C,EAAAH,UAAoB,GACpB,EAAAF,WAAqB,GACrB,EAAAC,WAAqB,GACrB,EAAA3B,WAAqB,GACrB,EAAAsC,WAAqB,EACrB,EAAAmF,kBAA4B,EAC5B,EAAAvH,YAAsB,EACtB,EAAAmG,aAAuB,EACvB,EAAAqB,iBAA2B,EAC3B,EAAAhF,WAAqB,EACrB,EAAAkF,WAAqB,mBACrB,EAAAC,eAAyB,uBACzB,EAAAtB,eAA2B,CAAC,EAAG,EAAG,GAAI,IACtC,EAAAC,iBAA6B,CAAC,EAAG,EAAG,EAAG,GACvC,EAAA5D,eAAyB,EACzB,EAAA6D,YAAsB,mB,EAC1B,OAzBmD,QAyBnD,EAzBe,CAAoC1F,KA2BnD,EAAA+G,YAAc,gBAAI,2D,OACd,EAAAjI,OAAiB,EACjB,EAAAmB,WAAuB,CAAC,GAAM,GAAM,GAAM,IAC1C,EAAAI,cAA0B,CAAC,EAAK,EAAK,EAAK,GAC1C,EAAAC,eAA2B,CAAC,GAAM,GAAM,GAAM,IAC9C,EAAAC,aAAyB,CAAC,GAAM,GAAM,GAAM,IAC5C,EAAAC,cAA0B,CAAC,EAAK,GAAM,EAAK,IAC3C,EAAAC,cAA0B,CAAC,EAAK,GAAM,EAAK,IAC3C,EAAAI,UAAoB,GACpB,EAAAF,WAAqB,GACrB,EAAAC,WAAqB,GACrB,EAAA3B,WAAqB,GACrB,EAAAsC,WAAqB,EACrB,EAAAmF,kBAA4B,EAC5B,EAAAb,SAAmB,EACnB,EAAAC,iBAA2B,EAC3B,EAAAR,aAAuB,EACvB,EAAAnG,YAAsB,EACtB,EAAAwH,iBAA2B,EAC3B,EAAAE,WAAqB,mBACrB,EAAAC,eAAyB,uBACzB,EAAAtB,eAA2B,CAAC,EAAG,EAAG,GAAI,IACtC,EAAAC,iBAA6B,CAAC,EAAG,EAAG,EAAG,GACvC,EAAA5D,eAAyB,EACzB,EAAA6D,YAAsB,kB,EAC1B,OAzBiD,QAyBjD,EAzBc,CAAmC1F,KA2BjD,EAAAgH,SAAW,gBAAI,2D,OACX,EAAAlI,OAAiB,EACjB,EAAAmB,WAAqB,IACrB,EAAAe,aAAuB,EACvB,EAAAH,UAAoB,GACpB,EAAAF,WAAqB,GACrB,EAAAC,WAAqB,GACrB,EAAA3B,WAAqB,GACrB,EAAAqG,aAAuB,EACvB,EAAAV,YAAsB,EACtB,EAAAoB,oBAA8B,EAC9B,EAAAiB,cAAwB,EACxB,EAAAC,eAAyB,EACzB,EAAA/H,YAAsB,EACtB,EAAAuG,YAAsB,gBACtB,EAAA7D,eAAyB,E,EAC7B,OAhB2C,QAgB3C,EAhBW,CAAgC7B,KAkB3C,EAAAmH,UAAY,gBAAI,2D,OACZ,EAAArI,OAAiB,EACjB,EAAAmB,WAAuB,CAAC,GAAM,GAAM,IACpC,EAAAY,UAAoB,GACpB,EAAAF,WAAqB,EACrB,EAAAC,WAAqB,EACrB,EAAA3B,WAAqB,GACrB,EAAA4C,eAAyB,EACzB,EAAA6D,YAAsB,iB,EAC1B,OAT6C,QAS7C,EATY,CAAiC1F,KAW7C,EAAAoH,SAAW,gBAAI,2D,OACX,EAAAtI,OAAiB,EACjB,EAAAmB,WAAuB,CAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAClE,EAAAe,aAAyB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/C,EAAAH,UAAoB,GACpB,EAAAF,WAAqB,GACrB,EAAAC,WAAqB,GACrB,EAAA3B,WAAqB,GACrB,EAAAsC,WAAqB,EACrB,EAAAmF,kBAA4B,EAC5B,EAAAb,SAAmB,EACnB,EAAAC,iBAA2B,EAC3B,EAAA3G,YAAsB,EACtB,EAAAmG,aAAuB,EACvB,EAAAqB,iBAA2B,EAC3B,EAAAnB,eAA2B,CAAC,EAAG,EAAG,EAAG,IACrC,EAAAC,iBAA6B,CAAC,EAAG,EAAG,EAAG,GACvC,EAAA5D,eAAyB,EACzB,EAAA6D,YAAsB,kB,EAC1B,OAnB2C,QAmB3C,EAnBW,CAAgC1F,KAqB3C,EAAAN,SAAW,gBAAI,2D,OACX,EAAAZ,OAAiB,EACjB,EAAA+B,UAAoB,GACpB,EAAAD,WAAqB,GACrB,EAAAD,WAAqB,GACrB,EAAA1B,WAAqB,GACrB,EAAAC,QAAkB,GAClB,EAAAmI,eAAyB,EACzB,EAAAlI,YAAsB,EACtB,EAAAmI,WAAqB,EACrB,EAAAC,YAAyB,EAAC,GAAM,GAAM,GACtC,EAAAC,aAAyB,CAAC,EAAG,EAAG,GAChC,EAAAC,wBAAkC,EAClC,EAAArI,WAAqB,GACrB,EAAAsG,YAAsB,kBACtB,EAAA7D,eAAyB,E,EAC7B,OAhB2C,QAgB3C,EAhBW,CAAgC6F,KAkB3C,EAAAjI,aAAe,gBAAI,2D,OACf,EAAAX,OAAiB,EACjB,EAAA+B,UAAoB,GACpB,EAAA8G,gBAA0B,EAC1B,EAAA/G,WAAqB,GACrB,EAAAD,WAAqB,GACrB,EAAA1B,WAAqB,GACrB,EAAAC,QAAkB,GAClB,EAAAmI,eAAyB,EACzB,EAAAlI,YAAsB,EACtB,EAAAH,eAAyB,EACzB,EAAAyI,wBAAkC,EAClC,EAAA/B,YAAsB,uBACtB,EAAA7D,eAAyB,E,EAC7B,OAdmD,QAcnD,EAde,CAAoC6F,KAgBnD,EAAA7H,YAAc,gBAAI,2D,OACd,EAAAf,OAAiB,EACjB,EAAA+B,UAAoB,GACpB,EAAA+G,YAAsB,EACtB,EAAAhH,WAAqB,GACrB,EAAAD,WAAqB,GACrB,EAAA1B,WAAqB,GACrB,EAAAC,QAAkB,GAClB,EAAAmI,eAAyB,EACzB,EAAAlI,YAAsB,EACtB,EAAAqI,aAAyB,CAAC,EAAG,EAAG,EAAG,GACnC,EAAAC,wBAAkC,EAClC,EAAAxB,SAAqB,CAAC,EAAG,EAAG,EAAG,GAC/B,EAAAP,YAAsB,kBACtB,EAAA7D,eAAyB,E,EAC7B,OAfiD,QAejD,EAfc,CAAmC6F,KAiBjD,EAAAnI,YAAc,gBAAI,2D,OACd,EAAAT,OAAiB,EACjB,EAAA+B,UAAoB,GACpB,EAAAgH,iBAA2B,EAC3B,EAAAC,eAAyB,EACzB,EAAAlH,WAAqB,GACrB,EAAAD,WAAqB,GACrB,EAAA1B,WAAqB,GACrB,EAAAC,QAAkB,EAClB,EAAAmI,eAAyB,EACzB,EAAAG,aAAyB,CAAC,EAAG,EAAG,GAChC,EAAAC,wBAAkC,EAClC,EAAAM,WAAwB,EAAC,GAAM,GAAM,GACrC,EAAArC,YAAsB,kBACtB,EAAA7D,eAAyB,E,EAC7B,OAfiD,QAejD,EAfc,CAAmC6F,KAiBjD,EAAA3H,YAAc,gBAAI,2D,OACd,EAAAjB,OAAiB,EACjB,EAAA+B,UAAoB,GACpB,EAAAmH,eAAyB,EACzB,EAAApH,WAAqB,GACrB,EAAAD,WAAqB,GACrB,EAAA1B,WAAqB,GACrB,EAAAC,QAAkB,GAClB,EAAAmI,eAAyB,EACzB,EAAAlI,YAAsB,EACtB,EAAAqI,aAAyB,CAAC,EAAG,GAC7B,EAAAC,wBAAkC,EAClC,EAAA/B,YAAsB,kBACtB,EAAA7D,eAAyB,E,EAC7B,OAdiD,QAcjD,EAdc,CAAmC6F,KAgBjD,EAAAlI,MAAQ,gBAAI,2D,OACR,EAAAV,OAAiB,EACjB,EAAA+B,UAAoB,GACpB,EAAAD,WAAqB,GACrB,EAAAD,WAAqB,GACrB,EAAA1B,WAAqB,GACrB,EAAAC,QAAkB,EAClB,EAAAmI,eAAyB,EACzB,EAAAlI,YAAsB,EACtB,EAAA8I,eAAyB,EACzB,EAAAC,iBAA2B,EAC3B,EAAAV,aAAuB,EACvB,EAAAC,wBAAkC,EAClC,EAAAU,aAAuB,EACvB,EAAAzC,YAAsB,kBACtB,EAAA7D,eAAyB,E,EAC7B,OAhBqC,QAgBrC,EAhBQ,CAA6B6F,KAkBrC,EAAApI,YAAc,gBAAI,2D,OACd,EAAAR,OAAiB,EACjB,EAAA+B,UAAoB,GACpB,EAAAiH,eAAyB,EACzB,EAAAlH,WAAqB,GACrB,EAAAD,WAAqB,GACrB,EAAA1B,WAAqB,GACrB,EAAAmJ,WAAqB,EACrB,EAAAC,cAAwB,EACxB,EAAAtJ,aAAuB,EACvB,EAAA0I,wBAAkC,EAClC,EAAApW,cAA2B,EAAC,GAAO,GAAO,GAC1C,EAAAiX,aAAyB,CAAC,EAAK,EAAK,GACpC,EAAAzG,eAAyB,E,EAC7B,OAdiD,QAcjD,EAdc,CAAmC6F,KAgBjD,EAAA5H,WAAa,gBAAI,2D,OACb,EAAAhB,OAAiB,EACjB,EAAA+B,UAAoB,GACpB,EAAAD,WAAqB,GACrB,EAAAD,WAAqB,GACrB,EAAA1B,WAAqB,GACrB,EAAAC,QAAkB,GAClB,EAAAmI,eAAyB,EACzB,EAAAlI,YAAsB,EACtB,EAAA0G,SAAmB,EACnB,EAAAC,iBAA2B,EAC3B,EAAA0B,aAAyB,CAAC,EAAG,GAC7B,EAAAC,wBAAkC,EAClC,EAAAa,aAAyB,CAAC,EAAK,IAC/B,EAAA5C,YAAsB,kBACtB,EAAA7D,eAAyB,E,EAC7B,OAhB+C,QAgB/C,EAhBa,CAAkC6F,KAkB/C,EAAA9H,QAAU,gBAAI,2D,OACV,EAAAd,OAAiB,EACjB,EAAA+B,UAAoB,GACpB,EAAAD,WAAqB,GACrB,EAAAD,WAAqB,GACrB,EAAA1B,WAAqB,GACrB,EAAAC,QAAkB,GAClB,EAAAmI,eAAyB,EACzB,EAAAlI,YAAsB,EACtB,EAAA6B,aAAyB,CAAC,EAAG,EAAG,IAChC,EAAAwG,aAAyB,CAAC,EAAG,EAAG,GAChC,EAAAC,wBAAkC,EAClC,EAAAc,aAA0B,EAAC,GAAM,GAAM,GACvC,EAAA7C,YAAsB,kBACtB,EAAA7D,eAAyB,E,EAC7B,OAfyC,QAezC,EAfU,CAA+B6F,KAiBzC,EAAA/H,QAAU,gBAAI,2D,OACV,EAAAb,OAAiB,EACjB,EAAA+B,UAAoB,GACpB,EAAAD,WAAqB,GACrB,EAAAD,WAAqB,GACrB,EAAA1B,WAAqB,GACrB,EAAAC,QAAkB,GAClB,EAAAmI,eAAyB,EACzB,EAAAlI,YAAsB,EACtB,EAAAqJ,iBAA2B,EAC3B,EAAAhB,aAAyB,CAAC,EAAG,GAC7B,EAAAC,wBAAkC,EAClC,EAAAa,aAAyB,CAAC,GAAK,KAC/B,EAAAG,YAAyB,EAAC,GAAM,GAChC,EAAA/C,YAAsB,kBACtB,EAAA7D,eAAyB,E,EAC7B,OAhByC,QAgBzC,EAhBU,CAA+B6F,KAkBzC,EAAA9Z,aAAe,gBAAI,2D,OACf,EAAAkR,OAAiB,EACjB,EAAA+B,UAAoB,GACpB,EAAAD,WAAqB,EACrB,EAAA3B,WAAqB,E,EACzB,OALmD,QAKnD,EALe,CAAoCe,KAOnD,EAAA0I,aAAe,gBAAI,2D,OACf,EAAA5J,OAAiB,EACjB,EAAA+B,UAAoB,GACpB,EAAAD,WAAqB,EACrB,EAAA3B,WAAqB,E,EACzB,OALmD,QAKnD,EALe,CAAoCe,KAOnD,EAAAjS,IAAM,gBAAI,2D,OACN,EAAA+Q,OAAiB,EACjB,EAAA+B,UAAoB,GACpB,EAAAD,WAAqB,EACrB,EAAA3B,WAAqB,E,EACzB,OALiC,QAKjC,EALM,CAA2Be,KAOjC,EAAA2I,QAAU,gBAAI,2D,OACV,EAAA7J,OAAiB,EACjB,EAAA6B,WAAqB,E,EACzB,OAHyC,QAGzC,EAHU,CAA+BX,KAKzC,EAAA4I,OAAS,gBAAI,2D,OACT,EAAA9J,OAAiB,EACjB,EAAA6B,WAAqB,E,EACzB,OAHuC,QAGvC,EAHS,CAA8BX,KAKvC,EAAA6I,QAAU,gBAAI,2D,OACV,EAAA/J,OAAiB,EACjB,EAAA6B,WAAqB,E,EACzB,OAHyC,QAGzC,EAHU,CAA+BX,KAKzC,EAAA8I,UAAY,gBAAI,2D,OACZ,EAAAhK,OAAiB,EACjB,EAAAiK,UAAoB,E,EACxB,OAH6C,QAG7C,EAHY,CAAiC/I,KAK7C,EAAAgJ,cAAgB,gBAAI,2D,OAChB,EAAAlK,OAAiB,EACjB,EAAA+B,UAAoB,GACpB,EAAAF,WAAqB,EACrB,EAAAC,WAAqB,GACrB,EAAA3B,WAAqB,GACrB,EAAAwI,wBAAkC,E,EACtC,OAPqD,QAOrD,EAPgB,CAAqCzH,KASrD,EAAAiJ,KAAO,gBAAI,2D,OACP,EAAAnK,OAAiB,EACjB,EAAAI,QAAkB,EAClB,EAAAmI,eAAyB,E,EAC7B,OAJmC,QAInC,EAJO,CAA4BrH,KAQ/BA,GAAW/B,WAAW,EAAME,G,EAUpC,OAlvBkC,QA2uB9B,YAAAI,YAAA,SAAYD,EAAQD,EAAaG,GAC7B,GAAIF,EAAOrxB,gBAAkBoxB,EAEzB,OADA2B,GAAW/B,WAAWp2B,KAAKy2B,GAASE,IAC7B,GAInB,EAlvBA,CAAkCwB,I,mFCMlC,4BAkJA,OA1IW,EAAAkJ,sBAAP,WACI,OAAOrhC,KAAKshC,aAAa,OAGtB,EAAAC,oBAAP,SAA2Br/B,EAAiBE,GACxC,OAAOpC,KAAKshC,aAAa,IAAIE,EAAmBt/B,EAASE,KAG9C,EAAAk/B,aAAf,SAA4BnM,GAA5B,WACIn1B,KAAKyhC,OAAOC,UAAY,SAACrtB,GACrB,IAAM8gB,EAAqB9gB,EAAM3P,KAC7BywB,EAAIz0B,OAASimB,GAAkBkP,OAC/B,EAAK8L,eAAexM,EAAIQ,UAAUvwB,eAAiB+vB,EAAIS,SACvD,EAAKgM,iBACEzM,EAAIz0B,OAASimB,GAAkByO,IACtC,EAAKyM,UAAU1M,EAAIpB,MACZoB,EAAIz0B,OAASimB,GAAkB6O,KACtC,EAAKsM,cAAgB3M,EAAIG,IACzB,EAAKrkB,MAAQ,IAAI8wB,GAAa,EAAKzM,IAAI,UACvC,EAAK0M,cAAc7M,EAAII,iBAChBJ,EAAIz0B,OAASimB,GAAkBsb,WACtC,EAAKC,gBACE/M,EAAIz0B,OAASimB,GAAkBqP,OACtC7yB,QAAQyG,IAAI,oBAAsBurB,EAAII,eAAiB,sCAAwCJ,EAAIY,mBAAqB,aACxH,EAAKoM,eAGbniC,KAAKyhC,OAAOW,YAAYjN,IAqBrB,EAAAG,IAAP,W,IAAW,sDACP,OAAO1wB,EAAA,WAAK,EAAD,IAACiJ,EAAgBi0B,eAAkBh9B,KAG3C,EAAAgJ,2BAAP,SAAkCu0B,GAC9B,IAAMC,EAAYD,EAASj9B,cACrB/B,EAAS4B,OAAOH,KAAK9E,KAAK2hC,gBAAgBz8B,QAAO,SAAC0F,GAAS,OAAAA,EAAKlF,WAAW48B,MACjF,OAAIj/B,EAAOqH,OAAS,EACTrH,EACCi/B,EAAU58B,WAAW,kBAG7BvC,QAAQgL,KAAK,+BAAiCk0B,GACvC,MAHAx0B,EAAgBC,2BAA2B,gBAAkB,EAAYu0B,KAOjF,EAAA9c,YAAP,SAAmBgd,GACf,IAAMC,EAAQD,EAAeA,EAAa/8B,WAAWJ,cAAgB,KACrE,OAAIo9B,GAASxiC,KAAK2hC,eAAeze,eAAesf,GACrCxiC,KAAK2hC,eAAea,GAExB,MAGJ,EAAAC,aAAP,SAAoBC,GAChB,IAAKA,GAAkC,IAArBA,EAAUh4B,OACxB,KAAM,wDAA0Dg4B,EAEpE,IAAMC,EAAaD,EAAUt9B,cAM7B,OALcpF,KAAKulB,YAAYod,KAE3Bx/B,QAAQC,MAAM,UAAas/B,EAAY,8CACvC70B,EAAgB8zB,eAAegB,GAAc7+B,EAAmB,GAAI,KAEjE+J,EAAgB8zB,eAAegB,IAGnC,EAAAC,SAAP,SAAgBF,GACZ,IAAMt+B,EAAUpE,KAAKyiC,aAAaC,GAC5B9+B,EAAoCZ,EAAcoB,EAAQnB,MAAOmB,EAAQlB,QAE/E,OADAU,EAAQ8wB,aAAatwB,EAAS,EAAG,GAC1BR,EAAQD,QAGZ,EAAAk/B,eAAP,SAAsBH,GAClB,OAAKA,EACE1iC,KAAK4iC,SAASF,GADE,MAIpB,EAAA10B,WAAP,SAAkB80B,GACd,IAAKA,GAAsC,IAAvBA,EAAYp4B,OAC5B,KAAM,0DAA4Do4B,EAEtE,IAAMC,EAAeD,EAAY19B,cAC3B49B,EAAqB,gBAAkB,EAAYD,GACrD3+B,EAAUpE,KAAKulB,YAAYwd,IAAiB/iC,KAAKulB,YAAYyd,GAC5D5+B,IACoB,oCAAjB2+B,GACiB,wCAAjBA,GACiB,qCAAjBA,GACA5/B,QAAQgL,KAAK,YAAe20B,EAAc,MAASC,EAAe,KAAOC,EAAqB,gDAElGn1B,EAAgB8zB,eAAeoB,GAAgB3+B,EAAUN,EAAmB,GAAI,KAEpF,IAAMm/B,EAAU,IAAI,MAAQ7+B,EAAS,sBAAyB,MAAgB,OAE9E,OADA6+B,EAAQC,aAAc,EACfD,GAGJ,EAAAE,OAAP,SAAcv4B,GACV,OAAOA,EAAO5K,KAAKulB,YAAY3a,GAAQ,MAGpC,EAAAga,uBAAP,SAA8Bwe,GAC1B,IAAIC,EAAUrjC,KAAKulB,YAAY6d,GAC/B,IAAKC,EAAS,KAAM,4CAA8CD,EAClE,OAAOE,GAAiBjR,WAAW+Q,EAAYC,IAG5C,EAAAE,cAAP,SAAqB34B,GACjB,IAAMmoB,EAAgB/yB,KAAKulB,YAAY3a,GACvC,IAAKmoB,EAAe,KAAM,uCAAyCnoB,EAEnE,OADAiD,EAAgB21B,UAAU54B,GAAQiD,EAAgB21B,UAAU54B,IAAS,IAAI64B,GAAW1Q,GAC7EllB,EAAgB21B,UAAU54B,IAG9B,EAAA84B,eAAP,WACI,OAAO71B,EAAgB01B,cAAc,iCA9IlC,EAAA9B,OAAyB,IAAI,EAC7B,EAAAK,cAAqB,GACrB,EAAAH,eAAqB,GACrB,EAAA6B,UAAY,GAiCZ,EAAA3B,UAAkC,SAAC1M,GACtChyB,QAAQyG,IAAIurB,IAGT,EAAA+M,cAA2B,WAC9B/+B,QAAQyG,IAAI,wBAGT,EAAAo4B,cAAiD,WACpD7+B,QAAQyG,IAAI,0BAGT,EAAAg4B,cAA2B,aAG3B,EAAAO,WAAwB,aA6FnC,EAlJA,G,0dCRA,cAOI,WAAYtO,EAAwB8P,QAAxB,IAAA9P,OAAA,QAAwB,IAAA8P,OAAA,GAFpC,KAAApjC,QAAkB,EAGdP,KAAK2D,OAAShF,SAASG,cAAc,UAChC+0B,IAAO7zB,KAAK2D,OAAOyN,MAAMwyB,WAAa,QACvCD,IAAa3jC,KAAK4D,QAAU5D,KAAK2D,OAAOE,WAAW,KAAM,CAACgwB,MAAOA,KACrE7zB,KAAK6C,OA8Db,OA3DI,YAAA+jB,MAAA,aAGA,YAAAid,UAAA,SAAUC,GACN9jC,KAAK2D,OAAOyN,MAAM0yB,OAASnjC,OAAOmjC,IAG/B,EAAAC,SAAP,SAAgBC,EAAqBC,G,YAC7BC,GAA8B,QAArB,EAAc,QAAd,EAAAF,aAAM,EAANA,EAAQrgC,cAAM,eAAEyN,aAAK,eAAE0yB,SAAU,EACxCK,GAA8B,QAArB,EAAc,QAAd,EAAAF,aAAM,EAANA,EAAQtgC,cAAM,eAAEyN,aAAK,eAAE0yB,SAAU,EAChD,OAAOI,IAAWC,EAAS,EAAID,EAASC,GAAU,EAAI,GAG1D,YAAAC,OAAA,SAAOnhC,EAAOC,GACVlD,KAAK2D,OAAOV,MAAQA,EACpBjD,KAAK2D,OAAOT,OAASA,GAGzB,YAAAmhC,OAAA,WACI,IAAM1vB,EAAW3U,KAAKskC,SACtB,GAAItkC,KAAKukC,YAAc5vB,EAAU,CAC7B,IAAM,EAAU3U,KAAK4D,QACrB6sB,uBAAsB,WAAM,OAAA9b,EAAS,QAI7C,YAAA/R,KAAA,WACI5C,KAAK4mB,QACL5mB,KAAKO,QAAS,EACdP,KAAK2D,OAAOyN,MAAMK,WAAa,UAC/BzR,KAAKqkC,UAGT,YAAAxhC,KAAA,WACI7C,KAAKO,QAAS,EACdP,KAAK2D,OAAOyN,MAAMK,WAAa,UAGnC,YAAA8yB,SAAA,WACI,OAAOvkC,KAAKO,QAGhB,YAAAikC,eAAA,SAAeC,EAAiBC,GAC5B,IAAMC,EAAa3kC,KAAK2D,OAAOihC,wBAC/B,MAAO,CAACH,EAAUE,EAAWrzB,KAAMozB,EAAUC,EAAWpzB,MAG5D,YAAAszB,mBAAA,SAAmBC,EAA0BzwB,GACzC,OAAO,GAGX,YAAA0wB,eAAA,SAAeD,EAAsBzwB,GACjC,OAAO,GAGX,YAAA2wB,iBAAA,SAAiB3wB,GACb,OAAO,GAGf,EAzEA,GA2EA,eAKI,mBACI,aAAM,IAAK,K,OACX,EAAK4wB,WAAaC,GAClB,EAAKC,YAAcC,G,EAqB3B,OA7BiC,QAW7B,YAAAC,eAAA,SAAeZ,EAAiBC,GACtB,MAAW1kC,KAAKwkC,eAAeC,EAASC,GAAvCY,EAAE,KAAEC,EAAE,KACb,MAAO,CAACD,EAAKtlC,KAAKwlC,SAAUD,EAAKvlC,KAAKylC,WAG1C,YAAArB,OAAA,SAAOnhC,EAAOC,GACV,YAAMkhC,OAAM,UAACnhC,EAAOC,GACpBlD,KAAK4D,QAAQqf,MAAMjjB,KAAKwlC,SAAUxlC,KAAKylC,WAG3C,YAAAD,OAAA,WACI,OAAOxlC,KAAK2D,OAAOV,MAAQjD,KAAKilC,YAGpC,YAAAQ,OAAA,WACI,OAAOzlC,KAAK2D,OAAOT,OAASlD,KAAKmlC,aAGzC,EA7BA,CAAiCO,IA+BjC,0E,OAGI,EAAAC,WAAqB,U,EA6BzB,OAhCiC,QAK7B,YAAA/iC,KAAA,WACI,YAAMA,KAAI,WACV5C,KAAK4lC,gBAGT,YAAA/iC,KAAA,WACI,YAAMA,KAAI,WACV7C,KAAK2D,OAAOyN,MAAM/B,OAAS,MAG/B,YAAAu2B,aAAA,WACQ5lC,KAAK6lC,QAAQvkC,IAAIwkC,gBAAgB9lC,KAAK6lC,QAC1C,IAAME,EAASl4B,GAAgB+0B,SAAS,sBAAwB5iC,KAAK2lC,WAAa,QAClF3lC,KAAK6lC,OAASE,EAAOC,YAMrBhmC,KAAK2D,OAAOyN,MAAM/B,OAAS,OAASrP,KAAK6lC,OAAS,WAGtD,YAAAzB,OAAA,SAAOnhC,EAAOC,GACV,YAAMkhC,OAAM,UAACnhC,EAAOC,GAChBlD,KAAKukC,YAAYvkC,KAAK4lC,gBAGlC,EAhCA,CAAiCK,KL7GjC,SAAYhQ,GACR,mBACA,uBACA,6BAHJ,CAAYA,QAAY,KAMxB,SAAYC,GACR,mBACA,mBACA,eAHJ,CAAYA,QAAa,KAMzB,SAAYC,GACR,mBACA,eAFJ,CAAYA,QAAS,KMTrB,IC4kBY+P,GD5kBZ,GAEI,SAAYC,GACRA,EAAOC,oBAAoBjlC,iBAAiB,eAAe,SAACkT,GACpD8xB,EAAOE,SAAShyB,IAAQA,EAAMiyB,oBAEtC,IAAI9+B,IAA2B,CAC3B,CAAC,cAAe0uB,GAAcqQ,MAC9B,CAAC,cAAerQ,GAAcsQ,MAC9B,CAAC,YAAatQ,GAAcuQ,MAC7B1hC,SAAQ,SAAC+/B,EAAW4B,GACnBP,EAAOC,oBAAoBjlC,iBAAiBulC,GAAW,SAACryB,GACpD,GAAK8xB,EAAOE,SAAShyB,GAArB,CACAA,EAAMiyB,iBAEN,IAAMK,EAAmB,IAAIC,aAAavyB,EAAM3T,KAAM,CAClDmmC,SAAS,EACTC,QAASzyB,EAAMyyB,QACfC,QAAS1yB,EAAM0yB,QACfC,YAAa3yB,EAAM2yB,YACnBC,OAAQ5yB,EAAM4yB,OACdC,QAAS7yB,EAAM6yB,QACfC,QAAS9yB,EAAM8yB,QACfC,SAAU/yB,EAAM+yB,WAEpBjB,EAAOkB,OAAOniC,QAAO,SAAAksB,GAAK,OAAAA,EAAEmT,cACvB+C,MAAK,SAAC9iC,EAAGD,GAAM,OAAAmhC,GAAA,SAAqBlhC,EAAGD,MACvC+a,MAAK,SAAA8R,GAAK,OAAAA,EAAEyT,mBAAmBC,EAAW6B,aAGvD,IAAIn/B,IAAuB,CACvB,CAAC,UAAW2uB,GAAUqQ,MACtB,CAAC,QAASrQ,GAAUsQ,MACrB1hC,SAAQ,SAAC+/B,EAAW4B,GACnBP,EAAOC,oBAAoBjlC,iBAAiBulC,GAAW,SAACryB,GAEpD8xB,EAAOkB,OAAOniC,QAAO,SAAAksB,GAAK,OAAAA,EAAEmT,cACvB+C,MAAK,SAAC9iC,EAAGD,GAAM,OAAAmhC,GAAA,SAAqBlhC,EAAGD,MACvC+a,MAAK,SAAA8R,GAAK,OAAAA,EAAE2T,eAAeD,EAAWzwB,YAGnD8xB,EAAOC,oBAAoBjlC,iBAAiB,SAAS,SAACkT,GAClD,GAAK8xB,EAAOE,SAAShyB,GAArB,CAEA,IAAMsyB,EAAmB,IAAIY,WAAWlzB,EAAM3T,KAAM,CAChDmmC,SAAS,EACTC,QAASzyB,EAAMyyB,QACfC,QAAS1yB,EAAM0yB,QACfS,OAAQnzB,EAAMmzB,OACdC,OAAQpzB,EAAMozB,OACdC,OAAQrzB,EAAMqzB,OACdT,OAAQ5yB,EAAM4yB,OACdC,QAAS7yB,EAAM6yB,QACfC,QAAS9yB,EAAM8yB,QACfC,SAAU/yB,EAAM+yB,WAEpBjB,EAAOkB,OAAOniC,QAAO,SAAAksB,GAAK,OAAAA,EAAEmT,cACvB+C,MAAK,SAAC9iC,EAAGD,GAAM,OAAAmhC,GAAA,SAAqBlhC,EAAGD,MACvC+a,MAAK,SAAA8R,GAAK,OAAAA,EAAE4T,iBAAiB2B,WE3D9C,cAUI,wBAII,GAVJ,KAAAU,OAAwB,GACxB,KAAApkC,MAAgB,IAChB,KAAAC,OAAiB,IACjB,KAAAykC,MAAgB,IAAM,IAIlB3nC,KAAKomC,oBAAsBznC,SAASC,eAAe,yBACnDoB,KAAKomC,oBAAoBwB,QACzB5nC,KAAK6nC,SAAW,IAAIC,GAAa9nC,OAC5BA,KAAKomC,oBAAqB,KAAM,gDACrC2B,OAAO5mC,iBAAiB,UAAU,WAAM,SAAK6mC,oBAC7ChoC,KAAKioC,YAAcjoC,KAAKkoC,SAAS,IAAIC,GAAe,KACpDnoC,KAAKgoC,iBAkDb,OA/CI,YAAAE,SAAA,SAAgCE,EAAUtE,GAKtC,YALsC,IAAAA,MAAA,GACtCsE,EAAMhE,OAAOpkC,KAAKiD,MAAOjD,KAAKkD,QAC9BklC,EAAMvE,UAAUC,GAChB9jC,KAAKqnC,OAAOv8B,KAAKs9B,GACjBpoC,KAAKomC,oBAAoBvnC,YAAYupC,EAAMzkC,QACpCykC,GAGX,YAAA/D,OAAA,WACIrkC,KAAKqnC,OAAOtiC,SAAQ,SAACqjC,GAAU,OAAAA,EAAM/D,aAGzC,YAAAzhC,KAAA,WACI5C,KAAKqnC,OAAOtiC,SAAQ,SAACqjC,GAAU,OAAAA,EAAMxlC,UACrC5C,KAAKqkC,UAGT,YAAAxhC,KAAA,WACI7C,KAAKqnC,OAAOtiC,SAAQ,SAACqjC,GAAU,OAAAA,EAAMvlC,WAGzC,YAAAmlC,eAAA,WACI,IAAMhU,EAAWh0B,KAAKomC,oBAAoBiC,YAAaC,EAAYtoC,KAAKomC,oBAAoBmC,aACtFC,EAAcniC,KAAK+d,MAAM4P,EAAWh0B,KAAK2nC,OAC3Ca,EAAcF,EACdtoC,KAAKokC,OAAO/9B,KAAK+d,MAAMkkB,EAAYtoC,KAAK2nC,OAAQW,GAEhDtoC,KAAKokC,OAAOpQ,EAAUwU,IAI9B,YAAApE,OAAA,SAAOnhC,EAAeC,GAClBlD,KAAKiD,MAAQA,EACbjD,KAAKkD,OAASA,EACdlD,KAAKqnC,OAAOtiC,SAAQ,SAACqjC,GAAU,OAAAA,EAAMhE,OAAOnhC,EAAOC,MACnDlD,KAAKqkC,UAGT,YAAAgC,SAAA,SAAShyB,GACL,GAAIrU,KAAKqnC,OAAO38B,OAAS,EAAG,OAAO,EACnC,IAAM+9B,EAAazoC,KAAKqnC,OAAO,GAC/B,IAAKoB,EAAWlE,aAAekE,EAAW9kC,OAAQ,OAAO,EACzD,IAAM+kC,EAAOD,EAAW9kC,OAAOihC,wBACzBkC,EAAUzyB,EAAMyyB,QAASC,EAAU1yB,EAAM0yB,QAC/C,OAAOD,GAAW4B,EAAKp3B,MAAQw1B,EAAU4B,EAAKC,OAAS5B,GAAW2B,EAAKn3B,KAAOw1B,EAAU2B,EAAKE,QAGrG,EAnEA,G,0dCCA,eAKI,mBACI,cAAO,K,OAHX,EAAAlT,WAAqB,EAIjB,EAAK0S,MAAQ,EAAKF,SAAS,IAAIjC,I,EA8CvC,OArDmC,QAU/B,YAAArjC,KAAA,sBACI5C,KAAKqnC,OAAOtiC,SAAQ,SAACqjC,GACbA,IAAU,EAAKH,aAAaG,EAAMxlC,UAE1C5C,KAAK6oC,kBAAkB,eAG3B,YAAAA,kBAAA,SAAkB9U,GAAlB,WACI/zB,KAAKooC,MAAM9D,SAAW,SAAC1gC,GAEnBA,EAAQJ,UAAY,QACpBI,EAAQH,SAAS,EAAG,EAAG,EAAK2kC,MAAMnD,WAAY,EAAKmD,MAAMjD,aAEzDvhC,EAAQklC,KAAO,aACfllC,EAAQJ,UAAY,QACpBI,EAAQmlC,SAAS,uBAAwB,GAAI,EAAKX,MAAMjD,YAAc,IAEtEvhC,EAAQklC,KAAO,aACfllC,EAAQJ,UAAY,QACpBI,EAAQmlC,SAAShV,EAAM,GAAI,EAAKqU,MAAMjD,YAAc,KAExDnlC,KAAKqkC,UAGT,YAAA2E,kBAAA,SAAkBzT,GAAlB,WACU0T,EAAgBp7B,GAAgB+0B,SAAS/0B,GAAgBynB,IAAI,OAAQ,eACrE4T,EAAcr7B,GAAgB+0B,SAAS/0B,GAAgBynB,IAAI,OAAQ,gBACnE6T,EAAat7B,GAAgB61B,iBAAiB5P,gBAAgBjmB,GAAgBynB,IAAI,OAAQ,gBAChGt1B,KAAKooC,MAAM9D,SAAW,SAAC1gC,GACnBA,EAAQwlC,UAAUH,EAAe,EAAG,GACpC,IAAMI,EAAkB,KAAO,EAAK3T,WAAaH,EAAiBlvB,KAAK+d,MAAM,EAAKsR,WAAaH,GAAkB,GACjH3xB,EAAQwlC,UAAUF,EAAa,IAAK,IAAKG,EAAiB,GAC1DzlC,EAAQwlC,UAAUD,EAAY9iC,KAAK+d,MAAM,IAAM+kB,EAAWlmC,MAAQ,GAAIoD,KAAK+d,MAAM,IAAM+kB,EAAWjmC,OAAS,KAE/GlD,KAAKioC,YAAYrlC,OACjB5C,KAAKqkC,UAGT,YAAAiF,qBAAA,WACItpC,KAAK01B,aACL11B,KAAKqkC,UAGb,EArDA,CAAmCkF,ICJnC,2BAEI,KAAAhmC,EAAY,EACZ,KAAAD,EAAY,EACZ,KAAAL,MAAgB,EAChB,KAAAC,OAAiB,EACjB,KAAA4gC,OAAiB,IACjB,KAAA0F,gBAAiB,EACjB,KAAAC,aAAuB,EACvB,KAAAC,OAAiB,EACjB,KAAAC,SAAmB,EACnB,KAAAC,WAAqB,GACrB,KAAAC,YAAsB,EAmC1B,OAjCW,EAAA9F,SAAP,SAAgBzyB,EAAwBq3B,GACpC,OAAOr3B,EAAKwyB,SAAW6E,EAAM7E,OAAS,EAAIxyB,EAAKwyB,OAAS6E,EAAM7E,QAAU,EAAI,GAGhF,YAAAgG,WAAA,SAAWC,EAAYC,GACnB,IAAMN,EAAQK,GAAM/pC,KAAKuD,GAAKwmC,EAAK/pC,KAAKuD,EAAIvD,KAAKiD,OAAS+mC,GAAMhqC,KAAKsD,GAAK0mC,EAAKhqC,KAAKsD,EAAItD,KAAKkD,OAO7F,OANIlD,KAAK0pC,QAAUA,IACf1pC,KAAK0pC,MAAQA,EACb1pC,KAAKypC,aAAc,EACnBzpC,KAAKiqC,iBAEJjqC,KAAK0pC,QAAO1pC,KAAK2pC,SAAU,GACzB3pC,KAAK0pC,OAGhB,YAAAO,cAAA,aAGA,YAAAC,gBAAA,WACSlqC,KAAK0pC,QACL1pC,KAAK2pC,UAAS3pC,KAAKypC,aAAc,GACtCzpC,KAAK2pC,SAAU,IAGnB,YAAAQ,YAAA,WACQnqC,KAAK2pC,UAAS3pC,KAAKypC,aAAc,GACrCzpC,KAAK2pC,SAAU,GAGnB,YAAAS,KAAA,SAAKxmC,GACD5D,KAAKypC,aAAc,GAG3B,EA/CA,G,0dCIA,eAKI,WAAYrB,EAAsB9S,GAAlC,MACI,cAAO,K,OAJX,EAAA+U,WAAa,KACb,EAAAC,WAAa,KAIT,EAAKD,WAAajC,EAAMmC,OAAOzW,gBAAgBwB,EAAIkV,OACnD,EAAKF,WAAalC,EAAMqC,OAAO3W,gBAAgBwB,EAAIkV,OACnD,EAAKvnC,MAAQoD,KAAKD,IAAI,EAAKikC,WAAWpnC,MAAO,EAAKqnC,WAAWrnC,OAC7D,EAAKC,OAASmD,KAAKD,IAAI,EAAKikC,WAAWnnC,OAAQ,EAAKonC,WAAWpnC,QAC/D,EAAKK,EAAI6kC,EAAM9S,IAAIrB,YAAcmU,EAAMnD,WAAa,EAAKhiC,OAAS,EAAImlC,EAAM9S,IAAIjkB,SAAS,GAAKikB,EAAI/xB,EAClG,EAAKD,EAAI8kC,EAAM9S,IAAIjkB,SAAS,GAAKikB,EAAIhyB,EACrC,EAAKsmC,WAAatU,EAAIsU,WACE,SAApB,EAAKA,aAAuB,EAAKC,YAActb,OAAO+G,EAAIoV,OAAO/kC,UAAU,OAAO+E,SAAW,G,EASzG,OAvByC,QAiBrC,YAAA0/B,KAAA,SAAKxmC,GACD,YAAMwmC,KAAI,UAACxmC,GACX,IAAM6wB,EAAMz0B,KAAK0pC,QAAU1pC,KAAK2pC,QAAU3pC,KAAKsqC,WAAatqC,KAAKqqC,WACjEzmC,EAAQwlC,UAAU3U,EAAKz0B,KAAKuD,EAAGvD,KAAKsD,IAG5C,EAvBA,CAAyCqnC,I,0dCCzC,eAOI,WAAYvC,EAAsB9S,GAAlC,MACI,cAAO,K,OANX,EAAAsV,UAAY,KACZ,EAAAC,SAAW,KACX,EAAAC,WAAa,KACb,EAAAC,QAAU,GAIN,EAAKH,UAAY/8B,GAAgB+0B,SAAStN,EAAIsV,WAC9C,EAAKC,SAAWh9B,GAAgB+0B,SAAStN,EAAIuV,UAC7C,EAAKC,WAAaj9B,GAAgB+0B,SAAStN,EAAIwV,YAC/C,EAAKC,SAAWzV,EAAIyV,SAAW,IAAItlC,QAAQ,KAAM,KACjD,EAAKxC,MAAQoD,KAAKD,IAAI,EAAKwkC,UAAU3nC,MAAO,EAAK4nC,SAAS5nC,MAAO,EAAK6nC,WAAW7nC,OACjF,EAAKC,OAASmD,KAAKD,IAAI,EAAKwkC,UAAU1nC,OAAQ,EAAK2nC,SAAS3nC,OAAQ,EAAK4nC,WAAW5nC,QACpF,EAAKK,EAAI6kC,EAAM9S,IAAIrB,YAAcmU,EAAMnD,WAAa,EAAKhiC,OAAS,EAAImlC,EAAM9S,IAAIjkB,SAAS,GAAKikB,EAAI/xB,EAClG,EAAKD,EAAI8kC,EAAM9S,IAAIjkB,SAAS,GAAKikB,EAAIhyB,EACrC,EAAKsmC,WAAatU,EAAIsU,WACE,SAApB,EAAKA,aAAuB,EAAKC,YAActb,OAAO+G,EAAIoV,OAAO/kC,UAAU,OAAO+E,SAAW,G,EAWzG,OA7BwC,QAqBpC,YAAA0/B,KAAA,SAAKxmC,GACD,YAAMwmC,KAAI,UAACxmC,GACX,IAAI6wB,EAAMz0B,KAAK4qC,UACX5qC,KAAK0pC,QAAOjV,EAAMz0B,KAAK6qC,UACvB7qC,KAAK2pC,UAASlV,EAAMz0B,KAAK8qC,YAC7BlnC,EAAQwlC,UAAU3U,EAAKz0B,KAAKuD,EAAGvD,KAAKsD,IAG5C,EA7BA,CAAwCqnC,I,0dCQxC,eAaI,WAAYxE,EAAwB6E,GAApC,MACI,cAAO,K,OANX,EAAAC,MAA4B,GAC5B,EAAAC,QAAkB,EAClB,EAAAC,aAAuB,EACvB,EAAAC,eAAiB,KAIb,EAAKjF,OAASA,EACd,EAAK7Q,IAAM0V,EACX,EAAKT,OAASS,EAAQT,OAAS18B,GAAgB01B,cAAcyH,EAAQT,QAAU,KAC/E,EAAKE,OAASO,EAAQP,OAAS58B,GAAgB01B,cAAcyH,EAAQP,QAAU,KAC/E,EAAKY,UAAYL,EAAQK,UAAYx9B,GAAgB+0B,SAASoI,EAAQK,WAAa,KACnF,EAAKC,WAAa,EAAKf,OAAOzW,gBAAgBkX,EAAQO,UAEtDP,EAAQQ,WAAWzmC,SAAQ,SAACyS,GACpBA,EAAKgzB,MACL,EAAKS,MAAMngC,KAAK,IAAI2gC,GAAoB,EAAMj0B,IAE9C,EAAKyzB,MAAMngC,KAAK,IAAI4gC,GAAmB,EAAMl0B,OAIrD,EAAKyzB,MAAM3D,MAAK,SAAC9iC,EAAGD,GAAM,OAAAomC,GAAA,SAA0BnmC,EAAGD,MAEvD,EAAK+/B,SAAW,SAAC1gC,GACbA,EAAQwlC,UAAU,EAAKiC,UAAW,GAAI,EAAKH,SACvCF,EAAQW,cAAc/nC,EAAQwlC,UAAU,EAAKkC,YAAa,EAAKrG,WAAa,EAAKqG,WAAWroC,OAAS,EAAG,EAAKqyB,IAAIjkB,SAAS,IAC9H,EAAK45B,MAAMlmC,SAAQ,SAACyS,EAAMnQ,GAAU,OAAC,EAAK4jC,MAAM,EAAKA,MAAMvgC,OAAS,EAAIrD,GAAQ+iC,KAAKxmC,O,EA4FjG,OA/HmC,QAuC/B,YAAAgjB,MAAA,WACI,YAAMA,MAAK,WACX5mB,KAAKkrC,QAAU,EACflrC,KAAKmrC,aAAe,GAGxB,YAAAvoC,KAAA,WACI,YAAMA,KAAI,WACV,IAAMgpC,EAAO5rC,KACbA,KAAKorC,eAAiBr9B,aAAY,WACJ,IAAtB69B,EAAKT,cACTS,EAAKC,WAAWD,EAAKT,gBACtB,IAAOvpB,KAGd,YAAA/e,KAAA,WACI7C,KAAKorC,eAAiBtkC,EAAkB9G,KAAKorC,gBAC7C,YAAMvoC,KAAI,YAGd,YAAAgiC,mBAAA,SAAmBC,EAA0BzwB,GAA7C,WACI,GAAIywB,IAAc5O,GAAcqQ,KAAM,CAC5B,MAAWvmC,KAAKqlC,eAAehxB,EAAMyyB,QAASzyB,EAAM0yB,SAAnD,EAAE,KAAE,EAAE,KACT,GAAU,EAWd,GAVA/mC,KAAKirC,MAAMlmC,SAAQ,SAACyS,GAChB,GAAK,EAIGA,EAAKkyB,QAAOlyB,EAAKiyB,aAAc,GACnCjyB,EAAKkyB,OAAQ,EACblyB,EAAK2yB,kBANK,CACV,IAAM2B,EAAO,GAAMt0B,EAAKgyB,eAAiB,EAAK0B,QAAU,GACxD,EAAU1zB,EAAKsyB,WAAW,EAAIgC,OAOlC9rC,KAAKs1B,IAAIyW,UAAW,CACpB,IAAMC,EAAmB,IACrB,EAAKA,EACLhsC,KAAKisC,kBAAkBD,EAAmB,IACnC,EAAKhsC,KAAKmlC,YAAc6G,EAC/BhsC,KAAKisC,gBAAgB,GAAMjsC,KAAKmlC,YAAc6G,IAE9ChsC,KAAKisC,gBAAgB,SAGtBnH,IAAc5O,GAAcsQ,KAC/BnyB,EAAM4yB,SAAWhR,GAAaiW,MAC9BlsC,KAAKirC,MAAMlmC,SAAQ,SAACyS,GAAS,OAAAA,EAAK0yB,qBAE/BpF,IAAc5O,GAAcuQ,IAC/BpyB,EAAM4yB,SAAWhR,GAAaiW,MAC9BlsC,KAAKirC,MAAMlmC,SAAQ,SAACyS,GACZA,EAAKmyB,UACLnyB,EAAK2yB,cACiC,SAAlC3yB,EAAKoyB,WAAWxkC,cAChB,EAAK+gC,OAAOgG,aAAa30B,EAAKqyB,aACW,gBAAlCryB,EAAKoyB,WAAWxkC,cACvB,EAAK+gC,OAAOiG,YAAa50B,EAA6B60B,UAC/C70B,EAAKoyB,YACZzmC,QAAQgL,KAAK,oBAAsBqJ,EAAKoyB,WAAa,MAAQpyB,EAAKqyB,iBAOtF,OADI7pC,KAAKypC,eAAezpC,KAAKqkC,UACtB,GAGH,YAAA4H,gBAAR,SAAwBxE,GACpBznC,KAAKmrC,aAAe9kC,KAAKimC,KAAK7E,GAAUphC,KAAKkmC,IAAIlmC,KAAK+d,MAAMqjB,EAAS,IAAK,IAG9E,YAAAzC,iBAAA,SAAiB3wB,GACb,QAAKrU,KAAKs1B,IAAIyW,YACd/rC,KAAK6rC,WAAWx3B,EAAMozB,SACf,IAGH,YAAAoE,WAAR,SAAmBpE,GACf,IAAM+E,EAAgBxsC,KAAKkrC,QAC3BlrC,KAAKkrC,QAAU7kC,KAAKF,IAAIE,KAAKD,IAAIpG,KAAKkrC,QAAUzD,EAAQ,GAAIznC,KAAKqrC,UAAUnoC,OAASlD,KAAKmlC,aACrFqH,IAAkBxsC,KAAKkrC,SAASlrC,KAAKqkC,UAG7C,YAAAoF,YAAA,WACI,OAAOzpC,KAAKirC,MAAM3rB,MAAK,SAAC9H,GAAS,OAAAA,EAAKiyB,gBAG9C,EA/HA,CAAmCxD,I,0dCRnC,eASI,WAAYmC,EAAsBiE,EAAkBI,GAApD,MACI,cAAO,KAPX,EAAAC,UAAY,KACZ,EAAAC,YAAc,KACd,EAAAC,SAAW,KACX,EAAAC,UAAoB,EACpB,EAAAR,SAAmB,GAIf,EAAKjE,MAAQA,EACb,EAAKwB,WAAa,cAClB,EAAKyC,SAAWA,EAChB,EAAK9oC,EAAIkpC,EAASK,UAClB,EAAKxpC,EAAImpC,EAASM,UAClB,EAAKjJ,OAAS,GACd,EAAK0F,gBAAiB,EAChB,MAAqCiD,EAASO,QAA7CN,EAAS,KAAEC,EAAW,KAAEC,EAAQ,K,OACvC,EAAKF,UAAY7+B,GAAgB+0B,SAAS8J,GAC1C,EAAKC,YAAc9+B,GAAgB+0B,SAAS+J,GAC5C,EAAKC,SAAW/+B,GAAgB+0B,SAASgK,GACzC,EAAK3pC,MAAQoD,KAAKD,IAAI,EAAKsmC,UAAUzpC,MAAO,EAAK0pC,YAAY1pC,MAAO,EAAK2pC,SAAS3pC,OAClF,EAAKC,OAASmD,KAAKD,IAAI,EAAKsmC,UAAUxpC,OAAQ,EAAKypC,YAAYzpC,OAAQ,EAAK0pC,SAAS1pC,QACrF,EAAK2pC,SAAWJ,EAASQ,aACzB,EAAKJ,UAAW,E,EAUxB,OAnCyC,QA4BrC,YAAAzC,KAAA,SAAKxmC,GACD,YAAMwmC,KAAI,UAACxmC,GACX,IAAI6wB,EAAMz0B,KAAK4sC,SACX5sC,KAAK6sC,WAAUpY,EAAMz0B,KAAK0pC,MAAQ1pC,KAAK0sC,UAAY1sC,KAAK2sC,aAC5D/oC,EAAQwlC,UAAU3U,EAAKz0B,KAAKuD,EAAGvD,KAAKsD,EAAItD,KAAKooC,MAAM8C,UAG3D,EAnCA,CAAyCP,I,0dCFzC,eAII,WAAYvmC,EAAoB8oC,GAAhC,MACI,cAAO,K,OACP,EAAKpJ,OAAS,GACd,EAAKlgC,QAAUZ,EAAcoB,EAAQnB,MAAOmB,EAAQlB,QACpD,EAAKU,QAAQ8wB,aAAatwB,EAAS,EAAG,GACtC,EAAKb,EAAI2pC,EAAK3pC,EACd,EAAKD,EAAI4pC,EAAK5pC,EACd,EAAKL,MAAQiqC,EAAKC,EAClB,EAAKjqC,OAASgqC,EAAKE,E,EAgB3B,OA5BmC,QAe/B,YAAAtD,WAAA,SAAWC,EAAYC,GACnB,IACMN,EADSK,GAAM/pC,KAAKuD,GAAKwmC,EAAK/pC,KAAKuD,EAAIvD,KAAKiD,OAAS+mC,GAAMhqC,KAAKsD,GAAK0mC,EAAKhqC,KAAKsD,EAAItD,KAAKkD,QACtElD,KAAK4D,QAAQ6+B,aAAasH,EAAIC,EAAI,EAAG,GAAGtlC,KAAK,GAAK,EAG1E,OAFI1E,KAAK0pC,QAAUA,IAAO1pC,KAAKypC,aAAc,GAC7CzpC,KAAK0pC,MAAQA,EACN1pC,KAAK0pC,OAGhB,YAAAU,KAAA,SAAKxmC,GACD,YAAMwmC,KAAI,UAACxmC,GACXA,EAAQwlC,UAAUppC,KAAK4D,QAAQD,OAAQ3D,KAAKuD,EAAGvD,KAAKsD,EAAGtD,KAAKiD,MAAOjD,KAAKkD,SAGhF,EA5BA,CAAmCynC,I,0dCAnC,eAMI,WAAY7B,EAAkBoE,GAA9B,MACI,cAAO,K,OAJX,EAAAG,aAAe,KACf,EAAAC,cAAgB,KAIZ,EAAKxE,KAAOA,EACZ,EAAKvlC,EAAI2pC,EAAK3pC,EACd,EAAKD,EAAI4pC,EAAK5pC,EACd,EAAKL,MAAQiqC,EAAKC,EAClB,EAAKjqC,OAASgqC,EAAKE,E,EAkB3B,OA9BoC,QAehC,YAAAG,aAAA,SAAaxZ,GACT/zB,KAAKqtC,aAAiBtZ,EAAO/zB,KAAK8oC,KAAKhV,gBAAgBC,GAAQ,MAGnE,YAAAyZ,cAAA,SAAczZ,GACV/zB,KAAKstC,cAAkBvZ,EAAO/zB,KAAK8oC,KAAKhV,gBAAgBC,GAAQ,MAGpE,YAAAqW,KAAA,SAAKxmC,GACD,YAAMwmC,KAAI,UAACxmC,GACX,IAAM0hC,EAAKtlC,KAAKuD,EAAIvD,KAAKiD,MAAQ,EAAGsiC,EAAKvlC,KAAKsD,EAAItD,KAAKkD,OAAS,EAC5DlD,KAAKqtC,cAAczpC,EAAQwlC,UAAUppC,KAAKqtC,aAAc/H,EAAKtlC,KAAKqtC,aAAapqC,MAAQ,EAAGsiC,EAAKvlC,KAAKqtC,aAAanqC,QACjHlD,KAAKstC,eAAe1pC,EAAQwlC,UAAUppC,KAAKstC,cAAehI,EAAKtlC,KAAKstC,cAAcrqC,MAAQ,EAAGsiC,IAGzG,EA9BA,CAAoCoF,I,0dCQpC,eAEI,WAAYxE,EAAwB6E,EAAuByC,GAA3D,MACI,YAAMtH,EAAQ6E,IAAQ,KAChB0C,EAAuB7/B,GAAgB0X,YAAY,UACnDooB,EAAe,IAAIC,GACzB,EAAK3C,MAAMngC,KAAK,IAAI+iC,GAAcF,EAAaG,aAAcH,EAAaI,WAC1E,IAAMC,EAAkB,IAAIC,GAAepgC,GAAgB61B,iBAAkBiK,EAAa5F,Q,OAC1FiG,EAAgBT,aAAaE,EAAYE,EAAav6B,MAAQu6B,EAAaO,UAC3E,EAAKjD,MAAMngC,KAAKkjC,GAChB/oC,OAAOH,KAAK4oC,EAAUS,cAAcppC,SAAQ,SAACsnC,GACzC,IAAMj5B,EAAuBs6B,EAAUS,aAAa9B,GAC9C+B,EAAc,IAAIC,GAAoB,EAAMhC,EAAUj5B,GAC5Dg7B,EAAYnE,cAAgB,WAAM,OAAA+D,EAAgBR,cAAcY,EAAY1E,MAAQt2B,EAAMm4B,SAAW,KACrG,EAAKN,MAAMngC,KAAKsjC,MAEpB,EAAKnD,MAAM3D,MAAK,SAAC9iC,EAAGD,GAAM,OAAAomC,GAAA,SAA0BnmC,EAAGD,M,EAG/D,OAnBsC,QAmBtC,EAnBA,CAAsC+pC,IAqBtC,GAQI,WANA,KAAAvG,OAAS,CAACxkC,EAAG,EAAGD,EAAG,EAAG6pC,EAAG,EAAGC,EAAG,GAE/B,KAAAW,SAAW,CAACxqC,EAAG,EAAGD,EAAG,EAAG6pC,EAAG,EAAGC,EAAG,GACjC,KAAAh6B,MAAgB,GAChB,KAAA86B,SAAmB,GAGf,IAAM5Y,EAAMznB,GAAgBynB,IAAI,OAAQ,aAClCiZ,EAAS,EAAKjZ,EAAK,UACzBt1B,KAAK+nC,OAAS,CAACxkC,EAAGgrC,EAAO,GAAIjrC,EAAGirC,EAAO,GAAIpB,EAAGoB,EAAO,GAAInB,EAAGmB,EAAO,IACnE,IAAMC,EAAW,EAAKlZ,EAAK,SAC3Bt1B,KAAK8tC,aAAejgC,GAAgB40B,aAAa+L,EAAS,IAC1DxuC,KAAK+tC,SAAW,CAACxqC,EAAGirC,EAAS,GAAIlrC,EAAGkrC,EAAS,GAAIrB,EAAGqB,EAAS,GAAIpB,EAAGoB,EAAS,IAC7ExuC,KAAKoT,MAAQ,EAAKkiB,EAAK,SAAS/oB,KAAK,KAAK9G,QAAQ,KAAM,KACxDzF,KAAKkuC,SAAW,EAAK5Y,EAAK,YAAY/oB,KAAK,KAAK9G,QAAQ,KAAM,M,0dC1CtE,eAKI,mBACI,cAAO,K,OAJX,EAAAgpC,gBAA+C,KAC/C,EAAAC,MAAyB,GAIG7gC,GAAgB0X,YAAY,gBACpCmpB,MAAM3pC,SAAQ,SAACimC,GAC3B,IAAI5C,EAEAA,EADkB,WAAlB4C,EAAQ2D,MACA,IAAIC,GAAiB,EAAM5D,GAAS,GACnB,cAAlBA,EAAQ2D,MACP,IAAIC,GAAiB,EAAM5D,GAAS,GAEpC,IAAIsD,GAAc,EAAMtD,GAEpC,EAAK0D,MAAM5jC,KAAKs9B,GAChB,EAAKF,SAASE,M,EAmB1B,OArCoC,QAsBhC,YAAA+D,aAAA,SAAa9kC,QAAA,IAAAA,MAAA,GACTrH,KAAK6C,OACL7C,KAAK0uC,MAAMrnC,GAAOzE,OAClB5C,KAAKioC,YAAYrlC,QAGrB,YAAAisC,mBAAA,WACI7uC,KAAKmsC,aAAa,IAGtB,YAAAC,YAAA,SAAY0C,GACR9uC,KAAK6C,OACL7C,KAAKyuC,gBAAgBK,IAG7B,EArCA,CAAoCvF,ICNpC,cAYI,WAAYwF,QAAA,IAAAA,MAAA,IATZ,KAAAC,SAAmB,EACnB,KAAAC,SAAmB,KACnB,KAAA1oC,OAAiB,EACjB,KAAAmd,YAAsB,EACtB,KAAAwrB,WAAqB,EACrB,KAAAC,eAAyB,EACzB,KAAAC,YAAsB,EACtB,KAAAC,cAAwB,EAGpBpqC,OAAOwR,OAAOzW,KAAM+uC,GAqI5B,OAvCW,EAAAO,SAAP,SAAgBC,GACZ,OAAQA,GACJ,KAAK,EACD,OAAOC,EAAYC,oBACvB,KAAK,EACD,OAAOD,EAAYE,WACvB,KAAK,EACD,OAAOF,EAAYG,UACvB,KAAK,EACD,OAAOH,EAAYI,WACvB,KAAK,EACL,KAAK,EACD,OAAOJ,EAAYK,KACvB,KAAK,EACD,OAAOL,EAAYM,KACvB,KAAK,EACD,OAAON,EAAYO,SACvB,KAAK,EACD,OAAOP,EAAYQ,MACvB,KAAK,GACD,OAAOR,EAAYS,aACvB,KAAK,GACD,OAAOT,EAAYU,cACvB,KAAK,GACL,KAAK,GACD,OAAOV,EAAYW,UACvB,KAAK,IACD,OAAOX,EAAYY,QACvB,KAAK,IACD,OAAOZ,EAAYa,QACvB,KAAK,IACD,OAAOb,EAAYc,QACvB,KAAK,IACD,OAAOd,EAAYe,QACvB,QAEI,OADAptC,QAAQC,MAAM,gCAAkCmsC,GACzCC,EAAYE,aA/Hf,EAAAc,OAAS,IAAIhB,EAAY,CAAC5kC,KAAM,SAAUrE,OAAO,EAAMmd,YAAY,IACnE,EAAAgsB,WAAa,IAAIF,EAAY,CAAC5kC,KAAM,aAAcokC,SAAS,EAAMC,SAAU,MAC3E,EAAAU,UAAY,IAAIH,EAAY,CACxC5kC,KAAM,YACNokC,SAAS,EACTC,SAAU,IACVvrB,YAAY,EACZyrB,eAAe,EACfC,YAAY,EACZC,cAAc,IAEF,EAAAO,WAAa,IAAIJ,EAAY,CACzC5kC,KAAM,aACNokC,SAAS,EACTC,SAAU,IACVvrB,YAAY,EACZwrB,WAAW,EACXC,eAAe,EACfC,YAAY,EACZC,cAAc,IAEF,EAAAQ,KAAO,IAAIL,EAAY,CACnC5kC,KAAM,OACNokC,SAAS,EACTC,SAAU,IACVvrB,YAAY,EACZwrB,WAAW,EACXC,eAAe,EACfC,YAAY,EACZC,cAAc,IAEF,EAAAc,UAAY,IAAIX,EAAY,CAAC5kC,KAAM,YAAarE,OAAO,EAAM0oC,SAAU,OACvE,EAAAa,KAAO,IAAIN,EAAY,CAAC5kC,KAAM,OAAQrE,OAAO,EAAM0oC,SAAU,OAC7D,EAAAc,SAAW,IAAIP,EAAY,CACvC5kC,KAAM,WACNqkC,SAAU,KACVvrB,YAAY,EACZwrB,WAAW,EACXC,eAAe,EACfC,YAAY,EACZC,cAAc,IAEF,EAAAW,MAAQ,IAAIR,EAAY,CAAC5kC,KAAM,QAASrE,OAAO,EAAM0oC,SAAU,OAC/D,EAAAgB,aAAe,IAAIT,EAAY,CAC3C5kC,KAAM,sBACNqkC,SAAU,KACVvrB,YAAY,EACZwrB,WAAW,EACXC,eAAe,EACfC,YAAY,EACZC,cAAc,IAEF,EAAAa,cAAgB,IAAIV,EAAY,CAAC5kC,KAAM,gBAAiBqkC,SAAU,OAClE,EAAAwB,WAAa,IAAIjB,EAAY,CACzC5kC,KAAM,iBACNrE,OAAO,EACP0oC,SAAU,KACVvrB,YAAY,IAEA,EAAAgtB,gBAAkB,IAAIlB,EAAY,CAC9C5kC,KAAM,kBACNrE,OAAO,EACP0oC,SAAU,KACVvrB,YAAY,IAEA,EAAA+rB,oBAAsB,IAAID,EAAY,CAAC5kC,KAAM,aAAcrE,OAAO,EAAM0oC,SAAU,OAClF,EAAAsB,QAAU,IAAIf,EAAY,CACtC5kC,KAAM,WACNrE,OAAO,EACP0oC,SAAU,KACVvrB,YAAY,IAEA,EAAA4sB,QAAU,IAAId,EAAY,CACtC5kC,KAAM,WACNrE,OAAO,EACP0oC,SAAU,KACVvrB,YAAY,IAEA,EAAA2sB,QAAU,IAAIb,EAAY,CACtC5kC,KAAM,WACNrE,OAAO,EACP0oC,SAAU,KACVvrB,YAAY,IAEA,EAAA0sB,QAAU,IAAIZ,EAAY,CACtC5kC,KAAM,WACNrE,OAAO,EACP0oC,SAAU,KACVvrB,YAAY,IA0CpB,EAlJA,G,UCIA,4BAwHA,OAtHkB,EAAAitB,OAAd,SAAqBC,EACAC,EAAwBC,EAA4BC,EAAyBC,EAC7EC,EAAuBC,EAAwBC,EAA2BC,GAE3F,IAAIC,EAAW,GAKXR,EAAcvtC,GAAMwtC,EAAkBxtC,GACrCstC,IAAa1K,GAAUoL,kBAAqBV,IAAa1K,GAAUqL,MAAQX,IAAa1K,GAAUsL,iBAAmBC,QAAQV,EAAeztC,KAC7I+tC,EAAW,IAMXN,EAAeztC,GAAM0tC,EAAiB1tC,GACrCstC,IAAa1K,GAAUoL,kBAAqBV,IAAa1K,GAAUqL,MAAQX,IAAa1K,GAAUsL,iBAAmBC,QAAQX,EAAkBxtC,KAChJ+tC,EAAW,IAMXP,EAAkBxtC,GAAMutC,EAAcvtC,GACrCstC,IAAa1K,GAAUoL,kBAAqBV,IAAa1K,GAAUqL,MAAQX,IAAa1K,GAAUsL,iBAAmBC,QAAQT,EAAiB1tC,KAC/I+tC,EAAW,IAMXL,EAAiB1tC,GAAMytC,EAAeztC,GACrCstC,IAAa1K,GAAUoL,kBAAqBV,IAAa1K,GAAUqL,MAAQX,IAAa1K,GAAUsL,iBAAmBC,QAAQZ,EAAcvtC,KAC5I+tC,EAAW,GAGXT,IAAa1K,GAAUqL,MAAQX,IAAa1K,GAAUsL,gBAClDX,EAAcvtC,GAAKwtC,EAAkBxtC,IACrC+tC,EAAW,GAEXN,EAAeztC,GAAK0tC,EAAiB1tC,IACrC+tC,EAAW,IAqBnB,IAAMK,EAAK,CACP,IAAI,MAAQ,EAAG,GACf,IAAI,MAAQ,EAAG,GACf,IAAI,MAAQ,EAAG,GACf,IAAI,MAAQ,EAAG,IAGbC,EAAiB,GACjBC,EAAgB,GAEtB,SAASC,EAAkBrtC,EAAGD,EAAGuM,GAC7B6gC,EAAe7mC,KAAKtG,EAAGD,EAAGuM,GAC1B,IAAMgf,GAAS,IAAI,OAAUgiB,WAAWhhC,EAAGvM,GAC3CurB,EAAOiiB,OAAM,IAAI,OAAUD,WAAWttC,EAAGD,IACzCurB,EAAOP,YACPqiB,EAAc9mC,KAAKglB,EAAQA,EAAQA,GAGvC,IAAMkiB,EAAY,GACdjB,EAAeztC,IAAM0tC,EAAiB1tC,IACpCstC,IAAa1K,GAAUqL,MAAQX,IAAa1K,GAAUsL,eAAoBT,EAAeztC,GAAK0tC,EAAiB1tC,IAajH0uC,EAAUlnC,KAAK,EAAG,EAAG,GACrBknC,EAAUlnC,KAAK,EAAG,EAAG,GAGrB+lC,EAAcvtC,EAAI2tC,EAClBF,EAAeztC,EAAI4tC,EACnBJ,EAAkBxtC,EAAI6tC,EACtBH,EAAiB1tC,EAAI8tC,EAErBS,EAAkBhB,EAAeG,EAAkBF,GACnDe,EAAkBhB,EAAeC,EAAmBC,KAtBpDiB,EAAUlnC,KAAK,EAAG,EAAG,GACrBknC,EAAUlnC,KAAK,EAAG,EAAG,GAGrB+lC,EAAcvtC,EAAI2tC,EAClBF,EAAeztC,EAAI4tC,EACnBJ,EAAkBxtC,EAAI6tC,EACtBH,EAAiB1tC,EAAI8tC,EAErBS,EAAkBd,EAAgBC,EAAkBF,GACpDe,EAAkBd,EAAgBF,EAAeG,IAerD,IAAMiB,EAAkBD,EAAU3sC,KAAI,SAAA6E,GAAK,OAAAwnC,GAAIxnC,EAAImnC,GAAY,MAEzDa,EAAiB,IAAI,MAI3B,OAHAA,EAAehzC,aAAa,WAAY,IAAIizC,GAAA,GAAgB,IAAIloC,aAAa,IAAK,GAAGmoC,kBAAkBT,IACvGO,EAAehzC,aAAa,SAAU,IAAIizC,GAAA,GAAgB,IAAIloC,aAAa,IAAK,GAAGmoC,kBAAkBR,IACrGM,EAAehzC,aAAa,KAAM,IAAIizC,GAAA,GAAgB,IAAIloC,aAAa,IAAK,GAAGooC,kBAAkBJ,IAC1FC,GAEf,EAxHA,G,0dCAA,eAII,WAAYp9B,EAAqBuC,GAAjC,MACI,YAAMvC,IAAU,K,OAChB,EAAKuC,SAAWA,E,EAGxB,OATwC,QASxC,EATA,CAAwCpC,GA2BxC,IAhBA,YAAuC,IAEnC,SAAYoC,G,OACR,YAAMlE,EAASm/B,eAAgBj7B,IAAS,OAHT,GAAvC,CAAuCk7B,IAQvC,YAAyC,IAErC,SAAYl7B,G,OACR,YAAMlE,EAASq/B,iBAAkBn7B,IAAS,OAHT,GAAzC,CAAyCk7B,IAQzC,YAEI,WAAYl7B,G,OACR,YAAMlE,EAASs/B,uBAAwBp7B,IAAS,KAGxD,OANuC,QAMvC,EANA,CAAuCk7B,KAgBvC,IARA,YAAsC,IAElC,SAAYl7B,G,OACR,YAAMlE,EAASu/B,sBAAuBr7B,IAAS,OAHjB,GAAtC,CAAsCk7B,IAQtC,YAEI,WAAYl7B,G,OACR,YAAMlE,EAASw/B,mBAAoBt7B,IAAS,KAGpD,OANoC,QAMpC,EANA,CAAoCk7B,KAwBpC,IAhBA,YAAqC,IAEjC,SAAYl7B,G,OACR,YAAMlE,EAASy/B,qBAAsBv7B,IAAS,OAHjB,GAArC,CAAqCk7B,IAQrC,YAAqC,IAEjC,SAAYl7B,G,OACR,YAAMlE,EAAS0/B,qBAAsBx7B,IAAS,OAHjB,GAArC,CAAqCk7B,IAQrC,YAEI,WAAYl7B,G,OACR,YAAMlE,EAAS2/B,2BAA4Bz7B,IAAS,KAG5D,OAN2C,QAM3C,EANA,CAA2Ck7B,KdhD3C,cAmCI,WAAYx+B,EAAkBg/B,EAA0BxvC,EAAWD,EAAW0vC,GAA9E,WA7BA,KAAAC,cAAwB,EACxB,KAAAC,kBAA4B,EAC5B,KAAAF,aAAuB,KACvB,KAAAjoB,YAAsB,EACtB,KAAA+C,UAAoB,EACpB,KAAAqlB,YAAsB,EACtB,KAAAC,KAAqB,GACrB,KAAAC,gBAA0B,EAC1B,KAAAC,UAAoB,EACpB,KAAAC,cAAgB,KAEhB,KAAAC,UAAmB,KACnB,KAAAzyB,iBAAmB,KAEnB,KAAA6vB,SAAsB,KACtB,KAAAvoC,KAAa,KACb,KAAAorC,iBAA2B,EAE3B,KAAAC,oBAA8B,EAC9B,KAAAC,qBAA+B,EAC/B,KAAAC,uBAAiC,EACjC,KAAAC,wBAAkC,EAElC,KAAAC,gBAA6B,GAE7B,KAAA99B,SAA2B,KAC3B,KAAAoC,MAAuB,KACvB,KAAA27B,UAAoB,EAGhB/zC,KAAK+T,QAAUA,EACf/T,KAAK+yC,YAAcA,EACfA,IAAgBvD,GAAYS,cAAgB8C,IAAgBvD,GAAYO,WAAU/vC,KAAKszC,UAAY,GACvGtzC,KAAKuD,EAAIA,EACTvD,KAAKsD,EAAIA,EACTtD,KAAKgzC,aAAeA,EACpB50B,EAASxJ,sBAAsBzB,EAAS+B,YAAY,SAACb,GACjD,IAAM2/B,EAAU3/B,EAAMW,IAAItU,KAC1B,GAAIszC,IAAY39B,GAAQ49B,OAASD,IAAY39B,GAAQ69B,WAAaF,IAAY39B,GAAQ89B,KAAM,CACxF,IAAMC,EAAa//B,EAAMW,IACrBo/B,EAAW5+B,UAAY,GAAM,EAAK49B,KAAKtoC,KAAKspC,OAygBhE,OApgBI,YAAAC,WAAA,SAAW3zC,GACP,OAAOV,KAAKozC,KAAK9zB,MAAK,SAACtK,GAAQ,OAAAA,EAAItU,OAASA,MAMhD,YAAA4zC,kBAAA,WACSt0C,KAAK+qB,YAAY7M,GAAUsM,gBAAgBxqB,MAChDA,KAAK+qB,YAAa,EAClB/qB,KAAKyzC,iBAAkB,EACvB,IAAIc,GAAY,EAChB,GAAIv0C,KAAK+yC,YAAYxsC,MACjB,IAAK,IAAIhD,EAAIvD,KAAKuD,EAAI,EAAGA,GAAKvD,KAAKuD,EAAI,EAAGA,IACtC,IAAK,IAAID,EAAItD,KAAKsD,EAAI,EAAGA,GAAKtD,KAAKsD,EAAI,EAAGA,IACtC,GAAIC,IAAMvD,KAAKuD,GAAKD,IAAMtD,KAAKsD,EAAG,CAC9B,IAAMkxC,EAAOx0C,KAAK+T,QAAQ0gC,iBAAiBlxC,EAAGD,GAC1CkxC,IAASA,EAAKzpB,aACdwpB,EAAYC,EAAKF,qBAAuBE,EAAKzB,YAAYxsC,MACzDiuC,EAAKf,iBAAkB,GAM3C,OAAOc,GAGX,YAAAnvB,SAAA,WACIplB,KAAK00C,aACL10C,KAAKuzC,cAAgB5sC,EAAiB3G,KAAKuzC,eAC3CvzC,KAAK+yC,YAAcvD,GAAYY,QAC/BpwC,KAAK8zC,gBAAkB,CAAC9zC,KAAK20C,oBAAqB30C,KAAK20C,oBAAqB30C,KAAK20C,oBAAqB30C,KAAK20C,qBAC3G30C,KAAKizC,eAAiB,EACtBjzC,KAAKyzC,iBAAkB,EAELzzC,KAAKs0C,qBACRl2B,EAAShK,aAAa,IAAIwgC,GAEzC50C,KAAK60C,iBAAiB70C,KAAKizC,cAAgB,GAC3C,IAAK,IAAIniC,EAAI,EAAGA,EAAI9Q,KAAKkzC,kBAAmBpiC,IAAK,CAC7C,IAAMgkC,EAAU90C,KAAK+T,QAAQF,SAASkhC,eAAe,IAAI5pB,GAAWnrB,KAAK20C,qBACzEv2B,EAAShK,aAAa,IAAI4gC,GAAkBF,EAAQzhC,gBAGxD,IAAK,IAAI9P,EAAIvD,KAAKuD,EAAI,EAAGA,GAAKvD,KAAKuD,EAAI,EAAGA,IACtC,IAAK,IAAID,EAAItD,KAAKsD,EAAI,EAAGA,GAAKtD,KAAKsD,EAAI,EAAGA,IACtC,GAAIC,IAAMvD,KAAKuD,GAAKD,IAAMtD,KAAKsD,EAAG,CAC9B,IAAMkxC,EAAOx0C,KAAK+T,QAAQ0Y,WAAWlpB,EAAGD,GACxCkxC,EAAKf,iBAAkB,EAClBe,EAAKS,eAAeT,EAAKpvB,WAK1CplB,KAAK+T,QAAQmhC,sBACbl1C,KAAK+T,QAAQ8Z,WAAWsnB,mBAAkB,GAAM,IAG5C,YAAAN,iBAAR,SAAyBO,GACrB,IAAK,IAAItkC,EAAI,EAAGA,EAAIskC,GAAcp1C,KAAKizC,cAAgB,EAAGniC,IACtD9Q,KAAKizC,gBACLjzC,KAAK+T,QAAQF,SAASkhC,eAAe,IAAI7uB,GAAOlmB,KAAK20C,qBACrDv2B,EAAShK,aAAa,IAAIihC,IAIlC,YAAAV,kBAAA,WACI,OAAO,IAAI,MAAQ30C,KAAKuD,EAAIme,GAAWA,GAAW,EAAIhb,IAAkBD,EAAUib,GAAW,GACzF1hB,KAAKsD,EAAIoe,GAAWA,GAAW,EAAIhb,IAAkBD,EAAUib,GAAW,KAGlF,YAAAgzB,WAAA,WACI,IAAMtB,EAAOpzC,KAAKozC,KAClBpzC,KAAKozC,KAAO,GACZA,EAAKruC,SAAQ,SAACiQ,GAAQ,OAAAoJ,EAAA,aAAsB,IAAIk3B,EAAetgC,OAC/DhV,KAAKu1C,kBAGT,YAAAC,aAAA,WACIx1C,KAAK8zC,gBAAgB2B,QACjBz1C,KAAK+yC,cAAgBvD,GAAYY,QAASpwC,KAAK+yC,YAAcvD,GAAYa,QACpErwC,KAAK+yC,cAAgBvD,GAAYa,QAASrwC,KAAK+yC,YAAcvD,GAAYc,QACzEtwC,KAAK+yC,cAAgBvD,GAAYc,QAAStwC,KAAK+yC,YAAcvD,GAAYe,QACzEvwC,KAAK+yC,cAAgBvD,GAAYe,UAASvwC,KAAK+yC,YAAcvD,GAAYgB,QAClFxwC,KAAK60C,iBAAiB70C,KAAKizC,cAAgBjzC,KAAK8zC,gBAAgBppC,QAChE1K,KAAK01C,gBACLt3B,EAAShK,aAAa,IAAIuhC,GAAe31C,QAG7C,YAAAi1C,YAAA,WACI,GAAIj1C,KAAK+yC,YAAYxsC,MAAO,OAAO,EACnC,IAAMqvC,EAAW51C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,GACpDuyC,EAAc71C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,EAAI,GAC3DwyC,EAAU91C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAGvD,KAAKsD,EAAI,GACnDyyC,EAAe/1C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,EAAI,GAC5D0yC,EAAYh2C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,GACrD2yC,EAAkBj2C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,EAAI,GAC/D4yC,EAAal2C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAGvD,KAAKsD,EAAI,GACtD6yC,EAAiBn2C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,EAAI,GAEpE,SAAS8yC,EAAaC,EAAgBC,EAAgBC,GAClD,QAAQF,EAAMtrB,YAAeurB,EAAMvrB,YAAewrB,EAAMxrB,aAClDsrB,EAAMtD,YAAYxsC,OAAU+vC,EAAMvD,YAAYxsC,OAAUgwC,EAAMxD,YAAYxsC,QAGpF,OAAO6vC,EAAaR,EAAUC,EAAaC,IACpCM,EAAaN,EAASC,EAAcC,IACpCI,EAAaJ,EAAWC,EAAiBC,IACzCE,EAAaF,EAAYC,EAAgBP,IAGpD,YAAAY,WAAA,SAAWC,GACP,QADO,IAAAA,OAAA,GACFA,GAAUz2C,KAAKyzC,gBAApB,CACAzzC,KAAKyzC,iBAAkB,EAEvB,IAAM5C,EAAgB,IAAI,MAAQ7wC,KAAKuD,EAAG,EAAGvD,KAAKsD,GAC5CytC,EAAiB,IAAI,MAAQ/wC,KAAKuD,EAAI,EAAG,EAAGvD,KAAKsD,GACjD0tC,EAAmB,IAAI,MAAQhxC,KAAKuD,EAAG,EAAGvD,KAAKsD,EAAI,GACnDwtC,EAAoB,IAAI,MAAQ9wC,KAAKuD,EAAI,EAAG,EAAGvD,KAAKsD,EAAI,GAExDsyC,EAAW51C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,GACpDuyC,EAAc71C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,EAAI,GAC3DwyC,EAAU91C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAGvD,KAAKsD,EAAI,GACnDyyC,EAAe/1C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,EAAI,GAC5D0yC,EAAYh2C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,GACrD2yC,EAAkBj2C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,EAAI,GAC/D4yC,EAAal2C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAGvD,KAAKsD,EAAI,GACtD6yC,EAAiBn2C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,EAAI,GAO/DtD,KAAK+qB,WAKE/qB,KAAK+yC,YAAYxsC,QACrB6vC,EAAaR,EAAUC,EAAaC,KAAUjF,EAAcvtC,EAAI,GAChE8yC,EAAaN,EAASC,EAAcC,KAAYjF,EAAeztC,EAAI,GACnE8yC,EAAaJ,EAAWC,EAAiBC,KAAapF,EAAkBxtC,EAAI,GAC5E8yC,EAAaF,EAAYC,EAAgBP,KAAW5E,EAAiB1tC,EAAI,KAR7EutC,EAAcvtC,EAAI,EAClBytC,EAAeztC,EAAI,EACnBwtC,EAAkBxtC,EAAI,EACtB0tC,EAAiB1tC,EAAI,GASzB,IAAIstC,EAAWC,EAAcvtC,EAAIytC,EAAeztC,EAAIwtC,EAAkBxtC,EAAI0tC,EAAiB1tC,EACvFstC,IAAa1K,GAAUqL,MAAQV,EAAcvtC,IAAMwtC,EAAkBxtC,IAAGstC,EAAW1K,GAAUsL,eAE7FxxC,KAAK4wC,WAAaA,IAClB5wC,KAAK4wC,SAAWA,EAChB5wC,KAAK02C,eAAe7F,EAAeC,EAAmBC,EAAgBC,EAAkB6E,EAAaC,EAASF,EAAUG,EAAcC,EAAWC,EAAiBC,EAAYC,GAC1Kn2C,KAAK4wC,WAAa1K,GAAUqL,MAAMvxC,KAAK22C,uBAG/C32C,KAAK01C,gBACL11C,KAAKu1C,iBACLv1C,KAAK+T,QAAQ6iC,UAAUC,KAAK72C,KAAKuD,GAAGvD,KAAKsD,GAAGwzC,OAAS92C,KAAK+2C,qBA7B1D,SAASX,EAAaC,EAAgBC,EAAgBC,GAClD,QAAQF,EAAMtrB,YAAeurB,EAAMvrB,YAAewrB,EAAMxrB,aAClDsrB,EAAMtD,YAAYxsC,OAAU+vC,EAAMvD,YAAYxsC,OAAUgwC,EAAMxD,YAAYxsC,UA8BxF,YAAAowC,oBAAA,WACI,IAAMK,EAAY,GAClBh3C,KAAKozC,KAAKruC,SAAQ,SAACiQ,GACXA,EAAItU,OAAS2V,GAAQ69B,UACrB91B,EAAShK,aAAa,IAAIkhC,EAAetgC,IAEzCgiC,EAAUlsC,KAAKkK,MAGvBhV,KAAKozC,KAAO4D,EACZh3C,KAAKu1C,kBAGT,YAAAG,cAAA,WACI,IAAI5S,EAAc9iC,KAAK+T,QAAQkjC,WAAWC,gBACrCl3C,KAAK+qB,WAEC/qB,KAAK+yC,cAAgBvD,GAAYiB,WACxC3N,GAAe9iC,KAAKm3C,yBACZn3C,KAAK+yC,YAAY/D,QAMlBhvC,KAAK4wC,WAAa1K,GAAUsL,cACnC1O,GAAe,MAEX9iC,KAAK4wC,WAAa1K,GAAUkR,OAC5BtU,GAAe,IACR9iC,KAAK4wC,WAAa1K,GAAUoL,gBACnCxO,GAAe,IACR9iC,KAAKmzC,WACZrQ,GAAe,IAEfA,GAAe,IAEnBA,GAAe9iC,KAAK+yC,YAAY9D,UAjB5BjvC,KAAK+yC,cAAgBvD,GAAYC,qBAAuBzvC,KAAK+zC,SAC7DjR,GAAe,KAEfA,GAAe9iC,KAAK+yC,YAAY9D,SAASzpC,WAP7Cs9B,GAAe,KAuBnBA,GAAe,OAEf,IAAMG,EAAUp1B,GAAgBG,WAAW80B,GAC3CG,EAAQ50B,OAAOxG,IAAI,GAAK,IACxBo7B,EAAQxvB,SAAWzT,KAAKqzC,gBAExBrzC,KAAKq3C,kBAAkBtyC,SAAQ,SAAC6D,GAAQ,OAAAA,EAAIvD,IAAM49B,MAG9C,YAAAkU,uBAAR,WACIn3C,KAAKqzC,gBAAkB,EACvB,IAAM/hC,EAAOtR,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,GAAGg0C,SACnD/lC,EAAMvR,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAGvD,KAAKsD,EAAI,GAAGg0C,SAClD3O,EAAQ3oC,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,GAAGg0C,SACpD1O,EAAS5oC,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAGvD,KAAKsD,EAAI,GAAGg0C,SACrDC,GAAWjmC,EAAO,EAAI,IAAMC,EAAM,EAAI,IAAMo3B,EAAQ,EAAI,IAAMC,EAAS,EAAI,GACjF,OAAgB,IAAZ2O,GAA6B,IAAZA,GACbjmC,IAAMtR,KAAKqzC,iBAAmBhtC,KAAKmxC,GAAK,GACxCjmC,IAAKvR,KAAKqzC,gBAAkBhtC,KAAKmxC,IACjC7O,IAAO3oC,KAAKqzC,gBAAkBhtC,KAAKmxC,GAAK,GACrCx3C,KAAK+zC,SAAW,KAAO,MACX,IAAZwD,EACHjmC,IAASq3B,GACT3oC,KAAKqzC,gBAAkB/hC,EAAOjL,KAAKmxC,GAAK,EAAI,EACrCx3C,KAAK+zC,SAAW,KAAO,OAE1BziC,GAAQs3B,IAAQ5oC,KAAKqzC,iBAAmBhtC,KAAKmxC,GAAK,GAClDlmC,GAAQC,IAAKvR,KAAKqzC,gBAAkBhtC,KAAKmxC,IACzCjmC,GAAOo3B,IAAO3oC,KAAKqzC,gBAAkBhtC,KAAKmxC,GAAK,GAC5Cx3C,KAAK+zC,SAAW,KAAO,MAEf,IAAZwD,GACFhmC,IAAKvR,KAAKqzC,iBAAmBhtC,KAAKmxC,GAAK,GACvC7O,IAAO3oC,KAAKqzC,gBAAkBhtC,KAAKmxC,IACnC5O,IAAQ5oC,KAAKqzC,gBAAkBhtC,KAAKmxC,GAAK,GACvCx3C,KAAK+zC,SAAW,KAAO,MAEvB/zC,KAAK+zC,SAAW,KAAO,MAItC,YAAAsD,gBAAA,WACI,OAAKr3C,KAAKqI,MAASrI,KAAKqI,KAAKM,SACzB1B,MAAMyB,QAAQ1I,KAAKqI,KAAKM,UACjB3I,KAAKqI,KAAKM,SAEV,CAAC3I,KAAKqI,KAAKM,UAJwB,IAQlD,YAAA+tC,eAAA,SAAe7F,EAAwBC,EAA4BC,EAAyBC,EAA2B6E,EAAsBC,EAAkBF,EAAmBG,EAAuBC,EAAoBC,EAA0BC,EAAqBC,G,QAIxQ,SAASsB,I,IAAU,sDACf,IAAIC,EAAM,EAAGC,EAAM,EAKnB,OAJAC,EAAKvyC,KAAI,SAAAmD,GAAK,OAAAA,EAAEwqC,gBAAc9tC,OAAOusC,SAAS1sC,SAAQ,SAAAqoC,GAClDsK,GAAOtK,EACPuK,OAEGD,EAAMC,EATb33C,KAAKqI,MAAMrI,KAAK+T,QAAQ8Z,WAAW1mB,OAAOnH,KAAKqI,MAChC,QAAnB,EAAS,QAAT,EAAArI,KAAKqI,YAAI,eAAEI,gBAAQ,SAAEF,UAWrBvI,KAAK0zC,oBAAsB+D,EAAU5B,EAAaC,EAAS91C,KAAM41C,GAAYiC,GAC7E73C,KAAK2zC,qBAAuB8D,EAAU3B,EAASC,EAAcC,EAAWh2C,MAAQ63C,GAChF73C,KAAK6zC,wBAA0B4D,EAAUz3C,KAAMg2C,EAAWC,EAAiBC,GAAc2B,GACzF73C,KAAK4zC,uBAAyB6D,EAAU7B,EAAU51C,KAAMk2C,EAAYC,GAAkB0B,GACtF,IAAMpvC,EAAWqvC,GAAgBnH,OAAO3wC,KAAK4wC,SAAUC,EAAeC,EAAmBC,EAAgBC,EACrGH,EAAcvtC,EAAItD,KAAK0zC,oBACvB3C,EAAeztC,EAAItD,KAAK2zC,qBACxB7C,EAAkBxtC,EAAItD,KAAK6zC,wBAC3B7C,EAAiB1tC,EAAItD,KAAK4zC,wBAG9B5zC,KAAKqI,KAAO,IAAI,MAAKI,EAAU,IAAI,MAAkB,CAACsvC,UAAW,KACjE/3C,KAAKqI,KAAKob,SAAW,CAACC,WAAY1jB,MAElCA,KAAK+T,QAAQ8Z,WAAW7uB,IAAIgB,KAAKqI,MACjCrI,KAAK+T,QAAQ8Z,WAAWsnB,mBAAkB,GAAM,IAGpD,YAAA/qB,iBAAA,WACI,OAAOhhB,EAAcgjB,SAGzB,YAAAnC,OAAA,WACI,OAAIjqB,KAAK+yC,YAAYrvB,YAAe1jB,KAAK4wC,WAAa1K,GAAUoL,iBAAmBtxC,KAAK4wC,WAAa1K,GAAUsL,gBAAmBxxC,KAAK8tB,UACnI9tB,KAAK8tB,UAAW,EAChB9tB,KAAKq3C,kBAAkBtyC,SAAQ,SAAC6D,GAAQ,OAAAA,EAAIyD,MAAM2rC,OAAO,YAClD,IAAIC,GAAqBj4C,OAE7B,MAGX,YAAA6pB,SAAA,WACQ7pB,KAAK8tB,WACL9tB,KAAK8tB,UAAW,EAChB9tB,KAAKu1C,mBAIb,YAAAvlB,mBAAA,WACI,OAAO,MAGX,YAAAulB,eAAA,W,MAEUlpC,GAAqB,QAAb,EADKrM,KAAKozC,KAAK9L,MAAK,SAAClW,EAAG/sB,GAAM,OAAC+sB,EAAE8mB,cAAgB7zC,EAAE6zC,iBACxC,UAAE,eAAE7rC,QAAS,SACtCrM,KAAKq3C,kBAAkBtyC,SAAQ,SAAC6D,GAAQ,OAAAA,EAAIyD,MAAM2rC,OAAO3rC,OAG7D,YAAA8rC,UAAA,WACI,OAAOn4C,KAAK8zC,gBAAgBppC,OAAS,GAGzC,YAAA4sC,OAAA,WACI,OAAOt3C,KAAK+yC,cAAgBvD,GAAYiB,YAAczwC,KAAK+yC,cAAgBvD,GAAYC,qBAG3F,YAAA2I,WAAA,W,MACI,OAAOp4C,KAAK+yC,YAAYxsC,OAASvG,KAAK+qB,YAAc/qB,KAAK+yC,cAAgBvD,GAAYM,MAAQ9vC,KAAK+yC,cAAgBvD,GAAYQ,SAAuB,QAAb,EAAAhwC,KAAKgW,gBAAQ,eAAEtV,KAAKqR,oBAGhK,YAAAsmC,YAAA,WACI,OAAOr4C,KAAK+yC,YAAY7D,WAAalvC,KAAK+qB,aAAe/qB,KAAK4wC,WAAa1K,GAAUqL,MAAQvxC,KAAK4wC,WAAa1K,GAAUkR,SAG7H,YAAAkB,gBAAA,WACI,OAAOt4C,KAAK+yC,YAAY5D,eAAiBnvC,KAAK+qB,aAAe/qB,KAAK4wC,WAAa1K,GAAUqL,MAAQvxC,KAAK4wC,WAAa1K,GAAUkR,SAGjI,YAAAmB,eAAA,WACI,OAAOv4C,KAAK+yC,YAAY1D,cAAgBrvC,KAAK+qB,YAAc/qB,KAAK4wC,WAAa1K,GAAUqL,OAASvxC,KAAKmzC,YAGzG,YAAAtuB,aAAA,WACI,OAAO7kB,KAAK+yC,YAAY3D,YAAcpvC,KAAK+qB,aAAe/qB,KAAK4wC,WAAa1K,GAAUqL,MAAQvxC,KAAK4wC,WAAa1K,GAAUkR,SAG9H,YAAAoB,UAAA,WACI,OAAOx4C,KAAKq4C,eAAiBr4C,KAAK6kB,gBAGtC,YAAAE,gBAAA,WACI,IAAM0zB,EAAc,GAKpB,OAJIz4C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,GAAG80C,cAAcK,EAAY3tC,KAAK,IAAI,MAAQ9K,KAAKuD,EAAIme,GAAW,EAAG1hB,KAAKsD,EAAIoe,GAAWA,GAAW,IAC7I1hB,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAGvD,KAAKsD,EAAI,GAAG80C,cAAcK,EAAY3tC,KAAK,IAAI,MAAQ9K,KAAKuD,EAAIme,GAAWA,GAAW,EAAG1hB,KAAKsD,EAAIoe,GAAW,IAC7I1hB,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,GAAG80C,cAAcK,EAAY3tC,KAAK,IAAI,MAAQ9K,KAAKuD,EAAIme,GAAWA,GAAW,EAAG1hB,KAAKsD,EAAIoe,GAAWA,GAAW,IACxJ1hB,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAGvD,KAAKsD,EAAI,GAAG80C,cAAcK,EAAY3tC,KAAK,IAAI,MAAQ9K,KAAKuD,EAAIme,GAAWA,GAAW,EAAG1hB,KAAKsD,EAAIoe,GAAWA,GAAW,IACrJ+2B,GAGX,YAAAC,UAAA,WACI14C,KAAKmzC,YAAa,EAClBnzC,KAAK22C,sBACL32C,KAAKuzC,cAAgB5sC,EAAiB3G,KAAKuzC,eAC3CvzC,KAAK01C,iBAGT,YAAAiD,iBAAA,WACI,OAAO,IAAI,MAAQ34C,KAAKuD,EAAIme,GAAWA,GAAW,EAAG1hB,KAAKsD,EAAIoe,GAAWA,GAAW,IAGxF,YAAAwD,eAAA,WACI,IAAM7W,EAASrO,KAAK24C,mBACpB,OAAO,IAAI,MAAQtqC,EAAO9K,EAAGvD,KAAK+T,QAAQF,SAAS+kC,iBAAiBvqC,EAAO9K,EAAG8K,EAAO/K,GAAI+K,EAAO/K,IAGpG,YAAAu1C,eAAA,SAAeC,GAEX,IAAIC,EACAC,EAFAF,EAAc,IAGd94C,KAAK+yC,YAAYxsC,OACjBwyC,EAAY/4C,KAAK+T,QAAQklC,iBAAiBj5C,KAAKuD,EAAGvD,KAAKsD,GACvD01C,EAAY,CAACh5C,KAAKuD,EAAGvD,KAAKsD,KAE1By1C,EAAY,CAAC/4C,KAAKuD,EAAGvD,KAAKsD,GAC1B01C,EAAYh5C,KAAK+T,QAAQmlC,iBAAiBl5C,KAAKuD,EAAGvD,KAAKsD,IAEvDy1C,GAAaC,GACbh5C,KAAK+T,QAAQ0Y,WAAWssB,EAAU,GAAIA,EAAU,IAAII,eAAeH,EAAU,GAAIA,EAAU,MAInG,YAAAG,eAAA,SAAeC,EAAiBC,GAAhC,WACIr5C,KAAKuzC,cAAgB1xB,YAAW,WAC5B,EAAKy3B,aAAaF,EAASC,GAC3B,EAAKF,eAAeC,EAASC,KACP,KAAtB,GAAK5yC,EAAU,OAGvB,YAAA6yC,aAAA,SAAaF,EAAiBC,GAA9B,WACUE,EAAiBv5C,KAAK+T,QAAQ0Y,WAAW2sB,EAASC,GAASn0B,iBACjE9G,EAAShK,aAAa,IAAIolC,GAAeD,IAGzC,IAAMpoB,EAAUtjB,GAAgB0X,YAAY,qCACtCzE,EAAY,IAAIgS,GAAW,uBAAuB/jB,MAAMoiB,GAC9DnxB,KAAKwzC,UAAY,IAAI,MACrBxzC,KAAKwzC,UAAUniC,SAAS2R,KAAKu2B,GAC7B,IAAME,EAAKz5C,KAAKuD,EAAI61C,EAASM,EAAKL,EAAUr5C,KAAKsD,EACjDtD,KAAKwzC,UAAUmG,aAAa,IAAI,MAAQ,EAAG,EAAG,GAAItzC,KAAKuzC,MAAMF,EAAID,GAAMpzC,KAAKmxC,GAAK,GACjFx3C,KAAK+T,QAAQF,SAASC,aAAaI,MAAMlV,IAAIgB,KAAKwzC,WAClD,IAAM3yB,EAAO,GACbC,EAAU9Q,OAAOjL,SAAQ,SAACyM,GACtB,IAAM6Q,EAAY7Q,EAAKlB,MAAMgD,OAAM,GACnCuN,EAAK/V,KAAKuX,MAEdvB,EAAU9Q,OAAOjL,SAAQ,SAACyM,EAAMnK,GAC5B,IAAMkb,EAAW1B,EAAKxZ,GAChBmb,EAAYhR,EAAKnB,aACnBmS,QACA3B,EAAK2B,GAAWxjB,IAAIujB,GAEpB,EAAKixB,UAAUx0C,IAAIujB,MAG3BviB,KAAK6iB,QAAQhC,EAAMC,EAAW,GAE9B9gB,KAAK+T,QAAQ0Y,WAAW2sB,EAASC,GAASQ,cAG9C,YAAAh3B,QAAA,SAAQhC,EAAMC,EAAWgC,GACrB,GAAIjC,EAAKnW,SAAWoW,EAAU9Q,OAAOtF,OAAQ,KAAM,yDAmBnD,GAlBAoW,EAAU9Q,OAAOjL,SAAQ,SAACyM,EAAkBnK,GACxC,IAAM0b,EAAIlC,EAAKxZ,GAIf,GAHA0b,EAAE1R,SAAS2R,KAAKxR,EAAKtB,OAAO4S,IAC5BC,EAAEtP,SAASuP,KAAKxR,EAAKrB,OAAO2S,IAC5BC,EAAEE,MAAMD,KAAKxR,EAAKpB,SAAS0S,IACvBC,EAAEG,eAAe,YAAa,CAC9B,IAAM,EAAWH,EAAY,SACvB,EAAUvR,EAAKxE,QAAQ8V,GACzB,QAAwBlb,IAAZ,IACGX,MAAMyB,QAAQ,GAAY,EAAW,CAAC,IAC9C3D,SAAQ,SAAC6D,GACZA,EAAIoE,QAAU,EACdpE,EAAIqE,YAAc,EAASD,QAAU,SAKrDhN,KAAK+gB,iBAAmB,KAClB+B,EAAa,EAAIhC,EAAUhR,YAAcgR,EAAUnR,QAQrD3P,KAAK+T,QAAQF,SAASC,aAAaI,MAAM/M,OAAOnH,KAAKwzC,WACrDxzC,KAAKwzC,UAAY,SAT6C,CAC9D,IAAI,EAAY1wB,EAAa,EACzB,EAAYhC,EAAUhR,YACtB,EAAYgR,EAAUjR,YAE1B,IAAM,EAAO7P,KACbA,KAAK+gB,iBAAmBc,YAAW,WAAM,SAAKgB,QAAQhC,EAAMC,EAAW,KAAY,IAAOA,EAAU/Q,gBAAkB+Q,EAAUlR,aAOxI,YAAArH,QAAA,W,QACIvI,KAAKq3C,kBAAkBtyC,SAAQ,SAAA+0C,GAAK,OAAAA,EAAEvxC,aACnB,QAAnB,EAAS,QAAT,EAAAvI,KAAKqI,YAAI,eAAEI,gBAAQ,SAAEF,WAGzB,YAAAwxC,eAAA,SAAeC,EAAgBC,GAC3B,IAAMlQ,EAAKiQ,EAASt4B,GAAW1hB,KAAKuD,EAC9BymC,EAAKiQ,EAASv4B,GAAW1hB,KAAKsD,EAC9B42C,EAAMC,EAAQC,YAAYp6C,KAAK0zC,oBAAqB1zC,KAAK2zC,qBAAsB5J,GAC/EsQ,EAAMF,EAAQC,YAAYp6C,KAAK4zC,uBAAwB5zC,KAAK6zC,wBAAyB9J,GAC3F,OAAOoQ,EAAQC,YAAYF,EAAKG,EAAKrQ,GAAMtoB,IAGhC,EAAA04B,YAAf,SAA2BE,EAAYC,EAAYh3C,GAC/C,OAAO+2C,EAAK/2C,GAAKg3C,EAAKD,IAG1B,sBAAI,wBAAS,C,IAAb,WACI,MAAO,CAACt6C,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,GAAItD,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAGvD,KAAKsD,EAAI,GAC1FtD,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAI,EAAGvD,KAAKsD,GAAItD,KAAK+T,QAAQ0Y,WAAWzsB,KAAKuD,EAAGvD,KAAKsD,EAAI,K,gCAG9F,YAAAu2C,WAAA,SAAWW,QAAA,IAAAA,MAAA,GACPx6C,KAAK8zC,gBAAkB,CAAC9zC,KAAK20C,oBAAqB30C,KAAK20C,oBAAqB30C,KAAK20C,oBAAqB30C,KAAK20C,qBAC3G30C,KAAKizC,eAAiBuH,EACtBx6C,KAAK+yC,YAAcvD,GAAYY,QAC/BpwC,KAAK01C,iBAGT,YAAA+E,YAAA,SAAYzkC,GACRhW,KAAKgW,SAAWA,EAChBhW,KAAK+T,QAAQ6iC,UAAUC,KAAK72C,KAAKuD,GAAGvD,KAAKsD,GAAGwzC,OAAS92C,KAAK+2C,qBAC1D/2C,KAAK+T,QAAQ2mC,kBAGjB,YAAA3D,mBAAA,WACI,OAAO/2C,KAAKo4C,aAAep4C,KAAKm4C,YAAc,EAAI,EAAI,GAG1D,YAAAwC,YAAA,SAAYC,EAAgBC,GACpB76C,KAAK+zC,WAAa6G,IACtB56C,KAAK+zC,SAAW6G,EAChB56C,KAAK01C,gBACDmF,GAAW76C,KAAK86C,UAAU/1C,SAAQ,SAACN,GAAM,OAAAA,EAAE6yC,UAAY7yC,EAAEk2C,YAAYC,EAAOC,QAGpF,YAAA1iC,cAAA,sBACI,OAAQnY,KAAK+yC,cAAgBvD,GAAYgB,QAAUxwC,KAAKs3C,YAAct3C,KAAKgW,WAAahW,KAAKoY,OACzF,CAAC,EAAG,GAAGkH,MAAK,SAAC7a,GACT,SAAS,EAAKsP,QAAQ0Y,WAAW,EAAKlpB,EAAIkB,EAAG,EAAKnB,GAAG0S,UAC/C,EAAKjC,QAAQ0Y,WAAW,EAAKlpB,EAAG,EAAKD,EAAImB,GAAGuR,UAC5C,EAAKjC,QAAQ0Y,WAAW,EAAKlpB,EAAIkB,EAAG,EAAKnB,GAAG0S,UAC5C,EAAKjC,QAAQ0Y,WAAW,EAAKlpB,EAAG,EAAKD,EAAImB,GAAGuR,UAC5C,EAAKjC,QAAQ0Y,WAAW,EAAKlpB,EAAIkB,EAAG,EAAKnB,GAAG8U,OAC5C,EAAKrE,QAAQ0Y,WAAW,EAAKlpB,EAAG,EAAKD,EAAImB,GAAG2T,OAC5C,EAAKrE,QAAQ0Y,WAAW,EAAKlpB,EAAIkB,EAAG,EAAKnB,GAAG8U,OAC5C,EAAKrE,QAAQ0Y,WAAW,EAAKlpB,EAAG,EAAKD,EAAImB,GAAG2T,WAIlE,EAvjBA,GehBA,SAAS2iC,GAAOC,GAGZ,IAFA,IAAIC,EAAOD,EACL3xC,EAAO,GACN4xC,EAAK36C,QACR+I,EAAK6xC,QAAQD,GACbA,EAAOA,EAAK36C,OAEhB,OAAO+I,GfkkBX,SAAY68B,GAER,uBACA,mBACA,yCACA,sCALJ,CAAYA,QAAS,KezjBd,IC8FFiV,GAQAC,GDtGQC,GAAQ,CAajBC,OAAA,SAAOC,EAAc9sC,EAAiBoD,EAAek9B,QAAA,IAAAA,MAAA,MACjDwM,EAAMC,aAEN,IAAMC,GADN1M,EAAUA,GAAW,IACK0M,WAAaJ,GAAMK,WAAWC,UAClD7yB,EAAUimB,EAAQjmB,UAAW,EAE7B8yB,EAxBH,IAAIC,IAAW,SAAUb,GAC5B,OAAOA,EAAKc,KAwBRC,EAActtC,EAOlB,IALAA,EAAM2+B,EAAIqO,EAAUhtC,EAAOoD,GAC3B0pC,EAAMS,UAAUvtC,GAEhBmtC,EAAS9wC,KAAK2D,GAEPmtC,EAASxtC,OAAS,GAAG,CAGxB,IAAM6tC,EAAcL,EAASM,MAG7B,GAAID,IAAgBpqC,EAChB,OAAOkpC,GAAOkB,GAIlBA,EAAYE,QAAS,EAOrB,IAJA,IAAMrB,EAAYS,EAAMT,UAAUmB,GAE9B/xC,EAAI,EACFkyC,EAAKtB,EAAUpwC,OACdR,EAAIkyC,IAAMlyC,EAAG,CAChB,IAAMmyC,EAAWvB,EAAU5wC,GAE3B,IAAImyC,EAASF,SAAUE,EAASC,SAAhC,CAOA,IAAMC,EAASN,EAAY33C,EAAI+3C,EAASG,QAAQP,GAC1CQ,EAAcJ,EAASK,UAExBD,GAAeF,EAASF,EAAS/3C,KAGlC+3C,EAASK,SAAU,EACnBL,EAAS/7C,OAAS27C,EAClBI,EAASjP,EAAIiP,EAASjP,GAAKqO,EAAUY,EAAUxqC,GAC/CwqC,EAAS/3C,EAAIi4C,EACbF,EAASP,EAAIO,EAAS/3C,EAAI+3C,EAASjP,EACnCmO,EAAMS,UAAUK,GACZvzB,IAGIuzB,EAASjP,EAAI2O,EAAY3O,GAAMiP,EAASjP,IAAM2O,EAAY3O,GAAKiP,EAAS/3C,EAAIy3C,EAAYz3C,KACxFy3C,EAAcM,GAIjBI,EAKDb,EAASe,eAAeN,GAHxBT,EAAS9wC,KAAKuxC,MAS9B,OAAIvzB,EACOiyB,GAAOgB,GAIX,IAIXL,WAAY,CACRC,UAAS,SAACiB,EAAMC,GAGZ,OAFWx2C,KAAKy2C,IAAID,EAAKt5C,EAAIq5C,EAAKr5C,GACvB8C,KAAKy2C,IAAID,EAAKv5C,EAAIs5C,EAAKt5C,IAItCy5C,SAAQ,SAACH,EAAMC,GACX,IACMG,EAAK32C,KAAK42C,KAAK,GACfC,EAAK72C,KAAKy2C,IAAID,EAAKt5C,EAAIq5C,EAAKr5C,GAC5B45C,EAAK92C,KAAKy2C,IAAID,EAAKv5C,EAAIs5C,EAAKt5C,GAClC,OAJU,GAIG45C,EAAKC,IAASH,EAAK,GAAW32C,KAAKF,IAAI+2C,EAAIC,KAIhEC,UAAS,SAACpC,GACNA,EAAKc,EAAI,EACTd,EAAK12C,EAAI,EACT02C,EAAK5N,EAAI,EACT4N,EAAK0B,SAAU,EACf1B,EAAKmB,QAAS,EACdnB,EAAK16C,OAAS,OAItB,cAaI,WAAY+8C,EAAoBtO,QAAA,IAAAA,MAAA,MAXvB,KAAAuO,MAAoB,GAEpB,KAAAzG,KAAqB,GAC9B,KAAA0G,WAAyB,GASrBxO,EAAUA,GAAW,GACrB/uC,KAAK+8C,WAAahO,EAAQgO,SAC1B,IAAK,IAAIx5C,EAAI,EAAGA,EAAI85C,EAAO3yC,OAAQnH,IAAK,CACpCvD,KAAK62C,KAAKtzC,GAAK,GAIf,IAFA,IAAID,EAAI,EACF6wB,EAAMkpB,EAAO95C,GACZD,EAAI6wB,EAAIzpB,OAAQpH,IAAK,CACxB,IAAM03C,EAAO,IAAIwC,GAASj6C,EAAGD,EAAG6wB,EAAI7wB,IACpCtD,KAAK62C,KAAKtzC,GAAGD,GAAK03C,EAClBh7C,KAAKs9C,MAAMxyC,KAAKkwC,IAGxBh7C,KAAKy9C,OAqFb,OAlFI,YAAAA,KAAA,WACIz9C,KAAKu9C,WAAa,GAClB,IAAK,IAAIrzC,EAAI,EAAGA,EAAIlK,KAAKs9C,MAAM5yC,OAAQR,IACnCmxC,GAAM+B,UAAUp9C,KAAKs9C,MAAMpzC,KAInC,YAAAsxC,WAAA,WACI,IAAK,IAAItxC,EAAI,EAAGA,EAAIlK,KAAKu9C,WAAW7yC,OAAQR,IACxCmxC,GAAM+B,UAAUp9C,KAAKu9C,WAAWrzC,IAEpClK,KAAKu9C,WAAa,IAGtB,YAAAvB,UAAA,SAAUhB,GACNh7C,KAAKu9C,WAAWzyC,KAAKkwC,IAGzB,YAAAF,UAAA,SAAUE,GACN,IAAM0C,EAAkB,GAClBn6C,EAAIy3C,EAAKz3C,EACTD,EAAI03C,EAAK13C,EACTuzC,EAAO72C,KAAK62C,KA4ClB,OAzCIA,EAAKtzC,EAAI,IAAMszC,EAAKtzC,EAAI,GAAGD,IAC3Bo6C,EAAI5yC,KAAK+rC,EAAKtzC,EAAI,GAAGD,IAIrBuzC,EAAKtzC,EAAI,IAAMszC,EAAKtzC,EAAI,GAAGD,IAC3Bo6C,EAAI5yC,KAAK+rC,EAAKtzC,EAAI,GAAGD,IAIrBuzC,EAAKtzC,IAAMszC,EAAKtzC,GAAGD,EAAI,IACvBo6C,EAAI5yC,KAAK+rC,EAAKtzC,GAAGD,EAAI,IAIrBuzC,EAAKtzC,IAAMszC,EAAKtzC,GAAGD,EAAI,IACvBo6C,EAAI5yC,KAAK+rC,EAAKtzC,GAAGD,EAAI,IAGrBtD,KAAK+8C,WAEDlG,EAAKtzC,EAAI,IAAMszC,EAAKtzC,EAAI,GAAGD,EAAI,IAC/Bo6C,EAAI5yC,KAAK+rC,EAAKtzC,EAAI,GAAGD,EAAI,IAIzBuzC,EAAKtzC,EAAI,IAAMszC,EAAKtzC,EAAI,GAAGD,EAAI,IAC/Bo6C,EAAI5yC,KAAK+rC,EAAKtzC,EAAI,GAAGD,EAAI,IAIzBuzC,EAAKtzC,EAAI,IAAMszC,EAAKtzC,EAAI,GAAGD,EAAI,IAC/Bo6C,EAAI5yC,KAAK+rC,EAAKtzC,EAAI,GAAGD,EAAI,IAIzBuzC,EAAKtzC,EAAI,IAAMszC,EAAKtzC,EAAI,GAAGD,EAAI,IAC/Bo6C,EAAI5yC,KAAK+rC,EAAKtzC,EAAI,GAAGD,EAAI,KAI1Bo6C,GAGX,YAAAl4C,SAAA,WAGI,IAFA,IAAMm4C,EAAc,GACdL,EAAQt9C,KAAK62C,KACVtzC,EAAI,EAAGA,EAAI+5C,EAAM5yC,OAAQnH,IAAK,CAGnC,IAFA,IAAMq6C,EAAW,GACXzpB,EAAMmpB,EAAM/5C,GACTD,EAAI,EAAGA,EAAI6wB,EAAIzpB,OAAQpH,IAC5Bs6C,EAAS9yC,KAAKqpB,EAAI7wB,GAAGwzC,QAEzB6G,EAAY7yC,KAAK8yC,EAASrxC,KAAK,MAEnC,OAAOoxC,EAAYpxC,KAAK,OAEhC,EAhHA,GAkHA,cAYI,WAAYhJ,EAAGD,EAAGwzC,GACd92C,KAAKuD,EAAIA,EACTvD,KAAKsD,EAAIA,EACTtD,KAAK82C,OAASA,EAkBtB,OAfI,YAAAtxC,SAAA,WACI,MAAO,IAAMxF,KAAKuD,EAAI,IAAMvD,KAAKsD,EAAI,KAGzC,YAAAk5C,QAAA,SAAQqB,GAEJ,OAAIA,GAAgBA,EAAat6C,GAAKvD,KAAKuD,GAAKs6C,EAAav6C,GAAKtD,KAAKsD,EAC9C,QAAdtD,KAAK82C,OAET92C,KAAK82C,QAGhB,YAAAwF,OAAA,WACI,OAAuB,IAAhBt8C,KAAK82C,QAEpB,EAjCA,GAmCA,cAKI,WAAYgH,GAHZ,KAAA3sB,QAAU,GAINnxB,KAAKmxB,QAAU,GACfnxB,KAAK89C,cAAgBA,EAyH7B,OAtHI,YAAAhzC,KAAA,SAAK1D,GAEDpH,KAAKmxB,QAAQrmB,KAAK1D,GAGlBpH,KAAK+9C,SAAS/9C,KAAKmxB,QAAQzmB,OAAS,IAGxC,YAAAwxC,IAAA,WAEI,IAAM74C,EAASrD,KAAKmxB,QAAQ,GAEtBtf,EAAM7R,KAAKmxB,QAAQ+qB,MAOzB,OAJIl8C,KAAKmxB,QAAQzmB,OAAS,IACtB1K,KAAKmxB,QAAQ,GAAKtf,EAClB7R,KAAKg+C,SAAS,IAEX36C,GAGX,YAAA8D,OAAA,SAAO6zC,GACH,IAAM9wC,EAAIlK,KAAKmxB,QAAQ7pB,QAAQ0zC,GAIzBnpC,EAAM7R,KAAKmxB,QAAQ+qB,MAErBhyC,IAAMlK,KAAKmxB,QAAQzmB,OAAS,IAC5B1K,KAAKmxB,QAAQjnB,GAAK2H,EAEd7R,KAAK89C,cAAcjsC,GAAO7R,KAAK89C,cAAc9C,GAC7Ch7C,KAAK+9C,SAAS7zC,GAEdlK,KAAKg+C,SAAS9zC,KAK1B,YAAAkE,KAAA,WACI,OAAOpO,KAAKmxB,QAAQzmB,QAGxB,YAAAiyC,eAAA,SAAe3B,GACXh7C,KAAK+9C,SAAS/9C,KAAKmxB,QAAQ7pB,QAAQ0zC,KAGvC,YAAA+C,SAAA,SAASt5C,GAKL,IAHA,IAAM2C,EAAUpH,KAAKmxB,QAAQ1sB,GAGtBA,EAAI,GAAG,CAGV,IAAMw5C,GAAYx5C,EAAI,GAAM,GAAK,EAC3B,EAASzE,KAAKmxB,QAAQ8sB,GAE5B,KAAIj+C,KAAK89C,cAAc12C,GAAWpH,KAAK89C,cAAc,IAQjD,MAPA99C,KAAKmxB,QAAQ8sB,GAAW72C,EACxBpH,KAAKmxB,QAAQ1sB,GAAK,EAElBA,EAAIw5C,IAShB,YAAAD,SAAA,SAASv5C,GAML,IAJA,IAAMiG,EAAS1K,KAAKmxB,QAAQzmB,OACtBtD,EAAUpH,KAAKmxB,QAAQ1sB,GACvBy5C,EAAYl+C,KAAK89C,cAAc12C,KAExB,CAET,IAAM+2C,EAAW15C,EAAI,GAAM,EACrB25C,EAAUD,EAAU,EAEtBE,EAAO,KACPC,O,EAEJ,GAAIF,EAAU1zC,EAAQ,CAElB,IAAM6zC,EAASv+C,KAAKmxB,QAAQitB,IAC5BE,EAAct+C,KAAK89C,cAAcS,IAGfL,IACdG,EAAOD,GAKf,GAAID,EAAUzzC,EAAQ,CAClB,IAAM8zC,EAASx+C,KAAKmxB,QAAQgtB,GACRn+C,KAAK89C,cAAcU,IACX,OAATH,EAAgBH,EAAYI,KAC3CD,EAAOF,GAKf,GAAa,OAATE,EAOA,MANAr+C,KAAKmxB,QAAQ1sB,GAAKzE,KAAKmxB,QAAQktB,GAC/Br+C,KAAKmxB,QAAQktB,GAAQj3C,EACrB3C,EAAI45C,IAQpB,EAhIA,GElSA,cAMI,WAAY3T,EAAoB+T,GAJhC,KAAA/T,OAAqB,KACrB,KAAA+T,UAAuB,GACvB,KAAAC,SAAmB,EAGf1+C,KAAK0qC,OAASA,EACd1qC,KAAKy+C,UAAYx3C,MAAMyB,QAAQ+1C,GAAaA,EAAY,CAACA,GACzD,IAAK,IAAI3tC,EAAI,EAAGA,EAAI9Q,KAAKy+C,UAAU/zC,OAAS,EAAGoG,IAAK,CAChD,IAAMrC,EAAQzO,KAAKy+C,UAAU3tC,GACvBe,EAAM7R,KAAKy+C,UAAU3tC,EAAI,GAC/B9Q,KAAK0+C,UAAYjwC,EAAM0a,kBAAkBtX,IAoBrD,OAhBI,YAAA8sC,YAAA,SAAYtnC,GAKR,OAJArX,KAAKy+C,UAAU3zC,KAAKuM,GAChBrX,KAAKy+C,UAAU/zC,OAAS,IACxB1K,KAAK0+C,UAAY1+C,KAAKy+C,UAAUz+C,KAAKy+C,UAAU/zC,OAAS,GAAGye,kBAAkB9R,IAE1ErX,MAGX,sBAAI,6BAAc,C,IAAlB,WACI,OAAOA,KAAKy+C,UAAUz+C,KAAKy+C,UAAU/zC,OAAS,IAAM,M,gCAGxD,sBAAI,4BAAa,C,IAAjB,WACI,OAAO1K,KAAKy+C,UAAU,IAAM,M,gCAGpC,EAhCA,GCUA,cAYI,WAAY5qC,GAAZ,WATA,KAAAojC,WAAkB,GAClB,KAAAh0C,MAAgB,EAChB,KAAAC,OAAiB,EACjB,KAAA07C,SAAwB,GACxB,KAAA/wB,WAAoB,IAAI,MACxB,KAAAgxB,UAAmB,IAAI,MACvB,KAAAjI,UAAmB,KACnB,KAAAkI,YAAc,IAAIt3C,IAGdxH,KAAK6T,SAAWA,EAChB7T,KAAK6tB,WAAW5K,MAAMpb,IAAI6Z,GAAUA,GAAUA,IAC9C1hB,KAAK6+C,UAAUlrC,SAAU,EACzByK,EAASxJ,sBAAsBzB,EAASwC,cAAc,SAACtB,GAC/CA,EAAM3T,OAASyT,EAAWkY,UAC7BhY,EAAMqB,OAA0BkpC,SAAS75C,SAAQ,SAACg6C,GAC/C,IAAK,IAAIx7C,GAAK,EAAGA,GAAK,EAAGA,IACrB,IAAK,IAAID,GAAK,EAAGA,GAAK,EAAGA,IACrB,EAAKmpB,WAAWsyB,EAAMx7C,EAAIA,EAAGw7C,EAAMz7C,EAAIA,GAAGoyC,sBA4GlE,OArGI,YAAA1hC,oBAAA,SAAoBgrC,GAChB,OAAOh/C,KAAKi/C,sBAAsBD,EAAcz7C,EAAGy7C,EAAc71C,IAGrE,YAAA+1C,sBAAA,SAAsBF,GAClB,OAAOh/C,KAAKi/C,sBAAsBD,EAAcz7C,EAAGy7C,EAAc17C,IAGrE,YAAA27C,sBAAA,SAAsBjF,EAAgBC,GAClC,OAAOj6C,KAAKysB,WAAWutB,EAASt4B,GAAUu4B,EAASv4B,KAGvD,YAAA+K,WAAA,SAAWlpB,EAAGD,GAGV,OAFAC,EAAI8C,KAAKE,MAAMhD,GACfD,EAAI+C,KAAKE,MAAMjD,GACRtD,KAAKy0C,iBAAiBlxC,EAAGD,IAAM,IAAI62C,GAAQn6C,KAAMwvC,GAAYE,WAAYnsC,EAAGD,EAAG,IAG1F,YAAAmxC,iBAAA,SAAiBlxC,EAAGD,GAChB,OAAIC,GAAK,GAAKA,EAAIvD,KAAKiD,OAASK,GAAK,GAAKA,EAAItD,KAAKkD,OACxClD,KAAK4+C,SAASr7C,GAAGD,GAEjB,MAIf,YAAA4xC,oBAAA,SAAoBuB,QAAA,IAAAA,OAAA,GAChBz2C,KAAK4+C,SAAS75C,SAAQ,SAACV,GAAM,OAAAA,EAAEU,SAAQ,SAACyD,GAAM,OAAAA,EAAEguC,WAAWC,SAC3Dz2C,KAAK6tB,WAAWsnB,mBAAkB,GAAM,GACxCn1C,KAAK06C,kBAGT,YAAAA,eAAA,WACI16C,KAAK42C,UAAU6G,OACfz9C,KAAK8+C,YAAYK,QACjBh8C,QAAQyG,IAAI,yBAGhB,YAAAw1C,SAAA,SAAS3wC,EAAgBi8B,GACrB,IAAM74B,EAAM64B,EAAOpzB,eACb+nC,EAAer/C,KAAKi/C,sBAAsBxwC,EAAMlL,EAAGkL,EAAMnL,GACzDg8C,EAAat/C,KAAKi/C,sBAAsBptC,EAAItO,EAAGsO,EAAIvO,GACzD,GAAI+7C,EAAa97C,IAAM+7C,EAAW/7C,GAAK87C,EAAa/7C,IAAMg8C,EAAWh8C,EACjE,OAAO,IAAIi8C,GAAY7U,EAAQ74B,GAEnC,IAAM2tC,EAAkBH,EAAa97C,EAAI,IAAM87C,EAAa/7C,EAAI,OAASg8C,EAAW/7C,EAAI,IAAM+7C,EAAWh8C,EACnGm8C,EAAaz/C,KAAK8+C,YAAYn3C,IAAI63C,GACxC,OAAIC,EACOA,EAAWd,YAAY9sC,GAEvB7R,KAAK0/C,WAAWL,EAAcC,EAAY5U,EAAQ8U,IAIzD,YAAAE,WAAR,SAAmBL,EAAuBC,EAAqB5U,EAAoB8U,GAAnF,WACUG,EAAY3/C,KAAK42C,UAAUC,KAAKwI,EAAa97C,GAAG87C,EAAa/7C,GAC7Ds8C,EAAU5/C,KAAK42C,UAAUC,KAAKyI,EAAW/7C,GAAG+7C,EAAWh8C,GACvDu8C,EAAYxE,GAAMC,OAAOt7C,KAAK42C,UAAW+I,EAAWC,GAASv6C,KAAI,SAAA0d,GAAK,SAAK0J,WAAW1J,EAAExf,EAAGwf,EAAEzf,GAAGq1C,sBACtG,OAAIkH,EAAUn1C,OAAS,EAAU,MAEjCm1C,EAAU3D,MACV2D,EAAU/0C,KAAK4/B,EAAOpzB,gBACtBtX,KAAK8+C,YAAYj3C,IAAI23C,EAAiB,IAAID,GAAY7U,EAAQmV,EAAUxtC,MAAM,GAAI,KAC3E,IAAIktC,GAAY7U,EAAQmV,KAGnC,YAAA5G,iBAAA,SAAiB11C,EAAWD,GACxB,IAAMw8C,EAAc9/C,KAAKysB,WAAWlpB,EAAI,EAAGD,GAC3C,GAAIw8C,EAAYvH,iBAAkB,MAAO,CAACuH,EAAYv8C,EAAGu8C,EAAYx8C,GACrE,IAAMy8C,EAAa//C,KAAKysB,WAAWlpB,EAAGD,EAAI,GAC1C,GAAIy8C,EAAWxH,iBAAkB,MAAO,CAACwH,EAAWx8C,EAAGw8C,EAAWz8C,GAClE,IAAM08C,EAAehgD,KAAKysB,WAAWlpB,EAAI,EAAGD,GAC5C,GAAI08C,EAAazH,iBAAkB,MAAO,CAACyH,EAAaz8C,EAAGy8C,EAAa18C,GACxE,IAAM28C,EAAgBjgD,KAAKysB,WAAWlpB,EAAGD,EAAI,GAC7C,GAAI28C,EAAc1H,iBAAkB,MAAO,CAAC0H,EAAc18C,EAAG08C,EAAc38C,GAC3E,IAAM48C,EAAelgD,KAAKysB,WAAWlpB,EAAI,EAAGD,GAC5C,GAAI48C,EAAa1H,YAAa,MAAO,CAAC0H,EAAa38C,EAAG28C,EAAa58C,GACnE,IAAM68C,EAAcngD,KAAKysB,WAAWlpB,EAAGD,EAAI,GAC3C,GAAI68C,EAAY3H,YAAa,MAAO,CAAC2H,EAAY58C,EAAG48C,EAAY78C,GAChE,IAAM88C,EAAgBpgD,KAAKysB,WAAWlpB,EAAI,EAAGD,GAC7C,GAAI88C,EAAc5H,YAAa,MAAO,CAAC4H,EAAc78C,EAAG68C,EAAc98C,GACtE,IAAM+8C,EAAiBrgD,KAAKysB,WAAWlpB,EAAGD,EAAI,GAC9C,OAAI+8C,EAAe7H,YAAoB,CAAC6H,EAAe98C,EAAG88C,EAAe/8C,GAClE,MAGX,YAAA41C,iBAAA,SAAiB31C,EAAWD,GACxB,IAAMw8C,EAAc9/C,KAAKysB,WAAWlpB,EAAI,EAAGD,GAC3C,GAAIw8C,EAAY1H,aAAc,MAAO,CAAC0H,EAAYv8C,EAAGu8C,EAAYx8C,GACjE,IAAMy8C,EAAa//C,KAAKysB,WAAWlpB,EAAGD,EAAI,GAC1C,GAAIy8C,EAAW3H,aAAc,MAAO,CAAC2H,EAAWx8C,EAAGw8C,EAAWz8C,GAC9D,IAAM08C,EAAehgD,KAAKysB,WAAWlpB,EAAI,EAAGD,GAC5C,GAAI08C,EAAa5H,aAAc,MAAO,CAAC4H,EAAaz8C,EAAGy8C,EAAa18C,GACpE,IAAM28C,EAAgBjgD,KAAKysB,WAAWlpB,EAAGD,EAAI,GAC7C,OAAI28C,EAAc7H,aAAqB,CAAC6H,EAAc18C,EAAG08C,EAAc38C,GAChE,MAGX,YAAAiF,QAAA,WACIvI,KAAK4+C,SAAS75C,SAAQ,SAAA+L,GAAK,OAAAA,EAAE/L,SAAQ,SAAAyD,GAAK,OAAAA,EAAED,iBAEpD,EAjIA,GFJA,4BA0GA,OAxGW,EAAA+3C,YAAP,SAAmBC,EAA0B1sC,G,gBACnC2sC,EAAWD,EAAUE,UACvBD,IAAa9+B,IAAUve,QAAQC,MAAM,gDAAkDo9C,GAC3F,IAAMzsC,EAAU,IAAI2sC,GAAQ7sC,GAEtB8sC,EAAYJ,EAAUtJ,WAAW,GACvCljC,EAAQkjC,WAAappC,GAAgBynB,IAAI,WAAYqrB,GAGrD,IAAMC,EAAa/yC,GAAgBs1B,OAAOod,EAAUK,YACpD7sC,EAAQ9Q,MAAQ29C,EAAW39C,MAC3B8Q,EAAQ7Q,OAAS09C,EAAW19C,OAS5B,IARA,IAAM29C,EAAmD,QAAzC,EAAAhzC,GAAA,OAAuB0yC,EAAUM,gBAAQ,eAAEztC,MACrD0tC,EAAyD,QAA5C,EAAAjzC,GAAA,OAAuB0yC,EAAUO,mBAAW,eAAE1tC,MAC3D2tC,EAAuD,QAA3C,EAAAlzC,GAAA,OAAuB0yC,EAAUQ,kBAAU,eAAE3tC,MACzD4tC,EAAuD,QAA3C,EAAAnzC,GAAA,OAAuB0yC,EAAUS,kBAAU,eAAE5tC,MACzD6tC,EAAuD,QAA3C,EAAApzC,GAAA,OAAuB0yC,EAAUU,kBAAU,eAAE7tC,MACzD8tC,EAAqD,QAA1C,EAAArzC,GAAA,OAAuB0yC,EAAUW,iBAAS,eAAE9tC,MAGpD/O,EAAI,EAAGA,EAAIu8C,EAAWxtC,MAAM1I,OAAQrG,IACzC,IAAK,IAAIyM,EAAI,EAAGA,EAAK8vC,EAAgB,MAAEv8C,GAAGqG,OAAQoG,IAAK,CAClDiD,EAAgB,SAAEjD,GAAMiD,EAAgB,SAAEjD,IAAM,GACjD,IAAMqwC,EAAkBP,EAAgB,MAAEv8C,GAAGyM,GACzCiiC,EAAcvD,GAAYF,SAAS6R,GACjCC,EAAcL,EAAU18C,GAAGyM,GAC7BswC,IAAgBhG,GAAUiG,eACtBtO,IAAgBvD,GAAYgB,QAAUuC,IAAgBvD,GAAYK,KAClEkD,EAAcvD,GAAYgB,OACnBuC,IAAgBvD,GAAYQ,OAAS+C,IAAgBvD,GAAYM,MACxE3sC,QAAQgL,KAAK,mCAAqC4kC,EAAYnoC,MAE3Dw2C,IAAgBhG,GAAUkG,mBAAqBF,IAAgBhG,GAAUmG,iBAChFxO,EAAcvD,GAAYW,UACnBiR,IAAgBhG,GAAU7J,MAAQ6P,IAAgBhG,GAAUoG,eACnEr+C,QAAQgL,KAAK,4BAA8BizC,GAG/C,IAAMK,EAAeZ,GAAW9N,EAAYxsC,MAAQs6C,EAAQx8C,GAAGyM,GAAKqqC,GAAQuG,KACxED,IAAiBtG,GAAQwG,OACzB5O,EAAcvD,GAAYY,QACnBqR,IAAiBtG,GAAQ1K,WAChCsC,EAAcvD,GAAYiB,WACnBgR,IAAiBtG,GAAQuG,MAChCv+C,QAAQgL,KAAK,8BAAgCszC,GAGjD,IAAMjsC,EAAU,IAAI2kC,GAAQpmC,EAASg/B,EAAajiC,EAAGzM,EAAGy8C,EAAWz8C,GAAGyM,IACtE,GAAIkwC,EAAW,CACX,IAAMY,EAAgBZ,EAAU38C,GAAGyM,GAC/B8wC,EAAgB,GAAM,EACtBpsC,EAAQ09B,mBAAqB0O,EAAgB,GAAK,EAElDpsC,EAAQy9B,cAAgB2O,EAAgB,EAI/C7tC,EAAgB,SAAEjD,GAAGhG,KAAK0K,GAgCnC,GA3BAzB,EAAQ6qC,SAAS75C,SAAQ,SAAA+L,GAAK,OAAAA,EAAE/L,SAAQ,SAAAyD,GACpC,GAAIu4C,EAAUv4C,EAAElF,GAAGkF,EAAEjF,KAAO63C,GAAUiG,gBAAkBN,EAAUv4C,EAAElF,GAAGkF,EAAEjF,KAAO63C,GAAUkG,kBACtF,IAAK,IAAI/9C,EAAIiF,EAAEjF,EAAI,EAAGA,GAAKiF,EAAEjF,EAAI,EAAGA,IAChC,IAAK,IAAID,EAAIkF,EAAElF,EAAI,EAAGA,GAAKkF,EAAElF,EAAI,EAAGA,IAChCyQ,EAAQ0gC,iBAAiBlxC,EAAGD,GAAGynB,YAAa,QAO5DhX,EAAQ6qC,SAAS75C,SAAQ,SAAA+L,GAAK,OAAAA,EAAE/L,SAAQ,SAAAyD,GACpC,IAAMgN,EAAUzB,EAAQ0gC,iBAAiBjsC,EAAEjF,EAAGiF,EAAElF,GAC5Cy9C,EAAUv4C,EAAElF,GAAGkF,EAAEjF,KAAO63C,GAAUoG,eAAkBhsC,EAAQuV,aAC5DvV,EAAQu9B,YAAcvD,GAAYgB,cAI1Cz8B,EAAQ6iC,UAAY,IAAIiL,GAAM9tC,EAAQ6qC,SAASv5C,KAAI,SAAAyL,GAAK,OAAAA,EAAEzL,KAAI,SAAAmD,GAAK,OAAAA,EAAEuuC,4BAGrEhjC,EAAQ6qC,SAAS75C,SAAQ,SAAC+L,GAAM,OAAAA,EAAE/L,SAAQ,SAACyD,GAClCA,EAAEysC,eAAezsC,EAAE4c,iBAG5BrR,EAAQmhC,qBAAoB,GAExB+L,EACA,IAAK,IAAI19C,EAAI,EAAGA,EAAIwQ,EAAQ9Q,MAAOM,IAC/B,IAAK,IAAID,EAAI,EAAGA,EAAIyQ,EAAQ7Q,OAAQI,IAChCyQ,EAAQ0Y,WAAWlpB,EAAGD,GAAGu1C,eAAeoI,EAAU39C,GAAGC,IASjE,OAJI29C,GACA/9C,QAAQgL,KAAK,+CAGV4F,GAGf,EA1GA,IA4GA,SAAKonC,GAED,mBACA,uBACA,+BAJJ,CAAKA,QAAO,KAQZ,SAAKC,GAED,mBACA,uCACA,qCACA,6CACA,2CANJ,CAAKA,QAAS,KG3Hd,ICFY0G,GDEZ,GAKI,SAAYrI,EAAYC,EAAYqI,GAHpC,KAAAC,IAAe,KACf,KAAAC,eAAyB,EAGrBjiD,KAAKgiD,IAAM,IAAI,MAAQvI,EAAIC,EAAIqI,KCRvC,SAAYD,GAER,qBACA,uCACA,+CAJJ,CAAYA,QAAS,K,8dCWrB,eAII,WAAYlhC,GAAZ,MACI,YAAMA,IAAW,K,OAHrB,EAAAshC,YAA2B,K,EA4E/B,OA9E4C,QAUxC,YAAA7uC,YAAA,WACI,OAAO,IAAI,MAAQrT,KAAKwO,MAAM6C,SAAS9N,EAAGvD,KAAKwO,MAAM6C,SAAS/N,EAAGtD,KAAKwO,MAAM6C,SAASlI,IAGzF,YAAAoK,cAAA,WACI,OAAO,IAAI,MAAQvT,KAAKwO,MAAM6C,SAAS9N,EAAGvD,KAAKwO,MAAM6C,SAASlI,IAGlE,YAAAg5C,SAAA,W,MACI,OAAOniD,KAAKiR,MAAMmnB,WAAWp4B,KAAKoT,SAAwB,QAAd,EAAApT,KAAK8gB,iBAAS,eAAElR,YAAa,IAAM5P,KAAKoiD,WAAapiD,KAAKiR,MAAMqnB,SAAW,IAG3H,YAAA+pB,oBAAA,SAAoB3X,GAApB,WACI,IAAK1qC,KAAKkiD,cAAgBxX,EAAOprB,MAAK,SAACC,GAAM,OAAAA,EAAEjI,eAAegrC,OAAO,EAAKJ,YAAYxX,OAAOpzB,mBAAkB,CAC3G,IAAMirC,EAAQ7X,EAAOrlC,KAAI,SAACka,GAAM,SAAKijC,iBAAiBjjC,MACjD+nB,MAAK,SAAClW,EAAG/sB,GAAM,OAAA+sB,EAAEstB,SAAWr6C,EAAEq6C,YAEnC,GADA1+C,KAAKkiD,YAAcK,EAAM73C,OAAS,EAAI63C,EAAM,GAAK,MAC5CviD,KAAKkiD,YAAa,OAAOJ,GAAUW,mBAE5C,IAAMC,EAAe1iD,KAAKkiD,YAAYS,cACtC3iD,KAAKwO,MAAM2W,OAAO,IAAI,MAAQu9B,EAAan/C,EAAGvD,KAAKwO,MAAM6C,SAAS/N,EAAGo/C,EAAap/C,IAClF,IAAMs/C,EAAO5iD,KAAK6iD,gBAClB,OAAID,EAAKX,eAAiBjiD,KAAKkiD,YAAYxX,OAAOnzB,SAASvX,KAAKuT,iBACrDuuC,GAAUgB,gBAEjB9iD,KAAKwO,MAAM6C,SAASrS,IAAI4jD,EAAKZ,KAC7BhiD,KAAK8d,eAAe9d,KAAK+iD,oBAClBjB,GAAUkB,QAMzB,YAAAR,iBAAA,SAAiB9X,GACb,OAAO,IAAI6U,GAAY7U,EAAQA,EAAOpzB,iBAG1C,YAAAurC,cAAA,WACI,IAAMD,EAAO5iD,KAAKijD,cAAcjjD,KAAKkiD,YAAYS,eAC3CO,EAAcljD,KAAKmiD,WACnBgB,EAAeP,EAAKZ,IAAItD,WAC9B,GAAIyE,EAAeD,EAAcA,GAAeC,EAAeC,GAAmBA,GAC9ER,EAAKZ,IAAIqB,UAAUH,OAChB,IAAIljD,KAAKkiD,YAAYzD,UAAU/zC,OAAS,EAE3C,OADA1K,KAAKkiD,YAAYzD,UAAUhJ,QACpBz1C,KAAK6iD,gBAEZD,EAAKX,eAAgB,EAEzB,OAAOW,GAGX,YAAAK,cAAA,SAAcvY,GACV,OAAO,IAAI4Y,GAAW5Y,EAAOnnC,EAAIvD,KAAKwO,MAAM6C,SAAS9N,EAAGvD,KAAKujD,cAAc7Y,EAAOnnC,EAAGmnC,EAAOpnC,GAAKtD,KAAKujD,cAAcvjD,KAAKwO,MAAM6C,SAAS9N,EAAGvD,KAAKwO,MAAM6C,SAASlI,GAAIuhC,EAAOpnC,EAAItD,KAAKwO,MAAM6C,SAASlI,IAGtM,YAAAo6C,cAAA,SAAchgD,EAAW4F,GACrB,OAAOnJ,KAAK6T,SAASkmC,eAAex2C,EAAG4F,IAG3C,YAAAq6C,WAAA,WACI,OAAOxjD,KAAK6T,SAASC,aAAaC,QAAQC,oBAAoBhU,KAAKwO,MAAM6C,UAAU8mC,aAGvF,YAAAiK,SAAA,WACI,OAAOpiD,KAAK6T,SAASC,aAAaC,QAAQC,oBAAoBhU,KAAKwO,MAAM6C,UAAUimC,UAG3F,EA9EA,CAA4C91B,I,0dCE5C,eAUI,WAAsB6F,EAA8B+b,GAApD,MACI,YAAMv1B,GAAgB+W,uBAAuBwe,KAAY,K,OAP7D,EAAAqgB,aAAe,KACf,EAAAzuC,IAAW,KACX,EAAA0uC,YAAmB,KACnB,EAAA9rC,QAAqB,KACrB,EAAA+rC,cAA8B,GAI1B,EAAKt8B,cAAgBA,EACrB,EAAK7Y,MAAMiV,SAAW,CAAC,WAAc,GACrC,EAAKggC,aAAe11C,YAAY,EAAK61C,KAAKzhC,KAAK,GAAO,IAAOP,I,EA6DrE,OA3E8C,QAiB1C,YAAAiiC,kBAAA,WACI7jD,KAAKyjD,aAAe38C,EAAkB9G,KAAKyjD,eAK/C,YAAAK,SAAA,W,QACS9jD,KAAK4X,UACK,QAAf,EAAA5X,KAAK6d,kBAAU,SAAE1W,OAAOnH,KAAK4X,QAAQpJ,OACrCxO,KAAK4X,QAAQpJ,MAAM6C,SAAS2R,KAAKhjB,KAAKwO,MAAM6C,UAC7B,QAAf,EAAArR,KAAK6d,kBAAU,SAAEkmC,iBAAiB/jD,KAAK4X,QAAQpJ,MAAM6C,UACrDrR,KAAK4X,QAAQpJ,MAAM6C,SAAS/N,EAAItD,KAAK6T,SAASkmC,eAAe/5C,KAAK4X,QAAQpJ,MAAM6C,SAAS9N,EAAGvD,KAAK4X,QAAQpJ,MAAM6C,SAASlI,GACxHnJ,KAAK4X,QAAU,OAGnB,YAAAosC,WAAA,SAAWxsC,GACPxX,KAAK4X,QAAUJ,EACXxX,KAAK6d,YAAY7d,KAAK6d,WAAW7e,IAAIgB,KAAK4X,QAAQpJ,OACtDxO,KAAK4X,QAAQpJ,MAAM6C,SAASxJ,IAAI,EAAG,EAAG,IAG1C,YAAAo8C,OAAA,SAAOjvC,EAAU0uC,QAAA,IAAAA,MAAA,MACT1jD,KAAKgV,MAAQA,GAAKhV,KAAK6W,UAC3B7W,KAAKgV,IAAMA,EACPhV,KAAKgV,KAAKhV,KAAKgV,IAAIyB,OAAOzW,MAC9BA,KAAK0jD,YAAcA,EACf1jD,KAAK0jD,aAAa1jD,KAAK0jD,YAAYjtC,OAAOzW,MAC9CA,KAAK2jD,cAAgB3jD,KAAKgV,IAAI0C,iBAGlC,YAAAb,QAAA,WACI7W,KAAK8jD,WACA9jD,KAAKgV,MACVhV,KAAKgV,IAAI0B,SAAS1W,MACdA,KAAK0jD,aAAa1jD,KAAK0jD,YAAYhtC,SAAS1W,MAChDA,KAAKgV,IAAM,KACXhV,KAAK0jD,YAAc,KACnB1jD,KAAK2jD,cAAgB,GACrB3jD,KAAK8d,mBAOT,YAAAsM,iBAAA,WACI,OAAOpqB,KAAKqnB,eAGhB,YAAAwC,SAAA,WACI7pB,KAAKghB,eAAerN,SAAU,EAC9B3T,KAAK8tB,UAAW,GAOxB,EA3EA,CAA8Co2B,ICb9C,cAaI,WAAYt5C,GACR5K,KAAK4K,KAAOA,EAGpB,OAfW,EAAAqpC,MAAQ,IAAIkQ,EAAW,SACvB,EAAAC,OAAS,IAAID,EAAW,UACxB,EAAAE,OAAS,IAAIF,EAAW,UACxB,EAAAG,QAAU,IAAIH,EAAW,WACzB,EAAAI,WAAa,IAAIJ,EAAW,cAC5B,EAAAK,MAAQ,IAAIL,EAAW,SACvB,EAAAM,UAAY,IAAIN,EAAW,aAC3B,EAAAO,WAAa,IAAIP,EAAW,cAQvC,EAjBA,G,0dC4BO,GAAW,eAElB,eAMI,mBACI,YAAM/6C,EAAcod,MAAO,gCAA8B,K,OAL7D,EAAAm+B,MAAsB,GACtB,EAAAC,OAAwB,GACxB,EAAAC,SAAmB,EAIf,EAAKF,MAAQ,CAACR,GAAWlQ,OACzB,EAAK2Q,OAAS,GACd,EAAK1jC,iBAAmB,EAAKjQ,MAAMmmB,WAAa,E,EA2OxD,OArP4B,QAaxB,sBAAI,oBAAK,C,IAAT,WACI,OAAOvpB,GAAgBoD,MAAMsnB,O,gCAGjC,YAAAiqB,iBAAA,SAAiB9X,GACb,OAAO1qC,KAAK6T,SAASC,aAAaC,QAAQqrC,SAASp/C,KAAKuT,gBAAiBm3B,IAG7E,YAAAh3B,WAAA,WACI,YAAMA,WAAU,WAChBwK,GAAUsJ,oBAAoBrgB,OAAOnH,MACrCke,GAAUqJ,QAAQzc,KAAK9K,MACvBoe,EAAShK,aAAa,IAAI0wC,EAAiB3wC,EAAW4wC,OAAQ/kD,OAC9Doe,EAAShK,aAAa,IAAI4wC,GAAsBhlD,KAAKqT,iBAGzD,YAAA4W,OAAA,WAEI,OADAjqB,KAAKghB,eAAerN,SAAW3T,KAAK6kD,QAChC7kD,KAAK8tB,UAAY9tB,KAAK6kD,QAAgB,MAC1C7kD,KAAK8tB,UAAW,EAChB9tB,KAAK8d,iBACE,IAAImnC,GAAejlD,QAG9B,YAAAgwB,mBAAA,WACI,OAAOhwB,KAAKihB,YAAa,IAAI,OAAU+B,KAAKhjB,KAAKihB,WAAW5P,UAAU0S,aAAa/jB,KAAKwO,MAAM0gB,aAAe,MAGjH,YAAAg2B,UAAA,WACI,OAAO,GAGX,YAAAnC,iBAAA,WACI,OAAI/iD,KAAKwjD,aACIxjD,KAAK4X,QAAUe,GAAesB,YAActB,GAAeqB,YAE3Dha,KAAK4X,QAAUe,GAAeW,MAAQX,GAAeD,OAItE,YAAA2pC,oBAAA,SAAoB3X,GAApB,WACUrnC,EAAS,YAAMg/C,oBAAmB,UAAC3X,GAazC,OAZIrnC,IAAWy+C,GAAUkB,MACrB9kC,GAAUoO,iBAAiBtsB,MAAMsf,MAAK,SAAC6lC,GACnC,GAAI,EAAK32C,MAAM6C,SAAS8X,kBAAkBg8B,EAAO32C,MAAM6C,UAAY,EAAKgQ,SAAW8jC,EAAO9jC,SAGtF,OAFA,EAAK+jC,OACLD,EAAOE,WACA,KAGRhiD,IAAWy+C,GAAUW,qBAC5Bt/C,QAAQyG,IAAI,qDACZ5J,KAAK6W,WAEFxT,GAGX,YAAA+hD,KAAA,sBACQl/C,EAAmB,EAAG,KAAO,IAAIlG,KAAK6W,UAC1C7W,KAAK8jD,WACL9jD,KAAK6kD,SAAU,EACf7kD,KAAK8d,eAAenF,GAAe2B,MAAM,WACrC,EAAKuqC,SAAU,MAIvB,YAAAS,uBAAA,WACI,OAAOtlD,KAAKqiD,oBAAoBriD,KAAK2jD,iBAAmB7B,GAAUgB,gBAGtE,YAAAc,KAAA,e,IAAA,OACI,GAAK5jD,KAAKgV,MAAOhV,KAAK8tB,WAAY9tB,KAAK6kD,QACvC,GAAI7kD,KAAKgV,IAAItU,OAAS2V,GAAQ49B,MAAO,CACjC,IAAM,EAAUj0C,KAAKgV,IACrB,GAAIhV,KAAKslD,yBAA0B,CAC/B,IAAIC,EAAc,KACd,EAAQ/vC,QAAQu9B,cAAgBvD,GAAYG,UAC5C4V,EAAqD,IAAvCvlD,KAAKiR,MAAM0nB,cAAc34B,KAAKoT,OACrC,EAAQoC,QAAQu9B,cAAgBvD,GAAYI,WACnD2V,EAAsD,IAAxCvlD,KAAKiR,MAAMwnB,eAAez4B,KAAKoT,OACtC,EAAQoC,QAAQu9B,cAAgBvD,GAAYK,KACnD0V,EAAqD,IAAvCvlD,KAAKiR,MAAMunB,cAAcx4B,KAAKoT,OACrC,EAAQoC,QAAQu9B,cAAgBvD,GAAYO,UACnD,EAAQv6B,QAAQu9B,cAAgBvD,GAAYS,eAC5CsV,EAAqD,IAAvCvlD,KAAKiR,MAAM2nB,cAAc54B,KAAKoT,QAE5B,IAAhBmyC,GAAmBpiD,QAAQgL,KAAK,2DACpC,IAAMq3C,EAAa,EAAQhwC,QAAQ0P,iBACnCsgC,EAAWliD,EAAItD,KAAKwO,MAAM6C,SAAS/N,EACnCtD,KAAKwO,MAAM2W,OAAOqgC,GAClBxlD,KAAK8d,eAAenF,GAAeE,OAAO,WACtC,GAAI,EAAQrD,QAAQ89B,UAAY,EAAG,CAC/B,EAAQ99B,QAAQ89B,YAChB,IAAM0O,GAAM,IAAI,OAAUh/B,KAAK,EAAKzP,iBAAiBuQ,IAAI,EAAQtO,QAAQmjC,oBACpEjpB,eAAe,GAAMjpB,EAAU,GAAK,IACpCg/C,aAAa,IAAI,MAAQ,EAAG,GAAI,IAAU,GAAKh/C,EAAU,MACzDzH,IAAI,EAAKuU,iBACd,GAAI,EAAQiC,QAAQu9B,cAAgBvD,GAAYS,aAAc,CAC1D,IAAM6E,EAAU,EAAKjhC,SAASkhC,eAAe,IAAI5pB,GAAW62B,GAC5D5jC,EAAShK,aAAa,IAAI4gC,GAAkBF,EAAQzhC,qBAC7C,EAAQmC,QAAQu9B,cAAgBvD,GAAYO,WACnD,EAAKl8B,SAASkhC,eAAe,IAAI7uB,GAAO87B,GACxC5jC,EAAShK,aAAa,IAAIihC,IAE9B,EAAKv3B,sBAEL,EAAK4nC,gBAEVH,SAEJ,GAAIvlD,KAAKgV,IAAItU,OAAS2V,GAAQsvC,aAAc,CAC/C,IAAM,EAAU3lD,KAAKgV,IACjBhV,KAAKslD,0BACLtlD,KAAK8d,eAAenF,GAAeU,OAAO,WACtC,EAAKyE,iBACL,EAAK9I,IAAIiC,gBACT,EAAK0sC,cAAgB,EAAK3uC,IAAI0C,gBACzB,EAAQlC,QAAQ2iC,aAAa,EAAKthC,kBAG5C,GAAI7W,KAAKgV,IAAItU,OAAS2V,GAAQ69B,UAC7Bl0C,KAAKslD,0BACLtlD,KAAK8d,eAAenF,GAAeI,WAAW,WAC1C,EAAK2sC,gBACN,WAEJ,GAAI1lD,KAAKgV,IAAItU,OAAS2V,GAAQ89B,KAAM,CACvC,IAAM,EAAKn0C,KAAKgV,IACZhV,KAAK4X,UAAY,EAAGguC,UACpB5lD,KAAK8jD,WACD9jD,KAAKslD,0BACLtlD,KAAK8d,eAAenF,GAAeS,SAAS,WACxC,EAAK4qC,WAAW,EAAG4B,cAGpB5lD,KAAKqiD,oBAAoB,EAAG7sC,QAAQuP,kBAAkB1f,KAAI,SAAC0d,GAAM,WAAIpL,GAAWoL,QACvF/iB,KAAK8d,eAAenF,GAAegB,OAAO,WACtC,EAAK+rC,sBAGV,GAAI1lD,KAAKgV,IAAItU,OAAS2V,GAAQoB,QAAS,CAC1C,IACM,EADazX,KAAKgV,IACUwC,KAClC,GAAIxX,KAAK4X,UAAY,EACjB5X,KAAK8jD,WACD9jD,KAAKslD,0BACLtlD,KAAK8d,eAAenF,GAAeS,SAAS,WACxC,EAAK4qC,WAAW,UAGrB,CACH,IAAM6B,EAAa7lD,KAAKqiD,oBAAoB,EAAezjC,mBAE3D,GADA,EAAekB,cAA6D,QAA9C,EAAgB,QAAhB,EAAA9f,KAAKkiD,mBAAW,eAAExX,cAA4B,eAAEntB,MAC1EsoC,EAAY,CACZ,IAAM,EAAoB7lD,KAAKkiD,YAAYxX,OAC3C,GAAI,EAAkBltB,gBAAiB,CACnC,IAAMsoC,EAAa,EAAkBtnC,gBACrCxe,KAAK8d,eAAegoC,GAAY,WAC5B,EAAKJ,cACL,EAAkB/nC,WAAW,WAGjC3d,KAAK8d,wBAId,GAAI9d,KAAKgV,IAAItU,OAAS2V,GAAQkwB,KAC7BvmC,KAAKslD,0BACLtlD,KAAK8d,eAAe9d,KAAK0d,sBAAsB,WAC3C,EAAKgoC,sBAGV,GAAI1lD,KAAKgV,IAAItU,OAAS2V,GAAQ0vC,MAAO,CACxC,IAAM,EAAW/lD,KAAKgV,IAClBhV,KAAKslD,0BACLtlD,KAAK8d,eAAenF,GAAe4B,OAAO,WACtC,EAAKqqC,OAAO95C,KAAK,EAASqL,OAC1BiI,EAAShK,aAAa,IAAI4xC,EAAc,EAAM,EAAS7vC,QACvD,EAAKuvC,gBACN,UAEA1lD,KAAKgV,IAAItU,OAAS2V,GAAQ4vC,SAC7BjmD,KAAKslD,2BACLtlD,KAAK2kD,MAAM75C,KAAM9K,KAAKgV,IAAmBkxC,MACzClmD,KAAK0lD,eAEF1lD,KAAKgV,IAAItU,OAAS2V,GAAQ8vC,IACjCnmD,KAAK8d,eAAenF,GAAeuB,KAAK,WAEpC,EAAKwrC,iBAEF1lD,KAAKgV,IAAItU,OAAS2V,GAAQ+vC,qBAC7BpmD,KAAKslD,0BACLtlD,KAAK8d,eAAenF,GAAeU,OAAO,WACtC,EAAKqsC,kBAMb,YAAAA,YAAR,W,MACI1lD,KAAK8jD,WACL9jD,KAAKgV,IAAIiC,gBACLjX,KAAKgV,KAAKhV,KAAKgV,IAAI0B,SAAS1W,MAChCA,KAAKgV,IAAMhV,KAAK0jD,YAChB1jD,KAAK0jD,YAAc,KACnB1jD,KAAK2jD,eAAwB,QAAR,EAAA3jD,KAAKgV,WAAG,eAAE0C,kBAAmB,GAClD1X,KAAK8d,kBAGT,YAAAJ,mBAAA,WACI,OAAO1d,KAAK4X,QAAUe,GAAec,WAAa,YAAMiE,mBAAkB,YAG9E,YAAA4D,OAAA,WACIthB,KAAK6W,UACL,YAAMyK,OAAM,YAGhB,YAAArN,gBAAA,WACI,YAAMA,gBAAe,WACrBiK,GAAUqJ,QAAQpgB,OAAOnH,OAG7B,YAAAqmD,QAAA,SAAQH,GACJ,OAAqC,IAA9BlmD,KAAK2kD,MAAMr9C,QAAQ4+C,IAG9B,YAAAI,SAAA,SAASnwC,GACL,OAAuC,IAAhCnW,KAAK4kD,OAAOt9C,QAAQ6O,IAGnC,EArPA,CAA4BowC,I,0dCX5B,eAYI,WAAYh0C,GAAZ,MACI,YAAM1E,GAAgB+W,uBAAuBrS,EAAaH,UAAQ,K,OATtE,EAAAo0C,aAAuB,EACvB,EAAAC,UAAoB,EACpB,EAAA7H,SAAsB,GACtB,EAAA8H,eAAyB,EACzB,EAAAC,iBAA2B,EAC3B,EAAAC,cAAwB,EACxB,EAAAC,QAAkB,EAId,EAAKnmD,KAAO6R,EACZ,EAAK/D,MAAMuV,cAAa,IAAI,OAAUC,WAAW,EAAG,EAAG,IACvD,EAAKxV,MAAMiV,SAAW,CAAC,WAAc,GACrC,EAAKvC,iBAAmB,EAAKjQ,MAAMmmB,WAAa,EAChD,EAAKsvB,eAAiB74C,GAAgBynB,IAAI,OAAQ,0BAClD,EAAKqxB,iBAAmB94C,GAAgBynB,IAAI,OAAQ,4BACpDlX,EAASxJ,sBAAsBzB,EAASoC,yBAAyB,SAAClB,GAC1DA,EAAMiB,kBAAoB8B,GAAgB6G,SAAW,EAAKuoC,aAAe,EAAKI,cAAgB,GAC9F,EAAKE,iB,EA2IrB,OAjKoC,QA2BhC,sBAAI,oBAAK,C,IAAT,WACI,OAAOjnB,GAAoBrI,UAAUx3B,KAAKU,O,gCAG9C,YAAA0pB,iBAAA,WACI,OAAOhhB,EAAcijB,UAGzB,YAAApC,OAAA,WACI,OAAIjqB,KAAK6mD,OAAe,MACxB7mD,KAAKghB,eAAerN,SAAU,EACzB3T,KAAK8tB,SAIH,MAHH9tB,KAAK8tB,UAAW,EACT,IAAIi5B,GAAiB/mD,SAKpC,YAAA6pB,SAAA,WACI7pB,KAAKghB,eAAerN,SAAU,EAC9B3T,KAAK8tB,UAAW,GAGpB,YAAAkC,mBAAA,WACI,OAAOhwB,KAAKihB,YAAa,IAAI,OAAU+B,KAAKhjB,KAAKihB,WAAW5P,UAAU0S,aAAa/jB,KAAKwO,MAAM0gB,aAAe,MAGjH,YAAA1L,oBAAA,WACI,IAAMD,EAAmBvjB,KAAKqT,cAE9B,OADAkQ,EAAiBjgB,GAAKtD,KAAKkhB,iBAAmB,EACvCqC,GAGX,YAAAlE,kBAAA,WACI,GAAIrf,KAAKohB,aAAc,CACnB,IAAM4lC,EAAW,IAAI,MAErB,OADAhnD,KAAKohB,aAAa2iC,iBAAiBiD,GAC5B,IAAI,MAAQA,EAASzjD,EAAGyjD,EAAS79C,GACrC,OAAInJ,KAAKmhB,cACN6lC,EAAW,IAAI,MACrBhnD,KAAKmhB,aAAa4iC,iBAAiBiD,GAC5B,IAAI,MAAQA,EAASzjD,EAAGyjD,EAAS79C,IAEjCnJ,KAAKuT,iBAIpB,YAAA0V,gBAAA,WACI,IAAMg+B,EAAYjnD,KAAKqf,oBACvB,OAAO,IAAI,MAAQ4nC,EAAU1jD,EAAGvD,KAAK6T,SAASkmC,eAAekN,EAAU1jD,EAAG0jD,EAAU3jD,GAAI2jD,EAAU3jD,IAGtG,YAAAmc,UAAA,WACI,OAAOzf,KAAKwmD,cAAgBxmD,KAAKiR,MAAMimB,aAAel3B,KAAKiR,MAAMkmB,eAAiBn3B,KAAK4mD,cAAgB,IAG3G,YAAAlzC,WAAA,WACI,YAAMA,WAAU,WAChBwK,GAAUoJ,sBAAsBngB,OAAOnH,MACvCke,GAAUgB,UAAUpU,KAAK9K,MACzBoe,EAAShK,aAAa,IAAI0wC,EAAiB3wC,EAAWkY,SAAUrsB,QAGpE,YAAAknD,YAAA,WACI,OAAOlnD,KAAKoT,OAASpT,KAAKiR,MAAMgmB,OAAS,GAG7C,YAAAkwB,QAAA,WACSnnD,KAAKonD,eACNlpC,GAAU8I,UAAYhnB,KAAK2mD,kBAC3BzoC,GAAU8I,UAAYhnB,KAAK2mD,iBAC3BvoC,EAAShK,aAAa,IAAIiK,EAAsBjH,GAAgBiwC,UAEhEnpC,GAAUK,QAAUve,KAAK0mD,eACzBtoC,EAAShK,aAAa,IAAIiK,EAAsBjH,GAAgBkH,OAEpEte,KAAKoT,QACLgL,EAAShK,aAAa,IAAImN,IAC1BnD,EAAShK,aAAa,IAAIkzC,EAAiBtnD,SAI/C,YAAA0d,mBAAA,WACI,OAAQ1d,KAAKyf,aAAezf,KAAKU,OAASwS,EAASF,WAA0CwF,GAAmBD,MAAhD6E,GAAiBE,WAGrF,YAAAgE,OAAA,WACIpD,GAAU+I,cAAgBjnB,KAAK4mD,cAC/B5mD,KAAK4mD,cAAgB,EACrB5mD,KAAK6mD,QAAS,EACd,IAAK,IAAI/1C,EAAI,EAAGA,EAAI9Q,KAAKiR,MAAMomB,QAASvmB,IACpC9Q,KAAK6T,SAASkhC,eAAe,IAAI7uB,GAAOlmB,KAAK4+C,SAAS,GAAGjK,qBAE7D,IAAS7jC,EAAI,EAAGA,EAAI9Q,KAAKiR,MAAMqmB,YAAaxmB,IACxC9Q,KAAK6T,SAASkhC,eAAe,IAAI5pB,GAAWnrB,KAAK4+C,SAAS,GAAGjK,qBAEjE30C,KAAK4+C,SAAS75C,SAAQ,SAACyD,GACnBA,EAAEuqC,YAAcvD,GAAYgB,OAC5BhoC,EAAEiyC,YAAY,MACdjyC,EAAEktC,gBACFltC,EAAEsyC,UAAU/1C,SAAQ,SAACN,GAAM,OAAAA,EAAEixC,sBAEjC,YAAMp0B,OAAM,YAGhB,YAAArN,gBAAA,WACI,YAAMA,gBAAe,WACrBiK,GAAUgB,UAAU/X,OAAOnH,OAG/B,YAAAonD,WAAA,WACI,OAAQpnD,KAAKknD,gBAAkBhpC,GAAUK,QAAUve,KAAK0mD,gBAAkBxoC,GAAU8I,UAAYhnB,KAAK2mD,mBAGzG,YAAAY,eAAA,SAAeh+C,GAAf,WACIA,EAAUxE,SAAQ,SAAC+0C,GAAM,SAAKjmC,SAASkhC,eAAe+E,EAAG,EAAKz6B,yBAGlE,YAAAynC,YAAA,WACQ9mD,KAAK4mD,cAAgB,GAAK1oC,GAAU+I,cAAgB/I,GAAUC,aAClEne,KAAK4mD,cAAgB,EACrB1oC,GAAU+I,cAAgBjnB,KAAK4mD,cAC/B5mD,KAAK4+C,SAAS75C,SAAQ,SAACyD,GAAM,OAAAA,EAAEmyC,aAAY,GAAM,MACjD36C,KAAK8d,mBAGT,YAAA0pC,aAAA,WACQxnD,KAAK4mD,cAAgB,IACzB1oC,GAAU+I,cAAgBjnB,KAAK4mD,cAC/B5mD,KAAK4mD,cAAgB,EACrB5mD,KAAK4+C,SAAS75C,SAAQ,SAACyD,GAAM,OAAAA,EAAEmyC,aAAY,GAAO,MAClD36C,KAAK8d,mBAGb,EAjKA,CAAoC0D,I,0dCjBpC,4B,+CAIA,OAJqC,QAE1B,EAAA9I,MAAQ,IAAI+uC,EAAgB,kBAEvC,EAJA,CAAqCjvC,I,0dCGrC,0E,OAGI,EAAAkyB,OAAqB,K,EAWzB,OAdsC,QAKlC,YAAAgd,WAAA,WACI1nD,KAAK2nD,YAAchhD,EAAiB3G,KAAK2nD,aACzC3nD,KAAKiU,mBAGT,YAAA8uC,iBAAA,WACI,OAAO0E,GAAgB/uC,OAG/B,EAdA,CAAsCwrC,I,0dCKtC,eAEI,a,OACI,YAAMr2C,GAAgB+W,uBAAuB,oCAAkC,KAsDvF,OAzDiC,QAM7B,sBAAI,oBAAK,C,IAAT,WACI,OAAO/W,GAAgBoD,MAAM2qB,a,gCAGjC,YAAAgsB,YAAA,WACIhsB,EAAYisB,OAAO7nD,OAGR,EAAA6nD,OAAf,SAAsB1C,GAClB,IAAM2C,EAAc3C,EAAOvxC,oBAC3B,GAAIuxC,EAAOza,QAAUya,EAAO9C,oBAAoB,CAAC8C,EAAOza,WAAaoX,GAAUkB,MAAO,CAClF,IAAM+E,EAAc5C,EAAOvxC,oBACvBk0C,IAAgBC,KACf7pC,GAAU2J,iBAAiBlgB,IAAImgD,IAAgB,IAAI3gD,OAAOg+C,GAC3DjnC,GAAU2J,iBAAiBpgB,YAAYsgD,GAAa,WAAM,YAAIj9C,KAAKq6C,IAElEA,EAAOtxC,SAASC,aAAaC,QAAQC,oBAAoBmxC,EAAO9xC,eAAe0/B,YAAYxsC,MAG5F4+C,EAAOwC,YAAc9lC,YAAW,WAAM,OAAA+Z,EAAYisB,OAAO1C,KAAS,IAAOvjC,IAFzEujC,EAAOE,eAKXF,EAAOrnC,iBACPqnC,EAAOwC,YAAc9lC,YAAW,WAC5BsjC,EAAOza,OAASya,EAAO6C,aACvBpsB,EAAYisB,OAAO1C,KACpB,IAAO1+C,EAAU,OAIpB,YAAAuhD,WAAR,WAGI,IAFA,IAAMj0C,EAAU/T,KAAK6T,SAASC,aAAaC,QACrCk0C,EAAgBl0C,EAAQC,oBAAoBhU,KAAKqT,eAAe6R,iBAC7DpU,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAMsoC,EAAUlzC,EAAmB+hD,EAAc1kD,GAAKme,GAAWA,GAAW,GAAIumC,EAAc1kD,EAAIme,GAAWA,GAAW,GAClHwmC,EAAUhiD,EAAmB+hD,EAAc9+C,EAAIuY,GAAW,EAAGumC,EAAc9+C,EAAIuY,GAAW,GAC1FqxB,EAAch/B,EAAQkrC,sBAAsB7F,EAAS8O,GAASnV,YACpE,GAAIA,IAAgBvD,GAAYQ,OAAS+C,IAAgBvD,GAAYM,KACjE,OAAO,IAAIn4B,GAAW,IAAI,MAAQyhC,EAAS8O,IAInD,OADA/kD,QAAQgL,KAAK,iCACN,MAGX,YAAAk3C,QAAA,WACIrlD,KAAK0nD,aACLxpC,GAAU0J,QAAQzgB,OAAOnH,OACxBke,GAAU2J,iBAAiBlgB,IAAI3H,KAAK4T,sBAAwB,IAAIzM,OAAOnH,OAGhF,EAzDA,CAAiCmoD,I,0dCDjC,eAEI,a,OACI,YAAMt6C,GAAgB+W,uBAAuB,0BAAwB,KAyC7E,OA5CyB,QAMrB,sBAAI,oBAAK,C,IAAT,WACI,OAAO/W,GAAgBoD,MAAMkrB,K,gCAGjC,YAAAisB,gBAAA,WACIjsB,EAAI0rB,OAAO7nD,OAGA,EAAA6nD,OAAf,SAAsBQ,GACbA,EAAI3d,QAAU2d,EAAIhG,oBAAoB,CAACgG,EAAI3d,WAAaoX,GAAUgB,iBACnEuF,EAAI3d,OAAS2d,EAAIL,cAErBK,EAAIV,YAAc9lC,YAAW,WAAM,OAAAsa,EAAI0rB,OAAOQ,KAAM,IAAOzmC,KAG/D,YAAA2hC,cAAA,SAAchgD,EAAW4F,GACrB,OAAOnJ,KAAK6T,SAASkmC,eAAex2C,EAAG4F,GAAKuY,GAAW,GAGnD,YAAAsmC,WAAR,WAGI,IAFA,IAAMj0C,EAAU/T,KAAK6T,SAASC,aAAaC,QACrCk0C,EAAgBl0C,EAAQC,oBAAoBhU,KAAKqT,eAAe6R,iBAC7DpU,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAMsoC,EAAUlzC,EAAmB+hD,EAAc1kD,GAAKme,GAAWA,GAAW,GAAIumC,EAAc1kD,EAAIme,GAAWA,GAAW,GAClHwmC,EAAUhiD,EAAmB+hD,EAAc9+C,EAAIuY,GAAW,EAAGumC,EAAc9+C,EAAIuY,GAAW,GAChG,GAAI3N,EAAQkrC,sBAAsB7F,EAAS8O,GAASnV,YAAYxsC,MAC5D,OAAO,IAAIoR,GAAW,IAAI,MAAQyhC,EAAS8O,IAInD,OADA/kD,QAAQgL,KAAK,iCACN,MAGX,YAAAk3C,QAAA,WACIrlD,KAAK0nD,aACLxpC,GAAU4J,KAAK3gB,OAAOnH,OAG9B,EA5CA,CAAyBmoD,ICKlB,GAAW,eAElB,4BAiHA,OA/GW,EAAAG,eAAP,SAAsBz0C,EAAwB00C,GAC1CtjD,OAAOujD,OAAOD,GAAgBxjD,SAAQ,SAAC0jD,GACnC,IAAMC,EAAYD,EAAS/nD,KAAO+nD,EAAS/nD,KAAK0E,cAAgBqjD,EAAS/nD,KAEnEs5C,GAAUyO,EAASE,KAAO,GAAKjnC,GAC/Bu4B,GAAUwO,EAASG,KAAO,GAAKlnC,GAC/BmnC,EAAWh1C,EAAS+kC,iBAAiBoB,EAAQC,GAC7C1nC,EAAuB1E,GAAgBynB,IAAI,gBAAiBmzB,EAAS/nD,MACrEooD,EAAa,GAASL,EAASM,SACrC,GAAIL,IAAc,WAAWtjD,cAAe,CACxC,IAAM4D,EAAS,IAAI,MAAQ,EAAI0Y,GAAU,EAAG,GAAGsnC,eAAe,IAAI,MAAQ,EAAG,EAAG,GAAIF,EAAaziD,KAAKmxC,GAAK,IAAIx4C,IAAI,IAAI,MAAQg7C,EAAQ6O,EAAU5O,EAASv4B,GAAW,IACrK7N,EAASC,aAAakZ,OAAO3b,SAAS2R,KAAKha,GAC3C6K,EAASC,aAAakZ,OAAO3b,SAAS/N,EAAI,IAAMoe,GAChD7N,EAASC,aAAamZ,SAASyd,OAAO1nB,KAAK,IAAI,MAAQg3B,EAAQ6O,EAAU5O,EAASv4B,GAAW,IAC7F7N,EAASC,aAAamZ,SAASg8B,SAC/Bp1C,EAASq1C,iBAAiB,IAAI,MAAQlP,EAAQC,EAASv4B,GAAW,SAC/D,GAAIgnC,IAAc,QAAQtjD,cAAe,CAC5C,IAAM8Q,EAAS,IAAIizC,GACnBjzC,EAAOrC,SAAWA,EAClBqC,EAAO4H,iBACP5H,EAAOoN,mBACPpN,EAAO1H,MAAM6C,SAASxJ,IAAImyC,EAAQ6O,EAAU5O,GAC5C/jC,EAAO1H,MAAMmrC,aAAa,IAAI,MAAQ,EAAG,EAAG,GAAImP,EAAaziD,KAAKmxC,GAAK,GACvEthC,EAAO1H,MAAMmF,QAAUE,EAASC,aAAaC,QAAQC,oBAAoBkC,EAAO1H,MAAM6C,UAAU0Z,WAC5F7U,EAAO1H,MAAMmF,SACbuK,GAAUqJ,QAAQzc,KAAKoL,GACvBkI,EAAShK,aAAa,IAAI0wC,EAAiB3wC,EAAW4wC,OAAQ7uC,KAE9DgI,GAAUsJ,oBAAoB1c,KAAKoL,GAEvCrC,EAASC,aAAaI,MAAMlV,IAAIkX,EAAO1H,YACpC,GAAI+D,EAAc,CACrB,IAAMyD,EAAW9C,EAASZ,UAAUC,GAC9BmD,EAAS,IAAI0zC,GAAepzC,GAClCN,EAAO7B,SAAWA,EAClB6B,EAAOoI,iBACPpI,EAAO4N,mBACP5N,EAAOlH,MAAM6C,SAASxJ,IAAImyC,EAAQnmC,EAASkmC,eAAeC,EAAQC,GAASA,GAC3EvkC,EAAOlH,MAAMmrC,aAAa,IAAI,MAAQ,EAAG,EAAG,IAAKmP,EAAaziD,KAAKmxC,IACnE9hC,EAAOlH,MAAMmF,QAAUE,EAASC,aAAaC,QAAQC,oBAAoB0B,EAAOlH,MAAM6C,UAAU0Z,WAC5FrV,EAAOlH,MAAMmF,SACbuK,GAAUgB,UAAUpU,KAAK4K,GACzB0I,EAAShK,aAAa,IAAI0wC,EAAiB3wC,EAAWkY,SAAU3W,KAEhEwI,GAAUoJ,sBAAsBxc,KAAK4K,GAGzC7B,EAASC,aAAaI,MAAMlV,IAAI0W,EAAOlH,OACvC,IAAM66C,EAAqBx1C,EAASC,aAAaC,QAAQC,oBAAoB0B,EAAOlH,MAAM6C,UAK1F,GAJAg4C,EAAmB5O,YAAY/kC,GAC/B2zC,EAAmBtW,YAAcvD,GAAYC,oBAC7C4Z,EAAmB3T,gBACnBhgC,EAAOkpC,SAAS9zC,KAAKu+C,GACjBrzC,EAAShE,sBAAuB,CAChC,IAAMs3C,EAAkB,IAAI,MAAQ5nC,GAAW1L,EAAShE,sBAAsBzO,EAAG,EAAGme,GAAW1L,EAAShE,sBAAsB1O,GACzH0lD,eAAe,IAAI,MAAQ,EAAG,EAAG,IAAKF,GAAY9pD,IAAI0W,EAAOlH,MAAM6C,UAClEk4C,EAAmB11C,EAASC,aAAaC,QAAQC,oBAAoBs1C,GAC3EC,EAAiB9O,YAAY/kC,GAC7B6zC,EAAiBxW,YAAcvD,GAAYC,oBAC3C8Z,EAAiB7T,gBACjBhgC,EAAOkpC,SAAS9zC,KAAKy+C,GAEzB,GAAIvzC,EAAS9D,oBAAqB,CAC9B,IAAMs3C,EAAa,IAAI,MAAQ,EAAG,GAAI9nC,IAAUsnC,eAAe,IAAI,MAAQ,EAAG,EAAG,GAAIF,GACrFU,EAAWxqD,IAAI0W,EAAOlH,MAAM6C,UAC5B,IAAMo4C,EAAc51C,EAASC,aAAaC,QAAQC,oBAAoBw1C,GAClExzC,IAAa9C,EAASJ,UAAS22C,EAAYzzC,SAAWN,GAC1D+zC,EAAY1W,YAAcvD,GAAYC,oBACtCga,EAAY/T,gBACZhgC,EAAOkpC,SAAS9zC,KAAK2+C,IAErBzzC,IAAa9C,EAASP,eAAiB+C,EAAOkpC,SAASt/B,MAAK,SAAC9W,GAAM,OAAAA,EAAEsyC,UAAUx7B,MAAK,SAAC7a,GAAM,OAAAA,EAAEsvC,iBAC7Fr+B,EAAOoxC,mBAER,GAAI4B,IAAc,eAAetjD,cACpCyO,EAASkhC,eAAe,IAAI5pB,GAAW,IAAI,MAAQ6uB,EAAQC,SACxD,GAAIyO,IAAc,cAActjD,cAAe,CAClD,IAAM+/C,EAAS,IAAIvpB,GACnBupB,EAAOtxC,SAAWA,EAClBsxC,EAAOrnC,iBACPqnC,EAAO32C,MAAM6C,SAASxJ,IAAImyC,EAAQ6O,EAAU5O,GAC5C,IAAM1tB,EAAiB44B,EAAOvxC,oBAC9BuxC,EAAO32C,MAAMmF,QAAU4Y,EAAexB,WACtClX,EAASC,aAAaI,MAAMlV,IAAImmD,EAAO32C,OACvC0P,GAAU0J,QAAQ9c,KAAKq6C,GACvBjnC,GAAU2J,iBAAiBpgB,YAAY8kB,GAAgB,WAAM,YAAIzhB,KAAKq6C,GACtEA,EAAOyC,mBACJ,GAAIc,IAAc,MAAMtjD,cAAe,CAC1C,IAAMijD,EAAM,IAAIlsB,GAChBksB,EAAIx0C,SAAWA,EACfw0C,EAAIvqC,iBACJuqC,EAAI75C,MAAM6C,SAASxJ,IAAImyC,EAAQqO,EAAI9E,cAAcvJ,EAAQC,GAASA,GAClEoO,EAAI75C,MAAMmF,QAAUE,EAASC,aAAaC,QAAQC,oBAAoBq0C,EAAI75C,MAAM6C,UAAU0Z,WAC1FlX,EAASC,aAAaI,MAAMlV,IAAIqpD,EAAI75C,OACpC0P,GAAU4J,KAAKhd,KAAKu9C,GACpBA,EAAID,uBAGJjlD,QAAQgL,KAAK,eAAiBs6C,EAAS/nD,KAAO,2BAItDwd,GAAUgB,UAAUna,SAAQ,SAACR,GAAM,OAAAA,EAAEq6C,SAAS75C,SAAQ,SAACg6C,GACnD,IAAK,IAAIx7C,GAAK,EAAGA,GAAK,EAAGA,IACrB,IAAK,IAAID,GAAK,EAAGA,GAAK,EAAGA,IACrBuQ,EAASC,aAAaC,QAAQ0Y,WAAWsyB,EAAMx7C,EAAIA,EAAGw7C,EAAMz7C,EAAIA,GAAGoyC,uBAMvF,EAjHA,G,0dCTA,eAQI,WAAsBh1C,EAAe8U,GAArC,MACI,YAAM9U,IAAK,K,OAPf,EAAA8U,QAAmB,KACnB,EAAAnJ,MAAgB,SAChB,EAAA6rC,cAAwB,EACxB,EAAAwR,aAA2B,KAC3B,EAAAC,cAA6B,KAIzB,EAAKn0C,QAAUA,E,EAgBvB,OA1ByC,QAarC,YAAAsB,YAAA,SAAYR,GACR,QAAStW,KAAK0pD,cAAgBpzC,EAAU+vC,QAAQrmD,KAAK0pD,kBAC5C1pD,KAAK2pD,eAAiBrzC,EAAUgwC,SAAStmD,KAAK2pD,iBAG3D,YAAA5yC,oBAAA,SAAoBT,GAChB,OAAOtW,KAAK0pD,cAGhB,YAAA1yC,wBAAA,SAAwBV,GACpB,OAAOtW,KAAK2pD,eAGpB,EA1BA,CAAyCtxC,I,0dCCzC,eAII,WAAY7C,EAAkBowC,GAA9B,MACI,YAAMvvC,GAAQ89B,KAAM3+B,IAAQ,K,OAC5B,EAAKowC,SAAWA,EAChB,EAAKv5C,MAAQ,SACb,EAAK6rC,cAAgB,EACrB,EAAKyR,cAAgBtjC,GAAYK,W,EAgBzC,OAzBiC,QAY7B,YAAAhP,cAAA,WACI,MAAO,CAAC,IAAIC,GAAW3X,KAAK4lD,SAASryC,mBAGzC,YAAA0D,cAAA,WACI,YAAMA,cAAa,WACnBjX,KAAK4lD,SAAS3gC,UAGlB,YAAAnN,sBAAA,WACI,OAAOmI,GAAmB2pC,uBAGlC,EAzBA,CAAiCC,ICGjC,cAkBI,WAAYC,QAAA,IAAAA,OAAA,GAhBZ,KAAAA,OAAQ,EACR,KAAAC,gBAA6B,KAC7B,KAAAC,aAA+B,KAE/B,KAAAC,UAAY,IAAIhjD,MAAM,GAAGijD,KAAK,GAC9B,KAAAC,OAAS,IAAIljD,MAAM,GAAGijD,KAAK,GAC3B,KAAAE,YAAc,GACd,KAAAC,WAAa,GACb,KAAAC,aAAe,GACf,KAAAC,aAAe,GACf,KAAAC,QAAS,EACT,KAAAC,eAAiB,EACjB,KAAAC,SAAW,GAEX,KAAAC,cAAgB,KAGZ3qD,KAAK8pD,MAAQA,EAoXrB,OAjXI,YAAAc,eAAA,WACI,IAAMhf,EAAO5rC,KACbA,KAAKgqD,aAAej8C,aAAY,WAC5B69B,EAAKif,YACN,MAGP,YAAAC,eAAA,WACI9qD,KAAKgqD,aAAeljD,EAAkB9G,KAAKgqD,eAQ/C,YAAAe,cAAA,SAAcC,GACV,IAAMC,EAAM15B,SAASy5B,GACrB,GAAIE,MAAMD,IAAQA,EAAM,GAAKA,EAAMjrD,KAAKiqD,UAAUv/C,OAAQ,MAAM,IAAIygD,MAAM,qBAAuBH,EAAW,cAC5G,OAAOC,GAQX,YAAAG,mBAAA,SAAmB9oD,GACf,IAAM2oD,EAAM15B,SAASjvB,GACrB,GAAI4oD,MAAMD,GAAM,MAAM,IAAIE,MAAM,2BAA6B7oD,EAAQ,cACrE,OAAO2oD,GAQX,YAAAI,KAAA,SAAKL,GAED,OADAA,EAAWhrD,KAAK+qD,cAAcC,GACvBhrD,KAAKiqD,UAAUe,IAQ1B,YAAAM,KAAA,SAAKN,EAAU1oD,GACX0oD,EAAWhrD,KAAK+qD,cAAcC,GAC9B1oD,EAAQtC,KAAKorD,mBAAmB9oD,GAChCtC,KAAKiqD,UAAUe,GAAY1oD,GAQ/B,YAAAipD,KAAA,SAAKP,EAAU1oD,GACX0oD,EAAWhrD,KAAK+qD,cAAcC,GAC9B1oD,EAAQtC,KAAKorD,mBAAmB9oD,GAChCtC,KAAKiqD,UAAUe,IAAa1oD,GAQhC,YAAAkpD,SAAA,SAAS7/B,EAAOrpB,GACZ,IAAM2oD,EAAM15B,SAASjvB,GACrB,GAAI4oD,MAAMD,GAAM,MAAM,IAAIE,MAAM,iCAAoC7oD,GACpEtC,KAAKmqD,OAAOx+B,IAAS,IAAI8/B,MAAOC,UAAYT,GAQhD,YAAAU,SAAA,SAAShgC,GACL,OAAO,IAAI8/B,MAAOC,UAAY1rD,KAAKmqD,OAAOx+B,IAM9C,YAAAigC,kBAAA,WACI5rD,KAAKwqD,QAAS,EACdtsC,GAAU2I,YAAcxB,GAAgBnO,SACxClX,KAAK+pD,mBAMT,YAAA8B,aAAA,WACI7rD,KAAKwqD,QAAS,EACdtsC,GAAU2I,YAAcxB,GAAgBymC,OACxC9rD,KAAK+pD,mBAOT,YAAAgC,iBAAA,SAAiBzpD,KAajB,YAAA0pD,iBAAA,SAAiBC,GACbjsD,KAAK2qD,eAAiBsB,GAG1B,YAAAC,yBAAA,SAAyBC,EAAU/4C,GAC/B8K,GAAUgB,UAAUna,SAAQ,SAAAR,GACpBA,EAAE7D,OAASyrD,IAAU5nD,EAAE6O,MAAQA,OAI3C,YAAAg5C,kBAAA,SAAkBh5C,GACdpT,KAAKksD,yBAAyBh5C,EAASV,YAAaY,IAGxD,YAAAi5C,oBAAA,SAAoBj5C,GAChBpT,KAAKksD,yBAAyBh5C,EAAST,aAAcW,IAGzD,YAAAk5C,qBAAA,SAAqBl5C,GACjBpT,KAAKksD,yBAAyBh5C,EAASP,cAAeS,IAG1D,YAAAm5C,iBAAA,SAAiBn5C,GACbpT,KAAKksD,yBAAyBh5C,EAASN,SAAUQ,IAOrD,YAAAo5C,mBAAA,WACI,OAAOtuC,GAAUiB,mBAAmBjM,EAASV,aAAa9H,QAO9D,YAAA+hD,sBAAA,WACI,OAAOvuC,GAAUqJ,QAAQ7c,QAO7B,YAAAgiD,2BAAA,WACI,OAAOxuC,GAAUC,YAGrB,YAAAwuC,mBAAA,WAEI,OAAO,GAGX,YAAAC,sBAAA,SAAsBC,EAAMC,EAAMC,KAIlC,YAAAC,gBAAA,WACI,OAAO,GAGX,YAAAC,aAAA,aAIA,YAAAC,WAAA,SAAWC,EAAeC,GACtB,GAAKptD,KAAK2qD,cAAV,CAGA,IAAMx1B,EAAMn1B,KAAK0qD,SAASyC,GAE1BhqD,QAAQyG,IAAIurB,EAAIk4B,OAIpB,YAAAC,sBAAA,SAAsBT,KAItB,YAAAU,yBAAA,SAAyBV,GAErB,OAAO,GAGX,YAAAW,uBAAA,SAAuBX,GAEnB,OAAO,GAGX,YAAAY,eAAA,SAAeZ,GAEX,OAAO,GAGX,YAAAa,eAAA,WAEI,OAAO,KAGX,YAAAC,oBAAA,WAEI,OAAO,GAGX,YAAAC,mBAAA,aAIA,YAAAC,YAAA,aAIA,YAAAC,6BAAA,WACI,OAAO5vC,GAAUiB,mBAAmBjM,EAASP,eAAejI,QAGhE,YAAAqjD,wBAAA,WACI,OAAO7vC,GAAUiB,mBAAmBjM,EAASN,UAAUlI,QAG3D,YAAAsjD,0BAAA,aAIA,YAAAC,sBAAA,WAEI,OAAO,GAGX,YAAAC,WAAA,SAAWC,EAAYC,GACnB,GAAmB,SAAfD,EACA,KAAM,OACH,GAAmB,SAAfA,EACP,OAAO,EACJ,GAAmB,UAAfA,EACP,OAAO,EAEX,IAAME,EAAmBF,EAAWvgD,MAAM,iBAC1C,GAAIygD,EACA,OAAOruD,KAAKsrD,KAAK+C,EAAiB,GAAID,EAAW,IAErD,IAAME,EAAmBH,EAAWvgD,MAAM,iBAC1C,GAAI0gD,EACA,OAAOtuD,KAAKurD,KAAK+C,EAAiB,GAAIF,EAAW,IAErD,IAAMG,EAAmBJ,EAAWvgD,MAAM,iBAC1C,GAAI2gD,EACA,OAAOvuD,KAAKqrD,KAAKkD,EAAiB,IAEtC,IAAMC,EAAgBL,EAAWvgD,MAAM,qBACvC,GAAI4gD,EACA,OAAOxuD,KAAKwrD,SAASgD,EAAc,GAAIJ,EAAW,IAEtD,IAAMK,EAAgBN,EAAWvgD,MAAM,qBACvC,GAAI6gD,EACA,OAAOzuD,KAAK2rD,SAAS8C,EAAc,IAEvC,IAAMC,EAAcP,EAAW/oD,cAC/B,IAAK,IAAMupD,KAAc3uD,KAErB,GAAI2uD,EAAWvpD,gBAAkBspD,EAG7B,OAAO1uD,KAAK2uD,GAAYC,MAAM5uD,KAAMouD,GAG5C,MAAM,IAAIjD,MAAM,qBAAuBgD,IAG3C,YAAAU,YAAA,SAAYv9C,EAAMq3B,GACd,IAAMmmB,EAAkB9uD,KAAK+uD,iBAAiBz9C,GAC1CtR,KAAK8pD,OACL3mD,QAAQyG,IAAI,0BAA4BklD,GAExCA,GACA9uD,KAAK+uD,iBAAiBpmB,IAI9B,YAAAomB,iBAAA,SAAiBC,GAAjB,WACI,GAAIA,EAAWC,OAAQ,CACnB,IAAMC,EAAkC,gBAAtBF,EAAWC,OAA2BD,EAAWpX,KAAKvyC,KAAI,SAAArB,GAAK,SAAK+qD,iBAAiB/qD,MAAMgrD,EAAWpX,KAClHv0C,EAASrD,KAAKkuD,WAAWc,EAAWC,OAAQC,GAIlD,YAHetnD,IAAXvE,GAAwBrD,KAAK8pD,OAC7B3mD,QAAQyG,IAAI,oBAAsBvG,GAE/BA,EACJ,GAAI2rD,EAAWG,WAAY,CAC9B,IAAM79C,EAAOtR,KAAK+uD,iBAAiBC,EAAW19C,MACxCq3B,EAAQ3oC,KAAK+uD,iBAAiBC,EAAWrmB,OAC/C,GAA8B,MAA1BqmB,EAAWG,WACX,OAAO79C,IAASq3B,EACb,GAA8B,OAA1BqmB,EAAWG,WAClB,OAAO79C,IAASq3B,EACb,GAA8B,MAA1BqmB,EAAWG,WAClB,OAAO79C,EAAOq3B,EACX,GAA8B,MAA1BqmB,EAAWG,WAClB,OAAO79C,EAAOq3B,EAGd,MADAxlC,QAAQyG,IAAIolD,GACN,IAAI7D,MAAM,uBAAyB6D,EAAWG,YAErD,IAAKjE,MAAM8D,GACd,OAAOA,EACJ,IAAIA,EAAWI,KAUlB,MADAjsD,QAAQyG,IAAIolD,GACN,IAAI7D,MAAM,8BAAgCnrD,KAAKyqD,eAAiB,KAAOuE,GAR7E,GADAhvD,KAAKyqD,eAAiBzqD,KAAKuqD,aAAayE,EAAWI,WACvBxnD,IAAxB5H,KAAKyqD,eACL,MAAM,IAAIU,MAAM,UAAa6D,EAAWI,KAAO,iBAE/CpvD,KAAK8pD,OACL3mD,QAAQyG,IAAI,qBAAwBolD,EAAWI,KAAO,aAAgBpvD,KAAKyqD,iBAQvF,YAAAI,QAAA,SAAQf,GAEJ,QAFI,IAAAA,OAAA,GACJ9pD,KAAK8pD,MAAQA,GACT9pD,KAAKwqD,OACT,IAKI,IAJIxqD,KAAK8pD,QACL3mD,QAAQyG,IAAI,+BAAiC5J,KAAKoqD,YAAY79C,KAAK,OACnEpJ,QAAQyG,IAAI,cAAgB5J,KAAKiqD,YAEhCjqD,KAAKyqD,eAAiB,EAAGzqD,KAAKyqD,eAAiBzqD,KAAKqqD,WAAW3/C,OAAQ1K,KAAKyqD,iBAAkB,CAC/F,IAAM4E,EAAYrvD,KAAKqqD,WAAWrqD,KAAKyqD,gBACnCzqD,KAAK8pD,QACL3mD,QAAQyG,IAAI5J,KAAKyqD,eAAiB,KAAOzqD,KAAKoqD,YAAYpqD,KAAKyqD,iBAC/DtnD,QAAQyG,IAAIylD,IAEXA,EAAU7kB,OACXxqC,KAAK+uD,iBAAiBM,IAGhC,MAAOrrD,GACL,GAAU,SAANA,EACA,OAEJb,QAAQC,MAAMY,GACdb,QAAQC,MAAM,kEACdpD,KAAKwqD,QAAS,IAK1B,EAvYA,GCRA,4BA0IA,OAxIW,EAAAz7C,MAAP,SAAaugD,GAST,IARA,IAAMC,EAAa,IAAIC,GACjBv+B,EAAQq+B,EAAW7kD,MAAM,MAAMpF,KAAI,SAAA+rB,GAAK,OAAAA,EACzC3mB,MAAM,MAAM,GAAG4mB,OACf5mB,MAAM,KAAK,GAAG4mB,OACd5rB,QAAQ,KAAM,IACdA,QAAQ,aAAc,IACtBA,QAAQ,QAAS,OAEbqL,EAAI,EAAGA,EAAImgB,EAAMvmB,OAAQoG,IAE9B,MADM0gB,EAAOP,EAAMngB,IACVpG,OAAS,GAGlB,GAAI8mB,EAAK9rB,WAAW,aAAc,CAC9B,IAAM+pD,EAAcj+B,EAAK/rB,QAAQ,aAAc,IAAI4rB,OAAOhf,MAAM,GAAI,GACpE,GAAoB,cAAhBo9C,EAGA,SAEJ,IAAMC,EAAiBC,EAAW5gD,MAAMlB,GAAgB0X,YAAY,UAAYkqC,IAChF,IAAKC,IAAmBA,EAAetF,aAAesF,EAAetF,YAAY1/C,OAAS,EACtF,KAAM,sCAAyC8mB,EAEnD+9B,EAAWnF,YAAcmF,EAAWnF,YAAYwF,OAAOF,EAAetF,aAEtEmF,EAAWjF,aAAerlD,OAAOwR,OAAO,GAAI84C,EAAWjF,aAAcoF,EAAepF,mBACjF,GAAI94B,EAAK9rB,WAAW,YAAa,CAKpC,IAJA,IAAMmqD,EAAYr+B,EAAK/rB,QAAQ,YAAa,IAAIgF,MAAM,KAChDqlD,EAAa,CAACD,EAAUtoD,OAAO,GAAGgF,KAAK,KAAK9G,QAAQ,MAAO,IAAI4rB,QACjE0+B,EAAQv+B,EACRw+B,GAAS,EACND,EAAMriD,SAAS,OAASoD,EAAImgB,EAAMvmB,OAAS,GAAG,CAGjD,IAAMulD,GADNF,EAAQ9+B,IADRngB,GACiBugB,QACO5rB,QAAQ,MAAO,IAAI4rB,OACvC4+B,EAAUvlD,OAAS,IACfslD,GACAA,GAAS,EACTF,EAAWA,EAAWplD,OAAS,IAAMulD,GAErCH,EAAWhlD,KAAKmlD,IAGpBF,EAAMniD,MAAM,UACZoiD,GAAS,GAGjB,IAAME,EAAYL,EAAU,GAAGplD,MAAM,KACrC8kD,EAAWjF,aAAa4F,EAAU,IAAM,CACpCtY,KAAMsY,EAAU,GAAGzqD,QAAQ,MAAO,IAAIgF,MAAM,KAC5CwmB,MAAO6+B,QAGXP,EAAWnF,YAAcmF,EAAWnF,YAAYwF,OAAO5vD,KAAKmwD,cAAcZ,EAAWjF,aAAc94B,IAK3G,IAAS1gB,EAAI,EAAGA,EAAIy+C,EAAWnF,YAAY1/C,OAAQoG,IAAK,CACpD,IAAM0gB,EAAO+9B,EAAWnF,YAAYt5C,GACpCy+C,EAAWlF,WAAWv5C,GAAK0gB,EAAK/rB,QAAQ,QAAS,IAC5CgF,MAAM,OACX,IAAM2lD,EAAa5+B,EAAK5jB,MAAM,UAC9B,GAAwC,IAApC2hD,EAAWlF,WAAWv5C,GAAGpG,OACzB6kD,EAAWlF,WAAWv5C,GAAK,CACvBm+C,OAAQ,cACRrX,KAAM,CAAC53C,KAAKqwD,WAAWd,EAAWlF,WAAWv5C,GAAG,IAAK9Q,KAAKqwD,WAAWd,EAAWlF,WAAWv5C,GAAG,WAE/F,GAAIs/C,EAAY,CACnB,IAAME,EAAYF,EAAW,GAAGhrD,cAChCmqD,EAAWhF,aAAa+F,GAAax/C,EACrCy+C,EAAWlF,WAAWv5C,GAAK,CAAC05B,MAAO8lB,OAChC,IAAwC,IAApCf,EAAWlF,WAAWv5C,GAAGpG,OAGhC,KAAM,yBAA4B8mB,EAFlC+9B,EAAWlF,WAAWv5C,GAAK9Q,KAAKqwD,WAAWd,EAAWlF,WAAWv5C,GAAG,KAK5E,OAAOy+C,GAGJ,EAAAY,cAAP,SAAqB7F,EAAc94B,GAAnC,WAEU/mB,EAAQ+mB,EAAK/mB,MAAM,KACnB8lD,EAAQjG,EAAa7/C,EAAM,IACjC,GAAI8lD,EAAO,CACP,IAAM,EAAY9lD,EAAMlD,OAAO,GAAGgF,KAAK,KAAK8F,MAAM,GAAI,GAAG5H,MAAM,KAC/D,GAAI,EAAUC,SAAW6lD,EAAM3Y,KAAKltC,OAChC,KAAM,qDAAuD8mB,EAEjE,IAAM,EAAa,GAOnB,OANA++B,EAAMt/B,MAAMlsB,SAAQ,SAACysB,GACjB,IAAK,IAAI1gB,EAAI,EAAGA,EAAI,EAAUpG,OAAQoG,IAClC0gB,EAAOA,EAAK/rB,QAAQ,IAAI+qD,OAAO,MAAQD,EAAM3Y,KAAK9mC,GAAK,OAAQ,EAAUA,IAE7E,EAAWhG,KAAI,MAAf,EAAoB,EAAKqlD,cAAc7F,EAAc94B,OAElD,EAEP,MAAO,CAACA,IAIT,EAAA6+B,WAAP,SAAkBrB,GAAlB,WACIA,EAAaA,EAAW39B,OAAO5rB,QAAQ,KAAM,IAC7C,IAAMgrD,EAASl/B,SAASy9B,GACxB,IAAK9D,MAAMuF,GACP,OAAOA,EAEX,IAAMC,EAAU1B,EAAWvkD,MAAM,4BAA4BvF,QAAO,SAAAlB,GAAK,YAAM4D,IAAN5D,KACnE2sD,EAAW3B,EAAWphD,MAAM,kBAC5BgjD,EAAa5B,EAAWvkD,MAAM,KAC9B2lD,EAAapB,EAAWphD,MAAM,aAC9BijD,EAAY7B,EAAWphD,MAAM,cACnC,GAAuB,IAAnB8iD,EAAQhmD,OACR,MAAO,CAAC4G,KAAMtR,KAAKqwD,WAAWK,EAAQ,IAAKvB,WAAYuB,EAAQ,GAAI/nB,MAAO3oC,KAAKqwD,WAAWK,EAAQ,KAC/F,GAAIC,EAAU,CACjB,IAAM/Y,EAAO+Y,EAAS,GAAGlmD,MAAM,KAAKpF,KAAI,SAAAb,GAAK,SAAK6rD,WAAW7rD,MAC7D,MAAO,CAACyqD,OAAQ0B,EAAS,GAAI/Y,KAAMA,GAChC,GAAIgZ,EAAWlmD,OAAS,EAE3B,OADMktC,EAA6B,IAAtBgZ,EAAWlmD,OAAe,CAAC1K,KAAKqwD,WAAWO,EAAW,KAAOA,EAAWrpD,OAAO,GAAGlC,KAAI,SAAAb,GAAK,SAAK6rD,WAAW7rD,MACjH,CAACyqD,OAAQ2B,EAAW,GAAIhZ,KAAMA,GAClC,GAAIwY,EACP,MAAO,CAAC5lB,MAAO4lB,EAAW,IACvB,GAAIS,EACP,MAAO,CAACzB,KAAMyB,EAAU,GAAGzrD,eAE3B,GAAI4pD,EAAWphD,MAAM,YACjB,KAAM,sEAEV,MAAO,CAACqhD,OAAQD,EAAYpX,KAAM,KAI9C,EA1IA,GCCA,cAKI,WAAYkZ,GAHZ,KAAAC,aAAgC,GAChC,KAAAC,QAA2B,GAGvBhxD,KAAK+wD,aAAeD,EACpB9wD,KAAK4mB,QAoCb,OAjCI,YAAAqqC,OAAA,SAAO5pD,GACHrH,KAAKgxD,QAAQ3pD,GAAO6pD,SAAWlxD,KAAKgxD,QAAQ3pD,GAAO6pD,SAGvD,YAAAC,MAAA,SAAM9pD,GACF,IAAM+pD,EAAMpxD,KAAKgxD,QAAQ3pD,GACzBrH,KAAKgxD,QAAQ3pD,GAASrH,KAAKgxD,QAAQ3pD,EAAQ,GAC3CrH,KAAKgxD,QAAQ3pD,EAAQ,GAAK+pD,GAG9B,YAAAxqC,MAAA,WACI5mB,KAAKgxD,QAAUhxD,KAAK+wD,aAAa1rD,KAAI,SAAAgsD,GAAS,WAAIC,GAAcD,OAGpE,YAAAE,UAAA,SAAUlqD,GAEN,IADA,IAAMD,EAAUpH,KAAKgxD,QAAQ3pD,GACpByJ,EAAIzJ,EAAOyJ,EAAI,EAAGA,IACvB9Q,KAAKgxD,QAAQlgD,GAAK9Q,KAAKgxD,QAAQlgD,EAAI,GAEvC9Q,KAAKgxD,QAAQ,GAAK5pD,GAGtB,YAAAoqD,YAAA,SAAYx8C,GACR,IAAIy8C,EAAW,EAOf,OANAzxD,KAAKgxD,QAAQ1xC,MAAK,SAACoyC,EAAGrqD,GAClB,GAAIqqD,EAAEvsD,MAAQ6P,EAAI8C,wBAEd,OADA25C,EAAWpqD,GACJ,KAGRoqD,GAGf,EA3CA,GA6CA,GAKI,SAAYE,GACR3xD,KAAKmF,IAAMwsD,EAAmBxsD,IAC9BnF,KAAKkxD,QAAUS,EAAmBT,S,0dCnD1C,eAII,WAAYxmB,GAAZ,MACI,YAAMr0B,GAAQkwB,OAAK,K,OACnB,EAAKmE,OAAS,CAAC,IAAI/yB,GAAW+yB,I,EAOtC,OAb6B,QASzB,YAAAhzB,cAAA,WACI,OAAO1X,KAAK0qC,QAGpB,EAbA,CAA6BvzB,ICoBtB,GAAW,eAElB,cAOI,WAAYxT,GAAZ,WALA,KAAAmQ,aAA6B,KAC7B,KAAA89C,oBAAsB,KACtB,KAAArC,WAAyB,KACzB,KAAAsC,qBAAuB,KAGnB7xD,KAAK8T,aAAe,IAAI2R,GAAa9hB,GACrCya,EAASxJ,sBAAsBzB,EAASsN,mBAAmB,WAAM,OAAAvC,GAAA,eAAyB,OAC1FE,EAASxJ,sBAAsBzB,EAASkC,kBAAkB,WAClD6I,GAAUuJ,iBAAmB,IAAM,EAAKmqC,sBACxC,EAAKA,oBAAsB7jD,YAAY,EAAK+jD,kBAAkB3vC,KAAK,GAAO4vC,QAGlF3zC,EAASxJ,sBAAsBzB,EAASsC,gBAAgB,SAACpB,GACrD,IAAM29C,EAAiB9zC,GAAU0K,yBAAyBvU,EAAMmB,QAAQ0P,iBAAkBhS,EAASV,aACnG,IAAKw/C,EAAgB,KAAM,+CAC3B,IAAMhnC,EAAMgnC,EAAe/oC,kBACrB28B,EAAW,IAAIlsC,GACrBksC,EAAS1tC,cAAgB7D,EAAMmB,QAC/BowC,EAAS/xC,SAAW,EACpB+xC,EAASp3C,MAAM6C,SAAS2R,KAAKgI,GAC7B,EAAKlX,aAAaI,MAAMlV,IAAI4mD,EAASp3C,OACrC4P,EAAShK,aAAa,IAAIwL,EAAe,IAAIqyC,GAAY59C,EAAMmB,QAASowC,QAE5ExnC,EAASxJ,sBAAsBzB,EAAS2C,mBAAmB,WACvDoI,GAAUkK,uBAEdpoB,KAAK6xD,qBAAuB9jD,YAAY/N,KAAKkyD,aAAa/vC,KAAKniB,MAAOmyD,IAkJ9E,OA/II,YAAAC,MAAA,SAAM7R,EAA0B8R,G,UAC5Bn0C,GAAU6I,cAAgBw5B,EAAUhV,SACpCrtB,GAAUiK,cAAsC,QAAvB,EAAgB,QAAhB,EAAAo4B,EAAU+R,cAAM,eAAElnC,aAAK,eAAES,UAAW,EAC7D3N,GAAUqK,aAAeg4B,EAAU+R,OACnCp0C,GAAUsK,aAAe,IAAI+pC,GAAahS,EAAUuQ,YACpD5yC,GAAUuK,WAAa83B,EAAU93B,WAEjC,IAAM+pC,EAAa3kD,GAAgBynB,IAAI,OAAQ,eAAiB,CAAC,GAAI,GAAI,IACnEm9B,EAAYpsD,KAAKF,IAAI,IAAKE,KAAKD,IAAG,MAARC,K,+EAAI,EAAK,GAAMmsD,KACzCE,EAAgBF,EAAWntD,KAAI,SAAAwJ,GAAK,OAAAA,GAAK4jD,GAAwB,MACjEviC,EAAe,IAAI,MAAMwiC,EAAc,GAAIA,EAAc,GAAIA,EAAc,IACjF1yD,KAAK8T,aAAamc,WAAWC,GAG7BlwB,KAAK8T,aAAaC,QAAU4+C,GAAcrS,YAAYC,EAAWvgD,MACjEA,KAAK8T,aAAaI,MAAMlV,IAAIgB,KAAK8T,aAAaC,QAAQ8Z,YAGtD,IAAM06B,EAAiB16C,GAAgB0X,YAAYg7B,EAAUqS,WAC7DC,GAAiBvK,eAAetoD,KAAMuoD,GAGtCvoD,KAAKuvD,WAAaI,GAAW5gD,MAAMlB,GAAgB0X,YAAYg7B,EAAUuS,YACzE,EAAA9yD,KAAKuvD,WAAW7E,UAAS5/C,KAAI,QAAK+C,GAAgB0X,YAAYg7B,EAAUwS,kBACxE/yD,KAAKuvD,WAAWxF,gBAAkB,WAAM,OAAAsI,EAAW3K,cAGnDxpC,GAAU+J,eAAiBjoB,KAAK8T,aAAaC,QAAQ6qC,SAAS15C,QAAO,SAACb,GAAM,OAAAA,EAAEU,SAAQ,SAACyD,GAAM,OAAAA,EAAEgwC,kBAAc9tC,OAC7GwT,GAAU6J,cAAgB,EAC1B/nB,KAAK8T,aAAaC,QAAQ6qC,SAAS75C,SAAQ,SAACV,GAAM,OAAAA,EAAEU,SAAQ,SAACyD,GAAM,OAAA0V,GAAA,eAA2B1V,EAAE0qC,wBAChGh1B,GAAU8J,UAAY,EACtBhoB,KAAK8T,aAAaC,QAAQ6qC,SAAS75C,SAAQ,SAACV,GAAM,OAAAA,EAAEU,SAAQ,SAACyD,GAAM,OAAA0V,GAAA,WAAuB1V,EAAEyqC,qBAGhG,YAAAxkC,MAAA,W,MACIzO,KAAK8T,aAAawc,aACH,QAAf,EAAAtwB,KAAKuvD,kBAAU,SAAE3E,iBACjB1sC,GAAUmK,eAAiBojC,KAAKuH,OAGpC,YAAAC,KAAA,W,YACI/0C,GAAUoK,cAAgBmjC,KAAKuH,MAChB,QAAf,EAAAhzD,KAAKuvD,kBAAU,SAAEzE,iBACjB9qD,KAAK4xD,oBAAsB9qD,EAAkB9G,KAAK4xD,qBAClD1zC,GAAU0J,QAAQ7iB,SAAQ,SAAC+0C,GAAM,OAAAA,EAAE4N,gBACnCxpC,GAAU4J,KAAK/iB,SAAQ,SAACR,GAAM,OAAAA,EAAEmjD,gBAChCxpC,GAAUgK,mBAAqB,EACK,QAApC,EAA0B,QAA1B,EAAiB,QAAjB,EAAAloB,KAAK8T,oBAAY,eAAEC,eAAO,eAAE6qC,gBAAQ,SAAE75C,SAAQ,SAACV,GAAM,OAAAA,EAAEU,SAAQ,SAACyD,GAAM,OAAA0V,GAAA,oBAAgC1V,EAAEgwC,YAAc,EAAI,QAC1Hx4C,KAAK8T,aAAa6c,gBAGtB,YAAAyT,OAAA,SAAOnhC,EAAeC,GACdlD,KAAK8T,cAAc9T,KAAK8T,aAAa+Y,SAASqmC,QAAQjwD,EAAOC,IAGrE,YAAAiwD,4BAAA,SAA4B5lC,EAAYC,GACpC,IAAKxtB,KAAK8T,aAAaC,QAAS,OAAO,KACvC,IAAM0Z,EAAY,IAAI,MACtBA,EAAUC,cAAc,CAACnqB,EAAGgqB,EAAIjqB,EAAGkqB,GAAKxtB,KAAK8T,aAAakZ,QAC1D,IAAMW,EAAaF,EAAUG,iBAAiB5tB,KAAK8T,aAAaC,QAAQ8Z,WAAWzL,UACnF,OAAOuL,EAAWjjB,OAAS,EAAIijB,EAAW,GAAGylC,MAAQ,MAGzD,YAAAlK,iBAAA,SAAiB73C,GACbrR,KAAK8T,aAAasc,iBAAiB/e,SAAS9N,EAAI8N,EAAS9N,EACzDvD,KAAK8T,aAAasc,iBAAiB/e,SAAS/N,EAAItD,KAAK+5C,eAAe1oC,EAAS9N,EAAG8N,EAAS/N,GAAK,EAAIoe,GAClG1hB,KAAK8T,aAAasc,iBAAiB/e,SAASlI,EAAIkI,EAAS/N,GAG7D,YAAAy2C,eAAA,SAAeC,EAAgBC,GAC3B,IAAMzkC,EAAUxV,KAAK8T,aAAaC,QAAQkrC,sBAAsBjF,EAAQC,GACxE,OAAKzkC,EACEA,EAAQukC,eAAeC,EAAQC,GADjB,GAIzB,YAAArB,iBAAA,SAAiBoB,EAAgBC,GAC7B,IACMoZ,EADY,IAAI,MAAU,IAAI,MAAQ9kC,OAAOyrB,GAAS,EAAIt4B,GAAU6M,OAAO0rB,IAAU,IAAI,MAAQ,GAAI,EAAG,IAClFqZ,gBAAgBtzD,KAAK8T,aAAaC,QAAQ8Z,YAAY,GAClF,OAAIwlC,EAAU3oD,OAAS,EACZ2oD,EAAU,GAAGD,MAAM9vD,GAE1BH,QAAQgL,KAAK,0CAA4C6rC,EAAS,IAAMC,GACjE,IAIf,YAAAlF,eAAA,SAAewe,EAAgCC,GAW3C,OAVAD,EAAY1/C,SAAW7T,KACvBuzD,EAAY/kD,MAAM6C,SAASxJ,IAAI2rD,EAAMjwD,EAAGvD,KAAK+5C,eAAeyZ,EAAMjwD,EAAGiwD,EAAMlwD,GAAIkwD,EAAMlwD,GACrFiwD,EAAY/kD,MAAMmF,QAAU3T,KAAK8T,aAAaC,QAAQC,oBAAoBu/C,EAAY/kD,MAAM6C,UAAU0Z,WACtG/qB,KAAK8T,aAAaI,MAAMlV,IAAIu0D,EAAY/kD,OACpC+kD,EAAY/kD,MAAMmF,SAClBuK,GAAUyB,aAAa7U,KAAKyoD,GAC5Bn1C,EAAShK,aAAa,IAAIwL,EAAe,IAAIC,GAAW0zC,MAExDr1C,GAAUwB,yBAAyB5U,KAAKyoD,GAErCA,GAGX,YAAAzB,kBAAA,WACI,GAAI5zC,GAAUuJ,iBAAmB,EAC7BznB,KAAK4xD,oBAAsB9qD,EAAkB9G,KAAK4xD,0BAGtD,KAAI1zC,GAAUqJ,QAAQ7c,QAAUwT,GAAUmM,iBAE1C,IADA,IAAMopC,EAAiBv1C,GAAUiB,mBAAmBjM,EAASV,YAAaU,EAAST,cAAcvN,QAAO,SAACX,GAAM,OAACA,EAAEkiD,Y,WACzG31C,GACLoN,GAAUuJ,mBACVrJ,EAAShK,aAAa,IAAIs/C,GAC1B,IAAMC,EAAUF,EAAe3iD,GAC/B6iD,EAAQlN,UAAW,EACnB,IAAMvwC,EAAS,IAAIizC,GACnBjzC,EAAOrC,SAAW,EAClBqC,EAAO4H,eAAenF,GAAekB,YAAY,WAC7C85C,EAAQlN,UAAW,EACnBvwC,EAAO4H,iBACP5H,EAAOoN,mBACP,IAAMswC,EAAaD,EAAQpgD,gBAAgBvU,IAAI,IAAI,MAAQ,EAAc,EAAX0iB,GAAe,EAAIjb,EAAUib,GAAW,IACjG+jC,aAAa,IAAI,MAAQ,EAAG,GAAIkO,EAAQngD,aAAe,IAAU,GAAK/M,EAAU,OACrFyP,EAAO+tC,OAAO,IAAI4P,GAAQD,IAC1B11C,GAAUqJ,QAAQzc,KAAKoL,GACvBkI,EAAShK,aAAa,IAAI0wC,EAAiB3wC,EAAW4wC,OAAQ7uC,OAElEA,EAAO1H,MAAM6C,SAAS2R,KAAK2wC,EAAQnlD,MAAM6C,UAAUrS,IAAI,IAAI,MAAQ,EAAG,EAAG0iB,GAAW,GAAGoyC,WAAWH,EAAQnlD,MAAMiF,WAChHyC,EAAO1H,MAAMiF,SAASuP,KAAK2wC,EAAQnlD,MAAMiF,UACzC,EAAKK,aAAaI,MAAMlV,IAAIkX,EAAO1H,Q,OAnB9BsC,EAAI,EAAGA,EAAI2iD,EAAe/oD,QAAUwT,GAAUuJ,iBAAmB,EAAG3W,I,EAApEA,IAuBb,YAAAohD,aAAA,WACI,IAKM6B,GALM71C,GAAUqJ,QAAQliB,KAAI,SAAChB,GAAM,OAAAA,EAAE4M,MAAMsmB,cAAYy8B,QAAO,SAAC5iC,EAAG/sB,GAAM,OAAA+sB,EAAI/sB,IAAG,GACjF6Z,GAAUgB,UAAU7Z,KAAI,SAACd,GAAM,OAAAA,EAAE0M,MAAMsmB,cAAYy8B,QAAO,SAAC5iC,EAAG/sB,GAAM,OAAA+sB,EAAI/sB,IAAG,IAI5D6Z,GAAUuK,WAHN,KACA,IAEqD0pC,GADxD,KAC4F,GAC5G4B,IACA71C,GAAUiJ,SAAW9gB,KAAKF,IAAI,EAAGE,KAAKD,IAAI,EAAG8X,GAAUiJ,SAAW4sC,IAClE31C,EAAShK,aAAa,IAAI6/C,MAItC,EA/KA,G,0dCvBA,eAKI,mBACI,aAAM,IAAK,K,OAHf,EAAAC,YAAwC,K,EA2D5C,OA9DoC,QAShC,YAAAttC,MAAA,WACI,YAAMA,MAAK,WACX5mB,KAAKk0D,YAAc,MAGvB,YAAAC,gBAAA,SAAgBC,GACZp0D,KAAKo0D,aAAeA,GAGxB,YAAAvvB,mBAAA,SAAmBC,EAA0BzwB,GACnC,MAAWrU,KAAKwkC,eAAenwB,EAAMyyB,QAASzyB,EAAM0yB,SAAnDzB,EAAE,KAAEC,EAAE,KACb,GAAIT,IAAc5O,GAAcsQ,MAC5B,GAAInyB,EAAM4yB,SAAWhR,GAAaiW,KAAM,OAAOlsC,KAAKq0D,eAAe/uB,EAAIC,OACpE,IAAIT,IAAc5O,GAAcqQ,KACnC,OAAOvmC,KAAKs0D,gBAAgBhvB,EAAIC,GAC7B,GAAIT,IAAc5O,GAAcuQ,IAC/BpyB,EAAM4yB,SAAWhR,GAAaiW,KAAM,OAAOlsC,KAAKypB,eAAe6b,EAAIC,GAE3E,OAAO,GAGX,YAAA8uB,eAAA,SAAeE,EAAiBC,GAE5B,OADAx0D,KAAKk0D,YAAc,CAAC3wD,EAAGgxD,EAASjxD,EAAGkxD,IAC5B,GAGX,YAAAF,gBAAA,SAAgBC,EAAiBC,GAC7B,QAAKx0D,KAAKk0D,cACVl0D,KAAK4D,QAAQ6wD,UAAU,EAAG,EAAGz0D,KAAK2D,OAAOV,MAAOjD,KAAK2D,OAAOT,QAC5DlD,KAAK4D,QAAQ8wD,YAAc,2BAC3B10D,KAAK4D,QAAQ+wD,UAAY,EACzB30D,KAAK4D,QAAQgxD,WAAW50D,KAAKk0D,YAAY3wD,EAAGvD,KAAKk0D,YAAY5wD,EAAGixD,EAAUv0D,KAAKk0D,YAAY3wD,EAAGixD,EAAUx0D,KAAKk0D,YAAY5wD,IAClH,IAGX,YAAAmmB,eAAA,SAAe8qC,EAAiBC,GAC5B,IAAKx0D,KAAKk0D,YAAa,OAAO,EAC9Bl0D,KAAK4D,QAAQ6wD,UAAU,EAAG,EAAGz0D,KAAK2D,OAAOV,MAAOjD,KAAK2D,OAAOT,QAC5D,IAAM+qB,EAAOjuB,KAAKk0D,YAAY3wD,EAAIvD,KAAK2D,OAAOV,MAAS,EAAI,EACrDirB,GAAQluB,KAAKk0D,YAAY5wD,EAAItD,KAAK2D,OAAOT,OAAU,EAAI,EACvDirB,EAAOomC,EAAUv0D,KAAK2D,OAAOV,MAAS,EAAI,EAC1CmrB,GAAQomC,EAAUx0D,KAAK2D,OAAOT,OAAU,EAAI,EAClD,GAAImD,KAAKy2C,IAAIyX,EAAUv0D,KAAKk0D,YAAY3wD,GAAK,GAAK8C,KAAKy2C,IAAI0X,EAAUx0D,KAAKk0D,YAAY5wD,GAAK,EAAG,CAC1F,IAAMC,GAAKvD,KAAKk0D,YAAY3wD,EAAIgxD,GAAWv0D,KAAK2D,OAAOV,MAAQ,EACzDK,IAAMtD,KAAKk0D,YAAY5wD,EAAIkxD,GAAWx0D,KAAK2D,OAAOT,OAAS,EACjElD,KAAKo0D,aAAatgD,aAAawZ,oBAAoB/pB,EAAGD,QAEtDtD,KAAKo0D,aAAatgD,aAAaka,wBAAwBC,EAAKC,EAAKC,EAAKC,GAG1E,OADApuB,KAAKk0D,YAAc,MACZ,GAGf,EA9DA,CAAoCxuB,I,0dCGpC,eAEI,WAAYlwB,GAAZ,MACI,YAAMa,GAAQ49B,MAAOz+B,IAAQ,K,OAC7B,EAAKnJ,MAAQ,SACb,EAAKq9C,aAAevF,GAAWlQ,MAC/B,EAAKz+B,QAAUA,E,EAgBvB,OAtB8B,QAS1B,YAAAkC,cAAA,WACI,OAAO1X,KAAKwV,QAAQuP,kBAAkB1f,KAAI,SAAC0d,GAAM,WAAIpL,GAAWoL,OAGpE,YAAA9L,cAAA,WACI,YAAMA,cAAa,WACnBjX,KAAKwV,QAAQ4P,YAGjB,YAAAtN,sBAAA,WACI,OAAOmI,GAAmB2pC,uBAGlC,EAtBA,CAA8BC,I,0dCA9B,eAEI,WAAYr0C,GAAZ,MACI,YAAMa,GAAQsvC,aAAcnwC,IAAQ,K,OACpC,EAAKk0C,aAAevF,GAAWE,OAC/B,EAAK7uC,QAAUA,E,EAiBvB,OAtBoC,QAQhC,YAAAkC,cAAA,WACI,IAAMo8B,EAAkB9zC,KAAKwV,QAAQs+B,gBACrC,OAAOA,EAAgBppC,OAAS,EAAI,CAAC,IAAIiN,GAAWm8B,EAAgB,KAAO,IAG/E,YAAA78B,cAAA,WACI,YAAMA,cAAa,WACnBjX,KAAKwV,QAAQggC,gBAGjB,YAAA19B,sBAAA,WACI,OAAOmI,GAAmB40C,oBAGlC,EAtBA,CAAoChL,I,0dCWpC,eAKI,mBACI,aAAM,GAAO,IAAM,K,OAHf,EAAAiL,UAAsC,CAACvxD,EAAG,EAAGD,EAAG,G,EA0F5D,OA7F+B,QAS3B,YAAAsjB,MAAA,WACI,YAAMA,MAAK,WACX5mB,KAAK80D,UAAY,CAACvxD,EAAG,EAAGD,EAAG,IAG/B,YAAA6wD,gBAAA,SAAgBtgD,GACZ7T,KAAK6T,SAAWA,GAGpB,YAAAgxB,mBAAA,SAAmBC,EAA0BzwB,GACzC,GAAIywB,IAAc5O,GAAcqQ,KAAM,CAClC,IAAMwuB,EAAoB/0D,KAAKg1D,4BAA4B3gD,GACvD0gD,GAAmB/0D,KAAK6T,SAASq1C,iBAAiB6L,QACnD,GAAIjwB,IAAc5O,GAAcuQ,IAAMpyB,EAAM4yB,SAAWhR,GAAag/B,WAEvE,GADuB5uD,KAAKy2C,IAAIzoC,EAAM9Q,EAAIvD,KAAK80D,UAAUvxD,GAAK8C,KAAKy2C,IAAIzoC,EAAM/Q,EAAItD,KAAK80D,UAAUxxD,GAC3E,IAAM4a,GAAUmJ,gBAAkBje,EAAcod,OAAStI,GAAUmJ,gBAAkBje,EAAc+gB,OAAQ,CAE5H,IAAM,EAAoBnqB,KAAKg1D,4BAA4B3gD,GAC3D,GAAI,EAAmB,CACnB,IAAMmB,EAAUxV,KAAK6T,SAASC,aAAaC,QAAQkrC,sBAAsB,EAAkB17C,EAAG,EAAkBD,GAC5GkS,IACIA,EAAQ6iC,cACRr4C,KAAKk1D,iBAAiB,IAAIC,GAAS3/C,GAAUA,EAAS,GAC/CA,EAAQ2iC,YACfn4C,KAAKk1D,iBAAiB,IAAIE,GAAe5/C,GAAUA,EAAS,GACrDA,EAAQ4iC,eACfl6B,GAAUkJ,iBAAiBriB,SAAQ,SAACmR,GAAmB,OAAAA,EAAO+tC,OAAO,IAAI4P,GAAQ,OAC7E31C,GAAUkJ,iBAAiB1c,OAAS,GAAG0T,EAAShK,aAAa,IAAImN,aAK9EujB,IAAc5O,GAAcsQ,MAAQnyB,EAAM4yB,SAAWhR,GAAag/B,YACzEj1D,KAAK80D,UAAUvxD,EAAI8Q,EAAM9Q,EACzBvD,KAAK80D,UAAUxxD,EAAI+Q,EAAM/Q,GAG7B,OADAtD,KAAK2D,OAAO0xD,cAAchhD,IACnB,GAGX,YAAA0wB,eAAA,SAAeD,EAAsBzwB,GACjC,SAAIihD,IAAYxwB,IAAc3O,GAAUsQ,IAChCvoB,GAAUmJ,gBAAkBje,EAAcgjB,UAC1ClO,GAAUkJ,iBAAiBriB,SAAQ,SAACyD,GAChC,GAAkB,MAAd6L,EAAMlP,IACDqD,EAAEuqC,YAAYxsC,OAAOiC,EAAE4c,gBACzB,GAAkB,MAAd/Q,EAAMlP,IAAa,CAC1B,IAAMoa,EAAI/W,EAAEuL,QAAQmlC,iBAAiB1wC,EAAEjF,EAAGiF,EAAElF,GACvCkF,EAAEuqC,YAAYxsC,OAAOiC,EAAE8wC,aAAa/5B,EAAE,GAAIA,EAAE,QAGzDnB,EAAShK,aAAa,IAAImN,IACnB,KAMnB,YAAA2zC,iBAAA,SAAiBK,EAAqB//C,EAAkBu/C,GACpD72C,GAAUkJ,iBAAiBriB,SAAQ,SAACf,GAC5BuxD,EAAQz+C,YAAY9S,GACpBA,EAAEigD,OAAOsR,GACF//C,EAAQ4iC,cACfp0C,EAAEigD,OAAO,IAAI4P,GAAQkB,OAG7B32C,EAAShK,aAAa,IAAIwL,EAAe21C,IACzC//C,EAAQ+/B,iBACJr3B,GAAUkJ,iBAAiB1c,OAAS,GAAG0T,EAAShK,aAAa,IAAImN,KAGzE,YAAAyzC,4BAAA,SAA4B3gD,GAClB,MAAWrU,KAAKwkC,eAAenwB,EAAMyyB,QAASzyB,EAAM0yB,SAAnDzB,EAAE,KAAEC,EAAE,KACPhY,EAAM+X,EAAKtlC,KAAK2D,OAAOV,MAAS,EAAI,EACpCuqB,GAAO+X,EAAKvlC,KAAK2D,OAAOT,OAAU,EAAI,EACtC6xD,EAAoB/0D,KAAK6T,SAASs/C,4BAA4B5lC,EAAIC,GACxE,OAAOunC,EAAoB,IAAI,MAAQA,EAAkBxxD,EAAGwxD,EAAkB5rD,GAAK,MAGvF,YAAA67B,iBAAA,SAAiB3wB,GAEb,OADArU,KAAK2D,OAAO0xD,cAAchhD,IACnB,GAGf,EA7FA,CAA+BqxB,IClB/B,cAeI,WAAYplC,QAAA,IAAAA,MAAA,MAbZ,KAAAA,OAAsB,KACtB,KAAAiD,EAAY,EACZ,KAAAD,EAAY,EACZ,KAAAkyD,KAAe,EACf,KAAAC,KAAe,EACf,KAAAxyD,MAAgB,EAChB,KAAAC,OAAiB,EACjB,KAAAkf,SAA0B,GAC1B,KAAAszC,QAAkB,EAClB,KAAAt0D,UAAoB,EACpB,KAAAsoC,OAAiB,EACjB,KAAAC,SAAmB,EAGf3pC,KAAKM,OAASA,EAsGtB,OAnGI,YAAAsmB,MAAA,WACI5mB,KAAK01D,QAAS,EACd11D,KAAKoB,UAAW,EAChBpB,KAAK0pC,OAAQ,EACb1pC,KAAK2pC,SAAU,EACf3pC,KAAKoiB,SAASrd,SAAQ,SAAC+L,GAAM,OAAAA,EAAE8V,YAGnC,YAAA+uC,SAAA,SAAgCC,GAI5B,OAHAA,EAAMt1D,OAASN,KACfA,KAAKoiB,SAAStX,KAAK8qD,GACnBA,EAAMC,iBACCD,GAGX,YAAAtxB,SAAA,SAAS1gC,GACD5D,KAAK01D,SACT11D,KAAKoiB,SAASrd,SAAQ,SAAC6wD,GAAU,OAAAA,EAAMtxB,SAAS1gC,MAChD5D,KAAKoiB,SAASrd,SAAQ,SAAC6wD,GAAU,OAAAA,EAAME,UAAUlyD,MACjD5D,KAAKoiB,SAASrd,SAAQ,SAAC6wD,GAAU,OAAAA,EAAMG,YAAYnyD,QAGvD,YAAAkyD,UAAA,SAAUlyD,KAGV,YAAAmyD,YAAA,SAAYnyD,KAGZ,YAAAoyD,QAAA,aAGA,YAAAC,WAAA,WACI,IAAK,IAAI,EAASj2D,KAAKM,OAAU,EAAQ,EAAS,EAAOA,OAAQ,GAAI,EAAO21D,aAAc,OAAO,EACjG,OAAOj2D,KAAK01D,QAAU11D,KAAKoB,UAG/B,YAAAyB,KAAA,WACI7C,KAAK01D,QAAS,EACd11D,KAAKoiB,SAASrd,SAAQ,SAAC6wD,GAAU,OAAAA,EAAM/yD,WAG3C,YAAAD,KAAA,WACI5C,KAAK01D,QAAS,EACd11D,KAAKoiB,SAASrd,SAAQ,SAAC6wD,GAAU,OAAAA,EAAMhzD,WAG3C,YAAAizD,eAAA,WACI71D,KAAKuD,EAAIvD,KAAKM,OAASN,KAAKM,OAAOiD,EAAIvD,KAAKw1D,KAAOx1D,KAAKw1D,KACxDx1D,KAAKsD,EAAItD,KAAKM,OAASN,KAAKM,OAAOgD,EAAItD,KAAKy1D,KAAOz1D,KAAKy1D,KACxDz1D,KAAKoiB,SAASrd,SAAQ,SAAC6wD,GAAU,OAAAA,EAAMC,qBAG3C,YAAAxvB,SAAA,SAASf,EAAIC,GACT,OAAOD,GAAMtlC,KAAKuD,GAAKgiC,GAAMvlC,KAAKsD,GAAKgiC,EAAKtlC,KAAKuD,EAAIvD,KAAKiD,OAASsiC,EAAKvlC,KAAKsD,EAAItD,KAAKkD,QAG1F,YAAA4mC,WAAA,SAAWxE,EAAIC,GACX,GAAIvlC,KAAKi2D,aAAc,OAAO,EAC9B,IAAMC,EAASl2D,KAAKqmC,SAASf,EAAIC,GAC7B4wB,EAAen2D,KAAK0pC,QAAUwsB,EAKlC,OAJAl2D,KAAK0pC,MAAQwsB,EACbl2D,KAAK2pC,QAAU3pC,KAAK2pC,SAAW3pC,KAAK0pC,MAEpC1pC,KAAKoiB,SAASrd,SAAQ,SAAC6wD,GAAU,OAAAO,EAAeP,EAAM9rB,WAAWxE,EAAIC,IAAO4wB,KACrEA,GAGX,YAAAC,WAAA,SAAW9wB,EAAIC,GACX,GAAIvlC,KAAKi2D,aAAc,OAAO,EAC9B,IAAMC,EAASl2D,KAAKqmC,SAASf,EAAIC,GAC7B4wB,EAAen2D,KAAK2pC,UAAYusB,EAGpC,OAFAl2D,KAAK2pC,QAAUusB,EACfl2D,KAAKoiB,SAASrd,SAAQ,SAAC6wD,GAAU,OAAAO,EAAeP,EAAMQ,WAAW9wB,EAAIC,IAAO4wB,KACrEA,GAGX,YAAAE,aAAA,SAAa/wB,EAAIC,GACb,GAAIvlC,KAAKi2D,aAAc,OAAO,EACfj2D,KAAKqmC,SAASf,EAAIC,IACnBvlC,KAAK2pC,SAAS3pC,KAAKg2D,UACjC,IAAIG,GAAe,EAInB,OAHAn2D,KAAKoiB,SAASrd,SAAQ,SAAC6wD,GAAU,OAAAO,EAAeP,EAAMS,aAAa/wB,EAAIC,IAAO4wB,KAC9EA,EAAen2D,KAAK2pC,SAAWwsB,EAC/Bn2D,KAAK2pC,SAAU,EACRwsB,GAGX,YAAAG,QAAA,WACI,IAAIH,EAAen2D,KAAK2pC,SAAW3pC,KAAK0pC,MAIxC,OAHA1pC,KAAK2pC,SAAU,EACf3pC,KAAK0pC,OAAQ,EACb1pC,KAAKoiB,SAASrd,SAAQ,SAAC6wD,GAAU,OAAAO,EAAeP,EAAMU,WAAaH,KAC5DA,GAGX,YAAAI,aAAA,WACQv2D,KAAKM,QAAQN,KAAKM,OAAOi2D,gBAGrC,EAtHA,G,0dCMA,eAUI,WAAY/nB,GAAZ,MACI,cAAO,K,OATX,EAAA/Z,IAAyB,KACzB,EAAA+hC,KAAe,EACf,EAAAC,KAAe,EACf,EAAAC,IAAc,EACd,EAAAC,IAAc,EACd,EAAA51C,iBAAmB,KACnB,EAAA61C,SAAmB,EAIXpoB,IACA,EAAK/Z,IAAM5mB,GAAgB+0B,SAAS4L,EAAS9sC,UAC7C,EAAK80D,KAAOhoB,EAASgoB,KACrB,EAAKC,KAAOjoB,EAASioB,KACrB,EAAKC,IAAMloB,EAASkoB,IACpB,EAAKC,IAAMnoB,EAASmoB,IACpB,EAAKnB,KAAO,EAAKkB,IACjB,EAAKjB,KAAO,EAAKkB,K,EA4D7B,OA/E2B,QAuBvB,YAAA/vC,MAAA,WACI,YAAMA,MAAK,WACX5mB,KAAK+gB,iBAAmBpa,EAAiB3G,KAAK+gB,kBAC9C/gB,KAAKw1D,KAAOx1D,KAAK02D,IACjB12D,KAAKy1D,KAAOz1D,KAAK22D,IACjB32D,KAAK42D,SAAU,EACf52D,KAAK61D,kBAGT,YAAAI,WAAA,WACI,OAAOj2D,KAAK+gB,kBAAoB,YAAMk1C,WAAU,YAGpD,YAAAY,WAAA,SAAWD,EAAkBE,QAAA,IAAAA,MAAA,MACrB92D,KAAK42D,UAAYA,EACjB52D,KAAK+2D,YAAYD,GACVA,GACPA,KAIR,YAAAC,YAAA,SAAYD,QAAA,IAAAA,MAAA,MACR92D,KAAK+gB,iBAAmBpa,EAAiB3G,KAAK+gB,kBAC1C/gB,KAAK42D,SACL52D,KAAK42D,SAAU,EACf52D,KAAKg3D,gBAAgBh3D,KAAKw2D,KAAMx2D,KAAKy2D,KAAMQ,GAA4BH,KAEvE92D,KAAK42D,SAAU,EACf52D,KAAKg3D,gBAAgBh3D,KAAK02D,IAAK12D,KAAK22D,IAAKM,GAA4BH,KAInE,YAAAE,gBAAV,SAA0B5d,EAAiBC,EAAiB6d,EAAeJ,GACvE,IAAMK,EAAQ/d,EAAUp5C,KAAKw1D,KACvB4B,EAAQ/d,EAAUr5C,KAAKy1D,KAC7B,GAAIpvD,KAAKy2C,IAAIqa,IAAUD,GAAS7wD,KAAKy2C,IAAIsa,IAAUF,EAC/Cl3D,KAAKw1D,KAAOpc,EACZp5C,KAAKy1D,KAAOpc,EACZr5C,KAAK+gB,iBAAmB,KACpB+1C,GAAQA,QACT,CACH92D,KAAKw1D,MAAQnvD,KAAK+d,MAAM/d,KAAKimC,KAAK6qB,GAAS9wD,KAAK42C,KAAK52C,KAAKy2C,IAAIqa,IAAUD,GACxEl3D,KAAKy1D,MAAQpvD,KAAK+d,MAAM/d,KAAKimC,KAAK8qB,GAAS/wD,KAAK42C,KAAK52C,KAAKy2C,IAAIsa,IAAUF,GACxE,IAAM,EAAQl3D,KACdA,KAAK+gB,iBAAmBc,YAAW,WAAM,SAAMm1C,gBAAgB5d,EAASC,EAAS6d,EAAOJ,KAAS,IAAOl1C,IAE5G5hB,KAAK61D,iBACL71D,KAAKu2D,gBAGT,YAAAjyB,SAAA,SAAS1gC,GACD5D,KAAK01D,SACL11D,KAAKy0B,KAAK7wB,EAAQwlC,UAAUppC,KAAKy0B,IAAKz0B,KAAKuD,EAAGvD,KAAKsD,GACvD,YAAMghC,SAAQ,UAAC1gC,KAGvB,EA/EA,CAA2ByzD,I,0dCF3B,eASI,WAAY/2D,EAAqBg3D,G,cAAjC,EACI,YAAMh3D,IAAO,K,OARjB,EAAAi3D,WAAqB,KACrB,EAAA3sB,UAA+B,KAC/B,EAAAC,SAA8B,KAC9B,EAAAC,WAAgC,KAChC,EAAA0sB,YAAiC,KACjC,EAAAzsB,QAAkB,KAId,EAAKwsB,WAAaD,EAAOC,WACzB,EAAK3sB,UAAY/8B,GAAgBg1B,eAAey0B,EAAOG,YACvD,EAAK5sB,SAAWh9B,GAAgBg1B,eAAey0B,EAAOI,eACtD,EAAK5sB,WAAaj9B,GAAgBg1B,eAAey0B,EAAOK,aACxD,EAAKH,YAAc3pD,GAAgBg1B,eAAey0B,EAAOM,cACzD,EAAKpC,KAAO8B,EAAO9B,KACnB,EAAKC,KAAO6B,EAAO7B,KACnB,EAAKxyD,MAAQq0D,EAAOr0D,QAAuB,QAAd,IAAK2nC,iBAAS,eAAE3nC,SAAwB,QAAf,IAAK6nC,kBAAU,eAAE7nC,OACvE,EAAKC,OAASo0D,EAAOp0D,SAAwB,QAAd,IAAK0nC,iBAAS,eAAE1nC,UAAyB,QAAf,IAAK4nC,kBAAU,eAAE5nC,QAC1E,EAAK6nC,QAAwB,QAAd,EAAAusB,EAAOvsB,eAAO,eAAEtlC,QAAQ,KAAM,KAC7C,EAAKowD,iB,EA6Cb,OAlE4B,QAwBxB,YAAAG,QAAA,WACI7yD,QAAQyG,IAAI,mBAAqB5J,KAAKu3D,aAG1C,YAAAztB,WAAA,SAAWxE,EAAIC,GACX,IAAM4wB,EAAe,YAAMrsB,WAAU,UAACxE,EAAIC,GAE1C,OADI4wB,GAAcn2D,KAAKu2D,eAChBJ,GAGX,YAAAC,WAAA,SAAW9wB,EAAIC,GACX,IAAM4wB,EAAe,YAAMC,WAAU,UAAC9wB,EAAIC,GAE1C,OADI4wB,GAAcn2D,KAAKu2D,eAChBJ,GAGX,YAAAE,aAAA,SAAa/wB,EAAIC,GACb,IAAM4wB,EAAe,YAAME,aAAY,UAAC/wB,EAAIC,GAE5C,OADI4wB,GAAcn2D,KAAKu2D,eAChBJ,GAGX,YAAAG,QAAA,WACI,IAAMH,EAAe,YAAMG,QAAO,WAElC,OADIH,GAAcn2D,KAAKu2D,eAChBJ,GAGX,YAAA7xB,SAAA,SAAS1gC,GACL,IAAI5D,KAAK01D,OAAT,CACA,IAAIjhC,EAAMz0B,KAAK4qC,UACX5qC,KAAKoB,SACLqzB,EAAMz0B,KAAKw3D,aAAex3D,KAAK8qC,YAAc9qC,KAAK4qC,UAC3C5qC,KAAK2pC,QACZlV,EAAMz0B,KAAK8qC,YAAc9qC,KAAK4qC,UACvB5qC,KAAK0pC,QACZjV,EAAMz0B,KAAK6qC,UAAY7qC,KAAK4qC,WAE5BnW,GAAK7wB,EAAQwlC,UAAU3U,EAAKz0B,KAAKuD,EAAGvD,KAAKsD,GAC7C,YAAMghC,SAAQ,UAAC1gC,KAGvB,EAlEA,CAA4ByzD,I,0dCD5B,eAKI,WAAY/2D,EAAqBg3D,EAAmB9sB,GAApD,MACI,YAAMlqC,IAAO,K,OACb,EAAKk1D,KAAO8B,EAAO9B,KACnB,EAAKC,KAAO6B,EAAO7B,KACnB,EAAKxyD,MAAQq0D,EAAOr0D,MACpB,EAAKC,OAASo0D,EAAOp0D,OACrB,EAAK6nC,QAAUusB,EAAOvsB,QACtB,EAAKP,MAAQA,EACb,EAAKqrB,iB,EAYb,OAzBkC,QAgB9B,YAAAvxB,SAAA,SAAS1gC,GACD5D,KAAK01D,SACT9xD,EAAQi0D,UAAY,SACpBj0D,EAAQklC,KAAO,kBACfllC,EAAQJ,UAAY,OACpBI,EAAQmlC,SAAS/oC,KAAKwqC,MAAOxqC,KAAKuD,EAAIvD,KAAKiD,MAAQ,EAAGjD,KAAKsD,EAAItD,KAAKkD,OAAS,GAC7E,YAAMohC,SAAQ,UAAC1gC,KAGvB,EAzBA,CAAkCyzD,I,0dCSlC,eASI,WAAY7oB,EAAoBspB,GAAhC,MACI,YAAMtpB,IAAS,K,OACf,EAAKupB,SAAW,EAAKpC,SAAS,IAAIqC,GAAa,EAAMF,EAAWG,6BAA8B/5C,GAAUg6C,SAAS1yD,aACjH,EAAK2yD,aAAe,EAAKxC,SAAS,IAAIqC,GAAa,EAAMF,EAAWM,kCAAmCl6C,GAAUC,WAAW3Y,aAC5H,EAAK6yD,aAAexqD,GAAgB+0B,SAAS,2CAC7C,EAAK01B,gBAAkBzqD,GAAgB+0B,SAAS,yCAChD,EAAK21B,eAAiB1qD,GAAgB+0B,SAAS,wCAC/C,EAAK41B,OAAS3qD,GAAgB+0B,SAAS,+CACvCxkB,EAASxJ,sBAAsBzB,EAASoC,yBAAyB,SAAClB,GAC9D,EAAKokD,iBAAiBpkD,EAAMiB,oB,EAoCxC,OAtDyC,QAsBrC,YAAAmjD,iBAAA,SAAiB/3D,GACTA,IAAS0W,GAAgB6G,SAAWvd,IAAS0W,GAAgBkH,KAAO5d,IAAS0W,GAAgBiwC,OAC7FrnD,KAAKu2D,gBAIb,YAAAjyB,SAAA,SAAS1gC,GACL5D,KAAK+3D,SAASvtB,MAAQtsB,GAAUg6C,SAAS1yD,WACzCxF,KAAKm4D,aAAa3tB,MAAQtsB,GAAUC,WAAW3Y,WAC/C,YAAM8+B,SAAQ,UAAC1gC,GAIf,IAFA,IAAI80D,EAAO14D,KAAKuD,EAAIvD,KAAKy0B,IAAIxxB,MAAQ,EACjC01D,EAAO34D,KAAKsD,EAAItD,KAAKy0B,IAAIvxB,OAAS,GAC7B4N,EAAI,GAAIoN,GAAUgJ,eAAiB,GAAKpW,EAAIzK,KAAKD,IAAI8X,GAAUgJ,eAAgBhJ,GAAUC,cAAgBw6C,GAAQtyD,KAAKD,IAAIpG,KAAKq4D,aAAan1D,OAAQlD,KAAKs4D,gBAAgBp1D,OAAQlD,KAAKu4D,eAAer1D,QAAS4N,IAAK,CACxN,IAAI8nD,EAAa54D,KAAKq4D,aAClBn6C,GAAU+I,aAAenW,EACzB8nD,EAAa54D,KAAKu4D,eACXr6C,GAAUC,WAAarN,IAC9B8nD,EAAa54D,KAAKs4D,iBAEtBK,GAAQC,EAAW11D,OACnBU,EAAQwlC,UAAUwvB,EAAYF,EAAOE,EAAW31D,MAAQ,EAAG01D,GAG/DD,EAAO14D,KAAKuD,EAAIvD,KAAKy0B,IAAIxxB,MAAQ,GACjC01D,EAAO34D,KAAKsD,EAAItD,KAAKy0B,IAAIvxB,OAAS,GAClC,IAAK,IAAIgH,EAAI,EAAGA,EAAIgU,GAAUK,QAAUo6C,GAAQ34D,KAAKw4D,OAAOt1D,SAAUgH,EAClEyuD,GAAQ34D,KAAKw4D,OAAOt1D,OACpBU,EAAQwlC,UAAUppC,KAAKw4D,OAAQE,EAAO14D,KAAKw4D,OAAOv1D,MAAQ,EAAG01D,IAIzE,EAtDA,CAAyCE,IAwDzC,eAKI,WAAYviC,GAAZ,MACI,cAAO,K,OAJX,EAAA2hC,6BAA0C,KAC1C,EAAAG,kCAA+C,KAI3CjgC,GAAW/B,WAAW,EAAME,G,EAOpC,OAd6C,QAUzC,YAAAS,WAAA,SAAWP,EAAqBG,GAC5B,OAAO,IAAImiC,GAAUniC,IAG7B,EAdA,CAA6CwB,I,0dCjE7C,eAKI,WAAY7B,GAAZ,MACI,cAAO,K,OAJX,EAAAyiC,wBAAqC,KACrC,EAAAC,yBAAsC,KAIlC7gC,GAAW/B,WAAW,EAAME,G,EAOpC,OAduC,QAUnC,YAAAS,WAAA,SAAWP,EAAqBG,GAC5B,OAAO,IAAImiC,GAAUniC,IAG7B,EAdA,CAAuCwB,I,0dCAvC,eAOI,WAAY7B,GAAZ,MACI,cAAO,K,OANX,EAAA2iC,+BAA8C,GAC9C,EAAAC,6BAA4C,GAC5C,EAAAC,6BAA0C,KAC1C,EAAAC,6BAA0C,KAItCjhC,GAAW/B,WAAW,EAAME,G,EAmBpC,OA5B2C,QAYvC,YAAAI,YAAA,SAAYD,EAAQD,EAAaG,GAC7B,OAAIH,EAAY5oB,MAAM,uCAClB5N,KAAKi5D,+BAA+BnuD,KAAK9K,KAAK+2B,WAAWP,EAAaG,KAC/D,GACAH,EAAY5oB,MAAM,qCACzB5N,KAAKk5D,6BAA6BpuD,KAAK9K,KAAK+2B,WAAWP,EAAaG,KAC7D,GAEA,YAAMD,YAAW,UAACD,EAAQD,EAAaG,IAItD,YAAAI,WAAA,SAAWP,EAAqBG,GAC5B,OAAO,IAAImiC,GAAUniC,IAG7B,EA5BA,CAA2CwB,I,0dCA3C,eAMI,WAAY7B,GAAZ,MACI,cAAO,K,OALX,EAAA+iC,8BAA2C,KAC3C,EAAAC,2BAAwC,KACxC,EAAAC,8BAA2C,KAIvCphC,GAAW/B,WAAW,EAAME,G,EAOpC,OAfkC,QAW9B,YAAAS,WAAA,SAAWP,EAAqBG,GAC5B,OAAO,IAAImiC,GAAUniC,IAG7B,EAfA,CAAkCwB,I,0dCIlC,eAWI,WAAY7B,GAAZ,MACI,cAAO,K,OAVX,EAAAkjC,WAA6B,KAC7B,EAAAC,oBAA+C,KAC/C,EAAAC,cAA8B,KAC9B,EAAAC,iBAAyC,KACzC,EAAAC,kBAA2C,KAC3C,EAAAC,mBAA6C,KAC7C,EAAAC,cAAmC,KACnC,EAAAC,kBAAyB,KAIrB5hC,GAAW/B,WAAW,EAAME,G,EA2BpC,OAxCgC,QAgB5B,YAAAS,WAAA,SAAWP,EAAqBG,GAC5B,IAAMqjC,EAAc,GAEpB,OADArjC,EAAS5xB,SAAQ,SAAAk1D,GAAO,OAAAD,EAAYC,EAAI,IAAMA,KAC1CzjC,IAAgB,aAAapxB,cACtB,IAAI80D,GAAeF,GACnBxjC,IAAgB,sBAAsBpxB,cACtC,IAAI+0D,GAAwBH,GAC5BxjC,IAAgB,gBAAgBpxB,cAChC,IAAIg1D,GAAaJ,GACjBxjC,IAAgB,mBAAmBpxB,cACnC,IAAIi1D,GAAqBL,GACzBxjC,IAAgB,oBAAoBpxB,cACpC,IAAIk1D,GAAsBN,GAC1BxjC,IAAgB,qBAAqBpxB,cACrC,IAAIm1D,GAAuBP,GAC3BxjC,IAAgB,gBAAgBpxB,cAChC,IAAIo1D,GAAkBR,GACtBxjC,IAAgB,oBAAoBpxB,cACpC,KAEA40D,GAInB,EAxCA,CAAgC7hC,IA0ChC,eAKI,WAAY7B,GAAZ,MACI,cAAO,K,OAJX,EAAAmkC,6BAA0C,KAC1C,EAAAC,+BAA4C,KAIxCviC,GAAW/B,WAAW,EAAME,G,EAOpC,OAd0C,QAUtC,YAAAS,WAAA,SAAWP,EAAqBG,GAC5B,OAAO,IAAImiC,GAAUniC,IAG7B,EAdA,CAA0CwB,IAgB1C,eAOI,WAAY7B,GAAZ,MACI,cAAO,K,OANX,EAAAqkC,+BAA4C,KAC5C,EAAAC,gCAA6C,KAC7C,EAAAC,uCAAoD,KACpD,EAAAC,+BAA4C,KAIxC3iC,GAAW/B,WAAW,EAAME,G,EAOpC,OAhB4C,QAYxC,YAAAS,WAAA,SAAWP,EAAqBG,GAC5B,OAAO,IAAImiC,GAAUniC,IAG7B,EAhBA,CAA4CwB,IAkB5C,cAEI,KAAAo/B,WAAsB,KACtB,KAAAE,WAAsB,KACtB,KAAAC,cAAyB,KACzB,KAAAC,YAAuB,KACvB,KAAAC,aAAwB,KACxB,KAAApC,KAAgB,EAChB,KAAAC,KAAgB,EAChB,KAAAxyD,MAAiB,EACjB,KAAAC,OAAkB,EAClB,KAAA6nC,QAAmB,MAGvB,eAEI,WAAYpU,GAAZ,MACI,cAAO,KACP,GAAwB,IAApBA,EAASjsB,OAGT,KAAM,gCAAkCisB,EAASjsB,OAAS,mD,OAFzD,EAAK6sD,WAAkI5gC,EAAQ,GAA9H,EAAK8gC,WAAiH9gC,EAAQ,GAA7G,EAAK+gC,cAAgG/gC,EAAQ,GAAzF,EAAKghC,YAA4EhhC,EAAQ,GAAvE,EAAK6+B,KAA0D7+B,EAAQ,GAA5D,EAAK8+B,KAA+C9+B,EAAQ,GAAjD,EAAK1zB,MAAoC0zB,EAAQ,GAArC,EAAKzzB,OAAwByzB,EAAQ,GAAxB,EAAKoU,QAAWpU,EAAQ,G,EAM5J,OAX+B,QAW/B,EAXA,CAA+BokC,IAa/B,eAEI,WAAYC,GAAZ,MACI,cAAO,K,OACP,EAAKvD,WAAauD,EAClB,EAAKtD,cAAgBsD,EACrB,EAAKrD,YAAcqD,EACnB,EAAKpD,aAAeoD,EACpB,EAAKxF,KAAO,EACZ,EAAKC,KAAO,E,EAGpB,OAZmC,QAYnC,EAZA,CAAmCsF,I,0dCxGnC,eAQI,WAAYvsB,EAAoBysB,EAAwBC,EAA2BpD,GAAnF,MACI,YAAMtpB,IAAS,K,OACf,EAAK0b,KAAO,EAAKyL,SAAS,IAAIkD,GAAMoC,IAEpC,EAAK/Q,KAAKsL,KAAO,EAAKA,KAAO,EAAKtL,KAAKsL,KACvC,EAAKtL,KAAKuL,KAAO,EAAKA,KAAO,EAAKvL,KAAKuL,KACvC,EAAK0F,QAAU,EAAKxF,SAAS,IAAIkD,GAAMqC,IAEvC,EAAKE,UAAY,EAAKzF,SAAS,IAAI0F,GAAO,EAAMvD,EAAWwD,yBAC3D,EAAKF,UAAUpF,QAAU,WAAM,SAAKe,eACpC,EAAKwE,OAAS,EAAK5F,SAAS,IAAI0F,GAAO,EAAMvD,EAAW0D,0BACxD,EAAKD,OAAOvF,QAAU,aAItB,EAAKyF,UAAY,EAAK9F,SAAS,IAAI0F,GAAO,EAAMvD,EAAW4D,mCAC3D,EAAKD,UAAUzF,QAAU,a,EAMjC,OA9BgC,QA8BhC,EA9BA,CAAgC6C,IAgChC,eAQI,WAAYviC,GAAZ,MACI,cAAO,K,OAPX,EAAAglC,uBAAoC,KACpC,EAAAI,iCAA8C,KAC9C,EAAAC,uBAAoC,KACpC,EAAAC,wBAAqC,KACrC,EAAAJ,wBAAqC,KAIjCrjC,GAAW/B,WAAW,EAAME,G,EAOpC,OAjBoC,QAahC,YAAAS,WAAA,SAAWP,EAAqBG,GAC5B,OAAO,IAAImiC,GAAUniC,IAG7B,EAjBA,CAAoCwB,IClCpC,GAKI,SAAY2Q,EAAkB+yB,EAAoD7nC,GAC9Eh0B,KAAK87D,UAAYhzB,EAAKhV,gBAAgB+nC,EAAuB9nC,KAAMC,GACnEh0B,KAAK+7D,UAAYluD,GAAgBg1B,eAAeg5B,EAAuBG,gB,0dCD/E,eAaI,WAAYxtB,EAAoBytB,GAAhC,MACI,YAAMztB,IAAS,KAZnB,EAAA0tB,OAA4B,KAC5B,EAAAC,eAAkC,KAClC,EAAAC,eAAiB,KAWb,EAAK5G,KAAO,EAAKgB,KAAO,EAAKE,IAAM,GACnC,EAAKjB,KAAO,EAAKgB,KAAO,EAAKE,IAAM,IACnC,EAAKuF,OAASruD,GAAgB+0B,SAAS,6CAEvC,IAAMkG,EAAOj7B,GAAgB61B,iBACvB24B,EAAe,IAAIC,GAAgBxzB,EAAMmzB,EAAsBM,iBAAkB,EAAK9nC,IAAIxxB,OAChGmb,EAASxJ,sBAAsBzB,EAASs/B,wBAAwB,WAAM,SAAKya,WAAWmP,MACtF,EAAKG,mBAAqB,IAAIF,GAAgBxzB,EAAMmzB,EAAsBQ,oBAAqB,EAAKhoC,IAAIxxB,OACxG,IAAMy5D,EAAmB,IAAIJ,GAAgBxzB,EAAMmzB,EAAsBU,qBAAsB,EAAKloC,IAAIxxB,OACxGmb,EAASxJ,sBAAsBzB,EAAS2C,mBAAmB,WAAM,SAAKo3C,WAAWwP,MACjF,IAAME,EAAW,IAAIN,GAAgBxzB,EAAMmzB,EAAsBY,aAAc,EAAKpoC,IAAIxxB,O,OACxFmb,EAASxJ,sBAAsBzB,EAAS4C,WAAW,WAAM,SAAKm3C,WAAW0P,MACzE,EAAKE,gBAAkB,IAAIR,GAAgBxzB,EAAMmzB,EAAsBc,iBAAkB,EAAKtoC,IAAIxxB,OAClG,EAAK+5D,uBAAyB,IAAIV,GAAgBxzB,EAAMmzB,EAAsBgB,wBAAyB,EAAKxoC,IAAIxxB,OAChH,EAAKi6D,iBAAmB,IAAIZ,GAAgBxzB,EAAMmzB,EAAsBkB,kBAAmB,EAAK1oC,IAAIxxB,OACpG,EAAKm6D,cAAgB,IAAId,GAAgBxzB,EAAMmzB,EAAsBoB,eAAgB,EAAK5oC,IAAIxxB,OAC9Fmb,EAASxJ,sBAAsBzB,EAASiD,gBAAgB,WAAM,SAAK82C,WAAW,EAAKkQ,kBACnF,EAAKE,gBAAkB,IAAIhB,GAAgBxzB,EAAMmzB,EAAsBsB,iBAAkB,EAAK9oC,IAAIxxB,OAClGmb,EAASxJ,sBAAsBzB,EAASwN,mBAAmB,WAAM,SAAK41C,kB,EAyC9E,OA1EkC,QAoC9B,YAAArJ,WAAA,SAAWsQ,EAAkC52D,GAIzC,QAJyC,IAAAA,MAAA,KACzC5G,KAAKo8D,eAAiBz1D,EAAiB3G,KAAKo8D,gBAC5Cp8D,KAAKm8D,eAAiBqB,EACtBx9D,KAAKu2D,eACD3vD,EAAS,CACT,IAAM,EAAO5G,KACbA,KAAKo8D,eAAiBv6C,YAAW,WAC7B,EAAKs6C,eAAiB,KACtB,EAAK5F,iBACN3vD,KAIX,YAAA62D,aAAA,SAAaD,GACLx9D,KAAKm8D,iBAAmBqB,IACxBx9D,KAAKm8D,eAAiB,KACtBn8D,KAAKu2D,iBAIb,YAAAjyB,SAAA,SAAS1gC,G,QAEL,GADA,YAAM0gC,SAAQ,UAAC1gC,GACXsa,GAAUiJ,SAAW,EAAG,CACxB,IAAMlkB,EAAQoD,KAAK+d,MAAM,IAAM/d,KAAKF,IAAI,EAAG+X,GAAUiJ,WACrDvjB,EAAQwlC,UAAUppC,KAAKk8D,OAAQl8D,KAAKuD,EAAI,GAAIvD,KAAKsD,EAAI,EAAGL,EAAO,GAEnE,IAAM64D,EAA+B,QAAnB,EAAA97D,KAAKm8D,sBAAc,eAAEL,UACjCC,EAA+B,QAAnB,EAAA/7D,KAAKm8D,sBAAc,eAAEJ,UACvC,GAAID,EAAW,CACX,IAAM4B,EAAO19D,KAAKuD,GAAKvD,KAAKy0B,IAAIxxB,MAAQ64D,EAAU74D,OAAS84D,EAAYA,EAAU94D,MAAQ,IAAM,EAC/FW,EAAQwlC,UAAU0yB,EAAW4B,EAAM19D,KAAKsD,EAAI,IAEhD,GAAIy4D,EAAW,CACX,IAAM4B,EAAQ39D,KAAKuD,EAAIvD,KAAKy0B,IAAIxxB,MAAQ84D,EAAU94D,MAClDW,EAAQwlC,UAAU2yB,EAAW4B,EAAO39D,KAAKsD,EAAI,MAIzD,EA1EA,CAAkCu1D,I,0dCRlC,eAEI,WAAYliC,GAAZ,MACI,cAAO,K,OACN,EAAK1zB,MAA0E0zB,E,GAAnE,EAAKzzB,OAA8DyzB,E,GAAtD,EAAK+gC,cAAiD/gC,E,GAAlC,EAAKghC,YAA6BhhC,E,GAAhB,EAAKoU,QAAWpU,E,GAChF,EAAK6+B,KAAO,EACZ,EAAKC,KAAO,G,EAGpB,OAT4C,QAS5C,EATA,CAA4CsF,I,0dCA5C,eAOI,WAAYpkC,G,QAAZ,EACI,cAAO,KACP,GAPJ,EAAAinC,WAAqB,KACrB,EAAAC,gBAA0B,KAC1B,EAAAC,mBAA6B,KAC7B,EAAAC,OAAiB,KAIW,IAApBpnC,EAASjsB,OACR,EAAK+sD,WAAgE9gC,EAAQ,GAA5D,EAAKihC,aAA+CjhC,EAAQ,GAAzC,EAAKghC,YAA4BhhC,EAAQ,GAAvB,EAAKonC,OAAUpnC,EAAQ,QAC3E,GAAwB,IAApBA,EAASjsB,OAAc,CAC9B,IAAIqgC,EAAS8yB,EACZ,EAAKpG,WAA0F9gC,EAAQ,GAAtF,EAAKihC,aAAyEjhC,EAAQ,GAAnE,EAAKghC,YAAsDhhC,EAAQ,GAAjDoU,EAAyCpU,EAAQ,GAAxCknC,EAAgClnC,EAAQ,GAAvB,EAAKonC,OAAUpnC,EAAQ,GACpGoU,IACI9jC,MAAMyB,QAAQqiC,IACb,EAAKA,QAA4BA,EAAO,GAA1B,EAAK6yB,WAAc7yB,EAAO,IAEzC,EAAKA,QAAUA,GAGnB8yB,IACI52D,MAAMyB,QAAQm1D,IACb,EAAKA,gBAA4CA,EAAe,GAA1C,EAAKC,mBAAsBD,EAAe,IAEjE,EAAKA,gBAAkBA,G,OAIvB,QAAZ,IAAK9yB,eAAO,SAAEtlC,QAAQ,KAAM,KACR,QAApB,IAAKo4D,uBAAe,SAAEp4D,QAAQ,KAAM,KACpC,EAAKxC,MAAQ,GACb,EAAKC,OAAS,G,EAGtB,OAnCiC,QAmCjC,EAnCA,CAAiC63D,I,0dCEjC,eAQI,WAAYz6D,EAAqB09D,EAA0BC,EAAiBC,EAAqBC,GAAjG,MACI,YAAM79D,EAAQ09D,IAAY,K,OAP9B,EAAAJ,WAAqB,KACrB,EAAAC,gBAA0B,KAC1B,EAAAC,mBAA6B,KAC7B,EAAAC,OAAiB,KACjB,EAAAK,WAA4B,WAAM,SAAKh9D,UAInC,EAAKm2D,WAAa0G,EAClB,EAAKzI,KAAO0I,EAAc,GAC1B,EAAKzI,KAAO,EAAI,EAAKvyD,OAASi7D,EAC9B,EAAKP,WAAaI,EAAYJ,WAC9B,EAAKC,gBAAkBG,EAAYH,gBACnC,EAAKC,mBAAqBE,EAAYF,mBACtC,EAAKC,OAASC,EAAYD,OAC1B,EAAK38D,UAAW,E,EA8BxB,OA/CqC,QAoBjC,YAAAwlB,MAAA,WACI,YAAMA,MAAK,WACX5mB,KAAKoB,UAAW,EAChBpB,KAAKq+D,aAAY,IAGrB,YAAArI,QAAA,WACI7yD,QAAQyG,IAAI,sBAAwB5J,KAAKu3D,aAG7C,YAAA8G,YAAA,SAAYC,QAAA,IAAAA,OAAA,GACR,IAAMC,IAAgBv+D,KAAKo+D,aACrBjI,EAAen2D,KAAKoB,WAAam9D,EAGvC,OAFAv+D,KAAKoB,SAAWm9D,EACZpI,GAAgBmI,GAAYt+D,KAAKu2D,eAC9BJ,GAGX,YAAAL,UAAA,SAAUlyD,GACN,YAAMkyD,UAAS,UAAClyD,IACX5D,KAAKoB,UAAYpB,KAAK0pC,QACvB9lC,EAAQ8wD,YAAc,OACtB9wD,EAAQ+wD,UAAY,EACpB/wD,EAAQgxD,WAAW50D,KAAKuD,EAAIK,EAAQ+wD,UAAY,EAAG30D,KAAKsD,EAAIM,EAAQ+wD,UAAY,EAAG30D,KAAKiD,MAAQW,EAAQ+wD,UAAY,EAAG30D,KAAKkD,OAASU,EAAQ+wD,UAAY,KAIrK,EA/CA,CAAqC0G,I,0dCGrC,eAKI,WAAYmD,EAAYC,QAAA,IAAAA,MAAA,MAAxB,MACI,cAAO,KACP,GALJ,EAAAC,QAAkB,KAClB,EAAAC,iBAAsC,GAI9BF,EAAa,CACb,IAAMG,EAAa,IAAIC,GAAuBhxD,GAAgBynB,IAAI,wBAClE,EAAKopC,QAAU,EAAK/I,SAAS,IAAI0F,GAAO,EAAMuD,IAC9C,EAAKF,QAAQ1I,QAAU,WAAM,SAAKe,aAAY,WAAM,OAAA0H,EAAY1H,kBAEpE,IAAM+H,EAAcjxD,GAAgBynB,IAAI,0BAA2BkpC,EAAWh5D,YAEvEu5D,EAAwED,EAAW,GAAlDE,GAAuCF,EAAW,GAAXA,EAAW,GAAXA,EAAW,GAAXA,EAAW,GAAXA,EAAW,I,OAAXA,EAAW,GAAXA,EAAW,GAC1F,EAAKrqC,IAAMgqC,EAAc5wD,GAAgB+0B,SAASm8B,GAAWlxD,GAAgB+0B,SAASo8B,GACtF,EAAKxI,MAAQ,EAAK/hC,IAAIxxB,M,EAe9B,OA/BkC,QAmB9B,YAAAg8D,YAAA,SAAYC,EAAuBjB,GAC/B,IAAMD,EAAc,IAAImB,GAAYtxD,GAAgBynB,IAAI4pC,EAAejB,IACjEmB,EAAWp/D,KAAK21D,SAAS,IAAI0J,GAAgBr/D,KAAMg+D,EAAaC,EAASj+D,KAAKy0B,IAAIxxB,MAAOjD,KAAK2+D,iBAAiBj0D,SAErH,OADA1K,KAAK2+D,iBAAiB7zD,KAAKs0D,GACpBA,GAGX,YAAArI,YAAA,SAAYD,QAAA,IAAAA,MAAA,MACR,YAAMC,YAAW,UAACD,GACb92D,KAAK42D,SAAS52D,KAAK2+D,iBAAiB55D,SAAQ,SAACkiC,GAAW,OAAAA,EAAOo3B,kBAG5E,EA/BA,CAAkCxF,I,0dCJlC,eAEI,WAAY4F,GAAZ,MACI,YAAM,GAAIA,IAAY,K,OACtB,EAAKQ,YAAY,uBAAwB,eACzC,EAAKA,YAAY,uBAAwB,eACzC,EAAKA,YAAY,uBAAwB,SACzC,EAAKA,YAAY,uBAAwB,gBACzC,EAAKA,YAAY,uBAAwB,YACzC,EAAKA,YAAY,uBAAwB,WACzC,EAAKA,YAAY,uBAAwB,YACzC,EAAKA,YAAY,uBAAwB,eACzC,EAAKA,YAAY,uBAAwB,cACzC,EAAKA,YAAY,uBAAwB,e,EAGjD,OAhBmC,QAgBnC,EAhBA,CAAmCK,I,0dCAnC,eAEI,WAAYb,GAAZ,MACI,YAAM,EAAGA,IAAY,K,OACrB,EAAKQ,YAAY,uBAAwB,cACzC,EAAKA,YAAY,uBAAwB,eACzC,EAAKA,YAAY,uBAAwB,cACzC,EAAKA,YAAY,uBAAwB,YACzC,EAAKA,YAAY,uBAAwB,YACzC,EAAKA,YAAY,uBAAwB,a,EAGjD,OAZuC,QAYvC,EAZA,CAAuCK,I,0dCAvC,eAEI,WAAYb,GAAZ,MACI,YAAM,EAAGA,IAAY,K,OACrB,EAAKQ,YAAY,uBAAwB,aACzC,EAAKA,YAAY,uBAAwB,gBACzC,EAAKA,YAAY,uBAAwB,YACzC,EAAKA,YAAY,uBAAwB,eACzC,EAAKA,YAAY,uBAAwB,Y,EAGjD,OAXuC,QAWvC,EAXA,CAAuCK,I,0dCEvC,eAEI,WAAYd,EAAYC,GAAxB,MACI,YAAMD,EAAYC,IAAY,K,OAC9B,EAAKC,QAAQ1I,QAAU,WAAM,OAAA53C,EAAA,aAAsB,IAAImD,K,EAG/D,OAPqC,QAOrC,EAPA,CAAqC+9C,I,0dCErC,eAEI,WAAY9pD,GAAZ,MACI,YAAMa,GAAQ69B,UAAW1+B,IAAQ,K,OACjC,EAAKnJ,MAAQ,QACb,EAAK6rC,cAAgB,EACrB,EAAKwR,aAAevF,GAAWC,O,EAgBvC,OAtBkC,QAS9B,YAAA1sC,cAAA,WACI,OAAO1X,KAAKwV,QAAQuP,kBAAkB1f,KAAI,SAAC0d,GAAM,WAAIpL,GAAWoL,OAGpE,YAAA9L,cAAA,WACI,YAAMA,cAAa,WACnBjX,KAAKwV,QAAQkjC,aAGjB,YAAA5gC,sBAAA,WACI,OAAOmI,GAAmBs/C,qBAGlC,EAtBA,CAAkC1V,I,0dCSlC,eAEI,WAAY4U,GAAZ,MACI,YAAM,EAAGA,IAAY,KACfe,EAAY,EAAKC,gBAAgB,yBAA0BppD,GAAQ49B,OAAO,SAACzrC,GAAM,WAAI2sD,GAAS3sD,MACpGg3D,EAAUpB,WAAa,W,QAAM,QAA2B,QAAzB,EAAAlgD,GAAA,uBAAyB,eAAEm6B,kBAC3B,QAAzB,EAAAn6B,GAAA,uBAAyB,eAAEo6B,oBACjC,IAAMonB,EAAgB,EAAKD,gBAAgB,+BAAgCppD,GAAQ69B,WAAW,SAAC1rC,GAAM,WAAIm3D,GAAan3D,MACtHk3D,EAActB,WAAa,iBAAM,QAA2B,QAAzB,EAAAlgD,GAAA,uBAAyB,eAAEq6B,mBAC9D,IAAMqnB,EAAe,EAAKH,gBAAgB,8BAA+BppD,GAAQ89B,KAAM,MACvFyrB,EAAaxB,WAAa,WAAM,OAAClgD,GAAUkL,wBAAwBlW,EAASV,YAAa,KACpF0L,GAAUqJ,QAAQjI,MAAK,SAACjb,GAAM,OAAAA,EAAEiiD,SAASjgC,GAAYK,gBAC1D,IAAMm5C,EAAe,EAAKZ,YAAY,kBAAmB,kC,OACzDY,EAAazB,WAAa,WAAM,UAChCyB,EAAa7J,QAAU,WACK93C,GAAUkJ,iBAAiB,GACnCstB,aAChBt2B,EAAShK,aAAa,IAAImN,KAE9BnD,EAASxJ,sBAAsBzB,EAASgN,kBAAkB,WACtDq/C,EAAUnB,aAAY,GACtBqB,EAAcrB,aAAY,GAC1BuB,EAAavB,aAAY,GACzB,EAAK9H,kB,EAoBjB,OA3CqC,QA2BjC,YAAAkJ,gBAAA,SAAgBxB,EAAiBjqB,EAAkB8rB,GAC/C,IAAMtoD,EAAOxX,KAAKi/D,YAAY,kBAAmBhB,GAYjD,OAXAzmD,EAAKw+C,QAAU,WACX,IAAM+J,EAAkB7hD,GAAU6hD,gBAC9BA,IACI/rB,IAAY39B,GAAQ89B,KACpB/1B,EAAShK,aAAa,IAAI4rD,EAAmBD,IACrCA,EAAgB1rB,WAAWL,IACnC51B,EAAShK,aAAa,IAAIwL,EAAekgD,EAAUC,KAEvD3hD,EAAShK,aAAa,IAAImN,MAG3B/J,GAGf,EA3CA,CAAqCyoD,I,0dCPrC,eAKI,WAAYzqD,EAAkB0qD,GAA9B,MACI,YAAM7pD,GAAQ+vC,oBAAqB5wC,IAAQ,K,OAC3C,EAAKk0C,aAAevF,GAAWE,OAC/B,EAAK7uC,QAAUA,EACf,EAAK0qD,YAAcA,EACnB,EAAKC,WAAa,CAAC,IAAIxoD,GAAWnC,EAAQm/B,sB,EAmBlD,OA7B0C,QAatC,YAAA19B,cAAA,WACI,YAAMA,cAAa,WACnBjX,KAAKkgE,YAAYn7D,SAAQ,SAACq7D,GAAW,OAAAA,EAAOnsD,qBAC5CjU,KAAKwV,QAAQu9B,YAAcvD,GAAYiB,WACvCzwC,KAAKwV,QAAQkgC,gBACb11C,KAAKwV,QAAQslC,UAAU/1C,SAAQ,SAACyD,GAAM,OAAAA,EAAEktC,oBAG5C,YAAA59B,sBAAA,WACI,OAAOmI,GAAmBogD,wBAG9B,YAAA3oD,cAAA,WACI,OAAO1X,KAAKmgE,YAGpB,EA7BA,CAA0CtW,ICD1C,cASI,WAAYyW,QAAA,IAAAA,OAAA,GANZ,KAAA1hB,SAAsB,GACtB,KAAA2hB,aAAe,GACf,KAAAC,eAAiB,GACjB,KAAAC,aAAe,GACf,KAAAjhD,UAAoB,EAGhBxf,KAAKsgE,YAAcA,EA+D3B,OA5DI,YAAArhD,sBAAA,WACI,OAAOjf,KAAK4+C,SAAS,GAAGjK,qBAG5B,YAAA31B,MAAA,SAAM1J,GAGF,OAFetV,KAAKugE,aAAajrD,IAAoB,IACnCtV,KAAKwgE,eAAelrD,IAAoB,IAAI5K,QAIlE,YAAA+L,OAAA,SAAOe,GACH,IAAMlC,EAAkBkC,EAAKO,qBAC7B/X,KAAKwgE,eAAelrD,GAAmBtV,KAAKwgE,eAAelrD,IAAoB,GAC/EtV,KAAKwgE,eAAelrD,GAAiBxK,KAAK0M,IAG9C,YAAAuI,SAAA,SAASvI,GACL,IAAMlC,EAAkBkC,EAAKO,qBAC7B/X,KAAKwgE,eAAelrD,GAAoBtV,KAAKwgE,eAAelrD,IAAoB,GAChFtV,KAAKwgE,eAAelrD,GAAiB/N,OAAOvH,KAAKwgE,eAAelrD,GAAiBhO,QAAQkQ,GAAO,IAGpG,YAAAoG,QAAA,SAAQpG,GACJ,IAAMlC,EAAkBkC,EAAKO,qBACvB2oD,EAAS1gE,KAAKugE,aAAajrD,IAAoB,EACrDtV,KAAKygE,aAAanrD,GAAmBtV,KAAKygE,aAAanrD,IAAoB,GACvEtV,KAAKygE,aAAanrD,GAAiB5K,OAASg2D,GAC5ClpD,EAAK3D,SAASC,aAAaI,MAAMlV,IAAIwY,EAAKhJ,OAC1CxO,KAAKygE,aAAanrD,GAAiBxK,KAAK0M,GACxCxX,KAAK2gE,iBAELnpD,EAAKqH,eAIb,YAAA8hD,cAAA,sBACI,IAAI3gE,KAAKwf,SAAT,CACA,IAAIA,GAAW,EASf,GARAva,OAAOH,KAAK9E,KAAKugE,cAAcjhD,MAAK,SAACshD,GACjC,IAAMF,EAAS,EAAKH,aAAaK,IAAe,EAEhD,IADgB,EAAKH,aAAaG,IAAe,IAAIl2D,OACxCg2D,EAET,OADAlhD,GAAW,GACJ,KAGXA,EAAU,CACVxf,KAAKwf,SAAWA,EAChBtB,GAAUa,cAAc5X,OAAOnH,MAC/B,IAAM,EAAQ,GACdiF,OAAOH,KAAK9E,KAAKygE,cAAc17D,SAAQ,SAACuQ,GAAoB,SAAMxK,KAAI,MAAV,EAAc,EAAK21D,aAAanrD,OACxFtV,KAAKsgE,YACLliD,EAAShK,aAAa,IAAIwL,EAAe,IAAIihD,GAAqB7gE,KAAK4+C,SAAS,GAAI,KAGpFz7C,QAAQyG,IAAI,gCAK5B,EAzEA,G,0dCEA,eAII,WAAY4L,GAAZ,MACI,cAAO,KACDsQ,EAAWjY,GAAgB0X,YAAY,kCACvCld,EAAOod,GAAaC,aAAa,IAAIC,EAAU,sBAAsB5W,MAAM+W,I,OACjF,EAAKtX,MAAMxP,IAAIqJ,GACf,EAAK6P,cAAgB1C,E,EAkC7B,OA3CmC,QAY/B,YAAAuC,mBAAA,WACI,OAAOX,GAAgBY,gBAG3B,YAAAoH,uBAAA,WACI,MAAO,CAAClM,EAASV,cAGrB,YAAAsF,sBAAA,WACI,OAAOmI,GAAmBogD,wBAGpB,YAAA1hD,cAAV,WAYI,OAXI3e,KAAKye,QAAQ/T,OAAS,EAClB1K,KAAKkY,cAAcC,gBACnBnY,KAAKye,QAAU,CAAC,IAAIV,GAAkB/d,KAAKkY,cAAcygC,mBAAoB,KAAM,OAEnF34C,KAAKye,QAAUP,GAAUiB,mBAAV,MAAAjB,GAAgCle,KAAKof,0BAC/C/Z,KAAI,SAACd,GAAM,WAAIwZ,GAAkBxZ,EAAE8a,oBAAqB,KAAM9a,MAE/DvE,KAAKkY,cAAcC,iBAAoBnY,KAAKye,QAAQ,GAAGzI,WAC/DhW,KAAKye,QAAUP,GAAUiB,mBAAV,MAAAjB,GAAgCle,KAAKof,0BAC/C/Z,KAAI,SAACd,GAAM,WAAIwZ,GAAkBxZ,EAAE8a,oBAAqB,KAAM9a,OAEhEvE,KAAKye,SAGhB,sBAAI,oBAAK,C,IAAT,WACI,OAAO,M,gCAGf,EA3CA,CAAmCwH,I,0dCGnC,eAEI,WAAYw4C,GAAZ,MACI,YAAM,EAAGA,IAAY,KACfqC,EAAW,EAAK7B,YAAY,kBAAmB,8BACrD6B,EAAS9K,QAAU,WACf,IAAM+J,EAAkB7hD,GAAUkJ,iBAAiB,GACnD24C,EAAgBhtB,YAAcvD,GAAYkB,gBAC1CqvB,EAAgBrqB,gBAChB,IAAMsc,EAAiB9zC,GAAU0K,yBAAyBm3C,EAAgB76C,iBAAkBhS,EAASV,aACjGw/C,GAAgBA,EAAezK,eAAerpC,GAAU+M,aAAa7T,GAAgBkH,IAAK,IAC9F,IAAMf,EAAO,IAAIwjD,IAAa,GAC9BxjD,EAAKqhC,SAAS9zC,KAAKi1D,GACnBxiD,EAAKgjD,aAAanpD,GAAgBkH,KAAO,EACzCJ,GAAUa,cAAcjU,KAAKyS,GAC7Ba,EAAShK,aAAa,IAAImN,KAE9Bu/C,EAAS1C,WAAa,iBAAM,OAAyB,QAAzB,EAAAlgD,GAAA,uBAAyB,eAAE60B,eAAgBvD,GAAYgB,QACnF,IAAMwwB,EAAa,EAAK/B,YAAY,kBAAmB,iCACvD+B,EAAWhL,QAAU,W,MACQ,QAAzB,EAAA93C,GAAA,uBAAyB,SAAE27B,WAAW,GACtCz7B,EAAShK,aAAa,IAAImN,KAE9By/C,EAAW5C,WAAa,iBAAM,OAAyB,QAAzB,EAAAlgD,GAAA,uBAAyB,eAAE60B,eAAgBvD,GAAYiB,YACrF,IAAMwwB,EAAiB,EAAKhC,YAAY,kBAAmB,iC,OAC3DgC,EAAe7C,WAAa,W,MACxB,OAAQlgD,GAAU4G,iBAAiB5R,EAASP,kBAA4C,QAAzB,EAAAuL,GAAA,uBAAyB,eAAE/F,kBAE9F8oD,EAAejL,QAAU,WACrB,IAAM+J,EAAkB7hD,GAAU6hD,gBAClC,GAAIA,EAAiB,CACjB,IAAMmB,EAAchjD,GAAU0K,yBAAyBm3C,EAAgB76C,iBAAkBhS,EAASV,aAC9F0uD,IACAA,WAAa3Z,eAAe,CAAC,IAAIpmB,GAAc4+B,MAGvD3hD,EAAShK,aAAa,IAAImN,KAE9BnD,EAASxJ,sBAAsBzB,EAASgN,kBAAkB,WACtD2gD,EAASzC,cACT2C,EAAW3C,cACX4C,EAAe5C,iB,EAI3B,OA7CsC,QA6CtC,EA7CA,CAAsC4B,I,0dCJtC,eAEI,WAAYxB,GAAZ,MACI,YAAM,EAAGA,IAAY,KACf0C,EAAkB,EAAKlC,YAAY,kBAAmB,kC,OAC5DkC,EAAgBnL,QAAU,WACtB53C,EAAShK,aAAa,IAAIwL,EAAe,IAAIw1C,GAAel3C,GAAU6hD,mBACtE3hD,EAAShK,aAAa,IAAImN,KAE9B4/C,EAAgB/C,WAAa,iBAAM,QAA0B,QAAzB,EAAAlgD,GAAA,uBAAyB,eAAEi6B,cAC/D,EAAK8mB,YAAY,kBAAmB,iCACpC7gD,EAASxJ,sBAAsBzB,EAASgN,kBAAkB,WAAM,OAAAghD,EAAgB9C,iB,EAGxF,OAduC,QAcvC,EAdA,CAAuC4B,I,0dCJvC,eAQI,WAAY3/D,EAAqB8gE,EAA6BC,EAA4BnD,EAAqBC,GAA/G,MACI,YAAM79D,EAAQ8gE,EAAgB,KAAMlD,EAAaC,IAAU,K,OAP/D,EAAApH,aAAuB,EAQnB,EAAKuK,YAAczzD,GAAgBg1B,eAAew+B,EAAc5J,YAChE,EAAK8J,WAAa1zD,GAAgBg1B,eAAew+B,EAAc3J,eAC/D,EAAK8J,aAAe3zD,GAAgBg1B,eAAew+B,EAAc1J,aACjE,EAAK8J,cAAgB5zD,GAAgBg1B,eAAew+B,EAAczJ,c,EAuC1E,OApD2C,QAgBvC,YAAA5B,QAAA,WACIh2D,KAAK+2D,aAAe/2D,KAAK+2D,YACzB/2D,KAAK0hE,uBAGT,YAAAA,oBAAA,aAGA,YAAAp9B,SAAA,SAAS1gC,GACL,IAAI5D,KAAK01D,OAAT,CACA,IAAIjhC,EAAMz0B,KAAK+2D,YAAc/2D,KAAKshE,YAActhE,KAAK4qC,UACjD5qC,KAAKoB,SAEDqzB,EADAz0B,KAAK+2D,YACC/2D,KAAKyhE,eAAiBzhE,KAAKwhE,cAAgBxhE,KAAKshE,YAEhDthE,KAAKw3D,aAAex3D,KAAK8qC,YAAc9qC,KAAK4qC,UAE/C5qC,KAAK2pC,QAERlV,EADAz0B,KAAK+2D,YACC/2D,KAAKwhE,cAAgBxhE,KAAKshE,YAE1BthE,KAAK8qC,YAAc9qC,KAAK4qC,UAE3B5qC,KAAK0pC,QAERjV,EADAz0B,KAAK+2D,YACC/2D,KAAKuhE,YAAcvhE,KAAKshE,YAExBthE,KAAK6qC,UAAY7qC,KAAK4qC,WAGhCnW,GAAK7wB,EAAQwlC,UAAU3U,EAAKz0B,KAAKuD,EAAGvD,KAAKsD,GAC7CtD,KAAKoiB,SAASrd,SAAQ,SAAC6wD,GAAU,OAAAA,EAAMtxB,SAAS1gC,MAChD5D,KAAKoiB,SAASrd,SAAQ,SAAC6wD,GAAU,OAAAA,EAAME,UAAUlyD,MACjD5D,KAAKoiB,SAASrd,SAAQ,SAAC6wD,GAAU,OAAAA,EAAMG,YAAYnyD,QAG3D,EApDA,CAA2Cy7D,I,0dCI3C,eAEI,WAAYZ,GAAZ,MACI,YAAM,EAAGA,IAAY,KACrB,EAAKQ,YAAY,kBAAmB,6BAEpC,IAAMmC,EAAiB,IAAIjC,GAAYtxD,GAAgBynB,IAAI,kBAAmB,gCACxE+rC,EAAgB,IAAIlC,GAAYtxD,GAAgBynB,IAAI,kBAAmB,+BACvEqsC,EAAkB,EAAKhM,SAAS,IAAIiM,GAAsB,EAAMR,EAAgBC,EAAe,EAAK5sC,IAAIxxB,MAAO,EAAK07D,iBAAiBj0D,SAC3I,EAAKi0D,iBAAiB7zD,KAAK62D,GAC3BA,EAAgBvD,WAAa,uBAAM,OAAAlgD,GAAA,cAA0BA,GAAUC,aAA+C,QAAjC,EAA0B,QAA1B,EAAAD,GAAA,wBAA0B,eAAEjN,aAAK,eAAEimB,eAAgD,QAAjC,EAA0B,QAA1B,EAAAhZ,GAAA,wBAA0B,eAAEjN,aAAK,eAAEkmB,gBAC1KwqC,EAAgBD,oBAAsB,W,QAC9BC,EAAgB5K,YACU,QAA1B,EAAA74C,GAAA,wBAA0B,SAAEspC,eAEF,QAA1B,EAAAtpC,GAAA,wBAA0B,SAAE4oC,eAGpC,IAAM+a,EAAc,EAAK5C,YAAY,kBAAmB,sCACxD4C,EAAYzD,WAAa,iBAAM,QAA2B,QAA1B,EAAAlgD,GAAA,wBAA0B,eAAEkpC,eAC5Dya,EAAY7L,QAAU,iBAAM,OAA0B,QAA1B,EAAA93C,GAAA,wBAA0B,eAAEipC,WACxD,IAAM2a,EAAqB,EAAK7C,YAAY,kBAAmB,qC,OAC/D6C,EAAmB1D,WAAa,WAAM,UACtC0D,EAAmB9L,QAAU,iBAAM,OAA0B,QAA1B,EAAA93C,GAAA,wBAA0B,eAAEoD,UAC/DlD,EAASxJ,sBAAsBzB,EAASkN,mBAAmB,WACvDshD,EAAgBtD,cAChBwD,EAAYxD,iBAEhBjgD,EAASxJ,sBAAsBzB,EAASoC,yBAAyB,WAC7DosD,EAAgBtD,cAChBwD,EAAYxD,iB,EAIxB,OAlCyC,QAkCzC,EAlCA,CAAyC4B,I,0dCLzC,eAEI,a,OACI,YAAM5pD,GAAQ8vC,MAAI,KAO1B,OAV4B,QAMxB,YAAAzuC,cAAA,WACI,MAAO,IAGf,EAVA,CAA4BP,I,0dCI5B,eAKI,WAAYsnD,GAAZ,MACI,YAAM,GAAIA,IAAY,KAChBsD,EAAW,EAAK9C,YAAY,kBAAmB,6BACrD8C,EAAS3D,WAAa,WAAM,UAC5B2D,EAAS/L,QAAU,WACf93C,GAAU8jD,gBAAgBj9D,SAAQ,SAACV,GAAM,OAACA,EAAE6gD,aAAe7gD,EAAE4/C,OAAO,IAAIge,OACxE7jD,EAAShK,aAAa,IAAImN,KAE9B,EAAK09C,YAAY,kBAAmB,uCACpC,EAAKA,YAAY,kBAAmB,uCACpC,EAAKiD,YAAc,EAAKjD,YAAY,kBAAmB,8BACvD,EAAKiD,YAAY9D,WAAa,WAAM,UACpC,EAAKa,YAAY,kBAAmB,qCACpC,EAAKA,YAAY,kBAAmB,iCACpC,EAAKkD,UAAY,EAAKlD,YAAY,kBAAmB,iCACrD,EAAKkD,UAAU/D,WAAa,WAAM,UAClC,EAAKa,YAAY,kBAAmB,sCACpC,EAAKA,YAAY,kBAAmB,uCACpC,IAAMmD,EAAmB,EAAKnD,YAAY,kBAAmB,gC,OAC7DmD,EAAiBhE,WAAa,WAAM,UACpCgE,EAAiBpM,QAAU,WAAM,OAAA93C,GAAA,yBAAkC,SAAC7Z,GAAM,OAAAA,EAAEid,a,EAGpF,OA5BuC,QA4BvC,EA5BA,CAAuC2+C,I,0dCLvC,eAEI,WAAYxB,G,OACR,YAAM,EAAGA,IAAY,KAG7B,OANwC,QAMxC,EANA,CAAwCwB,ICDxC,cAQI,WAAYoC,EAAY/nB,EAAYgoB,EAAY/nB,GANhD,KAAA8nB,GAAa,EACb,KAAA/nB,GAAa,EACb,KAAAgoB,GAAa,EACb,KAAA/nB,GAAa,EACb,KAAAlsC,OAAkB,KAGdrO,KAAKqiE,GAAKA,EACVriE,KAAKs6C,GAAKA,EACVt6C,KAAKsiE,GAAKA,EACVtiE,KAAKu6C,GAAKA,EACVv6C,KAAKqO,OAAS,IAAI,OAASrO,KAAKqiE,GAAKriE,KAAKsiE,IAAM,GAAItiE,KAAKs6C,GAAKt6C,KAAKu6C,IAAM,GAOjF,OAJI,YAAA12B,UAAA,WACI,OAAO7jB,KAAKqO,OAAOiF,SAG3B,EApBA,G,0dCOA,eAKI,WAAYkC,EAAkBW,GAA9B,MACI,YAAME,GAAQ0vC,QAAM,K,OACpB,EAAKoa,WAAa,CAAC,IAAIoC,GAAkB/sD,IACzC,EAAKW,MAAQA,E,EAOrB,OAf8B,QAW1B,YAAAuB,cAAA,WACI,OAAO1X,KAAKmgE,YAGpB,EAfA,CAA8BhpD,IAiB9B,eAII,WAAY3B,GAAZ,MACI,YAAMA,EAAQmjC,qBAAmB,K,OACjC,EAAK6pB,WAAa,IAAIC,GAAKjtD,EAAQjS,EAAIme,GAAW0hC,GAAkB5tC,EAAQlS,EAAIoe,GAAW0hC,IACtF5tC,EAAQjS,EAAI,GAAKme,GAAW0hC,IAAmB5tC,EAAQlS,EAAI,GAAKoe,GAAW0hC,I,EAQxF,OAfuC,QAUnC,YAAA7rC,SAAA,SAASlG,GACL,OAAOA,EAAS9N,GAAKvD,KAAKwiE,WAAWH,IAAMhxD,EAAS9N,EAAIvD,KAAKwiE,WAAWF,IACjEjxD,EAAS/N,GAAKtD,KAAKwiE,WAAWloB,IAAMjpC,EAAS/N,EAAItD,KAAKwiE,WAAWjoB,IAGhF,EAfA,CAAuC5iC,I,0dChBvC,eAEI,WAAY8mD,GAAZ,MACI,YAAM,EAAGA,IAAY,KACrB,EAAKQ,YAAY,kBAAmB,kCACpC,EAAKA,YAAY,kBAAmB,oCACpC,EAAKA,YAAY,kBAAmB,qCACpC,EAAKA,YAAY,kBAAmB,iCACpC,EAAKA,YAAY,kBAAmB,kCACpC,IAAMyD,EAAgB,EAAKzD,YAAY,kBAAmB,oC,OAC1DyD,EAActE,WAAa,WAAM,OAAClgD,GAAUiB,mBAAmBjM,EAASV,aAAa8M,MAAK,SAAC/a,GAAM,OAAAA,EAAE0M,MAAMuY,cAAcjlB,EAAE6O,WACrH8K,GAAU8jD,gBAAgBW,OAAM,SAACt+D,GAAM,OAAAA,EAAEiiD,SAASjgC,GAAYK,gBAClEg8C,EAAc1M,QAAU,WACpB93C,GAAUiB,mBAAmBjM,EAASV,aAAa8M,MAAK,SAAC/a,GACrD,GAAIA,EAAE0M,MAAMuY,cAAcjlB,EAAE6O,OAGxB,OAFA8K,GAAU8jD,gBAAgBj9D,SAAQ,SAACV,GAAM,OAACA,EAAEiiD,SAASjgC,GAAYK,aAAeriB,EAAE4/C,OAAO,IAAI2e,GAASr+D,EAAEq6C,SAAS,GAAIv4B,GAAYK,gBACjItI,EAAShK,aAAa,IAAImN,KACnB,MAInBnD,EAASxJ,sBAAsBzB,EAAS8C,mBAAmB,WAAM,OAAAysD,EAAcrE,iB,EAGvF,OAxBsC,QAwBtC,EAxBA,CAAsCiB,I,0dCJtC,eAKI,WAAY50B,EAAiBwb,GAA7B,MACI,YAAM7vC,GAAQ4vC,WAAS,K,OACvB,EAAKvb,OAAS,CAAC,IAAI/yB,GAAW+yB,IAC9B,EAAKwb,KAAOA,E,EAOpB,OAfgC,QAW5B,YAAAxuC,cAAA,WACI,OAAO1X,KAAK0qC,QAGpB,EAfA,CAAgCvzB,I,0dCKhC,eAEI,WAAYsnD,GAAZ,MACI,YAAM,EAAGA,IAAY,K,OACrB,EAAKoE,eAAe,kBAAmB,8BAA+B1e,GAAWlQ,OACjF,EAAK4uB,eAAe,kBAAmB,8BAA+B1e,GAAWE,QACjF,EAAKwe,eAAe,kBAAmB,+BAAgC1e,GAAWC,QAClF,EAAKye,eAAe,kBAAmB,gCAAiC1e,GAAWG,SACnF,EAAKue,eAAe,kBAAmB,mCAAoC1e,GAAWI,YACtF,EAAKse,eAAe,kBAAmB,8BAA+B1e,GAAWK,OACjF,EAAKqe,eAAe,kBAAmB,kCAAmC1e,GAAWM,WACrF,EAAKoe,eAAe,kBAAmB,mCAAoC1e,GAAWO,Y,EAuB9F,OAlCkC,QAc9B,YAAAme,eAAA,SAAe3D,EAAuBjB,EAAiB/X,GACnD,IAAMkZ,EAAW,YAAMH,YAAW,UAACC,EAAejB,GAgBlD,OAfAmB,EAAShB,WAAa,WAAM,OAAClgD,GAAU4G,iBAAiB5R,EAASV,cAC7D0L,GAAU8jD,gBAAgBW,OAAM,SAACt+D,GAAM,OAAAA,EAAEgiD,QAAQH,OACrDkZ,EAASpJ,QAAU,WACf93C,GAAU8jD,gBAAgBj9D,SAAQ,SAACV,GAC/B,IAAKA,EAAEgiD,QAAQH,GAAO,CAClB,IAAM4c,EAAoB5kD,GAAUiB,mBAAmBjM,EAASV,aAC3DnN,KAAI,SAACd,GAAM,OAAAF,EAAEm+C,iBAAiB,IAAI7qC,GAAWpT,EAAEgP,qBAC/C+zB,MAAK,SAAClW,EAAG/sB,GAAM,OAAA+sB,EAAEstB,SAAWr6C,EAAEq6C,YAAU,GACzCokB,GACAz+D,EAAE4/C,OAAO,IAAI8e,GAAWD,EAAkBE,eAAgB9c,QAItE9nC,EAAShK,aAAa,IAAImN,KAEvB69C,GAGf,EAlCA,CAAkCE,I,0dCNlC,eAEI,WAAYh/D,GAAZ,MACI,YAAMA,IAAO,K,OACb,EAAKk1D,KAAO,EACZ,EAAKC,KAAO,GACZr3C,EAASxJ,sBAAsBzB,EAASkC,kBAAkB,WAAM,SAAKkhD,kB,EAc7E,OApB0C,QAStC,YAAAjyB,SAAA,SAAS1gC,GACL,IAAI5D,KAAK01D,OAAT,CACA,IAAMjuC,EAAmBvJ,GAAUuJ,iBAC9BA,IACL7jB,EAAQi0D,UAAY,OACpBj0D,EAAQklC,KAAO,kBACfllC,EAAQJ,UAAYxD,KAAKoB,UAAapB,KAAKM,QAAUN,KAAKM,OAAOc,SAAY,OAAS,OACtFwC,EAAQmlC,SAASthB,EAAiBjiB,WAAYxF,KAAKuD,EAAGvD,KAAKsD,GAC3D,YAAMghC,SAAQ,UAAC1gC,MAGvB,EApBA,CAA0CyzD,I,0dCkB1C,eAQI,mBACI,cAAO,KAPX,EAAA4L,UAA4B,GAQxB,EAAKzN,KAAO,EAAKgB,KAAO,IACxB,EAAKE,IAAM,IACX,EAAKjB,KAAO,EAAKgB,KAAO,EAAKE,IAAM,EACnC,EAAKC,SAAU,EACf,EAAKsM,UAAY,EAAKC,YAAY,IAAI7D,GAAa,IACnD,EAAK4D,UAAU1N,KAAO,EAAK0N,UAAU1M,KACrC,EAAK0M,UAAUzN,KAAO,EAAKyN,UAAUzM,KACrC,EAAKyM,UAAUtM,SAAU,EAEzB,IAAMwM,EAAgB,EAAKD,YAAY,IAAIE,GAAc,EAAKH,YACxDI,EAAoB,EAAKH,YAAY,IAAII,GAAkB,EAAKL,YAChEM,EAAoB,EAAKL,YAAY,IAAIM,GAAkB,EAAKP,YACtE,EAAKQ,gBAAkB,EAAKP,YAAY,IAAIQ,GAAgB,EAAKT,YACjE,EAAKU,iBAAmB,EAAKT,YAAY,IAAIU,GAAiB,EAAKX,YACnE,EAAKY,kBAAoB,EAAKX,YAAY,IAAIY,GAAkB,EAAKb,YACrE,IAAMc,EAAsB,EAAKb,YAAY,IAAIc,GAAoB,EAAKf,YACpEgB,EAAoB,EAAKf,YAAY,IAAIgB,GAAkB,EAAKjB,YAChEkB,EAAmB,EAAKjB,YAAY,IAAIkB,GAAiBH,IAC/DA,EAAkB/B,UAAUnM,QAAU,WAAM,OAAAkO,EAAkBnN,aAAY,WAAM,OAAAqN,EAAiBrN,kBACjG,IAAMuN,EAAe,EAAKnB,YAAY,IAAIoB,GAAaL,IACvDA,EAAkBhC,YAAYlM,QAAU,WAAM,OAAAkO,EAAkBnN,aAAY,WAAM,OAAAuN,EAAavN,kBAC/F,IAAMyN,EAAqB,EAAKrB,YAAY,IAAIsB,GAAmB,EAAKvB,YAClEwB,EAAiB,EAAKxB,UAAUjE,YAAY,kBAAmB,kCACrEyF,EAAetG,WAAa,WAAM,OAAAlgD,GAAA,gBAA4BA,GAAUmM,iBAAmBnM,GAAUuJ,kBAAoBk9C,KACpHzmD,GAAU4G,iBAAiB5R,EAASV,YAAaU,EAAST,eAC/DiyD,EAAerG,cACfjgD,EAASxJ,sBAAsBzB,EAASkC,kBAAkB,WAAM,OAAAqvD,EAAerG,iBAC/EjgD,EAASxJ,sBAAsBzB,EAASwC,cAAc,SAACtB,GAE/CA,EAAM3T,OAASyT,EAAWkY,UAAYhY,EAAM3T,OAASyT,EAAW4wC,QAAQ2f,EAAerG,iBAE/FjgD,EAASxJ,sBAAsBzB,EAASyC,gBAAgB,SAACvB,GAEjDA,EAAM3T,OAASyT,EAAWkY,UAAYhY,EAAM3T,OAASyT,EAAW4wC,QAAQ2f,EAAerG,iBAE/FqG,EAAe1O,QAAU,WACrB93C,GAAUuJ,mBACVrJ,EAAShK,aAAa,IAAIs/C,IAG9BgR,EAAe/O,SAAS,IAAIiP,GAAqBF,IACjD,IAAMG,EAAe,EAAK3B,UAAUjE,YAAY,kBAAmB,oCACnE4F,EAAazG,WAAa,WAAM,UAChCyG,EAAa7O,QAAU,WAAM,SAAKkN,UAAUnM,aAAY,WAAM,OAAAqM,EAAcrM,kBAC5E,IAAM+N,EAAmB,EAAK5B,UAAUjE,YAAY,kBAAmB,wCACvE6F,EAAiB1G,WAAa,WAAM,UACpC0G,EAAiB9O,QAAU,WAAM,SAAKkN,UAAUnM,aAAY,WAAM,OAAAuM,EAAkBvM,kBACpF,IAAMgO,EAAmB,EAAK7B,UAAUjE,YAAY,kBAAmB,wC,OACvE8F,EAAiB3G,WAAa,WAAM,UACpC2G,EAAiB/O,QAAU,WAAM,SAAKkN,UAAUnM,aAAY,WAAM,OAAAyM,EAAkBzM,kBACpF34C,EAASxJ,sBAAsBzB,EAASgN,kBAAkB,SAAC9L,GACvD,EAAK2wD,wBAAwB3wD,EAAMmB,YAEvC4I,EAASxJ,sBAAsBzB,EAASuN,iBAAiB,SAACrM,GAClD6J,GAAU6hD,kBAAoB1rD,EAAMmB,SAAS,EAAKwvD,wBAAwB3wD,EAAMmB,YAExF4I,EAASxJ,sBAAsBzB,EAASsN,mBAAmB,WAAM,SAAKwkD,eAAe,EAAK/B,cAC1F9kD,EAASxJ,sBAAsBzB,EAASkN,mBAAmB,WAAM,SAAK4kD,eAAejB,MACrF5lD,EAASxJ,sBAAsBzB,EAASmN,iBAAiB,WAAM,SAAK2kD,eAAef,MACnF9lD,EAASxJ,sBAAsBzB,EAASqN,kBAAkB,WAAM,SAAKykD,eAAeT,M,EAsC5F,OA3G+B,QAwE3B,YAAA59C,MAAA,WACI,YAAMA,MAAK,WACX5mB,KAAKw1D,KAAOx1D,KAAKw2D,KACjBx2D,KAAKy1D,KAAOz1D,KAAKy2D,KACjBz2D,KAAK42D,SAAU,EACf52D,KAAK61D,iBACL71D,KAAKkjE,UAAU1N,KAAOx1D,KAAKkjE,UAAU1M,KACrCx2D,KAAKkjE,UAAUzN,KAAOz1D,KAAKkjE,UAAUzM,KACrCz2D,KAAKkjE,UAAUtM,SAAU,EACzB52D,KAAKkjE,UAAUrN,kBAGnB,YAAAsN,YAAA,SAAoC+B,GAGhC,OAFAllE,KAAK21D,SAASuP,GACdllE,KAAKijE,UAAUn4D,KAAKo6D,GACbA,GAGX,YAAAD,eAAA,SAAeE,GACXnlE,KAAKijE,UAAUl+D,SAAQ,SAACqgE,GAAa,OAAAA,IAAaD,GAAeC,EAASvO,YAAW,MACrFsO,EAAYtO,YAAW,IAG3B,YAAAmO,wBAAA,SAAwBxvD,GAChBA,EAAQu9B,YAAYxsC,MAChBiP,EAAQ2iC,YACRn4C,KAAKilE,eAAejlE,KAAK8jE,mBAEzB9jE,KAAKilE,eAAejlE,KAAK4jE,kBAG7B5jE,KAAKilE,eAAejlE,KAAK0jE,kBAIrC,EA3GA,CAA+B7K,I,0dCnB/B,eAII,WAAYv4D,EAAqBg3D,GAAjC,MACI,YAAMh3D,EAAQg3D,IAAO,K,OAHzB,EAAAP,aAAuB,E,EA+C3B,OAjDkC,QAQ9B,YAAAjtB,WAAA,SAAWxE,EAAIC,GACX,GAAIvlC,KAAKi2D,aAAc,OAAO,EAC9B,IAAMC,EAASl2D,KAAKqmC,SAASf,EAAIC,GAC7B8/B,EAAUrlE,KAAK0pC,QAAUwsB,EAM7B,OALAl2D,KAAK0pC,MAAQwsB,EACbl2D,KAAK2pC,QAAW3pC,KAAK2pC,SAAW3pC,KAAK0pC,OAAU1pC,KAAK+2D,YAEpD/2D,KAAKoiB,SAASrd,SAAQ,SAAC6wD,GAAU,OAAAyP,EAAUzP,EAAM9rB,WAAWxE,EAAIC,IAAO8/B,KACnEA,GAASrlE,KAAKu2D,eACX8O,GAGX,YAAAjP,WAAA,SAAW9wB,EAAIC,GACX,GAAIvlC,KAAKi2D,aAAc,OAAO,EAC9B,IAAMqP,EAAYtlE,KAAKqmC,SAASf,EAAIC,IAAOvlC,KAAK+2D,YAC5CsO,EAAUrlE,KAAK2pC,UAAY27B,EAI/B,OAHAtlE,KAAK2pC,QAAU27B,EACftlE,KAAKoiB,SAASrd,SAAQ,SAAC6wD,GAAU,OAAAyP,EAAUzP,EAAMQ,WAAW9wB,EAAIC,IAAO8/B,KACnEA,GAASrlE,KAAKu2D,eACX8O,GAGX,YAAAhP,aAAA,SAAa/wB,EAAIC,GACb,GAAIvlC,KAAKi2D,aAAc,OAAO,EAC9B,IAAMC,EAASl2D,KAAKqmC,SAASf,EAAIC,GAC7B8/B,EAAUnP,GAAUl2D,KAAK2pC,QAS7B,OARI07B,IACArlE,KAAK+2D,aAAe/2D,KAAK+2D,YACzB/2D,KAAKg2D,UACLh2D,KAAK2pC,QAAU07B,GAAWrlE,KAAK+2D,YAC/B/2D,KAAK0pC,MAAQwsB,GAEjBl2D,KAAKoiB,SAASrd,SAAQ,SAAC6wD,GAAU,OAAAyP,EAAUzP,EAAMS,aAAa/wB,EAAIC,IAAO8/B,KACrEA,GAASrlE,KAAKu2D,eACX8O,GAGX,YAAA/O,QAAA,WACI,OAAO,GAGf,EAjDA,CAAkC+E,I,0dCElC,eAMI,WAAY7sB,EAAoBspB,GAAhC,MACI,YAAMtpB,IAAS,K,OACf,EAAK+2B,cAAgB,EAAK5P,SAAS,IAAI6P,GAAa,EAAM1N,EAAWuB,gCACrE,EAAKoM,WAAa,EAAK9P,SAAS,IAAI0F,GAAO,EAAMvD,EAAWwB,6BAC5D,EAAKoM,cAAgB,EAAK/P,SAAS,IAAI6P,GAAa,EAAM1N,EAAWyB,gC,EAG7E,OAb8B,QAa9B,EAbA,CAA8BV,I,0dCK9B,eAQI,WAAYv4D,EAAuBqlE,EAAkDnxD,GAArF,MACI,YAAMlU,EAAQ,IAAIslE,GAAcD,EAAwB3K,uBAAqB,K,OAPjF,EAAAtQ,SAAyB,GACzB,EAAA32B,KAAe,KACf,EAAAhT,iBAAmB,KACnB,EAAA8kD,gBAAkB,GAClB,EAAAC,gBAAkB,EAId,EAAK/xC,KAAO4xC,EAAwBI,QACpC,EAAKrQ,QAAS,EAEd,EAAKM,QAAU,WACP,EAAKtL,SAAShgD,OAAS,GAC3BpK,EAAO0lE,cAAc,IAGzB5nD,EAASxJ,sBAAsBJ,GAAU,SAACH,GAEtC,IADA,EAAKqhD,QAAS,EACP,EAAKhL,SAAShgD,QAAU,GAAG,EAAKggD,SAASxO,MAChD,EAAKwO,SAASxP,QAAQ7mC,GACtB/T,EAAO2lE,WAAW,M,EA2C9B,OAjEoC,QA0BhC,YAAAr/C,MAAA,WACI,YAAMA,MAAK,WACX5mB,KAAK+gB,iBAAmBpa,EAAiB3G,KAAK+gB,kBAC9C/gB,KAAK+zB,KAAO,KACZ/zB,KAAK01D,QAAS,EACd11D,KAAK0qD,SAAW,IAGpB,YAAAwb,cAAA,SAAc9sB,EAAiBC,GAA/B,WACI,OAAO,IAAI8sB,SAAc,SAACC,GAAY,SAAKpP,gBAAgB5d,EAASC,EAAS+sB,OAGzE,YAAApP,gBAAR,SAAwB5d,EAAiBC,EAAiByd,GACtD,IAAMK,EAAQ/d,EAAUp5C,KAAKw1D,KACvB4B,EAAQ/d,EAAUr5C,KAAKy1D,KAC7B,GAAIpvD,KAAKy2C,IAAIqa,IAAUn3D,KAAK6lE,iBAAmBx/D,KAAKy2C,IAAIsa,IAAUp3D,KAAK8lE,gBACnE9lE,KAAKw1D,KAAOpc,EACZp5C,KAAKy1D,KAAOpc,EACZr5C,KAAK+gB,iBAAmB,KACpB+1C,GAAQA,QACT,CACH92D,KAAKw1D,MAAQnvD,KAAK+d,MAAM/d,KAAKimC,KAAK6qB,GAAS9wD,KAAK42C,KAAK52C,KAAKy2C,IAAIqa,IAAUn3D,KAAK6lE,iBAC7E7lE,KAAKy1D,MAAQpvD,KAAK+d,MAAM/d,KAAKimC,KAAK8qB,GAAS/wD,KAAK42C,KAAK52C,KAAKy2C,IAAIsa,IAAUp3D,KAAK8lE,iBAC7E,IAAM,EAAO9lE,KACbA,KAAK+gB,iBAAmBc,YAAW,WAAM,SAAKm1C,gBAAgB5d,EAASC,EAASyd,KAAS,IAAOl1C,IAEpG5hB,KAAK61D,iBACL71D,KAAKu2D,gBAGT,YAAAjyB,SAAA,SAAS1gC,GACL,YAAM0gC,SAAQ,UAAC1gC,GACX5D,KAAK01D,SACT9xD,EAAQi0D,UAAY,OACpBj0D,EAAQklC,KAAO,kBACfllC,EAAQJ,UAAY,OACpBI,EAAQmlC,SAAS/oC,KAAK0qD,SAAShgD,OAAOlF,WAAYxF,KAAKuD,EAAI,EAAGvD,KAAKsD,EAAItD,KAAKkD,OAAS,EAAI,KAGjG,EAjEA,CAAoCm4D,I,0dCDpC,eAKI,WAAY7sB,EAAoBspB,EAA+BuO,EAAwCC,GAAvG,MACI,YAAM93B,IAAS,K,OAJnB,EAAA+3B,aAAiC,GACjC,EAAAD,iBAAqC,KAIjC,EAAKA,iBAAmBA,EACxB,EAAK3Q,SAAS,IAAI0F,GAAO,EAAMvD,EAAWiB,0BAA0B/C,QAAU,WAAM,SAAKwQ,qBACzF,EAAK7Q,SAAS,IAAI0F,GAAO,EAAMvD,EAAWkB,2BAA2BhD,QAAU,WAAM,SAAKyQ,qBAE1F,EAAK9Q,SAAS,IAAI+Q,GAAe,EAAML,EAAmBM,iBAAkBxzD,EAASm/B,iBACrF,EAAKqjB,SAAS,IAAI+Q,GAAe,EAAML,EAAmBO,mBAAoBzzD,EAASq/B,mBACvF,EAAKmjB,SAAS,IAAI+Q,GAAe,EAAML,EAAmBQ,iBAAkB1zD,EAASs/B,yBACrF,EAAKkjB,SAAS,IAAI+Q,GAAe,EAAML,EAAmBS,gBAAiB3zD,EAASu/B,wBACpF,EAAKijB,SAAS,IAAI+Q,GAAe,EAAML,EAAmBU,cAAe5zD,EAASw/B,qBAClF,EAAKgjB,SAAS,IAAI+Q,GAAe,EAAML,EAAmBW,eAAgB7zD,EAASy/B,uBACnF,EAAK+iB,SAAS,IAAI+Q,GAAe,EAAML,EAAmBY,eAAgB9zD,EAAS0/B,uBACnF,EAAK8iB,SAAS,IAAI+Q,GAAe,EAAML,EAAmBa,oBAAqB/zD,EAAS2/B,6B,EAkFhG,OApGmC,QAqB/B,YAAAlsB,MAAA,WACI,YAAMA,MAAK,WACX5mB,KAAKumE,aAAe,IAGhB,YAAAC,kBAAR,WACI,KAAIxmE,KAAKumE,aAAa77D,OAAS,GAA/B,CACA,IAAMy8D,EAAMnnE,KAAKumE,aAAa,GAC9B,KAAIY,EAAIzc,SAAShgD,OAAS,GAA1B,CACA,IAAMyqB,EAAMgyC,EAAIzc,SAAS,GACzBvnD,QAAQyG,IAAI,8BAAgCurB,EAAI9d,SAAShK,cAGrD,YAAAo5D,kBAAR,WACI,KAAIzmE,KAAKumE,aAAa77D,OAAS,GAA/B,CACA,IAAMu8B,EAASjnC,KAAKumE,aAAa,GAC7Bt/B,EAAOyjB,SAAShgD,OAAS,IAC7Bu8B,EAAOyjB,SAASjV,QACZxO,EAAOyjB,SAAShgD,OAAS,IACzBu8B,EAAOyuB,QAAS,EAChB11D,KAAKsmE,iBAAiBzP,YAAW,GACjC72D,KAAKumE,aAAah/D,OAAOvH,KAAKumE,aAAaj/D,QAAQ2/B,GAAS,GAC5DjnC,KAAKonE,yBAAyBC,QAElCpgC,EAAOsvB,kBAGX,YAAA0P,WAAA,SAAWh/B,GACHjnC,KAAKumE,aAAahyD,SAAS0yB,GAC3BA,EAAOsvB,eAEPv2D,KAAKsnE,cAAcrgC,IAInB,YAAAqgC,cAAR,SAAsBrgC,GAAtB,WACIjnC,KAAKumE,aAAaxhE,SAAQ,SAAAoiE,GAAO,OAAAA,EAAI/lE,UAAW,KAChD,IAAMi4C,GAAWr5C,KAAKumE,aAAalhE,KAAI,SAAAd,GAAK,OAAAA,EAAErB,UAAQ8wD,QAAO,SAACuT,EAAMC,GAAQ,OAAAD,EAAOC,IAAK,GACxFxnE,KAAKumE,aAAaz7D,KAAKm8B,GACvBA,EAAOuuB,MAAQvuB,EAAOhkC,MACtBgkC,EAAOwuB,KAAOpc,EAAUpS,EAAO/jC,OAC/B+jC,EAAO4uB,iBACP5uB,EAAOi/B,cAAc,EAAG7sB,GAASguB,MAAK,WAAM,SAAKd,aAAaxhE,SAAQ,SAAAoiE,GAAO,OAAAA,EAAI/lE,UAAW,SAGhG,YAAA4kE,cAAA,SAAc/+B,GACNA,IAAWjnC,KAAKumE,aAAa,GAC7BvmE,KAAKynE,UAAUxgC,IAEfjnC,KAAKsmE,iBAAiBoB,QAAQzgC,EAAOlT,MACrC/zB,KAAKsmE,iBAAiBvP,gBAItB,YAAA0Q,UAAR,SAAkBxgC,GAAlB,WACIjnC,KAAKumE,aAAah/D,OAAOvH,KAAKumE,aAAaj/D,QAAQ2/B,GAAS,GAC5DjnC,KAAKumE,aAAarrB,QAAQjU,GAC1BjnC,KAAKonE,yBAAyBC,MAAK,WAC/B,EAAKf,iBAAiBoB,QAAQzgC,EAAOlT,MACrC,EAAKuyC,iBAAiBzP,YAAW,OAIjC,YAAAuQ,uBAAR,sBACIpnE,KAAKumE,aAAaxhE,SAAQ,SAAAoiE,GAAO,OAAAA,EAAI/lE,UAAW,KAChD,IAAIq0D,EAAO,EACLkS,EAAW3nE,KAAKumE,aAAalhE,KAAI,SAAA8hE,GACnC,IAAMpkD,EAAIokD,EAAIjB,cAAc,EAAGzQ,GAE/B,OADAA,GAAQ0R,EAAIjkE,OACL6f,KAEX,OAAO,IAAIojD,SAAc,SAACC,GACtBD,QAAQyB,IAAID,GAAUN,MAAK,WACvB,EAAKd,aAAaxhE,SAAQ,SAAAoiE,GAAO,OAAAA,EAAI/lE,UAAW,KAChDglE,WAKhB,EApGA,CAAmCvN,I,0dCRnC,eAeI,WAAYviC,GAAZ,MACI,cAAO,K,OAdX,EAAAkjC,WAAuB,KACvB,EAAAqO,eAA2B,KAC3B,EAAAC,kBAA8B,KAC9B,EAAAC,cAA0B,KAC1B,EAAAC,kBAA8B,KAC9B,EAAAvO,oBAAgC,KAChC,EAAAC,cAA0B,KAC1B,EAAAC,iBAA6B,KAC7B,EAAAC,kBAA8B,KAC9B,EAAAC,mBAA+B,KAC/B,EAAAC,cAA0B,KAC1B,EAAAC,kBAA8B,KAI1B5hC,GAAW/B,WAAW,EAAME,G,EAMpC,OAvB+B,QAoB3B,YAAAS,WAAA,SAAWP,EAAqBG,GAC5B,OAAO,IAAIsxC,GAAStxC,IAE5B,EAvBA,CAA+BwB,IAyB/B,GAQI,SAAYxB,GACP32B,KAAK0B,SAAsDi1B,EAAQ,GAApD32B,KAAKw2D,KAAuC7/B,EAAQ,GAAzC32B,KAAKy2D,KAA4B9/B,EAAQ,GAA9B32B,KAAK02D,IAAiB//B,EAAQ,GAApB32B,KAAK22D,IAAOhgC,EAAQ,I,0dC1B5E,eAKI,WAAY6X,EAAoBspB,EAAmC9sC,EAA+BsK,GAAlG,MACI,YAAMkZ,IAAS,K,OAJnB,EAAA05B,cAA0C,GAC1C,EAAAC,WAA8C,IAAI3gE,IAI9CswD,EAAWmB,+BAA+Bl0D,SAAQ,SAACqjE,EAAW/gE,GAC1D,EAAKsuD,SAAS,IAAI0F,GAAO,EAAM+M,IAAYpS,QAAU,WACjD93C,GAAUsK,aAAayoC,OAAO5pD,GAC9B,EAAKghE,QAAQnqD,GAAUsK,aAAawoC,aAG5C8G,EAAWoB,6BAA6Bn0D,SAAQ,SAACqjE,EAAW/gE,GACxD,EAAKsuD,SAAS,IAAI0F,GAAO,EAAM+M,IAAYpS,QAAU,WACjD93C,GAAUsK,aAAa2oC,MAAM9pD,GAC7B,EAAKghE,QAAQnqD,GAAUsK,aAAawoC,aAG5C,EAAK2E,SAAS,IAAI0F,GAAO,EAAMvD,EAAWsB,+BAA+BpD,QAAU,WAAM,SAAKsS,aAE9F,EAAKJ,cAAgBl9C,EACrB,EAAKm9C,WAAWtgE,IAAIoY,GAAmBsoD,gBAAiB,EAAK5S,SAAS,IAAI0F,GAAO,EAAM/lC,EAAIizC,mBAC3F,EAAKJ,WAAWtgE,IAAIoY,GAAmBuoD,gBAAiB,EAAK7S,SAAS,IAAI0F,GAAO,EAAM/lC,EAAIkzC,mBAC3F,EAAKL,WAAWtgE,IAAIoY,GAAmB+F,kBAAmB,EAAK2vC,SAAS,IAAI0F,GAAO,EAAM/lC,EAAItP,qBAC7F,EAAKmiD,WAAWtgE,IAAIoY,GAAmBkG,cAAe,EAAKwvC,SAAS,IAAI0F,GAAO,EAAM/lC,EAAInP,iBACzF,EAAKgiD,WAAWtgE,IAAIoY,GAAmBwoD,iBAAkB,EAAK9S,SAAS,IAAI0F,GAAO,EAAM/lC,EAAImzC,oBAC5F,EAAKN,WAAWtgE,IAAIoY,GAAmB40C,mBAAoB,EAAKc,SAAS,IAAI0F,GAAO,EAAM/lC,EAAIu/B,sBAC9F,EAAKsT,WAAWtgE,IAAIoY,GAAmB2pC,sBAAuB,EAAK+L,SAAS,IAAI0F,GAAO,EAAM/lC,EAAIs0B,yBACjG,EAAKue,WAAWtgE,IAAIoY,GAAmBogD,uBAAwB,EAAK1K,SAAS,IAAI0F,GAAO,EAAM/lC,EAAI+qC,0BAClG,EAAK8H,WAAWtgE,IAAIoY,GAAmBs/C,oBAAqB,EAAK5J,SAAS,IAAI0F,GAAO,EAAM/lC,EAAIiqC,uBAC/F,EAAK4I,WAAWtgE,IAAIoY,GAAmByoD,mBAAoB,EAAK/S,SAAS,IAAI0F,GAAO,EAAM/lC,EAAIozC,sB,EAqCtG,OApEuC,QAkCnC,YAAA9hD,MAAA,WACI,YAAMA,MAAK,WACX5mB,KAAKsoE,aAGT,YAAAA,UAAA,WACIpqD,GAAUsK,aAAa5B,QACvB5mB,KAAKqoE,QAAQnqD,GAAUsK,aAAawoC,UAGhC,YAAAqX,QAAR,SAAgB7/C,GAAhB,WACIxoB,KAAKmoE,WAAWpjE,SAAQ,SAACoiE,GAAQ,OAAAA,EAAIzR,QAAS,KAC9C,IAAIruD,EAAQ,EACRg+D,GAAU,EACd78C,EAAazjB,SAAQ,SAAAuwB,GACjB,IAAMqzC,EAAqB,EAAKR,WAAWxgE,IAAI2tB,EAAInwB,KACnD,GAAIwjE,EAAY,CACZtD,EAAUA,GAAWsD,EAAWjT,QAAUiT,EAAWvnE,YAAck0B,EAAI47B,QACvEyX,EAAWjT,QAAS,EACpBiT,EAAWvnE,UAAYk0B,EAAI47B,QAC3ByX,EAAWnT,KAAO,EAAK0S,cAAc7gE,GAAO9D,EAC5ColE,EAAWlT,KAAO,EAAKyS,cAAc7gE,GAAO/D,EAC5CqlE,EAAW9S,iBACX,IAAM,EAAWxuD,EACjBshE,EAAW3S,QAAU,WACjB93C,GAAUsK,aAAa+oC,UAAU,GACjC,EAAK8W,QAAQnqD,GAAUsK,aAAawoC,UAExC3pD,QAGJg+D,GAASrlE,KAAKu2D,gBAG1B,EApEA,CAAuCsC,ICVvC,GAQI,SAAYliC,GANZ,KAAAovC,QAAkB,KAClB,KAAA/K,oBAA8B,KAC9B,KAAA4N,IAAc,KACd,KAAAC,OAAiB,KACjB,KAAAC,KAAe,KAGV9oE,KAAK+lE,QAAuEpvC,EAAQ,GAAtE32B,KAAKg7D,oBAAyDrkC,EAAQ,GAA5C32B,KAAK4oE,IAA+BjyC,EAAQ,GAAlC32B,KAAK6oE,OAAqBlyC,EAAQ,GAArB32B,KAAK8oE,KAAQnyC,EAAQ,GACrF32B,KAAK+lE,QAAU/lE,KAAK+lE,QAAQtgE,QAAQ,KAAM,M,0dCPlD,eAWI,WAAY6wB,GAAZ,MACI,cAAO,K,OAVX,EAAAqwC,iBAA4C,KAC5C,EAAAC,mBAA8C,KAC9C,EAAAC,iBAA4C,KAC5C,EAAAC,gBAA2C,KAC3C,EAAAC,cAAyC,KACzC,EAAAC,eAA0C,KAC1C,EAAAC,eAA0C,KAC1C,EAAAC,oBAA+C,KAI3C/uC,GAAW/B,WAAW,EAAME,G,EAOpC,OApBwC,QAgBpC,YAAAS,WAAA,SAAWP,EAAqBG,GAC5B,OAAO,IAAIoyC,GAAwBpyC,IAG3C,EApBA,CAAwCwB,I,0dCExC,eAKI,WAAYqW,GAAZ,MACI,YAAMA,IAAS,K,OAJnB,EAAA1F,KAAmB,KACnB,EAAAgzB,UAAY,KAIR,EAAKhzB,KAAOj7B,GAAgB61B,iB,EAapC,OApBsC,QAUlC,YAAAgkC,QAAA,SAAQ3zC,GACJ/zB,KAAK87D,UAAY/nC,EAAO/zB,KAAK8oC,KAAKhV,gBAAgBC,EAAM/zB,KAAKy0B,IAAIxxB,MAAQ,IAAM,KAC/EjD,KAAKu2D,gBAGT,YAAAjyB,SAAA,SAAS1gC,GACL,YAAM0gC,SAAQ,UAAC1gC,GACX5D,KAAK87D,WAAWl4D,EAAQwlC,UAAUppC,KAAK87D,UAAW97D,KAAKuD,GAAKvD,KAAKy0B,IAAIxxB,MAAQjD,KAAK87D,UAAU74D,OAAS,EAAGjD,KAAKsD,EAAI,KAG7H,EApBA,CAAsCu1D,I,0dCFtC,eAaI,WAAYviC,GAAZ,MACI,cAAO,K,OAZX,EAAAiyC,gBAA6B,KAC7B,EAAAC,gBAA6B,KAC7B,EAAAxiD,kBAA+B,KAC/B,EAAAG,cAA2B,KAC3B,EAAAsiD,iBAA8B,KAC9B,EAAA5T,mBAAgC,KAChC,EAAAjL,sBAAmC,KACnC,EAAAyW,uBAAoC,KACpC,EAAAd,oBAAiC,KACjC,EAAAmJ,mBAAgC,KAI5BvwC,GAAW/B,WAAW,EAAME,G,EAapC,OA5B2C,QAkBvC,YAAAS,WAAA,SAAWP,EAAqBG,GAC5B,MAAO,CACH4gC,WAAY5gC,EAAS,GACrB8gC,WAAY9gC,EAAS,GACrB+gC,cAAe/gC,EAAS,GACxBghC,YAAahhC,EAAS,GACtBihC,aAAcjhC,EAAS,KAInC,EA5BA,CAA2CwB,ICH3C,GAKI,SAAYxB,GACP32B,KAAKuD,EAAaozB,EAAQ,GAAlB32B,KAAKsD,EAAKqzB,EAAQ,ICNnC,GASI,SAAYA,GACP32B,KAAK+zB,KAA0C4C,EAAQ,GAA5C32B,KAAKg8D,cAA+BrlC,EAAQ,GAAxB32B,KAAKgpE,QAAWryC,EAAQ,I,0dCPhE,eAYI,WAAYL,GAAZ,MACI,cAAO,K,OAXX,EAAAimC,iBAA+C,KAC/C,EAAAE,oBAAkD,KAClD,EAAAE,qBAAmD,KACnD,EAAAE,aAA2C,KAC3C,EAAAE,iBAA+C,KAC/C,EAAAE,wBAAsD,KACtD,EAAAE,kBAAgD,KAChD,EAAAE,eAA6C,KAC7C,EAAAE,iBAA+C,KAI3CplC,GAAW/B,WAAW,EAAME,G,EAOpC,OArB2C,QAiBvC,YAAAS,WAAA,SAAWP,EAAqBG,GAC5B,OAAO,IAAIsyC,GAA2BtyC,IAG9C,EArBA,CAA2CwB,I,0dCE3C,eAKI,mBACI,cAAO,K,OAJX,EAAAz5B,YAA2B,IAAI24D,GAC/B,EAAA6R,OAAkB,GAId,EAAKxqE,YAAY63D,aAAe,WAAM,SAAKlyB,UAC3C,EAAKC,SAAW,SAAC1gC,GACbA,EAAQ6wD,UAAU,EAAG,EAAG7wD,EAAQD,OAAOV,MAAOW,EAAQD,OAAOT,QAC7D,EAAKxE,YAAY4lC,SAAS1gC,I,EAuCtC,OAjDkC,QAc9B,YAAAgjB,MAAA,WACI,YAAMA,MAAK,WACX5mB,KAAKkpE,OAAOnkE,SAAQ,SAACge,GAAM,OAAAA,EAAE6D,YAGjC,YAAAuiD,SAAA,SAA0BC,GAGtB,OAFAppE,KAAKtB,YAAYi3D,SAASyT,GAC1BppE,KAAKkpE,OAAOp+D,KAAKs+D,GACVA,GAGX,YAAAvkC,mBAAA,SAAmBC,EAA0BzwB,GACnC,MAAWrU,KAAKwkC,eAAenwB,EAAMyyB,QAASzyB,EAAM0yB,SAAnDzB,EAAE,KAAEC,EAAE,KACP,EAAWvlC,KAAKqlC,eAAehxB,EAAMyyB,QAASzyB,EAAM0yB,SAAnDgD,EAAE,KAAEC,EAAE,KACPq/B,EAAMrpE,KAAK4D,SAAW5D,KAAK4D,QAAQ6+B,aAAa6C,EAAIC,EAAI,EAAG,GAAG7gC,KAAK,GAAK,EAa9E,OAZI2kE,GACAh1D,EAAMiyB,iBACFxB,IAAc5O,GAAcqQ,KAC5BvmC,KAAKtB,YAAYorC,WAAWC,EAAIC,GACzBlF,IAAc5O,GAAcsQ,KAC/BnyB,EAAM4yB,SAAWhR,GAAaiW,MAAMlsC,KAAKtB,YAAY03D,WAAWrsB,EAAIC,GACjElF,IAAc5O,GAAcuQ,IAC/BpyB,EAAM4yB,SAAWhR,GAAaiW,MAAMlsC,KAAKtB,YAAY23D,aAAatsB,EAAIC,IAEvElF,IAAc5O,GAAcqQ,MACnCvmC,KAAKtB,YAAY43D,UAEd+S,GAGX,YAAArkC,iBAAA,SAAiB3wB,GACP,MAAWrU,KAAKwkC,eAAenwB,EAAMyyB,QAASzyB,EAAM0yB,SAAnDzB,EAAE,KAAEC,EAAE,KACb,OAAQvlC,KAAK4D,SAAW5D,KAAK4D,QAAQ6+B,aAAa6C,EAAIC,EAAI,EAAG,GAAG7gC,KAAK,GAAK,GAGlF,EAjDA,CAAkCuhC,I,0dCalC,eAeI,mBACI,cAAO,KAHX,EAAAqjC,cAA2B,WAAM,OAAAnmE,QAAQyG,IAAI,2BAIzC,IAAM2/D,EAAY,IAAIC,GAAU37D,GAAgBynB,IAAI,kBAC9CwiC,EAAa,IAAI2R,GAAW57D,GAAgBynB,IAAI,mBAEtD,EAAKykC,kBAAoB,EAAKoP,SAAS,IAAItQ,GAAM0Q,EAAUxP,oBAC3D,EAAKJ,iBAAmB,EAAKwP,SAAS,IAAIO,GAAiBH,EAAU5P,mBACrE,EAAKG,cAAgB,EAAKqP,SAAS,IAAIQ,GAAcJ,EAAUzP,cAAehC,EAAWgC,cAAe,IAAI8P,GAAmB/7D,GAAgBynB,IAAI,iBAAkB,EAAKqkC,mBAC1K,EAAKE,mBAAqB,EAAKsP,SAAS,IAAItQ,GAAM0Q,EAAU1P,qBAC5D,IAAMgQ,EAAwB,IAAIC,GAAsBj8D,GAAgBynB,IAAI,mBACtEy0C,EAA0B9kE,OAAOujD,OAAO36C,GAAgBynB,IAAI,6BAA6BjwB,KAAI,SAAAsxB,GAAY,WAAIqzC,GAAuBrzC,M,OAC1I,EAAKijC,kBAAoB,EAAKuP,SAAS,IAAIc,GAAkBV,EAAU3P,kBAAmB9B,EAAW8B,kBAAmBmQ,EAAyBF,IACjJ,EAAKnQ,cAAgB,EAAKyP,SAAS,IAAIe,GAASX,EAAU7P,cAAe5B,EAAW4B,gBACpF,EAAKyQ,UAAY,EAAKhB,SAAS,IAAIiB,IACnC,EAAK3Q,oBAAsB,EAAK0P,SAAS,IAAIkB,GAAoBd,EAAU9P,oBAAqB3B,EAAW2B,sBAC3G,EAAKuO,kBAAoB,EAAKmB,SAAS,IAAItQ,GAAM0Q,EAAUvB,oBAC3D,EAAKD,cAAgB,EAAKoB,SAAS,IAAImB,GAAaf,EAAUxB,cAAe,IAAIwC,GAAsB18D,GAAgBynB,IAAI,6BAC3H,EAAKkkC,WAAa,EAAK2P,SAAS,IAAIqB,GAAWjB,EAAU/P,WAAY+P,EAAU1B,eAAgB0B,EAAUzB,kBAAmBhQ,EAAW0B,aAEvI,EAAKE,cAAc+L,WAAWzP,QAAU,WAAM,SAAKsT,iBACnD,EAAK5P,cAAcgM,cAAc1P,QAAU,WACnC,EAAK0D,cAAcgM,cAAc3O,YACjC,EAAKoT,UAAUtT,YAAW,GAAM,WAAM,SAAK+C,kBAAkB/C,YAAW,MAExE,EAAK+C,kBAAkB/C,YAAW,GAAM,WAAM,SAAKsT,UAAUtT,YAAW,O,EAKxF,OA5CkC,QA4ClC,EA5CA,CAAkC4T,ICGlC,cAOI,WAAY52D,GAAZ,WAJA,KAAAu/B,KAAoB,GACpB,KAAAs3B,eAAiB,KACjB,KAAAC,oBAAsB,KAGlB3qE,KAAK6T,SAAWA,EAChBuK,EAASxJ,sBAAsBzB,EAAS+B,YAAY,SAACb,GACjD,EAAK++B,KAAKtoC,KAAKuJ,EAAMW,QAEzBoJ,EAASxJ,sBAAsBzB,EAASiC,YAAY,SAACf,GACjDA,EAAMW,IAAI2B,YA2ItB,OAvII,YAAAlI,MAAA,WACIwkD,OACAjzD,KAAK0qE,eAAiB38D,YAAY/N,KAAK4qE,WAAWzoD,KAAKniB,MAAO6qE,IAC9D7qE,KAAK2qE,oBAAsB58D,YAAY/N,KAAK8qE,qBAAqB3oD,KAAKniB,MAAO+qE,KAGjF,YAAA9X,KAAA,WACIjzD,KAAK0qE,eAAiB5jE,EAAkB9G,KAAK0qE,gBAC7C1qE,KAAK2qE,oBAAsB7jE,EAAkB9G,KAAK2qE,qBAClDzsD,GAAUqJ,QAAQxiB,SAAQ,SAACV,GAAM,OAAAA,EAAEw/C,uBACnC3lC,GAAUsJ,oBAAoBziB,SAAQ,SAACV,GAAM,OAAAA,EAAEw/C,uBAC/C3lC,GAAUwJ,SAAS3iB,SAAQ,SAAC8J,GAAM,OAAAA,EAAEg1C,uBACpC3lC,GAAUyJ,qBAAqB5iB,SAAQ,SAAC8J,GAAM,OAAAA,EAAEg1C,wBAGpD,YAAA+mB,WAAA,WACI,IAAMI,EAA6B,GACnChrE,KAAKozC,KAAOpzC,KAAKozC,KAAKluC,QAAO,SAACwsD,GAC1B,IAAMruD,EAASquD,EAAEn7C,WAAaV,EAASW,KAEvC,OADInT,GAAUquD,EAAEp7C,UAAU5L,OAAS,GAAGsgE,EAAclgE,KAAK4mD,GAClDruD,KAEX2nE,EAAc1jC,MAAK,SAACh2B,EAAMq3B,GACtB,OAAOtiC,KAAKimC,KAAKpuB,GAAUsK,aAAagpC,YAAYlgD,GAAQ4M,GAAUsK,aAAagpC,YAAY7oB,OAEnG,IAAMsiC,EAAmB/sD,GAAUqJ,QAAQriB,QAAO,SAACb,GAAM,OAACA,EAAE2Q,OAC5Dg2D,EAAcjmE,SAAQ,SAACiQ,GACnB,IAAIk2D,EAAwB,KACxBC,EAA6B,KAC7BC,EAAsB,KACtBC,EAA4B,KAC5BC,EAAiC,KACjCC,EAA0B,KAC1BC,EAAsC,KACtCC,EAAgC,KAChCC,EAAgC,KAChCC,EAAqC,KACrCC,EAA8B,KAC9BC,EAA+B,KAC/BC,EAAqC,KACzCb,EAAiBlmE,SAAQ,SAACmR,EAAQ7O,GAC9B,GAAI2N,EAAI8B,YAAYZ,GAAS,CACzB,IAAM61D,EAAY/2D,EAAI0C,gBAAgBrS,KAAI,SAACd,GAAM,OAAA2R,EAAOssC,iBAAiBj+C,MACpE+iC,MAAK,SAAClW,EAAG/sB,GAAM,OAAA+sB,EAAEstB,SAAWr6C,EAAEq6C,YAAU,GAC7C,GAAIqtB,EAAW,CACX,IAAM7iD,EAAO6iD,EAAUrtB,UACH,OAAhB0sB,GAAwBliD,EAAOkiD,KAC/BF,EAAgBh1D,EAChBi1D,EAAqB9jE,EACrB+jE,EAAcliD,QAGnB,CACH,IAAM8iD,EAAiB91D,EAAO7C,cACxB44D,EAAaj3D,EAAI+B,oBAAoBb,GAC3C,GAAI+1D,EAAY,CACZ,IAAMnJ,EAAoB5kD,GAAUiB,mBAAmBjM,EAASV,aAC3DnN,KAAI,SAACd,GAAM,OAAA2R,EAAOssC,iBAAiB,IAAI7qC,GAAWpT,EAAEgP,qBACpD+zB,MAAK,SAAClW,EAAG/sB,GAAM,OAAA+sB,EAAEstB,SAAWr6C,EAAEq6C,YAAU,GACzCokB,IACM55C,EAAO45C,EAAkBpkB,UACP,OAApB6sB,GAA4BriD,EAAOqiD,KACnCF,EAAoBn1D,EACpBo1D,EAAyBjkE,EACzBkkE,EAAkBriD,EAClBsiD,EAA6B1I,EAAkBE,eAC/CyI,EAAoBQ,QAGzB,CACH,IAAMC,EAAiBl3D,EAAIgC,wBAAwBd,GACnD,GAAIg2D,EAAgB,CAChB,IAAMC,EAAiBjuD,GAAUoL,iBAAiB0iD,EAAgBE,GAC7D7mE,KAAI,SAACkY,GAAS,OAAArH,EAAOssC,iBAAiB,IAAI7qC,GAAW4F,EAAKhK,qBAC1D+zB,MAAK,SAAClW,EAAG/sB,GAAM,OAAA+sB,EAAEstB,SAAWr6C,EAAEq6C,YAAU,GACzCytB,IACMjjD,EAAOijD,EAAeztB,UACA,OAAxBktB,GAAgC1iD,EAAO0iD,KACvCF,EAAwBx1D,EACxBy1D,EAA6BtkE,EAC7BukE,EAAsB1iD,EACtB2iD,EAAsB31D,EAAOrC,SAASC,aAAaC,QAAQmrC,sBAAsBitB,EAAenJ,gBAChG8I,EAAwBI,UAO5ChB,GACAA,EAAcjnB,OAAOjvC,GACrBi2D,EAAiB1jE,OAAO4jE,EAAoB,IACrCE,GACPA,EAAkBpnB,OAAO,IAAI8e,GAAWyI,EAA4BC,GAAoBz2D,GACxFi2D,EAAiB1jE,OAAO+jE,EAAwB,IACzCI,IACPA,EAAsBznB,OAAO,IAAI2e,GAASiJ,EAAqBC,GAAwB92D,GACvFi2D,EAAiB1jE,OAAOokE,EAA4B,QAKhE,YAAAb,qBAAA,WACI5sD,GAAUqJ,QAAQxiB,SAAQ,SAACmR,GACvB,IAAIA,EAAOlB,IAEX,IADA,IAAMqqC,EAAenpC,EAAOrC,SAASC,aAAaC,QAAQC,oBAAoBkC,EAAO7C,eAC5E+4D,EAAM,EAAGA,EAAM,GAAIA,IACxB,IAAK,IAAI7oE,EAAI87C,EAAa97C,EAAI6oE,EAAK7oE,GAAK87C,EAAa97C,EAAI6oE,EAAK7oE,IAC1D,IAAK,IAAID,EAAI+7C,EAAa/7C,EAAI8oE,EAAK9oE,GAAK+7C,EAAa/7C,EAAI8oE,EAAK9oE,IAAK,CAC/D,IAAMkS,EAAUU,EAAOrC,SAASC,aAAaC,QAAQ0gC,iBAAiBlxC,EAAGD,GACzE,IAAMkS,aAAO,EAAPA,EAAS2iC,cAAiB3iC,EAAQuV,aAAcvV,EAAQ6+B,WAAWh+B,GAAQsvC,cAAjF,CACA,IAAM4P,EAAU,IAAIH,GAAe5/C,GACnC,GAAI+/C,EAAQz+C,YAAYZ,GACpBA,EAAO+tC,OAAOsR,OACX,CACH,IAAM0W,EAAa1W,EAAQx+C,oBAAoBb,GAC/C,IAAI+1D,EAQA,SAPA,IAAMnJ,EAAoB5kD,GAAUiB,mBAAmBjM,EAASV,aAC3DnN,KAAI,SAACd,GAAM,OAAA2R,EAAOssC,iBAAiB,IAAI7qC,GAAWpT,EAAEgP,qBACpD+zB,MAAK,SAAClW,EAAG/sB,GAAM,OAAA+sB,EAAEstB,SAAWr6C,EAAEq6C,YAAU,GACzCokB,GACA5sD,EAAO+tC,OAAO,IAAI8e,GAAWD,EAAkBE,eAAgBiJ,GAAa1W,GAMxFn3C,EAAShK,aAAa,IAAIwL,EAAe21C,IACzC//C,EAAQ+/B,uBAOhC,EAxJA,G,0dCdA,eAaI,WAAYjgB,GAAZ,MACI,cAAO,K,OAXX,EAAAA,IAAwB,KACxB,EAAA+2C,SAA8B,KAC9B,EAAAC,UAAoB,EACpB,EAAAC,UAAoB,EACpB,EAAAC,QAAkB,KAClB,EAAAC,QAAkB,KAClB,EAAAC,QAA6B,KAC7B,EAAAC,aAAoC,GACpC,EAAAC,UAAoB,EAIhB,EAAKt3C,IAAMA,EACX,EAAK+2C,SAAW/2C,EAAIu3C,UAAU/4C,gBAAgBwB,EAAIqZ,OAClD,EAAK29B,UAAYh3C,EAAIw3C,YAAYvpE,GAAK+xB,EAAIw3C,YAAY3/B,EAAI,EAAKk/B,SAASppE,OAAS,EACjF,EAAKspE,UAAYj3C,EAAIw3C,YAAYxpE,EACjC,EAAKkpE,QAAU,EAAK7W,SAAS,IAAI0F,GAAO,EAAM/lC,EAAIy3C,gBAClD,EAAKP,QAAQxW,QAAU,WAAM,SAAKgX,iBAClC,EAAKP,QAAU,EAAK9W,SAAS,IAAI0F,GAAO,EAAM/lC,EAAI23C,gBAClD,EAAKR,QAAQzW,QAAU,WAAM,SAAKkX,iBAClC,EAAKxX,QAAS,E,EA6DtB,OApFmC,QA0B/B,YAAA9uC,MAAA,WACI,YAAMA,MAAK,WACX5mB,KAAK01D,QAAS,EACd11D,KAAKmtE,aAAa,IAGtB,YAAA/a,MAAA,SAAMgb,EAAuBC,GAA7B,WACIrtE,KAAK0sE,QAAU7+D,GAAgBg1B,eAAewqC,EAAoB3rE,UAClE1B,KAAKw1D,KAAO6X,EAAoB9pE,EAChCvD,KAAKy1D,KAAO4X,EAAoB/pE,EAChCtD,KAAKiD,MAAQjD,KAAK0sE,QAAQzpE,MAC1BjD,KAAKkD,OAASlD,KAAK0sE,QAAQxpE,OAC3BlD,KAAK61D,iBACL71D,KAAK2sE,aAAeS,EAAc3iE,MAAM,OAAOpF,KAAI,SAAAgoD,GAAO,SAAK/3B,IAAIg4C,SAASx5C,gBAAgBu5B,EAAK,EAAK/3B,IAAIi4C,WAAWpgC,GAAG,OAG5H,YAAAggC,aAAA,SAAaP,GACT,KAAIA,EAAY,GAAhB,CACA,GAAIA,EAAY5sE,KAAK2sE,aAAajiE,OAAS,EAGvC,OAFA1K,KAAK6C,YACL7C,KAAKu2D,eAGTv2D,KAAK4sE,UAAYA,EACjB5sE,KAAKwsE,QAAQ9W,OAAS11D,KAAK4sE,WAAa5sE,KAAK2sE,aAAajiE,OAAS,EACnE1K,KAAKysE,QAAQ/W,OAAS11D,KAAK4sE,UAAY,EACvC5sE,KAAKu2D,iBAGT,YAAAyW,cAAA,WACIhtE,KAAKmtE,aAAantE,KAAK4sE,UAAY,IAGvC,YAAAM,cAAA,WACIltE,KAAKmtE,aAAantE,KAAK4sE,UAAY,IAGvC,YAAAhqE,KAAA,W,MACI,YAAMA,KAAI,WACV5C,KAAKmtE,aAAa,GAClBntE,KAAKwsE,QAAQ9W,OAAS11D,KAAK4sE,WAAa5sE,KAAK2sE,aAAajiE,OAAS,EACnE1K,KAAKysE,QAAQ/W,OAAS11D,KAAK4sE,UAAY,EACtB,QAAjB,EAAA5sE,KAAKwtE,oBAAY,SAAEtgB,WAAWltD,KAAKwtE,aAAahR,mBAAoB,IAGxE,YAAA35D,KAAA,W,MACI,YAAMA,KAAI,WACO,QAAjB,EAAA7C,KAAKwtE,oBAAY,SAAE/P,aAAaz9D,KAAKwtE,aAAahR,qBAGtD,YAAAl4B,SAAA,SAAS1gC,GACD5D,KAAK01D,SACL11D,KAAK0sE,SAAS9oE,EAAQwlC,UAAUppC,KAAK0sE,QAAS1sE,KAAKuD,EAAGvD,KAAKsD,GAC3DtD,KAAKqsE,UAAUzoE,EAAQwlC,UAAUppC,KAAKqsE,SAAUrsE,KAAKuD,EAAIvD,KAAKssE,UAAWtsE,KAAKsD,EAAItD,KAAKusE,WACvFvsE,KAAK2sE,cAAgB3sE,KAAK2sE,aAAa3sE,KAAK4sE,YAAYhpE,EAAQwlC,UAAUppC,KAAK2sE,aAAa3sE,KAAK4sE,WAAY5sE,KAAKuD,EAAIvD,KAAKs1B,IAAIi4C,WAAWhqE,EAAGvD,KAAKsD,EAAItD,KAAKs1B,IAAIi4C,WAAWjqE,GAC9K,YAAMghC,SAAQ,UAAC1gC,KAGvB,EApFA,CAAmCi1D,I,0dCHnC,eAYI,WAAYv4D,EAAmBmtE,GAA/B,MACI,YAAMntE,IAAO,K,OAJjB,EAAAotE,OAAiB,EACjB,EAAA9yB,OAAiB,EAIb,EAAK4a,KAAOiY,EAAQlqE,EACpB,EAAKkyD,KAAOgY,EAAQnqE,EACpB,EAAKoqE,OAASD,EAAQxqE,MACtB,EAAK0qE,cAAgBrtE,EAAOiqC,OAAOzW,gBAAgB25C,EAAQG,aAC3D,EAAKC,aAAevtE,EAAOmqC,OAAO3W,gBAAgB25C,EAAQG,aAC1D,EAAKE,kBAAoBxtE,EAAOiqC,OAAOzW,gBAAgB25C,EAAQM,UAC/D,EAAKC,iBAAmB1tE,EAAOmqC,OAAO3W,gBAAgB25C,EAAQM,UAC9D,EAAKE,iBAAmB3tE,EAAOiqC,OAAOzW,gBAAgB25C,EAAQS,SAC9D,EAAKC,gBAAkB7tE,EAAOmqC,OAAO3W,gBAAgB25C,EAAQS,SAC7D,EAAKjrE,MAAQwqE,EAAQxqE,MAAQoD,KAAKD,IAAI,EAAK+nE,gBAAgBlrE,MAAO,EAAK+qE,iBAAiB/qE,OACxF,EAAKC,OAAS,EAAKyqE,cAAczqE,O,EA6CzC,OArEmC,QA2B/B,YAAA8yD,QAAA,WACIh2D,KAAK46C,OAAS56C,KAAK46C,MACnBz3C,QAAQyG,IAAI,oCAAsC5J,KAAK46C,QAG3D,YAAA9Q,WAAA,SAAWxE,EAAIC,GACX,IAAM4wB,EAAe,YAAMrsB,WAAU,UAACxE,EAAIC,GAE1C,OADI4wB,GAAcn2D,KAAKu2D,eAChBJ,GAGX,YAAAC,WAAA,SAAW9wB,EAAIC,GACX,IAAM4wB,EAAe,YAAMC,WAAU,UAAC9wB,EAAIC,GAE1C,OADI4wB,GAAcn2D,KAAKu2D,eAChBJ,GAGX,YAAAE,aAAA,SAAa/wB,EAAIC,GACb,IAAM4wB,EAAe,YAAME,aAAY,UAAC/wB,EAAIC,GAE5C,OADI4wB,GAAcn2D,KAAKu2D,eAChBJ,GAGX,YAAAG,QAAA,WACI,IAAMH,EAAe,YAAMG,QAAO,WAElC,OADIH,GAAcn2D,KAAKu2D,eAChBJ,GAGX,YAAA7xB,SAAA,SAAS1gC,GACL,IAAI5D,KAAK01D,OAAT,CACA,IAAIjhC,EAAMz0B,KAAK2tE,cACXS,EAAWpuE,KAAK46C,MAAQ56C,KAAKiuE,iBAAmBjuE,KAAK8tE,kBACrD9tE,KAAK0pC,QACLjV,EAAMz0B,KAAK6tE,aACXO,EAAWpuE,KAAK46C,MAAQ56C,KAAKmuE,gBAAkBnuE,KAAKguE,kBAExDpqE,EAAQwlC,UAAU3U,EAAKz0B,KAAKuD,EAAGvD,KAAKsD,GACpCM,EAAQwlC,UAAUglC,EAAUpuE,KAAKuD,EAAIvD,KAAK0tE,OAAQ1tE,KAAKsD,GACvD,YAAMghC,SAAQ,UAAC1gC,KAGvB,EArEA,CAAmCyzD,I,0dCGnC,eAcI,WAAY/2D,EAAmBmtE,GAA/B,MACI,YAAMntE,IAAO,KAPjB,EAAA+tE,QAAkB,EAClB,EAAAloE,IAAc,EACd,EAAAC,IAAc,EACd,EAAA9D,MAAgB,EAChB,EAAAgsE,eAAyC,SAAChsE,GAAU,OAAAa,QAAQyG,IAAI,qBAAuBtH,IAInF,EAAKkzD,KAAOiY,EAAQlqE,EACpB,EAAKkyD,KAAOgY,EAAQnqE,EACpB,EAAK+qE,QAAUZ,EAAQxqE,MACvB,EAAKsrE,QAAU1gE,GAAgB+0B,SAAS6qC,EAAQc,SAChD,EAAK3jC,UAAY/8B,GAAgB+0B,SAAS6qC,EAAQe,QAClD,EAAK3jC,SAAWh9B,GAAgB+0B,SAAS6qC,EAAQgB,OACjD,EAAKC,SAAW7gE,GAAgB+0B,SAAS6qC,EAAQiB,UACjD,IAAMC,EAAU,EAAKhZ,SAAS,IAAI0F,GAAO,EAAM,IAAIN,KACnD4T,EAAQ/jC,UAAY/8B,GAAgB+0B,SAAS6qC,EAAQmB,eACrDD,EAAQ9jC,SAAWh9B,GAAgB+0B,SAAS6qC,EAAQoB,cACpDF,EAAQnZ,KAAO,EAAK6Y,QAAU,EAAKE,QAAQtrE,MAAQ0rE,EAAQ9jC,SAAS5nC,MACpE0rE,EAAQ1rE,MAAQ0rE,EAAQ9jC,SAAS5nC,MACjC0rE,EAAQzrE,OAASyrE,EAAQ9jC,SAAS3nC,OAClCyrE,EAAQ9Y,iBACR8Y,EAAQ3Y,QAAU,WACV,EAAK1zD,MAAQ,EAAK6D,MAClB,EAAK7D,QACL,EAAKgsE,eAAe,EAAKhsE,SAGjC,IAAMwsE,EAAW,EAAKnZ,SAAS,IAAI0F,GAAO,EAAM,IAAIN,K,OACpD+T,EAASlkC,UAAY/8B,GAAgB+0B,SAAS6qC,EAAQsB,gBACtDD,EAASjkC,SAAWh9B,GAAgB+0B,SAAS6qC,EAAQuB,eACrDF,EAAStZ,KAAO,EAAK6Y,QAAU,EAAKzjC,UAAU3nC,MAA8B,EAAtB,EAAKyrE,SAASzrE,MACpE6rE,EAAS7rE,MAAQ6rE,EAASjkC,SAAS5nC,MACnC6rE,EAAS5rE,OAAS4rE,EAASjkC,SAAS3nC,OACpC4rE,EAASjZ,iBACTiZ,EAAS9Y,QAAU,WACX,EAAK1zD,MAAQ,EAAK8D,MAClB,EAAK9D,QACL,EAAKgsE,eAAe,EAAKhsE,SAGjC,EAAKW,MAAQwqE,EAAQxqE,MAAQ0rE,EAAQ9jC,SAAS5nC,MAAQ,EAAKsrE,QAAQtrE,MAAQ,EAAK2nC,UAAU3nC,MAA8B,EAAtB,EAAKyrE,SAASzrE,MAAY6rE,EAASjkC,SAAS5nC,MAC9I,EAAKkD,IAAMsnE,EAAQtnE,IACnB,EAAKC,IAAMqnE,EAAQrnE,KAAO,EAC1B,EAAK9D,MAAQ,EAAK6D,IAClB,EAAKwnE,cAAgBrtE,EAAOiqC,OAAOzW,gBAAgB25C,EAAQG,aAC3D,EAAKC,aAAevtE,EAAOmqC,OAAO3W,gBAAgB25C,EAAQG,aAC1D,EAAK1qE,OAAS,EAAKyqE,cAAczqE,O,EA0BzC,OAjFoC,QA0DhC,YAAA4mC,WAAA,SAAWxE,EAAIC,GACX,IAAM4wB,EAAe,YAAMrsB,WAAU,UAACxE,EAAIC,GAE1C,OADI4wB,GAAcn2D,KAAKu2D,eAChBJ,GAGX,YAAA7xB,SAAA,SAAS1gC,GACL,IAAI5D,KAAK01D,OAAT,CACA,IAAIjhC,EAAMz0B,KAAK2tE,cACX3tE,KAAK0pC,QACLjV,EAAMz0B,KAAK6tE,cAEfjqE,EAAQwlC,UAAU3U,EAAKz0B,KAAKuD,EAAGvD,KAAKsD,GACpC,IAAI2rE,EAAOjvE,KAAKuD,EAAIvD,KAAKquE,QACzBzqE,EAAQwlC,UAAUppC,KAAKuuE,QAASU,EAAMjvE,KAAKsD,GAC3CM,EAAQwlC,UAAUppC,KAAK4qC,UAAWqkC,EAAMjvE,KAAKsD,GAC7C,IAAM4rE,EAAK7oE,KAAK+d,MAAMpkB,KAAKsC,MAAQtC,KAAKoG,IAAMpG,KAAK6qC,SAAS5nC,OAC5DW,EAAQwlC,UAAUppC,KAAK6qC,SAAU,EAAG,EAAGqkC,EAAIlvE,KAAK6qC,SAAS3nC,OAAQ+rE,EAAMjvE,KAAKsD,EAAG4rE,EAAIlvE,KAAK6qC,SAAS3nC,QACjG+rE,GAAQjvE,KAAK4qC,UAAU3nC,MACvBW,EAAQwlC,UAAUppC,KAAK0uE,SAAUO,EAAMjvE,KAAKsD,GAC5C,YAAMghC,SAAQ,UAAC1gC,KAGvB,EAjFA,CAAoCyzD,I,0dCHpC,eAMI,WAAY/2D,EAAmBmtE,EAA2Bx5C,GAA1D,MACI,YAAM3zB,IAAO,K,OACb,EAAKoqC,OAAS+iC,EAAQ/iC,OACtB,EAAKykC,MAAQ7uE,EAAOiqC,OAAOzW,gBAAgB25C,EAAQjjC,OACnD,EAAK4kC,MAAQ9uE,EAAOmqC,OAAO3W,gBAAgB25C,EAAQjjC,OACnD,EAAKvnC,MAAQ,EAAKksE,MAAMlsE,MACxB,EAAKC,OAAS,EAAKisE,MAAMjsE,OACzB,EAAKsyD,KAAOvhC,GAAc3zB,EAAOk1D,MAAQl1D,EAAO+qC,UAAUpoC,MAAQ,EAAKA,OAAS,EAAIwqE,EAAQlqE,EAC5F,EAAKkyD,KAAOgY,EAAQnqE,E,EAqC5B,OAnDmC,QAiB/B,YAAAwmC,WAAA,SAAWxE,EAAIC,GACX,IAAM4wB,EAAe,YAAMrsB,WAAU,UAACxE,EAAIC,GAE1C,OADI4wB,GAAcn2D,KAAKu2D,eAChBJ,GAGX,YAAAC,WAAA,SAAW9wB,EAAIC,GACX,IAAM4wB,EAAe,YAAMC,WAAU,UAAC9wB,EAAIC,GAE1C,OADI4wB,GAAcn2D,KAAKu2D,eAChBJ,GAGX,YAAAE,aAAA,SAAa/wB,EAAIC,GACb,IAAM4wB,EAAe,YAAME,aAAY,UAAC/wB,EAAIC,GAE5C,OADI4wB,GAAcn2D,KAAKu2D,eAChBJ,GAGX,YAAAG,QAAA,WACI,IAAMH,EAAe,YAAMG,QAAO,WAElC,OADIH,GAAcn2D,KAAKu2D,eAChBJ,GAGX,YAAA7xB,SAAA,SAAS1gC,GACD5D,KAAK01D,SACL11D,KAAK0pC,MACL9lC,EAAQwlC,UAAUppC,KAAKovE,MAAOpvE,KAAKuD,EAAGvD,KAAKsD,GAE3CM,EAAQwlC,UAAUppC,KAAKmvE,MAAOnvE,KAAKuD,EAAGvD,KAAKsD,GAE/C,YAAMghC,SAAQ,UAAC1gC,KAGvB,EAnDA,CAAmCyzD,I,0dCInC,eASI,WAAY/2D,EAAqB0qC,GAAjC,MACI,YAAM1qC,IAAO,K,OAJjB,EAAA+uE,aAAgC,GAChC,EAAAC,UAA6B,GAIzB,EAAK9Z,KAAOxqB,EAAQ35B,SAAS,GAC7B,EAAKokD,KAAOzqB,EAAQ35B,SAAS,GAC7B,EAAKg6B,UAAYx9B,GAAgBg1B,eAAemI,EAAQK,UAAU,IAClE,EAAKC,WAAaz9B,GAAgB01B,cAAcyH,EAAQukC,UAAUz7C,gBAAgBkX,EAAQO,UAC1F,EAAKhB,OAAS18B,GAAgB01B,cAAcyH,EAAQT,QACpD,EAAKE,OAAS58B,GAAgB01B,cAAcyH,EAAQP,QACpDO,EAAQQ,WAAWzmC,SAAQ,SAAC0oE,GACxB,IAAMj2D,EAAO,EAAKm+C,SAAS,IAAI6Z,GAAc,EAAM/B,EAASziC,EAAQ/W,aAC3B,YAArCw5C,EAAQ7jC,WAAWxkC,cACnB,EAAKiqE,aAAavkE,KAAK0M,GAEvB,EAAK83D,UAAUxkE,KAAK0M,MAG5BwzB,EAAQykC,WAAW1qE,SAAQ,SAAC0oE,GAAY,SAAK9X,SAAS,IAAI+Z,GAAc,EAAMjC,OAC9EziC,EAAQ2kC,YAAY5qE,SAAQ,SAAC0oE,GAAY,SAAK9X,SAAS,IAAIia,GAAe,EAAMnC,OAChF,EAAK/X,QAAS,E,EAetB,OA1C+B,QA8B3B,YAAA9uC,MAAA,WACI,YAAMA,MAAK,WACX5mB,KAAK01D,QAAS,GAGlB,YAAApxB,SAAA,SAAS1gC,GACD5D,KAAK01D,SACT9xD,EAAQwlC,UAAUppC,KAAKqrC,WAAYrrC,KAAKM,OAAO2C,MAAQjD,KAAKqrC,UAAUpoC,OAAS,GAAIjD,KAAKM,OAAO4C,OAASlD,KAAKqrC,UAAUnoC,QAAU,GACjIU,EAAQwlC,UAAUppC,KAAKsrC,YAAatrC,KAAKM,OAAO2C,MAAQjD,KAAKsrC,WAAWroC,OAAS,EAAGjD,KAAKsD,GACzF,YAAMghC,SAAQ,UAAC1gC,KAGvB,EA1CA,CAA+ByzD,I,0dCH/B,eAII,WAAYjvB,EAAoB9S,GAAhC,MACI,cAAO,KAHX,EAAAu6C,YAAsC,IAAIroE,IAItC,EAAKvE,MAAQmlC,EAAMnD,WACnB,EAAK/hC,OAASklC,EAAMjD,YACpB,EAAKuwB,QAAS,EACdpgC,EAAIoZ,MAAM3pC,SAAQ,SAACimC,EAAS3jC,GAAU,SAAKwoE,YAAYhoE,IAAI,QAAUR,EAAQ,GAAI,EAAKsuD,SAAS,IAAIma,GAAU,EAAM9kC,QACnH,IAAM+kC,EAAa,E,OACnB,EAAKF,YAAY9qE,SAAQ,SAACqjC,GAAU,OAAAA,EAAMknC,UAAUvqE,SAAQ,SAACyS,GAAS,OAAAA,EAAKw+C,QAAU,WAAM,OAAA+Z,EAAWC,YAAYx4D,EAAKkzB,e,EAyB/H,OApCmC,QAc/B,YAAA9jB,MAAA,WACI,YAAMA,MAAK,WACX5mB,KAAK01D,QAAS,GAGlB,YAAA9yD,KAAA,WACI5C,KAAK01D,QAAS,EACd11D,KAAKgwE,YAAY,UAGrB,YAAAntE,KAAA,WACI,YAAMA,KAAI,WACV7C,KAAKu2D,gBAGT,YAAAyZ,YAAA,SAAY7qE,GACR,IAAMijC,EAAQpoC,KAAK6vE,YAAYloE,IAAIxC,EAAIC,eACvCpF,KAAK6vE,YAAY9qE,SAAQ,SAAAqsB,GAAK,OAAAA,IAAMgX,GAAShX,EAAEvuB,UAC/CulC,EAAMxlC,OACN5C,KAAKu2D,gBAGb,EApCA,CAAmCsC,I,0dCDnC,eAII,WAAYzwB,EAAoB9S,GAAhC,MACI,YAAM8S,EAAO9S,IAAI,KAHrB,EAAA26C,iBAA8B,WAAM,OAAA9sE,QAAQyG,IAAI,4BAI5C,IAAMw/D,EAAQ,E,OACd,EAAKyG,YAAYloE,IAAI,SAAS0nE,aAAa,GAAGrZ,QAAU,WAAM,OAAAoT,EAAM6G,oBACpE,EAAKJ,YAAYloE,IAAI,SAAS0nE,aAAa,GAAGrZ,QAAU,WAAM,OAAAoT,EAAMvmE,Q,EAG5E,OAXkC,QAWlC,EAXA,CAAkCqtE,I,0dCAlC,eAMI,WAAY9nC,EAAoB9S,GAAhC,MACI,YAAM8S,EAAO9S,IAAI,KALrB,EAAA26C,iBAA8B,WAAM,OAAA9sE,QAAQyG,IAAI,4BAChD,EAAAumE,YAAyB,WAAM,OAAAhtE,QAAQyG,IAAI,kBAC3C,EAAAwmE,cAA2B,WAAM,OAAAjtE,QAAQyG,IAAI,oBAIzC,IAAMmmE,EAAa,E,OACnB,EAAKF,YAAYloE,IAAI,SAAS0nE,aAAa,GAAGrZ,QAAU,WAAM,OAAA+Z,EAAWltE,QACzE,EAAKgtE,YAAYloE,IAAI,SAAS0nE,aAAa,GAAGrZ,QAAU,WAAM,OAAA+Z,EAAWE,oBACzE,EAAKJ,YAAYloE,IAAI,SAAS0nE,aAAa,GAAGrZ,QAAU,WAAM,OAAA+Z,EAAWI,eACzE,EAAKN,YAAYloE,IAAI,SAAS0nE,aAAa,GAAGrZ,QAAU,WAAM,OAAA+Z,EAAWK,iB,EAGjF,OAfgC,QAehC,EAfA,CAAgCF,ICJhC,GAOI,SAAYjW,GALZ,KAAA12D,EAAY,EACZ,KAAAD,EAAY,EACZ,KAAA6pC,EAAY,EACZ,KAAAC,EAAY,EAGPptC,KAAKuD,EAA6B02D,EAAG,GAA7Bj6D,KAAKsD,EAAqB22D,EAAG,GAArBj6D,KAAKmtC,EAAa8sB,EAAG,GAAbj6D,KAAKotC,EAAK6sB,EAAG,I,0dCL9C,eASI,WAAY3jC,GAAZ,MACI,cAAO,K,OARX,EAAA+5C,MAAgB,KAChB,EAAAvD,YAAoB,KACpB,EAAAS,WAAmB,KACnB,EAAA+C,SAAiB,KACjB,EAAAC,aAAqB,KACrB,EAAAC,gBAA0B,KAItBr4C,GAAW/B,WAAW,EAAME,G,EAUpC,OArB+B,QAc3B,YAAAS,WAAA,SAAWP,EAAqBG,GAC5B,OAAIH,EAAY9oB,SAAS,UACd,IAAI+iE,GAAK95C,GAEb,YAAMI,WAAU,UAACP,EAAaG,IAG7C,EArBA,CAA+BwB,I,0dCI/B,eAYI,mBACI,YAAM,KAAG,KACT,EAAK00C,UAAYh/D,GAAgB01B,cAAc,mCAC/C,EAAKoL,MAAQ9gC,GAAgBynB,IAAI,OAAQ,uBACzC,IAAMo7C,EAAY,IAAIC,GAAU9iE,GAAgBynB,IAAI,W,OACpD,EAAKw3C,YAAc4D,EAAU5D,YAC7B,EAAKQ,SAAWz/D,GAAgB01B,cAAc,kCAC9C,EAAKgqC,WAAamD,EAAUnD,WAC5B,EAAKR,cAAgB,CACjBxV,WAAY,0BACZ/B,KAAM,IACNC,KAAM,IACNgC,WAAY5pD,GAAgBynB,IAAI,OAAQ,sBAE5C,EAAK23C,cAAgB,CACjB1V,WAAY,8BACZ/B,KAAM,GACNC,KAAM,IACNgC,WAAY5pD,GAAgBynB,IAAI,OAAQ,c,EAIpD,OAlCsC,QAkCtC,EAlCA,CAAsC2yC,I,0dCKtC,eAMI,mBACI,cAAO,K,OACP,EAAK2I,WAAa,EAAKzH,SAAS,IAAI0H,GAAW,EAAMhjE,GAAgB0X,YAAY,gBACjF,EAAKurD,aAAe,EAAK3H,SAAS,IAAI4H,GAAa,EAAMljE,GAAgB0X,YAAY,iBACrF,EAAKyrD,cAAgB,EAAK7H,SAAS,IAAI8H,GAAc,IAAIC,KAEzD,EAAKN,WAAWX,iBAAmB,WAAM,SAAKkB,eAAe,EAAKH,gBAClE,EAAKF,aAAab,iBAAmB,WAAM,SAAKkB,eAAe,EAAKH,gB,EA4C5E,OAzDkC,QAgB9B,YAAAG,eAAA,SAAe/H,GACXppE,KAAKkpE,OAAOnkE,SAAQ,SAAAge,GAAK,OAAAA,IAAMqmD,GAASrmD,EAAElgB,UAC1CumE,EAAMxmE,OACN5C,KAAKqkC,UAGT,YAAA+tB,MAAA,SAAMgb,EAAuBC,GACzBrtE,KAAKgxE,cAAc5e,MAAMgb,EAAeC,GACnC/X,IAAUt1D,KAAKmxE,eAAenxE,KAAKgxE,gBAG5C,YAAAnsC,mBAAA,SAAmBC,EAA0BzwB,GACzC,OAAIrU,KAAKkpE,OAAOvG,OAAM,SAAA5/C,GAAK,OAAAA,EAAE2yC,YACtB,YAAM7wB,mBAAkB,UAACC,EAAWzwB,IAAUrU,KAAKukC,aAG9D,YAAAQ,eAAA,SAAeD,EAAsBzwB,GACjC,IAAIhR,GAAS,EACP+tE,EAAY/8D,EAAMlP,IAAIC,cAoB5B,OAnBI0/B,IAAc3O,GAAUsQ,KACN,WAAd2qC,EACIpxE,KAAKgxE,cAActb,QAAU11D,KAAK8wE,aAAapb,SAC3C11D,KAAK4wE,WAAWlb,OAEhB11D,KAAKmxE,eAAenxE,KAAK4wE,YAGzB5wE,KAAK4wE,WAAW/tE,OAEpBQ,GAAS,GAEQ,MAAd+tE,IACFpxE,KAAKgxE,cAActb,SACpB11D,KAAKgxE,cAAchE,gBACnB3pE,GAAS,KAIdA,GAGf,EAzDA,CAAkConE,I,0dCClC,eAYI,mBACI,cAAO,K,OACP,EAAK4G,UAAY,EAAKnpC,SAAS,IAAIopC,GAAa,GAChD,EAAKC,eAAiB,EAAKrpC,SAAS,IAAIspC,GAAkB,IAC1D,EAAKC,SAAW,EAAKvpC,SAAS,IAAIwpC,GAAgB,IAClD,EAAKC,aAAe,EAAKzpC,SAAS,IAAI0pC,GAAgB,IACtD,EAAKxd,aAAe,IAAIyd,GAAa,EAAKR,UAAU1tE,QACpD,EAAK0tE,UAAUld,gBAAgB,EAAKC,cACpC,EAAKmd,eAAepd,gBAAgB,EAAKC,cACzC,EAAK0d,cAAgB,IAAIC,GAAW,EAAK3d,cAEzC,EAAKqd,SAASnI,cAAgB,WAAM,SAAKqI,aAAab,aAAaluE,QACnE,EAAK+uE,aAAaX,cAAcxD,aAAe,EAAKiE,SAAS1J,cAC7D,EAAK4J,aAAaf,WAAWT,YAAc,WAAM,SAAKzoB,YAAc,EAAKA,cACzE,EAAKiqB,aAAaf,WAAWR,cAAgB,WAAM,SAAK4B,gB,EA0ChE,OApEgC,QA6B5B,YAAAC,WAAA,SAAWnjC,GAGP,GAFA9uC,KAAK8uC,UAAYA,EACjB9uC,KAAKugD,UAAY1yC,GAAgB0X,YAAY,UAAU4oB,aAAanuC,KAAK8uC,YACpE9uC,KAAKugD,UAAW,KAAM,2CAA6CvgD,KAAK8uC,UAAY,IACzF9uC,KAAKkyE,sBAGT,YAAAF,aAAA,WACIhyE,KAAK6C,OACLqb,GAAU0I,QACV5mB,KAAKkyE,sBAGD,YAAAA,mBAAR,WACI/uE,QAAQyG,IAAI,kBAAoB5J,KAAK8uC,UAAY,MAAQ9uC,KAAKugD,UAAUhV,UACxEvrC,KAAKo0D,aAAahC,MAAMpyD,KAAKugD,UAAWvgD,MACxC,IAAMotE,EAAyC,EAAKv/D,GAAgB0X,YAAYvlB,KAAKugD,UAAU6sB,eAAgBptE,KAAK8uC,WACpH9uC,KAAKyxE,SAAS7qD,QACd5mB,KAAK2xE,aAAavf,MAAMgb,EAAc+E,UAAWnyE,KAAKugD,UAAU6xB,uBAChEpyE,KAAK4C,QAGT,YAAAA,KAAA,WACI,YAAMA,KAAI,WACV5C,KAAKo0D,aAAa3lD,QAClBzO,KAAK8xE,cAAcrjE,SAGvB,YAAA5L,KAAA,WACI7C,KAAKo0D,aAAanB,OAClBjzD,KAAK8xE,cAAc7e,OACnB,YAAMpwD,KAAI,YAGd,YAAAuhC,OAAA,SAAOnhC,EAAeC,GAClB,YAAMkhC,OAAM,UAACnhC,EAAOC,GAChBlD,KAAKo0D,cAAcp0D,KAAKo0D,aAAahwB,OAAOnhC,EAAOC,IAG/D,EApEA,CAAgCqmC,I,0dCVhC,eASI,WAAY8oC,GAAZ,IAEQC,EAAmBC,EAAkBC,EAAoBC,EAFjE,EACI,cAAO,K,OAJX,EAAArxE,UAAoB,EACpB,EAAAuS,SAAmB,EAKd2+D,EAAgGD,EAAI,GAAjFE,EAA6EF,EAAI,GAA/DG,EAA2DH,EAAI,GAA3CI,EAAuCJ,EAAI,GAAtB,EAAK9uE,EAAa8uE,EAAI,GAAd,EAAK/uE,EAAK+uE,EAAI,GACrG,EAAKznC,UAAY/8B,GAAgB+0B,SAAS0vC,GAC1C,EAAKznC,SAAWh9B,GAAgB+0B,SAAS2vC,GACzC,EAAKznC,WAAaj9B,GAAgB+0B,SAAS4vC,GAC3C,EAAKhb,YAAc3pD,GAAgB+0B,SAAS6vC,GAC5C,EAAKxvE,MAAQ,EAAK2nC,UAAU3nC,MAC5B,EAAKC,OAAS,EAAK0nC,UAAU1nC,O,EAiBrC,OAnCwC,QAqBpC,YAAAknC,KAAA,SAAKxmC,GAED,GADA,YAAMwmC,KAAI,UAACxmC,GACN5D,KAAK2T,QAAV,CACA,IAAI8gB,EAAMz0B,KAAK4qC,UACX5qC,KAAKoB,SACLqzB,EAAMz0B,KAAKw3D,YACJx3D,KAAK2pC,QACZlV,EAAMz0B,KAAK8qC,WACJ9qC,KAAK0pC,QACZjV,EAAMz0B,KAAK6qC,UAEfjnC,EAAQwlC,UAAU3U,EAAKz0B,KAAKuD,EAAGvD,KAAKsD,KAG5C,EAnCA,CAAwCqnC,I,0dCOxC,eAkBI,mBACI,cAAO,KAhBX,EAAArV,IAAiB,KAKjB,EAAAo9C,YAAsB,EACtB,EAAAC,gBAA0B,EAC1B,EAAAC,OAA6D,GAC7D,EAAAC,MAA4D,GAC5D,EAAAC,MAAQ,GACR,EAAAC,MAA6B,GAC7B,EAAAC,eAAiB,KAMb,EAAK19C,IAAMznB,GAAgB0X,YAAY,UACvC,EAAKsnD,UAAYh/D,GAAgB01B,cAAc,EAAKjO,IAAIu3C,WACxD,IAAMoG,EAAgBplE,GAAgB+0B,SAAS,EAAKtN,IAAI49C,W,OAChC,EAAKhrC,SAAS,IAAIjC,IAC1B3B,SAAW,SAAC1gC,GAAY,OAAAA,EAAQwlC,UAAU6pC,EAAe,EAAG,IAC5E,EAAK39C,IAAIs9C,OAAO7tE,SAAQ,SAAC0vB,GACrB,EAAKm+C,OAAO9nE,KAAK,CAAC2pB,IAAK5mB,GAAgB+0B,SAASnO,EAAI0+C,UAAW5vE,EAAGkxB,EAAIlxB,EAAGD,EAAGmxB,EAAInxB,OAEpF,EAAKgyB,IAAI89C,UAAUruE,SAAQ,SAAC0vB,GACxB,EAAKo+C,MAAM/nE,KAAK,CAAC2pB,IAAK5mB,GAAgB+0B,SAASnO,EAAI0+C,UAAW5vE,EAAGkxB,EAAIlxB,EAAGD,EAAGmxB,EAAInxB,OAEnF2B,OAAOH,KAAK,EAAKwwB,IAAIw9C,OAAO/tE,SAAQ,SAACsuE,EAAShsE,GAC1C,IAAMyhC,EAAOj7B,GAAgB01B,cAAc,EAAKjO,IAAIw9C,MAAMO,IAC1D,EAAKP,MAAMO,EAAQjuE,eAAiB0jC,EACpC,IAAMukB,EAAM,EAAK/3B,IAAIy9C,MAAM1rE,GACrBisE,EAAYjsE,EAAQ,EAAIyhC,EAAOj7B,GAAgB01B,cAAc,EAAKjO,IAAIi+C,UAC5E,EAAKR,MAAMjoE,KAAKwoE,EAAUx/C,gBAAgBu5B,EAAIt5B,UAElD,EAAKy/C,aAAe,EAAKtrC,SAAS,IAAIjC,IACtC,EAAKutC,aAAa3uC,mBAAqB,SAAE6B,GACrC,OAAIA,IAAcxQ,GAAcuQ,KAC5B,EAAKusC,eAAiBrsE,EAAiB,EAAKqsE,gBAC5C,EAAKA,eAAiB,KACtB,EAAKN,YAAc,EAAKC,gBACxB,EAAKc,QAAQ9/D,SAAU,EACvB,EAAK+/D,WAAW//D,SAAU,EAC1B,EAAK0wB,UACE,IAIf,EAAKsvC,qBAAuB,EAAKzrC,SAAS,IAAIjC,GAAe,IAC7D,EAAK2tC,SAAW,EAAK1rC,SAAS,IAAIjC,GAAe,IACjD,EAAKwtC,QAAU,IAAII,GAAmB,EAAKv+C,IAAIw+C,YAC/C,EAAKL,QAAQryE,UAAW,EACxB,EAAKsyE,WAAa,IAAIG,GAAmB,EAAKv+C,IAAIy+C,eAClD,EAAKH,SAAS/uC,mBAAqB,SAAE6B,EAAWryB,GAC5C,GAAIqyB,IAAcxQ,GAAcqQ,KAAM,CAC5B,MAAW,EAAKqtC,SAASvuC,eAAehxB,EAAMyyB,QAASzyB,EAAM0yB,SAA5DgD,EAAE,KAAEC,EAAE,KACb,EAAKypC,QAAQ3pC,WAAWC,EAAIC,GAC5B,EAAK0pC,WAAW5pC,WAAWC,EAAIC,QACxBtD,IAAcxQ,GAAcsQ,KAC/BnyB,EAAM4yB,SAAWhR,GAAaiW,OAC9B,EAAKunC,QAAQvpC,kBACb,EAAKwpC,WAAWxpC,mBAEbxD,IAAcxQ,GAAcuQ,IAC/BpyB,EAAM4yB,SAAWhR,GAAaiW,OAC1B,EAAKunC,QAAQ9pC,QACb,EAAK8pC,QAAQtpC,cAEN,EAAKupC,WAAW/pC,UACvB,EAAK+pC,WAAWvpC,cAChB,EAAKtnC,OACL,EAAKmxE,cAKjB,OADI,EAAKP,QAAQhqC,aAAe,EAAKiqC,WAAWjqC,cAAa,EAAKpF,UAC3D,GAEX,EAAKuvC,SAAStvC,SAAW,SAAC1gC,GACtB,EAAK6vE,QAAQrpC,KAAKxmC,GAClB,EAAK8vE,WAAWtpC,KAAKxmC,I,EA4FjC,OA/KkC,QAuF9B,YAAAhB,KAAA,sBACI5C,KAAK0yE,YAAc,EACnB1yE,KAAKyzE,QAAQ9/D,SAAU,EACvB3T,KAAK0zE,WAAW//D,SAAU,EAC1B3T,KAAKi0E,gBACL,IAAMC,EAAmBl0E,KAAK6sE,UAAU/4C,gBAAgB5V,GAAU6I,eAC9DotD,EAAan0E,KAAKs1B,IAAI8+C,SAC1Bp0E,KAAK2yE,gBAAkB3yE,KAAK4yE,OAAOloE,OAAS,EACxCwT,GAAU2I,cAAgBxB,GAAgBnO,UAC1Ci9D,EAAan0E,KAAKs1B,IAAI++C,aACtBr0E,KAAK2yE,gBAAkB3yE,KAAK4yE,OAAOloE,OAAS,GACrCwT,GAAU2I,cAAgBxB,GAAgBymC,SACjDqoB,EAAan0E,KAAKs1B,IAAIg/C,YAE1B,IAAMC,EAAe,GACrBA,EAAazpE,KAAK9K,KAAK8yE,MAAgB,SAAEh/C,gBAAgB9zB,KAAKw0E,cAAct2D,GAAUC,WAAYD,GAAUgJ,kBAC5GqtD,EAAazpE,KAAK9K,KAAK8yE,MAAW,IAAEh/C,gBAAgB9zB,KAAKw0E,cAAct2D,GAAUK,OAAQL,GAAU8J,aACnGusD,EAAazpE,KAAK9K,KAAK8yE,MAAgB,SAAEh/C,gBAAgB9zB,KAAKw0E,cAAct2D,GAAUgK,mBAAoBhK,GAAU+J,gBAAgB,KACpIssD,EAAazpE,KAAK9K,KAAK8yE,MAAqB,cAAEh/C,gBAAgB5V,GAAUgB,UAAUxU,OAAOlF,aACzF+uE,EAAazpE,KAAK9K,KAAK8yE,MAAe,QAAEh/C,gBAAgB9zB,KAAKw0E,cAAct2D,GAAUkK,kBAAmBlK,GAAUiK,gBAClHosD,EAAazpE,KAAK9K,KAAK8yE,MAAe,QAAEh/C,gBAAgB9zB,KAAKw0E,cAAct2D,GAAUqJ,QAAQ7c,OAAQwT,GAAUmM,mBAC/GkqD,EAAazpE,KAAK9K,KAAK8yE,MAAoB,aAAEh/C,gBAAgB9zB,KAAKw0E,cAAc,KAChFD,EAAazpE,KAAK9K,KAAK8yE,MAAc,OAAEh/C,gBAAgB9zB,KAAKw0E,cAAct2D,GAAUiJ,YACpFotD,EAAazpE,KAAK9K,KAAK8yE,MAAa,MAAEh/C,gBAAgB9zB,KAAKy0E,WAAWv2D,GAAUwN,mBAChF6oD,EAAazpE,KAAK9K,KAAK8yE,MAAa,MAAEh/C,gBAAgB9zB,KAAKw0E,cAAct2D,GAAUw2D,SACnF,IAAMC,EAAoB30E,KAAK6sE,UAAU/4C,gBAAgBqgD,GACzDn0E,KAAKwzE,aAAalvC,SAAW,SAAC1gC,GAC1BA,EAAQ6wD,UAAU,EAAG,EAAG,EAAK+e,aAAavuC,WAAY,EAAKuuC,aAAaruC,aACxE,IAAK,IAAIr0B,EAAI,EAAGA,GAAK,EAAK4hE,YAAa5hE,IAAK,CACxC,IAAM2jB,EAAM,EAAKm+C,OAAO9hE,GACpB2jB,GAAK7wB,EAAQwlC,UAAU3U,EAAIA,IAAKA,EAAIlxB,EAAGkxB,EAAInxB,GAEnD,IAASwN,EAAI,EAAGA,GAAK,EAAK4hE,YAAa5hE,IAAK,CACxC,IAAM8jE,EAAM,EAAK/B,MAAM/hE,GACnB8jE,GAAKhxE,EAAQwlC,UAAUwrC,EAAIngD,IAAKmgD,EAAIrxE,EAAGqxE,EAAItxE,GAEnD,IAASwN,EAAI,EAAGA,GAAK,EAAK4hE,YAAa5hE,IAAK,CACxC,IAAMu8C,EAAM,EAAK/3B,IAAIy9C,MAAMjiE,GACrBijB,EAAOwgD,EAAazjE,GACtBijB,GAAMnwB,EAAQwlC,UAAUrV,EAAMs5B,EAAI9pD,EAAIwwB,EAAK9wB,MAAQ,EAAGoqD,EAAI/pD,GAElEM,EAAQwlC,UAAU8qC,EAAkB,EAAKV,aAAavuC,WAAa,EAAIivC,EAAiBjxE,MAAQ,EAAG,EAAKqyB,IAAIu/C,YAAcX,EAAiBhxE,OAAS,GACpJU,EAAQwlC,UAAUurC,EAAmB,EAAKnB,aAAavuC,WAAa,EAAI0vC,EAAkB1xE,MAAQ,EAAG,EAAKqyB,IAAIu/C,YAAcX,EAAiBhxE,OAAS,IAE1JlD,KAAK2zE,qBAAqBrvC,SAAW,SAAC1gC,GAClC,IAAMkxE,EAAqB,EAAK/B,MAAM,EAAKL,aAC3C9uE,EAAQ6wD,UAAU,EAAG,EAAKn/B,IAAIy/C,QAAQ,GAAI,EAAKpB,qBAAqB1uC,WAAY,EAAK0uC,qBAAqBxuC,YAAc,EAAK7P,IAAIy/C,QAAQ,IACzI,IAAMC,EAAK,EAAKtC,cAAgB,EAAKE,OAAOloE,OAAS,EAAI,EAAK4qB,IAAIy/C,QAAQ,GAAK,IACzEE,EAAK,EAAKvC,cAAgB,EAAKE,OAAOloE,OAAS,EAAI,EAAK4qB,IAAIy/C,QAAQ,GAAK,IAC/EnxE,EAAQwlC,UAAU0rC,EAAoBE,EAAKF,EAAmB7xE,MAAQ,EAAGgyE,IAE7E,YAAMryE,KAAI,YAGd,YAAA4xE,cAAA,SAAcU,EAAQ9uE,EAAS+uE,QAAT,IAAA/uE,MAAA,QAAS,IAAA+uE,OAAA,GACf,IAAR/uE,IAAWA,EAAM,GACrB,IAAI9D,EAAQ+D,KAAK+d,MAA+C,IAAzC/d,KAAKD,IAAIC,KAAKF,IAAI+uE,EAAS9uE,EAAK,GAAI,IAE3D,OADI+uE,IAAY7yE,EAAQ,IAAMA,GACvBA,EAAMkD,WAAa,KAG9B,YAAA4vE,QAAA,SAAQ9yE,EAAe+yE,EAAe3qE,GAClC,SADmB,IAAA2qE,MAAA,UAAe,IAAA3qE,MAAA,GAC3BpI,EAAMoI,OAASA,GAAQpI,EAAQ+yE,EAAU/yE,EAChD,OAAOA,GAGX,YAAAmyE,WAAA,SAAWa,GACP,IAAMC,EAAKv1E,KAAKo1E,SAASE,EAAU,IAAI9vE,YACjCgwE,EAAUnvE,KAAKE,MAAM+uE,EAAU,IAC/BG,EAAKz1E,KAAKo1E,SAAUI,EAAU,IAAIhwE,YAExC,OADWxF,KAAKo1E,QAAS/uE,KAAKE,MAAMivE,EAAU,IAAIhwE,YACtC,IAAMiwE,EAAK,IAAMF,GAGjC,YAAAtB,cAAA,sBACIj0E,KAAKgzE,eAAiBnxD,YAAW,WAC7B,EAAKmxD,eAAiB,KACtB,EAAKN,cACD,EAAKA,YAAc,EAAKC,gBACxB,EAAKsB,iBAEL,EAAKR,QAAQ9/D,SAAU,EACvB,EAAK+/D,WAAW//D,SAAU,GAE9B,EAAK0wB,WACW,IAAjBrkC,KAAKs1B,IAAI3J,QAGpB,EA/KA,CAAkC4d,I,UCArB+rB,IAAW,EACpBA,IAAUnyD,QAAQgL,KAAK,mBAEpB,IAAM08D,GAAwB,IACxBE,GAA6B,IAC7B3nB,GAAmB,EACnB2O,GAA2B,IAC3BznC,GAAkB,GAClBq6C,GAAqB,EACrBp6C,GAAgC,GAChC4nC,GAAsB,IAEtB8E,GAA6B,EAC7Bpf,GAAmB,GACnB5pC,GAA6B,EAI7Bi3B,GAA0B,IAC1BE,GAA2B,IAC3B1jB,GAAW,GACXE,GAAmB,GAI1B8zD,GAAgB,IAAIC,GACpBC,GAAqB,IAAIh2E,yBAAsB,kBAErDg2E,GAAmBn3E,QAAU,SAACyD,EAASE,GACnCyL,GAAgB0zB,oBAAoBr/B,EAASE,IAEjDyL,GAAgBg0B,UAAY,SAAC1M,GACzBugD,GAAc7sC,kBAAkB1T,IAEpCtnB,GAAgBq0B,cAAgB,WAC5B0zC,GAAmBhzE,QAEvBiL,GAAgBm0B,cAAgB,SAACzM,GAC7BqgD,GAAmB/yE,OACnB6yE,GAAc1sC,kBAAkBzT,IAEpC1nB,GAAgB+zB,cAAgB,WAC5B8zC,GAAcpsC,wBAElBz7B,GAAgBs0B,WAAa,WAEzB,IAAM0zC,EAAiB,IAAIC,GACrBzjB,EAAa,IAAI0jB,GACjBC,EAAe,IAAIC,GAEzBJ,EAAepnC,gBAAkB,SAACK,GAC9B,IACIujB,EAAW4f,WAAWnjC,GACxB,MAAO9qC,GACLb,QAAQC,MAAM,yBAA2B0rC,EAAW9qC,GACpDquD,EAAWxvD,OACXgzE,EAAehnC,uBAGvBwjB,EAAW3K,WAAa,WACpB2K,EAAWxvD,OACXmzE,EAAapzE,QAEjBozE,EAAahC,UAAY,WACrB91D,GAAU0I,QACVivD,EAAehnC,sBAInB6mC,GAAc7yE,OACd,IAAMqzE,EAAS,IAAIC,gBAAgBpuC,OAAO1wB,SAASikC,QAC7C+V,EAAQ6kB,EAAOvuE,IAAI,SACrB2tD,IAAYjE,GACZnzC,GAAUK,OAASgQ,OAAO2nD,EAAOvuE,IAAI,YAAc,EACnDuW,GAAUC,WAAaoQ,OAAO2nD,EAAOvuE,IAAI,gBAAkB,EAC7C,UAAV0pD,EAAmBwkB,EAAehnC,qBACnB,WAAVwiB,EAAoB2kB,EAAapzE,OACjCyuD,GAAOwkB,EAAezpC,YAAYilB,IAE3CwkB,EAAe1pC,gBAMvBupC,GAAc9yE,OACdiL,GAAgBwzB","file":"786.index.js","sourcesContent":["import { Modal } from 'bootstrap'\n\nexport class WadFileSelectionModal {\n\n    public onStart: (wad0Url, wad1Url) => any = null\n\n    private readonly modal: Modal\n\n    constructor(parentId: string) {\n        const rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        rootElement.classList.add('modal')\n        rootElement.tabIndex = -1\n        rootElement.setAttribute('role', 'dialog')\n        rootElement.setAttribute('aria-hidden', 'true')\n\n        const modalDialog = rootElement.appendChild(document.createElement('div'))\n        modalDialog.classList.add('modal-dialog')\n        rootElement.setAttribute('role', 'document')\n\n        const modalContent = modalDialog.appendChild(document.createElement('div'))\n        modalContent.classList.add('modal-content')\n\n        const modalHeader = modalContent.appendChild(document.createElement('div'))\n        modalHeader.classList.add('modal-header')\n        const modalTitle = modalHeader.appendChild(document.createElement('h5'))\n        modalTitle.classList.add('modal-title')\n        modalTitle.innerText = 'Load .wad files'\n        modalTitle.id = 'wadfileSelectModalLabel'\n        rootElement.setAttribute('aria-labelledby', modalTitle.id)\n\n        const modalBody = modalContent.appendChild(document.createElement('div'))\n        modalBody.classList.add('modal-body')\n\n        const hint = modalBody.appendChild(document.createElement('p'))\n        hint.innerText = 'Assets not included! In order to play the game, please select the game files.'\n\n        const navTabs = modalBody.appendChild(document.createElement('nav'))\n        const navTabList = navTabs.appendChild(document.createElement('div'))\n        navTabList.id = 'nav-tab'\n        navTabList.classList.add('nav', 'nav-tabs')\n        navTabList.setAttribute('role', 'tablist')\n\n        const navFileBtn = WadFileSelectionModal.appendNavButton(navTabList, true, 'nav-file-tab', 'nav-file', 'Local files (recommended)')\n        const navUrlBtn = WadFileSelectionModal.appendNavButton(navTabList, false, 'nav-url-tab', 'nav-url', 'Online from URL')\n\n        const navTabContent = modalBody.appendChild(document.createElement('div'))\n        navTabContent.classList.add('tab-content')\n        this.appendNavFileTab(navTabContent, navFileBtn.id)\n        this.appendNavUrlTab(navTabContent, navUrlBtn.id)\n\n        // rootElement has to be a valid bootstrap HTML modal before we can instantiate it\n        this.modal = new Modal(rootElement, {backdrop: 'static', keyboard: false})\n    }\n\n    private static appendNavButton(parent: HTMLDivElement, active: boolean, id: string, controlTarget: string, innerText: string) {\n        const navBtn = parent.appendChild(document.createElement('button'))\n        navBtn.classList.add('nav-link')\n        if (active) navBtn.classList.add('active')\n        navBtn.id = id\n        navBtn.setAttribute('data-bs-toggle', 'tab')\n        navBtn.setAttribute('data-bs-target', '#' + controlTarget)\n        navBtn.type = 'button'\n        navBtn.setAttribute('role', 'tab')\n        navBtn.setAttribute('aria-controls', controlTarget)\n        navBtn.setAttribute('aria-selected', String(active))\n        navBtn.innerText = innerText\n        return navBtn\n    }\n\n    private appendNavFileTab(parent: HTMLDivElement, labelledBy: string) {\n        const navFileTab = WadFileSelectionModal.appendNavTab(parent, true, 'nav-file', labelledBy)\n\n        const wad0File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad0-file', 'LegoRR0.wad')\n        const wad1File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad1-file', 'LegoRR1.wad')\n\n        const btnStartFile = navFileTab.appendChild(document.createElement('button'))\n        btnStartFile.type = 'submit'\n        btnStartFile.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartFile.id = 'button-start-file'\n        btnStartFile.innerText = 'Start Game'\n        btnStartFile.addEventListener('click', () => {\n            btnStartFile.disabled = true\n            const wad0FileUrl = URL.createObjectURL(wad0File.files[0])\n            const wad1FileUrl = URL.createObjectURL(wad1File.files[0])\n            this.onStart(wad0FileUrl, wad1FileUrl)\n        })\n    }\n\n    private static appendWadFileGroup(parent: HTMLDivElement, id: string, filename: string) {\n        const wadFileGroup = parent.appendChild(document.createElement('div'))\n        wadFileGroup.classList.add('my-3')\n        const wadFileLabel = wadFileGroup.appendChild(document.createElement('label'))\n        wadFileLabel.setAttribute('for', id)\n        wadFileLabel.classList.add('form-label')\n        wadFileLabel.innerHTML = 'Select <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadFileInput = wadFileGroup.appendChild(document.createElement('input'))\n        wadFileInput.type = 'file'\n        wadFileInput.classList.add('form-control')\n        wadFileInput.id = id\n        wadFileInput.required = true\n        return wadFileInput\n    }\n\n    private appendNavUrlTab(parent: HTMLDivElement, labelledBy: string) {\n        const navUrlTab = WadFileSelectionModal.appendNavTab(parent, false, 'nav-url', labelledBy)\n\n        const urlHint = navUrlTab.appendChild(document.createElement('div'))\n        urlHint.classList.add('my-3')\n        urlHint.innerText = 'Direct links with correct Allow-Origin-CORS-Headers required here.'\n\n        const wad0Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad0-url', 'LegoRR0.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n        const wad1Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad1-url', 'LegoRR1.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n\n        const btnStartUrl = navUrlTab.appendChild(document.createElement('button'))\n        btnStartUrl.type = 'submit'\n        btnStartUrl.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartUrl.id = 'button-start-url'\n        btnStartUrl.innerText = 'Start Game'\n        btnStartUrl.addEventListener('click', () => {\n            btnStartUrl.disabled = true\n            // XXX show loading progress for WAD files\n            this.onStart(wad0Url.value, wad1Url.value)\n        })\n    }\n\n    private static appendNavTab(parent: HTMLDivElement, active: boolean, id: string, labelledBy: string) {\n        const navTab = parent.appendChild(document.createElement('div'))\n        navTab.classList.add('tab-pane', 'fade')\n        if (active) navTab.classList.add('show', 'active')\n        navTab.id = id\n        navTab.setAttribute('role', 'tabpanel')\n        navTab.setAttribute('aria-labelledby', labelledBy)\n        return navTab\n    }\n\n    private static appendWadUrlGroup(parent: HTMLDivElement, id: string, filename: string, example: string) {\n        const wadUrlGroup = parent.appendChild(document.createElement('div'))\n        wadUrlGroup.classList.add('my-3')\n        const wadUrlLabel = wadUrlGroup.appendChild(document.createElement('label'))\n        wadUrlLabel.setAttribute('for', id)\n        wadUrlLabel.classList.add('form-label')\n        wadUrlLabel.innerHTML = 'Enter url for <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadUrlInput = wadUrlGroup.appendChild(document.createElement('input'))\n        wadUrlInput.type = 'url'\n        wadUrlInput.classList.add('form-control')\n        wadUrlInput.id = id\n        wadUrlInput.required = true\n        wadUrlInput.value = example\n        return wadUrlInput\n    }\n\n    public show() {\n        this.modal.show()\n    }\n\n    public hide() {\n        this.modal.hide()\n    }\n\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"index.worker.js\");\n}\n","export class InitLoadingMessage {\n\n    wad0FileUrl: string\n    wad1FileUrl: string\n\n    constructor(wad0FileUrl: string, wad1FileUrl: string) {\n        this.wad0FileUrl = wad0FileUrl\n        this.wad1FileUrl = wad1FileUrl\n    }\n\n}\n","/**\n * creates a new context with the specified dimensions.\n * @param width: the desired width of the new context\n * @param height: the desired height of the new context\n * @returns RenderingContext the newly created canvas\n */\nexport function createContext(width, height) {\n    if (width < 1 || height < 1) {\n        console.error('Can\\'t create context with size ' + width + ' x ' + height);\n        return createDummyContext(64, 64);\n    }\n    const canvas = document.createElement('canvas');\n    canvas.setAttribute('width', width);\n    canvas.setAttribute('height', height);\n    const context = canvas.getContext('2d');\n    context.width = width;\n    context.height = height;\n    return context;\n}\n\n/**\n * This method is intended to increase stability by providing an (ugly) placeholder image in case the right one is missing\n * @param width: expected width of the original image\n * @param height: expected height of the original image\n */\nexport function createDummyContext(width, height) {\n    const result = createContext(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            if (x / 16 % 2 === y / 16 % 2) {\n                result.fillStyle = 'rgb(0,255,255)';\n            } else {\n                result.fillStyle = 'rgb(255,0,255)';\n            }\n            result.fillRect(x, y, 16, 16);\n        }\n    }\n    return result;\n}\n\nexport function createDummyImgData(width, height) {\n    const result = new ImageData(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            const e = x / 16 % 2 === y / 16 % 2;\n            for (let px = x; px < x + 16; px++) {\n                for (let py = y; py < y + 16; py++) {\n                    setPixel(result, px, py, e ? 0 : 255, e ? 255 : 0, 255);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport function setPixel(imgData, x, y, r, g, b, a = 255) {\n    const n = (y * imgData.width + x) * 4;\n    imgData.data[n] = r;\n    imgData.data[n + 1] = g;\n    imgData.data[n + 2] = b;\n    imgData.data[n + 3] = a;\n}\n\nexport function getPixel(imgData, x, y) {\n    const n = (y * imgData.width + x) * 4;\n    return {r: imgData.data[n], g: imgData.data[n + 1], b: imgData.data[n + 2], a: imgData.data[n + 3]};\n}\n\nexport function copyPixel(originData, targetData, x, y) {\n    const p = getPixel(originData);\n    setPixel(targetData, p.r, p.g, p.b, p.a);\n}\n","export function getPath(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n","export function getFilename(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '')\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/')\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max)\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2\n}\n\nexport function clearTimeoutSafe(timeout: NodeJS.Timeout) {\n    if (timeout) clearTimeout(timeout)\n    return null\n}\n\nexport function clearIntervalSafe(interval: NodeJS.Timeout) {\n    if (interval) clearInterval(interval)\n    return null\n}\n\ndeclare global {\n\n    interface Array<T> {\n        remove(element: T): T\n    }\n\n    interface Map<K, V> {\n        getOrUpdate(key: K, updateCallback: () => V): V\n    }\n\n}\n\nArray.prototype.remove = function <T>(element: T): void {\n    const index = this.indexOf(element)\n    if (index !== -1) this.splice(index, 1)\n}\n\n// noinspection JSUnusedGlobalSymbols\nMap.prototype.getOrUpdate = function <K, V>(key: K, updateCallback: () => V): V {\n    let value = this.get(key)\n    if (value === undefined) {\n        value = updateCallback()\n        this.set(key, value)\n    }\n    return value\n}\n","import { AnimClip } from './AnimClip'\n\nexport class AnimationEntityType {\n\n    carryNullName: string = ''\n    depositNullName: string = ''\n    toolNullName: string = ''\n    mediumPoly: {} = {}\n    highPoly: {} = {}\n    fPPoly: {} = {}\n    activities: Map<string, { file: string, transcoef: number, lwsfile: boolean, animation: AnimClip }> = new Map()\n\n}\n","import { Mesh } from 'three'\nimport { clearIntervalSafe } from '../core/Util'\n\nexport class AnimatedMesh {\n\n    mesh: Mesh = null\n    textureSequences = []\n\n    constructor(mesh: Mesh, textureSequences: any[]) {\n        this.mesh = mesh\n        this.textureSequences = textureSequences\n    }\n\n    dispose() {\n        this.textureSequences.forEach((s) => clearIntervalSafe(s))\n        this.mesh.geometry.dispose()\n        Array.isArray(this.mesh.material) ? this.mesh.material.forEach(mat => mat.dispose()) : this.mesh.material?.dispose()\n    }\n\n}\n","// noinspection JSUnusedLocalSymbols\n\n/**\n * @author Marcus-Bizal https://github.com/marcbizal\n * patched by Scarabol\n *\n * This loader loads LWOB files exported from LW6.\n *\n * Support\n *  -\n */\n\nimport { BufferAttribute, BufferGeometry, Color, DoubleSide, Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { decodeFilepath, decodeString, getFilename } from '../core/Util'\nimport { ResourceManager } from './ResourceManager'\nimport { SEQUENCE_TEXTURE_FRAMERATE } from '../main'\nimport { AnimatedMesh } from './AnimatedMesh'\n\n// HEADER SPEC //\nconst LWO_MAGIC = 0x4C574F42 // \"LWOB\"\nconst OFF_MAGIC = 8\n\n/********************/\n/* TYPE SIZES START */\n/********************/\n\nconst ID4_SIZE = 4\nconst I1_SIZE = 1\nconst I2_SIZE = 2\nconst I4_SIZE = 4\nconst F4_SIZE = 4\n\nconst COL4_SIZE = 4\nconst VEC12_SIZE = 12\nconst IP2_SIZE = 2\nconst FP4_SIZE = 4\nconst DEG4_SIZE = 4\n\n/********************/\n/*  TYPE SIZES END  */\n/********************/\n\n/*********************/\n/* CHUNK TYPES START */\n/*********************/\n\nconst LWO_FORM = 0x464F524D\nconst LWO_PNTS = 0x504E5453\nconst LWO_SFRS = 0x53524653\nconst LWO_POLS = 0x504F4C53\nconst LWO_CRVS = 0x43525653\nconst LWO_PCHS = 0x50434853\nconst LWO_SURF = 0x53555246\n\nconst CHUNK_HEADER_SIZE = 8\nconst SUBCHUNK_HEADER_SIZE = 6\n\n/*********************/\n/*  CHUNK TYPES END  */\n/*********************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\nconst SURF_COLR = 0x434F4C52\nconst SURF_FLAG = 0x464C4147\n\n// Base Shading Values (Fixed Point)\nconst SURF_LUMI = 0x4C554D49\nconst SURF_DIFF = 0x44494646\nconst SURF_SPEC = 0x53504543\nconst SURF_REFL = 0x5245464C\nconst SURF_TRAN = 0x5452414E\n\n// Base Shading Values (Floating Point)\nconst SURF_VLUM = 0x564C554D\nconst SURF_VDIF = 0x56444946\nconst SURF_VSPC = 0x56535043\nconst SURF_VRFL = 0x5646524C\nconst SURF_VTRN = 0x5654524E\n\nconst SURF_GLOS = 0x474C4F53\nconst SURF_RFLT = 0x52464C54\nconst SURF_RIMG = 0x52494D47\nconst SURF_RIND = 0x52494E44\nconst SURF_EDGE = 0x45444745\nconst SURF_SMAN = 0x534D414E\n\n/**************************/\n/*  SURF DEFINITIONS END  */\n/**************************/\n\n/*****************************/\n/* TEXTURE DEFINITIONS START */\n/*****************************/\n\n// Start of Definition\nconst SURF_CTEX = 0x43544558\nconst SURF_DTEX = 0x44544558\nconst SURF_STEX = 0x53544558\nconst SURF_RTEX = 0x52544558\nconst SURF_TTEX = 0x54544558\nconst SURF_LTEX = 0x4C544558\nconst SURF_BTEX = 0x42544558\n\n// Flags\nconst SURF_TFLG = 0x54464C47\n\n// Location and Size\nconst SURF_TSIZ = 0x5453495A\nconst SURF_TCTR = 0x54435452\nconst SURF_TFAL = 0x5446414C\nconst SURF_TVEL = 0x5456454C\n\n// Color\nconst SURF_TCLR = 0x54434C52\n\n// Value\nconst SURF_TVAL = 0x54434C52\n\n// Bump Amplitude\nconst SURF_TAMP = 0x54414D50\n\n// Image Map\nconst SURF_TIMG = 0x54494D47\n\n// Image Alpha\nconst SURF_TALP = 0x54414C50\n\n// Image Wrap Options\nconst SURF_TWRP = 0x54575250\n\n// Antialiasing Strength\nconst SURF_TAAS = 0x54414153\n\n// Texture Opacity\nconst SURF_TOPC = 0x544F5043\n\n/*****************************/\n/*  TEXTURE DEFINITIONS END  */\n/*****************************/\n\n/*************************/\n/* FLAG DEFINITION START */\n/*************************/\n\nconst LUMINOUS_BIT = 1\nconst OUTLINE_BIT = 2\nconst SMOOTHING_BIT = 4\nconst COLORHIGHLIGHTS_BIT = 8\nconst COLORFILTER_BIT = 16\nconst OPAQUEEDGE_BIT = 32\nconst TRANSPARENTEDGE_BIT = 64\nconst SHARPTERMINATOR_BIT = 128\nconst DOUBLESIDED_BIT = 256\nconst ADDITIVE_BIT = 512\nconst SHADOWALPHA_BIT = 1024\n\n/*************************/\n/*  FLAG DEFINITION END  */\n/*************************/\n\n/*************************/\n/* TFLG DEFINITION START */\n/*************************/\n\nconst XAXIS_BIT = 1\nconst YAXIS_BIT = 2\nconst ZAXIS_BIT = 4\nconst WORLDCOORDS_BIT = 8\nconst NEGATIVEIMAGE_BIT = 16\nconst PIXELBLENDING_BIT = 32\nconst ANTIALIASING_BIT = 64\n\n/*************************/\n/*  TFLG DEFINITION END  */\n\n/*************************/\n\nfunction getVector3AtOffset(view, offset) {\n    let vector = new Vector3()\n    vector.x = view.getFloat32(offset)\n    vector.y = view.getFloat32(offset + F4_SIZE)\n    vector.z = view.getFloat32(offset + (F4_SIZE * 2))\n    return vector\n}\n\nfunction planarMapUVS(geometry, vertices, uvs, indices, materialIndex, size, center, flags) {\n    // Check to ensure that one of the flags is set, if not throw an error.\n    const mask = XAXIS_BIT | YAXIS_BIT | ZAXIS_BIT\n    if (flags & mask) {\n        for (let group of geometry.groups) {\n            if (group.materialIndex !== materialIndex) continue\n\n            for (let i = group.start; i < group.start + group.count; i++) {\n\n                let vertexIndex = indices[i] * 3\n                let x = vertices[vertexIndex] - center.x\n                let y = vertices[vertexIndex + 1] - center.y\n                let z = vertices[vertexIndex + 2] - center.z\n\n                let uvIndex = indices[i] * 2\n                let u = 0\n                let v = 0\n\n                if (flags & XAXIS_BIT) {\n                    u = z / size.z + 0.5\n                    v = y / size.y + 0.5\n                } else if (flags & YAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = z / size.z + 0.5\n                } else if (flags & ZAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = y / size.y + 0.5\n                }\n\n                uvs[uvIndex] = u\n                uvs[uvIndex + 1] = v\n            }\n        }\n    } else {\n        // console.warn(\"LWOLoader.planarMapUVS: No axis bit is set!\"); // XXX what is this about\n    }\n}\n\nexport class LWOLoader {\n\n    COUNTER_CLOCKWISE: false\n\n    path: string = ''\n    verbose: boolean = false\n    materials: MeshPhongMaterial[] = []\n    geometry: BufferGeometry = new BufferGeometry()\n    vertices: Float32Array = null\n    indices: Uint16Array = null\n    uvs: Float32Array = null\n    sequenceIntervals = []\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('LWO path: ' + this.path)\n    }\n\n    parsePoints(view, chunkOffset, chunkSize) {\n        if (chunkSize % VEC12_SIZE !== 0) {\n            console.error('LWOLoader.parse: F12 does not evenly divide into chunk size (' + chunkSize + '). Possible corruption.')\n            return\n        }\n\n        let numVertices = (chunkSize / F4_SIZE) / 3\n        this.vertices = new Float32Array(numVertices * 3)\n        this.uvs = new Float32Array(numVertices * 2)\n\n        for (let i = 0; i < numVertices; i++) {\n            let vertexIndex = i * 3\n            let vertexOffset = vertexIndex * F4_SIZE\n            this.vertices[vertexIndex] = view.getFloat32(chunkOffset + vertexOffset) \t\t\t\t// x\n            this.vertices[vertexIndex + 1] = view.getFloat32(chunkOffset + vertexOffset + F4_SIZE) \t// y\n            this.vertices[vertexIndex + 2] = view.getFloat32(chunkOffset + vertexOffset + (F4_SIZE * 2)) \t// z\n        }\n    }\n\n    parseSurfaceNames(buffer, chunkOffset, chunkSize) {\n        let textChunk = new TextDecoder().decode(new Uint8Array(buffer, chunkOffset, chunkSize))\n        let surfaceNames = textChunk.split('\\0').filter(function (s) {\n            return s !== ''\n        })\n\n        for (let i = 0; i < surfaceNames.length; i++) {\n            const new_material = new MeshPhongMaterial()\n            new_material.name = surfaceNames[i]\n            new_material.side = DoubleSide\n\n            this.materials.push(new_material)\n        }\n        if (this.verbose) console.log('LWO contains ' + this.materials.length + ' materials with following names: ' + surfaceNames)\n    }\n\n    parsePolygons(view, chunkOffset, chunkSize) {\n        // Gather some initial data so that we can get the proper size\n        let totalNumIndices = 0\n        let offset = 0\n        while (offset < chunkSize) {\n            const numIndices = view.getInt16(chunkOffset + offset)\n            const materialIndex = view.getInt16(chunkOffset + offset + 2 + (numIndices * 2))\n\n            this.geometry.addGroup(totalNumIndices, (numIndices - 2) * 3, materialIndex - 1)\n\n            totalNumIndices += (numIndices - 2) * 3\n            offset += 4 + (numIndices * 2)\n        }\n\n        offset = 0\n        let currentIndex = 0\n        this.indices = new Uint16Array(totalNumIndices)\n        while (offset < chunkSize) {\n            let numIndices = view.getInt16(chunkOffset + offset)\n\n            offset += 2\n\n            let faceIndices = new Int16Array(numIndices)\n            for (let i = 0; i <= numIndices; i++) {\n                faceIndices[i] = view.getInt16(chunkOffset + offset + (i * 2))\n            }\n\n            for (let i = 0; i < numIndices - 2; i++) {\n                if (this.COUNTER_CLOCKWISE) {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                } else {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                }\n            }\n\n            offset += 2 + (numIndices * 2)\n        }\n    }\n\n    parseSurface(view, buffer, chunkOffset, chunkSize) {\n        let offset = 0\n        while (view.getUint8(chunkOffset + offset) !== 0) offset++\n\n        let materialName = decodeString(new Uint8Array(buffer, chunkOffset, offset))\n        if (this.verbose) console.log('Parsing surface: ' + materialName)\n        let materialIndex = -1\n        let material: MeshPhongMaterial = null\n\n        let textureFlags = 0\n        let textureSize = new Vector3(0, 0, 0)\n        let textureCenter = new Vector3(0, 0, 0)\n        // let textureFalloff = new Vector3(0, 0, 0);\n        // let textureVelocity = new Vector3(0, 0, 0);\n\n        for (let i = 0; i < this.materials.length; i++) {\n            if (this.materials[i].name === materialName) {\n                materialIndex = i\n                material = this.materials[i]\n            }\n        }\n\n        if (!material) {\n            console.error('LWOLoader.parse: Surface in SURF chunk does not exist in SRFS')\n            return\n        }\n\n        while (offset < chunkSize) {\n            const subchunkOffset = chunkOffset + offset\n            if (view.getUint8(subchunkOffset) === 0) {\n                offset++\n            } else {\n                const subchunkType = view.getInt32(subchunkOffset)\n                const subchunkSize = view.getInt16(subchunkOffset + ID4_SIZE)\n\n                if (this.verbose) console.log('Parsing subchunk ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n\n                switch (subchunkType) {\n                    case SURF_COLR:\n                        const colorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        material.color = new Color().fromArray(colorArray)\n                        if (this.verbose) console.log('Material color (COLR): ' + colorArray.join(' '))\n                        break\n                    case SURF_FLAG:\n                        const flags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (FLAG): ' + flags.toString(2))\n                        break\n                    case SURF_LUMI:\n                        const luminosity = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        if (this.verbose) console.log('Luminosity (LUMI): ' + luminosity)\n                        break\n                    case SURF_DIFF:\n                        const diffuse = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        if (this.verbose) console.log('Diffuse (DIFF): ' + diffuse)\n                        break\n                    case SURF_SPEC:\n                        const specular = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        // material.specular = material.color.multiplyScalar(specular);\n                        if (this.verbose) console.log('Specular (SPEC): ' + specular)\n                        break\n                    case SURF_REFL:\n                        let reflection = 0\n                        if (reflection === SURF_VRFL) {\n                            reflection = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            reflection = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        }\n                        material.reflectivity = reflection\n                        if (this.verbose) console.log('Reflectivity (REFL): ' + material.reflectivity)\n                        break\n                    case SURF_TRAN:\n                    case SURF_VTRN:\n                        let transparency = 0\n                        if (subchunkType === SURF_VTRN) {\n                            transparency = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            transparency = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        }\n                        material.opacity = 1 - transparency\n                        if (this.verbose) console.log('Opacity (TRAN/VTRN): ' + material.opacity)\n                        if (material.opacity < 1) material.transparent = true\n                        break\n                    case SURF_VLUM:\n                        const luminosity2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Luminosity (VLUM): ' + luminosity2)\n                        break\n                    case SURF_VDIF:\n                        let diffuse2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Diffuse (VDIF): ' + diffuse2)\n                        break\n                    case SURF_VSPC:\n                        let specular2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        // material.specular = material.color.multiplyScalar(specular2);\n                        if (this.verbose) console.log('Specular (VSPC): ' + specular2)\n                        break\n                    case SURF_TFLG:\n                        textureFlags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (TFLG): ' + textureFlags.toString(2))\n                        break\n                    case SURF_TSIZ:\n                        textureSize = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Texture size (TSIZ): ' + textureSize.toArray().join(' '))\n                        break\n                    case SURF_TCTR:\n                        textureCenter = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Texture center (TCTR): ' + textureCenter.toArray().join(' '))\n                        break\n                    case SURF_CTEX:\n                    case SURF_DTEX:\n                    case SURF_STEX:\n                    case SURF_RTEX:\n                    case SURF_TTEX:\n                    case SURF_BTEX:\n                        const textureTypeName = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture typename: ' + textureTypeName)\n                        break\n                    case SURF_TCLR:\n                        const textureColorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        // const textureColor = new Color().fromArray(textureColorArray);\n                        // seems to be 0 0 0 anyway...\n                        if (this.verbose) console.log('Texture color (TCLR): ' + textureColorArray.join(' '))\n                        break\n                    case SURF_TIMG:\n                        let textureFilepath = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture filepath (TIMG): ' + textureFilepath)\n                        if (textureFilepath === '(none)') break\n                        let sequenceTexture = false\n                        if (textureFilepath.endsWith(' (sequence)')) {\n                            sequenceTexture = true\n                            textureFilepath = textureFilepath.substring(0, textureFilepath.length - ' (sequence)'.length)\n                        }\n                        let filename = getFilename(textureFilepath)\n                        const textureFilename = this.path + filename\n                        if (sequenceTexture) {\n                            const match = textureFilename.match(/(.+\\D)0+(\\d+)\\..+/)\n                            const sequenceNames = ResourceManager.filterTextureSequenceNames(match[1])\n                            if (sequenceNames) {\n                                let seqNum = 0\n                                this.sequenceIntervals.push(setInterval(() => {\n                                    material.map = ResourceManager.getTexture(sequenceNames[seqNum])\n                                    seqNum++\n                                    if (seqNum >= sequenceNames.length) seqNum = 0\n                                }, 1000 / SEQUENCE_TEXTURE_FRAMERATE))\n                                material.transparent = true\n                            }\n                        }\n                        material.map = ResourceManager.getTexture(textureFilename)\n                        material.alphaTest = material.transparent ? 0 : 0.5\n                        material.color = null // no need for color, when color map (texture) in use\n                        break\n                    default: // TODO implement all LWO features\n                        if (this.verbose) console.warn('Found unrecognised SURF subchunk type ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n                        break\n                }\n\n                offset += SUBCHUNK_HEADER_SIZE + subchunkSize\n            }\n        }\n\n        planarMapUVS(this.geometry, this.vertices, this.uvs, this.indices, materialIndex, textureSize, textureCenter, textureFlags)\n    }\n\n    parse(buffer: ArrayBuffer): AnimatedMesh {\n        const view = new DataView(buffer)\n\n        if (view.getUint32(0) !== LWO_FORM) {\n            console.error('LWOLoader.parse: Cannot find header.')\n            return\n        }\n\n        const fileSize = view.getUint32(ID4_SIZE)\n        if (fileSize + CHUNK_HEADER_SIZE !== view.byteLength) {\n            console.warn('LWOLoader.parse: Discrepancy between size in header (' + (fileSize + CHUNK_HEADER_SIZE) + ' bytes) and actual size (' + view.byteLength + ' bytes).')\n        }\n\n        let magicOffset = ID4_SIZE + I4_SIZE\n        if (view.getUint32(magicOffset) !== LWO_MAGIC) {\n            const magic = decodeString(new Uint8Array(buffer, magicOffset, ID4_SIZE))\n            console.error('LWOLoader.parse: Invalid magic ID (' + magic + ') in LWO header.')\n            return\n        }\n\n        let cursor = 12\n        while (cursor < view.byteLength) {\n            // Skip null byte padding\n            if (view.getUint8(cursor) === 0) {\n                cursor++\n            } else {\n                const chunkType = view.getInt32(cursor)\n                const chunkSize = view.getInt32(cursor + ID4_SIZE)\n\n                cursor += CHUNK_HEADER_SIZE\n\n                switch (chunkType) {\n                    case LWO_PNTS:\n                        this.parsePoints(view, cursor, chunkSize)\n                        break\n                    case LWO_SFRS:\n                        this.parseSurfaceNames(buffer, cursor, chunkSize)\n                        break\n                    case LWO_POLS:\n                        this.parsePolygons(view, cursor, chunkSize)\n                        break\n                    case LWO_SURF:\n                        this.parseSurface(view, buffer, cursor, chunkSize)\n                        break\n                    default:\n                        console.warn('Found unrecognised chunk type ' + decodeString(new Uint8Array(buffer, cursor - CHUNK_HEADER_SIZE, ID4_SIZE)) + ' at ' + cursor)\n                }\n\n                cursor += chunkSize\n            }\n\n        }\n\n        this.geometry.setAttribute('position', new BufferAttribute(this.vertices, 3))\n        this.geometry.setAttribute('uv', new BufferAttribute(this.uvs, 2))\n        this.geometry.setIndex(new BufferAttribute(this.indices, 1))\n        this.geometry.computeVertexNormals()\n\n        return new AnimatedMesh(new Mesh(this.geometry, this.materials), this.sequenceIntervals)\n    }\n}\n","import { Vector3 } from 'three'\nimport { SelectionEvent } from '../../event/LocalEvents'\n\nexport interface Selectable {\n\n    getSelectionType(): SelectionType;\n\n    select(): SelectionEvent;\n\n    deselect(): any;\n\n    getSelectionCenter(): Vector3;\n\n}\n\nexport enum SelectionType {\n\n    SURFACE,\n    PILOT,\n    BUILDING,\n    VEHICLE,\n    GROUP,\n\n}\n","import { AnimSubObj } from './AnimSubObj'\n\nexport class AnimClip {\n\n    looping: boolean = false\n    transcoef: number = 1\n    firstFrame: number = null\n    lastFrame: number = null\n    framesPerSecond: number = null\n    bodies: AnimSubObj[] = []\n\n}\n","import { Euler, MathUtils, Object3D, Vector3 } from 'three'\nimport degToRad = MathUtils.degToRad\n\nexport class AnimSubObj {\n\n    name: string = ''\n    filename: string = ''\n    relPos: Vector3[] = []\n    relRot: Euler[] = []\n    relScale: Vector3[] = []\n    opacity: number[] = []\n    parentObjInd: number = null\n    model: Object3D = null\n\n    radVec(degX: number, degY: number, degZ: number) {\n        return new Euler(degToRad(degY), degToRad(degX), degToRad(degZ), 'YXZ')\n    }\n\n    setFrameAndFollowing(animationFrameIndex: number, lastFrame: number, infos: number[]) {\n        this.relPos[animationFrameIndex] = new Vector3(infos[0], infos[1], infos[2])\n        this.relRot[animationFrameIndex] = this.radVec(infos[3], infos[4], infos[5])\n        this.relScale[animationFrameIndex] = new Vector3(infos[6], infos[7], infos[8])\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.relPos[c] = this.relPos[animationFrameIndex]\n            this.relRot[c] = this.relRot[animationFrameIndex]\n            this.relScale[c] = this.relScale[animationFrameIndex]\n        }\n    }\n\n    setOpacityAndFollowing(animationFrameIndex: number, lastFrame: number, value: number) {\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.opacity[c] = value\n        }\n    }\n\n}\n","const Stats = require('stats.js')\n\nexport class DebugHelper {\n\n    stats\n\n    constructor() {\n        this.stats = new Stats()\n        this.stats.setMode(0) // 0: fps, 1: ms\n\n        this.stats.domElement.style.position = 'absolute'\n        this.stats.domElement.style.left = '0px'\n        this.stats.domElement.style.top = '0px'\n\n        document.body.appendChild(this.stats.domElement)\n        this.hide()\n    }\n\n    show() {\n        this.stats.domElement.style.visibility = 'visible'\n    }\n\n    hide() {\n        this.stats.domElement.style.visibility = 'hidden'\n    }\n\n    renderStart() {\n        this.stats.begin()\n    }\n\n    renderDone() {\n        this.stats.end()\n    }\n\n}\n","export class Building {\n\n    // XXX dynamically read building types from cfg at BuildingTypes\n    static readonly TOOLSTATION = new Building('Toolstation', 'Buildings/Toolstation', false)\n    static readonly TELEPORT_PAD = new Building('TeleportPad', 'Buildings/Teleports')\n    static readonly DOCKS = new Building('Docks', 'Buildings/Docks', true,\n        null, null, true, {x: 0, y: 1})\n    static readonly POWER_STATION = new Building('Powerstation', 'Buildings/Powerstation', true,\n        {x: 1, y: 0})\n    static readonly BARRACKS = new Building('Barracks', 'Buildings/Barracks')\n    static readonly UPGRADE = new Building('Upgrade', 'Buildings/Upgrade')\n    static readonly GEODOME = new Building('Geo-dome', 'Buildings/Geo-dome', true,\n        {x: 0, y: -1}, null, false)\n    static readonly ORE_REFINERY = new Building('OreRefinery', 'Buildings/OreRefinery', true,\n        {x: 0, y: 1})\n    static readonly GUNSTATION = new Building('Gunstation', 'Buildings/gunstation', true,\n        null, null, false)\n    static readonly TELEPORT_BIG = new Building('TeleportBIG', 'Buildings/BIGTeleport', true,\n        {x: -1, y: 0}, {x: -1, y: -1})\n\n    name: string\n    aeFile: string\n    blocksPathSurface: boolean\n    secondaryBuildingPart: { x: number, y: number }\n    secondaryPowerPath: { x: number, y: number }\n    hasPrimaryPowerPath: boolean\n    waterPathSurface: { x: number, y: number }\n\n    constructor(name: string, folder: string, blocksPathSurface: boolean = true, secondaryBuildingPart: { x: number, y: number } = null, secondaryPowerPath: { x: number, y: number } = null, hasPrimaryPowerPath: boolean = true, waterPathSurface: { x: number, y: number } = null) {\n        this.name = name\n        this.aeFile = folder + '/' + folder.slice(folder.lastIndexOf('/') + 1) + '.ae'\n        this.blocksPathSurface = blocksPathSurface\n        this.secondaryBuildingPart = secondaryBuildingPart\n        this.secondaryPowerPath = secondaryPowerPath\n        this.hasPrimaryPowerPath = hasPrimaryPowerPath\n        this.waterPathSurface = waterPathSurface\n    }\n\n    static getByName(buildingType: string) {\n        const typename = buildingType.slice(buildingType.lastIndexOf('/') + 1).toLowerCase()\n        switch (typename) {\n            case 'toolstation':\n                return this.TOOLSTATION\n            case 'teleports':\n                return this.TELEPORT_PAD\n            case 'docks':\n                return this.DOCKS\n            case 'powerstation':\n                return this.POWER_STATION\n            case 'barracks':\n                return this.BARRACKS\n            case 'upgrade':\n                return this.UPGRADE\n            case 'geo-dome':\n                return this.GEODOME\n            case 'orerefinery':\n                return this.ORE_REFINERY\n            case 'gunstation':\n                return this.GUNSTATION\n            case 'teleportbig':\n                return this.TELEPORT_BIG\n            default:\n                throw 'Unknown building type: ' + buildingType\n        }\n    }\n\n}\n","import { WorldManager } from '../WorldManager'\nimport { Group, Vector2 } from 'three'\nimport { Surface } from './map/Surface'\n\nexport abstract class BaseEntity {\n\n    worldMgr: WorldManager\n    group: Group = new Group()\n    level: number = 0\n\n    abstract get stats()\n\n    getPosition() {\n        return this.group.position.clone()\n    }\n\n    getPosition2D() {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    getHeading(): number {\n        return this.group.rotation.y\n    }\n\n    onDiscover() {\n        this.group.visible = true\n    }\n\n    getCurrentSurface(): Surface {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position)\n    }\n\n    removeFromScene() {\n        this.worldMgr.sceneManager.scene.remove(this.group)\n    }\n\n}\n","export enum EventKey {\n\n    SELECTED_SURFACE,\n    SELECTED_BUILDING,\n    SELECTED_RAIDER,\n    SELECTED_VEHICLE,\n\n    DESELECTED_ENTITY,\n\n    JOB_CREATE,\n    JOB_DELETE,\n\n    RAIDER_REQUESTED,\n\n    MATERIAL_AMOUNT_CHANGED,\n\n    SPAWN_DYNAMITE,\n\n    ENTITY_ADDED,\n    ENTITY_REMOVED,\n\n    CAVERN_DISCOVERED,\n\n    ORE_FOUND,\n\n    BUILDING_UPGRADED,\n\n    RAIDER_TRAINED,\n\n    LOCATION_DEATH,\n    LOCATION_MONSTER,\n    LOCATION_CRYSTAL_FOUND,\n    LOCATION_UNDER_ATTACK,\n    LOCATION_LANDSLIDE,\n    LOCATION_POWER_DRAIN,\n    LOCATION_SLUG_EMERGE,\n    LOCATION_RAIDER_DISCOVERED,\n\n    SURFACE_CHANGED,\n    AIR_LEVEL_CHANGED,\n\n}\n","import { GameEvent } from './GameEvent'\nimport { EventKey } from './EventKeyEnum'\n\nexport class EventBus {\n\n    static eventListener = new Map<EventKey, ((event: GameEvent) => any)[]>()\n    static blockedEvents = []\n\n    static publishEvent(event: GameEvent) {\n        if (this.blockedEvents.includes(event.eventKey)) return // event is currently blocked from publishing\n        if (!event.isLocal) console.log('Event published: ' + EventKey[event.eventKey])\n        this.blockedEvents.push(event.eventKey)\n        this.getListener(event.eventKey).forEach((callback) => callback(event))\n        this.blockedEvents.remove(event.eventKey)\n    }\n\n    static registerEventListener(eventKey: EventKey, callback: (GameEvent) => any) {\n        this.getListener(eventKey).push(callback)\n    }\n\n    private static getListener(eventKey: EventKey) {\n        return this.eventListener.getOrUpdate(eventKey, () => [])\n    }\n\n    // TODO cleanup/unregister all event listener at level end?!\n\n}\n","import { PublicJob } from '../game/model/job/Job'\nimport { CollectableType } from '../scene/model/collect/CollectableEntity'\nimport { AnimEntity } from '../scene/model/anim/AnimEntity'\nimport { Surface } from '../scene/model/map/Surface'\nimport { BuildingEntity } from '../scene/model/BuildingEntity'\nimport { FulfillerEntity } from '../scene/model/FulfillerEntity'\nimport { RaiderSkill } from '../scene/model/RaiderSkill'\nimport { GameEvent } from './GameEvent'\nimport { EventKey } from './EventKeyEnum'\n\nexport class WorldEvent extends GameEvent {\n\n    constructor(entityKey: EventKey) {\n        super(entityKey)\n        this.isLocal = false\n    }\n\n}\n\nexport class JobEvent extends WorldEvent {\n\n    job: PublicJob\n\n    constructor(eventKey: EventKey, job: PublicJob) {\n        super(eventKey)\n        this.job = job\n    }\n\n}\n\nexport class JobCreateEvent extends JobEvent {\n\n    constructor(job: PublicJob) {\n        super(EventKey.JOB_CREATE, job)\n    }\n\n}\n\nexport class JobDeleteEvent extends JobEvent {\n\n    constructor(job: PublicJob) {\n        super(EventKey.JOB_DELETE, job)\n    }\n\n}\n\nexport class RaiderRequested extends WorldEvent {\n\n    constructor() {\n        super(EventKey.RAIDER_REQUESTED)\n    }\n\n}\n\nexport class MaterialAmountChanged extends WorldEvent {\n\n    collectableType: CollectableType\n\n    constructor(collectableType: CollectableType) {\n        super(EventKey.MATERIAL_AMOUNT_CHANGED)\n        this.collectableType = collectableType\n    }\n\n}\n\nexport class SpawnDynamiteEvent extends WorldEvent {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(EventKey.SPAWN_DYNAMITE)\n        this.surface = surface\n    }\n\n}\n\nexport class EntityAddedEvent extends WorldEvent {\n\n    type: EntityType\n    entity: AnimEntity\n\n    constructor(type: EntityType, entity: AnimEntity) {\n        super(EventKey.ENTITY_ADDED)\n        this.type = type\n        this.entity = entity\n    }\n\n}\n\nexport class EntityRemovedEvent extends WorldEvent {\n\n    type: EntityType\n    entity: AnimEntity\n\n    constructor(type: EntityType, entity: AnimEntity) {\n        super(EventKey.ENTITY_REMOVED)\n        this.type = type\n        this.entity = entity\n    }\n\n}\n\nexport enum EntityType {\n\n    RAIDER,\n    VEHICLE,\n    BUILDING,\n\n}\n\nexport class CavernDiscovered extends WorldEvent {\n\n    constructor() {\n        super(EventKey.CAVERN_DISCOVERED)\n    }\n\n}\n\nexport class OreFoundEvent extends WorldEvent {\n\n    constructor() {\n        super(EventKey.ORE_FOUND)\n    }\n\n}\n\nexport class BuildingUpgraded extends WorldEvent {\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(EventKey.BUILDING_UPGRADED)\n        this.building = building\n    }\n\n}\n\nexport class RaiderTrained extends WorldEvent {\n\n    entity: FulfillerEntity\n    skill: RaiderSkill\n\n    constructor(raider: FulfillerEntity, skill: RaiderSkill) {\n        super(EventKey.RAIDER_TRAINED)\n        this.entity = raider\n        this.skill = skill\n    }\n\n}\n","import { EventKey } from './EventKeyEnum'\n\nexport class GameEvent {\n\n    eventKey: EventKey\n    isLocal: boolean\n\n    constructor(eventKey: EventKey) {\n        this.eventKey = eventKey\n    }\n\n}\n","export enum JobState {\n\n    OPEN,\n    COMPLETE,\n    CANCELED,\n\n}\n","export enum JobType {\n\n    DRILL,\n    REINFORCE,\n    BLOW,\n    CLEAR_RUBBLE,\n    COLLECT,\n    CARRY,\n    MOVE,\n    TRAIN,\n    GET_TOOL,\n    EAT,\n    COMPLETE_POWER_PATH,\n\n}\n","import { FulfillerEntity } from '../../../scene/model/FulfillerEntity'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\nimport { RaiderTool } from '../../../scene/model/RaiderTool'\nimport { JobType } from './JobType'\nimport { JobState } from './JobState'\nimport { PriorityIdentifier } from './PriorityIdentifier'\nimport { PathTarget } from '../../../scene/model/PathTarget'\n\nexport abstract class Job {\n\n    type: JobType\n    jobstate: JobState\n    fulfiller: FulfillerEntity[] = []\n\n    protected constructor(type: JobType) {\n        this.type = type\n        this.jobstate = JobState.OPEN\n    }\n\n    assign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller)\n        if (fulfiller && index === -1) {\n            this.fulfiller.push(fulfiller)\n        }\n    }\n\n    unassign(fulfiller: FulfillerEntity) {\n        this.fulfiller.remove(fulfiller)\n    }\n\n    cancel() {\n        this.jobstate = JobState.CANCELED\n        const fulfiller = this.fulfiller // ensure consistency while processing\n        this.fulfiller = []\n        fulfiller.forEach((fulfiller) => fulfiller.stopJob())\n    }\n\n    isQualified(fulfiller: FulfillerEntity): boolean {\n        return true\n    }\n\n    isQualifiedWithTool(fulfiller: FulfillerEntity): RaiderTool {\n        return null\n    }\n\n    isQualifiedWithTraining(fulfiller: FulfillerEntity): RaiderSkill {\n        return null\n    }\n\n    onJobComplete() {\n        this.jobstate = JobState.COMPLETE\n    }\n\n    abstract getWorkplaces(): PathTarget[];\n\n}\n\nexport abstract class PublicJob extends Job {\n\n    abstract getPriorityIdentifier(): PriorityIdentifier\n\n}\n","import { Vector2 } from 'three'\n\nexport class PathTarget {\n\n    targetLocation: Vector2\n\n    constructor(location: Vector2) {\n        this.targetLocation = location\n    }\n\n    isInArea(position: Vector2): boolean {\n        return false\n    }\n\n}\n","import { BaseEntity } from '../BaseEntity'\nimport { GameState } from '../../../game/model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { Carryable } from './Carryable'\nimport { CollectJob } from '../../../game/model/job/CollectJob'\nimport { CollectPathTarget } from '../CollectionTarget'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { BuildingSite } from '../BuildingSite'\nimport { PriorityIdentifier } from '../../../game/model/job/PriorityIdentifier'\n\nexport abstract class CollectableEntity extends BaseEntity implements Carryable {\n\n    targets: CollectPathTarget[] = []\n    targetSite: BuildingSite = null\n\n    abstract getTargetBuildingTypes(): Building[];\n\n    hasTarget(): boolean {\n        return this.updateTargets().length > 0\n    }\n\n    getCarryTargets(): CollectPathTarget[] {\n        return this.updateTargets()\n    }\n\n    resetTarget() {\n        this.targets = []\n        this.targetSite = null\n        this.updateTargets()\n    }\n\n    protected updateTargets(): CollectPathTarget[] {\n        if (this.targets.length < 1) {\n            const sites = GameState.buildingSites.filter((b) => b.needs(this.getCollectableType()))\n            if (sites.length > 0) {\n                this.targets = sites.map((s) => new CollectPathTarget(s.getRandomDropPosition(), s, null))\n            } else {\n                const buildings = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                if (buildings.length > 0) {\n                    this.targets = buildings.map((b) => new CollectPathTarget(b.getDropPosition2D(), null, b))\n                }\n            }\n        } else if (this.targets.some((t) => t.site && t.site.complete)) {\n            this.resetTarget()\n        } else if (this.targets.some((t) => t.building && !t.building.isPowered())) {\n            this.resetTarget()\n        }\n        return this.targets\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.collectablesUndiscovered.remove(this)\n        GameState.collectables.push(this)\n        EventBus.publishEvent(new JobCreateEvent(new CollectJob(this)))\n    }\n\n    abstract getCollectableType(): CollectableType\n\n    abstract getPriorityIdentifier(): PriorityIdentifier\n\n    setTargetSite(site: BuildingSite) {\n        if (this.targetSite === site) return\n        this.targetSite?.unAssign(this)\n        this.targetSite = site\n        this.targetSite?.assign(this)\n    }\n\n}\n\nexport enum CollectableType {\n\n    DYNAMITE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n    ELECTRIC_FENCE,\n\n}\n","import { CollectableEntity, CollectableType } from '../../../scene/model/collect/CollectableEntity'\nimport { FulfillerEntity } from '../../../scene/model/FulfillerEntity'\nimport { PublicJob } from './Job'\nimport { JobType } from './JobType'\nimport { PriorityIdentifier } from './PriorityIdentifier'\nimport { PathTarget } from '../../../scene/model/PathTarget'\nimport { ElectricFence } from '../../../scene/model/collect/ElectricFence'\n\nexport class CollectJob extends PublicJob {\n\n    item: CollectableEntity\n\n    constructor(item: CollectableEntity) {\n        super(JobType.COLLECT)\n        this.item = item\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return [new PathTarget(this.item.getPosition2D())]\n    }\n\n    isQualified(fulfiller: FulfillerEntity) {\n        return fulfiller.carries === null && this.item.hasTarget()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return this.item.getPriorityIdentifier()\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        if (this.item.getCollectableType() === CollectableType.ELECTRIC_FENCE) {\n            const electricFence = this.item as ElectricFence\n            if (electricFence.targetSurface.canPlaceFence()) {\n                this.item.worldMgr.sceneManager.scene.add(this.item.group)\n                electricFence.targetSurface.fence = electricFence\n            } // TODO else dispose item entity with mesh\n        }\n    }\n\n}\n","export class BaseActivity {\n\n    activityKey: string\n\n    constructor(activityKey: string) {\n        this.activityKey = activityKey\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class AnimEntityActivity extends BaseActivity {\n\n    static Stand = new AnimEntityActivity('Activity_Stand')\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class RaiderActivity extends AnimEntityActivity {\n\n    static Route = new RaiderActivity('Activity_Route')\n    static RunPanic = new RaiderActivity('Activity_RunPanic')\n    static Drill = new RaiderActivity('Activity_Drill')\n    static Walk = new RaiderActivity('!Activity_Walk')\n    static Reinforce = new RaiderActivity('Activity_Reinforce')\n    static Reverse = new RaiderActivity('!Activity_Reverse')\n    static TurnLeft = new RaiderActivity('!Activity_TurnLeft')\n    static TurnRight = new RaiderActivity('!Activity_TurnRight')\n    static CantDo = new RaiderActivity('!Activity_CantDo')\n    static Collect = new RaiderActivity('Activity_Collect')\n    static Clear = new RaiderActivity('Activity_Clear')\n    static Carry = new RaiderActivity('Activity_Carry')\n    static CarryTurnLeft = new RaiderActivity('!Activity_CarryTurnLeft')\n    static CarryTurnRight = new RaiderActivity('!Activity_CarryTurnRight')\n    static CarryStand = new RaiderActivity('Activity_CarryStand')\n    static Dynamite = new RaiderActivity('Activity_Dynamite')\n    static Place = new RaiderActivity('Activity_Place')\n    static Deposit = new RaiderActivity('!Activity_Deposit')\n    static TeleportIn = new RaiderActivity('Activity_TeleportIn')\n    static Repair = new RaiderActivity('Activity_Repair')\n    static rest = new RaiderActivity('Activity_rest')\n    static routeRubble = new RaiderActivity('!Activity_routeRubble')\n    static CarryRubble = new RaiderActivity('!Activity_CarryRubble')\n    static Eat = new RaiderActivity('Activity_Eat')\n    static FireLaser = new RaiderActivity('Activity_FireLaser')\n    static GetUp = new RaiderActivity('!Activity_GetUp')\n    static ThrownByRockMonster = new RaiderActivity('Activity_ThrownByRockMonster')\n    static Slip = new RaiderActivity('Activity_Slip')\n    static Train = new RaiderActivity('Activity_Train')\n    static Recharge = new RaiderActivity('!Activity_Recharge')\n\n    static Waiting1 = new RaiderActivity('Activity_Waiting1')\n    static Waiting2 = new RaiderActivity('Activity_Waiting2')\n    static Waiting3 = new RaiderActivity('Activity_Waiting3')\n    static Waiting4 = new RaiderActivity('Activity_Waiting4')\n\n    static Hoverboard = new RaiderActivity('Activity_Hoverboard')\n    static Standhoverboard = new RaiderActivity('Activity_Standhoverboard')\n    static HitLefthoverboard = new RaiderActivity('!Activity_HitLefthoverboard')\n    static HitRighthoverboard = new RaiderActivity('!Activity_HitRighthoverboard')\n    static HitFronthoverboard = new RaiderActivity('!Activity_HitFronthoverboard')\n    static HitBackhoverboard = new RaiderActivity('!Activity_HitBackhoverboard')\n\n    static SMALLTRUCK = new RaiderActivity('Activity_SMALLTRUCK')\n    static StandSMALLTRUCK = new RaiderActivity('Activity_StandSMALLTRUCK')\n    static HitLeftSMALLTRUCK = new RaiderActivity('!Activity_HitLeftSMALLTRUCK')\n    static HitRightSMALLTRUCK = new RaiderActivity('!Activity_HitRightSMALLTRUCK')\n    static HitFrontSMALLTRUCK = new RaiderActivity('!Activity_HitFrontSMALLTRUCK')\n    static HitBackSMALLTRUCK = new RaiderActivity('!Activity_HitBackSMALLTRUCK')\n\n    static SMALLheli = new RaiderActivity('Activity_SMALLheli')\n    static StandSMALLheli = new RaiderActivity('Activity_StandSMALLheli')\n    static HitLeftSMALLheli = new RaiderActivity('!Activity_HitLeftSMALLheli')\n    static HitRightSMALLheli = new RaiderActivity('!Activity_HitRightSMALLheli')\n    static HitFrontSMALLheli = new RaiderActivity('!Activity_HitFrontSMALLheli')\n    static HitBackSMALLheli = new RaiderActivity('!Activity_HitBackSMALLheli')\n\n    static SMALLCAT = new RaiderActivity('Activity_SMALLCAT')\n    static StandSMALLCAT = new RaiderActivity('Activity_StandSMALLCAT')\n    static HitLeftSMALLCAT = new RaiderActivity('!Activity_HitLeftSMALLCAT')\n    static HitRightSMALLCAT = new RaiderActivity('!Activity_HitRightSMALLCAT')\n    static HitFrontSMALLCAT = new RaiderActivity('!Activity_HitFrontSMALLCAT')\n    static HitBackSMALLCAT = new RaiderActivity('!Activity_HitBackSMALLCAT')\n\n    static SMALLMLP = new RaiderActivity('Activity_SMALLMLP')\n    static StandSMALLMLP = new RaiderActivity('Activity_StandSMALLMLP')\n    static HitLeftSMALLMLP = new RaiderActivity('!Activity_HitLeftSMALLMLP')\n    static HitRightSMALLMLP = new RaiderActivity('!Activity_HitRightSMALLMLP')\n    static HitFrontSMALLMLP = new RaiderActivity('!Activity_HitFrontSMALLMLP')\n    static HitBackSMALLMLP = new RaiderActivity('!Activity_HitBackSMALLMLP')\n\n    static LARGECAT = new RaiderActivity('Activity_LARGECAT')\n    static StandLARGECAT = new RaiderActivity('Activity_StandLARGECAT')\n    static HitLeftLARGECAT = new RaiderActivity('!Activity_HitLeftLARGECAT')\n    static HitRightLARGECAT = new RaiderActivity('!Activity_HitRightLARGECAT')\n    static HitFrontLARGECAT = new RaiderActivity('!Activity_HitFrontLARGECAT')\n    static HitBackLARGECAT = new RaiderActivity('!Activity_HitBackLARGECAT')\n\n    static SMALLDIGGER = new RaiderActivity('Activity_SMALLDIGGER')\n    static StandSMALLDIGGER = new RaiderActivity('Activity_StandSMALLDIGGER')\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class BuildingActivity extends AnimEntityActivity {\n\n    static Teleport = new BuildingActivity('Activity_Teleport')\n    static Deposit = new BuildingActivity('Activity_Deposit')\n    static Explode = new BuildingActivity('Activity_Explode')\n    static Unpowered = new BuildingActivity('Activity_Unpowered')\n\n}\n","import { Vector2 } from 'three'\nimport { RaiderActivity } from './activities/RaiderActivity'\nimport { CollectableEntity, CollectableType } from './collect/CollectableEntity'\nimport { PathTarget } from './PathTarget'\nimport { BuildingSite } from './BuildingSite'\nimport { Building } from '../../game/model/entity/building/Building'\nimport { BuildingEntity } from './BuildingEntity'\nimport { BuildingActivity } from './activities/BuildingActivity'\nimport { GameState } from '../../game/model/GameState'\nimport { EventBus } from '../../event/EventBus'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\n\nexport interface CollectionTarget {\n\n    getDropAction(): RaiderActivity\n\n    gatherItem(item: CollectableEntity)\n\n}\n\nexport class CollectPathTarget extends PathTarget implements CollectionTarget {\n\n    site: BuildingSite\n    building: BuildingEntity\n\n    constructor(location: Vector2, site: BuildingSite, building: BuildingEntity) {\n        super(location)\n        this.site = site\n        this.building = building\n    }\n\n    canGatherItem(): boolean {\n        if (this.building) {\n            return this.building.activity.activityKey === this.building.getDefaultActivity().activityKey\n        }\n        return true\n    }\n\n    gatherItem(item: CollectableEntity) {\n        if (this.site) {\n            this.site.addItem(item)\n        } else if (this.building) {\n            if (this.building.type === Building.POWER_STATION || this.building.type === Building.ORE_REFINERY) {\n                if (this.building.carryJoint) {\n                    this.building.carryJoint.add(item.group)\n                    item.group.position.set(0, 0, 0)\n                }\n                this.building.changeActivity(BuildingActivity.Deposit, () => {\n                    this.building.changeActivity()\n                    if (this.building.carryJoint) this.building.carryJoint.remove(item.group)\n                    CollectPathTarget.addItemToStorage(item)\n                    // TODO dispose item\n                })\n            } else {\n                CollectPathTarget.addItemToStorage(item)\n            }\n        } else {\n            item.worldMgr.sceneManager.scene.add(item.group)\n        }\n    }\n\n    private static addItemToStorage(item: CollectableEntity) {\n        switch (item.getCollectableType()) {\n            case CollectableType.CRYSTAL:\n                GameState.numCrystal++\n                EventBus.publishEvent(new MaterialAmountChanged(item.getCollectableType()))\n                break\n            case CollectableType.ORE:\n                GameState.numOre++\n                EventBus.publishEvent(new MaterialAmountChanged(item.getCollectableType()))\n                break\n        }\n    }\n\n    getDropAction(): RaiderActivity {\n        if (this.building && (this.building.type === Building.POWER_STATION || this.building.type === Building.ORE_REFINERY)) {\n            return RaiderActivity.Deposit\n        } else {\n            return RaiderActivity.Place\n        }\n    }\n\n}\n","export enum PriorityIdentifier {\n\n    aiPriorityTrain,\n    aiPriorityGetIn,\n    aiPriorityCrystal,\n    aiPriorityOre,\n    aiPriorityRepair,\n    aiPriorityClearing,\n    aiPriorityDestruction,\n    aiPriorityConstruction,\n    aiPriorityReinforce,\n    aiPriorityRecharge,\n\n}\n","import { GameEvent } from './GameEvent'\nimport { BuildingEntity } from '../scene/model/BuildingEntity'\nimport { Surface } from '../scene/model/map/Surface'\nimport { Raider } from '../scene/model/Raider'\nimport { VehicleEntity } from '../scene/model/VehicleEntity'\nimport { EventKey } from './EventKeyEnum'\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n        this.isLocal = true\n    }\n\n}\n\nexport class SelectionEvent extends LocalEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n    }\n\n}\n\nexport class SurfaceSelectedEvent extends SelectionEvent {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(EventKey.SELECTED_SURFACE)\n        this.surface = surface\n    }\n\n}\n\nexport class BuildingSelected extends SelectionEvent {\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(EventKey.SELECTED_BUILDING)\n        this.building = building\n    }\n\n}\n\nexport class RaiderSelected extends SelectionEvent {\n\n    raider: Raider\n\n    constructor(raider: Raider) {\n        super(EventKey.SELECTED_RAIDER)\n        this.raider = raider\n    }\n\n}\n\nexport class VehicleSelected extends SelectionEvent {\n\n    vehicle: VehicleEntity\n\n    constructor(vehicle: VehicleEntity) {\n        super(EventKey.SELECTED_VEHICLE)\n        this.vehicle = vehicle\n    }\n\n}\n\nexport class EntityDeselected extends LocalEvent {\n\n    constructor() {\n        super(EventKey.DESELECTED_ENTITY)\n    }\n\n}\n\nexport class SurfaceChanged extends LocalEvent {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(EventKey.SURFACE_CHANGED)\n        this.surface = surface\n    }\n\n}\n\nexport class AirLevelChanged extends LocalEvent {\n\n    constructor() {\n        super(EventKey.AIR_LEVEL_CHANGED)\n    }\n\n}\n","import { Box3, CanvasTexture, Matrix4, Mesh, MeshBasicMaterial, MeshPhongMaterial, Object3D, Sphere, SphereGeometry, Sprite, SpriteMaterial, Vector3 } from 'three'\nimport { AnimClip } from './AnimClip'\nimport { clearTimeoutSafe, iGet } from '../../../core/Util'\nimport { AnimationEntityType } from './AnimationEntityType'\nimport { BaseEntity } from '../BaseEntity'\nimport { AnimSubObj } from './AnimSubObj'\nimport { createContext } from '../../../core/ImageHelper'\nimport { BaseActivity } from '../activities/BaseActivity'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../main'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\n\nexport abstract class AnimEntity extends BaseEntity {\n\n    entityType: AnimationEntityType = null\n    poly: Object3D[] = []\n    animation: AnimClip = null\n    animationTimeout: NodeJS.Timeout = null\n    selectionFrame: Sprite = null\n    pickSphere: Mesh = null\n    pickSphereRadius: number = 10 / 2\n    carryJoint: Object3D = null\n    depositJoint: Object3D = null\n    getToolJoint: Object3D = null\n    activity: BaseActivity = null\n    radiusSq: number = 0\n\n    protected constructor(entityType: AnimationEntityType) {\n        super()\n        this.entityType = entityType\n    }\n\n    beamUp() {\n        // TODO avoid all further state changes and mark as unavailable here\n        // TODO publish event: check jobs with this target, update power state...\n        EventBus.publishEvent(new EntityDeselected())\n        this.changeActivity()\n        // TODO insert beam animation\n        AnimEntity.moveUp(this, 6 * TILESIZE)\n    }\n\n    private static moveUp(entity: AnimEntity, counter: number) {\n        if (counter > 0) {\n            counter--\n            entity.group.position.y += (TILESIZE / NATIVE_FRAMERATE) / 2\n            setTimeout(() => AnimEntity.moveUp(entity, counter), 1000 / NATIVE_FRAMERATE)\n        } else {\n            entity.removeFromScene()\n        }\n    }\n\n    changeActivity(activity: AnimEntityActivity = this.getDefaultActivity(), onAnimationDone = null, durationTimeMs: number = null) {\n        if (this.activity === activity) return\n        this.activity = activity\n        let lActivityKey = activity.activityKey.toLowerCase()\n        let anim = this.entityType.activities.get(lActivityKey)\n        if (!anim) { // find by prefix\n            this.entityType.activities.forEach((a, key) => {\n                if (!anim && lActivityKey.startsWith(key)) anim = a\n            })\n        }\n        if (!anim?.animation) {\n            console.warn('Activity ' + activity.activityKey + ' unknown or has no animation defined')\n            console.log(this.entityType.activities)\n            return\n        }\n        this.setAnimation(anim?.animation, onAnimationDone, durationTimeMs)\n    }\n\n    private setAnimation(animation: AnimClip, onAnimationDone = null, durationTimeMs = null) {\n        if (onAnimationDone) onAnimationDone.bind(this)\n        this.animation = animation\n        this.animation.looping = true\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.group.remove(...this.poly)\n        this.poly = []\n        const carries = (this.carryJoint && this.carryJoint.children) || []\n        this.carryJoint = null\n        // bodies are defined in animation and second in high/medium/low poly groups\n        this.animation.bodies.forEach((body) => {\n            let model: Object3D = iGet(this.entityType.highPoly, body.name)\n            if (!model) model = iGet(this.entityType.mediumPoly, body.name)\n            if (!model) model = body.model\n            const polyModel = model.clone(true)\n            this.poly.push(polyModel)\n            if (body.name) {\n                const lBodyName = body.name.toLowerCase()\n                if (lBodyName === this.entityType.carryNullName?.toLowerCase()) {\n                    this.carryJoint = polyModel\n                    if (carries.length > 0) this.carryJoint.add(...carries)\n                } else if (lBodyName === this.entityType.depositNullName?.toLowerCase()) {\n                    this.depositJoint = polyModel\n                } else if (lBodyName === this.entityType.toolNullName?.toLowerCase()) {\n                    this.getToolJoint = polyModel\n                }\n            }\n        })\n        this.animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = this.poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                this.poly[parentInd].add(polyPart)\n            } else {\n                this.group.add(polyPart)\n            }\n        })\n        const sphere = new Sphere()\n        new Box3().setFromObject(this.group).getBoundingSphere(sphere)\n        this.radiusSq = sphere.radius * sphere.radius\n        this.animate(0, onAnimationDone, durationTimeMs)\n    }\n\n    private animate(frameIndex, onAnimationDone, durationTimeMs) {\n        if (this.poly.length !== this.animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        this.animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = this.poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = material.opacity < 1\n                    })\n                }\n            }\n        })\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        let nextFrame = frameIndex + 1\n        if (nextFrame <= this.animation.lastFrame || !onAnimationDone || (durationTimeMs !== null && durationTimeMs > 0)) {\n            if (nextFrame > this.animation.lastFrame) {\n                nextFrame = this.animation.firstFrame\n            }\n            const standardDurationTimeMs = 1000 / this.animation.framesPerSecond * this.animation.transcoef\n            if (durationTimeMs !== null) durationTimeMs -= standardDurationTimeMs\n            const that = this\n            const timeoutTimeMs = durationTimeMs !== null ? Math.max(0, Math.min(durationTimeMs, standardDurationTimeMs)) : standardDurationTimeMs\n            this.animationTimeout = setTimeout(() => that.animate(nextFrame, onAnimationDone, durationTimeMs), timeoutTimeMs) // TODO get this in sync with threejs\n        } else if (onAnimationDone) {\n            onAnimationDone()\n        }\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return AnimEntityActivity.Stand\n    }\n\n    createPickSphere() {\n        if (this.pickSphere) return\n        const pickSphereCenter = this.getPickSphereCenter()\n        const geometry = new SphereGeometry(this.pickSphereRadius, this.pickSphereRadius, this.pickSphereRadius)\n        const material = new MeshBasicMaterial({color: 0xffff00, visible: false}) // change visible to true for debugging\n        this.pickSphere = new Mesh(geometry, material)\n        this.pickSphere.userData = {selectable: this}\n        this.pickSphere.position.copy(pickSphereCenter)\n        this.group.add(this.pickSphere)\n        this.createSelectionFrame(pickSphereCenter)\n    }\n\n    getPickSphereCenter(): Vector3 {\n        return this.getBoundingBoxCenter()\n    }\n\n    getBoundingBoxCenter() {\n        const center = new Vector3()\n        new Box3().setFromObject(this.group).getCenter(center)\n        center.sub(this.group.position)\n        center.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        return center\n    }\n\n    private createSelectionFrame(pickSphereCenter: Vector3) {\n        const selectionFrameTextureSize = 128\n        const ctx = createContext(selectionFrameTextureSize, selectionFrameTextureSize)\n        ctx.fillStyle = '#0f0'\n        const strength = Math.round(25 / this.pickSphereRadius)\n        const length = selectionFrameTextureSize / 6\n        ctx.fillRect(0, 0, length, strength)\n        ctx.fillRect(0, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, 0, length, strength)\n        ctx.fillRect(selectionFrameTextureSize - strength, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - strength, selectionFrameTextureSize - length, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - length, strength, length)\n        const selectionFrameTexture = new CanvasTexture(ctx.canvas)\n        const selectionMaterial = new SpriteMaterial({map: selectionFrameTexture, depthTest: false})\n        this.selectionFrame = new Sprite(selectionMaterial)\n        this.selectionFrame.position.copy(pickSphereCenter)\n        const selectionFrameSize = this.pickSphereRadius * 2\n        this.selectionFrame.scale.set(selectionFrameSize, selectionFrameSize, selectionFrameSize)\n        this.selectionFrame.visible = false\n        this.group.add(this.selectionFrame)\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class DynamiteActivity extends BaseActivity {\n\n    static Normal = new DynamiteActivity('Normal')\n    static TickDown = new DynamiteActivity('TickDown')\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { AnimEntity } from '../anim/AnimEntity'\nimport { Carryable } from './Carryable'\nimport { Surface } from '../map/Surface'\nimport { GameState } from '../../../game/model/GameState'\nimport { DynamiteActivity } from '../activities/DynamiteActivity'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { PathTarget } from '../PathTarget'\n\nexport class Dynamite extends AnimEntity implements Carryable {\n\n    targetSurface: Surface\n\n    constructor() {\n        super(ResourceManager.getAnimationEntityType('MiscAnims/Dynamite/Dynamite.ae'))\n        this.changeActivity()\n    }\n\n    get stats() {\n        return {}\n    }\n\n    hasTarget(): boolean {\n        return this.targetSurface && this.targetSurface.isExplodable() || GameState.hasOneBuildingOf(Building.TOOLSTATION)\n    }\n\n    getCarryTargets(): PathTarget[] {\n        if (this.targetSurface && this.targetSurface.isExplodable()) {\n            return this.targetSurface.getDigPositions().map((p) => new PathTarget(p))\n        } else {\n            return GameState.getBuildingsByType(Building.TOOLSTATION).map((b) => b.getDropPosition2D())\n                .map((p) => new PathTarget(p))\n        }\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.DYNAMITE\n    }\n\n    ignite() {\n        // TODO add as explosive and scare em all!\n        this.worldMgr.sceneManager.scene.add(this.group)\n        const center = this.targetSurface.getCenterWorld()\n        center.y = this.group.position.y\n        this.group.lookAt(center)\n        this.changeActivity(DynamiteActivity.TickDown, () => {\n            this.removeFromScene()\n            this.targetSurface.collapse()\n            // TODO add explosion animation\n            // TODO damage raider, vehicle, buildings\n        })\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return DynamiteActivity.Normal\n    }\n\n}\n","import { BuildingEntity } from '../../scene/model/BuildingEntity'\nimport { Building } from './entity/building/Building'\nimport { Selectable, SelectionType } from './Selectable'\nimport { Raider } from '../../scene/model/Raider'\nimport { VehicleEntity } from '../../scene/model/VehicleEntity'\nimport { CollectableEntity, CollectableType } from '../../scene/model/collect/CollectableEntity'\nimport { Vector3 } from 'three'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../../main'\nimport { Surface } from '../../scene/model/map/Surface'\nimport { BaseEntity } from '../../scene/model/BaseEntity'\nimport { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { BuildingSite } from '../../scene/model/BuildingSite'\nimport { Dynamite } from '../../scene/model/collect/Dynamite'\nimport { Crystal } from '../../scene/model/collect/Crystal'\nimport { Ore } from '../../scene/model/collect/Ore'\nimport { LevelRewardConfig } from '../../cfg/LevelsCfg'\nimport { PriorityList } from './job/PriorityList'\nimport { SmallSpider } from './entity/monster/SmallSpider'\nimport { Bat } from './entity/monster/Bat'\nimport { RaiderSkill } from '../../scene/model/RaiderSkill'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\n\nexport enum GameResultState {\n\n    RUNNING,\n    COMPLETE,\n    FAILED,\n\n}\n\nexport class GameState {\n\n    static resultState: GameResultState = GameResultState.RUNNING\n    static levelFullName: string = ''\n    static numCrystal: number = 0\n    static numOre: number = 0\n    static numBrick: number = 0\n    static usedCrystals: number = 0\n    static neededCrystals: number = 0\n    static airlevel: number = 1 // airlevel in percent from 0 to 1.0\n    static selectedEntities: Selectable[] = []\n    static selectionType: SelectionType = null\n    static buildings: BuildingEntity[] = []\n    static buildingsUndiscovered: BuildingEntity[] = []\n    static raiders: Raider[] = []\n    static raidersUndiscovered: Raider[] = []\n    static requestedRaiders: number = 0\n    static vehicles: VehicleEntity[] = []\n    static vehiclesUndiscovered: VehicleEntity[] = []\n    static collectables: CollectableEntity[] = []\n    static collectablesUndiscovered: CollectableEntity[] = []\n    static buildingSites: BuildingSite[] = []\n    static spiders: SmallSpider[] = []\n    static spidersBySurface: Map<Surface, SmallSpider[]> = new Map()\n    static bats: Bat[] = []\n    static totalCrystals: number = 0\n    static totalOres: number = 0\n    static totalDiggables: number = 0\n    static remainingDiggables: number = 0\n    static totalCaverns: number = 0\n    static discoveredCaverns: number = 0\n    static levelStartTime: number = 0\n    static levelStopTime: number = 0\n    static rewardConfig: LevelRewardConfig = null\n    static priorityList: PriorityList = null\n    static oxygenRate: number = 0\n\n    static reset() {\n        this.resultState = GameResultState.RUNNING\n        this.levelFullName = ''\n        this.numCrystal = 0\n        this.numOre = 0\n        this.numBrick = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.airlevel = 1\n        this.selectedEntities = []\n        this.selectionType = null\n        this.buildings = []\n        this.buildingsUndiscovered = []\n        this.raiders = []\n        this.raidersUndiscovered = []\n        this.requestedRaiders = 0\n        this.vehicles = []\n        this.vehiclesUndiscovered = []\n        this.collectables = []\n        this.collectablesUndiscovered = []\n        this.buildingSites = []\n        this.spiders = []\n        this.spidersBySurface = new Map()\n        this.bats = []\n        this.totalCrystals = 0\n        this.totalOres = 0\n        this.totalDiggables = 0\n        this.remainingDiggables = 0\n        this.totalCaverns = 0\n        this.discoveredCaverns = 0\n        this.levelStartTime = 0\n        this.levelStopTime = 0\n        this.rewardConfig = null\n        this.priorityList = null\n        this.oxygenRate = 0\n    }\n\n    static getBuildingsByType(...buildingTypes: Building[]): BuildingEntity[] {\n        return this.buildings.filter(b => b.isPowered() && buildingTypes.some(bt => b.type === bt))\n    }\n\n    static getClosestBuildingByType(position: Vector3, ...buildingTypes: Building[]): BuildingEntity {\n        const targetBuildings = GameState.getBuildingsByType(...buildingTypes)\n        let closest = null, minDist = null\n        targetBuildings.forEach((b) => {\n            const bPos = b.getDropPosition()\n            const dist = position.distanceToSquared(bPos) // TODO better use pathfinding\n            if (closest === null || dist < minDist) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static hasOneBuildingOf(...buildings: Building[]): boolean {\n        return this.buildings.some((b) => buildings.some((type) => b.type === type) && b.isPowered())\n    }\n\n    static hasBuildingWithUpgrades(building: Building, upgrades: number = 0): boolean {\n        return this.buildings.some((b) => b.type === building && b.level >= upgrades && b.isPowered())\n    }\n\n    static getTrainingSites(position: Vector3, training: RaiderSkill): BuildingEntity[] {\n        if (training === RaiderSkill.DEMOLITION) {\n            return this.buildings.filter((b) => {\n                return b.stats.TrainDynamite && b.stats.TrainDynamite[b.level]\n            })\n        }\n        return []\n    }\n\n    static selectEntities(entities: Selectable[]) {\n        this.selectedEntities = this.selectedEntities.filter((previouslySelected) => {\n            const stillSelected = entities.indexOf(previouslySelected) !== -1\n            if (!stillSelected) previouslySelected.deselect()\n            return stillSelected\n        })\n        // add new entities that are selectable\n        const selectionEvents = []\n        entities.forEach((freshlySelected) => {\n            const selectionEvent = freshlySelected.select()\n            if (selectionEvent) {\n                this.selectedEntities.push(freshlySelected)\n                selectionEvents.push(selectionEvent)\n            }\n        })\n        // determine and set next selection type\n        const len = this.selectedEntities.length\n        if (len > 1) {\n            this.selectionType = SelectionType.GROUP\n        } else if (len === 1) {\n            this.selectionType = this.selectedEntities[0].getSelectionType()\n        } else if (this.selectionType !== null) {\n            this.selectionType = null\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        // AFTER updating selected entities and selection type, publish all events\n        selectionEvents.forEach((event) => EventBus.publishEvent(event))\n    }\n\n    static getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + this.getBuildingsByType(Building.BARRACKS).length * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    static discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE\n        this.discoverEntities(this.raidersUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.buildingsUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.vehiclesUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.collectablesUndiscovered, minX, maxX, minZ, maxZ)\n    }\n\n    static discoverEntities(undiscovered: BaseEntity[], minX, maxX, minZ, maxZ) {\n        const discovered = []\n        undiscovered.forEach((e) => {\n            const pos = e.getPosition()\n            if (pos.x >= minX && pos.x < maxX && pos.z >= minZ && pos.z < maxZ) {\n                e.onDiscover()\n                discovered.push(e)\n            }\n        })\n        discovered.forEach((r) => undiscovered.remove(r))\n    }\n\n    static dropMaterial(type: CollectableType, quantity: number): CollectableEntity[] {\n        const result = []\n        if (type === CollectableType.DYNAMITE) {\n            for (let c = 0; c < quantity; c++) result.push(new Dynamite())\n        } else if (type === CollectableType.CRYSTAL) {\n            while (GameState.numCrystal > 0 && result.length < quantity) {\n                GameState.numCrystal--\n                result.push(new Crystal())\n            }\n        } else if (type === CollectableType.ORE) {\n            while (GameState.numOre > 0 && result.length < quantity) {\n                GameState.numOre--\n                result.push(new Ore())\n            }\n        } else {\n            console.error('Material drop not yet implemented: ' + type)\n        }\n        if (result.length > 0) EventBus.publishEvent(new MaterialAmountChanged(type))\n        return result\n    }\n\n    static get gameTimeSeconds() {\n        return Math.round((GameState.levelStopTime - GameState.levelStartTime) / 1000)\n    }\n\n    static get score() {\n        if (!GameState.rewardConfig) return 0\n        let quota = GameState.rewardConfig.quota\n        let importance = GameState.rewardConfig.importance\n        const scoreCrystals = GameState.numCrystal >= (quota.crystals || Infinity) ? importance.crystals : 0\n        const scoreTimer = GameState.gameTimeSeconds <= (quota.timer || 0) ? importance.timer : 0\n        const scoreCaverns = quota.caverns ? Math.min(1, GameState.discoveredCaverns / quota.caverns) * importance.caverns : 0\n        const scoreConstructions = quota.constructions ? Math.min(1, GameState.buildings.length / quota.constructions * importance.constructions) : 0\n        const scoreOxygen = GameState.airlevel * importance.oxygen\n        const scoreFigures = GameState.raiders.length >= MAX_RAIDER_BASE ? importance.figures : 0\n        return Math.round(scoreCrystals + scoreTimer + scoreCaverns + scoreConstructions + scoreOxygen + scoreFigures) / 100\n    }\n\n    static get selectedSurface(): Surface {\n        return this.selectionType === SelectionType.SURFACE && this.selectedEntities.length > 0 ? this.selectedEntities[0] as Surface : null\n    }\n\n    static get selectedBuilding(): BuildingEntity {\n        return this.selectionType === SelectionType.BUILDING && this.selectedEntities.length > 0 ? this.selectedEntities[0] as BuildingEntity : null\n    }\n\n    static get selectedRaiders(): Raider[] {\n        return (this.selectionType === SelectionType.PILOT || this.selectionType === SelectionType.GROUP) && this.selectedEntities.length > 0 ? this.selectedEntities as Raider[] : []\n    }\n\n    static get totalOre(): number {\n        return this.numOre + this.numBrick * 5\n    }\n\n    static getNearbySpiders(entity: BaseEntity): SmallSpider[] {\n        const terrain = entity.worldMgr.sceneManager.terrain\n        const currentSurface = terrain.getSurfaceFromWorld(entity.getPosition())\n        const nearbySpiders: SmallSpider[] = []\n        for (let x = currentSurface.x; x <= currentSurface.x + 1; x++) {\n            for (let y = currentSurface.y; y <= currentSurface.y + 1; y++) {\n                const surface = terrain.getSurface(x, y)\n                nearbySpiders.push(...(GameState.spidersBySurface.get(surface) || []))\n            }\n        }\n        return nearbySpiders\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Color, Material, MeshPhongMaterial } from 'three'\nimport { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { SceneManager } from '../../SceneManager'\nimport { PriorityIdentifier } from '../../../game/model/job/PriorityIdentifier'\n\nexport class Crystal extends CollectableEntity {\n\n    constructor() {\n        super()\n        const resource2 = ResourceManager.getResource('MiscAnims/Crystal/vlp_greencrystal.lwo')\n        const mesh2 = SceneManager.registerMesh(new LWOLoader('MiscAnims/Crystal/').parse(resource2));\n        (mesh2.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.color = new Color(0, 0, 0) // XXX read from LWO file?\n            mat.emissive = new Color(0, 255, 0) // XXX should be luminosity color from mesh file?\n            mat.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n            mat.opacity = 0.5 // XXX read from LWO file?\n            mat.transparent = mat.opacity < 1\n        })\n        mesh2.scale.set(1.75, 1.75, 1.75) // XXX derive from texture scale?\n        this.group.add(mesh2)\n        const resource = ResourceManager.getResource('World/Shared/Crystal.lwo') // highpoly version\n        const mesh = SceneManager.registerMesh(new LWOLoader('World/Shared/').parse(resource));\n        (mesh.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.emissive = new Color(0, 8, 0) // XXX read from LWO file?\n            mat.color = new Color(0, 0, 0) // XXX read from LWO file?\n            mat.opacity = 0.4 // XXX read from LWO file?\n            mat.transparent = mat.opacity < 1\n        })\n        this.group.add(mesh)\n    }\n\n    get stats() {\n        return ResourceManager.stats.PowerCrystal\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.POWER_STATION, Building.TOOLSTATION]\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        console.log('An energy crystal has been discovered')\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.CRYSTAL\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityCrystal\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { SceneManager } from '../../SceneManager'\nimport { PriorityIdentifier } from '../../../game/model/job/PriorityIdentifier'\n\nexport class Ore extends CollectableEntity {\n\n    constructor() {\n        super()\n        const resource = ResourceManager.getResource('MiscAnims/Ore/Ore1st.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('MiscAnims/Ore/').parse(resource))\n        this.group.add(mesh)\n    }\n\n    get stats() {\n        return ResourceManager.stats.Ore\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.ORE_REFINERY, Building.TOOLSTATION]\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        console.log('Ore has been discovered')\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.ORE\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityOre\n    }\n\n}\n","export class RaiderSkill {\n\n    static DRIVER = new RaiderSkill('driver')\n    static ENGINEER = new RaiderSkill('engineer')\n    static GEOLOGIST = new RaiderSkill('geologist')\n    static PILOT = new RaiderSkill('pilot')\n    static SAILOR = new RaiderSkill('sailor')\n    static DEMOLITION = new RaiderSkill('demolition')\n\n    name: string\n\n    constructor(name: string) {\n        this.name = name\n    }\n\n}\n","export class WorkerMessage {\n\n    type: WorkerMessageType = null\n    text?: string\n    cfg?: any\n    totalResources?: number\n    assetName?: string\n    assetObj?: any\n    loadingTimeSeconds?: string\n\n    constructor(type: WorkerMessageType) {\n        this.type = type\n    }\n\n    static createTextMessage(msg: string): WorkerMessage {\n        return {type: WorkerMessageType.MSG, text: msg}\n    }\n\n    static createCfgLoaded(cfg: any, totalResources: number): WorkerMessage {\n        return {type: WorkerMessageType.CFG, cfg: cfg, totalResources: totalResources}\n    }\n\n    static createAssetLoaded(assetIndex: number, assetName: string, assetObj: any) {\n        return {type: WorkerMessageType.ASSET, assetName: assetName, assetObj: assetObj}\n    }\n\n    static createLoadDone(totalResources: number, loadingTimeSeconds: string) {\n        return {type: WorkerMessageType.DONE, totalResources: totalResources, loadingTimeSeconds: loadingTimeSeconds}\n    }\n\n}\n\nexport enum WorkerMessageType {\n\n    MSG,\n    CFG,\n    CACHE_MISS,\n    SFX,\n    ASSET,\n    DONE,\n\n}\n","import { AmbientLight, Color, Frustum, Mesh, MOUSE, PerspectiveCamera, PointLight, Raycaster, Scene, Vector3, WebGLRenderer } from 'three'\nimport { DebugHelper } from './DebugHelper'\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { GameState } from '../game/model/GameState'\nimport { Selectable } from '../game/model/Selectable'\nimport { Terrain } from './model/map/Terrain'\nimport { TILESIZE } from '../main'\nimport { clearIntervalSafe } from '../core/Util'\nimport { AnimatedMesh } from '../resource/AnimatedMesh'\n\nexport class SceneManager {\n\n    static meshRegistry: AnimatedMesh[] = []\n\n    maxFps: number = 30 // most animations use 25 fps so this should be enough\n    renderer: WebGLRenderer\n    debugHelper: DebugHelper = new DebugHelper()\n    renderInterval\n    animRequest\n    scene: Scene\n    camera: PerspectiveCamera\n    ambientLight: AmbientLight\n    light: PointLight\n    terrain: Terrain\n    controls: MapControls\n    cursorTorchlight: PointLight\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.renderer = new WebGLRenderer({antialias: true, canvas: canvas})\n        this.renderer.setClearColor(0x000000)\n\n        this.camera = new PerspectiveCamera(30, canvas.width / canvas.height, 0.1, 5000) // TODO make these params configurable\n\n        this.controls = new MapControls(this.camera, this.renderer.domElement)\n        this.controls.mouseButtons = {LEFT: null, MIDDLE: MOUSE.ROTATE, RIGHT: MOUSE.PAN}\n        // this.controls.maxPolarAngle = Math.PI * 0.45; // TODO dynamically adapt to terrain height at camera position\n    }\n\n    selectEntitiesByRay(rx: number, ry: number) {\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        let intersects = raycaster.intersectObjects(GameState.raiders.map((r) => r.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.vehicles.map((v) => v.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.buildings.map((b) => b.pickSphere))\n        if (intersects.length < 1 && this.terrain) intersects = raycaster.intersectObjects(this.terrain.floorGroup.children)\n        const selected = []\n        if (intersects.length > 0) {\n            const userData = intersects[0].object.userData\n            if (userData && userData.hasOwnProperty('selectable')) {\n                const selectable = userData['selectable']\n                if (selectable) selected.push(selectable)\n            }\n        }\n        GameState.selectEntities(selected)\n    }\n\n    selectEntitiesInFrustum(r1x: number, r1y: number, r2x: number, r2y: number) {\n        const startPoint = new Vector3(r1x, r1y, 0.5)\n        const endPoint = new Vector3(r2x, r2y, 0.5)\n        // Avoid invalid frustum\n        if (startPoint.x === endPoint.x) {\n            endPoint.x += Number.EPSILON\n        }\n        if (startPoint.y === endPoint.y) {\n            endPoint.y += Number.EPSILON\n        }\n        // update camera\n        this.camera.updateProjectionMatrix()\n        this.camera.updateMatrixWorld()\n        // update frustum\n        const tmpPoint = new Vector3()\n        tmpPoint.copy(startPoint)\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x)\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y)\n        endPoint.x = Math.max(startPoint.x, endPoint.x)\n        endPoint.y = Math.min(startPoint.y, endPoint.y)\n\n        const vecNear = new Vector3()\n        const vecTopLeft = new Vector3()\n        const vecTopRight = new Vector3()\n        const vecDownRight = new Vector3()\n        const vecDownLeft = new Vector3()\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld)\n        vecTopLeft.copy(tmpPoint)\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0)\n        vecDownRight.copy(endPoint)\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0)\n\n        vecTopLeft.unproject(this.camera)\n        vecTopRight.unproject(this.camera)\n        vecDownRight.unproject(this.camera)\n        vecDownLeft.unproject(this.camera)\n\n        const vectemp1 = new Vector3()\n        const vectemp2 = new Vector3()\n        const vectemp3 = new Vector3()\n        vectemp1.copy(vecTopLeft).sub(vecNear)\n        vectemp2.copy(vecTopRight).sub(vecNear)\n        vectemp3.copy(vecDownRight).sub(vecNear)\n        vectemp1.normalize()\n        vectemp2.normalize()\n        vectemp3.normalize()\n\n        const deep = Number.MAX_VALUE\n        vectemp1.multiplyScalar(deep)\n        vectemp2.multiplyScalar(deep)\n        vectemp3.multiplyScalar(deep)\n        vectemp1.add(vecNear)\n        vectemp2.add(vecNear)\n        vectemp3.add(vecNear)\n\n        const frustum = new Frustum()\n        const planes = frustum.planes\n\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight)\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight)\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear)\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear)\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft)\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1)\n        planes[5].normal.multiplyScalar(-1)\n\n        let entities: Selectable[] = GameState.raiders.filter((r) => frustum.containsPoint(r.getSelectionCenter()))\n        entities.push(...(GameState.vehicles.filter((v) => frustum.containsPoint(v.getSelectionCenter()))))\n        if (entities.length < 1) entities = GameState.buildings.filter((b) => frustum.containsPoint(b.getSelectionCenter()))\n        GameState.selectEntities(entities)\n    }\n\n    setupScene(ambientColor: Color) {\n        this.scene = new Scene()\n\n        this.ambientLight = new AmbientLight(ambientColor, 0.4)\n        this.scene.add(this.ambientLight)\n\n        this.cursorTorchlight = new PointLight(0xffffff, 1.5, 4, 1)\n        this.cursorTorchlight.distance *= TILESIZE\n        this.scene.add(this.cursorTorchlight)\n    }\n\n    startScene() {\n        this.debugHelper.show()\n        this.renderInterval = setInterval(() => {\n            this.animRequest = requestAnimationFrame(() => {\n                this.debugHelper.renderStart()\n                this.renderer.render(this.scene, this.camera)\n                this.debugHelper.renderDone()\n            })\n        }, 1000 / this.maxFps)\n    }\n\n    disposeScene() {\n        this.debugHelper.hide()\n        this.renderInterval = clearIntervalSafe(this.renderInterval)\n        if (this.animRequest) {\n            cancelAnimationFrame(this.animRequest)\n            this.animRequest = null\n        }\n        this.terrain?.dispose()\n        this.terrain = null\n        SceneManager.meshRegistry.forEach(mesh => mesh.dispose())\n        SceneManager.meshRegistry = []\n    }\n\n    static registerMesh(animatedMesh: AnimatedMesh): Mesh {\n        this.meshRegistry.push(animatedMesh)\n        return animatedMesh.mesh\n    }\n\n}\n","/**\n * @author Scarabol https://github.com/scarabol\n *\n * This loader loads LWSC files exported from LW\n *\n * File format description: http://www.martinreddy.net/gfx/3d/LWSC.txt\n */\n\nimport { AnimClip } from '../scene/model/anim/AnimClip'\nimport { AnimSubObj } from '../scene/model/anim/AnimSubObj'\nimport { Group } from 'three'\nimport { getFilename } from '../core/Util'\nimport { ResourceManager } from './ResourceManager'\nimport { LWOLoader } from './LWOLoader'\nimport { SceneManager } from '../scene/SceneManager'\n\nexport class LWSCLoader {\n\n    path: string = ''\n    verbose: boolean = false\n    animationClip: AnimClip = new AnimClip()\n    lines: string[] = []\n    lineIndex: number = 0\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('Using verbose mode')\n    }\n\n    parse(content): AnimClip {\n        this.lines = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map(l => l.trim())\n\n        if (this.lines[0] !== 'LWSC') {\n            throw 'Invalid start of file! Expected \\'LWSC\\' in first line'\n        }\n\n        const sceneFileVersion = parseInt(this.lines[1], 10)\n        if (sceneFileVersion !== 1) {\n            console.warn('Unexpected scene file version: ' + sceneFileVersion)\n        }\n\n        for (this.lineIndex = 2; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) continue // empty line: object separator\n            const key = line.split(' ')[0]\n            if (key === 'FirstFrame') {\n                this.parseFrameBlock()\n            } else if (key === 'AddNullObject' || key === 'LoadObject') {\n                this.parseObjectBlock()\n                if (this.verbose) console.log(this.animationClip.bodies[this.animationClip.bodies.length - 1])\n            } else if (line.startsWith('PreviewFirstFrame ') || line.startsWith('PreviewLastFrame ') || line.startsWith('PreviewFrameStep ')) {\n                // only used in editor\n            } else {\n                // console.warn('Unexpected line: ' + line); // TODO analyze remaining entries\n            }\n        }\n\n        if (this.verbose) console.log(this.animationClip)\n        return this.animationClip\n    }\n\n    parseLine(line: string): string[] {\n        return line.split(' ').filter((l: string) => l !== '')\n    }\n\n    parseFrameBlock() {\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            const line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'FirstFrame') {\n                this.animationClip.firstFrame = parseInt(value)\n            } else if (key === 'LastFrame') {\n                this.animationClip.lastFrame = parseInt(value)\n            } else if (key === 'FrameStep') {\n                const frameStep = parseInt(value)\n                if (frameStep !== 1) console.error('Animation frameStep has unexpected value: ' + frameStep)\n            } else if (key === 'FramesPerSecond') {\n                this.animationClip.framesPerSecond = parseInt(value)\n            } else if (key === 'PreviewFirstFrame' || key === 'PreviewLastFrame' || key === 'PreviewFrameStep') {\n                // only used in editor\n            } else {\n                console.warn('Unexpected key in frame block')\n            }\n        }\n        console.error('Parsing block reached content end')\n    }\n\n    parseObjectBlock(): AnimSubObj {\n        const subObj = new AnimSubObj()\n        this.animationClip.bodies.push(subObj)\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'AddNullObject' || key === 'LoadObject') {\n                if (key === 'LoadObject') {\n                    const filename = getFilename(value)\n                    subObj.name = filename.slice(0, filename.length - '.lwo'.length)\n                    subObj.filename = this.path + filename\n                    const lwoBuffer = ResourceManager.getResource(subObj.filename)\n                    subObj.model = SceneManager.registerMesh(new LWOLoader(this.path).parse(lwoBuffer))\n                } else if (key === 'AddNullObject') {\n                    subObj.name = value\n                    subObj.model = new Group()\n                } else {\n                    throw 'Unexpected line: ' + line\n                }\n            } else if (key === 'ObjectMotion') {\n                let line = this.lines[++this.lineIndex]\n                const lenInfos = parseInt(line)\n                line = this.lines[++this.lineIndex]\n                const lenFrames = parseInt(line)\n                this.lineIndex++\n                for (let c = 0; c < lenFrames; c++) {\n                    let line = this.lines[this.lineIndex + c * 2]\n                    if (line.startsWith('EndBehavior')) break\n                    const infos = line.split(' ').map(Number)\n                    if (infos.length !== lenInfos) console.warn('Number of infos (' + infos.length + ') does not match if specified count (' + lenInfos + ')')\n                    line = this.lines[this.lineIndex + c * 2 + 1]\n                    const animationFrameIndex = parseInt(line.split(' ')[0]) // other entries in line should be zeros\n                    subObj.setFrameAndFollowing(animationFrameIndex, this.animationClip.lastFrame, infos)\n                }\n                this.lineIndex += lenFrames * 2\n            } else if (key === 'ParentObject') {\n                subObj.parentObjInd = Number(value) - 1 // index is 1 based\n                if (this.verbose) console.log('parent obj ind is: ' + subObj.parentObjInd)\n            } else if (key === 'ShowObject ' || key === 'LockedChannels') {\n                // only used in editor\n            } else if (key === 'ShadowOptions') { // TODO implement shadow options (bitwise)\n                // 0 - Self Shadow\n                // 1 - Cast Shadow\n                // 2 - Receive Shadow\n            } else if (key === 'ObjDissolve') {\n                if (value == '(envelope)') {\n                    let line = this.lines[++this.lineIndex]\n                    const numOfInformationChannels = parseInt(line)\n                    if (numOfInformationChannels !== 1) console.error('Number of information channels for opacity is not 1, but: ' + numOfInformationChannels)\n                    line = this.lines[++this.lineIndex]\n                    const numOfKeyframes = parseInt(line)\n                    this.lineIndex++\n                    for (let c = 0; c < numOfKeyframes; c++) {\n                        let line = this.lines[this.lineIndex + c * 2]\n                        if (line.startsWith('EndBehavior')) break\n                        const opacity = 1 - Number(line)\n                        line = this.lines[this.lineIndex + c * 2 + 1]\n                        const frameNum = Number(line.split(' ')[0])\n                        subObj.setOpacityAndFollowing(frameNum, this.animationClip.lastFrame, opacity)\n                    }\n                    this.lineIndex += numOfKeyframes * 2\n                } else {\n                    const opacity = 1 - Number(value)\n                    subObj.setOpacityAndFollowing(0, this.animationClip.lastFrame, opacity)\n                }\n            } else {\n                // console.log('Unhandled line in object block: ' + line); // TODO analyze unhandled lines\n            }\n        }\n        console.error('Parsing block reached content end')\n        return subObj\n    }\n\n}\n","import { AnimationEntityType } from '../scene/model/anim/AnimationEntityType'\nimport { getPath, iGet } from './wadworker/WadUtil'\nimport { ResourceManager } from './ResourceManager'\nimport { LWOLoader } from './LWOLoader'\nimport { LWSCLoader } from './LWSCLoader'\nimport { SceneManager } from '../scene/SceneManager'\nimport { AnimClip } from '../scene/model/anim/AnimClip'\n\nexport class AnimEntityLoader {\n\n    static loadModels(url, root): AnimationEntityType {\n        const path = getPath(url)\n\n        const entityType = new AnimationEntityType()\n\n        entityType.carryNullName = iGet(root, 'CarryNullName')\n        entityType.depositNullName = iGet(root, 'DepositNullName')\n        entityType.toolNullName = iGet(root, 'ToolNullName')\n\n        // TODO load other poly quality models (if available)\n        // let mediumPoly = iGet(root, 'MediumPoly');\n        // if (mediumPoly) {\n        //     Object.keys(mediumPoly).forEach((key) => {\n        //         const polyname = mediumPoly[key];\n        //         const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //         const polyfile = path + polyname + '.lwo';\n        //         console.log('polyfile');\n        //         console.log(polyfile);\n        //         // new LWOLoader().load(polyfile, (model) => {\n        //         //     mediumPoly[polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //         // }, undefined, () => {\n        //         //     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //         // });\n        //     });\n        //     Object.keys(mediumPoly).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete mediumPoly[polykey]);\n        // }\n\n        const highPoly = iGet(root, 'highpoly')\n        if (highPoly) {\n            entityType.highPoly = {}\n            Object.keys(highPoly).forEach((key) => {\n                const polyname = highPoly[key] + '.lwo'\n                const polykey = key.startsWith('!') ? key.slice(1) : key\n                const lwoBuffer = ResourceManager.getResource(path + polyname)\n                entityType.highPoly[polykey] = SceneManager.registerMesh(new LWOLoader(path).parse(lwoBuffer))\n            })\n        }\n\n        // let fPoly = (root)['fppoly'];\n        // if (fPoly) {\n        //     Object.keys(fPoly).forEach((camera) => {\n        //         Object.keys(fPoly[camera]).forEach((key) => {\n        //             const polyname = fPoly[camera][key];\n        //             const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //             if (polyname !== 'null') {\n        //                 const polyfile = path + polyname + '.lwo';\n        //                 new LWOLoader().load(polyfile, (model) => {\n        //                     fPoly[camera][polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //                 }, undefined, () => {\n        //                     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //                 });\n        //             } else {\n        //                 fPoly[camera][key] = {polyname: polyname, polyfile: null, model: new Group()};\n        //             }\n        //         });\n        //         Object.keys(fPoly[camera]).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete fPoly[polykey][camera]);\n        //     });\n        // }\n\n        const activities = iGet(root, 'Activities')\n        if (activities) {\n            Object.keys(activities).forEach((activity) => {\n                try {\n                    let keyname = iGet(activities, activity)\n                    const act: { file: string, transcoef: number, lwsfile: boolean, animation: AnimClip } = iGet(root, keyname)\n                    const file = iGet(act, 'FILE')\n                    const isLws = iGet(act, 'LWSFILE') === true\n                    const transcoef = iGet(act, 'TRANSCOEF')\n                    const looping = iGet(act, 'LOOPING') === true\n                    if (isLws) {\n                        const content = ResourceManager.getResource(path + file + '.lws')\n                        act.animation = new LWSCLoader(path).parse(content)\n                        act.animation.looping = looping\n                        act.animation.transcoef = transcoef ? Number(transcoef) : 1\n                        entityType.activities.set(activity.toLowerCase(), act)\n                    } else {\n                        console.error('Found activity which is not an LWS file')\n                    }\n                } catch (e) {\n                    console.error(e)\n                    console.log(root)\n                    console.log(activities)\n                    console.log(activity)\n                }\n            })\n        }\n\n        return entityType\n    }\n\n}\n","import { createContext, createDummyImgData, getPixel, setPixel } from './ImageHelper'\n\nexport class BitmapFont {\n\n    charHeight: number\n    letters: ImageData[] = []\n\n    constructor(fontImageData: ImageData, cols = 10, rows = 19) { // font images always consist of 10 columns and 19 rows with last row empty\n        // actually chars are font dependent and have to be externalized in future\n        // maybe CP850 was used... not sure, doesn't fit...\n        const chars = [' ', '!', '\"', '#', '$', '%', '⌵', '`', '(', ')',\n            '*', '+', ',', '-', '.', '/', '0', '1', '2', '3',\n            '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',\n            '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n            'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n            'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[',\n            '\\\\', ']', '^', '_', '\\'', 'a', 'b', 'c', 'd', 'e',\n            'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\n            'z', 'Ä', 'Å', 'Á', 'À', 'Â', 'Ã', 'Ą', 'ä', 'å',\n            'á', 'à', 'â', 'ã', 'ą', 'Ë', 'E̊', 'É', 'È', 'É',\n            'Ę', 'ë', 'e̊', 'é', 'è', 'e̊', 'ę̊', '', '', '',\n            '', '', '', '', '', 'Ö', '', '', '', '',\n            'ö', '', '', '', '', 'Ü', '', '', '', 'ü',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', 'ß', '', '', '', 'Ñ', '', 'ñ',\n            '',\n        ] // XXX complete this character list\n\n        const maxCharWidth = fontImageData.width / cols\n        this.charHeight = fontImageData.height / rows\n\n        function getActualCharacterWidth(imgData) {\n            for (let y = 0; y < imgData.height / rows; y++) { // find non-empty row first\n                let rowPixelIndex = y * 4 * imgData.width\n                if (imgData.data[rowPixelIndex] !== 255 && imgData.data[rowPixelIndex + 2] !== 255) { // red/blue pixels indicate end of character\n                    for (let x = 0; x < maxCharWidth; x++) {\n                        let colPixelIndex = x * 4\n                        if (imgData.data[colPixelIndex] === 255 || imgData.data[colPixelIndex + 2] === 255) { // red/blue pixels indicate end of character\n                            return x\n                        }\n                    }\n                    return maxCharWidth\n                }\n            }\n            return 0\n        }\n\n        for (let i = 0; i < chars.length; i++) {\n            let imgData = this.extractData(fontImageData, (i % 10) * maxCharWidth, Math.floor(i / 10) * this.charHeight, maxCharWidth, this.charHeight)\n            let actualWidth = getActualCharacterWidth(imgData)\n            if (actualWidth > 0) {\n                imgData = this.extractData(imgData, 0, 0, actualWidth, this.charHeight)\n            } else {\n                imgData = createDummyImgData(maxCharWidth, this.charHeight)\n            }\n            this.letters[chars[i]] = imgData\n        }\n    }\n\n    extractData(imgData, startX, startY, width, height): ImageData {\n        const alpha = getPixel(imgData, startX + width - 1, startY + height - 1)\n        const result = new ImageData(width, height)\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const p = getPixel(imgData, startX + x, startY + y)\n                if (p.r === alpha.r && p.g === alpha.g && p.b === alpha.b) p.a = 0 // apply alpha channel\n                setPixel(result, x, y, p.r, p.g, p.b, p.a)\n            }\n        }\n        return result\n    }\n\n    createTextImage(text: string, maxWidth?: number, autoCenter: boolean = true): HTMLCanvasElement {\n        if (text === undefined || text === null || text.length < 1) {\n            // empty text requested, context with width 0 is not allowed, but 1 with alpha is close enough\n            return createContext(1, 1).canvas\n        }\n        text = text.replace(/_/g, ' ')\n        const rows = this.determineRows(text, maxWidth)\n        const width = Math.max(...(rows.map(r => r.width)))\n        const result = new ImageData(width, this.charHeight * rows.length)\n        rows.forEach((row, index) => {\n            const rowX = autoCenter ? Math.round((width - row.width) / 2) : 0\n            const rowY = index * this.charHeight\n            let letterX = 0\n            for (let c = 0; c < row.text.length; c++) {\n                const letterImgData = this.letters[row.text.charAt(c)]\n                if (letterImgData) {\n                    for (let x = letterX; x < letterX + letterImgData.width; x++) {\n                        for (let y = 0; y < letterImgData.height; y++) {\n                            const p = getPixel(letterImgData, x - letterX, y)\n                            setPixel(result, rowX + x, rowY + y, p.r, p.g, p.b, p.a)\n                        }\n                    }\n                    letterX += letterImgData.width\n                } // missing letter issue already reported above\n            }\n        })\n        const img: CanvasRenderingContext2D = createContext(result.width, result.height)\n        img.putImageData(result, 0, 0)\n        return img.canvas\n    }\n\n    private determineRows(text: string, maxWidth?: number): { text: string, width: number }[] {\n        const spaceWidth = this.letters[' '].width\n        const rows: { text: string, width: number }[] = []\n        let rowText = ''\n        let rowWidth = 0\n        text.split(' ').map(word => {\n            let wordWidth = 0\n            for (let c = 0; c < word.length; c++) {\n                const letter = word.charAt(c)\n                const letterImg = this.letters[letter]\n                if (letterImg) {\n                    wordWidth += letterImg.width\n                } else {\n                    console.error('Letter \\'' + letter + '\\' not found in charset! Ignoring it')\n                }\n            }\n            if (rowWidth > 0) {\n                if (!maxWidth || rowWidth + spaceWidth + wordWidth < maxWidth) {\n                    rowText += ' ' + word\n                    rowWidth += spaceWidth + wordWidth\n                } else {\n                    rows.push({text: rowText, width: rowWidth})\n                    rowText = word\n                    rowWidth = wordWidth\n                }\n            } else {\n                rowText += word\n                rowWidth += wordWidth\n            }\n            return wordWidth\n        })\n        if (rowWidth > 0) rows.push({text: rowText, width: rowWidth})\n        return rows\n    }\n}\n","export class BaseConfig {\n\n    static setFromCfg(config: BaseConfig, cfgObj: any) {\n        Object.keys(cfgObj).forEach((cfgKey) => {\n            const lCfgKeyName = (cfgKey.startsWith('!') ? cfgKey.substring(1) : cfgKey)\n                .toLowerCase()\n                .replace(/_/g, '') // Activity_Stand\n                .replace(/-/g, '') // Geo-dome\n            const found = Object.keys(config).some((objKey) => {\n                return config.assignValue(objKey, lCfgKeyName, cfgObj[cfgKey])\n            })\n            if (!found) {\n                console.warn('cfg key does not exist: ' + cfgKey)\n            }\n        })\n        return config\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            const currentValue = this[objKey]\n            const currentIsArray = Array.isArray(currentValue)\n            let parsedValue = this.parseValue(lCfgKeyName, cfgValue)\n            const parsedIsArray = Array.isArray(parsedValue)\n            if (currentValue && currentIsArray !== parsedIsArray) {\n                if (currentIsArray) {\n                    parsedValue = [parsedValue]\n                    // } else {\n                    //     console.warn('Array overwrite conflict for key ' + objKey + ' with existing value (' + currentValue + ') and new value (' + parsedValue + ')')\n                }\n            }\n            this[objKey] = parsedValue\n            return true\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return cfgValue\n    }\n\n}\n","// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n}\n\nexport enum POINTER_EVENT {\n    MOVE,\n    DOWN,\n    UP,\n}\n\nexport enum KEY_EVENT {\n    DOWN,\n    UP,\n}\n","import { BaseConfig } from './BaseConfig'\nimport { Building } from '../game/model/entity/building/Building'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class BuildingEntityStats extends BaseConfig {\n\n    Levels: number = 0\n    SelfPowered: boolean = false\n    PowerBuilding: boolean = false\n    PickSphere: number = 0\n    TrainDynamite: boolean[] = null\n    CostOre: number = 0\n    CostCrystal: number = 0\n    OxygenCoef: number = 0\n\n    static getByType(type: Building): BuildingEntityStats {\n        switch (type) {\n            case Building.TOOLSTATION:\n                return ResourceManager.stats.Toolstation\n            case Building.TELEPORT_PAD:\n                return ResourceManager.stats.TeleportPad\n            case Building.DOCKS:\n                return ResourceManager.stats.Docks\n            case Building.POWER_STATION:\n                return ResourceManager.stats.Powerstation\n            case Building.BARRACKS:\n                return ResourceManager.stats.Barracks\n            case Building.UPGRADE:\n                return ResourceManager.stats.Upgrade\n            case Building.GEODOME:\n                return ResourceManager.stats.Geodome\n            case Building.ORE_REFINERY:\n                return ResourceManager.stats.OreRefinery\n            case Building.GUNSTATION:\n                return ResourceManager.stats.GunStation\n            case Building.TELEPORT_BIG:\n                return ResourceManager.stats.TeleportBIG\n        }\n        throw 'Unexpected building type: '+type\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\n\nexport class MovableEntityStats extends BaseConfig {\n\n    RouteSpeed: number[] = []\n    RubbleCoef: number = 1\n    PathCoef: number = 1\n\n}\n","// noinspection JSUnusedGlobalSymbols\n\nimport { BaseConfig } from './BaseConfig'\nimport { BuildingEntityStats } from './BuildingEntityStats'\nimport { MovableEntityStats } from './MovableEntityStats'\n\nexport class GameStatsCfg extends BaseConfig {\n\n    Pilot = new class PilotStats extends BaseConfig {\n        Levels: number = 4\n        RouteSpeed: number[] = [1.10, 1.10, 1.10, 1.10]\n        SoilDrillTime: number[] = [4.0, 4.0, 4.0, 4.0] // Time in seconds to drill through the rock.\n        LooseDrillTime: number[] = [4.0, 4.0, 4.0, 4.0]\n        MedDrillTime: number[] = [8.0, 8.0, 8.0, 8.0]\n        HardDrillTime: number[] = [0.0, 0.0, 0.0, 0.0] // Zero means the object cannot drill the rock type\n        SeamDrillTime: number[] = [10.0, 10.0, 10.0, 10.0] // Either or both ore or crystal.\n        UpgradeTime: number[] = [30.0, 45.0, 60.0, 60.0] // Last entry is ignored as it can never upgrade from that.\n        CollRadius: number = 5.0\n        CollHeight: number = 12.0\n        TrackDist: number = 40.0\n        SingleWidthDig: boolean[] = [true, true, true, true]\n        PickSphere: number = 10.0\n        RepairValue: number[] = [10.0, 15.0, 20.0, 25.0]\n        SurveyRadius: number[] = [3, 3, 3, 3]\n        Drillsound: string = 'SND_pilotdrill'\n        Drillfadesound: string = 'SND_pilotdrillfade'\n        RestPercent: number = 60.0\n        EnergyDecayRate: number = 0.25\n        CanClearRubble: boolean = true\n        NumOfToolsCanCarry: number[] = [2, 3, 4, 5]\n        CrossLand: boolean = true\n        RubbleCoef: number = 0.5\n        PathCoef: number = 2.0\n        RouteAvoidance: boolean = true\n        UseLegoManTeleporter: boolean = true\n        AwarenessRange: number = 10.0\n        OxygenCoef: number = -1.0\n        CanStrafe: boolean = true\n        EnterToolStore: boolean = true\n        ShowHealthBar: boolean = true\n    }\n\n    RockMonster = new class RockMonsterStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 0.8\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 22.0\n        AlertRadius: number = 60.0\n        HealthDecayRate: number = 0.6 // Reduce health by 'n' every second.\n        PickSphere: number = 22.0\n        RepairValue: number = -10.0\n        CanScare: boolean = true\n        RestPercent: number = 20.0\n        CarryMinHealth: number = 15.0\n        PainThreshold: number = 20.0\n        StampRadius: number = 80.0\n        AttackRadius: number = 160.0\n        CanSteal: boolean = true\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        GrabMinifigure: boolean = true\n        RouteAvoidance: boolean = true\n        BumpDamage: boolean = true\n        AttackPaths: boolean = true\n        SplitOnZeroHealth: boolean = true\n        CanBeHitByFence: boolean = true\n        Capacity: number = 6 // How many crystals it can eat\n        PathCoef: number = 0.5\n        // Statistics about the weapons\n        CanBeShotAt: boolean = true // Can this monster be shot at by lego men\n        CanFreeze: boolean = true // Can this object be frozen\n        FreezerTime: number = 25.0 // Time this object is frozen for\n        FreezerDamage: number = 5.0 // Damage that freezing causes\n        CanLaser: boolean = true // Can this object be lasered\n        LaserDamage: number = 110.0 // Damage sustained by a laser\n        CanPush: boolean = true // Can this object be pusher'ed\n        PusherDist: number = 20.0 // Distance the object is pushed 40=1 block\n        PusherDamage: number = 2.0 // Damage that the pusher gun causes\n        WakeRadius: number = 25.0\n        ScaredByBigBangs: boolean = true\n        RemoveReinforcement: boolean = true\n        ShowHealthBar: boolean = true\n    }\n\n    SmallSpider = new class SmallSpiderStats extends MovableEntityStats {\n        Levels: number = 1\n        RouteSpeed: number[] = [2.0]\n        TrackDist: number = 10.0\n        CollRadius: number = 0.0\n        CollHeight: number = 0.0\n        PickSphere: number = 6.0\n        AlertRadius: number = 40.0\n        RandomMove: boolean = true\n        RandomEnterWall: boolean = true\n        CauseSlip: boolean = true\n        CrossLand: boolean = true\n        RubbleCoef: number = 0.2\n        DontShowDamage: boolean = true\n        DontShowOnRadar: boolean = true\n        ScaredByBigBangs: boolean = true\n    }\n\n    Bat = new class BatStats extends MovableEntityStats {\n        Levels: number = 1\n        RouteSpeed: number[] = [1.0]\n        TrackDist: number = 10.0\n        CollRadius: number = 10.0\n        AlertRadius: number = 10.0 // Alert radius (causes attack mode)\n        RandomMove: boolean = true // Random movement\n        randomMoveTime: number = 10\n        CanScare: boolean = true // Scare away the player\n        ScaredByBigBangs: boolean = true\n        // Flock parameters.\n        Flocks: boolean = true // Set this to create a flock for this object.\n        FlocksDebug: boolean = false // If this is set the actual lego objects animation is displayed at the \"lego\" position.\n        FlocksSmooth: boolean = true // Smooths out the orientation of the flocks elements.\n        FlocksSize: number = 8 // Number of the given item in the flock.  (Default 5)\n        FlocksTurn: number = 0.6 // Turning speed of the bat. (0.6 default)\n        FlocksSpeed: number = 1.5 // Velocity of the flock. (2.0 default)\n        FlocksTightness: number = 0.8 // Tightness of the flock. (2.0 default)\n        FlocksGoalUpdate: number = 2.0 // How often the flocks goal is updated (25 per second).  (2.0 default)\n        FlocksRandomness: number = 6.0 // Randomness of goals. (2.0 default)\n        FlocksHeight: number = 22.0 // Height above the ground of the flock elements.  (30.0 default)\n        CrossLand: boolean = true\n        CrossWater: boolean = true\n        CrossLava: boolean = true\n        DontShowDamage: boolean = true\n    }\n\n    TinyRM = new class TinyRMStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 1.2\n        TrackDist: number = 10.0\n        CollRadius: number = 0.0\n        CollHeight: number = 5.0\n        PickSphere: number = 6.0\n        AlertRadius: number = 40.0\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        DontShowDamage: boolean = true\n        DontShowOnRadar: boolean = true\n        ScaredByPlayer: boolean = true\n        ScaredByBigBangs: boolean = true\n    }\n\n    TinyIM = new class TinyIMStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 1.2\n        TrackDist: number = 10.0\n        CollRadius: number = 0.0\n        CollHeight: number = 5.0\n        PickSphere: number = 6.0\n        AlertRadius: number = 40.0\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        DontShowDamage: boolean = true\n        DontShowOnRadar: boolean = true\n        ScaredByPlayer: boolean = true\n        ScaredByBigBangs: boolean = true\n    }\n\n    Slug = new class SlugStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 0.3\n        TrackDist: number = 10.0\n        CollRadius: number = 3.0\n        CollHeight: number = 7.0\n        PickSphere: number = 12.0\n        AlertRadius: number = 40.0\n        CrossLand: boolean = true\n        RubbleCoef: number = 0.3\n        UseHoles: boolean = true\n        DrainPower: boolean = true\n        AttackRadius: number = 280.0\n        PainThreshold: number = 50.0\n        CanBeShotAt: boolean = true\n        CanLaser: boolean = true\n        LaserDamage: number = 5.0\n        CanPush: boolean = true // Can this object be pusher'ed\n        PusherDist: number = 60.0 // Distance the object is pushed\n        PusherDamage: number = 5.0 // Damage that the pusher gun causes\n        ShowHealthBar: boolean = true\n        ScaredByBigBangs: boolean = true\n    }\n\n    LavaMonster = new class LavaMonsterStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 0.8\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 22.0\n        AlertRadius: number = 60.0\n        HealthDecayRate: number = 0.6 // Reduce health by 'n' every second.\n        PickSphere: number = 22.0\n        RepairValue: number = -10.0\n        CanScare: boolean = true\n        RestPercent: number = 20.0\n        CarryMinHealth: number = 15.0\n        PainThreshold: number = 20.0\n        StampRadius: number = 80.0\n        AttackRadius: number = 160.0\n        CanSteal: boolean = true\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        GrabMinifigure: boolean = true\n        Capacity: number = 7 // How many crystals it can eat\n        RouteAvoidance: boolean = true\n        BumpDamage: boolean = true\n        AttackPaths: boolean = true\n        SplitOnZeroHealth: boolean = true\n        CanBeHitByFence: boolean = true\n        PathCoef: number = 0.5\n        CrossLava: boolean = true\n        // Statistics about the weapons\n        CanBeShotAt: boolean = true // Can this monster be shot at by lego men\n        CanFreeze: boolean = true // Can this object be frozen\n        FreezerTime: number = 75.0 // Time this object is frozen for\n        FreezerDamage: number = 40.0 // Damage that freezing causes\n        CanLaser: boolean = true // Can this object be lasered\n        LaserDamage: number = 1.0 // Damage sustained by a laser\n        CanPush: boolean = true // Can this object be pusher'ed\n        PusherDist: number = 60.0 // Distance the object is pushed\n        PusherDamage: number = 5.0 // Damage that the pusher gun causes\n        WakeRadius: number = 25.0\n        ScaredByBigBangs: boolean = true\n        RemoveReinforcement: boolean = true\n        ShowHealthBar: boolean = true\n    }\n\n    IceMonster = new class IceMonsterStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 0.8\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 22.0\n        AlertRadius: number = 60.0\n        HealthDecayRate: number = 0.6 // Reduce health by 'n' every second.\n        PickSphere: number = 22.0\n        RepairValue: number = -10.0\n        CanScare: boolean = true\n        RestPercent: number = 20.0\n        CarryMinHealth: number = 15.0\n        PainThreshold: number = 20.0\n        StampRadius: number = 80.0\n        AttackRadius: number = 120.0\n        CanSteal: boolean = true\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        GrabMinifigure: boolean = true\n        Capacity: number = 5 // How many crystals it can eat\n        RouteAvoidance: boolean = true\n        BumpDamage: boolean = true\n        AttackPaths: boolean = true\n        SplitOnZeroHealth: boolean = true\n        CanBeHitByFence: boolean = true\n        PathCoef: number = 0.5\n        // Statistics about the weapons\n        CanBeShotAt: boolean = true // Can this monster be shot at by lego men\n        CanFreeze: boolean = false // Can this object be frozen\n        FreezerTime: number = 0.0 // Time this object is frozen for\n        FreezerDamage: number = 0.0 // Damage that freezing causes\n        CanLaser: boolean = true // Can this object be lasered\n        LaserDamage: number = 110.0 // Damage sustained by a laser\n        CanPush: boolean = true // Can this object be pusher'ed\n        PusherDist: number = 60.0 // Distance the object is pushed\n        PusherDamage: number = 2.0 // Damage that the pusher gun causes\n        WakeRadius: number = 25.0\n        ScaredByBigBangs: boolean = true\n        RemoveReinforcement: boolean = true\n        ShowHealthBar: boolean = true\n    }\n\n    Hoverboard = new class HoverboardStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No drill or carry)\n        Levels: number = 8\n        RouteSpeed: number[] = [3.0, 3.0, 5.0, 5.0, 3.0, 3.0, 5.0, 5.0]\n        SurveyRadius: number[] = [0, 0, 0, 0, 4, 4, 4, 4]\n        TrackDist: number = 50.0\n        CollRadius: number = 8.0\n        CollHeight: number = 12.0\n        PickSphere: number = 16.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        UseSmallTeleporter: boolean = true\n        CanStrafe: boolean = true\n        CostCrystal: number = 1\n        UpgradeCostOre: number[] = [0, 5, 10, 0]\n        UpgradeCostStuds: number[] = [0, 1, 2, 0]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_SmallEngine'\n    }\n\n    SmallHeli = new class SmallHeliStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 2.50\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 12.0\n        PickSphere: number = 20.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        CrossWater: boolean = true\n        CrossLava: boolean = true\n        UseSmallTeleporter: boolean = true\n        CanStrafe: boolean = true\n        CostCrystal: number = 3\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_HeliEngine'\n    }\n\n    Smallmlp = new class SmallmlpStats extends BaseConfig {\n        Levels: number = 4\n        RouteSpeed: number[] = [0.50, 0.50, 0.50, 0.50]\n        TrackDist: number = 50.0\n        CollRadius: number = 12.0\n        CollHeight: number = 22.0\n        PickSphere: number = 26.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        UseSmallTeleporter: boolean = true\n        Tracker: boolean = true\n        CanDoubleSelect: boolean = true\n        CostCrystal: number = 3\n        UpgradeCostOre: number[] = [0, 0, 0, 10]\n        UpgradeCostStuds: number[] = [0, 0, 0, 2]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_MediumEngine'\n    }\n\n    SmallCat = new class SmallCatStats extends BaseConfig {\n        Levels: number = 3\n        RouteSpeed: number[] = [2.0, 3.0, 4.0]\n        TrackDist: number = 50.0\n        CollRadius: number = 12.0\n        CollHeight: number = 12.0\n        PickSphere: number = 26.0\n        CrossWater: boolean = true\n        CanBeDriven: boolean = true\n        UseWaterTeleporter: boolean = true\n        CostCrystal: number = 2\n        MaxCarry: number[] = [1, 1, 1]\n        GetInAtLand: boolean = true\n        GetOutAtLand: boolean = true\n        TakeCarryingDrivers: boolean = true\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_Catamaran'\n    }\n\n    SmallDigger = new class SmallDiggerStats extends BaseConfig {\n        Levels: number = 8\n        RouteSpeed: number[] = [2.0, 2.0, 4.0, 4.0, 2.0, 2.0, 4.0, 4.0]\n        SoilDrillTime: number[] = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n        LooseDrillTime: number[] = [2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0]\n        MedDrillTime: number[] = [4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0]\n        HardDrillTime: number[] = [180.0, 150.0, 180.0, 150.0, 180.0, 150.0, 180.0, 150.0]\n        SeamDrillTime: number[] = [8.0, 4.0, 8.0, 4.0, 8.0, 4.0, 8.0, 4.0]\n        MaxCarry: number[] = [0, 0, 0, 0, 0, 0, 0, 0]\n        SurveyRadius: number[] = [0, 0, 0, 0, 4, 4, 4, 4]\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 12.0\n        PickSphere: number = 20.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        RouteAvoidance: boolean = true\n        UseSmallTeleporter: boolean = true\n        VehicleCanBeCarried: boolean = true\n        CostCrystal: number = 1\n        UpgradeCostOre: number[] = [0, 5, 10, 10]\n        UpgradeCostStuds: number[] = [0, 1, 2, 2]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_SmallEngine'\n    }\n\n    SmallTruck = new class SmallTruckStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No drill)\n        Levels: number = 16\n        RouteSpeed: number[] = [2.0, 2.0, 3.0, 3.0, 2.0, 2.0, 3.0, 3.0, 2.0, 2.0, 3.0, 3.0, 2.0, 2.0, 3.0, 3.0]\n        MaxCarry: number[] = [3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6]\n        CarryStart: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3]\n        SurveyRadius: number[] = [0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4]\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 12.0\n        PickSphere: number = 20.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        UseSmallTeleporter: boolean = true\n        VehicleCanBeCarried: boolean = true\n        CostCrystal: number = 2\n        EnterToolStore: boolean = true\n        UpgradeCostOre: number[] = [5, 5, 10, 0]\n        UpgradeCostStuds: number[] = [1, 1, 2, 0]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_SmallEngine'\n    }\n\n    Bulldozer = new class BulldozerStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No drill)\n        Levels: number = 16\n        RouteSpeed: number[] = [0.5, 0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8]\n        MaxCarry: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2]\n        SurveyRadius: number[] = [0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5, 5, 5]\n        TrackDist: number = 80.0\n        CollRadius: number = 18.0\n        CollHeight: number = 26.0\n        PickSphere: number = 40.0\n        CrossLand: boolean = true\n        CanClearRubble: boolean = true\n        UseBigTeleporter: boolean = true\n        CanBeDriven: boolean = true\n        CostCrystal: number = 4\n        InvisibleDriver: boolean = true\n        UpgradeCostOre: number[] = [5, 5, 20, 0]\n        UpgradeCostStuds: number[] = [1, 1, 4, 0]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_MediumEngine'\n    }\n\n    WalkerDigger = new class WalkerDiggerStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No carry)\n        Levels: number = 8\n        RouteSpeed: number[] = [0.50, 0.50, 0.80, 0.80, 0.50, 0.50, 0.80, 0.80]\n        SoilDrillTime: number[] = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n        LooseDrillTime: number[] = [0.80, 0.40, 0.80, 0.40, 0.80, 0.40, 0.80, 0.40]\n        MedDrillTime: number[] = [2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0]\n        HardDrillTime: number[] = [180.0, 150.0, 180.0, 150.0, 180.0, 150.0, 180.0, 150.0]\n        SeamDrillTime: number[] = [4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0]\n        SurveyRadius: number[] = [0, 0, 0, 0, 5, 5, 5, 5]\n        TrackDist: number = 80.0\n        CollRadius: number = 15.0\n        CollHeight: number = 33.0\n        PickSphere: number = 35.0\n        CrossLand: boolean = true\n        UseBigTeleporter: boolean = true\n        CostCrystal: number = 3\n        CanBeDriven: boolean = true\n        InvisibleDriver: boolean = true\n        CanStrafe: boolean = true\n        DrillSound: string = 'DrillSFX_Grinder'\n        DrillFadeSound: string = 'DrillSFX_GrinderFade'\n        UpgradeCostOre: number[] = [0, 5, 20, 20]\n        UpgradeCostStuds: number[] = [0, 1, 4, 4]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_MediumEngine'\n    }\n\n    LargeDigger = new class LargeDiggerStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No carry or scan)\n        Levels: number = 4\n        RouteSpeed: number[] = [0.30, 0.30, 0.60, 0.60]\n        SoilDrillTime: number[] = [1.0, 1.0, 1.0, 1.0]\n        LooseDrillTime: number[] = [0.40, 0.20, 0.40, 0.20]\n        MedDrillTime: number[] = [0.80, 0.40, 0.80, 0.40]\n        HardDrillTime: number[] = [1.0, 0.50, 1.0, 0.50]\n        SeamDrillTime: number[] = [1.0, 0.50, 1.0, 0.50]\n        TrackDist: number = 80.0\n        CollRadius: number = 22.0\n        CollHeight: number = 30.0\n        PickSphere: number = 50.0\n        CrossLand: boolean = true\n        UseBigTeleporter: boolean = true\n        Tracker: boolean = true\n        CanDoubleSelect: boolean = true\n        CanBeDriven: boolean = true\n        CostCrystal: number = 5\n        InvisibleDriver: boolean = true\n        DrillSound: string = 'DrillSFX_Grinder'\n        DrillFadeSound: string = 'DrillSFX_GrinderFade'\n        UpgradeCostOre: number[] = [0, 0, 15, 20]\n        UpgradeCostStuds: number[] = [0, 0, 3, 4]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_LargeEngine'\n    }\n\n    LargeCat = new class LargeCatStats extends BaseConfig { // [Carry][Scan][Speed][Drill] (No carry) (Drill???)\n        Levels: number = 1\n        RouteSpeed: number = 1.50\n        SurveyRadius: number = 0\n        TrackDist: number = 80.0\n        CollRadius: number = 22.0\n        CollHeight: number = 25.0\n        PickSphere: number = 50.0\n        CanBeDriven: boolean = true\n        CrossWater: boolean = true\n        UseWaterTeleporter: boolean = true\n        ClassAsLarge: boolean = true\n        CarryVehicles: boolean = true\n        CostCrystal: number = 4\n        EngineSound: string = 'SND_Catamaran'\n        ShowHealthBar: boolean = true\n    }\n\n    LargeHeli = new class LargeHeliStats extends BaseConfig {\n        Levels: number = 3\n        RouteSpeed: number[] = [0.30, 0.40, 0.50]\n        TrackDist: number = 80.0\n        CollRadius: number = 0.0\n        CollHeight: number = 0.0\n        PickSphere: number = 20.0\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_HeliEngine'\n    }\n\n    LargeMLP = new class LargeMLPStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No carry or speed) (Doesn't have drills, just lasers)\n        Levels: number = 8\n        RouteSpeed: number[] = [0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40]\n        SurveyRadius: number[] = [0, 0, 0, 0, 5, 5, 5, 5]\n        TrackDist: number = 80.0\n        CollRadius: number = 20.0\n        CollHeight: number = 24.0\n        PickSphere: number = 47.0\n        CrossLand: boolean = true\n        UseBigTeleporter: boolean = true\n        Tracker: boolean = true\n        CanDoubleSelect: boolean = true\n        CostCrystal: number = 4\n        CanBeDriven: boolean = true\n        InvisibleDriver: boolean = true\n        UpgradeCostOre: number[] = [0, 5, 0, 25]\n        UpgradeCostStuds: number[] = [0, 1, 0, 5]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_LargeEngine'\n    }\n\n    Barracks = new class BarracksStats extends BuildingEntityStats {\n        Levels: number = 3\n        TrackDist: number = 50.0\n        CollHeight: number = 23.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 15\n        CostRefinedOre: number = 3\n        CostCrystal: number = 3\n        SnaxULike: boolean = true\n        TrainDriver: boolean[] = [true, true, true]\n        CrystalDrain: number[] = [1, 1, 1]\n        DamageCausesCallToArms: boolean = true\n        OxygenCoef: number = 10.0\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Powerstation = new class PowerstationStats extends BuildingEntityStats {\n        Levels: number = 2\n        TrackDist: number = 80.0\n        ProcessCrystal: boolean = true\n        CollHeight: number = 31.0\n        CollRadius: number = 15.0\n        PickSphere: number = 32.0\n        CostOre: number = 12\n        CostRefinedOre: number = 3\n        CostCrystal: number = 2\n        PowerBuilding: boolean = true\n        DamageCausesCallToArms: boolean = true\n        EngineSound: string = 'SND_PowerBuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    OreRefinery = new class OreRefineryStats extends BuildingEntityStats {\n        Levels: number = 4\n        TrackDist: number = 60.0\n        ProcessOre: boolean = true\n        CollHeight: number = 16.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 20\n        CostRefinedOre: number = 4\n        CostCrystal: number = 3\n        CrystalDrain: number[] = [1, 1, 1, 1]\n        DamageCausesCallToArms: boolean = true\n        MaxCarry: number[] = [5, 4, 3, 2]\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    TeleportPad = new class TeleportPadStats extends BuildingEntityStats {\n        Levels: number = 3\n        TrackDist: number = 60.0\n        SmallTeleporter: boolean = true\n        ManTeleporter: boolean = true\n        CollHeight: number = 20.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 8\n        CostRefinedOre: number = 2\n        CrystalDrain: number[] = [1, 1, 1]\n        DamageCausesCallToArms: boolean = true\n        TrainPilot: boolean[] = [true, true, true]\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    TeleportBIG = new class TeleportBIGStats extends BuildingEntityStats {\n        Levels: number = 2\n        TrackDist: number = 50.0\n        BigTeleporter: boolean = true\n        CollHeight: number = 17.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 20\n        CostRefinedOre: number = 4\n        CostCrystal: number = 2\n        CrystalDrain: number[] = [1, 1]\n        DamageCausesCallToArms: boolean = true\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Docks = new class DocksStats extends BuildingEntityStats {\n        Levels: number = 1\n        TrackDist: number = 60.0\n        CollHeight: number = 20.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 8\n        CostRefinedOre: number = 2\n        CostCrystal: number = 1\n        WaterEntrances: number = 1\n        WaterTeleporter: boolean = true\n        CrystalDrain: number = 1\n        DamageCausesCallToArms: boolean = true\n        TrainSailor: boolean = true\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Toolstation = new class ToolstationStats extends BuildingEntityStats {\n        Levels: number = 3\n        TrackDist: number = 50.0\n        ManTeleporter: boolean = true\n        CollHeight: number = 16.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        ToolStore: boolean = true\n        StoreObjects: boolean = true\n        SelfPowered: boolean = true\n        DamageCausesCallToArms: boolean = true\n        TrainDynamite: boolean[] = [false, false, true]\n        FunctionCoef: number[] = [1.0, 1.0, 1.0] // Function here is how long it takes to upgrade a minfigure\n        ShowHealthBar: boolean = true\n    }\n\n    GunStation = new class GunStationStats extends BuildingEntityStats {\n        Levels: number = 2\n        TrackDist: number = 60.0\n        CollHeight: number = 33.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 15\n        CostRefinedOre: number = 3\n        CostCrystal: number = 1\n        Tracker: boolean = true\n        CanDoubleSelect: boolean = true\n        CrystalDrain: number[] = [1, 1]\n        DamageCausesCallToArms: boolean = true\n        FunctionCoef: number[] = [1.0, 0.5] // How much of a crystal it drains every time it fires...\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Geodome = new class GeodomeStats extends BuildingEntityStats {\n        Levels: number = 3\n        TrackDist: number = 50.0\n        CollHeight: number = 20.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 15\n        CostRefinedOre: number = 3\n        CostCrystal: number = 3\n        SurveyRadius: number[] = [6, 8, 12]\n        CrystalDrain: number[] = [1, 1, 1]\n        DamageCausesCallToArms: boolean = true\n        TrainScanner: boolean[] = [true, true, true]\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Upgrade = new class UpgradeStats extends BuildingEntityStats {\n        Levels: number = 2\n        TrackDist: number = 80.0\n        CollHeight: number = 40.0\n        CollRadius: number = 15.0\n        PickSphere: number = 32.0\n        CostOre: number = 20\n        CostRefinedOre: number = 4\n        CostCrystal: number = 3\n        UpgradeBuilding: boolean = true\n        CrystalDrain: number[] = [1, 1]\n        DamageCausesCallToArms: boolean = true\n        FunctionCoef: number[] = [0.8, 1.6] // Function is speed of upgrade animation.\n        TrainRepair: boolean[] = [true, true]\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    PowerCrystal = new class PowerCrystalStats extends BaseConfig {\n        Levels: number = 1\n        TrackDist: number = 20.0\n        CollHeight: number = 2.0\n        PickSphere: number = 6.0\n    }\n\n    ProcessedOre = new class ProcessedOreStats extends BaseConfig {\n        Levels: number = 1\n        TrackDist: number = 20.0\n        CollHeight: number = 2.0\n        PickSphere: number = 8.0\n    }\n\n    Ore = new class OreStats extends BaseConfig {\n        Levels: number = 1\n        TrackDist: number = 20.0\n        CollHeight: number = 2.0\n        PickSphere: number = 6.0\n    }\n\n    Boulder = new class BoulderStats extends BaseConfig {\n        Levels: number = 1\n        CollRadius: number = 2.0\n    }\n\n    Pusher = new class PusherStats extends BaseConfig {\n        Levels: number = 1\n        CollRadius: number = 1.0\n    }\n\n    Freezer = new class FreezerStats extends BaseConfig {\n        Levels: number = 1\n        CollRadius: number = 1.0\n    }\n\n    LaserShot = new class LaserShotStats extends BaseConfig {\n        Levels: number = 1\n        ColRadius: number = 1.0\n    }\n\n    ElectricFence = new class ElectricFenceStats extends BaseConfig {\n        Levels: number = 1\n        TrackDist: number = 50.0\n        CollRadius: number = 5.0\n        CollHeight: number = 18.0\n        PickSphere: number = 20.0\n        DamageCausesCallToArms: boolean = true\n    }\n\n    Path = new class PathStats extends BaseConfig {\n        Levels: number = 1\n        CostOre: number = 2\n        CostRefinedOre: number = 1\n    }\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            BaseConfig.setFromCfg(this[objKey], cfgValue)\n            return true\n        }\n    }\n\n}\n\n","import ResourceWorker from 'worker-loader!./wadworker/Resources'\nimport { RepeatWrapping, Texture } from 'three'\nimport { AnimationEntityType } from '../scene/model/anim/AnimationEntityType'\nimport { InitLoadingMessage } from './wadworker/InitLoadingMessage'\nimport { createContext, createDummyImgData } from '../core/ImageHelper'\nimport { iGet } from './wadworker/WadUtil'\nimport { getFilename } from '../core/Util'\nimport { AnimEntityLoader } from './AnimEntityLoader'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { WorkerMessage, WorkerMessageType } from './wadworker/WorkerMessage'\nimport { GameStatsCfg } from '../cfg/GameStatsCfg'\n\nexport class ResourceManager {\n\n    static worker: ResourceWorker = new ResourceWorker()\n    static configuration: any = {}\n    static resourceByName: {} = {}\n    static fontCache = {}\n    static stats: GameStatsCfg\n\n    static startLoadingFromCache() {\n        return this.startLoading(null)\n    }\n\n    static startLoadingFromUrl(wad0Url: string, wad1Url: string) {\n        return this.startLoading(new InitLoadingMessage(wad0Url, wad1Url))\n    }\n\n    private static startLoading(msg: InitLoadingMessage) {\n        this.worker.onmessage = (event) => {\n            const msg: WorkerMessage = event.data\n            if (msg.type === WorkerMessageType.ASSET) {\n                this.resourceByName[msg.assetName.toLowerCase()] = msg.assetObj\n                this.onAssetLoaded()\n            } else if (msg.type === WorkerMessageType.MSG) {\n                this.onMessage(msg.text)\n            } else if (msg.type === WorkerMessageType.CFG) {\n                this.configuration = msg.cfg\n                this.stats = new GameStatsCfg(this.cfg('Stats'))\n                this.onInitialLoad(msg.totalResources)\n            } else if (msg.type === WorkerMessageType.CACHE_MISS) {\n                this.onCacheMissed()\n            } else if (msg.type === WorkerMessageType.DONE) {\n                console.log('Loading of about ' + msg.totalResources + ' assets complete! Total load time: ' + msg.loadingTimeSeconds + ' seconds.')\n                this.onLoadDone()\n            }\n        }\n        this.worker.postMessage(msg)\n    }\n\n    static onMessage: (msg: string) => any = (msg: string) => {\n        console.log(msg)\n    }\n\n    static onCacheMissed: () => any = () => {\n        console.log('Worker missed cache')\n    }\n\n    static onInitialLoad: (totalResources: number) => any = () => {\n        console.log('Initial loading done.')\n    }\n\n    static onAssetLoaded: () => any = () => {\n    }\n\n    static onLoadDone: () => any = () => {\n    }\n\n    static cfg(...keys: string[]): any {\n        return iGet(ResourceManager.configuration, ...keys)\n    }\n\n    static filterTextureSequenceNames(basename: string): string[] {\n        const lBasename = basename.toLowerCase()\n        const result = Object.keys(this.resourceByName).filter((name) => name.startsWith(lBasename))\n        if (result.length > 0) {\n            return result\n        } else if (!lBasename.startsWith('world/shared/')) {\n            return ResourceManager.filterTextureSequenceNames('world/shared/' + getFilename(basename))\n        } else {\n            console.warn('Texture sequence not found: ' + basename)\n            return null\n        }\n    }\n\n    static getResource(resourceName: string): any {\n        const lName = resourceName ? resourceName.toString().toLowerCase() : null\n        if (lName && this.resourceByName.hasOwnProperty(lName)) {\n            return this.resourceByName[lName]\n        }\n        return null\n    }\n\n    static getImageData(imageName): ImageData {\n        if (!imageName || imageName.length === 0) {\n            throw 'imageName must not be undefined, null or empty - was ' + imageName\n        }\n        const lImageName = imageName.toLowerCase()\n        let imgData = this.getResource(lImageName)\n        if (!imgData) {\n            console.error('Image \\'' + imageName + '\\' unknown! Using placeholder image instead')\n            ResourceManager.resourceByName[lImageName] = createDummyImgData(64, 64)\n        }\n        return ResourceManager.resourceByName[lImageName]\n    }\n\n    static getImage(imageName: string): HTMLCanvasElement {\n        const imgData = this.getImageData(imageName)\n        const context: CanvasRenderingContext2D = createContext(imgData.width, imgData.height)\n        context.putImageData(imgData, 0, 0)\n        return context.canvas\n    }\n\n    static getImageOrNull(imageName: string): HTMLCanvasElement | null {\n        if (!imageName) return null\n        return this.getImage(imageName)\n    }\n\n    static getTexture(textureName): Texture {\n        if (!textureName || textureName.length === 0) {\n            throw 'textureName must not be undefined, null or empty - was ' + textureName\n        }\n        const lTextureName = textureName.toLowerCase()\n        const lSharedTextureName = 'world/shared/' + getFilename(lTextureName)\n        let imgData = this.getResource(lTextureName) || this.getResource(lSharedTextureName)\n        if (!imgData) {\n            if (lTextureName !== 'buildings/geo-dome/a_walkie.bmp' && // ignore known issues\n                lTextureName !== 'world/shared/teofoilreflections.jpg' &&\n                lTextureName !== 'buildings/barracks/wingbase3.bmp') {\n                console.warn('Texture \\'' + textureName + '\\' (' + lTextureName + ', ' + lSharedTextureName + ') unknown! Using placeholder texture instead')\n            }\n            ResourceManager.resourceByName[lTextureName] = imgData = createDummyImgData(64, 64)\n        }\n        const texture = new Texture(imgData, Texture.DEFAULT_MAPPING, RepeatWrapping, RepeatWrapping)\n        texture.needsUpdate = true\n        return texture\n    }\n\n    static getMap(name: string) {\n        return name ? this.getResource(name) : null\n    }\n\n    static getAnimationEntityType(aeFilename: string): AnimationEntityType {\n        let cfgRoot = this.getResource(aeFilename)\n        if (!cfgRoot) throw 'Could not get animation entity type for: ' + aeFilename\n        return AnimEntityLoader.loadModels(aeFilename, cfgRoot)\n    }\n\n    static getBitmapFont(name: string): BitmapFont {\n        const fontImageData = this.getResource(name)\n        if (!fontImageData) throw 'Could not load font image data for: ' + name\n        ResourceManager.fontCache[name] = ResourceManager.fontCache[name] || new BitmapFont(fontImageData)\n        return ResourceManager.fontCache[name]\n    }\n\n    static getDefaultFont() {\n        return ResourceManager.getBitmapFont('Interface/Fonts/Font5_Hi.bmp')\n    }\n}\n","import { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../main'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { KEY_EVENT, POINTER_EVENT } from '../event/EventTypeEnum'\n\nexport class ScreenLayer {\n\n    canvas: HTMLCanvasElement\n    context: CanvasRenderingContext2D\n    onRedraw: (context: CanvasRenderingContext2D) => any\n    active: boolean = true\n\n    constructor(alpha: boolean = false, withContext: boolean = true) {\n        this.canvas = document.createElement('canvas')\n        if (!alpha) this.canvas.style.background = '#f0f'\n        if (withContext) this.context = this.canvas.getContext('2d', {alpha: alpha})\n        this.hide()\n    }\n\n    reset() {\n    }\n\n    setZIndex(zIndex: number) {\n        this.canvas.style.zIndex = String(zIndex)\n    }\n\n    static compareZ(layerA: ScreenLayer, layerB: ScreenLayer) {\n        let aIndex = layerA?.canvas?.style?.zIndex || 0\n        const bIndex = layerB?.canvas?.style?.zIndex || 0\n        return aIndex === bIndex ? 0 : aIndex > bIndex ? -1 : 1\n    }\n\n    resize(width, height) {\n        this.canvas.width = width\n        this.canvas.height = height\n    }\n\n    redraw() {\n        const callback = this.onRedraw\n        if (this.isActive() && callback) {\n            const context = this.context\n            requestAnimationFrame(() => callback(context))\n        }\n    }\n\n    show() {\n        this.reset()\n        this.active = true\n        this.canvas.style.visibility = 'visible'\n        this.redraw()\n    }\n\n    hide() {\n        this.active = false\n        this.canvas.style.visibility = 'hidden'\n    }\n\n    isActive() {\n        return this.active\n    }\n\n    toCanvasCoords(windowX: number, windowY: number) {\n        const clientRect = this.canvas.getBoundingClientRect()\n        return [windowX - clientRect.left, windowY - clientRect.top]\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        return false\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        return false\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        return false\n    }\n\n}\n\nexport class ScaledLayer extends ScreenLayer {\n\n    fixedWidth: number\n    fixedHeight: number\n\n    constructor() {\n        super(true)\n        this.fixedWidth = SPRITE_RESOLUTION_WIDTH\n        this.fixedHeight = SPRITE_RESOLUTION_HEIGHT\n    }\n\n    toScaledCoords(windowX: number, windowY: number) {\n        const [cx, cy] = this.toCanvasCoords(windowX, windowY)\n        return [cx / this.scaleX(), cy / this.scaleY()]\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        this.context.scale(this.scaleX(), this.scaleY())\n    }\n\n    scaleX() {\n        return this.canvas.width / this.fixedWidth\n    }\n\n    scaleY() {\n        return this.canvas.height / this.fixedHeight\n    }\n\n}\n\nexport class CursorLayer extends ScaledLayer {\n\n    curUrl\n    cursorName: string = 'Aclosed'\n\n    show() {\n        super.show()\n        this.createCursor()\n    }\n\n    hide() {\n        super.hide()\n        this.canvas.style.cursor = null\n    }\n\n    createCursor() {\n        if (this.curUrl) URL.revokeObjectURL(this.curUrl)\n        const curImg = ResourceManager.getImage('Interface/Pointers/' + this.cursorName + '.bmp')\n        this.curUrl = curImg.toDataURL()\n        // Chrome limits cursor size to 32x32 anyway...\n        // const context: CanvasRenderingContext2D = createContext(curImg.width * this.scaleX(), curImg.height * this.scaleY());\n        // context.scale(this.scaleX(), this.scaleY());\n        // context.drawImage(curImg, 0, 0);\n        // this.curUrl = context.canvas.toDataURL();\n        this.canvas.style.cursor = 'url(' + this.curUrl + '), auto'\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        if (this.isActive()) this.createCursor()\n    }\n\n}\n","import { ScreenLayer } from '../screen/ScreenLayer'\nimport { BaseScreen } from '../screen/BaseScreen'\nimport { KEY_EVENT, POINTER_EVENT } from './EventTypeEnum'\n\nexport class EventManager {\n\n    constructor(screen: BaseScreen) {\n        screen.gameCanvasContainer.addEventListener('contextmenu', (event: MouseEvent) => {\n            if (screen.isInRect(event)) event.preventDefault()\n        })\n        new Map<string, POINTER_EVENT>([\n            ['pointermove', POINTER_EVENT.MOVE],\n            ['pointerdown', POINTER_EVENT.DOWN],\n            ['pointerup', POINTER_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: PointerEvent) => {\n                if (!screen.isInRect(event)) return\n                event.preventDefault()\n                // all event attibutes used by controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n                const nonBubblingClone = new PointerEvent(event.type, {\n                    bubbles: false, // disable bubbling otherwise we'll trigger this same event handler again\n                    clientX: event.clientX,\n                    clientY: event.clientY,\n                    pointerType: event.pointerType,\n                    button: event.button,\n                    ctrlKey: event.ctrlKey,\n                    metaKey: event.metaKey,\n                    shiftKey: event.shiftKey,\n                })\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handlePointerEvent(eventEnum, nonBubblingClone))\n            })\n        })\n        new Map<string, KEY_EVENT>([\n            ['keydown', KEY_EVENT.DOWN],\n            ['keyup', KEY_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: KeyboardEvent) => {\n                // event.preventDefault(); // otherwise page reload with F5 stops working (may be intended in future)\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handleKeyEvent(eventEnum, event))\n            })\n        })\n        screen.gameCanvasContainer.addEventListener('wheel', (event: WheelEvent) => {\n            if (!screen.isInRect(event)) return\n            // all event attibutes used by controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n            const nonBubblingClone = new WheelEvent(event.type, {\n                bubbles: false, // disable bubbling otherwise we'll trigger this same event handler again\n                clientX: event.clientX,\n                clientY: event.clientY,\n                deltaX: event.deltaX,\n                deltaY: event.deltaY,\n                deltaZ: event.deltaZ,\n                button: event.button,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey,\n                shiftKey: event.shiftKey,\n            })\n            screen.layers.filter(l => l.isActive())\n                .sort((a, b) => ScreenLayer.compareZ(a, b))\n                .some(l => l.handleWheelEvent(nonBubblingClone))\n        })\n    }\n\n}\n","import { Group, Mesh, MeshPhongMaterial, Vector2, Vector3 } from 'three'\nimport { Terrain } from './Terrain'\nimport { SurfaceType } from './SurfaceType'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Selectable, SelectionType } from '../../../game/model/Selectable'\nimport { EventBus } from '../../../event/EventBus'\nimport { SelectionEvent, SurfaceChanged, SurfaceSelectedEvent } from '../../../event/LocalEvents'\nimport { CavernDiscovered, JobCreateEvent, JobDeleteEvent, OreFoundEvent } from '../../../event/WorldEvents'\nimport { clearTimeoutSafe, getRandom, getRandomSign } from '../../../core/Util'\nimport { Crystal } from '../collect/Crystal'\nimport { Ore } from '../collect/Ore'\nimport { HEIGHT_MULTIPLER, TILESIZE } from '../../../main'\nimport { GameState } from '../../../game/model/GameState'\nimport { SurfaceJob } from '../../../game/model/job/surface/SurfaceJob'\nimport { LWSCLoader } from '../../../resource/LWSCLoader'\nimport { AnimSubObj } from '../anim/AnimSubObj'\nimport { SurfaceGeometry } from './SurfaceGeometry'\nimport { CrystalFoundEvent, LandslideEvent } from '../../../event/WorldLocationEvent'\nimport { JobType } from '../../../game/model/job/JobType'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { ElectricFence } from '../collect/ElectricFence'\n\nexport class Surface implements Selectable {\n\n    terrain: Terrain\n    surfaceType: SurfaceType\n    x: number\n    y: number\n    containedOres: number = 0\n    containedCrystals: number = 0\n    heightOffset: number = null\n    discovered: boolean = false\n    selected: boolean = false\n    reinforced: boolean = false\n    jobs: SurfaceJob[] = []\n    surfaceRotation: number = 0\n    seamLevel: number = 0\n    fallinTimeout = null\n\n    fallinGrp: Group = null\n    animationTimeout = null\n\n    wallType: WALL_TYPE = null\n    mesh: Mesh = null\n    needsMeshUpdate: boolean = false\n\n    topLeftHeightOffset: number = 0\n    topRightHeightOffset: number = 0\n    bottomLeftHeightOffset: number = 0\n    bottomRightHeightOffset: number = 0\n\n    rubblePositions: Vector2[] = []\n\n    building: BuildingEntity = null\n    fence: ElectricFence = null\n    hasPower: boolean = false\n\n    constructor(terrain: Terrain, surfaceType: SurfaceType, x: number, y: number, heightOffset: number) {\n        this.terrain = terrain\n        this.surfaceType = surfaceType\n        if (surfaceType === SurfaceType.CRYSTAL_SEAM || surfaceType === SurfaceType.ORE_SEAM) this.seamLevel = 4\n        this.x = x\n        this.y = y\n        this.heightOffset = heightOffset\n        EventBus.registerEventListener(EventKey.JOB_CREATE, (event: JobCreateEvent) => {\n            const jobType = event.job.type\n            if (jobType === JobType.DRILL || jobType === JobType.REINFORCE || jobType === JobType.BLOW) {\n                const surfaceJob = event.job as SurfaceJob\n                if (surfaceJob.surface === this) this.jobs.push(surfaceJob)\n            }\n        })\n    }\n\n    hasJobType(type: JobType) {\n        return this.jobs.some((job) => job.type === type)\n    }\n\n    /**\n     * @return {boolean} Returns true, if a new cave has been discovered\n     */\n    discoverNeighbors(): boolean {\n        if (!this.discovered) GameState.discoverSurface(this)\n        this.discovered = true\n        this.needsMeshUpdate = true\n        let foundCave = false\n        if (this.surfaceType.floor) {\n            for (let x = this.x - 1; x <= this.x + 1; x++) {\n                for (let y = this.y - 1; y <= this.y + 1; y++) {\n                    if (x !== this.x || y !== this.y) {\n                        const surf = this.terrain.getSurfaceOrNull(x, y)\n                        if (surf && !surf.discovered) {\n                            foundCave = surf.discoverNeighbors() || surf.surfaceType.floor\n                            surf.needsMeshUpdate = true\n                        }\n                    }\n                }\n            }\n        }\n        return foundCave\n    }\n\n    collapse() {\n        this.cancelJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += 4\n        this.needsMeshUpdate = true\n        // discover surface and all neighbors\n        const foundCave = this.discoverNeighbors()\n        if (foundCave) EventBus.publishEvent(new CavernDiscovered())\n        // drop contained ores and crystals\n        this.dropContainedOre(this.containedOres - 4)\n        for (let c = 0; c < this.containedCrystals; c++) {\n            const crystal = this.terrain.worldMgr.addCollectable(new Crystal(), this.getRandomPosition())\n            EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n        }\n        // check for unsupported neighbors\n        for (let x = this.x - 1; x <= this.x + 1; x++) {\n            for (let y = this.y - 1; y <= this.y + 1; y++) {\n                if (x !== this.x || y !== this.y) {\n                    const surf = this.terrain.getSurface(x, y)\n                    surf.needsMeshUpdate = true\n                    if (!surf.isSupported()) surf.collapse()\n                }\n            }\n        }\n        // update meshes\n        this.terrain.updateSurfaceMeshes()\n        this.terrain.floorGroup.updateWorldMatrix(true, true)\n    }\n\n    private dropContainedOre(dropAmount: number) {\n        for (let c = 0; c < dropAmount && this.containedOres > 0; c++) {\n            this.containedOres--\n            this.terrain.worldMgr.addCollectable(new Ore(), this.getRandomPosition())\n            EventBus.publishEvent(new OreFoundEvent())\n        }\n    }\n\n    getRandomPosition(): Vector2 {\n        return new Vector2(this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4),\n            this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4))\n    }\n\n    cancelJobs() {\n        const jobs = this.jobs // ensure consistency while processing\n        this.jobs = []\n        jobs.forEach((job) => EventBus.publishEvent(new JobDeleteEvent(job)))\n        this.updateJobColor()\n    }\n\n    reduceRubble() {\n        this.rubblePositions.shift()\n        if (this.surfaceType === SurfaceType.RUBBLE4) this.surfaceType = SurfaceType.RUBBLE3\n        else if (this.surfaceType === SurfaceType.RUBBLE3) this.surfaceType = SurfaceType.RUBBLE2\n        else if (this.surfaceType === SurfaceType.RUBBLE2) this.surfaceType = SurfaceType.RUBBLE1\n        else if (this.surfaceType === SurfaceType.RUBBLE1) this.surfaceType = SurfaceType.GROUND\n        this.dropContainedOre(this.containedOres - this.rubblePositions.length)\n        this.updateTexture()\n        EventBus.publishEvent(new SurfaceChanged(this))\n    }\n\n    isSupported(): boolean {\n        if (this.surfaceType.floor) return true\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        return isHighGround(surfLeft, surfTopLeft, surfTop)\n            || isHighGround(surfTop, surfTopRight, surfRight)\n            || isHighGround(surfRight, surfBottomRight, surfBottom)\n            || isHighGround(surfBottom, surfBottomLeft, surfLeft)\n    }\n\n    updateMesh(force: boolean = true) {\n        if (!force && !this.needsMeshUpdate) return\n        this.needsMeshUpdate = false\n\n        const topLeftVertex = new Vector3(this.x, 0, this.y)\n        const topRightVertex = new Vector3(this.x + 1, 0, this.y)\n        const bottomLeftVertex = new Vector3(this.x, 0, this.y + 1)\n        const bottomRightVertex = new Vector3(this.x + 1, 0, this.y + 1)\n\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        if (!this.discovered) {\n            topLeftVertex.y = 1\n            topRightVertex.y = 1\n            bottomRightVertex.y = 1\n            bottomLeftVertex.y = 1\n        } else if (!this.surfaceType.floor) {\n            if (isHighGround(surfLeft, surfTopLeft, surfTop)) topLeftVertex.y = 1\n            if (isHighGround(surfTop, surfTopRight, surfRight)) topRightVertex.y = 1\n            if (isHighGround(surfRight, surfBottomRight, surfBottom)) bottomRightVertex.y = 1\n            if (isHighGround(surfBottom, surfBottomLeft, surfLeft)) bottomLeftVertex.y = 1\n        }\n\n        // update mesh (geometry), if wall type changed\n        let wallType = topLeftVertex.y + topRightVertex.y + bottomRightVertex.y + bottomLeftVertex.y\n        if (wallType === WALL_TYPE.WALL && topLeftVertex.y === bottomRightVertex.y) wallType = WALL_TYPE.WEIRD_CREVICE\n\n        if (this.wallType !== wallType) {\n            this.wallType = wallType\n            this.updateGeometry(topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex, surfTopLeft, surfTop, surfLeft, surfTopRight, surfRight, surfBottomRight, surfBottom, surfBottomLeft)\n            if (this.wallType !== WALL_TYPE.WALL) this.cancelReinforceJobs()\n        }\n\n        this.updateTexture()\n        this.updateJobColor()\n        this.terrain.graphWalk.grid[this.x][this.y].weight = this.getGraphWalkWeight()\n    }\n\n    cancelReinforceJobs() {\n        const otherJobs = []\n        this.jobs.forEach((job) => {\n            if (job.type === JobType.REINFORCE) {\n                EventBus.publishEvent(new JobDeleteEvent(job))\n            } else {\n                otherJobs.push(job)\n            }\n        })\n        this.jobs = otherJobs\n        this.updateJobColor()\n    }\n\n    updateTexture() {\n        let textureName = this.terrain.textureSet.texturebasename\n        if (!this.discovered) {\n            textureName += '70'\n        } else if (this.surfaceType === SurfaceType.POWER_PATH) {\n            textureName += this.updatePowerPathTexture()\n        } else if (!this.surfaceType.shaping) {\n            if (this.surfaceType === SurfaceType.POWER_PATH_BUILDING && this.hasPower) {\n                textureName += '66'\n            } else {\n                textureName += this.surfaceType.matIndex.toString()\n            }\n        } else if (this.wallType === WALL_TYPE.WEIRD_CREVICE) {\n            textureName += '77'\n        } else {\n            if (this.wallType === WALL_TYPE.CORNER) {\n                textureName += '5'\n            } else if (this.wallType === WALL_TYPE.INVERTED_CORNER) {\n                textureName += '3'\n            } else if (this.reinforced) {\n                textureName += '2'\n            } else {\n                textureName += '0'\n            }\n            textureName += this.surfaceType.matIndex\n        }\n        textureName += '.bmp'\n\n        const texture = ResourceManager.getTexture(textureName)\n        texture.center.set(0.5, 0.5)\n        texture.rotation = this.surfaceRotation\n\n        this.accessMaterials().forEach((mat) => mat.map = texture)\n    }\n\n    private updatePowerPathTexture(): string {\n        this.surfaceRotation = 0\n        const left = this.terrain.getSurface(this.x - 1, this.y).isPath()\n        const top = this.terrain.getSurface(this.x, this.y - 1).isPath()\n        const right = this.terrain.getSurface(this.x + 1, this.y).isPath()\n        const bottom = this.terrain.getSurface(this.x, this.y + 1).isPath()\n        const pathSum = (left ? 1 : 0) + (top ? 1 : 0) + (right ? 1 : 0) + (bottom ? 1 : 0)\n        if (pathSum === 0 || pathSum === 1) {\n            if (left) this.surfaceRotation = -Math.PI / 2\n            if (top) this.surfaceRotation = Math.PI\n            if (right) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '75' : '65'\n        } else if (pathSum === 2) {\n            if (left === right) {\n                this.surfaceRotation = left ? Math.PI / 2 : 0\n                return this.hasPower ? '72' : '62'\n            } else {\n                if (left && bottom) this.surfaceRotation = -Math.PI / 2\n                if (left && top) this.surfaceRotation = Math.PI\n                if (top && right) this.surfaceRotation = Math.PI / 2\n                return this.hasPower ? '73' : '63'\n            }\n        } else if (pathSum === 3) {\n            if (!top) this.surfaceRotation = -Math.PI / 2\n            if (!right) this.surfaceRotation = Math.PI\n            if (!bottom) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '74' : '64'\n        } else {\n            return this.hasPower ? '71' : '60'\n        }\n    }\n\n    accessMaterials(): MeshPhongMaterial[] {\n        if (!this.mesh || !this.mesh.material) return []\n        if (Array.isArray(this.mesh.material)) {\n            return this.mesh.material as MeshPhongMaterial[]\n        } else {\n            return [this.mesh.material as MeshPhongMaterial]\n        }\n    }\n\n    updateGeometry(topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3, surfTopLeft: Surface, surfTop: Surface, surfLeft: Surface, surfTopRight: Surface, surfRight: Surface, surfBottomRight: Surface, surfBottom: Surface, surfBottomLeft: Surface) {\n        if (this.mesh) this.terrain.floorGroup.remove(this.mesh)\n        this.mesh?.geometry?.dispose()\n\n        function avgHeight(...args: Surface[]) {\n            let sum = 0, cnt = 0\n            args.map(s => s.heightOffset).filter(Boolean).forEach(h => {\n                sum += h\n                cnt++\n            })\n            return sum / cnt\n        }\n\n        this.topLeftHeightOffset = avgHeight(surfTopLeft, surfTop, this, surfLeft) * HEIGHT_MULTIPLER\n        this.topRightHeightOffset = avgHeight(surfTop, surfTopRight, surfRight, this) * HEIGHT_MULTIPLER\n        this.bottomRightHeightOffset = avgHeight(this, surfRight, surfBottomRight, surfBottom) * HEIGHT_MULTIPLER\n        this.bottomLeftHeightOffset = avgHeight(surfLeft, this, surfBottom, surfBottomLeft) * HEIGHT_MULTIPLER\n        const geometry = SurfaceGeometry.create(this.wallType, topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex,\n            topLeftVertex.y + this.topLeftHeightOffset,\n            topRightVertex.y + this.topRightHeightOffset,\n            bottomRightVertex.y + this.bottomRightHeightOffset,\n            bottomLeftVertex.y + this.bottomLeftHeightOffset,\n        )\n\n        this.mesh = new Mesh(geometry, new MeshPhongMaterial({shininess: 0}))\n        this.mesh.userData = {selectable: this}\n\n        this.terrain.floorGroup.add(this.mesh)\n        this.terrain.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.SURFACE\n    }\n\n    select(): SelectionEvent {\n        if (this.surfaceType.selectable && (this.wallType !== WALL_TYPE.INVERTED_CORNER && this.wallType !== WALL_TYPE.WEIRD_CREVICE) && !this.selected) {\n            this.selected = true\n            this.accessMaterials().forEach((mat) => mat.color.setHex(0x6060a0))\n            return new SurfaceSelectedEvent(this)\n        }\n        return null\n    }\n\n    deselect(): any {\n        if (this.selected) {\n            this.selected = false\n            this.updateJobColor()\n        }\n    }\n\n    getSelectionCenter(): Vector3 {\n        return null // not used\n    }\n\n    updateJobColor() {\n        const sortedJobs = this.jobs.sort((l, r) => -l.colorPriority + r.colorPriority)\n        const color = sortedJobs[0]?.color || 0xffffff\n        this.accessMaterials().forEach((mat) => mat.color.setHex(color))\n    }\n\n    hasRubble(): boolean {\n        return this.rubblePositions.length > 0\n    }\n\n    isPath(): boolean {\n        return this.surfaceType === SurfaceType.POWER_PATH || this.surfaceType === SurfaceType.POWER_PATH_BUILDING\n    }\n\n    isWalkable(): boolean {\n        return this.surfaceType.floor && this.discovered && this.surfaceType !== SurfaceType.LAVA && this.surfaceType !== SurfaceType.WATER && !this.building?.type.blocksPathSurface\n    }\n\n    isDrillable(): boolean {\n        return this.surfaceType.drillable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDrillableHard(): boolean {\n        return this.surfaceType.drillableHard && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isReinforcable(): boolean {\n        return this.surfaceType.reinforcable && this.discovered && this.wallType === WALL_TYPE.WALL && !this.reinforced\n    }\n\n    isExplodable(): boolean {\n        return this.surfaceType.explodable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDigable(): boolean {\n        return this.isDrillable() || this.isExplodable()\n    }\n\n    getDigPositions(): Vector2[] {\n        const digPosition = []\n        if (this.terrain.getSurface(this.x - 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE - 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y - 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE - 1))\n        if (this.terrain.getSurface(this.x + 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE + 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y + 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE + TILESIZE + 1))\n        return digPosition\n    }\n\n    reinforce() {\n        this.reinforced = true\n        this.cancelReinforceJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.updateTexture()\n    }\n\n    getCenterWorld2D(): Vector2 {\n        return new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE + TILESIZE / 2)\n    }\n\n    getCenterWorld(): Vector3 {\n        const center = this.getCenterWorld2D()\n        return new Vector3(center.x, this.terrain.worldMgr.getTerrainHeight(center.x, center.y), center.y)\n    }\n\n    setFallinLevel(fallinLevel: number) {\n        if (fallinLevel < 1) return\n        let originPos\n        let targetPos\n        if (this.surfaceType.floor) {\n            originPos = this.terrain.findFallInOrigin(this.x, this.y)\n            targetPos = [this.x, this.y]\n        } else {\n            originPos = [this.x, this.y]\n            targetPos = this.terrain.findFallInTarget(this.x, this.y)\n        }\n        if (originPos && targetPos) {\n            this.terrain.getSurface(originPos[0], originPos[1]).scheduleFallin(targetPos[0], targetPos[1])\n        }\n    }\n\n    scheduleFallin(targetX: number, targetY: number) {\n        this.fallinTimeout = setTimeout(() => {\n            this.createFallin(targetX, targetY)\n            this.scheduleFallin(targetX, targetY)\n        }, (30 + getRandom(60)) * 1000) // TODO adapt timer to level multiplier and fallin value\n    }\n\n    createFallin(targetX: number, targetY: number) {\n        const fallinPosition = this.terrain.getSurface(targetX, targetY).getCenterWorld()\n        EventBus.publishEvent(new LandslideEvent(fallinPosition))\n\n        // TODO refactor mesh and animation handling\n        const content = ResourceManager.getResource('MiscAnims/RockFall/Rock3Sides.lws')\n        const animation = new LWSCLoader('MiscAnims/RockFall/').parse(content)\n        this.fallinGrp = new Group()\n        this.fallinGrp.position.copy(fallinPosition)\n        const dx = this.x - targetX, dy = targetY - this.y\n        this.fallinGrp.rotateOnAxis(new Vector3(0, 1, 0), Math.atan2(dy, dx) + Math.PI / 2)\n        this.terrain.worldMgr.sceneManager.scene.add(this.fallinGrp)\n        const poly = []\n        animation.bodies.forEach((body) => {\n            const polyModel = body.model.clone(true)\n            poly.push(polyModel)\n        })\n        animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                poly[parentInd].add(polyPart)\n            } else {\n                this.fallinGrp.add(polyPart)\n            }\n        })\n        this.animate(poly, animation, 0)\n\n        this.terrain.getSurface(targetX, targetY).makeRubble()\n    }\n\n    animate(poly, animation, frameIndex) {\n        if (poly.length !== animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = material.opacity < 1\n                    })\n                }\n            }\n        })\n        this.animationTimeout = null\n        if (!(frameIndex + 1 > animation.lastFrame) || animation.looping) {\n            let nextFrame = frameIndex + 1\n            if (nextFrame > animation.lastFrame) {\n                nextFrame = animation.firstFrame\n            }\n            const that = this\n            this.animationTimeout = setTimeout(() => that.animate(poly, animation, nextFrame), 1000 / animation.framesPerSecond * animation.transcoef)\n        } else {\n            this.terrain.worldMgr.sceneManager.scene.remove(this.fallinGrp)\n            this.fallinGrp = null\n        }\n    }\n\n    dispose() {\n        this.accessMaterials().forEach(m => m.dispose())\n        this.mesh?.geometry?.dispose()\n    }\n\n    getFloorHeight(worldX: number, worldZ: number) {\n        const sx = worldX / TILESIZE - this.x\n        const sy = worldZ / TILESIZE - this.y\n        const dy0 = Surface.interpolate(this.topLeftHeightOffset, this.topRightHeightOffset, sx)\n        const dy1 = Surface.interpolate(this.bottomLeftHeightOffset, this.bottomRightHeightOffset, sx)\n        return Surface.interpolate(dy0, dy1, sy) * TILESIZE\n    }\n\n    private static interpolate(y0: number, y1: number, x: number): number {\n        return y0 + x * (y1 - y0)\n    }\n\n    get neighbors(): Surface[] {\n        return [this.terrain.getSurface(this.x - 1, this.y), this.terrain.getSurface(this.x, this.y - 1),\n            this.terrain.getSurface(this.x + 1, this.y), this.terrain.getSurface(this.x, this.y + 1)]\n    }\n\n    makeRubble(containedOre: number = 0) {\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += containedOre\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.updateTexture()\n    }\n\n    setBuilding(building: BuildingEntity) {\n        this.building = building\n        this.terrain.graphWalk.grid[this.x][this.y].weight = this.getGraphWalkWeight()\n        this.terrain.resetGraphWalk()\n    }\n\n    getGraphWalkWeight(): number {\n        return this.isWalkable() ? this.hasRubble() ? 4 : 1 : 0\n    }\n\n    setHasPower(state: boolean, recursive: boolean) {\n        if (this.hasPower === state) return\n        this.hasPower = state\n        this.updateTexture()\n        if (recursive) this.neighbors.forEach((n) => n.isPath() && n.setHasPower(state, recursive))\n    }\n\n    canPlaceFence(): boolean { // TODO performance this can be cached\n        return (this.surfaceType === SurfaceType.GROUND || this.isPath()) && !this.building && !this.fence &&\n            [1, 2].some((n) => {\n                return !!this.terrain.getSurface(this.x - n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y - n).building ||\n                    !!this.terrain.getSurface(this.x + n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y + n).building ||\n                    !!this.terrain.getSurface(this.x - n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y - n).fence ||\n                    !!this.terrain.getSurface(this.x + n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y + n).fence\n            })\n    }\n\n}\n\nexport enum WALL_TYPE {\n\n    CORNER = 1,\n    WALL = 2,\n    INVERTED_CORNER = 3,\n    WEIRD_CREVICE = 20,\n\n}\n","import { CursorLayer, ScreenLayer } from './ScreenLayer'\nimport { EventManager } from '../event/EventManager'\n\nexport class BaseScreen {\n\n    gameCanvasContainer: HTMLElement\n    eventMgr: EventManager\n    layers: ScreenLayer[] = []\n    width: number = 800\n    height: number = 600\n    ratio: number = 800 / 600\n    cursorLayer: CursorLayer\n\n    constructor() {\n        this.gameCanvasContainer = document.getElementById('game-canvas-container')\n        this.gameCanvasContainer.focus()\n        this.eventMgr = new EventManager(this)\n        if (!this.gameCanvasContainer) throw 'Fatal error: game canvas container not found!'\n        window.addEventListener('resize', () => this.onWindowResize())\n        this.cursorLayer = this.addLayer(new CursorLayer(), 1000)\n        this.onWindowResize()\n    }\n\n    addLayer<T extends ScreenLayer>(layer: T, zIndex: number = 0): T {\n        layer.resize(this.width, this.height)\n        layer.setZIndex(zIndex)\n        this.layers.push(layer)\n        this.gameCanvasContainer.appendChild(layer.canvas)\n        return layer\n    }\n\n    redraw() {\n        this.layers.forEach((layer) => layer.redraw())\n    }\n\n    show() {\n        this.layers.forEach((layer) => layer.show())\n        this.redraw()\n    }\n\n    hide() {\n        this.layers.forEach((layer) => layer.hide())\n    }\n\n    onWindowResize() {\n        const maxWidth = this.gameCanvasContainer.offsetWidth, maxHeight = this.gameCanvasContainer.offsetHeight\n        const idealHeight = Math.round(maxWidth / this.ratio)\n        if (idealHeight > maxHeight) {\n            this.resize(Math.round(maxHeight * this.ratio), maxHeight)\n        } else {\n            this.resize(maxWidth, idealHeight)\n        }\n    }\n\n    resize(width: number, height: number) {\n        this.width = width\n        this.height = height\n        this.layers.forEach((layer) => layer.resize(width, height))\n        this.redraw()\n    }\n\n    isInRect(event: MouseEvent | WheelEvent) {\n        if (this.layers.length < 1) return false\n        const firstLayer = this.layers[0] // all layers have same state and size\n        if (!firstLayer.isActive() && !firstLayer.canvas) return false\n        const rect = firstLayer.canvas.getBoundingClientRect()\n        const clientX = event.clientX, clientY = event.clientY\n        return clientX >= rect.left && clientX < rect.right && clientY >= rect.top && clientY < rect.bottom\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from './ScreenLayer'\n\nexport class LoadingScreen extends BaseScreen {\n\n    layer: ScaledLayer\n    assetIndex: number = 0\n\n    constructor() {\n        super()\n        this.layer = this.addLayer(new ScaledLayer())\n    }\n\n    show() {\n        this.layers.forEach((layer) => {\n            if (layer !== this.cursorLayer) layer.show()\n        })\n        this.setLoadingMessage('Loading...')\n    }\n\n    setLoadingMessage(text) {\n        this.layer.onRedraw = (context) => {\n            // clear the screen to black\n            context.fillStyle = 'black'\n            context.fillRect(0, 0, this.layer.fixedWidth, this.layer.fixedHeight)\n            // draw the loading title\n            context.font = '24px Arial'\n            context.fillStyle = 'white'\n            context.fillText('Loading Rock Raiders', 20, this.layer.fixedHeight - 50)\n            // hard-code the first loading message\n            context.font = '18px Arial'\n            context.fillStyle = 'white'\n            context.fillText(text, 20, this.layer.fixedHeight - 20)\n        }\n        this.redraw()\n    }\n\n    enableGraphicMode(totalResources: number) {\n        const imgBackground = ResourceManager.getImage(ResourceManager.cfg('Main', 'LoadScreen'))\n        const imgProgress = ResourceManager.getImage(ResourceManager.cfg('Main', 'ProgressBar'))\n        const imgLoading = ResourceManager.getDefaultFont().createTextImage(ResourceManager.cfg('Main', 'LoadingText'))\n        this.layer.onRedraw = (context => {\n            context.drawImage(imgBackground, 0, 0)\n            const loadingBarWidth = 353 * (this.assetIndex < totalResources ? Math.round(this.assetIndex / totalResources) : 1)\n            context.drawImage(imgProgress, 142, 450, loadingBarWidth, 9)\n            context.drawImage(imgLoading, Math.round(320 - imgLoading.width / 2), Math.round(456 - imgLoading.height / 2))\n        })\n        this.cursorLayer.show()\n        this.redraw()\n    }\n\n    increaseLoadingState() {\n        this.assetIndex++\n        this.redraw()\n    }\n\n}\n","export class MainMenuBaseItem {\n\n    x: number = 0\n    y: number = 0\n    width: number = 0\n    height: number = 0\n    zIndex: number = 100\n    scrollAffected = false\n    needsRedraw: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n    actionName: string = ''\n    targetIndex: number = 0\n\n    static compareZ(left: MainMenuBaseItem, right: MainMenuBaseItem) {\n        return left.zIndex === right.zIndex ? 0 : left.zIndex > right.zIndex ? -1 : 1\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const hover = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        if (this.hover !== hover) {\n            this.hover = hover\n            this.needsRedraw = true\n            this.onHoverChange()\n        }\n        if (!this.hover) this.pressed = false\n        return this.hover\n    }\n\n    onHoverChange() {\n    }\n\n    checkSetPressed() {\n        if (!this.hover) return\n        if (!this.pressed) this.needsRedraw = true\n        this.pressed = true\n    }\n\n    setReleased() {\n        if (this.pressed) this.needsRedraw = true\n        this.pressed = false\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        this.needsRedraw = false\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\n\nexport class MainMenuLabelButton extends MainMenuBaseItem {\n\n    labelImgLo = null\n    labelImgHi = null\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.labelImgLo = layer.loFont.createTextImage(cfg.label)\n        this.labelImgHi = layer.hiFont.createTextImage(cfg.label)\n        this.width = Math.max(this.labelImgLo.width, this.labelImgHi.width)\n        this.height = Math.max(this.labelImgLo.height, this.labelImgHi.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const img = this.hover && !this.pressed ? this.labelImgHi : this.labelImgLo\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\n\nexport class MainMenuIconButton extends MainMenuBaseItem {\n\n    imgNormal = null\n    imgHover = null\n    imgPressed = null\n    tooltip = ''\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.imgNormal = ResourceManager.getImage(cfg.imgNormal)\n        this.imgHover = ResourceManager.getImage(cfg.imgHover)\n        this.imgPressed = ResourceManager.getImage(cfg.imgPressed)\n        this.tooltip = (cfg.tooltip || '').replace(/_/g, ' ')\n        this.width = Math.max(this.imgNormal.width, this.imgHover.width, this.imgPressed.width)\n        this.height = Math.max(this.imgNormal.height, this.imgHover.height, this.imgPressed.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgNormal\n        if (this.hover) img = this.imgHover\n        if (this.pressed) img = this.imgPressed\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuLabelButton } from './MainMenuLabelButton'\nimport { ScaledLayer } from '../screen/ScreenLayer'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuIconButton } from './MainMenuIconButton'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { clearIntervalSafe } from '../core/Util'\nimport { NATIVE_FRAMERATE } from '../main'\n\nexport class MainMenuLayer extends ScaledLayer {\n\n    screen: MainMenuScreen\n    cfg: MenuEntryCfg\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    items: MainMenuBaseItem[] = []\n    scrollY: number = 0\n    scrollSpeedY: number = 0\n    scrollInterval = null\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg) {\n        super()\n        this.screen = screen\n        this.cfg = menuCfg\n        this.loFont = menuCfg.loFont ? ResourceManager.getBitmapFont(menuCfg.loFont) : null\n        this.hiFont = menuCfg.hiFont ? ResourceManager.getBitmapFont(menuCfg.hiFont) : null\n        this.menuImage = menuCfg.menuImage ? ResourceManager.getImage(menuCfg.menuImage) : null\n        this.titleImage = this.loFont.createTextImage(menuCfg.fullName)\n\n        menuCfg.itemsLabel.forEach((item) => {\n            if (item.label) {\n                this.items.push(new MainMenuLabelButton(this, item))\n            } else {\n                this.items.push(new MainMenuIconButton(this, item))\n            }\n        })\n\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n\n        this.onRedraw = (context) => {\n            context.drawImage(this.menuImage, 0, -this.scrollY)\n            if (menuCfg.displayTitle) context.drawImage(this.titleImage, (this.fixedWidth - this.titleImage.width) / 2, this.cfg.position[1])\n            this.items.forEach((item, index) => (this.items[this.items.length - 1 - index]).draw(context))\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.scrollY = 0\n        this.scrollSpeedY = 0\n    }\n\n    show() {\n        super.show()\n        const that = this\n        this.scrollInterval = setInterval(() => {\n            if (that.scrollSpeedY === 0) return\n            that.setScrollY(that.scrollSpeedY)\n        }, 1000 / NATIVE_FRAMERATE)\n    }\n\n    hide() {\n        this.scrollInterval = clearIntervalSafe(this.scrollInterval)\n        super.hide()\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (eventEnum === POINTER_EVENT.MOVE) {\n            const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n            let hovered = false\n            this.items.forEach((item) => {\n                if (!hovered) {\n                    const absY = sy + (item.scrollAffected ? this.scrollY : 0)\n                    hovered = item.checkHover(sx, absY)\n                } else {\n                    if (item.hover) item.needsRedraw = true\n                    item.hover = false\n                    item.setReleased()\n                }\n            })\n            if (this.cfg.canScroll) {\n                const scrollAreaHeight = 100\n                if (sy < scrollAreaHeight) {\n                    this.setScrollSpeedY(-(scrollAreaHeight - sy))\n                } else if (sy > this.fixedHeight - scrollAreaHeight) {\n                    this.setScrollSpeedY(sy - (this.fixedHeight - scrollAreaHeight))\n                } else {\n                    this.setScrollSpeedY(0)\n                }\n            }\n        } else if (eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => item.checkSetPressed())\n            }\n        } else if (eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => {\n                    if (item.pressed) {\n                        item.setReleased()\n                        if (item.actionName.toLowerCase() === 'next') {\n                            this.screen.showMainMenu(item.targetIndex)\n                        } else if (item.actionName.toLowerCase() === 'selectlevel') {\n                            this.screen.selectLevel((item as MainMenuLevelButton).levelKey)\n                        } else if (item.actionName) {\n                            console.warn('not implemented: ' + item.actionName + ' - ' + item.targetIndex)\n                        }\n                    }\n                })\n            }\n        }\n        if (this.needsRedraw()) this.redraw()\n        return false\n    }\n\n    private setScrollSpeedY(deltaY: number) {\n        this.scrollSpeedY = Math.sign(deltaY) * Math.pow(Math.round(deltaY / 20), 2)\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        if (!this.cfg.canScroll) return false\n        this.setScrollY(event.deltaY)\n        return true\n    }\n\n    private setScrollY(deltaY: number) {\n        const scrollYBefore = this.scrollY\n        this.scrollY = Math.min(Math.max(this.scrollY + deltaY, 0), this.menuImage.height - this.fixedHeight)\n        if (scrollYBefore !== this.scrollY) this.redraw()\n    }\n\n    needsRedraw(): boolean {\n        return this.items.some((item) => item.needsRedraw)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class MainMenuLevelButton extends MainMenuBaseItem {\n\n    layer: MainMenuLayer\n    imgActive = null\n    imgInactive = null\n    imgCross = null\n    unlocked: boolean = false\n    levelKey: string = ''\n\n    constructor(layer: MainMenuLayer, levelKey: string, levelCfg: LevelEntryCfg) {\n        super()\n        this.layer = layer\n        this.actionName = 'selectlevel'\n        this.levelKey = levelKey\n        this.x = levelCfg.frontEndX\n        this.y = levelCfg.frontEndY\n        this.zIndex = 10\n        this.scrollAffected = true\n        const [imgActive, imgInactive, imgCross] = levelCfg.menuBMP\n        this.imgActive = ResourceManager.getImage(imgActive)\n        this.imgInactive = ResourceManager.getImage(imgInactive)\n        this.imgCross = ResourceManager.getImage(imgCross)\n        this.width = Math.max(this.imgActive.width, this.imgInactive.width, this.imgCross.width)\n        this.height = Math.max(this.imgActive.height, this.imgInactive.height, this.imgCross.height)\n        this.unlocked = levelCfg.frontEndOpen\n        this.unlocked = true // TODO don't unlock everything by default\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgCross\n        if (this.unlocked) img = this.hover ? this.imgActive : this.imgInactive\n        context.drawImage(img, this.x, this.y - this.layer.scrollY)\n    }\n\n}\n","import { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { createContext } from '../core/ImageHelper'\n\nexport class MainMenuPanel extends MainMenuBaseItem {\n\n    context: CanvasRenderingContext2D\n\n    constructor(imgData: ImageData, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.zIndex = 50\n        this.context = createContext(imgData.width, imgData.height)\n        this.context.putImageData(imgData, 0, 0)\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const inRect = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        const hover = inRect && this.context.getImageData(sx, sy, 1, 1).data[3] > 0\n        if (this.hover !== hover) this.needsRedraw = true\n        this.hover = hover\n        return this.hover\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        context.drawImage(this.context.canvas, this.x, this.y, this.width, this.height)\n    }\n\n}\n","import { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { BitmapFont } from '../core/BitmapFont'\n\nexport class MainMenuWindow extends MainMenuBaseItem {\n\n    font: BitmapFont\n    imgFirstLine = null\n    imgSecondLine = null\n\n    constructor(font: BitmapFont, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.font = font\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    setFirstLine(text: string) {\n        this.imgFirstLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    setSecondLine(text: string) {\n        this.imgSecondLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const cx = this.x + this.width / 2, cy = this.y + this.height / 2\n        if (this.imgFirstLine) context.drawImage(this.imgFirstLine, cx - this.imgFirstLine.width / 2, cy - this.imgFirstLine.height)\n        if (this.imgSecondLine) context.drawImage(this.imgSecondLine, cx - this.imgSecondLine.width / 2, cy)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { LevelEntryCfg, LevelsCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { iGet } from '../core/Util'\nimport { MainMenuPanel } from './MainMenuPanel'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuWindow } from './MainMenuWindow'\n\nexport class LevelSelectLayer extends MainMenuLayer {\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg, modeLevel: boolean) {\n        super(screen, menuCfg)\n        const levelsCfg: LevelsCfg = ResourceManager.getResource('Levels')\n        const levelTextCfg = new LevelTextCfg()\n        this.items.push(new MainMenuPanel(levelTextCfg.panelImgData, levelTextCfg.panelPos))\n        const levelTextWindow = new MainMenuWindow(ResourceManager.getDefaultFont(), levelTextCfg.window)\n        levelTextWindow.setFirstLine(modeLevel ? levelTextCfg.level : levelTextCfg.tutorial)\n        this.items.push(levelTextWindow)\n        Object.keys(levelsCfg.levelsByName).forEach((levelKey) => {\n            const level: LevelEntryCfg = levelsCfg.levelsByName[levelKey]\n            const levelButton = new MainMenuLevelButton(this, levelKey, level)\n            levelButton.onHoverChange = () => levelTextWindow.setSecondLine(levelButton.hover ? level.fullName : '')\n            this.items.push(levelButton)\n        })\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n    }\n\n}\n\nclass LevelTextCfg {\n\n    window = {x: 0, y: 0, w: 0, h: 0}\n    panelImgData: ImageData\n    panelPos = {x: 0, y: 0, w: 0, h: 0}\n    level: string = ''\n    tutorial: string = ''\n\n    constructor() {\n        const cfg = ResourceManager.cfg('Menu', 'LevelText')\n        const winCfg = iGet(cfg, 'Window')\n        this.window = {x: winCfg[0], y: winCfg[1], w: winCfg[2], h: winCfg[3]}\n        const panelCfg = iGet(cfg, 'Panel')\n        this.panelImgData = ResourceManager.getImageData(panelCfg[0])\n        this.panelPos = {x: panelCfg[1], y: panelCfg[2], w: panelCfg[3], h: panelCfg[4]}\n        this.level = iGet(cfg, 'Level').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n        this.tutorial = iGet(cfg, 'Tutorial').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MenuCfg } from '../cfg/MenuCfg'\nimport { MainMenuLayer } from '../menu/MainMenuLayer'\nimport { LevelSelectLayer } from '../menu/LevelSelectLayer'\n\nexport class MainMenuScreen extends BaseScreen {\n\n    onLevelSelected: (levelName: string) => void = null\n    menus: MainMenuLayer[] = []\n\n    constructor() {\n        super()\n        const mainMenuFullCfg = ResourceManager.getResource('MainMenuFull') as MenuCfg\n        mainMenuFullCfg.menus.forEach((menuCfg) => {\n            let layer\n            if (menuCfg.title === 'Levels') {\n                layer = new LevelSelectLayer(this, menuCfg, true)\n            } else if (menuCfg.title === 'Tutorials') {\n                layer = new LevelSelectLayer(this, menuCfg, false)\n            } else {\n                layer = new MainMenuLayer(this, menuCfg)\n            }\n            this.menus.push(layer)\n            this.addLayer(layer)\n        })\n    }\n\n    showMainMenu(index: number = 0) {\n        this.hide()\n        this.menus[index].show()\n        this.cursorLayer.show()\n    }\n\n    showLevelSelection() {\n        this.showMainMenu(1)\n    }\n\n    selectLevel(levelName) {\n        this.hide()\n        this.onLevelSelected(levelName)\n    }\n\n}\n","export class SurfaceType {\n\n    name: string // humand readable, maybe used as label lateron\n    shaping: boolean = false\n    matIndex: string = '00'\n    floor: boolean = false\n    selectable: boolean = false\n    drillable: boolean = false\n    drillableHard: boolean = false\n    explodable: boolean = false\n    reinforcable: boolean = false\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options)\n    }\n\n    static readonly GROUND = new SurfaceType({name: 'ground', floor: true, selectable: true})\n    static readonly SOLID_ROCK = new SurfaceType({name: 'solid rock', shaping: true, matIndex: '5'})\n    static readonly HARD_ROCK = new SurfaceType({\n        name: 'hard rock',\n        shaping: true,\n        matIndex: '4',\n        selectable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly LOOSE_ROCK = new SurfaceType({\n        name: 'loose rock',\n        shaping: true,\n        matIndex: '3',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly DIRT = new SurfaceType({\n        name: 'dirt',\n        shaping: true,\n        matIndex: '1',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly SLUG_HOLE = new SurfaceType({name: 'slug hole', floor: true, matIndex: '30'})\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'})\n    static readonly ORE_SEAM = new SurfaceType({\n        name: 'ore seam',\n        matIndex: '40',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45'})\n    static readonly CRYSTAL_SEAM = new SurfaceType({\n        name: 'energy crystal seam',\n        matIndex: '20',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly RECHARGE_SEAM = new SurfaceType({name: 'recharge seam', matIndex: '67'})\n    static readonly POWER_PATH = new SurfaceType({\n        name: 'power path all',\n        floor: true,\n        matIndex: '60',\n        selectable: true,\n    })\n    static readonly POWER_PATH_SITE = new SurfaceType({\n        name: 'power path site',\n        floor: true,\n        matIndex: '61',\n        selectable: true,\n    })\n    static readonly POWER_PATH_BUILDING = new SurfaceType({name: 'power path', floor: true, matIndex: '76'})\n    static readonly RUBBLE1 = new SurfaceType({\n        name: 'rubble 1',\n        floor: true,\n        matIndex: '13',\n        selectable: true,\n    })\n    static readonly RUBBLE2 = new SurfaceType({\n        name: 'rubble 2',\n        floor: true,\n        matIndex: '12',\n        selectable: true,\n    })\n    static readonly RUBBLE3 = new SurfaceType({\n        name: 'rubble 3',\n        floor: true,\n        matIndex: '11',\n        selectable: true,\n    })\n    static readonly RUBBLE4 = new SurfaceType({\n        name: 'rubble 4',\n        floor: true,\n        matIndex: '10',\n        selectable: true,\n    })\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING\n            case 1:\n                return SurfaceType.SOLID_ROCK\n            case 2:\n                return SurfaceType.HARD_ROCK\n            case 3:\n                return SurfaceType.LOOSE_ROCK\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT\n            case 6:\n                return SurfaceType.LAVA\n            case 8:\n                return SurfaceType.ORE_SEAM\n            case 9:\n                return SurfaceType.WATER\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM\n            case 11:\n                return SurfaceType.RECHARGE_SEAM\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE\n            case 100:\n                return SurfaceType.RUBBLE4\n            case 101:\n                return SurfaceType.RUBBLE3\n            case 102:\n                return SurfaceType.RUBBLE2\n            case 103:\n                return SurfaceType.RUBBLE1\n            default:\n                console.error('Unexpected surface type num: ' + typeNum)\n                return SurfaceType.SOLID_ROCK\n        }\n    }\n}\n","import { BufferGeometry, Vector2, Vector3 } from 'three'\nimport { WALL_TYPE } from './Surface'\nimport { BufferAttribute } from 'three/src/core/BufferAttribute'\n\nexport class SurfaceGeometry {\n\n    public static create(wallType: WALL_TYPE,\n                         topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3,\n                         topLeftHeight: number, topRightHeight: number, bottomRightHeight: number, bottomLeftHeight: number,\n    ) {\n        let uvOffset = 0\n\n        // not-rotated\n        // 1 ?\n        // ? 0\n        if (topLeftVertex.y && !bottomRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topRightVertex.y)))) {\n            uvOffset = 0\n        }\n\n        // 90 clock-wise\n        // ? 1\n        // 0 ?\n        if (topRightVertex.y && !bottomLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomRightVertex.y)))) {\n            uvOffset = 3\n        }\n\n        // 180 clock-wise\n        // 0 ?\n        // ? 1\n        if (bottomRightVertex.y && !topLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomLeftVertex.y)))) {\n            uvOffset = 2\n        }\n\n        // 270 clock-wise\n        // ? 0\n        // 1 ?\n        if (bottomLeftVertex.y && !topRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topLeftVertex.y)))) {\n            uvOffset = 1\n        }\n\n        if (wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) {\n            if (topLeftVertex.y && bottomRightVertex.y) {\n                uvOffset = 0\n            }\n            if (topRightVertex.y && bottomLeftVertex.y) {\n                uvOffset = 3\n            }\n        }\n\n        /*\n        //\t\t0---1                1         0---1\n        //\t\t|   |  becomes      /|   and   |  /\n        //\t\t|   |             /  |         |/\n        //\t\t3---2            3---2         3\n        //\n        //\t\tOR\n        //\n        //\t\t0---1            0             0---1\n        //\t\t|   |  becomes   |\\    \t and    \\  |\n        //\t\t|   |            |  \\             \\|\n        //\t\t3---2            3---2             2\n        //\n        //\t\tTriangles 0-1-3 and 0-3-2\n        //\t\tQuad 0-1-3-2\n        */\n\n        const uv = [\n            new Vector2(0, 1),\n            new Vector2(1, 1),\n            new Vector2(1, 0),\n            new Vector2(0, 0),\n        ]\n\n        const bufferVertices = []\n        const bufferNormals = []\n\n        function addFaceAndNormals(a, b, c) {\n            bufferVertices.push(a, b, c)\n            const normal = new Vector3().subVectors(c, b)\n            normal.cross(new Vector3().subVectors(a, b))\n            normal.normalize()\n            bufferNormals.push(normal, normal, normal)\n        }\n\n        const uvIndexes = []\n        if (topRightVertex.y !== bottomLeftVertex.y ||\n            ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) && !(topRightVertex.y && bottomLeftVertex.y))) {\n            uvIndexes.push(1, 3, 2)\n            uvIndexes.push(1, 0, 3)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topRightVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topRightVertex, topLeftVertex, bottomLeftVertex)\n        } else {\n            uvIndexes.push(0, 3, 2)\n            uvIndexes.push(0, 2, 1)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topLeftVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topLeftVertex, bottomRightVertex, topRightVertex)\n        }\n\n        const bufferVertexUvs = uvIndexes.map(i => uv[(i + uvOffset) % 4])\n\n        const bufferGeometry = new BufferGeometry()\n        bufferGeometry.setAttribute('position', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferVertices))\n        bufferGeometry.setAttribute('normal', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferNormals))\n        bufferGeometry.setAttribute('uv', new BufferAttribute(new Float32Array(12), 2).copyVector2sArray(bufferVertexUvs))\n        return bufferGeometry\n    }\n}\n","import { WorldEvent } from './WorldEvents'\nimport { Vector3 } from 'three'\nimport { EventKey } from './EventKeyEnum'\n\nexport class WorldLocationEvent extends WorldEvent {\n\n    location: Vector3\n\n    constructor(entityKey: EventKey, location: Vector3) {\n        super(entityKey)\n        this.location = location\n    }\n\n}\n\nexport class GenericDeathEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_DEATH, location)\n    }\n\n}\n\nexport class GenericMonsterEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_MONSTER, location)\n    }\n\n}\n\nexport class CrystalFoundEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_CRYSTAL_FOUND, location)\n    }\n\n}\n\nexport class UnderAttackEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_UNDER_ATTACK, location)\n    }\n\n}\n\nexport class LandslideEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_LANDSLIDE, location)\n    }\n\n}\n\nexport class PowerDrainEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_POWER_DRAIN, location)\n    }\n\n}\n\nexport class SlugEmergeEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_SLUG_EMERGE, location)\n    }\n\n}\n\nexport class RaiderDiscoveredEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_RAIDER_DISCOVERED, location)\n    }\n\n}\n","// javascript-astar 0.4.1 (converted to typescript by Scarabol)\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n\nfunction pathTo(node) {\n    let curr = node\n    const path = []\n    while (curr.parent) {\n        path.unshift(curr)\n        curr = curr.parent\n    }\n    return path\n}\n\nfunction getHeap() {\n    return new BinaryHeap(function (node) {\n        return node.f\n    })\n}\n\nexport const astar = {\n\n    /**\n     * Perform an A* Search on a graph given a start and end node.\n     * @param {Graph} graph\n     * @param {GridNode} start\n     * @param {GridNode} end\n     * @param {Object} [options]\n     * @param {boolean} [options.closest] Specifies whether to return the\n     path to the closest node if the target is unreachable.\n     * @param {Function} [options.heuristic] Heuristic function (see\n     *          astar.heuristics).\n     */\n    search(graph: Graph, start: GridNode, end: GridNode, options = null): GridNode[] {\n        graph.cleanDirty()\n        options = options || {}\n        const heuristic = options.heuristic || astar.heuristics.manhattan\n        const closest = options.closest || false\n\n        const openHeap = getHeap()\n        let closestNode = start  // set the start node to be the closest if required\n\n        start.h = heuristic(start, end)\n        graph.markDirty(start)\n\n        openHeap.push(start)\n\n        while (openHeap.size() > 0) {\n\n            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n            const currentNode = openHeap.pop()\n\n            // End case -- result has been found, return the traced path.\n            if (currentNode === end) {\n                return pathTo(currentNode)\n            }\n\n            // Normal case -- move currentNode from open to closed, process each of its neighbors.\n            currentNode.closed = true\n\n            // Find all neighbors for the current node.\n            const neighbors = graph.neighbors(currentNode)\n\n            let i = 0\n            const il = neighbors.length\n            for (; i < il; ++i) {\n                const neighbor = neighbors[i]\n\n                if (neighbor.closed || neighbor.isWall()) {\n                    // Not a valid node to process, skip to next neighbor.\n                    continue\n                }\n\n                // The g score is the shortest distance from start to current node.\n                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n                const gScore = currentNode.g + neighbor.getCost(currentNode)\n                const beenVisited = neighbor.visited\n\n                if (!beenVisited || gScore < neighbor.g) {\n\n                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n                    neighbor.visited = true\n                    neighbor.parent = currentNode\n                    neighbor.h = neighbor.h || heuristic(neighbor, end)\n                    neighbor.g = gScore\n                    neighbor.f = neighbor.g + neighbor.h\n                    graph.markDirty(neighbor)\n                    if (closest) {\n                        // If the neighbour is closer than the current closestNode or if it's equally close but has\n                        // a cheaper path than the current closest node then it becomes the closest node\n                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n                            closestNode = neighbor\n                        }\n                    }\n\n                    if (!beenVisited) {\n                        // Pushing to heap will put it in proper place based on the 'f' value.\n                        openHeap.push(neighbor)\n                    } else {\n                        // Already seen the node, but since it has been rescored we need to reorder it in the heap\n                        openHeap.rescoreElement(neighbor)\n                    }\n                }\n            }\n        }\n\n        if (closest) {\n            return pathTo(closestNode)\n        }\n\n        // No result was found - empty array signifies failure to find path.\n        return []\n    },\n\n    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n    heuristics: {\n        manhattan(pos0, pos1) {\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return d1 + d2\n        },\n\n        diagonal(pos0, pos1) {\n            const D = 1\n            const D2 = Math.sqrt(2)\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2))\n        },\n    },\n\n    cleanNode(node) {\n        node.f = 0\n        node.g = 0\n        node.h = 0\n        node.visited = false\n        node.closed = false\n        node.parent = null\n    },\n}\n\nexport class Graph {\n\n    readonly nodes: GridNode[] = []\n    readonly diagonal: boolean\n    readonly grid: GridNode[][] = []\n    dirtyNodes: GridNode[] = []\n\n    /**\n     * A graph memory structure\n     * @param {Array} gridIn 2D array of input weights\n     * @param {Object} [options]\n     * @param {boolean} [options.diagonal] Specifies whether diagonal moves are allowed\n     */\n    constructor(gridIn: number[][], options = null) {\n        options = options || {}\n        this.diagonal = !!options.diagonal\n        for (let x = 0; x < gridIn.length; x++) {\n            this.grid[x] = []\n\n            let y = 0\n            const row = gridIn[x]\n            for (; y < row.length; y++) {\n                const node = new GridNode(x, y, row[y])\n                this.grid[x][y] = node\n                this.nodes.push(node)\n            }\n        }\n        this.init()\n    }\n\n    init() {\n        this.dirtyNodes = []\n        for (let i = 0; i < this.nodes.length; i++) {\n            astar.cleanNode(this.nodes[i])\n        }\n    }\n\n    cleanDirty() {\n        for (let i = 0; i < this.dirtyNodes.length; i++) {\n            astar.cleanNode(this.dirtyNodes[i])\n        }\n        this.dirtyNodes = []\n    }\n\n    markDirty(node) {\n        this.dirtyNodes.push(node)\n    }\n\n    neighbors(node: GridNode) {\n        const ret: GridNode[] = []\n        const x = node.x\n        const y = node.y\n        const grid = this.grid\n\n        // West\n        if (grid[x - 1] && grid[x - 1][y]) {\n            ret.push(grid[x - 1][y])\n        }\n\n        // East\n        if (grid[x + 1] && grid[x + 1][y]) {\n            ret.push(grid[x + 1][y])\n        }\n\n        // South\n        if (grid[x] && grid[x][y - 1]) {\n            ret.push(grid[x][y - 1])\n        }\n\n        // North\n        if (grid[x] && grid[x][y + 1]) {\n            ret.push(grid[x][y + 1])\n        }\n\n        if (this.diagonal) {\n            // Southwest\n            if (grid[x - 1] && grid[x - 1][y - 1]) {\n                ret.push(grid[x - 1][y - 1])\n            }\n\n            // Southeast\n            if (grid[x + 1] && grid[x + 1][y - 1]) {\n                ret.push(grid[x + 1][y - 1])\n            }\n\n            // Northwest\n            if (grid[x - 1] && grid[x - 1][y + 1]) {\n                ret.push(grid[x - 1][y + 1])\n            }\n\n            // Northeast\n            if (grid[x + 1] && grid[x + 1][y + 1]) {\n                ret.push(grid[x + 1][y + 1])\n            }\n        }\n\n        return ret\n    }\n\n    toString() {\n        const graphString = []\n        const nodes = this.grid\n        for (let x = 0; x < nodes.length; x++) {\n            const rowDebug = []\n            const row = nodes[x]\n            for (let y = 0; y < row.length; y++) {\n                rowDebug.push(row[y].weight)\n            }\n            graphString.push(rowDebug.join(' '))\n        }\n        return graphString.join('\\n')\n    }\n}\n\nclass GridNode {\n\n    x: number\n    y: number\n    weight: number\n    h: number\n    closed: boolean\n    visited: boolean\n    g: number\n    parent: GridNode\n    f: number\n\n    constructor(x, y, weight) {\n        this.x = x\n        this.y = y\n        this.weight = weight\n    }\n\n    toString() {\n        return '[' + this.x + ' ' + this.y + ']'\n    }\n\n    getCost(fromNeighbor: GridNode) {\n        // Take diagonal weight into consideration.\n        if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n            return this.weight * 1.41421\n        }\n        return this.weight\n    }\n\n    isWall() {\n        return this.weight === 0\n    }\n}\n\nclass BinaryHeap {\n\n    content = []\n    scoreFunction\n\n    constructor(scoreFunction) {\n        this.content = []\n        this.scoreFunction = scoreFunction\n    }\n\n    push(element) {\n        // Add the new element to the end of the array.\n        this.content.push(element)\n\n        // Allow it to sink down.\n        this.sinkDown(this.content.length - 1)\n    }\n\n    pop() {\n        // Store the first element so we can return it later.\n        const result = this.content[0]\n        // Get the element at the end of the array.\n        const end = this.content.pop()\n        // If there are any elements left, put the end element at the\n        // start, and let it bubble up.\n        if (this.content.length > 0) {\n            this.content[0] = end\n            this.bubbleUp(0)\n        }\n        return result\n    }\n\n    remove(node) {\n        const i = this.content.indexOf(node)\n\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        const end = this.content.pop()\n\n        if (i !== this.content.length - 1) {\n            this.content[i] = end\n\n            if (this.scoreFunction(end) < this.scoreFunction(node)) {\n                this.sinkDown(i)\n            } else {\n                this.bubbleUp(i)\n            }\n        }\n    }\n\n    size() {\n        return this.content.length\n    }\n\n    rescoreElement(node) {\n        this.sinkDown(this.content.indexOf(node))\n    }\n\n    sinkDown(n) {\n        // Fetch the element that has to be sunk.\n        const element = this.content[n]\n\n        // When at 0, an element can not sink any further.\n        while (n > 0) {\n\n            // Compute the parent element's index, and fetch it.\n            const parentN = ((n + 1) >> 1) - 1\n            const parent = this.content[parentN]\n            // Swap the elements if the parent is greater.\n            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n                this.content[parentN] = element\n                this.content[n] = parent\n                // Update 'n' to continue at the new position.\n                n = parentN\n            }\n            // Found a parent that is less, no need to sink any further.\n            else {\n                break\n            }\n        }\n    }\n\n    bubbleUp(n) {\n        // Look up the target element and its score.\n        const length = this.content.length\n        const element = this.content[n]\n        const elemScore = this.scoreFunction(element)\n\n        while (true) {\n            // Compute the indices of the child elements.\n            const child2N = (n + 1) << 1\n            const child1N = child2N - 1\n            // This is used to store the new position of the element, if any.\n            let swap = null\n            let child1Score\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                const child1 = this.content[child1N]\n                child1Score = this.scoreFunction(child1)\n\n                // If the score is less than our element's, we need to swap.\n                if (child1Score < elemScore) {\n                    swap = child1N\n                }\n            }\n\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                const child2 = this.content[child2N]\n                const child2Score = this.scoreFunction(child2)\n                if (child2Score < (swap === null ? elemScore : child1Score)) {\n                    swap = child2N\n                }\n            }\n\n            // If the element needs to be moved, swap it, and continue.\n            if (swap !== null) {\n                this.content[n] = this.content[swap]\n                this.content[swap] = element\n                n = swap\n            }\n            // Otherwise, we are done.\n            else {\n                break\n            }\n        }\n    }\n}\n","import { Surface } from './model/map/Surface'\nimport { Terrain } from './model/map/Terrain'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { WorldManager } from './WorldManager'\nimport { TILESIZE } from '../main'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { Graph } from './model/map/astar'\n\nexport class TerrainLoader {\n\n    static loadTerrain(levelConf: LevelEntryCfg, worldMgr: WorldManager): Terrain {\n        const tileSize = levelConf.blockSize\n        if (tileSize !== TILESIZE) console.error('Unexpected tile size in level configuration: ' + tileSize)\n        const terrain = new Terrain(worldMgr)\n\n        const themeName = levelConf.textureSet[1]\n        terrain.textureSet = ResourceManager.cfg('Textures', themeName)\n        // console.log(terrain.textureSet);\n\n        const terrainMap = ResourceManager.getMap(levelConf.terrainMap)\n        terrain.width = terrainMap.width\n        terrain.height = terrainMap.height\n        const pathMap = ResourceManager.getMap(levelConf.pathMap)?.level\n        const surfaceMap = ResourceManager.getMap(levelConf.surfaceMap)?.level\n        const predugMap = ResourceManager.getMap(levelConf.predugMap)?.level\n        const cryOreMap = ResourceManager.getMap(levelConf.cryOreMap)?.level\n        const fallinMap = ResourceManager.getMap(levelConf.fallinMap)?.level\n        const erodeMap = ResourceManager.getMap(levelConf.erodeMap)?.level\n\n        // maps parsed from WAD are row-wise saved, which means y (row) comes first and x (column) second\n        for (let r = 0; r < terrainMap.level.length; r++) {\n            for (let c = 0; c < (terrainMap.level)[r].length; c++) {\n                (terrain.surfaces)[c] = (terrain.surfaces)[c] || []\n                const surfaceTypeNum = (terrainMap.level)[r][c]\n                let surfaceType = SurfaceType.getByNum(surfaceTypeNum)\n                const predugLevel = predugMap[r][c]\n                if (predugLevel === PredugMap.CAVERN_EXPOSED) {\n                    if (surfaceType === SurfaceType.GROUND || surfaceType === SurfaceType.DIRT) {\n                        surfaceType = SurfaceType.GROUND\n                    } else if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) {\n                        console.warn('Unexpected cavern surface type: ' + surfaceType.name)\n                    }\n                } else if (predugLevel === PredugMap.SLUG_HOLE_EXPOSED || predugLevel === PredugMap.SLUG_HOLE_HIDDEN) {\n                    surfaceType = SurfaceType.SLUG_HOLE\n                } else if (predugLevel !== PredugMap.WALL && predugLevel !== PredugMap.CAVERN_HIDDEN) {\n                    console.warn('Unexpected predug level: ' + predugLevel)\n                }\n                // give the path map the highest priority, if it exists\n                const pathMapLevel = pathMap && surfaceType.floor ? pathMap[r][c] : PathMap.NONE\n                if (pathMapLevel === PathMap.RUBBLE) {\n                    surfaceType = SurfaceType.RUBBLE4\n                } else if (pathMapLevel === PathMap.POWER_PATH) {\n                    surfaceType = SurfaceType.POWER_PATH\n                } else if (pathMapLevel !== PathMap.NONE) {\n                    console.warn('Unexpected path map level: ' + pathMapLevel)\n                }\n\n                const surface = new Surface(terrain, surfaceType, c, r, surfaceMap[r][c])\n                if (cryOreMap) {\n                    const currentCryOre = cryOreMap[r][c]\n                    if (currentCryOre % 2 === 1) {\n                        surface.containedCrystals = (currentCryOre + 1) / 2\n                    } else {\n                        surface.containedOres = currentCryOre / 2\n                    }\n                }\n\n                (terrain.surfaces)[c].push(surface)\n            }\n        }\n\n        // exlpore predug surfaces\n        terrain.surfaces.forEach(c => c.forEach(s => {\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_EXPOSED || predugMap[s.y][s.x] === PredugMap.SLUG_HOLE_EXPOSED) { // map are rows (y) first, columns (x) second\n                for (let x = s.x - 1; x <= s.x + 1; x++) {\n                    for (let y = s.y - 1; y <= s.y + 1; y++) {\n                        terrain.getSurfaceOrNull(x, y).discovered = true\n                    }\n                }\n            }\n        }))\n\n        // create hidden caverns\n        terrain.surfaces.forEach(c => c.forEach(s => {\n            const surface = terrain.getSurfaceOrNull(s.x, s.y)\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_HIDDEN && !surface.discovered) {\n                surface.surfaceType = SurfaceType.GROUND\n            }\n        }))\n\n        terrain.graphWalk = new Graph(terrain.surfaces.map(c => c.map(s => s.getGraphWalkWeight())))\n\n        // crumble unsupported walls\n        terrain.surfaces.forEach((c) => c.forEach((s) => {\n            if (!s.isSupported()) s.collapse()\n        }))\n\n        terrain.updateSurfaceMeshes(true)\n\n        if (fallinMap) {\n            for (let x = 0; x < terrain.width; x++) {\n                for (let y = 0; y < terrain.height; y++) {\n                    terrain.getSurface(x, y).setFallinLevel(fallinMap[y][x]) // rows (y) before columns (x) used in maps\n                }\n            }\n        }\n\n        if (erodeMap) { // TODO implement lava erosion\n            console.warn('Lucky you! Lava erosion not yet implemented')\n        }\n\n        return terrain\n    }\n\n}\n\nenum PathMap {\n\n    NONE = 0,\n    RUBBLE = 1,\n    POWER_PATH = 2,\n\n}\n\nenum PredugMap {\n\n    WALL = 0,\n    CAVERN_EXPOSED = 1,\n    CAVERN_HIDDEN = 2,\n    SLUG_HOLE_EXPOSED = 3,\n    SLUG_HOLE_HIDDEN = 4,\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\n\nexport class TerrainPath {\n\n    target: PathTarget = null\n    locations: Vector2[] = []\n    lengthSq: number = 0\n\n    constructor(target: PathTarget, locations: Vector2[] | Vector2) {\n        this.target = target\n        this.locations = Array.isArray(locations) ? locations : [locations]\n        for (let c = 0; c < this.locations.length - 1; c++) {\n            const start = this.locations[c]\n            const end = this.locations[c + 1]\n            this.lengthSq += start.distanceToSquared(end)\n        }\n    }\n\n    addLocation(location: Vector2): TerrainPath {\n        this.locations.push(location)\n        if (this.locations.length > 1) {\n            this.lengthSq += this.locations[this.locations.length - 2].distanceToSquared(location)\n        }\n        return this\n    }\n\n    get targetPosition(): Vector2 {\n        return this.locations[this.locations.length - 1] || null\n    }\n\n    get firstLocation(): Vector2 {\n        return this.locations[0] || null\n    }\n\n}\n","import { Group, Vector2, Vector3 } from 'three'\nimport { Surface } from './Surface'\nimport { WorldManager } from '../../WorldManager'\nimport { SurfaceType } from './SurfaceType'\nimport { TILESIZE } from '../../../main'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityAddedEvent, EntityType } from '../../../event/WorldEvents'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { astar, Graph } from './astar'\nimport { TerrainPath } from './TerrainPath'\nimport { PathTarget } from '../PathTarget'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class Terrain {\n\n    worldMgr: WorldManager\n    textureSet: any = {}\n    width: number = 0\n    height: number = 0\n    surfaces: Surface[][] = []\n    floorGroup: Group = new Group()\n    roofGroup: Group = new Group()\n    graphWalk: Graph = null\n    cachedPaths = new Map<string, TerrainPath>()\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        this.floorGroup.scale.set(TILESIZE, TILESIZE, TILESIZE)\n        this.roofGroup.visible = false // keep roof hidden unless switched to other camera\n        EventBus.registerEventListener(EventKey.ENTITY_ADDED, (event: EntityAddedEvent) => {\n            if (event.type !== EntityType.BUILDING) return;\n            (event.entity as BuildingEntity).surfaces.forEach((bSurf) => {\n                for (let x = -1; x <= 1; x++) {\n                    for (let y = -1; y <= 1; y++) {\n                        this.getSurface(bSurf.x + x, bSurf.y + y).updateTexture()\n                    }\n                }\n            })\n        })\n    }\n\n    getSurfaceFromWorld(worldPosition: Vector3): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.z)\n    }\n\n    getSurfaceFromWorld2D(worldPosition: Vector2): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.y)\n    }\n\n    getSurfaceFromWorldXZ(worldX: number, worldZ: number): Surface | null {\n        return this.getSurface(worldX / TILESIZE, worldZ / TILESIZE)\n    }\n\n    getSurface(x, y): Surface {\n        x = Math.floor(x)\n        y = Math.floor(y)\n        return this.getSurfaceOrNull(x, y) || new Surface(this, SurfaceType.SOLID_ROCK, x, y, 0)\n    }\n\n    getSurfaceOrNull(x, y): Surface | null {\n        if (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n            return this.surfaces[x][y]\n        } else {\n            return null\n        }\n    }\n\n    updateSurfaceMeshes(force: boolean = false) {\n        this.surfaces.forEach((r) => r.forEach((s) => s.updateMesh(force)))\n        this.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n        this.resetGraphWalk()\n    }\n\n    resetGraphWalk() {\n        this.graphWalk.init()\n        this.cachedPaths.clear()\n        console.log('Cached paths cleared')\n    }\n\n    findPath(start: Vector2, target: PathTarget): TerrainPath {\n        const end = target.targetLocation\n        const startSurface = this.getSurfaceFromWorldXZ(start.x, start.y)\n        const endSurface = this.getSurfaceFromWorldXZ(end.x, end.y)\n        if (startSurface.x === endSurface.x && startSurface.y === endSurface.y) {\n            return new TerrainPath(target, end)\n        }\n        const cacheIdentifier = startSurface.x + '/' + startSurface.y + ' -> ' + endSurface.x + '/' + endSurface.y\n        const cachedPath = this.cachedPaths.get(cacheIdentifier)\n        if (cachedPath) {\n            return cachedPath.addLocation(end)\n        } else {\n            return this.searchPath(startSurface, endSurface, target, cacheIdentifier)\n        }\n    }\n\n    private searchPath(startSurface: Surface, endSurface: Surface, target: PathTarget, cacheIdentifier: string): TerrainPath {\n        const startNode = this.graphWalk.grid[startSurface.x][startSurface.y]\n        const endNode = this.graphWalk.grid[endSurface.x][endSurface.y]\n        const worldPath = astar.search(this.graphWalk, startNode, endNode).map(p => this.getSurface(p.x, p.y).getCenterWorld2D())\n        if (worldPath.length < 1) return null // no path found\n        // replace last surface center with actual target position\n        worldPath.pop()\n        worldPath.push(target.targetLocation)\n        this.cachedPaths.set(cacheIdentifier, new TerrainPath(target, worldPath.slice(0, -1))) // cache shallow copy to avoid interference\n        return new TerrainPath(target, worldPath)\n    }\n\n    findFallInOrigin(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isReinforcable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isReinforcable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isReinforcable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isReinforcable()) return [bottomSurface.x, bottomSurface.y]\n        const leftSurface2 = this.getSurface(x - 1, y)\n        if (leftSurface2.isDigable()) return [leftSurface2.x, leftSurface2.y]\n        const topSurface2 = this.getSurface(x, y - 1)\n        if (topSurface2.isDigable()) return [topSurface2.x, topSurface2.y]\n        const rightSurface2 = this.getSurface(x + 1, y)\n        if (rightSurface2.isDigable()) return [rightSurface2.x, rightSurface2.y]\n        const bottomSurface2 = this.getSurface(x, y + 1)\n        if (bottomSurface2.isDigable()) return [bottomSurface2.x, bottomSurface2.y]\n        return null\n    }\n\n    findFallInTarget(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isWalkable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isWalkable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isWalkable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isWalkable()) return [bottomSurface.x, bottomSurface.y]\n        return null\n    }\n\n    dispose() {\n        this.surfaces.forEach(c => c.forEach(s => s.dispose()))\n    }\n}\n","import { Vector3 } from 'three'\n\nexport class EntityStep {\n\n    vec: Vector3 = null\n    targetReached: boolean = false\n\n    constructor(dx: number, dy: number, dz: number) {\n        this.vec = new Vector3(dx, dy, dz)\n    }\n\n}\n","export enum MoveState {\n\n    MOVED,\n    TARGET_REACHED,\n    TARGET_UNREACHABLE,\n\n}\n","import { AnimEntity } from './anim/AnimEntity'\nimport { Vector2, Vector3 } from 'three'\nimport { AnimationEntityType } from './anim/AnimationEntityType'\nimport { MovableEntityStats } from '../../cfg/MovableEntityStats'\nimport { EntityStep } from './EntityStep'\nimport { MoveState } from './MoveState'\nimport { JOB_ACTION_RANGE } from '../../main'\nimport { TerrainPath } from './map/TerrainPath'\nimport { PathTarget } from './PathTarget'\nimport { AnimEntityActivity } from './activities/AnimEntityActivity'\n\nexport abstract class MovableEntity extends AnimEntity {\n\n    currentPath: TerrainPath = null\n\n    constructor(entityType: AnimationEntityType) {\n        super(entityType)\n    }\n\n    abstract get stats(): MovableEntityStats\n\n    getPosition(): Vector3 {\n        return new Vector3(this.group.position.x, this.group.position.y, this.group.position.z)\n    }\n\n    getPosition2D(): Vector2 {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    getSpeed(): number {\n        return this.stats.RouteSpeed[this.level] * (this.animation?.transcoef || 1) * (this.isOnPath() ? this.stats.PathCoef : 1)\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        if (!this.currentPath || !target.some((t) => t.targetLocation.equals(this.currentPath.target.targetLocation))) {\n            const paths = target.map((t) => this.findPathToTarget(t))\n                .sort((l, r) => l.lengthSq - r.lengthSq)\n            this.currentPath = paths.length > 0 ? paths[0] : null\n            if (!this.currentPath) return MoveState.TARGET_UNREACHABLE\n        }\n        const nextLocation = this.currentPath.firstLocation\n        this.group.lookAt(new Vector3(nextLocation.x, this.group.position.y, nextLocation.y))\n        const step = this.determineStep()\n        if (step.targetReached || this.currentPath.target.isInArea(this.getPosition2D())) {\n            return MoveState.TARGET_REACHED\n        } else {\n            this.group.position.add(step.vec)\n            this.changeActivity(this.getRouteActivity()) // only change when actually moving\n            return MoveState.MOVED\n        }\n    }\n\n    abstract getRouteActivity(): AnimEntityActivity\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return new TerrainPath(target, target.targetLocation)\n    }\n\n    determineStep(): EntityStep {\n        const step = this.getEntityStep(this.currentPath.firstLocation)\n        const entitySpeed = this.getSpeed() // TODO use average speed between current and target position\n        const stepLengthSq = step.vec.lengthSq()\n        if (stepLengthSq > entitySpeed * entitySpeed && stepLengthSq > JOB_ACTION_RANGE * JOB_ACTION_RANGE) {\n            step.vec.setLength(entitySpeed)\n        } else if (this.currentPath.locations.length > 1) {\n            this.currentPath.locations.shift()\n            return this.determineStep()\n        } else {\n            step.targetReached = true\n        }\n        return step\n    }\n\n    getEntityStep(target: Vector2): EntityStep {\n        return new EntityStep(target.x - this.group.position.x, this.determinePosY(target.x, target.y) - this.determinePosY(this.group.position.x, this.group.position.z), target.y - this.group.position.z)\n    }\n\n    determinePosY(x: number, z: number) {\n        return this.worldMgr.getFloorHeight(x, z)\n    }\n\n    isOnRubble() {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).hasRubble()\n    }\n\n    isOnPath(): boolean {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).isPath()\n    }\n\n}\n","import { MovableEntity } from './MovableEntity'\nimport { Selectable, SelectionType } from '../../game/model/Selectable'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Job } from '../../game/model/job/Job'\nimport { Vector3 } from 'three'\nimport { NATIVE_FRAMERATE } from '../../main'\nimport { clearIntervalSafe } from '../../core/Util'\nimport { Carryable } from './collect/Carryable'\nimport { SelectionEvent } from '../../event/LocalEvents'\nimport { RaiderSkill } from './RaiderSkill'\nimport { RaiderTool } from './RaiderTool'\nimport { PathTarget } from './PathTarget'\n\nexport abstract class FulfillerEntity extends MovableEntity implements Selectable {\n\n    selectionType: SelectionType\n    selected: boolean\n    workInterval = null\n    job: Job = null\n    followUpJob: Job = null\n    carries: Carryable = null\n    jobWorkplaces: PathTarget[] = []\n\n    protected constructor(selectionType: SelectionType, aeFilename: string) {\n        super(ResourceManager.getAnimationEntityType(aeFilename))\n        this.selectionType = selectionType\n        this.group.userData = {'selectable': this}\n        this.workInterval = setInterval(this.work.bind(this), 1000 / NATIVE_FRAMERATE) // TODO do not use interval, make work trigger itself (with timeout/interval) until work is done\n    }\n\n    resetWorkInterval() {\n        this.workInterval = clearIntervalSafe(this.workInterval)\n    }\n\n    abstract work()\n\n    dropItem() {\n        if (!this.carries) return\n        this.carryJoint?.remove(this.carries.group)\n        this.carries.group.position.copy(this.group.position)\n        this.carryJoint?.getWorldPosition(this.carries.group.position)\n        this.carries.group.position.y = this.worldMgr.getFloorHeight(this.carries.group.position.x, this.carries.group.position.z)\n        this.carries = null\n    }\n\n    pickupItem(item: Carryable) {\n        this.carries = item\n        if (this.carryJoint) this.carryJoint.add(this.carries.group)\n        this.carries.group.position.set(0, 0, 0)\n    }\n\n    setJob(job: Job, followUpJob: Job = null) {\n        if (this.job !== job) this.stopJob()\n        this.job = job\n        if (this.job) this.job.assign(this)\n        this.followUpJob = followUpJob\n        if (this.followUpJob) this.followUpJob.assign(this)\n        this.jobWorkplaces = this.job.getWorkplaces()\n    }\n\n    stopJob() {\n        this.dropItem()\n        if (!this.job) return\n        this.job.unassign(this)\n        if (this.followUpJob) this.followUpJob.unassign(this)\n        this.job = null\n        this.followUpJob = null\n        this.jobWorkplaces = []\n        this.changeActivity()\n    }\n\n    abstract hasTool(tool: RaiderTool)\n\n    abstract hasSkill(skill: RaiderSkill)\n\n    getSelectionType(): SelectionType {\n        return this.selectionType\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    abstract select(): SelectionEvent;\n\n    abstract getSelectionCenter(): Vector3;\n\n}\n","export class RaiderTool {\n\n    static DRILL = new RaiderTool('drill')\n    static HAMMER = new RaiderTool('hammer')\n    static SHOVEL = new RaiderTool('shovel')\n    static SPANNER = new RaiderTool('spanner')\n    static FREEZERGUN = new RaiderTool('freezergun')\n    static LASER = new RaiderTool('laser')\n    static PUSHERGUN = new RaiderTool('pushergun')\n    static BIRDSCARER = new RaiderTool('birdscarer')\n\n    name: string\n\n    constructor(name: string) {\n        this.name = name\n    }\n\n}\n","import { SelectionType } from '../../game/model/Selectable'\nimport { EventBus } from '../../event/EventBus'\nimport { RaiderSelected, SelectionEvent } from '../../event/LocalEvents'\nimport { FulfillerEntity } from './FulfillerEntity'\nimport { GameState } from '../../game/model/GameState'\nimport { MathUtils, Vector2, Vector3 } from 'three'\nimport { EntityAddedEvent, EntityType, OreFoundEvent, RaiderTrained } from '../../event/WorldEvents'\nimport { CrystalFoundEvent, RaiderDiscoveredEvent } from '../../event/WorldLocationEvent'\nimport { BaseActivity } from './activities/BaseActivity'\nimport { RaiderActivity } from './activities/RaiderActivity'\nimport { DynamiteJob } from '../../game/model/job/surface/DynamiteJob'\nimport { DrillJob } from '../../game/model/job/surface/DrillJob'\nimport { ClearRubbleJob } from '../../game/model/job/surface/ClearRubbleJob'\nimport { SurfaceType } from './map/SurfaceType'\nimport { getRandom, getRandomInclusive } from '../../core/Util'\nimport { Crystal } from './collect/Crystal'\nimport { Ore } from './collect/Ore'\nimport { CollectJob } from '../../game/model/job/CollectJob'\nimport { TrainJob } from '../../game/model/job/TrainJob'\nimport { GetToolJob } from '../../game/model/job/GetToolJob'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { RaiderTool } from './RaiderTool'\nimport { RaiderSkill } from './RaiderSkill'\nimport { MoveState } from './MoveState'\nimport { JobType } from '../../game/model/job/JobType'\nimport { TerrainPath } from './map/TerrainPath'\nimport { PathTarget } from './PathTarget'\nimport { CollectPathTarget } from './CollectionTarget'\nimport degToRad = MathUtils.degToRad\n\nexport class Raider extends FulfillerEntity {\n\n    tools: RaiderTool[] = []\n    skills: RaiderSkill[] = []\n    slipped: boolean = false\n\n    constructor() {\n        super(SelectionType.PILOT, 'mini-figures/pilot/pilot.ae')\n        this.tools = [RaiderTool.DRILL]\n        this.skills = []\n        this.pickSphereRadius = this.stats.PickSphere / 2\n    }\n\n    get stats() {\n        return ResourceManager.stats.Pilot\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.worldMgr.sceneManager.terrain.findPath(this.getPosition2D(), target)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.raidersUndiscovered.remove(this)\n        GameState.raiders.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, this))\n        EventBus.publishEvent(new RaiderDiscoveredEvent(this.getPosition()))\n    }\n\n    select(): SelectionEvent {\n        this.selectionFrame.visible = !this.slipped\n        if (this.selected || this.slipped) return null\n        this.selected = true\n        this.changeActivity()\n        return new RaiderSelected(this)\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    isDriving(): boolean {\n        return false // TODO implement vehicles\n    }\n\n    getRouteActivity(): BaseActivity {\n        if (this.isOnRubble()) {\n            return !!this.carries ? RaiderActivity.CarryRubble : RaiderActivity.routeRubble\n        } else {\n            return !!this.carries ? RaiderActivity.Carry : RaiderActivity.Route\n        }\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        const result = super.moveToClosestTarget(target)\n        if (result === MoveState.MOVED) {\n            GameState.getNearbySpiders(this).some((spider) => {\n                if (this.group.position.distanceToSquared(spider.group.position) < this.radiusSq + spider.radiusSq) {\n                    this.slip()\n                    spider.onDeath()\n                    return true\n                }\n            })\n        } else if (result === MoveState.TARGET_UNREACHABLE) {\n            console.log('Entity could not move to job target, stopping job')\n            this.stopJob()\n        }\n        return result\n    }\n\n    slip() {\n        if (getRandomInclusive(0, 100) < 10) this.stopJob()\n        this.dropItem()\n        this.slipped = true\n        this.changeActivity(RaiderActivity.Slip, () => {\n            this.slipped = false\n        })\n    }\n\n    moveToClosestWorkplace(): boolean {\n        return this.moveToClosestTarget(this.jobWorkplaces) === MoveState.TARGET_REACHED\n    }\n\n    work() {\n        if (!this.job || this.selected || this.slipped) return\n        if (this.job.type === JobType.DRILL) {\n            const surfJob = this.job as DrillJob\n            if (this.moveToClosestWorkplace()) {\n                let drillTimeMs = null\n                if (surfJob.surface.surfaceType === SurfaceType.HARD_ROCK) {\n                    drillTimeMs = this.stats.HardDrillTime[this.level] * 1000\n                } else if (surfJob.surface.surfaceType === SurfaceType.LOOSE_ROCK) {\n                    drillTimeMs = this.stats.LooseDrillTime[this.level] * 1000\n                } else if (surfJob.surface.surfaceType === SurfaceType.DIRT) {\n                    drillTimeMs = this.stats.SoilDrillTime[this.level] * 1000\n                } else if (surfJob.surface.surfaceType === SurfaceType.ORE_SEAM ||\n                    surfJob.surface.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                    drillTimeMs = this.stats.SeamDrillTime[this.level] * 1000\n                }\n                if (drillTimeMs === 0) console.warn('According to cfg this entity cannot drill this material')\n                const focusPoint = surfJob.surface.getCenterWorld()\n                focusPoint.y = this.group.position.y\n                this.group.lookAt(focusPoint)\n                this.changeActivity(RaiderActivity.Drill, () => {\n                    if (surfJob.surface.seamLevel > 0) {\n                        surfJob.surface.seamLevel--\n                        const vec = new Vector2().copy(this.getPosition2D()).sub(surfJob.surface.getCenterWorld2D())\n                            .multiplyScalar(0.3 + getRandom(3) / 10)\n                            .rotateAround(new Vector2(0, 0), degToRad(-10 + getRandom(20)))\n                            .add(this.getPosition2D())\n                        if (surfJob.surface.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                            const crystal = this.worldMgr.addCollectable(new Crystal(), vec)\n                            EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n                        } else if (surfJob.surface.surfaceType === SurfaceType.ORE_SEAM) {\n                            this.worldMgr.addCollectable(new Ore(), vec)\n                            EventBus.publishEvent(new OreFoundEvent())\n                        }\n                        this.changeActivity()\n                    } else {\n                        this.completeJob()\n                    }\n                }, drillTimeMs)\n            }\n        } else if (this.job.type === JobType.CLEAR_RUBBLE) {\n            const surfJob = this.job as ClearRubbleJob\n            if (this.moveToClosestWorkplace()) {\n                this.changeActivity(RaiderActivity.Clear, () => {\n                    this.changeActivity()\n                    this.job.onJobComplete()\n                    this.jobWorkplaces = this.job.getWorkplaces()\n                    if (!surfJob.surface.hasRubble()) this.stopJob()\n                })\n            }\n        } else if (this.job.type === JobType.REINFORCE) {\n            if (this.moveToClosestWorkplace()) {\n                this.changeActivity(RaiderActivity.Reinforce, () => {\n                    this.completeJob()\n                }, 2700)\n            }\n        } else if (this.job.type === JobType.BLOW) {\n            const bj = this.job as DynamiteJob\n            if (this.carries !== bj.dynamite) {\n                this.dropItem()\n                if (this.moveToClosestWorkplace()) {\n                    this.changeActivity(RaiderActivity.Collect, () => {\n                        this.pickupItem(bj.dynamite)\n                    })\n                }\n            } else if (this.moveToClosestTarget(bj.surface.getDigPositions().map((p) => new PathTarget(p)))) {\n                this.changeActivity(RaiderActivity.Place, () => {\n                    this.completeJob()\n                })\n            }\n        } else if (this.job.type === JobType.COLLECT) {\n            const collectJob = this.job as CollectJob\n            const collectJobItem = collectJob.item\n            if (this.carries !== collectJobItem) {\n                this.dropItem()\n                if (this.moveToClosestWorkplace()) {\n                    this.changeActivity(RaiderActivity.Collect, () => {\n                        this.pickupItem(collectJobItem)\n                    })\n                }\n            } else {\n                const moveResult = this.moveToClosestTarget(collectJobItem.getCarryTargets())\n                collectJobItem.setTargetSite((this.currentPath?.target as CollectPathTarget)?.site)\n                if (moveResult) {\n                    const collectPathTarget = this.currentPath.target as CollectPathTarget\n                    if (collectPathTarget.canGatherItem()) {\n                        const dropAction = collectPathTarget.getDropAction()\n                        this.changeActivity(dropAction, () => {\n                            this.completeJob()\n                            collectPathTarget.gatherItem(collectJobItem)\n                        })\n                    } else {\n                        this.changeActivity()\n                    }\n                }\n            }\n        } else if (this.job.type === JobType.MOVE) {\n            if (this.moveToClosestWorkplace()) {\n                this.changeActivity(this.getDefaultActivity(), () => {\n                    this.completeJob()\n                })\n            }\n        } else if (this.job.type === JobType.TRAIN) {\n            const trainJob = this.job as TrainJob\n            if (this.moveToClosestWorkplace()) {\n                this.changeActivity(RaiderActivity.Train, () => {\n                    this.skills.push(trainJob.skill)\n                    EventBus.publishEvent(new RaiderTrained(this, trainJob.skill))\n                    this.completeJob()\n                }, 10000) // XXX adjust training time\n            }\n        } else if (this.job.type === JobType.GET_TOOL) {\n            if (this.moveToClosestWorkplace()) {\n                this.tools.push((this.job as GetToolJob).tool)\n                this.completeJob()\n            }\n        } else if (this.job.type === JobType.EAT) {\n            this.changeActivity(RaiderActivity.Eat, () => {\n                // TODO implement endurance fill eat level\n                this.completeJob()\n            })\n        } else if (this.job.type === JobType.COMPLETE_POWER_PATH) {\n            if (this.moveToClosestWorkplace()) {\n                this.changeActivity(RaiderActivity.Clear, () => {\n                    this.completeJob()\n                })\n            }\n        }\n    }\n\n    private completeJob() {\n        this.dropItem()\n        this.job.onJobComplete()\n        if (this.job) this.job.unassign(this)\n        this.job = this.followUpJob\n        this.followUpJob = null\n        this.jobWorkplaces = this.job?.getWorkplaces() || []\n        this.changeActivity()\n    }\n\n    getDefaultActivity(): BaseActivity {\n        return this.carries ? RaiderActivity.CarryStand : super.getDefaultActivity()\n    }\n\n    beamUp() {\n        this.stopJob()\n        super.beamUp()\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        GameState.raiders.remove(this)\n    }\n\n    hasTool(tool: RaiderTool) {\n        return this.tools.indexOf(tool) !== -1\n    }\n\n    hasSkill(skill: RaiderSkill) {\n        return this.skills.indexOf(skill) !== -1\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { BuildingSelected, EntityDeselected, SelectionEvent } from '../../event/LocalEvents'\nimport { Building } from '../../game/model/entity/building/Building'\nimport { AnimEntity } from './anim/AnimEntity'\nimport { Selectable, SelectionType } from '../../game/model/Selectable'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Matrix4, Vector2, Vector3 } from 'three'\nimport { GameState } from '../../game/model/GameState'\nimport { BuildingUpgraded, EntityAddedEvent, EntityType, MaterialAmountChanged } from '../../event/WorldEvents'\nimport { Surface } from './map/Surface'\nimport { CollectableEntity, CollectableType } from './collect/CollectableEntity'\nimport { BuildingActivity } from './activities/BuildingActivity'\nimport { BuildingEntityStats } from '../../cfg/BuildingEntityStats'\nimport { Ore } from './collect/Ore'\nimport { Crystal } from './collect/Crystal'\nimport { SurfaceType } from './map/SurfaceType'\nimport { AnimEntityActivity } from './activities/AnimEntityActivity'\nimport { EventKey } from '../../event/EventKeyEnum'\n\nexport class BuildingEntity extends AnimEntity implements Selectable {\n\n    type: Building\n    selected: boolean\n    powerSwitch: boolean = true\n    spawning: boolean = false\n    surfaces: Surface[] = []\n    upgradeCostOre: number = 0\n    upgradeCostBrick: number = 0\n    crystalsInUse: number = 0\n    inBeam: boolean = false\n\n    constructor(buildingType: Building) {\n        super(ResourceManager.getAnimationEntityType(buildingType.aeFile))\n        this.type = buildingType\n        this.group.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        this.group.userData = {'selectable': this}\n        this.pickSphereRadius = this.stats.PickSphere / 2\n        this.upgradeCostOre = ResourceManager.cfg('Main', 'BuildingUpgradeCostOre')\n        this.upgradeCostBrick = ResourceManager.cfg('Main', 'BuildingUpgradeCostStuds')\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, (event: MaterialAmountChanged) => {\n            if (event.collectableType === CollectableType.CRYSTAL && this.powerSwitch && this.crystalsInUse < 1) {\n                this.turnOnPower()\n            }\n        })\n    }\n\n    get stats(): BuildingEntityStats {\n        return BuildingEntityStats.getByType(this.type)\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.BUILDING\n    }\n\n    select(): SelectionEvent {\n        if (this.inBeam) return null\n        this.selectionFrame.visible = true\n        if (!this.selected) {\n            this.selected = true\n            return new BuildingSelected(this)\n        }\n        return null\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    getPickSphereCenter() {\n        const pickSphereCenter = this.getPosition()\n        pickSphereCenter.y += this.pickSphereRadius / 2\n        return pickSphereCenter\n    }\n\n    getDropPosition2D(): Vector2 {\n        if (this.getToolJoint) {\n            const worldPos = new Vector3()\n            this.getToolJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else if (this.depositJoint) {\n            const worldPos = new Vector3()\n            this.depositJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else {\n            return this.getPosition2D()\n        }\n    }\n\n    getDropPosition(): Vector3 {\n        const dropPos2D = this.getDropPosition2D()\n        return new Vector3(dropPos2D.x, this.worldMgr.getFloorHeight(dropPos2D.x, dropPos2D.y), dropPos2D.y)\n    }\n\n    isPowered(): boolean {\n        return this.powerSwitch && (this.stats.SelfPowered || this.stats.PowerBuilding || this.crystalsInUse > 0)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.buildingsUndiscovered.remove(this)\n        GameState.buildings.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(EntityType.BUILDING, this))\n    }\n\n    hasMaxLevel(): boolean {\n        return this.level >= this.stats.Levels - 1\n    }\n\n    upgrade() {\n        if (!this.canUpgrade()) return\n        if (GameState.numBrick >= this.upgradeCostBrick) {\n            GameState.numBrick -= this.upgradeCostBrick\n            EventBus.publishEvent(new MaterialAmountChanged(CollectableType.BRICK))\n        } else {\n            GameState.numOre -= this.upgradeCostOre\n            EventBus.publishEvent(new MaterialAmountChanged(CollectableType.ORE))\n        }\n        this.level++\n        EventBus.publishEvent(new EntityDeselected())\n        EventBus.publishEvent(new BuildingUpgraded(this))\n        // TODO add sparkly upgrade animation\n    }\n\n    getDefaultActivity() {\n        return !this.isPowered() && this.type !== Building.GUNSTATION ? BuildingActivity.Unpowered : AnimEntityActivity.Stand\n    }\n\n    beamUp() {\n        GameState.usedCrystals -= this.crystalsInUse\n        this.crystalsInUse = 0\n        this.inBeam = true\n        for (let c = 0; c < this.stats.CostOre; c++) {\n            this.worldMgr.addCollectable(new Ore(), this.surfaces[0].getRandomPosition())\n        }\n        for (let c = 0; c < this.stats.CostCrystal; c++) {\n            this.worldMgr.addCollectable(new Crystal(), this.surfaces[0].getRandomPosition())\n        }\n        this.surfaces.forEach((s) => {\n            s.surfaceType = SurfaceType.GROUND\n            s.setBuilding(null)\n            s.updateTexture()\n            s.neighbors.forEach((n) => n.updateTexture())\n        })\n        super.beamUp()\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        GameState.buildings.remove(this)\n    }\n\n    canUpgrade() {\n        return !this.hasMaxLevel() && (GameState.numOre >= this.upgradeCostOre || GameState.numBrick >= this.upgradeCostBrick)\n    }\n\n    spawnMaterials(materials: CollectableEntity[]) {\n        materials.forEach((m) => this.worldMgr.addCollectable(m, this.getDropPosition2D()))\n    }\n\n    turnOnPower() {\n        if (this.crystalsInUse > 0 || GameState.usedCrystals >= GameState.numCrystal) return\n        this.crystalsInUse = 1\n        GameState.usedCrystals += this.crystalsInUse\n        this.surfaces.forEach((s) => s.setHasPower(true, true))\n        this.changeActivity()\n    }\n\n    turnOffPower() {\n        if (this.crystalsInUse < 1) return\n        GameState.usedCrystals -= this.crystalsInUse\n        this.crystalsInUse = 0\n        this.surfaces.forEach((s) => s.setHasPower(false, false))\n        this.changeActivity()\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class MonsterActivity extends AnimEntityActivity {\n\n    static Route = new MonsterActivity('Activity_Route')\n\n}\n","import { MovableEntity } from '../../../../scene/model/MovableEntity'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { clearTimeoutSafe } from '../../../../core/Util'\nimport { MonsterActivity } from '../../../../scene/model/activities/MonsterActivity'\n\nexport abstract class Monster extends MovableEntity {\n\n    moveTimeout: NodeJS.Timeout\n    target: PathTarget = null\n\n    onLevelEnd() {\n        this.moveTimeout = clearTimeoutSafe(this.moveTimeout)\n        this.removeFromScene()\n    }\n\n    getRouteActivity(): MonsterActivity {\n        return MonsterActivity.Route\n    }\n\n}\n","import { Monster } from './Monster'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { Vector2 } from 'three'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../../main'\nimport { getRandom, getRandomInclusive } from '../../../../core/Util'\nimport { SurfaceType } from '../../../../scene/model/map/SurfaceType'\nimport { GameState } from '../../GameState'\nimport { MoveState } from '../../../../scene/model/MoveState'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\n\nexport class SmallSpider extends Monster {\n\n    constructor() {\n        super(ResourceManager.getAnimationEntityType('Creatures/SpiderSB/SpiderSB.ae'))\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallSpider\n    }\n\n    startMoving() {\n        SmallSpider.onMove(this)\n    }\n\n    private static onMove(spider: SmallSpider) {\n        const prevSurface = spider.getCurrentSurface()\n        if (spider.target && spider.moveToClosestTarget([spider.target]) === MoveState.MOVED) {\n            const nextSurface = spider.getCurrentSurface()\n            if (prevSurface !== nextSurface) {\n                (GameState.spidersBySurface.get(prevSurface) || []).remove(spider)\n                GameState.spidersBySurface.getOrUpdate(nextSurface, () => []).push(spider)\n            }\n            if (!spider.worldMgr.sceneManager.terrain.getSurfaceFromWorld(spider.getPosition()).surfaceType.floor) {\n                spider.onDeath()\n            } else {\n                spider.moveTimeout = setTimeout(() => SmallSpider.onMove(spider), 1000 / NATIVE_FRAMERATE)\n            }\n        } else {\n            spider.changeActivity()\n            spider.moveTimeout = setTimeout(() => {\n                spider.target = spider.findTarget()\n                SmallSpider.onMove(spider)\n            }, 1000 + getRandom(9000))\n        }\n    }\n\n    private findTarget(): PathTarget {\n        const terrain = this.worldMgr.sceneManager.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            const surfaceType = terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType\n            if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a solid target')\n        return null\n    }\n\n    onDeath() {\n        this.onLevelEnd()\n        GameState.spiders.remove(this);\n        (GameState.spidersBySurface.get(this.getCurrentSurface()) || []).remove(this)\n    }\n\n}\n","import { Monster } from './Monster'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { Vector2 } from 'three'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../../main'\nimport { getRandomInclusive } from '../../../../core/Util'\nimport { GameState } from '../../GameState'\nimport { MoveState } from '../../../../scene/model/MoveState'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\n\nexport class Bat extends Monster {\n\n    constructor() {\n        super(ResourceManager.getAnimationEntityType('Creatures/bat/bat.ae'))\n    }\n\n    get stats() {\n        return ResourceManager.stats.Bat\n    }\n\n    startRandomMove() {\n        Bat.onMove(this)\n    }\n\n    private static onMove(bat: Bat) {\n        if (!bat.target || bat.moveToClosestTarget([bat.target]) === MoveState.TARGET_REACHED) {\n            bat.target = bat.findTarget()\n        }\n        bat.moveTimeout = setTimeout(() => Bat.onMove(bat), 1000 / NATIVE_FRAMERATE)\n    }\n\n    determinePosY(x: number, z: number) {\n        return this.worldMgr.getFloorHeight(x, z) + TILESIZE / 2\n    }\n\n    private findTarget(): PathTarget { // TODO move to nearby drilling noise, explosions or sonic blasters\n        const terrain = this.worldMgr.sceneManager.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            if (terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType.floor) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a solid target')\n        return null\n    }\n\n    onDeath() {\n        this.onLevelEnd()\n        GameState.bats.remove(this)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { TILESIZE } from '../main'\nimport { MathUtils, Vector2, Vector3 } from 'three'\nimport { Raider } from './model/Raider'\nimport { GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { BuildingEntity } from './model/BuildingEntity'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { Crystal } from './model/collect/Crystal'\nimport { WorldManager } from './WorldManager'\nimport { EventBus } from '../event/EventBus'\nimport { EntityAddedEvent, EntityType } from '../event/WorldEvents'\nimport { SmallSpider } from '../game/model/entity/monster/SmallSpider'\nimport { Bat } from '../game/model/entity/monster/Bat'\nimport degToRad = MathUtils.degToRad\n\nexport class ObjectListLoader {\n\n    static loadObjectList(worldMgr: WorldManager, objectListConf) {\n        Object.values(objectListConf).forEach((olObject: any) => {\n            const lTypeName = olObject.type ? olObject.type.toLowerCase() : olObject.type\n            // all object positions are off by half a tile, because 0/0 is the top left corner of first tile\n            const worldX = (olObject.xPos - 1) * TILESIZE\n            const worldZ = (olObject.yPos - 1) * TILESIZE\n            const terrainY = worldMgr.getTerrainHeight(worldX, worldZ)\n            const buildingType: string = ResourceManager.cfg('BuildingTypes', olObject.type)\n            const radHeading = degToRad(olObject.heading)\n            if (lTypeName === 'TVCamera'.toLowerCase()) {\n                const offset = new Vector3(5 * TILESIZE, 0, 0).applyAxisAngle(new Vector3(0, 1, 0), radHeading - Math.PI / 16).add(new Vector3(worldX, terrainY, worldZ - TILESIZE / 2))\n                worldMgr.sceneManager.camera.position.copy(offset)\n                worldMgr.sceneManager.camera.position.y = 4.5 * TILESIZE\n                worldMgr.sceneManager.controls.target.copy(new Vector3(worldX, terrainY, worldZ - TILESIZE / 2))\n                worldMgr.sceneManager.controls.update()\n                worldMgr.setTorchPosition(new Vector2(worldX, worldZ - TILESIZE / 2))\n            } else if (lTypeName === 'Pilot'.toLowerCase()) {\n                const raider = new Raider()\n                raider.worldMgr = worldMgr\n                raider.changeActivity()\n                raider.createPickSphere()\n                raider.group.position.set(worldX, terrainY, worldZ)\n                raider.group.rotateOnAxis(new Vector3(0, 1, 0), radHeading - Math.PI / 2)\n                raider.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(raider.group.position).discovered\n                if (raider.group.visible) {\n                    GameState.raiders.push(raider)\n                    EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, raider))\n                } else {\n                    GameState.raidersUndiscovered.push(raider)\n                }\n                worldMgr.sceneManager.scene.add(raider.group)\n            } else if (buildingType) {\n                const building = Building.getByName(buildingType)\n                const entity = new BuildingEntity(building)\n                entity.worldMgr = worldMgr\n                entity.changeActivity()\n                entity.createPickSphere()\n                entity.group.position.set(worldX, worldMgr.getFloorHeight(worldX, worldZ), worldZ)\n                entity.group.rotateOnAxis(new Vector3(0, 1, 0), -radHeading - Math.PI)\n                entity.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(entity.group.position).discovered\n                if (entity.group.visible) {\n                    GameState.buildings.push(entity)\n                    EventBus.publishEvent(new EntityAddedEvent(EntityType.BUILDING, entity))\n                } else {\n                    GameState.buildingsUndiscovered.push(entity)\n                }\n                // TODO rotate building with normal vector of surface\n                worldMgr.sceneManager.scene.add(entity.group)\n                const primaryPathSurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(entity.group.position)\n                primaryPathSurface.setBuilding(entity)\n                primaryPathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                primaryPathSurface.updateTexture()\n                entity.surfaces.push(primaryPathSurface)\n                if (building.secondaryBuildingPart) {\n                    const secondaryOffset = new Vector3(TILESIZE * building.secondaryBuildingPart.x, 0, TILESIZE * building.secondaryBuildingPart.y)\n                        .applyAxisAngle(new Vector3(0, 1, 0), -radHeading).add(entity.group.position)\n                    const secondarySurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(secondaryOffset)\n                    secondarySurface.setBuilding(entity)\n                    secondarySurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                    secondarySurface.updateTexture()\n                    entity.surfaces.push(secondarySurface)\n                }\n                if (building.hasPrimaryPowerPath) {\n                    const pathOffset = new Vector3(0, 0, -TILESIZE).applyAxisAngle(new Vector3(0, 1, 0), radHeading)\n                    pathOffset.add(entity.group.position)\n                    const pathSurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(pathOffset)\n                    if (building === Building.GEODOME) pathSurface.building = entity\n                    pathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                    pathSurface.updateTexture()\n                    entity.surfaces.push(pathSurface)\n                }\n                if (building === Building.POWER_STATION || entity.surfaces.some((s) => s.neighbors.some((n) => n.hasPower))) {\n                    entity.turnOnPower()\n                }\n            } else if (lTypeName === 'PowerCrystal'.toLowerCase()) {\n                worldMgr.addCollectable(new Crystal(), new Vector2(worldX, worldZ))\n            } else if (lTypeName === 'SmallSpider'.toLowerCase()) {\n                const spider = new SmallSpider()\n                spider.worldMgr = worldMgr\n                spider.changeActivity()\n                spider.group.position.set(worldX, terrainY, worldZ)\n                const currentSurface = spider.getCurrentSurface()\n                spider.group.visible = currentSurface.discovered\n                worldMgr.sceneManager.scene.add(spider.group)\n                GameState.spiders.push(spider)\n                GameState.spidersBySurface.getOrUpdate(currentSurface, () => []).push(spider)\n                spider.startMoving()\n            } else if (lTypeName === 'Bat'.toLowerCase()) {\n                const bat = new Bat()\n                bat.worldMgr = worldMgr\n                bat.changeActivity()\n                bat.group.position.set(worldX, bat.determinePosY(worldX, worldZ), worldZ)\n                bat.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(bat.group.position).discovered\n                worldMgr.sceneManager.scene.add(bat.group)\n                GameState.bats.push(bat)\n                bat.startRandomMove()\n            } else {\n                // TODO implement remaining object types\n                console.warn('Object type ' + olObject.type + ' not yet implemented')\n            }\n        })\n        // update path textures when all buildings are added\n        GameState.buildings.forEach((b) => b.surfaces.forEach((bSurf) => {\n            for (let x = -1; x <= 1; x++) {\n                for (let y = -1; y <= 1; y++) {\n                    worldMgr.sceneManager.terrain.getSurface(bSurf.x + x, bSurf.y + y).updateTexture()\n                }\n            }\n        }))\n    }\n\n}\n","import { PublicJob } from '../Job'\nimport { RaiderTool } from '../../../../scene/model/RaiderTool'\nimport { RaiderSkill } from '../../../../scene/model/RaiderSkill'\nimport { JobType } from '../JobType'\nimport { FulfillerEntity } from '../../../../scene/model/FulfillerEntity'\nimport { Surface } from '../../../../scene/model/map/Surface'\n\nexport abstract class SurfaceJob extends PublicJob {\n\n    surface: Surface = null\n    color: number = 0xffffff\n    colorPriority: number = 0\n    requiredTool: RaiderTool = null\n    requiredSkill: RaiderSkill = null\n\n    protected constructor(type: JobType, surface: Surface) {\n        super(type)\n        this.surface = surface\n    }\n\n    isQualified(fulfiller: FulfillerEntity) {\n        return (!this.requiredTool || fulfiller.hasTool(this.requiredTool))\n            && (!this.requiredSkill || fulfiller.hasSkill(this.requiredSkill))\n    }\n\n    isQualifiedWithTool(fulfiller: FulfillerEntity): RaiderTool {\n        return this.requiredTool\n    }\n\n    isQualifiedWithTraining(fulfiller: FulfillerEntity): RaiderSkill {\n        return this.requiredSkill\n    }\n\n}\n","import { Dynamite } from '../../../../scene/model/collect/Dynamite'\nimport { Surface } from '../../../../scene/model/map/Surface'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { SurfaceJob } from './SurfaceJob'\nimport { JobType } from '../JobType'\nimport { RaiderSkill } from '../../../../scene/model/RaiderSkill'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class DynamiteJob extends SurfaceJob {\n\n    dynamite: Dynamite\n\n    constructor(surface: Surface, dynamite: Dynamite) {\n        super(JobType.BLOW, surface)\n        this.dynamite = dynamite\n        this.color = 0xa06060\n        this.colorPriority = 2\n        this.requiredSkill = RaiderSkill.DEMOLITION\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return [new PathTarget(this.dynamite.getPosition2D())]\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.dynamite.ignite()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityDestruction\n    }\n\n}\n","/** Function documentation mostly copied from the following URLs\n *\n * https://kb.rockraidersunited.com/User:Jessietail/NERPs_reference\n * https://web.archive.org/web/20131206122442/http://rru-stuff.org/nerpfuncs.html\n * https://kb.rockraidersunited.com/NERPs_documentation#Labels\n *\n */\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { clearIntervalSafe } from './Util'\n\nexport class NerpRunner {\n\n    debug = false\n    onLevelComplete: () => any = null\n    nerpInterval: NodeJS.Timeout = null\n\n    registers = new Array(8).fill(0)\n    timers = new Array(4).fill(0)\n    scriptLines = [] // contains humand readable script strings\n    statements = [] // contains parsed statements for execution\n    macrosByName = {}\n    labelsByName = {}\n    halted = false\n    programCounter = 0\n    messages = []\n    // more state variables and switches\n    messagePermit = null\n\n    constructor(debug = false) {\n        this.debug = debug\n    }\n\n    startExecution() {\n        const that = this\n        this.nerpInterval = setInterval(() => {\n            that.execute()\n        }, 2000)\n    }\n\n    pauseExecution() {\n        this.nerpInterval = clearIntervalSafe(this.nerpInterval)\n    }\n\n    /**\n     * Internally used to validate and parse a register number.\n     * @param register\n     * @return {number}\n     */\n    checkRegister(register) {\n        const num = parseInt(register)\n        if (isNaN(num) || num < 0 || num > this.registers.length) throw new Error('Invalid register (' + register + ') provided')\n        return num\n    }\n\n    /**\n     * Internally used to validate and parse a value before setting or adding it with a register.\n     * @param value\n     * @return {number}\n     */\n    checkRegisterValue(value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Invalid register value (' + value + ') provided')\n        return num\n    }\n\n    /**\n     * Gets the value currently stored in the given register, internally used to handle all registers with one method.\n     * @param register the register to read\n     * @return {number} returns the value currently stored in the register\n     */\n    getR(register) {\n        register = this.checkRegister(register)\n        return this.registers[register]\n    }\n\n    /**\n     * Sets the given value for the given register, internally used to handle all registers with one method.\n     * @param register the register to set\n     * @param value the value to set for the given register\n     */\n    setR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] = value\n    }\n\n    /**\n     * Adds the given value to the given register, internally used to handle all registers with one method.\n     * @param register the register to add to\n     * @param value the value to add to the given register\n     */\n    addR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] += value\n    }\n\n    /**\n     * Set the respective timer to the given numerical value. Units are in milliseconds.\n     * @param timer\n     * @param value\n     */\n    setTimer(timer, value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Can\\'t set timer to NaN value: ' + value)\n        this.timers[timer] = new Date().getTime() + num\n    }\n\n    /**\n     * Gets the value of the respective timer. Units are in milliseconds.\n     * @param timer\n     * @return {number}\n     */\n    getTimer(timer) {\n        return new Date().getTime() - this.timers[timer]\n    }\n\n    /**\n     * End the level successfully and show the score screen.\n     */\n    setLevelCompleted() {\n        this.halted = true\n        GameState.resultState = GameResultState.COMPLETE\n        this.onLevelComplete()\n    }\n\n    /**\n     * End the level as failure and show the score screen.\n     */\n    setLevelFail() {\n        this.halted = true\n        GameState.resultState = GameResultState.FAILED\n        this.onLevelComplete()\n    }\n\n    /**\n     * Sets tutorial flags\n     * @param value a bitmask to set flags with\n     */\n    setTutorialFlags(value) {\n        // TODO implement tutorial flags\n        // seems like value must be interpreted bitwise and sets a certain flag on each bit\n        // seen so far:\n        // 0 = 0x00 allow any click anywhere anytime\n        // 3 = 0x11 disallow invalid clicks\n        // 4095 = 0x111111111111 set all flags? (seen in Tutorial01 level)\n    }\n\n    /**\n     * This is used to make messages come up/not come up.\n     * @param messagesAllowed\n     */\n    setMessagePermit(messagesAllowed) {\n        this.messagePermit = !messagesAllowed\n    }\n\n    setBuildingsUpgradeLevel(typeName, level) {\n        GameState.buildings.forEach(b => {\n            if (b.type === typeName) b.level = level\n        })\n    }\n\n    setToolStoreLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.TOOLSTATION, level)\n    }\n\n    setTeleportPadLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.TELEPORT_PAD, level)\n    }\n\n    setPowerStationLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.POWER_STATION, level)\n    }\n\n    setBarracksLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.BARRACKS, level)\n    }\n\n    /**\n     * Gets the number of tool stores currently built. NOT the total ever built.\n     * @return {number}\n     */\n    getToolStoresBuilt() {\n        return GameState.getBuildingsByType(Building.TOOLSTATION).length\n    }\n\n    /**\n     * Gets the number of minifigures on the level. TODO it is NOT tested if this ignores minifigures in hidden caverns\n     * @return {number}\n     */\n    getMinifiguresOnLevel() {\n        return GameState.raiders.length\n    }\n\n    /**\n     * Gets the number of crystals currently stored.\n     * @return {number}\n     */\n    getCrystalsCurrentlyStored() {\n        return GameState.numCrystal\n    }\n\n    getObjectiveSwitch() {\n        // TODO implement this\n        return 0\n    }\n\n    setMessageTimerValues(arg1, arg2, arg3) {\n        // TODO implement this\n    }\n\n    getMessageTimer() {\n        return 0 // TODO return remaining amount of time needed to fully play WAV message\n    }\n\n    cameraUnlock() {\n        // TODO implement this\n    }\n\n    setMessage(messageNumber, arrowDisabled) {\n        if (!this.messagePermit) {\n            return\n        }\n        const msg = this.messages[messageNumber]\n        // TODO show message to user\n        console.log(msg.txt)\n        // msg.snd resides in sounds/streamed/ which is currently not loaded :(\n    }\n\n    setCameraGotoTutorial(arg1) {\n        // TODO implement this\n    }\n\n    getTutorialBlockIsGround(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getTutorialBlockIsPath(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getUnitAtBlock(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getOxygenLevel() {\n        // TODO implement this\n        return 100\n    }\n\n    getObjectiveShowing() {\n        // TODO implement this\n        return false\n    }\n\n    addPoweredCrystals() {\n        // TODO implement this\n    }\n\n    disallowAll() {\n        // TODO implement this\n    }\n\n    getPoweredPowerStationsBuilt() {\n        return GameState.getBuildingsByType(Building.POWER_STATION).length\n    }\n\n    getPoweredBarracksBuilt() {\n        return GameState.getBuildingsByType(Building.BARRACKS).length\n    }\n\n    getRecordObjectAtTutorial() {\n        // TODO implement this\n    }\n\n    getHiddenObjectsFound() {\n        // TODO implement this\n        return 0\n    }\n\n    callMethod(methodName, methodArgs) {\n        if (methodName === 'Stop') {\n            throw 'Stop'\n        } else if (methodName === 'TRUE') {\n            return true\n        } else if (methodName === 'FALSE') {\n            return false\n        }\n        const setRegisterMatch = methodName.match(/^SetR([0-7])$/)\n        if (setRegisterMatch) {\n            return this.setR(setRegisterMatch[1], methodArgs[0])\n        }\n        const addRegisterMatch = methodName.match(/^AddR([0-7])$/)\n        if (addRegisterMatch) {\n            return this.addR(addRegisterMatch[1], methodArgs[0])\n        }\n        const getRegisterMatch = methodName.match(/^GetR([0-7])$/)\n        if (getRegisterMatch) {\n            return this.getR(getRegisterMatch[1])\n        }\n        const setTimerMatch = methodName.match(/^SetTimer([0-3])$/)\n        if (setTimerMatch) {\n            return this.setTimer(setTimerMatch[1], methodArgs[0])\n        }\n        const getTimerMatch = methodName.match(/^GetTimer([0-3])$/)\n        if (getTimerMatch) {\n            return this.getTimer(getTimerMatch[1])\n        }\n        const lMethodName = methodName.toLowerCase()\n        for (const memberName in this) {\n            // noinspection JSUnfilteredForInLoop\n            if (memberName.toLowerCase() === lMethodName) {\n                // @ts-ignore\n                // noinspection JSUnfilteredForInLoop\n                return this[memberName].apply(this, methodArgs)\n            }\n        }\n        throw new Error('Undefined method: ' + methodName)\n    }\n\n    conditional(left, right) {\n        const conditionResult = this.executeStatement(left)\n        if (this.debug) {\n            console.log('Condition evaluated to ' + conditionResult)\n        }\n        if (conditionResult) {\n            this.executeStatement(right)\n        }\n    }\n\n    executeStatement(expression) {\n        if (expression.invoke) {\n            const argValues = expression.invoke !== 'conditional' ? expression.args.map(e => this.executeStatement(e)) : expression.args\n            const result = this.callMethod(expression.invoke, argValues)\n            if (result !== undefined && this.debug) {\n                console.log('Method returned: ' + result)\n            }\n            return result\n        } else if (expression.comparator) {\n            const left = this.executeStatement(expression.left)\n            const right = this.executeStatement(expression.right)\n            if (expression.comparator === '=') {\n                return left === right\n            } else if (expression.comparator === '!=') {\n                return left !== right\n            } else if (expression.comparator === '<') {\n                return left < right\n            } else if (expression.comparator === '>') {\n                return left > right\n            } else {\n                console.log(expression)\n                throw new Error('Unknown comparator: ' + expression.comparator)\n            }\n        } else if (!isNaN(expression)) { // just a number\n            return expression\n        } else if (expression.jump) {\n            this.programCounter = this.labelsByName[expression.jump]\n            if (this.programCounter === undefined) {\n                throw new Error('Label \\'' + expression.jump + '\\' is unknown!')\n            }\n            if (this.debug) {\n                console.log('Jumping to label \\'' + expression.jump + '\\' in line ' + this.programCounter)\n            }\n        } else {\n            console.log(expression)\n            throw new Error('Unknown expression in line ' + this.programCounter + ': ' + expression)\n        }\n    }\n\n    execute(debug = false) {\n        this.debug = debug\n        if (this.halted) return\n        try {\n            if (this.debug) {\n                console.log('Executing following script\\n' + this.scriptLines.join('\\n'))\n                console.log('Registers: ' + this.registers)\n            }\n            for (this.programCounter = 0; this.programCounter < this.statements.length; this.programCounter++) {\n                const statement = this.statements[this.programCounter]\n                if (this.debug) {\n                    console.log(this.programCounter + ': ' + this.scriptLines[this.programCounter])\n                    console.log(statement)\n                }\n                if (!statement.label) { // do nothing for label markers\n                    this.executeStatement(statement)\n                }\n            }\n        } catch (e) {\n            if (e === 'Stop') {\n                return\n            }\n            console.error(e)\n            console.error('FATAL ERROR! Script execution failed! You can NOT win anymore!')\n            this.halted = true\n            debugger;\n        }\n    }\n\n}\n","import { NerpRunner } from './NerpRunner'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class NerpParser {\n\n    static parse(nerpScript: string): NerpRunner {\n        const nerpRunner = new NerpRunner()\n        const lines = nerpScript.split('\\n').map(l => l\n            .split('//')[0].trim() // before comment starts\n            .split(';')[0].trim() // before preprocessor comment starts\n            .replace(/_/g, '') // some preprocessor macros use this prefix\n            .replace(/\\bTRUE \\? /, '') // some weird requirement of the original language\n            .replace(/[{}]/g, ''), // duplicate limit for macros using labels too\n        )\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c]\n            if (line.length < 1) {\n                continue // ignore empty lines, but important for macro closure\n            }\n            if (line.startsWith('#include ')) { // include other nerp scripts/headers\n                const includeName = line.replace(/^#include /, '').trim().slice(1, -1)\n                if (includeName === 'nerpdef.h') {\n                    // trivial default header file, is applied by search and replace above\n                    // see https://github.com/jgrip/legorr/blob/master/nerpdef.h\n                    continue\n                }\n                const includedRunner = NerpParser.parse(ResourceManager.getResource('Levels/' + includeName))\n                if (!includedRunner || !includedRunner.scriptLines || includedRunner.scriptLines.length < 1) {\n                    throw 'Can\\'t include unknown nerp script: ' + line\n                }\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(includedRunner.scriptLines)\n                // copy macros from included file to current file\n                nerpRunner.macrosByName = Object.assign({}, nerpRunner.macrosByName, includedRunner.macrosByName)\n            } else if (line.startsWith('#define ')) { // parse C++ preprocessor macro\n                const firstLine = line.replace(/^#define /, '').split(' ')\n                const macroLines = [firstLine.splice(1).join(' ').replace(/\\\\$/, '').trim()]\n                let mLine = line\n                let append = false\n                while (mLine.endsWith('\\\\') && c < lines.length - 1) {\n                    c++\n                    mLine = lines[c].trim()\n                    const macroLine = mLine.replace(/\\\\$/, '').trim()\n                    if (macroLine.length > 0) {\n                        if (append) {\n                            append = false\n                            macroLines[macroLines.length - 1] += macroLine\n                        } else {\n                            macroLines.push(macroLine)\n                        }\n                    }\n                    if (mLine.match(/:\\\\$/)) {\n                        append = true\n                    }\n                }\n                const macroCall = firstLine[0].split('(')\n                nerpRunner.macrosByName[macroCall[0]] = {\n                    args: macroCall[1].replace(/\\)$/, '').split(','),\n                    lines: macroLines,\n                }\n            } else {\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(this.replaceMacros(nerpRunner.macrosByName, line))\n            }\n        }\n        // somewhat precompile the script and create syntax tree\n        // must be done in separate block to make sure the script is complete and we can refer/rely on line numbers for label jumps\n        for (let c = 0; c < nerpRunner.scriptLines.length; c++) {\n            const line = nerpRunner.scriptLines[c]\n            nerpRunner.statements[c] = line.replace(/\\(\\)/g, '') // now the macros are applied and obsolete empty \"()\" can be removed\n                .split(' ? ')\n            const labelMatch = line.match(/(\\S+):/)\n            if (nerpRunner.statements[c].length === 2) { // line contains condition (primary operator)\n                nerpRunner.statements[c] = {\n                    invoke: 'conditional',\n                    args: [this.preProcess(nerpRunner.statements[c][0]), this.preProcess(nerpRunner.statements[c][1])],\n                }\n            } else if (labelMatch) { // keep label line number for later usage\n                const labelName = labelMatch[1].toLowerCase()\n                nerpRunner.labelsByName[labelName] = c\n                nerpRunner.statements[c] = {label: labelName}\n            } else if (nerpRunner.statements[c].length === 1) { // just a call\n                nerpRunner.statements[c] = this.preProcess(nerpRunner.statements[c][0])\n            } else { // lines contains more than 1 condition statement\n                throw 'Can\\'t deal with line: ' + line\n            }\n        }\n        return nerpRunner\n    }\n\n    static replaceMacros(macrosByName, line): string[] {\n        // check if this line contains a macro\n        const split = line.split('(') // not a very stable check though...\n        const macro = macrosByName[split[0]]\n        if (macro) {\n            const argValues = split.splice(1).join('(').slice(0, -1).split(',')\n            if (argValues.length !== macro.args.length) {\n                throw 'Invalid number of args provided for macro in line ' + line\n            }\n            const macroLines = []\n            macro.lines.forEach((line) => {\n                for (let c = 0; c < argValues.length; c++) {\n                    line = line.replace(new RegExp('\\\\b' + macro.args[c] + '\\\\b'), argValues[c])\n                }\n                macroLines.push(...(this.replaceMacros(macrosByName, line)))\n            })\n            return macroLines\n        } else {\n            return [line]\n        }\n    }\n\n    static preProcess(expression) {\n        expression = expression.trim().replace(/^_/, '') // remove whitespace and leading underscore\n        const number = parseInt(expression)\n        if (!isNaN(number)) {\n            return number\n        }\n        const opSplit = expression.split(/ (=) | (!=) | (>) | (<) /).filter(e => e !== undefined)\n        const brackets = expression.match(/^(.+)\\((.+)\\)$/)\n        const spaceSplit = expression.split(' ')\n        const labelMatch = expression.match(/([^:]+):$/)\n        const jumpMatch = expression.match(/^:([^:]+)$/)\n        if (opSplit.length === 3) { // expression contains secondary operator\n            return {left: this.preProcess(opSplit[0]), comparator: opSplit[1], right: this.preProcess(opSplit[2])}\n        } else if (brackets) {\n            const args = brackets[2].split(',').map(a => this.preProcess(a))\n            return {invoke: brackets[1], args: args}\n        } else if (spaceSplit.length > 1) { // space split must be the very last since most expressions contain space\n            const args = spaceSplit.length === 2 ? [this.preProcess(spaceSplit[1])] : spaceSplit.splice(1).map(a => this.preProcess(a))\n            return {invoke: spaceSplit[0], args: args}\n        } else if (labelMatch) { // label definition\n            return {label: labelMatch[1]}\n        } else if (jumpMatch) { // jump to label\n            return {jump: jumpMatch[1].toLowerCase()}\n        } else { // function call without args\n            if (expression.match(/[ =?><!]/)) {\n                throw 'Invalid expression given, parsing must have failed before somewhere'\n            }\n            return {invoke: expression, args: []}\n        }\n    }\n\n}\n","import { LevelPrioritiesEntryConfig } from '../../../cfg/LevelsCfg'\nimport { PublicJob } from './Job'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport class PriorityList {\n\n    levelDefault: PriorityEntry[] = []\n    current: PriorityEntry[] = []\n\n    constructor(priorities: LevelPrioritiesEntryConfig[]) {\n        this.levelDefault = priorities\n        this.reset()\n    }\n\n    toggle(index: number) {\n        this.current[index].enabled = !this.current[index].enabled\n    }\n\n    upOne(index: number) {\n        const tmp = this.current[index]\n        this.current[index] = this.current[index + 1]\n        this.current[index + 1] = tmp\n    }\n\n    reset() {\n        this.current = this.levelDefault.map(entry => new PriorityEntry(entry)) // use deep copy to avoid interference\n    }\n\n    pushToTop(index: number) {\n        const element = this.current[index]\n        for (let c = index; c > 0; c--) {\n            this.current[c] = this.current[c - 1]\n        }\n        this.current[0] = element\n    }\n\n    getPriority(job: PublicJob) {\n        let priority = 0\n        this.current.some((j, index) => {\n            if (j.key === job.getPriorityIdentifier()) {\n                priority = index\n                return true\n            }\n        })\n        return priority\n    }\n\n}\n\nexport class PriorityEntry {\n\n    key: PriorityIdentifier\n    enabled: boolean\n\n    constructor(levelPriorityEntry: LevelPrioritiesEntryConfig) {\n        this.key = levelPriorityEntry.key\n        this.enabled = levelPriorityEntry.enabled\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\nimport { PathTarget } from '../../../scene/model/PathTarget'\n\nexport class MoveJob extends Job {\n\n    target: PathTarget[]\n\n    constructor(target: Vector2) {\n        super(JobType.MOVE)\n        this.target = [new PathTarget(target)]\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.target\n    }\n\n}\n","import { SceneManager } from './SceneManager'\nimport { TerrainLoader } from './TerrainLoader'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { Color, MathUtils, Raycaster, Vector2, Vector3 } from 'three'\nimport { clearIntervalSafe, getRandom } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EntityAddedEvent, EntityType, JobCreateEvent, RaiderRequested, SpawnDynamiteEvent } from '../event/WorldEvents'\nimport { Raider } from './model/Raider'\nimport { GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { CollectableEntity } from './model/collect/CollectableEntity'\nimport { CHECK_SPANW_RAIDER_TIMER, TILESIZE, UPDATE_OXYGEN_TIMER } from '../main'\nimport { ObjectListLoader } from './ObjectListLoader'\nimport { Dynamite } from './model/collect/Dynamite'\nimport { DynamiteJob } from '../game/model/job/surface/DynamiteJob'\nimport { NerpParser } from '../core/NerpParser'\nimport { NerpRunner } from '../core/NerpRunner'\nimport { GameScreen } from '../screen/GameScreen'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { PriorityList } from '../game/model/job/PriorityList'\nimport { MoveJob } from '../game/model/job/MoveJob'\nimport { RaiderActivity } from './model/activities/RaiderActivity'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { CollectJob } from '../game/model/job/CollectJob'\nimport { AirLevelChanged } from '../event/LocalEvents'\nimport degToRad = MathUtils.degToRad\n\nexport class WorldManager {\n\n    sceneManager: SceneManager = null\n    spawnRaiderInterval = null\n    nerpRunner: NerpRunner = null\n    oxygenUpdateInterval = null\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.sceneManager = new SceneManager(canvas)\n        EventBus.registerEventListener(EventKey.DESELECTED_ENTITY, () => GameState.selectEntities([]))\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => {\n            if (GameState.requestedRaiders > 0 && !this.spawnRaiderInterval) {\n                this.spawnRaiderInterval = setInterval(this.checkSpawnRaiders.bind(this), CHECK_SPANW_RAIDER_TIMER)\n            }\n        })\n        EventBus.registerEventListener(EventKey.SPAWN_DYNAMITE, (event: SpawnDynamiteEvent) => {\n            const targetBuilding = GameState.getClosestBuildingByType(event.surface.getCenterWorld(), Building.TOOLSTATION)\n            if (!targetBuilding) throw 'Could not find toolstation to spawn dynamite'\n            const pos = targetBuilding.getDropPosition()\n            const dynamite = new Dynamite()\n            dynamite.targetSurface = event.surface\n            dynamite.worldMgr = this\n            dynamite.group.position.copy(pos)\n            this.sceneManager.scene.add(dynamite.group)\n            EventBus.publishEvent(new JobCreateEvent(new DynamiteJob(event.surface, dynamite)))\n        })\n        EventBus.registerEventListener(EventKey.CAVERN_DISCOVERED, () => {\n            GameState.discoveredCaverns++\n        })\n        this.oxygenUpdateInterval = setInterval(this.updateOxygen.bind(this), UPDATE_OXYGEN_TIMER)\n    }\n\n    setup(levelConf: LevelEntryCfg, gameScreen: GameScreen) {\n        GameState.levelFullName = levelConf.fullName\n        GameState.totalCaverns = levelConf.reward?.quota?.caverns || 0\n        GameState.rewardConfig = levelConf.reward\n        GameState.priorityList = new PriorityList(levelConf.priorities)\n        GameState.oxygenRate = levelConf.oxygenRate\n\n        const ambientRgb = ResourceManager.cfg('Main', 'AmbientRGB') || [10, 10, 10]\n        const maxAmbRgb = Math.min(255, Math.max(0, ...ambientRgb))\n        const normalizedRgb = ambientRgb.map(v => v / (maxAmbRgb ? maxAmbRgb : 1))\n        const ambientColor = new Color(normalizedRgb[0], normalizedRgb[1], normalizedRgb[2])\n        this.sceneManager.setupScene(ambientColor)\n\n        // create terrain mesh and add it to the scene\n        this.sceneManager.terrain = TerrainLoader.loadTerrain(levelConf, this)\n        this.sceneManager.scene.add(this.sceneManager.terrain.floorGroup)\n\n        // load in non-space objects next\n        const objectListConf = ResourceManager.getResource(levelConf.oListFile)\n        ObjectListLoader.loadObjectList(this, objectListConf)\n\n        // load nerp script\n        this.nerpRunner = NerpParser.parse(ResourceManager.getResource(levelConf.nerpFile))\n        this.nerpRunner.messages.push(...(ResourceManager.getResource(levelConf.nerpMessageFile)))\n        this.nerpRunner.onLevelComplete = () => gameScreen.onLevelEnd()\n\n        // gather level start details for game result score calculation\n        GameState.totalDiggables = this.sceneManager.terrain.surfaces.filter((r) => r.forEach((s) => s.isDigable())).length\n        GameState.totalCrystals = 0\n        this.sceneManager.terrain.surfaces.forEach((r) => r.forEach((s) => GameState.totalCrystals += s.containedCrystals))\n        GameState.totalOres = 0\n        this.sceneManager.terrain.surfaces.forEach((r) => r.forEach((s) => GameState.totalOres += s.containedOres))\n    }\n\n    start() {\n        this.sceneManager.startScene()\n        this.nerpRunner?.startExecution()\n        GameState.levelStartTime = Date.now()\n    }\n\n    stop() {\n        GameState.levelStopTime = Date.now()\n        this.nerpRunner?.pauseExecution()\n        this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n        GameState.spiders.forEach((m) => m.onLevelEnd())\n        GameState.bats.forEach((b) => b.onLevelEnd())\n        GameState.remainingDiggables = 0\n        this.sceneManager?.terrain?.surfaces?.forEach((r) => r.forEach((s) => GameState.remainingDiggables += s.isDigable() ? 1 : 0))\n        this.sceneManager.disposeScene()\n    }\n\n    resize(width: number, height: number) {\n        if (this.sceneManager) this.sceneManager.renderer.setSize(width, height)\n    }\n\n    getTerrainIntersectionPoint(rx: number, ry: number): Vector3 {\n        if (!this.sceneManager.terrain) return null\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.sceneManager.camera)\n        const intersects = raycaster.intersectObjects(this.sceneManager.terrain.floorGroup.children)\n        return intersects.length > 0 ? intersects[0].point : null\n    }\n\n    setTorchPosition(position: Vector2) {\n        this.sceneManager.cursorTorchlight.position.x = position.x\n        this.sceneManager.cursorTorchlight.position.y = this.getFloorHeight(position.x, position.y) + 2 * TILESIZE\n        this.sceneManager.cursorTorchlight.position.z = position.y\n    }\n\n    getFloorHeight(worldX: number, worldZ: number): number {\n        const surface = this.sceneManager.terrain.getSurfaceFromWorldXZ(worldX, worldZ)\n        if (!surface) return 0\n        return surface.getFloorHeight(worldX, worldZ)\n    }\n\n    getTerrainHeight(worldX: number, worldZ: number): number {\n        const raycaster = new Raycaster(new Vector3(Number(worldX), 3 * TILESIZE, Number(worldZ)), new Vector3(0, -1, 0))\n        const intersect = raycaster.intersectObject(this.sceneManager.terrain.floorGroup, true)\n        if (intersect.length > 0) {\n            return intersect[0].point.y\n        } else {\n            console.warn('could not determine terrain height for ' + worldX + '/' + worldZ)\n            return 0\n        }\n    }\n\n    addCollectable(collectable: CollectableEntity, world: Vector2) {\n        collectable.worldMgr = this\n        collectable.group.position.set(world.x, this.getFloorHeight(world.x, world.y), world.y)\n        collectable.group.visible = this.sceneManager.terrain.getSurfaceFromWorld(collectable.group.position).discovered\n        this.sceneManager.scene.add(collectable.group)\n        if (collectable.group.visible) {\n            GameState.collectables.push(collectable)\n            EventBus.publishEvent(new JobCreateEvent(new CollectJob(collectable)))\n        } else {\n            GameState.collectablesUndiscovered.push(collectable)\n        }\n        return collectable\n    }\n\n    checkSpawnRaiders() {\n        if (GameState.requestedRaiders < 1) {\n            this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n            return\n        }\n        if (GameState.raiders.length >= GameState.getMaxRaiders()) return\n        const spawnBuildings = GameState.getBuildingsByType(Building.TOOLSTATION, Building.TELEPORT_PAD).filter((b) => !b.spawning)\n        for (let c = 0; c < spawnBuildings.length && GameState.requestedRaiders > 0; c++) {\n            GameState.requestedRaiders--\n            EventBus.publishEvent(new RaiderRequested())\n            const station = spawnBuildings[c]\n            station.spawning = true\n            const raider = new Raider()\n            raider.worldMgr = this\n            raider.changeActivity(RaiderActivity.TeleportIn, () => {\n                station.spawning = false\n                raider.changeActivity()\n                raider.createPickSphere()\n                const walkOutPos = station.getPosition2D().add(new Vector2(0, TILESIZE * 3 / 4 + getRandom(TILESIZE / 2))\n                    .rotateAround(new Vector2(0, 0), station.getHeading() + degToRad(-10 + getRandom(20))))\n                raider.setJob(new MoveJob(walkOutPos))\n                GameState.raiders.push(raider)\n                EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, raider))\n            })\n            raider.group.position.copy(station.group.position).add(new Vector3(0, 0, TILESIZE / 2).applyEuler(station.group.rotation))\n            raider.group.rotation.copy(station.group.rotation)\n            this.sceneManager.scene.add(raider.group)\n        }\n    }\n\n    updateOxygen() {\n        const sum = GameState.raiders.map((r) => r.stats.OxygenCoef).reduce((l, r) => l + r, 0) +\n            GameState.buildings.map((b) => b.stats.OxygenCoef).reduce((l, r) => l + r, 0)\n        const rateMultiplier = 0.001\n        const valuePerSecond = 1 / 25\n        const msToSeconds = 0.001\n        const diff = sum * GameState.oxygenRate * rateMultiplier * valuePerSecond * UPDATE_OXYGEN_TIMER * msToSeconds / 10\n        if (diff) {\n            GameState.airlevel = Math.min(1, Math.max(0, GameState.airlevel + diff))\n            EventBus.publishEvent(new AirLevelChanged())\n        }\n    }\n\n}\n","import { ScreenLayer } from '../../screen/ScreenLayer'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { WorldManager } from '../../scene/WorldManager'\n\nexport class SelectionLayer extends ScreenLayer {\n\n    worldManager: WorldManager\n    selectStart: { x: number, y: number } = null\n\n    constructor() {\n        super(true)\n    }\n\n    reset() {\n        super.reset()\n        this.selectStart = null\n    }\n\n    setWorldManager(worldManager: WorldManager) {\n        this.worldManager = worldManager\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        if (eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.startSelection(cx, cy)\n        } else if (eventEnum === POINTER_EVENT.MOVE) {\n            return this.changeSelection(cx, cy)\n        } else if (eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.selectEntities(cx, cy)\n        }\n        return false\n    }\n\n    startSelection(screenX: number, screenY: number) {\n        this.selectStart = {x: screenX, y: screenY}\n        return true\n    }\n\n    changeSelection(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        this.context.strokeStyle = 'rgba(128, 192, 192, 0.5)'\n        this.context.lineWidth = 2\n        this.context.strokeRect(this.selectStart.x, this.selectStart.y, screenX - this.selectStart.x, screenY - this.selectStart.y)\n        return true\n    }\n\n    selectEntities(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        const r1x = (this.selectStart.x / this.canvas.width) * 2 - 1\n        const r1y = -(this.selectStart.y / this.canvas.height) * 2 + 1\n        const r2x = (screenX / this.canvas.width) * 2 - 1\n        const r2y = -(screenY / this.canvas.height) * 2 + 1\n        if (Math.abs(screenX - this.selectStart.x) < 5 && Math.abs(screenY - this.selectStart.y) < 5) {\n            const x = (this.selectStart.x + screenX) / this.canvas.width - 1\n            const y = -(this.selectStart.y + screenY) / this.canvas.height + 1\n            this.worldManager.sceneManager.selectEntitiesByRay(x, y)\n        } else {\n            this.worldManager.sceneManager.selectEntitiesInFrustum(r1x, r1y, r2x, r2y)\n        }\n        this.selectStart = null\n        return true\n    }\n\n}\n","import { SurfaceJob } from './SurfaceJob'\nimport { JobType } from '../JobType'\nimport { Surface } from '../../../../scene/model/map/Surface'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { RaiderTool } from '../../../../scene/model/RaiderTool'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class DrillJob extends SurfaceJob {\n\n    constructor(surface: Surface) {\n        super(JobType.DRILL, surface)\n        this.color = 0xa0a0a0\n        this.requiredTool = RaiderTool.DRILL\n        this.surface = surface\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.surface.getDigPositions().map((p) => new PathTarget(p))\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.collapse()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityDestruction\n    }\n\n}\n","import { SurfaceJob } from './SurfaceJob'\nimport { JobType } from '../JobType'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { RaiderTool } from '../../../../scene/model/RaiderTool'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { Surface } from '../../../../scene/model/map/Surface'\n\nexport class ClearRubbleJob extends SurfaceJob {\n\n    constructor(surface: Surface) {\n        super(JobType.CLEAR_RUBBLE, surface)\n        this.requiredTool = RaiderTool.SHOVEL\n        this.surface = surface\n    }\n\n    getWorkplaces(): PathTarget[] {\n        const rubblePositions = this.surface.rubblePositions\n        return rubblePositions.length > 0 ? [new PathTarget(rubblePositions[0])] : [] // use first (no need to optimize)\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.reduceRubble()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityClearing\n    }\n\n}\n","import { ScreenLayer } from '../../screen/ScreenLayer'\nimport { WorldManager } from '../../scene/WorldManager'\nimport { SelectionType } from '../model/Selectable'\nimport { GameState } from '../model/GameState'\nimport { Raider } from '../../scene/model/Raider'\nimport { EventBus } from '../../event/EventBus'\nimport { JobCreateEvent } from '../../event/WorldEvents'\nimport { Surface } from '../../scene/model/map/Surface'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { FulfillerEntity } from '../../scene/model/FulfillerEntity'\nimport { SurfaceJob } from '../model/job/surface/SurfaceJob'\nimport { KEY_EVENT, MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { DEV_MODE } from '../../main'\nimport { MoveJob } from '../model/job/MoveJob'\nimport { Vector2 } from 'three'\nimport { DrillJob } from '../model/job/surface/DrillJob'\nimport { ClearRubbleJob } from '../model/job/surface/ClearRubbleJob'\n\nexport class GameLayer extends ScreenLayer {\n\n    private worldMgr: WorldManager\n    private rightDown: { x: number, y: number } = {x: 0, y: 0}\n\n    constructor() {\n        super(false, false)\n    }\n\n    reset() {\n        super.reset()\n        this.rightDown = {x: 0, y: 0}\n    }\n\n    setWorldManager(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (eventEnum === POINTER_EVENT.MOVE) {\n            const intersectionPoint = this.getTerrainPositionFromEvent(event)\n            if (intersectionPoint) this.worldMgr.setTorchPosition(intersectionPoint)\n        } else if (eventEnum === POINTER_EVENT.UP && event.button === MOUSE_BUTTON.SECONDARY) {\n            const downUpDistance = Math.abs(event.x - this.rightDown.x) + Math.abs(event.y - this.rightDown.y)\n            if (downUpDistance < 3 && (GameState.selectionType === SelectionType.PILOT || GameState.selectionType === SelectionType.GROUP)) {\n                // TODO check for collectable entity first\n                const intersectionPoint = this.getTerrainPositionFromEvent(event)\n                if (intersectionPoint) {\n                    const surface = this.worldMgr.sceneManager.terrain.getSurfaceFromWorldXZ(intersectionPoint.x, intersectionPoint.y)\n                    if (surface) {\n                        if (surface.isDrillable()) {\n                            this.createSurfaceJob(new DrillJob(surface), surface, intersectionPoint)\n                        } else if (surface.hasRubble()) {\n                            this.createSurfaceJob(new ClearRubbleJob(surface), surface, intersectionPoint)\n                        } else if (surface.isWalkable()) {\n                            GameState.selectedEntities.forEach((raider: Raider) => raider.setJob(new MoveJob(intersectionPoint)))\n                            if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n                        }\n                    }\n                }\n            }\n        } else if (eventEnum === POINTER_EVENT.DOWN && event.button === MOUSE_BUTTON.SECONDARY) {\n            this.rightDown.x = event.x\n            this.rightDown.y = event.y\n        }\n        this.canvas.dispatchEvent(event)\n        return true\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        if (DEV_MODE && eventEnum === KEY_EVENT.UP) {\n            if (GameState.selectionType === SelectionType.SURFACE) {\n                GameState.selectedEntities.forEach((s: Surface) => {\n                    if (event.key === 'c') {\n                        if (!s.surfaceType.floor) s.collapse()\n                    } else if (event.key === 'f') {\n                        const t = s.terrain.findFallInTarget(s.x, s.y)\n                        if (!s.surfaceType.floor) s.createFallin(t[0], t[1])\n                    }\n                })\n                EventBus.publishEvent(new EntityDeselected())\n                return true\n            }\n        }\n        return false\n    }\n\n    createSurfaceJob(surfJob: SurfaceJob, surface: Surface, intersectionPoint: Vector2) {\n        GameState.selectedEntities.forEach((e: FulfillerEntity) => {\n            if (surfJob.isQualified(e)) {\n                e.setJob(surfJob)\n            } else if (surface.isWalkable()) {\n                e.setJob(new MoveJob(intersectionPoint))\n            }\n        })\n        EventBus.publishEvent(new JobCreateEvent(surfJob))\n        surface.updateJobColor()\n        if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n    }\n\n    getTerrainPositionFromEvent(event): Vector2 {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        const intersectionPoint = this.worldMgr.getTerrainIntersectionPoint(rx, ry)\n        return intersectionPoint ? new Vector2(intersectionPoint.x, intersectionPoint.z) : null\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        this.canvas.dispatchEvent(event)\n        return true\n    }\n\n}\n","export class BaseElement {\n\n    parent: BaseElement = null\n    x: number = 0\n    y: number = 0\n    relX: number = 0\n    relY: number = 0\n    width: number = 0\n    height: number = 0\n    children: BaseElement[] = []\n    hidden: boolean = false\n    disabled: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n\n    constructor(parent: BaseElement = null) {\n        this.parent = parent\n    }\n\n    reset() {\n        this.hidden = false\n        this.disabled = false\n        this.hover = false\n        this.pressed = false\n        this.children.forEach((c) => c.reset())\n    }\n\n    addChild<T extends BaseElement>(child: T): T {\n        child.parent = this\n        this.children.push(child)\n        child.updatePosition()\n        return child\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n    }\n\n    drawTooltip(context: CanvasRenderingContext2D) {\n    }\n\n    onClick() {\n    }\n\n    isInactive(): boolean {\n        for (let parent = this.parent; !!parent; parent = parent.parent) if (parent.isInactive()) return true\n        return this.hidden || this.disabled\n    }\n\n    hide() {\n        this.hidden = true\n        this.children.forEach((child) => child.hide())\n    }\n\n    show() {\n        this.hidden = false\n        this.children.forEach((child) => child.show())\n    }\n\n    updatePosition() {\n        this.x = this.parent ? this.parent.x + this.relX : this.relX\n        this.y = this.parent ? this.parent.y + this.relY : this.relY\n        this.children.forEach((child) => child.updatePosition())\n    }\n\n    isInRect(cx, cy) {\n        return cx >= this.x && cy >= this.y && cx < this.x + this.width && cy < this.y + this.height\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = this.pressed && this.hover\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => stateChanged = child.checkHover(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.pressed !== inRect\n        this.pressed = inRect\n        this.children.forEach((child) => stateChanged = child.checkClick(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        if (inRect && this.pressed) this.onClick()\n        let stateChanged = false\n        this.children.forEach((child) => stateChanged = child.checkRelease(cx, cy) || stateChanged)\n        stateChanged = this.pressed || stateChanged\n        this.pressed = false\n        return stateChanged\n    }\n\n    release(): boolean {\n        let stateChanged = this.pressed || this.hover\n        this.pressed = false\n        this.hover = false\n        this.children.forEach((child) => stateChanged = child.release() || stateChanged)\n        return stateChanged\n    }\n\n    notifyRedraw() {\n        if (this.parent) this.parent.notifyRedraw()\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\nimport { NATIVE_FRAMERATE, PANEL_ANIMATION_MULTIPLIER } from '../../../main'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { clearTimeoutSafe } from '../../../core/Util'\n\nexport class Panel extends BaseElement {\n\n    img: HTMLCanvasElement = null\n    xOut: number = 0\n    yOut: number = 0\n    xIn: number = 0\n    yIn: number = 0\n    animationTimeout = null\n    movedIn: boolean = true // xIn, yIn is the collapsed position out of screen\n\n    constructor(panelCfg?: PanelCfg) {\n        super()\n        if (panelCfg) {\n            this.img = ResourceManager.getImage(panelCfg.filename)\n            this.xOut = panelCfg.xOut\n            this.yOut = panelCfg.yOut\n            this.xIn = panelCfg.xIn\n            this.yIn = panelCfg.yIn\n            this.relX = this.xIn\n            this.relY = this.yIn\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.relX = this.xIn\n        this.relY = this.yIn\n        this.movedIn = true\n        this.updatePosition()\n    }\n\n    isInactive(): boolean {\n        return this.animationTimeout || super.isInactive()\n    }\n\n    setMovedIn(movedIn: boolean, onDone: () => any = null) {\n        if (this.movedIn !== movedIn) {\n            this.toggleState(onDone)\n        } else if (onDone) {\n            onDone()\n        }\n    }\n\n    toggleState(onDone: () => any = null) {\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        if (this.movedIn) {\n            this.movedIn = false\n            this.updateAnimation(this.xOut, this.yOut, PANEL_ANIMATION_MULTIPLIER, onDone)\n        } else {\n            this.movedIn = true\n            this.updateAnimation(this.xIn, this.yIn, PANEL_ANIMATION_MULTIPLIER, onDone)\n        }\n    }\n\n    protected updateAnimation(targetX: number, targetY: number, speed: number, onDone: () => any) {\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= speed && Math.abs(diffY) <= speed) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * speed)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * speed)\n            const panel = this\n            this.animationTimeout = setTimeout(() => panel.updateAnimation(targetX, targetY, speed, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.img) context.drawImage(this.img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class Button extends BaseElement {\n\n    buttonType: string = null\n    imgNormal: HTMLCanvasElement = null\n    imgHover: HTMLCanvasElement = null\n    imgPressed: HTMLCanvasElement = null\n    imgDisabled: HTMLCanvasElement = null\n    tooltip: string = null\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent)\n        this.buttonType = btnCfg.buttonType\n        this.imgNormal = ResourceManager.getImageOrNull(btnCfg.normalFile)\n        this.imgHover = ResourceManager.getImageOrNull(btnCfg.highlightFile)\n        this.imgPressed = ResourceManager.getImageOrNull(btnCfg.pressedFile)\n        this.imgDisabled = ResourceManager.getImageOrNull(btnCfg.disabledFile)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width || this.imgNormal?.width || this.imgPressed?.width\n        this.height = btnCfg.height || this.imgNormal?.height || this.imgPressed?.height\n        this.tooltip = btnCfg.tooltip?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.updatePosition()\n    }\n\n    onClick() {\n        console.log('button pressed: ' + this.buttonType)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled || this.imgPressed || this.imgNormal\n        } else if (this.pressed) {\n            img = this.imgPressed || this.imgNormal\n        } else if (this.hover) {\n            img = this.imgHover || this.imgNormal\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { BaseElement } from '../base/BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class SideBarLabel extends BaseElement {\n\n    tooltip: string\n    label: string\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg, label: string) {\n        super(parent)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width\n        this.height = btnCfg.height\n        this.tooltip = btnCfg.tooltip\n        this.label = label\n        this.updatePosition()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.textAlign = 'center'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.label, this.x + this.width / 2, this.y + this.height - 2)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { GameState } from '../../model/GameState'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { MaterialAmountChanged } from '../../../event/WorldEvents'\nimport { CollectableType } from '../../../scene/model/collect/CollectableEntity'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { SideBarLabel } from './SideBarLabel'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class PanelCrystalSideBar extends Panel {\n\n    labelOre: SideBarLabel\n    labelCrystal: SideBarLabel\n    imgNoCrystal: HTMLCanvasElement\n    imgSmallCrystal: HTMLCanvasElement\n    imgUsedCrystal: HTMLCanvasElement\n    imgOre: HTMLCanvasElement\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonCrystalSideBarCfg) {\n        super(panelCfg)\n        this.labelOre = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarOre, GameState.totalOre.toString()))\n        this.labelCrystal = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarCrystals, GameState.numCrystal.toString()))\n        this.imgNoCrystal = ResourceManager.getImage('Interface/RightPanel/NoSmallCrystal.bmp')\n        this.imgSmallCrystal = ResourceManager.getImage('Interface/RightPanel/SmallCrystal.bmp')\n        this.imgUsedCrystal = ResourceManager.getImage('Interface/RightPanel/UsedCrystal.bmp')\n        this.imgOre = ResourceManager.getImage('Interface/RightPanel/CrystalSideBar_Ore.bmp')\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, (event: MaterialAmountChanged) => {\n            this.updateQuantities(event.collectableType)\n        })\n    }\n\n    updateQuantities(type: CollectableType) {\n        if (type === CollectableType.CRYSTAL || type === CollectableType.ORE || type === CollectableType.BRICK) {\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        this.labelOre.label = GameState.totalOre.toString()\n        this.labelCrystal.label = GameState.numCrystal.toString()\n        super.onRedraw(context)\n        // draw crystals\n        let curX = this.x + this.img.width - 8\n        let curY = this.y + this.img.height - 34\n        for (let c = 0; (GameState.neededCrystals < 1 || c < Math.max(GameState.neededCrystals, GameState.numCrystal)) && curY >= Math.max(this.imgNoCrystal.height, this.imgSmallCrystal.height, this.imgUsedCrystal.height); c++) {\n            let imgCrystal = this.imgNoCrystal\n            if (GameState.usedCrystals > c) {\n                imgCrystal = this.imgUsedCrystal\n            } else if (GameState.numCrystal > c) {\n                imgCrystal = this.imgSmallCrystal\n            }\n            curY -= imgCrystal.height\n            context.drawImage(imgCrystal, curX - imgCrystal.width / 2, curY)\n        }\n        // draw ores\n        curX = this.x + this.img.width - 21\n        curY = this.y + this.img.height - 42\n        for (let i = 0; i < GameState.numOre && curY >= this.imgOre.height; ++i) {\n            curY -= this.imgOre.height\n            context.drawImage(this.imgOre, curX - this.imgOre.width / 2, curY)\n        }\n    }\n\n}\n\nexport class ButtonCrystalSideBarCfg extends BaseConfig {\n\n    panelButtonCrystalSideBarOre: ButtonCfg = null\n    panelButtonCrystalSideBarCrystals: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonInfoDockCfg extends BaseConfig {\n\n    panelButtonInfoDockGoto: ButtonCfg = null\n    panelButtonInfoDockClose: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonPriorityListCfg extends BaseConfig {\n\n    panelButtonPriorityListDisable: ButtonCfg[] = []\n    panelButtonPriorityListUpOne: ButtonCfg[] = []\n    panelButtonPriorityListClose: ButtonCfg = null // not used in the game\n    panelButtonPriorityListReset: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName.match(/panelButtonPriorityListDisable\\d+/i)) {\n            this.panelButtonPriorityListDisable.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else if (lCfgKeyName.match(/panelButtonPriorityListUpOne\\d+/i)) {\n            this.panelButtonPriorityListUpOne.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else {\n            return super.assignValue(objKey, lCfgKeyName, cfgValue)\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonTopCfg extends BaseConfig {\n\n    panelButtonTopPanelCallToArms: ButtonCfg = null\n    panelButtonTopPanelOptions: ButtonCfg = null\n    panelButtonTopPanelPriorities: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ButtonRadarCfg } from '../game/gui/radar/RadarPanel'\nimport { ButtonCrystalSideBarCfg } from '../game/gui/sidebar/PanelCrystalSideBar'\nimport { ButtonInfoDockCfg } from '../game/gui/infodock/ButtonInfoDockCfg'\nimport { ButtonPriorityListCfg } from '../game/gui/toppanel/ButtonPriorityListCfg'\nimport { ButtonTopCfg } from '../game/gui/toppanel/ButtonTopCfg'\n\nexport class ButtonsCfg extends BaseConfig {\n\n    panelRadar: ButtonRadarCfg = null\n    panelCrystalSideBar: ButtonCrystalSideBarCfg = null\n    panelTopPanel: ButtonTopCfg = null\n    panelInformation: ButtonInformationCfg = null\n    panelPriorityList: ButtonPriorityListCfg = null\n    panelCameraControl: ButtonCameraControlCfg = null\n    panelInfoDock: ButtonInfoDockCfg = null\n    panelEncyclopedia: any = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        const btnCfgValue = {}\n        cfgValue.forEach(arr => btnCfgValue[arr[0]] = arr)\n        if (lCfgKeyName === 'panelRadar'.toLowerCase()) {\n            return new ButtonRadarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCrystalSideBar'.toLowerCase()) {\n            return new ButtonCrystalSideBarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelTopPanel'.toLowerCase()) {\n            return new ButtonTopCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInformation'.toLowerCase()) {\n            return new ButtonInformationCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelPriorityList'.toLowerCase()) {\n            return new ButtonPriorityListCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCameraControl'.toLowerCase()) {\n            return new ButtonCameraControlCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInfoDock'.toLowerCase()) {\n            return new ButtonInfoDockCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelEncyclopedia'.toLowerCase()) {\n            return null // not used in the game\n        } else {\n            return btnCfgValue\n        }\n    }\n\n}\n\nexport class ButtonInformationCfg extends BaseConfig {\n\n    panelButtonInformationToggle: ButtonCfg = null\n    panelButtonInformationFunction: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n\nexport class ButtonCameraControlCfg extends BaseConfig {\n\n    panelButtonCameraControlZoomIn: ButtonCfg = null\n    panelButtonCameraControlZoomOut: ButtonCfg = null\n    panelButtonCameraControlCycleBuildings: ButtonCfg = null\n    panelButtonCameraControlRotate: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n\nexport class BaseButtonCfg {\n\n    buttonType?: string = null\n    normalFile?: string = null\n    highlightFile?: string = null\n    pressedFile?: string = null\n    disabledFile?: string = null\n    relX?: number = 0\n    relY?: number = 0\n    width?: number = 0\n    height?: number = 0\n    tooltip?: string = null\n}\n\nexport class ButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 9) {\n            [this.buttonType, this.normalFile, this.highlightFile, this.pressedFile, this.relX, this.relY, this.width, this.height, this.tooltip] = cfgValue\n        } else {\n            throw 'Invalid number of arguments (' + cfgValue.length + ') given for button configuration expected 9 or 5'\n        }\n    }\n\n}\n\nexport class InfoButtonCfg extends BaseButtonCfg {\n\n    constructor(buttonImageFilename: string) {\n        super()\n        this.normalFile = buttonImageFilename\n        this.highlightFile = buttonImageFilename\n        this.pressedFile = buttonImageFilename\n        this.disabledFile = buttonImageFilename\n        this.relX = 0\n        this.relY = 0\n    }\n\n}\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { BaseConfig } from '../../../cfg/BaseConfig'\n\nexport class RadarPanel extends Panel {\n\n    fill: Panel\n    overlay: Panel\n    btnToggle: Button\n    btnMap: Button\n    btnTagged: Button\n\n    constructor(panelCfg: PanelCfg, panelFillCfg: PanelCfg, panelOverlayCfg: PanelCfg, buttonsCfg: ButtonRadarCfg) {\n        super(panelCfg)\n        this.fill = this.addChild(new Panel(panelFillCfg))\n        // fill cords given in abs, turn to rel (otherwise animation wont work)\n        this.fill.relX = this.relX - this.fill.relX\n        this.fill.relY = this.relY - this.fill.relY\n        this.overlay = this.addChild(new Panel(panelOverlayCfg))\n        // this.overlay.hide();\n        this.btnToggle = this.addChild(new Button(this, buttonsCfg.panelButtonRadarToggle))\n        this.btnToggle.onClick = () => this.toggleState()\n        this.btnMap = this.addChild(new Button(this, buttonsCfg.panelButtonRadarMapView))\n        this.btnMap.onClick = () => {\n            // this.fill.hide();\n            // this.overlay.hide();\n        }\n        this.btnTagged = this.addChild(new Button(this, buttonsCfg.panelButtonRadarTaggedObjectView))\n        this.btnTagged.onClick = () => {\n            // this.fill.show();\n            // this.overlay.show(); // TODO only show overlay, when entity selected\n        }\n    }\n\n}\n\nexport class ButtonRadarCfg extends BaseConfig {\n\n    panelButtonRadarToggle: ButtonCfg = null\n    panelButtonRadarTaggedObjectView: ButtonCfg = null\n    panelButtonRadarZoomIn: ButtonCfg = null\n    panelButtonRadarZoomOut: ButtonCfg = null\n    panelButtonRadarMapView: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class TextInfoMessage {\n\n    infoImage\n    textImage\n\n    constructor(font: BitmapFont, infoMessageEntryConfig: TextInfoMessageEntryConfig, maxWidth: number) {\n        this.textImage = font.createTextImage(infoMessageEntryConfig.text, maxWidth)\n        this.infoImage = ResourceManager.getImageOrNull(infoMessageEntryConfig.imageFilename)\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { GameState } from '../../model/GameState'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { TextInfoMessageConfig } from './TextInfoMessageConfig'\nimport { EventBus } from '../../../event/EventBus'\nimport { TextInfoMessage } from './TextInfoMessage'\nimport { clearTimeoutSafe } from '../../../core/Util'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class MessagePanel extends Panel {\n\n    imgAir: HTMLCanvasElement = null\n    currentMessage: TextInfoMessage = null\n    messageTimeout = null\n\n    msgSpaceToContinue: TextInfoMessage\n    msgAirSupplyLow: TextInfoMessage\n    msgAirSupplyRunningOut: TextInfoMessage\n    msgGameCompleted: TextInfoMessage\n    msgManTrained: TextInfoMessage\n    msgUnitUpgraded: TextInfoMessage\n\n    constructor(panelCfg: PanelCfg, textInfoMessageConfig: TextInfoMessageConfig) {\n        super(panelCfg)\n        this.relX = this.xOut = this.xIn = 42\n        this.relY = this.yOut = this.yIn = 409\n        this.imgAir = ResourceManager.getImage('Interface/Airmeter/msgpanel_air_juice.bmp')\n\n        const font = ResourceManager.getDefaultFont()\n        const crystalFound = new TextInfoMessage(font, textInfoMessageConfig.textCrystalFound, this.img.width)\n        EventBus.registerEventListener(EventKey.LOCATION_CRYSTAL_FOUND, () => this.setMessage(crystalFound))\n        this.msgSpaceToContinue = new TextInfoMessage(font, textInfoMessageConfig.textSpaceToContinue, this.img.width)\n        const cavernDiscovered = new TextInfoMessage(font, textInfoMessageConfig.textCavernDiscovered, this.img.width)\n        EventBus.registerEventListener(EventKey.CAVERN_DISCOVERED, () => this.setMessage(cavernDiscovered))\n        const oreFound = new TextInfoMessage(font, textInfoMessageConfig.textOreFound, this.img.width)\n        EventBus.registerEventListener(EventKey.ORE_FOUND, () => this.setMessage(oreFound))\n        this.msgAirSupplyLow = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyLow, this.img.width)\n        this.msgAirSupplyRunningOut = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyRunningOut, this.img.width)\n        this.msgGameCompleted = new TextInfoMessage(font, textInfoMessageConfig.textGameCompleted, this.img.width)\n        this.msgManTrained = new TextInfoMessage(font, textInfoMessageConfig.textManTrained, this.img.width)\n        EventBus.registerEventListener(EventKey.RAIDER_TRAINED, () => this.setMessage(this.msgManTrained))\n        this.msgUnitUpgraded = new TextInfoMessage(font, textInfoMessageConfig.textUnitUpgraded, this.img.width)\n        EventBus.registerEventListener(EventKey.AIR_LEVEL_CHANGED, () => this.notifyRedraw())\n    }\n\n    setMessage(textInfoMessage: TextInfoMessage, timeout: number = 3000) {\n        this.messageTimeout = clearTimeoutSafe(this.messageTimeout)\n        this.currentMessage = textInfoMessage\n        this.notifyRedraw()\n        if (timeout) {\n            const that = this\n            this.messageTimeout = setTimeout(() => {\n                that.currentMessage = null\n                that.notifyRedraw()\n            }, timeout)\n        }\n    }\n\n    unsetMessage(textInfoMessage: TextInfoMessage) {\n        if (this.currentMessage === textInfoMessage) {\n            this.currentMessage = null\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (GameState.airlevel > 0) {\n            const width = Math.round(236 * Math.min(1, GameState.airlevel))\n            context.drawImage(this.imgAir, this.x + 85, this.y + 6, width, 8)\n        }\n        const textImage = this.currentMessage?.textImage\n        const infoImage = this.currentMessage?.infoImage\n        if (textImage) {\n            const txtX = this.x + (this.img.width - textImage.width - (infoImage ? infoImage.width : 0)) / 2\n            context.drawImage(textImage, txtX, this.y + 26)\n        }\n        if (infoImage) {\n            const infoX = this.x + this.img.width - infoImage.width\n            context.drawImage(infoImage, infoX, this.y + 16)\n        }\n    }\n\n}\n","import { BaseButtonCfg } from './ButtonsCfg'\n\nexport class IconPanelBackButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super();\n        [this.width, this.height, this.highlightFile, this.pressedFile, this.tooltip] = cfgValue // Interface back button\n        this.relX = 4\n        this.relY = 14\n    }\n\n}\n","import { BaseButtonCfg } from './ButtonsCfg'\n\nexport class MenuItemCfg extends BaseButtonCfg {\n\n    tooltipSfx: string = null\n    tooltipDisabled: string = null\n    tooltipDisabledSfx: string = null\n    hotkey: string = null\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 4) {\n            [this.normalFile, this.disabledFile, this.pressedFile, this.hotkey] = cfgValue\n        } else if (cfgValue.length === 6) {\n            let tooltip, tooltipDisabled\n            [this.normalFile, this.disabledFile, this.pressedFile, tooltip, tooltipDisabled, this.hotkey] = cfgValue\n            if (tooltip) {\n                if (Array.isArray(tooltip)) {\n                    [this.tooltip, this.tooltipSfx] = tooltip\n                } else {\n                    this.tooltip = tooltip\n                }\n            }\n            if (tooltipDisabled) {\n                if (Array.isArray(tooltipDisabled)) {\n                    [this.tooltipDisabled, this.tooltipDisabledSfx] = tooltipDisabled\n                } else {\n                    this.tooltipDisabled = tooltipDisabled\n                }\n            }\n        }\n        this.tooltip?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.tooltipDisabled?.replace(/_/g, ' ') // TODO refactor cfg handling\n        this.width = 40\n        this.height = 40\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\n\nexport class IconPanelButton extends Button {\n\n    tooltipSfx: string = null\n    tooltipDisabled: string = null\n    tooltipDisabledSfx: string = null\n    hotkey: string = null\n    isDisabled: () => boolean = () => this.disabled\n\n    constructor(parent: BaseElement, menuItemCfg: MenuItemCfg, itemKey: string, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemCfg)\n        this.buttonType = itemKey\n        this.relX = parentWidth - 59\n        this.relY = 9 + this.height * menuIndex\n        this.tooltipSfx = menuItemCfg.tooltipSfx\n        this.tooltipDisabled = menuItemCfg.tooltipDisabled\n        this.tooltipDisabledSfx = menuItemCfg.tooltipDisabledSfx\n        this.hotkey = menuItemCfg.hotkey\n        this.disabled = true\n    }\n\n    reset() {\n        super.reset()\n        this.disabled = true\n        this.updateState(false)\n    }\n\n    onClick() {\n        console.log('menu item pressed: ' + this.buttonType)\n    }\n\n    updateState(autoRedraw: boolean = true) {\n        const targetState = !!this.isDisabled()\n        const stateChanged = this.disabled !== targetState\n        this.disabled = targetState\n        if (stateChanged && autoRedraw) this.notifyRedraw()\n        return stateChanged\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n        super.drawHover(context)\n        if (!this.disabled && this.hover) {\n            context.strokeStyle = '#0f0'\n            context.lineWidth = 2\n            context.strokeRect(this.x - context.lineWidth / 2, this.y - context.lineWidth / 2, this.width + context.lineWidth - 1, this.height + context.lineWidth - 1)\n        }\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { Button } from '../base/Button'\nimport { IconPanelBackButtonCfg } from '../../../cfg/IconPanelBackButtonCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class IconSubPanel extends Panel {\n\n    backBtn: Button = null\n    iconPanelButtons: IconPanelButton[] = []\n\n    constructor(numOfItems, onBackPanel: Panel = null) {\n        super()\n        if (onBackPanel) {\n            const backBtnCfg = new IconPanelBackButtonCfg(ResourceManager.cfg('InterfaceBackButton'))\n            this.backBtn = this.addChild(new Button(this, backBtnCfg))\n            this.backBtn.onClick = () => this.toggleState(() => onBackPanel.toggleState())\n        }\n        const frameImgCfg = ResourceManager.cfg('InterfaceSurroundImages', numOfItems.toString())\n        // noinspection JSUnusedLocalSymbols\n        const [imgName, val1, val2, val3, val4, imgNameWoBackName, woBack1, woBack2] = frameImgCfg\n        this.img = onBackPanel ? ResourceManager.getImage(imgName) : ResourceManager.getImage(imgNameWoBackName)\n        this.xOut = -this.img.width\n    }\n\n    addMenuItem(menuItemGroup: string, itemKey: string) {\n        const menuItemCfg = new MenuItemCfg(ResourceManager.cfg(menuItemGroup, itemKey))\n        const menuItem = this.addChild(new IconPanelButton(this, menuItemCfg, itemKey, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(menuItem)\n        return menuItem\n    }\n\n    toggleState(onDone: () => any = null) {\n        super.toggleState(onDone)\n        if (!this.movedIn) this.iconPanelButtons.forEach((button) => button.updateState())\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\n\nexport class BuildingPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Toolstation')\n        this.addMenuItem('InterfaceBuildImages', 'TeleportPad')\n        this.addMenuItem('InterfaceBuildImages', 'Docks')\n        this.addMenuItem('InterfaceBuildImages', 'Powerstation')\n        this.addMenuItem('InterfaceBuildImages', 'Barracks')\n        this.addMenuItem('InterfaceBuildImages', 'Upgrade')\n        this.addMenuItem('InterfaceBuildImages', 'Geo-dome')\n        this.addMenuItem('InterfaceBuildImages', 'OreRefinery')\n        this.addMenuItem('InterfaceBuildImages', 'Gunstation')\n        this.addMenuItem('InterfaceBuildImages', 'TeleportBIG')\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class SmallVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Hoverboard')\n        this.addMenuItem('InterfaceBuildImages', 'SmallDigger')\n        this.addMenuItem('InterfaceBuildImages', 'SmallTruck')\n        this.addMenuItem('InterfaceBuildImages', 'SmallCat')\n        this.addMenuItem('InterfaceBuildImages', 'SmallMLP')\n        this.addMenuItem('InterfaceBuildImages', 'SmallHeli')\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\n\nexport class LargeVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(5, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'BullDozer')\n        this.addMenuItem('InterfaceBuildImages', 'WalkerDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeMLP')\n        this.addMenuItem('InterfaceBuildImages', 'LargeDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeCat')\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\n\nexport class SelectBasePanel extends IconSubPanel {\n\n    constructor(numOfItems, onBackPanel: Panel) {\n        super(numOfItems, onBackPanel)\n        this.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected())\n    }\n\n}\n","import { SurfaceJob } from './SurfaceJob'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { RaiderTool } from '../../../../scene/model/RaiderTool'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { Surface } from '../../../../scene/model/map/Surface'\n\nexport class ReinforceJob extends SurfaceJob {\n\n    constructor(surface: Surface) {\n        super(JobType.REINFORCE, surface)\n        this.color = 0x60a060\n        this.colorPriority = 1\n        this.requiredTool = RaiderTool.HAMMER\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.surface.getDigPositions().map((p) => new PathTarget(p))\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.reinforce()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityReinforce\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { SurfaceJob } from '../../model/job/surface/SurfaceJob'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent, SpawnDynamiteEvent } from '../../../event/WorldEvents'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { IconPanelButton } from './IconPanelButton'\nimport { Building } from '../../model/entity/building/Building'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { JobType } from '../../model/job/JobType'\nimport { DrillJob } from '../../model/job/surface/DrillJob'\nimport { ReinforceJob } from '../../model/job/surface/ReinforceJob'\n\nexport class SelectWallPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        const itemDrill = this.addWallMenuItem('Interface_MenuItem_Dig', JobType.DRILL, (s) => new DrillJob(s))\n        itemDrill.isDisabled = () => !(GameState.selectedSurface?.isDrillable()) &&\n            !(GameState.selectedSurface?.isDrillableHard()) // TODO implement vehicle check for drill hard skill\n        const itemReinforce = this.addWallMenuItem('Interface_MenuItem_Reinforce', JobType.REINFORCE, (s) => new ReinforceJob(s))\n        itemReinforce.isDisabled = () => !(GameState.selectedSurface?.isReinforcable())\n        const itemDynamite = this.addWallMenuItem('Interface_MenuItem_Dynamite', JobType.BLOW, null)\n        itemDynamite.isDisabled = () => !GameState.hasBuildingWithUpgrades(Building.TOOLSTATION, 2) &&\n            !GameState.raiders.some((r) => r.hasSkill(RaiderSkill.DEMOLITION))\n        const itemDeselect = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeselectDig')\n        itemDeselect.isDisabled = () => false\n        itemDeselect.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.cancelJobs()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => {\n            itemDrill.updateState(false)\n            itemReinforce.updateState(false)\n            itemDynamite.updateState(false)\n            this.notifyRedraw()\n        })\n    }\n\n    addWallMenuItem(itemKey: string, jobType: JobType, createJob: (surface: Surface) => SurfaceJob): IconPanelButton {\n        const item = this.addMenuItem('InterfaceImages', itemKey)\n        item.onClick = () => {\n            const selectedSurface = GameState.selectedSurface\n            if (selectedSurface) {\n                if (jobType === JobType.BLOW) {\n                    EventBus.publishEvent(new SpawnDynamiteEvent(selectedSurface))\n                } else if (!selectedSurface.hasJobType(jobType)) {\n                    EventBus.publishEvent(new JobCreateEvent(createJob(selectedSurface)))\n                }\n                EventBus.publishEvent(new EntityDeselected())\n            }\n        }\n        return item\n    }\n\n}\n","import { CollectableEntity } from '../../../../scene/model/collect/CollectableEntity'\nimport { Surface } from '../../../../scene/model/map/Surface'\nimport { SurfaceType } from '../../../../scene/model/map/SurfaceType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { JobType } from '../JobType'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { SurfaceJob } from './SurfaceJob'\nimport { RaiderTool } from '../../../../scene/model/RaiderTool'\n\nexport class CompletePowerPathJob extends SurfaceJob {\n\n    placedItems: CollectableEntity[]\n    workplaces: PathTarget[]\n\n    constructor(surface: Surface, placedItems: CollectableEntity[]) {\n        super(JobType.COMPLETE_POWER_PATH, surface)\n        this.requiredTool = RaiderTool.SHOVEL\n        this.surface = surface\n        this.placedItems = placedItems\n        this.workplaces = [new PathTarget(surface.getRandomPosition())]\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.placedItems.forEach((placed) => placed.removeFromScene())\n        this.surface.surfaceType = SurfaceType.POWER_PATH\n        this.surface.updateTexture()\n        this.surface.neighbors.forEach((s) => s.updateTexture())\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityConstruction\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.workplaces\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { Surface } from './map/Surface'\nimport { CollectableEntity, CollectableType } from './collect/CollectableEntity'\nimport { EventBus } from '../../event/EventBus'\nimport { JobCreateEvent } from '../../event/WorldEvents'\nimport { CompletePowerPathJob } from '../../game/model/job/surface/CompletePowerPathJob'\nimport { GameState } from '../../game/model/GameState'\n\nexport class BuildingSite {\n\n    isPowerPath: boolean\n    surfaces: Surface[] = []\n    neededByType = {}\n    assignedByType = {}\n    onSiteByType = {}\n    complete: boolean = false\n\n    constructor(isPowerPath: boolean = false) {\n        this.isPowerPath = isPowerPath\n    }\n\n    getRandomDropPosition(): Vector2 {\n        return this.surfaces[0].getRandomPosition() // TODO use \"primary\" surface\n    }\n\n    needs(collectableType: CollectableType): boolean {\n        const needed = this.neededByType[collectableType] || 0\n        const assigned = (this.assignedByType[collectableType] || []).length\n        return needed > assigned\n    }\n\n    assign(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        this.assignedByType[collectableType] = this.assignedByType[collectableType] || []\n        this.assignedByType[collectableType].push(item)\n    }\n\n    unAssign(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        this.assignedByType[collectableType] = (this.assignedByType[collectableType] || [])\n        this.assignedByType[collectableType].splice(this.assignedByType[collectableType].indexOf(item), 1)\n    }\n\n    addItem(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        const needed = this.neededByType[collectableType] || 0\n        this.onSiteByType[collectableType] = this.onSiteByType[collectableType] || []\n        if (this.onSiteByType[collectableType].length < needed) {\n            item.worldMgr.sceneManager.scene.add(item.group)\n            this.onSiteByType[collectableType].push(item)\n            this.checkComplete()\n        } else {\n            item.resetTarget()\n        }\n    }\n\n    checkComplete() {\n        if (this.complete) return\n        let complete = true\n        Object.keys(this.neededByType).some((neededType) => {\n            const needed = this.neededByType[neededType] || 0\n            const onSite = (this.onSiteByType[neededType] || []).length\n            if (onSite < needed) {\n                complete = false\n                return true\n            }\n        })\n        if (complete) {\n            this.complete = complete\n            GameState.buildingSites.remove(this)\n            const items = []\n            Object.keys(this.onSiteByType).forEach((collectableType) => items.push(...this.onSiteByType[collectableType]))\n            if (this.isPowerPath) {\n                EventBus.publishEvent(new JobCreateEvent(new CompletePowerPathJob(this.surfaces[0], items)))\n            } else {\n                // TODO implement building spawning\n                console.log('Building site is complete')\n            }\n        }\n    }\n\n}\n","import { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { PriorityIdentifier } from '../../../game/model/job/PriorityIdentifier'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { LWOLoader } from '../../../resource/LWOLoader'\nimport { CollectPathTarget } from '../CollectionTarget'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { Surface } from '../map/Surface'\nimport { GameState } from '../../../game/model/GameState'\n\nexport class ElectricFence extends CollectableEntity {\n\n    targetSurface: Surface\n\n    constructor(surface: Surface) {\n        super()\n        const resource = ResourceManager.getResource('Buildings/E-Fence/E-Fence4.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('Buildings/E-Fence/').parse(resource))\n        this.group.add(mesh)\n        this.targetSurface = surface\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.ELECTRIC_FENCE\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.TOOLSTATION]\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityConstruction\n    }\n\n    protected updateTargets(): CollectPathTarget[] {\n        if (this.targets.length < 1) {\n            if (this.targetSurface.canPlaceFence()) {\n                this.targets = [new CollectPathTarget(this.targetSurface.getCenterWorld2D(), null, null)]\n            } else {\n                this.targets = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                    .map((b) => new CollectPathTarget(b.getDropPosition2D(), null, b))\n            }\n        } else if (!this.targetSurface.canPlaceFence() && !this.targets[0].building) {\n            this.targets = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                .map((b) => new CollectPathTarget(b.getDropPosition2D(), null, b))\n        }\n        return this.targets\n    }\n\n    get stats() {\n        return null\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { SurfaceType } from '../../../scene/model/map/SurfaceType'\nimport { Building } from '../../model/entity/building/Building'\nimport { CollectableType } from '../../../scene/model/collect/CollectableEntity'\nimport { EventBus } from '../../../event/EventBus'\nimport { BuildingSite } from '../../../scene/model/BuildingSite'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { ElectricFence } from '../../../scene/model/collect/ElectricFence'\n\nexport class SelectFloorPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(3, onBackPanel)\n        const pathItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_LayPath')\n        pathItem.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.surfaceType = SurfaceType.POWER_PATH_SITE\n            selectedSurface.updateTexture()\n            const targetBuilding = GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), Building.TOOLSTATION)\n            if (targetBuilding) targetBuilding.spawnMaterials(GameState.dropMaterial(CollectableType.ORE, 2))\n            const site = new BuildingSite(true)\n            site.surfaces.push(selectedSurface)\n            site.neededByType[CollectableType.ORE] = 2\n            GameState.buildingSites.push(site)\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        pathItem.isDisabled = () => GameState.selectedSurface?.surfaceType !== SurfaceType.GROUND\n        const removeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_RemovePath')\n        removeItem.onClick = () => {\n            GameState.selectedSurface?.makeRubble(2)\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        removeItem.isDisabled = () => GameState.selectedSurface?.surfaceType !== SurfaceType.POWER_PATH\n        const placeFenceItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        placeFenceItem.isDisabled = () => {\n            return !GameState.hasOneBuildingOf(Building.POWER_STATION) || !GameState.selectedSurface?.canPlaceFence()\n        }\n        placeFenceItem.onClick = () => {\n            const selectedSurface = GameState.selectedSurface\n            if (selectedSurface) {\n                const toolstation = GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), Building.TOOLSTATION)\n                if (toolstation) {\n                    toolstation?.spawnMaterials([new ElectricFence(selectedSurface)])\n                }\n            }\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => {\n            pathItem.updateState()\n            removeItem.updateState()\n            placeFenceItem.updateState()\n        })\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { ClearRubbleJob } from '../../model/job/surface/ClearRubbleJob'\n\nexport class SelectRubblePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(2, onBackPanel)\n        const clearRubbleItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_ClearRubble')\n        clearRubbleItem.onClick = () => {\n            EventBus.publishEvent(new JobCreateEvent(new ClearRubbleJob(GameState.selectedSurface)))\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        clearRubbleItem.isDisabled = () => !GameState.selectedSurface?.hasRubble()\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => clearRubbleItem.updateState())\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\nimport { IconPanelButton } from './IconPanelButton'\nimport { ResourceManager } from '../../../resource/ResourceManager'\n\nexport class IconPanelToggleButton extends IconPanelButton {\n\n    toggleState: boolean = false\n    imgOnNormal: HTMLCanvasElement\n    imgOnHover: HTMLCanvasElement\n    imgOnPressed: HTMLCanvasElement\n    imgOnDisabled: HTMLCanvasElement\n\n    constructor(parent: BaseElement, menuItemOffCfg: MenuItemCfg, menuItemOnCfg: MenuItemCfg, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemOffCfg, null, parentWidth, menuIndex)\n        this.imgOnNormal = ResourceManager.getImageOrNull(menuItemOnCfg.normalFile)\n        this.imgOnHover = ResourceManager.getImageOrNull(menuItemOnCfg.highlightFile)\n        this.imgOnPressed = ResourceManager.getImageOrNull(menuItemOnCfg.pressedFile)\n        this.imgOnDisabled = ResourceManager.getImageOrNull(menuItemOnCfg.disabledFile)\n    }\n\n    onClick() {\n        this.toggleState = !this.toggleState\n        this.onToggleStateChange()\n    }\n\n    onToggleStateChange() {\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.toggleState ? this.imgOnNormal : this.imgNormal\n        if (this.disabled) {\n            if (this.toggleState) {\n                img = this.imgOnDisabled || this.imgOnPressed || this.imgOnNormal\n            } else {\n                img = this.imgDisabled || this.imgPressed || this.imgNormal\n            }\n        } else if (this.pressed) {\n            if (this.toggleState) {\n                img = this.imgOnPressed || this.imgOnNormal\n            } else {\n                img = this.imgPressed || this.imgNormal\n            }\n        } else if (this.hover) {\n            if (this.toggleState) {\n                img = this.imgOnHover || this.imgOnNormal\n            } else {\n                img = this.imgHover || this.imgNormal\n            }\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { EventBus } from '../../../event/EventBus'\nimport { GameState } from '../../model/GameState'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { IconPanelToggleButton } from './IconPanelToggleButton'\n\nexport class SelectBuildingPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Repair')\n\n        const menuItemOffCfg = new MenuItemCfg(ResourceManager.cfg('InterfaceImages', 'Interface_MenuItem_PowerOff'))\n        const menuItemOnCfg = new MenuItemCfg(ResourceManager.cfg('InterfaceImages', 'Interface_MenuItem_PowerOn'))\n        const powerSwitchItem = this.addChild(new IconPanelToggleButton(this, menuItemOffCfg, menuItemOnCfg, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(powerSwitchItem)\n        powerSwitchItem.isDisabled = () => GameState.usedCrystals >= GameState.numCrystal || GameState.selectedBuilding?.stats?.SelfPowered || GameState.selectedBuilding?.stats?.PowerBuilding\n        powerSwitchItem.onToggleStateChange = () => {\n            if (powerSwitchItem.toggleState) {\n                GameState.selectedBuilding?.turnOffPower()\n            } else {\n                GameState.selectedBuilding?.turnOnPower()\n            }\n        }\n        const upgradeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeBuilding')\n        upgradeItem.isDisabled = () => !GameState.selectedBuilding?.canUpgrade()\n        upgradeItem.onClick = () => GameState.selectedBuilding?.upgrade()\n        const deleteBuildingItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteBuilding')\n        deleteBuildingItem.isDisabled = () => false\n        deleteBuildingItem.onClick = () => GameState.selectedBuilding?.beamUp()\n        EventBus.registerEventListener(EventKey.SELECTED_BUILDING, () => {\n            powerSwitchItem.updateState()\n            upgradeItem.updateState()\n        })\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, () => {\n            powerSwitchItem.updateState()\n            upgradeItem.updateState()\n        })\n    }\n\n}\n","import { Job } from './Job'\nimport { JobType } from './JobType'\nimport { PathTarget } from '../../../scene/model/PathTarget'\n\nexport class EatJob extends Job {\n\n    constructor() {\n        super(JobType.EAT)\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return []\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { EatJob } from '../../model/job/EatJob'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\n\nexport class SelectRaiderPanel extends SelectBasePanel {\n\n    getToolItem: IconPanelButton\n    trainItem: IconPanelButton\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        const feedItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GoFeed')\n        feedItem.isDisabled = () => false\n        feedItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => !r.isDriving() && r.setJob(new EatJob()))\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UnLoadMinifigure')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_MinifigurePickUp')\n        this.getToolItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GetTool')\n        this.getToolItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DropBirdScarer')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeMan')\n        this.trainItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSkill')\n        this.trainItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoFirstPerson')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoSecondPerson')\n        const deleteRaiderItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteMan')\n        deleteRaiderItem.isDisabled = () => false\n        deleteRaiderItem.onClick = () => GameState.selectedRaiders.forEach((r) => r.beamUp())\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectVehiclePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(7, onBackPanel)\n    }\n\n}\n","import { Vector2 } from 'three'\n\nexport class Area {\n\n    x0: number = 0\n    y0: number = 0\n    x1: number = 0\n    y1: number = 0\n    center: Vector2 = null\n\n    constructor(x0: number, y0: number, x1: number, y1: number) {\n        this.x0 = x0\n        this.y0 = y0\n        this.x1 = x1\n        this.y1 = y1\n        this.center = new Vector2((this.x0 + this.x1) / 2, (this.y0 + this.y1) / 2)\n    }\n\n    getCenter(): Vector2 {\n        return this.center.clone()\n    }\n\n}\n","import { Job } from './Job'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\nimport { JobType } from './JobType'\nimport { PathTarget } from '../../../scene/model/PathTarget'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { Area } from '../../../core/Area'\nimport { JOB_ACTION_RANGE, TILESIZE } from '../../../main'\nimport { Vector2 } from 'three'\n\nexport class TrainJob extends Job {\n\n    workplaces: SurfacePathTarget[]\n    skill: RaiderSkill\n\n    constructor(surface: Surface, skill: RaiderSkill) {\n        super(JobType.TRAIN)\n        this.workplaces = [new SurfacePathTarget(surface)]\n        this.skill = skill\n    }\n\n    getWorkplaces(): SurfacePathTarget[] {\n        return this.workplaces\n    }\n\n}\n\nexport class SurfacePathTarget extends PathTarget {\n\n    targetArea: Area\n\n    constructor(surface: Surface) {\n        super(surface.getCenterWorld2D())\n        this.targetArea = new Area(surface.x * TILESIZE - JOB_ACTION_RANGE, surface.y * TILESIZE - JOB_ACTION_RANGE,\n            (surface.x + 1) * TILESIZE + JOB_ACTION_RANGE, (surface.y + 1) * TILESIZE + JOB_ACTION_RANGE)\n    }\n\n    isInArea(position: Vector2): boolean {\n        return position.x >= this.targetArea.x0 && position.x < this.targetArea.x1\n            && position.y >= this.targetArea.y0 && position.y < this.targetArea.y1\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { GameState } from '../../model/GameState'\nimport { Building } from '../../model/entity/building/Building'\nimport { TrainJob } from '../../model/job/TrainJob'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class TrainRaiderPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainDriver')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainEngineer')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainGeologist')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainPilot')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSailor')\n        const trainDynamite = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainDynamite')\n        trainDynamite.isDisabled = () => !GameState.getBuildingsByType(Building.TOOLSTATION).some((b) => b.stats.TrainDynamite[b.level]) ||\n            GameState.selectedRaiders.every((r) => r.hasSkill(RaiderSkill.DEMOLITION))\n        trainDynamite.onClick = () => {\n            GameState.getBuildingsByType(Building.TOOLSTATION).some((b) => {\n                if (b.stats.TrainDynamite[b.level]) {\n                    GameState.selectedRaiders.forEach((r) => !r.hasSkill(RaiderSkill.DEMOLITION) && r.setJob(new TrainJob(b.surfaces[0], RaiderSkill.DEMOLITION)))\n                    EventBus.publishEvent(new EntityDeselected())\n                    return true\n                }\n            })\n        }\n        EventBus.registerEventListener(EventKey.BUILDING_UPGRADED, () => trainDynamite.updateState())\n    }\n\n}\n","import { Job } from './Job'\nimport { Vector2 } from 'three'\nimport { RaiderTool } from '../../../scene/model/RaiderTool'\nimport { JobType } from './JobType'\nimport { PathTarget } from '../../../scene/model/PathTarget'\n\nexport class GetToolJob extends Job {\n\n    target: PathTarget[]\n    tool: RaiderTool\n\n    constructor(target: Vector2, tool: RaiderTool) {\n        super(JobType.GET_TOOL)\n        this.target = [new PathTarget(target)]\n        this.tool = tool\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.target\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { GameState } from '../../model/GameState'\nimport { IconPanelButton } from './IconPanelButton'\nimport { Building } from '../../model/entity/building/Building'\nimport { GetToolJob } from '../../model/job/GetToolJob'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { RaiderTool } from '../../../scene/model/RaiderTool'\nimport { PathTarget } from '../../../scene/model/PathTarget'\n\nexport class GetToolPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(8, onBackPanel)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetDrill', RaiderTool.DRILL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpade', RaiderTool.SHOVEL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetHammer', RaiderTool.HAMMER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpanner', RaiderTool.SPANNER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetFreezerGun', RaiderTool.FREEZERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetLaser', RaiderTool.LASER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetPusherGun', RaiderTool.PUSHERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetBirdScarer', RaiderTool.BIRDSCARER)\n    }\n\n    addGetToolItem(menuItemGroup: string, itemKey: string, tool: RaiderTool): IconPanelButton {\n        const menuItem = super.addMenuItem(menuItemGroup, itemKey)\n        menuItem.isDisabled = () => !GameState.hasOneBuildingOf(Building.TOOLSTATION) ||\n            GameState.selectedRaiders.every((r) => r.hasTool(tool))\n        menuItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => {\n                if (!r.hasTool(tool)) {\n                    const pathToToolstation = GameState.getBuildingsByType(Building.TOOLSTATION)\n                        .map((b) => r.findPathToTarget(new PathTarget(b.getPosition2D())))\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToToolstation) {\n                        r.setJob(new GetToolJob(pathToToolstation.targetPosition, tool)) // TODO use precalculated path to toolstation\n                    }\n                }\n            })\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        return menuItem\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { GameState } from '../../model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class IconPanelButtonLabel extends BaseElement {\n\n    constructor(parent: BaseElement) {\n        super(parent)\n        this.relX = 4\n        this.relY = 11\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => this.notifyRedraw())\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        const requestedRaiders = GameState.requestedRaiders\n        if (!requestedRaiders) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = this.disabled || (this.parent && this.parent.disabled) ? '#444' : '#fff'\n        context.fillText(requestedRaiders.toString(), this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { EventBus } from '../../../event/EventBus'\nimport { SurfaceChanged, SurfaceSelectedEvent } from '../../../event/LocalEvents'\nimport { EntityAddedEvent, EntityRemovedEvent, EntityType, RaiderRequested } from '../../../event/WorldEvents'\nimport { GameState } from '../../model/GameState'\nimport { Building } from '../../model/entity/building/Building'\nimport { BuildingPanel } from './BuildingPanel'\nimport { SmallVehiclePanel } from './SmallVehiclePanel'\nimport { LargeVehiclePanel } from './LargeVehiclePanel'\nimport { SelectWallPanel } from './SelectWallPanel'\nimport { SelectFloorPanel } from './SelectFloorPanel'\nimport { SelectRubblePanel } from './SelectRubblePanel'\nimport { SelectBuildingPanel } from './SelectBuildingPanel'\nimport { SelectRaiderPanel } from './SelectRaiderPanel'\nimport { SelectVehiclePanel } from './SelectVehiclePanel'\nimport { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { TrainRaiderPanel } from './TrainRaiderPanel'\nimport { GetToolPanel } from './GetToolPanel'\nimport { IconPanelButtonLabel } from './IconPanelButtonLabel'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { MAX_RAIDER_REQUEST } from '../../../main'\n\nexport class MainPanel extends Panel {\n\n    subPanels: IconSubPanel[] = []\n    mainPanel: IconSubPanel // don't use root itself, since sub panel must be decoupled from (animated) main panel position\n    selectWallPanel: SelectWallPanel\n    selectFloorPanel: SelectFloorPanel\n    selectRubblePanel: SelectRubblePanel\n\n    constructor() {\n        super()\n        this.relX = this.xOut = 640 - 16\n        this.xIn = 640 + 95\n        this.relY = this.yOut = this.yIn = 9\n        this.movedIn = false\n        this.mainPanel = this.addSubPanel(new IconSubPanel(4))\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n\n        const buildingPanel = this.addSubPanel(new BuildingPanel(this.mainPanel))\n        const smallVehiclePanel = this.addSubPanel(new SmallVehiclePanel(this.mainPanel))\n        const largeVehiclePanel = this.addSubPanel(new LargeVehiclePanel(this.mainPanel))\n        this.selectWallPanel = this.addSubPanel(new SelectWallPanel(this.mainPanel))\n        this.selectFloorPanel = this.addSubPanel(new SelectFloorPanel(this.mainPanel))\n        this.selectRubblePanel = this.addSubPanel(new SelectRubblePanel(this.mainPanel))\n        const selectBuildingPanel = this.addSubPanel(new SelectBuildingPanel(this.mainPanel))\n        const selectRaiderPanel = this.addSubPanel(new SelectRaiderPanel(this.mainPanel))\n        const trainRaiderPanel = this.addSubPanel(new TrainRaiderPanel(selectRaiderPanel))\n        selectRaiderPanel.trainItem.onClick = () => selectRaiderPanel.toggleState(() => trainRaiderPanel.toggleState())\n        const getToolPanel = this.addSubPanel(new GetToolPanel(selectRaiderPanel))\n        selectRaiderPanel.getToolItem.onClick = () => selectRaiderPanel.toggleState(() => getToolPanel.toggleState())\n        const selectVehiclePanel = this.addSubPanel(new SelectVehiclePanel(this.mainPanel))\n        const teleportRaider = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_TeleportMan')\n        teleportRaider.isDisabled = () => GameState.raiders.length >= GameState.getMaxRaiders() || GameState.requestedRaiders >= MAX_RAIDER_REQUEST ||\n            !GameState.hasOneBuildingOf(Building.TOOLSTATION, Building.TELEPORT_PAD)\n        teleportRaider.updateState()\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => teleportRaider.updateState())\n        EventBus.registerEventListener(EventKey.ENTITY_ADDED, (event: EntityAddedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.type === EntityType.BUILDING || event.type === EntityType.RAIDER) teleportRaider.updateState()\n        })\n        EventBus.registerEventListener(EventKey.ENTITY_REMOVED, (event: EntityRemovedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.type === EntityType.BUILDING || event.type === EntityType.RAIDER) teleportRaider.updateState()\n        })\n        teleportRaider.onClick = () => {\n            GameState.requestedRaiders++\n            EventBus.publishEvent(new RaiderRequested())\n        }\n        // TODO add decrease requested raider spawn option (needs right click for gui elements)\n        teleportRaider.addChild(new IconPanelButtonLabel(teleportRaider))\n        const buildingItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildBuilding')\n        buildingItem.isDisabled = () => false\n        buildingItem.onClick = () => this.mainPanel.toggleState(() => buildingPanel.toggleState())\n        const smallVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildSmallVehicle')\n        smallVehicleItem.isDisabled = () => false\n        smallVehicleItem.onClick = () => this.mainPanel.toggleState(() => smallVehiclePanel.toggleState())\n        const largeVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildLargeVehicle')\n        largeVehicleItem.isDisabled = () => false\n        largeVehicleItem.onClick = () => this.mainPanel.toggleState(() => largeVehiclePanel.toggleState())\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, (event: SurfaceSelectedEvent) => {\n            this.onSelectedSurfaceChange(event.surface)\n        })\n        EventBus.registerEventListener(EventKey.SURFACE_CHANGED, (event: SurfaceChanged) => {\n            if (GameState.selectedSurface === event.surface) this.onSelectedSurfaceChange(event.surface)\n        })\n        EventBus.registerEventListener(EventKey.DESELECTED_ENTITY, () => this.selectSubPanel(this.mainPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_BUILDING, () => this.selectSubPanel(selectBuildingPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_RAIDER, () => this.selectSubPanel(selectRaiderPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_VEHICLE, () => this.selectSubPanel(selectVehiclePanel))\n    }\n\n    reset() {\n        super.reset()\n        this.relX = this.xOut\n        this.relY = this.yOut\n        this.movedIn = false\n        this.updatePosition()\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n        this.mainPanel.updatePosition()\n    }\n\n    addSubPanel<T extends IconSubPanel>(childPanel: T): T {\n        this.addChild(childPanel)\n        this.subPanels.push(childPanel)\n        return childPanel\n    }\n\n    selectSubPanel(targetPanel: IconSubPanel) {\n        this.subPanels.forEach((subPanel) => subPanel !== targetPanel && subPanel.setMovedIn(true))\n        targetPanel.setMovedIn(false)\n    }\n\n    onSelectedSurfaceChange(surface: Surface) {\n        if (surface.surfaceType.floor) {\n            if (surface.hasRubble()) {\n                this.selectSubPanel(this.selectRubblePanel)\n            } else {\n                this.selectSubPanel(this.selectFloorPanel)\n            }\n        } else {\n            this.selectSubPanel(this.selectWallPanel)\n        }\n    }\n\n}\n","import { BaseElement } from './BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { Button } from './Button'\n\nexport class ToggleButton extends Button {\n\n    toggleState: boolean = false\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent, btnCfg)\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = (this.pressed && this.hover) || this.toggleState\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => updated = child.checkHover(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const isPressed = this.isInRect(cx, cy) || this.toggleState\n        let updated = this.pressed !== isPressed\n        this.pressed = isPressed\n        this.children.forEach((child) => updated = child.checkClick(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = inRect && this.pressed\n        if (updated) {\n            this.toggleState = !this.toggleState\n            this.onClick()\n            this.pressed = updated && this.toggleState\n            this.hover = inRect\n        }\n        this.children.forEach((child) => updated = child.checkRelease(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    release(): boolean {\n        return false\n    }\n\n}\n\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ToggleButton } from '../base/ToggleButton'\nimport { ButtonTopCfg } from './ButtonTopCfg'\n\nexport class TopPanel extends Panel {\n\n    btnCallToArms: ToggleButton\n    btnOptions: Button\n    btnPriorities: ToggleButton\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonTopCfg) {\n        super(panelCfg)\n        this.btnCallToArms = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelCallToArms))\n        this.btnOptions = this.addChild(new Button(this, buttonsCfg.panelButtonTopPanelOptions))\n        this.btnPriorities = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelPriorities))\n    }\n\n}\n\n","import { Button } from '../base/Button'\nimport { WorldEvent } from '../../../event/WorldEvents'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\nimport { InfoButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { InfoDockPanel } from './InfoDockPanel'\nimport { EventBus } from '../../../event/EventBus'\nimport { WorldLocationEvent } from '../../../event/WorldLocationEvent'\nimport { NATIVE_FRAMERATE } from '../../../main'\nimport { clearTimeoutSafe } from '../../../core/Util'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class InfoDockButton extends Button {\n\n    messages: WorldEvent[] = [] // newest message first\n    text: string = null\n    animationTimeout = null\n    animationSpeedX = 0.5\n    animationSpeedY = 1\n\n    constructor(parent: InfoDockPanel, infoMessagesEntryConfig: InfoMessagesEntryConfig, eventKey: EventKey) {\n        super(parent, new InfoButtonCfg(infoMessagesEntryConfig.buttonImageFilename))\n        this.text = infoMessagesEntryConfig.message\n        this.hidden = true\n\n        this.onClick = () => {\n            if (this.messages.length < 1) return\n            parent.buttonClicked(this)\n        }\n\n        EventBus.registerEventListener(eventKey, (event: WorldLocationEvent) => {\n            this.hidden = false\n            while (this.messages.length >= 9) this.messages.pop()\n            this.messages.unshift(event)\n            parent.showButton(this)\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.text = null\n        this.hidden = true\n        this.messages = []\n    }\n\n    slideToTarget(targetX: number, targetY: number): Promise<void> {\n        return new Promise<void>((resolve) => this.updateAnimation(targetX, targetY, resolve))\n    }\n\n    private updateAnimation(targetX: number, targetY: number, onDone: () => any) { // TODO refactor: almost equal with code for Panel\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= this.animationSpeedX && Math.abs(diffY) <= this.animationSpeedY) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * this.animationSpeedX)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * this.animationSpeedY)\n            const that = this\n            this.animationTimeout = setTimeout(() => that.updateAnimation(targetX, targetY, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.hidden) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.messages.length.toString(), this.x + 2, this.y + this.height / 2 + 2)\n    }\n\n}\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ButtonInfoDockCfg } from './ButtonInfoDockCfg'\nimport { InfoMessagesConfig } from './InfoMessagesConfig'\nimport { LandslideEvent } from '../../../event/WorldLocationEvent'\nimport { InfoDockButton } from './InfoDockButton'\nimport { InformationPanel } from './InformationPanel'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class InfoDockPanel extends Panel {\n\n    stackButtons: InfoDockButton[] = []\n    informationPanel: InformationPanel = null\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonInfoDockCfg, infoMessagesConfig: InfoMessagesConfig, informationPanel: InformationPanel) {\n        super(panelCfg)\n        this.informationPanel = informationPanel\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockGoto)).onClick = () => this.gotoLatestMessage()\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockClose)).onClick = () => this.dropLatestMessage()\n\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericDeath, EventKey.LOCATION_DEATH))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericMonster, EventKey.LOCATION_MONSTER))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoCrystalFound, EventKey.LOCATION_CRYSTAL_FOUND))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoUnderAttack, EventKey.LOCATION_UNDER_ATTACK))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoLandslide, EventKey.LOCATION_LANDSLIDE))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoPowerDrain, EventKey.LOCATION_POWER_DRAIN))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoSlugEmerge, EventKey.LOCATION_SLUG_EMERGE))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoFoundMinifigure, EventKey.LOCATION_RAIDER_DISCOVERED))\n    }\n\n    reset() {\n        super.reset()\n        this.stackButtons = []\n    }\n\n    private gotoLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const btn = this.stackButtons[0]\n        if (btn.messages.length < 1) return\n        const msg = btn.messages[0] as LandslideEvent\n        console.log('TODO force move camera to: ' + msg.location.toArray()) // TODO force move camera\n    }\n\n    private dropLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const button = this.stackButtons[0]\n        if (button.messages.length < 1) return\n        button.messages.shift()\n        if (button.messages.length < 1) {\n            button.hidden = true\n            this.informationPanel.setMovedIn(true)\n            this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n            this.slideStackIntoPosition().then()\n        }\n        button.notifyRedraw()\n    }\n\n    showButton(button: InfoDockButton) {\n        if (this.stackButtons.includes(button)) {\n            button.notifyRedraw()\n        } else {\n            this.slideInButton(button)\n        }\n    }\n\n    private slideInButton(button: InfoDockButton) {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        const targetY = -this.stackButtons.map(b => b.height).reduce((prev, cur) => prev + cur, 0)\n        this.stackButtons.push(button)\n        button.relX = -button.width\n        button.relY = targetY - button.height\n        button.updatePosition()\n        button.slideToTarget(0, targetY).then(() => this.stackButtons.forEach(btn => btn.disabled = false))\n    }\n\n    buttonClicked(button: InfoDockButton) {\n        if (button !== this.stackButtons[0]) {\n            this.pushFirst(button)\n        } else {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.toggleState()\n        }\n    }\n\n    private pushFirst(button: InfoDockButton) {\n        this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n        this.stackButtons.unshift(button)\n        this.slideStackIntoPosition().then(() => {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.setMovedIn(false)\n        })\n    }\n\n    private slideStackIntoPosition() {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        let relY = 0\n        const promises = this.stackButtons.map(btn => {\n            const p = btn.slideToTarget(0, relY)\n            relY -= btn.height\n            return p\n        })\n        return new Promise<void>((resolve) => {\n            Promise.all(promises).then(() => {\n                this.stackButtons.forEach(btn => btn.disabled = false)\n                resolve()\n            })\n        })\n    }\n\n}\n\n","import { BaseConfig } from './BaseConfig'\n\nexport class PanelsCfg extends BaseConfig {\n\n    panelRadar: PanelCfg = null\n    panelRadarFill: PanelCfg = null\n    panelRadarOverlay: PanelCfg = null\n    panelMessages: PanelCfg = null\n    panelMessagesSide: PanelCfg = null\n    panelCrystalSideBar: PanelCfg = null\n    panelTopPanel: PanelCfg = null\n    panelInformation: PanelCfg = null\n    panelPriorityList: PanelCfg = null\n    panelCameraControl: PanelCfg = null\n    panelInfoDock: PanelCfg = null\n    panelEncyclopedia: PanelCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new PanelCfg(cfgValue)\n    }\n}\n\nexport class PanelCfg {\n\n    filename: string\n    xOut: number\n    yOut: number\n    xIn: number\n    yIn: number\n\n    constructor(cfgValue: any) {\n        [this.filename, this.xOut, this.yOut, this.xIn, this.yIn] = cfgValue\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { Button } from '../base/Button'\nimport { GameState } from '../../model/GameState'\nimport { ButtonPriorityListCfg } from './ButtonPriorityListCfg'\nimport { PriorityButtonsConfig } from './PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from './PriorityPositionsEntry'\nimport { PriorityIdentifier } from '../../model/job/PriorityIdentifier'\nimport { PriorityEntry } from '../../model/job/PriorityList'\n\nexport class PriorityListPanel extends Panel {\n\n    prioPositions: PriorityPositionsEntry[] = []\n    prioByName: Map<PriorityIdentifier, Button> = new Map()\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonPriorityListCfg, pos: PriorityPositionsEntry[], cfg: PriorityButtonsConfig) {\n        super(panelCfg)\n        buttonsCfg.panelButtonPriorityListDisable.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.toggle(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        buttonsCfg.panelButtonPriorityListUpOne.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.upOne(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        this.addChild(new Button(this, buttonsCfg.panelButtonPriorityListReset)).onClick = () => this.resetList()\n\n        this.prioPositions = pos\n        this.prioByName.set(PriorityIdentifier.aiPriorityTrain, this.addChild(new Button(this, cfg.aiPriorityTrain)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityGetIn, this.addChild(new Button(this, cfg.aiPriorityGetIn)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityCrystal, this.addChild(new Button(this, cfg.aiPriorityCrystal)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityOre, this.addChild(new Button(this, cfg.aiPriorityOre)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityRepair, this.addChild(new Button(this, cfg.aiPriorityRepair)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityClearing, this.addChild(new Button(this, cfg.aiPriorityClearing)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityDestruction, this.addChild(new Button(this, cfg.aiPriorityDestruction)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityConstruction, this.addChild(new Button(this, cfg.aiPriorityConstruction)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityReinforce, this.addChild(new Button(this, cfg.aiPriorityReinforce)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityRecharge, this.addChild(new Button(this, cfg.aiPriorityRecharge)))\n    }\n\n    reset() {\n        super.reset()\n        this.resetList()\n    }\n\n    resetList() {\n        GameState.priorityList.reset()\n        this.setList(GameState.priorityList.current)\n    }\n\n    private setList(priorityList: PriorityEntry[]) {\n        this.prioByName.forEach((btn) => btn.hidden = true)\n        let index = 0\n        let updated = false\n        priorityList.forEach(cfg => {\n            const prioButton: Button = this.prioByName.get(cfg.key)\n            if (prioButton) {\n                updated = updated || prioButton.hidden || prioButton.disabled !== !cfg.enabled\n                prioButton.hidden = false\n                prioButton.disabled = !cfg.enabled\n                prioButton.relX = this.prioPositions[index].x\n                prioButton.relY = this.prioPositions[index].y\n                prioButton.updatePosition()\n                const btnIndex = index\n                prioButton.onClick = () => {\n                    GameState.priorityList.pushToTop(btnIndex)\n                    this.setList(GameState.priorityList.current)\n                }\n                index++\n            }\n        })\n        if (updated) this.notifyRedraw()\n    }\n\n}\n\n","export class InfoMessagesEntryConfig {\n\n    message: string = null\n    buttonImageFilename: string = null\n    sfx: string = null\n    timing: string = null\n    flag: string = null\n\n    constructor(cfgValue: any) {\n        [this.message, this.buttonImageFilename, this.sfx, this.timing, this.flag] = cfgValue\n        this.message = this.message.replace(/_/g, ' ')\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\n\nexport class InfoMessagesConfig extends BaseConfig {\n\n    infoGenericDeath: InfoMessagesEntryConfig = null\n    infoGenericMonster: InfoMessagesEntryConfig = null\n    infoCrystalFound: InfoMessagesEntryConfig = null\n    infoUnderAttack: InfoMessagesEntryConfig = null\n    infoLandslide: InfoMessagesEntryConfig = null\n    infoPowerDrain: InfoMessagesEntryConfig = null\n    infoSlugEmerge: InfoMessagesEntryConfig = null\n    infoFoundMinifigure: InfoMessagesEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new InfoMessagesEntryConfig(cfgValue)\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class InformationPanel extends Panel {\n\n    font: BitmapFont = null\n    textImage = null\n\n    constructor(panelCfg: PanelCfg) {\n        super(panelCfg)\n        this.font = ResourceManager.getDefaultFont()\n    }\n\n    setText(text?: string) {\n        this.textImage = text ? this.font.createTextImage(text, this.img.width - 80) : null\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.textImage) context.drawImage(this.textImage, this.x + (this.img.width - this.textImage.width) / 2, this.y + 12)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class PriorityButtonsConfig extends BaseConfig {\n\n    aiPriorityTrain: ButtonCfg = null\n    aiPriorityGetIn: ButtonCfg = null\n    aiPriorityCrystal: ButtonCfg = null\n    aiPriorityOre: ButtonCfg = null\n    aiPriorityRepair: ButtonCfg = null\n    aiPriorityClearing: ButtonCfg = null\n    aiPriorityDestruction: ButtonCfg = null\n    aiPriorityConstruction: ButtonCfg = null\n    aiPriorityReinforce: ButtonCfg = null\n    aiPriorityRecharge: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): ButtonCfg {\n        return {\n            buttonType: cfgValue[0],\n            normalFile: cfgValue[1],\n            highlightFile: cfgValue[1],\n            pressedFile: cfgValue[2],\n            disabledFile: cfgValue[3],\n        }\n    }\n\n}\n","export class PriorityPositionsEntry {\n\n    x: number\n    y: number\n\n    constructor(cfgValue: any) {\n        [this.x, this.y] = cfgValue\n    }\n\n}\n","export class TextInfoMessageEntryConfig {\n\n    text: string\n    imageFilename: string\n    sfxName: string\n\n    textImage\n    infoImage\n\n    constructor(cfgValue: any) {\n        [this.text, this.imageFilename, this.sfxName] = cfgValue\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\n\nexport class TextInfoMessageConfig extends BaseConfig {\n\n    textCrystalFound: TextInfoMessageEntryConfig = null\n    textSpaceToContinue: TextInfoMessageEntryConfig = null\n    textCavernDiscovered: TextInfoMessageEntryConfig = null\n    textOreFound: TextInfoMessageEntryConfig = null\n    textAirSupplyLow: TextInfoMessageEntryConfig = null\n    textAirSupplyRunningOut: TextInfoMessageEntryConfig = null\n    textGameCompleted: TextInfoMessageEntryConfig = null\n    textManTrained: TextInfoMessageEntryConfig = null\n    textUnitUpgraded: TextInfoMessageEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new TextInfoMessageEntryConfig(cfgValue)\n    }\n\n}\n","import { ScaledLayer } from '../../screen/ScreenLayer'\nimport { Panel } from '../gui/base/Panel'\nimport { BaseElement } from '../gui/base/BaseElement'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\n\nexport class GuiBaseLayer extends ScaledLayer {\n\n    rootElement: BaseElement = new BaseElement()\n    panels: Panel[] = []\n\n    constructor() {\n        super()\n        this.rootElement.notifyRedraw = () => this.redraw()\n        this.onRedraw = (context: CanvasRenderingContext2D) => {\n            context.clearRect(0, 0, context.canvas.width, context.canvas.height)\n            this.rootElement.onRedraw(context)\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.panels.forEach((p) => p.reset())\n    }\n\n    addPanel<T extends Panel>(panel: T): T {\n        this.rootElement.addChild(panel)\n        this.panels.push(panel)\n        return panel\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n        const hit = this.context && this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n        if (hit) {\n            event.preventDefault()\n            if (eventEnum === POINTER_EVENT.MOVE) {\n                this.rootElement.checkHover(sx, sy)\n            } else if (eventEnum === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) this.rootElement.checkClick(sx, sy)\n            } else if (eventEnum === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) this.rootElement.checkRelease(sx, sy)\n            }\n        } else if (eventEnum === POINTER_EVENT.MOVE) {\n            this.rootElement.release()\n        }\n        return hit\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        return !this.context || this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n    }\n\n}\n","import { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../gui/base/Panel'\nimport { RadarPanel } from '../gui/radar/RadarPanel'\nimport { MessagePanel } from '../gui/messagepanel/MessagePanel'\nimport { PanelCrystalSideBar } from '../gui/sidebar/PanelCrystalSideBar'\nimport { MainPanel } from '../gui/main/MainPanel'\nimport { TopPanel } from '../gui/toppanel/TopPanel'\nimport { InfoDockPanel } from '../gui/infodock/InfoDockPanel'\nimport { PanelsCfg } from '../../cfg/PanelsCfg'\nimport { ButtonsCfg } from '../../cfg/ButtonsCfg'\nimport { PriorityListPanel } from '../gui/toppanel/PriorityListPanel'\nimport { InfoMessagesConfig } from '../gui/infodock/InfoMessagesConfig'\nimport { InformationPanel } from '../gui/infodock/InformationPanel'\nimport { PriorityButtonsConfig } from '../gui/toppanel/PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from '../gui/toppanel/PriorityPositionsEntry'\nimport { TextInfoMessageConfig } from '../gui/messagepanel/TextInfoMessageConfig'\nimport { GuiBaseLayer } from './GuiBaseLayer'\n\nexport class GuiMainLayer extends GuiBaseLayer {\n\n    panelRadar: RadarPanel\n    panelMessages: MessagePanel\n    panelMessagesSide: Panel\n    panelCrystalSideBar: PanelCrystalSideBar\n    panelMain: MainPanel\n    panelTopPanel: TopPanel\n    panelInformation: InformationPanel\n    panelPriorityList: PriorityListPanel\n    panelCameraControl: Panel\n    panelInfoDock: InfoDockPanel\n    panelEncyclopedia: Panel\n    onOptionsShow: () => any = () => console.log('show options triggered')\n\n    constructor() {\n        super()\n        const panelsCfg = new PanelsCfg(ResourceManager.cfg('Panels640x480'))\n        const buttonsCfg = new ButtonsCfg(ResourceManager.cfg('Buttons640x480'))\n        // created in reverse order compared to cfg, earlier in cfg means higher z-value // TODO add some z layering at least to panels\n        this.panelEncyclopedia = this.addPanel(new Panel(panelsCfg.panelEncyclopedia))\n        this.panelInformation = this.addPanel(new InformationPanel(panelsCfg.panelInformation))\n        this.panelInfoDock = this.addPanel(new InfoDockPanel(panelsCfg.panelInfoDock, buttonsCfg.panelInfoDock, new InfoMessagesConfig(ResourceManager.cfg('InfoMessages')), this.panelInformation))\n        this.panelCameraControl = this.addPanel(new Panel(panelsCfg.panelCameraControl))\n        const priorityButtonsConfig = new PriorityButtonsConfig(ResourceManager.cfg('PriorityImages'))\n        const priorityPositionsConfig = Object.values(ResourceManager.cfg('PrioritiesImagePositions')).map(cfgValue => new PriorityPositionsEntry(cfgValue))\n        this.panelPriorityList = this.addPanel(new PriorityListPanel(panelsCfg.panelPriorityList, buttonsCfg.panelPriorityList, priorityPositionsConfig, priorityButtonsConfig))\n        this.panelTopPanel = this.addPanel(new TopPanel(panelsCfg.panelTopPanel, buttonsCfg.panelTopPanel))\n        this.panelMain = this.addPanel(new MainPanel())\n        this.panelCrystalSideBar = this.addPanel(new PanelCrystalSideBar(panelsCfg.panelCrystalSideBar, buttonsCfg.panelCrystalSideBar))\n        this.panelMessagesSide = this.addPanel(new Panel(panelsCfg.panelMessagesSide))\n        this.panelMessages = this.addPanel(new MessagePanel(panelsCfg.panelMessages, new TextInfoMessageConfig(ResourceManager.cfg('TextMessagesWithImages'))))\n        this.panelRadar = this.addPanel(new RadarPanel(panelsCfg.panelRadar, panelsCfg.panelRadarFill, panelsCfg.panelRadarOverlay, buttonsCfg.panelRadar))\n        // link panels\n        this.panelTopPanel.btnOptions.onClick = () => this.onOptionsShow()\n        this.panelTopPanel.btnPriorities.onClick = () => {\n            if (this.panelTopPanel.btnPriorities.toggleState) {\n                this.panelMain.setMovedIn(true, () => this.panelPriorityList.setMovedIn(false))\n            } else {\n                this.panelPriorityList.setMovedIn(true, () => this.panelMain.setMovedIn(false))\n            }\n        }\n    }\n\n}\n","import { EventBus } from '../event/EventBus'\nimport { JobCreateEvent, JobDeleteEvent } from '../event/WorldEvents'\nimport { PublicJob } from './model/job/Job'\nimport { GameState } from './model/GameState'\nimport { Vector2 } from 'three'\nimport { Raider } from '../scene/model/Raider'\nimport { WorldManager } from '../scene/WorldManager'\nimport { CHECK_CLEARRUBBLE_INTERVAL, JOB_SCHEDULE_INTERVAL } from '../main'\nimport { Building } from './model/entity/building/Building'\nimport { GetToolJob } from './model/job/GetToolJob'\nimport { TrainJob } from './model/job/TrainJob'\nimport { clearIntervalSafe } from '../core/Util'\nimport { RaiderSkill } from '../scene/model/RaiderSkill'\nimport { RaiderTool } from '../scene/model/RaiderTool'\nimport { JobState } from './model/job/JobState'\nimport { PathTarget } from '../scene/model/PathTarget'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { JobType } from './model/job/JobType'\nimport { Surface } from '../scene/model/map/Surface'\nimport { ClearRubbleJob } from './model/job/surface/ClearRubbleJob'\n\nexport class Supervisor {\n\n    worldMgr: WorldManager\n    jobs: PublicJob[] = []\n    assignInterval = null\n    checkRubbleInterval = null\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        EventBus.registerEventListener(EventKey.JOB_CREATE, (event: JobCreateEvent) => {\n            this.jobs.push(event.job)\n        })\n        EventBus.registerEventListener(EventKey.JOB_DELETE, (event: JobDeleteEvent) => {\n            event.job.cancel()\n        })\n    }\n\n    start() {\n        stop()\n        this.assignInterval = setInterval(this.assignJobs.bind(this), JOB_SCHEDULE_INTERVAL)\n        this.checkRubbleInterval = setInterval(this.checkUnclearedRubble.bind(this), CHECK_CLEARRUBBLE_INTERVAL)\n    }\n\n    stop() {\n        this.assignInterval = clearIntervalSafe(this.assignInterval)\n        this.checkRubbleInterval = clearIntervalSafe(this.checkRubbleInterval)\n        GameState.raiders.forEach((r) => r.resetWorkInterval())\n        GameState.raidersUndiscovered.forEach((r) => r.resetWorkInterval())\n        GameState.vehicles.forEach((v) => v.resetWorkInterval())\n        GameState.vehiclesUndiscovered.forEach((v) => v.resetWorkInterval())\n    }\n\n    assignJobs() {\n        const availableJobs: PublicJob[] = []\n        this.jobs = this.jobs.filter((j) => {\n            const result = j.jobstate === JobState.OPEN\n            if (result && j.fulfiller.length < 1) availableJobs.push(j)\n            return result\n        })\n        availableJobs.sort((left, right) => {\n            return Math.sign(GameState.priorityList.getPriority(left) - GameState.priorityList.getPriority(right))\n        })\n        const unemployedRaider = GameState.raiders.filter((r) => !r.job)\n        availableJobs.forEach((job) => { // XXX better use estimated time to complete job as metric\n            let closestRaider: Raider = null\n            let closestRaiderIndex: number = null\n            let minDistance: number = null\n            let closestToolRaider: Raider = null\n            let closestToolRaiderIndex: number = null\n            let minToolDistance: number = null\n            let closestToolstationPosition: Vector2 = null\n            let closestNeededTool: RaiderTool = null\n            let closestTrainingRaider: Raider = null\n            let closestTrainingRaiderIndex: number = null\n            let minTrainingDistance: number = null\n            let closestTrainingArea: Surface = null\n            let closestNeededTraining: RaiderSkill = null\n            unemployedRaider.forEach((raider, index) => {\n                if (job.isQualified(raider)) {\n                    const pathToJob = job.getWorkplaces().map((b) => raider.findPathToTarget(b))\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToJob) {\n                        const dist = pathToJob.lengthSq // TODO use precalculated path to job\n                        if (minDistance === null || dist < minDistance) {\n                            closestRaider = raider\n                            closestRaiderIndex = index\n                            minDistance = dist\n                        }\n                    }\n                } else {\n                    const raiderPosition = raider.getPosition()\n                    const neededTool = job.isQualifiedWithTool(raider)\n                    if (neededTool) {\n                        const pathToToolstation = GameState.getBuildingsByType(Building.TOOLSTATION)\n                            .map((b) => raider.findPathToTarget(new PathTarget(b.getPosition2D())))\n                            .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                        if (pathToToolstation) {\n                            const dist = pathToToolstation.lengthSq\n                            if (minToolDistance === null || dist < minToolDistance) {\n                                closestToolRaider = raider\n                                closestToolRaiderIndex = index\n                                minToolDistance = dist\n                                closestToolstationPosition = pathToToolstation.targetPosition // TODO use precalculated path to toolstation\n                                closestNeededTool = neededTool\n                            }\n                        }\n                    } else {\n                        const neededTraining = job.isQualifiedWithTraining(raider)\n                        if (neededTraining) {\n                            const pathToTraining = GameState.getTrainingSites(raiderPosition, neededTraining)\n                                .map((site) => raider.findPathToTarget(new PathTarget(site.getPosition2D())))\n                                .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                            if (pathToTraining) {\n                                const dist = pathToTraining.lengthSq\n                                if (minTrainingDistance === null || dist < minTrainingDistance) {\n                                    closestTrainingRaider = raider\n                                    closestTrainingRaiderIndex = index\n                                    minTrainingDistance = dist\n                                    closestTrainingArea = raider.worldMgr.sceneManager.terrain.getSurfaceFromWorld2D(pathToTraining.targetPosition) // TODO use precalculated path to training\n                                    closestNeededTraining = neededTraining\n                                }\n                            }\n                        }\n                    }\n                }\n            })\n            if (closestRaider) {\n                closestRaider.setJob(job)\n                unemployedRaider.splice(closestRaiderIndex, 1)\n            } else if (closestToolRaider) {\n                closestToolRaider.setJob(new GetToolJob(closestToolstationPosition, closestNeededTool), job)\n                unemployedRaider.splice(closestToolRaiderIndex, 1)\n            } else if (closestTrainingRaider) {\n                closestTrainingRaider.setJob(new TrainJob(closestTrainingArea, closestNeededTraining), job)\n                unemployedRaider.splice(closestTrainingRaiderIndex, 1)\n            }\n        })\n    }\n\n    checkUnclearedRubble() {\n        GameState.raiders.forEach((raider) => {\n            if (raider.job) return\n            const startSurface = raider.worldMgr.sceneManager.terrain.getSurfaceFromWorld(raider.getPosition())\n            for (let rad = 0; rad < 10; rad++) {\n                for (let x = startSurface.x - rad; x <= startSurface.x + rad; x++) {\n                    for (let y = startSurface.y - rad; y <= startSurface.y + rad; y++) {\n                        const surface = raider.worldMgr.sceneManager.terrain.getSurfaceOrNull(x, y)\n                        if (!(surface?.hasRubble()) || !surface.discovered || surface.hasJobType(JobType.CLEAR_RUBBLE)) continue\n                        const surfJob = new ClearRubbleJob(surface)\n                        if (surfJob.isQualified(raider)) {\n                            raider.setJob(surfJob)\n                        } else {\n                            const neededTool = surfJob.isQualifiedWithTool(raider)\n                            if (neededTool) {\n                                const pathToToolstation = GameState.getBuildingsByType(Building.TOOLSTATION)\n                                    .map((b) => raider.findPathToTarget(new PathTarget(b.getPosition2D())))\n                                    .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                                if (pathToToolstation) {\n                                    raider.setJob(new GetToolJob(pathToToolstation.targetPosition, neededTool), surfJob) // TODO use precalculated path to toolstation\n                                }\n                            } else {\n                                continue\n                            }\n                        }\n                        EventBus.publishEvent(new JobCreateEvent(surfJob))\n                        surface.updateJobColor()\n                    }\n                }\n            }\n        })\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { BriefingPanelCfg } from '../../../cfg/BriefingPanelCfg'\nimport { MessagePanel } from '../messagepanel/MessagePanel'\nimport { ObjectiveImageCfg } from '../../../cfg/ObjectiveImageCfg'\n\nexport class BriefingPanel extends Panel {\n\n    messagePanel: MessagePanel\n    cfg: BriefingPanelCfg = null\n    imgTitle: HTMLCanvasElement = null\n    titleRelX: number = 0\n    titleRelY: number = 0\n    btnNext: Button = null\n    btnBack: Button = null\n    imgBack: HTMLCanvasElement = null\n    imgParagraph: HTMLCanvasElement[] = []\n    paragraph: number = 0\n\n    constructor(cfg: BriefingPanelCfg) {\n        super()\n        this.cfg = cfg\n        this.imgTitle = cfg.titleFont.createTextImage(cfg.title)\n        this.titleRelX = cfg.titleWindow.x + (cfg.titleWindow.w - this.imgTitle.width) / 2\n        this.titleRelY = cfg.titleWindow.y\n        this.btnNext = this.addChild(new Button(this, cfg.nextButtonCfg))\n        this.btnNext.onClick = () => this.nextParagraph()\n        this.btnBack = this.addChild(new Button(this, cfg.backButtonCfg))\n        this.btnBack.onClick = () => this.prevParagraph()\n        this.hidden = true\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n        this.setParagraph(0)\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.imgBack = ResourceManager.getImageOrNull(objectiveBackImgCfg.filename)\n        this.relX = objectiveBackImgCfg.x\n        this.relY = objectiveBackImgCfg.y\n        this.width = this.imgBack.width\n        this.height = this.imgBack.height\n        this.updatePosition()\n        this.imgParagraph = objectiveText.split('\\\\a').map(txt => this.cfg.textFont.createTextImage(txt, this.cfg.textWindow.w, false))\n    }\n\n    setParagraph(paragraph: number) {\n        if (paragraph < 0) return\n        if (paragraph > this.imgParagraph.length - 1) {\n            this.hide()\n            this.notifyRedraw()\n            return\n        }\n        this.paragraph = paragraph\n        this.btnNext.hidden = this.paragraph >= this.imgParagraph.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.notifyRedraw()\n    }\n\n    nextParagraph() {\n        this.setParagraph(this.paragraph + 1)\n    }\n\n    prevParagraph() {\n        this.setParagraph(this.paragraph - 1)\n    }\n\n    show() {\n        super.show()\n        this.setParagraph(0)\n        this.btnNext.hidden = this.paragraph >= this.imgParagraph.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.messagePanel?.setMessage(this.messagePanel.msgSpaceToContinue, 0)\n    }\n\n    hide() {\n        super.hide()\n        this.messagePanel?.unsetMessage(this.messagePanel.msgSpaceToContinue)\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.imgBack) context.drawImage(this.imgBack, this.x, this.y)\n        if (this.imgTitle) context.drawImage(this.imgTitle, this.x + this.titleRelX, this.y + this.titleRelY)\n        if (this.imgParagraph && this.imgParagraph[this.paragraph]) context.drawImage(this.imgParagraph[this.paragraph], this.x + this.cfg.textWindow.x, this.y + this.cfg.textWindow.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuCycleItemCfg } from '../../../cfg/MenuCycleItemCfg'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuCycleItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLabelOnNormal: HTMLCanvasElement // TODO only toggle state with clicks on label\n    imgLabelOffNormal: HTMLCanvasElement // TODO use button?\n    imgLabelOnHover: HTMLCanvasElement\n    imgLabelOffHover: HTMLCanvasElement\n\n    labelX: number = 0\n    state: boolean = false\n\n    constructor(parent: MenuLayer, itemCfg: MenuCycleItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.labelX = itemCfg.width\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.imgLabelOffNormal = parent.loFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOffHover = parent.hiFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOnNormal = parent.loFont.createTextImage(itemCfg.labelOn)\n        this.imgLabelOnHover = parent.hiFont.createTextImage(itemCfg.labelOn)\n        this.width = itemCfg.width + Math.max(this.imgLabelOnHover.width, this.imgLabelOffHover.width)\n        this.height = this.imgTextNormal.height\n    }\n\n    onClick() {\n        this.state = !this.state\n        console.log('TODO: cycle item clicked; state: ' + this.state)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        let imgLabel = this.state ? this.imgLabelOnNormal : this.imgLabelOffNormal\n        if (this.hover) {\n            img = this.imgTextHover\n            imgLabel = this.state ? this.imgLabelOnHover : this.imgLabelOffHover\n        }\n        context.drawImage(img, this.x, this.y)\n        context.drawImage(imgLabel, this.x + this.labelX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuSliderItemCfg } from '../../../cfg/MenuSliderItemCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { BaseButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuSliderItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLeft: HTMLCanvasElement\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgRight: HTMLCanvasElement\n    sliderX: number = 0\n    min: number = 0\n    max: number = 1\n    value: number = 0\n    onValueChanged: (value: number) => any = (value) => console.log('value changed to: ' + value)\n\n    constructor(parent: MenuLayer, itemCfg: MenuSliderItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.sliderX = itemCfg.width\n        this.imgLeft = ResourceManager.getImage(itemCfg.imgLeft)\n        this.imgNormal = ResourceManager.getImage(itemCfg.imgOff)\n        this.imgHover = ResourceManager.getImage(itemCfg.imgOn)\n        this.imgRight = ResourceManager.getImage(itemCfg.imgRight)\n        const leftBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        leftBtn.imgNormal = ResourceManager.getImage(itemCfg.btnLeftNormal)\n        leftBtn.imgHover = ResourceManager.getImage(itemCfg.btnLeftHover)\n        leftBtn.relX = this.sliderX - this.imgLeft.width - leftBtn.imgHover.width\n        leftBtn.width = leftBtn.imgHover.width\n        leftBtn.height = leftBtn.imgHover.height\n        leftBtn.updatePosition()\n        leftBtn.onClick = () => {\n            if (this.value > this.min) {\n                this.value--\n                this.onValueChanged(this.value)\n            }\n        }\n        const rightBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        rightBtn.imgNormal = ResourceManager.getImage(itemCfg.btnRightNormal)\n        rightBtn.imgHover = ResourceManager.getImage(itemCfg.btnRightHover)\n        rightBtn.relX = this.sliderX + this.imgNormal.width + this.imgRight.width * 2\n        rightBtn.width = rightBtn.imgHover.width\n        rightBtn.height = rightBtn.imgHover.height\n        rightBtn.updatePosition()\n        rightBtn.onClick = () => {\n            if (this.value < this.max) {\n                this.value++\n                this.onValueChanged(this.value)\n            }\n        }\n        this.width = itemCfg.width + leftBtn.imgHover.width + this.imgLeft.width + this.imgNormal.width + this.imgRight.width * 2 + rightBtn.imgHover.width\n        this.min = itemCfg.min\n        this.max = itemCfg.max || 1\n        this.value = this.min // TODO set default value\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.height = this.imgTextNormal.height\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        if (this.hover) {\n            img = this.imgTextHover\n        }\n        context.drawImage(img, this.x, this.y)\n        let posX = this.x + this.sliderX\n        context.drawImage(this.imgLeft, posX, this.y)\n        context.drawImage(this.imgNormal, posX, this.y)\n        const dw = Math.round(this.value / this.max * this.imgHover.width)\n        context.drawImage(this.imgHover, 0, 0, dw, this.imgHover.height, posX, this.y, dw, this.imgHover.height)\n        posX += this.imgNormal.width\n        context.drawImage(this.imgRight, posX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuLayer } from './MenuLayer'\nimport { MenuLabelItemCfg } from '../../../cfg/MenuLabelItemCfg'\n\nexport class MenuLabelItem extends BaseElement {\n\n    target: string\n    loImg: HTMLCanvasElement\n    hiImg: HTMLCanvasElement\n\n    constructor(parent: MenuLayer, itemCfg: MenuLabelItemCfg, autoCenter: boolean) {\n        super(parent)\n        this.target = itemCfg.target\n        this.loImg = parent.loFont.createTextImage(itemCfg.label)\n        this.hiImg = parent.hiFont.createTextImage(itemCfg.label)\n        this.width = this.loImg.width\n        this.height = this.loImg.height\n        this.relX = autoCenter ? -parent.relX + (parent.menuImage.width - this.width) / 2 : itemCfg.x\n        this.relY = itemCfg.y\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.hover) {\n            context.drawImage(this.hiImg, this.x, this.y)\n        } else {\n            context.drawImage(this.loImg, this.x, this.y)\n        }\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuEntryCfg } from '../../../cfg/MenuEntryCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuCycleItem } from './MenuCycleItem'\nimport { MenuSliderItem } from './MenuSliderItem'\nimport { MenuLabelItem } from './MenuLabelItem'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class MenuLayer extends BaseElement {\n\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    itemsTrigger: MenuLabelItem[] = []\n    itemsNext: MenuLabelItem[] = []\n\n    constructor(parent: BaseElement, menuCfg: MenuEntryCfg) {\n        super(parent)\n        this.relX = menuCfg.position[0]\n        this.relY = menuCfg.position[1]\n        this.menuImage = ResourceManager.getImageOrNull(menuCfg.menuImage[0]) // menuImage has 4 parameter here\n        this.titleImage = ResourceManager.getBitmapFont(menuCfg.menuFont).createTextImage(menuCfg.fullName)\n        this.loFont = ResourceManager.getBitmapFont(menuCfg.loFont)\n        this.hiFont = ResourceManager.getBitmapFont(menuCfg.hiFont)\n        menuCfg.itemsLabel.forEach((itemCfg) => {\n            const item = this.addChild(new MenuLabelItem(this, itemCfg, menuCfg.autoCenter))\n            if (itemCfg.actionName.toLowerCase() === 'trigger') {\n                this.itemsTrigger.push(item)\n            } else {\n                this.itemsNext.push(item)\n            }\n        })\n        menuCfg.itemsCycle.forEach((itemCfg) => this.addChild(new MenuCycleItem(this, itemCfg)))\n        menuCfg.itemsSlider.forEach((itemCfg) => this.addChild(new MenuSliderItem(this, itemCfg)))\n        this.hidden = true\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.drawImage(this.menuImage, (this.parent.width - this.menuImage.width) / 2, (this.parent.height - this.menuImage.height) / 2)\n        context.drawImage(this.titleImage, (this.parent.width - this.titleImage.width) / 2, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { MenuLayer } from './MenuLayer'\nimport { MenuCfg } from '../../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\n\nexport class MenuBasePanel extends Panel {\n\n    layersByKey: Map<string, MenuLayer> = new Map()\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super()\n        this.width = layer.fixedWidth\n        this.height = layer.fixedHeight\n        this.hidden = true\n        cfg.menus.forEach((menuCfg, index) => this.layersByKey.set('menu' + (index + 1), this.addChild(new MenuLayer(this, menuCfg))))\n        const pausePanel = this\n        this.layersByKey.forEach((layer) => layer.itemsNext.forEach((item) => item.onClick = () => pausePanel.selectLayer(item.target)))\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n    }\n\n    show() {\n        this.hidden = false\n        this.selectLayer('menu1')\n    }\n\n    hide() {\n        super.hide()\n        this.notifyRedraw()\n    }\n\n    selectLayer(key: string) {\n        const layer = this.layersByKey.get(key.toLowerCase())\n        this.layersByKey.forEach(l => l !== layer && l.hide())\n        layer.show()\n        this.notifyRedraw()\n    }\n\n}\n","import { MenuCfg } from '../../../cfg/MenuCfg'\nimport { MenuBasePanel } from './MenuBasePanel'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\n\nexport class OptionsPanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const panel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => panel.onRepeatBriefing()\n        this.layersByKey.get('menu1').itemsTrigger[1].onClick = () => panel.hide()\n    }\n\n}\n","import { MenuCfg } from '../../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\nimport { MenuBasePanel } from './MenuBasePanel'\n\nexport class PausePanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n    onAbortGame: () => any = () => console.log('abort mission')\n    onRestartGame: () => any = () => console.log('restart mission')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const pausePanel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => pausePanel.hide() // Pause\n        this.layersByKey.get('menu2').itemsTrigger[0].onClick = () => pausePanel.onRepeatBriefing() // Options\n        this.layersByKey.get('menu3').itemsTrigger[0].onClick = () => pausePanel.onAbortGame() // Quit\n        this.layersByKey.get('menu4').itemsTrigger[0].onClick = () => pausePanel.onRestartGame() // Restart\n    }\n\n}\n","export class Rect {\n\n    x: number = 0\n    y: number = 0\n    w: number = 0\n    h: number = 0\n\n    constructor(arr: number[]) {\n        [this.x, this.y, this.w, this.h] = arr\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { Rect } from '../core/Rect'\n\nexport class DialogCfg extends BaseConfig {\n\n    image: string = null\n    titleWindow: Rect = null\n    textWindow: Rect = null\n    okWindow: Rect = null\n    cancelWindow: Rect = null\n    contrastOverlay: string = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        if (lCfgKeyName.endsWith('window')) {\n            return new Rect(cfgValue)\n        }\n        return super.parseValue(lCfgKeyName, cfgValue)\n    }\n\n}\n","import { PanelCfg } from './PanelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { DialogCfg } from './DialogCfg'\nimport { Rect } from '../core/Rect'\nimport { ButtonCfg } from './ButtonsCfg'\n\nexport class BriefingPanelCfg extends PanelCfg {\n\n    // XXX find config values for this class\n\n    titleFont: BitmapFont\n    title: string\n    titleWindow: Rect\n    textFont: BitmapFont\n    textWindow: Rect\n    nextButtonCfg: ButtonCfg\n    backButtonCfg: ButtonCfg\n\n    constructor() {\n        super([])\n        this.titleFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont2.bmp')\n        this.title = ResourceManager.cfg('Main', 'MissionBriefingText')\n        const dialogCfg = new DialogCfg(ResourceManager.cfg('Dialog'))\n        this.titleWindow = dialogCfg.titleWindow\n        this.textFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont.bmp')\n        this.textWindow = dialogCfg.textWindow\n        this.nextButtonCfg = {\n            buttonType: 'Next briefing paragraph',\n            relX: 394,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'NextButton640x480'),\n        }\n        this.backButtonCfg = {\n            buttonType: 'Previous briefing paragraph',\n            relX: 54,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'BackArrow'),\n        }\n    }\n\n}\n","import { BriefingPanel } from '../gui/briefing/BriefingPanel'\nimport { OptionsPanel } from '../gui/overlay/OptionsPanel'\nimport { PausePanel } from '../gui/overlay/PausePanel'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { MenuCfg } from '../../cfg/MenuCfg'\nimport { BriefingPanelCfg } from '../../cfg/BriefingPanelCfg'\nimport { KEY_EVENT, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { Panel } from '../gui/base/Panel'\nimport { GuiBaseLayer } from './GuiBaseLayer'\nimport { ObjectiveImageCfg } from '../../cfg/ObjectiveImageCfg'\nimport { DEV_MODE } from '../../main'\n\nexport class OverlayLayer extends GuiBaseLayer {\n\n    panelBriefing: BriefingPanel\n    panelOptions: OptionsPanel\n    panelPause: PausePanel\n\n    constructor() {\n        super()\n        this.panelPause = this.addPanel(new PausePanel(this, ResourceManager.getResource('PausedMenu') as MenuCfg))\n        this.panelOptions = this.addPanel(new OptionsPanel(this, ResourceManager.getResource('OptionsMenu') as MenuCfg))\n        this.panelBriefing = this.addPanel(new BriefingPanel(new BriefingPanelCfg()))\n        // link items\n        this.panelPause.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n        this.panelOptions.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n    }\n\n    setActivePanel(panel: Panel) {\n        this.panels.forEach(p => p !== panel && p.hide())\n        panel.show()\n        this.redraw()\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.panelBriefing.setup(objectiveText, objectiveBackImgCfg)\n        if (!DEV_MODE) this.setActivePanel(this.panelBriefing)\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (this.panels.every(p => p.hidden)) return false\n        return super.handlePointerEvent(eventEnum, event) || this.isActive() // catch em all\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        let result = false\n        const lEventKey = event.key.toLowerCase()\n        if (eventEnum === KEY_EVENT.UP) {\n            if (lEventKey === 'escape') {\n                if (this.panelBriefing.hidden && this.panelOptions.hidden) {\n                    if (this.panelPause.hidden) {\n                        // TODO actually pause the game\n                        this.setActivePanel(this.panelPause)\n                    } else {\n                        // TODO actually unpause the game\n                        this.panelPause.hide()\n                    }\n                    result = true\n                }\n            } else if (lEventKey === ' ') { // space\n                if (!this.panelBriefing.hidden) {\n                    this.panelBriefing.nextParagraph()\n                    result = true\n                }\n            }\n        }\n        return result\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { WorldManager } from '../scene/WorldManager'\nimport { SelectionLayer } from '../game/layer/SelectionLayer'\nimport { GameLayer } from '../game/layer/GameLayer'\nimport { GuiMainLayer } from '../game/layer/GuiMainLayer'\nimport { Supervisor } from '../game/Supervisor'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { iGet } from '../core/Util'\nimport { LevelObjectiveTextEntry } from '../resource/wadworker/ObjectiveTextParser'\nimport { OverlayLayer } from '../game/layer/OverlayLayer'\nimport { GameState } from '../game/model/GameState'\n\nexport class GameScreen extends BaseScreen {\n\n    onLevelEnd: () => void\n    gameLayer: GameLayer\n    selectionLayer: SelectionLayer\n    guiLayer: GuiMainLayer\n    overlayLayer: OverlayLayer\n    worldManager: WorldManager\n    jobSupervisor: Supervisor\n    levelName: string\n    levelConf: LevelEntryCfg\n\n    constructor() {\n        super()\n        this.gameLayer = this.addLayer(new GameLayer(), 0)\n        this.selectionLayer = this.addLayer(new SelectionLayer(), 10)\n        this.guiLayer = this.addLayer(new GuiMainLayer(), 20)\n        this.overlayLayer = this.addLayer(new OverlayLayer(), 30)\n        this.worldManager = new WorldManager(this.gameLayer.canvas)\n        this.gameLayer.setWorldManager(this.worldManager)\n        this.selectionLayer.setWorldManager(this.worldManager)\n        this.jobSupervisor = new Supervisor(this.worldManager)\n        // link layer\n        this.guiLayer.onOptionsShow = () => this.overlayLayer.panelOptions.show()\n        this.overlayLayer.panelBriefing.messagePanel = this.guiLayer.panelMessages\n        this.overlayLayer.panelPause.onAbortGame = () => this.onLevelEnd && this.onLevelEnd()\n        this.overlayLayer.panelPause.onRestartGame = () => this.restartLevel()\n    }\n\n    startLevel(levelName) {\n        this.levelName = levelName\n        this.levelConf = ResourceManager.getResource('Levels').levelsByName[this.levelName]\n        if (!this.levelConf) throw 'Could not find level configuration for \"' + this.levelName + '\"'\n        this.setupAndStartLevel()\n    }\n\n    restartLevel() {\n        this.hide()\n        GameState.reset()\n        this.setupAndStartLevel()\n    }\n\n    private setupAndStartLevel() {\n        console.log('Starting level ' + this.levelName + ' - ' + this.levelConf.fullName)\n        this.worldManager.setup(this.levelConf, this)\n        const objectiveText: LevelObjectiveTextEntry = iGet(ResourceManager.getResource(this.levelConf.objectiveText), this.levelName)\n        this.guiLayer.reset()\n        this.overlayLayer.setup(objectiveText.objective, this.levelConf.objectiveImage640x480)\n        this.show()\n    }\n\n    show() {\n        super.show()\n        this.worldManager.start()\n        this.jobSupervisor.start()\n    }\n\n    hide() {\n        this.worldManager.stop()\n        this.jobSupervisor.stop()\n        super.hide()\n    }\n\n    resize(width: number, height: number) {\n        super.resize(width, height)\n        if (this.worldManager) this.worldManager.resize(width, height)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class RewardScreenButton extends MainMenuBaseItem {\n\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgPressed: HTMLCanvasElement\n    imgDisabled: HTMLCanvasElement\n    disabled: boolean = false\n    visible: boolean = true\n\n    constructor(conf: any) {\n        super()\n        let imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath;\n        [imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath, this.x, this.y] = conf\n        this.imgNormal = ResourceManager.getImage(imgNormalFilepath)\n        this.imgHover = ResourceManager.getImage(imgHoverFilepath)\n        this.imgPressed = ResourceManager.getImage(imgPressedFilepath)\n        this.imgDisabled = ResourceManager.getImage(imgDisabledFilepath)\n        this.width = this.imgNormal.width\n        this.height = this.imgNormal.height\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        if (!this.visible) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled\n        } else if (this.pressed) {\n            img = this.imgPressed\n        } else if (this.hover) {\n            img = this.imgHover\n        }\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from './ScreenLayer'\nimport { RewardCfg } from '../cfg/RewardCfg'\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { RewardScreenButton } from '../menu/RewardScreenButton'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { clearTimeoutSafe } from '../core/Util'\n\nexport class RewardScreen extends BaseScreen {\n\n    onAdvance: () => void\n    cfg: RewardCfg = null\n    titleFont: BitmapFont\n    resultsLayer: ScaledLayer\n    descriptionTextLayer: ScaledLayer\n    btnLayer: ScaledLayer\n    resultIndex: number = 0\n    resultLastIndex: number = 0\n    images: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    boxes: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    fonts = {}\n    texts: HTMLCanvasElement[] = []\n    uncoverTimeout = null\n    btnSave: RewardScreenButton\n    btnAdvance: RewardScreenButton\n\n    constructor() {\n        super()\n        this.cfg = ResourceManager.getResource('Reward')\n        this.titleFont = ResourceManager.getBitmapFont(this.cfg.titleFont)\n        const backgroundImg = ResourceManager.getImage(this.cfg.wallpaper)\n        const backgroundLayer = this.addLayer(new ScaledLayer())\n        backgroundLayer.onRedraw = (context) => context.drawImage(backgroundImg, 0, 0)\n        this.cfg.images.forEach((img) => {\n            this.images.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        this.cfg.boxImages.forEach((img) => {\n            this.boxes.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        Object.keys(this.cfg.fonts).forEach((fontKey, index) => {\n            const font = ResourceManager.getBitmapFont(this.cfg.fonts[fontKey])\n            this.fonts[fontKey.toLowerCase()] = font\n            const txt = this.cfg.texts[index]\n            const labelFont = index < 9 ? font : ResourceManager.getBitmapFont(this.cfg.backFont)\n            this.texts.push(labelFont.createTextImage(txt.text))\n        })\n        this.resultsLayer = this.addLayer(new ScaledLayer())\n        this.resultsLayer.handlePointerEvent = ((eventType) => {\n            if (eventType === POINTER_EVENT.UP) {\n                this.uncoverTimeout = clearTimeoutSafe(this.uncoverTimeout)\n                this.uncoverTimeout = null\n                this.resultIndex = this.resultLastIndex\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n                this.redraw()\n                return true\n            }\n            return false\n        })\n        this.descriptionTextLayer = this.addLayer(new ScaledLayer(), 20)\n        this.btnLayer = this.addLayer(new ScaledLayer(), 50)\n        this.btnSave = new RewardScreenButton(this.cfg.saveButton)\n        this.btnSave.disabled = true\n        this.btnAdvance = new RewardScreenButton(this.cfg.advanceButton)\n        this.btnLayer.handlePointerEvent = ((eventType, event) => {\n            if (eventType === POINTER_EVENT.MOVE) {\n                const [sx, sy] = this.btnLayer.toScaledCoords(event.clientX, event.clientY)\n                this.btnSave.checkHover(sx, sy)\n                this.btnAdvance.checkHover(sx, sy)\n            } else if (eventType === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    this.btnSave.checkSetPressed()\n                    this.btnAdvance.checkSetPressed()\n                }\n            } else if (eventType === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    if (this.btnSave.pressed) {\n                        this.btnSave.setReleased()\n                        // TODO switch to save screen\n                    } else if (this.btnAdvance.pressed) {\n                        this.btnAdvance.setReleased()\n                        this.hide()\n                        this.onAdvance()\n                    }\n                }\n            }\n            if (this.btnSave.needsRedraw || this.btnAdvance.needsRedraw) this.redraw()\n            return false\n        })\n        this.btnLayer.onRedraw = (context) => {\n            this.btnSave.draw(context)\n            this.btnAdvance.draw(context)\n        }\n    }\n\n    show() {\n        this.resultIndex = 0\n        this.btnSave.visible = false\n        this.btnAdvance.visible = false\n        this.uncoverResult()\n        const levelFullNameImg = this.titleFont.createTextImage(GameState.levelFullName)\n        let resultText = this.cfg.quitText\n        this.resultLastIndex = this.images.length - 2\n        if (GameState.resultState === GameResultState.COMPLETE) {\n            resultText = this.cfg.completeText\n            this.resultLastIndex = this.images.length - 1\n        } else if (GameState.resultState === GameResultState.FAILED) {\n            resultText = this.cfg.failedText\n        }\n        const resultValues = []\n        resultValues.push(this.fonts['crystals'].createTextImage(this.percentString(GameState.numCrystal, GameState.neededCrystals)))\n        resultValues.push(this.fonts['ore'].createTextImage(this.percentString(GameState.numOre, GameState.totalOres)))\n        resultValues.push(this.fonts['diggable'].createTextImage(this.percentString(GameState.remainingDiggables, GameState.totalDiggables, true)))\n        resultValues.push(this.fonts['constructions'].createTextImage(GameState.buildings.length.toString()))\n        resultValues.push(this.fonts['caverns'].createTextImage(this.percentString(GameState.discoveredCaverns, GameState.totalCaverns)))\n        resultValues.push(this.fonts['figures'].createTextImage(this.percentString(GameState.raiders.length, GameState.getMaxRaiders())))\n        resultValues.push(this.fonts['rockmonsters'].createTextImage(this.percentString(0))) // TODO show defence report, is either 0% or 100%\n        resultValues.push(this.fonts['oxygen'].createTextImage(this.percentString(GameState.airlevel)))\n        resultValues.push(this.fonts['timer'].createTextImage(this.timeString(GameState.gameTimeSeconds)))\n        resultValues.push(this.fonts['score'].createTextImage(this.percentString(GameState.score)))\n        const gameResultTextImg = this.titleFont.createTextImage(resultText)\n        this.resultsLayer.onRedraw = (context) => {\n            context.clearRect(0, 0, this.resultsLayer.fixedWidth, this.resultsLayer.fixedHeight)\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const img = this.images[c]\n                if (img) context.drawImage(img.img, img.x, img.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const box = this.boxes[c]\n                if (box) context.drawImage(box.img, box.x, box.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const txt = this.cfg.texts[c]\n                const text = resultValues[c]\n                if (text) context.drawImage(text, txt.x - text.width / 2, txt.y)\n            }\n            context.drawImage(levelFullNameImg, this.resultsLayer.fixedWidth / 2 - levelFullNameImg.width / 2, this.cfg.vertSpacing - levelFullNameImg.height / 2)\n            context.drawImage(gameResultTextImg, this.resultsLayer.fixedWidth / 2 - gameResultTextImg.width / 2, this.cfg.vertSpacing + levelFullNameImg.height / 2)\n        }\n        this.descriptionTextLayer.onRedraw = (context) => {\n            const descriptionTextImg = this.texts[this.resultIndex]\n            context.clearRect(0, this.cfg.textPos[1], this.descriptionTextLayer.fixedWidth, this.descriptionTextLayer.fixedHeight - this.cfg.textPos[1])\n            const tx = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[0] : 305\n            const ty = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[1] : 195\n            context.drawImage(descriptionTextImg, tx - descriptionTextImg.width / 2, ty)\n        }\n        super.show()\n    }\n\n    percentString(actual, max = 1, lessIsMore: boolean = false) {\n        if (max === 0) max = 1\n        let value = Math.round(Math.max(Math.min(actual / max, 1), 0) * 100)\n        if (lessIsMore) value = 100 - value\n        return value.toString() + '%'\n    }\n\n    padLeft(value: string, padding = '0', length = 2) {\n        while (value.length < length) value = padding + value\n        return value\n    }\n\n    timeString(seconds: number) {\n        const ss = this.padLeft((seconds % 60).toString())\n        const minutes = Math.floor(seconds / 60)\n        const mm = this.padLeft(((minutes % 60).toString()))\n        const hh = this.padLeft((Math.floor(minutes / 60).toString()))\n        return hh + ':' + mm + ':' + ss\n    }\n\n    uncoverResult() {\n        this.uncoverTimeout = setTimeout(() => {\n            this.uncoverTimeout = null\n            this.resultIndex++\n            if (this.resultIndex < this.resultLastIndex) {\n                this.uncoverResult()\n            } else {\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n            }\n            this.redraw()\n        }, this.cfg.timer * 1000)\n    }\n\n}\n","import { ResourceManager } from './resource/ResourceManager'\nimport { LoadingScreen } from './screen/LoadingScreen'\nimport { MainMenuScreen } from './screen/MainMenuScreen'\nimport { GameScreen } from './screen/GameScreen'\nimport { RewardScreen } from './screen/RewardScreen'\nimport { GameState } from './game/model/GameState'\nimport { WadFileSelectionModal } from '../site/modal/WadFileSelectionModal'\n\n// define constants\n\nexport const DEV_MODE = process.env.WEBPACK_MODE === 'development'\nif (DEV_MODE) console.warn('DEV MODE ACTIVE')\n\nexport const JOB_SCHEDULE_INTERVAL = 1000 // milliseconds\nexport const CHECK_CLEARRUBBLE_INTERVAL = 5000 // milliseconds\nexport const JOB_ACTION_RANGE = 5\nexport const CHECK_SPANW_RAIDER_TIMER = 1000 // milliseconds\nexport const MAX_RAIDER_BASE = 12\nexport const MAX_RAIDER_REQUEST = 9\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10\nexport const UPDATE_OXYGEN_TIMER = 5000 // milliseconds\n\nexport const PANEL_ANIMATION_MULTIPLIER = 3\nexport const HEIGHT_MULTIPLER = 0.1\nexport const SEQUENCE_TEXTURE_FRAMERATE = 5\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640\nexport const SPRITE_RESOLUTION_HEIGHT = 480\nexport const TILESIZE = 40\nexport const NATIVE_FRAMERATE = 30\n\n// setup and link all components\n\nconst loadingScreen = new LoadingScreen()\nconst wadfileSelectModal = new WadFileSelectionModal('game-container')\n\nwadfileSelectModal.onStart = (wad0Url, wad1Url) => {\n    ResourceManager.startLoadingFromUrl(wad0Url, wad1Url)\n}\nResourceManager.onMessage = (msg: string) => {\n    loadingScreen.setLoadingMessage(msg)\n}\nResourceManager.onCacheMissed = () => {\n    wadfileSelectModal.show()\n}\nResourceManager.onInitialLoad = (totalResources: number) => {\n    wadfileSelectModal.hide()\n    loadingScreen.enableGraphicMode(totalResources)\n}\nResourceManager.onAssetLoaded = () => {\n    loadingScreen.increaseLoadingState()\n}\nResourceManager.onLoadDone = () => {\n    // complete setup\n    const mainMenuScreen = new MainMenuScreen()\n    const gameScreen = new GameScreen()\n    const rewardScreen = new RewardScreen()\n\n    mainMenuScreen.onLevelSelected = (levelName) => {\n        try {\n            gameScreen.startLevel(levelName)\n        } catch (e) {\n            console.error('Could not load level: ' + levelName, e)\n            gameScreen.hide()\n            mainMenuScreen.showLevelSelection()\n        }\n    }\n    gameScreen.onLevelEnd = () => {\n        gameScreen.hide()\n        rewardScreen.show()\n    }\n    rewardScreen.onAdvance = () => {\n        GameState.reset()\n        mainMenuScreen.showLevelSelection()\n    }\n\n    // setup complete\n    loadingScreen.hide()\n    const params = new URLSearchParams(window.location.search)\n    const entry = params.get('entry')\n    if (DEV_MODE && entry) {\n        GameState.numOre = Number(params.get('numOre')) || 0\n        GameState.numCrystal = Number(params.get('numCrystal')) || 0\n        if (entry === 'level') mainMenuScreen.showLevelSelection()\n        else if (entry === 'reward') rewardScreen.show()\n        else if (entry) mainMenuScreen.selectLevel(entry)\n    } else {\n        mainMenuScreen.showMainMenu()\n    }\n}\n\n// start the game engine with loading resources\n\nloadingScreen.show()\nResourceManager.startLoadingFromCache()\n"],"sourceRoot":""}