{"version":3,"sources":["webpack://rock-raiders-web/./site/modal/WadFileSelectionModal.ts","webpack://rock-raiders-web/./src/resource/wadworker/Resources.ts","webpack://rock-raiders-web/./src/resource/wadworker/InitLoadingMessage.ts","webpack://rock-raiders-web/./src/core/ImageHelper.js","webpack://rock-raiders-web/./src/resource/wadworker/WadUtil.ts","webpack://rock-raiders-web/./src/core/Util.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimationEntityType.ts","webpack://rock-raiders-web/./src/resource/AnimatedMesh.ts","webpack://rock-raiders-web/./src/resource/LWOLoader.ts","webpack://rock-raiders-web/./src/game/model/Selectable.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimClip.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimSubObj.ts","webpack://rock-raiders-web/./src/scene/DebugHelper.ts","webpack://rock-raiders-web/./src/game/model/entity/building/Building.ts","webpack://rock-raiders-web/./src/scene/model/BaseEntity.ts","webpack://rock-raiders-web/./src/event/EventKeyEnum.ts","webpack://rock-raiders-web/./src/event/EventBus.ts","webpack://rock-raiders-web/./src/event/WorldEvents.ts","webpack://rock-raiders-web/./src/event/GameEvent.ts","webpack://rock-raiders-web/./src/game/model/job/JobState.ts","webpack://rock-raiders-web/./src/game/model/job/JobType.ts","webpack://rock-raiders-web/./src/game/model/job/Job.ts","webpack://rock-raiders-web/./src/scene/model/PathTarget.ts","webpack://rock-raiders-web/./src/scene/model/collect/CollectableEntity.ts","webpack://rock-raiders-web/./src/game/model/job/CollectJob.ts","webpack://rock-raiders-web/./src/scene/model/activities/BaseActivity.ts","webpack://rock-raiders-web/./src/scene/model/activities/AnimEntityActivity.ts","webpack://rock-raiders-web/./src/scene/model/activities/RaiderActivity.ts","webpack://rock-raiders-web/./src/scene/model/activities/BuildingActivity.ts","webpack://rock-raiders-web/./src/scene/model/CollectionTarget.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityIdentifier.ts","webpack://rock-raiders-web/./src/event/LocalEvents.ts","webpack://rock-raiders-web/./src/scene/model/anim/AnimEntity.ts","webpack://rock-raiders-web/./src/scene/model/activities/DynamiteActivity.ts","webpack://rock-raiders-web/./src/scene/model/collect/Dynamite.ts","webpack://rock-raiders-web/./src/game/model/GameState.ts","webpack://rock-raiders-web/./src/scene/model/collect/Crystal.ts","webpack://rock-raiders-web/./src/scene/model/collect/Ore.ts","webpack://rock-raiders-web/./src/scene/model/RaiderSkill.ts","webpack://rock-raiders-web/./src/resource/wadworker/WorkerMessage.ts","webpack://rock-raiders-web/./src/scene/SceneManager.ts","webpack://rock-raiders-web/./src/resource/LWSCLoader.ts","webpack://rock-raiders-web/./src/resource/AnimEntityLoader.ts","webpack://rock-raiders-web/./src/core/BitmapFont.ts","webpack://rock-raiders-web/./src/cfg/BaseConfig.ts","webpack://rock-raiders-web/./src/event/EventTypeEnum.ts","webpack://rock-raiders-web/./src/cfg/BuildingEntityStats.ts","webpack://rock-raiders-web/./src/cfg/MovableEntityStats.ts","webpack://rock-raiders-web/./src/cfg/GameStatsCfg.ts","webpack://rock-raiders-web/./src/resource/ResourceManager.ts","webpack://rock-raiders-web/./src/screen/ScreenLayer.ts","webpack://rock-raiders-web/./src/event/EventManager.ts","webpack://rock-raiders-web/./src/scene/model/map/Surface.ts","webpack://rock-raiders-web/./src/screen/BaseScreen.ts","webpack://rock-raiders-web/./src/screen/LoadingScreen.ts","webpack://rock-raiders-web/./src/menu/MainMenuBaseItem.ts","webpack://rock-raiders-web/./src/menu/MainMenuLabelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuIconButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuLayer.ts","webpack://rock-raiders-web/./src/menu/MainMenuLevelButton.ts","webpack://rock-raiders-web/./src/menu/MainMenuPanel.ts","webpack://rock-raiders-web/./src/menu/MainMenuWindow.ts","webpack://rock-raiders-web/./src/menu/LevelSelectLayer.ts","webpack://rock-raiders-web/./src/screen/MainMenuScreen.ts","webpack://rock-raiders-web/./src/scene/model/map/SurfaceType.ts","webpack://rock-raiders-web/./src/scene/model/map/SurfaceGeometry.ts","webpack://rock-raiders-web/./src/event/WorldLocationEvent.ts","webpack://rock-raiders-web/./src/scene/model/map/astar.ts","webpack://rock-raiders-web/./src/scene/TerrainLoader.ts","webpack://rock-raiders-web/./src/scene/model/map/TerrainPath.ts","webpack://rock-raiders-web/./src/scene/model/map/Terrain.ts","webpack://rock-raiders-web/./src/scene/model/EntityStep.ts","webpack://rock-raiders-web/./src/scene/model/MoveState.ts","webpack://rock-raiders-web/./src/scene/model/MovableEntity.ts","webpack://rock-raiders-web/./src/scene/model/FulfillerEntity.ts","webpack://rock-raiders-web/./src/scene/model/RaiderTool.ts","webpack://rock-raiders-web/./src/scene/model/Raider.ts","webpack://rock-raiders-web/./src/scene/model/BuildingEntity.ts","webpack://rock-raiders-web/./src/scene/model/activities/MonsterActivity.ts","webpack://rock-raiders-web/./src/game/model/entity/monster/Monster.ts","webpack://rock-raiders-web/./src/game/model/entity/monster/SmallSpider.ts","webpack://rock-raiders-web/./src/game/model/entity/monster/Bat.ts","webpack://rock-raiders-web/./src/scene/ObjectListLoader.ts","webpack://rock-raiders-web/./src/game/model/job/surface/SurfaceJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/DynamiteJob.ts","webpack://rock-raiders-web/./src/core/NerpRunner.ts","webpack://rock-raiders-web/./src/core/NerpParser.ts","webpack://rock-raiders-web/./src/game/model/job/PriorityList.ts","webpack://rock-raiders-web/./src/game/model/job/MoveJob.ts","webpack://rock-raiders-web/./src/scene/WorldManager.ts","webpack://rock-raiders-web/./src/game/layer/SelectionLayer.ts","webpack://rock-raiders-web/./src/game/model/job/surface/DrillJob.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ClearRubbleJob.ts","webpack://rock-raiders-web/./src/game/layer/GameLayer.ts","webpack://rock-raiders-web/./src/game/gui/base/BaseElement.ts","webpack://rock-raiders-web/./src/game/gui/base/Panel.ts","webpack://rock-raiders-web/./src/game/gui/base/Button.ts","webpack://rock-raiders-web/./src/game/gui/sidebar/SideBarLabel.ts","webpack://rock-raiders-web/./src/game/gui/sidebar/PanelCrystalSideBar.ts","webpack://rock-raiders-web/./src/game/gui/infodock/ButtonInfoDockCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/ButtonPriorityListCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/ButtonTopCfg.ts","webpack://rock-raiders-web/./src/cfg/ButtonsCfg.ts","webpack://rock-raiders-web/./src/game/gui/radar/RadarPanel.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessage.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/MessagePanel.ts","webpack://rock-raiders-web/./src/cfg/IconPanelBackButtonCfg.ts","webpack://rock-raiders-web/./src/cfg/MenuItemCfg.ts","webpack://rock-raiders-web/./src/game/gui/main/IconPanelButton.ts","webpack://rock-raiders-web/./src/game/gui/main/IconSubPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/BuildingPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SmallVehiclePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/LargeVehiclePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectBasePanel.ts","webpack://rock-raiders-web/./src/game/model/job/surface/ReinforceJob.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectWallPanel.ts","webpack://rock-raiders-web/./src/game/model/job/surface/CompletePowerPathJob.ts","webpack://rock-raiders-web/./src/scene/model/BuildingSite.ts","webpack://rock-raiders-web/./src/scene/model/collect/ElectricFence.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectFloorPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectRubblePanel.ts","webpack://rock-raiders-web/./src/game/gui/main/IconPanelToggleButton.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectBuildingPanel.ts","webpack://rock-raiders-web/./src/game/model/job/EatJob.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectRaiderPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/SelectVehiclePanel.ts","webpack://rock-raiders-web/./src/core/Area.ts","webpack://rock-raiders-web/./src/game/model/job/TrainJob.ts","webpack://rock-raiders-web/./src/game/gui/main/TrainRaiderPanel.ts","webpack://rock-raiders-web/./src/game/model/job/GetToolJob.ts","webpack://rock-raiders-web/./src/game/gui/main/GetToolPanel.ts","webpack://rock-raiders-web/./src/game/gui/main/IconPanelButtonLabel.ts","webpack://rock-raiders-web/./src/game/gui/main/MainPanel.ts","webpack://rock-raiders-web/./src/game/gui/base/ToggleButton.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/TopPanel.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoDockButton.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoDockPanel.ts","webpack://rock-raiders-web/./src/cfg/PanelsCfg.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityListPanel.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoMessagesEntryConfig.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InfoMessagesConfig.ts","webpack://rock-raiders-web/./src/game/gui/infodock/InformationPanel.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityButtonsConfig.ts","webpack://rock-raiders-web/./src/game/gui/toppanel/PriorityPositionsEntry.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessageEntryConfig.ts","webpack://rock-raiders-web/./src/game/gui/messagepanel/TextInfoMessageConfig.ts","webpack://rock-raiders-web/./src/game/layer/GuiBaseLayer.ts","webpack://rock-raiders-web/./src/game/layer/GuiMainLayer.ts","webpack://rock-raiders-web/./src/game/Supervisor.ts","webpack://rock-raiders-web/./src/game/gui/briefing/BriefingPanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuCycleItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuSliderItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuLabelItem.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuLayer.ts","webpack://rock-raiders-web/./src/game/gui/overlay/MenuBasePanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/OptionsPanel.ts","webpack://rock-raiders-web/./src/game/gui/overlay/PausePanel.ts","webpack://rock-raiders-web/./src/core/Rect.ts","webpack://rock-raiders-web/./src/cfg/DialogCfg.ts","webpack://rock-raiders-web/./src/cfg/BriefingPanelCfg.ts","webpack://rock-raiders-web/./src/game/layer/OverlayLayer.ts","webpack://rock-raiders-web/./src/screen/GameScreen.ts","webpack://rock-raiders-web/./src/menu/RewardScreenButton.ts","webpack://rock-raiders-web/./src/screen/RewardScreen.ts","webpack://rock-raiders-web/./src/main.ts"],"names":["parentId","onStart","rootElement","document","getElementById","appendChild","createElement","classList","add","tabIndex","setAttribute","modalDialog","modalContent","modalHeader","modalTitle","innerText","id","modalBody","navTabList","navFileBtn","WadFileSelectionModal","appendNavButton","navUrlBtn","navTabContent","this","appendNavFileTab","appendNavUrlTab","modal","backdrop","keyboard","parent","active","controlTarget","navBtn","type","String","labelledBy","navFileTab","appendNavTab","wad0File","appendWadFileGroup","wad1File","btnStartFile","addEventListener","disabled","wad0FileUrl","URL","createObjectURL","files","wad1FileUrl","filename","wadFileGroup","wadFileLabel","innerHTML","wadFileInput","required","navUrlTab","urlHint","wad0Url","appendWadUrlGroup","wad1Url","btnStartUrl","value","navTab","example","wadUrlGroup","wadUrlLabel","wadUrlInput","show","hide","Worker_fn","Worker","createContext","width","height","console","error","result","y","x","fillStyle","fillRect","createDummyContext","canvas","context","getContext","createDummyImgData","ImageData","e","px","py","setPixel","imgData","r","g","b","a","n","data","getPixel","iGet","obj","keys","forEach","keyname","Object","filter","key","toLowerCase","map","url","strUrl","toString","replace","startsWith","substring","lastInd","lastIndexOf","decodeString","TextDecoder","decode","decodeFilepath","getRandomInclusive","min","max","Math","ceil","floor","random","getRandom","getRandomSign","clearTimeoutSafe","timeout","clearTimeout","clearIntervalSafe","interval","clearInterval","Array","prototype","remove","element","index","indexOf","splice","Map","getOrUpdate","updateCallback","get","undefined","set","carryNullName","depositNullName","toolNullName","mediumPoly","highPoly","fPPoly","activities","mesh","textureSequences","dispose","s","geometry","isArray","material","mat","SURF_VTRN","getVector3AtOffset","view","offset","vector","getFloat32","z","SelectionType","path","verbose","materials","vertices","indices","uvs","sequenceIntervals","log","parsePoints","chunkOffset","chunkSize","numVertices","Float32Array","i","vertexIndex","vertexOffset","parseSurfaceNames","buffer","surfaceNames","Uint8Array","split","length","new_material","name","side","push","parsePolygons","totalNumIndices","numIndices","getInt16","materialIndex","addGroup","currentIndex","Uint16Array","faceIndices","Int16Array","COUNTER_CLOCKWISE","parseSurface","getUint8","materialName","textureFlags","textureSize","textureCenter","subchunkOffset","subchunkType","getInt32","subchunkSize","colorArray","color","fromArray","join","flags","getUint16","luminosity","diffuse","specular","reflection","reflectivity","transparency","opacity","transparent","luminosity2","diffuse2","specular2","toArray","textureTypeName","textureColorArray","textureFilepath","sequenceTexture","endsWith","textureFilename","match","ResourceManager","filterTextureSequenceNames","setInterval","getTexture","SEQUENCE_TEXTURE_FRAMERATE","alphaTest","warn","size","center","XAXIS_BIT","groups","group","start","count","uvIndex","u","v","planarMapUVS","parse","DataView","getUint32","fileSize","byteLength","ID4_SIZE","cursor","chunkType","setIndex","computeVertexNormals","AnimatedMesh","magic","looping","transcoef","firstFrame","lastFrame","framesPerSecond","bodies","degToRad","relPos","relRot","relScale","parentObjInd","model","radVec","degX","degY","degZ","setFrameAndFollowing","animationFrameIndex","infos","c","setOpacityAndFollowing","Stats","stats","setMode","domElement","style","position","left","top","body","visibility","renderStart","begin","renderDone","end","folder","blocksPathSurface","aeFile","slice","getByName","buildingType","TOOLSTATION","TELEPORT_PAD","DOCKS","POWER_STATION","BARRACKS","UPGRADE","GEODOME","ORE_REFINERY","GUNSTATION","TELEPORT_BIG","Building","EventKey","level","getPosition","clone","getPosition2D","getHeading","rotation","onDiscover","visible","getCurrentSurface","worldMgr","sceneManager","terrain","getSurfaceFromWorld","removeFromScene","scene","EntityType","publishEvent","event","blockedEvents","includes","eventKey","isLocal","getListener","callback","registerEventListener","eventListener","entityKey","GameEvent","job","WorldEvent","JOB_CREATE","JobEvent","JOB_DELETE","numRequested","RAIDER_REQUESTED","collectableType","MATERIAL_AMOUNT_CHANGED","surface","SPAWN_DYNAMITE","entity","ENTITY_ADDED","ENTITY_REMOVED","JobState","CAVERN_DISCOVERED","ORE_FOUND","building","BUILDING_UPGRADED","raider","skill","RAIDER_TRAINED","JobType","fulfiller","jobstate","OPEN","assign","unassign","cancel","CANCELED","stopJob","isQualified","isQualifiedWithTool","isQualifiedWithTraining","onJobComplete","COMPLETE","Job","CollectableType","location","targetLocation","isInArea","item","COLLECT","getWorkplaces","PathTarget","carries","hasTarget","getPriorityIdentifier","getCollectableType","ELECTRIC_FENCE","electricFence","targetSurface","canPlaceFence","fence","PublicJob","activityKey","Stand","AnimEntityActivity","BaseActivity","Route","RaiderActivity","RunPanic","Drill","Walk","Reinforce","Reverse","TurnLeft","TurnRight","CantDo","Collect","Clear","Carry","CarryTurnLeft","CarryTurnRight","CarryStand","Dynamite","Place","Deposit","TeleportIn","Repair","rest","routeRubble","CarryRubble","Eat","FireLaser","GetUp","ThrownByRockMonster","Slip","Train","Recharge","Waiting1","Waiting2","Waiting3","Waiting4","Hoverboard","Standhoverboard","HitLefthoverboard","HitRighthoverboard","HitFronthoverboard","HitBackhoverboard","SMALLTRUCK","StandSMALLTRUCK","HitLeftSMALLTRUCK","HitRightSMALLTRUCK","HitFrontSMALLTRUCK","HitBackSMALLTRUCK","SMALLheli","StandSMALLheli","HitLeftSMALLheli","HitRightSMALLheli","HitFrontSMALLheli","HitBackSMALLheli","SMALLCAT","StandSMALLCAT","HitLeftSMALLCAT","HitRightSMALLCAT","HitFrontSMALLCAT","HitBackSMALLCAT","SMALLMLP","StandSMALLMLP","HitLeftSMALLMLP","HitRightSMALLMLP","HitFrontSMALLMLP","HitBackSMALLMLP","LARGECAT","StandLARGECAT","HitLeftLARGECAT","HitRightLARGECAT","HitFrontLARGECAT","HitBackLARGECAT","SMALLDIGGER","StandSMALLDIGGER","Teleport","BuildingActivity","Explode","Unpowered","site","canGatherItem","activity","getDefaultActivity","gatherItem","addItem","carryJoint","changeActivity","CollectPathTarget","addItemToStorage","CRYSTAL","GameState","numCrystal","EventBus","MaterialAmountChanged","ORE","numOre","getDropAction","targets","targetSite","updateTargets","getCarryTargets","resetTarget","sites","buildingSites","needs","getRandomDropPosition","buildings","getBuildingsByType","getTargetBuildingTypes","getDropPosition2D","some","t","complete","isPowered","collectablesUndiscovered","collectables","JobCreateEvent","CollectJob","setTargetSite","unAssign","BaseEntity","PriorityIdentifier","LocalEvent","SELECTED_SURFACE","SelectionEvent","SELECTED_BUILDING","SELECTED_RAIDER","vehicle","SELECTED_VEHICLE","DESELECTED_ENTITY","SURFACE_CHANGED","entityType","poly","animation","animationTimeout","selectionFrame","pickSphere","pickSphereRadius","depositJoint","getToolJoint","radiusSq","beamUp","EntityDeselected","AnimEntity","moveUp","TILESIZE","counter","NATIVE_FRAMERATE","setTimeout","onActivityChanged","durationTimeMs","lActivityKey","anim","setAnimation","onAnimationDone","bind","children","polyModel","lBodyName","polyPart","parentInd","sphere","setFromObject","getBoundingSphere","radius","animate","frameIndex","p","copy","scale","hasOwnProperty","nextFrame","standardDurationTimeMs","timeoutTimeMs","createPickSphere","pickSphereCenter","getPickSphereCenter","userData","selectable","createSelectionFrame","getBoundingBoxCenter","getCenter","sub","applyMatrix4","makeScale","selectionFrameTextureSize","ctx","strength","round","selectionFrameTexture","selectionMaterial","depthTest","selectionFrameSize","Normal","DynamiteActivity","TickDown","getAnimationEntityType","isExplodable","hasOneBuildingOf","getDigPositions","DYNAMITE","ignite","getCenterWorld","lookAt","collapse","GameResultState","resource2","getResource","mesh2","SceneManager","registerMesh","LWOLoader","emissive","depthWrite","resource","PowerCrystal","aiPriorityCrystal","CollectableEntity","Ore","aiPriorityOre","DRIVER","RaiderSkill","ENGINEER","GEOLOGIST","PILOT","SAILOR","DEMOLITION","WorkerMessageType","reset","resultState","RUNNING","levelFullName","numBrick","usedCrystals","neededCrystals","airlevel","selectedEntities","selectionType","buildingsUndiscovered","raiders","raidersUndiscovered","requestedRaiders","vehicles","vehiclesUndiscovered","spiders","spidersBySurface","bats","totalCrystals","totalOres","totalDiggables","remainingDiggables","totalCaverns","discoveredCaverns","levelStartTime","levelStopTime","rewardConfig","priorityList","buildingTypes","bt","getClosestBuildingByType","targetBuildings","closest","minDist","bPos","getDropPosition","dist","distanceToSquared","hasBuildingWithUpgrades","upgrades","getTrainingSites","training","TrainDynamite","selectEntities","entities","previouslySelected","stillSelected","deselect","selectionEvents","freshlySelected","selectionEvent","select","len","GROUP","getSelectionType","getMaxRaiders","MAX_RAIDER_BASE","ADDITIONAL_RAIDER_PER_SUPPORT","discoverSurface","minX","minZ","maxX","maxZ","discoverEntities","undiscovered","discovered","pos","dropMaterial","quantity","Crystal","quota","importance","scoreCrystals","crystals","Infinity","scoreTimer","gameTimeSeconds","timer","scoreCaverns","caverns","scoreConstructions","constructions","scoreOxygen","oxygen","scoreFigures","figures","SURFACE","BUILDING","getNearbySpiders","currentSurface","nearbySpiders","getSurface","maxFps","debugHelper","DebugHelper","renderer","antialias","setClearColor","camera","controls","mouseButtons","LEFT","MIDDLE","RIGHT","selectEntitiesByRay","rx","ry","raycaster","setFromCamera","intersects","intersectObjects","floorGroup","selected","object","selectEntitiesInFrustum","r1x","r1y","r2x","r2y","startPoint","endPoint","Number","EPSILON","updateProjectionMatrix","updateMatrixWorld","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","setFromMatrixPosition","matrixWorld","unproject","vectemp1","vectemp2","vectemp3","normalize","deep","MAX_VALUE","multiplyScalar","frustum","planes","setFromCoplanarPoints","normal","containsPoint","getSelectionCenter","setupScene","ambientColor","ambientLight","cursorTorchlight","distance","startScene","renderInterval","animRequest","requestAnimationFrame","render","disposeScene","cancelAnimationFrame","meshRegistry","animatedMesh","animationClip","AnimClip","lines","lineIndex","content","l","trim","sceneFileVersion","parseInt","line","parseFrameBlock","parseObjectBlock","parseLine","frameStep","subObj","AnimSubObj","lwoBuffer","lenInfos","lenFrames","numOfInformationChannels","numOfKeyframes","frameNum","loadModels","root","getPath","AnimationEntityType","polyname","polykey","act","file","isLws","LWSCLoader","fontImageData","cols","rows","letters","chars","maxCharWidth","getActualCharacterWidth","rowPixelIndex","colPixelIndex","charHeight","extractData","actualWidth","startX","startY","alpha","createTextImage","text","maxWidth","autoCenter","determineRows","row","rowX","rowY","letterX","letterImgData","charAt","img","putImageData","spaceWidth","rowText","rowWidth","word","wordWidth","letter","letterImg","createTextMessage","msg","MSG","createCfgLoaded","cfg","totalResources","CFG","createAssetLoaded","assetIndex","assetName","assetObj","ASSET","createLoadDone","loadingTimeSeconds","DONE","MOUSE_BUTTON","POINTER_EVENT","KEY_EVENT","setFromCfg","config","cfgObj","cfgKey","lCfgKeyName","objKey","assignValue","cfgValue","currentValue","currentIsArray","parsedValue","parseValue","parsedIsArray","Levels","SelfPowered","PowerBuilding","PickSphere","CostOre","CostCrystal","getByType","Toolstation","TeleportPad","Docks","Powerstation","Barracks","Upgrade","Geodome","OreRefinery","GunStation","TeleportBIG","BaseConfig","RouteSpeed","RubbleCoef","PathCoef","Pilot","SoilDrillTime","LooseDrillTime","MedDrillTime","HardDrillTime","SeamDrillTime","UpgradeTime","CollRadius","CollHeight","TrackDist","SingleWidthDig","RepairValue","SurveyRadius","Drillsound","Drillfadesound","RestPercent","EnergyDecayRate","CanClearRubble","NumOfToolsCanCarry","CrossLand","RouteAvoidance","UseLegoManTeleporter","AwarenessRange","OxygenCoef","CanStrafe","EnterToolStore","ShowHealthBar","RockMonster","AlertRadius","HealthDecayRate","CanScare","CarryMinHealth","PainThreshold","StampRadius","AttackRadius","CanSteal","GrabMinifigure","BumpDamage","AttackPaths","SplitOnZeroHealth","CanBeHitByFence","Capacity","CanBeShotAt","CanFreeze","FreezerTime","FreezerDamage","CanLaser","LaserDamage","CanPush","PusherDist","PusherDamage","WakeRadius","ScaredByBigBangs","RemoveReinforcement","SmallSpider","RandomMove","RandomEnterWall","CauseSlip","DontShowDamage","DontShowOnRadar","MovableEntityStats","Bat","randomMoveTime","Flocks","FlocksDebug","FlocksSmooth","FlocksSize","FlocksTurn","FlocksSpeed","FlocksTightness","FlocksGoalUpdate","FlocksRandomness","FlocksHeight","CrossWater","CrossLava","TinyRM","ScaredByPlayer","TinyIM","Slug","UseHoles","DrainPower","LavaMonster","IceMonster","CanBeDriven","UseSmallTeleporter","UpgradeCostOre","UpgradeCostStuds","EngineSound","SmallHeli","Smallmlp","Tracker","CanDoubleSelect","SmallCat","UseWaterTeleporter","MaxCarry","GetInAtLand","GetOutAtLand","TakeCarryingDrivers","SmallDigger","VehicleCanBeCarried","SmallTruck","CarryStart","Bulldozer","UseBigTeleporter","InvisibleDriver","WalkerDigger","DrillSound","DrillFadeSound","LargeDigger","LargeCat","ClassAsLarge","CarryVehicles","LargeHeli","LargeMLP","CostRefinedOre","SnaxULike","TrainDriver","CrystalDrain","DamageCausesCallToArms","BuildingEntityStats","ProcessCrystal","ProcessOre","SmallTeleporter","ManTeleporter","TrainPilot","BigTeleporter","WaterEntrances","WaterTeleporter","TrainSailor","ToolStore","StoreObjects","FunctionCoef","TrainScanner","UpgradeBuilding","TrainRepair","ProcessedOre","Boulder","Pusher","Freezer","LaserShot","ColRadius","ElectricFence","Path","startLoadingFromCache","startLoading","startLoadingFromUrl","InitLoadingMessage","worker","onmessage","resourceByName","onAssetLoaded","onMessage","configuration","GameStatsCfg","onInitialLoad","CACHE_MISS","onCacheMissed","onLoadDone","postMessage","basename","lBasename","resourceName","lName","getImageData","imageName","lImageName","getImage","getImageOrNull","textureName","lTextureName","lSharedTextureName","texture","needsUpdate","getMap","aeFilename","cfgRoot","AnimEntityLoader","getBitmapFont","fontCache","BitmapFont","getDefaultFont","withContext","background","setZIndex","zIndex","compareZ","layerA","layerB","aIndex","bIndex","resize","redraw","onRedraw","isActive","toCanvasCoords","windowX","windowY","clientRect","getBoundingClientRect","handlePointerEvent","eventEnum","handleKeyEvent","handleWheelEvent","fixedWidth","SPRITE_RESOLUTION_WIDTH","fixedHeight","SPRITE_RESOLUTION_HEIGHT","toScaledCoords","cx","cy","scaleX","scaleY","ScreenLayer","cursorName","createCursor","curUrl","revokeObjectURL","curImg","toDataURL","ScaledLayer","WALL_TYPE","screen","gameCanvasContainer","isInRect","preventDefault","MOVE","DOWN","UP","eventType","nonBubblingClone","PointerEvent","bubbles","clientX","clientY","pointerType","button","ctrlKey","metaKey","shiftKey","layers","sort","WheelEvent","deltaX","deltaY","deltaZ","ratio","focus","eventMgr","EventManager","window","onWindowResize","cursorLayer","addLayer","CursorLayer","layer","offsetWidth","maxHeight","offsetHeight","idealHeight","firstLayer","rect","right","bottom","setLoadingMessage","font","fillText","enableGraphicMode","imgBackground","drawImage","imgProgress","imgLoading","loadingBarWidth","increaseLoadingState","BaseScreen","scrollAffected","needsRedraw","hover","pressed","actionName","targetIndex","checkHover","sx","sy","onHoverChange","checkSetPressed","setReleased","draw","labelImgLo","labelImgHi","loFont","label","hiFont","target","MainMenuBaseItem","imgNormal","imgHover","imgPressed","tooltip","menuCfg","items","scrollY","scrollSpeedY","scrollInterval","menuImage","titleImage","fullName","itemsLabel","MainMenuLabelButton","MainMenuIconButton","displayTitle","that","setScrollY","absY","canScroll","scrollAreaHeight","setScrollSpeedY","MAIN","showMainMenu","selectLevel","levelKey","sign","pow","scrollYBefore","levelCfg","imgActive","imgInactive","imgCross","unlocked","frontEndX","frontEndY","menuBMP","frontEndOpen","area","w","h","imgFirstLine","imgSecondLine","setFirstLine","setSecondLine","modeLevel","levelsCfg","levelTextCfg","LevelTextCfg","MainMenuPanel","panelImgData","panelPos","levelTextWindow","MainMenuWindow","tutorial","levelsByName","levelButton","MainMenuLevelButton","MainMenuLayer","winCfg","panelCfg","onLevelSelected","menus","title","LevelSelectLayer","showLevelSelection","levelName","options","shaping","matIndex","drillable","drillableHard","explodable","reinforcable","getByNum","typeNum","SurfaceType","POWER_PATH_BUILDING","SOLID_ROCK","HARD_ROCK","LOOSE_ROCK","DIRT","LAVA","ORE_SEAM","WATER","CRYSTAL_SEAM","RECHARGE_SEAM","SLUG_HOLE","RUBBLE4","RUBBLE3","RUBBLE2","RUBBLE1","GROUND","POWER_PATH","POWER_PATH_SITE","create","wallType","topLeftVertex","bottomRightVertex","topRightVertex","bottomLeftVertex","topLeftHeight","topRightHeight","bottomRightHeight","bottomLeftHeight","uvOffset","INVERTED_CORNER","WALL","WEIRD_CREVICE","Boolean","uv","bufferVertices","bufferNormals","addFaceAndNormals","subVectors","cross","uvIndexes","bufferVertexUvs","bufferGeometry","BufferAttribute","copyVector3sArray","copyVector2sArray","LOCATION_DEATH","WorldLocationEvent","LOCATION_MONSTER","LOCATION_CRYSTAL_FOUND","LOCATION_UNDER_ATTACK","LOCATION_LANDSLIDE","LOCATION_POWER_DRAIN","LOCATION_SLUG_EMERGE","LOCATION_RAIDER_DISCOVERED","surfaceType","heightOffset","containedOres","containedCrystals","reinforced","jobs","surfaceRotation","seamLevel","fallinTimeout","fallinGrp","needsMeshUpdate","topLeftHeightOffset","topRightHeightOffset","bottomLeftHeightOffset","bottomRightHeightOffset","rubblePositions","hasPower","jobType","DRILL","REINFORCE","BLOW","surfaceJob","hasJobType","discoverNeighbors","foundCave","surf","getSurfaceOrNull","cancelJobs","getRandomPosition","CavernDiscovered","dropContainedOre","crystal","addCollectable","CrystalFoundEvent","isSupported","updateSurfaceMeshes","updateWorldMatrix","dropAmount","OreFoundEvent","JobDeleteEvent","updateJobColor","reduceRubble","shift","updateTexture","SurfaceChanged","surfLeft","surfTopLeft","surfTop","surfTopRight","surfRight","surfBottomRight","surfBottom","surfBottomLeft","isHighGround","surf1","surf2","surf3","updateMesh","force","updateGeometry","cancelReinforceJobs","graphWalk","grid","weight","getGraphWalkWeight","otherJobs","textureSet","texturebasename","updatePowerPathTexture","CORNER","accessMaterials","isPath","pathSum","PI","avgHeight","sum","cnt","args","HEIGHT_MULTIPLER","SurfaceGeometry","shininess","setHex","SurfaceSelectedEvent","colorPriority","hasRubble","isWalkable","isDrillable","isDrillableHard","isReinforcable","isDigable","digPosition","reinforce","getCenterWorld2D","getTerrainHeight","setFallinLevel","fallinLevel","originPos","targetPos","findFallInOrigin","findFallInTarget","scheduleFallin","targetX","targetY","createFallin","fallinPosition","LandslideEvent","dx","dy","rotateOnAxis","atan2","makeRubble","m","getFloorHeight","worldX","worldZ","dy0","Surface","interpolate","dy1","y0","y1","containedOre","setBuilding","resetGraphWalk","setHasPower","state","recursive","neighbors","pathTo","node","curr","unshift","PathMap","PredugMap","astar","search","graph","cleanDirty","heuristic","heuristics","manhattan","openHeap","BinaryHeap","f","closestNode","markDirty","currentNode","pop","closed","il","neighbor","isWall","gScore","getCost","beenVisited","visited","rescoreElement","pos0","pos1","abs","diagonal","D2","sqrt","d1","d2","cleanNode","gridIn","nodes","dirtyNodes","GridNode","init","ret","graphString","rowDebug","fromNeighbor","scoreFunction","sinkDown","bubbleUp","parentN","elemScore","child2N","child1N","swap","child1Score","child1","child2","locations","lengthSq","addLocation","surfaces","roofGroup","cachedPaths","bSurf","worldPosition","getSurfaceFromWorldXZ","getSurfaceFromWorld2D","clear","findPath","startSurface","endSurface","TerrainPath","cacheIdentifier","cachedPath","searchPath","startNode","endNode","worldPath","leftSurface","topSurface","rightSurface","bottomSurface","leftSurface2","topSurface2","rightSurface2","bottomSurface2","loadTerrain","levelConf","tileSize","blockSize","Terrain","themeName","terrainMap","pathMap","surfaceMap","predugMap","cryOreMap","fallinMap","erodeMap","surfaceTypeNum","predugLevel","CAVERN_EXPOSED","SLUG_HOLE_EXPOSED","SLUG_HOLE_HIDDEN","CAVERN_HIDDEN","pathMapLevel","NONE","RUBBLE","currentCryOre","Graph","MoveState","dz","vec","targetReached","currentPath","getSpeed","isOnPath","moveToClosestTarget","equals","paths","findPathToTarget","TARGET_UNREACHABLE","nextLocation","firstLocation","step","determineStep","TARGET_REACHED","getRouteActivity","MOVED","getEntityStep","entitySpeed","stepLengthSq","JOB_ACTION_RANGE","setLength","EntityStep","determinePosY","isOnRubble","workInterval","followUpJob","jobWorkplaces","work","resetWorkInterval","dropItem","getWorldPosition","pickupItem","setJob","MovableEntity","RaiderTool","HAMMER","SHOVEL","SPANNER","FREEZERGUN","LASER","PUSHERGUN","BIRDSCARER","tools","skills","slipped","EntityAddedEvent","RAIDER","RaiderDiscoveredEvent","RaiderSelected","isDriving","spider","slip","onDeath","moveToClosestWorkplace","drillTimeMs","focusPoint","rotateAround","completeJob","CLEAR_RUBBLE","dynamite","moveResult","dropAction","TRAIN","RaiderTrained","GET_TOOL","tool","EAT","COMPLETE_POWER_PATH","hasTool","hasSkill","FulfillerEntity","powerSwitch","spawning","upgradeCostOre","upgradeCostBrick","crystalsInUse","turnOnPower","BuildingSelected","worldPos","dropPos2D","hasMaxLevel","upgrade","canUpgrade","BRICK","BuildingUpgraded","spawnMaterials","turnOffPower","MonsterActivity","onLevelEnd","moveTimeout","startMoving","onMove","prevSurface","nextSurface","findTarget","currentCenter","targetZ","Monster","startRandomMove","bat","loadObjectList","objectListConf","values","olObject","lTypeName","xPos","yPos","terrainY","radHeading","heading","applyAxisAngle","update","setTorchPosition","Raider","BuildingEntity","primaryPathSurface","secondaryOffset","secondarySurface","pathOffset","pathSurface","requiredTool","requiredSkill","aiPriorityDestruction","SurfaceJob","debug","onLevelComplete","nerpInterval","registers","fill","timers","scriptLines","statements","macrosByName","labelsByName","halted","programCounter","messages","messagePermit","startExecution","execute","pauseExecution","checkRegister","register","num","isNaN","Error","checkRegisterValue","getR","setR","addR","setTimer","Date","getTime","getTimer","setLevelCompleted","setLevelFail","FAILED","setTutorialFlags","setMessagePermit","messagesAllowed","setBuildingsUpgradeLevel","typeName","setToolStoreLevel","setTeleportPadLevel","setPowerStationLevel","setBarracksLevel","getToolStoresBuilt","getMinifiguresOnLevel","getCrystalsCurrentlyStored","getObjectiveSwitch","setMessageTimerValues","arg1","arg2","arg3","getMessageTimer","cameraUnlock","setMessage","messageNumber","arrowDisabled","txt","setCameraGotoTutorial","getTutorialBlockIsGround","getTutorialBlockIsPath","getUnitAtBlock","getOxygenLevel","getObjectiveShowing","addPoweredCrystals","disallowAll","getPoweredPowerStationsBuilt","getPoweredBarracksBuilt","getRecordObjectAtTutorial","getHiddenObjectsFound","callMethod","methodName","methodArgs","setRegisterMatch","addRegisterMatch","getRegisterMatch","setTimerMatch","getTimerMatch","lMethodName","memberName","apply","conditional","conditionResult","executeStatement","expression","invoke","argValues","comparator","jump","statement","nerpScript","nerpRunner","NerpRunner","includeName","includedRunner","NerpParser","concat","firstLine","macroLines","mLine","append","macroLine","macroCall","replaceMacros","labelMatch","preProcess","labelName","macro","RegExp","number","opSplit","brackets","spaceSplit","jumpMatch","priorities","levelDefault","current","toggle","enabled","upOne","tmp","entry","PriorityEntry","pushToTop","getPriority","priority","j","levelPriorityEntry","spawnRaiderInterval","checkSpawnRaiders","CHECK_SPANW_RAIDER_TIMER","targetBuilding","DynamiteJob","setup","gameScreen","reward","PriorityList","ambientRgb","maxAmbRgb","normalizedRgb","TerrainLoader","oListFile","ObjectListLoader","nerpFile","nerpMessageFile","now","stop","setSize","getTerrainIntersectionPoint","point","intersect","intersectObject","collectable","world","spawnBuildings","RaiderRequested","station","walkOutPos","MoveJob","applyEuler","selectStart","setWorldManager","worldManager","startSelection","changeSelection","screenX","screenY","clearRect","strokeStyle","lineWidth","strokeRect","aiPriorityClearing","rightDown","intersectionPoint","getTerrainPositionFromEvent","SECONDARY","createSurfaceJob","DrillJob","ClearRubbleJob","dispatchEvent","DEV_MODE","surfJob","relX","relY","hidden","addChild","child","updatePosition","drawHover","drawTooltip","onClick","isInactive","inRect","stateChanged","checkClick","checkRelease","release","notifyRedraw","xOut","yOut","xIn","yIn","movedIn","updateAnimation","speed","onDone","diffX","diffY","setMovedIn","toggleState","PANEL_ANIMATION_MULTIPLIER","BaseElement","btnCfg","buttonType","imgDisabled","normalFile","highlightFile","pressedFile","disabledFile","textAlign","buttonsCfg","labelOre","SideBarLabel","panelButtonCrystalSideBarOre","totalOre","labelCrystal","panelButtonCrystalSideBarCrystals","imgNoCrystal","imgSmallCrystal","imgUsedCrystal","imgOre","updateQuantities","curX","curY","imgCrystal","Panel","ButtonCfg","panelButtonInfoDockGoto","panelButtonInfoDockClose","panelButtonPriorityListDisable","panelButtonPriorityListUpOne","panelButtonPriorityListClose","panelButtonPriorityListReset","panelButtonTopPanelCallToArms","panelButtonTopPanelOptions","panelButtonTopPanelPriorities","panelRadar","panelCrystalSideBar","panelTopPanel","panelInformation","panelPriorityList","panelCameraControl","panelInfoDock","panelEncyclopedia","btnCfgValue","arr","ButtonRadarCfg","ButtonCrystalSideBarCfg","ButtonTopCfg","ButtonInformationCfg","ButtonPriorityListCfg","ButtonCameraControlCfg","ButtonInfoDockCfg","panelButtonInformationToggle","panelButtonInformationFunction","panelButtonCameraControlZoomIn","panelButtonCameraControlZoomOut","panelButtonCameraControlCycleBuildings","panelButtonCameraControlRotate","BaseButtonCfg","buttonImageFilename","panelFillCfg","panelOverlayCfg","overlay","btnToggle","Button","panelButtonRadarToggle","btnMap","panelButtonRadarMapView","btnTagged","panelButtonRadarTaggedObjectView","panelButtonRadarZoomIn","panelButtonRadarZoomOut","infoMessageEntryConfig","textImage","infoImage","imageFilename","textInfoMessageConfig","imgAir","currentMessage","messageTimeout","crystalFound","TextInfoMessage","textCrystalFound","msgSpaceToContinue","textSpaceToContinue","cavernDiscovered","textCavernDiscovered","oreFound","textOreFound","msgAirSupplyLow","textAirSupplyLow","msgAirSupplyRunningOut","textAirSupplyRunningOut","msgGameCompleted","textGameCompleted","msgManTrained","textManTrained","msgUnitUpgraded","textUnitUpgraded","textInfoMessage","unsetMessage","txtX","infoX","tooltipDisabled","hotkey","menuItemCfg","itemKey","parentWidth","menuIndex","isDisabled","updateState","autoRedraw","targetState","numOfItems","onBackPanel","backBtn","iconPanelButtons","backBtnCfg","IconPanelBackButtonCfg","frameImgCfg","imgName","imgNameWoBackName","addMenuItem","menuItemGroup","MenuItemCfg","menuItem","IconPanelButton","IconSubPanel","aiPriorityReinforce","itemDrill","addWallMenuItem","itemReinforce","ReinforceJob","itemDynamite","itemDeselect","createJob","selectedSurface","SpawnDynamiteEvent","SelectBasePanel","placedItems","workplaces","placed","aiPriorityConstruction","isPowerPath","neededByType","assignedByType","onSiteByType","needed","checkComplete","neededType","CompletePowerPathJob","pathItem","BuildingSite","removeItem","placeFenceItem","toolstation","clearRubbleItem","menuItemOffCfg","menuItemOnCfg","imgOnNormal","imgOnHover","imgOnPressed","imgOnDisabled","onToggleStateChange","powerSwitchItem","IconPanelToggleButton","upgradeItem","deleteBuildingItem","feedItem","selectedRaiders","EatJob","getToolItem","trainItem","deleteRaiderItem","x0","x1","SurfacePathTarget","targetArea","Area","trainDynamite","every","TrainJob","addGetToolItem","pathToToolstation","GetToolJob","targetPosition","subPanels","mainPanel","addSubPanel","buildingPanel","BuildingPanel","smallVehiclePanel","SmallVehiclePanel","largeVehiclePanel","LargeVehiclePanel","selectWallPanel","SelectWallPanel","selectFloorPanel","SelectFloorPanel","selectRubblePanel","SelectRubblePanel","selectBuildingPanel","SelectBuildingPanel","selectRaiderPanel","SelectRaiderPanel","trainRaiderPanel","TrainRaiderPanel","getToolPanel","GetToolPanel","selectVehiclePanel","SelectVehiclePanel","teleportRaider","IconPanelButtonLabel","buildingItem","smallVehicleItem","largeVehicleItem","onSelectedSurfaceChange","selectSubPanel","childPanel","targetPanel","subPanel","updated","isPressed","btnCallToArms","ToggleButton","btnOptions","btnPriorities","infoMessagesEntryConfig","InfoButtonCfg","animationSpeedX","animationSpeedY","message","buttonClicked","showButton","slideToTarget","Promise","resolve","infoMessagesConfig","informationPanel","stackButtons","gotoLatestMessage","dropLatestMessage","InfoDockButton","infoGenericDeath","infoGenericMonster","infoCrystalFound","infoUnderAttack","infoLandslide","infoPowerDrain","infoSlugEmerge","infoFoundMinifigure","btn","slideStackIntoPosition","then","slideInButton","reduce","prev","cur","pushFirst","setText","promises","all","panelRadarFill","panelRadarOverlay","panelMessages","panelMessagesSide","PanelCfg","prioPositions","prioByName","buttonCfg","setList","resetList","aiPriorityTrain","aiPriorityGetIn","aiPriorityRepair","aiPriorityRecharge","prioButton","sfx","timing","flag","InfoMessagesEntryConfig","sfxName","TextInfoMessageEntryConfig","panels","addPanel","panel","hit","onOptionsShow","panelsCfg","PanelsCfg","ButtonsCfg","InformationPanel","InfoDockPanel","InfoMessagesConfig","priorityButtonsConfig","PriorityButtonsConfig","priorityPositionsConfig","PriorityPositionsEntry","PriorityListPanel","TopPanel","panelMain","MainPanel","PanelCrystalSideBar","MessagePanel","TextInfoMessageConfig","RadarPanel","GuiBaseLayer","assignInterval","checkRubbleInterval","assignJobs","JOB_SCHEDULE_INTERVAL","checkUnclearedRubble","CHECK_CLEARRUBBLE_INTERVAL","availableJobs","unemployedRaider","closestRaider","closestRaiderIndex","minDistance","closestToolRaider","closestToolRaiderIndex","minToolDistance","closestToolstationPosition","closestNeededTool","closestTrainingRaider","closestTrainingRaiderIndex","minTrainingDistance","closestTrainingArea","closestNeededTraining","pathToJob","raiderPosition","neededTool","neededTraining","pathToTraining","rad","imgTitle","titleRelX","titleRelY","btnNext","btnBack","imgBack","imgParagraph","paragraph","titleFont","titleWindow","nextButtonCfg","nextParagraph","backButtonCfg","prevParagraph","setParagraph","objectiveText","objectiveBackImgCfg","textFont","textWindow","messagePanel","itemCfg","labelX","imgTextNormal","description","imgTextHover","imgLabelOffNormal","labelOff","imgLabelOffHover","imgLabelOnNormal","labelOn","imgLabelOnHover","imgLabel","sliderX","onValueChanged","imgLeft","imgOff","imgOn","imgRight","leftBtn","btnLeftNormal","btnLeftHover","rightBtn","btnRightNormal","btnRightHover","posX","dw","loImg","hiImg","itemsTrigger","itemsNext","menuFont","MenuLabelItem","itemsCycle","MenuCycleItem","itemsSlider","MenuSliderItem","layersByKey","MenuLayer","pausePanel","selectLayer","onRepeatBriefing","MenuBasePanel","onAbortGame","onRestartGame","image","okWindow","cancelWindow","contrastOverlay","Rect","dialogCfg","DialogCfg","panelPause","PausePanel","panelOptions","OptionsPanel","panelBriefing","BriefingPanel","BriefingPanelCfg","setActivePanel","lEventKey","gameLayer","GameLayer","selectionLayer","SelectionLayer","guiLayer","GuiMainLayer","overlayLayer","OverlayLayer","WorldManager","jobSupervisor","Supervisor","restartLevel","startLevel","setupAndStartLevel","objective","objectiveImage640x480","conf","imgNormalFilepath","imgHoverFilepath","imgPressedFilepath","imgDisabledFilepath","resultIndex","resultLastIndex","images","boxes","fonts","texts","uncoverTimeout","backgroundImg","wallpaper","filePath","boxImages","fontKey","labelFont","backFont","resultsLayer","btnSave","btnAdvance","descriptionTextLayer","btnLayer","RewardScreenButton","saveButton","advanceButton","onAdvance","uncoverResult","levelFullNameImg","resultText","quitText","completeText","failedText","resultValues","percentString","timeString","score","gameResultTextImg","box","vertSpacing","descriptionTextImg","textPos","tx","ty","actual","lessIsMore","padLeft","padding","seconds","ss","minutes","mm","loadingScreen","LoadingScreen","wadfileSelectModal","mainMenuScreen","MainMenuScreen","GameScreen","rewardScreen","RewardScreen","params","URLSearchParams"],"mappings":"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","file":"786.index.js","sourcesContent":["import { Modal } from 'bootstrap'\n\nexport class WadFileSelectionModal {\n\n    public onStart: (wad0Url, wad1Url) => any = null\n\n    private readonly modal: Modal\n\n    constructor(parentId: string) {\n        const rootElement = document.getElementById(parentId).appendChild(document.createElement('div'))\n        rootElement.classList.add('modal')\n        rootElement.tabIndex = -1\n        rootElement.setAttribute('role', 'dialog')\n        rootElement.setAttribute('aria-hidden', 'true')\n\n        const modalDialog = rootElement.appendChild(document.createElement('div'))\n        modalDialog.classList.add('modal-dialog')\n        rootElement.setAttribute('role', 'document')\n\n        const modalContent = modalDialog.appendChild(document.createElement('div'))\n        modalContent.classList.add('modal-content')\n\n        const modalHeader = modalContent.appendChild(document.createElement('div'))\n        modalHeader.classList.add('modal-header')\n        const modalTitle = modalHeader.appendChild(document.createElement('h5'))\n        modalTitle.classList.add('modal-title')\n        modalTitle.innerText = 'Load .wad files'\n        modalTitle.id = 'wadfileSelectModalLabel'\n        rootElement.setAttribute('aria-labelledby', modalTitle.id)\n\n        const modalBody = modalContent.appendChild(document.createElement('div'))\n        modalBody.classList.add('modal-body')\n\n        const hint = modalBody.appendChild(document.createElement('p'))\n        hint.innerText = 'Assets not included! In order to play the game, please select the game files.'\n\n        const navTabs = modalBody.appendChild(document.createElement('nav'))\n        const navTabList = navTabs.appendChild(document.createElement('div'))\n        navTabList.id = 'nav-tab'\n        navTabList.classList.add('nav', 'nav-tabs')\n        navTabList.setAttribute('role', 'tablist')\n\n        const navFileBtn = WadFileSelectionModal.appendNavButton(navTabList, true, 'nav-file-tab', 'nav-file', 'Local files (recommended)')\n        const navUrlBtn = WadFileSelectionModal.appendNavButton(navTabList, false, 'nav-url-tab', 'nav-url', 'Online from URL')\n\n        const navTabContent = modalBody.appendChild(document.createElement('div'))\n        navTabContent.classList.add('tab-content')\n        this.appendNavFileTab(navTabContent, navFileBtn.id)\n        this.appendNavUrlTab(navTabContent, navUrlBtn.id)\n\n        // rootElement has to be a valid bootstrap HTML modal before we can instantiate it\n        this.modal = new Modal(rootElement, {backdrop: 'static', keyboard: false})\n    }\n\n    private static appendNavButton(parent: HTMLDivElement, active: boolean, id: string, controlTarget: string, innerText: string) {\n        const navBtn = parent.appendChild(document.createElement('button'))\n        navBtn.classList.add('nav-link')\n        if (active) navBtn.classList.add('active')\n        navBtn.id = id\n        navBtn.setAttribute('data-bs-toggle', 'tab')\n        navBtn.setAttribute('data-bs-target', '#' + controlTarget)\n        navBtn.type = 'button'\n        navBtn.setAttribute('role', 'tab')\n        navBtn.setAttribute('aria-controls', controlTarget)\n        navBtn.setAttribute('aria-selected', String(active))\n        navBtn.innerText = innerText\n        return navBtn\n    }\n\n    private appendNavFileTab(parent: HTMLDivElement, labelledBy: string) {\n        const navFileTab = WadFileSelectionModal.appendNavTab(parent, true, 'nav-file', labelledBy)\n\n        const wad0File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad0-file', 'LegoRR0.wad')\n        const wad1File = WadFileSelectionModal.appendWadFileGroup(navFileTab, 'wad1-file', 'LegoRR1.wad')\n\n        const btnStartFile = navFileTab.appendChild(document.createElement('button'))\n        btnStartFile.type = 'submit'\n        btnStartFile.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartFile.id = 'button-start-file'\n        btnStartFile.innerText = 'Start Game'\n        btnStartFile.addEventListener('click', () => {\n            btnStartFile.disabled = true\n            const wad0FileUrl = URL.createObjectURL(wad0File.files[0])\n            const wad1FileUrl = URL.createObjectURL(wad1File.files[0])\n            this.onStart(wad0FileUrl, wad1FileUrl)\n        })\n    }\n\n    private static appendWadFileGroup(parent: HTMLDivElement, id: string, filename: string) {\n        const wadFileGroup = parent.appendChild(document.createElement('div'))\n        wadFileGroup.classList.add('my-3')\n        const wadFileLabel = wadFileGroup.appendChild(document.createElement('label'))\n        wadFileLabel.setAttribute('for', id)\n        wadFileLabel.classList.add('form-label')\n        wadFileLabel.innerHTML = 'Select <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadFileInput = wadFileGroup.appendChild(document.createElement('input'))\n        wadFileInput.type = 'file'\n        wadFileInput.classList.add('form-control')\n        wadFileInput.id = id\n        wadFileInput.required = true\n        return wadFileInput\n    }\n\n    private appendNavUrlTab(parent: HTMLDivElement, labelledBy: string) {\n        const navUrlTab = WadFileSelectionModal.appendNavTab(parent, false, 'nav-url', labelledBy)\n\n        const urlHint = navUrlTab.appendChild(document.createElement('div'))\n        urlHint.classList.add('my-3')\n        urlHint.innerText = 'Direct links with correct Allow-Origin-CORS-Headers required here.'\n\n        const wad0Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad0-url', 'LegoRR0.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n        const wad1Url = WadFileSelectionModal.appendWadUrlGroup(navUrlTab, 'wad1-url', 'LegoRR1.wad', 'https://drive.google.com/uc?export=download&id=11t9AJnGCWnEWlLxSsYQeB_Y4jrKfxVxQ')\n\n        const btnStartUrl = navUrlTab.appendChild(document.createElement('button'))\n        btnStartUrl.type = 'submit'\n        btnStartUrl.classList.add('btn', 'btn-primary', 'float-end')\n        btnStartUrl.id = 'button-start-url'\n        btnStartUrl.innerText = 'Start Game'\n        btnStartUrl.addEventListener('click', () => {\n            btnStartUrl.disabled = true\n            // XXX show loading progress for WAD files\n            this.onStart(wad0Url.value, wad1Url.value)\n        })\n    }\n\n    private static appendNavTab(parent: HTMLDivElement, active: boolean, id: string, labelledBy: string) {\n        const navTab = parent.appendChild(document.createElement('div'))\n        navTab.classList.add('tab-pane', 'fade')\n        if (active) navTab.classList.add('show', 'active')\n        navTab.id = id\n        navTab.setAttribute('role', 'tabpanel')\n        navTab.setAttribute('aria-labelledby', labelledBy)\n        return navTab\n    }\n\n    private static appendWadUrlGroup(parent: HTMLDivElement, id: string, filename: string, example: string) {\n        const wadUrlGroup = parent.appendChild(document.createElement('div'))\n        wadUrlGroup.classList.add('my-3')\n        const wadUrlLabel = wadUrlGroup.appendChild(document.createElement('label'))\n        wadUrlLabel.setAttribute('for', id)\n        wadUrlLabel.classList.add('form-label')\n        wadUrlLabel.innerHTML = 'Enter url for <span class=\"fw-bold\">' + filename + '</span> here:'\n        const wadUrlInput = wadUrlGroup.appendChild(document.createElement('input'))\n        wadUrlInput.type = 'url'\n        wadUrlInput.classList.add('form-control')\n        wadUrlInput.id = id\n        wadUrlInput.required = true\n        wadUrlInput.value = example\n        return wadUrlInput\n    }\n\n    public show() {\n        this.modal.show()\n    }\n\n    public hide() {\n        this.modal.hide()\n    }\n\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"index.worker.js\");\n}\n","export class InitLoadingMessage {\n\n    wad0FileUrl: string\n    wad1FileUrl: string\n\n    constructor(wad0FileUrl: string, wad1FileUrl: string) {\n        this.wad0FileUrl = wad0FileUrl\n        this.wad1FileUrl = wad1FileUrl\n    }\n\n}\n","/**\n * creates a new context with the specified dimensions.\n * @param width: the desired width of the new context\n * @param height: the desired height of the new context\n * @returns RenderingContext the newly created canvas\n */\nexport function createContext(width, height) {\n    if (width < 1 || height < 1) {\n        console.error('Can\\'t create context with size ' + width + ' x ' + height);\n        return createDummyContext(64, 64);\n    }\n    const canvas = document.createElement('canvas');\n    canvas.setAttribute('width', width);\n    canvas.setAttribute('height', height);\n    const context = canvas.getContext('2d');\n    context.width = width;\n    context.height = height;\n    return context;\n}\n\n/**\n * This method is intended to increase stability by providing an (ugly) placeholder image in case the right one is missing\n * @param width: expected width of the original image\n * @param height: expected height of the original image\n */\nexport function createDummyContext(width, height) {\n    const result = createContext(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            if (x / 16 % 2 === y / 16 % 2) {\n                result.fillStyle = 'rgb(0,255,255)';\n            } else {\n                result.fillStyle = 'rgb(255,0,255)';\n            }\n            result.fillRect(x, y, 16, 16);\n        }\n    }\n    return result;\n}\n\nexport function createDummyImgData(width, height) {\n    const result = new ImageData(width, height);\n    for (let y = 0; y < height; y += 16) {\n        for (let x = 0; x < width; x += 16) {\n            const e = x / 16 % 2 === y / 16 % 2;\n            for (let px = x; px < x + 16; px++) {\n                for (let py = y; py < y + 16; py++) {\n                    setPixel(result, px, py, e ? 0 : 255, e ? 255 : 0, 255);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport function setPixel(imgData, x, y, r, g, b, a = 255) {\n    const n = (y * imgData.width + x) * 4;\n    imgData.data[n] = r;\n    imgData.data[n + 1] = g;\n    imgData.data[n + 2] = b;\n    imgData.data[n + 3] = a;\n}\n\nexport function getPixel(imgData, x, y) {\n    const n = (y * imgData.width + x) * 4;\n    return {r: imgData.data[n], g: imgData.data[n + 1], b: imgData.data[n + 2], a: imgData.data[n + 3]};\n}\n\nexport function copyPixel(originData, targetData, x, y) {\n    const p = getPixel(originData);\n    setPixel(targetData, p.r, p.g, p.b, p.a);\n}\n","export function getPath(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    strUrl = strUrl.substring(0, lastInd + 1)\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    return strUrl\n}\n\nexport function getFilename(url: string): string {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n","export function getFilename(url: string) {\n    if (!url) return url\n    let strUrl = url.toString().replace(/\\\\/g, '/')\n    if (strUrl.startsWith('/')) strUrl = strUrl.substring(1)\n    const lastInd = strUrl.lastIndexOf('/')\n    return strUrl.substring(lastInd + 1)\n}\n\nexport function iGet(obj, ...keys: string[]): any {\n    keys.forEach((keyname) => {\n        obj = Object.keys(obj)\n            .filter((key) => key.toLowerCase() === keyname.toLowerCase())\n            .map((key) => obj[key])\n        obj = obj ? obj[0] : obj\n    })\n    return obj\n}\n\nexport function decodeString(data) {\n    return new TextDecoder().decode(data).replace(/\\0/g, '')\n}\n\nexport function decodeFilepath(data) {\n    return decodeString(data).replace(/\\\\/g, '/')\n}\n\nexport function getRandomInclusive(min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getRandom(max) {\n    return getRandomInclusive(0, max)\n}\n\nexport function getRandomSign() {\n    return -1 + getRandomInclusive(0, 1) * 2\n}\n\nexport function clearTimeoutSafe(timeout: NodeJS.Timeout) {\n    if (timeout) clearTimeout(timeout)\n    return null\n}\n\nexport function clearIntervalSafe(interval: NodeJS.Timeout) {\n    if (interval) clearInterval(interval)\n    return null\n}\n\ndeclare global {\n\n    interface Array<T> {\n        remove(element: T): T\n    }\n\n    interface Map<K, V> {\n        getOrUpdate(key: K, updateCallback: () => V): V\n    }\n\n}\n\nArray.prototype.remove = function <T>(element: T): void {\n    const index = this.indexOf(element)\n    if (index !== -1) this.splice(index, 1)\n}\n\n// noinspection JSUnusedGlobalSymbols\nMap.prototype.getOrUpdate = function <K, V>(key: K, updateCallback: () => V): V {\n    let value = this.get(key)\n    if (value === undefined) {\n        value = updateCallback()\n        this.set(key, value)\n    }\n    return value\n}\n","import { AnimClip } from './AnimClip'\n\nexport class AnimationEntityType {\n\n    carryNullName: string = ''\n    depositNullName: string = ''\n    toolNullName: string = ''\n    mediumPoly: {} = {}\n    highPoly: {} = {}\n    fPPoly: {} = {}\n    activities: Map<string, { file: string, transcoef: number, lwsfile: boolean, animation: AnimClip }> = new Map()\n\n}\n","import { Mesh } from 'three'\nimport { clearIntervalSafe } from '../core/Util'\n\nexport class AnimatedMesh {\n\n    mesh: Mesh = null\n    textureSequences = []\n\n    constructor(mesh: Mesh, textureSequences: any[]) {\n        this.mesh = mesh\n        this.textureSequences = textureSequences\n    }\n\n    dispose() {\n        this.textureSequences.forEach((s) => clearIntervalSafe(s))\n        this.mesh.geometry.dispose()\n        Array.isArray(this.mesh.material) ? this.mesh.material.forEach(mat => mat.dispose()) : this.mesh.material?.dispose()\n    }\n\n}\n","// noinspection JSUnusedLocalSymbols\n\n/**\n * @author Marcus-Bizal https://github.com/marcbizal\n * patched by Scarabol\n *\n * This loader loads LWOB files exported from LW6.\n *\n * Support\n *  -\n */\n\nimport { BufferAttribute, BufferGeometry, Color, DoubleSide, Mesh, MeshPhongMaterial, Vector3 } from 'three'\nimport { decodeFilepath, decodeString, getFilename } from '../core/Util'\nimport { ResourceManager } from './ResourceManager'\nimport { SEQUENCE_TEXTURE_FRAMERATE } from '../main'\nimport { AnimatedMesh } from './AnimatedMesh'\n\n// HEADER SPEC //\nconst LWO_MAGIC = 0x4C574F42 // \"LWOB\"\nconst OFF_MAGIC = 8\n\n/********************/\n/* TYPE SIZES START */\n/********************/\n\nconst ID4_SIZE = 4\nconst I1_SIZE = 1\nconst I2_SIZE = 2\nconst I4_SIZE = 4\nconst F4_SIZE = 4\n\nconst COL4_SIZE = 4\nconst VEC12_SIZE = 12\nconst IP2_SIZE = 2\nconst FP4_SIZE = 4\nconst DEG4_SIZE = 4\n\n/********************/\n/*  TYPE SIZES END  */\n/********************/\n\n/*********************/\n/* CHUNK TYPES START */\n/*********************/\n\nconst LWO_FORM = 0x464F524D\nconst LWO_PNTS = 0x504E5453\nconst LWO_SFRS = 0x53524653\nconst LWO_POLS = 0x504F4C53\nconst LWO_CRVS = 0x43525653\nconst LWO_PCHS = 0x50434853\nconst LWO_SURF = 0x53555246\n\nconst CHUNK_HEADER_SIZE = 8\nconst SUBCHUNK_HEADER_SIZE = 6\n\n/*********************/\n/*  CHUNK TYPES END  */\n/*********************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\n/**************************/\n/* SURF DEFINITIONS START */\n/**************************/\n\nconst SURF_COLR = 0x434F4C52\nconst SURF_FLAG = 0x464C4147\n\n// Base Shading Values (Fixed Point)\nconst SURF_LUMI = 0x4C554D49\nconst SURF_DIFF = 0x44494646\nconst SURF_SPEC = 0x53504543\nconst SURF_REFL = 0x5245464C\nconst SURF_TRAN = 0x5452414E\n\n// Base Shading Values (Floating Point)\nconst SURF_VLUM = 0x564C554D\nconst SURF_VDIF = 0x56444946\nconst SURF_VSPC = 0x56535043\nconst SURF_VRFL = 0x5646524C\nconst SURF_VTRN = 0x5654524E\n\nconst SURF_GLOS = 0x474C4F53\nconst SURF_RFLT = 0x52464C54\nconst SURF_RIMG = 0x52494D47\nconst SURF_RIND = 0x52494E44\nconst SURF_EDGE = 0x45444745\nconst SURF_SMAN = 0x534D414E\n\n/**************************/\n/*  SURF DEFINITIONS END  */\n/**************************/\n\n/*****************************/\n/* TEXTURE DEFINITIONS START */\n/*****************************/\n\n// Start of Definition\nconst SURF_CTEX = 0x43544558\nconst SURF_DTEX = 0x44544558\nconst SURF_STEX = 0x53544558\nconst SURF_RTEX = 0x52544558\nconst SURF_TTEX = 0x54544558\nconst SURF_LTEX = 0x4C544558\nconst SURF_BTEX = 0x42544558\n\n// Flags\nconst SURF_TFLG = 0x54464C47\n\n// Location and Size\nconst SURF_TSIZ = 0x5453495A\nconst SURF_TCTR = 0x54435452\nconst SURF_TFAL = 0x5446414C\nconst SURF_TVEL = 0x5456454C\n\n// Color\nconst SURF_TCLR = 0x54434C52\n\n// Value\nconst SURF_TVAL = 0x54434C52\n\n// Bump Amplitude\nconst SURF_TAMP = 0x54414D50\n\n// Image Map\nconst SURF_TIMG = 0x54494D47\n\n// Image Alpha\nconst SURF_TALP = 0x54414C50\n\n// Image Wrap Options\nconst SURF_TWRP = 0x54575250\n\n// Antialiasing Strength\nconst SURF_TAAS = 0x54414153\n\n// Texture Opacity\nconst SURF_TOPC = 0x544F5043\n\n/*****************************/\n/*  TEXTURE DEFINITIONS END  */\n/*****************************/\n\n/*************************/\n/* FLAG DEFINITION START */\n/*************************/\n\nconst LUMINOUS_BIT = 1\nconst OUTLINE_BIT = 2\nconst SMOOTHING_BIT = 4\nconst COLORHIGHLIGHTS_BIT = 8\nconst COLORFILTER_BIT = 16\nconst OPAQUEEDGE_BIT = 32\nconst TRANSPARENTEDGE_BIT = 64\nconst SHARPTERMINATOR_BIT = 128\nconst DOUBLESIDED_BIT = 256\nconst ADDITIVE_BIT = 512\nconst SHADOWALPHA_BIT = 1024\n\n/*************************/\n/*  FLAG DEFINITION END  */\n/*************************/\n\n/*************************/\n/* TFLG DEFINITION START */\n/*************************/\n\nconst XAXIS_BIT = 1\nconst YAXIS_BIT = 2\nconst ZAXIS_BIT = 4\nconst WORLDCOORDS_BIT = 8\nconst NEGATIVEIMAGE_BIT = 16\nconst PIXELBLENDING_BIT = 32\nconst ANTIALIASING_BIT = 64\n\n/*************************/\n/*  TFLG DEFINITION END  */\n\n/*************************/\n\nfunction getVector3AtOffset(view, offset) {\n    let vector = new Vector3()\n    vector.x = view.getFloat32(offset)\n    vector.y = view.getFloat32(offset + F4_SIZE)\n    vector.z = view.getFloat32(offset + (F4_SIZE * 2))\n    return vector\n}\n\nfunction planarMapUVS(geometry, vertices, uvs, indices, materialIndex, size, center, flags) {\n    // Check to ensure that one of the flags is set, if not throw an error.\n    const mask = XAXIS_BIT | YAXIS_BIT | ZAXIS_BIT\n    if (flags & mask) {\n        for (let group of geometry.groups) {\n            if (group.materialIndex !== materialIndex) continue\n\n            for (let i = group.start; i < group.start + group.count; i++) {\n\n                let vertexIndex = indices[i] * 3\n                let x = vertices[vertexIndex] - center.x\n                let y = vertices[vertexIndex + 1] - center.y\n                let z = vertices[vertexIndex + 2] - center.z\n\n                let uvIndex = indices[i] * 2\n                let u = 0\n                let v = 0\n\n                if (flags & XAXIS_BIT) {\n                    u = z / size.z + 0.5\n                    v = y / size.y + 0.5\n                } else if (flags & YAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = z / size.z + 0.5\n                } else if (flags & ZAXIS_BIT) {\n                    u = x / size.x + 0.5\n                    v = y / size.y + 0.5\n                }\n\n                uvs[uvIndex] = u\n                uvs[uvIndex + 1] = v\n            }\n        }\n    } else {\n        // console.warn(\"LWOLoader.planarMapUVS: No axis bit is set!\"); // XXX what is this about\n    }\n}\n\nexport class LWOLoader {\n\n    COUNTER_CLOCKWISE: false\n\n    path: string = ''\n    verbose: boolean = false\n    materials: MeshPhongMaterial[] = []\n    geometry: BufferGeometry = new BufferGeometry()\n    vertices: Float32Array = null\n    indices: Uint16Array = null\n    uvs: Float32Array = null\n    sequenceIntervals = []\n\n    constructor(path: string, verbose: boolean = false) {\n        this.verbose = verbose\n        this.path = path\n        if (this.verbose) console.log('LWO path: ' + this.path)\n    }\n\n    parsePoints(view, chunkOffset, chunkSize) {\n        if (chunkSize % VEC12_SIZE !== 0) {\n            console.error('LWOLoader.parse: F12 does not evenly divide into chunk size (' + chunkSize + '). Possible corruption.')\n            return\n        }\n\n        let numVertices = (chunkSize / F4_SIZE) / 3\n        this.vertices = new Float32Array(numVertices * 3)\n        this.uvs = new Float32Array(numVertices * 2)\n\n        for (let i = 0; i < numVertices; i++) {\n            let vertexIndex = i * 3\n            let vertexOffset = vertexIndex * F4_SIZE\n            this.vertices[vertexIndex] = view.getFloat32(chunkOffset + vertexOffset) \t\t\t\t// x\n            this.vertices[vertexIndex + 1] = view.getFloat32(chunkOffset + vertexOffset + F4_SIZE) \t// y\n            this.vertices[vertexIndex + 2] = view.getFloat32(chunkOffset + vertexOffset + (F4_SIZE * 2)) \t// z\n        }\n    }\n\n    parseSurfaceNames(buffer, chunkOffset, chunkSize) {\n        let textChunk = new TextDecoder().decode(new Uint8Array(buffer, chunkOffset, chunkSize))\n        let surfaceNames = textChunk.split('\\0').filter(function (s) {\n            return s !== ''\n        })\n\n        for (let i = 0; i < surfaceNames.length; i++) {\n            const new_material = new MeshPhongMaterial()\n            new_material.name = surfaceNames[i]\n            new_material.side = DoubleSide\n\n            this.materials.push(new_material)\n        }\n        if (this.verbose) console.log('LWO contains ' + this.materials.length + ' materials with following names: ' + surfaceNames)\n    }\n\n    parsePolygons(view, chunkOffset, chunkSize) {\n        // Gather some initial data so that we can get the proper size\n        let totalNumIndices = 0\n        let offset = 0\n        while (offset < chunkSize) {\n            const numIndices = view.getInt16(chunkOffset + offset)\n            const materialIndex = view.getInt16(chunkOffset + offset + 2 + (numIndices * 2))\n\n            this.geometry.addGroup(totalNumIndices, (numIndices - 2) * 3, materialIndex - 1)\n\n            totalNumIndices += (numIndices - 2) * 3\n            offset += 4 + (numIndices * 2)\n        }\n\n        offset = 0\n        let currentIndex = 0\n        this.indices = new Uint16Array(totalNumIndices)\n        while (offset < chunkSize) {\n            let numIndices = view.getInt16(chunkOffset + offset)\n\n            offset += 2\n\n            let faceIndices = new Int16Array(numIndices)\n            for (let i = 0; i <= numIndices; i++) {\n                faceIndices[i] = view.getInt16(chunkOffset + offset + (i * 2))\n            }\n\n            for (let i = 0; i < numIndices - 2; i++) {\n                if (this.COUNTER_CLOCKWISE) {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                } else {\n                    this.indices[currentIndex++] = faceIndices[0]\n                    this.indices[currentIndex++] = faceIndices[i + 1]\n                    this.indices[currentIndex++] = faceIndices[i + 2]\n                }\n            }\n\n            offset += 2 + (numIndices * 2)\n        }\n    }\n\n    parseSurface(view, buffer, chunkOffset, chunkSize) {\n        let offset = 0\n        while (view.getUint8(chunkOffset + offset) !== 0) offset++\n\n        let materialName = decodeString(new Uint8Array(buffer, chunkOffset, offset))\n        if (this.verbose) console.log('Parsing surface: ' + materialName)\n        let materialIndex = -1\n        let material: MeshPhongMaterial = null\n\n        let textureFlags = 0\n        let textureSize = new Vector3(0, 0, 0)\n        let textureCenter = new Vector3(0, 0, 0)\n        // let textureFalloff = new Vector3(0, 0, 0);\n        // let textureVelocity = new Vector3(0, 0, 0);\n\n        for (let i = 0; i < this.materials.length; i++) {\n            if (this.materials[i].name === materialName) {\n                materialIndex = i\n                material = this.materials[i]\n            }\n        }\n\n        if (!material) {\n            console.error('LWOLoader.parse: Surface in SURF chunk does not exist in SRFS')\n            return\n        }\n\n        while (offset < chunkSize) {\n            const subchunkOffset = chunkOffset + offset\n            if (view.getUint8(subchunkOffset) === 0) {\n                offset++\n            } else {\n                const subchunkType = view.getInt32(subchunkOffset)\n                const subchunkSize = view.getInt16(subchunkOffset + ID4_SIZE)\n\n                if (this.verbose) console.log('Parsing subchunk ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n\n                switch (subchunkType) {\n                    case SURF_COLR:\n                        const colorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        material.color = new Color().fromArray(colorArray)\n                        if (this.verbose) console.log('Material color (COLR): ' + colorArray.join(' '))\n                        break\n                    case SURF_FLAG:\n                        const flags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (FLAG): ' + flags.toString(2))\n                        break\n                    case SURF_LUMI:\n                        const luminosity = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        if (this.verbose) console.log('Luminosity (LUMI): ' + luminosity)\n                        break\n                    case SURF_DIFF:\n                        const diffuse = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        if (this.verbose) console.log('Diffuse (DIFF): ' + diffuse)\n                        break\n                    case SURF_SPEC:\n                        const specular = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        // material.specular = material.color.multiplyScalar(specular);\n                        if (this.verbose) console.log('Specular (SPEC): ' + specular)\n                        break\n                    case SURF_REFL:\n                        let reflection = 0\n                        if (reflection === SURF_VRFL) {\n                            reflection = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            reflection = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        }\n                        material.reflectivity = reflection\n                        if (this.verbose) console.log('Reflectivity (REFL): ' + material.reflectivity)\n                        break\n                    case SURF_TRAN:\n                    case SURF_VTRN:\n                        let transparency = 0\n                        if (subchunkType === SURF_VTRN) {\n                            transparency = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        } else {\n                            transparency = view.getInt16(subchunkOffset + SUBCHUNK_HEADER_SIZE) / 255\n                        }\n                        material.opacity = 1 - transparency\n                        if (this.verbose) console.log('Opacity (TRAN/VTRN): ' + material.opacity)\n                        if (transparency > 0) material.transparent = true\n                        break\n                    case SURF_VLUM:\n                        const luminosity2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Luminosity (VLUM): ' + luminosity2)\n                        break\n                    case SURF_VDIF:\n                        let diffuse2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Diffuse (VDIF): ' + diffuse2)\n                        break\n                    case SURF_VSPC:\n                        let specular2 = view.getFloat32(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        // material.specular = material.color.multiplyScalar(specular2);\n                        if (this.verbose) console.log('Specular (VSPC): ' + specular2)\n                        break\n                    case SURF_TFLG:\n                        textureFlags = view.getUint16(subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Flags (TFLG): ' + textureFlags.toString(2))\n                        break\n                    case SURF_TSIZ:\n                        textureSize = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Texture size (TSIZ): ' + textureSize.toArray().join(' '))\n                        break\n                    case SURF_TCTR:\n                        textureCenter = getVector3AtOffset(view, subchunkOffset + SUBCHUNK_HEADER_SIZE)\n                        if (this.verbose) console.log('Texture center (TCTR): ' + textureCenter.toArray().join(' '))\n                        break\n                    case SURF_CTEX:\n                    case SURF_DTEX:\n                    case SURF_STEX:\n                    case SURF_RTEX:\n                    case SURF_TTEX:\n                    case SURF_BTEX:\n                        const textureTypeName = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture typename: ' + textureTypeName)\n                        break\n                    case SURF_TCLR:\n                        const textureColorArray = [\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 0) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 1) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 2) / 255,\n                            view.getUint8(subchunkOffset + SUBCHUNK_HEADER_SIZE + 3) / 255,\n                        ]\n                        // const textureColor = new Color().fromArray(textureColorArray);\n                        // seems to be 0 0 0 anyway...\n                        if (this.verbose) console.log('Texture color (TCLR): ' + textureColorArray.join(' '))\n                        break\n                    case SURF_TIMG:\n                        let textureFilepath = decodeFilepath(new Uint8Array(buffer, subchunkOffset + SUBCHUNK_HEADER_SIZE, subchunkSize))\n                        if (this.verbose) console.log('Texture filepath (TIMG): ' + textureFilepath)\n                        if (textureFilepath === '(none)') break\n                        let sequenceTexture = false\n                        if (textureFilepath.endsWith(' (sequence)')) {\n                            sequenceTexture = true\n                            textureFilepath = textureFilepath.substring(0, textureFilepath.length - ' (sequence)'.length)\n                        }\n                        let filename = getFilename(textureFilepath)\n                        const textureFilename = this.path + filename\n                        if (sequenceTexture) {\n                            const match = textureFilename.match(/(.+\\D)0+(\\d+)\\..+/)\n                            const sequenceNames = ResourceManager.filterTextureSequenceNames(match[1])\n                            if (sequenceNames) {\n                                let seqNum = 0\n                                this.sequenceIntervals.push(setInterval(() => {\n                                    material.map = ResourceManager.getTexture(sequenceNames[seqNum])\n                                    seqNum++\n                                    if (seqNum >= sequenceNames.length) seqNum = 0\n                                }, 1000 / SEQUENCE_TEXTURE_FRAMERATE))\n                                material.transparent = true\n                            }\n                        }\n                        material.map = ResourceManager.getTexture(textureFilename)\n                        material.alphaTest = material.transparent ? 0 : 0.5\n                        material.color = null // no need for color, when color map (texture) in use\n                        break\n                    default: // TODO implement all LWO features\n                        if (this.verbose) console.warn('Found unrecognised SURF subchunk type ' + new TextDecoder().decode(new Uint8Array(buffer, subchunkOffset, ID4_SIZE)) + ' at ' + subchunkOffset + '; length ' + subchunkSize)\n                        break\n                }\n\n                offset += SUBCHUNK_HEADER_SIZE + subchunkSize\n            }\n        }\n\n        planarMapUVS(this.geometry, this.vertices, this.uvs, this.indices, materialIndex, textureSize, textureCenter, textureFlags)\n    }\n\n    parse(buffer: ArrayBuffer): AnimatedMesh {\n        const view = new DataView(buffer)\n\n        if (view.getUint32(0) !== LWO_FORM) {\n            console.error('LWOLoader.parse: Cannot find header.')\n            return\n        }\n\n        const fileSize = view.getUint32(ID4_SIZE)\n        if (fileSize + CHUNK_HEADER_SIZE !== view.byteLength) {\n            console.warn('LWOLoader.parse: Discrepancy between size in header (' + (fileSize + CHUNK_HEADER_SIZE) + ' bytes) and actual size (' + view.byteLength + ' bytes).')\n        }\n\n        let magicOffset = ID4_SIZE + I4_SIZE\n        if (view.getUint32(magicOffset) !== LWO_MAGIC) {\n            const magic = decodeString(new Uint8Array(buffer, magicOffset, ID4_SIZE))\n            console.error('LWOLoader.parse: Invalid magic ID (' + magic + ') in LWO header.')\n            return\n        }\n\n        let cursor = 12\n        while (cursor < view.byteLength) {\n            // Skip null byte padding\n            if (view.getUint8(cursor) === 0) {\n                cursor++\n            } else {\n                const chunkType = view.getInt32(cursor)\n                const chunkSize = view.getInt32(cursor + ID4_SIZE)\n\n                cursor += CHUNK_HEADER_SIZE\n\n                switch (chunkType) {\n                    case LWO_PNTS:\n                        this.parsePoints(view, cursor, chunkSize)\n                        break\n                    case LWO_SFRS:\n                        this.parseSurfaceNames(buffer, cursor, chunkSize)\n                        break\n                    case LWO_POLS:\n                        this.parsePolygons(view, cursor, chunkSize)\n                        break\n                    case LWO_SURF:\n                        this.parseSurface(view, buffer, cursor, chunkSize)\n                        break\n                    default:\n                        console.warn('Found unrecognised chunk type ' + decodeString(new Uint8Array(buffer, cursor - CHUNK_HEADER_SIZE, ID4_SIZE)) + ' at ' + cursor)\n                }\n\n                cursor += chunkSize\n            }\n\n        }\n\n        this.geometry.setAttribute('position', new BufferAttribute(this.vertices, 3))\n        this.geometry.setAttribute('uv', new BufferAttribute(this.uvs, 2))\n        this.geometry.setIndex(new BufferAttribute(this.indices, 1))\n        this.geometry.computeVertexNormals()\n\n        return new AnimatedMesh(new Mesh(this.geometry, this.materials), this.sequenceIntervals)\n    }\n}\n","import { Vector3 } from 'three'\nimport { SelectionEvent } from '../../event/LocalEvents'\n\nexport interface Selectable {\n\n    getSelectionType(): SelectionType;\n\n    select(): SelectionEvent;\n\n    deselect(): any;\n\n    getSelectionCenter(): Vector3;\n\n}\n\nexport enum SelectionType {\n\n    SURFACE,\n    PILOT,\n    BUILDING,\n    VEHICLE,\n    GROUP,\n\n}\n","import { AnimSubObj } from './AnimSubObj'\n\nexport class AnimClip {\n\n    looping: boolean = false\n    transcoef: number = 1\n    firstFrame: number = null\n    lastFrame: number = null\n    framesPerSecond: number = null\n    bodies: AnimSubObj[] = []\n\n}\n","import { Euler, MathUtils, Object3D, Vector3 } from 'three'\nimport degToRad = MathUtils.degToRad\n\nexport class AnimSubObj {\n\n    name: string = ''\n    filename: string = ''\n    relPos: Vector3[] = []\n    relRot: Euler[] = []\n    relScale: Vector3[] = []\n    opacity: number[] = []\n    parentObjInd: number = null\n    model: Object3D = null\n\n    radVec(degX: number, degY: number, degZ: number) {\n        return new Euler(degToRad(degY), degToRad(degX), degToRad(degZ), 'YXZ')\n    }\n\n    setFrameAndFollowing(animationFrameIndex: number, lastFrame: number, infos: number[]) {\n        this.relPos[animationFrameIndex] = new Vector3(infos[0], infos[1], infos[2])\n        this.relRot[animationFrameIndex] = this.radVec(infos[3], infos[4], infos[5])\n        this.relScale[animationFrameIndex] = new Vector3(infos[6], infos[7], infos[8])\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.relPos[c] = this.relPos[animationFrameIndex]\n            this.relRot[c] = this.relRot[animationFrameIndex]\n            this.relScale[c] = this.relScale[animationFrameIndex]\n        }\n    }\n\n    setOpacityAndFollowing(animationFrameIndex: number, lastFrame: number, value: number) {\n        for (let c = animationFrameIndex; c <= lastFrame; c++) {\n            this.opacity[c] = value\n        }\n    }\n\n}\n","const Stats = require('stats.js')\n\nexport class DebugHelper {\n\n    stats\n\n    constructor() {\n        this.stats = new Stats()\n        this.stats.setMode(0) // 0: fps, 1: ms\n\n        this.stats.domElement.style.position = 'absolute'\n        this.stats.domElement.style.left = '0px'\n        this.stats.domElement.style.top = '0px'\n\n        document.body.appendChild(this.stats.domElement)\n        this.hide()\n    }\n\n    show() {\n        this.stats.domElement.style.visibility = 'visible'\n    }\n\n    hide() {\n        this.stats.domElement.style.visibility = 'hidden'\n    }\n\n    renderStart() {\n        this.stats.begin()\n    }\n\n    renderDone() {\n        this.stats.end()\n    }\n\n}\n","export class Building {\n\n    // XXX dynamically read building types from cfg at BuildingTypes\n    static readonly TOOLSTATION = new Building('Toolstation', 'Buildings/Toolstation', false)\n    static readonly TELEPORT_PAD = new Building('TeleportPad', 'Buildings/Teleports')\n    static readonly DOCKS = new Building('Docks', 'Buildings/Docks')\n    static readonly POWER_STATION = new Building('Powerstation', 'Buildings/Powerstation')\n    static readonly BARRACKS = new Building('Barracks', 'Buildings/Barracks')\n    static readonly UPGRADE = new Building('Upgrade', 'Buildings/Upgrade')\n    static readonly GEODOME = new Building('Geo-dome', 'Buildings/Geo-dome')\n    static readonly ORE_REFINERY = new Building('OreRefinery', 'Buildings/OreRefinery')\n    static readonly GUNSTATION = new Building('Gunstation', 'Buildings/gunstation')\n    static readonly TELEPORT_BIG = new Building('TeleportBIG', 'Buildings/BIGTeleport')\n\n    name: string\n    aeFile: string\n    blocksPathSurface: boolean\n\n    constructor(name: string, folder: string, blocksPathSurface: boolean = true) {\n        this.name = name\n        this.aeFile = folder + '/' + folder.slice(folder.lastIndexOf('/') + 1) + '.ae'\n        this.blocksPathSurface = blocksPathSurface\n    }\n\n    static getByName(buildingType: string) {\n        const typename = buildingType.slice(buildingType.lastIndexOf('/') + 1).toLowerCase()\n        switch (typename) {\n            case 'toolstation':\n                return this.TOOLSTATION\n            case 'teleports':\n                return this.TELEPORT_PAD\n            case 'docks':\n                return this.DOCKS\n            case 'powerstation':\n                return this.POWER_STATION\n            case 'barracks':\n                return this.BARRACKS\n            case 'upgrade':\n                return this.UPGRADE\n            case 'geo-dome':\n                return this.GEODOME\n            case 'orerefinery':\n                return this.ORE_REFINERY\n            case 'gunstation':\n                return this.GUNSTATION\n            case 'teleportbig':\n                return this.TELEPORT_BIG\n            default:\n                throw 'Unknown building type: ' + buildingType\n        }\n    }\n\n}\n","import { WorldManager } from '../WorldManager'\nimport { Group, Vector2 } from 'three'\nimport { Surface } from './map/Surface'\n\nexport abstract class BaseEntity {\n\n    worldMgr: WorldManager\n    group: Group = new Group()\n    level: number = 0\n\n    abstract get stats()\n\n    getPosition() {\n        return this.group.position.clone()\n    }\n\n    getPosition2D() {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    getHeading(): number {\n        return this.group.rotation.y\n    }\n\n    onDiscover() {\n        this.group.visible = true\n    }\n\n    getCurrentSurface(): Surface {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position)\n    }\n\n    removeFromScene() {\n        this.worldMgr.sceneManager.scene.remove(this.group)\n    }\n\n}\n","export enum EventKey {\n\n    SELECTED_SURFACE,\n    SELECTED_BUILDING,\n    SELECTED_RAIDER,\n    SELECTED_VEHICLE,\n\n    DESELECTED_ENTITY,\n\n    JOB_CREATE,\n    JOB_DELETE,\n\n    RAIDER_REQUESTED,\n\n    MATERIAL_AMOUNT_CHANGED,\n\n    SPAWN_DYNAMITE,\n\n    ENTITY_ADDED,\n    ENTITY_REMOVED,\n\n    CAVERN_DISCOVERED,\n\n    ORE_FOUND,\n\n    BUILDING_UPGRADED,\n\n    RAIDER_TRAINED,\n\n    LOCATION_DEATH,\n    LOCATION_MONSTER,\n    LOCATION_CRYSTAL_FOUND,\n    LOCATION_UNDER_ATTACK,\n    LOCATION_LANDSLIDE,\n    LOCATION_POWER_DRAIN,\n    LOCATION_SLUG_EMERGE,\n    LOCATION_RAIDER_DISCOVERED,\n\n    SURFACE_CHANGED,\n\n}\n","import { GameEvent } from './GameEvent'\nimport { EventKey } from './EventKeyEnum'\n\nexport class EventBus {\n\n    static eventListener = new Map<EventKey, ((event: GameEvent) => any)[]>()\n    static blockedEvents = []\n\n    static publishEvent(event: GameEvent) {\n        if (this.blockedEvents.includes(event.eventKey)) return // event is currently blocked from publishing\n        if (!event.isLocal) console.log('Event published: ' + EventKey[event.eventKey])\n        this.blockedEvents.push(event.eventKey)\n        this.getListener(event.eventKey).forEach((callback) => callback(event))\n        this.blockedEvents.remove(event.eventKey)\n    }\n\n    static registerEventListener(eventKey: EventKey, callback: (GameEvent) => any) {\n        this.getListener(eventKey).push(callback)\n    }\n\n    private static getListener(eventKey: EventKey) {\n        return this.eventListener.getOrUpdate(eventKey, () => [])\n    }\n\n    // TODO cleanup/unregister all event listener at level end?!\n\n}\n","import { PublicJob } from '../game/model/job/Job'\nimport { CollectableType } from '../scene/model/collect/CollectableEntity'\nimport { AnimEntity } from '../scene/model/anim/AnimEntity'\nimport { Surface } from '../scene/model/map/Surface'\nimport { BuildingEntity } from '../scene/model/BuildingEntity'\nimport { FulfillerEntity } from '../scene/model/FulfillerEntity'\nimport { RaiderSkill } from '../scene/model/RaiderSkill'\nimport { GameEvent } from './GameEvent'\nimport { EventKey } from './EventKeyEnum'\n\nexport class WorldEvent extends GameEvent {\n\n    constructor(entityKey: EventKey) {\n        super(entityKey)\n        this.isLocal = false\n    }\n\n}\n\nexport class JobEvent extends WorldEvent {\n\n    job: PublicJob\n\n    constructor(eventKey: EventKey, job: PublicJob) {\n        super(eventKey)\n        this.job = job\n    }\n\n}\n\nexport class JobCreateEvent extends JobEvent {\n\n    constructor(job: PublicJob) {\n        super(EventKey.JOB_CREATE, job)\n    }\n\n}\n\nexport class JobDeleteEvent extends JobEvent {\n\n    constructor(job: PublicJob) {\n        super(EventKey.JOB_DELETE, job)\n    }\n\n}\n\nexport class RaiderRequested extends WorldEvent {\n\n    numRequested: number = 0\n\n    constructor(numRequested: number) {\n        super(EventKey.RAIDER_REQUESTED)\n        this.numRequested = numRequested\n    }\n\n}\n\nexport class MaterialAmountChanged extends WorldEvent {\n\n    collectableType: CollectableType\n\n    constructor(collectableType: CollectableType) {\n        super(EventKey.MATERIAL_AMOUNT_CHANGED)\n        this.collectableType = collectableType\n    }\n\n}\n\nexport class SpawnDynamiteEvent extends WorldEvent {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(EventKey.SPAWN_DYNAMITE)\n        this.surface = surface\n    }\n\n}\n\nexport class EntityAddedEvent extends WorldEvent {\n\n    type: EntityType\n    entity: AnimEntity\n\n    constructor(type: EntityType, entity: AnimEntity) {\n        super(EventKey.ENTITY_ADDED)\n        this.type = type\n        this.entity = entity\n    }\n\n}\n\nexport class EntityRemovedEvent extends WorldEvent {\n\n    type: EntityType\n    entity: AnimEntity\n\n    constructor(type: EntityType, entity: AnimEntity) {\n        super(EventKey.ENTITY_REMOVED)\n        this.type = type\n        this.entity = entity\n    }\n\n}\n\nexport enum EntityType {\n\n    RAIDER,\n    VEHICLE,\n    BUILDING,\n\n}\n\nexport class CavernDiscovered extends WorldEvent {\n\n    constructor() {\n        super(EventKey.CAVERN_DISCOVERED)\n    }\n\n}\n\nexport class OreFoundEvent extends WorldEvent {\n\n    constructor() {\n        super(EventKey.ORE_FOUND)\n    }\n\n}\n\nexport class BuildingUpgraded extends WorldEvent {\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(EventKey.BUILDING_UPGRADED)\n        this.building = building\n    }\n\n}\n\nexport class RaiderTrained extends WorldEvent {\n\n    entity: FulfillerEntity\n    skill: RaiderSkill\n\n    constructor(raider: FulfillerEntity, skill: RaiderSkill) {\n        super(EventKey.RAIDER_TRAINED)\n        this.entity = raider\n        this.skill = skill\n    }\n\n}\n","import { EventKey } from './EventKeyEnum'\n\nexport class GameEvent {\n\n    eventKey: EventKey\n    isLocal: boolean\n\n    constructor(eventKey: EventKey) {\n        this.eventKey = eventKey\n    }\n\n}\n","export enum JobState {\n\n    OPEN,\n    COMPLETE,\n    CANCELED,\n\n}\n","export enum JobType {\n\n    DRILL,\n    REINFORCE,\n    BLOW,\n    CLEAR_RUBBLE,\n    COLLECT,\n    CARRY,\n    MOVE,\n    TRAIN,\n    GET_TOOL,\n    EAT,\n    COMPLETE_POWER_PATH,\n\n}\n","import { FulfillerEntity } from '../../../scene/model/FulfillerEntity'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\nimport { RaiderTool } from '../../../scene/model/RaiderTool'\nimport { JobType } from './JobType'\nimport { JobState } from './JobState'\nimport { PriorityIdentifier } from './PriorityIdentifier'\nimport { PathTarget } from '../../../scene/model/PathTarget'\n\nexport abstract class Job {\n\n    type: JobType\n    jobstate: JobState\n    fulfiller: FulfillerEntity[] = []\n\n    protected constructor(type: JobType) {\n        this.type = type\n        this.jobstate = JobState.OPEN\n    }\n\n    assign(fulfiller: FulfillerEntity) {\n        const index = this.fulfiller.indexOf(fulfiller)\n        if (fulfiller && index === -1) {\n            this.fulfiller.push(fulfiller)\n        }\n    }\n\n    unassign(fulfiller: FulfillerEntity) {\n        this.fulfiller.remove(fulfiller)\n    }\n\n    cancel() {\n        this.jobstate = JobState.CANCELED\n        const fulfiller = this.fulfiller // ensure consistency while processing\n        this.fulfiller = []\n        fulfiller.forEach((fulfiller) => fulfiller.stopJob())\n    }\n\n    isQualified(fulfiller: FulfillerEntity): boolean {\n        return true\n    }\n\n    isQualifiedWithTool(fulfiller: FulfillerEntity): RaiderTool {\n        return null\n    }\n\n    isQualifiedWithTraining(fulfiller: FulfillerEntity): RaiderSkill {\n        return null\n    }\n\n    onJobComplete() {\n        this.jobstate = JobState.COMPLETE\n    }\n\n    abstract getWorkplaces(): PathTarget[];\n\n}\n\nexport abstract class PublicJob extends Job {\n\n    abstract getPriorityIdentifier(): PriorityIdentifier\n\n}\n","import { Vector2 } from 'three'\n\nexport class PathTarget {\n\n    targetLocation: Vector2\n\n    constructor(location: Vector2) {\n        this.targetLocation = location\n    }\n\n    isInArea(position: Vector2): boolean {\n        return false\n    }\n\n}\n","import { BaseEntity } from '../BaseEntity'\nimport { GameState } from '../../../game/model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { Carryable } from './Carryable'\nimport { CollectJob } from '../../../game/model/job/CollectJob'\nimport { CollectPathTarget } from '../CollectionTarget'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { BuildingSite } from '../BuildingSite'\nimport { PriorityIdentifier } from '../../../game/model/job/PriorityIdentifier'\n\nexport abstract class CollectableEntity extends BaseEntity implements Carryable {\n\n    targets: CollectPathTarget[] = []\n    targetSite: BuildingSite = null\n\n    abstract getTargetBuildingTypes(): Building[];\n\n    hasTarget(): boolean {\n        return this.updateTargets().length > 0\n    }\n\n    getCarryTargets(): CollectPathTarget[] {\n        return this.updateTargets()\n    }\n\n    resetTarget() {\n        this.targets = []\n        this.targetSite = null\n        this.updateTargets()\n    }\n\n    protected updateTargets(): CollectPathTarget[] {\n        if (this.targets.length < 1) {\n            const sites = GameState.buildingSites.filter((b) => b.needs(this.getCollectableType()))\n            if (sites.length > 0) {\n                this.targets = sites.map((s) => new CollectPathTarget(s.getRandomDropPosition(), s, null))\n            } else {\n                const buildings = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                if (buildings.length > 0) {\n                    this.targets = buildings.map((b) => new CollectPathTarget(b.getDropPosition2D(), null, b))\n                }\n            }\n        } else if (this.targets.some((t) => t.site && t.site.complete)) {\n            this.resetTarget()\n        } else if (this.targets.some((t) => t.building && !t.building.isPowered())) {\n            this.resetTarget()\n        }\n        return this.targets\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.collectablesUndiscovered.remove(this)\n        GameState.collectables.push(this)\n        EventBus.publishEvent(new JobCreateEvent(new CollectJob(this)))\n    }\n\n    abstract getCollectableType(): CollectableType\n\n    abstract getPriorityIdentifier(): PriorityIdentifier\n\n    setTargetSite(site: BuildingSite) {\n        if (this.targetSite === site) return\n        this.targetSite?.unAssign(this)\n        this.targetSite = site\n        this.targetSite?.assign(this)\n    }\n\n}\n\nexport enum CollectableType {\n\n    DYNAMITE,\n    CRYSTAL,\n    ORE,\n    BRICK,\n    BARRIER,\n    ELECTRIC_FENCE,\n\n}\n","import { CollectableEntity, CollectableType } from '../../../scene/model/collect/CollectableEntity'\nimport { FulfillerEntity } from '../../../scene/model/FulfillerEntity'\nimport { PublicJob } from './Job'\nimport { JobType } from './JobType'\nimport { PriorityIdentifier } from './PriorityIdentifier'\nimport { PathTarget } from '../../../scene/model/PathTarget'\nimport { ElectricFence } from '../../../scene/model/collect/ElectricFence'\n\nexport class CollectJob extends PublicJob {\n\n    item: CollectableEntity\n\n    constructor(item: CollectableEntity) {\n        super(JobType.COLLECT)\n        this.item = item\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return [new PathTarget(this.item.getPosition2D())]\n    }\n\n    isQualified(fulfiller: FulfillerEntity) {\n        return fulfiller.carries === null && this.item.hasTarget()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return this.item.getPriorityIdentifier()\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        if (this.item.getCollectableType() === CollectableType.ELECTRIC_FENCE) {\n            const electricFence = this.item as ElectricFence\n            if (electricFence.targetSurface.canPlaceFence()) {\n                this.item.worldMgr.sceneManager.scene.add(this.item.group)\n                electricFence.targetSurface.fence = electricFence\n            } // TODO else dispose item entity with mesh\n        }\n    }\n\n}\n","export class BaseActivity {\n\n    activityKey: string\n\n    constructor(activityKey: string) {\n        this.activityKey = activityKey\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class AnimEntityActivity extends BaseActivity {\n\n    static Stand = new AnimEntityActivity('Activity_Stand')\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class RaiderActivity extends AnimEntityActivity {\n\n    static Route = new RaiderActivity('Activity_Route')\n    static RunPanic = new RaiderActivity('Activity_RunPanic')\n    static Drill = new RaiderActivity('Activity_Drill')\n    static Walk = new RaiderActivity('!Activity_Walk')\n    static Reinforce = new RaiderActivity('Activity_Reinforce')\n    static Reverse = new RaiderActivity('!Activity_Reverse')\n    static TurnLeft = new RaiderActivity('!Activity_TurnLeft')\n    static TurnRight = new RaiderActivity('!Activity_TurnRight')\n    static CantDo = new RaiderActivity('!Activity_CantDo')\n    static Collect = new RaiderActivity('Activity_Collect')\n    static Clear = new RaiderActivity('Activity_Clear')\n    static Carry = new RaiderActivity('Activity_Carry')\n    static CarryTurnLeft = new RaiderActivity('!Activity_CarryTurnLeft')\n    static CarryTurnRight = new RaiderActivity('!Activity_CarryTurnRight')\n    static CarryStand = new RaiderActivity('Activity_CarryStand')\n    static Dynamite = new RaiderActivity('Activity_Dynamite')\n    static Place = new RaiderActivity('Activity_Place')\n    static Deposit = new RaiderActivity('!Activity_Deposit')\n    static TeleportIn = new RaiderActivity('Activity_TeleportIn')\n    static Repair = new RaiderActivity('Activity_Repair')\n    static rest = new RaiderActivity('Activity_rest')\n    static routeRubble = new RaiderActivity('!Activity_routeRubble')\n    static CarryRubble = new RaiderActivity('!Activity_CarryRubble')\n    static Eat = new RaiderActivity('Activity_Eat')\n    static FireLaser = new RaiderActivity('Activity_FireLaser')\n    static GetUp = new RaiderActivity('!Activity_GetUp')\n    static ThrownByRockMonster = new RaiderActivity('Activity_ThrownByRockMonster')\n    static Slip = new RaiderActivity('Activity_Slip')\n    static Train = new RaiderActivity('Activity_Train')\n    static Recharge = new RaiderActivity('!Activity_Recharge')\n\n    static Waiting1 = new RaiderActivity('Activity_Waiting1')\n    static Waiting2 = new RaiderActivity('Activity_Waiting2')\n    static Waiting3 = new RaiderActivity('Activity_Waiting3')\n    static Waiting4 = new RaiderActivity('Activity_Waiting4')\n\n    static Hoverboard = new RaiderActivity('Activity_Hoverboard')\n    static Standhoverboard = new RaiderActivity('Activity_Standhoverboard')\n    static HitLefthoverboard = new RaiderActivity('!Activity_HitLefthoverboard')\n    static HitRighthoverboard = new RaiderActivity('!Activity_HitRighthoverboard')\n    static HitFronthoverboard = new RaiderActivity('!Activity_HitFronthoverboard')\n    static HitBackhoverboard = new RaiderActivity('!Activity_HitBackhoverboard')\n\n    static SMALLTRUCK = new RaiderActivity('Activity_SMALLTRUCK')\n    static StandSMALLTRUCK = new RaiderActivity('Activity_StandSMALLTRUCK')\n    static HitLeftSMALLTRUCK = new RaiderActivity('!Activity_HitLeftSMALLTRUCK')\n    static HitRightSMALLTRUCK = new RaiderActivity('!Activity_HitRightSMALLTRUCK')\n    static HitFrontSMALLTRUCK = new RaiderActivity('!Activity_HitFrontSMALLTRUCK')\n    static HitBackSMALLTRUCK = new RaiderActivity('!Activity_HitBackSMALLTRUCK')\n\n    static SMALLheli = new RaiderActivity('Activity_SMALLheli')\n    static StandSMALLheli = new RaiderActivity('Activity_StandSMALLheli')\n    static HitLeftSMALLheli = new RaiderActivity('!Activity_HitLeftSMALLheli')\n    static HitRightSMALLheli = new RaiderActivity('!Activity_HitRightSMALLheli')\n    static HitFrontSMALLheli = new RaiderActivity('!Activity_HitFrontSMALLheli')\n    static HitBackSMALLheli = new RaiderActivity('!Activity_HitBackSMALLheli')\n\n    static SMALLCAT = new RaiderActivity('Activity_SMALLCAT')\n    static StandSMALLCAT = new RaiderActivity('Activity_StandSMALLCAT')\n    static HitLeftSMALLCAT = new RaiderActivity('!Activity_HitLeftSMALLCAT')\n    static HitRightSMALLCAT = new RaiderActivity('!Activity_HitRightSMALLCAT')\n    static HitFrontSMALLCAT = new RaiderActivity('!Activity_HitFrontSMALLCAT')\n    static HitBackSMALLCAT = new RaiderActivity('!Activity_HitBackSMALLCAT')\n\n    static SMALLMLP = new RaiderActivity('Activity_SMALLMLP')\n    static StandSMALLMLP = new RaiderActivity('Activity_StandSMALLMLP')\n    static HitLeftSMALLMLP = new RaiderActivity('!Activity_HitLeftSMALLMLP')\n    static HitRightSMALLMLP = new RaiderActivity('!Activity_HitRightSMALLMLP')\n    static HitFrontSMALLMLP = new RaiderActivity('!Activity_HitFrontSMALLMLP')\n    static HitBackSMALLMLP = new RaiderActivity('!Activity_HitBackSMALLMLP')\n\n    static LARGECAT = new RaiderActivity('Activity_LARGECAT')\n    static StandLARGECAT = new RaiderActivity('Activity_StandLARGECAT')\n    static HitLeftLARGECAT = new RaiderActivity('!Activity_HitLeftLARGECAT')\n    static HitRightLARGECAT = new RaiderActivity('!Activity_HitRightLARGECAT')\n    static HitFrontLARGECAT = new RaiderActivity('!Activity_HitFrontLARGECAT')\n    static HitBackLARGECAT = new RaiderActivity('!Activity_HitBackLARGECAT')\n\n    static SMALLDIGGER = new RaiderActivity('Activity_SMALLDIGGER')\n    static StandSMALLDIGGER = new RaiderActivity('Activity_StandSMALLDIGGER')\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class BuildingActivity extends AnimEntityActivity {\n\n    static Teleport = new BuildingActivity('Activity_Teleport')\n    static Deposit = new BuildingActivity('Activity_Deposit')\n    static Explode = new BuildingActivity('Activity_Explode')\n    static Unpowered = new BuildingActivity('Activity_Unpowered')\n\n}\n","import { Vector2 } from 'three'\nimport { RaiderActivity } from './activities/RaiderActivity'\nimport { CollectableEntity, CollectableType } from './collect/CollectableEntity'\nimport { PathTarget } from './PathTarget'\nimport { BuildingSite } from './BuildingSite'\nimport { Building } from '../../game/model/entity/building/Building'\nimport { BuildingEntity } from './BuildingEntity'\nimport { BuildingActivity } from './activities/BuildingActivity'\nimport { GameState } from '../../game/model/GameState'\nimport { EventBus } from '../../event/EventBus'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\n\nexport interface CollectionTarget {\n\n    getDropAction(): RaiderActivity\n\n    gatherItem(item: CollectableEntity)\n\n}\n\nexport class CollectPathTarget extends PathTarget implements CollectionTarget {\n\n    site: BuildingSite\n    building: BuildingEntity\n\n    constructor(location: Vector2, site: BuildingSite, building: BuildingEntity) {\n        super(location)\n        this.site = site\n        this.building = building\n    }\n\n    canGatherItem(): boolean {\n        if (this.building) {\n            return this.building.activity.activityKey === this.building.getDefaultActivity().activityKey\n        }\n        return true\n    }\n\n    gatherItem(item: CollectableEntity) {\n        if (this.site) {\n            this.site.addItem(item)\n        } else if (this.building) {\n            if (this.building.type === Building.POWER_STATION || this.building.type === Building.ORE_REFINERY) {\n                if (this.building.carryJoint) {\n                    this.building.carryJoint.add(item.group)\n                    item.group.position.set(0, 0, 0)\n                }\n                this.building.changeActivity(BuildingActivity.Deposit, () => {\n                    this.building.changeActivity()\n                    if (this.building.carryJoint) this.building.carryJoint.remove(item.group)\n                    CollectPathTarget.addItemToStorage(item)\n                    // TODO dispose item\n                })\n            } else {\n                CollectPathTarget.addItemToStorage(item)\n            }\n        } else {\n            item.worldMgr.sceneManager.scene.add(item.group)\n        }\n    }\n\n    private static addItemToStorage(item: CollectableEntity) {\n        switch (item.getCollectableType()) {\n            case CollectableType.CRYSTAL:\n                GameState.numCrystal++\n                EventBus.publishEvent(new MaterialAmountChanged(item.getCollectableType()))\n                break\n            case CollectableType.ORE:\n                GameState.numOre++\n                EventBus.publishEvent(new MaterialAmountChanged(item.getCollectableType()))\n                break\n        }\n    }\n\n    getDropAction(): RaiderActivity {\n        if (this.building && (this.building.type === Building.POWER_STATION || this.building.type === Building.ORE_REFINERY)) {\n            return RaiderActivity.Deposit\n        } else {\n            return RaiderActivity.Place\n        }\n    }\n\n}\n","export enum PriorityIdentifier {\n\n    aiPriorityTrain,\n    aiPriorityGetIn,\n    aiPriorityCrystal,\n    aiPriorityOre,\n    aiPriorityRepair,\n    aiPriorityClearing,\n    aiPriorityDestruction,\n    aiPriorityConstruction,\n    aiPriorityReinforce,\n    aiPriorityRecharge,\n\n}\n","import { GameEvent } from './GameEvent'\nimport { BuildingEntity } from '../scene/model/BuildingEntity'\nimport { Surface } from '../scene/model/map/Surface'\nimport { Raider } from '../scene/model/Raider'\nimport { VehicleEntity } from '../scene/model/VehicleEntity'\nimport { EventKey } from './EventKeyEnum'\n\nexport class LocalEvent extends GameEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n        this.isLocal = true\n    }\n\n}\n\nexport class SelectionEvent extends LocalEvent {\n\n    constructor(eventKey: EventKey) {\n        super(eventKey)\n    }\n\n}\n\nexport class SurfaceSelectedEvent extends SelectionEvent {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(EventKey.SELECTED_SURFACE)\n        this.surface = surface\n    }\n\n}\n\nexport class BuildingSelected extends SelectionEvent {\n\n    building: BuildingEntity\n\n    constructor(building: BuildingEntity) {\n        super(EventKey.SELECTED_BUILDING)\n        this.building = building\n    }\n\n}\n\nexport class RaiderSelected extends SelectionEvent {\n\n    raider: Raider\n\n    constructor(raider: Raider) {\n        super(EventKey.SELECTED_RAIDER)\n        this.raider = raider\n    }\n\n}\n\nexport class VehicleSelected extends SelectionEvent {\n\n    vehicle: VehicleEntity\n\n    constructor(vehicle: VehicleEntity) {\n        super(EventKey.SELECTED_VEHICLE)\n        this.vehicle = vehicle\n    }\n\n}\n\nexport class EntityDeselected extends LocalEvent {\n\n    constructor() {\n        super(EventKey.DESELECTED_ENTITY)\n    }\n\n}\n\nexport class SurfaceChanged extends LocalEvent {\n\n    surface: Surface\n\n    constructor(surface: Surface) {\n        super(EventKey.SURFACE_CHANGED)\n        this.surface = surface\n    }\n\n}\n","import { Box3, CanvasTexture, Matrix4, Mesh, MeshBasicMaterial, MeshPhongMaterial, Object3D, Sphere, SphereGeometry, Sprite, SpriteMaterial, Vector3 } from 'three'\nimport { AnimClip } from './AnimClip'\nimport { clearTimeoutSafe, iGet } from '../../../core/Util'\nimport { AnimationEntityType } from './AnimationEntityType'\nimport { BaseEntity } from '../BaseEntity'\nimport { AnimSubObj } from './AnimSubObj'\nimport { createContext } from '../../../core/ImageHelper'\nimport { BaseActivity } from '../activities/BaseActivity'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../main'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\n\nexport abstract class AnimEntity extends BaseEntity {\n\n    entityType: AnimationEntityType = null\n    poly: Object3D[] = []\n    animation: AnimClip = null\n    animationTimeout: NodeJS.Timeout = null\n    selectionFrame: Sprite = null\n    pickSphere: Mesh = null\n    pickSphereRadius: number = 10 / 2\n    carryJoint: Object3D = null\n    depositJoint: Object3D = null\n    getToolJoint: Object3D = null\n    activity: BaseActivity = null\n    radiusSq: number = 0\n\n    protected constructor(entityType: AnimationEntityType) {\n        super()\n        this.entityType = entityType\n    }\n\n    beamUp() {\n        // TODO avoid all further state changes and mark as unavailable here\n        // TODO publish event: check jobs with this target, update power state...\n        EventBus.publishEvent(new EntityDeselected())\n        this.changeActivity(this.getDefaultActivity(), () => {\n            // TODO insert beam animation\n            AnimEntity.moveUp(this, 6 * TILESIZE)\n        })\n    }\n\n    private static moveUp(entity: AnimEntity, counter: number) {\n        if (counter > 0) {\n            counter--\n            entity.group.position.y += (TILESIZE / NATIVE_FRAMERATE) / 2\n            setTimeout(() => AnimEntity.moveUp(entity, counter), 1000 / NATIVE_FRAMERATE)\n        } else {\n            entity.removeFromScene()\n        }\n    }\n\n    changeActivity(activity: AnimEntityActivity = this.getDefaultActivity(), onActivityChanged = null, durationTimeMs: number = null) {\n        if (this.activity === activity) return\n        this.activity = activity\n        let lActivityKey = activity.activityKey.toLowerCase()\n        let anim = this.entityType.activities.get(lActivityKey)\n        if (!anim) { // find by prefix\n            this.entityType.activities.forEach((a, key) => {\n                if (!anim && lActivityKey.startsWith(key)) anim = a\n            })\n        }\n        if (!anim?.animation) {\n            console.warn('Activity ' + activity.activityKey + ' unknown or has no animation defined')\n            console.log(this.entityType.activities)\n            return\n        }\n        this.setAnimation(anim?.animation, onActivityChanged, durationTimeMs)\n    }\n\n    private setAnimation(animation: AnimClip, onAnimationDone = null, durationTimeMs = null) {\n        if (onAnimationDone) onAnimationDone.bind(this)\n        this.animation = animation\n        this.animation.looping = true\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.group.remove(...this.poly)\n        this.poly = []\n        const carries = (this.carryJoint && this.carryJoint.children) || []\n        this.carryJoint = null\n        // bodies are defined in animation and second in high/medium/low poly groups\n        this.animation.bodies.forEach((body) => {\n            let model: Object3D = iGet(this.entityType.highPoly, body.name)\n            if (!model) model = iGet(this.entityType.mediumPoly, body.name)\n            if (!model) model = body.model\n            const polyModel = model.clone(true)\n            this.poly.push(polyModel)\n            if (body.name) {\n                const lBodyName = body.name.toLowerCase()\n                if (lBodyName === this.entityType.carryNullName?.toLowerCase()) {\n                    this.carryJoint = polyModel\n                    if (carries.length > 0) this.carryJoint.add(...carries)\n                } else if (lBodyName === this.entityType.depositNullName?.toLowerCase()) {\n                    this.depositJoint = polyModel\n                } else if (lBodyName === this.entityType.toolNullName?.toLowerCase()) {\n                    this.getToolJoint = polyModel\n                }\n            }\n        })\n        this.animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = this.poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                this.poly[parentInd].add(polyPart)\n            } else {\n                this.group.add(polyPart)\n            }\n        })\n        const sphere = new Sphere()\n        new Box3().setFromObject(this.group).getBoundingSphere(sphere)\n        this.radiusSq = sphere.radius * sphere.radius\n        this.animate(0, onAnimationDone, durationTimeMs)\n    }\n\n    private animate(frameIndex, onAnimationDone, durationTimeMs) {\n        if (this.poly.length !== this.animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        this.animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = this.poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = true\n                        mat.alphaTest = 0\n                    })\n                }\n            }\n        })\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        let nextFrame = frameIndex + 1\n        if (nextFrame <= this.animation.lastFrame || !onAnimationDone || (durationTimeMs !== null && durationTimeMs > 0)) {\n            if (nextFrame > this.animation.lastFrame) {\n                nextFrame = this.animation.firstFrame\n            }\n            const standardDurationTimeMs = 1000 / this.animation.framesPerSecond * this.animation.transcoef\n            if (durationTimeMs !== null) durationTimeMs -= standardDurationTimeMs\n            const that = this\n            const timeoutTimeMs = durationTimeMs !== null ? Math.max(0, Math.min(durationTimeMs, standardDurationTimeMs)) : standardDurationTimeMs\n            this.animationTimeout = setTimeout(() => that.animate(nextFrame, onAnimationDone, durationTimeMs), timeoutTimeMs) // TODO get this in sync with threejs\n        } else if (onAnimationDone) {\n            onAnimationDone()\n        }\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return AnimEntityActivity.Stand\n    }\n\n    createPickSphere() {\n        if (this.pickSphere) return\n        const pickSphereCenter = this.getPickSphereCenter()\n        const geometry = new SphereGeometry(this.pickSphereRadius, this.pickSphereRadius, this.pickSphereRadius)\n        const material = new MeshBasicMaterial({color: 0xffff00, visible: false}) // change visible to true for debugging\n        this.pickSphere = new Mesh(geometry, material)\n        this.pickSphere.userData = {selectable: this}\n        this.pickSphere.position.copy(pickSphereCenter)\n        this.group.add(this.pickSphere)\n        this.createSelectionFrame(pickSphereCenter)\n    }\n\n    getPickSphereCenter(): Vector3 {\n        return this.getBoundingBoxCenter()\n    }\n\n    getBoundingBoxCenter() {\n        const center = new Vector3()\n        new Box3().setFromObject(this.group).getCenter(center)\n        center.sub(this.group.position)\n        center.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        return center\n    }\n\n    private createSelectionFrame(pickSphereCenter: Vector3) {\n        const selectionFrameTextureSize = 128\n        const ctx = createContext(selectionFrameTextureSize, selectionFrameTextureSize)\n        ctx.fillStyle = '#0f0'\n        const strength = Math.round(25 / this.pickSphereRadius)\n        const length = selectionFrameTextureSize / 6\n        ctx.fillRect(0, 0, length, strength)\n        ctx.fillRect(0, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, 0, length, strength)\n        ctx.fillRect(selectionFrameTextureSize - strength, 0, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - strength, selectionFrameTextureSize - length, strength, length)\n        ctx.fillRect(selectionFrameTextureSize - length, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - strength, length, strength)\n        ctx.fillRect(0, selectionFrameTextureSize - length, strength, length)\n        const selectionFrameTexture = new CanvasTexture(ctx.canvas)\n        const selectionMaterial = new SpriteMaterial({map: selectionFrameTexture, depthTest: false})\n        this.selectionFrame = new Sprite(selectionMaterial)\n        this.selectionFrame.position.copy(pickSphereCenter)\n        const selectionFrameSize = this.pickSphereRadius * 2\n        this.selectionFrame.scale.set(selectionFrameSize, selectionFrameSize, selectionFrameSize)\n        this.selectionFrame.visible = false\n        this.group.add(this.selectionFrame)\n    }\n\n}\n","import { BaseActivity } from './BaseActivity'\n\nexport class DynamiteActivity extends BaseActivity {\n\n    static Normal = new DynamiteActivity('Normal')\n    static TickDown = new DynamiteActivity('TickDown')\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { AnimEntity } from '../anim/AnimEntity'\nimport { Carryable } from './Carryable'\nimport { Surface } from '../map/Surface'\nimport { GameState } from '../../../game/model/GameState'\nimport { DynamiteActivity } from '../activities/DynamiteActivity'\nimport { AnimEntityActivity } from '../activities/AnimEntityActivity'\nimport { PathTarget } from '../PathTarget'\n\nexport class Dynamite extends AnimEntity implements Carryable {\n\n    targetSurface: Surface\n\n    constructor() {\n        super(ResourceManager.getAnimationEntityType('MiscAnims/Dynamite/Dynamite.ae'))\n        this.changeActivity()\n    }\n\n    get stats() {\n        return {}\n    }\n\n    hasTarget(): boolean {\n        return this.targetSurface && this.targetSurface.isExplodable() || GameState.hasOneBuildingOf(Building.TOOLSTATION)\n    }\n\n    getCarryTargets(): PathTarget[] {\n        if (this.targetSurface && this.targetSurface.isExplodable()) {\n            return this.targetSurface.getDigPositions().map((p) => new PathTarget(p))\n        } else {\n            return GameState.getBuildingsByType(Building.TOOLSTATION).map((b) => b.getDropPosition2D())\n                .map((p) => new PathTarget(p))\n        }\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.DYNAMITE\n    }\n\n    ignite() {\n        // TODO add as explosive and scare em all!\n        this.worldMgr.sceneManager.scene.add(this.group)\n        const center = this.targetSurface.getCenterWorld()\n        center.y = this.group.position.y\n        this.group.lookAt(center)\n        this.changeActivity(DynamiteActivity.TickDown, () => {\n            this.removeFromScene()\n            this.targetSurface.collapse()\n            // TODO add explosion animation\n            // TODO damage raider, vehicle, buildings\n        })\n    }\n\n    getDefaultActivity(): AnimEntityActivity {\n        return DynamiteActivity.Normal\n    }\n\n}\n","import { BuildingEntity } from '../../scene/model/BuildingEntity'\nimport { Building } from './entity/building/Building'\nimport { Selectable, SelectionType } from './Selectable'\nimport { Raider } from '../../scene/model/Raider'\nimport { VehicleEntity } from '../../scene/model/VehicleEntity'\nimport { CollectableEntity, CollectableType } from '../../scene/model/collect/CollectableEntity'\nimport { Vector3 } from 'three'\nimport { ADDITIONAL_RAIDER_PER_SUPPORT, MAX_RAIDER_BASE, TILESIZE } from '../../main'\nimport { Surface } from '../../scene/model/map/Surface'\nimport { BaseEntity } from '../../scene/model/BaseEntity'\nimport { EventBus } from '../../event/EventBus'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { BuildingSite } from '../../scene/model/BuildingSite'\nimport { Dynamite } from '../../scene/model/collect/Dynamite'\nimport { Crystal } from '../../scene/model/collect/Crystal'\nimport { Ore } from '../../scene/model/collect/Ore'\nimport { LevelRewardConfig } from '../../cfg/LevelsCfg'\nimport { PriorityList } from './job/PriorityList'\nimport { SmallSpider } from './entity/monster/SmallSpider'\nimport { Bat } from './entity/monster/Bat'\nimport { RaiderSkill } from '../../scene/model/RaiderSkill'\nimport { MaterialAmountChanged } from '../../event/WorldEvents'\n\nexport enum GameResultState {\n\n    RUNNING,\n    COMPLETE,\n    FAILED,\n\n}\n\nexport class GameState {\n\n    static resultState: GameResultState = GameResultState.RUNNING\n    static levelFullName: string = ''\n    static numCrystal: number = 0\n    static numOre: number = 0\n    static numBrick: number = 0\n    static usedCrystals: number = 0\n    static neededCrystals: number = 0\n    static airlevel: number = 1 // airlevel in percent from 0 to 1.0\n    static selectedEntities: Selectable[] = []\n    static selectionType: SelectionType = null\n    static buildings: BuildingEntity[] = []\n    static buildingsUndiscovered: BuildingEntity[] = []\n    static raiders: Raider[] = []\n    static raidersUndiscovered: Raider[] = []\n    static requestedRaiders: number = 0\n    static vehicles: VehicleEntity[] = []\n    static vehiclesUndiscovered: VehicleEntity[] = []\n    static collectables: CollectableEntity[] = []\n    static collectablesUndiscovered: CollectableEntity[] = []\n    static buildingSites: BuildingSite[] = []\n    static spiders: SmallSpider[] = []\n    static spidersBySurface: Map<Surface, SmallSpider[]> = new Map()\n    static bats: Bat[] = []\n    static totalCrystals: number = 0\n    static totalOres: number = 0\n    static totalDiggables: number = 0\n    static remainingDiggables: number = 0\n    static totalCaverns: number = 0\n    static discoveredCaverns: number = 0\n    static levelStartTime: number = 0\n    static levelStopTime: number = 0\n    static rewardConfig: LevelRewardConfig = null\n    static priorityList: PriorityList = null\n\n    static reset() {\n        this.resultState = GameResultState.RUNNING\n        this.levelFullName = ''\n        this.numCrystal = 0\n        this.numOre = 0\n        this.numBrick = 0\n        this.usedCrystals = 0\n        this.neededCrystals = 0\n        this.airlevel = 1\n        this.selectedEntities = []\n        this.selectionType = null\n        this.buildings = []\n        this.buildingsUndiscovered = []\n        this.raiders = []\n        this.raidersUndiscovered = []\n        this.requestedRaiders = 0\n        this.vehicles = []\n        this.vehiclesUndiscovered = []\n        this.collectables = []\n        this.collectablesUndiscovered = []\n        this.buildingSites = []\n        this.spiders = []\n        this.spidersBySurface = new Map()\n        this.bats = []\n        this.totalCrystals = 0\n        this.totalOres = 0\n        this.totalDiggables = 0\n        this.remainingDiggables = 0\n        this.totalCaverns = 0\n        this.discoveredCaverns = 0\n        this.levelStartTime = 0\n        this.levelStopTime = 0\n        this.rewardConfig = null\n        this.priorityList = null\n    }\n\n    static getBuildingsByType(...buildingTypes: Building[]): BuildingEntity[] {\n        return this.buildings.filter(b => b.isPowered() && buildingTypes.some(bt => b.type === bt))\n    }\n\n    static getClosestBuildingByType(position: Vector3, ...buildingTypes: Building[]): BuildingEntity {\n        const targetBuildings = GameState.getBuildingsByType(...buildingTypes)\n        let closest = null, minDist = null\n        targetBuildings.forEach((b) => {\n            const bPos = b.getDropPosition()\n            const dist = position.distanceToSquared(bPos) // TODO better use pathfinding\n            if (closest === null || dist < minDist) {\n                closest = b\n                minDist = dist\n            }\n        })\n        return closest\n    }\n\n    static hasOneBuildingOf(...buildings: Building[]): boolean {\n        return this.buildings.some((b) => buildings.some((type) => b.type === type) && b.isPowered())\n    }\n\n    static hasBuildingWithUpgrades(building: Building, upgrades: number = 0): boolean {\n        return this.buildings.some((b) => b.type === building && b.level >= upgrades && b.isPowered())\n    }\n\n    static getTrainingSites(position: Vector3, training: RaiderSkill): BuildingEntity[] {\n        if (training === RaiderSkill.DEMOLITION) {\n            return this.buildings.filter((b) => {\n                return b.stats.TrainDynamite && b.stats.TrainDynamite[b.level]\n            })\n        }\n        return []\n    }\n\n    static selectEntities(entities: Selectable[]) {\n        this.selectedEntities = this.selectedEntities.filter((previouslySelected) => {\n            const stillSelected = entities.indexOf(previouslySelected) !== -1\n            if (!stillSelected) previouslySelected.deselect()\n            return stillSelected\n        })\n        // add new entities that are selectable\n        const selectionEvents = []\n        entities.forEach((freshlySelected) => {\n            const selectionEvent = freshlySelected.select()\n            if (selectionEvent) {\n                this.selectedEntities.push(freshlySelected)\n                selectionEvents.push(selectionEvent)\n            }\n        })\n        // determine and set next selection type\n        const len = this.selectedEntities.length\n        if (len > 1) {\n            this.selectionType = SelectionType.GROUP\n        } else if (len === 1) {\n            this.selectionType = this.selectedEntities[0].getSelectionType()\n        } else if (this.selectionType !== null) {\n            this.selectionType = null\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        // AFTER updating selected entities and selection type, publish all events\n        selectionEvents.forEach((event) => EventBus.publishEvent(event))\n    }\n\n    static getMaxRaiders(): number {\n        return MAX_RAIDER_BASE + this.getBuildingsByType(Building.BARRACKS).length * ADDITIONAL_RAIDER_PER_SUPPORT\n    }\n\n    static discoverSurface(surface: Surface) {\n        const minX = surface.x * TILESIZE, minZ = surface.y * TILESIZE\n        const maxX = minX + TILESIZE, maxZ = minZ + TILESIZE\n        this.discoverEntities(this.raidersUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.buildingsUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.vehiclesUndiscovered, minX, maxX, minZ, maxZ)\n        this.discoverEntities(this.collectablesUndiscovered, minX, maxX, minZ, maxZ)\n    }\n\n    static discoverEntities(undiscovered: BaseEntity[], minX, maxX, minZ, maxZ) {\n        const discovered = []\n        undiscovered.forEach((e) => {\n            const pos = e.getPosition()\n            if (pos.x >= minX && pos.x < maxX && pos.z >= minZ && pos.z < maxZ) {\n                e.onDiscover()\n                discovered.push(e)\n            }\n        })\n        discovered.forEach((r) => undiscovered.remove(r))\n    }\n\n    static dropMaterial(type: CollectableType, quantity: number): CollectableEntity[] {\n        const result = []\n        if (type === CollectableType.DYNAMITE) {\n            for (let c = 0; c < quantity; c++) result.push(new Dynamite())\n        } else if (type === CollectableType.CRYSTAL) {\n            while (GameState.numCrystal > 0 && result.length < quantity) {\n                GameState.numCrystal--\n                result.push(new Crystal())\n            }\n        } else if (type === CollectableType.ORE) {\n            while (GameState.numOre > 0 && result.length < quantity) {\n                GameState.numOre--\n                result.push(new Ore())\n            }\n        } else {\n            console.error('Material drop not yet implemented: ' + type)\n        }\n        if (result.length > 0) EventBus.publishEvent(new MaterialAmountChanged(type))\n        return result\n    }\n\n    static get gameTimeSeconds() {\n        return Math.round((GameState.levelStopTime - GameState.levelStartTime) / 1000)\n    }\n\n    static get score() {\n        if (!GameState.rewardConfig) return 0\n        let quota = GameState.rewardConfig.quota\n        let importance = GameState.rewardConfig.importance\n        const scoreCrystals = GameState.numCrystal >= (quota.crystals || Infinity) ? importance.crystals : 0\n        const scoreTimer = GameState.gameTimeSeconds <= (quota.timer || 0) ? importance.timer : 0\n        const scoreCaverns = quota.caverns ? Math.min(1, GameState.discoveredCaverns / quota.caverns) * importance.caverns : 0\n        const scoreConstructions = quota.constructions ? Math.min(1, GameState.buildings.length / quota.constructions * importance.constructions) : 0\n        const scoreOxygen = GameState.airlevel * importance.oxygen\n        const scoreFigures = GameState.raiders.length >= MAX_RAIDER_BASE ? importance.figures : 0\n        return Math.round(scoreCrystals + scoreTimer + scoreCaverns + scoreConstructions + scoreOxygen + scoreFigures) / 100\n    }\n\n    static get selectedSurface(): Surface {\n        return this.selectionType === SelectionType.SURFACE && this.selectedEntities.length > 0 ? this.selectedEntities[0] as Surface : null\n    }\n\n    static get selectedBuilding(): BuildingEntity {\n        return this.selectionType === SelectionType.BUILDING && this.selectedEntities.length > 0 ? this.selectedEntities[0] as BuildingEntity : null\n    }\n\n    static get selectedRaiders(): Raider[] {\n        return (this.selectionType === SelectionType.PILOT || this.selectionType === SelectionType.GROUP) && this.selectedEntities.length > 0 ? this.selectedEntities as Raider[] : []\n    }\n\n    static get totalOre(): number {\n        return this.numOre + this.numBrick * 5\n    }\n\n    static getNearbySpiders(entity: BaseEntity): SmallSpider[] {\n        const terrain = entity.worldMgr.sceneManager.terrain\n        const currentSurface = terrain.getSurfaceFromWorld(entity.getPosition())\n        const nearbySpiders: SmallSpider[] = []\n        for (let x = currentSurface.x; x <= currentSurface.x + 1; x++) {\n            for (let y = currentSurface.y; y <= currentSurface.y + 1; y++) {\n                const surface = terrain.getSurface(x, y)\n                nearbySpiders.push(...(GameState.spidersBySurface.get(surface) || []))\n            }\n        }\n        return nearbySpiders\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Color, Material, MeshPhongMaterial } from 'three'\nimport { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { SceneManager } from '../../SceneManager'\nimport { PriorityIdentifier } from '../../../game/model/job/PriorityIdentifier'\n\nexport class Crystal extends CollectableEntity {\n\n    constructor() {\n        super()\n        const resource2 = ResourceManager.getResource('MiscAnims/Crystal/vlp_greencrystal.lwo')\n        const mesh2 = SceneManager.registerMesh(new LWOLoader('MiscAnims/Crystal/').parse(resource2));\n        (mesh2.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.color = new Color(0, 0, 0) // XXX read from LWO file?\n            mat.emissive = new Color(0, 255, 0) // XXX should be luminosity color from mesh file?\n            mat.depthWrite = false // otherwise transparent parts \"carve out\" objects behind\n            mat.opacity = 0.5 // XXX read from LWO file?\n            mat.transparent = true\n        })\n        mesh2.scale.set(1.75, 1.75, 1.75) // XXX derive from texture scale?\n        this.group.add(mesh2)\n        const resource = ResourceManager.getResource('World/Shared/Crystal.lwo') // highpoly version\n        const mesh = SceneManager.registerMesh(new LWOLoader('World/Shared/').parse(resource));\n        (mesh.material as Material[]).forEach((mat: MeshPhongMaterial) => {\n            mat.emissive = new Color(0, 8, 0) // XXX read from LWO file?\n            mat.color = new Color(0, 0, 0) // XXX read from LWO file?\n            mat.transparent = true\n            mat.opacity = 0.4 // XXX read from LWO file?\n        })\n        this.group.add(mesh)\n    }\n\n    get stats() {\n        return ResourceManager.stats.PowerCrystal\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.POWER_STATION, Building.TOOLSTATION]\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        console.log('An energy crystal has been discovered')\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.CRYSTAL\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityCrystal\n    }\n\n}\n","import { LWOLoader } from '../../../resource/LWOLoader'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { SceneManager } from '../../SceneManager'\nimport { PriorityIdentifier } from '../../../game/model/job/PriorityIdentifier'\n\nexport class Ore extends CollectableEntity {\n\n    constructor() {\n        super()\n        const resource = ResourceManager.getResource('MiscAnims/Ore/Ore1st.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('MiscAnims/Ore/').parse(resource))\n        this.group.add(mesh)\n    }\n\n    get stats() {\n        return ResourceManager.stats.Ore\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.ORE_REFINERY, Building.TOOLSTATION]\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        console.log('Ore has been discovered')\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.ORE\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityOre\n    }\n\n}\n","export class RaiderSkill {\n\n    static DRIVER = new RaiderSkill('driver')\n    static ENGINEER = new RaiderSkill('engineer')\n    static GEOLOGIST = new RaiderSkill('geologist')\n    static PILOT = new RaiderSkill('pilot')\n    static SAILOR = new RaiderSkill('sailor')\n    static DEMOLITION = new RaiderSkill('demolition')\n\n    name: string\n\n    constructor(name: string) {\n        this.name = name\n    }\n\n}\n","export class WorkerMessage {\n\n    type: WorkerMessageType = null\n    text?: string\n    cfg?: any\n    totalResources?: number\n    assetName?: string\n    assetObj?: any\n    loadingTimeSeconds?: string\n\n    constructor(type: WorkerMessageType) {\n        this.type = type\n    }\n\n    static createTextMessage(msg: string): WorkerMessage {\n        return {type: WorkerMessageType.MSG, text: msg}\n    }\n\n    static createCfgLoaded(cfg: any, totalResources: number): WorkerMessage {\n        return {type: WorkerMessageType.CFG, cfg: cfg, totalResources: totalResources}\n    }\n\n    static createAssetLoaded(assetIndex: number, assetName: string, assetObj: any) {\n        return {type: WorkerMessageType.ASSET, assetName: assetName, assetObj: assetObj}\n    }\n\n    static createLoadDone(totalResources: number, loadingTimeSeconds: string) {\n        return {type: WorkerMessageType.DONE, totalResources: totalResources, loadingTimeSeconds: loadingTimeSeconds}\n    }\n\n}\n\nexport enum WorkerMessageType {\n\n    MSG,\n    CFG,\n    CACHE_MISS,\n    SFX,\n    ASSET,\n    DONE,\n\n}\n","import { AmbientLight, Color, Frustum, Mesh, MOUSE, PerspectiveCamera, PointLight, Raycaster, Scene, Vector3, WebGLRenderer } from 'three'\nimport { DebugHelper } from './DebugHelper'\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { GameState } from '../game/model/GameState'\nimport { Selectable } from '../game/model/Selectable'\nimport { Terrain } from './model/map/Terrain'\nimport { TILESIZE } from '../main'\nimport { clearIntervalSafe } from '../core/Util'\nimport { AnimatedMesh } from '../resource/AnimatedMesh'\n\nexport class SceneManager {\n\n    static meshRegistry: AnimatedMesh[] = []\n\n    maxFps: number = 30 // most animations use 25 fps so this should be enough\n    renderer: WebGLRenderer\n    debugHelper: DebugHelper = new DebugHelper()\n    renderInterval\n    animRequest\n    scene: Scene\n    camera: PerspectiveCamera\n    ambientLight: AmbientLight\n    light: PointLight\n    terrain: Terrain\n    controls: MapControls\n    cursorTorchlight: PointLight\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.renderer = new WebGLRenderer({antialias: true, canvas: canvas})\n        this.renderer.setClearColor(0x000000)\n\n        this.camera = new PerspectiveCamera(30, canvas.width / canvas.height, 0.1, 5000) // TODO make these params configurable\n\n        this.controls = new MapControls(this.camera, this.renderer.domElement)\n        this.controls.mouseButtons = {LEFT: null, MIDDLE: MOUSE.ROTATE, RIGHT: MOUSE.PAN}\n        // this.controls.maxPolarAngle = Math.PI * 0.45; // TODO dynamically adapt to terrain height at camera position\n    }\n\n    selectEntitiesByRay(rx: number, ry: number) {\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.camera)\n        let intersects = raycaster.intersectObjects(GameState.raiders.map((r) => r.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.vehicles.map((v) => v.pickSphere))\n        if (intersects.length < 1) intersects = raycaster.intersectObjects(GameState.buildings.map((b) => b.pickSphere))\n        if (intersects.length < 1 && this.terrain) intersects = raycaster.intersectObjects(this.terrain.floorGroup.children)\n        const selected = []\n        if (intersects.length > 0) {\n            const userData = intersects[0].object.userData\n            if (userData && userData.hasOwnProperty('selectable')) {\n                const selectable = userData['selectable']\n                if (selectable) selected.push(selectable)\n            }\n        }\n        GameState.selectEntities(selected)\n    }\n\n    selectEntitiesInFrustum(r1x: number, r1y: number, r2x: number, r2y: number) {\n        const startPoint = new Vector3(r1x, r1y, 0.5)\n        const endPoint = new Vector3(r2x, r2y, 0.5)\n        // Avoid invalid frustum\n        if (startPoint.x === endPoint.x) {\n            endPoint.x += Number.EPSILON\n        }\n        if (startPoint.y === endPoint.y) {\n            endPoint.y += Number.EPSILON\n        }\n        // update camera\n        this.camera.updateProjectionMatrix()\n        this.camera.updateMatrixWorld()\n        // update frustum\n        const tmpPoint = new Vector3()\n        tmpPoint.copy(startPoint)\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x)\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y)\n        endPoint.x = Math.max(startPoint.x, endPoint.x)\n        endPoint.y = Math.min(startPoint.y, endPoint.y)\n\n        const vecNear = new Vector3()\n        const vecTopLeft = new Vector3()\n        const vecTopRight = new Vector3()\n        const vecDownRight = new Vector3()\n        const vecDownLeft = new Vector3()\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld)\n        vecTopLeft.copy(tmpPoint)\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0)\n        vecDownRight.copy(endPoint)\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0)\n\n        vecTopLeft.unproject(this.camera)\n        vecTopRight.unproject(this.camera)\n        vecDownRight.unproject(this.camera)\n        vecDownLeft.unproject(this.camera)\n\n        const vectemp1 = new Vector3()\n        const vectemp2 = new Vector3()\n        const vectemp3 = new Vector3()\n        vectemp1.copy(vecTopLeft).sub(vecNear)\n        vectemp2.copy(vecTopRight).sub(vecNear)\n        vectemp3.copy(vecDownRight).sub(vecNear)\n        vectemp1.normalize()\n        vectemp2.normalize()\n        vectemp3.normalize()\n\n        const deep = Number.MAX_VALUE\n        vectemp1.multiplyScalar(deep)\n        vectemp2.multiplyScalar(deep)\n        vectemp3.multiplyScalar(deep)\n        vectemp1.add(vecNear)\n        vectemp2.add(vecNear)\n        vectemp3.add(vecNear)\n\n        const frustum = new Frustum()\n        const planes = frustum.planes\n\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight)\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight)\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear)\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear)\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft)\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1)\n        planes[5].normal.multiplyScalar(-1)\n\n        let entities: Selectable[] = GameState.raiders.filter((r) => frustum.containsPoint(r.getSelectionCenter()))\n        entities.push(...(GameState.vehicles.filter((v) => frustum.containsPoint(v.getSelectionCenter()))))\n        if (entities.length < 1) entities = GameState.buildings.filter((b) => frustum.containsPoint(b.getSelectionCenter()))\n        GameState.selectEntities(entities)\n    }\n\n    setupScene(ambientColor: Color) {\n        this.scene = new Scene()\n\n        this.ambientLight = new AmbientLight(ambientColor, 0.4)\n        this.scene.add(this.ambientLight)\n\n        this.cursorTorchlight = new PointLight(0xffffff, 1.5, 4, 1)\n        this.cursorTorchlight.distance *= TILESIZE\n        this.scene.add(this.cursorTorchlight)\n    }\n\n    startScene() {\n        this.debugHelper.show()\n        this.renderInterval = setInterval(() => {\n            this.animRequest = requestAnimationFrame(() => {\n                this.debugHelper.renderStart()\n                this.renderer.render(this.scene, this.camera)\n                this.debugHelper.renderDone()\n            })\n        }, 1000 / this.maxFps)\n    }\n\n    disposeScene() {\n        this.debugHelper.hide()\n        this.renderInterval = clearIntervalSafe(this.renderInterval)\n        if (this.animRequest) {\n            cancelAnimationFrame(this.animRequest)\n            this.animRequest = null\n        }\n        this.terrain?.dispose()\n        this.terrain = null\n        SceneManager.meshRegistry.forEach(mesh => mesh.dispose())\n        SceneManager.meshRegistry = []\n    }\n\n    static registerMesh(animatedMesh: AnimatedMesh): Mesh {\n        this.meshRegistry.push(animatedMesh)\n        return animatedMesh.mesh\n    }\n\n}\n","/**\n * @author Scarabol https://github.com/scarabol\n *\n * This loader loads LWSC files exported from LW\n *\n * File format description: http://www.martinreddy.net/gfx/3d/LWSC.txt\n */\n\nimport { AnimClip } from '../scene/model/anim/AnimClip'\nimport { AnimSubObj } from '../scene/model/anim/AnimSubObj'\nimport { Group } from 'three'\nimport { getFilename } from '../core/Util'\nimport { ResourceManager } from './ResourceManager'\nimport { LWOLoader } from './LWOLoader'\nimport { SceneManager } from '../scene/SceneManager'\n\nexport class LWSCLoader {\n\n    path: string = ''\n    verbose: boolean = false\n    animationClip: AnimClip = new AnimClip()\n    lines: string[] = []\n    lineIndex: number = 0\n\n    constructor(path: string, verbose: boolean = false) {\n        this.path = path\n        this.verbose = verbose\n        if (this.verbose) console.log('Using verbose mode')\n    }\n\n    parse(content): AnimClip {\n        this.lines = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n') // normalize newlines\n            .replace(/\\t/g, ' ') // tabs to spaces\n            .split('\\n')\n            .map(l => l.trim())\n\n        if (this.lines[0] !== 'LWSC') {\n            throw 'Invalid start of file! Expected \\'LWSC\\' in first line'\n        }\n\n        const sceneFileVersion = parseInt(this.lines[1], 10)\n        if (sceneFileVersion !== 1) {\n            console.warn('Unexpected scene file version: ' + sceneFileVersion)\n        }\n\n        for (this.lineIndex = 2; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) continue // empty line: object separator\n            const key = line.split(' ')[0]\n            if (key === 'FirstFrame') {\n                this.parseFrameBlock()\n            } else if (key === 'AddNullObject' || key === 'LoadObject') {\n                this.parseObjectBlock()\n                if (this.verbose) console.log(this.animationClip.bodies[this.animationClip.bodies.length - 1])\n            } else if (line.startsWith('PreviewFirstFrame ') || line.startsWith('PreviewLastFrame ') || line.startsWith('PreviewFrameStep ')) {\n                // only used in editor\n            } else {\n                // console.warn('Unexpected line: ' + line); // TODO analyze remaining entries\n            }\n        }\n\n        if (this.verbose) console.log(this.animationClip)\n        return this.animationClip\n    }\n\n    parseLine(line: string): string[] {\n        return line.split(' ').filter((l: string) => l !== '')\n    }\n\n    parseFrameBlock() {\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            const line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'FirstFrame') {\n                this.animationClip.firstFrame = parseInt(value)\n            } else if (key === 'LastFrame') {\n                this.animationClip.lastFrame = parseInt(value)\n            } else if (key === 'FrameStep') {\n                const frameStep = parseInt(value)\n                if (frameStep !== 1) console.error('Animation frameStep has unexpected value: ' + frameStep)\n            } else if (key === 'FramesPerSecond') {\n                this.animationClip.framesPerSecond = parseInt(value)\n            } else if (key === 'PreviewFirstFrame' || key === 'PreviewLastFrame' || key === 'PreviewFrameStep') {\n                // only used in editor\n            } else {\n                console.warn('Unexpected key in frame block')\n            }\n        }\n        console.error('Parsing block reached content end')\n    }\n\n    parseObjectBlock(): AnimSubObj {\n        const subObj = new AnimSubObj()\n        this.animationClip.bodies.push(subObj)\n        for (; this.lineIndex < this.lines.length; this.lineIndex++) {\n            let line = this.lines[this.lineIndex]\n            if (!line) return\n            const [key, value] = this.parseLine(line)\n            if (key === 'AddNullObject' || key === 'LoadObject') {\n                if (key === 'LoadObject') {\n                    const filename = getFilename(value)\n                    subObj.name = filename.slice(0, filename.length - '.lwo'.length)\n                    subObj.filename = this.path + filename\n                    const lwoBuffer = ResourceManager.getResource(subObj.filename)\n                    subObj.model = SceneManager.registerMesh(new LWOLoader(this.path).parse(lwoBuffer))\n                } else if (key === 'AddNullObject') {\n                    subObj.name = value\n                    subObj.model = new Group()\n                } else {\n                    throw 'Unexpected line: ' + line\n                }\n            } else if (key === 'ObjectMotion') {\n                let line = this.lines[++this.lineIndex]\n                const lenInfos = parseInt(line)\n                line = this.lines[++this.lineIndex]\n                const lenFrames = parseInt(line)\n                this.lineIndex++\n                for (let c = 0; c < lenFrames; c++) {\n                    let line = this.lines[this.lineIndex + c * 2]\n                    if (line.startsWith('EndBehavior')) break\n                    const infos = line.split(' ').map(Number)\n                    if (infos.length !== lenInfos) console.warn('Number of infos (' + infos.length + ') does not match if specified count (' + lenInfos + ')')\n                    line = this.lines[this.lineIndex + c * 2 + 1]\n                    const animationFrameIndex = parseInt(line.split(' ')[0]) // other entries in line should be zeros\n                    subObj.setFrameAndFollowing(animationFrameIndex, this.animationClip.lastFrame, infos)\n                }\n                this.lineIndex += lenFrames * 2\n            } else if (key === 'ParentObject') {\n                subObj.parentObjInd = Number(value) - 1 // index is 1 based\n                if (this.verbose) console.log('parent obj ind is: ' + subObj.parentObjInd)\n            } else if (key === 'ShowObject ' || key === 'LockedChannels') {\n                // only used in editor\n            } else if (key === 'ShadowOptions') { // TODO implement shadow options (bitwise)\n                // 0 - Self Shadow\n                // 1 - Cast Shadow\n                // 2 - Receive Shadow\n            } else if (key === 'ObjDissolve') {\n                if (value == '(envelope)') {\n                    let line = this.lines[++this.lineIndex]\n                    const numOfInformationChannels = parseInt(line)\n                    if (numOfInformationChannels !== 1) console.error('Number of information channels for opacity is not 1, but: ' + numOfInformationChannels)\n                    line = this.lines[++this.lineIndex]\n                    const numOfKeyframes = parseInt(line)\n                    this.lineIndex++\n                    for (let c = 0; c < numOfKeyframes; c++) {\n                        let line = this.lines[this.lineIndex + c * 2]\n                        if (line.startsWith('EndBehavior')) break\n                        const opacity = 1 - Number(line)\n                        line = this.lines[this.lineIndex + c * 2 + 1]\n                        const frameNum = Number(line.split(' ')[0])\n                        subObj.setOpacityAndFollowing(frameNum, this.animationClip.lastFrame, opacity)\n                    }\n                    this.lineIndex += numOfKeyframes * 2\n                } else {\n                    const opacity = 1 - Number(value)\n                    subObj.setOpacityAndFollowing(0, this.animationClip.lastFrame, opacity)\n                }\n            } else {\n                // console.log('Unhandled line in object block: ' + line); // TODO analyze unhandled lines\n            }\n        }\n        console.error('Parsing block reached content end')\n        return subObj\n    }\n\n}\n","import { AnimationEntityType } from '../scene/model/anim/AnimationEntityType'\nimport { getPath, iGet } from './wadworker/WadUtil'\nimport { ResourceManager } from './ResourceManager'\nimport { LWOLoader } from './LWOLoader'\nimport { LWSCLoader } from './LWSCLoader'\nimport { SceneManager } from '../scene/SceneManager'\nimport { AnimClip } from '../scene/model/anim/AnimClip'\n\nexport class AnimEntityLoader {\n\n    static loadModels(url, root): AnimationEntityType {\n        const path = getPath(url)\n\n        const entityType = new AnimationEntityType()\n\n        entityType.carryNullName = iGet(root, 'CarryNullName')\n        entityType.depositNullName = iGet(root, 'DepositNullName')\n        entityType.toolNullName = iGet(root, 'ToolNullName')\n\n        // TODO load other poly quality models (if available)\n        // let mediumPoly = iGet(root, 'MediumPoly');\n        // if (mediumPoly) {\n        //     Object.keys(mediumPoly).forEach((key) => {\n        //         const polyname = mediumPoly[key];\n        //         const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //         const polyfile = path + polyname + '.lwo';\n        //         console.log('polyfile');\n        //         console.log(polyfile);\n        //         // new LWOLoader().load(polyfile, (model) => {\n        //         //     mediumPoly[polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //         // }, undefined, () => {\n        //         //     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //         // });\n        //     });\n        //     Object.keys(mediumPoly).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete mediumPoly[polykey]);\n        // }\n\n        const highPoly = iGet(root, 'highpoly')\n        if (highPoly) {\n            entityType.highPoly = {}\n            Object.keys(highPoly).forEach((key) => {\n                const polyname = highPoly[key] + '.lwo'\n                const polykey = key.startsWith('!') ? key.slice(1) : key\n                const lwoBuffer = ResourceManager.getResource(path + polyname)\n                entityType.highPoly[polykey] = SceneManager.registerMesh(new LWOLoader(path).parse(lwoBuffer))\n            })\n        }\n\n        // let fPoly = (root)['fppoly'];\n        // if (fPoly) {\n        //     Object.keys(fPoly).forEach((camera) => {\n        //         Object.keys(fPoly[camera]).forEach((key) => {\n        //             const polyname = fPoly[camera][key];\n        //             const polykey = key.startsWith('!') ? key.slice(1) : key;\n        //             if (polyname !== 'null') {\n        //                 const polyfile = path + polyname + '.lwo';\n        //                 new LWOLoader().load(polyfile, (model) => {\n        //                     fPoly[camera][polykey] = {polyname: polyname, polyfile: polyfile, model: model};\n        //                 }, undefined, () => {\n        //                     console.error('Could not load poly ' + polyname + ' from ' + polyfile);\n        //                 });\n        //             } else {\n        //                 fPoly[camera][key] = {polyname: polyname, polyfile: null, model: new Group()};\n        //             }\n        //         });\n        //         Object.keys(fPoly[camera]).filter((polykey) => polykey.startsWith('!')).forEach((polykey) => delete fPoly[polykey][camera]);\n        //     });\n        // }\n\n        const activities = iGet(root, 'Activities')\n        if (activities) {\n            Object.keys(activities).forEach((activity) => {\n                try {\n                    let keyname = iGet(activities, activity)\n                    const act: { file: string, transcoef: number, lwsfile: boolean, animation: AnimClip } = iGet(root, keyname)\n                    const file = iGet(act, 'FILE')\n                    const isLws = iGet(act, 'LWSFILE') === true\n                    const transcoef = iGet(act, 'TRANSCOEF')\n                    const looping = iGet(act, 'LOOPING') === true\n                    if (isLws) {\n                        const content = ResourceManager.getResource(path + file + '.lws')\n                        act.animation = new LWSCLoader(path).parse(content)\n                        act.animation.looping = looping\n                        act.animation.transcoef = transcoef ? Number(transcoef) : 1\n                        entityType.activities.set(activity.toLowerCase(), act)\n                    } else {\n                        console.error('Found activity which is not an LWS file')\n                    }\n                } catch (e) {\n                    console.error(e)\n                    console.log(root)\n                    console.log(activities)\n                    console.log(activity)\n                }\n            })\n        }\n\n        return entityType\n    }\n\n}\n","import { createContext, createDummyImgData, getPixel, setPixel } from './ImageHelper'\n\nexport class BitmapFont {\n\n    charHeight: number\n    letters: ImageData[] = []\n\n    constructor(fontImageData: ImageData, cols = 10, rows = 19) { // font images always consist of 10 columns and 19 rows with last row empty\n        // actually chars are font dependent and have to be externalized in future\n        // maybe CP850 was used... not sure, doesn't fit...\n        const chars = [' ', '!', '\"', '#', '$', '%', '⌵', '`', '(', ')',\n            '*', '+', ',', '-', '.', '/', '0', '1', '2', '3',\n            '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',\n            '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n            'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n            'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[',\n            '\\\\', ']', '^', '_', '\\'', 'a', 'b', 'c', 'd', 'e',\n            'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\n            'z', 'Ä', 'Å', 'Á', 'À', 'Â', 'Ã', 'Ą', 'ä', 'å',\n            'á', 'à', 'â', 'ã', 'ą', 'Ë', 'E̊', 'É', 'È', 'É',\n            'Ę', 'ë', 'e̊', 'é', 'è', 'e̊', 'ę̊', '', '', '',\n            '', '', '', '', '', 'Ö', '', '', '', '',\n            'ö', '', '', '', '', 'Ü', '', '', '', 'ü',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', 'ß', '', '', '', 'Ñ', '', 'ñ',\n            '',\n        ] // XXX complete this character list\n\n        const maxCharWidth = fontImageData.width / cols\n        this.charHeight = fontImageData.height / rows\n\n        function getActualCharacterWidth(imgData) {\n            for (let y = 0; y < imgData.height / rows; y++) { // find non-empty row first\n                let rowPixelIndex = y * 4 * imgData.width\n                if (imgData.data[rowPixelIndex] !== 255 && imgData.data[rowPixelIndex + 2] !== 255) { // red/blue pixels indicate end of character\n                    for (let x = 0; x < maxCharWidth; x++) {\n                        let colPixelIndex = x * 4\n                        if (imgData.data[colPixelIndex] === 255 || imgData.data[colPixelIndex + 2] === 255) { // red/blue pixels indicate end of character\n                            return x\n                        }\n                    }\n                    return maxCharWidth\n                }\n            }\n            return 0\n        }\n\n        for (let i = 0; i < chars.length; i++) {\n            let imgData = this.extractData(fontImageData, (i % 10) * maxCharWidth, Math.floor(i / 10) * this.charHeight, maxCharWidth, this.charHeight)\n            let actualWidth = getActualCharacterWidth(imgData)\n            if (actualWidth > 0) {\n                imgData = this.extractData(imgData, 0, 0, actualWidth, this.charHeight)\n            } else {\n                imgData = createDummyImgData(maxCharWidth, this.charHeight)\n            }\n            this.letters[chars[i]] = imgData\n        }\n    }\n\n    extractData(imgData, startX, startY, width, height): ImageData {\n        const alpha = getPixel(imgData, startX + width - 1, startY + height - 1)\n        const result = new ImageData(width, height)\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const p = getPixel(imgData, startX + x, startY + y)\n                if (p.r === alpha.r && p.g === alpha.g && p.b === alpha.b) p.a = 0 // apply alpha channel\n                setPixel(result, x, y, p.r, p.g, p.b, p.a)\n            }\n        }\n        return result\n    }\n\n    createTextImage(text: string, maxWidth?: number, autoCenter: boolean = true): HTMLCanvasElement {\n        if (text === undefined || text === null || text.length < 1) {\n            // empty text requested, context with width 0 is not allowed, but 1 with alpha is close enough\n            return createContext(1, 1).canvas\n        }\n        text = text.replace(/_/g, ' ')\n        const rows = this.determineRows(text, maxWidth)\n        const width = Math.max(...(rows.map(r => r.width)))\n        const result = new ImageData(width, this.charHeight * rows.length)\n        rows.forEach((row, index) => {\n            const rowX = autoCenter ? Math.round((width - row.width) / 2) : 0\n            const rowY = index * this.charHeight\n            let letterX = 0\n            for (let c = 0; c < row.text.length; c++) {\n                const letterImgData = this.letters[row.text.charAt(c)]\n                if (letterImgData) {\n                    for (let x = letterX; x < letterX + letterImgData.width; x++) {\n                        for (let y = 0; y < letterImgData.height; y++) {\n                            const p = getPixel(letterImgData, x - letterX, y)\n                            setPixel(result, rowX + x, rowY + y, p.r, p.g, p.b, p.a)\n                        }\n                    }\n                    letterX += letterImgData.width\n                } // missing letter issue already reported above\n            }\n        })\n        const img: CanvasRenderingContext2D = createContext(result.width, result.height)\n        img.putImageData(result, 0, 0)\n        return img.canvas\n    }\n\n    private determineRows(text: string, maxWidth?: number): { text: string, width: number }[] {\n        const spaceWidth = this.letters[' '].width\n        const rows: { text: string, width: number }[] = []\n        let rowText = ''\n        let rowWidth = 0\n        text.split(' ').map(word => {\n            let wordWidth = 0\n            for (let c = 0; c < word.length; c++) {\n                const letter = word.charAt(c)\n                const letterImg = this.letters[letter]\n                if (letterImg) {\n                    wordWidth += letterImg.width\n                } else {\n                    console.error('Letter \\'' + letter + '\\' not found in charset! Ignoring it')\n                }\n            }\n            if (rowWidth > 0) {\n                if (!maxWidth || rowWidth + spaceWidth + wordWidth < maxWidth) {\n                    rowText += ' ' + word\n                    rowWidth += spaceWidth + wordWidth\n                } else {\n                    rows.push({text: rowText, width: rowWidth})\n                    rowText = word\n                    rowWidth = wordWidth\n                }\n            } else {\n                rowText += word\n                rowWidth += wordWidth\n            }\n            return wordWidth\n        })\n        if (rowWidth > 0) rows.push({text: rowText, width: rowWidth})\n        return rows\n    }\n}\n","export class BaseConfig {\n\n    static setFromCfg(config: BaseConfig, cfgObj: any) {\n        Object.keys(cfgObj).forEach((cfgKey) => {\n            const lCfgKeyName = (cfgKey.startsWith('!') ? cfgKey.substring(1) : cfgKey)\n                .toLowerCase()\n                .replace(/_/g, '') // Activity_Stand\n                .replace(/-/g, '') // Geo-dome\n            const found = Object.keys(config).some((objKey) => {\n                return config.assignValue(objKey, lCfgKeyName, cfgObj[cfgKey])\n            })\n            if (!found) {\n                console.warn('cfg key does not exist: ' + cfgKey)\n            }\n        })\n        return config\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            const currentValue = this[objKey]\n            const currentIsArray = Array.isArray(currentValue)\n            let parsedValue = this.parseValue(lCfgKeyName, cfgValue)\n            const parsedIsArray = Array.isArray(parsedValue)\n            if (currentValue && currentIsArray !== parsedIsArray) {\n                if (currentIsArray) {\n                    parsedValue = [parsedValue]\n                    // } else {\n                    //     console.warn('Array overwrite conflict for key ' + objKey + ' with existing value (' + currentValue + ') and new value (' + parsedValue + ')')\n                }\n            }\n            this[objKey] = parsedValue\n            return true\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return cfgValue\n    }\n\n}\n","// noinspection JSUnusedGlobalSymbols\nexport enum MOUSE_BUTTON {\n    MAIN = 0,\n    MIDDLE = 1,\n    SECONDARY = 2\n}\n\nexport enum POINTER_EVENT {\n    MOVE,\n    DOWN,\n    UP,\n}\n\nexport enum KEY_EVENT {\n    DOWN,\n    UP,\n}\n","import { BaseConfig } from './BaseConfig'\nimport { Building } from '../game/model/entity/building/Building'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class BuildingEntityStats extends BaseConfig {\n\n    Levels: number = 0\n    SelfPowered: boolean = false\n    PowerBuilding: boolean = false\n    PickSphere: number = 0\n    TrainDynamite: boolean[] = null\n    CostOre: number = 0\n    CostCrystal: number = 0\n\n    static getByType(type: Building): BuildingEntityStats {\n        switch (type) {\n            case Building.TOOLSTATION:\n                return ResourceManager.stats.Toolstation\n            case Building.TELEPORT_PAD:\n                return ResourceManager.stats.TeleportPad\n            case Building.DOCKS:\n                return ResourceManager.stats.Docks\n            case Building.POWER_STATION:\n                return ResourceManager.stats.Powerstation\n            case Building.BARRACKS:\n                return ResourceManager.stats.Barracks\n            case Building.UPGRADE:\n                return ResourceManager.stats.Upgrade\n            case Building.GEODOME:\n                return ResourceManager.stats.Geodome\n            case Building.ORE_REFINERY:\n                return ResourceManager.stats.OreRefinery\n            case Building.GUNSTATION:\n                return ResourceManager.stats.GunStation\n            case Building.TELEPORT_BIG:\n                return ResourceManager.stats.TeleportBIG\n        }\n        throw 'Unexpected building type: '+type\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\n\nexport class MovableEntityStats extends BaseConfig {\n\n    RouteSpeed: number[] = []\n    RubbleCoef: number = 1\n    PathCoef: number = 1\n\n}\n","// noinspection JSUnusedGlobalSymbols\n\nimport { BaseConfig } from './BaseConfig'\nimport { BuildingEntityStats } from './BuildingEntityStats'\nimport { MovableEntityStats } from './MovableEntityStats'\n\nexport class GameStatsCfg extends BaseConfig {\n\n    Pilot = new class PilotStats extends BaseConfig {\n        Levels: number = 4\n        RouteSpeed: number[] = [1.10, 1.10, 1.10, 1.10]\n        SoilDrillTime: number[] = [4.0, 4.0, 4.0, 4.0] // Time in seconds to drill through the rock.\n        LooseDrillTime: number[] = [4.0, 4.0, 4.0, 4.0]\n        MedDrillTime: number[] = [8.0, 8.0, 8.0, 8.0]\n        HardDrillTime: number[] = [0.0, 0.0, 0.0, 0.0] // Zero means the object cannot drill the rock type\n        SeamDrillTime: number[] = [10.0, 10.0, 10.0, 10.0] // Either or both ore or crystal.\n        UpgradeTime: number[] = [30.0, 45.0, 60.0, 60.0] // Last entry is ignored as it can never upgrade from that.\n        CollRadius: number = 5.0\n        CollHeight: number = 12.0\n        TrackDist: number = 40.0\n        SingleWidthDig: boolean[] = [true, true, true, true]\n        PickSphere: number = 10.0\n        RepairValue: number[] = [10.0, 15.0, 20.0, 25.0]\n        SurveyRadius: number[] = [3, 3, 3, 3]\n        Drillsound: string = 'SND_pilotdrill'\n        Drillfadesound: string = 'SND_pilotdrillfade'\n        RestPercent: number = 60.0\n        EnergyDecayRate: number = 0.25\n        CanClearRubble: boolean = true\n        NumOfToolsCanCarry: number[] = [2, 3, 4, 5]\n        CrossLand: boolean = true\n        RubbleCoef: number = 0.5\n        PathCoef: number = 2.0\n        RouteAvoidance: boolean = true\n        UseLegoManTeleporter: boolean = true\n        AwarenessRange: number = 10.0\n        OxygenCoef: number = -1.0\n        CanStrafe: boolean = true\n        EnterToolStore: boolean = true\n        ShowHealthBar: boolean = true\n    }\n\n    RockMonster = new class RockMonsterStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 0.8\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 22.0\n        AlertRadius: number = 60.0\n        HealthDecayRate: number = 0.6 // Reduce health by 'n' every second.\n        PickSphere: number = 22.0\n        RepairValue: number = -10.0\n        CanScare: boolean = true\n        RestPercent: number = 20.0\n        CarryMinHealth: number = 15.0\n        PainThreshold: number = 20.0\n        StampRadius: number = 80.0\n        AttackRadius: number = 160.0\n        CanSteal: boolean = true\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        GrabMinifigure: boolean = true\n        RouteAvoidance: boolean = true\n        BumpDamage: boolean = true\n        AttackPaths: boolean = true\n        SplitOnZeroHealth: boolean = true\n        CanBeHitByFence: boolean = true\n        Capacity: number = 6 // How many crystals it can eat\n        PathCoef: number = 0.5\n        // Statistics about the weapons\n        CanBeShotAt: boolean = true // Can this monster be shot at by lego men\n        CanFreeze: boolean = true // Can this object be frozen\n        FreezerTime: number = 25.0 // Time this object is frozen for\n        FreezerDamage: number = 5.0 // Damage that freezing causes\n        CanLaser: boolean = true // Can this object be lasered\n        LaserDamage: number = 110.0 // Damage sustained by a laser\n        CanPush: boolean = true // Can this object be pusher'ed\n        PusherDist: number = 20.0 // Distance the object is pushed 40=1 block\n        PusherDamage: number = 2.0 // Damage that the pusher gun causes\n        WakeRadius: number = 25.0\n        ScaredByBigBangs: boolean = true\n        RemoveReinforcement: boolean = true\n        ShowHealthBar: boolean = true\n    }\n\n    SmallSpider = new class SmallSpiderStats extends MovableEntityStats {\n        Levels: number = 1\n        RouteSpeed: number[] = [2.0]\n        TrackDist: number = 10.0\n        CollRadius: number = 0.0\n        CollHeight: number = 0.0\n        PickSphere: number = 6.0\n        AlertRadius: number = 40.0\n        RandomMove: boolean = true\n        RandomEnterWall: boolean = true\n        CauseSlip: boolean = true\n        CrossLand: boolean = true\n        RubbleCoef: number = 0.2\n        DontShowDamage: boolean = true\n        DontShowOnRadar: boolean = true\n        ScaredByBigBangs: boolean = true\n    }\n\n    Bat = new class BatStats extends MovableEntityStats {\n        Levels: number = 1\n        RouteSpeed: number[] = [1.0]\n        TrackDist: number = 10.0\n        CollRadius: number = 10.0\n        AlertRadius: number = 10.0 // Alert radius (causes attack mode)\n        RandomMove: boolean = true // Random movement\n        randomMoveTime: number = 10\n        CanScare: boolean = true // Scare away the player\n        ScaredByBigBangs: boolean = true\n        // Flock parameters.\n        Flocks: boolean = true // Set this to create a flock for this object.\n        FlocksDebug: boolean = false // If this is set the actual lego objects animation is displayed at the \"lego\" position.\n        FlocksSmooth: boolean = true // Smooths out the orientation of the flocks elements.\n        FlocksSize: number = 8 // Number of the given item in the flock.  (Default 5)\n        FlocksTurn: number = 0.6 // Turning speed of the bat. (0.6 default)\n        FlocksSpeed: number = 1.5 // Velocity of the flock. (2.0 default)\n        FlocksTightness: number = 0.8 // Tightness of the flock. (2.0 default)\n        FlocksGoalUpdate: number = 2.0 // How often the flocks goal is updated (25 per second).  (2.0 default)\n        FlocksRandomness: number = 6.0 // Randomness of goals. (2.0 default)\n        FlocksHeight: number = 22.0 // Height above the ground of the flock elements.  (30.0 default)\n        CrossLand: boolean = true\n        CrossWater: boolean = true\n        CrossLava: boolean = true\n        DontShowDamage: boolean = true\n    }\n\n    TinyRM = new class TinyRMStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 1.2\n        TrackDist: number = 10.0\n        CollRadius: number = 0.0\n        CollHeight: number = 5.0\n        PickSphere: number = 6.0\n        AlertRadius: number = 40.0\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        DontShowDamage: boolean = true\n        DontShowOnRadar: boolean = true\n        ScaredByPlayer: boolean = true\n        ScaredByBigBangs: boolean = true\n    }\n\n    TinyIM = new class TinyIMStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 1.2\n        TrackDist: number = 10.0\n        CollRadius: number = 0.0\n        CollHeight: number = 5.0\n        PickSphere: number = 6.0\n        AlertRadius: number = 40.0\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        DontShowDamage: boolean = true\n        DontShowOnRadar: boolean = true\n        ScaredByPlayer: boolean = true\n        ScaredByBigBangs: boolean = true\n    }\n\n    Slug = new class SlugStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 0.3\n        TrackDist: number = 10.0\n        CollRadius: number = 3.0\n        CollHeight: number = 7.0\n        PickSphere: number = 12.0\n        AlertRadius: number = 40.0\n        CrossLand: boolean = true\n        RubbleCoef: number = 0.3\n        UseHoles: boolean = true\n        DrainPower: boolean = true\n        AttackRadius: number = 280.0\n        PainThreshold: number = 50.0\n        CanBeShotAt: boolean = true\n        CanLaser: boolean = true\n        LaserDamage: number = 5.0\n        CanPush: boolean = true // Can this object be pusher'ed\n        PusherDist: number = 60.0 // Distance the object is pushed\n        PusherDamage: number = 5.0 // Damage that the pusher gun causes\n        ShowHealthBar: boolean = true\n        ScaredByBigBangs: boolean = true\n    }\n\n    LavaMonster = new class LavaMonsterStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 0.8\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 22.0\n        AlertRadius: number = 60.0\n        HealthDecayRate: number = 0.6 // Reduce health by 'n' every second.\n        PickSphere: number = 22.0\n        RepairValue: number = -10.0\n        CanScare: boolean = true\n        RestPercent: number = 20.0\n        CarryMinHealth: number = 15.0\n        PainThreshold: number = 20.0\n        StampRadius: number = 80.0\n        AttackRadius: number = 160.0\n        CanSteal: boolean = true\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        GrabMinifigure: boolean = true\n        Capacity: number = 7 // How many crystals it can eat\n        RouteAvoidance: boolean = true\n        BumpDamage: boolean = true\n        AttackPaths: boolean = true\n        SplitOnZeroHealth: boolean = true\n        CanBeHitByFence: boolean = true\n        PathCoef: number = 0.5\n        CrossLava: boolean = true\n        // Statistics about the weapons\n        CanBeShotAt: boolean = true // Can this monster be shot at by lego men\n        CanFreeze: boolean = true // Can this object be frozen\n        FreezerTime: number = 75.0 // Time this object is frozen for\n        FreezerDamage: number = 40.0 // Damage that freezing causes\n        CanLaser: boolean = true // Can this object be lasered\n        LaserDamage: number = 1.0 // Damage sustained by a laser\n        CanPush: boolean = true // Can this object be pusher'ed\n        PusherDist: number = 60.0 // Distance the object is pushed\n        PusherDamage: number = 5.0 // Damage that the pusher gun causes\n        WakeRadius: number = 25.0\n        ScaredByBigBangs: boolean = true\n        RemoveReinforcement: boolean = true\n        ShowHealthBar: boolean = true\n    }\n\n    IceMonster = new class IceMonsterStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 0.8\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 22.0\n        AlertRadius: number = 60.0\n        HealthDecayRate: number = 0.6 // Reduce health by 'n' every second.\n        PickSphere: number = 22.0\n        RepairValue: number = -10.0\n        CanScare: boolean = true\n        RestPercent: number = 20.0\n        CarryMinHealth: number = 15.0\n        PainThreshold: number = 20.0\n        StampRadius: number = 80.0\n        AttackRadius: number = 120.0\n        CanSteal: boolean = true\n        CrossLand: boolean = true\n        RubbleCoef: number = 1.5\n        GrabMinifigure: boolean = true\n        Capacity: number = 5 // How many crystals it can eat\n        RouteAvoidance: boolean = true\n        BumpDamage: boolean = true\n        AttackPaths: boolean = true\n        SplitOnZeroHealth: boolean = true\n        CanBeHitByFence: boolean = true\n        PathCoef: number = 0.5\n        // Statistics about the weapons\n        CanBeShotAt: boolean = true // Can this monster be shot at by lego men\n        CanFreeze: boolean = false // Can this object be frozen\n        FreezerTime: number = 0.0 // Time this object is frozen for\n        FreezerDamage: number = 0.0 // Damage that freezing causes\n        CanLaser: boolean = true // Can this object be lasered\n        LaserDamage: number = 110.0 // Damage sustained by a laser\n        CanPush: boolean = true // Can this object be pusher'ed\n        PusherDist: number = 60.0 // Distance the object is pushed\n        PusherDamage: number = 2.0 // Damage that the pusher gun causes\n        WakeRadius: number = 25.0\n        ScaredByBigBangs: boolean = true\n        RemoveReinforcement: boolean = true\n        ShowHealthBar: boolean = true\n    }\n\n    Hoverboard = new class HoverboardStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No drill or carry)\n        Levels: number = 8\n        RouteSpeed: number[] = [3.0, 3.0, 5.0, 5.0, 3.0, 3.0, 5.0, 5.0]\n        SurveyRadius: number[] = [0, 0, 0, 0, 4, 4, 4, 4]\n        TrackDist: number = 50.0\n        CollRadius: number = 8.0\n        CollHeight: number = 12.0\n        PickSphere: number = 16.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        UseSmallTeleporter: boolean = true\n        CanStrafe: boolean = true\n        CostCrystal: number = 1\n        UpgradeCostOre: number[] = [0, 5, 10, 0]\n        UpgradeCostStuds: number[] = [0, 1, 2, 0]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_SmallEngine'\n    }\n\n    SmallHeli = new class SmallHeliStats extends BaseConfig {\n        Levels: number = 1\n        RouteSpeed: number = 2.50\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 12.0\n        PickSphere: number = 20.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        CrossWater: boolean = true\n        CrossLava: boolean = true\n        UseSmallTeleporter: boolean = true\n        CanStrafe: boolean = true\n        CostCrystal: number = 3\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_HeliEngine'\n    }\n\n    Smallmlp = new class SmallmlpStats extends BaseConfig {\n        Levels: number = 4\n        RouteSpeed: number[] = [0.50, 0.50, 0.50, 0.50]\n        TrackDist: number = 50.0\n        CollRadius: number = 12.0\n        CollHeight: number = 22.0\n        PickSphere: number = 26.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        UseSmallTeleporter: boolean = true\n        Tracker: boolean = true\n        CanDoubleSelect: boolean = true\n        CostCrystal: number = 3\n        UpgradeCostOre: number[] = [0, 0, 0, 10]\n        UpgradeCostStuds: number[] = [0, 0, 0, 2]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_MediumEngine'\n    }\n\n    SmallCat = new class SmallCatStats extends BaseConfig {\n        Levels: number = 3\n        RouteSpeed: number[] = [2.0, 3.0, 4.0]\n        TrackDist: number = 50.0\n        CollRadius: number = 12.0\n        CollHeight: number = 12.0\n        PickSphere: number = 26.0\n        CrossWater: boolean = true\n        CanBeDriven: boolean = true\n        UseWaterTeleporter: boolean = true\n        CostCrystal: number = 2\n        MaxCarry: number[] = [1, 1, 1]\n        GetInAtLand: boolean = true\n        GetOutAtLand: boolean = true\n        TakeCarryingDrivers: boolean = true\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_Catamaran'\n    }\n\n    SmallDigger = new class SmallDiggerStats extends BaseConfig {\n        Levels: number = 8\n        RouteSpeed: number[] = [2.0, 2.0, 4.0, 4.0, 2.0, 2.0, 4.0, 4.0]\n        SoilDrillTime: number[] = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n        LooseDrillTime: number[] = [2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0]\n        MedDrillTime: number[] = [4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0]\n        HardDrillTime: number[] = [180.0, 150.0, 180.0, 150.0, 180.0, 150.0, 180.0, 150.0]\n        SeamDrillTime: number[] = [8.0, 4.0, 8.0, 4.0, 8.0, 4.0, 8.0, 4.0]\n        MaxCarry: number[] = [0, 0, 0, 0, 0, 0, 0, 0]\n        SurveyRadius: number[] = [0, 0, 0, 0, 4, 4, 4, 4]\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 12.0\n        PickSphere: number = 20.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        RouteAvoidance: boolean = true\n        UseSmallTeleporter: boolean = true\n        VehicleCanBeCarried: boolean = true\n        CostCrystal: number = 1\n        UpgradeCostOre: number[] = [0, 5, 10, 10]\n        UpgradeCostStuds: number[] = [0, 1, 2, 2]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_SmallEngine'\n    }\n\n    SmallTruck = new class SmallTruckStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No drill)\n        Levels: number = 16\n        RouteSpeed: number[] = [2.0, 2.0, 3.0, 3.0, 2.0, 2.0, 3.0, 3.0, 2.0, 2.0, 3.0, 3.0, 2.0, 2.0, 3.0, 3.0]\n        MaxCarry: number[] = [3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6]\n        CarryStart: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3]\n        SurveyRadius: number[] = [0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4]\n        TrackDist: number = 50.0\n        CollRadius: number = 10.0\n        CollHeight: number = 12.0\n        PickSphere: number = 20.0\n        CanBeDriven: boolean = true\n        CrossLand: boolean = true\n        UseSmallTeleporter: boolean = true\n        VehicleCanBeCarried: boolean = true\n        CostCrystal: number = 2\n        EnterToolStore: boolean = true\n        UpgradeCostOre: number[] = [5, 5, 10, 0]\n        UpgradeCostStuds: number[] = [1, 1, 2, 0]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_SmallEngine'\n    }\n\n    Bulldozer = new class BulldozerStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No drill)\n        Levels: number = 16\n        RouteSpeed: number[] = [0.5, 0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8]\n        MaxCarry: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2]\n        SurveyRadius: number[] = [0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5, 5, 5]\n        TrackDist: number = 80.0\n        CollRadius: number = 18.0\n        CollHeight: number = 26.0\n        PickSphere: number = 40.0\n        CrossLand: boolean = true\n        CanClearRubble: boolean = true\n        UseBigTeleporter: boolean = true\n        CanBeDriven: boolean = true\n        CostCrystal: number = 4\n        InvisibleDriver: boolean = true\n        UpgradeCostOre: number[] = [5, 5, 20, 0]\n        UpgradeCostStuds: number[] = [1, 1, 4, 0]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_MediumEngine'\n    }\n\n    WalkerDigger = new class WalkerDiggerStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No carry)\n        Levels: number = 8\n        RouteSpeed: number[] = [0.50, 0.50, 0.80, 0.80, 0.50, 0.50, 0.80, 0.80]\n        SoilDrillTime: number[] = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n        LooseDrillTime: number[] = [0.80, 0.40, 0.80, 0.40, 0.80, 0.40, 0.80, 0.40]\n        MedDrillTime: number[] = [2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0]\n        HardDrillTime: number[] = [180.0, 150.0, 180.0, 150.0, 180.0, 150.0, 180.0, 150.0]\n        SeamDrillTime: number[] = [4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0]\n        SurveyRadius: number[] = [0, 0, 0, 0, 5, 5, 5, 5]\n        TrackDist: number = 80.0\n        CollRadius: number = 15.0\n        CollHeight: number = 33.0\n        PickSphere: number = 35.0\n        CrossLand: boolean = true\n        UseBigTeleporter: boolean = true\n        CostCrystal: number = 3\n        CanBeDriven: boolean = true\n        InvisibleDriver: boolean = true\n        CanStrafe: boolean = true\n        DrillSound: string = 'DrillSFX_Grinder'\n        DrillFadeSound: string = 'DrillSFX_GrinderFade'\n        UpgradeCostOre: number[] = [0, 5, 20, 20]\n        UpgradeCostStuds: number[] = [0, 1, 4, 4]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_MediumEngine'\n    }\n\n    LargeDigger = new class LargeDiggerStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No carry or scan)\n        Levels: number = 4\n        RouteSpeed: number[] = [0.30, 0.30, 0.60, 0.60]\n        SoilDrillTime: number[] = [1.0, 1.0, 1.0, 1.0]\n        LooseDrillTime: number[] = [0.40, 0.20, 0.40, 0.20]\n        MedDrillTime: number[] = [0.80, 0.40, 0.80, 0.40]\n        HardDrillTime: number[] = [1.0, 0.50, 1.0, 0.50]\n        SeamDrillTime: number[] = [1.0, 0.50, 1.0, 0.50]\n        TrackDist: number = 80.0\n        CollRadius: number = 22.0\n        CollHeight: number = 30.0\n        PickSphere: number = 50.0\n        CrossLand: boolean = true\n        UseBigTeleporter: boolean = true\n        Tracker: boolean = true\n        CanDoubleSelect: boolean = true\n        CanBeDriven: boolean = true\n        CostCrystal: number = 5\n        InvisibleDriver: boolean = true\n        DrillSound: string = 'DrillSFX_Grinder'\n        DrillFadeSound: string = 'DrillSFX_GrinderFade'\n        UpgradeCostOre: number[] = [0, 0, 15, 20]\n        UpgradeCostStuds: number[] = [0, 0, 3, 4]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_LargeEngine'\n    }\n\n    LargeCat = new class LargeCatStats extends BaseConfig { // [Carry][Scan][Speed][Drill] (No carry) (Drill???)\n        Levels: number = 1\n        RouteSpeed: number = 1.50\n        SurveyRadius: number = 0\n        TrackDist: number = 80.0\n        CollRadius: number = 22.0\n        CollHeight: number = 25.0\n        PickSphere: number = 50.0\n        CanBeDriven: boolean = true\n        CrossWater: boolean = true\n        UseWaterTeleporter: boolean = true\n        ClassAsLarge: boolean = true\n        CarryVehicles: boolean = true\n        CostCrystal: number = 4\n        EngineSound: string = 'SND_Catamaran'\n        ShowHealthBar: boolean = true\n    }\n\n    LargeHeli = new class LargeHeliStats extends BaseConfig {\n        Levels: number = 3\n        RouteSpeed: number[] = [0.30, 0.40, 0.50]\n        TrackDist: number = 80.0\n        CollRadius: number = 0.0\n        CollHeight: number = 0.0\n        PickSphere: number = 20.0\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_HeliEngine'\n    }\n\n    LargeMLP = new class LargeMLPStats extends BaseConfig { // [Carry][Scan][Speed][Drill]    (No carry or speed) (Doesn't have drills, just lasers)\n        Levels: number = 8\n        RouteSpeed: number[] = [0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40]\n        SurveyRadius: number[] = [0, 0, 0, 0, 5, 5, 5, 5]\n        TrackDist: number = 80.0\n        CollRadius: number = 20.0\n        CollHeight: number = 24.0\n        PickSphere: number = 47.0\n        CrossLand: boolean = true\n        UseBigTeleporter: boolean = true\n        Tracker: boolean = true\n        CanDoubleSelect: boolean = true\n        CostCrystal: number = 4\n        CanBeDriven: boolean = true\n        InvisibleDriver: boolean = true\n        UpgradeCostOre: number[] = [0, 5, 0, 25]\n        UpgradeCostStuds: number[] = [0, 1, 0, 5]\n        ShowHealthBar: boolean = true\n        EngineSound: string = 'SND_LargeEngine'\n    }\n\n    Barracks = new class BarracksStats extends BuildingEntityStats {\n        Levels: number = 3\n        TrackDist: number = 50.0\n        CollHeight: number = 23.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 15\n        CostRefinedOre: number = 3\n        CostCrystal: number = 3\n        SnaxULike: boolean = true\n        TrainDriver: boolean[] = [true, true, true]\n        CrystalDrain: number[] = [1, 1, 1]\n        DamageCausesCallToArms: boolean = true\n        OxygenCoef: number = 10.0\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Powerstation = new class PowerstationStats extends BuildingEntityStats {\n        Levels: number = 2\n        TrackDist: number = 80.0\n        ProcessCrystal: boolean = true\n        CollHeight: number = 31.0\n        CollRadius: number = 15.0\n        PickSphere: number = 32.0\n        CostOre: number = 12\n        CostRefinedOre: number = 3\n        CostCrystal: number = 2\n        PowerBuilding: boolean = true\n        DamageCausesCallToArms: boolean = true\n        EngineSound: string = 'SND_PowerBuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    OreRefinery = new class OreRefineryStats extends BuildingEntityStats {\n        Levels: number = 4\n        TrackDist: number = 60.0\n        ProcessOre: boolean = true\n        CollHeight: number = 16.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 20\n        CostRefinedOre: number = 4\n        CostCrystal: number = 3\n        CrystalDrain: number[] = [1, 1, 1, 1]\n        DamageCausesCallToArms: boolean = true\n        MaxCarry: number[] = [5, 4, 3, 2]\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    TeleportPad = new class TeleportPadStats extends BuildingEntityStats {\n        Levels: number = 3\n        TrackDist: number = 60.0\n        SmallTeleporter: boolean = true\n        ManTeleporter: boolean = true\n        CollHeight: number = 20.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 8\n        CostRefinedOre: number = 2\n        CrystalDrain: number[] = [1, 1, 1]\n        DamageCausesCallToArms: boolean = true\n        TrainPilot: boolean[] = [true, true, true]\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    TeleportBIG = new class TeleportBIGStats extends BuildingEntityStats {\n        Levels: number = 2\n        TrackDist: number = 50.0\n        BigTeleporter: boolean = true\n        CollHeight: number = 17.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 20\n        CostRefinedOre: number = 4\n        CostCrystal: number = 2\n        CrystalDrain: number[] = [1, 1]\n        DamageCausesCallToArms: boolean = true\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Docks = new class DocksStats extends BuildingEntityStats {\n        Levels: number = 1\n        TrackDist: number = 60.0\n        CollHeight: number = 20.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 8\n        CostRefinedOre: number = 2\n        CostCrystal: number = 1\n        WaterEntrances: number = 1\n        WaterTeleporter: boolean = true\n        CrystalDrain: number = 1\n        DamageCausesCallToArms: boolean = true\n        TrainSailor: boolean = true\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Toolstation = new class ToolstationStats extends BuildingEntityStats {\n        Levels: number = 3\n        TrackDist: number = 50.0\n        ManTeleporter: boolean = true\n        CollHeight: number = 16.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        ToolStore: boolean = true\n        StoreObjects: boolean = true\n        SelfPowered: boolean = true\n        DamageCausesCallToArms: boolean = true\n        TrainDynamite: boolean[] = [false, false, true]\n        FunctionCoef: number[] = [1.0, 1.0, 1.0] // Function here is how long it takes to upgrade a minfigure\n        ShowHealthBar: boolean = true\n    }\n\n    GunStation = new class GunStationStats extends BuildingEntityStats {\n        Levels: number = 2\n        TrackDist: number = 60.0\n        CollHeight: number = 33.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 15\n        CostRefinedOre: number = 3\n        CostCrystal: number = 1\n        Tracker: boolean = true\n        CanDoubleSelect: boolean = true\n        CrystalDrain: number[] = [1, 1]\n        DamageCausesCallToArms: boolean = true\n        FunctionCoef: number[] = [1.0, 0.5] // How much of a crystal it drains every time it fires...\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Geodome = new class GeodomeStats extends BuildingEntityStats {\n        Levels: number = 3\n        TrackDist: number = 50.0\n        CollHeight: number = 20.0\n        CollRadius: number = 15.0\n        PickSphere: number = 30.0\n        CostOre: number = 15\n        CostRefinedOre: number = 3\n        CostCrystal: number = 3\n        SurveyRadius: number[] = [6, 8, 12]\n        CrystalDrain: number[] = [1, 1, 1]\n        DamageCausesCallToArms: boolean = true\n        TrainScanner: boolean[] = [true, true, true]\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    Upgrade = new class UpgradeStats extends BuildingEntityStats {\n        Levels: number = 2\n        TrackDist: number = 80.0\n        CollHeight: number = 40.0\n        CollRadius: number = 15.0\n        PickSphere: number = 32.0\n        CostOre: number = 20\n        CostRefinedOre: number = 4\n        CostCrystal: number = 3\n        UpgradeBuilding: boolean = true\n        CrystalDrain: number[] = [1, 1]\n        DamageCausesCallToArms: boolean = true\n        FunctionCoef: number[] = [0.8, 1.6] // Function is speed of upgrade animation.\n        TrainRepair: boolean[] = [true, true]\n        EngineSound: string = 'SND_BuildingHum'\n        ShowHealthBar: boolean = true\n    }\n\n    PowerCrystal = new class PowerCrystalStats extends BaseConfig {\n        Levels: number = 1\n        TrackDist: number = 20.0\n        CollHeight: number = 2.0\n        PickSphere: number = 6.0\n    }\n\n    ProcessedOre = new class ProcessedOreStats extends BaseConfig {\n        Levels: number = 1\n        TrackDist: number = 20.0\n        CollHeight: number = 2.0\n        PickSphere: number = 8.0\n    }\n\n    Ore = new class OreStats extends BaseConfig {\n        Levels: number = 1\n        TrackDist: number = 20.0\n        CollHeight: number = 2.0\n        PickSphere: number = 6.0\n    }\n\n    Boulder = new class BoulderStats extends BaseConfig {\n        Levels: number = 1\n        CollRadius: number = 2.0\n    }\n\n    Pusher = new class PusherStats extends BaseConfig {\n        Levels: number = 1\n        CollRadius: number = 1.0\n    }\n\n    Freezer = new class FreezerStats extends BaseConfig {\n        Levels: number = 1\n        CollRadius: number = 1.0\n    }\n\n    LaserShot = new class LaserShotStats extends BaseConfig {\n        Levels: number = 1\n        ColRadius: number = 1.0\n    }\n\n    ElectricFence = new class ElectricFenceStats extends BaseConfig {\n        Levels: number = 1\n        TrackDist: number = 50.0\n        CollRadius: number = 5.0\n        CollHeight: number = 18.0\n        PickSphere: number = 20.0\n        DamageCausesCallToArms: boolean = true\n    }\n\n    Path = new class PathStats extends BaseConfig {\n        Levels: number = 1\n        CostOre: number = 2\n        CostRefinedOre: number = 1\n    }\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (objKey.toLowerCase() === lCfgKeyName) {\n            BaseConfig.setFromCfg(this[objKey], cfgValue)\n            return true\n        }\n    }\n\n}\n\n","import ResourceWorker from 'worker-loader!./wadworker/Resources'\nimport { RepeatWrapping, Texture } from 'three'\nimport { AnimationEntityType } from '../scene/model/anim/AnimationEntityType'\nimport { InitLoadingMessage } from './wadworker/InitLoadingMessage'\nimport { createContext, createDummyImgData } from '../core/ImageHelper'\nimport { iGet } from './wadworker/WadUtil'\nimport { getFilename } from '../core/Util'\nimport { AnimEntityLoader } from './AnimEntityLoader'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { WorkerMessage, WorkerMessageType } from './wadworker/WorkerMessage'\nimport { GameStatsCfg } from '../cfg/GameStatsCfg'\n\nexport class ResourceManager {\n\n    static worker: ResourceWorker = new ResourceWorker()\n    static configuration: any = {}\n    static resourceByName: {} = {}\n    static fontCache = {}\n    static stats: GameStatsCfg\n\n    static startLoadingFromCache() {\n        return this.startLoading(null)\n    }\n\n    static startLoadingFromUrl(wad0Url: string, wad1Url: string) {\n        return this.startLoading(new InitLoadingMessage(wad0Url, wad1Url))\n    }\n\n    private static startLoading(msg: InitLoadingMessage) {\n        this.worker.onmessage = (event) => {\n            const msg: WorkerMessage = event.data\n            if (msg.type === WorkerMessageType.ASSET) {\n                this.resourceByName[msg.assetName.toLowerCase()] = msg.assetObj\n                this.onAssetLoaded()\n            } else if (msg.type === WorkerMessageType.MSG) {\n                this.onMessage(msg.text)\n            } else if (msg.type === WorkerMessageType.CFG) {\n                this.configuration = msg.cfg\n                this.stats = new GameStatsCfg(this.cfg('Stats'))\n                this.onInitialLoad(msg.totalResources)\n            } else if (msg.type === WorkerMessageType.CACHE_MISS) {\n                this.onCacheMissed()\n            } else if (msg.type === WorkerMessageType.DONE) {\n                console.log('Loading of about ' + msg.totalResources + ' assets complete! Total load time: ' + msg.loadingTimeSeconds + ' seconds.')\n                this.onLoadDone()\n            }\n        }\n        this.worker.postMessage(msg)\n    }\n\n    static onMessage: (msg: string) => any = (msg: string) => {\n        console.log(msg)\n    }\n\n    static onCacheMissed: () => any = () => {\n        console.log('Worker missed cache')\n    }\n\n    static onInitialLoad: (totalResources: number) => any = () => {\n        console.log('Initial loading done.')\n    }\n\n    static onAssetLoaded: () => any = () => {\n    }\n\n    static onLoadDone: () => any = () => {\n    }\n\n    static cfg(...keys: string[]): any {\n        return iGet(ResourceManager.configuration, ...keys)\n    }\n\n    static filterTextureSequenceNames(basename: string): string[] {\n        const lBasename = basename.toLowerCase()\n        const result = Object.keys(this.resourceByName).filter((name) => name.startsWith(lBasename))\n        if (result.length > 0) {\n            return result\n        } else if (!lBasename.startsWith('world/shared/')) {\n            return ResourceManager.filterTextureSequenceNames('world/shared/' + getFilename(basename))\n        } else {\n            console.warn('Texture sequence not found: ' + basename)\n            return null\n        }\n    }\n\n    static getResource(resourceName: string): any {\n        const lName = resourceName ? resourceName.toString().toLowerCase() : null\n        if (lName && this.resourceByName.hasOwnProperty(lName)) {\n            return this.resourceByName[lName]\n        }\n        return null\n    }\n\n    static getImageData(imageName): ImageData {\n        if (!imageName || imageName.length === 0) {\n            throw 'imageName must not be undefined, null or empty - was ' + imageName\n        }\n        const lImageName = imageName.toLowerCase()\n        let imgData = this.getResource(lImageName)\n        if (!imgData) {\n            console.error('Image \\'' + imageName + '\\' unknown! Using placeholder image instead')\n            ResourceManager.resourceByName[lImageName] = createDummyImgData(64, 64)\n        }\n        return ResourceManager.resourceByName[lImageName]\n    }\n\n    static getImage(imageName: string): HTMLCanvasElement {\n        const imgData = this.getImageData(imageName)\n        const context: CanvasRenderingContext2D = createContext(imgData.width, imgData.height)\n        context.putImageData(imgData, 0, 0)\n        return context.canvas\n    }\n\n    static getImageOrNull(imageName: string): HTMLCanvasElement | null {\n        if (!imageName) return null\n        return this.getImage(imageName)\n    }\n\n    static getTexture(textureName): Texture {\n        if (!textureName || textureName.length === 0) {\n            throw 'textureName must not be undefined, null or empty - was ' + textureName\n        }\n        const lTextureName = textureName.toLowerCase()\n        const lSharedTextureName = 'world/shared/' + getFilename(lTextureName)\n        let imgData = this.getResource(lTextureName) || this.getResource(lSharedTextureName)\n        if (!imgData) {\n            if (lTextureName !== 'buildings/geo-dome/a_walkie.bmp' && // ignore known issues\n                lTextureName !== 'world/shared/teofoilreflections.jpg' &&\n                lTextureName !== 'buildings/barracks/wingbase3.bmp') {\n                console.warn('Texture \\'' + textureName + '\\' (' + lTextureName + ', ' + lSharedTextureName + ') unknown! Using placeholder texture instead')\n            }\n            ResourceManager.resourceByName[lTextureName] = imgData = createDummyImgData(64, 64)\n        }\n        const texture = new Texture(imgData, Texture.DEFAULT_MAPPING, RepeatWrapping, RepeatWrapping)\n        texture.needsUpdate = true\n        return texture\n    }\n\n    static getMap(name: string) {\n        return name ? this.getResource(name) : null\n    }\n\n    static getAnimationEntityType(aeFilename: string): AnimationEntityType {\n        let cfgRoot = this.getResource(aeFilename)\n        if (!cfgRoot) throw 'Could not get animation entity type for: ' + aeFilename\n        return AnimEntityLoader.loadModels(aeFilename, cfgRoot)\n    }\n\n    static getBitmapFont(name: string): BitmapFont {\n        const fontImageData = this.getResource(name)\n        if (!fontImageData) throw 'Could not load font image data for: ' + name\n        ResourceManager.fontCache[name] = ResourceManager.fontCache[name] || new BitmapFont(fontImageData)\n        return ResourceManager.fontCache[name]\n    }\n\n    static getDefaultFont() {\n        return ResourceManager.getBitmapFont('Interface/Fonts/Font5_Hi.bmp')\n    }\n}\n","import { SPRITE_RESOLUTION_HEIGHT, SPRITE_RESOLUTION_WIDTH } from '../main'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { KEY_EVENT, POINTER_EVENT } from '../event/EventTypeEnum'\n\nexport class ScreenLayer {\n\n    canvas: HTMLCanvasElement\n    context: CanvasRenderingContext2D\n    onRedraw: (context: CanvasRenderingContext2D) => any\n    active: boolean = true\n\n    constructor(alpha: boolean = false, withContext: boolean = true) {\n        this.canvas = document.createElement('canvas')\n        if (!alpha) this.canvas.style.background = '#f0f'\n        if (withContext) this.context = this.canvas.getContext('2d', {alpha: alpha})\n        this.hide()\n    }\n\n    reset() {\n    }\n\n    setZIndex(zIndex: number) {\n        this.canvas.style.zIndex = String(zIndex)\n    }\n\n    static compareZ(layerA: ScreenLayer, layerB: ScreenLayer) {\n        let aIndex = layerA?.canvas?.style?.zIndex || 0\n        const bIndex = layerB?.canvas?.style?.zIndex || 0\n        return aIndex === bIndex ? 0 : aIndex > bIndex ? -1 : 1\n    }\n\n    resize(width, height) {\n        this.canvas.width = width\n        this.canvas.height = height\n    }\n\n    redraw() {\n        const callback = this.onRedraw\n        if (this.isActive() && callback) {\n            const context = this.context\n            requestAnimationFrame(() => callback(context))\n        }\n    }\n\n    show() {\n        this.active = true\n        this.canvas.style.visibility = 'visible'\n        this.redraw()\n    }\n\n    hide() {\n        this.active = false\n        this.canvas.style.visibility = 'hidden'\n    }\n\n    isActive() {\n        return this.active\n    }\n\n    toCanvasCoords(windowX: number, windowY: number) {\n        const clientRect = this.canvas.getBoundingClientRect()\n        return [windowX - clientRect.left, windowY - clientRect.top]\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        return false\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        return false\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        return false\n    }\n\n}\n\nexport class ScaledLayer extends ScreenLayer {\n\n    fixedWidth: number\n    fixedHeight: number\n\n    constructor() {\n        super(true)\n        this.fixedWidth = SPRITE_RESOLUTION_WIDTH\n        this.fixedHeight = SPRITE_RESOLUTION_HEIGHT\n    }\n\n    toScaledCoords(windowX: number, windowY: number) {\n        const [cx, cy] = this.toCanvasCoords(windowX, windowY)\n        return [cx / this.scaleX(), cy / this.scaleY()]\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        this.context.scale(this.scaleX(), this.scaleY())\n    }\n\n    scaleX() {\n        return this.canvas.width / this.fixedWidth\n    }\n\n    scaleY() {\n        return this.canvas.height / this.fixedHeight\n    }\n\n}\n\nexport class CursorLayer extends ScaledLayer {\n\n    curUrl\n    cursorName: string = 'Aclosed'\n\n    show() {\n        super.show()\n        this.createCursor()\n    }\n\n    hide() {\n        super.hide()\n        this.canvas.style.cursor = null\n    }\n\n    createCursor() {\n        if (this.curUrl) URL.revokeObjectURL(this.curUrl)\n        const curImg = ResourceManager.getImage('Interface/Pointers/' + this.cursorName + '.bmp')\n        this.curUrl = curImg.toDataURL()\n        // Chrome limits cursor size to 32x32 anyway...\n        // const context: CanvasRenderingContext2D = createContext(curImg.width * this.scaleX(), curImg.height * this.scaleY());\n        // context.scale(this.scaleX(), this.scaleY());\n        // context.drawImage(curImg, 0, 0);\n        // this.curUrl = context.canvas.toDataURL();\n        this.canvas.style.cursor = 'url(' + this.curUrl + '), auto'\n    }\n\n    resize(width, height) {\n        super.resize(width, height)\n        if (this.isActive()) this.createCursor()\n    }\n\n}\n","import { ScreenLayer } from '../screen/ScreenLayer'\nimport { BaseScreen } from '../screen/BaseScreen'\nimport { KEY_EVENT, POINTER_EVENT } from './EventTypeEnum'\n\nexport class EventManager {\n\n    constructor(screen: BaseScreen) {\n        screen.gameCanvasContainer.addEventListener('contextmenu', (event: MouseEvent) => {\n            if (screen.isInRect(event)) event.preventDefault()\n        })\n        new Map<string, POINTER_EVENT>([\n            ['pointermove', POINTER_EVENT.MOVE],\n            ['pointerdown', POINTER_EVENT.DOWN],\n            ['pointerup', POINTER_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: PointerEvent) => {\n                if (!screen.isInRect(event)) return\n                event.preventDefault()\n                // all event attibutes used by controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n                const nonBubblingClone = new PointerEvent(event.type, {\n                    bubbles: false, // disable bubbling otherwise we'll trigger this same event handler again\n                    clientX: event.clientX,\n                    clientY: event.clientY,\n                    pointerType: event.pointerType,\n                    button: event.button,\n                    ctrlKey: event.ctrlKey,\n                    metaKey: event.metaKey,\n                    shiftKey: event.shiftKey,\n                })\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handlePointerEvent(eventEnum, nonBubblingClone))\n            })\n        })\n        new Map<string, KEY_EVENT>([\n            ['keydown', KEY_EVENT.DOWN],\n            ['keyup', KEY_EVENT.UP],\n        ]).forEach((eventEnum, eventType) => {\n            screen.gameCanvasContainer.addEventListener(eventType, (event: KeyboardEvent) => {\n                // event.preventDefault(); // otherwise page reload with F5 stops working (may be intended in future)\n                screen.layers.filter(l => l.isActive())\n                    .sort((a, b) => ScreenLayer.compareZ(a, b))\n                    .some(l => l.handleKeyEvent(eventEnum, event))\n            })\n        })\n        screen.gameCanvasContainer.addEventListener('wheel', (event: WheelEvent) => {\n            if (!screen.isInRect(event)) return\n            // all event attibutes used by controls: clientX, clientY, deltaY, keyCode, touches, pointerType, button, ctrlKey, metaKey, shiftKey\n            const nonBubblingClone = new WheelEvent(event.type, {\n                bubbles: false, // disable bubbling otherwise we'll trigger this same event handler again\n                clientX: event.clientX,\n                clientY: event.clientY,\n                deltaX: event.deltaX,\n                deltaY: event.deltaY,\n                deltaZ: event.deltaZ,\n                button: event.button,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey,\n                shiftKey: event.shiftKey,\n            })\n            screen.layers.filter(l => l.isActive())\n                .sort((a, b) => ScreenLayer.compareZ(a, b))\n                .some(l => l.handleWheelEvent(nonBubblingClone))\n        })\n    }\n\n}\n","import { Group, Mesh, MeshPhongMaterial, Vector2, Vector3 } from 'three'\nimport { Terrain } from './Terrain'\nimport { SurfaceType } from './SurfaceType'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Selectable, SelectionType } from '../../../game/model/Selectable'\nimport { EventBus } from '../../../event/EventBus'\nimport { SelectionEvent, SurfaceChanged, SurfaceSelectedEvent } from '../../../event/LocalEvents'\nimport { CavernDiscovered, JobCreateEvent, JobDeleteEvent, OreFoundEvent } from '../../../event/WorldEvents'\nimport { clearTimeoutSafe, getRandom, getRandomSign } from '../../../core/Util'\nimport { Crystal } from '../collect/Crystal'\nimport { Ore } from '../collect/Ore'\nimport { HEIGHT_MULTIPLER, TILESIZE } from '../../../main'\nimport { GameState } from '../../../game/model/GameState'\nimport { SurfaceJob } from '../../../game/model/job/surface/SurfaceJob'\nimport { LWSCLoader } from '../../../resource/LWSCLoader'\nimport { AnimSubObj } from '../anim/AnimSubObj'\nimport { SurfaceGeometry } from './SurfaceGeometry'\nimport { CrystalFoundEvent, LandslideEvent } from '../../../event/WorldLocationEvent'\nimport { JobType } from '../../../game/model/job/JobType'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { ElectricFence } from '../collect/ElectricFence'\n\nexport class Surface implements Selectable {\n\n    terrain: Terrain\n    surfaceType: SurfaceType\n    x: number\n    y: number\n    containedOres: number = 0\n    containedCrystals: number = 0\n    heightOffset: number = null\n    discovered: boolean = false\n    selected: boolean = false\n    reinforced: boolean = false\n    jobs: SurfaceJob[] = []\n    surfaceRotation: number = 0\n    seamLevel: number = 0\n    fallinTimeout = null\n\n    fallinGrp: Group = null\n    animationTimeout = null\n\n    wallType: WALL_TYPE = null\n    mesh: Mesh = null\n    needsMeshUpdate: boolean = false\n\n    topLeftHeightOffset: number = 0\n    topRightHeightOffset: number = 0\n    bottomLeftHeightOffset: number = 0\n    bottomRightHeightOffset: number = 0\n\n    rubblePositions: Vector2[] = []\n\n    building: BuildingEntity = null\n    fence: ElectricFence = null\n    hasPower: boolean = false\n\n    constructor(terrain: Terrain, surfaceType: SurfaceType, x: number, y: number, heightOffset: number) {\n        this.terrain = terrain\n        this.surfaceType = surfaceType\n        if (surfaceType === SurfaceType.CRYSTAL_SEAM || surfaceType === SurfaceType.ORE_SEAM) this.seamLevel = 4\n        this.x = x\n        this.y = y\n        this.heightOffset = heightOffset\n        EventBus.registerEventListener(EventKey.JOB_CREATE, (event: JobCreateEvent) => {\n            const jobType = event.job.type\n            if (jobType === JobType.DRILL || jobType === JobType.REINFORCE || jobType === JobType.BLOW) {\n                const surfaceJob = event.job as SurfaceJob\n                if (surfaceJob.surface === this) this.jobs.push(surfaceJob)\n            }\n        })\n    }\n\n    hasJobType(type: JobType) {\n        return this.jobs.some((job) => job.type === type)\n    }\n\n    /**\n     * @return {boolean} Returns true, if a new cave has been discovered\n     */\n    discoverNeighbors(): boolean {\n        if (!this.discovered) GameState.discoverSurface(this)\n        this.discovered = true\n        this.needsMeshUpdate = true\n        let foundCave = false\n        if (this.surfaceType.floor) {\n            for (let x = this.x - 1; x <= this.x + 1; x++) {\n                for (let y = this.y - 1; y <= this.y + 1; y++) {\n                    if (x !== this.x || y !== this.y) {\n                        const surf = this.terrain.getSurfaceOrNull(x, y)\n                        if (surf && !surf.discovered) {\n                            foundCave = surf.discoverNeighbors() || surf.surfaceType.floor\n                            surf.needsMeshUpdate = true\n                        }\n                    }\n                }\n            }\n        }\n        return foundCave\n    }\n\n    collapse() {\n        this.cancelJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += 4\n        this.needsMeshUpdate = true\n        // discover surface and all neighbors\n        const foundCave = this.discoverNeighbors()\n        if (foundCave) EventBus.publishEvent(new CavernDiscovered())\n        // drop contained ores and crystals\n        this.dropContainedOre(this.containedOres - 4)\n        for (let c = 0; c < this.containedCrystals; c++) {\n            const crystal = this.terrain.worldMgr.addCollectable(new Crystal(), this.getRandomPosition())\n            EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n        }\n        // check for unsupported neighbors\n        for (let x = this.x - 1; x <= this.x + 1; x++) {\n            for (let y = this.y - 1; y <= this.y + 1; y++) {\n                if (x !== this.x || y !== this.y) {\n                    const surf = this.terrain.getSurface(x, y)\n                    surf.needsMeshUpdate = true\n                    if (!surf.isSupported()) surf.collapse()\n                }\n            }\n        }\n        // update meshes\n        this.terrain.updateSurfaceMeshes()\n        this.terrain.floorGroup.updateWorldMatrix(true, true)\n    }\n\n    private dropContainedOre(dropAmount: number) {\n        for (let c = 0; c < dropAmount && this.containedOres > 0; c++) {\n            this.containedOres--\n            this.terrain.worldMgr.addCollectable(new Ore(), this.getRandomPosition())\n            EventBus.publishEvent(new OreFoundEvent())\n        }\n    }\n\n    getRandomPosition(): Vector2 {\n        return new Vector2(this.x * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4),\n            this.y * TILESIZE + TILESIZE / 2 + getRandomSign() * getRandom(TILESIZE / 4))\n    }\n\n    cancelJobs() {\n        const jobs = this.jobs // ensure consistency while processing\n        this.jobs = []\n        jobs.forEach((job) => EventBus.publishEvent(new JobDeleteEvent(job)))\n        this.updateJobColor()\n    }\n\n    reduceRubble() {\n        this.rubblePositions.shift()\n        if (this.surfaceType === SurfaceType.RUBBLE4) this.surfaceType = SurfaceType.RUBBLE3\n        else if (this.surfaceType === SurfaceType.RUBBLE3) this.surfaceType = SurfaceType.RUBBLE2\n        else if (this.surfaceType === SurfaceType.RUBBLE2) this.surfaceType = SurfaceType.RUBBLE1\n        else if (this.surfaceType === SurfaceType.RUBBLE1) this.surfaceType = SurfaceType.GROUND\n        this.dropContainedOre(this.containedOres - this.rubblePositions.length)\n        this.updateTexture()\n        EventBus.publishEvent(new SurfaceChanged(this))\n    }\n\n    isSupported(): boolean {\n        if (this.surfaceType.floor) return true\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        return isHighGround(surfLeft, surfTopLeft, surfTop)\n            || isHighGround(surfTop, surfTopRight, surfRight)\n            || isHighGround(surfRight, surfBottomRight, surfBottom)\n            || isHighGround(surfBottom, surfBottomLeft, surfLeft)\n    }\n\n    updateMesh(force: boolean = true) {\n        if (!force && !this.needsMeshUpdate) return\n        this.needsMeshUpdate = false\n\n        const topLeftVertex = new Vector3(this.x, 0, this.y)\n        const topRightVertex = new Vector3(this.x + 1, 0, this.y)\n        const bottomLeftVertex = new Vector3(this.x, 0, this.y + 1)\n        const bottomRightVertex = new Vector3(this.x + 1, 0, this.y + 1)\n\n        const surfLeft = this.terrain.getSurface(this.x - 1, this.y)\n        const surfTopLeft = this.terrain.getSurface(this.x - 1, this.y - 1)\n        const surfTop = this.terrain.getSurface(this.x, this.y - 1)\n        const surfTopRight = this.terrain.getSurface(this.x + 1, this.y - 1)\n        const surfRight = this.terrain.getSurface(this.x + 1, this.y)\n        const surfBottomRight = this.terrain.getSurface(this.x + 1, this.y + 1)\n        const surfBottom = this.terrain.getSurface(this.x, this.y + 1)\n        const surfBottomLeft = this.terrain.getSurface(this.x - 1, this.y + 1)\n\n        function isHighGround(surf1: Surface, surf2: Surface, surf3: Surface) {\n            return !surf1.discovered || !surf2.discovered || !surf3.discovered ||\n                (!surf1.surfaceType.floor && !surf2.surfaceType.floor && !surf3.surfaceType.floor)\n        }\n\n        if (!this.discovered) {\n            topLeftVertex.y = 1\n            topRightVertex.y = 1\n            bottomRightVertex.y = 1\n            bottomLeftVertex.y = 1\n        } else if (!this.surfaceType.floor) {\n            if (isHighGround(surfLeft, surfTopLeft, surfTop)) topLeftVertex.y = 1\n            if (isHighGround(surfTop, surfTopRight, surfRight)) topRightVertex.y = 1\n            if (isHighGround(surfRight, surfBottomRight, surfBottom)) bottomRightVertex.y = 1\n            if (isHighGround(surfBottom, surfBottomLeft, surfLeft)) bottomLeftVertex.y = 1\n        }\n\n        // update mesh (geometry), if wall type changed\n        let wallType = topLeftVertex.y + topRightVertex.y + bottomRightVertex.y + bottomLeftVertex.y\n        if (wallType === WALL_TYPE.WALL && topLeftVertex.y === bottomRightVertex.y) wallType = WALL_TYPE.WEIRD_CREVICE\n\n        if (this.wallType !== wallType) {\n            this.wallType = wallType\n            this.updateGeometry(topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex, surfTopLeft, surfTop, surfLeft, surfTopRight, surfRight, surfBottomRight, surfBottom, surfBottomLeft)\n            if (this.wallType !== WALL_TYPE.WALL) this.cancelReinforceJobs()\n        }\n\n        this.updateTexture()\n        this.updateJobColor()\n        this.terrain.graphWalk.grid[this.x][this.y].weight = this.getGraphWalkWeight()\n    }\n\n    cancelReinforceJobs() {\n        const otherJobs = []\n        this.jobs.forEach((job) => {\n            if (job.type === JobType.REINFORCE) {\n                EventBus.publishEvent(new JobDeleteEvent(job))\n            } else {\n                otherJobs.push(job)\n            }\n        })\n        this.jobs = otherJobs\n        this.updateJobColor()\n    }\n\n    updateTexture() {\n        let textureName = this.terrain.textureSet.texturebasename\n        if (!this.discovered) {\n            textureName += '70'\n        } else if (this.surfaceType === SurfaceType.POWER_PATH) {\n            textureName += this.updatePowerPathTexture()\n        } else if (!this.surfaceType.shaping) {\n            if (this.surfaceType === SurfaceType.POWER_PATH_BUILDING && this.hasPower) {\n                textureName += '66'\n            } else {\n                textureName += this.surfaceType.matIndex.toString()\n            }\n        } else if (this.wallType === WALL_TYPE.WEIRD_CREVICE) {\n            textureName += '77'\n        } else {\n            if (this.wallType === WALL_TYPE.CORNER) {\n                textureName += '5'\n            } else if (this.wallType === WALL_TYPE.INVERTED_CORNER) {\n                textureName += '3'\n            } else if (this.reinforced) {\n                textureName += '2'\n            } else {\n                textureName += '0'\n            }\n            textureName += this.surfaceType.matIndex\n        }\n        textureName += '.bmp'\n\n        const texture = ResourceManager.getTexture(textureName)\n        texture.center.set(0.5, 0.5)\n        texture.rotation = this.surfaceRotation\n\n        this.accessMaterials().forEach((mat) => mat.map = texture)\n    }\n\n    private updatePowerPathTexture(): string {\n        this.surfaceRotation = 0\n        const left = this.terrain.getSurface(this.x - 1, this.y).isPath()\n        const top = this.terrain.getSurface(this.x, this.y - 1).isPath()\n        const right = this.terrain.getSurface(this.x + 1, this.y).isPath()\n        const bottom = this.terrain.getSurface(this.x, this.y + 1).isPath()\n        const pathSum = (left ? 1 : 0) + (top ? 1 : 0) + (right ? 1 : 0) + (bottom ? 1 : 0)\n        if (pathSum === 0 || pathSum === 1) {\n            if (left) this.surfaceRotation = -Math.PI / 2\n            if (top) this.surfaceRotation = Math.PI\n            if (right) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '75' : '65'\n        } else if (pathSum === 2) {\n            if (left === right) {\n                this.surfaceRotation = left ? Math.PI / 2 : 0\n                return this.hasPower ? '72' : '62'\n            } else {\n                if (left && bottom) this.surfaceRotation = -Math.PI / 2\n                if (left && top) this.surfaceRotation = Math.PI\n                if (top && right) this.surfaceRotation = Math.PI / 2\n                return this.hasPower ? '73' : '63'\n            }\n        } else if (pathSum === 3) {\n            if (!top) this.surfaceRotation = -Math.PI / 2\n            if (!right) this.surfaceRotation = Math.PI\n            if (!bottom) this.surfaceRotation = Math.PI / 2\n            return this.hasPower ? '74' : '64'\n        } else {\n            return this.hasPower ? '71' : '60'\n        }\n    }\n\n    accessMaterials(): MeshPhongMaterial[] {\n        if (!this.mesh || !this.mesh.material) return []\n        if (Array.isArray(this.mesh.material)) {\n            return this.mesh.material as MeshPhongMaterial[]\n        } else {\n            return [this.mesh.material as MeshPhongMaterial]\n        }\n    }\n\n    updateGeometry(topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3, surfTopLeft: Surface, surfTop: Surface, surfLeft: Surface, surfTopRight: Surface, surfRight: Surface, surfBottomRight: Surface, surfBottom: Surface, surfBottomLeft: Surface) {\n        if (this.mesh) this.terrain.floorGroup.remove(this.mesh)\n        this.mesh?.geometry?.dispose()\n\n        function avgHeight(...args: Surface[]) {\n            let sum = 0, cnt = 0\n            args.map(s => s.heightOffset).filter(Boolean).forEach(h => {\n                sum += h\n                cnt++\n            })\n            return sum / cnt\n        }\n\n        this.topLeftHeightOffset = avgHeight(surfTopLeft, surfTop, this, surfLeft) * HEIGHT_MULTIPLER\n        this.topRightHeightOffset = avgHeight(surfTop, surfTopRight, surfRight, this) * HEIGHT_MULTIPLER\n        this.bottomRightHeightOffset = avgHeight(this, surfRight, surfBottomRight, surfBottom) * HEIGHT_MULTIPLER\n        this.bottomLeftHeightOffset = avgHeight(surfLeft, this, surfBottom, surfBottomLeft) * HEIGHT_MULTIPLER\n        const geometry = SurfaceGeometry.create(this.wallType, topLeftVertex, bottomRightVertex, topRightVertex, bottomLeftVertex,\n            topLeftVertex.y + this.topLeftHeightOffset,\n            topRightVertex.y + this.topRightHeightOffset,\n            bottomRightVertex.y + this.bottomRightHeightOffset,\n            bottomLeftVertex.y + this.bottomLeftHeightOffset,\n        )\n\n        this.mesh = new Mesh(geometry, new MeshPhongMaterial({shininess: 0}))\n        this.mesh.userData = {selectable: this}\n\n        this.terrain.floorGroup.add(this.mesh)\n        this.terrain.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.SURFACE\n    }\n\n    select(): SelectionEvent {\n        if (this.surfaceType.selectable && (this.wallType !== WALL_TYPE.INVERTED_CORNER && this.wallType !== WALL_TYPE.WEIRD_CREVICE) && !this.selected) {\n            this.selected = true\n            this.accessMaterials().forEach((mat) => mat.color.setHex(0x6060a0))\n            return new SurfaceSelectedEvent(this)\n        }\n        return null\n    }\n\n    deselect(): any {\n        if (this.selected) {\n            this.selected = false\n            this.updateJobColor()\n        }\n    }\n\n    getSelectionCenter(): Vector3 {\n        return null // not used\n    }\n\n    updateJobColor() {\n        const sortedJobs = this.jobs.sort((l, r) => -l.colorPriority + r.colorPriority)\n        const color = sortedJobs[0]?.color || 0xffffff\n        this.accessMaterials().forEach((mat) => mat.color.setHex(color))\n    }\n\n    hasRubble(): boolean {\n        return this.rubblePositions.length > 0\n    }\n\n    isPath(): boolean {\n        return this.surfaceType === SurfaceType.POWER_PATH || this.surfaceType === SurfaceType.POWER_PATH_BUILDING\n    }\n\n    isWalkable(): boolean {\n        return this.surfaceType.floor && this.discovered && this.surfaceType !== SurfaceType.LAVA && this.surfaceType !== SurfaceType.WATER && !this.building?.type.blocksPathSurface\n    }\n\n    isDrillable(): boolean {\n        return this.surfaceType.drillable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDrillableHard(): boolean {\n        return this.surfaceType.drillableHard && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isReinforcable(): boolean {\n        return this.surfaceType.reinforcable && this.discovered && this.wallType === WALL_TYPE.WALL && !this.reinforced\n    }\n\n    isExplodable(): boolean {\n        return this.surfaceType.explodable && this.discovered && (this.wallType === WALL_TYPE.WALL || this.wallType === WALL_TYPE.CORNER)\n    }\n\n    isDigable(): boolean {\n        return this.isDrillable() || this.isExplodable()\n    }\n\n    getDigPositions(): Vector2[] {\n        const digPosition = []\n        if (this.terrain.getSurface(this.x - 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE - 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y - 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE - 1))\n        if (this.terrain.getSurface(this.x + 1, this.y).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE + 1, this.y * TILESIZE + TILESIZE / 2))\n        if (this.terrain.getSurface(this.x, this.y + 1).isWalkable()) digPosition.push(new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE + TILESIZE + 1))\n        return digPosition\n    }\n\n    reinforce() {\n        this.reinforced = true\n        this.cancelReinforceJobs()\n        this.fallinTimeout = clearTimeoutSafe(this.fallinTimeout)\n        this.updateTexture()\n    }\n\n    getCenterWorld2D(): Vector2 {\n        return new Vector2(this.x * TILESIZE + TILESIZE / 2, this.y * TILESIZE + TILESIZE / 2)\n    }\n\n    getCenterWorld(): Vector3 {\n        const center = this.getCenterWorld2D()\n        return new Vector3(center.x, this.terrain.worldMgr.getTerrainHeight(center.x, center.y), center.y)\n    }\n\n    setFallinLevel(fallinLevel: number) {\n        if (fallinLevel < 1) return\n        let originPos\n        let targetPos\n        if (this.surfaceType.floor) {\n            originPos = this.terrain.findFallInOrigin(this.x, this.y)\n            targetPos = [this.x, this.y]\n        } else {\n            originPos = [this.x, this.y]\n            targetPos = this.terrain.findFallInTarget(this.x, this.y)\n        }\n        if (originPos && targetPos) {\n            this.terrain.getSurface(originPos[0], originPos[1]).scheduleFallin(targetPos[0], targetPos[1])\n        }\n    }\n\n    scheduleFallin(targetX: number, targetY: number) {\n        this.fallinTimeout = setTimeout(() => {\n            this.createFallin(targetX, targetY)\n            this.scheduleFallin(targetX, targetY)\n        }, (30 + getRandom(60)) * 1000) // TODO adapt timer to level multiplier and fallin value\n    }\n\n    createFallin(targetX: number, targetY: number) {\n        const fallinPosition = this.terrain.getSurface(targetX, targetY).getCenterWorld()\n        EventBus.publishEvent(new LandslideEvent(fallinPosition))\n\n        // TODO refactor mesh and animation handling\n        const content = ResourceManager.getResource('MiscAnims/RockFall/Rock3Sides.lws')\n        const animation = new LWSCLoader('MiscAnims/RockFall/').parse(content)\n        this.fallinGrp = new Group()\n        this.fallinGrp.position.copy(fallinPosition)\n        const dx = this.x - targetX, dy = targetY - this.y\n        this.fallinGrp.rotateOnAxis(new Vector3(0, 1, 0), Math.atan2(dy, dx) + Math.PI / 2)\n        this.terrain.worldMgr.sceneManager.scene.add(this.fallinGrp)\n        const poly = []\n        animation.bodies.forEach((body) => {\n            const polyModel = body.model.clone(true)\n            poly.push(polyModel)\n        })\n        animation.bodies.forEach((body, index) => { // not all bodies may have been added in first iteration\n            const polyPart = poly[index]\n            const parentInd = body.parentObjInd\n            if (parentInd !== undefined && parentInd !== null) { // can be 0\n                poly[parentInd].add(polyPart)\n            } else {\n                this.fallinGrp.add(polyPart)\n            }\n        })\n        this.animate(poly, animation, 0)\n\n        this.terrain.getSurface(targetX, targetY).makeRubble()\n    }\n\n    animate(poly, animation, frameIndex) {\n        if (poly.length !== animation.bodies.length) throw 'Cannot animate poly. Length differs from bodies length'\n        animation.bodies.forEach((body: AnimSubObj, index) => {\n            const p = poly[index]\n            p.position.copy(body.relPos[frameIndex])\n            p.rotation.copy(body.relRot[frameIndex])\n            p.scale.copy(body.relScale[frameIndex])\n            if (p.hasOwnProperty('material')) {\n                const material = p['material']\n                const opacity = body.opacity[frameIndex]\n                if (material && opacity !== undefined) {\n                    const matArr = Array.isArray(material) ? material : [material]\n                    matArr.forEach((mat: MeshPhongMaterial) => {\n                        mat.opacity = opacity\n                        mat.transparent = true\n                        mat.alphaTest = 0\n                    })\n                }\n            }\n        })\n        this.animationTimeout = null\n        if (!(frameIndex + 1 > animation.lastFrame) || animation.looping) {\n            let nextFrame = frameIndex + 1\n            if (nextFrame > animation.lastFrame) {\n                nextFrame = animation.firstFrame\n            }\n            const that = this\n            this.animationTimeout = setTimeout(() => that.animate(poly, animation, nextFrame), 1000 / animation.framesPerSecond * animation.transcoef)\n        } else {\n            this.terrain.worldMgr.sceneManager.scene.remove(this.fallinGrp)\n            this.fallinGrp = null\n        }\n    }\n\n    dispose() {\n        this.mesh.geometry.dispose()\n        this.accessMaterials().forEach(m => m.dispose())\n    }\n\n    getFloorHeight(worldX: number, worldZ: number) {\n        const sx = worldX / TILESIZE - this.x\n        const sy = worldZ / TILESIZE - this.y\n        const dy0 = Surface.interpolate(this.topLeftHeightOffset, this.topRightHeightOffset, sx)\n        const dy1 = Surface.interpolate(this.bottomLeftHeightOffset, this.bottomRightHeightOffset, sx)\n        return Surface.interpolate(dy0, dy1, sy) * TILESIZE\n    }\n\n    private static interpolate(y0: number, y1: number, x: number): number {\n        return y0 + x * (y1 - y0)\n    }\n\n    get neighbors(): Surface[] {\n        return [this.terrain.getSurface(this.x - 1, this.y), this.terrain.getSurface(this.x, this.y - 1),\n            this.terrain.getSurface(this.x + 1, this.y), this.terrain.getSurface(this.x, this.y + 1)]\n    }\n\n    makeRubble(containedOre: number = 0) {\n        this.rubblePositions = [this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition(), this.getRandomPosition()]\n        this.containedOres += containedOre\n        this.surfaceType = SurfaceType.RUBBLE4\n        this.updateTexture()\n    }\n\n    setBuilding(building: BuildingEntity) {\n        this.building = building\n        this.terrain.graphWalk.grid[this.x][this.y].weight = this.getGraphWalkWeight()\n        this.terrain.resetGraphWalk()\n    }\n\n    getGraphWalkWeight(): number {\n        return this.isWalkable() ? this.hasRubble() ? 4 : 1 : 0\n    }\n\n    setHasPower(state: boolean, recursive: boolean) {\n        if (this.hasPower === state) return\n        this.hasPower = state\n        this.updateTexture()\n        if (recursive) this.neighbors.forEach((n) => n.isPath() && n.setHasPower(state, recursive))\n    }\n\n    canPlaceFence(): boolean { // TODO performance this can be cached\n        return (this.surfaceType === SurfaceType.GROUND || this.isPath()) && !this.building && !this.fence &&\n            [1, 2].some((n) => {\n                return !!this.terrain.getSurface(this.x - n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y - n).building ||\n                    !!this.terrain.getSurface(this.x + n, this.y).building ||\n                    !!this.terrain.getSurface(this.x, this.y + n).building ||\n                    !!this.terrain.getSurface(this.x - n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y - n).fence ||\n                    !!this.terrain.getSurface(this.x + n, this.y).fence ||\n                    !!this.terrain.getSurface(this.x, this.y + n).fence\n            })\n    }\n\n}\n\nexport enum WALL_TYPE {\n\n    CORNER = 1,\n    WALL = 2,\n    INVERTED_CORNER = 3,\n    WEIRD_CREVICE = 20,\n\n}\n","import { CursorLayer, ScreenLayer } from './ScreenLayer'\nimport { EventManager } from '../event/EventManager'\n\nexport class BaseScreen {\n\n    gameCanvasContainer: HTMLElement\n    eventMgr: EventManager\n    layers: ScreenLayer[] = []\n    width: number = 800\n    height: number = 600\n    ratio: number = 800 / 600\n    cursorLayer: CursorLayer\n\n    constructor() {\n        this.gameCanvasContainer = document.getElementById('game-canvas-container')\n        this.gameCanvasContainer.focus()\n        this.eventMgr = new EventManager(this)\n        if (!this.gameCanvasContainer) throw 'Fatal error: game canvas container not found!'\n        window.addEventListener('resize', () => this.onWindowResize())\n        this.cursorLayer = this.addLayer(new CursorLayer(), 1000)\n        this.onWindowResize()\n    }\n\n    addLayer<T extends ScreenLayer>(layer: T, zIndex: number = 0): T {\n        layer.resize(this.width, this.height)\n        layer.setZIndex(zIndex)\n        this.layers.push(layer)\n        this.gameCanvasContainer.appendChild(layer.canvas)\n        return layer\n    }\n\n    redraw() {\n        this.layers.forEach((layer) => layer.redraw())\n    }\n\n    show() {\n        this.layers.forEach((layer) => layer.show())\n        this.redraw()\n    }\n\n    hide() {\n        this.layers.forEach((layer) => layer.hide())\n    }\n\n    onWindowResize() {\n        const maxWidth = this.gameCanvasContainer.offsetWidth, maxHeight = this.gameCanvasContainer.offsetHeight\n        const idealHeight = Math.round(maxWidth / this.ratio)\n        if (idealHeight > maxHeight) {\n            this.resize(Math.round(maxHeight * this.ratio), maxHeight)\n        } else {\n            this.resize(maxWidth, idealHeight)\n        }\n    }\n\n    resize(width: number, height: number) {\n        this.width = width\n        this.height = height\n        this.layers.forEach((layer) => layer.resize(width, height))\n        this.redraw()\n    }\n\n    isInRect(event: MouseEvent | WheelEvent) {\n        if (this.layers.length < 1) return false\n        const firstLayer = this.layers[0] // all layers have same state and size\n        if (!firstLayer.isActive() && !firstLayer.canvas) return false\n        const rect = firstLayer.canvas.getBoundingClientRect()\n        const clientX = event.clientX, clientY = event.clientY\n        return clientX >= rect.left && clientX < rect.right && clientY >= rect.top && clientY < rect.bottom\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from './ScreenLayer'\n\nexport class LoadingScreen extends BaseScreen {\n\n    layer: ScaledLayer\n    assetIndex: number = 0\n\n    constructor() {\n        super()\n        this.layer = this.addLayer(new ScaledLayer())\n    }\n\n    show() {\n        this.layers.forEach((layer) => {\n            if (layer !== this.cursorLayer) layer.show()\n        })\n        this.setLoadingMessage('Loading...')\n    }\n\n    setLoadingMessage(text) {\n        this.layer.onRedraw = (context) => {\n            // clear the screen to black\n            context.fillStyle = 'black'\n            context.fillRect(0, 0, this.layer.fixedWidth, this.layer.fixedHeight)\n            // draw the loading title\n            context.font = '24px Arial'\n            context.fillStyle = 'white'\n            context.fillText('Loading Rock Raiders', 20, this.layer.fixedHeight - 50)\n            // hard-code the first loading message\n            context.font = '18px Arial'\n            context.fillStyle = 'white'\n            context.fillText(text, 20, this.layer.fixedHeight - 20)\n        }\n        this.redraw()\n    }\n\n    enableGraphicMode(totalResources: number) {\n        const imgBackground = ResourceManager.getImage(ResourceManager.cfg('Main', 'LoadScreen'))\n        this.layer.onRedraw = (context => context.drawImage(imgBackground, 0, 0))\n        this.redraw()\n        const imgProgress = ResourceManager.getImage(ResourceManager.cfg('Main', 'ProgressBar'))\n        const imgLoading = ResourceManager.getDefaultFont().createTextImage(ResourceManager.cfg('Main', 'LoadingText'))\n        this.layer.onRedraw = (context => {\n            const loadingBarWidth = 353 * (this.assetIndex < totalResources ? Math.round(this.assetIndex / totalResources) : 1)\n            context.drawImage(imgProgress, 142, 450, loadingBarWidth, 9)\n            context.drawImage(imgLoading, Math.round(320 - imgLoading.width / 2), Math.round(456 - imgLoading.height / 2))\n        })\n        this.cursorLayer.show()\n        this.redraw()\n    }\n\n    increaseLoadingState() {\n        this.assetIndex++\n        this.redraw()\n    }\n\n}\n","export class MainMenuBaseItem {\n\n    x: number = 0\n    y: number = 0\n    width: number = 0\n    height: number = 0\n    zIndex: number = 100\n    scrollAffected = false\n    needsRedraw: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n    actionName: string = ''\n    targetIndex: number = 0\n\n    static compareZ(left: MainMenuBaseItem, right: MainMenuBaseItem) {\n        return left.zIndex === right.zIndex ? 0 : left.zIndex > right.zIndex ? -1 : 1\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const hover = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        if (this.hover !== hover) {\n            this.hover = hover\n            this.needsRedraw = true\n            this.onHoverChange()\n        }\n        if (!this.hover) this.pressed = false\n        return this.hover\n    }\n\n    onHoverChange() {\n    }\n\n    checkSetPressed() {\n        if (!this.hover) return\n        if (!this.pressed) this.needsRedraw = true\n        this.pressed = true\n    }\n\n    setReleased() {\n        if (this.pressed) this.needsRedraw = true\n        this.pressed = false\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        this.needsRedraw = false\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\n\nexport class MainMenuLabelButton extends MainMenuBaseItem {\n\n    labelImgLo = null\n    labelImgHi = null\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.labelImgLo = layer.loFont.createTextImage(cfg.label)\n        this.labelImgHi = layer.hiFont.createTextImage(cfg.label)\n        this.width = Math.max(this.labelImgLo.width, this.labelImgHi.width)\n        this.height = Math.max(this.labelImgLo.height, this.labelImgHi.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const img = this.hover && !this.pressed ? this.labelImgHi : this.labelImgLo\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MenuLabelItemCfg } from '../cfg/MenuLabelItemCfg'\n\nexport class MainMenuIconButton extends MainMenuBaseItem {\n\n    imgNormal = null\n    imgHover = null\n    imgPressed = null\n    tooltip = ''\n\n    constructor(layer: MainMenuLayer, cfg: MenuLabelItemCfg) {\n        super()\n        this.imgNormal = ResourceManager.getImage(cfg.imgNormal)\n        this.imgHover = ResourceManager.getImage(cfg.imgHover)\n        this.imgPressed = ResourceManager.getImage(cfg.imgPressed)\n        this.tooltip = (cfg.tooltip || '').replace(/_/g, ' ')\n        this.width = Math.max(this.imgNormal.width, this.imgHover.width, this.imgPressed.width)\n        this.height = Math.max(this.imgNormal.height, this.imgHover.height, this.imgPressed.height)\n        this.x = layer.cfg.autoCenter ? (layer.fixedWidth - this.width) / 2 : layer.cfg.position[0] + cfg.x\n        this.y = layer.cfg.position[1] + cfg.y\n        this.actionName = cfg.actionName\n        if (this.actionName === 'Next') this.targetIndex = Number(cfg.target.substring('menu'.length)) - 1\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgNormal\n        if (this.hover) img = this.imgHover\n        if (this.pressed) img = this.imgPressed\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuLabelButton } from './MainMenuLabelButton'\nimport { ScaledLayer } from '../screen/ScreenLayer'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MainMenuIconButton } from './MainMenuIconButton'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { clearIntervalSafe } from '../core/Util'\nimport { NATIVE_FRAMERATE } from '../main'\n\nexport class MainMenuLayer extends ScaledLayer {\n\n    screen: MainMenuScreen\n    cfg: MenuEntryCfg\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    items: MainMenuBaseItem[] = []\n    scrollY: number = 0\n    scrollSpeedY: number = 0\n    scrollInterval = null\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg) {\n        super()\n        this.screen = screen\n        this.cfg = menuCfg\n        this.loFont = menuCfg.loFont ? ResourceManager.getBitmapFont(menuCfg.loFont) : null\n        this.hiFont = menuCfg.hiFont ? ResourceManager.getBitmapFont(menuCfg.hiFont) : null\n        this.menuImage = menuCfg.menuImage ? ResourceManager.getImage(menuCfg.menuImage) : null\n        this.titleImage = this.loFont.createTextImage(menuCfg.fullName)\n\n        menuCfg.itemsLabel.forEach((item) => {\n            if (item.label) {\n                this.items.push(new MainMenuLabelButton(this, item))\n            } else {\n                this.items.push(new MainMenuIconButton(this, item))\n            }\n        })\n\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n\n        this.onRedraw = (context) => {\n            context.drawImage(this.menuImage, 0, -this.scrollY)\n            if (menuCfg.displayTitle) context.drawImage(this.titleImage, (this.fixedWidth - this.titleImage.width) / 2, this.cfg.position[1])\n            this.items.forEach((item, index) => (this.items[this.items.length - 1 - index]).draw(context))\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.scrollY = 0\n        this.scrollSpeedY = 0\n    }\n\n    show() {\n        super.show()\n        const that = this\n        this.scrollInterval = setInterval(() => {\n            if (that.scrollSpeedY === 0) return\n            that.setScrollY(that.scrollSpeedY)\n        }, 1000 / NATIVE_FRAMERATE)\n    }\n\n    hide() {\n        this.scrollInterval = clearIntervalSafe(this.scrollInterval)\n        super.hide()\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (eventEnum === POINTER_EVENT.MOVE) {\n            const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n            let hovered = false\n            this.items.forEach((item) => {\n                if (!hovered) {\n                    const absY = sy + (item.scrollAffected ? this.scrollY : 0)\n                    hovered = item.checkHover(sx, absY)\n                } else {\n                    if (item.hover) item.needsRedraw = true\n                    item.hover = false\n                    item.setReleased()\n                }\n            })\n            if (this.cfg.canScroll) {\n                const scrollAreaHeight = 100\n                if (sy < scrollAreaHeight) {\n                    this.setScrollSpeedY(-(scrollAreaHeight - sy))\n                } else if (sy > this.fixedHeight - scrollAreaHeight) {\n                    this.setScrollSpeedY(sy - (this.fixedHeight - scrollAreaHeight))\n                }\n            }\n        } else if (eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => item.checkSetPressed())\n            }\n        } else if (eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) {\n                this.items.forEach((item) => {\n                    if (item.pressed) {\n                        item.setReleased()\n                        if (item.actionName.toLowerCase() === 'next') {\n                            this.screen.showMainMenu(item.targetIndex)\n                        } else if (item.actionName.toLowerCase() === 'selectlevel') {\n                            this.screen.selectLevel((item as MainMenuLevelButton).levelKey)\n                        } else if (item.actionName) {\n                            console.warn('not implemented: ' + item.actionName + ' - ' + item.targetIndex)\n                        }\n                    }\n                })\n            }\n        }\n        if (this.needsRedraw()) this.redraw()\n        return false\n    }\n\n    private setScrollSpeedY(deltaY: number) {\n        this.scrollSpeedY = Math.sign(deltaY) * Math.pow(Math.round(deltaY / 20), 2)\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        if (!this.cfg.canScroll) return false\n        this.setScrollY(event.deltaY)\n        return true\n    }\n\n    private setScrollY(deltaY: number) {\n        const scrollYBefore = this.scrollY\n        this.scrollY = Math.min(Math.max(this.scrollY + deltaY, 0), this.menuImage.height - this.fixedHeight)\n        if (scrollYBefore !== this.scrollY) this.redraw()\n    }\n\n    needsRedraw(): boolean {\n        return this.items.some((item) => item.needsRedraw)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class MainMenuLevelButton extends MainMenuBaseItem {\n\n    layer: MainMenuLayer\n    imgActive = null\n    imgInactive = null\n    imgCross = null\n    unlocked: boolean = false\n    levelKey: string = ''\n\n    constructor(layer: MainMenuLayer, levelKey: string, levelCfg: LevelEntryCfg) {\n        super()\n        this.layer = layer\n        this.actionName = 'selectlevel'\n        this.levelKey = levelKey\n        this.x = levelCfg.frontEndX\n        this.y = levelCfg.frontEndY\n        this.zIndex = 10\n        this.scrollAffected = true\n        const [imgActive, imgInactive, imgCross] = levelCfg.menuBMP\n        this.imgActive = ResourceManager.getImage(imgActive)\n        this.imgInactive = ResourceManager.getImage(imgInactive)\n        this.imgCross = ResourceManager.getImage(imgCross)\n        this.width = Math.max(this.imgActive.width, this.imgInactive.width, this.imgCross.width)\n        this.height = Math.max(this.imgActive.height, this.imgInactive.height, this.imgCross.height)\n        this.unlocked = levelCfg.frontEndOpen\n        this.unlocked = true // TODO don't unlock everything by default\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        let img = this.imgCross\n        if (this.unlocked) img = this.hover ? this.imgActive : this.imgInactive\n        context.drawImage(img, this.x, this.y - this.layer.scrollY)\n    }\n\n}\n","import { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { createContext } from '../core/ImageHelper'\n\nexport class MainMenuPanel extends MainMenuBaseItem {\n\n    context: CanvasRenderingContext2D\n\n    constructor(imgData: ImageData, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.zIndex = 50\n        this.context = createContext(imgData.width, imgData.height)\n        this.context.putImageData(imgData, 0, 0)\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    checkHover(sx: number, sy: number): boolean {\n        const inRect = sx >= this.x && sx < this.x + this.width && sy >= this.y && sy < this.y + this.height\n        const hover = inRect && this.context.getImageData(sx, sy, 1, 1).data[3] > 0\n        if (this.hover !== hover) this.needsRedraw = true\n        this.hover = hover\n        return this.hover\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        context.drawImage(this.context.canvas, this.x, this.y, this.width, this.height)\n    }\n\n}\n","import { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { BitmapFont } from '../core/BitmapFont'\n\nexport class MainMenuWindow extends MainMenuBaseItem {\n\n    font: BitmapFont\n    imgFirstLine = null\n    imgSecondLine = null\n\n    constructor(font: BitmapFont, area: { x: number, y: number, w: number, h: number }) {\n        super()\n        this.font = font\n        this.x = area.x\n        this.y = area.y\n        this.width = area.w\n        this.height = area.h\n    }\n\n    setFirstLine(text: string) {\n        this.imgFirstLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    setSecondLine(text: string) {\n        this.imgSecondLine = !!text ? this.font.createTextImage(text) : null\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        const cx = this.x + this.width / 2, cy = this.y + this.height / 2\n        if (this.imgFirstLine) context.drawImage(this.imgFirstLine, cx - this.imgFirstLine.width / 2, cy - this.imgFirstLine.height)\n        if (this.imgSecondLine) context.drawImage(this.imgSecondLine, cx - this.imgSecondLine.width / 2, cy)\n    }\n\n}\n","import { MainMenuLayer } from './MainMenuLayer'\nimport { LevelEntryCfg, LevelsCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuLevelButton } from './MainMenuLevelButton'\nimport { MainMenuScreen } from '../screen/MainMenuScreen'\nimport { MenuEntryCfg } from '../cfg/MenuEntryCfg'\nimport { iGet } from '../core/Util'\nimport { MainMenuPanel } from './MainMenuPanel'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\nimport { MainMenuWindow } from './MainMenuWindow'\n\nexport class LevelSelectLayer extends MainMenuLayer {\n\n    constructor(screen: MainMenuScreen, menuCfg: MenuEntryCfg, modeLevel: boolean) {\n        super(screen, menuCfg)\n        const levelsCfg: LevelsCfg = ResourceManager.getResource('Levels')\n        const levelTextCfg = new LevelTextCfg()\n        this.items.push(new MainMenuPanel(levelTextCfg.panelImgData, levelTextCfg.panelPos))\n        const levelTextWindow = new MainMenuWindow(ResourceManager.getDefaultFont(), levelTextCfg.window)\n        levelTextWindow.setFirstLine(modeLevel ? levelTextCfg.level : levelTextCfg.tutorial)\n        this.items.push(levelTextWindow)\n        Object.keys(levelsCfg.levelsByName).forEach((levelKey) => {\n            const level: LevelEntryCfg = levelsCfg.levelsByName[levelKey]\n            const levelButton = new MainMenuLevelButton(this, levelKey, level)\n            levelButton.onHoverChange = () => levelTextWindow.setSecondLine(levelButton.hover ? level.fullName : '')\n            this.items.push(levelButton)\n        })\n        this.items.sort((a, b) => MainMenuBaseItem.compareZ(a, b))\n    }\n\n    show() {\n        this.scrollY = 0\n        super.show()\n    }\n\n}\n\nclass LevelTextCfg {\n\n    window = {x: 0, y: 0, w: 0, h: 0}\n    panelImgData: ImageData\n    panelPos = {x: 0, y: 0, w: 0, h: 0}\n    level: string = ''\n    tutorial: string = ''\n\n    constructor() {\n        const cfg = ResourceManager.cfg('Menu', 'LevelText')\n        const winCfg = iGet(cfg, 'Window')\n        this.window = {x: winCfg[0], y: winCfg[1], w: winCfg[2], h: winCfg[3]}\n        const panelCfg = iGet(cfg, 'Panel')\n        this.panelImgData = ResourceManager.getImageData(panelCfg[0])\n        this.panelPos = {x: panelCfg[1], y: panelCfg[2], w: panelCfg[3], h: panelCfg[4]}\n        this.level = iGet(cfg, 'Level').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n        this.tutorial = iGet(cfg, 'Tutorial').join(',').replace(/_/g, ' ') // TODO improve cfg handling, remove join\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { MenuCfg } from '../cfg/MenuCfg'\nimport { MainMenuLayer } from '../menu/MainMenuLayer'\nimport { LevelSelectLayer } from '../menu/LevelSelectLayer'\n\nexport class MainMenuScreen extends BaseScreen {\n\n    onLevelSelected: (levelName: string) => void = null\n    menus: MainMenuLayer[] = []\n\n    constructor() {\n        super()\n        const mainMenuFullCfg = ResourceManager.getResource('MainMenuFull') as MenuCfg\n        mainMenuFullCfg.menus.forEach((menuCfg) => {\n            let layer\n            if (menuCfg.title === 'Levels') {\n                layer = new LevelSelectLayer(this, menuCfg, true)\n            } else if (menuCfg.title === 'Tutorials') {\n                layer = new LevelSelectLayer(this, menuCfg, false)\n            } else {\n                layer = new MainMenuLayer(this, menuCfg)\n            }\n            this.menus.push(layer)\n            this.addLayer(layer)\n        })\n    }\n\n    showMainMenu(index: number = 0) {\n        this.hide()\n        this.menus[index].show()\n        this.cursorLayer.show()\n    }\n\n    showLevelSelection() {\n        this.showMainMenu(1)\n    }\n\n    selectLevel(levelName) {\n        this.hide()\n        this.onLevelSelected(levelName)\n    }\n\n}\n","export class SurfaceType {\n\n    name: string // humand readable, maybe used as label lateron\n    shaping: boolean = false\n    matIndex: string = '00'\n    floor: boolean = false\n    selectable: boolean = false\n    drillable: boolean = false\n    drillableHard: boolean = false\n    explodable: boolean = false\n    reinforcable: boolean = false\n\n    constructor(options: Partial<SurfaceType> = {}) {\n        Object.assign(this, options)\n    }\n\n    static readonly GROUND = new SurfaceType({name: 'ground', floor: true, selectable: true})\n    static readonly SOLID_ROCK = new SurfaceType({name: 'solid rock', shaping: true, matIndex: '5'})\n    static readonly HARD_ROCK = new SurfaceType({\n        name: 'hard rock',\n        shaping: true,\n        matIndex: '4',\n        selectable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly LOOSE_ROCK = new SurfaceType({\n        name: 'loose rock',\n        shaping: true,\n        matIndex: '3',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly DIRT = new SurfaceType({\n        name: 'dirt',\n        shaping: true,\n        matIndex: '1',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly SLUG_HOLE = new SurfaceType({name: 'slug hole', floor: true, matIndex: '30'})\n    static readonly LAVA = new SurfaceType({name: 'lava', floor: true, matIndex: '46'})\n    static readonly ORE_SEAM = new SurfaceType({\n        name: 'ore seam',\n        matIndex: '40',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly WATER = new SurfaceType({name: 'water', floor: true, matIndex: '45'})\n    static readonly CRYSTAL_SEAM = new SurfaceType({\n        name: 'energy crystal seam',\n        matIndex: '20',\n        selectable: true,\n        drillable: true,\n        drillableHard: true,\n        explodable: true,\n        reinforcable: true,\n    })\n    static readonly RECHARGE_SEAM = new SurfaceType({name: 'recharge seam', matIndex: '67'})\n    static readonly POWER_PATH = new SurfaceType({\n        name: 'power path all',\n        floor: true,\n        matIndex: '60',\n        selectable: true,\n    })\n    static readonly POWER_PATH_SITE = new SurfaceType({\n        name: 'power path site',\n        floor: true,\n        matIndex: '61',\n        selectable: true,\n    })\n    static readonly POWER_PATH_BUILDING = new SurfaceType({name: 'power path', floor: true, matIndex: '76'})\n    static readonly RUBBLE1 = new SurfaceType({\n        name: 'rubble 1',\n        floor: true,\n        matIndex: '13',\n        selectable: true,\n    })\n    static readonly RUBBLE2 = new SurfaceType({\n        name: 'rubble 2',\n        floor: true,\n        matIndex: '12',\n        selectable: true,\n    })\n    static readonly RUBBLE3 = new SurfaceType({\n        name: 'rubble 3',\n        floor: true,\n        matIndex: '11',\n        selectable: true,\n    })\n    static readonly RUBBLE4 = new SurfaceType({\n        name: 'rubble 4',\n        floor: true,\n        matIndex: '10',\n        selectable: true,\n    })\n\n    static getByNum(typeNum: number) {\n        switch (typeNum) {\n            case 0:\n                return SurfaceType.POWER_PATH_BUILDING\n            case 1:\n                return SurfaceType.SOLID_ROCK\n            case 2:\n                return SurfaceType.HARD_ROCK\n            case 3:\n                return SurfaceType.LOOSE_ROCK\n            case 4:\n            case 5: // soil(5) was removed pre-release, so replace it with dirt(4)\n                return SurfaceType.DIRT\n            case 6:\n                return SurfaceType.LAVA\n            case 8:\n                return SurfaceType.ORE_SEAM\n            case 9:\n                return SurfaceType.WATER\n            case 10:\n                return SurfaceType.CRYSTAL_SEAM\n            case 11:\n                return SurfaceType.RECHARGE_SEAM\n            case 30:\n            case 40:\n                return SurfaceType.SLUG_HOLE\n            case 100:\n                return SurfaceType.RUBBLE4\n            case 101:\n                return SurfaceType.RUBBLE3\n            case 102:\n                return SurfaceType.RUBBLE2\n            case 103:\n                return SurfaceType.RUBBLE1\n            default:\n                console.error('Unexpected surface type num: ' + typeNum)\n                return SurfaceType.SOLID_ROCK\n        }\n    }\n}\n","import { BufferGeometry, Vector2, Vector3 } from 'three'\nimport { WALL_TYPE } from './Surface'\nimport { BufferAttribute } from 'three/src/core/BufferAttribute'\n\nexport class SurfaceGeometry {\n\n    public static create(wallType: WALL_TYPE,\n                         topLeftVertex: Vector3, bottomRightVertex: Vector3, topRightVertex: Vector3, bottomLeftVertex: Vector3,\n                         topLeftHeight: number, topRightHeight: number, bottomRightHeight: number, bottomLeftHeight: number,\n    ) {\n        let uvOffset = 0\n\n        // not-rotated\n        // 1 ?\n        // ? 0\n        if (topLeftVertex.y && !bottomRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topRightVertex.y)))) {\n            uvOffset = 0\n        }\n\n        // 90 clock-wise\n        // ? 1\n        // 0 ?\n        if (topRightVertex.y && !bottomLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomRightVertex.y)))) {\n            uvOffset = 3\n        }\n\n        // 180 clock-wise\n        // 0 ?\n        // ? 1\n        if (bottomRightVertex.y && !topLeftVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(bottomLeftVertex.y)))) {\n            uvOffset = 2\n        }\n\n        // 270 clock-wise\n        // ? 0\n        // 1 ?\n        if (bottomLeftVertex.y && !topRightVertex.y &&\n            (wallType === WALL_TYPE.INVERTED_CORNER || ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) === Boolean(topLeftVertex.y)))) {\n            uvOffset = 1\n        }\n\n        if (wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) {\n            if (topLeftVertex.y && bottomRightVertex.y) {\n                uvOffset = 0\n            }\n            if (topRightVertex.y && bottomLeftVertex.y) {\n                uvOffset = 3\n            }\n        }\n\n        /*\n        //\t\t0---1                1         0---1\n        //\t\t|   |  becomes      /|   and   |  /\n        //\t\t|   |             /  |         |/\n        //\t\t3---2            3---2         3\n        //\n        //\t\tOR\n        //\n        //\t\t0---1            0             0---1\n        //\t\t|   |  becomes   |\\    \t and    \\  |\n        //\t\t|   |            |  \\             \\|\n        //\t\t3---2            3---2             2\n        //\n        //\t\tTriangles 0-1-3 and 0-3-2\n        //\t\tQuad 0-1-3-2\n        */\n\n        const uv = [\n            new Vector2(0, 1),\n            new Vector2(1, 1),\n            new Vector2(1, 0),\n            new Vector2(0, 0),\n        ]\n\n        const bufferVertices = []\n        const bufferNormals = []\n\n        function addFaceAndNormals(a, b, c) {\n            bufferVertices.push(a, b, c)\n            const normal = new Vector3().subVectors(c, b)\n            normal.cross(new Vector3().subVectors(a, b))\n            normal.normalize()\n            bufferNormals.push(normal, normal, normal)\n        }\n\n        const uvIndexes = []\n        if (topRightVertex.y !== bottomLeftVertex.y ||\n            ((wallType === WALL_TYPE.WALL || wallType === WALL_TYPE.WEIRD_CREVICE) && !(topRightVertex.y && bottomLeftVertex.y))) {\n            uvIndexes.push(1, 3, 2)\n            uvIndexes.push(1, 0, 3)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topRightVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topRightVertex, topLeftVertex, bottomLeftVertex)\n        } else {\n            uvIndexes.push(0, 3, 2)\n            uvIndexes.push(0, 2, 1)\n\n            // apply height fine-tuning\n            topLeftVertex.y = topLeftHeight\n            topRightVertex.y = topRightHeight\n            bottomRightVertex.y = bottomRightHeight\n            bottomLeftVertex.y = bottomLeftHeight\n\n            addFaceAndNormals(topLeftVertex, bottomLeftVertex, bottomRightVertex)\n            addFaceAndNormals(topLeftVertex, bottomRightVertex, topRightVertex)\n        }\n\n        const bufferVertexUvs = uvIndexes.map(i => uv[(i + uvOffset) % 4])\n\n        const bufferGeometry = new BufferGeometry()\n        bufferGeometry.setAttribute('position', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferVertices))\n        bufferGeometry.setAttribute('normal', new BufferAttribute(new Float32Array(18), 3).copyVector3sArray(bufferNormals))\n        bufferGeometry.setAttribute('uv', new BufferAttribute(new Float32Array(12), 2).copyVector2sArray(bufferVertexUvs))\n        return bufferGeometry\n    }\n}\n","import { WorldEvent } from './WorldEvents'\nimport { Vector3 } from 'three'\nimport { EventKey } from './EventKeyEnum'\n\nexport class WorldLocationEvent extends WorldEvent {\n\n    location: Vector3\n\n    constructor(entityKey: EventKey, location: Vector3) {\n        super(entityKey)\n        this.location = location\n    }\n\n}\n\nexport class GenericDeathEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_DEATH, location)\n    }\n\n}\n\nexport class GenericMonsterEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_MONSTER, location)\n    }\n\n}\n\nexport class CrystalFoundEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_CRYSTAL_FOUND, location)\n    }\n\n}\n\nexport class UnderAttackEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_UNDER_ATTACK, location)\n    }\n\n}\n\nexport class LandslideEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_LANDSLIDE, location)\n    }\n\n}\n\nexport class PowerDrainEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_POWER_DRAIN, location)\n    }\n\n}\n\nexport class SlugEmergeEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_SLUG_EMERGE, location)\n    }\n\n}\n\nexport class RaiderDiscoveredEvent extends WorldLocationEvent {\n\n    constructor(location: Vector3) {\n        super(EventKey.LOCATION_RAIDER_DISCOVERED, location)\n    }\n\n}\n","// javascript-astar 0.4.1 (converted to typescript by Scarabol)\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n\nfunction pathTo(node) {\n    let curr = node\n    const path = []\n    while (curr.parent) {\n        path.unshift(curr)\n        curr = curr.parent\n    }\n    return path\n}\n\nfunction getHeap() {\n    return new BinaryHeap(function (node) {\n        return node.f\n    })\n}\n\nexport const astar = {\n\n    /**\n     * Perform an A* Search on a graph given a start and end node.\n     * @param {Graph} graph\n     * @param {GridNode} start\n     * @param {GridNode} end\n     * @param {Object} [options]\n     * @param {boolean} [options.closest] Specifies whether to return the\n     path to the closest node if the target is unreachable.\n     * @param {Function} [options.heuristic] Heuristic function (see\n     *          astar.heuristics).\n     */\n    search(graph: Graph, start: GridNode, end: GridNode, options = null): GridNode[] {\n        graph.cleanDirty()\n        options = options || {}\n        const heuristic = options.heuristic || astar.heuristics.manhattan\n        const closest = options.closest || false\n\n        const openHeap = getHeap()\n        let closestNode = start  // set the start node to be the closest if required\n\n        start.h = heuristic(start, end)\n        graph.markDirty(start)\n\n        openHeap.push(start)\n\n        while (openHeap.size() > 0) {\n\n            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n            const currentNode = openHeap.pop()\n\n            // End case -- result has been found, return the traced path.\n            if (currentNode === end) {\n                return pathTo(currentNode)\n            }\n\n            // Normal case -- move currentNode from open to closed, process each of its neighbors.\n            currentNode.closed = true\n\n            // Find all neighbors for the current node.\n            const neighbors = graph.neighbors(currentNode)\n\n            let i = 0\n            const il = neighbors.length\n            for (; i < il; ++i) {\n                const neighbor = neighbors[i]\n\n                if (neighbor.closed || neighbor.isWall()) {\n                    // Not a valid node to process, skip to next neighbor.\n                    continue\n                }\n\n                // The g score is the shortest distance from start to current node.\n                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n                const gScore = currentNode.g + neighbor.getCost(currentNode)\n                const beenVisited = neighbor.visited\n\n                if (!beenVisited || gScore < neighbor.g) {\n\n                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n                    neighbor.visited = true\n                    neighbor.parent = currentNode\n                    neighbor.h = neighbor.h || heuristic(neighbor, end)\n                    neighbor.g = gScore\n                    neighbor.f = neighbor.g + neighbor.h\n                    graph.markDirty(neighbor)\n                    if (closest) {\n                        // If the neighbour is closer than the current closestNode or if it's equally close but has\n                        // a cheaper path than the current closest node then it becomes the closest node\n                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n                            closestNode = neighbor\n                        }\n                    }\n\n                    if (!beenVisited) {\n                        // Pushing to heap will put it in proper place based on the 'f' value.\n                        openHeap.push(neighbor)\n                    } else {\n                        // Already seen the node, but since it has been rescored we need to reorder it in the heap\n                        openHeap.rescoreElement(neighbor)\n                    }\n                }\n            }\n        }\n\n        if (closest) {\n            return pathTo(closestNode)\n        }\n\n        // No result was found - empty array signifies failure to find path.\n        return []\n    },\n\n    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n    heuristics: {\n        manhattan(pos0, pos1) {\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return d1 + d2\n        },\n\n        diagonal(pos0, pos1) {\n            const D = 1\n            const D2 = Math.sqrt(2)\n            const d1 = Math.abs(pos1.x - pos0.x)\n            const d2 = Math.abs(pos1.y - pos0.y)\n            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2))\n        },\n    },\n\n    cleanNode(node) {\n        node.f = 0\n        node.g = 0\n        node.h = 0\n        node.visited = false\n        node.closed = false\n        node.parent = null\n    },\n}\n\nexport class Graph {\n\n    readonly nodes: GridNode[] = []\n    readonly diagonal: boolean\n    readonly grid: GridNode[][] = []\n    dirtyNodes: GridNode[] = []\n\n    /**\n     * A graph memory structure\n     * @param {Array} gridIn 2D array of input weights\n     * @param {Object} [options]\n     * @param {boolean} [options.diagonal] Specifies whether diagonal moves are allowed\n     */\n    constructor(gridIn: number[][], options = null) {\n        options = options || {}\n        this.diagonal = !!options.diagonal\n        for (let x = 0; x < gridIn.length; x++) {\n            this.grid[x] = []\n\n            let y = 0\n            const row = gridIn[x]\n            for (; y < row.length; y++) {\n                const node = new GridNode(x, y, row[y])\n                this.grid[x][y] = node\n                this.nodes.push(node)\n            }\n        }\n        this.init()\n    }\n\n    init() {\n        this.dirtyNodes = []\n        for (let i = 0; i < this.nodes.length; i++) {\n            astar.cleanNode(this.nodes[i])\n        }\n    }\n\n    cleanDirty() {\n        for (let i = 0; i < this.dirtyNodes.length; i++) {\n            astar.cleanNode(this.dirtyNodes[i])\n        }\n        this.dirtyNodes = []\n    }\n\n    markDirty(node) {\n        this.dirtyNodes.push(node)\n    }\n\n    neighbors(node: GridNode) {\n        const ret: GridNode[] = []\n        const x = node.x\n        const y = node.y\n        const grid = this.grid\n\n        // West\n        if (grid[x - 1] && grid[x - 1][y]) {\n            ret.push(grid[x - 1][y])\n        }\n\n        // East\n        if (grid[x + 1] && grid[x + 1][y]) {\n            ret.push(grid[x + 1][y])\n        }\n\n        // South\n        if (grid[x] && grid[x][y - 1]) {\n            ret.push(grid[x][y - 1])\n        }\n\n        // North\n        if (grid[x] && grid[x][y + 1]) {\n            ret.push(grid[x][y + 1])\n        }\n\n        if (this.diagonal) {\n            // Southwest\n            if (grid[x - 1] && grid[x - 1][y - 1]) {\n                ret.push(grid[x - 1][y - 1])\n            }\n\n            // Southeast\n            if (grid[x + 1] && grid[x + 1][y - 1]) {\n                ret.push(grid[x + 1][y - 1])\n            }\n\n            // Northwest\n            if (grid[x - 1] && grid[x - 1][y + 1]) {\n                ret.push(grid[x - 1][y + 1])\n            }\n\n            // Northeast\n            if (grid[x + 1] && grid[x + 1][y + 1]) {\n                ret.push(grid[x + 1][y + 1])\n            }\n        }\n\n        return ret\n    }\n\n    toString() {\n        const graphString = []\n        const nodes = this.grid\n        for (let x = 0; x < nodes.length; x++) {\n            const rowDebug = []\n            const row = nodes[x]\n            for (let y = 0; y < row.length; y++) {\n                rowDebug.push(row[y].weight)\n            }\n            graphString.push(rowDebug.join(' '))\n        }\n        return graphString.join('\\n')\n    }\n}\n\nclass GridNode {\n\n    x: number\n    y: number\n    weight: number\n    h: number\n    closed: boolean\n    visited: boolean\n    g: number\n    parent: GridNode\n    f: number\n\n    constructor(x, y, weight) {\n        this.x = x\n        this.y = y\n        this.weight = weight\n    }\n\n    toString() {\n        return '[' + this.x + ' ' + this.y + ']'\n    }\n\n    getCost(fromNeighbor: GridNode) {\n        // Take diagonal weight into consideration.\n        if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n            return this.weight * 1.41421\n        }\n        return this.weight\n    }\n\n    isWall() {\n        return this.weight === 0\n    }\n}\n\nclass BinaryHeap {\n\n    content = []\n    scoreFunction\n\n    constructor(scoreFunction) {\n        this.content = []\n        this.scoreFunction = scoreFunction\n    }\n\n    push(element) {\n        // Add the new element to the end of the array.\n        this.content.push(element)\n\n        // Allow it to sink down.\n        this.sinkDown(this.content.length - 1)\n    }\n\n    pop() {\n        // Store the first element so we can return it later.\n        const result = this.content[0]\n        // Get the element at the end of the array.\n        const end = this.content.pop()\n        // If there are any elements left, put the end element at the\n        // start, and let it bubble up.\n        if (this.content.length > 0) {\n            this.content[0] = end\n            this.bubbleUp(0)\n        }\n        return result\n    }\n\n    remove(node) {\n        const i = this.content.indexOf(node)\n\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        const end = this.content.pop()\n\n        if (i !== this.content.length - 1) {\n            this.content[i] = end\n\n            if (this.scoreFunction(end) < this.scoreFunction(node)) {\n                this.sinkDown(i)\n            } else {\n                this.bubbleUp(i)\n            }\n        }\n    }\n\n    size() {\n        return this.content.length\n    }\n\n    rescoreElement(node) {\n        this.sinkDown(this.content.indexOf(node))\n    }\n\n    sinkDown(n) {\n        // Fetch the element that has to be sunk.\n        const element = this.content[n]\n\n        // When at 0, an element can not sink any further.\n        while (n > 0) {\n\n            // Compute the parent element's index, and fetch it.\n            const parentN = ((n + 1) >> 1) - 1\n            const parent = this.content[parentN]\n            // Swap the elements if the parent is greater.\n            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n                this.content[parentN] = element\n                this.content[n] = parent\n                // Update 'n' to continue at the new position.\n                n = parentN\n            }\n            // Found a parent that is less, no need to sink any further.\n            else {\n                break\n            }\n        }\n    }\n\n    bubbleUp(n) {\n        // Look up the target element and its score.\n        const length = this.content.length\n        const element = this.content[n]\n        const elemScore = this.scoreFunction(element)\n\n        while (true) {\n            // Compute the indices of the child elements.\n            const child2N = (n + 1) << 1\n            const child1N = child2N - 1\n            // This is used to store the new position of the element, if any.\n            let swap = null\n            let child1Score\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                const child1 = this.content[child1N]\n                child1Score = this.scoreFunction(child1)\n\n                // If the score is less than our element's, we need to swap.\n                if (child1Score < elemScore) {\n                    swap = child1N\n                }\n            }\n\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                const child2 = this.content[child2N]\n                const child2Score = this.scoreFunction(child2)\n                if (child2Score < (swap === null ? elemScore : child1Score)) {\n                    swap = child2N\n                }\n            }\n\n            // If the element needs to be moved, swap it, and continue.\n            if (swap !== null) {\n                this.content[n] = this.content[swap]\n                this.content[swap] = element\n                n = swap\n            }\n            // Otherwise, we are done.\n            else {\n                break\n            }\n        }\n    }\n}\n","import { Surface } from './model/map/Surface'\nimport { Terrain } from './model/map/Terrain'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { WorldManager } from './WorldManager'\nimport { TILESIZE } from '../main'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { Graph } from './model/map/astar'\n\nexport class TerrainLoader {\n\n    static loadTerrain(levelConf: LevelEntryCfg, worldMgr: WorldManager): Terrain {\n        const tileSize = levelConf.blockSize\n        if (tileSize !== TILESIZE) console.error('Unexpected tile size in level configuration: ' + tileSize)\n        const terrain = new Terrain(worldMgr)\n\n        const themeName = levelConf.textureSet[1]\n        terrain.textureSet = ResourceManager.cfg('Textures', themeName)\n        // console.log(terrain.textureSet);\n\n        const terrainMap = ResourceManager.getMap(levelConf.terrainMap)\n        terrain.width = terrainMap.width\n        terrain.height = terrainMap.height\n        const pathMap = ResourceManager.getMap(levelConf.pathMap)?.level\n        const surfaceMap = ResourceManager.getMap(levelConf.surfaceMap)?.level\n        const predugMap = ResourceManager.getMap(levelConf.predugMap)?.level\n        const cryOreMap = ResourceManager.getMap(levelConf.cryOreMap)?.level\n        const fallinMap = ResourceManager.getMap(levelConf.fallinMap)?.level\n        const erodeMap = ResourceManager.getMap(levelConf.erodeMap)?.level\n\n        // maps parsed from WAD are row-wise saved, which means y (row) comes first and x (column) second\n        for (let r = 0; r < terrainMap.level.length; r++) {\n            for (let c = 0; c < (terrainMap.level)[r].length; c++) {\n                (terrain.surfaces)[c] = (terrain.surfaces)[c] || []\n                const surfaceTypeNum = (terrainMap.level)[r][c]\n                let surfaceType = SurfaceType.getByNum(surfaceTypeNum)\n                const predugLevel = predugMap[r][c]\n                if (predugLevel === PredugMap.CAVERN_EXPOSED) {\n                    if (surfaceType === SurfaceType.GROUND || surfaceType === SurfaceType.DIRT) {\n                        surfaceType = SurfaceType.GROUND\n                    } else if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) {\n                        console.warn('Unexpected cavern surface type: ' + surfaceType.name)\n                    }\n                } else if (predugLevel === PredugMap.SLUG_HOLE_EXPOSED || predugLevel === PredugMap.SLUG_HOLE_HIDDEN) {\n                    surfaceType = SurfaceType.SLUG_HOLE\n                } else if (predugLevel !== PredugMap.WALL && predugLevel !== PredugMap.CAVERN_HIDDEN) {\n                    console.warn('Unexpected predug level: ' + predugLevel)\n                }\n                // give the path map the highest priority, if it exists\n                const pathMapLevel = pathMap && surfaceType.floor ? pathMap[r][c] : PathMap.NONE\n                if (pathMapLevel === PathMap.RUBBLE) {\n                    surfaceType = SurfaceType.RUBBLE4\n                } else if (pathMapLevel === PathMap.POWER_PATH) {\n                    surfaceType = SurfaceType.POWER_PATH\n                } else if (pathMapLevel !== PathMap.NONE) {\n                    console.warn('Unexpected path map level: ' + pathMapLevel)\n                }\n\n                const surface = new Surface(terrain, surfaceType, c, r, surfaceMap[r][c])\n                if (cryOreMap) {\n                    const currentCryOre = cryOreMap[r][c]\n                    if (currentCryOre % 2 === 1) {\n                        surface.containedCrystals = (currentCryOre + 1) / 2\n                    } else {\n                        surface.containedOres = currentCryOre / 2\n                    }\n                }\n\n                (terrain.surfaces)[c].push(surface)\n            }\n        }\n\n        // exlpore predug surfaces\n        terrain.surfaces.forEach(c => c.forEach(s => {\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_EXPOSED || predugMap[s.y][s.x] === PredugMap.SLUG_HOLE_EXPOSED) { // map are rows (y) first, columns (x) second\n                for (let x = s.x - 1; x <= s.x + 1; x++) {\n                    for (let y = s.y - 1; y <= s.y + 1; y++) {\n                        terrain.getSurfaceOrNull(x, y).discovered = true\n                    }\n                }\n            }\n        }))\n\n        // create hidden caverns\n        terrain.surfaces.forEach(c => c.forEach(s => {\n            const surface = terrain.getSurfaceOrNull(s.x, s.y)\n            if (predugMap[s.y][s.x] === PredugMap.CAVERN_HIDDEN && !surface.discovered) {\n                surface.surfaceType = SurfaceType.GROUND\n            }\n        }))\n\n        terrain.graphWalk = new Graph(terrain.surfaces.map(c => c.map(s => s.getGraphWalkWeight())))\n\n        // crumble unsupported walls\n        terrain.surfaces.forEach((c) => c.forEach((s) => {\n            if (!s.isSupported()) s.collapse()\n        }))\n\n        terrain.updateSurfaceMeshes(true)\n\n        if (fallinMap) {\n            for (let x = 0; x < terrain.width; x++) {\n                for (let y = 0; y < terrain.height; y++) {\n                    terrain.getSurface(x, y).setFallinLevel(fallinMap[y][x]) // rows (y) before columns (x) used in maps\n                }\n            }\n        }\n\n        if (erodeMap) { // TODO implement lava erosion\n            console.warn('Lucky you! Lava erosion not yet implemented')\n        }\n\n        return terrain\n    }\n\n}\n\nenum PathMap {\n\n    NONE = 0,\n    RUBBLE = 1,\n    POWER_PATH = 2,\n\n}\n\nenum PredugMap {\n\n    WALL = 0,\n    CAVERN_EXPOSED = 1,\n    CAVERN_HIDDEN = 2,\n    SLUG_HOLE_EXPOSED = 3,\n    SLUG_HOLE_HIDDEN = 4,\n}\n","import { Vector2 } from 'three'\nimport { PathTarget } from '../PathTarget'\n\nexport class TerrainPath {\n\n    target: PathTarget = null\n    locations: Vector2[] = []\n    lengthSq: number = 0\n\n    constructor(target: PathTarget, locations: Vector2[] | Vector2) {\n        this.target = target\n        this.locations = Array.isArray(locations) ? locations : [locations]\n        for (let c = 0; c < this.locations.length - 1; c++) {\n            const start = this.locations[c]\n            const end = this.locations[c + 1]\n            this.lengthSq += start.distanceToSquared(end)\n        }\n    }\n\n    addLocation(location: Vector2): TerrainPath {\n        this.locations.push(location)\n        if (this.locations.length > 1) {\n            this.lengthSq += this.locations[this.locations.length - 2].distanceToSquared(location)\n        }\n        return this\n    }\n\n    get targetPosition(): Vector2 {\n        return this.locations[this.locations.length - 1] || null\n    }\n\n    get firstLocation(): Vector2 {\n        return this.locations[0] || null\n    }\n\n}\n","import { Group, Vector2, Vector3 } from 'three'\nimport { Surface } from './Surface'\nimport { WorldManager } from '../../WorldManager'\nimport { SurfaceType } from './SurfaceType'\nimport { TILESIZE } from '../../../main'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityAddedEvent, EntityType } from '../../../event/WorldEvents'\nimport { BuildingEntity } from '../BuildingEntity'\nimport { astar, Graph } from './astar'\nimport { TerrainPath } from './TerrainPath'\nimport { PathTarget } from '../PathTarget'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class Terrain {\n\n    worldMgr: WorldManager\n    textureSet: any = {}\n    width: number = 0\n    height: number = 0\n    surfaces: Surface[][] = []\n    floorGroup: Group = new Group()\n    roofGroup: Group = new Group()\n    graphWalk: Graph = null\n    cachedPaths = new Map<string, TerrainPath>()\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        this.floorGroup.scale.set(TILESIZE, TILESIZE, TILESIZE)\n        this.roofGroup.visible = false // keep roof hidden unless switched to other camera\n        EventBus.registerEventListener(EventKey.ENTITY_ADDED, (event: EntityAddedEvent) => {\n            if (event.type !== EntityType.BUILDING) return;\n            (event.entity as BuildingEntity).surfaces.forEach((bSurf) => {\n                for (let x = -1; x <= 1; x++) {\n                    for (let y = -1; y <= 1; y++) {\n                        this.getSurface(bSurf.x + x, bSurf.y + y).updateTexture()\n                    }\n                }\n            })\n        })\n    }\n\n    getSurfaceFromWorld(worldPosition: Vector3): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.z)\n    }\n\n    getSurfaceFromWorld2D(worldPosition: Vector2): Surface | null {\n        return this.getSurfaceFromWorldXZ(worldPosition.x, worldPosition.y)\n    }\n\n    getSurfaceFromWorldXZ(worldX: number, worldZ: number): Surface | null {\n        return this.getSurface(worldX / TILESIZE, worldZ / TILESIZE)\n    }\n\n    getSurface(x, y): Surface {\n        x = Math.floor(x)\n        y = Math.floor(y)\n        return this.getSurfaceOrNull(x, y) || new Surface(this, SurfaceType.SOLID_ROCK, x, y, 0)\n    }\n\n    getSurfaceOrNull(x, y): Surface | null {\n        if (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n            return this.surfaces[x][y]\n        } else {\n            return null\n        }\n    }\n\n    updateSurfaceMeshes(force: boolean = false) {\n        this.surfaces.forEach((r) => r.forEach((s) => s.updateMesh(force)))\n        this.floorGroup.updateWorldMatrix(true, true) // otherwise ray intersection is not working before rendering\n        this.resetGraphWalk()\n    }\n\n    resetGraphWalk() {\n        this.graphWalk.init()\n        this.cachedPaths.clear()\n        console.log('Cached paths cleared')\n    }\n\n    findPath(start: Vector2, target: PathTarget): TerrainPath {\n        const end = target.targetLocation\n        const startSurface = this.getSurfaceFromWorldXZ(start.x, start.y)\n        const endSurface = this.getSurfaceFromWorldXZ(end.x, end.y)\n        if (startSurface.x === endSurface.x && startSurface.y === endSurface.y) {\n            return new TerrainPath(target, end)\n        }\n        const cacheIdentifier = startSurface.x + '/' + startSurface.y + ' -> ' + endSurface.x + '/' + endSurface.y\n        const cachedPath = this.cachedPaths.get(cacheIdentifier)\n        if (cachedPath) {\n            return cachedPath.addLocation(end)\n        } else {\n            return this.searchPath(startSurface, endSurface, target, cacheIdentifier)\n        }\n    }\n\n    private searchPath(startSurface: Surface, endSurface: Surface, target: PathTarget, cacheIdentifier: string): TerrainPath {\n        const startNode = this.graphWalk.grid[startSurface.x][startSurface.y]\n        const endNode = this.graphWalk.grid[endSurface.x][endSurface.y]\n        const worldPath = astar.search(this.graphWalk, startNode, endNode).map(p => this.getSurface(p.x, p.y).getCenterWorld2D())\n        if (worldPath.length < 1) return null // no path found\n        // replace last surface center with actual target position\n        worldPath.pop()\n        worldPath.push(target.targetLocation)\n        this.cachedPaths.set(cacheIdentifier, new TerrainPath(target, worldPath.slice(0, -1))) // cache shallow copy to avoid interference\n        return new TerrainPath(target, worldPath)\n    }\n\n    findFallInOrigin(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isReinforcable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isReinforcable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isReinforcable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isReinforcable()) return [bottomSurface.x, bottomSurface.y]\n        const leftSurface2 = this.getSurface(x - 1, y)\n        if (leftSurface2.isDigable()) return [leftSurface2.x, leftSurface2.y]\n        const topSurface2 = this.getSurface(x, y - 1)\n        if (topSurface2.isDigable()) return [topSurface2.x, topSurface2.y]\n        const rightSurface2 = this.getSurface(x + 1, y)\n        if (rightSurface2.isDigable()) return [rightSurface2.x, rightSurface2.y]\n        const bottomSurface2 = this.getSurface(x, y + 1)\n        if (bottomSurface2.isDigable()) return [bottomSurface2.x, bottomSurface2.y]\n        return null\n    }\n\n    findFallInTarget(x: number, y: number): [number, number] {\n        const leftSurface = this.getSurface(x - 1, y)\n        if (leftSurface.isWalkable()) return [leftSurface.x, leftSurface.y]\n        const topSurface = this.getSurface(x, y - 1)\n        if (topSurface.isWalkable()) return [topSurface.x, topSurface.y]\n        const rightSurface = this.getSurface(x + 1, y)\n        if (rightSurface.isWalkable()) return [rightSurface.x, rightSurface.y]\n        const bottomSurface = this.getSurface(x, y + 1)\n        if (bottomSurface.isWalkable()) return [bottomSurface.x, bottomSurface.y]\n        return null\n    }\n\n    dispose() {\n        this.surfaces.forEach(c => c.forEach(s => s.dispose()))\n    }\n\n}\n","import { Vector3 } from 'three'\n\nexport class EntityStep {\n\n    vec: Vector3 = null\n    targetReached: boolean = false\n\n    constructor(dx: number, dy: number, dz: number) {\n        this.vec = new Vector3(dx, dy, dz)\n    }\n\n}\n","export enum MoveState {\n\n    MOVED,\n    TARGET_REACHED,\n    TARGET_UNREACHABLE,\n\n}\n","import { AnimEntity } from './anim/AnimEntity'\nimport { Vector2, Vector3 } from 'three'\nimport { AnimationEntityType } from './anim/AnimationEntityType'\nimport { MovableEntityStats } from '../../cfg/MovableEntityStats'\nimport { EntityStep } from './EntityStep'\nimport { MoveState } from './MoveState'\nimport { JOB_ACTION_RANGE } from '../../main'\nimport { TerrainPath } from './map/TerrainPath'\nimport { PathTarget } from './PathTarget'\nimport { AnimEntityActivity } from './activities/AnimEntityActivity'\n\nexport abstract class MovableEntity extends AnimEntity {\n\n    currentPath: TerrainPath = null\n\n    constructor(entityType: AnimationEntityType) {\n        super(entityType)\n    }\n\n    abstract get stats(): MovableEntityStats\n\n    getPosition(): Vector3 {\n        return new Vector3(this.group.position.x, this.group.position.y, this.group.position.z)\n    }\n\n    getPosition2D(): Vector2 {\n        return new Vector2(this.group.position.x, this.group.position.z)\n    }\n\n    getSpeed(): number {\n        return this.stats.RouteSpeed[this.level] * (this.animation?.transcoef || 1) * (this.isOnPath() ? this.stats.PathCoef : 1)\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        if (!this.currentPath || !target.some((t) => t.targetLocation.equals(this.currentPath.target.targetLocation))) {\n            const paths = target.map((t) => this.findPathToTarget(t))\n                .sort((l, r) => l.lengthSq - r.lengthSq)\n            this.currentPath = paths.length > 0 ? paths[0] : null\n            if (!this.currentPath) return MoveState.TARGET_UNREACHABLE\n        }\n        const nextLocation = this.currentPath.firstLocation\n        this.group.lookAt(new Vector3(nextLocation.x, this.group.position.y, nextLocation.y))\n        const step = this.determineStep()\n        if (step.targetReached || this.currentPath.target.isInArea(this.getPosition2D())) {\n            return MoveState.TARGET_REACHED\n        } else {\n            this.group.position.add(step.vec)\n            this.changeActivity(this.getRouteActivity()) // only change when actually moving\n            return MoveState.MOVED\n        }\n    }\n\n    abstract getRouteActivity(): AnimEntityActivity\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return new TerrainPath(target, target.targetLocation)\n    }\n\n    determineStep(): EntityStep {\n        const step = this.getEntityStep(this.currentPath.firstLocation)\n        const entitySpeed = this.getSpeed() // TODO use average speed between current and target position\n        const stepLengthSq = step.vec.lengthSq()\n        if (stepLengthSq > entitySpeed * entitySpeed && stepLengthSq > JOB_ACTION_RANGE * JOB_ACTION_RANGE) {\n            step.vec.setLength(entitySpeed)\n        } else if (this.currentPath.locations.length > 1) {\n            this.currentPath.locations.shift()\n            return this.determineStep()\n        } else {\n            step.targetReached = true\n        }\n        return step\n    }\n\n    getEntityStep(target: Vector2): EntityStep {\n        return new EntityStep(target.x - this.group.position.x, this.determinePosY(target.x, target.y) - this.determinePosY(this.group.position.x, this.group.position.z), target.y - this.group.position.z)\n    }\n\n    determinePosY(x: number, z: number) {\n        return this.worldMgr.getFloorHeight(x, z)\n    }\n\n    isOnRubble() {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).hasRubble()\n    }\n\n    isOnPath(): boolean {\n        return this.worldMgr.sceneManager.terrain.getSurfaceFromWorld(this.group.position).isPath()\n    }\n\n}\n","import { MovableEntity } from './MovableEntity'\nimport { Selectable, SelectionType } from '../../game/model/Selectable'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Job } from '../../game/model/job/Job'\nimport { Vector3 } from 'three'\nimport { NATIVE_FRAMERATE } from '../../main'\nimport { clearIntervalSafe } from '../../core/Util'\nimport { Carryable } from './collect/Carryable'\nimport { SelectionEvent } from '../../event/LocalEvents'\nimport { RaiderSkill } from './RaiderSkill'\nimport { RaiderTool } from './RaiderTool'\nimport { PathTarget } from './PathTarget'\n\nexport abstract class FulfillerEntity extends MovableEntity implements Selectable {\n\n    selectionType: SelectionType\n    selected: boolean\n    workInterval = null\n    job: Job = null\n    followUpJob: Job = null\n    carries: Carryable = null\n    jobWorkplaces: PathTarget[] = []\n\n    protected constructor(selectionType: SelectionType, aeFilename: string) {\n        super(ResourceManager.getAnimationEntityType(aeFilename))\n        this.selectionType = selectionType\n        this.group.userData = {'selectable': this}\n        this.workInterval = setInterval(this.work.bind(this), 1000 / NATIVE_FRAMERATE) // TODO do not use interval, make work trigger itself (with timeout/interval) until work is done\n    }\n\n    resetWorkInterval() {\n        this.workInterval = clearIntervalSafe(this.workInterval)\n    }\n\n    abstract work()\n\n    dropItem() {\n        if (!this.carries) return\n        this.carryJoint?.remove(this.carries.group)\n        this.carries.group.position.copy(this.group.position)\n        this.carryJoint?.getWorldPosition(this.carries.group.position)\n        this.carries.group.position.y = this.worldMgr.getFloorHeight(this.carries.group.position.x, this.carries.group.position.z)\n        this.carries = null\n    }\n\n    pickupItem(item: Carryable) {\n        this.carries = item\n        if (this.carryJoint) this.carryJoint.add(this.carries.group)\n        this.carries.group.position.set(0, 0, 0)\n    }\n\n    setJob(job: Job, followUpJob: Job = null) {\n        if (this.job !== job) this.stopJob()\n        this.job = job\n        if (this.job) this.job.assign(this)\n        this.followUpJob = followUpJob\n        if (this.followUpJob) this.followUpJob.assign(this)\n        this.jobWorkplaces = this.job.getWorkplaces()\n    }\n\n    stopJob() {\n        this.dropItem()\n        if (!this.job) return\n        this.job.unassign(this)\n        if (this.followUpJob) this.followUpJob.unassign(this)\n        this.job = null\n        this.followUpJob = null\n        this.jobWorkplaces = []\n        this.changeActivity()\n    }\n\n    abstract hasTool(tool: RaiderTool)\n\n    abstract hasSkill(skill: RaiderSkill)\n\n    getSelectionType(): SelectionType {\n        return this.selectionType\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    abstract select(): SelectionEvent;\n\n    abstract getSelectionCenter(): Vector3;\n\n}\n","export class RaiderTool {\n\n    static DRILL = new RaiderTool('drill')\n    static HAMMER = new RaiderTool('hammer')\n    static SHOVEL = new RaiderTool('shovel')\n    static SPANNER = new RaiderTool('spanner')\n    static FREEZERGUN = new RaiderTool('freezergun')\n    static LASER = new RaiderTool('laser')\n    static PUSHERGUN = new RaiderTool('pushergun')\n    static BIRDSCARER = new RaiderTool('birdscarer')\n\n    name: string\n\n    constructor(name: string) {\n        this.name = name\n    }\n\n}\n","import { SelectionType } from '../../game/model/Selectable'\nimport { EventBus } from '../../event/EventBus'\nimport { RaiderSelected, SelectionEvent } from '../../event/LocalEvents'\nimport { FulfillerEntity } from './FulfillerEntity'\nimport { GameState } from '../../game/model/GameState'\nimport { MathUtils, Vector2, Vector3 } from 'three'\nimport { EntityAddedEvent, EntityType, OreFoundEvent, RaiderTrained } from '../../event/WorldEvents'\nimport { CrystalFoundEvent, RaiderDiscoveredEvent } from '../../event/WorldLocationEvent'\nimport { BaseActivity } from './activities/BaseActivity'\nimport { RaiderActivity } from './activities/RaiderActivity'\nimport { DynamiteJob } from '../../game/model/job/surface/DynamiteJob'\nimport { DrillJob } from '../../game/model/job/surface/DrillJob'\nimport { ClearRubbleJob } from '../../game/model/job/surface/ClearRubbleJob'\nimport { SurfaceType } from './map/SurfaceType'\nimport { getRandom, getRandomInclusive } from '../../core/Util'\nimport { Crystal } from './collect/Crystal'\nimport { Ore } from './collect/Ore'\nimport { CollectJob } from '../../game/model/job/CollectJob'\nimport { TrainJob } from '../../game/model/job/TrainJob'\nimport { GetToolJob } from '../../game/model/job/GetToolJob'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { RaiderTool } from './RaiderTool'\nimport { RaiderSkill } from './RaiderSkill'\nimport { MoveState } from './MoveState'\nimport { JobType } from '../../game/model/job/JobType'\nimport { TerrainPath } from './map/TerrainPath'\nimport { PathTarget } from './PathTarget'\nimport { CollectPathTarget } from './CollectionTarget'\nimport degToRad = MathUtils.degToRad\n\nexport class Raider extends FulfillerEntity {\n\n    tools: RaiderTool[] = []\n    skills: RaiderSkill[] = []\n    slipped: boolean = false\n\n    constructor() {\n        super(SelectionType.PILOT, 'mini-figures/pilot/pilot.ae')\n        this.tools = [RaiderTool.DRILL]\n        this.skills = []\n        this.pickSphereRadius = this.stats.PickSphere / 2\n    }\n\n    get stats() {\n        return ResourceManager.stats.Pilot\n    }\n\n    findPathToTarget(target: PathTarget): TerrainPath {\n        return this.worldMgr.sceneManager.terrain.findPath(this.getPosition2D(), target)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.raidersUndiscovered.remove(this)\n        GameState.raiders.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, this))\n        EventBus.publishEvent(new RaiderDiscoveredEvent(this.getPosition()))\n    }\n\n    select(): SelectionEvent {\n        this.selectionFrame.visible = !this.slipped\n        if (this.selected || this.slipped) return null\n        this.selected = true\n        this.changeActivity()\n        return new RaiderSelected(this)\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    isDriving(): boolean {\n        return false // TODO implement vehicles\n    }\n\n    getRouteActivity(): BaseActivity {\n        if (this.isOnRubble()) {\n            return !!this.carries ? RaiderActivity.CarryRubble : RaiderActivity.routeRubble\n        } else {\n            return !!this.carries ? RaiderActivity.Carry : RaiderActivity.Route\n        }\n    }\n\n    moveToClosestTarget(target: PathTarget[]): MoveState {\n        const result = super.moveToClosestTarget(target)\n        if (result === MoveState.MOVED) {\n            GameState.getNearbySpiders(this).some((spider) => {\n                if (this.group.position.distanceToSquared(spider.group.position) < this.radiusSq + spider.radiusSq) {\n                    this.slip()\n                    spider.onDeath()\n                    return true\n                }\n            })\n        } else if (result === MoveState.TARGET_UNREACHABLE) {\n            console.log('Entity could not move to job target, stopping job')\n            this.stopJob()\n        }\n        return result\n    }\n\n    slip() {\n        if (getRandomInclusive(0, 100) < 10) this.stopJob()\n        this.dropItem()\n        this.slipped = true\n        this.changeActivity(RaiderActivity.Slip, () => {\n            this.slipped = false\n        })\n    }\n\n    moveToClosestWorkplace(): boolean {\n        return this.moveToClosestTarget(this.jobWorkplaces) === MoveState.TARGET_REACHED\n    }\n\n    work() {\n        if (!this.job || this.selected || this.slipped) return\n        if (this.job.type === JobType.DRILL) {\n            const surfJob = this.job as DrillJob\n            if (this.moveToClosestWorkplace()) {\n                let drillTimeMs = null\n                if (surfJob.surface.surfaceType === SurfaceType.HARD_ROCK) {\n                    drillTimeMs = this.stats.HardDrillTime[this.level] * 1000\n                } else if (surfJob.surface.surfaceType === SurfaceType.LOOSE_ROCK) {\n                    drillTimeMs = this.stats.LooseDrillTime[this.level] * 1000\n                } else if (surfJob.surface.surfaceType === SurfaceType.DIRT) {\n                    drillTimeMs = this.stats.SoilDrillTime[this.level] * 1000\n                } else if (surfJob.surface.surfaceType === SurfaceType.ORE_SEAM ||\n                    surfJob.surface.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                    drillTimeMs = this.stats.SeamDrillTime[this.level] * 1000\n                }\n                if (drillTimeMs === 0) console.warn('According to cfg this entity cannot drill this material')\n                const focusPoint = surfJob.surface.getCenterWorld()\n                focusPoint.y = this.group.position.y\n                this.group.lookAt(focusPoint)\n                this.changeActivity(RaiderActivity.Drill, () => {\n                    if (surfJob.surface.seamLevel > 0) {\n                        surfJob.surface.seamLevel--\n                        const vec = new Vector2().copy(this.getPosition2D()).sub(surfJob.surface.getCenterWorld2D())\n                            .multiplyScalar(0.3 + getRandom(3) / 10)\n                            .rotateAround(new Vector2(0, 0), degToRad(-10 + getRandom(20)))\n                            .add(this.getPosition2D())\n                        if (surfJob.surface.surfaceType === SurfaceType.CRYSTAL_SEAM) {\n                            const crystal = this.worldMgr.addCollectable(new Crystal(), vec)\n                            EventBus.publishEvent(new CrystalFoundEvent(crystal.getPosition()))\n                        } else if (surfJob.surface.surfaceType === SurfaceType.ORE_SEAM) {\n                            this.worldMgr.addCollectable(new Ore(), vec)\n                            EventBus.publishEvent(new OreFoundEvent())\n                        }\n                        this.changeActivity()\n                    } else {\n                        this.completeJob()\n                    }\n                }, drillTimeMs)\n            }\n        } else if (this.job.type === JobType.CLEAR_RUBBLE) {\n            const surfJob = this.job as ClearRubbleJob\n            if (this.moveToClosestWorkplace()) {\n                this.changeActivity(RaiderActivity.Clear, () => {\n                    this.changeActivity()\n                    this.job.onJobComplete()\n                    this.jobWorkplaces = this.job.getWorkplaces()\n                    if (!surfJob.surface.hasRubble()) this.stopJob()\n                })\n            }\n        } else if (this.job.type === JobType.REINFORCE) {\n            if (this.moveToClosestWorkplace()) {\n                this.changeActivity(RaiderActivity.Reinforce, () => {\n                    this.completeJob()\n                }, 2700)\n            }\n        } else if (this.job.type === JobType.BLOW) {\n            const bj = this.job as DynamiteJob\n            if (this.carries !== bj.dynamite) {\n                this.dropItem()\n                if (this.moveToClosestWorkplace()) {\n                    this.changeActivity(RaiderActivity.Collect, () => {\n                        this.pickupItem(bj.dynamite)\n                    })\n                }\n            } else if (this.moveToClosestTarget(bj.surface.getDigPositions().map((p) => new PathTarget(p)))) {\n                this.changeActivity(RaiderActivity.Place, () => {\n                    this.completeJob()\n                })\n            }\n        } else if (this.job.type === JobType.COLLECT) {\n            const collectJob = this.job as CollectJob\n            const collectJobItem = collectJob.item\n            if (this.carries !== collectJobItem) {\n                this.dropItem()\n                if (this.moveToClosestWorkplace()) {\n                    this.changeActivity(RaiderActivity.Collect, () => {\n                        this.pickupItem(collectJobItem)\n                    })\n                }\n            } else {\n                const moveResult = this.moveToClosestTarget(collectJobItem.getCarryTargets())\n                collectJobItem.setTargetSite((this.currentPath?.target as CollectPathTarget)?.site)\n                if (moveResult) {\n                    const collectPathTarget = this.currentPath.target as CollectPathTarget\n                    if (collectPathTarget.canGatherItem()) {\n                        const dropAction = collectPathTarget.getDropAction()\n                        this.changeActivity(dropAction, () => {\n                            this.completeJob()\n                            collectPathTarget.gatherItem(collectJobItem)\n                        })\n                    } else {\n                        this.changeActivity()\n                    }\n                }\n            }\n        } else if (this.job.type === JobType.MOVE) {\n            if (this.moveToClosestWorkplace()) {\n                this.changeActivity(this.getDefaultActivity(), () => {\n                    this.completeJob()\n                })\n            }\n        } else if (this.job.type === JobType.TRAIN) {\n            const trainJob = this.job as TrainJob\n            if (this.moveToClosestWorkplace()) {\n                this.changeActivity(RaiderActivity.Train, () => {\n                    this.skills.push(trainJob.skill)\n                    EventBus.publishEvent(new RaiderTrained(this, trainJob.skill))\n                    this.completeJob()\n                }, 10000) // XXX adjust training time\n            }\n        } else if (this.job.type === JobType.GET_TOOL) {\n            if (this.moveToClosestWorkplace()) {\n                this.tools.push((this.job as GetToolJob).tool)\n                this.completeJob()\n            }\n        } else if (this.job.type === JobType.EAT) {\n            this.changeActivity(RaiderActivity.Eat, () => {\n                // TODO implement endurance fill eat level\n                this.completeJob()\n            })\n        } else if (this.job.type === JobType.COMPLETE_POWER_PATH) {\n            if (this.moveToClosestWorkplace()) {\n                this.changeActivity(RaiderActivity.Clear, () => {\n                    this.completeJob()\n                })\n            }\n        }\n    }\n\n    private completeJob() {\n        this.dropItem()\n        this.job.onJobComplete()\n        if (this.job) this.job.unassign(this)\n        this.job = this.followUpJob\n        this.followUpJob = null\n        this.jobWorkplaces = this.job?.getWorkplaces() || []\n        this.changeActivity()\n    }\n\n    getDefaultActivity(): BaseActivity {\n        return this.carries ? RaiderActivity.CarryStand : super.getDefaultActivity()\n    }\n\n    beamUp() {\n        this.stopJob()\n        super.beamUp()\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        GameState.raiders.remove(this)\n    }\n\n    hasTool(tool: RaiderTool) {\n        return this.tools.indexOf(tool) !== -1\n    }\n\n    hasSkill(skill: RaiderSkill) {\n        return this.skills.indexOf(skill) !== -1\n    }\n\n}\n","import { EventBus } from '../../event/EventBus'\nimport { BuildingSelected, EntityDeselected, SelectionEvent } from '../../event/LocalEvents'\nimport { Building } from '../../game/model/entity/building/Building'\nimport { AnimEntity } from './anim/AnimEntity'\nimport { Selectable, SelectionType } from '../../game/model/Selectable'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { Matrix4, Vector2, Vector3 } from 'three'\nimport { GameState } from '../../game/model/GameState'\nimport { BuildingUpgraded, EntityAddedEvent, EntityType, MaterialAmountChanged } from '../../event/WorldEvents'\nimport { Surface } from './map/Surface'\nimport { CollectableEntity, CollectableType } from './collect/CollectableEntity'\nimport { BuildingActivity } from './activities/BuildingActivity'\nimport { BuildingEntityStats } from '../../cfg/BuildingEntityStats'\nimport { Ore } from './collect/Ore'\nimport { Crystal } from './collect/Crystal'\nimport { SurfaceType } from './map/SurfaceType'\nimport { AnimEntityActivity } from './activities/AnimEntityActivity'\nimport { EventKey } from '../../event/EventKeyEnum'\n\nexport class BuildingEntity extends AnimEntity implements Selectable {\n\n    type: Building\n    selected: boolean\n    powerSwitch: boolean = true\n    spawning: boolean = false\n    surfaces: Surface[] = []\n    upgradeCostOre: number = 5\n    upgradeCostBrick: number = 1\n    crystalsInUse: number = 0\n\n    constructor(buildingType: Building) {\n        super(ResourceManager.getAnimationEntityType(buildingType.aeFile))\n        this.type = buildingType\n        this.group.applyMatrix4(new Matrix4().makeScale(-1, 1, 1))\n        this.group.userData = {'selectable': this}\n        this.pickSphereRadius = this.stats.PickSphere / 2\n        this.upgradeCostOre = ResourceManager.cfg('Main', 'BuildingUpgradeCostOre') || 5\n        this.upgradeCostBrick = ResourceManager.cfg('Main', 'BuildingUpgradeCostStuds') || 5\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, (event: MaterialAmountChanged) => {\n            if (event.collectableType === CollectableType.CRYSTAL && this.powerSwitch && this.crystalsInUse < 1) {\n                this.turnOnPower()\n            }\n        })\n    }\n\n    get stats(): BuildingEntityStats {\n        return BuildingEntityStats.getByType(this.type)\n    }\n\n    getSelectionType(): SelectionType {\n        return SelectionType.BUILDING\n    }\n\n    select(): SelectionEvent {\n        this.selectionFrame.visible = true\n        if (!this.selected) {\n            this.selected = true\n            return new BuildingSelected(this)\n        }\n        return null\n    }\n\n    deselect() {\n        this.selectionFrame.visible = false\n        this.selected = false\n    }\n\n    getSelectionCenter(): Vector3 {\n        return this.pickSphere ? new Vector3().copy(this.pickSphere.position).applyMatrix4(this.group.matrixWorld) : null\n    }\n\n    getPickSphereCenter() {\n        const pickSphereCenter = this.getPosition()\n        pickSphereCenter.y += this.pickSphereRadius / 2\n        return pickSphereCenter\n    }\n\n    getDropPosition2D(): Vector2 {\n        if (this.getToolJoint) {\n            const worldPos = new Vector3()\n            this.getToolJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else if (this.depositJoint) {\n            const worldPos = new Vector3()\n            this.depositJoint.getWorldPosition(worldPos)\n            return new Vector2(worldPos.x, worldPos.z)\n        } else {\n            return this.getPosition2D()\n        }\n    }\n\n    getDropPosition(): Vector3 {\n        const dropPos2D = this.getDropPosition2D()\n        return new Vector3(dropPos2D.x, this.worldMgr.getFloorHeight(dropPos2D.x, dropPos2D.y), dropPos2D.y)\n    }\n\n    isPowered(): boolean {\n        return this.powerSwitch && (this.stats.SelfPowered || this.stats.PowerBuilding || this.crystalsInUse > 0)\n    }\n\n    onDiscover() {\n        super.onDiscover()\n        GameState.buildingsUndiscovered.remove(this)\n        GameState.buildings.push(this)\n        EventBus.publishEvent(new EntityAddedEvent(EntityType.BUILDING, this))\n    }\n\n    hasMaxLevel(): boolean {\n        return this.level >= this.stats.Levels - 1\n    }\n\n    upgrade() {\n        if (!this.canUpgrade()) return\n        if (GameState.numBrick >= this.upgradeCostBrick) {\n            GameState.numBrick -= this.upgradeCostBrick\n            EventBus.publishEvent(new MaterialAmountChanged(CollectableType.BRICK))\n        } else {\n            GameState.numOre -= this.upgradeCostOre\n            EventBus.publishEvent(new MaterialAmountChanged(CollectableType.ORE))\n        }\n        this.level++\n        EventBus.publishEvent(new EntityDeselected())\n        EventBus.publishEvent(new BuildingUpgraded(this))\n        // TODO add sparkly upgrade animation\n    }\n\n    getDefaultActivity() {\n        return !this.isPowered() && this.type !== Building.GUNSTATION ? BuildingActivity.Unpowered : AnimEntityActivity.Stand\n    }\n\n    beamUp() {\n        for (let c = 0; c < this.stats.CostOre; c++) {\n            this.worldMgr.addCollectable(new Ore(), this.surfaces[0].getRandomPosition())\n        }\n        for (let c = 0; c < this.stats.CostCrystal; c++) {\n            this.worldMgr.addCollectable(new Crystal(), this.surfaces[0].getRandomPosition())\n        }\n        this.surfaces.forEach((s) => {\n            s.surfaceType = SurfaceType.GROUND\n            s.setBuilding(null)\n            s.updateTexture()\n        })\n        super.beamUp()\n    }\n\n    removeFromScene() {\n        super.removeFromScene()\n        GameState.buildings.remove(this)\n    }\n\n    canUpgrade() {\n        return !this.hasMaxLevel() && (GameState.numOre >= this.upgradeCostOre || GameState.numBrick >= this.upgradeCostBrick)\n    }\n\n    spawnMaterials(materials: CollectableEntity[]) {\n        materials.forEach((m) => this.worldMgr.addCollectable(m, this.getDropPosition2D()))\n    }\n\n    turnOnPower() {\n        if (this.crystalsInUse > 0 || GameState.usedCrystals >= GameState.numCrystal) return\n        this.crystalsInUse = 1\n        GameState.usedCrystals += this.crystalsInUse\n        this.surfaces.forEach((s) => s.setHasPower(true, true))\n        this.changeActivity(BuildingActivity.Stand)\n    }\n\n    turnOffPower() {\n        if (this.crystalsInUse < 1) return\n        GameState.usedCrystals -= this.crystalsInUse\n        this.crystalsInUse = 0\n        this.surfaces.forEach((s) => s.setHasPower(false, false))\n        this.changeActivity(BuildingActivity.Unpowered)\n    }\n\n}\n","import { AnimEntityActivity } from './AnimEntityActivity'\n\nexport class MonsterActivity extends AnimEntityActivity {\n\n    static Route = new MonsterActivity('Activity_Route')\n\n}\n","import { MovableEntity } from '../../../../scene/model/MovableEntity'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { clearTimeoutSafe } from '../../../../core/Util'\nimport { MonsterActivity } from '../../../../scene/model/activities/MonsterActivity'\n\nexport abstract class Monster extends MovableEntity {\n\n    moveTimeout: NodeJS.Timeout\n    target: PathTarget = null\n\n    onLevelEnd() {\n        this.moveTimeout = clearTimeoutSafe(this.moveTimeout)\n        this.removeFromScene()\n    }\n\n    getRouteActivity(): MonsterActivity {\n        return MonsterActivity.Route\n    }\n\n}\n","import { Monster } from './Monster'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { Vector2 } from 'three'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../../main'\nimport { getRandom, getRandomInclusive } from '../../../../core/Util'\nimport { SurfaceType } from '../../../../scene/model/map/SurfaceType'\nimport { GameState } from '../../GameState'\nimport { MoveState } from '../../../../scene/model/MoveState'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\n\nexport class SmallSpider extends Monster {\n\n    constructor() {\n        super(ResourceManager.getAnimationEntityType('Creatures/SpiderSB/SpiderSB.ae'))\n    }\n\n    get stats() {\n        return ResourceManager.stats.SmallSpider\n    }\n\n    startMoving() {\n        SmallSpider.onMove(this)\n    }\n\n    private static onMove(spider: SmallSpider) {\n        const prevSurface = spider.getCurrentSurface()\n        if (spider.target && spider.moveToClosestTarget([spider.target]) === MoveState.MOVED) {\n            const nextSurface = spider.getCurrentSurface()\n            if (prevSurface !== nextSurface) {\n                (GameState.spidersBySurface.get(prevSurface) || []).remove(spider)\n                GameState.spidersBySurface.getOrUpdate(nextSurface, () => []).push(spider)\n            }\n            if (!spider.worldMgr.sceneManager.terrain.getSurfaceFromWorld(spider.getPosition()).surfaceType.floor) {\n                spider.onDeath()\n            } else {\n                spider.moveTimeout = setTimeout(() => SmallSpider.onMove(spider), 1000 / NATIVE_FRAMERATE)\n            }\n        } else {\n            spider.changeActivity()\n            spider.moveTimeout = setTimeout(() => {\n                spider.target = spider.findTarget()\n                SmallSpider.onMove(spider)\n            }, 1000 + getRandom(9000))\n        }\n    }\n\n    private findTarget(): PathTarget {\n        const terrain = this.worldMgr.sceneManager.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            const surfaceType = terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType\n            if (surfaceType !== SurfaceType.WATER && surfaceType !== SurfaceType.LAVA) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a solid target')\n        return null\n    }\n\n    onDeath() {\n        this.onLevelEnd()\n        GameState.spiders.remove(this);\n        (GameState.spidersBySurface.get(this.getCurrentSurface()) || []).remove(this)\n    }\n\n}\n","import { Monster } from './Monster'\nimport { ResourceManager } from '../../../../resource/ResourceManager'\nimport { Vector2 } from 'three'\nimport { NATIVE_FRAMERATE, TILESIZE } from '../../../../main'\nimport { getRandomInclusive } from '../../../../core/Util'\nimport { GameState } from '../../GameState'\nimport { MoveState } from '../../../../scene/model/MoveState'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\n\nexport class Bat extends Monster {\n\n    constructor() {\n        super(ResourceManager.getAnimationEntityType('Creatures/bat/bat.ae'))\n    }\n\n    get stats() {\n        return ResourceManager.stats.Bat\n    }\n\n    startRandomMove() {\n        Bat.onMove(this)\n    }\n\n    private static onMove(bat: Bat) {\n        if (!bat.target || bat.moveToClosestTarget([bat.target]) === MoveState.TARGET_REACHED) {\n            bat.target = bat.findTarget()\n        }\n        bat.moveTimeout = setTimeout(() => Bat.onMove(bat), 1000 / NATIVE_FRAMERATE)\n    }\n\n    determinePosY(x: number, z: number) {\n        return this.worldMgr.getFloorHeight(x, z) + TILESIZE / 2\n    }\n\n    private findTarget(): PathTarget { // TODO move to nearby drilling noise, explosions or sonic blasters\n        const terrain = this.worldMgr.sceneManager.terrain\n        const currentCenter = terrain.getSurfaceFromWorld(this.getPosition()).getCenterWorld()\n        for (let c = 0; c < 20; c++) {\n            const targetX = getRandomInclusive(currentCenter.x - (TILESIZE + TILESIZE / 2), currentCenter.x + TILESIZE + TILESIZE / 2)\n            const targetZ = getRandomInclusive(currentCenter.z - TILESIZE / 2, currentCenter.z + TILESIZE / 2)\n            if (terrain.getSurfaceFromWorldXZ(targetX, targetZ).surfaceType.floor) { // TODO evaluate CrossLand, CrossLava, CrossWater from stats\n                return new PathTarget(new Vector2(targetX, targetZ))\n            }\n        }\n        console.warn('Could not find a solid target')\n        return null\n    }\n\n    onDeath() {\n        this.onLevelEnd()\n        GameState.bats.remove(this)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { TILESIZE } from '../main'\nimport { MathUtils, Vector2, Vector3 } from 'three'\nimport { Raider } from './model/Raider'\nimport { GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { BuildingEntity } from './model/BuildingEntity'\nimport { SurfaceType } from './model/map/SurfaceType'\nimport { Crystal } from './model/collect/Crystal'\nimport { WorldManager } from './WorldManager'\nimport { EventBus } from '../event/EventBus'\nimport { EntityAddedEvent, EntityType } from '../event/WorldEvents'\nimport { SmallSpider } from '../game/model/entity/monster/SmallSpider'\nimport { Bat } from '../game/model/entity/monster/Bat'\nimport degToRad = MathUtils.degToRad\n\nexport class ObjectListLoader {\n\n    static loadObjectList(worldMgr: WorldManager, objectListConf) {\n        Object.values(objectListConf).forEach((olObject: any) => {\n            const lTypeName = olObject.type ? olObject.type.toLowerCase() : olObject.type\n            // all object positions are off by half a tile, because 0/0 is the top left corner of first tile\n            const worldX = (olObject.xPos - 1) * TILESIZE\n            const worldZ = (olObject.yPos - 1) * TILESIZE\n            const terrainY = worldMgr.getTerrainHeight(worldX, worldZ)\n            const buildingType: string = ResourceManager.cfg('BuildingTypes', olObject.type)\n            const radHeading = degToRad(olObject.heading)\n            if (lTypeName === 'TVCamera'.toLowerCase()) {\n                const offset = new Vector3(5 * TILESIZE, 0, 0).applyAxisAngle(new Vector3(0, 1, 0), radHeading - Math.PI / 16).add(new Vector3(worldX, terrainY, worldZ - TILESIZE / 2))\n                worldMgr.sceneManager.camera.position.copy(offset)\n                worldMgr.sceneManager.camera.position.y = 4.5 * TILESIZE\n                worldMgr.sceneManager.controls.target.copy(new Vector3(worldX, terrainY, worldZ - TILESIZE / 2))\n                worldMgr.sceneManager.controls.update()\n                worldMgr.setTorchPosition(new Vector2(worldX, worldZ - TILESIZE / 2))\n            } else if (lTypeName === 'Pilot'.toLowerCase()) {\n                const raider = new Raider()\n                raider.worldMgr = worldMgr\n                raider.changeActivity()\n                raider.createPickSphere()\n                raider.group.position.set(worldX, terrainY, worldZ)\n                raider.group.rotateOnAxis(new Vector3(0, 1, 0), radHeading - Math.PI / 2)\n                raider.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(raider.group.position).discovered\n                if (raider.group.visible) {\n                    GameState.raiders.push(raider)\n                    EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, raider))\n                } else {\n                    GameState.raidersUndiscovered.push(raider)\n                }\n                worldMgr.sceneManager.scene.add(raider.group)\n            } else if (buildingType) { // FIXME refactor building handling\n                const building = Building.getByName(buildingType)\n                const entity = new BuildingEntity(building)\n                entity.worldMgr = worldMgr\n                entity.changeActivity()\n                entity.createPickSphere()\n                entity.group.position.set(worldX, worldMgr.getFloorHeight(worldX, worldZ), worldZ)\n                entity.group.rotateOnAxis(new Vector3(0, 1, 0), -radHeading - Math.PI)\n                entity.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(entity.group.position).discovered\n                if (entity.group.visible) {\n                    GameState.buildings.push(entity)\n                    EventBus.publishEvent(new EntityAddedEvent(EntityType.BUILDING, entity))\n                } else {\n                    GameState.buildingsUndiscovered.push(entity)\n                }\n                // TODO rotate building with normal vector of surface\n                worldMgr.sceneManager.scene.add(entity.group)\n                const primaryPathSurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(entity.group.position)\n                primaryPathSurface.setBuilding(entity)\n                primaryPathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                primaryPathSurface.updateTexture()\n                entity.surfaces.push(primaryPathSurface)\n                if (building === Building.POWER_STATION) {\n                    const secondaryOffset = new Vector3(0, 0, TILESIZE).applyAxisAngle(new Vector3(0, 1, 0), -radHeading + Math.PI / 2)\n                    secondaryOffset.add(entity.group.position)\n                    const secondarySurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(secondaryOffset)\n                    secondarySurface.setBuilding(entity)\n                    secondarySurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                    secondarySurface.updateTexture()\n                    entity.surfaces.push(secondarySurface)\n                }\n                if (building !== Building.GUNSTATION) {\n                    const pathOffset = new Vector3(0, 0, TILESIZE).applyAxisAngle(new Vector3(0, 1, 0), -radHeading - Math.PI)\n                    pathOffset.add(entity.group.position)\n                    const pathSurface = worldMgr.sceneManager.terrain.getSurfaceFromWorld(pathOffset)\n                    if (building === Building.GEODOME) pathSurface.building = entity\n                    pathSurface.surfaceType = SurfaceType.POWER_PATH_BUILDING\n                    pathSurface.updateTexture()\n                    entity.surfaces.push(pathSurface)\n                }\n                if (building === Building.POWER_STATION || entity.surfaces.some((s) => s.neighbors.some((n) => n.hasPower))) {\n                    entity.turnOnPower()\n                }\n            } else if (lTypeName === 'PowerCrystal'.toLowerCase()) {\n                worldMgr.addCollectable(new Crystal(), new Vector2(worldX, worldZ))\n            } else if (lTypeName === 'SmallSpider'.toLowerCase()) {\n                const spider = new SmallSpider()\n                spider.worldMgr = worldMgr\n                spider.changeActivity()\n                spider.group.position.set(worldX, terrainY, worldZ)\n                const currentSurface = spider.getCurrentSurface()\n                spider.group.visible = currentSurface.discovered\n                worldMgr.sceneManager.scene.add(spider.group)\n                GameState.spiders.push(spider)\n                GameState.spidersBySurface.getOrUpdate(currentSurface, () => []).push(spider)\n                spider.startMoving()\n            } else if (lTypeName === 'Bat'.toLowerCase()) {\n                const bat = new Bat()\n                bat.worldMgr = worldMgr\n                bat.changeActivity()\n                bat.group.position.set(worldX, bat.determinePosY(worldX, worldZ), worldZ)\n                bat.group.visible = worldMgr.sceneManager.terrain.getSurfaceFromWorld(bat.group.position).discovered\n                worldMgr.sceneManager.scene.add(bat.group)\n                GameState.bats.push(bat)\n                bat.startRandomMove()\n            } else {\n                // TODO implement remaining object types\n                console.warn('Object type ' + olObject.type + ' not yet implemented')\n            }\n        })\n        // update path textures when all buildings are added\n        GameState.buildings.forEach((b) => b.surfaces.forEach((bSurf) => {\n            for (let x = -1; x <= 1; x++) {\n                for (let y = -1; y <= 1; y++) {\n                    worldMgr.sceneManager.terrain.getSurface(bSurf.x + x, bSurf.y + y).updateTexture()\n                }\n            }\n        }))\n    }\n\n}\n","import { PublicJob } from '../Job'\nimport { RaiderTool } from '../../../../scene/model/RaiderTool'\nimport { RaiderSkill } from '../../../../scene/model/RaiderSkill'\nimport { JobType } from '../JobType'\nimport { FulfillerEntity } from '../../../../scene/model/FulfillerEntity'\nimport { Surface } from '../../../../scene/model/map/Surface'\n\nexport abstract class SurfaceJob extends PublicJob {\n\n    surface: Surface = null\n    color: number = 0xffffff\n    colorPriority: number = 0\n    requiredTool: RaiderTool = null\n    requiredSkill: RaiderSkill = null\n\n    protected constructor(type: JobType, surface: Surface) {\n        super(type)\n        this.surface = surface\n    }\n\n    isQualified(fulfiller: FulfillerEntity) {\n        return (!this.requiredTool || fulfiller.hasTool(this.requiredTool))\n            && (!this.requiredSkill || fulfiller.hasSkill(this.requiredSkill))\n    }\n\n    isQualifiedWithTool(fulfiller: FulfillerEntity): RaiderTool {\n        return this.requiredTool\n    }\n\n    isQualifiedWithTraining(fulfiller: FulfillerEntity): RaiderSkill {\n        return this.requiredSkill\n    }\n\n}\n","import { Dynamite } from '../../../../scene/model/collect/Dynamite'\nimport { Surface } from '../../../../scene/model/map/Surface'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { SurfaceJob } from './SurfaceJob'\nimport { JobType } from '../JobType'\nimport { RaiderSkill } from '../../../../scene/model/RaiderSkill'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class DynamiteJob extends SurfaceJob {\n\n    dynamite: Dynamite\n\n    constructor(surface: Surface, dynamite: Dynamite) {\n        super(JobType.BLOW, surface)\n        this.dynamite = dynamite\n        this.color = 0xa06060\n        this.colorPriority = 2\n        this.requiredSkill = RaiderSkill.DEMOLITION\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return [new PathTarget(this.dynamite.getPosition2D())]\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.dynamite.ignite()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityDestruction\n    }\n\n}\n","/** Function documentation mostly copied from the following URLs\n *\n * https://kb.rockraidersunited.com/User:Jessietail/NERPs_reference\n * https://web.archive.org/web/20131206122442/http://rru-stuff.org/nerpfuncs.html\n * https://kb.rockraidersunited.com/NERPs_documentation#Labels\n *\n */\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { clearIntervalSafe } from './Util'\n\nexport class NerpRunner {\n\n    debug = false\n    onLevelComplete: () => any = null\n    nerpInterval: NodeJS.Timeout = null\n\n    registers = new Array(8).fill(0)\n    timers = new Array(4).fill(0)\n    scriptLines = [] // contains humand readable script strings\n    statements = [] // contains parsed statements for execution\n    macrosByName = {}\n    labelsByName = {}\n    halted = false\n    programCounter = 0\n    messages = []\n    // more state variables and switches\n    messagePermit = null\n\n    constructor(debug = false) {\n        this.debug = debug\n    }\n\n    startExecution() {\n        const that = this\n        this.nerpInterval = setInterval(() => {\n            that.execute()\n        }, 2000)\n    }\n\n    pauseExecution() {\n        this.nerpInterval = clearIntervalSafe(this.nerpInterval)\n    }\n\n    /**\n     * Internally used to validate and parse a register number.\n     * @param register\n     * @return {number}\n     */\n    checkRegister(register) {\n        const num = parseInt(register)\n        if (isNaN(num) || num < 0 || num > this.registers.length) throw new Error('Invalid register (' + register + ') provided')\n        return num\n    }\n\n    /**\n     * Internally used to validate and parse a value before setting or adding it with a register.\n     * @param value\n     * @return {number}\n     */\n    checkRegisterValue(value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Invalid register value (' + value + ') provided')\n        return num\n    }\n\n    /**\n     * Gets the value currently stored in the given register, internally used to handle all registers with one method.\n     * @param register the register to read\n     * @return {number} returns the value currently stored in the register\n     */\n    getR(register) {\n        register = this.checkRegister(register)\n        return this.registers[register]\n    }\n\n    /**\n     * Sets the given value for the given register, internally used to handle all registers with one method.\n     * @param register the register to set\n     * @param value the value to set for the given register\n     */\n    setR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] = value\n    }\n\n    /**\n     * Adds the given value to the given register, internally used to handle all registers with one method.\n     * @param register the register to add to\n     * @param value the value to add to the given register\n     */\n    addR(register, value) {\n        register = this.checkRegister(register)\n        value = this.checkRegisterValue(value)\n        this.registers[register] += value\n    }\n\n    /**\n     * Set the respective timer to the given numerical value. Units are in milliseconds.\n     * @param timer\n     * @param value\n     */\n    setTimer(timer, value) {\n        const num = parseInt(value)\n        if (isNaN(num)) throw new Error('Can\\'t set timer to NaN value: ' + value)\n        this.timers[timer] = new Date().getTime() + num\n    }\n\n    /**\n     * Gets the value of the respective timer. Units are in milliseconds.\n     * @param timer\n     * @return {number}\n     */\n    getTimer(timer) {\n        return new Date().getTime() - this.timers[timer]\n    }\n\n    /**\n     * End the level successfully and show the score screen.\n     */\n    setLevelCompleted() {\n        this.halted = true\n        GameState.resultState = GameResultState.COMPLETE\n        this.onLevelComplete()\n    }\n\n    /**\n     * End the level as failure and show the score screen.\n     */\n    setLevelFail() {\n        this.halted = true\n        GameState.resultState = GameResultState.FAILED\n        this.onLevelComplete()\n    }\n\n    /**\n     * Sets tutorial flags\n     * @param value a bitmask to set flags with\n     */\n    setTutorialFlags(value) {\n        // TODO implement tutorial flags\n        // seems like value must be interpreted bitwise and sets a certain flag on each bit\n        // seen so far:\n        // 0 = 0x00 allow any click anywhere anytime\n        // 3 = 0x11 disallow invalid clicks\n        // 4095 = 0x111111111111 set all flags? (seen in Tutorial01 level)\n    }\n\n    /**\n     * This is used to make messages come up/not come up.\n     * @param messagesAllowed\n     */\n    setMessagePermit(messagesAllowed) {\n        this.messagePermit = !messagesAllowed\n    }\n\n    setBuildingsUpgradeLevel(typeName, level) {\n        GameState.buildings.forEach(b => {\n            if (b.type === typeName) b.level = level\n        })\n    }\n\n    setToolStoreLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.TOOLSTATION, level)\n    }\n\n    setTeleportPadLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.TELEPORT_PAD, level)\n    }\n\n    setPowerStationLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.POWER_STATION, level)\n    }\n\n    setBarracksLevel(level) {\n        this.setBuildingsUpgradeLevel(Building.BARRACKS, level)\n    }\n\n    /**\n     * Gets the number of tool stores currently built. NOT the total ever built.\n     * @return {number}\n     */\n    getToolStoresBuilt() {\n        return GameState.getBuildingsByType(Building.TOOLSTATION).length\n    }\n\n    /**\n     * Gets the number of minifigures on the level. TODO it is NOT tested if this ignores minifigures in hidden caverns\n     * @return {number}\n     */\n    getMinifiguresOnLevel() {\n        return GameState.raiders.length\n    }\n\n    /**\n     * Gets the number of crystals currently stored.\n     * @return {number}\n     */\n    getCrystalsCurrentlyStored() {\n        return GameState.numCrystal\n    }\n\n    getObjectiveSwitch() {\n        // TODO implement this\n        return 0\n    }\n\n    setMessageTimerValues(arg1, arg2, arg3) {\n        // TODO implement this\n    }\n\n    getMessageTimer() {\n        return 0 // TODO return remaining amount of time needed to fully play WAV message\n    }\n\n    cameraUnlock() {\n        // TODO implement this\n    }\n\n    setMessage(messageNumber, arrowDisabled) {\n        if (!this.messagePermit) {\n            return\n        }\n        const msg = this.messages[messageNumber]\n        // TODO show message to user\n        console.log(msg.txt)\n        // msg.snd resides in sounds/streamed/ which is currently not loaded :(\n    }\n\n    setCameraGotoTutorial(arg1) {\n        // TODO implement this\n    }\n\n    getTutorialBlockIsGround(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getTutorialBlockIsPath(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getUnitAtBlock(arg1) {\n        // TODO implement this\n        return 0\n    }\n\n    getOxygenLevel() {\n        // TODO implement this\n        return 100\n    }\n\n    getObjectiveShowing() {\n        // TODO implement this\n        return false\n    }\n\n    addPoweredCrystals() {\n        // TODO implement this\n    }\n\n    disallowAll() {\n        // TODO implement this\n    }\n\n    getPoweredPowerStationsBuilt() {\n        return GameState.getBuildingsByType(Building.POWER_STATION).length\n    }\n\n    getPoweredBarracksBuilt() {\n        return GameState.getBuildingsByType(Building.BARRACKS).length\n    }\n\n    getRecordObjectAtTutorial() {\n        // TODO implement this\n    }\n\n    getHiddenObjectsFound() {\n        // TODO implement this\n        return 0\n    }\n\n    callMethod(methodName, methodArgs) {\n        if (methodName === 'Stop') {\n            throw 'Stop'\n        } else if (methodName === 'TRUE') {\n            return true\n        } else if (methodName === 'FALSE') {\n            return false\n        }\n        const setRegisterMatch = methodName.match(/^SetR([0-7])$/)\n        if (setRegisterMatch) {\n            return this.setR(setRegisterMatch[1], methodArgs[0])\n        }\n        const addRegisterMatch = methodName.match(/^AddR([0-7])$/)\n        if (addRegisterMatch) {\n            return this.addR(addRegisterMatch[1], methodArgs[0])\n        }\n        const getRegisterMatch = methodName.match(/^GetR([0-7])$/)\n        if (getRegisterMatch) {\n            return this.getR(getRegisterMatch[1])\n        }\n        const setTimerMatch = methodName.match(/^SetTimer([0-3])$/)\n        if (setTimerMatch) {\n            return this.setTimer(setTimerMatch[1], methodArgs[0])\n        }\n        const getTimerMatch = methodName.match(/^GetTimer([0-3])$/)\n        if (getTimerMatch) {\n            return this.getTimer(getTimerMatch[1])\n        }\n        const lMethodName = methodName.toLowerCase()\n        for (const memberName in this) {\n            // noinspection JSUnfilteredForInLoop\n            if (memberName.toLowerCase() === lMethodName) {\n                // @ts-ignore\n                // noinspection JSUnfilteredForInLoop\n                return this[memberName].apply(this, methodArgs)\n            }\n        }\n        throw new Error('Undefined method: ' + methodName)\n    }\n\n    conditional(left, right) {\n        const conditionResult = this.executeStatement(left)\n        if (this.debug) {\n            console.log('Condition evaluated to ' + conditionResult)\n        }\n        if (conditionResult) {\n            this.executeStatement(right)\n        }\n    }\n\n    executeStatement(expression) {\n        if (expression.invoke) {\n            const argValues = expression.invoke !== 'conditional' ? expression.args.map(e => this.executeStatement(e)) : expression.args\n            const result = this.callMethod(expression.invoke, argValues)\n            if (result !== undefined && this.debug) {\n                console.log('Method returned: ' + result)\n            }\n            return result\n        } else if (expression.comparator) {\n            const left = this.executeStatement(expression.left)\n            const right = this.executeStatement(expression.right)\n            if (expression.comparator === '=') {\n                return left === right\n            } else if (expression.comparator === '!=') {\n                return left !== right\n            } else if (expression.comparator === '<') {\n                return left < right\n            } else if (expression.comparator === '>') {\n                return left > right\n            } else {\n                console.log(expression)\n                throw new Error('Unknown comparator: ' + expression.comparator)\n            }\n        } else if (!isNaN(expression)) { // just a number\n            return expression\n        } else if (expression.jump) {\n            this.programCounter = this.labelsByName[expression.jump]\n            if (this.programCounter === undefined) {\n                throw new Error('Label \\'' + expression.jump + '\\' is unknown!')\n            }\n            if (this.debug) {\n                console.log('Jumping to label \\'' + expression.jump + '\\' in line ' + this.programCounter)\n            }\n        } else {\n            console.log(expression)\n            throw new Error('Unknown expression in line ' + this.programCounter + ': ' + expression)\n        }\n    }\n\n    execute(debug = false) {\n        this.debug = debug\n        if (this.halted) return\n        try {\n            if (this.debug) {\n                console.log('Executing following script\\n' + this.scriptLines.join('\\n'))\n                console.log('Registers: ' + this.registers)\n            }\n            for (this.programCounter = 0; this.programCounter < this.statements.length; this.programCounter++) {\n                const statement = this.statements[this.programCounter]\n                if (this.debug) {\n                    console.log(this.programCounter + ': ' + this.scriptLines[this.programCounter])\n                    console.log(statement)\n                }\n                if (!statement.label) { // do nothing for label markers\n                    this.executeStatement(statement)\n                }\n            }\n        } catch (e) {\n            if (e === 'Stop') {\n                return\n            }\n            console.error(e)\n            console.error('FATAL ERROR! Script execution failed! You can NOT win anymore!')\n            this.halted = true\n            debugger;\n        }\n    }\n\n}\n","import { NerpRunner } from './NerpRunner'\nimport { ResourceManager } from '../resource/ResourceManager'\n\nexport class NerpParser {\n\n    static parse(nerpScript: string): NerpRunner {\n        const nerpRunner = new NerpRunner()\n        const lines = nerpScript.split('\\n').map(l => l\n            .split('//')[0].trim() // before comment starts\n            .split(';')[0].trim() // before preprocessor comment starts\n            .replace(/_/g, '') // some preprocessor macros use this prefix\n            .replace(/\\bTRUE \\? /, '') // some weird requirement of the original language\n            .replace(/[{}]/g, ''), // duplicate limit for macros using labels too\n        )\n        for (let c = 0; c < lines.length; c++) {\n            const line = lines[c]\n            if (line.length < 1) {\n                continue // ignore empty lines, but important for macro closure\n            }\n            if (line.startsWith('#include ')) { // include other nerp scripts/headers\n                const includeName = line.replace(/^#include /, '').trim().slice(1, -1)\n                if (includeName === 'nerpdef.h') {\n                    // trivial default header file, is applied by search and replace above\n                    // see https://github.com/jgrip/legorr/blob/master/nerpdef.h\n                    continue\n                }\n                const includedRunner = NerpParser.parse(ResourceManager.getResource('Levels/' + includeName))\n                if (!includedRunner || !includedRunner.scriptLines || includedRunner.scriptLines.length < 1) {\n                    throw 'Can\\'t include unknown nerp script: ' + line\n                }\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(includedRunner.scriptLines)\n                // copy macros from included file to current file\n                nerpRunner.macrosByName = Object.assign({}, nerpRunner.macrosByName, includedRunner.macrosByName)\n            } else if (line.startsWith('#define ')) { // parse C++ preprocessor macro\n                const firstLine = line.replace(/^#define /, '').split(' ')\n                const macroLines = [firstLine.splice(1).join(' ').replace(/\\\\$/, '').trim()]\n                let mLine = line\n                let append = false\n                while (mLine.endsWith('\\\\') && c < lines.length - 1) {\n                    c++\n                    mLine = lines[c].trim()\n                    const macroLine = mLine.replace(/\\\\$/, '').trim()\n                    if (macroLine.length > 0) {\n                        if (append) {\n                            append = false\n                            macroLines[macroLines.length - 1] += macroLine\n                        } else {\n                            macroLines.push(macroLine)\n                        }\n                    }\n                    if (mLine.match(/:\\\\$/)) {\n                        append = true\n                    }\n                }\n                const macroCall = firstLine[0].split('(')\n                nerpRunner.macrosByName[macroCall[0]] = {\n                    args: macroCall[1].replace(/\\)$/, '').split(','),\n                    lines: macroLines,\n                }\n            } else {\n                nerpRunner.scriptLines = nerpRunner.scriptLines.concat(this.replaceMacros(nerpRunner.macrosByName, line))\n            }\n        }\n        // somewhat precompile the script and create syntax tree\n        // must be done in separate block to make sure the script is complete and we can refer/rely on line numbers for label jumps\n        for (let c = 0; c < nerpRunner.scriptLines.length; c++) {\n            const line = nerpRunner.scriptLines[c]\n            nerpRunner.statements[c] = line.replace(/\\(\\)/g, '') // now the macros are applied and obsolete empty \"()\" can be removed\n                .split(' ? ')\n            const labelMatch = line.match(/(\\S+):/)\n            if (nerpRunner.statements[c].length === 2) { // line contains condition (primary operator)\n                nerpRunner.statements[c] = {\n                    invoke: 'conditional',\n                    args: [this.preProcess(nerpRunner.statements[c][0]), this.preProcess(nerpRunner.statements[c][1])],\n                }\n            } else if (labelMatch) { // keep label line number for later usage\n                const labelName = labelMatch[1].toLowerCase()\n                nerpRunner.labelsByName[labelName] = c\n                nerpRunner.statements[c] = {label: labelName}\n            } else if (nerpRunner.statements[c].length === 1) { // just a call\n                nerpRunner.statements[c] = this.preProcess(nerpRunner.statements[c][0])\n            } else { // lines contains more than 1 condition statement\n                throw 'Can\\'t deal with line: ' + line\n            }\n        }\n        return nerpRunner\n    }\n\n    static replaceMacros(macrosByName, line): string[] {\n        // check if this line contains a macro\n        const split = line.split('(') // not a very stable check though...\n        const macro = macrosByName[split[0]]\n        if (macro) {\n            const argValues = split.splice(1).join('(').slice(0, -1).split(',')\n            if (argValues.length !== macro.args.length) {\n                throw 'Invalid number of args provided for macro in line ' + line\n            }\n            const macroLines = []\n            macro.lines.forEach((line) => {\n                for (let c = 0; c < argValues.length; c++) {\n                    line = line.replace(new RegExp('\\\\b' + macro.args[c] + '\\\\b'), argValues[c])\n                }\n                macroLines.push(...(this.replaceMacros(macrosByName, line)))\n            })\n            return macroLines\n        } else {\n            return [line]\n        }\n    }\n\n    static preProcess(expression) {\n        expression = expression.trim().replace(/^_/, '') // remove whitespace and leading underscore\n        const number = parseInt(expression)\n        if (!isNaN(number)) {\n            return number\n        }\n        const opSplit = expression.split(/ (=) | (!=) | (>) | (<) /).filter(e => e !== undefined)\n        const brackets = expression.match(/^(.+)\\((.+)\\)$/)\n        const spaceSplit = expression.split(' ')\n        const labelMatch = expression.match(/([^:]+):$/)\n        const jumpMatch = expression.match(/^:([^:]+)$/)\n        if (opSplit.length === 3) { // expression contains secondary operator\n            return {left: this.preProcess(opSplit[0]), comparator: opSplit[1], right: this.preProcess(opSplit[2])}\n        } else if (brackets) {\n            const args = brackets[2].split(',').map(a => this.preProcess(a))\n            return {invoke: brackets[1], args: args}\n        } else if (spaceSplit.length > 1) { // space split must be the very last since most expressions contain space\n            const args = spaceSplit.length === 2 ? [this.preProcess(spaceSplit[1])] : spaceSplit.splice(1).map(a => this.preProcess(a))\n            return {invoke: spaceSplit[0], args: args}\n        } else if (labelMatch) { // label definition\n            return {label: labelMatch[1]}\n        } else if (jumpMatch) { // jump to label\n            return {jump: jumpMatch[1].toLowerCase()}\n        } else { // function call without args\n            if (expression.match(/[ =?><!]/)) {\n                throw 'Invalid expression given, parsing must have failed before somewhere'\n            }\n            return {invoke: expression, args: []}\n        }\n    }\n\n}\n","import { LevelPrioritiesEntryConfig } from '../../../cfg/LevelsCfg'\nimport { PublicJob } from './Job'\nimport { PriorityIdentifier } from './PriorityIdentifier'\n\nexport class PriorityList {\n\n    levelDefault: PriorityEntry[] = []\n    current: PriorityEntry[] = []\n\n    constructor(priorities: LevelPrioritiesEntryConfig[]) {\n        this.levelDefault = priorities\n        this.reset()\n    }\n\n    toggle(index: number) {\n        this.current[index].enabled = !this.current[index].enabled\n    }\n\n    upOne(index: number) {\n        const tmp = this.current[index]\n        this.current[index] = this.current[index + 1]\n        this.current[index + 1] = tmp\n    }\n\n    reset() {\n        this.current = this.levelDefault.map(entry => new PriorityEntry(entry)) // use deep copy to avoid interference\n    }\n\n    pushToTop(index: number) {\n        const element = this.current[index]\n        for (let c = index; c > 0; c--) {\n            this.current[c] = this.current[c - 1]\n        }\n        this.current[0] = element\n    }\n\n    getPriority(job: PublicJob) {\n        let priority = 0\n        this.current.some((j, index) => {\n            if (j.key === job.getPriorityIdentifier()) {\n                priority = index\n                return true\n            }\n        })\n        return priority\n    }\n\n}\n\nexport class PriorityEntry {\n\n    key: PriorityIdentifier\n    enabled: boolean\n\n    constructor(levelPriorityEntry: LevelPrioritiesEntryConfig) {\n        this.key = levelPriorityEntry.key\n        this.enabled = levelPriorityEntry.enabled\n    }\n\n}\n","import { Vector2 } from 'three'\nimport { Job } from './Job'\nimport { JobType } from './JobType'\nimport { PathTarget } from '../../../scene/model/PathTarget'\n\nexport class MoveJob extends Job {\n\n    target: PathTarget[]\n\n    constructor(target: Vector2) {\n        super(JobType.MOVE)\n        this.target = [new PathTarget(target)]\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.target\n    }\n\n}\n","import { SceneManager } from './SceneManager'\nimport { TerrainLoader } from './TerrainLoader'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { Color, MathUtils, Raycaster, Vector2, Vector3 } from 'three'\nimport { clearIntervalSafe, getRandom } from '../core/Util'\nimport { EventBus } from '../event/EventBus'\nimport { EntityAddedEvent, EntityType, JobCreateEvent, RaiderRequested, SpawnDynamiteEvent } from '../event/WorldEvents'\nimport { Raider } from './model/Raider'\nimport { GameState } from '../game/model/GameState'\nimport { Building } from '../game/model/entity/building/Building'\nimport { CollectableEntity } from './model/collect/CollectableEntity'\nimport { CHECK_SPANW_RAIDER_TIMER, TILESIZE } from '../main'\nimport { ObjectListLoader } from './ObjectListLoader'\nimport { Dynamite } from './model/collect/Dynamite'\nimport { DynamiteJob } from '../game/model/job/surface/DynamiteJob'\nimport { NerpParser } from '../core/NerpParser'\nimport { NerpRunner } from '../core/NerpRunner'\nimport { GameScreen } from '../screen/GameScreen'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { PriorityList } from '../game/model/job/PriorityList'\nimport { MoveJob } from '../game/model/job/MoveJob'\nimport { RaiderActivity } from './model/activities/RaiderActivity'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { CollectJob } from '../game/model/job/CollectJob'\nimport degToRad = MathUtils.degToRad\n\nexport class WorldManager {\n\n    sceneManager: SceneManager = null\n    spawnRaiderInterval = null\n    nerpRunner: NerpRunner = null\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.sceneManager = new SceneManager(canvas)\n        EventBus.registerEventListener(EventKey.DESELECTED_ENTITY, () => GameState.selectEntities([]))\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, (event: RaiderRequested) => {\n            GameState.requestedRaiders = event.numRequested\n            if (GameState.requestedRaiders > 0 && !this.spawnRaiderInterval) {\n                this.spawnRaiderInterval = setInterval(this.checkSpawnRaiders.bind(this), CHECK_SPANW_RAIDER_TIMER)\n            }\n        })\n        EventBus.registerEventListener(EventKey.SPAWN_DYNAMITE, (event: SpawnDynamiteEvent) => {\n            const targetBuilding = GameState.getClosestBuildingByType(event.surface.getCenterWorld(), Building.TOOLSTATION)\n            if (!targetBuilding) {\n                throw 'Could not find toolstation to spawn dynamite'\n            }\n            const pos = targetBuilding.getDropPosition()\n            const dynamite = new Dynamite()\n            dynamite.targetSurface = event.surface\n            dynamite.worldMgr = this\n            dynamite.group.position.copy(pos)\n            this.sceneManager.scene.add(dynamite.group)\n            EventBus.publishEvent(new JobCreateEvent(new DynamiteJob(event.surface, dynamite)))\n        })\n        EventBus.registerEventListener(EventKey.CAVERN_DISCOVERED, () => {\n            GameState.discoveredCaverns++\n        })\n    }\n\n    setup(levelConf: LevelEntryCfg, gameScreen: GameScreen) {\n        GameState.levelFullName = levelConf.fullName\n        GameState.totalCaverns = levelConf.reward?.quota?.caverns || 0\n        GameState.rewardConfig = levelConf.reward\n        GameState.priorityList = new PriorityList(levelConf.priorities)\n\n        const ambientRgb = ResourceManager.cfg('Main', 'AmbientRGB') || [10, 10, 10]\n        const maxAmbRgb = Math.min(255, Math.max(0, ...ambientRgb))\n        const normalizedRgb = ambientRgb.map(v => v / (maxAmbRgb ? maxAmbRgb : 1))\n        const ambientColor = new Color(normalizedRgb[0], normalizedRgb[1], normalizedRgb[2])\n        this.sceneManager.setupScene(ambientColor)\n\n        // create terrain mesh and add it to the scene\n        this.sceneManager.terrain = TerrainLoader.loadTerrain(levelConf, this)\n        this.sceneManager.scene.add(this.sceneManager.terrain.floorGroup)\n\n        // load in non-space objects next\n        const objectListConf = ResourceManager.getResource(levelConf.oListFile)\n        ObjectListLoader.loadObjectList(this, objectListConf)\n\n        // load nerp script\n        this.nerpRunner = NerpParser.parse(ResourceManager.getResource(levelConf.nerpFile))\n        this.nerpRunner.messages.push(...(ResourceManager.getResource(levelConf.nerpMessageFile)))\n        this.nerpRunner.onLevelComplete = () => gameScreen.onLevelEnd()\n\n        // gather level start details for game result score calculation\n        GameState.totalDiggables = this.sceneManager.terrain.surfaces.filter((r) => r.forEach((s) => s.isDigable())).length\n        GameState.totalCrystals = 0\n        this.sceneManager.terrain.surfaces.forEach((r) => r.forEach((s) => GameState.totalCrystals += s.containedCrystals))\n        GameState.totalOres = 0\n        this.sceneManager.terrain.surfaces.forEach((r) => r.forEach((s) => GameState.totalOres += s.containedOres))\n    }\n\n    start() {\n        this.sceneManager.startScene()\n        this.nerpRunner?.startExecution()\n        GameState.levelStartTime = Date.now()\n    }\n\n    stop() {\n        GameState.levelStopTime = Date.now()\n        this.nerpRunner?.pauseExecution()\n        this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n        GameState.spiders.forEach((m) => m.onLevelEnd())\n        GameState.bats.forEach((b) => b.onLevelEnd())\n        GameState.remainingDiggables = 0\n        this.sceneManager?.terrain?.surfaces?.forEach((r) => r.forEach((s) => GameState.remainingDiggables += s.isDigable() ? 1 : 0))\n        this.sceneManager.disposeScene()\n    }\n\n    resize(width: number, height: number) {\n        if (this.sceneManager) this.sceneManager.renderer.setSize(width, height)\n    }\n\n    getTerrainIntersectionPoint(rx: number, ry: number): Vector3 {\n        if (!this.sceneManager.terrain) return null\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera({x: rx, y: ry}, this.sceneManager.camera)\n        const intersects = raycaster.intersectObjects(this.sceneManager.terrain.floorGroup.children)\n        return intersects.length > 0 ? intersects[0].point : null\n    }\n\n    setTorchPosition(position: Vector2) {\n        this.sceneManager.cursorTorchlight.position.x = position.x\n        this.sceneManager.cursorTorchlight.position.y = this.getFloorHeight(position.x, position.y) + 2 * TILESIZE\n        this.sceneManager.cursorTorchlight.position.z = position.y\n    }\n\n    getFloorHeight(worldX: number, worldZ: number): number {\n        const surface = this.sceneManager.terrain.getSurfaceFromWorldXZ(worldX, worldZ)\n        if (!surface) return 0\n        return surface.getFloorHeight(worldX, worldZ)\n    }\n\n    getTerrainHeight(worldX: number, worldZ: number): number {\n        const raycaster = new Raycaster(new Vector3(Number(worldX), 3 * TILESIZE, Number(worldZ)), new Vector3(0, -1, 0))\n        const intersect = raycaster.intersectObject(this.sceneManager.terrain.floorGroup, true)\n        if (intersect.length > 0) {\n            return intersect[0].point.y\n        } else {\n            console.warn('could not determine terrain height for ' + worldX + '/' + worldZ)\n            return 0\n        }\n    }\n\n    addCollectable(collectable: CollectableEntity, world: Vector2) {\n        collectable.worldMgr = this\n        collectable.group.position.set(world.x, this.getFloorHeight(world.x, world.y), world.y)\n        collectable.group.visible = this.sceneManager.terrain.getSurfaceFromWorld(collectable.group.position).discovered\n        this.sceneManager.scene.add(collectable.group)\n        if (collectable.group.visible) {\n            GameState.collectables.push(collectable)\n            EventBus.publishEvent(new JobCreateEvent(new CollectJob(collectable)))\n        } else {\n            GameState.collectablesUndiscovered.push(collectable)\n        }\n        return collectable\n    }\n\n    checkSpawnRaiders() {\n        if (GameState.requestedRaiders < 1) {\n            this.spawnRaiderInterval = clearIntervalSafe(this.spawnRaiderInterval)\n            return\n        }\n        if (GameState.raiders.length >= GameState.getMaxRaiders()) return\n        const spawnBuildings = GameState.getBuildingsByType(Building.TOOLSTATION, Building.TELEPORT_PAD).filter((b) => !b.spawning)\n        for (let c = 0; c < spawnBuildings.length && GameState.requestedRaiders > 0; c++) {\n            EventBus.publishEvent(new RaiderRequested(GameState.requestedRaiders - 1))\n            const station = spawnBuildings[c]\n            station.spawning = true\n            const raider = new Raider()\n            raider.worldMgr = this\n            raider.changeActivity(RaiderActivity.TeleportIn, () => {\n                station.spawning = false\n                raider.changeActivity()\n                raider.createPickSphere()\n                const walkOutPos = station.getPosition2D().add(new Vector2(0, TILESIZE * 3 / 4 + getRandom(TILESIZE / 2))\n                    .rotateAround(new Vector2(0, 0), station.getHeading() + degToRad(-10 + getRandom(20))))\n                raider.setJob(new MoveJob(walkOutPos))\n                GameState.raiders.push(raider)\n                EventBus.publishEvent(new EntityAddedEvent(EntityType.RAIDER, raider))\n            })\n            raider.group.position.copy(station.group.position).add(new Vector3(0, 0, TILESIZE / 2).applyEuler(station.group.rotation))\n            raider.group.rotation.copy(station.group.rotation)\n            this.sceneManager.scene.add(raider.group)\n        }\n    }\n\n}\n","import { ScreenLayer } from '../../screen/ScreenLayer'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { WorldManager } from '../../scene/WorldManager'\n\nexport class SelectionLayer extends ScreenLayer {\n\n    worldManager: WorldManager\n    selectStart: { x: number, y: number } = null\n\n    constructor() {\n        super(true)\n    }\n\n    reset() {\n        super.reset()\n        this.selectStart = null\n    }\n\n    setWorldManager(worldManager: WorldManager) {\n        this.worldManager = worldManager\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        if (eventEnum === POINTER_EVENT.DOWN) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.startSelection(cx, cy)\n        } else if (eventEnum === POINTER_EVENT.MOVE) {\n            return this.changeSelection(cx, cy)\n        } else if (eventEnum === POINTER_EVENT.UP) {\n            if (event.button === MOUSE_BUTTON.MAIN) return this.selectEntities(cx, cy)\n        }\n        return false\n    }\n\n    startSelection(screenX: number, screenY: number) {\n        this.selectStart = {x: screenX, y: screenY}\n        return true\n    }\n\n    changeSelection(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        this.context.strokeStyle = 'rgba(128, 192, 192, 0.5)'\n        this.context.lineWidth = 2\n        this.context.strokeRect(this.selectStart.x, this.selectStart.y, screenX - this.selectStart.x, screenY - this.selectStart.y)\n        return true\n    }\n\n    selectEntities(screenX: number, screenY: number) {\n        if (!this.selectStart) return false // selection was not started on this layer\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        const r1x = (this.selectStart.x / this.canvas.width) * 2 - 1\n        const r1y = -(this.selectStart.y / this.canvas.height) * 2 + 1\n        const r2x = (screenX / this.canvas.width) * 2 - 1\n        const r2y = -(screenY / this.canvas.height) * 2 + 1\n        if (Math.abs(screenX - this.selectStart.x) < 5 && Math.abs(screenY - this.selectStart.y) < 5) {\n            const x = (this.selectStart.x + screenX) / this.canvas.width - 1\n            const y = -(this.selectStart.y + screenY) / this.canvas.height + 1\n            this.worldManager.sceneManager.selectEntitiesByRay(x, y)\n        } else {\n            this.worldManager.sceneManager.selectEntitiesInFrustum(r1x, r1y, r2x, r2y)\n        }\n        this.selectStart = null\n        return true\n    }\n\n}\n","import { SurfaceJob } from './SurfaceJob'\nimport { JobType } from '../JobType'\nimport { Surface } from '../../../../scene/model/map/Surface'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { RaiderTool } from '../../../../scene/model/RaiderTool'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\n\nexport class DrillJob extends SurfaceJob {\n\n    constructor(surface: Surface) {\n        super(JobType.DRILL, surface)\n        this.color = 0xa0a0a0\n        this.requiredTool = RaiderTool.DRILL\n        this.surface = surface\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.surface.getDigPositions().map((p) => new PathTarget(p))\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.collapse()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityDestruction\n    }\n\n}\n","import { SurfaceJob } from './SurfaceJob'\nimport { JobType } from '../JobType'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { RaiderTool } from '../../../../scene/model/RaiderTool'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { Surface } from '../../../../scene/model/map/Surface'\n\nexport class ClearRubbleJob extends SurfaceJob {\n\n    constructor(surface: Surface) {\n        super(JobType.CLEAR_RUBBLE, surface)\n        this.requiredTool = RaiderTool.SHOVEL\n        this.surface = surface\n    }\n\n    getWorkplaces(): PathTarget[] {\n        const rubblePositions = this.surface.rubblePositions\n        return rubblePositions.length > 0 ? [new PathTarget(rubblePositions[0])] : [] // use first (no need to optimize)\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.reduceRubble()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityClearing\n    }\n\n}\n","import { ScreenLayer } from '../../screen/ScreenLayer'\nimport { WorldManager } from '../../scene/WorldManager'\nimport { SelectionType } from '../model/Selectable'\nimport { GameState } from '../model/GameState'\nimport { Raider } from '../../scene/model/Raider'\nimport { EventBus } from '../../event/EventBus'\nimport { JobCreateEvent } from '../../event/WorldEvents'\nimport { Surface } from '../../scene/model/map/Surface'\nimport { EntityDeselected } from '../../event/LocalEvents'\nimport { FulfillerEntity } from '../../scene/model/FulfillerEntity'\nimport { SurfaceJob } from '../model/job/surface/SurfaceJob'\nimport { KEY_EVENT, MOUSE_BUTTON, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { DEV_MODE } from '../../main'\nimport { MoveJob } from '../model/job/MoveJob'\nimport { Vector2 } from 'three'\nimport { DrillJob } from '../model/job/surface/DrillJob'\nimport { ClearRubbleJob } from '../model/job/surface/ClearRubbleJob'\n\nexport class GameLayer extends ScreenLayer {\n\n    private worldMgr: WorldManager\n    private rightDown: { x: number, y: number } = {x: 0, y: 0}\n\n    constructor() {\n        super(false, false)\n    }\n\n    reset() {\n        super.reset()\n        this.rightDown = {x: 0, y: 0}\n    }\n\n    setWorldManager(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (eventEnum === POINTER_EVENT.MOVE) {\n            const intersectionPoint = this.getTerrainPositionFromEvent(event)\n            if (intersectionPoint) this.worldMgr.setTorchPosition(intersectionPoint)\n        } else if (eventEnum === POINTER_EVENT.UP && event.button === MOUSE_BUTTON.SECONDARY) {\n            const downUpDistance = Math.abs(event.x - this.rightDown.x) + Math.abs(event.y - this.rightDown.y)\n            if (downUpDistance < 3 && (GameState.selectionType === SelectionType.PILOT || GameState.selectionType === SelectionType.GROUP)) {\n                // TODO check for collectable entity first\n                const intersectionPoint = this.getTerrainPositionFromEvent(event)\n                if (intersectionPoint) {\n                    const surface = this.worldMgr.sceneManager.terrain.getSurfaceFromWorldXZ(intersectionPoint.x, intersectionPoint.y)\n                    if (surface) {\n                        if (surface.isDrillable()) {\n                            this.createSurfaceJob(new DrillJob(surface), surface, intersectionPoint)\n                        } else if (surface.hasRubble()) {\n                            this.createSurfaceJob(new ClearRubbleJob(surface), surface, intersectionPoint)\n                        } else if (surface.isWalkable()) {\n                            GameState.selectedEntities.forEach((raider: Raider) => raider.setJob(new MoveJob(intersectionPoint)))\n                            if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n                        }\n                    }\n                }\n            }\n        } else if (eventEnum === POINTER_EVENT.DOWN && event.button === MOUSE_BUTTON.SECONDARY) {\n            this.rightDown.x = event.x\n            this.rightDown.y = event.y\n        }\n        this.canvas.dispatchEvent(event)\n        return true\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        if (DEV_MODE && eventEnum === KEY_EVENT.UP) {\n            if (GameState.selectionType === SelectionType.SURFACE) {\n                GameState.selectedEntities.forEach((s: Surface) => {\n                    if (event.key === 'c') {\n                        if (!s.surfaceType.floor) s.collapse()\n                    } else if (event.key === 'f') {\n                        const t = s.terrain.findFallInTarget(s.x, s.y)\n                        if (!s.surfaceType.floor) s.createFallin(t[0], t[1])\n                    }\n                })\n                EventBus.publishEvent(new EntityDeselected())\n                return true\n            }\n        }\n        return false\n    }\n\n    createSurfaceJob(surfJob: SurfaceJob, surface: Surface, intersectionPoint: Vector2) {\n        GameState.selectedEntities.forEach((e: FulfillerEntity) => {\n            if (surfJob.isQualified(e)) {\n                e.setJob(surfJob)\n            } else if (surface.isWalkable()) {\n                e.setJob(new MoveJob(intersectionPoint))\n            }\n        })\n        EventBus.publishEvent(new JobCreateEvent(surfJob))\n        surface.updateJobColor()\n        if (GameState.selectedEntities.length > 0) EventBus.publishEvent(new EntityDeselected())\n    }\n\n    getTerrainPositionFromEvent(event): Vector2 {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const rx = (cx / this.canvas.width) * 2 - 1\n        const ry = -(cy / this.canvas.height) * 2 + 1\n        const intersectionPoint = this.worldMgr.getTerrainIntersectionPoint(rx, ry)\n        return intersectionPoint ? new Vector2(intersectionPoint.x, intersectionPoint.z) : null\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        this.canvas.dispatchEvent(event)\n        return true\n    }\n\n}\n","export class BaseElement {\n\n    parent: BaseElement = null\n    x: number = 0\n    y: number = 0\n    relX: number = 0\n    relY: number = 0\n    width: number = 0\n    height: number = 0\n    children: BaseElement[] = []\n    hidden: boolean = false\n    disabled: boolean = false\n    hover: boolean = false\n    pressed: boolean = false\n\n    constructor(parent: BaseElement = null) {\n        this.parent = parent\n    }\n\n    reset() {\n        this.hidden = false\n        this.disabled = false\n        this.hover = false\n        this.pressed = false\n        this.children.forEach((c) => c.reset())\n    }\n\n    addChild<T extends BaseElement>(child: T): T {\n        child.parent = this\n        this.children.push(child)\n        child.updatePosition()\n        return child\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n    }\n\n    drawTooltip(context: CanvasRenderingContext2D) {\n    }\n\n    onClick() {\n    }\n\n    isInactive(): boolean {\n        for (let parent = this.parent; !!parent; parent = parent.parent) if (parent.isInactive()) return true\n        return this.hidden || this.disabled\n    }\n\n    hide() {\n        this.hidden = true\n        this.children.forEach((child) => child.hide())\n    }\n\n    show() {\n        this.hidden = false\n        this.children.forEach((child) => child.show())\n    }\n\n    updatePosition() {\n        this.x = this.parent ? this.parent.x + this.relX : this.relX\n        this.y = this.parent ? this.parent.y + this.relY : this.relY\n        this.children.forEach((child) => child.updatePosition())\n    }\n\n    isInRect(cx, cy) {\n        return cx >= this.x && cy >= this.y && cx < this.x + this.width && cy < this.y + this.height\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = this.pressed && this.hover\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => stateChanged = child.checkHover(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let stateChanged = this.pressed !== inRect\n        this.pressed = inRect\n        this.children.forEach((child) => stateChanged = child.checkClick(cx, cy) || stateChanged)\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        if (inRect && this.pressed) this.onClick()\n        let stateChanged = false\n        this.children.forEach((child) => stateChanged = child.checkRelease(cx, cy) || stateChanged)\n        stateChanged = this.pressed || stateChanged\n        this.pressed = false\n        return stateChanged\n    }\n\n    release(): boolean {\n        let stateChanged = this.pressed || this.hover\n        this.pressed = false\n        this.hover = false\n        this.children.forEach((child) => stateChanged = child.release() || stateChanged)\n        return stateChanged\n    }\n\n    notifyRedraw() {\n        if (this.parent) this.parent.notifyRedraw()\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\nimport { NATIVE_FRAMERATE, PANEL_ANIMATION_MULTIPLIER } from '../../../main'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { clearTimeoutSafe } from '../../../core/Util'\n\nexport class Panel extends BaseElement {\n\n    img: HTMLCanvasElement = null\n    xOut: number = 0\n    yOut: number = 0\n    xIn: number = 0\n    yIn: number = 0\n    animationTimeout = null\n    movedIn: boolean = true // xIn, yIn is the collapsed position out of screen\n\n    constructor(panelCfg?: PanelCfg) {\n        super()\n        if (panelCfg) {\n            this.img = ResourceManager.getImage(panelCfg.filename)\n            this.xOut = panelCfg.xOut\n            this.yOut = panelCfg.yOut\n            this.xIn = panelCfg.xIn\n            this.yIn = panelCfg.yIn\n            this.relX = this.xIn\n            this.relY = this.yIn\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.relX = this.xIn\n        this.relY = this.yIn\n        this.movedIn = true\n        this.updatePosition()\n    }\n\n    isInactive(): boolean {\n        return this.animationTimeout || super.isInactive()\n    }\n\n    updateAnimation(targetX: number, targetY: number, speed: number, onDone: () => any) {\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= speed && Math.abs(diffY) <= speed) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * speed)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * speed)\n            const panel = this\n            this.animationTimeout = setTimeout(() => panel.updateAnimation(targetX, targetY, speed, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    setMovedIn(movedIn: boolean, onDone: () => any = null) {\n        if (this.movedIn !== movedIn) {\n            this.toggleState(onDone)\n        } else if (onDone) {\n            onDone()\n        }\n    }\n\n    toggleState(onDone: () => any = null) {\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        if (this.movedIn) {\n            this.movedIn = false\n            this.updateAnimation(this.xOut, this.yOut, PANEL_ANIMATION_MULTIPLIER, onDone)\n        } else {\n            this.movedIn = true\n            this.updateAnimation(this.xIn, this.yIn, PANEL_ANIMATION_MULTIPLIER, onDone)\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.img) context.drawImage(this.img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from './BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class Button extends BaseElement {\n\n    buttonType: string = null\n    imgNormal: HTMLCanvasElement = null\n    imgHover: HTMLCanvasElement = null\n    imgPressed: HTMLCanvasElement = null\n    imgDisabled: HTMLCanvasElement = null\n    tooltip: string = null\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent)\n        this.buttonType = btnCfg.buttonType\n        this.imgNormal = ResourceManager.getImageOrNull(btnCfg.normalFile)\n        this.imgHover = ResourceManager.getImageOrNull(btnCfg.highlightFile)\n        this.imgPressed = ResourceManager.getImageOrNull(btnCfg.pressedFile)\n        this.imgDisabled = ResourceManager.getImageOrNull(btnCfg.disabledFile)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width || this.imgNormal?.width || this.imgPressed?.width\n        this.height = btnCfg.height || this.imgNormal?.height || this.imgPressed?.height\n        this.tooltip = btnCfg.tooltip\n        this.updatePosition()\n    }\n\n    onClick() {\n        console.log('button pressed: ' + this.buttonType)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled || this.imgPressed || this.imgNormal\n        } else if (this.pressed) {\n            img = this.imgPressed || this.imgNormal\n        } else if (this.hover) {\n            img = this.imgHover || this.imgNormal\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { BaseElement } from '../base/BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class SideBarLabel extends BaseElement {\n\n    tooltip: string\n    label: string\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg, label: string) {\n        super(parent)\n        this.relX = btnCfg.relX\n        this.relY = btnCfg.relY\n        this.width = btnCfg.width\n        this.height = btnCfg.height\n        this.tooltip = btnCfg.tooltip\n        this.label = label\n        this.updatePosition()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.textAlign = 'center'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.label, this.x + this.width / 2, this.y + this.height - 2)\n        super.onRedraw(context)\n    }\n\n}\n\n","import { GameState } from '../../model/GameState'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { MaterialAmountChanged } from '../../../event/WorldEvents'\nimport { CollectableType } from '../../../scene/model/collect/CollectableEntity'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { SideBarLabel } from './SideBarLabel'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class PanelCrystalSideBar extends Panel {\n\n    labelOre: SideBarLabel\n    labelCrystal: SideBarLabel\n    imgNoCrystal: HTMLCanvasElement\n    imgSmallCrystal: HTMLCanvasElement\n    imgUsedCrystal: HTMLCanvasElement\n    imgOre: HTMLCanvasElement\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonCrystalSideBarCfg) {\n        super(panelCfg)\n        this.labelOre = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarOre, GameState.totalOre.toString()))\n        this.labelCrystal = this.addChild(new SideBarLabel(this, buttonsCfg.panelButtonCrystalSideBarCrystals, GameState.numCrystal.toString()))\n        this.imgNoCrystal = ResourceManager.getImage('Interface/RightPanel/NoSmallCrystal.bmp')\n        this.imgSmallCrystal = ResourceManager.getImage('Interface/RightPanel/SmallCrystal.bmp')\n        this.imgUsedCrystal = ResourceManager.getImage('Interface/RightPanel/UsedCrystal.bmp')\n        this.imgOre = ResourceManager.getImage('Interface/RightPanel/CrystalSideBar_Ore.bmp')\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, (event: MaterialAmountChanged) => {\n            this.updateQuantities(event.collectableType)\n        })\n    }\n\n    updateQuantities(type: CollectableType) {\n        if (type === CollectableType.CRYSTAL || type === CollectableType.ORE || type === CollectableType.BRICK) {\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        this.labelOre.label = GameState.totalOre.toString()\n        this.labelCrystal.label = GameState.numCrystal.toString()\n        super.onRedraw(context)\n        // draw crystals\n        let curX = this.x + this.img.width - 8\n        let curY = this.y + this.img.height - 34\n        for (let c = 0; (GameState.neededCrystals < 1 || c < Math.max(GameState.neededCrystals, GameState.numCrystal)) && curY >= Math.max(this.imgNoCrystal.height, this.imgSmallCrystal.height, this.imgUsedCrystal.height); c++) {\n            let imgCrystal = this.imgNoCrystal\n            if (GameState.usedCrystals > c) {\n                imgCrystal = this.imgUsedCrystal\n            } else if (GameState.numCrystal > c) {\n                imgCrystal = this.imgSmallCrystal\n            }\n            curY -= imgCrystal.height\n            context.drawImage(imgCrystal, curX - imgCrystal.width / 2, curY)\n        }\n        // draw ores\n        curX = this.x + this.img.width - 21\n        curY = this.y + this.img.height - 42\n        for (let i = 0; i < GameState.numOre && curY >= this.imgOre.height; ++i) {\n            curY -= this.imgOre.height\n            context.drawImage(this.imgOre, curX - this.imgOre.width / 2, curY)\n        }\n    }\n\n}\n\nexport class ButtonCrystalSideBarCfg extends BaseConfig {\n\n    panelButtonCrystalSideBarOre: ButtonCfg = null\n    panelButtonCrystalSideBarCrystals: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonInfoDockCfg extends BaseConfig {\n\n    panelButtonInfoDockGoto: ButtonCfg = null\n    panelButtonInfoDockClose: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonPriorityListCfg extends BaseConfig {\n\n    panelButtonPriorityListDisable: ButtonCfg[] = []\n    panelButtonPriorityListUpOne: ButtonCfg[] = []\n    panelButtonPriorityListClose: ButtonCfg = null // not used in the game\n    panelButtonPriorityListReset: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    assignValue(objKey, lCfgKeyName, cfgValue): boolean {\n        if (lCfgKeyName.match(/panelButtonPriorityListDisable\\d+/i)) {\n            this.panelButtonPriorityListDisable.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else if (lCfgKeyName.match(/panelButtonPriorityListUpOne\\d+/i)) {\n            this.panelButtonPriorityListUpOne.push(this.parseValue(lCfgKeyName, cfgValue))\n            return true\n        } else {\n            return super.assignValue(objKey, lCfgKeyName, cfgValue)\n        }\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class ButtonTopCfg extends BaseConfig {\n\n    panelButtonTopPanelCallToArms: ButtonCfg = null\n    panelButtonTopPanelOptions: ButtonCfg = null\n    panelButtonTopPanelPriorities: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { ButtonRadarCfg } from '../game/gui/radar/RadarPanel'\nimport { ButtonCrystalSideBarCfg } from '../game/gui/sidebar/PanelCrystalSideBar'\nimport { ButtonInfoDockCfg } from '../game/gui/infodock/ButtonInfoDockCfg'\nimport { ButtonPriorityListCfg } from '../game/gui/toppanel/ButtonPriorityListCfg'\nimport { ButtonTopCfg } from '../game/gui/toppanel/ButtonTopCfg'\n\nexport class ButtonsCfg extends BaseConfig {\n\n    panelRadar: ButtonRadarCfg = null\n    panelCrystalSideBar: ButtonCrystalSideBarCfg = null\n    panelTopPanel: ButtonTopCfg = null\n    panelInformation: ButtonInformationCfg = null\n    panelPriorityList: ButtonPriorityListCfg = null\n    panelCameraControl: ButtonCameraControlCfg = null\n    panelInfoDock: ButtonInfoDockCfg = null\n    panelEncyclopedia: any = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        const btnCfgValue = {}\n        cfgValue.forEach(arr => btnCfgValue[arr[0]] = arr)\n        if (lCfgKeyName === 'panelRadar'.toLowerCase()) {\n            return new ButtonRadarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCrystalSideBar'.toLowerCase()) {\n            return new ButtonCrystalSideBarCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelTopPanel'.toLowerCase()) {\n            return new ButtonTopCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInformation'.toLowerCase()) {\n            return new ButtonInformationCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelPriorityList'.toLowerCase()) {\n            return new ButtonPriorityListCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelCameraControl'.toLowerCase()) {\n            return new ButtonCameraControlCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelInfoDock'.toLowerCase()) {\n            return new ButtonInfoDockCfg(btnCfgValue)\n        } else if (lCfgKeyName === 'panelEncyclopedia'.toLowerCase()) {\n            return null // not used in the game\n        } else {\n            return btnCfgValue\n        }\n    }\n\n}\n\nexport class ButtonInformationCfg extends BaseConfig {\n\n    panelButtonInformationToggle: ButtonCfg = null\n    panelButtonInformationFunction: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n\nexport class ButtonCameraControlCfg extends BaseConfig {\n\n    panelButtonCameraControlZoomIn: ButtonCfg = null\n    panelButtonCameraControlZoomOut: ButtonCfg = null\n    panelButtonCameraControlCycleBuildings: ButtonCfg = null\n    panelButtonCameraControlRotate: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n\nexport class BaseButtonCfg {\n\n    buttonType?: string = null\n    normalFile?: string = null\n    highlightFile?: string = null\n    pressedFile?: string = null\n    disabledFile?: string = null\n    relX?: number = 0\n    relY?: number = 0\n    width?: number = 0\n    height?: number = 0\n    tooltip?: string = null\n}\n\nexport class ButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super()\n        if (cfgValue.length === 9) {\n            [this.buttonType, this.normalFile, this.highlightFile, this.pressedFile, this.relX, this.relY, this.width, this.height, this.tooltip] = cfgValue\n        } else {\n            throw 'Invalid number of arguments (' + cfgValue.length + ') given for button configuration expected 9 or 5'\n        }\n    }\n\n}\n\nexport class InfoButtonCfg extends BaseButtonCfg {\n\n    constructor(buttonImageFilename: string) {\n        super()\n        this.normalFile = buttonImageFilename\n        this.highlightFile = buttonImageFilename\n        this.pressedFile = buttonImageFilename\n        this.disabledFile = buttonImageFilename\n        this.relX = 0\n        this.relY = 0\n    }\n\n}\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { BaseConfig } from '../../../cfg/BaseConfig'\n\nexport class RadarPanel extends Panel {\n\n    fill: Panel\n    overlay: Panel\n    btnToggle: Button\n    btnMap: Button\n    btnTagged: Button\n\n    constructor(panelCfg: PanelCfg, panelFillCfg: PanelCfg, panelOverlayCfg: PanelCfg, buttonsCfg: ButtonRadarCfg) {\n        super(panelCfg)\n        this.fill = this.addChild(new Panel(panelFillCfg))\n        // fill cords given in abs, turn to rel (otherwise animation wont work)\n        this.fill.relX = this.relX - this.fill.relX\n        this.fill.relY = this.relY - this.fill.relY\n        this.overlay = this.addChild(new Panel(panelOverlayCfg))\n        // this.overlay.hide();\n        this.btnToggle = this.addChild(new Button(this, buttonsCfg.panelButtonRadarToggle))\n        this.btnToggle.onClick = () => this.toggleState()\n        this.btnMap = this.addChild(new Button(this, buttonsCfg.panelButtonRadarMapView))\n        this.btnMap.onClick = () => {\n            // this.fill.hide();\n            // this.overlay.hide();\n        }\n        this.btnTagged = this.addChild(new Button(this, buttonsCfg.panelButtonRadarTaggedObjectView))\n        this.btnTagged.onClick = () => {\n            // this.fill.show();\n            // this.overlay.show(); // TODO only show overlay, when entity selected\n        }\n    }\n\n}\n\nexport class ButtonRadarCfg extends BaseConfig {\n\n    panelButtonRadarToggle: ButtonCfg = null\n    panelButtonRadarTaggedObjectView: ButtonCfg = null\n    panelButtonRadarZoomIn: ButtonCfg = null\n    panelButtonRadarZoomOut: ButtonCfg = null\n    panelButtonRadarMapView: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new ButtonCfg(cfgValue)\n    }\n\n}\n","import { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class TextInfoMessage {\n\n    infoImage\n    textImage\n\n    constructor(font: BitmapFont, infoMessageEntryConfig: TextInfoMessageEntryConfig, maxWidth: number) {\n        this.textImage = font.createTextImage(infoMessageEntryConfig.text, maxWidth)\n        this.infoImage = ResourceManager.getImageOrNull(infoMessageEntryConfig.imageFilename)\n    }\n\n}\n","import { ResourceManager } from '../../../resource/ResourceManager'\nimport { GameState } from '../../model/GameState'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { TextInfoMessageConfig } from './TextInfoMessageConfig'\nimport { EventBus } from '../../../event/EventBus'\nimport { TextInfoMessage } from './TextInfoMessage'\nimport { clearTimeoutSafe } from '../../../core/Util'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class MessagePanel extends Panel {\n\n    imgAir: HTMLCanvasElement = null\n    currentMessage: TextInfoMessage = null\n    messageTimeout = null\n\n    msgSpaceToContinue: TextInfoMessage\n    msgAirSupplyLow: TextInfoMessage\n    msgAirSupplyRunningOut: TextInfoMessage\n    msgGameCompleted: TextInfoMessage\n    msgManTrained: TextInfoMessage\n    msgUnitUpgraded: TextInfoMessage\n\n    constructor(panelCfg: PanelCfg, textInfoMessageConfig: TextInfoMessageConfig) {\n        super(panelCfg)\n        this.relX = this.xOut = this.xIn = 42\n        this.relY = this.yOut = this.yIn = 409\n        this.imgAir = ResourceManager.getImage('Interface/Airmeter/msgpanel_air_juice.bmp')\n\n        const font = ResourceManager.getDefaultFont()\n        const crystalFound = new TextInfoMessage(font, textInfoMessageConfig.textCrystalFound, this.img.width)\n        EventBus.registerEventListener(EventKey.LOCATION_CRYSTAL_FOUND, () => this.setMessage(crystalFound))\n        this.msgSpaceToContinue = new TextInfoMessage(font, textInfoMessageConfig.textSpaceToContinue, this.img.width)\n        const cavernDiscovered = new TextInfoMessage(font, textInfoMessageConfig.textCavernDiscovered, this.img.width)\n        EventBus.registerEventListener(EventKey.CAVERN_DISCOVERED, () => this.setMessage(cavernDiscovered))\n        const oreFound = new TextInfoMessage(font, textInfoMessageConfig.textOreFound, this.img.width)\n        EventBus.registerEventListener(EventKey.ORE_FOUND, () => this.setMessage(oreFound))\n        this.msgAirSupplyLow = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyLow, this.img.width)\n        this.msgAirSupplyRunningOut = new TextInfoMessage(font, textInfoMessageConfig.textAirSupplyRunningOut, this.img.width)\n        this.msgGameCompleted = new TextInfoMessage(font, textInfoMessageConfig.textGameCompleted, this.img.width)\n        this.msgManTrained = new TextInfoMessage(font, textInfoMessageConfig.textManTrained, this.img.width)\n        EventBus.registerEventListener(EventKey.RAIDER_TRAINED, () => this.setMessage(this.msgManTrained))\n        this.msgUnitUpgraded = new TextInfoMessage(font, textInfoMessageConfig.textUnitUpgraded, this.img.width)\n    }\n\n    setMessage(textInfoMessage: TextInfoMessage, timeout: number = 3000) {\n        this.messageTimeout = clearTimeoutSafe(this.messageTimeout)\n        this.currentMessage = textInfoMessage\n        this.notifyRedraw()\n        if (timeout) {\n            const that = this\n            this.messageTimeout = setTimeout(() => {\n                that.currentMessage = null\n                that.notifyRedraw()\n            }, timeout)\n        }\n    }\n\n    unsetMessage(textInfoMessage: TextInfoMessage) {\n        if (this.currentMessage === textInfoMessage) {\n            this.currentMessage = null\n            this.notifyRedraw()\n        }\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (GameState.airlevel > 0) {\n            const width = Math.round(236 * Math.min(1, GameState.airlevel))\n            context.drawImage(this.imgAir, this.x + 85, this.y + 6, width, 8)\n        }\n        const textImage = this.currentMessage?.textImage\n        const infoImage = this.currentMessage?.infoImage\n        if (textImage) {\n            const txtX = this.x + (this.img.width - textImage.width - (infoImage ? infoImage.width : 0)) / 2\n            context.drawImage(textImage, txtX, this.y + 26)\n        }\n        if (infoImage) {\n            const infoX = this.x + this.img.width - infoImage.width\n            context.drawImage(infoImage, infoX, this.y + 16)\n        }\n    }\n\n}\n","import { BaseButtonCfg } from './ButtonsCfg'\n\nexport class IconPanelBackButtonCfg extends BaseButtonCfg {\n\n    constructor(cfgValue: any) {\n        super();\n        [this.width, this.height, this.highlightFile, this.pressedFile, this.tooltip] = cfgValue // Interface back button\n        this.relX = 4\n        this.relY = 14\n    }\n\n}\n","import { BaseButtonCfg } from './ButtonsCfg'\n\nexport class MenuItemCfg extends BaseButtonCfg {\n\n    tooltipDisabled: string\n    hotkey: string\n\n    constructor(cfgValue: any) {\n        super();\n        [this.normalFile, this.disabledFile, this.pressedFile, this.tooltip, this.tooltipDisabled, this.hotkey] = cfgValue\n        this.width = 40\n        this.height = 40\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { Button } from '../base/Button'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\n\nexport class IconPanelButton extends Button {\n\n    tooltipDisabled: string\n    hotkey: string\n    isDisabled: () => boolean = () => this.disabled\n\n    constructor(parent: BaseElement, menuItemCfg: MenuItemCfg, itemKey: string, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemCfg)\n        this.buttonType = itemKey\n        this.relX = parentWidth - 59\n        this.relY = 9 + this.height * menuIndex\n        this.tooltipDisabled = menuItemCfg.tooltipDisabled\n        this.hotkey = menuItemCfg.hotkey\n        this.disabled = true\n    }\n\n    reset() {\n        super.reset()\n        this.disabled = true\n        this.updateState(false)\n    }\n\n    onClick() {\n        console.log('menu item pressed: ' + this.buttonType)\n    }\n\n    updateState(autoRedraw: boolean = true) {\n        const targetState = !!this.isDisabled()\n        const stateChanged = this.disabled !== targetState\n        this.disabled = targetState\n        if (stateChanged && autoRedraw) this.notifyRedraw()\n        return stateChanged\n    }\n\n    drawHover(context: CanvasRenderingContext2D) {\n        super.drawHover(context)\n        if (!this.disabled && this.hover) {\n            context.strokeStyle = '#0f0'\n            context.lineWidth = 2\n            context.strokeRect(this.x - context.lineWidth / 2, this.y - context.lineWidth / 2, this.width + context.lineWidth - 1, this.height + context.lineWidth - 1)\n        }\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { Button } from '../base/Button'\nimport { IconPanelBackButtonCfg } from '../../../cfg/IconPanelBackButtonCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\nimport { IconPanelButton } from './IconPanelButton'\n\nexport class IconSubPanel extends Panel {\n\n    backBtn: Button = null\n    iconPanelButtons: IconPanelButton[] = []\n\n    constructor(numOfItems, onBackPanel: Panel = null) {\n        super()\n        if (onBackPanel) {\n            const backBtnCfg = new IconPanelBackButtonCfg(ResourceManager.cfg('InterfaceBackButton'))\n            this.backBtn = this.addChild(new Button(this, backBtnCfg))\n            this.backBtn.onClick = () => this.toggleState(() => onBackPanel.toggleState())\n        }\n        const frameImgCfg = ResourceManager.cfg('InterfaceSurroundImages', numOfItems.toString())\n        // noinspection JSUnusedLocalSymbols\n        const [imgName, val1, val2, val3, val4, imgNameWoBackName, woBack1, woBack2] = frameImgCfg\n        this.img = onBackPanel ? ResourceManager.getImage(imgName) : ResourceManager.getImage(imgNameWoBackName)\n        this.xOut = -this.img.width\n    }\n\n    addMenuItem(menuItemGroup: string, itemKey: string) {\n        const menuItemCfg = new MenuItemCfg(ResourceManager.cfg(menuItemGroup, itemKey))\n        const menuItem = this.addChild(new IconPanelButton(this, menuItemCfg, itemKey, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(menuItem)\n        return menuItem\n    }\n\n    toggleState(onDone: () => any = null) {\n        super.toggleState(onDone)\n        if (!this.movedIn) this.iconPanelButtons.forEach((button) => button.updateState())\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\n\nexport class BuildingPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Toolstation')\n        this.addMenuItem('InterfaceBuildImages', 'TeleportPad')\n        this.addMenuItem('InterfaceBuildImages', 'Docks')\n        this.addMenuItem('InterfaceBuildImages', 'Powerstation')\n        this.addMenuItem('InterfaceBuildImages', 'Barracks')\n        this.addMenuItem('InterfaceBuildImages', 'Upgrade')\n        this.addMenuItem('InterfaceBuildImages', 'Geo-dome')\n        this.addMenuItem('InterfaceBuildImages', 'OreRefinery')\n        this.addMenuItem('InterfaceBuildImages', 'Gunstation')\n        this.addMenuItem('InterfaceBuildImages', 'TeleportBIG')\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconSubPanel } from './IconSubPanel'\n\nexport class SmallVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'Hoverboard')\n        this.addMenuItem('InterfaceBuildImages', 'SmallDigger')\n        this.addMenuItem('InterfaceBuildImages', 'SmallTruck')\n        this.addMenuItem('InterfaceBuildImages', 'SmallCat')\n        this.addMenuItem('InterfaceBuildImages', 'SmallMLP')\n        this.addMenuItem('InterfaceBuildImages', 'SmallHeli')\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\n\nexport class LargeVehiclePanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(5, onBackPanel)\n        this.addMenuItem('InterfaceBuildImages', 'BullDozer')\n        this.addMenuItem('InterfaceBuildImages', 'WalkerDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeMLP')\n        this.addMenuItem('InterfaceBuildImages', 'LargeDigger')\n        this.addMenuItem('InterfaceBuildImages', 'LargeCat')\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\n\nexport class SelectBasePanel extends IconSubPanel {\n\n    constructor(numOfItems, onBackPanel: Panel) {\n        super(numOfItems, onBackPanel)\n        this.backBtn.onClick = () => EventBus.publishEvent(new EntityDeselected())\n    }\n\n}\n","import { SurfaceJob } from './SurfaceJob'\nimport { JobType } from '../JobType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { RaiderTool } from '../../../../scene/model/RaiderTool'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { Surface } from '../../../../scene/model/map/Surface'\n\nexport class ReinforceJob extends SurfaceJob {\n\n    constructor(surface: Surface) {\n        super(JobType.REINFORCE, surface)\n        this.color = 0x60a060\n        this.colorPriority = 1\n        this.requiredTool = RaiderTool.HAMMER\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.surface.getDigPositions().map((p) => new PathTarget(p))\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.surface.reinforce()\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityReinforce\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { SurfaceJob } from '../../model/job/surface/SurfaceJob'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent, SpawnDynamiteEvent } from '../../../event/WorldEvents'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { IconPanelButton } from './IconPanelButton'\nimport { Building } from '../../model/entity/building/Building'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { JobType } from '../../model/job/JobType'\nimport { DrillJob } from '../../model/job/surface/DrillJob'\nimport { ReinforceJob } from '../../model/job/surface/ReinforceJob'\n\nexport class SelectWallPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        const itemDrill = this.addWallMenuItem('Interface_MenuItem_Dig', JobType.DRILL, (s) => new DrillJob(s))\n        itemDrill.isDisabled = () => !(GameState.selectedSurface?.isDrillable()) &&\n            !(GameState.selectedSurface?.isDrillableHard()) // TODO implement vehicle check for drill hard skill\n        const itemReinforce = this.addWallMenuItem('Interface_MenuItem_Reinforce', JobType.REINFORCE, (s) => new ReinforceJob(s))\n        itemReinforce.isDisabled = () => !(GameState.selectedSurface?.isReinforcable())\n        const itemDynamite = this.addWallMenuItem('Interface_MenuItem_Dynamite', JobType.BLOW, null)\n        itemDynamite.isDisabled = () => !GameState.hasBuildingWithUpgrades(Building.TOOLSTATION, 2) &&\n            !GameState.raiders.some((r) => r.hasSkill(RaiderSkill.DEMOLITION))\n        const itemDeselect = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeselectDig')\n        itemDeselect.isDisabled = () => false\n        itemDeselect.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.cancelJobs()\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => {\n            itemDrill.updateState(false)\n            itemReinforce.updateState(false)\n            itemDynamite.updateState(false)\n            this.notifyRedraw()\n        })\n    }\n\n    addWallMenuItem(itemKey: string, jobType: JobType, createJob: (surface: Surface) => SurfaceJob): IconPanelButton {\n        const item = this.addMenuItem('InterfaceImages', itemKey)\n        item.onClick = () => {\n            const selectedSurface = GameState.selectedSurface\n            if (selectedSurface) {\n                if (jobType === JobType.BLOW) {\n                    EventBus.publishEvent(new SpawnDynamiteEvent(selectedSurface))\n                } else if (!selectedSurface.hasJobType(jobType)) {\n                    EventBus.publishEvent(new JobCreateEvent(createJob(selectedSurface)))\n                }\n                EventBus.publishEvent(new EntityDeselected())\n            }\n        }\n        return item\n    }\n\n}\n","import { CollectableEntity } from '../../../../scene/model/collect/CollectableEntity'\nimport { Surface } from '../../../../scene/model/map/Surface'\nimport { SurfaceType } from '../../../../scene/model/map/SurfaceType'\nimport { PriorityIdentifier } from '../PriorityIdentifier'\nimport { JobType } from '../JobType'\nimport { PathTarget } from '../../../../scene/model/PathTarget'\nimport { SurfaceJob } from './SurfaceJob'\nimport { RaiderTool } from '../../../../scene/model/RaiderTool'\n\nexport class CompletePowerPathJob extends SurfaceJob {\n\n    placedItems: CollectableEntity[]\n    workplaces: PathTarget[]\n\n    constructor(surface: Surface, placedItems: CollectableEntity[]) {\n        super(JobType.COMPLETE_POWER_PATH, surface)\n        this.requiredTool = RaiderTool.SHOVEL\n        this.surface = surface\n        this.placedItems = placedItems\n        this.workplaces = [new PathTarget(surface.getRandomPosition())]\n    }\n\n    onJobComplete() {\n        super.onJobComplete()\n        this.placedItems.forEach((placed) => placed.removeFromScene())\n        this.surface.surfaceType = SurfaceType.POWER_PATH\n        this.surface.updateTexture()\n        this.surface.neighbors.forEach((s) => s.updateTexture())\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityConstruction\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.workplaces\n    }\n\n}\n","import { Vector2, Vector3 } from 'three'\nimport { Surface } from './map/Surface'\nimport { CollectableEntity, CollectableType } from './collect/CollectableEntity'\nimport { EventBus } from '../../event/EventBus'\nimport { JobCreateEvent } from '../../event/WorldEvents'\nimport { CompletePowerPathJob } from '../../game/model/job/surface/CompletePowerPathJob'\nimport { GameState } from '../../game/model/GameState'\n\nexport class BuildingSite {\n\n    isPowerPath: boolean\n    surfaces: Surface[] = []\n    neededByType = {}\n    assignedByType = {}\n    onSiteByType = {}\n    complete: boolean = false\n\n    constructor(isPowerPath: boolean = false) {\n        this.isPowerPath = isPowerPath\n    }\n\n    getPosition(): Vector3 {\n        return this.surfaces[0].getCenterWorld() // TODO use combined center of all surfaces\n    }\n\n    getRandomDropPosition(): Vector2 {\n        return this.surfaces[0].getRandomPosition() // TODO use \"primary\" surface\n    }\n\n    needs(collectableType: CollectableType): boolean {\n        const needed = this.neededByType[collectableType] || 0\n        const assigned = (this.assignedByType[collectableType] || []).length\n        return needed > assigned\n    }\n\n    assign(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        this.assignedByType[collectableType] = this.assignedByType[collectableType] || []\n        this.assignedByType[collectableType].push(item)\n    }\n\n    unAssign(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        this.assignedByType[collectableType] = (this.assignedByType[collectableType] || [])\n        this.assignedByType[collectableType].splice(this.assignedByType[collectableType].indexOf(item), 1)\n    }\n\n    addItem(item: CollectableEntity) {\n        const collectableType = item.getCollectableType()\n        const needed = this.neededByType[collectableType] || 0\n        this.onSiteByType[collectableType] = this.onSiteByType[collectableType] || []\n        if (this.onSiteByType[collectableType].length < needed) {\n            item.worldMgr.sceneManager.scene.add(item.group)\n            this.onSiteByType[collectableType].push(item)\n            this.checkComplete()\n        } else {\n            item.resetTarget()\n        }\n    }\n\n    checkComplete() {\n        if (this.complete) return\n        let complete = true\n        Object.keys(this.neededByType).some((neededType) => {\n            const needed = this.neededByType[neededType] || 0\n            const onSite = (this.onSiteByType[neededType] || []).length\n            if (onSite < needed) {\n                complete = false\n                return true\n            }\n        })\n        if (complete) {\n            this.complete = complete\n            GameState.buildingSites.splice(GameState.buildingSites.indexOf(this), 1)\n            const items = []\n            Object.keys(this.onSiteByType).forEach((collectableType) => items.push(...this.onSiteByType[collectableType]))\n            if (this.isPowerPath) {\n                EventBus.publishEvent(new JobCreateEvent(new CompletePowerPathJob(this.surfaces[0], items)))\n            } else {\n                // TODO implement building spawning\n                console.log('Building site is complete')\n            }\n        }\n    }\n\n}\n","import { CollectableEntity, CollectableType } from './CollectableEntity'\nimport { PriorityIdentifier } from '../../../game/model/job/PriorityIdentifier'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { SceneManager } from '../../SceneManager'\nimport { LWOLoader } from '../../../resource/LWOLoader'\nimport { CollectPathTarget } from '../CollectionTarget'\nimport { Building } from '../../../game/model/entity/building/Building'\nimport { Surface } from '../map/Surface'\nimport { GameState } from '../../../game/model/GameState'\n\nexport class ElectricFence extends CollectableEntity {\n\n    targetSurface: Surface\n\n    constructor(surface: Surface) {\n        super()\n        const resource = ResourceManager.getResource('Buildings/E-Fence/E-Fence4.lwo')\n        const mesh = SceneManager.registerMesh(new LWOLoader('Buildings/E-Fence/').parse(resource))\n        this.group.add(mesh)\n        this.targetSurface = surface\n    }\n\n    getCollectableType(): CollectableType {\n        return CollectableType.ELECTRIC_FENCE\n    }\n\n    getTargetBuildingTypes(): Building[] {\n        return [Building.TOOLSTATION]\n    }\n\n    getPriorityIdentifier(): PriorityIdentifier {\n        return PriorityIdentifier.aiPriorityConstruction\n    }\n\n    protected updateTargets(): CollectPathTarget[] {\n        if (this.targets.length < 1) {\n            if (this.targetSurface.canPlaceFence()) {\n                this.targets = [new CollectPathTarget(this.targetSurface.getCenterWorld2D(), null, null)]\n            } else {\n                this.targets = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                    .map((b) => new CollectPathTarget(b.getDropPosition2D(), null, b))\n            }\n        } else if (!this.targetSurface.canPlaceFence() && !this.targets[0].building) {\n            this.targets = GameState.getBuildingsByType(...this.getTargetBuildingTypes())\n                .map((b) => new CollectPathTarget(b.getDropPosition2D(), null, b))\n        }\n        return this.targets\n    }\n\n    get stats() {\n        return null\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { SurfaceType } from '../../../scene/model/map/SurfaceType'\nimport { Building } from '../../model/entity/building/Building'\nimport { CollectableType } from '../../../scene/model/collect/CollectableEntity'\nimport { EventBus } from '../../../event/EventBus'\nimport { BuildingSite } from '../../../scene/model/BuildingSite'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { ElectricFence } from '../../../scene/model/collect/ElectricFence'\n\nexport class SelectFloorPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(3, onBackPanel)\n        const pathItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_LayPath')\n        pathItem.onClick = () => {\n            const selectedSurface = GameState.selectedEntities[0] as Surface\n            selectedSurface.surfaceType = SurfaceType.POWER_PATH_SITE\n            selectedSurface.updateTexture()\n            const targetBuilding = GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), Building.TOOLSTATION)\n            if (targetBuilding) targetBuilding.spawnMaterials(GameState.dropMaterial(CollectableType.ORE, 2))\n            const site = new BuildingSite(true)\n            site.surfaces.push(selectedSurface)\n            site.neededByType[CollectableType.ORE] = 2\n            GameState.buildingSites.push(site)\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        pathItem.isDisabled = () => GameState.selectedSurface?.surfaceType !== SurfaceType.GROUND\n        const removeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_RemovePath')\n        removeItem.onClick = () => {\n            GameState.selectedSurface?.makeRubble(2)\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        removeItem.isDisabled = () => GameState.selectedSurface?.surfaceType !== SurfaceType.POWER_PATH\n        const placeFenceItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        placeFenceItem.isDisabled = () => {\n            return !GameState.hasOneBuildingOf(Building.POWER_STATION) || !GameState.selectedSurface?.canPlaceFence()\n        }\n        placeFenceItem.onClick = () => {\n            const selectedSurface = GameState.selectedSurface\n            if (selectedSurface) {\n                const toolstation = GameState.getClosestBuildingByType(selectedSurface.getCenterWorld(), Building.TOOLSTATION)\n                if (toolstation) {\n                    toolstation?.spawnMaterials([new ElectricFence(selectedSurface)])\n                }\n            }\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => {\n            pathItem.updateState()\n            removeItem.updateState()\n            placeFenceItem.updateState()\n        })\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { JobCreateEvent } from '../../../event/WorldEvents'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { ClearRubbleJob } from '../../model/job/surface/ClearRubbleJob'\n\nexport class SelectRubblePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(2, onBackPanel)\n        const clearRubbleItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_ClearRubble')\n        clearRubbleItem.onClick = () => {\n            EventBus.publishEvent(new JobCreateEvent(new ClearRubbleJob(GameState.selectedSurface)))\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        clearRubbleItem.isDisabled = () => !GameState.selectedSurface?.hasRubble()\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_PlaceFence')\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, () => clearRubbleItem.updateState())\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\nimport { IconPanelButton } from './IconPanelButton'\nimport { ResourceManager } from '../../../resource/ResourceManager'\n\nexport class IconPanelToggleButton extends IconPanelButton {\n\n    toggleState: boolean = false\n    imgOnNormal: HTMLCanvasElement\n    imgOnHover: HTMLCanvasElement\n    imgOnPressed: HTMLCanvasElement\n    imgOnDisabled: HTMLCanvasElement\n\n    constructor(parent: BaseElement, menuItemOffCfg: MenuItemCfg, menuItemOnCfg: MenuItemCfg, parentWidth: number, menuIndex: number) {\n        super(parent, menuItemOffCfg, null, parentWidth, menuIndex)\n        this.imgOnNormal = ResourceManager.getImageOrNull(menuItemOnCfg.normalFile)\n        this.imgOnHover = ResourceManager.getImageOrNull(menuItemOnCfg.highlightFile)\n        this.imgOnPressed = ResourceManager.getImageOrNull(menuItemOnCfg.pressedFile)\n        this.imgOnDisabled = ResourceManager.getImageOrNull(menuItemOnCfg.disabledFile)\n    }\n\n    onClick() {\n        this.toggleState = !this.toggleState\n        this.onToggleStateChange()\n    }\n\n    onToggleStateChange() {\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.toggleState ? this.imgOnNormal : this.imgNormal\n        if (this.disabled) {\n            if (this.toggleState) {\n                img = this.imgOnDisabled || this.imgOnPressed || this.imgOnNormal\n            } else {\n                img = this.imgDisabled || this.imgPressed || this.imgNormal\n            }\n        } else if (this.pressed) {\n            if (this.toggleState) {\n                img = this.imgOnPressed || this.imgOnNormal\n            } else {\n                img = this.imgPressed || this.imgNormal\n            }\n        } else if (this.hover) {\n            if (this.toggleState) {\n                img = this.imgOnHover || this.imgOnNormal\n            } else {\n                img = this.imgHover || this.imgNormal\n            }\n        }\n        if (img) context.drawImage(img, this.x, this.y)\n        this.children.forEach((child) => child.onRedraw(context))\n        this.children.forEach((child) => child.drawHover(context))\n        this.children.forEach((child) => child.drawTooltip(context))\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { EventBus } from '../../../event/EventBus'\nimport { GameState } from '../../model/GameState'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { Building } from '../../model/entity/building/Building'\nimport { MenuItemCfg } from '../../../cfg/MenuItemCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { IconPanelToggleButton } from './IconPanelToggleButton'\n\nexport class SelectBuildingPanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(4, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_Repair')\n\n        const menuItemOffCfg = new MenuItemCfg(ResourceManager.cfg('InterfaceImages', 'Interface_MenuItem_PowerOff'))\n        const menuItemOnCfg = new MenuItemCfg(ResourceManager.cfg('InterfaceImages', 'Interface_MenuItem_PowerOn'))\n        const powerSwitchItem = this.addChild(new IconPanelToggleButton(this, menuItemOffCfg, menuItemOnCfg, this.img.width, this.iconPanelButtons.length))\n        this.iconPanelButtons.push(powerSwitchItem)\n        powerSwitchItem.isDisabled = () => GameState.usedCrystals >= GameState.numCrystal || GameState.selectedBuilding?.type === Building.POWER_STATION || GameState.selectedBuilding?.stats.SelfPowered\n        powerSwitchItem.onToggleStateChange = () => {\n            if (powerSwitchItem.toggleState) {\n                GameState.selectedBuilding?.turnOffPower()\n            } else {\n                GameState.selectedBuilding?.turnOnPower()\n            }\n        }\n        const upgradeItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeBuilding')\n        upgradeItem.isDisabled = () => !GameState.selectedBuilding?.canUpgrade()\n        upgradeItem.onClick = () => GameState.selectedBuilding?.upgrade()\n        const deleteBuildingItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteBuilding')\n        deleteBuildingItem.isDisabled = () => false\n        deleteBuildingItem.onClick = () => GameState.selectedBuilding?.beamUp()\n        EventBus.registerEventListener(EventKey.SELECTED_BUILDING, () => {\n            powerSwitchItem.updateState()\n            upgradeItem.updateState()\n        })\n        EventBus.registerEventListener(EventKey.MATERIAL_AMOUNT_CHANGED, () => {\n            powerSwitchItem.updateState()\n            upgradeItem.updateState()\n        })\n    }\n\n}\n","import { Job } from './Job'\nimport { JobType } from './JobType'\nimport { PathTarget } from '../../../scene/model/PathTarget'\n\nexport class EatJob extends Job {\n\n    constructor() {\n        super(JobType.EAT)\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return []\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { IconPanelButton } from './IconPanelButton'\nimport { SelectBasePanel } from './SelectBasePanel'\nimport { GameState } from '../../model/GameState'\nimport { EatJob } from '../../model/job/EatJob'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\n\nexport class SelectRaiderPanel extends SelectBasePanel {\n\n    getToolItem: IconPanelButton\n    trainItem: IconPanelButton\n\n    constructor(onBackPanel: Panel) {\n        super(10, onBackPanel)\n        const feedItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GoFeed')\n        feedItem.isDisabled = () => false\n        feedItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => !r.isDriving() && r.setJob(new EatJob()))\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UnLoadMinifigure')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_MinifigurePickUp')\n        this.getToolItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GetTool')\n        this.getToolItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DropBirdScarer')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_UpgradeMan')\n        this.trainItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSkill')\n        this.trainItem.isDisabled = () => false\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoFirstPerson')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_GotoSecondPerson')\n        const deleteRaiderItem = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_DeleteMan')\n        deleteRaiderItem.isDisabled = () => false\n        deleteRaiderItem.onClick = () => GameState.selectedRaiders.forEach((r) => r.beamUp())\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { SelectBasePanel } from './SelectBasePanel'\n\nexport class SelectVehiclePanel extends SelectBasePanel {\n\n    constructor(onBackPanel: Panel) {\n        super(7, onBackPanel)\n    }\n\n}\n","import { Vector2 } from 'three'\n\nexport class Area {\n\n    x0: number = 0\n    y0: number = 0\n    x1: number = 0\n    y1: number = 0\n    center: Vector2 = null\n\n    constructor(x0: number, y0: number, x1: number, y1: number) {\n        this.x0 = x0\n        this.y0 = y0\n        this.x1 = x1\n        this.y1 = y1\n        this.center = new Vector2((this.x0 + this.x1) / 2, (this.y0 + this.y1) / 2)\n    }\n\n    getCenter(): Vector2 {\n        return this.center.clone()\n    }\n\n}\n","import { Job } from './Job'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\nimport { JobType } from './JobType'\nimport { PathTarget } from '../../../scene/model/PathTarget'\nimport { Surface } from '../../../scene/model/map/Surface'\nimport { Area } from '../../../core/Area'\nimport { JOB_ACTION_RANGE, TILESIZE } from '../../../main'\nimport { Vector2 } from 'three'\n\nexport class TrainJob extends Job {\n\n    workplaces: SurfacePathTarget[]\n    skill: RaiderSkill\n\n    constructor(surface: Surface, skill: RaiderSkill) {\n        super(JobType.TRAIN)\n        this.workplaces = [new SurfacePathTarget(surface)]\n        this.skill = skill\n    }\n\n    getWorkplaces(): SurfacePathTarget[] {\n        return this.workplaces\n    }\n\n}\n\nexport class SurfacePathTarget extends PathTarget {\n\n    targetArea: Area\n\n    constructor(surface: Surface) {\n        super(surface.getCenterWorld2D())\n        this.targetArea = new Area(surface.x * TILESIZE - JOB_ACTION_RANGE, surface.y * TILESIZE - JOB_ACTION_RANGE,\n            (surface.x + 1) * TILESIZE + JOB_ACTION_RANGE, (surface.y + 1) * TILESIZE + JOB_ACTION_RANGE)\n    }\n\n    isInArea(position: Vector2): boolean {\n        return position.x >= this.targetArea.x0 && position.x < this.targetArea.x1\n            && position.y >= this.targetArea.y0 && position.y < this.targetArea.y1\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { EventBus } from '../../../event/EventBus'\nimport { GameState } from '../../model/GameState'\nimport { Building } from '../../model/entity/building/Building'\nimport { TrainJob } from '../../model/job/TrainJob'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { RaiderSkill } from '../../../scene/model/RaiderSkill'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class TrainRaiderPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(6, onBackPanel)\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainDriver')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainEngineer')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainGeologist')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainPilot')\n        this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainSailor')\n        const trainDynamite = this.addMenuItem('InterfaceImages', 'Interface_MenuItem_TrainDynamite')\n        trainDynamite.isDisabled = () => !GameState.getBuildingsByType(Building.TOOLSTATION).some((b) => b.stats.TrainDynamite[b.level]) ||\n            GameState.selectedRaiders.every((r) => r.hasSkill(RaiderSkill.DEMOLITION))\n        trainDynamite.onClick = () => {\n            GameState.getBuildingsByType(Building.TOOLSTATION).some((b) => {\n                if (b.stats.TrainDynamite[b.level]) {\n                    GameState.selectedRaiders.forEach((r) => !r.hasSkill(RaiderSkill.DEMOLITION) && r.setJob(new TrainJob(b.surfaces[0], RaiderSkill.DEMOLITION)))\n                    EventBus.publishEvent(new EntityDeselected())\n                    return true\n                }\n            })\n        }\n        EventBus.registerEventListener(EventKey.BUILDING_UPGRADED, () => trainDynamite.updateState())\n    }\n\n}\n","import { Job } from './Job'\nimport { Vector2 } from 'three'\nimport { RaiderTool } from '../../../scene/model/RaiderTool'\nimport { JobType } from './JobType'\nimport { PathTarget } from '../../../scene/model/PathTarget'\n\nexport class GetToolJob extends Job {\n\n    target: PathTarget[]\n    tool: RaiderTool\n\n    constructor(target: Vector2, tool: RaiderTool) {\n        super(JobType.GET_TOOL)\n        this.target = [new PathTarget(target)]\n        this.tool = tool\n    }\n\n    getWorkplaces(): PathTarget[] {\n        return this.target\n    }\n\n}\n","import { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { GameState } from '../../model/GameState'\nimport { IconPanelButton } from './IconPanelButton'\nimport { Building } from '../../model/entity/building/Building'\nimport { GetToolJob } from '../../model/job/GetToolJob'\nimport { EventBus } from '../../../event/EventBus'\nimport { EntityDeselected } from '../../../event/LocalEvents'\nimport { RaiderTool } from '../../../scene/model/RaiderTool'\nimport { PathTarget } from '../../../scene/model/PathTarget'\n\nexport class GetToolPanel extends IconSubPanel {\n\n    constructor(onBackPanel: Panel) {\n        super(8, onBackPanel)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetDrill', RaiderTool.DRILL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpade', RaiderTool.SHOVEL)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetHammer', RaiderTool.HAMMER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetSpanner', RaiderTool.SPANNER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetFreezerGun', RaiderTool.FREEZERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetLaser', RaiderTool.LASER)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetPusherGun', RaiderTool.PUSHERGUN)\n        this.addGetToolItem('InterfaceImages', 'Interface_MenuItem_GetBirdScarer', RaiderTool.BIRDSCARER)\n    }\n\n    addGetToolItem(menuItemGroup: string, itemKey: string, tool: RaiderTool): IconPanelButton {\n        const menuItem = super.addMenuItem(menuItemGroup, itemKey)\n        menuItem.isDisabled = () => !GameState.hasOneBuildingOf(Building.TOOLSTATION) ||\n            GameState.selectedRaiders.every((r) => r.hasTool(tool))\n        menuItem.onClick = () => {\n            GameState.selectedRaiders.forEach((r) => {\n                if (!r.hasTool(tool)) {\n                    const pathToToolstation = GameState.getBuildingsByType(Building.TOOLSTATION)\n                        .map((b) => r.findPathToTarget(new PathTarget(b.getPosition2D())))\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToToolstation) {\n                        r.setJob(new GetToolJob(pathToToolstation.targetPosition, tool)) // TODO use precalculated path to toolstation\n                    }\n                }\n            })\n            EventBus.publishEvent(new EntityDeselected())\n        }\n        return menuItem\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { GameState } from '../../model/GameState'\nimport { EventBus } from '../../../event/EventBus'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class IconPanelButtonLabel extends BaseElement {\n\n    constructor(parent: BaseElement) {\n        super(parent)\n        this.relX = 4\n        this.relY = 11\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => this.notifyRedraw())\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        const requestedRaiders = GameState.requestedRaiders\n        if (!requestedRaiders) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = this.disabled || (this.parent && this.parent.disabled) ? '#444' : '#fff'\n        context.fillText(requestedRaiders.toString(), this.x, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { EventBus } from '../../../event/EventBus'\nimport { SurfaceChanged, SurfaceSelectedEvent } from '../../../event/LocalEvents'\nimport { EntityAddedEvent, EntityRemovedEvent, EntityType, RaiderRequested } from '../../../event/WorldEvents'\nimport { GameState } from '../../model/GameState'\nimport { Building } from '../../model/entity/building/Building'\nimport { BuildingPanel } from './BuildingPanel'\nimport { SmallVehiclePanel } from './SmallVehiclePanel'\nimport { LargeVehiclePanel } from './LargeVehiclePanel'\nimport { SelectWallPanel } from './SelectWallPanel'\nimport { SelectFloorPanel } from './SelectFloorPanel'\nimport { SelectRubblePanel } from './SelectRubblePanel'\nimport { SelectBuildingPanel } from './SelectBuildingPanel'\nimport { SelectRaiderPanel } from './SelectRaiderPanel'\nimport { SelectVehiclePanel } from './SelectVehiclePanel'\nimport { IconSubPanel } from './IconSubPanel'\nimport { Panel } from '../base/Panel'\nimport { TrainRaiderPanel } from './TrainRaiderPanel'\nimport { GetToolPanel } from './GetToolPanel'\nimport { IconPanelButtonLabel } from './IconPanelButtonLabel'\nimport { EventKey } from '../../../event/EventKeyEnum'\nimport { Surface } from '../../../scene/model/map/Surface'\n\nexport class MainPanel extends Panel {\n\n    subPanels: IconSubPanel[] = []\n    mainPanel: IconSubPanel // don't use root itself, since sub panel must be decoupled from (animated) main panel position\n    selectWallPanel: SelectWallPanel\n    selectFloorPanel: SelectFloorPanel\n    selectRubblePanel: SelectRubblePanel\n\n    constructor() {\n        super()\n        this.relX = this.xOut = 640 - 16\n        this.xIn = 640 + 95\n        this.relY = this.yOut = this.yIn = 9\n        this.movedIn = false\n        this.mainPanel = this.addSubPanel(new IconSubPanel(4))\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n\n        const buildingPanel = this.addSubPanel(new BuildingPanel(this.mainPanel))\n        const smallVehiclePanel = this.addSubPanel(new SmallVehiclePanel(this.mainPanel))\n        const largeVehiclePanel = this.addSubPanel(new LargeVehiclePanel(this.mainPanel))\n        this.selectWallPanel = this.addSubPanel(new SelectWallPanel(this.mainPanel))\n        this.selectFloorPanel = this.addSubPanel(new SelectFloorPanel(this.mainPanel))\n        this.selectRubblePanel = this.addSubPanel(new SelectRubblePanel(this.mainPanel))\n        const selectBuildingPanel = this.addSubPanel(new SelectBuildingPanel(this.mainPanel))\n        const selectRaiderPanel = this.addSubPanel(new SelectRaiderPanel(this.mainPanel))\n        const trainRaiderPanel = this.addSubPanel(new TrainRaiderPanel(selectRaiderPanel))\n        selectRaiderPanel.trainItem.onClick = () => selectRaiderPanel.toggleState(() => trainRaiderPanel.toggleState())\n        const getToolPanel = this.addSubPanel(new GetToolPanel(selectRaiderPanel))\n        selectRaiderPanel.getToolItem.onClick = () => selectRaiderPanel.toggleState(() => getToolPanel.toggleState())\n        const selectVehiclePanel = this.addSubPanel(new SelectVehiclePanel(this.mainPanel))\n        const teleportRaider = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_TeleportMan')\n        teleportRaider.isDisabled = () => !GameState.hasOneBuildingOf(Building.TOOLSTATION, Building.TELEPORT_PAD)\n            || GameState.raiders.length + GameState.requestedRaiders >= GameState.getMaxRaiders()\n        teleportRaider.updateState()\n        EventBus.registerEventListener(EventKey.RAIDER_REQUESTED, () => teleportRaider.updateState())\n        EventBus.registerEventListener(EventKey.ENTITY_ADDED, (event: EntityAddedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.type === EntityType.BUILDING || event.type === EntityType.RAIDER) teleportRaider.updateState()\n        })\n        EventBus.registerEventListener(EventKey.ENTITY_REMOVED, (event: EntityRemovedEvent) => {\n            // TODO add event inheritance by using event key prefix checking\n            if (event.type === EntityType.BUILDING || event.type === EntityType.RAIDER) teleportRaider.updateState()\n        })\n        teleportRaider.onClick = () => EventBus.publishEvent(new RaiderRequested(GameState.requestedRaiders + 1))\n        // TODO add decrease requested raider spawn option (needs right click for gui elements)\n        teleportRaider.addChild(new IconPanelButtonLabel(teleportRaider))\n        const buildingItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildBuilding')\n        buildingItem.isDisabled = () => false\n        buildingItem.onClick = () => this.mainPanel.toggleState(() => buildingPanel.toggleState())\n        const smallVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildSmallVehicle')\n        smallVehicleItem.isDisabled = () => false\n        smallVehicleItem.onClick = () => this.mainPanel.toggleState(() => smallVehiclePanel.toggleState())\n        const largeVehicleItem = this.mainPanel.addMenuItem('InterfaceImages', 'Interface_MenuItem_BuildLargeVehicle')\n        largeVehicleItem.isDisabled = () => false\n        largeVehicleItem.onClick = () => this.mainPanel.toggleState(() => largeVehiclePanel.toggleState())\n        EventBus.registerEventListener(EventKey.SELECTED_SURFACE, (event: SurfaceSelectedEvent) => {\n            this.onSelectedSurfaceChange(event.surface)\n        })\n        EventBus.registerEventListener(EventKey.SURFACE_CHANGED, (event: SurfaceChanged) => {\n            if (GameState.selectedSurface === event.surface) this.onSelectedSurfaceChange(event.surface)\n        })\n        EventBus.registerEventListener(EventKey.DESELECTED_ENTITY, () => this.selectSubPanel(this.mainPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_BUILDING, () => this.selectSubPanel(selectBuildingPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_RAIDER, () => this.selectSubPanel(selectRaiderPanel))\n        EventBus.registerEventListener(EventKey.SELECTED_VEHICLE, () => this.selectSubPanel(selectVehiclePanel))\n    }\n\n    reset() {\n        super.reset()\n        this.relX = this.xOut\n        this.relY = this.yOut\n        this.movedIn = false\n        this.updatePosition()\n        this.mainPanel.relX = this.mainPanel.xOut\n        this.mainPanel.relY = this.mainPanel.yOut\n        this.mainPanel.movedIn = false\n        this.mainPanel.updatePosition()\n    }\n\n    addSubPanel<T extends IconSubPanel>(childPanel: T): T {\n        this.addChild(childPanel)\n        this.subPanels.push(childPanel)\n        return childPanel\n    }\n\n    selectSubPanel(targetPanel: IconSubPanel) {\n        this.subPanels.forEach((subPanel) => subPanel !== targetPanel && subPanel.setMovedIn(true))\n        targetPanel.setMovedIn(false)\n    }\n\n    onSelectedSurfaceChange(surface: Surface) {\n        if (surface.surfaceType.floor) {\n            if (surface.hasRubble()) {\n                this.selectSubPanel(this.selectRubblePanel)\n            } else {\n                this.selectSubPanel(this.selectFloorPanel)\n            }\n        } else {\n            this.selectSubPanel(this.selectWallPanel)\n        }\n    }\n\n}\n","import { BaseElement } from './BaseElement'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { Button } from './Button'\n\nexport class ToggleButton extends Button {\n\n    toggleState: boolean = false\n\n    constructor(parent: BaseElement, btnCfg: ButtonCfg) {\n        super(parent, btnCfg)\n    }\n\n    checkHover(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = this.hover !== inRect\n        this.hover = inRect\n        this.pressed = (this.pressed && this.hover) || this.toggleState\n        // TODO start tooltip timeout (if not already started)\n        this.children.forEach((child) => updated = child.checkHover(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkClick(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const isPressed = this.isInRect(cx, cy) || this.toggleState\n        let updated = this.pressed !== isPressed\n        this.pressed = isPressed\n        this.children.forEach((child) => updated = child.checkClick(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    checkRelease(cx, cy): boolean {\n        if (this.isInactive()) return false\n        const inRect = this.isInRect(cx, cy)\n        let updated = inRect && this.pressed\n        if (updated) {\n            this.toggleState = !this.toggleState\n            this.onClick()\n            this.pressed = updated && this.toggleState\n            this.hover = inRect\n        }\n        this.children.forEach((child) => updated = child.checkRelease(cx, cy) || updated)\n        if (updated) this.notifyRedraw()\n        return updated\n    }\n\n    release(): boolean {\n        return false\n    }\n\n}\n\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ToggleButton } from '../base/ToggleButton'\nimport { ButtonTopCfg } from './ButtonTopCfg'\n\nexport class TopPanel extends Panel {\n\n    btnCallToArms: ToggleButton\n    btnOptions: Button\n    btnPriorities: ToggleButton\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonTopCfg) {\n        super(panelCfg)\n        this.btnCallToArms = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelCallToArms))\n        this.btnOptions = this.addChild(new Button(this, buttonsCfg.panelButtonTopPanelOptions))\n        this.btnPriorities = this.addChild(new ToggleButton(this, buttonsCfg.panelButtonTopPanelPriorities))\n    }\n\n}\n\n","import { Button } from '../base/Button'\nimport { WorldEvent } from '../../../event/WorldEvents'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\nimport { InfoButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { InfoDockPanel } from './InfoDockPanel'\nimport { EventBus } from '../../../event/EventBus'\nimport { WorldLocationEvent } from '../../../event/WorldLocationEvent'\nimport { NATIVE_FRAMERATE } from '../../../main'\nimport { clearTimeoutSafe } from '../../../core/Util'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class InfoDockButton extends Button {\n\n    messages: WorldEvent[] = [] // newest message first\n    text: string = null\n    animationTimeout = null\n    animationSpeedX = 0.5\n    animationSpeedY = 1\n\n    constructor(parent: InfoDockPanel, infoMessagesEntryConfig: InfoMessagesEntryConfig, eventKey: EventKey) {\n        super(parent, new InfoButtonCfg(infoMessagesEntryConfig.buttonImageFilename))\n        this.text = infoMessagesEntryConfig.message\n        this.hidden = true\n\n        this.onClick = () => {\n            if (this.messages.length < 1) return\n            parent.buttonClicked(this)\n        }\n\n        EventBus.registerEventListener(eventKey, (event: WorldLocationEvent) => {\n            this.hidden = false\n            while (this.messages.length >= 9) this.messages.pop()\n            this.messages.unshift(event)\n            parent.showButton(this)\n        })\n    }\n\n    reset() {\n        super.reset()\n        this.animationTimeout = clearTimeoutSafe(this.animationTimeout)\n        this.text = null\n        this.hidden = true\n        this.messages = []\n    }\n\n    slideToTarget(targetX: number, targetY: number): Promise<void> {\n        return new Promise<void>((resolve) => this.updateAnimation(targetX, targetY, resolve))\n    }\n\n    private updateAnimation(targetX: number, targetY: number, onDone: () => any) { // TODO refactor: almost equal with code for Panel\n        const diffX = targetX - this.relX\n        const diffY = targetY - this.relY\n        if (Math.abs(diffX) <= this.animationSpeedX && Math.abs(diffY) <= this.animationSpeedY) {\n            this.relX = targetX\n            this.relY = targetY\n            this.animationTimeout = null\n            if (onDone) onDone()\n        } else {\n            this.relX += Math.round(Math.sign(diffX) * Math.sqrt(Math.abs(diffX)) * this.animationSpeedX)\n            this.relY += Math.round(Math.sign(diffY) * Math.sqrt(Math.abs(diffY)) * this.animationSpeedY)\n            const that = this\n            this.animationTimeout = setTimeout(() => that.updateAnimation(targetX, targetY, onDone), 1000 / NATIVE_FRAMERATE)\n        }\n        this.updatePosition()\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.hidden) return\n        context.textAlign = 'left'\n        context.font = 'bold 10px Arial'\n        context.fillStyle = '#fff'\n        context.fillText(this.messages.length.toString(), this.x + 2, this.y + this.height / 2 + 2)\n    }\n\n}\n","import { Button } from '../base/Button'\nimport { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ButtonInfoDockCfg } from './ButtonInfoDockCfg'\nimport { InfoMessagesConfig } from './InfoMessagesConfig'\nimport { LandslideEvent } from '../../../event/WorldLocationEvent'\nimport { InfoDockButton } from './InfoDockButton'\nimport { InformationPanel } from './InformationPanel'\nimport { EventKey } from '../../../event/EventKeyEnum'\n\nexport class InfoDockPanel extends Panel {\n\n    stackButtons: InfoDockButton[] = []\n    informationPanel: InformationPanel = null\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonInfoDockCfg, infoMessagesConfig: InfoMessagesConfig, informationPanel: InformationPanel) {\n        super(panelCfg)\n        this.informationPanel = informationPanel\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockGoto)).onClick = () => this.gotoLatestMessage()\n        this.addChild(new Button(this, buttonsCfg.panelButtonInfoDockClose)).onClick = () => this.dropLatestMessage()\n\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericDeath, EventKey.LOCATION_DEATH))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoGenericMonster, EventKey.LOCATION_MONSTER))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoCrystalFound, EventKey.LOCATION_CRYSTAL_FOUND))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoUnderAttack, EventKey.LOCATION_UNDER_ATTACK))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoLandslide, EventKey.LOCATION_LANDSLIDE))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoPowerDrain, EventKey.LOCATION_POWER_DRAIN))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoSlugEmerge, EventKey.LOCATION_SLUG_EMERGE))\n        this.addChild(new InfoDockButton(this, infoMessagesConfig.infoFoundMinifigure, EventKey.LOCATION_RAIDER_DISCOVERED))\n    }\n\n    reset() {\n        super.reset()\n        this.stackButtons = []\n    }\n\n    private gotoLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const btn = this.stackButtons[0]\n        if (btn.messages.length < 1) return\n        const msg = btn.messages[0] as LandslideEvent\n        console.log('TODO force move camera to: ' + msg.location.toArray()) // TODO force move camera\n    }\n\n    private dropLatestMessage() {\n        if (this.stackButtons.length < 1) return\n        const button = this.stackButtons[0]\n        if (button.messages.length < 1) return\n        button.messages.shift()\n        if (button.messages.length < 1) {\n            button.hidden = true\n            this.informationPanel.setMovedIn(true)\n            this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n            this.slideStackIntoPosition().then()\n        }\n        button.notifyRedraw()\n    }\n\n    showButton(button: InfoDockButton) {\n        if (this.stackButtons.includes(button)) {\n            button.notifyRedraw()\n        } else {\n            this.slideInButton(button)\n        }\n    }\n\n    private slideInButton(button: InfoDockButton) {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        const targetY = -this.stackButtons.map(b => b.height).reduce((prev, cur) => prev + cur, 0)\n        this.stackButtons.push(button)\n        button.relX = -button.width\n        button.relY = targetY - button.height\n        button.updatePosition()\n        button.slideToTarget(0, targetY).then(() => this.stackButtons.forEach(btn => btn.disabled = false))\n    }\n\n    buttonClicked(button: InfoDockButton) {\n        if (button !== this.stackButtons[0]) {\n            this.pushFirst(button)\n        } else {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.toggleState()\n        }\n    }\n\n    private pushFirst(button: InfoDockButton) {\n        this.stackButtons.splice(this.stackButtons.indexOf(button), 1)\n        this.stackButtons.unshift(button)\n        this.slideStackIntoPosition().then(() => {\n            this.informationPanel.setText(button.text)\n            this.informationPanel.setMovedIn(false)\n        })\n    }\n\n    private slideStackIntoPosition() {\n        this.stackButtons.forEach(btn => btn.disabled = true)\n        let relY = 0\n        const promises = this.stackButtons.map(btn => {\n            const p = btn.slideToTarget(0, relY)\n            relY -= btn.height\n            return p\n        })\n        return new Promise<void>((resolve) => {\n            Promise.all(promises).then(() => {\n                this.stackButtons.forEach(btn => btn.disabled = false)\n                resolve()\n            })\n        })\n    }\n\n}\n\n","import { BaseConfig } from './BaseConfig'\n\nexport class PanelsCfg extends BaseConfig {\n\n    panelRadar: PanelCfg = null\n    panelRadarFill: PanelCfg = null\n    panelRadarOverlay: PanelCfg = null\n    panelMessages: PanelCfg = null\n    panelMessagesSide: PanelCfg = null\n    panelCrystalSideBar: PanelCfg = null\n    panelTopPanel: PanelCfg = null\n    panelInformation: PanelCfg = null\n    panelPriorityList: PanelCfg = null\n    panelCameraControl: PanelCfg = null\n    panelInfoDock: PanelCfg = null\n    panelEncyclopedia: PanelCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new PanelCfg(cfgValue)\n    }\n}\n\nexport class PanelCfg {\n\n    filename: string\n    xOut: number\n    yOut: number\n    xIn: number\n    yIn: number\n\n    constructor(cfgValue: any) {\n        [this.filename, this.xOut, this.yOut, this.xIn, this.yIn] = cfgValue\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { Button } from '../base/Button'\nimport { GameState } from '../../model/GameState'\nimport { ButtonPriorityListCfg } from './ButtonPriorityListCfg'\nimport { PriorityButtonsConfig } from './PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from './PriorityPositionsEntry'\nimport { PriorityIdentifier } from '../../model/job/PriorityIdentifier'\nimport { PriorityEntry } from '../../model/job/PriorityList'\n\nexport class PriorityListPanel extends Panel {\n\n    prioPositions: PriorityPositionsEntry[] = []\n    prioByName: Map<PriorityIdentifier, Button> = new Map()\n\n    constructor(panelCfg: PanelCfg, buttonsCfg: ButtonPriorityListCfg, pos: PriorityPositionsEntry[], cfg: PriorityButtonsConfig) {\n        super(panelCfg)\n        buttonsCfg.panelButtonPriorityListDisable.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.toggle(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        buttonsCfg.panelButtonPriorityListUpOne.forEach((buttonCfg, index) => {\n            this.addChild(new Button(this, buttonCfg)).onClick = () => {\n                GameState.priorityList.upOne(index)\n                this.setList(GameState.priorityList.current)\n            }\n        })\n        this.addChild(new Button(this, buttonsCfg.panelButtonPriorityListReset)).onClick = () => this.resetList()\n\n        this.prioPositions = pos\n        this.prioByName.set(PriorityIdentifier.aiPriorityTrain, this.addChild(new Button(this, cfg.aiPriorityTrain)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityGetIn, this.addChild(new Button(this, cfg.aiPriorityGetIn)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityCrystal, this.addChild(new Button(this, cfg.aiPriorityCrystal)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityOre, this.addChild(new Button(this, cfg.aiPriorityOre)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityRepair, this.addChild(new Button(this, cfg.aiPriorityRepair)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityClearing, this.addChild(new Button(this, cfg.aiPriorityClearing)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityDestruction, this.addChild(new Button(this, cfg.aiPriorityDestruction)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityConstruction, this.addChild(new Button(this, cfg.aiPriorityConstruction)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityReinforce, this.addChild(new Button(this, cfg.aiPriorityReinforce)))\n        this.prioByName.set(PriorityIdentifier.aiPriorityRecharge, this.addChild(new Button(this, cfg.aiPriorityRecharge)))\n    }\n\n    reset() {\n        super.reset()\n        this.resetList()\n    }\n\n    resetList() {\n        GameState.priorityList.reset()\n        this.setList(GameState.priorityList.current)\n    }\n\n    private setList(priorityList: PriorityEntry[]) {\n        this.prioByName.forEach((btn) => btn.hidden = true)\n        let index = 0\n        let updated = false\n        priorityList.forEach(cfg => {\n            const prioButton: Button = this.prioByName.get(cfg.key)\n            if (prioButton) {\n                updated = updated || prioButton.hidden || prioButton.disabled !== !cfg.enabled\n                prioButton.hidden = false\n                prioButton.disabled = !cfg.enabled\n                prioButton.relX = this.prioPositions[index].x\n                prioButton.relY = this.prioPositions[index].y\n                prioButton.updatePosition()\n                const btnIndex = index\n                prioButton.onClick = () => {\n                    GameState.priorityList.pushToTop(btnIndex)\n                    this.setList(GameState.priorityList.current)\n                }\n                index++\n            }\n        })\n        if (updated) this.notifyRedraw()\n    }\n\n}\n\n","export class InfoMessagesEntryConfig {\n\n    message: string = null\n    buttonImageFilename: string = null\n    sfx: string = null\n    timing: string = null\n    flag: string = null\n\n    constructor(cfgValue: any) {\n        [this.message, this.buttonImageFilename, this.sfx, this.timing, this.flag] = cfgValue\n        this.message = this.message.replace(/_/g, ' ')\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { InfoMessagesEntryConfig } from './InfoMessagesEntryConfig'\n\nexport class InfoMessagesConfig extends BaseConfig {\n\n    infoGenericDeath: InfoMessagesEntryConfig = null\n    infoGenericMonster: InfoMessagesEntryConfig = null\n    infoCrystalFound: InfoMessagesEntryConfig = null\n    infoUnderAttack: InfoMessagesEntryConfig = null\n    infoLandslide: InfoMessagesEntryConfig = null\n    infoPowerDrain: InfoMessagesEntryConfig = null\n    infoSlugEmerge: InfoMessagesEntryConfig = null\n    infoFoundMinifigure: InfoMessagesEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new InfoMessagesEntryConfig(cfgValue)\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { PanelCfg } from '../../../cfg/PanelsCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class InformationPanel extends Panel {\n\n    font: BitmapFont = null\n    textImage = null\n\n    constructor(panelCfg: PanelCfg) {\n        super(panelCfg)\n        this.font = ResourceManager.getDefaultFont()\n    }\n\n    setText(text?: string) {\n        this.textImage = text ? this.font.createTextImage(text, this.img.width - 80) : null\n        this.notifyRedraw()\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        super.onRedraw(context)\n        if (this.textImage) context.drawImage(this.textImage, this.x + (this.img.width - this.textImage.width) / 2, this.y + 12)\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { ButtonCfg } from '../../../cfg/ButtonsCfg'\n\nexport class PriorityButtonsConfig extends BaseConfig {\n\n    aiPriorityTrain: ButtonCfg = null\n    aiPriorityGetIn: ButtonCfg = null\n    aiPriorityCrystal: ButtonCfg = null\n    aiPriorityOre: ButtonCfg = null\n    aiPriorityRepair: ButtonCfg = null\n    aiPriorityClearing: ButtonCfg = null\n    aiPriorityDestruction: ButtonCfg = null\n    aiPriorityConstruction: ButtonCfg = null\n    aiPriorityReinforce: ButtonCfg = null\n    aiPriorityRecharge: ButtonCfg = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): ButtonCfg {\n        return {\n            buttonType: cfgValue[0],\n            normalFile: cfgValue[1],\n            highlightFile: cfgValue[1],\n            pressedFile: cfgValue[2],\n            disabledFile: cfgValue[3],\n        }\n    }\n\n}\n","export class PriorityPositionsEntry {\n\n    x: number\n    y: number\n\n    constructor(cfgValue: any) {\n        [this.x, this.y] = cfgValue\n    }\n\n}\n","export class TextInfoMessageEntryConfig {\n\n    text: string\n    imageFilename: string\n    sfxName: string\n\n    textImage\n    infoImage\n\n    constructor(cfgValue: any) {\n        [this.text, this.imageFilename, this.sfxName] = cfgValue\n    }\n\n}\n","import { BaseConfig } from '../../../cfg/BaseConfig'\nimport { TextInfoMessageEntryConfig } from './TextInfoMessageEntryConfig'\n\nexport class TextInfoMessageConfig extends BaseConfig {\n\n    textCrystalFound: TextInfoMessageEntryConfig = null\n    textSpaceToContinue: TextInfoMessageEntryConfig = null\n    textCavernDiscovered: TextInfoMessageEntryConfig = null\n    textOreFound: TextInfoMessageEntryConfig = null\n    textAirSupplyLow: TextInfoMessageEntryConfig = null\n    textAirSupplyRunningOut: TextInfoMessageEntryConfig = null\n    textGameCompleted: TextInfoMessageEntryConfig = null\n    textManTrained: TextInfoMessageEntryConfig = null\n    textUnitUpgraded: TextInfoMessageEntryConfig = null\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        return new TextInfoMessageEntryConfig(cfgValue)\n    }\n\n}\n","import { ScaledLayer } from '../../screen/ScreenLayer'\nimport { Panel } from '../gui/base/Panel'\nimport { BaseElement } from '../gui/base/BaseElement'\nimport { POINTER_EVENT } from '../../event/EventTypeEnum'\n\nexport class GuiBaseLayer extends ScaledLayer {\n\n    rootElement: BaseElement = new BaseElement()\n    panels: Panel[] = []\n\n    constructor() {\n        super()\n        this.rootElement.notifyRedraw = () => this.redraw()\n        this.onRedraw = (context: CanvasRenderingContext2D) => {\n            context.clearRect(0, 0, context.canvas.width, context.canvas.height)\n            this.rootElement.onRedraw(context)\n        }\n    }\n\n    reset() {\n        super.reset()\n        this.panels.forEach((p) => p.reset())\n    }\n\n    addPanel<T extends Panel>(panel: T): T {\n        this.rootElement.addChild(panel)\n        this.panels.push(panel)\n        return panel\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        const [sx, sy] = this.toScaledCoords(event.clientX, event.clientY)\n        const hit = this.context && this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n        if (hit) {\n            event.preventDefault()\n            if (eventEnum === POINTER_EVENT.MOVE) {\n                this.rootElement.checkHover(sx, sy)\n            } else if (eventEnum === POINTER_EVENT.DOWN) {\n                this.rootElement.checkClick(sx, sy)\n            } else if (eventEnum === POINTER_EVENT.UP) {\n                this.rootElement.checkRelease(sx, sy)\n            }\n        } else if (eventEnum === POINTER_EVENT.MOVE) {\n            this.rootElement.release()\n        }\n        return hit\n    }\n\n    handleWheelEvent(event: WheelEvent): boolean {\n        const [cx, cy] = this.toCanvasCoords(event.clientX, event.clientY)\n        return !this.context || this.context.getImageData(cx, cy, 1, 1).data[3] > 0\n    }\n\n}\n","import { ResourceManager } from '../../resource/ResourceManager'\nimport { Panel } from '../gui/base/Panel'\nimport { RadarPanel } from '../gui/radar/RadarPanel'\nimport { MessagePanel } from '../gui/messagepanel/MessagePanel'\nimport { PanelCrystalSideBar } from '../gui/sidebar/PanelCrystalSideBar'\nimport { MainPanel } from '../gui/main/MainPanel'\nimport { TopPanel } from '../gui/toppanel/TopPanel'\nimport { InfoDockPanel } from '../gui/infodock/InfoDockPanel'\nimport { PanelsCfg } from '../../cfg/PanelsCfg'\nimport { ButtonsCfg } from '../../cfg/ButtonsCfg'\nimport { PriorityListPanel } from '../gui/toppanel/PriorityListPanel'\nimport { InfoMessagesConfig } from '../gui/infodock/InfoMessagesConfig'\nimport { InformationPanel } from '../gui/infodock/InformationPanel'\nimport { PriorityButtonsConfig } from '../gui/toppanel/PriorityButtonsConfig'\nimport { PriorityPositionsEntry } from '../gui/toppanel/PriorityPositionsEntry'\nimport { TextInfoMessageConfig } from '../gui/messagepanel/TextInfoMessageConfig'\nimport { GuiBaseLayer } from './GuiBaseLayer'\n\nexport class GuiMainLayer extends GuiBaseLayer {\n\n    panelRadar: RadarPanel\n    panelMessages: MessagePanel\n    panelMessagesSide: Panel\n    panelCrystalSideBar: PanelCrystalSideBar\n    panelMain: MainPanel\n    panelTopPanel: TopPanel\n    panelInformation: InformationPanel\n    panelPriorityList: PriorityListPanel\n    panelCameraControl: Panel\n    panelInfoDock: InfoDockPanel\n    panelEncyclopedia: Panel\n    onOptionsShow: () => any = () => console.log('show options triggered')\n\n    constructor() {\n        super()\n        const panelsCfg = new PanelsCfg(ResourceManager.cfg('Panels640x480'))\n        const buttonsCfg = new ButtonsCfg(ResourceManager.cfg('Buttons640x480'))\n        // created in reverse order compared to cfg, earlier in cfg means higher z-value // TODO add some z layering at least to panels\n        this.panelEncyclopedia = this.addPanel(new Panel(panelsCfg.panelEncyclopedia))\n        this.panelInformation = this.addPanel(new InformationPanel(panelsCfg.panelInformation))\n        this.panelInfoDock = this.addPanel(new InfoDockPanel(panelsCfg.panelInfoDock, buttonsCfg.panelInfoDock, new InfoMessagesConfig(ResourceManager.cfg('InfoMessages')), this.panelInformation))\n        this.panelCameraControl = this.addPanel(new Panel(panelsCfg.panelCameraControl))\n        const priorityButtonsConfig = new PriorityButtonsConfig(ResourceManager.cfg('PriorityImages'))\n        const priorityPositionsConfig = Object.values(ResourceManager.cfg('PrioritiesImagePositions')).map(cfgValue => new PriorityPositionsEntry(cfgValue))\n        this.panelPriorityList = this.addPanel(new PriorityListPanel(panelsCfg.panelPriorityList, buttonsCfg.panelPriorityList, priorityPositionsConfig, priorityButtonsConfig))\n        this.panelTopPanel = this.addPanel(new TopPanel(panelsCfg.panelTopPanel, buttonsCfg.panelTopPanel))\n        this.panelMain = this.addPanel(new MainPanel())\n        this.panelCrystalSideBar = this.addPanel(new PanelCrystalSideBar(panelsCfg.panelCrystalSideBar, buttonsCfg.panelCrystalSideBar))\n        this.panelMessagesSide = this.addPanel(new Panel(panelsCfg.panelMessagesSide))\n        this.panelMessages = this.addPanel(new MessagePanel(panelsCfg.panelMessages, new TextInfoMessageConfig(ResourceManager.cfg('TextMessagesWithImages'))))\n        this.panelRadar = this.addPanel(new RadarPanel(panelsCfg.panelRadar, panelsCfg.panelRadarFill, panelsCfg.panelRadarOverlay, buttonsCfg.panelRadar))\n        // link panels\n        this.panelTopPanel.btnOptions.onClick = () => this.onOptionsShow()\n        this.panelTopPanel.btnPriorities.onClick = () => {\n            if (this.panelTopPanel.btnPriorities.toggleState) {\n                this.panelMain.setMovedIn(true, () => this.panelPriorityList.setMovedIn(false))\n            } else {\n                this.panelPriorityList.setMovedIn(true, () => this.panelMain.setMovedIn(false))\n            }\n        }\n    }\n\n}\n","import { EventBus } from '../event/EventBus'\nimport { JobCreateEvent, JobDeleteEvent } from '../event/WorldEvents'\nimport { PublicJob } from './model/job/Job'\nimport { GameState } from './model/GameState'\nimport { Vector2 } from 'three'\nimport { Raider } from '../scene/model/Raider'\nimport { WorldManager } from '../scene/WorldManager'\nimport { CHECK_CLEARRUBBLE_INTERVAL, JOB_SCHEDULE_INTERVAL } from '../main'\nimport { Building } from './model/entity/building/Building'\nimport { GetToolJob } from './model/job/GetToolJob'\nimport { TrainJob } from './model/job/TrainJob'\nimport { clearIntervalSafe } from '../core/Util'\nimport { RaiderSkill } from '../scene/model/RaiderSkill'\nimport { RaiderTool } from '../scene/model/RaiderTool'\nimport { JobState } from './model/job/JobState'\nimport { PathTarget } from '../scene/model/PathTarget'\nimport { EventKey } from '../event/EventKeyEnum'\nimport { JobType } from './model/job/JobType'\nimport { Surface } from '../scene/model/map/Surface'\nimport { ClearRubbleJob } from './model/job/surface/ClearRubbleJob'\n\nexport class Supervisor {\n\n    worldMgr: WorldManager\n    jobs: PublicJob[] = []\n    assignInterval = null\n    checkRubbleInterval = null\n\n    constructor(worldMgr: WorldManager) {\n        this.worldMgr = worldMgr\n        EventBus.registerEventListener(EventKey.JOB_CREATE, (event: JobCreateEvent) => {\n            this.jobs.push(event.job)\n        })\n        EventBus.registerEventListener(EventKey.JOB_DELETE, (event: JobDeleteEvent) => {\n            event.job.cancel()\n        })\n    }\n\n    start() {\n        stop()\n        this.assignInterval = setInterval(this.assignJobs.bind(this), JOB_SCHEDULE_INTERVAL)\n        this.checkRubbleInterval = setInterval(this.checkUnclearedRubble.bind(this), CHECK_CLEARRUBBLE_INTERVAL)\n    }\n\n    stop() {\n        this.assignInterval = clearIntervalSafe(this.assignInterval)\n        this.checkRubbleInterval = clearIntervalSafe(this.checkRubbleInterval)\n        GameState.raiders.forEach((r) => r.resetWorkInterval())\n        GameState.raidersUndiscovered.forEach((r) => r.resetWorkInterval())\n        GameState.vehicles.forEach((v) => v.resetWorkInterval())\n        GameState.vehiclesUndiscovered.forEach((v) => v.resetWorkInterval())\n    }\n\n    assignJobs() {\n        const availableJobs: PublicJob[] = []\n        this.jobs = this.jobs.filter((j) => {\n            const result = j.jobstate === JobState.OPEN\n            if (result && j.fulfiller.length < 1) availableJobs.push(j)\n            return result\n        })\n        availableJobs.sort((left, right) => {\n            return Math.sign(GameState.priorityList.getPriority(left) - GameState.priorityList.getPriority(right))\n        })\n        const unemployedRaider = GameState.raiders.filter((r) => !r.job)\n        availableJobs.forEach((job) => { // XXX better use estimated time to complete job as metric\n            let closestRaider: Raider = null\n            let closestRaiderIndex: number = null\n            let minDistance: number = null\n            let closestToolRaider: Raider = null\n            let closestToolRaiderIndex: number = null\n            let minToolDistance: number = null\n            let closestToolstationPosition: Vector2 = null\n            let closestNeededTool: RaiderTool = null\n            let closestTrainingRaider: Raider = null\n            let closestTrainingRaiderIndex: number = null\n            let minTrainingDistance: number = null\n            let closestTrainingArea: Surface = null\n            let closestNeededTraining: RaiderSkill = null\n            unemployedRaider.forEach((raider, index) => {\n                if (job.isQualified(raider)) {\n                    const pathToJob = job.getWorkplaces().map((b) => raider.findPathToTarget(b))\n                        .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                    if (pathToJob) {\n                        const dist = pathToJob.lengthSq // TODO use precalculated path to job\n                        if (minDistance === null || dist < minDistance) {\n                            closestRaider = raider\n                            closestRaiderIndex = index\n                            minDistance = dist\n                        }\n                    }\n                } else {\n                    const raiderPosition = raider.getPosition()\n                    const neededTool = job.isQualifiedWithTool(raider)\n                    if (neededTool) {\n                        const pathToToolstation = GameState.getBuildingsByType(Building.TOOLSTATION)\n                            .map((b) => raider.findPathToTarget(new PathTarget(b.getPosition2D())))\n                            .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                        if (pathToToolstation) {\n                            const dist = pathToToolstation.lengthSq\n                            if (minToolDistance === null || dist < minToolDistance) {\n                                closestToolRaider = raider\n                                closestToolRaiderIndex = index\n                                minToolDistance = dist\n                                closestToolstationPosition = pathToToolstation.targetPosition // TODO use precalculated path to toolstation\n                                closestNeededTool = neededTool\n                            }\n                        }\n                    } else {\n                        const neededTraining = job.isQualifiedWithTraining(raider)\n                        if (neededTraining) {\n                            const pathToTraining = GameState.getTrainingSites(raiderPosition, neededTraining)\n                                .map((site) => raider.findPathToTarget(new PathTarget(site.getPosition2D())))\n                                .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                            if (pathToTraining) {\n                                const dist = pathToTraining.lengthSq\n                                if (minTrainingDistance === null || dist < minTrainingDistance) {\n                                    closestTrainingRaider = raider\n                                    closestTrainingRaiderIndex = index\n                                    minTrainingDistance = dist\n                                    closestTrainingArea = raider.worldMgr.sceneManager.terrain.getSurfaceFromWorld2D(pathToTraining.targetPosition) // TODO use precalculated path to training\n                                    closestNeededTraining = neededTraining\n                                }\n                            }\n                        }\n                    }\n                }\n            })\n            if (closestRaider) {\n                closestRaider.setJob(job)\n                unemployedRaider.splice(closestRaiderIndex, 1)\n            } else if (closestToolRaider) {\n                closestToolRaider.setJob(new GetToolJob(closestToolstationPosition, closestNeededTool), job)\n                unemployedRaider.splice(closestToolRaiderIndex, 1)\n            } else if (closestTrainingRaider) {\n                closestTrainingRaider.setJob(new TrainJob(closestTrainingArea, closestNeededTraining), job)\n                unemployedRaider.splice(closestTrainingRaiderIndex, 1)\n            }\n        })\n    }\n\n    checkUnclearedRubble() {\n        GameState.raiders.forEach((raider) => {\n            if (raider.job) return\n            const startSurface = raider.worldMgr.sceneManager.terrain.getSurfaceFromWorld(raider.getPosition())\n            for (let rad = 0; rad < 10; rad++) {\n                for (let x = startSurface.x - rad; x <= startSurface.x + rad; x++) {\n                    for (let y = startSurface.y - rad; y <= startSurface.y + rad; y++) {\n                        const surface = raider.worldMgr.sceneManager.terrain.getSurfaceOrNull(x, y)\n                        if (!(surface?.hasRubble()) || !surface.discovered || surface.hasJobType(JobType.CLEAR_RUBBLE)) continue\n                        const surfJob = new ClearRubbleJob(surface)\n                        if (surfJob.isQualified(raider)) {\n                            raider.setJob(surfJob)\n                        } else {\n                            const neededTool = surfJob.isQualifiedWithTool(raider)\n                            if (neededTool) {\n                                const pathToToolstation = GameState.getBuildingsByType(Building.TOOLSTATION)\n                                    .map((b) => raider.findPathToTarget(new PathTarget(b.getPosition2D())))\n                                    .sort((l, r) => l.lengthSq - r.lengthSq)[0]\n                                if (pathToToolstation) {\n                                    raider.setJob(new GetToolJob(pathToToolstation.targetPosition, neededTool), surfJob) // TODO use precalculated path to toolstation\n                                }\n                            } else {\n                                continue\n                            }\n                        }\n                        EventBus.publishEvent(new JobCreateEvent(surfJob))\n                        surface.updateJobColor()\n                    }\n                }\n            }\n        })\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { BriefingPanelCfg } from '../../../cfg/BriefingPanelCfg'\nimport { MessagePanel } from '../messagepanel/MessagePanel'\nimport { ObjectiveImageCfg } from '../../../cfg/ObjectiveImageCfg'\n\nexport class BriefingPanel extends Panel {\n\n    messagePanel: MessagePanel\n    cfg: BriefingPanelCfg = null\n    imgTitle: HTMLCanvasElement = null\n    titleRelX: number = 0\n    titleRelY: number = 0\n    btnNext: Button = null\n    btnBack: Button = null\n    imgBack: HTMLCanvasElement = null\n    imgParagraph: HTMLCanvasElement[] = []\n    paragraph: number = 0\n\n    constructor(cfg: BriefingPanelCfg) {\n        super()\n        this.cfg = cfg\n        this.imgTitle = cfg.titleFont.createTextImage(cfg.title)\n        this.titleRelX = cfg.titleWindow.x + (cfg.titleWindow.w - this.imgTitle.width) / 2\n        this.titleRelY = cfg.titleWindow.y\n        this.btnNext = this.addChild(new Button(this, cfg.nextButtonCfg))\n        this.btnNext.onClick = () => this.nextParagraph()\n        this.btnBack = this.addChild(new Button(this, cfg.backButtonCfg))\n        this.btnBack.onClick = () => this.prevParagraph()\n        this.hidden = true\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n        this.setParagraph(0)\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.imgBack = ResourceManager.getImageOrNull(objectiveBackImgCfg.filename)\n        this.relX = objectiveBackImgCfg.x\n        this.relY = objectiveBackImgCfg.y\n        this.width = this.imgBack.width\n        this.height = this.imgBack.height\n        this.updatePosition()\n        this.imgParagraph = objectiveText.split('\\\\a').map(txt => this.cfg.textFont.createTextImage(txt, this.cfg.textWindow.w, false))\n    }\n\n    setParagraph(paragraph: number) {\n        if (paragraph < 0) return\n        if (paragraph > this.imgParagraph.length - 1) {\n            this.hide()\n            this.notifyRedraw()\n            return\n        }\n        this.paragraph = paragraph\n        this.btnNext.hidden = this.paragraph >= this.imgParagraph.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.notifyRedraw()\n    }\n\n    nextParagraph() {\n        this.setParagraph(this.paragraph + 1)\n    }\n\n    prevParagraph() {\n        this.setParagraph(this.paragraph - 1)\n    }\n\n    show() {\n        super.show()\n        this.setParagraph(0)\n        this.btnNext.hidden = this.paragraph >= this.imgParagraph.length - 1\n        this.btnBack.hidden = this.paragraph < 1\n        this.messagePanel?.setMessage(this.messagePanel.msgSpaceToContinue, 0)\n    }\n\n    hide() {\n        super.hide()\n        this.messagePanel?.unsetMessage(this.messagePanel.msgSpaceToContinue)\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.imgBack) context.drawImage(this.imgBack, this.x, this.y)\n        if (this.imgTitle) context.drawImage(this.imgTitle, this.x + this.titleRelX, this.y + this.titleRelY)\n        if (this.imgParagraph && this.imgParagraph[this.paragraph]) context.drawImage(this.imgParagraph[this.paragraph], this.x + this.cfg.textWindow.x, this.y + this.cfg.textWindow.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuCycleItemCfg } from '../../../cfg/MenuCycleItemCfg'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuCycleItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLabelOnNormal: HTMLCanvasElement // TODO only toggle state with clicks on label\n    imgLabelOffNormal: HTMLCanvasElement // TODO use button?\n    imgLabelOnHover: HTMLCanvasElement\n    imgLabelOffHover: HTMLCanvasElement\n\n    labelX: number = 0\n    state: boolean = false\n\n    constructor(parent: MenuLayer, itemCfg: MenuCycleItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.labelX = itemCfg.width\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.imgLabelOffNormal = parent.loFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOffHover = parent.hiFont.createTextImage(itemCfg.labelOff)\n        this.imgLabelOnNormal = parent.loFont.createTextImage(itemCfg.labelOn)\n        this.imgLabelOnHover = parent.hiFont.createTextImage(itemCfg.labelOn)\n        this.width = itemCfg.width + Math.max(this.imgLabelOnHover.width, this.imgLabelOffHover.width)\n        this.height = this.imgTextNormal.height\n    }\n\n    onClick() {\n        this.state = !this.state\n        console.log('TODO: cycle item clicked; state: ' + this.state)\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        let imgLabel = this.state ? this.imgLabelOnNormal : this.imgLabelOffNormal\n        if (this.hover) {\n            img = this.imgTextHover\n            imgLabel = this.state ? this.imgLabelOnHover : this.imgLabelOffHover\n        }\n        context.drawImage(img, this.x, this.y)\n        context.drawImage(imgLabel, this.x + this.labelX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuSliderItemCfg } from '../../../cfg/MenuSliderItemCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { Button } from '../base/Button'\nimport { BaseButtonCfg } from '../../../cfg/ButtonsCfg'\nimport { MenuLayer } from './MenuLayer'\n\nexport class MenuSliderItem extends BaseElement {\n\n    imgTextNormal: HTMLCanvasElement\n    imgTextHover: HTMLCanvasElement\n    imgLeft: HTMLCanvasElement\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgRight: HTMLCanvasElement\n    sliderX: number = 0\n    min: number = 0\n    max: number = 1\n    value: number = 0\n    onValueChanged: (value: number) => any = (value) => console.log('value changed to: ' + value)\n\n    constructor(parent: MenuLayer, itemCfg: MenuSliderItemCfg) {\n        super(parent)\n        this.relX = itemCfg.x\n        this.relY = itemCfg.y\n        this.sliderX = itemCfg.width\n        this.imgLeft = ResourceManager.getImage(itemCfg.imgLeft)\n        this.imgNormal = ResourceManager.getImage(itemCfg.imgOff)\n        this.imgHover = ResourceManager.getImage(itemCfg.imgOn)\n        this.imgRight = ResourceManager.getImage(itemCfg.imgRight)\n        const leftBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        leftBtn.imgNormal = ResourceManager.getImage(itemCfg.btnLeftNormal)\n        leftBtn.imgHover = ResourceManager.getImage(itemCfg.btnLeftHover)\n        leftBtn.relX = this.sliderX - this.imgLeft.width - leftBtn.imgHover.width\n        leftBtn.width = leftBtn.imgHover.width\n        leftBtn.height = leftBtn.imgHover.height\n        leftBtn.updatePosition()\n        leftBtn.onClick = () => {\n            if (this.value > this.min) {\n                this.value--\n                this.onValueChanged(this.value)\n            }\n        }\n        const rightBtn = this.addChild(new Button(this, new BaseButtonCfg()))\n        rightBtn.imgNormal = ResourceManager.getImage(itemCfg.btnRightNormal)\n        rightBtn.imgHover = ResourceManager.getImage(itemCfg.btnRightHover)\n        rightBtn.relX = this.sliderX + this.imgNormal.width + this.imgRight.width * 2\n        rightBtn.width = rightBtn.imgHover.width\n        rightBtn.height = rightBtn.imgHover.height\n        rightBtn.updatePosition()\n        rightBtn.onClick = () => {\n            if (this.value < this.max) {\n                this.value++\n                this.onValueChanged(this.value)\n            }\n        }\n        this.width = itemCfg.width + leftBtn.imgHover.width + this.imgLeft.width + this.imgNormal.width + this.imgRight.width * 2 + rightBtn.imgHover.width\n        this.min = itemCfg.min\n        this.max = itemCfg.max || 1\n        this.value = this.min // TODO set default value\n        this.imgTextNormal = parent.loFont.createTextImage(itemCfg.description)\n        this.imgTextHover = parent.hiFont.createTextImage(itemCfg.description)\n        this.height = this.imgTextNormal.height\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        let img = this.imgTextNormal\n        if (this.hover) {\n            img = this.imgTextHover\n        }\n        context.drawImage(img, this.x, this.y)\n        let posX = this.x + this.sliderX\n        context.drawImage(this.imgLeft, posX, this.y)\n        context.drawImage(this.imgNormal, posX, this.y)\n        const dw = Math.round(this.value / this.max * this.imgHover.width)\n        context.drawImage(this.imgHover, 0, 0, dw, this.imgHover.height, posX, this.y, dw, this.imgHover.height)\n        posX += this.imgNormal.width\n        context.drawImage(this.imgRight, posX, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { BaseElement } from '../base/BaseElement'\nimport { MenuLayer } from './MenuLayer'\nimport { MenuLabelItemCfg } from '../../../cfg/MenuLabelItemCfg'\n\nexport class MenuLabelItem extends BaseElement {\n\n    target: string\n    loImg: HTMLCanvasElement\n    hiImg: HTMLCanvasElement\n\n    constructor(parent: MenuLayer, itemCfg: MenuLabelItemCfg, autoCenter: boolean) {\n        super(parent)\n        this.target = itemCfg.target\n        this.loImg = parent.loFont.createTextImage(itemCfg.label)\n        this.hiImg = parent.hiFont.createTextImage(itemCfg.label)\n        this.width = this.loImg.width\n        this.height = this.loImg.height\n        this.relX = autoCenter ? -parent.relX + (parent.menuImage.width - this.width) / 2 : itemCfg.x\n        this.relY = itemCfg.y\n    }\n\n    checkHover(cx, cy): boolean {\n        const stateChanged = super.checkHover(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkClick(cx, cy): boolean {\n        const stateChanged = super.checkClick(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    checkRelease(cx, cy): boolean {\n        const stateChanged = super.checkRelease(cx, cy)\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    release(): boolean {\n        const stateChanged = super.release()\n        if (stateChanged) this.notifyRedraw()\n        return stateChanged\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        if (this.hover) {\n            context.drawImage(this.hiImg, this.x, this.y)\n        } else {\n            context.drawImage(this.loImg, this.x, this.y)\n        }\n        super.onRedraw(context)\n    }\n\n}\n","import { MenuEntryCfg } from '../../../cfg/MenuEntryCfg'\nimport { ResourceManager } from '../../../resource/ResourceManager'\nimport { BaseElement } from '../base/BaseElement'\nimport { MenuCycleItem } from './MenuCycleItem'\nimport { MenuSliderItem } from './MenuSliderItem'\nimport { MenuLabelItem } from './MenuLabelItem'\nimport { BitmapFont } from '../../../core/BitmapFont'\n\nexport class MenuLayer extends BaseElement {\n\n    menuImage: HTMLCanvasElement\n    titleImage: HTMLCanvasElement\n    loFont: BitmapFont\n    hiFont: BitmapFont\n    itemsTrigger: MenuLabelItem[] = []\n    itemsNext: MenuLabelItem[] = []\n\n    constructor(parent: BaseElement, menuCfg: MenuEntryCfg) {\n        super(parent)\n        this.relX = menuCfg.position[0]\n        this.relY = menuCfg.position[1]\n        this.menuImage = ResourceManager.getImageOrNull(menuCfg.menuImage[0]) // menuImage has 4 parameter here\n        this.titleImage = ResourceManager.getBitmapFont(menuCfg.menuFont).createTextImage(menuCfg.fullName)\n        this.loFont = ResourceManager.getBitmapFont(menuCfg.loFont)\n        this.hiFont = ResourceManager.getBitmapFont(menuCfg.hiFont)\n        menuCfg.itemsLabel.forEach((itemCfg) => {\n            const item = this.addChild(new MenuLabelItem(this, itemCfg, menuCfg.autoCenter))\n            if (itemCfg.actionName.toLowerCase() === 'trigger') {\n                this.itemsTrigger.push(item)\n            } else {\n                this.itemsNext.push(item)\n            }\n        })\n        menuCfg.itemsCycle.forEach((itemCfg) => this.addChild(new MenuCycleItem(this, itemCfg)))\n        menuCfg.itemsSlider.forEach((itemCfg) => this.addChild(new MenuSliderItem(this, itemCfg)))\n        this.hidden = true\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n    }\n\n    onRedraw(context: CanvasRenderingContext2D) {\n        if (this.hidden) return\n        context.drawImage(this.menuImage, (this.parent.width - this.menuImage.width) / 2, (this.parent.height - this.menuImage.height) / 2)\n        context.drawImage(this.titleImage, (this.parent.width - this.titleImage.width) / 2, this.y)\n        super.onRedraw(context)\n    }\n\n}\n","import { Panel } from '../base/Panel'\nimport { MenuLayer } from './MenuLayer'\nimport { MenuCfg } from '../../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\n\nexport class MenuBasePanel extends Panel {\n\n    layersByKey: Map<string, MenuLayer> = new Map()\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super()\n        this.width = layer.fixedWidth\n        this.height = layer.fixedHeight\n        this.hidden = true\n        cfg.menus.forEach((menuCfg, index) => this.layersByKey.set('menu' + (index + 1), this.addChild(new MenuLayer(this, menuCfg))))\n        const pausePanel = this\n        this.layersByKey.forEach((layer) => layer.itemsNext.forEach((item) => item.onClick = () => pausePanel.selectLayer(item.target)))\n    }\n\n    reset() {\n        super.reset()\n        this.hidden = true\n    }\n\n    show() {\n        this.hidden = false\n        this.selectLayer('menu1')\n    }\n\n    hide() {\n        super.hide()\n        this.notifyRedraw()\n    }\n\n    selectLayer(key: string) {\n        const layer = this.layersByKey.get(key.toLowerCase())\n        this.layersByKey.forEach(l => l !== layer && l.hide())\n        layer.show()\n        this.notifyRedraw()\n    }\n\n}\n","import { MenuCfg } from '../../../cfg/MenuCfg'\nimport { MenuBasePanel } from './MenuBasePanel'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\n\nexport class OptionsPanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const panel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => panel.onRepeatBriefing()\n        this.layersByKey.get('menu1').itemsTrigger[1].onClick = () => panel.hide()\n    }\n\n}\n","import { MenuCfg } from '../../../cfg/MenuCfg'\nimport { ScaledLayer } from '../../../screen/ScreenLayer'\nimport { MenuBasePanel } from './MenuBasePanel'\n\nexport class PausePanel extends MenuBasePanel {\n\n    onRepeatBriefing: () => any = () => console.log('repeat mission briefing')\n    onAbortGame: () => any = () => console.log('abort mission')\n    onRestartGame: () => any = () => console.log('restart mission')\n\n    constructor(layer: ScaledLayer, cfg: MenuCfg) {\n        super(layer, cfg)\n        const pausePanel = this\n        this.layersByKey.get('menu1').itemsTrigger[0].onClick = () => pausePanel.hide() // Pause\n        this.layersByKey.get('menu2').itemsTrigger[0].onClick = () => pausePanel.onRepeatBriefing() // Options\n        this.layersByKey.get('menu3').itemsTrigger[0].onClick = () => pausePanel.onAbortGame() // Quit\n        this.layersByKey.get('menu4').itemsTrigger[0].onClick = () => pausePanel.onRestartGame() // Restart\n    }\n\n}\n","export class Rect {\n\n    x: number = 0\n    y: number = 0\n    w: number = 0\n    h: number = 0\n\n    constructor(arr: number[]) {\n        [this.x, this.y, this.w, this.h] = arr\n    }\n\n}\n","import { BaseConfig } from './BaseConfig'\nimport { Rect } from '../core/Rect'\n\nexport class DialogCfg extends BaseConfig {\n\n    image: string = null\n    titleWindow: Rect = null\n    textWindow: Rect = null\n    okWindow: Rect = null\n    cancelWindow: Rect = null\n    contrastOverlay: string = null // not used in the game\n\n    constructor(cfgObj: any) {\n        super()\n        BaseConfig.setFromCfg(this, cfgObj)\n    }\n\n    parseValue(lCfgKeyName: string, cfgValue: any): any {\n        if (lCfgKeyName.endsWith('window')) {\n            return new Rect(cfgValue)\n        }\n        return super.parseValue(lCfgKeyName, cfgValue)\n    }\n\n}\n","import { PanelCfg } from './PanelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { DialogCfg } from './DialogCfg'\nimport { Rect } from '../core/Rect'\nimport { ButtonCfg } from './ButtonsCfg'\n\nexport class BriefingPanelCfg extends PanelCfg {\n\n    // XXX find config values for this class\n\n    titleFont: BitmapFont\n    title: string\n    titleWindow: Rect\n    textFont: BitmapFont\n    textWindow: Rect\n    nextButtonCfg: ButtonCfg\n    backButtonCfg: ButtonCfg\n\n    constructor() {\n        super([])\n        this.titleFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont2.bmp')\n        this.title = ResourceManager.cfg('Main', 'MissionBriefingText')\n        const dialogCfg = new DialogCfg(ResourceManager.cfg('Dialog'))\n        this.titleWindow = dialogCfg.titleWindow\n        this.textFont = ResourceManager.getBitmapFont('Interface/Fonts/MbriefFont.bmp')\n        this.textWindow = dialogCfg.textWindow\n        this.nextButtonCfg = {\n            buttonType: 'Next briefing paragraph',\n            relX: 394,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'NextButton640x480'),\n        }\n        this.backButtonCfg = {\n            buttonType: 'Previous briefing paragraph',\n            relX: 54,\n            relY: 214,\n            normalFile: ResourceManager.cfg('Main', 'BackArrow'),\n        }\n    }\n\n}\n","import { BriefingPanel } from '../gui/briefing/BriefingPanel'\nimport { OptionsPanel } from '../gui/overlay/OptionsPanel'\nimport { PausePanel } from '../gui/overlay/PausePanel'\nimport { ResourceManager } from '../../resource/ResourceManager'\nimport { MenuCfg } from '../../cfg/MenuCfg'\nimport { BriefingPanelCfg } from '../../cfg/BriefingPanelCfg'\nimport { KEY_EVENT, POINTER_EVENT } from '../../event/EventTypeEnum'\nimport { Panel } from '../gui/base/Panel'\nimport { GuiBaseLayer } from './GuiBaseLayer'\nimport { ObjectiveImageCfg } from '../../cfg/ObjectiveImageCfg'\nimport { DEV_MODE } from '../../main'\n\nexport class OverlayLayer extends GuiBaseLayer {\n\n    panelBriefing: BriefingPanel\n    panelOptions: OptionsPanel\n    panelPause: PausePanel\n\n    constructor() {\n        super()\n        this.panelPause = this.addPanel(new PausePanel(this, ResourceManager.getResource('PausedMenu') as MenuCfg))\n        this.panelOptions = this.addPanel(new OptionsPanel(this, ResourceManager.getResource('OptionsMenu') as MenuCfg))\n        this.panelBriefing = this.addPanel(new BriefingPanel(new BriefingPanelCfg()))\n        // link items\n        this.panelPause.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n        this.panelOptions.onRepeatBriefing = () => this.setActivePanel(this.panelBriefing)\n    }\n\n    setActivePanel(panel: Panel) {\n        this.panels.forEach(p => p !== panel && p.hide())\n        panel.show()\n        this.redraw()\n    }\n\n    setup(objectiveText: string, objectiveBackImgCfg: ObjectiveImageCfg) {\n        this.panelBriefing.setup(objectiveText, objectiveBackImgCfg)\n        if (!DEV_MODE) this.setActivePanel(this.panelBriefing)\n    }\n\n    handlePointerEvent(eventEnum: POINTER_EVENT, event: PointerEvent): boolean {\n        if (this.panels.every(p => p.hidden)) return false\n        return super.handlePointerEvent(eventEnum, event) || this.isActive() // catch em all\n    }\n\n    handleKeyEvent(eventEnum: KEY_EVENT, event: KeyboardEvent): boolean {\n        let result = false\n        const lEventKey = event.key.toLowerCase()\n        if (eventEnum === KEY_EVENT.UP) {\n            if (lEventKey === 'escape') {\n                if (this.panelBriefing.hidden && this.panelOptions.hidden) {\n                    if (this.panelPause.hidden) {\n                        // TODO actually pause the game\n                        this.setActivePanel(this.panelPause)\n                    } else {\n                        // TODO actually unpause the game\n                        this.panelPause.hide()\n                    }\n                    result = true\n                }\n            } else if (lEventKey === ' ') { // space\n                if (!this.panelBriefing.hidden) {\n                    this.panelBriefing.nextParagraph()\n                    result = true\n                }\n            }\n        }\n        return result\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { WorldManager } from '../scene/WorldManager'\nimport { SelectionLayer } from '../game/layer/SelectionLayer'\nimport { GameLayer } from '../game/layer/GameLayer'\nimport { GuiMainLayer } from '../game/layer/GuiMainLayer'\nimport { Supervisor } from '../game/Supervisor'\nimport { LevelEntryCfg } from '../cfg/LevelsCfg'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { iGet } from '../core/Util'\nimport { LevelObjectiveTextEntry } from '../resource/wadworker/ObjectiveTextParser'\nimport { OverlayLayer } from '../game/layer/OverlayLayer'\nimport { GameState } from '../game/model/GameState'\n\nexport class GameScreen extends BaseScreen {\n\n    onLevelEnd: () => void\n    gameLayer: GameLayer\n    selectionLayer: SelectionLayer\n    guiLayer: GuiMainLayer\n    overlayLayer: OverlayLayer\n    worldManager: WorldManager\n    jobSupervisor: Supervisor\n    levelName: string\n    levelConf: LevelEntryCfg\n\n    constructor() {\n        super()\n        this.gameLayer = this.addLayer(new GameLayer(), 0)\n        this.selectionLayer = this.addLayer(new SelectionLayer(), 10)\n        this.guiLayer = this.addLayer(new GuiMainLayer(), 20)\n        this.overlayLayer = this.addLayer(new OverlayLayer(), 30)\n        this.worldManager = new WorldManager(this.gameLayer.canvas)\n        this.gameLayer.setWorldManager(this.worldManager)\n        this.selectionLayer.setWorldManager(this.worldManager)\n        this.jobSupervisor = new Supervisor(this.worldManager)\n        // link layer\n        this.guiLayer.onOptionsShow = () => this.overlayLayer.panelOptions.show()\n        this.overlayLayer.panelBriefing.messagePanel = this.guiLayer.panelMessages\n        this.overlayLayer.panelPause.onAbortGame = () => this.onLevelEnd && this.onLevelEnd()\n        this.overlayLayer.panelPause.onRestartGame = () => this.restartLevel()\n    }\n\n    startLevel(levelName) {\n        this.levelName = levelName\n        this.levelConf = ResourceManager.getResource('Levels').levelsByName[this.levelName]\n        if (!this.levelConf) throw 'Could not find level configuration for \"' + this.levelName + '\"'\n        this.setupAndStartLevel()\n    }\n\n    restartLevel() {\n        this.hide()\n        GameState.reset()\n        this.setupAndStartLevel()\n    }\n\n    private setupAndStartLevel() {\n        console.log('Starting level ' + this.levelName + ' - ' + this.levelConf.fullName)\n        this.worldManager.setup(this.levelConf, this)\n        const objectiveText: LevelObjectiveTextEntry = iGet(ResourceManager.getResource(this.levelConf.objectiveText), this.levelName)\n        this.guiLayer.reset()\n        this.overlayLayer.setup(objectiveText.objective, this.levelConf.objectiveImage640x480)\n        this.show()\n    }\n\n    show() {\n        super.show()\n        this.worldManager.start()\n        this.jobSupervisor.start()\n    }\n\n    hide() {\n        this.worldManager.stop()\n        this.jobSupervisor.stop()\n        this.layers.forEach((l) => l.reset())\n        super.hide()\n    }\n\n    resize(width: number, height: number) {\n        super.resize(width, height)\n        if (this.worldManager) this.worldManager.resize(width, height)\n    }\n\n}\n","import { ResourceManager } from '../resource/ResourceManager'\nimport { MainMenuBaseItem } from './MainMenuBaseItem'\n\nexport class RewardScreenButton extends MainMenuBaseItem {\n\n    imgNormal: HTMLCanvasElement\n    imgHover: HTMLCanvasElement\n    imgPressed: HTMLCanvasElement\n    imgDisabled: HTMLCanvasElement\n    disabled: boolean = false\n    visible: boolean = true\n\n    constructor(conf: any) {\n        super()\n        let imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath;\n        [imgNormalFilepath, imgHoverFilepath, imgPressedFilepath, imgDisabledFilepath, this.x, this.y] = conf\n        this.imgNormal = ResourceManager.getImage(imgNormalFilepath)\n        this.imgHover = ResourceManager.getImage(imgHoverFilepath)\n        this.imgPressed = ResourceManager.getImage(imgPressedFilepath)\n        this.imgDisabled = ResourceManager.getImage(imgDisabledFilepath)\n        this.width = this.imgNormal.width\n        this.height = this.imgNormal.height\n    }\n\n    draw(context: CanvasRenderingContext2D) {\n        super.draw(context)\n        if (!this.visible) return\n        let img = this.imgNormal\n        if (this.disabled) {\n            img = this.imgDisabled\n        } else if (this.pressed) {\n            img = this.imgPressed\n        } else if (this.hover) {\n            img = this.imgHover\n        }\n        context.drawImage(img, this.x, this.y)\n    }\n\n}\n","import { BaseScreen } from './BaseScreen'\nimport { ResourceManager } from '../resource/ResourceManager'\nimport { ScaledLayer } from './ScreenLayer'\nimport { RewardCfg } from '../cfg/RewardCfg'\nimport { GameResultState, GameState } from '../game/model/GameState'\nimport { BitmapFont } from '../core/BitmapFont'\nimport { RewardScreenButton } from '../menu/RewardScreenButton'\nimport { MOUSE_BUTTON, POINTER_EVENT } from '../event/EventTypeEnum'\nimport { clearTimeoutSafe } from '../core/Util'\n\nexport class RewardScreen extends BaseScreen {\n\n    onAdvance: () => void\n    cfg: RewardCfg = null\n    titleFont: BitmapFont\n    resultsLayer: ScaledLayer\n    descriptionTextLayer: ScaledLayer\n    btnLayer: ScaledLayer\n    resultIndex: number = 0\n    resultLastIndex: number = 0\n    images: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    boxes: { img: HTMLCanvasElement, x: number, y: number }[] = []\n    fonts = {}\n    texts: HTMLCanvasElement[] = []\n    uncoverTimeout = null\n    btnSave: RewardScreenButton\n    btnAdvance: RewardScreenButton\n\n    constructor() {\n        super()\n        this.cfg = ResourceManager.getResource('Reward')\n        this.titleFont = ResourceManager.getBitmapFont(this.cfg.titleFont)\n        const backgroundImg = ResourceManager.getImage(this.cfg.wallpaper)\n        const backgroundLayer = this.addLayer(new ScaledLayer())\n        backgroundLayer.onRedraw = (context) => context.drawImage(backgroundImg, 0, 0)\n        this.cfg.images.forEach((img) => {\n            this.images.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        this.cfg.boxImages.forEach((img) => {\n            this.boxes.push({img: ResourceManager.getImage(img.filePath), x: img.x, y: img.y})\n        })\n        Object.keys(this.cfg.fonts).forEach((fontKey, index) => {\n            const font = ResourceManager.getBitmapFont(this.cfg.fonts[fontKey])\n            this.fonts[fontKey.toLowerCase()] = font\n            const txt = this.cfg.texts[index]\n            const labelFont = index < 9 ? font : ResourceManager.getBitmapFont(this.cfg.backFont)\n            this.texts.push(labelFont.createTextImage(txt.text))\n        })\n        this.resultsLayer = this.addLayer(new ScaledLayer())\n        this.resultsLayer.handlePointerEvent = ((eventType) => {\n            if (eventType === POINTER_EVENT.UP) {\n                this.uncoverTimeout = clearTimeoutSafe(this.uncoverTimeout)\n                this.uncoverTimeout = null\n                this.resultIndex = this.resultLastIndex\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n                this.redraw()\n                return true\n            }\n            return false\n        })\n        this.descriptionTextLayer = this.addLayer(new ScaledLayer(), 20)\n        this.btnLayer = this.addLayer(new ScaledLayer(), 50)\n        this.btnSave = new RewardScreenButton(this.cfg.saveButton)\n        this.btnSave.disabled = true\n        this.btnAdvance = new RewardScreenButton(this.cfg.advanceButton)\n        this.btnLayer.handlePointerEvent = ((eventType, event) => {\n            if (eventType === POINTER_EVENT.MOVE) {\n                const [sx, sy] = this.btnLayer.toScaledCoords(event.clientX, event.clientY)\n                this.btnSave.checkHover(sx, sy)\n                this.btnAdvance.checkHover(sx, sy)\n            } else if (eventType === POINTER_EVENT.DOWN) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    this.btnSave.checkSetPressed()\n                    this.btnAdvance.checkSetPressed()\n                }\n            } else if (eventType === POINTER_EVENT.UP) {\n                if (event.button === MOUSE_BUTTON.MAIN) {\n                    if (this.btnSave.pressed) {\n                        this.btnSave.setReleased()\n                        // TODO switch to save screen\n                    } else if (this.btnAdvance.pressed) {\n                        this.btnAdvance.setReleased()\n                        this.hide()\n                        this.onAdvance()\n                    }\n                }\n            }\n            if (this.btnSave.needsRedraw || this.btnAdvance.needsRedraw) this.redraw()\n            return false\n        })\n        this.btnLayer.onRedraw = (context) => {\n            this.btnSave.draw(context)\n            this.btnAdvance.draw(context)\n        }\n    }\n\n    show() {\n        this.resultIndex = 0\n        this.btnSave.visible = false\n        this.btnAdvance.visible = false\n        this.uncoverResult()\n        const levelFullNameImg = this.titleFont.createTextImage(GameState.levelFullName)\n        let resultText = this.cfg.quitText\n        this.resultLastIndex = this.images.length - 2\n        if (GameState.resultState === GameResultState.COMPLETE) {\n            resultText = this.cfg.completeText\n            this.resultLastIndex = this.images.length - 1\n        } else if (GameState.resultState === GameResultState.FAILED) {\n            resultText = this.cfg.failedText\n        }\n        const resultValues = []\n        resultValues.push(this.fonts['crystals'].createTextImage(this.percentString(GameState.numCrystal, GameState.neededCrystals)))\n        resultValues.push(this.fonts['ore'].createTextImage(this.percentString(GameState.numOre, GameState.totalOres)))\n        resultValues.push(this.fonts['diggable'].createTextImage(this.percentString(GameState.remainingDiggables, GameState.totalDiggables, true)))\n        resultValues.push(this.fonts['constructions'].createTextImage(GameState.buildings.length.toString()))\n        resultValues.push(this.fonts['caverns'].createTextImage(this.percentString(GameState.discoveredCaverns, GameState.totalCaverns)))\n        resultValues.push(this.fonts['figures'].createTextImage(this.percentString(GameState.raiders.length, GameState.getMaxRaiders())))\n        resultValues.push(this.fonts['rockmonsters'].createTextImage(this.percentString(0))) // TODO show defence report, is either 0% or 100%\n        resultValues.push(this.fonts['oxygen'].createTextImage(this.percentString(GameState.airlevel)))\n        resultValues.push(this.fonts['timer'].createTextImage(this.timeString(GameState.gameTimeSeconds)))\n        resultValues.push(this.fonts['score'].createTextImage(this.percentString(GameState.score)))\n        const gameResultTextImg = this.titleFont.createTextImage(resultText)\n        this.resultsLayer.onRedraw = (context) => {\n            context.clearRect(0, 0, this.resultsLayer.fixedWidth, this.resultsLayer.fixedHeight)\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const img = this.images[c]\n                if (img) context.drawImage(img.img, img.x, img.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const box = this.boxes[c]\n                if (box) context.drawImage(box.img, box.x, box.y)\n            }\n            for (let c = 0; c <= this.resultIndex; c++) {\n                const txt = this.cfg.texts[c]\n                const text = resultValues[c]\n                if (text) context.drawImage(text, txt.x - text.width / 2, txt.y)\n            }\n            context.drawImage(levelFullNameImg, this.resultsLayer.fixedWidth / 2 - levelFullNameImg.width / 2, this.cfg.vertSpacing - levelFullNameImg.height / 2)\n            context.drawImage(gameResultTextImg, this.resultsLayer.fixedWidth / 2 - gameResultTextImg.width / 2, this.cfg.vertSpacing + levelFullNameImg.height / 2)\n        }\n        this.descriptionTextLayer.onRedraw = (context) => {\n            const descriptionTextImg = this.texts[this.resultIndex]\n            context.clearRect(0, this.cfg.textPos[1], this.descriptionTextLayer.fixedWidth, this.descriptionTextLayer.fixedHeight - this.cfg.textPos[1])\n            const tx = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[0] : 305\n            const ty = this.resultIndex !== this.images.length - 1 ? this.cfg.textPos[1] : 195\n            context.drawImage(descriptionTextImg, tx - descriptionTextImg.width / 2, ty)\n        }\n        super.show()\n    }\n\n    percentString(actual, max = 1, lessIsMore: boolean = false) {\n        if (max === 0) max = 1\n        let value = Math.round(Math.max(Math.min(actual / max, 1), 0) * 100)\n        if (lessIsMore) value = 100 - value\n        return value.toString() + '%'\n    }\n\n    padLeft(value: string, padding = '0', length = 2) {\n        while (value.length < length) value = padding + value\n        return value\n    }\n\n    timeString(seconds: number) {\n        const ss = this.padLeft((seconds % 60).toString())\n        const minutes = Math.floor(seconds / 60)\n        const mm = this.padLeft(((minutes % 60).toString()))\n        const hh = this.padLeft((Math.floor(minutes / 60).toString()))\n        return hh + ':' + mm + ':' + ss\n    }\n\n    uncoverResult() {\n        this.uncoverTimeout = setTimeout(() => {\n            this.uncoverTimeout = null\n            this.resultIndex++\n            if (this.resultIndex < this.resultLastIndex) {\n                this.uncoverResult()\n            } else {\n                this.btnSave.visible = true\n                this.btnAdvance.visible = true\n            }\n            this.redraw()\n        }, this.cfg.timer * 1000)\n    }\n\n}\n","import { ResourceManager } from './resource/ResourceManager'\nimport { LoadingScreen } from './screen/LoadingScreen'\nimport { MainMenuScreen } from './screen/MainMenuScreen'\nimport { GameScreen } from './screen/GameScreen'\nimport { RewardScreen } from './screen/RewardScreen'\nimport { GameState } from './game/model/GameState'\nimport { WadFileSelectionModal } from '../site/modal/WadFileSelectionModal'\n\n// define constants\n\nexport const DEV_MODE = process.env.WEBPACK_MODE === 'development'\nif (DEV_MODE) console.warn('DEV MODE ACTIVE')\n\nexport const JOB_SCHEDULE_INTERVAL = 1000 // milliseconds\nexport const CHECK_CLEARRUBBLE_INTERVAL = 5000 // milliseconds\nexport const JOB_ACTION_RANGE = 5\nexport const CHECK_SPANW_RAIDER_TIMER = 1000 // milliseconds\nexport const MAX_RAIDER_BASE = 12\nexport const ADDITIONAL_RAIDER_PER_SUPPORT = 10\n\nexport const PANEL_ANIMATION_MULTIPLIER = 3\nexport const HEIGHT_MULTIPLER = 0.1\nexport const SEQUENCE_TEXTURE_FRAMERATE = 5\n\n// native constants (do not change)\n\nexport const SPRITE_RESOLUTION_WIDTH = 640\nexport const SPRITE_RESOLUTION_HEIGHT = 480\nexport const TILESIZE = 40\nexport const NATIVE_FRAMERATE = 30\n\n// setup and link all components\n\nconst loadingScreen = new LoadingScreen()\nconst wadfileSelectModal = new WadFileSelectionModal('game-container')\n\nwadfileSelectModal.onStart = (wad0Url, wad1Url) => {\n    ResourceManager.startLoadingFromUrl(wad0Url, wad1Url)\n}\nResourceManager.onMessage = (msg: string) => {\n    loadingScreen.setLoadingMessage(msg)\n}\nResourceManager.onCacheMissed = () => {\n    wadfileSelectModal.show()\n}\nResourceManager.onInitialLoad = (totalResources: number) => {\n    wadfileSelectModal.hide()\n    loadingScreen.enableGraphicMode(totalResources)\n}\nResourceManager.onAssetLoaded = () => {\n    loadingScreen.increaseLoadingState()\n}\nResourceManager.onLoadDone = () => {\n    // complete setup\n    const mainMenuScreen = new MainMenuScreen()\n    const gameScreen = new GameScreen()\n    const rewardScreen = new RewardScreen()\n\n    mainMenuScreen.onLevelSelected = (levelName) => {\n        try {\n            gameScreen.startLevel(levelName)\n        } catch (e) {\n            console.error('Could not load level: ' + levelName, e)\n            gameScreen.hide()\n            mainMenuScreen.showLevelSelection()\n        }\n    }\n    gameScreen.onLevelEnd = () => {\n        gameScreen.hide()\n        rewardScreen.show()\n    }\n    rewardScreen.onAdvance = () => {\n        GameState.reset()\n        mainMenuScreen.showLevelSelection()\n    }\n\n    // setup complete\n    loadingScreen.hide()\n    const params = new URLSearchParams(window.location.search)\n    const entry = params.get('entry')\n    if (DEV_MODE && entry) {\n        GameState.numOre = Number(params.get('numOre')) || 0\n        GameState.numCrystal = Number(params.get('numCrystal')) || 0\n        if (entry === 'level') mainMenuScreen.showLevelSelection()\n        else if (entry === 'reward') rewardScreen.show()\n        else if (entry) mainMenuScreen.selectLevel(entry)\n    } else {\n        mainMenuScreen.showMainMenu()\n    }\n}\n\n// start the game engine with loading resources\n\nloadingScreen.show()\nResourceManager.startLoadingFromCache()\n"],"sourceRoot":""}